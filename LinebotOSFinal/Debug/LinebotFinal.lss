
LinebotFinal.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006274  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000178  00802000  00006274  00006308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000055a  00802178  00802178  00006480  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00006480  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000064dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000960  00000000  00000000  0000651c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000128d2  00000000  00000000  00006e7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000058e0  00000000  00000000  0001974e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00007755  00000000  00000000  0001f02e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000020e0  00000000  00000000  00026784  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004bbe  00000000  00000000  00028864  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000d0c6  00000000  00000000  0002d422  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c98  00000000  00000000  0003a4e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a2 01 	jmp	0x344	; 0x344 <__ctors_end>
       4:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
       8:	0c 94 12 04 	jmp	0x824	; 0x824 <__vector_2>
       c:	0c 94 99 04 	jmp	0x932	; 0x932 <__vector_3>
      10:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      14:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      18:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      1c:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      20:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      24:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      28:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      2c:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      30:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      34:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      38:	0c 94 53 0e 	jmp	0x1ca6	; 0x1ca6 <__vector_14>
      3c:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      40:	0c 94 c7 0e 	jmp	0x1d8e	; 0x1d8e <__vector_16>
      44:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      48:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      4c:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      50:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      54:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      58:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      5c:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      60:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      64:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      68:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      6c:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      70:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      74:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      78:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      7c:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      80:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      84:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      88:	0c 94 32 02 	jmp	0x464	; 0x464 <__vector_34>
      8c:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      90:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      94:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      98:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      9c:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      a0:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      a4:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      a8:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      ac:	0c 94 20 05 	jmp	0xa40	; 0xa40 <__vector_43>
      b0:	0c 94 a7 05 	jmp	0xb4e	; 0xb4e <__vector_44>
      b4:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      b8:	0c 94 52 0a 	jmp	0x14a4	; 0x14a4 <__vector_46>
      bc:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      c0:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      c4:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      c8:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      cc:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      d0:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      d4:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      d8:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      dc:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      e0:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      e4:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      e8:	0c 94 72 0b 	jmp	0x16e4	; 0x16e4 <__vector_58>
      ec:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      f0:	0c 94 2b 0b 	jmp	0x1656	; 0x1656 <__vector_60>
      f4:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      f8:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      fc:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
     100:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
     104:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
     108:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
     10c:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
     110:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
     114:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
     118:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
     11c:	0c 94 c5 01 	jmp	0x38a	; 0x38a <__vector_71>
     120:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
     124:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
     128:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
     12c:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
     130:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
     134:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
     138:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
     13c:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
     140:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
     144:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
     148:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
     14c:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
     150:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
     154:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
     158:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
     15c:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
     160:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
     164:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
     168:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
     16c:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
     170:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
     174:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
     178:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
     17c:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
     180:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
     184:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
     188:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
     18c:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
     190:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
     194:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
     198:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
     19c:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
     1a0:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
     1a4:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
     1a8:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
     1ac:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
     1b0:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
     1b4:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
     1b8:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
     1bc:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
     1c0:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
     1c4:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
     1c8:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
     1cc:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
     1d0:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
     1d4:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
     1d8:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
     1dc:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
     1e0:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
     1e4:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
     1e8:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
     1ec:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
     1f0:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
     1f4:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
     1f8:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
     1fc:	05 a8       	ldd	r0, Z+53	; 0x35
     1fe:	4c cd       	rjmp	.-1384   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
     200:	b2 d4       	rcall	.+2404   	; 0xb66 <__vector_44+0x18>
     202:	4e b9       	out	0x0e, r20	; 14
     204:	38 36       	cpi	r19, 0x68	; 104
     206:	a9 02       	muls	r26, r25
     208:	0c 50       	subi	r16, 0x0C	; 12
     20a:	b9 91       	ld	r27, Y+
     20c:	86 88       	ldd	r8, Z+22	; 0x16
     20e:	08 3c       	cpi	r16, 0xC8	; 200
     210:	a6 aa       	std	Z+54, r10	; 0x36
     212:	aa 2a       	or	r10, r26
     214:	be 00       	.word	0x00be	; ????
     216:	00 00       	nop
     218:	80 3f       	cpi	r24, 0xF0	; 240

0000021a <__trampolines_start>:
     21a:	0c 94 e6 1f 	jmp	0x3fcc	; 0x3fcc <WorkerIPS>
     21e:	0c 94 e7 14 	jmp	0x29ce	; 0x29ce <prvIdleTask>
     222:	0c 94 d2 0a 	jmp	0x15a4	; 0x15a4 <stdio_putchar>
     226:	0c 94 52 27 	jmp	0x4ea4	; 0x4ea4 <WorkerStartup>
     22a:	0c 94 08 1f 	jmp	0x3e10	; 0x3e10 <WorkerGyro>
     22e:	0c 94 dc 26 	jmp	0x4db8	; 0x4db8 <WorkerMotorSpeed>
     232:	0c 94 d5 22 	jmp	0x45aa	; 0x45aa <WorkerMotion>
     236:	0c 94 bc 0a 	jmp	0x1578	; 0x1578 <stdio_getchar>
     23a:	0c 94 cb 1d 	jmp	0x3b96	; 0x3b96 <WorkerAcc>
     23e:	0c 94 1e 25 	jmp	0x4a3c	; 0x4a3c <WorkerMotorPos>

00000242 <__trampolines_end>:
     242:	6e 61       	ori	r22, 0x1E	; 30
     244:	6e 00       	.word	0x006e	; ????

00000246 <__c.2332>:
     246:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     256:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     266:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     276:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     286:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     296:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     2a6:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     2b6:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     2c6:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     2d6:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     2e6:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     2f6:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     306:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     316:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     326:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     336:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000344 <__ctors_end>:
     344:	11 24       	eor	r1, r1
     346:	1f be       	out	0x3f, r1	; 63
     348:	cf ef       	ldi	r28, 0xFF	; 255
     34a:	cd bf       	out	0x3d, r28	; 61
     34c:	df e9       	ldi	r29, 0x9F	; 159
     34e:	de bf       	out	0x3e, r29	; 62
     350:	00 e0       	ldi	r16, 0x00	; 0
     352:	0c bf       	out	0x3c, r16	; 60

00000354 <__do_copy_data>:
     354:	11 e2       	ldi	r17, 0x21	; 33
     356:	a0 e0       	ldi	r26, 0x00	; 0
     358:	b0 e2       	ldi	r27, 0x20	; 32
     35a:	e4 e7       	ldi	r30, 0x74	; 116
     35c:	f2 e6       	ldi	r31, 0x62	; 98
     35e:	00 e0       	ldi	r16, 0x00	; 0
     360:	0b bf       	out	0x3b, r16	; 59
     362:	02 c0       	rjmp	.+4      	; 0x368 <__do_copy_data+0x14>
     364:	07 90       	elpm	r0, Z+
     366:	0d 92       	st	X+, r0
     368:	a8 37       	cpi	r26, 0x78	; 120
     36a:	b1 07       	cpc	r27, r17
     36c:	d9 f7       	brne	.-10     	; 0x364 <__do_copy_data+0x10>

0000036e <__do_clear_bss>:
     36e:	26 e2       	ldi	r18, 0x26	; 38
     370:	a8 e7       	ldi	r26, 0x78	; 120
     372:	b1 e2       	ldi	r27, 0x21	; 33
     374:	01 c0       	rjmp	.+2      	; 0x378 <.do_clear_bss_start>

00000376 <.do_clear_bss_loop>:
     376:	1d 92       	st	X+, r1

00000378 <.do_clear_bss_start>:
     378:	a2 3d       	cpi	r26, 0xD2	; 210
     37a:	b2 07       	cpc	r27, r18
     37c:	e1 f7       	brne	.-8      	; 0x376 <.do_clear_bss_loop>
     37e:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <main>
     382:	0c 94 38 31 	jmp	0x6270	; 0x6270 <_exit>

00000386 <__bad_interrupt>:
     386:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000038a <__vector_71>:
	xSemaphoreGive(AdcBusySema);
	return Res;
}

ISR(ADCA_CH0_vect)
{
     38a:	1f 92       	push	r1
     38c:	0f 92       	push	r0
     38e:	0f b6       	in	r0, 0x3f	; 63
     390:	0f 92       	push	r0
     392:	11 24       	eor	r1, r1
     394:	0b b6       	in	r0, 0x3b	; 59
     396:	0f 92       	push	r0
     398:	2f 93       	push	r18
     39a:	3f 93       	push	r19
     39c:	4f 93       	push	r20
     39e:	5f 93       	push	r21
     3a0:	6f 93       	push	r22
     3a2:	7f 93       	push	r23
     3a4:	8f 93       	push	r24
     3a6:	9f 93       	push	r25
     3a8:	af 93       	push	r26
     3aa:	bf 93       	push	r27
     3ac:	ef 93       	push	r30
     3ae:	ff 93       	push	r31
     3b0:	cf 93       	push	r28
     3b2:	df 93       	push	r29
     3b4:	1f 92       	push	r1
     3b6:	cd b7       	in	r28, 0x3d	; 61
     3b8:	de b7       	in	r29, 0x3e	; 62
	BaseType_t xHigherPriorityTaskWoken=pdFALSE;
     3ba:	19 82       	std	Y+1, r1	; 0x01
	xSemaphoreGiveFromISR(ConversionCompleteSema,&xHigherPriorityTaskWoken);
     3bc:	be 01       	movw	r22, r28
     3be:	6f 5f       	subi	r22, 0xFF	; 255
     3c0:	7f 4f       	sbci	r23, 0xFF	; 255
     3c2:	80 91 aa 26 	lds	r24, 0x26AA	; 0x8026aa <ConversionCompleteSema>
     3c6:	90 91 ab 26 	lds	r25, 0x26AB	; 0x8026ab <ConversionCompleteSema+0x1>
     3ca:	0e 94 c0 11 	call	0x2380	; 0x2380 <xQueueGiveFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
     3ce:	89 81       	ldd	r24, Y+1	; 0x01
     3d0:	81 11       	cpse	r24, r1
     3d2:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <vPortYieldISR>
     3d6:	0f 90       	pop	r0
     3d8:	df 91       	pop	r29
     3da:	cf 91       	pop	r28
     3dc:	ff 91       	pop	r31
     3de:	ef 91       	pop	r30
     3e0:	bf 91       	pop	r27
     3e2:	af 91       	pop	r26
     3e4:	9f 91       	pop	r25
     3e6:	8f 91       	pop	r24
     3e8:	7f 91       	pop	r23
     3ea:	6f 91       	pop	r22
     3ec:	5f 91       	pop	r21
     3ee:	4f 91       	pop	r20
     3f0:	3f 91       	pop	r19
     3f2:	2f 91       	pop	r18
     3f4:	0f 90       	pop	r0
     3f6:	0b be       	out	0x3b, r0	; 59
     3f8:	0f 90       	pop	r0
     3fa:	0f be       	out	0x3f, r0	; 63
     3fc:	0f 90       	pop	r0
     3fe:	1f 90       	pop	r1
     400:	18 95       	reti

00000402 <DriverCursorstickInit>:
	BaseType_t res;
	res=xQueueReceive(CursorstickQueue,&ButtonState,BlockTime);
	if (res==pdTRUE) return ButtonState;
	else return 0;

}
     402:	e0 e2       	ldi	r30, 0x20	; 32
     404:	f6 e0       	ldi	r31, 0x06	; 6
     406:	98 ef       	ldi	r25, 0xF8	; 248
     408:	92 83       	std	Z+2, r25	; 0x02
     40a:	89 e5       	ldi	r24, 0x59	; 89
     40c:	83 8b       	std	Z+19, r24	; 0x13
     40e:	84 8b       	std	Z+20, r24	; 0x14
     410:	85 8b       	std	Z+21, r24	; 0x15
     412:	86 8b       	std	Z+22, r24	; 0x16
     414:	87 8b       	std	Z+23, r24	; 0x17
     416:	92 87       	std	Z+10, r25	; 0x0a
     418:	83 e0       	ldi	r24, 0x03	; 3
     41a:	81 87       	std	Z+9, r24	; 0x09
     41c:	40 e0       	ldi	r20, 0x00	; 0
     41e:	61 e0       	ldi	r22, 0x01	; 1
     420:	8a e0       	ldi	r24, 0x0A	; 10
     422:	0e 94 38 10 	call	0x2070	; 0x2070 <xQueueGenericCreate>
     426:	80 93 7c 21 	sts	0x217C, r24	; 0x80217c <CursorstickQueue>
     42a:	90 93 7d 21 	sts	0x217D, r25	; 0x80217d <CursorstickQueue+0x1>
     42e:	08 95       	ret

00000430 <DriverCursorstickGet>:
     430:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x700628>
     434:	83 ff       	sbrs	r24, 3
     436:	12 c0       	rjmp	.+36     	; 0x45c <DriverCursorstickGet+0x2c>
     438:	80 e1       	ldi	r24, 0x10	; 16
     43a:	90 91 28 06 	lds	r25, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x700628>
     43e:	94 fd       	sbrc	r25, 4
     440:	88 60       	ori	r24, 0x08	; 8
     442:	90 91 28 06 	lds	r25, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x700628>
     446:	95 fd       	sbrc	r25, 5
     448:	84 60       	ori	r24, 0x04	; 4
     44a:	90 91 28 06 	lds	r25, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x700628>
     44e:	96 fd       	sbrc	r25, 6
     450:	82 60       	ori	r24, 0x02	; 2
     452:	90 91 28 06 	lds	r25, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x700628>
     456:	97 fd       	sbrc	r25, 7
     458:	03 c0       	rjmp	.+6      	; 0x460 <DriverCursorstickGet+0x30>
     45a:	08 95       	ret
     45c:	80 e0       	ldi	r24, 0x00	; 0
     45e:	ed cf       	rjmp	.-38     	; 0x43a <DriverCursorstickGet+0xa>
     460:	81 60       	ori	r24, 0x01	; 1
     462:	08 95       	ret

00000464 <__vector_34>:

ISR (PORTB_INT0_vect)
{
     464:	1f 92       	push	r1
     466:	0f 92       	push	r0
     468:	0f b6       	in	r0, 0x3f	; 63
     46a:	0f 92       	push	r0
     46c:	11 24       	eor	r1, r1
     46e:	0b b6       	in	r0, 0x3b	; 59
     470:	0f 92       	push	r0
     472:	cf 92       	push	r12
     474:	df 92       	push	r13
     476:	ef 92       	push	r14
     478:	ff 92       	push	r15
     47a:	0f 93       	push	r16
     47c:	1f 93       	push	r17
     47e:	2f 93       	push	r18
     480:	3f 93       	push	r19
     482:	4f 93       	push	r20
     484:	5f 93       	push	r21
     486:	6f 93       	push	r22
     488:	7f 93       	push	r23
     48a:	8f 93       	push	r24
     48c:	9f 93       	push	r25
     48e:	af 93       	push	r26
     490:	bf 93       	push	r27
     492:	ef 93       	push	r30
     494:	ff 93       	push	r31
     496:	cf 93       	push	r28
     498:	df 93       	push	r29
     49a:	1f 92       	push	r1
     49c:	1f 92       	push	r1
     49e:	cd b7       	in	r28, 0x3d	; 61
     4a0:	de b7       	in	r29, 0x3e	; 62
	printf("wakey wakey");
     4a2:	86 e1       	ldi	r24, 0x16	; 22
     4a4:	90 e2       	ldi	r25, 0x20	; 32
     4a6:	9f 93       	push	r25
     4a8:	8f 93       	push	r24
     4aa:	0e 94 96 30 	call	0x612c	; 0x612c <printf>
	DriverPowerVccAuxSet(1);
     4ae:	81 e0       	ldi	r24, 0x01	; 1
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	0e 94 09 09 	call	0x1212	; 0x1212 <DriverPowerVccAuxSet>
	PMIC.CTRL |= 0b111;
     4b6:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     4ba:	87 60       	ori	r24, 0x07	; 7
     4bc:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	static uint32_t LastIntTime=0;
	uint32_t CurTime;
	uint8_t ButtonState;
	BaseType_t xHigherPriorityTaskWoken=pdFALSE;
     4c0:	19 82       	std	Y+1, r1	; 0x01
	
	CurTime=portGET_RUN_TIME_COUNTER_VALUE();
     4c2:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
     4c6:	90 91 21 08 	lds	r25, 0x0821	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
     4ca:	c0 90 c0 26 	lds	r12, 0x26C0	; 0x8026c0 <StatsTimer>
     4ce:	d0 90 c1 26 	lds	r13, 0x26C1	; 0x8026c1 <StatsTimer+0x1>
     4d2:	e0 90 c2 26 	lds	r14, 0x26C2	; 0x8026c2 <StatsTimer+0x2>
     4d6:	f0 90 c3 26 	lds	r15, 0x26C3	; 0x8026c3 <StatsTimer+0x3>
     4da:	c8 0e       	add	r12, r24
     4dc:	d9 1e       	adc	r13, r25
     4de:	e1 1c       	adc	r14, r1
     4e0:	f1 1c       	adc	r15, r1
	ButtonState=DriverCursorstickGet();
     4e2:	0e 94 18 02 	call	0x430	; 0x430 <DriverCursorstickGet>
     4e6:	8a 83       	std	Y+2, r24	; 0x02
	
	if ((CurTime-LastIntTime)>CURSOR_MIN_INTERVAL) //debounce
     4e8:	40 91 78 21 	lds	r20, 0x2178	; 0x802178 <__data_end>
     4ec:	50 91 79 21 	lds	r21, 0x2179	; 0x802179 <__data_end+0x1>
     4f0:	60 91 7a 21 	lds	r22, 0x217A	; 0x80217a <__data_end+0x2>
     4f4:	70 91 7b 21 	lds	r23, 0x217B	; 0x80217b <__data_end+0x3>
     4f8:	97 01       	movw	r18, r14
     4fa:	86 01       	movw	r16, r12
     4fc:	04 1b       	sub	r16, r20
     4fe:	15 0b       	sbc	r17, r21
     500:	26 0b       	sbc	r18, r22
     502:	37 0b       	sbc	r19, r23
     504:	b9 01       	movw	r22, r18
     506:	a8 01       	movw	r20, r16
     508:	0f 90       	pop	r0
     50a:	0f 90       	pop	r0
     50c:	41 30       	cpi	r20, 0x01	; 1
     50e:	58 4a       	sbci	r21, 0xA8	; 168
     510:	61 46       	sbci	r22, 0x61	; 97
     512:	71 05       	cpc	r23, r1
     514:	10 f0       	brcs	.+4      	; 0x51a <__vector_34+0xb6>
		if (ButtonState>0) 
     516:	81 11       	cpse	r24, r1
     518:	21 c0       	rjmp	.+66     	; 0x55c <__vector_34+0xf8>
		{
			xQueueSendToBackFromISR(CursorstickQueue,&ButtonState,&xHigherPriorityTaskWoken);
			LastIntTime=CurTime;
		}
		
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
     51a:	89 81       	ldd	r24, Y+1	; 0x01
     51c:	81 11       	cpse	r24, r1
     51e:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <vPortYieldISR>
     522:	0f 90       	pop	r0
     524:	0f 90       	pop	r0
     526:	df 91       	pop	r29
     528:	cf 91       	pop	r28
     52a:	ff 91       	pop	r31
     52c:	ef 91       	pop	r30
     52e:	bf 91       	pop	r27
     530:	af 91       	pop	r26
     532:	9f 91       	pop	r25
     534:	8f 91       	pop	r24
     536:	7f 91       	pop	r23
     538:	6f 91       	pop	r22
     53a:	5f 91       	pop	r21
     53c:	4f 91       	pop	r20
     53e:	3f 91       	pop	r19
     540:	2f 91       	pop	r18
     542:	1f 91       	pop	r17
     544:	0f 91       	pop	r16
     546:	ff 90       	pop	r15
     548:	ef 90       	pop	r14
     54a:	df 90       	pop	r13
     54c:	cf 90       	pop	r12
     54e:	0f 90       	pop	r0
     550:	0b be       	out	0x3b, r0	; 59
     552:	0f 90       	pop	r0
     554:	0f be       	out	0x3f, r0	; 63
     556:	0f 90       	pop	r0
     558:	1f 90       	pop	r1
     55a:	18 95       	reti
	ButtonState=DriverCursorstickGet();
	
	if ((CurTime-LastIntTime)>CURSOR_MIN_INTERVAL) //debounce
		if (ButtonState>0) 
		{
			xQueueSendToBackFromISR(CursorstickQueue,&ButtonState,&xHigherPriorityTaskWoken);
     55c:	20 e0       	ldi	r18, 0x00	; 0
     55e:	ae 01       	movw	r20, r28
     560:	4f 5f       	subi	r20, 0xFF	; 255
     562:	5f 4f       	sbci	r21, 0xFF	; 255
     564:	be 01       	movw	r22, r28
     566:	6e 5f       	subi	r22, 0xFE	; 254
     568:	7f 4f       	sbci	r23, 0xFF	; 255
     56a:	80 91 7c 21 	lds	r24, 0x217C	; 0x80217c <CursorstickQueue>
     56e:	90 91 7d 21 	lds	r25, 0x217D	; 0x80217d <CursorstickQueue+0x1>
     572:	0e 94 65 11 	call	0x22ca	; 0x22ca <xQueueGenericSendFromISR>
			LastIntTime=CurTime;
     576:	c0 92 78 21 	sts	0x2178, r12	; 0x802178 <__data_end>
     57a:	d0 92 79 21 	sts	0x2179, r13	; 0x802179 <__data_end+0x1>
     57e:	e0 92 7a 21 	sts	0x217A, r14	; 0x80217a <__data_end+0x2>
     582:	f0 92 7b 21 	sts	0x217B, r15	; 0x80217b <__data_end+0x3>
     586:	c9 cf       	rjmp	.-110    	; 0x51a <__vector_34+0xb6>

00000588 <DbgPrint>:
#include "DriverDbgUSART.h"


void DbgPrint(char *Text)
{
     588:	dc 01       	movw	r26, r24
}

void DbgPrintn(char *Text,int n)
{
	static int i;
	i=0;
     58a:	10 92 81 21 	sts	0x2181, r1	; 0x802181 <i.3624>
     58e:	10 92 82 21 	sts	0x2182, r1	; 0x802182 <i.3624+0x1>
	while (*Text!=0 && (i<n || n==0))
     592:	9c 91       	ld	r25, X
     594:	99 23       	and	r25, r25
     596:	b1 f0       	breq	.+44     	; 0x5c4 <DbgPrint+0x3c>
     598:	fd 01       	movw	r30, r26
     59a:	31 96       	adiw	r30, 0x01	; 1
	{
		USART.DATA = *Text;
		while (!(USART.STATUS & 0b01000000));
		USART.STATUS=0b01000000;
     59c:	80 e4       	ldi	r24, 0x40	; 64
{
	static int i;
	i=0;
	while (*Text!=0 && (i<n || n==0))
	{
		USART.DATA = *Text;
     59e:	90 93 a0 0a 	sts	0x0AA0, r25	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x700aa0>
		while (!(USART.STATUS & 0b01000000));
     5a2:	90 91 a1 0a 	lds	r25, 0x0AA1	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x700aa1>
     5a6:	96 ff       	sbrs	r25, 6
     5a8:	fc cf       	rjmp	.-8      	; 0x5a2 <DbgPrint+0x1a>
		USART.STATUS=0b01000000;
     5aa:	80 93 a1 0a 	sts	0x0AA1, r24	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x700aa1>
     5ae:	9f 01       	movw	r18, r30
     5b0:	2a 1b       	sub	r18, r26
     5b2:	3b 0b       	sbc	r19, r27

void DbgPrintn(char *Text,int n)
{
	static int i;
	i=0;
	while (*Text!=0 && (i<n || n==0))
     5b4:	91 91       	ld	r25, Z+
     5b6:	91 11       	cpse	r25, r1
     5b8:	f2 cf       	rjmp	.-28     	; 0x59e <DbgPrint+0x16>
     5ba:	20 93 81 21 	sts	0x2181, r18	; 0x802181 <i.3624>
     5be:	30 93 82 21 	sts	0x2182, r19	; 0x802182 <i.3624+0x1>
     5c2:	08 95       	ret
     5c4:	08 95       	ret

000005c6 <DbgPrintn>:
{
	DbgPrintn(Text,0);	
}

void DbgPrintn(char *Text,int n)
{
     5c6:	fc 01       	movw	r30, r24
	static int i;
	i=0;
     5c8:	10 92 81 21 	sts	0x2181, r1	; 0x802181 <i.3624>
     5cc:	10 92 82 21 	sts	0x2182, r1	; 0x802182 <i.3624+0x1>
	while (*Text!=0 && (i<n || n==0))
     5d0:	90 81       	ld	r25, Z
     5d2:	99 23       	and	r25, r25
     5d4:	e1 f0       	breq	.+56     	; 0x60e <DbgPrintn+0x48>
     5d6:	31 96       	adiw	r30, 0x01	; 1
     5d8:	20 e0       	ldi	r18, 0x00	; 0
     5da:	30 e0       	ldi	r19, 0x00	; 0
	{
		USART.DATA = *Text;
		while (!(USART.STATUS & 0b01000000));
		USART.STATUS=0b01000000;
     5dc:	80 e4       	ldi	r24, 0x40	; 64

void DbgPrintn(char *Text,int n)
{
	static int i;
	i=0;
	while (*Text!=0 && (i<n || n==0))
     5de:	26 17       	cp	r18, r22
     5e0:	37 07       	cpc	r19, r23
     5e2:	1c f0       	brlt	.+6      	; 0x5ea <DbgPrintn+0x24>
     5e4:	61 15       	cp	r22, r1
     5e6:	71 05       	cpc	r23, r1
     5e8:	69 f4       	brne	.+26     	; 0x604 <DbgPrintn+0x3e>
	{
		USART.DATA = *Text;
     5ea:	90 93 a0 0a 	sts	0x0AA0, r25	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x700aa0>
		while (!(USART.STATUS & 0b01000000));
     5ee:	90 91 a1 0a 	lds	r25, 0x0AA1	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x700aa1>
     5f2:	96 ff       	sbrs	r25, 6
     5f4:	fc cf       	rjmp	.-8      	; 0x5ee <DbgPrintn+0x28>
		USART.STATUS=0b01000000;
     5f6:	80 93 a1 0a 	sts	0x0AA1, r24	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x700aa1>
		Text++;
		i++;
     5fa:	2f 5f       	subi	r18, 0xFF	; 255
     5fc:	3f 4f       	sbci	r19, 0xFF	; 255

void DbgPrintn(char *Text,int n)
{
	static int i;
	i=0;
	while (*Text!=0 && (i<n || n==0))
     5fe:	91 91       	ld	r25, Z+
     600:	91 11       	cpse	r25, r1
     602:	ed cf       	rjmp	.-38     	; 0x5de <DbgPrintn+0x18>
     604:	20 93 81 21 	sts	0x2181, r18	; 0x802181 <i.3624>
     608:	30 93 82 21 	sts	0x2182, r19	; 0x802182 <i.3624+0x1>
     60c:	08 95       	ret
     60e:	08 95       	ret

00000610 <DbgPrintInt>:
		i++;
	}
}

void DbgPrintInt(uint16_t Data)
{
     610:	cf 92       	push	r12
     612:	df 92       	push	r13
     614:	ef 92       	push	r14
     616:	ff 92       	push	r15
     618:	0f 93       	push	r16
     61a:	1f 93       	push	r17
     61c:	cf 93       	push	r28
     61e:	df 93       	push	r29
     620:	7c 01       	movw	r14, r24
	//Use statics to minimize stack usage
	static int i;
	static uint8_t pf;
	
	i=10000;
     622:	80 e1       	ldi	r24, 0x10	; 16
     624:	97 e2       	ldi	r25, 0x27	; 39
     626:	80 93 7f 21 	sts	0x217F, r24	; 0x80217f <i.3634>
     62a:	90 93 80 21 	sts	0x2180, r25	; 0x802180 <i.3634+0x1>
	pf=0;
     62e:	10 92 7e 21 	sts	0x217E, r1	; 0x80217e <pf.3635>
     632:	c5 e0       	ldi	r28, 0x05	; 5
     634:	d0 e0       	ldi	r29, 0x00	; 0
     636:	c1 2c       	mov	r12, r1
     638:	e0 e1       	ldi	r30, 0x10	; 16
     63a:	f7 e2       	ldi	r31, 0x27	; 39
	{
		if (((Data/i)%10)!=0 || pf) //Trim leading 0's
		{
			USART.DATA = '0'+ ((Data/i)%10);
			while (!(USART.STATUS & 0b01000000));
			USART.STATUS=0b01000000;
     63c:	a0 e4       	ldi	r26, 0x40	; 64
     63e:	da 2e       	mov	r13, r26
			pf=1;		
		}
		i/=10;
     640:	0a e0       	ldi	r16, 0x0A	; 10
     642:	10 e0       	ldi	r17, 0x00	; 0
	
	i=10000;
	pf=0;
	while (i>0)
	{
		if (((Data/i)%10)!=0 || pf) //Trim leading 0's
     644:	c7 01       	movw	r24, r14
     646:	bf 01       	movw	r22, r30
     648:	0e 94 04 2e 	call	0x5c08	; 0x5c08 <__udivmodhi4>
     64c:	ab 01       	movw	r20, r22
     64e:	9b 01       	movw	r18, r22
     650:	ad ec       	ldi	r26, 0xCD	; 205
     652:	bc ec       	ldi	r27, 0xCC	; 204
     654:	0e 94 2c 2e 	call	0x5c58	; 0x5c58 <__umulhisi3>
     658:	96 95       	lsr	r25
     65a:	87 95       	ror	r24
     65c:	96 95       	lsr	r25
     65e:	87 95       	ror	r24
     660:	96 95       	lsr	r25
     662:	87 95       	ror	r24
     664:	9c 01       	movw	r18, r24
     666:	22 0f       	add	r18, r18
     668:	33 1f       	adc	r19, r19
     66a:	88 0f       	add	r24, r24
     66c:	99 1f       	adc	r25, r25
     66e:	88 0f       	add	r24, r24
     670:	99 1f       	adc	r25, r25
     672:	88 0f       	add	r24, r24
     674:	99 1f       	adc	r25, r25
     676:	82 0f       	add	r24, r18
     678:	93 1f       	adc	r25, r19
     67a:	9a 01       	movw	r18, r20
     67c:	28 1b       	sub	r18, r24
     67e:	39 0b       	sbc	r19, r25
     680:	c9 01       	movw	r24, r18
     682:	00 97       	sbiw	r24, 0x00	; 0
     684:	11 f4       	brne	.+4      	; 0x68a <DbgPrintInt+0x7a>
     686:	cc 20       	and	r12, r12
     688:	59 f0       	breq	.+22     	; 0x6a0 <DbgPrintInt+0x90>
		{
			USART.DATA = '0'+ ((Data/i)%10);
     68a:	80 5d       	subi	r24, 0xD0	; 208
     68c:	80 93 a0 0a 	sts	0x0AA0, r24	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x700aa0>
			while (!(USART.STATUS & 0b01000000));
     690:	80 91 a1 0a 	lds	r24, 0x0AA1	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x700aa1>
     694:	86 ff       	sbrs	r24, 6
     696:	fc cf       	rjmp	.-8      	; 0x690 <DbgPrintInt+0x80>
			USART.STATUS=0b01000000;
     698:	d0 92 a1 0a 	sts	0x0AA1, r13	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x700aa1>
			pf=1;		
     69c:	cc 24       	eor	r12, r12
     69e:	c3 94       	inc	r12
		}
		i/=10;
     6a0:	cf 01       	movw	r24, r30
     6a2:	b8 01       	movw	r22, r16
     6a4:	0e 94 18 2e 	call	0x5c30	; 0x5c30 <__divmodhi4>
     6a8:	fb 01       	movw	r30, r22
     6aa:	21 97       	sbiw	r28, 0x01	; 1
	static int i;
	static uint8_t pf;
	
	i=10000;
	pf=0;
	while (i>0)
     6ac:	59 f6       	brne	.-106    	; 0x644 <DbgPrintInt+0x34>
     6ae:	c0 92 7e 21 	sts	0x217E, r12	; 0x80217e <pf.3635>
     6b2:	60 93 7f 21 	sts	0x217F, r22	; 0x80217f <i.3634>
     6b6:	70 93 80 21 	sts	0x2180, r23	; 0x802180 <i.3634+0x1>
			USART.STATUS=0b01000000;
			pf=1;		
		}
		i/=10;
	}
}
     6ba:	df 91       	pop	r29
     6bc:	cf 91       	pop	r28
     6be:	1f 91       	pop	r17
     6c0:	0f 91       	pop	r16
     6c2:	ff 90       	pop	r15
     6c4:	ef 90       	pop	r14
     6c6:	df 90       	pop	r13
     6c8:	cf 90       	pop	r12
     6ca:	08 95       	ret

000006cc <DriverMotorInit>:
{
	EncoderEventStruct Event={0,NONE};
	int res;
	res=xQueueReceive(EncoderEventQueue,&Event,0);
	return Event;
}
     6cc:	e0 ea       	ldi	r30, 0xA0	; 160
     6ce:	f6 e0       	ldi	r31, 0x06	; 6
     6d0:	8f e1       	ldi	r24, 0x1F	; 31
     6d2:	81 83       	std	Z+1, r24	; 0x01
     6d4:	80 e4       	ldi	r24, 0x40	; 64
     6d6:	84 8b       	std	Z+20, r24	; 0x14
     6d8:	20 e1       	ldi	r18, 0x10	; 16
     6da:	25 83       	std	Z+5, r18	; 0x05
     6dc:	e0 e0       	ldi	r30, 0x00	; 0
     6de:	fb e0       	ldi	r31, 0x0B	; 11
     6e0:	91 e0       	ldi	r25, 0x01	; 1
     6e2:	90 83       	st	Z, r25
     6e4:	93 ef       	ldi	r25, 0xF3	; 243
     6e6:	91 83       	std	Z+1, r25	; 0x01
     6e8:	40 e0       	ldi	r20, 0x00	; 0
     6ea:	50 e1       	ldi	r21, 0x10	; 16
     6ec:	46 a3       	std	Z+38, r20	; 0x26
     6ee:	57 a3       	std	Z+39, r21	; 0x27
     6f0:	e0 e4       	ldi	r30, 0x40	; 64
     6f2:	f6 e0       	ldi	r31, 0x06	; 6
     6f4:	90 ec       	ldi	r25, 0xC0	; 192
     6f6:	92 83       	std	Z+2, r25	; 0x02
     6f8:	86 8b       	std	Z+22, r24	; 0x16
     6fa:	87 8b       	std	Z+23, r24	; 0x17
     6fc:	82 87       	std	Z+10, r24	; 0x0a
     6fe:	90 e8       	ldi	r25, 0x80	; 128
     700:	93 87       	std	Z+11, r25	; 0x0b
     702:	95 e0       	ldi	r25, 0x05	; 5
     704:	91 87       	std	Z+9, r25	; 0x09
     706:	e0 e8       	ldi	r30, 0x80	; 128
     708:	f6 e0       	ldi	r31, 0x06	; 6
     70a:	30 e3       	ldi	r19, 0x30	; 48
     70c:	32 83       	std	Z+2, r19	; 0x02
     70e:	84 8b       	std	Z+20, r24	; 0x14
     710:	85 8b       	std	Z+21, r24	; 0x15
     712:	22 87       	std	Z+10, r18	; 0x0a
     714:	80 e2       	ldi	r24, 0x20	; 32
     716:	83 87       	std	Z+11, r24	; 0x0b
     718:	91 87       	std	Z+9, r25	; 0x09
     71a:	40 e0       	ldi	r20, 0x00	; 0
     71c:	65 e0       	ldi	r22, 0x05	; 5
     71e:	84 e1       	ldi	r24, 0x14	; 20
     720:	0e 94 38 10 	call	0x2070	; 0x2070 <xQueueGenericCreate>
     724:	80 93 b2 26 	sts	0x26B2, r24	; 0x8026b2 <EncoderEventQueue>
     728:	90 93 b3 26 	sts	0x26B3, r25	; 0x8026b3 <EncoderEventQueue+0x1>
     72c:	08 95       	ret

0000072e <DriverMotorSet>:
     72e:	20 e1       	ldi	r18, 0x10	; 16
     730:	00 97       	sbiw	r24, 0x00	; 0
     732:	69 f5       	brne	.+90     	; 0x78e <DriverMotorSet+0x60>
     734:	61 15       	cp	r22, r1
     736:	71 05       	cpc	r23, r1
     738:	09 f4       	brne	.+2      	; 0x73c <DriverMotorSet+0xe>
     73a:	57 c0       	rjmp	.+174    	; 0x7ea <DriverMotorSet+0xbc>
     73c:	20 93 a6 06 	sts	0x06A6, r18	; 0x8006a6 <__TEXT_REGION_LENGTH__+0x7006a6>
     740:	81 30       	cpi	r24, 0x01	; 1
     742:	20 ef       	ldi	r18, 0xF0	; 240
     744:	92 07       	cpc	r25, r18
     746:	0c f4       	brge	.+2      	; 0x74a <DriverMotorSet+0x1c>
     748:	57 c0       	rjmp	.+174    	; 0x7f8 <DriverMotorSet+0xca>
     74a:	91 95       	neg	r25
     74c:	81 95       	neg	r24
     74e:	91 09       	sbc	r25, r1
     750:	80 93 28 0b 	sts	0x0B28, r24	; 0x800b28 <__TEXT_REGION_LENGTH__+0x700b28>
     754:	90 93 29 0b 	sts	0x0B29, r25	; 0x800b29 <__TEXT_REGION_LENGTH__+0x700b29>
     758:	10 92 2a 0b 	sts	0x0B2A, r1	; 0x800b2a <__TEXT_REGION_LENGTH__+0x700b2a>
     75c:	10 92 2b 0b 	sts	0x0B2B, r1	; 0x800b2b <__TEXT_REGION_LENGTH__+0x700b2b>
     760:	71 95       	neg	r23
     762:	61 95       	neg	r22
     764:	71 09       	sbc	r23, r1
     766:	16 16       	cp	r1, r22
     768:	17 06       	cpc	r1, r23
     76a:	44 f1       	brlt	.+80     	; 0x7bc <DriverMotorSet+0x8e>
     76c:	61 30       	cpi	r22, 0x01	; 1
     76e:	20 ef       	ldi	r18, 0xF0	; 240
     770:	72 07       	cpc	r23, r18
     772:	0c f4       	brge	.+2      	; 0x776 <DriverMotorSet+0x48>
     774:	44 c0       	rjmp	.+136    	; 0x7fe <DriverMotorSet+0xd0>
     776:	71 95       	neg	r23
     778:	61 95       	neg	r22
     77a:	71 09       	sbc	r23, r1
     77c:	60 93 2c 0b 	sts	0x0B2C, r22	; 0x800b2c <__TEXT_REGION_LENGTH__+0x700b2c>
     780:	70 93 2d 0b 	sts	0x0B2D, r23	; 0x800b2d <__TEXT_REGION_LENGTH__+0x700b2d>
     784:	10 92 2e 0b 	sts	0x0B2E, r1	; 0x800b2e <__TEXT_REGION_LENGTH__+0x700b2e>
     788:	10 92 2f 0b 	sts	0x0B2F, r1	; 0x800b2f <__TEXT_REGION_LENGTH__+0x700b2f>
     78c:	08 95       	ret
     78e:	20 93 a6 06 	sts	0x06A6, r18	; 0x8006a6 <__TEXT_REGION_LENGTH__+0x7006a6>
     792:	18 16       	cp	r1, r24
     794:	19 06       	cpc	r1, r25
     796:	a4 f6       	brge	.-88     	; 0x740 <DriverMotorSet+0x12>
     798:	10 92 28 0b 	sts	0x0B28, r1	; 0x800b28 <__TEXT_REGION_LENGTH__+0x700b28>
     79c:	10 92 29 0b 	sts	0x0B29, r1	; 0x800b29 <__TEXT_REGION_LENGTH__+0x700b29>
     7a0:	81 15       	cp	r24, r1
     7a2:	20 e1       	ldi	r18, 0x10	; 16
     7a4:	92 07       	cpc	r25, r18
     7a6:	f4 f4       	brge	.+60     	; 0x7e4 <DriverMotorSet+0xb6>
     7a8:	80 93 2a 0b 	sts	0x0B2A, r24	; 0x800b2a <__TEXT_REGION_LENGTH__+0x700b2a>
     7ac:	90 93 2b 0b 	sts	0x0B2B, r25	; 0x800b2b <__TEXT_REGION_LENGTH__+0x700b2b>
     7b0:	71 95       	neg	r23
     7b2:	61 95       	neg	r22
     7b4:	71 09       	sbc	r23, r1
     7b6:	16 16       	cp	r1, r22
     7b8:	17 06       	cpc	r1, r23
     7ba:	c4 f6       	brge	.-80     	; 0x76c <DriverMotorSet+0x3e>
     7bc:	10 92 2c 0b 	sts	0x0B2C, r1	; 0x800b2c <__TEXT_REGION_LENGTH__+0x700b2c>
     7c0:	10 92 2d 0b 	sts	0x0B2D, r1	; 0x800b2d <__TEXT_REGION_LENGTH__+0x700b2d>
     7c4:	61 15       	cp	r22, r1
     7c6:	80 e1       	ldi	r24, 0x10	; 16
     7c8:	78 07       	cpc	r23, r24
     7ca:	2c f4       	brge	.+10     	; 0x7d6 <DriverMotorSet+0xa8>
     7cc:	60 93 2e 0b 	sts	0x0B2E, r22	; 0x800b2e <__TEXT_REGION_LENGTH__+0x700b2e>
     7d0:	70 93 2f 0b 	sts	0x0B2F, r23	; 0x800b2f <__TEXT_REGION_LENGTH__+0x700b2f>
     7d4:	08 95       	ret
     7d6:	6f ef       	ldi	r22, 0xFF	; 255
     7d8:	7f e0       	ldi	r23, 0x0F	; 15
     7da:	60 93 2e 0b 	sts	0x0B2E, r22	; 0x800b2e <__TEXT_REGION_LENGTH__+0x700b2e>
     7de:	70 93 2f 0b 	sts	0x0B2F, r23	; 0x800b2f <__TEXT_REGION_LENGTH__+0x700b2f>
     7e2:	08 95       	ret
     7e4:	8f ef       	ldi	r24, 0xFF	; 255
     7e6:	9f e0       	ldi	r25, 0x0F	; 15
     7e8:	df cf       	rjmp	.-66     	; 0x7a8 <DriverMotorSet+0x7a>
     7ea:	20 93 a5 06 	sts	0x06A5, r18	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
     7ee:	81 30       	cpi	r24, 0x01	; 1
     7f0:	20 ef       	ldi	r18, 0xF0	; 240
     7f2:	92 07       	cpc	r25, r18
     7f4:	0c f0       	brlt	.+2      	; 0x7f8 <DriverMotorSet+0xca>
     7f6:	a9 cf       	rjmp	.-174    	; 0x74a <DriverMotorSet+0x1c>
     7f8:	81 e0       	ldi	r24, 0x01	; 1
     7fa:	90 ef       	ldi	r25, 0xF0	; 240
     7fc:	a6 cf       	rjmp	.-180    	; 0x74a <DriverMotorSet+0x1c>
     7fe:	61 e0       	ldi	r22, 0x01	; 1
     800:	70 ef       	ldi	r23, 0xF0	; 240
     802:	b9 cf       	rjmp	.-142    	; 0x776 <DriverMotorSet+0x48>

00000804 <DriverMotorGetEncoder>:
     804:	0f b6       	in	r0, 0x3f	; 63
     806:	f8 94       	cli
     808:	0f 92       	push	r0
     80a:	40 91 ae 26 	lds	r20, 0x26AE	; 0x8026ae <Cnt1>
     80e:	50 91 af 26 	lds	r21, 0x26AF	; 0x8026af <Cnt1+0x1>
     812:	20 91 b0 26 	lds	r18, 0x26B0	; 0x8026b0 <Cnt2>
     816:	30 91 b1 26 	lds	r19, 0x26B1	; 0x8026b1 <Cnt2+0x1>
     81a:	0f 90       	pop	r0
     81c:	0f be       	out	0x3f, r0	; 63
     81e:	ba 01       	movw	r22, r20
     820:	c9 01       	movw	r24, r18
     822:	08 95       	ret

00000824 <__vector_2>:

//Encoder 1 ISR's
ISR (PORTC_INT0_vect)
{	
     824:	1f 92       	push	r1
     826:	0f 92       	push	r0
     828:	0f b6       	in	r0, 0x3f	; 63
     82a:	0f 92       	push	r0
     82c:	11 24       	eor	r1, r1
     82e:	0b b6       	in	r0, 0x3b	; 59
     830:	0f 92       	push	r0
     832:	1f 93       	push	r17
     834:	2f 93       	push	r18
     836:	3f 93       	push	r19
     838:	4f 93       	push	r20
     83a:	5f 93       	push	r21
     83c:	6f 93       	push	r22
     83e:	7f 93       	push	r23
     840:	8f 93       	push	r24
     842:	9f 93       	push	r25
     844:	af 93       	push	r26
     846:	bf 93       	push	r27
     848:	ef 93       	push	r30
     84a:	ff 93       	push	r31
     84c:	cf 93       	push	r28
     84e:	df 93       	push	r29
     850:	00 d0       	rcall	.+0      	; 0x852 <__vector_2+0x2e>
     852:	00 d0       	rcall	.+0      	; 0x854 <__vector_2+0x30>
     854:	cd b7       	in	r28, 0x3d	; 61
     856:	de b7       	in	r29, 0x3e	; 62
	static uint32_t LastTriggerTime=0;
	uint8_t Data,l0,l1;
	EncoderEventStruct Event;
	BaseType_t xHigherPriorityTaskWoken=pdFALSE;
     858:	1e 82       	std	Y+6, r1	; 0x06
	Event.Time=portGET_RUN_TIME_COUNTER_VALUE();
     85a:	20 91 20 08 	lds	r18, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
     85e:	30 91 21 08 	lds	r19, 0x0821	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
     862:	80 91 c0 26 	lds	r24, 0x26C0	; 0x8026c0 <StatsTimer>
     866:	90 91 c1 26 	lds	r25, 0x26C1	; 0x8026c1 <StatsTimer+0x1>
     86a:	a0 91 c2 26 	lds	r26, 0x26C2	; 0x8026c2 <StatsTimer+0x2>
     86e:	b0 91 c3 26 	lds	r27, 0x26C3	; 0x8026c3 <StatsTimer+0x3>
     872:	82 0f       	add	r24, r18
     874:	93 1f       	adc	r25, r19
     876:	a1 1d       	adc	r26, r1
     878:	b1 1d       	adc	r27, r1
     87a:	89 83       	std	Y+1, r24	; 0x01
     87c:	9a 83       	std	Y+2, r25	; 0x02
     87e:	ab 83       	std	Y+3, r26	; 0x03
     880:	bc 83       	std	Y+4, r27	; 0x04
	#ifdef ENCODER_FILTER_ENABLE
		if ((Event.Time-LastTriggerTime)<ENCODER_FILTER_TIME) return;
	#endif

	Data=PORTC.IN;
     882:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
	l0=Data & (1<<6);
	l1=Data & (1<<7);
     886:	18 2f       	mov	r17, r24
     888:	10 78       	andi	r17, 0x80	; 128
		
	//Process events
	if (l0) 
     88a:	86 ff       	sbrs	r24, 6
     88c:	37 c0       	rjmp	.+110    	; 0x8fc <__vector_2+0xd8>
		Event.Event=RISING_1A;
     88e:	81 e0       	ldi	r24, 0x01	; 1
     890:	8d 83       	std	Y+5, r24	; 0x05
	else
		Event.Event=FALLING_1A;

	xQueueSendFromISR(EncoderEventQueue,&Event,&xHigherPriorityTaskWoken);
     892:	20 e0       	ldi	r18, 0x00	; 0
     894:	ae 01       	movw	r20, r28
     896:	4a 5f       	subi	r20, 0xFA	; 250
     898:	5f 4f       	sbci	r21, 0xFF	; 255
     89a:	be 01       	movw	r22, r28
     89c:	6f 5f       	subi	r22, 0xFF	; 255
     89e:	7f 4f       	sbci	r23, 0xFF	; 255
     8a0:	80 91 b2 26 	lds	r24, 0x26B2	; 0x8026b2 <EncoderEventQueue>
     8a4:	90 91 b3 26 	lds	r25, 0x26B3	; 0x8026b3 <EncoderEventQueue+0x1>
     8a8:	0e 94 65 11 	call	0x22ca	; 0x22ca <xQueueGenericSendFromISR>
	//Process counter
	if ( l0 && !l1) Cnt1--; //Rising edge on Line0, Line1 low
     8ac:	11 23       	and	r17, r17
     8ae:	b9 f1       	breq	.+110    	; 0x91e <__vector_2+0xfa>
	if ( l0 &&  l1) Cnt1++; //Rising edge on Line0, Line1 high	
	if (!l0 &&  l1) Cnt1--; //Falling edge on Line0, Line1 high
	if (!l0 && !l1) Cnt1++;//Falling edge on Line1, Line1 low
     8b0:	80 91 ae 26 	lds	r24, 0x26AE	; 0x8026ae <Cnt1>
     8b4:	90 91 af 26 	lds	r25, 0x26AF	; 0x8026af <Cnt1+0x1>
     8b8:	01 96       	adiw	r24, 0x01	; 1
     8ba:	80 93 ae 26 	sts	0x26AE, r24	; 0x8026ae <Cnt1>
     8be:	90 93 af 26 	sts	0x26AF, r25	; 0x8026af <Cnt1+0x1>

	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
     8c2:	8e 81       	ldd	r24, Y+6	; 0x06
     8c4:	81 11       	cpse	r24, r1
     8c6:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <vPortYieldISR>
	LastTriggerTime=Event.Time;
}
     8ca:	26 96       	adiw	r28, 0x06	; 6
     8cc:	cd bf       	out	0x3d, r28	; 61
     8ce:	de bf       	out	0x3e, r29	; 62
     8d0:	df 91       	pop	r29
     8d2:	cf 91       	pop	r28
     8d4:	ff 91       	pop	r31
     8d6:	ef 91       	pop	r30
     8d8:	bf 91       	pop	r27
     8da:	af 91       	pop	r26
     8dc:	9f 91       	pop	r25
     8de:	8f 91       	pop	r24
     8e0:	7f 91       	pop	r23
     8e2:	6f 91       	pop	r22
     8e4:	5f 91       	pop	r21
     8e6:	4f 91       	pop	r20
     8e8:	3f 91       	pop	r19
     8ea:	2f 91       	pop	r18
     8ec:	1f 91       	pop	r17
     8ee:	0f 90       	pop	r0
     8f0:	0b be       	out	0x3b, r0	; 59
     8f2:	0f 90       	pop	r0
     8f4:	0f be       	out	0x3f, r0	; 63
     8f6:	0f 90       	pop	r0
     8f8:	1f 90       	pop	r1
     8fa:	18 95       	reti
		
	//Process events
	if (l0) 
		Event.Event=RISING_1A;
	else
		Event.Event=FALLING_1A;
     8fc:	85 e0       	ldi	r24, 0x05	; 5
     8fe:	8d 83       	std	Y+5, r24	; 0x05

	xQueueSendFromISR(EncoderEventQueue,&Event,&xHigherPriorityTaskWoken);
     900:	20 e0       	ldi	r18, 0x00	; 0
     902:	ae 01       	movw	r20, r28
     904:	4a 5f       	subi	r20, 0xFA	; 250
     906:	5f 4f       	sbci	r21, 0xFF	; 255
     908:	be 01       	movw	r22, r28
     90a:	6f 5f       	subi	r22, 0xFF	; 255
     90c:	7f 4f       	sbci	r23, 0xFF	; 255
     90e:	80 91 b2 26 	lds	r24, 0x26B2	; 0x8026b2 <EncoderEventQueue>
     912:	90 91 b3 26 	lds	r25, 0x26B3	; 0x8026b3 <EncoderEventQueue+0x1>
     916:	0e 94 65 11 	call	0x22ca	; 0x22ca <xQueueGenericSendFromISR>
	//Process counter
	if ( l0 && !l1) Cnt1--; //Rising edge on Line0, Line1 low
	if ( l0 &&  l1) Cnt1++; //Rising edge on Line0, Line1 high	
	if (!l0 &&  l1) Cnt1--; //Falling edge on Line0, Line1 high
     91a:	11 23       	and	r17, r17
     91c:	49 f2       	breq	.-110    	; 0x8b0 <__vector_2+0x8c>
     91e:	80 91 ae 26 	lds	r24, 0x26AE	; 0x8026ae <Cnt1>
     922:	90 91 af 26 	lds	r25, 0x26AF	; 0x8026af <Cnt1+0x1>
     926:	01 97       	sbiw	r24, 0x01	; 1
     928:	80 93 ae 26 	sts	0x26AE, r24	; 0x8026ae <Cnt1>
     92c:	90 93 af 26 	sts	0x26AF, r25	; 0x8026af <Cnt1+0x1>
     930:	c8 cf       	rjmp	.-112    	; 0x8c2 <__vector_2+0x9e>

00000932 <__vector_3>:
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
	LastTriggerTime=Event.Time;
}

ISR (PORTC_INT1_vect)
{
     932:	1f 92       	push	r1
     934:	0f 92       	push	r0
     936:	0f b6       	in	r0, 0x3f	; 63
     938:	0f 92       	push	r0
     93a:	11 24       	eor	r1, r1
     93c:	0b b6       	in	r0, 0x3b	; 59
     93e:	0f 92       	push	r0
     940:	1f 93       	push	r17
     942:	2f 93       	push	r18
     944:	3f 93       	push	r19
     946:	4f 93       	push	r20
     948:	5f 93       	push	r21
     94a:	6f 93       	push	r22
     94c:	7f 93       	push	r23
     94e:	8f 93       	push	r24
     950:	9f 93       	push	r25
     952:	af 93       	push	r26
     954:	bf 93       	push	r27
     956:	ef 93       	push	r30
     958:	ff 93       	push	r31
     95a:	cf 93       	push	r28
     95c:	df 93       	push	r29
     95e:	00 d0       	rcall	.+0      	; 0x960 <__vector_3+0x2e>
     960:	00 d0       	rcall	.+0      	; 0x962 <__vector_3+0x30>
     962:	cd b7       	in	r28, 0x3d	; 61
     964:	de b7       	in	r29, 0x3e	; 62
	static uint32_t LastTriggerTime=0;
	uint8_t Data,l0,l1;
	EncoderEventStruct Event;
	BaseType_t xHigherPriorityTaskWoken=pdFALSE;
     966:	1e 82       	std	Y+6, r1	; 0x06
	Event.Time=portGET_RUN_TIME_COUNTER_VALUE();
     968:	20 91 20 08 	lds	r18, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
     96c:	30 91 21 08 	lds	r19, 0x0821	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
     970:	80 91 c0 26 	lds	r24, 0x26C0	; 0x8026c0 <StatsTimer>
     974:	90 91 c1 26 	lds	r25, 0x26C1	; 0x8026c1 <StatsTimer+0x1>
     978:	a0 91 c2 26 	lds	r26, 0x26C2	; 0x8026c2 <StatsTimer+0x2>
     97c:	b0 91 c3 26 	lds	r27, 0x26C3	; 0x8026c3 <StatsTimer+0x3>
     980:	82 0f       	add	r24, r18
     982:	93 1f       	adc	r25, r19
     984:	a1 1d       	adc	r26, r1
     986:	b1 1d       	adc	r27, r1
     988:	89 83       	std	Y+1, r24	; 0x01
     98a:	9a 83       	std	Y+2, r25	; 0x02
     98c:	ab 83       	std	Y+3, r26	; 0x03
     98e:	bc 83       	std	Y+4, r27	; 0x04
	#ifdef ENCODER_FILTER_ENABLE
		if ((Event.Time-LastTriggerTime)<ENCODER_FILTER_TIME) return;
	#endif
	
	Data=PORTC.IN;
     990:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
	l0=Data & (1<<6);
     994:	18 2f       	mov	r17, r24
     996:	10 74       	andi	r17, 0x40	; 64
	l1=Data & (1<<7);
	
	//Process events
	if (l1)
     998:	87 ff       	sbrs	r24, 7
     99a:	37 c0       	rjmp	.+110    	; 0xa0a <__vector_3+0xd8>
		Event.Event=RISING_1B;
     99c:	82 e0       	ldi	r24, 0x02	; 2
     99e:	8d 83       	std	Y+5, r24	; 0x05
	else
		Event.Event=FALLING_1B;

	xQueueSendFromISR(EncoderEventQueue,&Event,&xHigherPriorityTaskWoken);
     9a0:	20 e0       	ldi	r18, 0x00	; 0
     9a2:	ae 01       	movw	r20, r28
     9a4:	4a 5f       	subi	r20, 0xFA	; 250
     9a6:	5f 4f       	sbci	r21, 0xFF	; 255
     9a8:	be 01       	movw	r22, r28
     9aa:	6f 5f       	subi	r22, 0xFF	; 255
     9ac:	7f 4f       	sbci	r23, 0xFF	; 255
     9ae:	80 91 b2 26 	lds	r24, 0x26B2	; 0x8026b2 <EncoderEventQueue>
     9b2:	90 91 b3 26 	lds	r25, 0x26B3	; 0x8026b3 <EncoderEventQueue+0x1>
     9b6:	0e 94 65 11 	call	0x22ca	; 0x22ca <xQueueGenericSendFromISR>
	//Process counter
	if ( l1 && !l0) Cnt1++;//Rising edge on Line1, Line0 low
     9ba:	11 23       	and	r17, r17
     9bc:	b9 f1       	breq	.+110    	; 0xa2c <__vector_3+0xfa>
	if ( l1 &&  l0) Cnt1--;//Rising edge on Line1, Line0 high
	if (!l1 &&  l0) Cnt1++;//Falling edge on Line1, Line0 high
	if (!l1 && !l0) Cnt1--;//Falling edge on Line1, Line0 low
     9be:	80 91 ae 26 	lds	r24, 0x26AE	; 0x8026ae <Cnt1>
     9c2:	90 91 af 26 	lds	r25, 0x26AF	; 0x8026af <Cnt1+0x1>
     9c6:	01 97       	sbiw	r24, 0x01	; 1
     9c8:	80 93 ae 26 	sts	0x26AE, r24	; 0x8026ae <Cnt1>
     9cc:	90 93 af 26 	sts	0x26AF, r25	; 0x8026af <Cnt1+0x1>

	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
     9d0:	8e 81       	ldd	r24, Y+6	; 0x06
     9d2:	81 11       	cpse	r24, r1
     9d4:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <vPortYieldISR>
	LastTriggerTime=Event.Time;
}
     9d8:	26 96       	adiw	r28, 0x06	; 6
     9da:	cd bf       	out	0x3d, r28	; 61
     9dc:	de bf       	out	0x3e, r29	; 62
     9de:	df 91       	pop	r29
     9e0:	cf 91       	pop	r28
     9e2:	ff 91       	pop	r31
     9e4:	ef 91       	pop	r30
     9e6:	bf 91       	pop	r27
     9e8:	af 91       	pop	r26
     9ea:	9f 91       	pop	r25
     9ec:	8f 91       	pop	r24
     9ee:	7f 91       	pop	r23
     9f0:	6f 91       	pop	r22
     9f2:	5f 91       	pop	r21
     9f4:	4f 91       	pop	r20
     9f6:	3f 91       	pop	r19
     9f8:	2f 91       	pop	r18
     9fa:	1f 91       	pop	r17
     9fc:	0f 90       	pop	r0
     9fe:	0b be       	out	0x3b, r0	; 59
     a00:	0f 90       	pop	r0
     a02:	0f be       	out	0x3f, r0	; 63
     a04:	0f 90       	pop	r0
     a06:	1f 90       	pop	r1
     a08:	18 95       	reti
	
	//Process events
	if (l1)
		Event.Event=RISING_1B;
	else
		Event.Event=FALLING_1B;
     a0a:	86 e0       	ldi	r24, 0x06	; 6
     a0c:	8d 83       	std	Y+5, r24	; 0x05

	xQueueSendFromISR(EncoderEventQueue,&Event,&xHigherPriorityTaskWoken);
     a0e:	20 e0       	ldi	r18, 0x00	; 0
     a10:	ae 01       	movw	r20, r28
     a12:	4a 5f       	subi	r20, 0xFA	; 250
     a14:	5f 4f       	sbci	r21, 0xFF	; 255
     a16:	be 01       	movw	r22, r28
     a18:	6f 5f       	subi	r22, 0xFF	; 255
     a1a:	7f 4f       	sbci	r23, 0xFF	; 255
     a1c:	80 91 b2 26 	lds	r24, 0x26B2	; 0x8026b2 <EncoderEventQueue>
     a20:	90 91 b3 26 	lds	r25, 0x26B3	; 0x8026b3 <EncoderEventQueue+0x1>
     a24:	0e 94 65 11 	call	0x22ca	; 0x22ca <xQueueGenericSendFromISR>
	//Process counter
	if ( l1 && !l0) Cnt1++;//Rising edge on Line1, Line0 low
	if ( l1 &&  l0) Cnt1--;//Rising edge on Line1, Line0 high
	if (!l1 &&  l0) Cnt1++;//Falling edge on Line1, Line0 high
     a28:	11 23       	and	r17, r17
     a2a:	49 f2       	breq	.-110    	; 0x9be <__vector_3+0x8c>
     a2c:	80 91 ae 26 	lds	r24, 0x26AE	; 0x8026ae <Cnt1>
     a30:	90 91 af 26 	lds	r25, 0x26AF	; 0x8026af <Cnt1+0x1>
     a34:	01 96       	adiw	r24, 0x01	; 1
     a36:	80 93 ae 26 	sts	0x26AE, r24	; 0x8026ae <Cnt1>
     a3a:	90 93 af 26 	sts	0x26AF, r25	; 0x8026af <Cnt1+0x1>
     a3e:	c8 cf       	rjmp	.-112    	; 0x9d0 <__vector_3+0x9e>

00000a40 <__vector_43>:
	LastTriggerTime=Event.Time;
}

//Encoder 2 ISR's
ISR (PORTE_INT0_vect)
{
     a40:	1f 92       	push	r1
     a42:	0f 92       	push	r0
     a44:	0f b6       	in	r0, 0x3f	; 63
     a46:	0f 92       	push	r0
     a48:	11 24       	eor	r1, r1
     a4a:	0b b6       	in	r0, 0x3b	; 59
     a4c:	0f 92       	push	r0
     a4e:	1f 93       	push	r17
     a50:	2f 93       	push	r18
     a52:	3f 93       	push	r19
     a54:	4f 93       	push	r20
     a56:	5f 93       	push	r21
     a58:	6f 93       	push	r22
     a5a:	7f 93       	push	r23
     a5c:	8f 93       	push	r24
     a5e:	9f 93       	push	r25
     a60:	af 93       	push	r26
     a62:	bf 93       	push	r27
     a64:	ef 93       	push	r30
     a66:	ff 93       	push	r31
     a68:	cf 93       	push	r28
     a6a:	df 93       	push	r29
     a6c:	00 d0       	rcall	.+0      	; 0xa6e <__vector_43+0x2e>
     a6e:	00 d0       	rcall	.+0      	; 0xa70 <__vector_43+0x30>
     a70:	cd b7       	in	r28, 0x3d	; 61
     a72:	de b7       	in	r29, 0x3e	; 62
	static uint32_t LastTriggerTime=0;
	uint8_t Data,l0,l1;
	EncoderEventStruct Event;
	BaseType_t xHigherPriorityTaskWoken=pdFALSE;
     a74:	1e 82       	std	Y+6, r1	; 0x06
	Event.Time=portGET_RUN_TIME_COUNTER_VALUE();
     a76:	20 91 20 08 	lds	r18, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
     a7a:	30 91 21 08 	lds	r19, 0x0821	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
     a7e:	80 91 c0 26 	lds	r24, 0x26C0	; 0x8026c0 <StatsTimer>
     a82:	90 91 c1 26 	lds	r25, 0x26C1	; 0x8026c1 <StatsTimer+0x1>
     a86:	a0 91 c2 26 	lds	r26, 0x26C2	; 0x8026c2 <StatsTimer+0x2>
     a8a:	b0 91 c3 26 	lds	r27, 0x26C3	; 0x8026c3 <StatsTimer+0x3>
     a8e:	82 0f       	add	r24, r18
     a90:	93 1f       	adc	r25, r19
     a92:	a1 1d       	adc	r26, r1
     a94:	b1 1d       	adc	r27, r1
     a96:	89 83       	std	Y+1, r24	; 0x01
     a98:	9a 83       	std	Y+2, r25	; 0x02
     a9a:	ab 83       	std	Y+3, r26	; 0x03
     a9c:	bc 83       	std	Y+4, r27	; 0x04
	#ifdef ENCODER_FILTER_ENABLE
		if ((Event.Time-LastTriggerTime)<ENCODER_FILTER_TIME) return;
	#endif
	
	Data=PORTE.IN;
     a9e:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <__TEXT_REGION_LENGTH__+0x700688>
	l0=Data & (1<<4);
	l1=Data & (1<<5);
     aa2:	18 2f       	mov	r17, r24
     aa4:	10 72       	andi	r17, 0x20	; 32
	
	//Process events
	if (l0)
     aa6:	84 ff       	sbrs	r24, 4
     aa8:	37 c0       	rjmp	.+110    	; 0xb18 <__vector_43+0xd8>
		Event.Event=RISING_2A;
     aaa:	83 e0       	ldi	r24, 0x03	; 3
     aac:	8d 83       	std	Y+5, r24	; 0x05
	else
		Event.Event=FALLING_2A;

	xQueueSendFromISR(EncoderEventQueue,&Event,&xHigherPriorityTaskWoken);
     aae:	20 e0       	ldi	r18, 0x00	; 0
     ab0:	ae 01       	movw	r20, r28
     ab2:	4a 5f       	subi	r20, 0xFA	; 250
     ab4:	5f 4f       	sbci	r21, 0xFF	; 255
     ab6:	be 01       	movw	r22, r28
     ab8:	6f 5f       	subi	r22, 0xFF	; 255
     aba:	7f 4f       	sbci	r23, 0xFF	; 255
     abc:	80 91 b2 26 	lds	r24, 0x26B2	; 0x8026b2 <EncoderEventQueue>
     ac0:	90 91 b3 26 	lds	r25, 0x26B3	; 0x8026b3 <EncoderEventQueue+0x1>
     ac4:	0e 94 65 11 	call	0x22ca	; 0x22ca <xQueueGenericSendFromISR>
	//Process counter
	if ( l0 && !l1) Cnt2--; //Rising edge on Line0, Line1 low
     ac8:	11 23       	and	r17, r17
     aca:	b9 f1       	breq	.+110    	; 0xb3a <__vector_43+0xfa>
	if ( l0 &&  l1) Cnt2++; //Rising edge on Line0, Line1 high
	if (!l0 &&  l1) Cnt2--; //Falling edge on Line0, Line1 high
	if (!l0 && !l1) Cnt2++;//Falling edge on Line1, Line1 low
     acc:	80 91 b0 26 	lds	r24, 0x26B0	; 0x8026b0 <Cnt2>
     ad0:	90 91 b1 26 	lds	r25, 0x26B1	; 0x8026b1 <Cnt2+0x1>
     ad4:	01 96       	adiw	r24, 0x01	; 1
     ad6:	80 93 b0 26 	sts	0x26B0, r24	; 0x8026b0 <Cnt2>
     ada:	90 93 b1 26 	sts	0x26B1, r25	; 0x8026b1 <Cnt2+0x1>
	
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
     ade:	8e 81       	ldd	r24, Y+6	; 0x06
     ae0:	81 11       	cpse	r24, r1
     ae2:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <vPortYieldISR>
	LastTriggerTime=Event.Time;
}
     ae6:	26 96       	adiw	r28, 0x06	; 6
     ae8:	cd bf       	out	0x3d, r28	; 61
     aea:	de bf       	out	0x3e, r29	; 62
     aec:	df 91       	pop	r29
     aee:	cf 91       	pop	r28
     af0:	ff 91       	pop	r31
     af2:	ef 91       	pop	r30
     af4:	bf 91       	pop	r27
     af6:	af 91       	pop	r26
     af8:	9f 91       	pop	r25
     afa:	8f 91       	pop	r24
     afc:	7f 91       	pop	r23
     afe:	6f 91       	pop	r22
     b00:	5f 91       	pop	r21
     b02:	4f 91       	pop	r20
     b04:	3f 91       	pop	r19
     b06:	2f 91       	pop	r18
     b08:	1f 91       	pop	r17
     b0a:	0f 90       	pop	r0
     b0c:	0b be       	out	0x3b, r0	; 59
     b0e:	0f 90       	pop	r0
     b10:	0f be       	out	0x3f, r0	; 63
     b12:	0f 90       	pop	r0
     b14:	1f 90       	pop	r1
     b16:	18 95       	reti
	
	//Process events
	if (l0)
		Event.Event=RISING_2A;
	else
		Event.Event=FALLING_2A;
     b18:	87 e0       	ldi	r24, 0x07	; 7
     b1a:	8d 83       	std	Y+5, r24	; 0x05

	xQueueSendFromISR(EncoderEventQueue,&Event,&xHigherPriorityTaskWoken);
     b1c:	20 e0       	ldi	r18, 0x00	; 0
     b1e:	ae 01       	movw	r20, r28
     b20:	4a 5f       	subi	r20, 0xFA	; 250
     b22:	5f 4f       	sbci	r21, 0xFF	; 255
     b24:	be 01       	movw	r22, r28
     b26:	6f 5f       	subi	r22, 0xFF	; 255
     b28:	7f 4f       	sbci	r23, 0xFF	; 255
     b2a:	80 91 b2 26 	lds	r24, 0x26B2	; 0x8026b2 <EncoderEventQueue>
     b2e:	90 91 b3 26 	lds	r25, 0x26B3	; 0x8026b3 <EncoderEventQueue+0x1>
     b32:	0e 94 65 11 	call	0x22ca	; 0x22ca <xQueueGenericSendFromISR>
	//Process counter
	if ( l0 && !l1) Cnt2--; //Rising edge on Line0, Line1 low
	if ( l0 &&  l1) Cnt2++; //Rising edge on Line0, Line1 high
	if (!l0 &&  l1) Cnt2--; //Falling edge on Line0, Line1 high
     b36:	11 23       	and	r17, r17
     b38:	49 f2       	breq	.-110    	; 0xacc <__vector_43+0x8c>
     b3a:	80 91 b0 26 	lds	r24, 0x26B0	; 0x8026b0 <Cnt2>
     b3e:	90 91 b1 26 	lds	r25, 0x26B1	; 0x8026b1 <Cnt2+0x1>
     b42:	01 97       	sbiw	r24, 0x01	; 1
     b44:	80 93 b0 26 	sts	0x26B0, r24	; 0x8026b0 <Cnt2>
     b48:	90 93 b1 26 	sts	0x26B1, r25	; 0x8026b1 <Cnt2+0x1>
     b4c:	c8 cf       	rjmp	.-112    	; 0xade <__vector_43+0x9e>

00000b4e <__vector_44>:
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
	LastTriggerTime=Event.Time;
}

ISR (PORTE_INT1_vect)
{
     b4e:	1f 92       	push	r1
     b50:	0f 92       	push	r0
     b52:	0f b6       	in	r0, 0x3f	; 63
     b54:	0f 92       	push	r0
     b56:	11 24       	eor	r1, r1
     b58:	0b b6       	in	r0, 0x3b	; 59
     b5a:	0f 92       	push	r0
     b5c:	1f 93       	push	r17
     b5e:	2f 93       	push	r18
     b60:	3f 93       	push	r19
     b62:	4f 93       	push	r20
     b64:	5f 93       	push	r21
     b66:	6f 93       	push	r22
     b68:	7f 93       	push	r23
     b6a:	8f 93       	push	r24
     b6c:	9f 93       	push	r25
     b6e:	af 93       	push	r26
     b70:	bf 93       	push	r27
     b72:	ef 93       	push	r30
     b74:	ff 93       	push	r31
     b76:	cf 93       	push	r28
     b78:	df 93       	push	r29
     b7a:	00 d0       	rcall	.+0      	; 0xb7c <__vector_44+0x2e>
     b7c:	00 d0       	rcall	.+0      	; 0xb7e <__vector_44+0x30>
     b7e:	cd b7       	in	r28, 0x3d	; 61
     b80:	de b7       	in	r29, 0x3e	; 62
	static uint32_t LastTriggerTime=0;
	uint8_t Data,l0,l1;
	EncoderEventStruct Event;
	BaseType_t xHigherPriorityTaskWoken=pdFALSE;
     b82:	1e 82       	std	Y+6, r1	; 0x06
	Event.Time=portGET_RUN_TIME_COUNTER_VALUE();
     b84:	20 91 20 08 	lds	r18, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
     b88:	30 91 21 08 	lds	r19, 0x0821	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
     b8c:	80 91 c0 26 	lds	r24, 0x26C0	; 0x8026c0 <StatsTimer>
     b90:	90 91 c1 26 	lds	r25, 0x26C1	; 0x8026c1 <StatsTimer+0x1>
     b94:	a0 91 c2 26 	lds	r26, 0x26C2	; 0x8026c2 <StatsTimer+0x2>
     b98:	b0 91 c3 26 	lds	r27, 0x26C3	; 0x8026c3 <StatsTimer+0x3>
     b9c:	82 0f       	add	r24, r18
     b9e:	93 1f       	adc	r25, r19
     ba0:	a1 1d       	adc	r26, r1
     ba2:	b1 1d       	adc	r27, r1
     ba4:	89 83       	std	Y+1, r24	; 0x01
     ba6:	9a 83       	std	Y+2, r25	; 0x02
     ba8:	ab 83       	std	Y+3, r26	; 0x03
     baa:	bc 83       	std	Y+4, r27	; 0x04
	#ifdef ENCODER_FILTER_ENABLE
		if ((Event.Time-LastTriggerTime)<ENCODER_FILTER_TIME) return;
	#endif
	
	Data=PORTE.IN;
     bac:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <__TEXT_REGION_LENGTH__+0x700688>
	l0=Data & (1<<4);
	l1=Data & (1<<5);
     bb0:	18 2f       	mov	r17, r24
     bb2:	10 72       	andi	r17, 0x20	; 32
	
	//Process events
	if (l0)
     bb4:	84 ff       	sbrs	r24, 4
     bb6:	1c c0       	rjmp	.+56     	; 0xbf0 <__vector_44+0xa2>
	Event.Event=RISING_2B;
     bb8:	84 e0       	ldi	r24, 0x04	; 4
     bba:	8d 83       	std	Y+5, r24	; 0x05
	else
	Event.Event=FALLING_2B;

	xQueueSendFromISR(EncoderEventQueue,&Event,&xHigherPriorityTaskWoken);
     bbc:	20 e0       	ldi	r18, 0x00	; 0
     bbe:	ae 01       	movw	r20, r28
     bc0:	4a 5f       	subi	r20, 0xFA	; 250
     bc2:	5f 4f       	sbci	r21, 0xFF	; 255
     bc4:	be 01       	movw	r22, r28
     bc6:	6f 5f       	subi	r22, 0xFF	; 255
     bc8:	7f 4f       	sbci	r23, 0xFF	; 255
     bca:	80 91 b2 26 	lds	r24, 0x26B2	; 0x8026b2 <EncoderEventQueue>
     bce:	90 91 b3 26 	lds	r25, 0x26B3	; 0x8026b3 <EncoderEventQueue+0x1>
     bd2:	0e 94 65 11 	call	0x22ca	; 0x22ca <xQueueGenericSendFromISR>
	//Process counter
	if ( l1 && !l0) Cnt2++;//Rising edge on Line1, Line0 low
     bd6:	11 23       	and	r17, r17
     bd8:	09 f4       	brne	.+2      	; 0xbdc <__vector_44+0x8e>
     bda:	47 c0       	rjmp	.+142    	; 0xc6a <__vector_44+0x11c>
	if ( l1 &&  l0) Cnt2--;//Rising edge on Line1, Line0 high
     bdc:	80 91 b0 26 	lds	r24, 0x26B0	; 0x8026b0 <Cnt2>
     be0:	90 91 b1 26 	lds	r25, 0x26B1	; 0x8026b1 <Cnt2+0x1>
     be4:	01 97       	sbiw	r24, 0x01	; 1
     be6:	80 93 b0 26 	sts	0x26B0, r24	; 0x8026b0 <Cnt2>
     bea:	90 93 b1 26 	sts	0x26B1, r25	; 0x8026b1 <Cnt2+0x1>
     bee:	1a c0       	rjmp	.+52     	; 0xc24 <__vector_44+0xd6>
	
	//Process events
	if (l0)
	Event.Event=RISING_2B;
	else
	Event.Event=FALLING_2B;
     bf0:	88 e0       	ldi	r24, 0x08	; 8
     bf2:	8d 83       	std	Y+5, r24	; 0x05

	xQueueSendFromISR(EncoderEventQueue,&Event,&xHigherPriorityTaskWoken);
     bf4:	20 e0       	ldi	r18, 0x00	; 0
     bf6:	ae 01       	movw	r20, r28
     bf8:	4a 5f       	subi	r20, 0xFA	; 250
     bfa:	5f 4f       	sbci	r21, 0xFF	; 255
     bfc:	be 01       	movw	r22, r28
     bfe:	6f 5f       	subi	r22, 0xFF	; 255
     c00:	7f 4f       	sbci	r23, 0xFF	; 255
     c02:	80 91 b2 26 	lds	r24, 0x26B2	; 0x8026b2 <EncoderEventQueue>
     c06:	90 91 b3 26 	lds	r25, 0x26B3	; 0x8026b3 <EncoderEventQueue+0x1>
     c0a:	0e 94 65 11 	call	0x22ca	; 0x22ca <xQueueGenericSendFromISR>
	//Process counter
	if ( l1 && !l0) Cnt2++;//Rising edge on Line1, Line0 low
     c0e:	80 91 b0 26 	lds	r24, 0x26B0	; 0x8026b0 <Cnt2>
     c12:	90 91 b1 26 	lds	r25, 0x26B1	; 0x8026b1 <Cnt2+0x1>
     c16:	11 11       	cpse	r17, r1
     c18:	22 c0       	rjmp	.+68     	; 0xc5e <__vector_44+0x110>
	if ( l1 &&  l0) Cnt2--;//Rising edge on Line1, Line0 high
	if (!l1 &&  l0) Cnt2++;//Falling edge on Line1, Line0 high
	if (!l1 && !l0) Cnt2--;//Falling edge on Line1, Line0 low
     c1a:	01 97       	sbiw	r24, 0x01	; 1
     c1c:	80 93 b0 26 	sts	0x26B0, r24	; 0x8026b0 <Cnt2>
     c20:	90 93 b1 26 	sts	0x26B1, r25	; 0x8026b1 <Cnt2+0x1>

	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
     c24:	8e 81       	ldd	r24, Y+6	; 0x06
     c26:	81 11       	cpse	r24, r1
     c28:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <vPortYieldISR>
	LastTriggerTime=Event.Time;
}
     c2c:	26 96       	adiw	r28, 0x06	; 6
     c2e:	cd bf       	out	0x3d, r28	; 61
     c30:	de bf       	out	0x3e, r29	; 62
     c32:	df 91       	pop	r29
     c34:	cf 91       	pop	r28
     c36:	ff 91       	pop	r31
     c38:	ef 91       	pop	r30
     c3a:	bf 91       	pop	r27
     c3c:	af 91       	pop	r26
     c3e:	9f 91       	pop	r25
     c40:	8f 91       	pop	r24
     c42:	7f 91       	pop	r23
     c44:	6f 91       	pop	r22
     c46:	5f 91       	pop	r21
     c48:	4f 91       	pop	r20
     c4a:	3f 91       	pop	r19
     c4c:	2f 91       	pop	r18
     c4e:	1f 91       	pop	r17
     c50:	0f 90       	pop	r0
     c52:	0b be       	out	0x3b, r0	; 59
     c54:	0f 90       	pop	r0
     c56:	0f be       	out	0x3f, r0	; 63
     c58:	0f 90       	pop	r0
     c5a:	1f 90       	pop	r1
     c5c:	18 95       	reti
	else
	Event.Event=FALLING_2B;

	xQueueSendFromISR(EncoderEventQueue,&Event,&xHigherPriorityTaskWoken);
	//Process counter
	if ( l1 && !l0) Cnt2++;//Rising edge on Line1, Line0 low
     c5e:	01 96       	adiw	r24, 0x01	; 1
     c60:	80 93 b0 26 	sts	0x26B0, r24	; 0x8026b0 <Cnt2>
     c64:	90 93 b1 26 	sts	0x26B1, r25	; 0x8026b1 <Cnt2+0x1>
     c68:	dd cf       	rjmp	.-70     	; 0xc24 <__vector_44+0xd6>
	if ( l1 &&  l0) Cnt2--;//Rising edge on Line1, Line0 high
	if (!l1 &&  l0) Cnt2++;//Falling edge on Line1, Line0 high
     c6a:	80 91 b0 26 	lds	r24, 0x26B0	; 0x8026b0 <Cnt2>
     c6e:	90 91 b1 26 	lds	r25, 0x26B1	; 0x8026b1 <Cnt2+0x1>
     c72:	01 96       	adiw	r24, 0x01	; 1
     c74:	80 93 b0 26 	sts	0x26B0, r24	; 0x8026b0 <Cnt2>
     c78:	90 93 b1 26 	sts	0x26B1, r25	; 0x8026b1 <Cnt2+0x1>
     c7c:	d3 cf       	rjmp	.-90     	; 0xc24 <__vector_44+0xd6>

00000c7e <DriverMotorResetEncoder>:
}


void DriverMotorResetEncoder(void)
{
	portENTER_CRITICAL();	
     c7e:	0f b6       	in	r0, 0x3f	; 63
     c80:	f8 94       	cli
     c82:	0f 92       	push	r0
	Cnt1=0;
     c84:	10 92 ae 26 	sts	0x26AE, r1	; 0x8026ae <Cnt1>
     c88:	10 92 af 26 	sts	0x26AF, r1	; 0x8026af <Cnt1+0x1>
	Cnt2=0;
     c8c:	10 92 b0 26 	sts	0x26B0, r1	; 0x8026b0 <Cnt2>
     c90:	10 92 b1 26 	sts	0x26B1, r1	; 0x8026b1 <Cnt2+0x1>
	portEXIT_CRITICAL();
     c94:	0f 90       	pop	r0
     c96:	0f be       	out	0x3f, r0	; 63
     c98:	08 95       	ret

00000c9a <DriverMPU6050Init>:
	uint8_t Buffer[18];

	Buffer[0]=MPU6050_AX;
	res=TWIMWriteRead(MPU6050_ADDR,Buffer,1,Buffer,18);

	configASSERT(res);
     c9a:	0f 93       	push	r16
     c9c:	1f 93       	push	r17
     c9e:	cf 93       	push	r28
     ca0:	df 93       	push	r29
     ca2:	1f 92       	push	r1
     ca4:	1f 92       	push	r1
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
     caa:	85 e7       	ldi	r24, 0x75	; 117
     cac:	89 83       	std	Y+1, r24	; 0x01
     cae:	01 e0       	ldi	r16, 0x01	; 1
     cb0:	9e 01       	movw	r18, r28
     cb2:	2f 5f       	subi	r18, 0xFF	; 255
     cb4:	3f 4f       	sbci	r19, 0xFF	; 255
     cb6:	41 e0       	ldi	r20, 0x01	; 1
     cb8:	b9 01       	movw	r22, r18
     cba:	88 e6       	ldi	r24, 0x68	; 104
     cbc:	0e 94 4d 09 	call	0x129a	; 0x129a <TWIMWriteRead>
     cc0:	88 23       	and	r24, r24
     cc2:	d9 f0       	breq	.+54     	; 0xcfa <DriverMPU6050Init+0x60>
     cc4:	89 81       	ldd	r24, Y+1	; 0x01
     cc6:	88 36       	cpi	r24, 0x68	; 104
     cc8:	19 f1       	breq	.+70     	; 0xd10 <DriverMPU6050Init+0x76>
     cca:	1f 92       	push	r1
     ccc:	98 e6       	ldi	r25, 0x68	; 104
     cce:	9f 93       	push	r25
     cd0:	1f 92       	push	r1
     cd2:	8f 93       	push	r24
     cd4:	87 e3       	ldi	r24, 0x37	; 55
     cd6:	90 e2       	ldi	r25, 0x20	; 32
     cd8:	9f 93       	push	r25
     cda:	8f 93       	push	r24
     cdc:	0e 94 96 30 	call	0x612c	; 0x612c <printf>
     ce0:	0f 90       	pop	r0
     ce2:	0f 90       	pop	r0
     ce4:	0f 90       	pop	r0
     ce6:	0f 90       	pop	r0
     ce8:	0f 90       	pop	r0
     cea:	0f 90       	pop	r0
     cec:	0f 90       	pop	r0
     cee:	0f 90       	pop	r0
     cf0:	df 91       	pop	r29
     cf2:	cf 91       	pop	r28
     cf4:	1f 91       	pop	r17
     cf6:	0f 91       	pop	r16
     cf8:	08 95       	ret
     cfa:	82 e2       	ldi	r24, 0x22	; 34
     cfc:	90 e2       	ldi	r25, 0x20	; 32
     cfe:	0e 94 aa 30 	call	0x6154	; 0x6154 <puts>
     d02:	0f 90       	pop	r0
     d04:	0f 90       	pop	r0
     d06:	df 91       	pop	r29
     d08:	cf 91       	pop	r28
     d0a:	1f 91       	pop	r17
     d0c:	0f 91       	pop	r16
     d0e:	08 95       	ret
     d10:	89 e1       	ldi	r24, 0x19	; 25
     d12:	89 83       	std	Y+1, r24	; 0x01
     d14:	1a 82       	std	Y+2, r1	; 0x02
     d16:	42 e0       	ldi	r20, 0x02	; 2
     d18:	be 01       	movw	r22, r28
     d1a:	6f 5f       	subi	r22, 0xFF	; 255
     d1c:	7f 4f       	sbci	r23, 0xFF	; 255
     d1e:	88 e6       	ldi	r24, 0x68	; 104
     d20:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <TWIMWrite>
     d24:	8a e1       	ldi	r24, 0x1A	; 26
     d26:	89 83       	std	Y+1, r24	; 0x01
     d28:	11 e0       	ldi	r17, 0x01	; 1
     d2a:	1a 83       	std	Y+2, r17	; 0x02
     d2c:	42 e0       	ldi	r20, 0x02	; 2
     d2e:	be 01       	movw	r22, r28
     d30:	6f 5f       	subi	r22, 0xFF	; 255
     d32:	7f 4f       	sbci	r23, 0xFF	; 255
     d34:	88 e6       	ldi	r24, 0x68	; 104
     d36:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <TWIMWrite>
     d3a:	8b e1       	ldi	r24, 0x1B	; 27
     d3c:	89 83       	std	Y+1, r24	; 0x01
     d3e:	1a 82       	std	Y+2, r1	; 0x02
     d40:	42 e0       	ldi	r20, 0x02	; 2
     d42:	be 01       	movw	r22, r28
     d44:	6f 5f       	subi	r22, 0xFF	; 255
     d46:	7f 4f       	sbci	r23, 0xFF	; 255
     d48:	88 e6       	ldi	r24, 0x68	; 104
     d4a:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <TWIMWrite>
     d4e:	87 e3       	ldi	r24, 0x37	; 55
     d50:	89 83       	std	Y+1, r24	; 0x01
     d52:	80 e1       	ldi	r24, 0x10	; 16
     d54:	8a 83       	std	Y+2, r24	; 0x02
     d56:	42 e0       	ldi	r20, 0x02	; 2
     d58:	be 01       	movw	r22, r28
     d5a:	6f 5f       	subi	r22, 0xFF	; 255
     d5c:	7f 4f       	sbci	r23, 0xFF	; 255
     d5e:	88 e6       	ldi	r24, 0x68	; 104
     d60:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <TWIMWrite>
     d64:	88 e3       	ldi	r24, 0x38	; 56
     d66:	89 83       	std	Y+1, r24	; 0x01
     d68:	1a 83       	std	Y+2, r17	; 0x02
     d6a:	42 e0       	ldi	r20, 0x02	; 2
     d6c:	be 01       	movw	r22, r28
     d6e:	6f 5f       	subi	r22, 0xFF	; 255
     d70:	7f 4f       	sbci	r23, 0xFF	; 255
     d72:	88 e6       	ldi	r24, 0x68	; 104
     d74:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <TWIMWrite>
     d78:	8b e6       	ldi	r24, 0x6B	; 107
     d7a:	89 83       	std	Y+1, r24	; 0x01
     d7c:	1a 83       	std	Y+2, r17	; 0x02
     d7e:	42 e0       	ldi	r20, 0x02	; 2
     d80:	be 01       	movw	r22, r28
     d82:	6f 5f       	subi	r22, 0xFF	; 255
     d84:	7f 4f       	sbci	r23, 0xFF	; 255
     d86:	88 e6       	ldi	r24, 0x68	; 104
     d88:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <TWIMWrite>
     d8c:	0f 90       	pop	r0
     d8e:	0f 90       	pop	r0
     d90:	df 91       	pop	r29
     d92:	cf 91       	pop	r28
     d94:	1f 91       	pop	r17
     d96:	0f 91       	pop	r16
     d98:	08 95       	ret

00000d9a <DriverMPU6050GyroGet>:
		data->accelZ = accelZ;
	}
}

void DriverMPU6050GyroGet(int16_t *Gx,int16_t *Gy,int16_t *Gz)
{
     d9a:	af 92       	push	r10
     d9c:	bf 92       	push	r11
     d9e:	cf 92       	push	r12
     da0:	df 92       	push	r13
     da2:	ef 92       	push	r14
     da4:	ff 92       	push	r15
     da6:	0f 93       	push	r16
     da8:	cf 93       	push	r28
     daa:	df 93       	push	r29
     dac:	cd b7       	in	r28, 0x3d	; 61
     dae:	de b7       	in	r29, 0x3e	; 62
     db0:	2c 97       	sbiw	r28, 0x0c	; 12
     db2:	cd bf       	out	0x3d, r28	; 61
     db4:	de bf       	out	0x3e, r29	; 62
     db6:	5c 01       	movw	r10, r24
     db8:	6b 01       	movw	r12, r22
     dba:	7a 01       	movw	r14, r20
	uint8_t res;
	uint16_t x,y,z;
	uint8_t Buffer[6];

	//Read Gyro data
	Buffer[0]=MPU6050_GX;
     dbc:	83 e4       	ldi	r24, 0x43	; 67
     dbe:	89 83       	std	Y+1, r24	; 0x01
	res=TWIMWriteRead(MPU6050_ADDR,Buffer,1,Buffer,6);
     dc0:	06 e0       	ldi	r16, 0x06	; 6
     dc2:	9e 01       	movw	r18, r28
     dc4:	2f 5f       	subi	r18, 0xFF	; 255
     dc6:	3f 4f       	sbci	r19, 0xFF	; 255
     dc8:	41 e0       	ldi	r20, 0x01	; 1
     dca:	b9 01       	movw	r22, r18
     dcc:	88 e6       	ldi	r24, 0x68	; 104
     dce:	0e 94 4d 09 	call	0x129a	; 0x129a <TWIMWriteRead>
	configASSERT(res);
     dd2:	88 23       	and	r24, r24
     dd4:	89 f1       	breq	.+98     	; 0xe38 <DriverMPU6050GyroGet+0x9e>
	((char *) (&x))[0]=Buffer[1];
     dd6:	8a 81       	ldd	r24, Y+2	; 0x02
     dd8:	8b 87       	std	Y+11, r24	; 0x0b
	((char *) (&x))[1]=Buffer[0];
     dda:	89 81       	ldd	r24, Y+1	; 0x01
     ddc:	8c 87       	std	Y+12, r24	; 0x0c
	
	((char *) (&y))[0]=Buffer[3];
     dde:	8c 81       	ldd	r24, Y+4	; 0x04
     de0:	89 87       	std	Y+9, r24	; 0x09
	((char *) (&y))[1]=Buffer[2];
     de2:	8b 81       	ldd	r24, Y+3	; 0x03
     de4:	8a 87       	std	Y+10, r24	; 0x0a
		
	((char *) (&z))[0]=Buffer[5];
     de6:	8e 81       	ldd	r24, Y+6	; 0x06
     de8:	8f 83       	std	Y+7, r24	; 0x07
	((char *) (&z))[1]=Buffer[4];
     dea:	8d 81       	ldd	r24, Y+5	; 0x05
     dec:	88 87       	std	Y+8, r24	; 0x08

	if (Gx!=NULL) *Gx=x;	
     dee:	a1 14       	cp	r10, r1
     df0:	b1 04       	cpc	r11, r1
     df2:	29 f0       	breq	.+10     	; 0xdfe <DriverMPU6050GyroGet+0x64>
     df4:	8b 85       	ldd	r24, Y+11	; 0x0b
     df6:	9c 85       	ldd	r25, Y+12	; 0x0c
     df8:	f5 01       	movw	r30, r10
     dfa:	80 83       	st	Z, r24
     dfc:	91 83       	std	Z+1, r25	; 0x01
	if (Gy!=NULL) *Gy=y;	
     dfe:	c1 14       	cp	r12, r1
     e00:	d1 04       	cpc	r13, r1
     e02:	29 f0       	breq	.+10     	; 0xe0e <DriverMPU6050GyroGet+0x74>
     e04:	89 85       	ldd	r24, Y+9	; 0x09
     e06:	9a 85       	ldd	r25, Y+10	; 0x0a
     e08:	f6 01       	movw	r30, r12
     e0a:	80 83       	st	Z, r24
     e0c:	91 83       	std	Z+1, r25	; 0x01
	if (Gz!=NULL) *Gz=z;	
     e0e:	e1 14       	cp	r14, r1
     e10:	f1 04       	cpc	r15, r1
     e12:	29 f0       	breq	.+10     	; 0xe1e <DriverMPU6050GyroGet+0x84>
     e14:	8f 81       	ldd	r24, Y+7	; 0x07
     e16:	98 85       	ldd	r25, Y+8	; 0x08
     e18:	f7 01       	movw	r30, r14
     e1a:	80 83       	st	Z, r24
     e1c:	91 83       	std	Z+1, r25	; 0x01
}
     e1e:	2c 96       	adiw	r28, 0x0c	; 12
     e20:	cd bf       	out	0x3d, r28	; 61
     e22:	de bf       	out	0x3e, r29	; 62
     e24:	df 91       	pop	r29
     e26:	cf 91       	pop	r28
     e28:	0f 91       	pop	r16
     e2a:	ff 90       	pop	r15
     e2c:	ef 90       	pop	r14
     e2e:	df 90       	pop	r13
     e30:	cf 90       	pop	r12
     e32:	bf 90       	pop	r11
     e34:	af 90       	pop	r10
     e36:	08 95       	ret
	uint8_t Buffer[6];

	//Read Gyro data
	Buffer[0]=MPU6050_GX;
	res=TWIMWriteRead(MPU6050_ADDR,Buffer,1,Buffer,6);
	configASSERT(res);
     e38:	6f e7       	ldi	r22, 0x7F	; 127
     e3a:	70 e0       	ldi	r23, 0x00	; 0
     e3c:	8e e6       	ldi	r24, 0x6E	; 110
     e3e:	90 e2       	ldi	r25, 0x20	; 32
     e40:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <vAssertCalled>
     e44:	c8 cf       	rjmp	.-112    	; 0xdd6 <DriverMPU6050GyroGet+0x3c>

00000e46 <DriverMPU6050AccGet>:
	if (Gz!=NULL) *Gz=z;	
}

//Function to get the accelerometer data
void DriverMPU6050AccGet(int16_t *Ax,int16_t *Ay,int16_t *Az)
{
     e46:	af 92       	push	r10
     e48:	bf 92       	push	r11
     e4a:	cf 92       	push	r12
     e4c:	df 92       	push	r13
     e4e:	ef 92       	push	r14
     e50:	ff 92       	push	r15
     e52:	0f 93       	push	r16
     e54:	cf 93       	push	r28
     e56:	df 93       	push	r29
     e58:	cd b7       	in	r28, 0x3d	; 61
     e5a:	de b7       	in	r29, 0x3e	; 62
     e5c:	2c 97       	sbiw	r28, 0x0c	; 12
     e5e:	cd bf       	out	0x3d, r28	; 61
     e60:	de bf       	out	0x3e, r29	; 62
     e62:	5c 01       	movw	r10, r24
     e64:	6b 01       	movw	r12, r22
     e66:	7a 01       	movw	r14, r20
	uint8_t res;
	uint16_t x,y,z;
	uint8_t Buffer[6];

	//Read Acc data
	Buffer[0]=MPU6050_AX;
     e68:	8b e3       	ldi	r24, 0x3B	; 59
     e6a:	89 83       	std	Y+1, r24	; 0x01
	res=TWIMWriteRead(MPU6050_ADDR,Buffer,1,Buffer,6);
     e6c:	06 e0       	ldi	r16, 0x06	; 6
     e6e:	9e 01       	movw	r18, r28
     e70:	2f 5f       	subi	r18, 0xFF	; 255
     e72:	3f 4f       	sbci	r19, 0xFF	; 255
     e74:	41 e0       	ldi	r20, 0x01	; 1
     e76:	b9 01       	movw	r22, r18
     e78:	88 e6       	ldi	r24, 0x68	; 104
     e7a:	0e 94 4d 09 	call	0x129a	; 0x129a <TWIMWriteRead>
	configASSERT(res);
     e7e:	88 23       	and	r24, r24
     e80:	89 f1       	breq	.+98     	; 0xee4 <DriverMPU6050AccGet+0x9e>
	((char *) (&x))[0]=Buffer[1];
     e82:	8a 81       	ldd	r24, Y+2	; 0x02
     e84:	8b 87       	std	Y+11, r24	; 0x0b
	((char *) (&x))[1]=Buffer[0];
     e86:	89 81       	ldd	r24, Y+1	; 0x01
     e88:	8c 87       	std	Y+12, r24	; 0x0c
	
	((char *) (&y))[0]=Buffer[3];
     e8a:	8c 81       	ldd	r24, Y+4	; 0x04
     e8c:	89 87       	std	Y+9, r24	; 0x09
	((char *) (&y))[1]=Buffer[2];
     e8e:	8b 81       	ldd	r24, Y+3	; 0x03
     e90:	8a 87       	std	Y+10, r24	; 0x0a
		
	((char *) (&z))[0]=Buffer[5];
     e92:	8e 81       	ldd	r24, Y+6	; 0x06
     e94:	8f 83       	std	Y+7, r24	; 0x07
	((char *) (&z))[1]=Buffer[4];
     e96:	8d 81       	ldd	r24, Y+5	; 0x05
     e98:	88 87       	std	Y+8, r24	; 0x08

	if (Ax!=NULL) *Ax=x;	
     e9a:	a1 14       	cp	r10, r1
     e9c:	b1 04       	cpc	r11, r1
     e9e:	29 f0       	breq	.+10     	; 0xeaa <DriverMPU6050AccGet+0x64>
     ea0:	8b 85       	ldd	r24, Y+11	; 0x0b
     ea2:	9c 85       	ldd	r25, Y+12	; 0x0c
     ea4:	f5 01       	movw	r30, r10
     ea6:	80 83       	st	Z, r24
     ea8:	91 83       	std	Z+1, r25	; 0x01
	if (Ay!=NULL) *Ay=y;	
     eaa:	c1 14       	cp	r12, r1
     eac:	d1 04       	cpc	r13, r1
     eae:	29 f0       	breq	.+10     	; 0xeba <DriverMPU6050AccGet+0x74>
     eb0:	89 85       	ldd	r24, Y+9	; 0x09
     eb2:	9a 85       	ldd	r25, Y+10	; 0x0a
     eb4:	f6 01       	movw	r30, r12
     eb6:	80 83       	st	Z, r24
     eb8:	91 83       	std	Z+1, r25	; 0x01
	if (Az!=NULL) *Az=z;	
     eba:	e1 14       	cp	r14, r1
     ebc:	f1 04       	cpc	r15, r1
     ebe:	29 f0       	breq	.+10     	; 0xeca <DriverMPU6050AccGet+0x84>
     ec0:	8f 81       	ldd	r24, Y+7	; 0x07
     ec2:	98 85       	ldd	r25, Y+8	; 0x08
     ec4:	f7 01       	movw	r30, r14
     ec6:	80 83       	st	Z, r24
     ec8:	91 83       	std	Z+1, r25	; 0x01
     eca:	2c 96       	adiw	r28, 0x0c	; 12
     ecc:	cd bf       	out	0x3d, r28	; 61
     ece:	de bf       	out	0x3e, r29	; 62
     ed0:	df 91       	pop	r29
     ed2:	cf 91       	pop	r28
     ed4:	0f 91       	pop	r16
     ed6:	ff 90       	pop	r15
     ed8:	ef 90       	pop	r14
     eda:	df 90       	pop	r13
     edc:	cf 90       	pop	r12
     ede:	bf 90       	pop	r11
     ee0:	af 90       	pop	r10
     ee2:	08 95       	ret
	uint8_t Buffer[6];

	//Read Acc data
	Buffer[0]=MPU6050_AX;
	res=TWIMWriteRead(MPU6050_ADDR,Buffer,1,Buffer,6);
	configASSERT(res);
     ee4:	68 e9       	ldi	r22, 0x98	; 152
     ee6:	70 e0       	ldi	r23, 0x00	; 0
     ee8:	8e e6       	ldi	r24, 0x6E	; 110
     eea:	90 e2       	ldi	r25, 0x20	; 32
     eec:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <vAssertCalled>
     ef0:	c8 cf       	rjmp	.-112    	; 0xe82 <DriverMPU6050AccGet+0x3c>

00000ef2 <set_page_address.part.0>:

void DriverOLEDWake()
{
	if (!DriverOLEDInitialized) return;
	send_command(0xAF);
}
     ef2:	1f 93       	push	r17
     ef4:	cf 93       	push	r28
     ef6:	df 93       	push	r29
     ef8:	1f 92       	push	r1
     efa:	1f 92       	push	r1
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
     f00:	10 e8       	ldi	r17, 0x80	; 128
     f02:	19 83       	std	Y+1, r17	; 0x01
     f04:	82 e2       	ldi	r24, 0x22	; 34
     f06:	8a 83       	std	Y+2, r24	; 0x02
     f08:	42 e0       	ldi	r20, 0x02	; 2
     f0a:	be 01       	movw	r22, r28
     f0c:	6f 5f       	subi	r22, 0xFF	; 255
     f0e:	7f 4f       	sbci	r23, 0xFF	; 255
     f10:	8c e3       	ldi	r24, 0x3C	; 60
     f12:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <TWIMWrite>
     f16:	19 83       	std	Y+1, r17	; 0x01
     f18:	1a 82       	std	Y+2, r1	; 0x02
     f1a:	42 e0       	ldi	r20, 0x02	; 2
     f1c:	be 01       	movw	r22, r28
     f1e:	6f 5f       	subi	r22, 0xFF	; 255
     f20:	7f 4f       	sbci	r23, 0xFF	; 255
     f22:	8c e3       	ldi	r24, 0x3C	; 60
     f24:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <TWIMWrite>
     f28:	19 83       	std	Y+1, r17	; 0x01
     f2a:	87 e0       	ldi	r24, 0x07	; 7
     f2c:	8a 83       	std	Y+2, r24	; 0x02
     f2e:	42 e0       	ldi	r20, 0x02	; 2
     f30:	be 01       	movw	r22, r28
     f32:	6f 5f       	subi	r22, 0xFF	; 255
     f34:	7f 4f       	sbci	r23, 0xFF	; 255
     f36:	8c e3       	ldi	r24, 0x3C	; 60
     f38:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <TWIMWrite>
     f3c:	0f 90       	pop	r0
     f3e:	0f 90       	pop	r0
     f40:	df 91       	pop	r29
     f42:	cf 91       	pop	r28
     f44:	1f 91       	pop	r17
     f46:	08 95       	ret

00000f48 <set_column_address.part.1>:
     f48:	1f 93       	push	r17
     f4a:	cf 93       	push	r28
     f4c:	df 93       	push	r29
     f4e:	1f 92       	push	r1
     f50:	1f 92       	push	r1
     f52:	cd b7       	in	r28, 0x3d	; 61
     f54:	de b7       	in	r29, 0x3e	; 62
     f56:	10 e8       	ldi	r17, 0x80	; 128
     f58:	19 83       	std	Y+1, r17	; 0x01
     f5a:	81 e2       	ldi	r24, 0x21	; 33
     f5c:	8a 83       	std	Y+2, r24	; 0x02
     f5e:	42 e0       	ldi	r20, 0x02	; 2
     f60:	be 01       	movw	r22, r28
     f62:	6f 5f       	subi	r22, 0xFF	; 255
     f64:	7f 4f       	sbci	r23, 0xFF	; 255
     f66:	8c e3       	ldi	r24, 0x3C	; 60
     f68:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <TWIMWrite>
     f6c:	19 83       	std	Y+1, r17	; 0x01
     f6e:	1a 82       	std	Y+2, r1	; 0x02
     f70:	42 e0       	ldi	r20, 0x02	; 2
     f72:	be 01       	movw	r22, r28
     f74:	6f 5f       	subi	r22, 0xFF	; 255
     f76:	7f 4f       	sbci	r23, 0xFF	; 255
     f78:	8c e3       	ldi	r24, 0x3C	; 60
     f7a:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <TWIMWrite>
     f7e:	19 83       	std	Y+1, r17	; 0x01
     f80:	8f e7       	ldi	r24, 0x7F	; 127
     f82:	8a 83       	std	Y+2, r24	; 0x02
     f84:	42 e0       	ldi	r20, 0x02	; 2
     f86:	be 01       	movw	r22, r28
     f88:	6f 5f       	subi	r22, 0xFF	; 255
     f8a:	7f 4f       	sbci	r23, 0xFF	; 255
     f8c:	8c e3       	ldi	r24, 0x3C	; 60
     f8e:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <TWIMWrite>
     f92:	0f 90       	pop	r0
     f94:	0f 90       	pop	r0
     f96:	df 91       	pop	r29
     f98:	cf 91       	pop	r28
     f9a:	1f 91       	pop	r17
     f9c:	08 95       	ret

00000f9e <DriverOLEDUpdate>:
     f9e:	bf 92       	push	r11
     fa0:	cf 92       	push	r12
     fa2:	df 92       	push	r13
     fa4:	ef 92       	push	r14
     fa6:	ff 92       	push	r15
     fa8:	0f 93       	push	r16
     faa:	1f 93       	push	r17
     fac:	cf 93       	push	r28
     fae:	df 93       	push	r29
     fb0:	cd b7       	in	r28, 0x3d	; 61
     fb2:	de b7       	in	r29, 0x3e	; 62
     fb4:	61 97       	sbiw	r28, 0x11	; 17
     fb6:	cd bf       	out	0x3d, r28	; 61
     fb8:	de bf       	out	0x3e, r29	; 62
     fba:	80 91 83 21 	lds	r24, 0x2183	; 0x802183 <DriverOLEDInitialized>
     fbe:	88 23       	and	r24, r24
     fc0:	49 f1       	breq	.+82     	; 0x1014 <DriverOLEDUpdate+0x76>
     fc2:	0e 94 a4 07 	call	0xf48	; 0xf48 <set_column_address.part.1>
     fc6:	80 91 83 21 	lds	r24, 0x2183	; 0x802183 <DriverOLEDInitialized>
     fca:	81 11       	cpse	r24, r1
     fcc:	30 c0       	rjmp	.+96     	; 0x102e <DriverOLEDUpdate+0x90>
     fce:	85 e8       	ldi	r24, 0x85	; 133
     fd0:	c8 2e       	mov	r12, r24
     fd2:	81 e2       	ldi	r24, 0x21	; 33
     fd4:	d8 2e       	mov	r13, r24
     fd6:	95 e8       	ldi	r25, 0x85	; 133
     fd8:	e9 2e       	mov	r14, r25
     fda:	95 e2       	ldi	r25, 0x25	; 37
     fdc:	f9 2e       	mov	r15, r25
     fde:	8e 01       	movw	r16, r28
     fe0:	0e 5e       	subi	r16, 0xEE	; 238
     fe2:	1f 4f       	sbci	r17, 0xFF	; 255
     fe4:	20 e4       	ldi	r18, 0x40	; 64
     fe6:	b2 2e       	mov	r11, r18
     fe8:	b9 82       	std	Y+1, r11	; 0x01
     fea:	fe 01       	movw	r30, r28
     fec:	32 96       	adiw	r30, 0x02	; 2
     fee:	d6 01       	movw	r26, r12
     ff0:	8d 91       	ld	r24, X+
     ff2:	81 93       	st	Z+, r24
     ff4:	e0 17       	cp	r30, r16
     ff6:	f1 07       	cpc	r31, r17
     ff8:	d9 f7       	brne	.-10     	; 0xff0 <DriverOLEDUpdate+0x52>
     ffa:	41 e1       	ldi	r20, 0x11	; 17
     ffc:	be 01       	movw	r22, r28
     ffe:	6f 5f       	subi	r22, 0xFF	; 255
    1000:	7f 4f       	sbci	r23, 0xFF	; 255
    1002:	8c e3       	ldi	r24, 0x3C	; 60
    1004:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <TWIMWrite>
    1008:	80 e1       	ldi	r24, 0x10	; 16
    100a:	c8 0e       	add	r12, r24
    100c:	d1 1c       	adc	r13, r1
    100e:	ec 14       	cp	r14, r12
    1010:	fd 04       	cpc	r15, r13
    1012:	51 f7       	brne	.-44     	; 0xfe8 <DriverOLEDUpdate+0x4a>
    1014:	61 96       	adiw	r28, 0x11	; 17
    1016:	cd bf       	out	0x3d, r28	; 61
    1018:	de bf       	out	0x3e, r29	; 62
    101a:	df 91       	pop	r29
    101c:	cf 91       	pop	r28
    101e:	1f 91       	pop	r17
    1020:	0f 91       	pop	r16
    1022:	ff 90       	pop	r15
    1024:	ef 90       	pop	r14
    1026:	df 90       	pop	r13
    1028:	cf 90       	pop	r12
    102a:	bf 90       	pop	r11
    102c:	08 95       	ret
    102e:	0e 94 79 07 	call	0xef2	; 0xef2 <set_page_address.part.0>
    1032:	cd cf       	rjmp	.-102    	; 0xfce <DriverOLEDUpdate+0x30>

00001034 <DriverOLEDInit>:

void DriverOLEDInit(uint8_t Orientation)
{
    1034:	0f 93       	push	r16
    1036:	1f 93       	push	r17
    1038:	cf 93       	push	r28
    103a:	df 93       	push	r29
    103c:	00 d0       	rcall	.+0      	; 0x103e <DriverOLEDInit+0xa>
    103e:	1f 92       	push	r1
    1040:	cd b7       	in	r28, 0x3d	; 61
    1042:	de b7       	in	r29, 0x3e	; 62
	uint8_t res;
	DriverOLEDInitialized=0;
    1044:	10 92 83 21 	sts	0x2183, r1	; 0x802183 <DriverOLEDInitialized>
	GlobOrientation=Orientation;
    1048:	80 93 84 21 	sts	0x2184, r24	; 0x802184 <GlobOrientation>
}

uint8_t send_command(uint8_t command) {
	uint8_t res;
	uint8_t Buffer[2];
	Buffer[0]=COMMAND;
    104c:	10 e8       	ldi	r17, 0x80	; 128
    104e:	19 83       	std	Y+1, r17	; 0x01
	Buffer[1]=command;
    1050:	8e ea       	ldi	r24, 0xAE	; 174
    1052:	8a 83       	std	Y+2, r24	; 0x02
	res=TWIMWrite(ADDRESS,Buffer,2);
    1054:	42 e0       	ldi	r20, 0x02	; 2
    1056:	be 01       	movw	r22, r28
    1058:	6f 5f       	subi	r22, 0xFF	; 255
    105a:	7f 4f       	sbci	r23, 0xFF	; 255
    105c:	8c e3       	ldi	r24, 0x3C	; 60
    105e:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <TWIMWrite>
	DriverOLEDInitialized=0;
	GlobOrientation=Orientation;

	
	res=send_command(0xAE);
	if (!res) return;
    1062:	88 23       	and	r24, r24
    1064:	09 f4       	brne	.+2      	; 0x1068 <DriverOLEDInit+0x34>
    1066:	c3 c0       	rjmp	.+390    	; 0x11ee <DriverOLEDInit+0x1ba>
}

uint8_t send_command_data(uint8_t command, uint8_t data) {
	uint8_t res;
	uint8_t Buffer[4];
	Buffer[0]=0x80;
    1068:	19 83       	std	Y+1, r17	; 0x01
	Buffer[1]=command;
    106a:	85 ed       	ldi	r24, 0xD5	; 213
    106c:	8a 83       	std	Y+2, r24	; 0x02
	Buffer[2]=COMMAND;
    106e:	1b 83       	std	Y+3, r17	; 0x03
	Buffer[3]=data;
    1070:	1c 83       	std	Y+4, r17	; 0x04
	res=TWIMWrite(ADDRESS,Buffer,4);
    1072:	44 e0       	ldi	r20, 0x04	; 4
    1074:	be 01       	movw	r22, r28
    1076:	6f 5f       	subi	r22, 0xFF	; 255
    1078:	7f 4f       	sbci	r23, 0xFF	; 255
    107a:	8c e3       	ldi	r24, 0x3C	; 60
    107c:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <TWIMWrite>
}

uint8_t send_command_data(uint8_t command, uint8_t data) {
	uint8_t res;
	uint8_t Buffer[4];
	Buffer[0]=0x80;
    1080:	19 83       	std	Y+1, r17	; 0x01
	Buffer[1]=command;
    1082:	88 ea       	ldi	r24, 0xA8	; 168
    1084:	8a 83       	std	Y+2, r24	; 0x02
	Buffer[2]=COMMAND;
    1086:	1b 83       	std	Y+3, r17	; 0x03
	Buffer[3]=data;
    1088:	8f e3       	ldi	r24, 0x3F	; 63
    108a:	8c 83       	std	Y+4, r24	; 0x04
	res=TWIMWrite(ADDRESS,Buffer,4);
    108c:	44 e0       	ldi	r20, 0x04	; 4
    108e:	be 01       	movw	r22, r28
    1090:	6f 5f       	subi	r22, 0xFF	; 255
    1092:	7f 4f       	sbci	r23, 0xFF	; 255
    1094:	8c e3       	ldi	r24, 0x3C	; 60
    1096:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <TWIMWrite>
}

uint8_t send_command_data(uint8_t command, uint8_t data) {
	uint8_t res;
	uint8_t Buffer[4];
	Buffer[0]=0x80;
    109a:	19 83       	std	Y+1, r17	; 0x01
	Buffer[1]=command;
    109c:	83 ed       	ldi	r24, 0xD3	; 211
    109e:	8a 83       	std	Y+2, r24	; 0x02
	Buffer[2]=COMMAND;
    10a0:	1b 83       	std	Y+3, r17	; 0x03
	Buffer[3]=data;
    10a2:	1c 82       	std	Y+4, r1	; 0x04
	res=TWIMWrite(ADDRESS,Buffer,4);
    10a4:	44 e0       	ldi	r20, 0x04	; 4
    10a6:	be 01       	movw	r22, r28
    10a8:	6f 5f       	subi	r22, 0xFF	; 255
    10aa:	7f 4f       	sbci	r23, 0xFF	; 255
    10ac:	8c e3       	ldi	r24, 0x3C	; 60
    10ae:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <TWIMWrite>
}

uint8_t send_command_data(uint8_t command, uint8_t data) {
	uint8_t res;
	uint8_t Buffer[4];
	Buffer[0]=0x80;
    10b2:	19 83       	std	Y+1, r17	; 0x01
	Buffer[1]=command;
    10b4:	8d e8       	ldi	r24, 0x8D	; 141
    10b6:	8a 83       	std	Y+2, r24	; 0x02
	Buffer[2]=COMMAND;
    10b8:	1b 83       	std	Y+3, r17	; 0x03
	Buffer[3]=data;
    10ba:	84 e1       	ldi	r24, 0x14	; 20
    10bc:	8c 83       	std	Y+4, r24	; 0x04
	res=TWIMWrite(ADDRESS,Buffer,4);
    10be:	44 e0       	ldi	r20, 0x04	; 4
    10c0:	be 01       	movw	r22, r28
    10c2:	6f 5f       	subi	r22, 0xFF	; 255
    10c4:	7f 4f       	sbci	r23, 0xFF	; 255
    10c6:	8c e3       	ldi	r24, 0x3C	; 60
    10c8:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <TWIMWrite>
}

uint8_t send_command(uint8_t command) {
	uint8_t res;
	uint8_t Buffer[2];
	Buffer[0]=COMMAND;
    10cc:	19 83       	std	Y+1, r17	; 0x01
	Buffer[1]=command;
    10ce:	00 e4       	ldi	r16, 0x40	; 64
    10d0:	0a 83       	std	Y+2, r16	; 0x02
	res=TWIMWrite(ADDRESS,Buffer,2);
    10d2:	42 e0       	ldi	r20, 0x02	; 2
    10d4:	be 01       	movw	r22, r28
    10d6:	6f 5f       	subi	r22, 0xFF	; 255
    10d8:	7f 4f       	sbci	r23, 0xFF	; 255
    10da:	8c e3       	ldi	r24, 0x3C	; 60
    10dc:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <TWIMWrite>
}

uint8_t send_command(uint8_t command) {
	uint8_t res;
	uint8_t Buffer[2];
	Buffer[0]=COMMAND;
    10e0:	19 83       	std	Y+1, r17	; 0x01
	Buffer[1]=command;
    10e2:	86 ea       	ldi	r24, 0xA6	; 166
    10e4:	8a 83       	std	Y+2, r24	; 0x02
	res=TWIMWrite(ADDRESS,Buffer,2);
    10e6:	42 e0       	ldi	r20, 0x02	; 2
    10e8:	be 01       	movw	r22, r28
    10ea:	6f 5f       	subi	r22, 0xFF	; 255
    10ec:	7f 4f       	sbci	r23, 0xFF	; 255
    10ee:	8c e3       	ldi	r24, 0x3C	; 60
    10f0:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <TWIMWrite>
}

uint8_t send_command(uint8_t command) {
	uint8_t res;
	uint8_t Buffer[2];
	Buffer[0]=COMMAND;
    10f4:	19 83       	std	Y+1, r17	; 0x01
	Buffer[1]=command;
    10f6:	84 ea       	ldi	r24, 0xA4	; 164
    10f8:	8a 83       	std	Y+2, r24	; 0x02
	res=TWIMWrite(ADDRESS,Buffer,2);
    10fa:	42 e0       	ldi	r20, 0x02	; 2
    10fc:	be 01       	movw	r22, r28
    10fe:	6f 5f       	subi	r22, 0xFF	; 255
    1100:	7f 4f       	sbci	r23, 0xFF	; 255
    1102:	8c e3       	ldi	r24, 0x3C	; 60
    1104:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <TWIMWrite>
}

uint8_t send_command(uint8_t command) {
	uint8_t res;
	uint8_t Buffer[2];
	Buffer[0]=COMMAND;
    1108:	19 83       	std	Y+1, r17	; 0x01
	Buffer[1]=command;
    110a:	81 ea       	ldi	r24, 0xA1	; 161
    110c:	8a 83       	std	Y+2, r24	; 0x02
	res=TWIMWrite(ADDRESS,Buffer,2);
    110e:	42 e0       	ldi	r20, 0x02	; 2
    1110:	be 01       	movw	r22, r28
    1112:	6f 5f       	subi	r22, 0xFF	; 255
    1114:	7f 4f       	sbci	r23, 0xFF	; 255
    1116:	8c e3       	ldi	r24, 0x3C	; 60
    1118:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <TWIMWrite>
}

uint8_t send_command(uint8_t command) {
	uint8_t res;
	uint8_t Buffer[2];
	Buffer[0]=COMMAND;
    111c:	19 83       	std	Y+1, r17	; 0x01
	Buffer[1]=command;
    111e:	88 ec       	ldi	r24, 0xC8	; 200
    1120:	8a 83       	std	Y+2, r24	; 0x02
	res=TWIMWrite(ADDRESS,Buffer,2);
    1122:	42 e0       	ldi	r20, 0x02	; 2
    1124:	be 01       	movw	r22, r28
    1126:	6f 5f       	subi	r22, 0xFF	; 255
    1128:	7f 4f       	sbci	r23, 0xFF	; 255
    112a:	8c e3       	ldi	r24, 0x3C	; 60
    112c:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <TWIMWrite>
}

uint8_t send_command(uint8_t command) {
	uint8_t res;
	uint8_t Buffer[2];
	Buffer[0]=COMMAND;
    1130:	19 83       	std	Y+1, r17	; 0x01
	Buffer[1]=command;
    1132:	80 e2       	ldi	r24, 0x20	; 32
    1134:	8a 83       	std	Y+2, r24	; 0x02
	res=TWIMWrite(ADDRESS,Buffer,2);
    1136:	42 e0       	ldi	r20, 0x02	; 2
    1138:	be 01       	movw	r22, r28
    113a:	6f 5f       	subi	r22, 0xFF	; 255
    113c:	7f 4f       	sbci	r23, 0xFF	; 255
    113e:	8c e3       	ldi	r24, 0x3C	; 60
    1140:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <TWIMWrite>
}

uint8_t send_command(uint8_t command) {
	uint8_t res;
	uint8_t Buffer[2];
	Buffer[0]=COMMAND;
    1144:	19 83       	std	Y+1, r17	; 0x01
	Buffer[1]=command;
    1146:	1a 82       	std	Y+2, r1	; 0x02
	res=TWIMWrite(ADDRESS,Buffer,2);
    1148:	42 e0       	ldi	r20, 0x02	; 2
    114a:	be 01       	movw	r22, r28
    114c:	6f 5f       	subi	r22, 0xFF	; 255
    114e:	7f 4f       	sbci	r23, 0xFF	; 255
    1150:	8c e3       	ldi	r24, 0x3C	; 60
    1152:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <TWIMWrite>
}

uint8_t send_command_data(uint8_t command, uint8_t data) {
	uint8_t res;
	uint8_t Buffer[4];
	Buffer[0]=0x80;
    1156:	19 83       	std	Y+1, r17	; 0x01
	Buffer[1]=command;
    1158:	8a ed       	ldi	r24, 0xDA	; 218
    115a:	8a 83       	std	Y+2, r24	; 0x02
	Buffer[2]=COMMAND;
    115c:	1b 83       	std	Y+3, r17	; 0x03
	Buffer[3]=data;
    115e:	82 e1       	ldi	r24, 0x12	; 18
    1160:	8c 83       	std	Y+4, r24	; 0x04
	res=TWIMWrite(ADDRESS,Buffer,4);
    1162:	44 e0       	ldi	r20, 0x04	; 4
    1164:	be 01       	movw	r22, r28
    1166:	6f 5f       	subi	r22, 0xFF	; 255
    1168:	7f 4f       	sbci	r23, 0xFF	; 255
    116a:	8c e3       	ldi	r24, 0x3C	; 60
    116c:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <TWIMWrite>
}

uint8_t send_command_data(uint8_t command, uint8_t data) {
	uint8_t res;
	uint8_t Buffer[4];
	Buffer[0]=0x80;
    1170:	19 83       	std	Y+1, r17	; 0x01
	Buffer[1]=command;
    1172:	81 e8       	ldi	r24, 0x81	; 129
    1174:	8a 83       	std	Y+2, r24	; 0x02
	Buffer[2]=COMMAND;
    1176:	1b 83       	std	Y+3, r17	; 0x03
	Buffer[3]=data;
    1178:	8f e8       	ldi	r24, 0x8F	; 143
    117a:	8c 83       	std	Y+4, r24	; 0x04
	res=TWIMWrite(ADDRESS,Buffer,4);
    117c:	44 e0       	ldi	r20, 0x04	; 4
    117e:	be 01       	movw	r22, r28
    1180:	6f 5f       	subi	r22, 0xFF	; 255
    1182:	7f 4f       	sbci	r23, 0xFF	; 255
    1184:	8c e3       	ldi	r24, 0x3C	; 60
    1186:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <TWIMWrite>
}

uint8_t send_command_data(uint8_t command, uint8_t data) {
	uint8_t res;
	uint8_t Buffer[4];
	Buffer[0]=0x80;
    118a:	19 83       	std	Y+1, r17	; 0x01
	Buffer[1]=command;
    118c:	89 ed       	ldi	r24, 0xD9	; 217
    118e:	8a 83       	std	Y+2, r24	; 0x02
	Buffer[2]=COMMAND;
    1190:	1b 83       	std	Y+3, r17	; 0x03
	Buffer[3]=data;
    1192:	81 ef       	ldi	r24, 0xF1	; 241
    1194:	8c 83       	std	Y+4, r24	; 0x04
	res=TWIMWrite(ADDRESS,Buffer,4);
    1196:	44 e0       	ldi	r20, 0x04	; 4
    1198:	be 01       	movw	r22, r28
    119a:	6f 5f       	subi	r22, 0xFF	; 255
    119c:	7f 4f       	sbci	r23, 0xFF	; 255
    119e:	8c e3       	ldi	r24, 0x3C	; 60
    11a0:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <TWIMWrite>
}

uint8_t send_command_data(uint8_t command, uint8_t data) {
	uint8_t res;
	uint8_t Buffer[4];
	Buffer[0]=0x80;
    11a4:	19 83       	std	Y+1, r17	; 0x01
	Buffer[1]=command;
    11a6:	8b ed       	ldi	r24, 0xDB	; 219
    11a8:	8a 83       	std	Y+2, r24	; 0x02
	Buffer[2]=COMMAND;
    11aa:	1b 83       	std	Y+3, r17	; 0x03
	Buffer[3]=data;
    11ac:	0c 83       	std	Y+4, r16	; 0x04
	res=TWIMWrite(ADDRESS,Buffer,4);
    11ae:	44 e0       	ldi	r20, 0x04	; 4
    11b0:	be 01       	movw	r22, r28
    11b2:	6f 5f       	subi	r22, 0xFF	; 255
    11b4:	7f 4f       	sbci	r23, 0xFF	; 255
    11b6:	8c e3       	ldi	r24, 0x3C	; 60
    11b8:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <TWIMWrite>
}

uint8_t send_command(uint8_t command) {
	uint8_t res;
	uint8_t Buffer[2];
	Buffer[0]=COMMAND;
    11bc:	19 83       	std	Y+1, r17	; 0x01
	Buffer[1]=command;
    11be:	8f ea       	ldi	r24, 0xAF	; 175
    11c0:	8a 83       	std	Y+2, r24	; 0x02
	res=TWIMWrite(ADDRESS,Buffer,2);
    11c2:	42 e0       	ldi	r20, 0x02	; 2
    11c4:	be 01       	movw	r22, r28
    11c6:	6f 5f       	subi	r22, 0xFF	; 255
    11c8:	7f 4f       	sbci	r23, 0xFF	; 255
    11ca:	8c e3       	ldi	r24, 0x3C	; 60
    11cc:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <TWIMWrite>
		return;
	}
}

void DriverOLEDClearScreen() {
	memset(buffer, 0, BUFFER_SIZE);
    11d0:	80 e0       	ldi	r24, 0x00	; 0
    11d2:	94 e0       	ldi	r25, 0x04	; 4
    11d4:	e5 e8       	ldi	r30, 0x85	; 133
    11d6:	f1 e2       	ldi	r31, 0x21	; 33
    11d8:	df 01       	movw	r26, r30
    11da:	9c 01       	movw	r18, r24
    11dc:	1d 92       	st	X+, r1
    11de:	21 50       	subi	r18, 0x01	; 1
    11e0:	30 40       	sbci	r19, 0x00	; 0
    11e2:	e1 f7       	brne	.-8      	; 0x11dc <DriverOLEDInit+0x1a8>
	send_command_data(0xdb, 0x40);
	send_command(0xaf);


	DriverOLEDClearScreen();
	DriverOLEDUpdate();
    11e4:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DriverOLEDUpdate>
	DriverOLEDInitialized=1;
    11e8:	81 e0       	ldi	r24, 0x01	; 1
    11ea:	80 93 83 21 	sts	0x2183, r24	; 0x802183 <DriverOLEDInitialized>
    11ee:	24 96       	adiw	r28, 0x04	; 4
    11f0:	cd bf       	out	0x3d, r28	; 61
    11f2:	de bf       	out	0x3e, r29	; 62
    11f4:	df 91       	pop	r29
    11f6:	cf 91       	pop	r28
    11f8:	1f 91       	pop	r17
    11fa:	0f 91       	pop	r16
    11fc:	08 95       	ret

000011fe <DriverPL9823Init>:
}

void DriverPL9823Init()
{
	//CS init
	PORTA.DIRSET=1<<6;
    11fe:	e0 e0       	ldi	r30, 0x00	; 0
    1200:	f6 e0       	ldi	r31, 0x06	; 6
    1202:	80 e4       	ldi	r24, 0x40	; 64
    1204:	81 83       	std	Z+1, r24	; 0x01
	PORTA.OUTCLR=1<<6;
    1206:	86 83       	std	Z+6, r24	; 0x06
    1208:	08 95       	ret

0000120a <DriverPowerInit>:
#include "DriverPower.h"

void DriverPowerInit(void)
{
	//Aux Vcc GPIO setup
	PORTC.DIRSET=1<<5;
    120a:	80 e2       	ldi	r24, 0x20	; 32
    120c:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
    1210:	08 95       	ret

00001212 <DriverPowerVccAuxSet>:
}


void DriverPowerVccAuxSet(uint8_t State)
{
	if (State)
    1212:	81 11       	cpse	r24, r1
    1214:	04 c0       	rjmp	.+8      	; 0x121e <DriverPowerVccAuxSet+0xc>
		PORTC.OUTSET=1<<5;
	else
		PORTC.OUTCLR=1<<5;
    1216:	80 e2       	ldi	r24, 0x20	; 32
    1218:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
    121c:	08 95       	ret


void DriverPowerVccAuxSet(uint8_t State)
{
	if (State)
		PORTC.OUTSET=1<<5;
    121e:	80 e2       	ldi	r24, 0x20	; 32
    1220:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
    1224:	08 95       	ret

00001226 <DriverSysClkXtalInit>:
    // Clock setup          
    if (F_XTAL<400E3) return -1; //Invalid frequency
    if (F_XTAL<=2E6) OSC.XOSCCTRL=0b00001011; //Select <2 Mhz XTAL osc, max startup time
    else if(F_XTAL<=9E6) OSC.XOSCCTRL=0b01001011; //Select <2 Mhz XTAL osc, max startup time 
    else if(F_XTAL<=12E6) OSC.XOSCCTRL=0b10001011; //Select <2 Mhz XTAL osc, max startup time 
    else if(F_XTAL<=16E6) OSC.XOSCCTRL=0b11001011; //Select <2 Mhz XTAL osc, max startup time 
    1226:	8b ec       	ldi	r24, 0xCB	; 203
    1228:	80 93 52 00 	sts	0x0052, r24	; 0x800052 <__TEXT_REGION_LENGTH__+0x700052>
    else return -1; //Invalid frequency
    OSC.CTRL=0b01000; //Enable oscillator
    122c:	88 e0       	ldi	r24, 0x08	; 8
    122e:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
    
	//Wait until XTAL osc is ready
    while (!(OSC.STATUS&0b1000)); 
    1232:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
    1236:	83 ff       	sbrs	r24, 3
    1238:	fc cf       	rjmp	.-8      	; 0x1232 <DriverSysClkXtalInit+0xc>
	{
		//Configure PLL
		Mult=F_CPU/F_XTAL;
		if (Mult>31) return -1; //Invalid frequency; too high
		if (F_XTAL * (uint32_t) Mult !=F_CPU) return -1; //Only supports whole dividers
		OSC.PLLCTRL=0b11000000 | (Mult);
    123a:	82 ec       	ldi	r24, 0xC2	; 194
    123c:	80 93 55 00 	sts	0x0055, r24	; 0x800055 <__TEXT_REGION_LENGTH__+0x700055>
		OSC.CTRL=0b00011000; //Enable PLL
    1240:	88 e1       	ldi	r24, 0x18	; 24
    1242:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
		
		//Wait until PLL is ready
		while (!(OSC.STATUS & 0b00010000));
    1246:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
    124a:	84 ff       	sbrs	r24, 4
    124c:	fc cf       	rjmp	.-8      	; 0x1246 <DriverSysClkXtalInit+0x20>
		
		//Select PLL as system CLK source
		CCP=0xd8;
    124e:	88 ed       	ldi	r24, 0xD8	; 216
    1250:	84 bf       	out	0x34, r24	; 52
		CLK.CTRL=0b100;
    1252:	84 e0       	ldi	r24, 0x04	; 4
    1254:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
	}
	return 0;
}
    1258:	80 e0       	ldi	r24, 0x00	; 0
    125a:	08 95       	ret

0000125c <DriverTWIMInit>:
}

void TWIMTransactionFinished( uint8_t result)
{
	Twim_result = result;
	Twim_status = TWIM_STATUS_READY;
    125c:	10 92 8a 25 	sts	0x258A, r1	; 0x80258a <Twim_status>
    1260:	e0 e8       	ldi	r30, 0x80	; 128
    1262:	f6 e0       	ldi	r31, 0x06	; 6
    1264:	88 e1       	ldi	r24, 0x18	; 24
    1266:	80 8b       	std	Z+16, r24	; 0x10
    1268:	81 8b       	std	Z+17, r24	; 0x11
    126a:	e0 ea       	ldi	r30, 0xA0	; 160
    126c:	f4 e0       	ldi	r31, 0x04	; 4
    126e:	88 e7       	ldi	r24, 0x78	; 120
    1270:	81 83       	std	Z+1, r24	; 0x01
    1272:	83 e2       	ldi	r24, 0x23	; 35
    1274:	85 83       	std	Z+5, r24	; 0x05
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	84 83       	std	Z+4, r24	; 0x04
    127a:	0e 94 4b 11 	call	0x2296	; 0x2296 <xQueueCreateMutex>
    127e:	80 93 87 25 	sts	0x2587, r24	; 0x802587 <SemaBus>
    1282:	90 93 88 25 	sts	0x2588, r25	; 0x802588 <SemaBus+0x1>
    1286:	43 e0       	ldi	r20, 0x03	; 3
    1288:	60 e0       	ldi	r22, 0x00	; 0
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	0e 94 38 10 	call	0x2070	; 0x2070 <xQueueGenericCreate>
    1290:	80 93 85 25 	sts	0x2585, r24	; 0x802585 <SemaRx>
    1294:	90 93 86 25 	sts	0x2586, r25	; 0x802586 <SemaRx+0x1>
    1298:	08 95       	ret

0000129a <TWIMWriteRead>:
    129a:	cf 92       	push	r12
    129c:	df 92       	push	r13
    129e:	ef 92       	push	r14
    12a0:	ff 92       	push	r15
    12a2:	0f 93       	push	r16
    12a4:	1f 93       	push	r17
    12a6:	cf 93       	push	r28
    12a8:	df 93       	push	r29
    12aa:	d8 2f       	mov	r29, r24
    12ac:	6b 01       	movw	r12, r22
    12ae:	14 2f       	mov	r17, r20
    12b0:	79 01       	movw	r14, r18
    12b2:	6f ef       	ldi	r22, 0xFF	; 255
    12b4:	7f ef       	ldi	r23, 0xFF	; 255
    12b6:	80 91 87 25 	lds	r24, 0x2587	; 0x802587 <SemaBus>
    12ba:	90 91 88 25 	lds	r25, 0x2588	; 0x802588 <SemaBus+0x1>
    12be:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <xQueueSemaphoreTake>
    12c2:	c0 92 91 25 	sts	0x2591, r12	; 0x802591 <Twim_writeData>
    12c6:	d0 92 92 25 	sts	0x2592, r13	; 0x802592 <Twim_writeData+0x1>
    12ca:	e0 92 8f 25 	sts	0x258F, r14	; 0x80258f <Twim_readData>
    12ce:	f0 92 90 25 	sts	0x2590, r15	; 0x802590 <Twim_readData+0x1>
    12d2:	c0 91 8a 25 	lds	r28, 0x258A	; 0x80258a <Twim_status>
    12d6:	c1 11       	cpse	r28, r1
    12d8:	55 c0       	rjmp	.+170    	; 0x1384 <TWIMWriteRead+0xea>
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	80 93 8a 25 	sts	0x258A, r24	; 0x80258a <Twim_status>
    12e0:	10 92 89 25 	sts	0x2589, r1	; 0x802589 <Twim_result>
    12e4:	8d 2f       	mov	r24, r29
    12e6:	88 0f       	add	r24, r24
    12e8:	80 93 93 25 	sts	0x2593, r24	; 0x802593 <Twim_address>
    12ec:	10 93 8e 25 	sts	0x258E, r17	; 0x80258e <Twim_bytesToWrite>
    12f0:	00 93 8d 25 	sts	0x258D, r16	; 0x80258d <Twim_bytesToRead>
    12f4:	10 92 8c 25 	sts	0x258C, r1	; 0x80258c <Twim_bytesWritten>
    12f8:	10 92 8b 25 	sts	0x258B, r1	; 0x80258b <Twim_bytesRead>
    12fc:	80 91 8e 25 	lds	r24, 0x258E	; 0x80258e <Twim_bytesToWrite>
    1300:	88 23       	and	r24, r24
    1302:	b1 f1       	breq	.+108    	; 0x1370 <TWIMWriteRead+0xd6>
    1304:	80 91 93 25 	lds	r24, 0x2593	; 0x802593 <Twim_address>
    1308:	8e 7f       	andi	r24, 0xFE	; 254
    130a:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <__TEXT_REGION_LENGTH__+0x7004a6>
    130e:	6f ef       	ldi	r22, 0xFF	; 255
    1310:	7f ef       	ldi	r23, 0xFF	; 255
    1312:	80 91 85 25 	lds	r24, 0x2585	; 0x802585 <SemaRx>
    1316:	90 91 86 25 	lds	r25, 0x2586	; 0x802586 <SemaRx+0x1>
    131a:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <xQueueSemaphoreTake>
    131e:	80 91 89 25 	lds	r24, 0x2589	; 0x802589 <Twim_result>
    1322:	81 30       	cpi	r24, 0x01	; 1
    1324:	e1 f1       	breq	.+120    	; 0x139e <TWIMWriteRead+0x104>
    1326:	1f 92       	push	r1
    1328:	8f 93       	push	r24
    132a:	1f 92       	push	r1
    132c:	df 93       	push	r29
    132e:	89 e8       	ldi	r24, 0x89	; 137
    1330:	90 e2       	ldi	r25, 0x20	; 32
    1332:	9f 93       	push	r25
    1334:	8f 93       	push	r24
    1336:	0e 94 96 30 	call	0x612c	; 0x612c <printf>
    133a:	20 e0       	ldi	r18, 0x00	; 0
    133c:	40 e0       	ldi	r20, 0x00	; 0
    133e:	50 e0       	ldi	r21, 0x00	; 0
    1340:	60 e0       	ldi	r22, 0x00	; 0
    1342:	70 e0       	ldi	r23, 0x00	; 0
    1344:	80 91 87 25 	lds	r24, 0x2587	; 0x802587 <SemaBus>
    1348:	90 91 88 25 	lds	r25, 0x2588	; 0x802588 <SemaBus+0x1>
    134c:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <xQueueGenericSend>
    1350:	0f 90       	pop	r0
    1352:	0f 90       	pop	r0
    1354:	0f 90       	pop	r0
    1356:	0f 90       	pop	r0
    1358:	0f 90       	pop	r0
    135a:	0f 90       	pop	r0
    135c:	8c 2f       	mov	r24, r28
    135e:	df 91       	pop	r29
    1360:	cf 91       	pop	r28
    1362:	1f 91       	pop	r17
    1364:	0f 91       	pop	r16
    1366:	ff 90       	pop	r15
    1368:	ef 90       	pop	r14
    136a:	df 90       	pop	r13
    136c:	cf 90       	pop	r12
    136e:	08 95       	ret
    1370:	80 91 8d 25 	lds	r24, 0x258D	; 0x80258d <Twim_bytesToRead>
    1374:	88 23       	and	r24, r24
    1376:	59 f2       	breq	.-106    	; 0x130e <TWIMWriteRead+0x74>
    1378:	80 91 93 25 	lds	r24, 0x2593	; 0x802593 <Twim_address>
    137c:	81 60       	ori	r24, 0x01	; 1
    137e:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <__TEXT_REGION_LENGTH__+0x7004a6>
    1382:	c5 cf       	rjmp	.-118    	; 0x130e <TWIMWriteRead+0x74>
    1384:	20 e0       	ldi	r18, 0x00	; 0
    1386:	40 e0       	ldi	r20, 0x00	; 0
    1388:	50 e0       	ldi	r21, 0x00	; 0
    138a:	60 e0       	ldi	r22, 0x00	; 0
    138c:	70 e0       	ldi	r23, 0x00	; 0
    138e:	80 91 87 25 	lds	r24, 0x2587	; 0x802587 <SemaBus>
    1392:	90 91 88 25 	lds	r25, 0x2588	; 0x802588 <SemaBus+0x1>
    1396:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <xQueueGenericSend>
    139a:	c0 e0       	ldi	r28, 0x00	; 0
    139c:	df cf       	rjmp	.-66     	; 0x135c <TWIMWriteRead+0xc2>
    139e:	20 e0       	ldi	r18, 0x00	; 0
    13a0:	40 e0       	ldi	r20, 0x00	; 0
    13a2:	50 e0       	ldi	r21, 0x00	; 0
    13a4:	60 e0       	ldi	r22, 0x00	; 0
    13a6:	70 e0       	ldi	r23, 0x00	; 0
    13a8:	80 91 87 25 	lds	r24, 0x2587	; 0x802587 <SemaBus>
    13ac:	90 91 88 25 	lds	r25, 0x2588	; 0x802588 <SemaBus+0x1>
    13b0:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <xQueueGenericSend>
    13b4:	c1 e0       	ldi	r28, 0x01	; 1
    13b6:	d2 cf       	rjmp	.-92     	; 0x135c <TWIMWriteRead+0xc2>

000013b8 <TWIMWrite>:
    13b8:	0f 93       	push	r16
    13ba:	00 e0       	ldi	r16, 0x00	; 0
    13bc:	20 e0       	ldi	r18, 0x00	; 0
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	0e 94 4d 09 	call	0x129a	; 0x129a <TWIMWriteRead>
    13c4:	0f 91       	pop	r16
    13c6:	08 95       	ret

000013c8 <TWIMWriteHandler>:
    13c8:	90 91 8e 25 	lds	r25, 0x258E	; 0x80258e <Twim_bytesToWrite>
    13cc:	20 91 8d 25 	lds	r18, 0x258D	; 0x80258d <Twim_bytesToRead>
    13d0:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <__TEXT_REGION_LENGTH__+0x7004a4>
    13d4:	84 fd       	sbrc	r24, 4
    13d6:	22 c0       	rjmp	.+68     	; 0x141c <TWIMWriteHandler+0x54>
    13d8:	80 91 8c 25 	lds	r24, 0x258C	; 0x80258c <Twim_bytesWritten>
    13dc:	89 17       	cp	r24, r25
    13de:	68 f0       	brcs	.+26     	; 0x13fa <TWIMWriteHandler+0x32>
    13e0:	80 91 8b 25 	lds	r24, 0x258B	; 0x80258b <Twim_bytesRead>
    13e4:	82 17       	cp	r24, r18
    13e6:	18 f1       	brcs	.+70     	; 0x142e <TWIMWriteHandler+0x66>
    13e8:	83 e0       	ldi	r24, 0x03	; 3
    13ea:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <__TEXT_REGION_LENGTH__+0x7004a3>
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	80 93 89 25 	sts	0x2589, r24	; 0x802589 <Twim_result>
    13f4:	10 92 8a 25 	sts	0x258A, r1	; 0x80258a <Twim_status>
    13f8:	08 95       	ret
    13fa:	80 91 8c 25 	lds	r24, 0x258C	; 0x80258c <Twim_bytesWritten>
    13fe:	e0 91 91 25 	lds	r30, 0x2591	; 0x802591 <Twim_writeData>
    1402:	f0 91 92 25 	lds	r31, 0x2592	; 0x802592 <Twim_writeData+0x1>
    1406:	e8 0f       	add	r30, r24
    1408:	f1 1d       	adc	r31, r1
    140a:	80 81       	ld	r24, Z
    140c:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <__TEXT_REGION_LENGTH__+0x7004a7>
    1410:	80 91 8c 25 	lds	r24, 0x258C	; 0x80258c <Twim_bytesWritten>
    1414:	8f 5f       	subi	r24, 0xFF	; 255
    1416:	80 93 8c 25 	sts	0x258C, r24	; 0x80258c <Twim_bytesWritten>
    141a:	08 95       	ret
    141c:	83 e0       	ldi	r24, 0x03	; 3
    141e:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <__TEXT_REGION_LENGTH__+0x7004a3>
    1422:	85 e0       	ldi	r24, 0x05	; 5
    1424:	80 93 89 25 	sts	0x2589, r24	; 0x802589 <Twim_result>
    1428:	10 92 8a 25 	sts	0x258A, r1	; 0x80258a <Twim_status>
    142c:	08 95       	ret
    142e:	80 91 93 25 	lds	r24, 0x2593	; 0x802593 <Twim_address>
    1432:	81 60       	ori	r24, 0x01	; 1
    1434:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <__TEXT_REGION_LENGTH__+0x7004a6>
    1438:	08 95       	ret

0000143a <TWIMReadHandler>:
    143a:	80 91 8b 25 	lds	r24, 0x258B	; 0x80258b <Twim_bytesRead>
    143e:	80 32       	cpi	r24, 0x20	; 32
    1440:	f8 f4       	brcc	.+62     	; 0x1480 <TWIMReadHandler+0x46>
    1442:	80 91 a7 04 	lds	r24, 0x04A7	; 0x8004a7 <__TEXT_REGION_LENGTH__+0x7004a7>
    1446:	90 91 8b 25 	lds	r25, 0x258B	; 0x80258b <Twim_bytesRead>
    144a:	e0 91 8f 25 	lds	r30, 0x258F	; 0x80258f <Twim_readData>
    144e:	f0 91 90 25 	lds	r31, 0x2590	; 0x802590 <Twim_readData+0x1>
    1452:	e9 0f       	add	r30, r25
    1454:	f1 1d       	adc	r31, r1
    1456:	80 83       	st	Z, r24
    1458:	80 91 8b 25 	lds	r24, 0x258B	; 0x80258b <Twim_bytesRead>
    145c:	8f 5f       	subi	r24, 0xFF	; 255
    145e:	80 93 8b 25 	sts	0x258B, r24	; 0x80258b <Twim_bytesRead>
    1462:	90 91 8d 25 	lds	r25, 0x258D	; 0x80258d <Twim_bytesToRead>
    1466:	80 91 8b 25 	lds	r24, 0x258B	; 0x80258b <Twim_bytesRead>
    146a:	89 17       	cp	r24, r25
    146c:	b8 f0       	brcs	.+46     	; 0x149c <TWIMReadHandler+0x62>
    146e:	87 e0       	ldi	r24, 0x07	; 7
    1470:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <__TEXT_REGION_LENGTH__+0x7004a3>
    1474:	81 e0       	ldi	r24, 0x01	; 1
    1476:	80 93 89 25 	sts	0x2589, r24	; 0x802589 <Twim_result>
    147a:	10 92 8a 25 	sts	0x258A, r1	; 0x80258a <Twim_status>
    147e:	08 95       	ret
    1480:	83 e0       	ldi	r24, 0x03	; 3
    1482:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <__TEXT_REGION_LENGTH__+0x7004a3>
    1486:	82 e0       	ldi	r24, 0x02	; 2
    1488:	80 93 89 25 	sts	0x2589, r24	; 0x802589 <Twim_result>
    148c:	10 92 8a 25 	sts	0x258A, r1	; 0x80258a <Twim_status>
    1490:	90 91 8d 25 	lds	r25, 0x258D	; 0x80258d <Twim_bytesToRead>
    1494:	80 91 8b 25 	lds	r24, 0x258B	; 0x80258b <Twim_bytesRead>
    1498:	89 17       	cp	r24, r25
    149a:	48 f7       	brcc	.-46     	; 0x146e <TWIMReadHandler+0x34>
    149c:	82 e0       	ldi	r24, 0x02	; 2
    149e:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <__TEXT_REGION_LENGTH__+0x7004a3>
    14a2:	08 95       	ret

000014a4 <__vector_46>:
}

ISR (TWIM_BUS_vect)
{
    14a4:	1f 92       	push	r1
    14a6:	0f 92       	push	r0
    14a8:	0f b6       	in	r0, 0x3f	; 63
    14aa:	0f 92       	push	r0
    14ac:	11 24       	eor	r1, r1
    14ae:	0b b6       	in	r0, 0x3b	; 59
    14b0:	0f 92       	push	r0
    14b2:	2f 93       	push	r18
    14b4:	3f 93       	push	r19
    14b6:	4f 93       	push	r20
    14b8:	5f 93       	push	r21
    14ba:	6f 93       	push	r22
    14bc:	7f 93       	push	r23
    14be:	8f 93       	push	r24
    14c0:	9f 93       	push	r25
    14c2:	af 93       	push	r26
    14c4:	bf 93       	push	r27
    14c6:	ef 93       	push	r30
    14c8:	ff 93       	push	r31
    14ca:	cf 93       	push	r28
    14cc:	df 93       	push	r29
    14ce:	1f 92       	push	r1
    14d0:	cd b7       	in	r28, 0x3d	; 61
    14d2:	de b7       	in	r29, 0x3e	; 62
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
    14d4:	19 82       	std	Y+1, r1	; 0x01
	uint8_t currentStatus = TWIM_BUS.MASTER.STATUS;
    14d6:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <__TEXT_REGION_LENGTH__+0x7004a4>

	/* If arbitration lost or bus error. */
	if ((currentStatus & TWI_MASTER_ARBLOST_bm) ||
    14da:	98 2f       	mov	r25, r24
    14dc:	9c 70       	andi	r25, 0x0C	; 12
    14de:	e1 f4       	brne	.+56     	; 0x1518 <__vector_46+0x74>

		TWIMArbitrationLostBusErrorHandler();
	}

	/* If master write interrupt. */
	else if (currentStatus & TWI_MASTER_WIF_bm) {
    14e0:	86 fd       	sbrc	r24, 6
    14e2:	44 c0       	rjmp	.+136    	; 0x156c <__vector_46+0xc8>
		TWIMWriteHandler();
	}

	/* If master read interrupt. */
	else if (currentStatus & TWI_MASTER_RIF_bm) {
    14e4:	87 fd       	sbrc	r24, 7
    14e6:	45 c0       	rjmp	.+138    	; 0x1572 <__vector_46+0xce>
	}
}

void TWIMTransactionFinished( uint8_t result)
{
	Twim_result = result;
    14e8:	86 e0       	ldi	r24, 0x06	; 6
    14ea:	80 93 89 25 	sts	0x2589, r24	; 0x802589 <Twim_result>
	Twim_status = TWIM_STATUS_READY;
    14ee:	10 92 8a 25 	sts	0x258A, r1	; 0x80258a <Twim_status>
	/* If unexpected state. */
	else {
		TWIMTransactionFinished(TWIM_RESULT_FAIL);
	}
	
	if (Twim_status == TWIM_STATUS_READY) //Transaction finished
    14f2:	80 91 8a 25 	lds	r24, 0x258A	; 0x80258a <Twim_status>
    14f6:	81 11       	cpse	r24, r1
    14f8:	1f c0       	rjmp	.+62     	; 0x1538 <__vector_46+0x94>
	{
		BaseType_t res=xSemaphoreGiveFromISR( SemaRx, &xHigherPriorityTaskWoken );
    14fa:	be 01       	movw	r22, r28
    14fc:	6f 5f       	subi	r22, 0xFF	; 255
    14fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1500:	80 91 85 25 	lds	r24, 0x2585	; 0x802585 <SemaRx>
    1504:	90 91 86 25 	lds	r25, 0x2586	; 0x802586 <SemaRx+0x1>
    1508:	0e 94 c0 11 	call	0x2380	; 0x2380 <xQueueGiveFromISR>

		portYIELD_FROM_ISR( xHigherPriorityTaskWoken );		
    150c:	89 81       	ldd	r24, Y+1	; 0x01
    150e:	88 23       	and	r24, r24
    1510:	99 f0       	breq	.+38     	; 0x1538 <__vector_46+0x94>
    1512:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <vPortYieldISR>
	}
}
    1516:	10 c0       	rjmp	.+32     	; 0x1538 <__vector_46+0x94>
	}
}

void TWIMArbitrationLostBusErrorHandler()
{
	uint8_t currentStatus = TWIM_BUS.MASTER.STATUS;
    1518:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <__TEXT_REGION_LENGTH__+0x7004a4>

	/* If bus error. */
	if (currentStatus & TWI_MASTER_BUSERR_bm) {
    151c:	82 fd       	sbrc	r24, 2
    151e:	22 c0       	rjmp	.+68     	; 0x1564 <__vector_46+0xc0>
		Twim_result = TWIM_RESULT_BUS_ERROR;
	}
	/* If arbitration lost. */
	else {
		Twim_result = TWIM_RESULT_ARBITRATION_LOST;
    1520:	93 e0       	ldi	r25, 0x03	; 3
    1522:	90 93 89 25 	sts	0x2589, r25	; 0x802589 <Twim_result>
	}

	/* Clear interrupt flag. */
	TWIM_BUS.MASTER.STATUS = currentStatus | TWI_MASTER_ARBLOST_bm;
    1526:	88 60       	ori	r24, 0x08	; 8
    1528:	80 93 a4 04 	sts	0x04A4, r24	; 0x8004a4 <__TEXT_REGION_LENGTH__+0x7004a4>

	Twim_status = TWIM_STATUS_READY;
    152c:	10 92 8a 25 	sts	0x258A, r1	; 0x80258a <Twim_status>
	/* If unexpected state. */
	else {
		TWIMTransactionFinished(TWIM_RESULT_FAIL);
	}
	
	if (Twim_status == TWIM_STATUS_READY) //Transaction finished
    1530:	80 91 8a 25 	lds	r24, 0x258A	; 0x80258a <Twim_status>
    1534:	88 23       	and	r24, r24
    1536:	09 f3       	breq	.-62     	; 0x14fa <__vector_46+0x56>
	{
		BaseType_t res=xSemaphoreGiveFromISR( SemaRx, &xHigherPriorityTaskWoken );

		portYIELD_FROM_ISR( xHigherPriorityTaskWoken );		
	}
}
    1538:	0f 90       	pop	r0
    153a:	df 91       	pop	r29
    153c:	cf 91       	pop	r28
    153e:	ff 91       	pop	r31
    1540:	ef 91       	pop	r30
    1542:	bf 91       	pop	r27
    1544:	af 91       	pop	r26
    1546:	9f 91       	pop	r25
    1548:	8f 91       	pop	r24
    154a:	7f 91       	pop	r23
    154c:	6f 91       	pop	r22
    154e:	5f 91       	pop	r21
    1550:	4f 91       	pop	r20
    1552:	3f 91       	pop	r19
    1554:	2f 91       	pop	r18
    1556:	0f 90       	pop	r0
    1558:	0b be       	out	0x3b, r0	; 59
    155a:	0f 90       	pop	r0
    155c:	0f be       	out	0x3f, r0	; 63
    155e:	0f 90       	pop	r0
    1560:	1f 90       	pop	r1
    1562:	18 95       	reti
{
	uint8_t currentStatus = TWIM_BUS.MASTER.STATUS;

	/* If bus error. */
	if (currentStatus & TWI_MASTER_BUSERR_bm) {
		Twim_result = TWIM_RESULT_BUS_ERROR;
    1564:	94 e0       	ldi	r25, 0x04	; 4
    1566:	90 93 89 25 	sts	0x2589, r25	; 0x802589 <Twim_result>
    156a:	dd cf       	rjmp	.-70     	; 0x1526 <__vector_46+0x82>
		TWIMArbitrationLostBusErrorHandler();
	}

	/* If master write interrupt. */
	else if (currentStatus & TWI_MASTER_WIF_bm) {
		TWIMWriteHandler();
    156c:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <TWIMWriteHandler>
    1570:	df cf       	rjmp	.-66     	; 0x1530 <__vector_46+0x8c>
	}

	/* If master read interrupt. */
	else if (currentStatus & TWI_MASTER_RIF_bm) {
		TWIMReadHandler();
    1572:	0e 94 1d 0a 	call	0x143a	; 0x143a <TWIMReadHandler>
    1576:	dc cf       	rjmp	.-72     	; 0x1530 <__vector_46+0x8c>

00001578 <stdio_getchar>:
		
	return 0;
}
	
static int stdio_getchar(FILE *stream)
{
    1578:	cf 93       	push	r28
    157a:	df 93       	push	r29
    157c:	1f 92       	push	r1
    157e:	cd b7       	in	r28, 0x3d	; 61
    1580:	de b7       	in	r29, 0x3e	; 62
	char c;
	xQueueReceive(UsartRxQueue,&c,portMAX_DELAY);
    1582:	4f ef       	ldi	r20, 0xFF	; 255
    1584:	5f ef       	ldi	r21, 0xFF	; 255
    1586:	be 01       	movw	r22, r28
    1588:	6f 5f       	subi	r22, 0xFF	; 255
    158a:	7f 4f       	sbci	r23, 0xFF	; 255
    158c:	80 91 b6 26 	lds	r24, 0x26B6	; 0x8026b6 <UsartRxQueue>
    1590:	90 91 b7 26 	lds	r25, 0x26B7	; 0x8026b7 <UsartRxQueue+0x1>
    1594:	0e 94 13 12 	call	0x2426	; 0x2426 <xQueueReceive>
	return c;
    1598:	89 81       	ldd	r24, Y+1	; 0x01
}
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	0f 90       	pop	r0
    159e:	df 91       	pop	r29
    15a0:	cf 91       	pop	r28
    15a2:	08 95       	ret

000015a4 <stdio_putchar>:

}


static int stdio_putchar(char c, FILE * stream)
{
    15a4:	cf 93       	push	r28
    15a6:	df 93       	push	r29
    15a8:	1f 92       	push	r1
    15aa:	1f 92       	push	r1
    15ac:	cd b7       	in	r28, 0x3d	; 61
    15ae:	de b7       	in	r29, 0x3e	; 62
    15b0:	8a 83       	std	Y+2, r24	; 0x02
	int res;
	char cbuf;

	xQueueSend(UsartTxQueue,&c,portMAX_DELAY);
    15b2:	20 e0       	ldi	r18, 0x00	; 0
    15b4:	4f ef       	ldi	r20, 0xFF	; 255
    15b6:	5f ef       	ldi	r21, 0xFF	; 255
    15b8:	be 01       	movw	r22, r28
    15ba:	6e 5f       	subi	r22, 0xFE	; 254
    15bc:	7f 4f       	sbci	r23, 0xFF	; 255
    15be:	80 91 be 26 	lds	r24, 0x26BE	; 0x8026be <UsartTxQueue>
    15c2:	90 91 bf 26 	lds	r25, 0x26BF	; 0x8026bf <UsartTxQueue+0x1>
    15c6:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <xQueueGenericSend>

	if (USART.STATUS & (1<<5))
    15ca:	80 91 a1 0a 	lds	r24, 0x0AA1	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x700aa1>
    15ce:	85 ff       	sbrs	r24, 5
    15d0:	0e c0       	rjmp	.+28     	; 0x15ee <stdio_putchar+0x4a>
	{
		xQueueReceive(UsartTxQueue,&cbuf,0);
    15d2:	40 e0       	ldi	r20, 0x00	; 0
    15d4:	50 e0       	ldi	r21, 0x00	; 0
    15d6:	be 01       	movw	r22, r28
    15d8:	6f 5f       	subi	r22, 0xFF	; 255
    15da:	7f 4f       	sbci	r23, 0xFF	; 255
    15dc:	80 91 be 26 	lds	r24, 0x26BE	; 0x8026be <UsartTxQueue>
    15e0:	90 91 bf 26 	lds	r25, 0x26BF	; 0x8026bf <UsartTxQueue+0x1>
    15e4:	0e 94 13 12 	call	0x2426	; 0x2426 <xQueueReceive>
		USART.DATA=cbuf;
    15e8:	89 81       	ldd	r24, Y+1	; 0x01
    15ea:	80 93 a0 0a 	sts	0x0AA0, r24	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x700aa0>
	}
		
	return 0;
}
    15ee:	80 e0       	ldi	r24, 0x00	; 0
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	0f 90       	pop	r0
    15f4:	0f 90       	pop	r0
    15f6:	df 91       	pop	r29
    15f8:	cf 91       	pop	r28
    15fa:	08 95       	ret

000015fc <DriverUSARTInit>:

uint8_t receiveStarted = 0;

void DriverUSARTInit(void)
{
	UsartTxQueue=xQueueCreate(UART_QUEUE_LENGTH,sizeof(char));
    15fc:	40 e0       	ldi	r20, 0x00	; 0
    15fe:	61 e0       	ldi	r22, 0x01	; 1
    1600:	80 e8       	ldi	r24, 0x80	; 128
    1602:	0e 94 38 10 	call	0x2070	; 0x2070 <xQueueGenericCreate>
    1606:	80 93 be 26 	sts	0x26BE, r24	; 0x8026be <UsartTxQueue>
    160a:	90 93 bf 26 	sts	0x26BF, r25	; 0x8026bf <UsartTxQueue+0x1>
	UsartRxQueue=xQueueCreate(UART_QUEUE_LENGTH,sizeof(char));
    160e:	40 e0       	ldi	r20, 0x00	; 0
    1610:	61 e0       	ldi	r22, 0x01	; 1
    1612:	80 e8       	ldi	r24, 0x80	; 128
    1614:	0e 94 38 10 	call	0x2070	; 0x2070 <xQueueGenericCreate>
    1618:	80 93 b6 26 	sts	0x26B6, r24	; 0x8026b6 <UsartRxQueue>
    161c:	90 93 b7 26 	sts	0x26B7, r25	; 0x8026b7 <UsartRxQueue+0x1>
		
	USART_PORT.DIRSET=0b00001000;	
    1620:	e0 e8       	ldi	r30, 0x80	; 128
    1622:	f6 e0       	ldi	r31, 0x06	; 6
    1624:	88 e0       	ldi	r24, 0x08	; 8
    1626:	81 83       	std	Z+1, r24	; 0x01
	USART_PORT.DIRCLR=0b00000100;
    1628:	84 e0       	ldi	r24, 0x04	; 4
    162a:	82 83       	std	Z+2, r24	; 0x02
	
	USART.CTRLA=0b00111000;
    162c:	e0 ea       	ldi	r30, 0xA0	; 160
    162e:	fa e0       	ldi	r31, 0x0A	; 10
    1630:	88 e3       	ldi	r24, 0x38	; 56
    1632:	83 83       	std	Z+3, r24	; 0x03
	USART.CTRLB=0b00011000; 
    1634:	88 e1       	ldi	r24, 0x18	; 24
    1636:	84 83       	std	Z+4, r24	; 0x04
	USART.CTRLC=0b00000011;
    1638:	83 e0       	ldi	r24, 0x03	; 3
    163a:	85 83       	std	Z+5, r24	; 0x05
	
	
	//TODO: change baud to 115200
	USART.BAUDCTRLA=0xE5; //BSEL=3301, BSCALE=-5 19200 baud
    163c:	85 ee       	ldi	r24, 0xE5	; 229
    163e:	86 83       	std	Z+6, r24	; 0x06
	USART.BAUDCTRLB=0xBC; 
    1640:	8c eb       	ldi	r24, 0xBC	; 188
    1642:	87 83       	std	Z+7, r24	; 0x07
	
	stdout=&UsartStdio;
    1644:	ec ec       	ldi	r30, 0xCC	; 204
    1646:	f6 e2       	ldi	r31, 0x26	; 38
    1648:	86 e0       	ldi	r24, 0x06	; 6
    164a:	90 e2       	ldi	r25, 0x20	; 32
    164c:	82 83       	std	Z+2, r24	; 0x02
    164e:	93 83       	std	Z+3, r25	; 0x03
	stdin=&UsartStdio;
    1650:	80 83       	st	Z, r24
    1652:	91 83       	std	Z+1, r25	; 0x01
    1654:	08 95       	ret

00001656 <__vector_60>:
}



ISR(USART_TXC_vect)
{
    1656:	1f 92       	push	r1
    1658:	0f 92       	push	r0
    165a:	0f b6       	in	r0, 0x3f	; 63
    165c:	0f 92       	push	r0
    165e:	11 24       	eor	r1, r1
    1660:	0b b6       	in	r0, 0x3b	; 59
    1662:	0f 92       	push	r0
    1664:	2f 93       	push	r18
    1666:	3f 93       	push	r19
    1668:	4f 93       	push	r20
    166a:	5f 93       	push	r21
    166c:	6f 93       	push	r22
    166e:	7f 93       	push	r23
    1670:	8f 93       	push	r24
    1672:	9f 93       	push	r25
    1674:	af 93       	push	r26
    1676:	bf 93       	push	r27
    1678:	ef 93       	push	r30
    167a:	ff 93       	push	r31
    167c:	cf 93       	push	r28
    167e:	df 93       	push	r29
    1680:	1f 92       	push	r1
    1682:	1f 92       	push	r1
    1684:	cd b7       	in	r28, 0x3d	; 61
    1686:	de b7       	in	r29, 0x3e	; 62
	char c;
	BaseType_t xHigherPriorityTaskWoken=pdFALSE;
    1688:	19 82       	std	Y+1, r1	; 0x01
	if (xQueueReceiveFromISR(UsartTxQueue,&c,&xHigherPriorityTaskWoken)==pdPASS)
    168a:	ae 01       	movw	r20, r28
    168c:	4f 5f       	subi	r20, 0xFF	; 255
    168e:	5f 4f       	sbci	r21, 0xFF	; 255
    1690:	be 01       	movw	r22, r28
    1692:	6e 5f       	subi	r22, 0xFE	; 254
    1694:	7f 4f       	sbci	r23, 0xFF	; 255
    1696:	80 91 be 26 	lds	r24, 0x26BE	; 0x8026be <UsartTxQueue>
    169a:	90 91 bf 26 	lds	r25, 0x26BF	; 0x8026bf <UsartTxQueue+0x1>
    169e:	0e 94 87 14 	call	0x290e	; 0x290e <xQueueReceiveFromISR>
    16a2:	81 30       	cpi	r24, 0x01	; 1
    16a4:	d9 f0       	breq	.+54     	; 0x16dc <__vector_60+0x86>
	{
		USART.DATA=c;	
	}
	
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
    16a6:	89 81       	ldd	r24, Y+1	; 0x01
    16a8:	81 11       	cpse	r24, r1
    16aa:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <vPortYieldISR>
}
    16ae:	0f 90       	pop	r0
    16b0:	0f 90       	pop	r0
    16b2:	df 91       	pop	r29
    16b4:	cf 91       	pop	r28
    16b6:	ff 91       	pop	r31
    16b8:	ef 91       	pop	r30
    16ba:	bf 91       	pop	r27
    16bc:	af 91       	pop	r26
    16be:	9f 91       	pop	r25
    16c0:	8f 91       	pop	r24
    16c2:	7f 91       	pop	r23
    16c4:	6f 91       	pop	r22
    16c6:	5f 91       	pop	r21
    16c8:	4f 91       	pop	r20
    16ca:	3f 91       	pop	r19
    16cc:	2f 91       	pop	r18
    16ce:	0f 90       	pop	r0
    16d0:	0b be       	out	0x3b, r0	; 59
    16d2:	0f 90       	pop	r0
    16d4:	0f be       	out	0x3f, r0	; 63
    16d6:	0f 90       	pop	r0
    16d8:	1f 90       	pop	r1
    16da:	18 95       	reti
{
	char c;
	BaseType_t xHigherPriorityTaskWoken=pdFALSE;
	if (xQueueReceiveFromISR(UsartTxQueue,&c,&xHigherPriorityTaskWoken)==pdPASS)
	{
		USART.DATA=c;	
    16dc:	8a 81       	ldd	r24, Y+2	; 0x02
    16de:	80 93 a0 0a 	sts	0x0AA0, r24	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x700aa0>
    16e2:	e1 cf       	rjmp	.-62     	; 0x16a6 <__vector_60+0x50>

000016e4 <__vector_58>:
}


//Check for delimiters in ISR
ISR(USART_RXC_vect)
{
    16e4:	1f 92       	push	r1
    16e6:	0f 92       	push	r0
    16e8:	0f b6       	in	r0, 0x3f	; 63
    16ea:	0f 92       	push	r0
    16ec:	11 24       	eor	r1, r1
    16ee:	0b b6       	in	r0, 0x3b	; 59
    16f0:	0f 92       	push	r0
    16f2:	2f 93       	push	r18
    16f4:	3f 93       	push	r19
    16f6:	4f 93       	push	r20
    16f8:	5f 93       	push	r21
    16fa:	6f 93       	push	r22
    16fc:	7f 93       	push	r23
    16fe:	8f 93       	push	r24
    1700:	9f 93       	push	r25
    1702:	af 93       	push	r26
    1704:	bf 93       	push	r27
    1706:	ef 93       	push	r30
    1708:	ff 93       	push	r31
    170a:	cf 93       	push	r28
    170c:	df 93       	push	r29
    170e:	1f 92       	push	r1
    1710:	1f 92       	push	r1
    1712:	cd b7       	in	r28, 0x3d	; 61
    1714:	de b7       	in	r29, 0x3e	; 62
	char c;
	BaseType_t xHigherPriorityTaskWoken=pdFALSE;
    1716:	19 82       	std	Y+1, r1	; 0x01
	
	c=USART.DATA;
    1718:	80 91 a0 0a 	lds	r24, 0x0AA0	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x700aa0>
    171c:	8a 83       	std	Y+2, r24	; 0x02
	if (receiveStarted==1) {
    171e:	90 91 94 25 	lds	r25, 0x2594	; 0x802594 <receiveStarted>
    1722:	91 30       	cpi	r25, 0x01	; 1
    1724:	c9 f0       	breq	.+50     	; 0x1758 <__vector_58+0x74>
			vTaskNotifyGiveFromISR(AresTaskHandle,&xHigherPriorityTaskWoken);
		} else {
			USART_RX_Queue_has_data = 1;
			xQueueSendToBackFromISR(UsartRxQueue,&c,&xHigherPriorityTaskWoken);
		}
	} else if (c==START_DELIMITER) {
    1726:	8b 35       	cpi	r24, 0x5B	; 91
    1728:	71 f1       	breq	.+92     	; 0x1786 <__vector_58+0xa2>
		USART_RX_transmission_complete = 0;
	}
	// xQueueSendToBackFromISR(UsartRxQueue,&c,&xHigherPriorityTaskWoken);
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
	
    172a:	0f 90       	pop	r0
    172c:	0f 90       	pop	r0
    172e:	df 91       	pop	r29
    1730:	cf 91       	pop	r28
    1732:	ff 91       	pop	r31
    1734:	ef 91       	pop	r30
    1736:	bf 91       	pop	r27
    1738:	af 91       	pop	r26
    173a:	9f 91       	pop	r25
    173c:	8f 91       	pop	r24
    173e:	7f 91       	pop	r23
    1740:	6f 91       	pop	r22
    1742:	5f 91       	pop	r21
    1744:	4f 91       	pop	r20
    1746:	3f 91       	pop	r19
    1748:	2f 91       	pop	r18
    174a:	0f 90       	pop	r0
    174c:	0b be       	out	0x3b, r0	; 59
    174e:	0f 90       	pop	r0
    1750:	0f be       	out	0x3f, r0	; 63
    1752:	0f 90       	pop	r0
    1754:	1f 90       	pop	r1
    1756:	18 95       	reti
	char c;
	BaseType_t xHigherPriorityTaskWoken=pdFALSE;
	
	c=USART.DATA;
	if (receiveStarted==1) {
		if (c==END_DELIMITER) {
    1758:	8d 35       	cpi	r24, 0x5D	; 93
    175a:	d9 f0       	breq	.+54     	; 0x1792 <__vector_58+0xae>
			receiveStarted=0;
			USART_RX_transmission_complete = 1;
			vTaskNotifyGiveFromISR(AresTaskHandle,&xHigherPriorityTaskWoken);
		} else {
			USART_RX_Queue_has_data = 1;
    175c:	90 93 b4 26 	sts	0x26B4, r25	; 0x8026b4 <USART_RX_Queue_has_data>
			xQueueSendToBackFromISR(UsartRxQueue,&c,&xHigherPriorityTaskWoken);
    1760:	20 e0       	ldi	r18, 0x00	; 0
    1762:	ae 01       	movw	r20, r28
    1764:	4f 5f       	subi	r20, 0xFF	; 255
    1766:	5f 4f       	sbci	r21, 0xFF	; 255
    1768:	be 01       	movw	r22, r28
    176a:	6e 5f       	subi	r22, 0xFE	; 254
    176c:	7f 4f       	sbci	r23, 0xFF	; 255
    176e:	80 91 b6 26 	lds	r24, 0x26B6	; 0x8026b6 <UsartRxQueue>
    1772:	90 91 b7 26 	lds	r25, 0x26B7	; 0x8026b7 <UsartRxQueue+0x1>
    1776:	0e 94 65 11 	call	0x22ca	; 0x22ca <xQueueGenericSendFromISR>
	} else if (c==START_DELIMITER) {
		receiveStarted=1;
		USART_RX_transmission_complete = 0;
	}
	// xQueueSendToBackFromISR(UsartRxQueue,&c,&xHigherPriorityTaskWoken);
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
    177a:	89 81       	ldd	r24, Y+1	; 0x01
    177c:	88 23       	and	r24, r24
    177e:	a9 f2       	breq	.-86     	; 0x172a <__vector_58+0x46>
    1780:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <vPortYieldISR>
	
    1784:	d2 cf       	rjmp	.-92     	; 0x172a <__vector_58+0x46>
		} else {
			USART_RX_Queue_has_data = 1;
			xQueueSendToBackFromISR(UsartRxQueue,&c,&xHigherPriorityTaskWoken);
		}
	} else if (c==START_DELIMITER) {
		receiveStarted=1;
    1786:	81 e0       	ldi	r24, 0x01	; 1
    1788:	80 93 94 25 	sts	0x2594, r24	; 0x802594 <receiveStarted>
		USART_RX_transmission_complete = 0;
    178c:	10 92 b5 26 	sts	0x26B5, r1	; 0x8026b5 <USART_RX_transmission_complete>
    1790:	cc cf       	rjmp	.-104    	; 0x172a <__vector_58+0x46>
	BaseType_t xHigherPriorityTaskWoken=pdFALSE;
	
	c=USART.DATA;
	if (receiveStarted==1) {
		if (c==END_DELIMITER) {
			receiveStarted=0;
    1792:	10 92 94 25 	sts	0x2594, r1	; 0x802594 <receiveStarted>
			USART_RX_transmission_complete = 1;
    1796:	90 93 b5 26 	sts	0x26B5, r25	; 0x8026b5 <USART_RX_transmission_complete>
			vTaskNotifyGiveFromISR(AresTaskHandle,&xHigherPriorityTaskWoken);
    179a:	be 01       	movw	r22, r28
    179c:	6f 5f       	subi	r22, 0xFF	; 255
    179e:	7f 4f       	sbci	r23, 0xFF	; 255
    17a0:	80 91 b8 26 	lds	r24, 0x26B8	; 0x8026b8 <AresTaskHandle>
    17a4:	90 91 b9 26 	lds	r25, 0x26B9	; 0x8026b9 <AresTaskHandle+0x1>
    17a8:	0e 94 c3 1c 	call	0x3986	; 0x3986 <vTaskNotifyGiveFromISR>
    17ac:	e6 cf       	rjmp	.-52     	; 0x177a <__vector_58+0x96>

000017ae <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    17ae:	0f 93       	push	r16
    17b0:	1f 93       	push	r17
    17b2:	cf 93       	push	r28
    17b4:	df 93       	push	r29
    17b6:	ec 01       	movw	r28, r24
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;

	vTaskSuspendAll();
    17b8:	0e 94 9d 18 	call	0x313a	; 0x313a <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
    17bc:	80 91 95 25 	lds	r24, 0x2595	; 0x802595 <xHeapHasBeenInitialised.4135>
    17c0:	81 11       	cpse	r24, r1
    17c2:	21 c0       	rjmp	.+66     	; 0x1806 <pvPortMalloc+0x58>
{
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    17c4:	e0 91 c4 26 	lds	r30, 0x26C4	; 0x8026c4 <ucHeap>
    17c8:	f0 91 c5 26 	lds	r31, 0x26C5	; 0x8026c5 <ucHeap+0x1>

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    17cc:	cf 01       	movw	r24, r30
    17ce:	01 96       	adiw	r24, 0x01	; 1
    17d0:	80 93 9a 25 	sts	0x259A, r24	; 0x80259a <xStart>
    17d4:	90 93 9b 25 	sts	0x259B, r25	; 0x80259b <xStart+0x1>
	xStart.xBlockSize = ( size_t ) 0;
    17d8:	10 92 9c 25 	sts	0x259C, r1	; 0x80259c <xStart+0x2>
    17dc:	10 92 9d 25 	sts	0x259D, r1	; 0x80259d <xStart+0x3>

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
    17e0:	8f ef       	ldi	r24, 0xFF	; 255
    17e2:	9f e3       	ldi	r25, 0x3F	; 63
    17e4:	80 93 98 25 	sts	0x2598, r24	; 0x802598 <xEnd+0x2>
    17e8:	90 93 99 25 	sts	0x2599, r25	; 0x802599 <xEnd+0x3>
	xEnd.pxNextFreeBlock = NULL;
    17ec:	10 92 96 25 	sts	0x2596, r1	; 0x802596 <xEnd>
    17f0:	10 92 97 25 	sts	0x2597, r1	; 0x802597 <xEnd+0x1>

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
    17f4:	83 83       	std	Z+3, r24	; 0x03
    17f6:	94 83       	std	Z+4, r25	; 0x04
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
    17f8:	86 e9       	ldi	r24, 0x96	; 150
    17fa:	95 e2       	ldi	r25, 0x25	; 37
    17fc:	81 83       	std	Z+1, r24	; 0x01
    17fe:	92 83       	std	Z+2, r25	; 0x02
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
		{
			prvHeapInit();
			xHeapHasBeenInitialised = pdTRUE;
    1800:	81 e0       	ldi	r24, 0x01	; 1
    1802:	80 93 95 25 	sts	0x2595, r24	; 0x802595 <xHeapHasBeenInitialised.4135>
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
    1806:	20 97       	sbiw	r28, 0x00	; 0
    1808:	09 f4       	brne	.+2      	; 0x180c <pvPortMalloc+0x5e>
    180a:	64 c0       	rjmp	.+200    	; 0x18d4 <pvPortMalloc+0x126>
		{
			xWantedSize += heapSTRUCT_SIZE;
    180c:	ae 01       	movw	r20, r28
    180e:	4c 5f       	subi	r20, 0xFC	; 252
    1810:	5f 4f       	sbci	r21, 0xFF	; 255
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
    1812:	23 96       	adiw	r28, 0x03	; 3
    1814:	ce 3f       	cpi	r28, 0xFE	; 254
    1816:	df 43       	sbci	r29, 0x3F	; 63
    1818:	08 f0       	brcs	.+2      	; 0x181c <pvPortMalloc+0x6e>
    181a:	5c c0       	rjmp	.+184    	; 0x18d4 <pvPortMalloc+0x126>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
    181c:	e0 91 9a 25 	lds	r30, 0x259A	; 0x80259a <xStart>
    1820:	f0 91 9b 25 	lds	r31, 0x259B	; 0x80259b <xStart+0x1>

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
    1824:	aa e9       	ldi	r26, 0x9A	; 154
    1826:	b5 e2       	ldi	r27, 0x25	; 37
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    1828:	06 c0       	rjmp	.+12     	; 0x1836 <pvPortMalloc+0x88>
    182a:	80 81       	ld	r24, Z
    182c:	91 81       	ldd	r25, Z+1	; 0x01
    182e:	00 97       	sbiw	r24, 0x00	; 0
    1830:	39 f0       	breq	.+14     	; 0x1840 <pvPortMalloc+0x92>
    1832:	df 01       	movw	r26, r30
    1834:	fc 01       	movw	r30, r24
    1836:	22 81       	ldd	r18, Z+2	; 0x02
    1838:	33 81       	ldd	r19, Z+3	; 0x03
    183a:	24 17       	cp	r18, r20
    183c:	35 07       	cpc	r19, r21
    183e:	a8 f3       	brcs	.-22     	; 0x182a <pvPortMalloc+0x7c>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
    1840:	c5 e2       	ldi	r28, 0x25	; 37
    1842:	e6 39       	cpi	r30, 0x96	; 150
    1844:	fc 07       	cpc	r31, r28
    1846:	09 f4       	brne	.+2      	; 0x184a <pvPortMalloc+0x9c>
    1848:	45 c0       	rjmp	.+138    	; 0x18d4 <pvPortMalloc+0x126>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    184a:	cd 91       	ld	r28, X+
    184c:	dc 91       	ld	r29, X
    184e:	11 97       	sbiw	r26, 0x01	; 1
    1850:	8e 01       	movw	r16, r28
    1852:	0c 5f       	subi	r16, 0xFC	; 252
    1854:	1f 4f       	sbci	r17, 0xFF	; 255

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    1856:	80 81       	ld	r24, Z
    1858:	91 81       	ldd	r25, Z+1	; 0x01
    185a:	8d 93       	st	X+, r24
    185c:	9c 93       	st	X, r25

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    185e:	c9 01       	movw	r24, r18
    1860:	84 1b       	sub	r24, r20
    1862:	95 0b       	sbc	r25, r21
    1864:	89 30       	cpi	r24, 0x09	; 9
    1866:	91 05       	cpc	r25, r1
    1868:	00 f1       	brcs	.+64     	; 0x18aa <pvPortMalloc+0xfc>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    186a:	bf 01       	movw	r22, r30
    186c:	64 0f       	add	r22, r20
    186e:	75 1f       	adc	r23, r21

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    1870:	db 01       	movw	r26, r22
    1872:	12 96       	adiw	r26, 0x02	; 2
    1874:	8d 93       	st	X+, r24
    1876:	9c 93       	st	X, r25
    1878:	13 97       	sbiw	r26, 0x03	; 3
					pxBlock->xBlockSize = xWantedSize;
    187a:	42 83       	std	Z+2, r20	; 0x02
    187c:	53 83       	std	Z+3, r21	; 0x03

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    187e:	12 96       	adiw	r26, 0x02	; 2
    1880:	2d 91       	ld	r18, X+
    1882:	3c 91       	ld	r19, X
    1884:	13 97       	sbiw	r26, 0x03	; 3
    1886:	aa e9       	ldi	r26, 0x9A	; 154
    1888:	b5 e2       	ldi	r27, 0x25	; 37
    188a:	01 c0       	rjmp	.+2      	; 0x188e <pvPortMalloc+0xe0>
    188c:	df 01       	movw	r26, r30
    188e:	ed 91       	ld	r30, X+
    1890:	fc 91       	ld	r31, X
    1892:	11 97       	sbiw	r26, 0x01	; 1
    1894:	82 81       	ldd	r24, Z+2	; 0x02
    1896:	93 81       	ldd	r25, Z+3	; 0x03
    1898:	82 17       	cp	r24, r18
    189a:	93 07       	cpc	r25, r19
    189c:	b8 f3       	brcs	.-18     	; 0x188c <pvPortMalloc+0xde>
    189e:	eb 01       	movw	r28, r22
    18a0:	e8 83       	st	Y, r30
    18a2:	f9 83       	std	Y+1, r31	; 0x01
    18a4:	6d 93       	st	X+, r22
    18a6:	7c 93       	st	X, r23

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
		{
			xWantedSize += heapSTRUCT_SIZE;
    18a8:	9a 01       	movw	r18, r20

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
    18aa:	80 91 14 20 	lds	r24, 0x2014	; 0x802014 <xFreeBytesRemaining>
    18ae:	90 91 15 20 	lds	r25, 0x2015	; 0x802015 <xFreeBytesRemaining+0x1>
    18b2:	82 1b       	sub	r24, r18
    18b4:	93 0b       	sbc	r25, r19
    18b6:	80 93 14 20 	sts	0x2014, r24	; 0x802014 <xFreeBytesRemaining>
    18ba:	90 93 15 20 	sts	0x2015, r25	; 0x802015 <xFreeBytesRemaining+0x1>
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    18be:	0e 94 87 19 	call	0x330e	; 0x330e <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
    18c2:	01 15       	cp	r16, r1
    18c4:	11 05       	cpc	r17, r1
    18c6:	41 f0       	breq	.+16     	; 0x18d8 <pvPortMalloc+0x12a>
		}
	}
	#endif

	return pvReturn;
}
    18c8:	c8 01       	movw	r24, r16
    18ca:	df 91       	pop	r29
    18cc:	cf 91       	pop	r28
    18ce:	1f 91       	pop	r17
    18d0:	0f 91       	pop	r16
    18d2:	08 95       	ret
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    18d4:	0e 94 87 19 	call	0x330e	; 0x330e <xTaskResumeAll>
	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
    18d8:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <vApplicationMallocFailedHook>
    18dc:	00 e0       	ldi	r16, 0x00	; 0
    18de:	10 e0       	ldi	r17, 0x00	; 0
		}
	}
	#endif

	return pvReturn;
}
    18e0:	c8 01       	movw	r24, r16
    18e2:	df 91       	pop	r29
    18e4:	cf 91       	pop	r28
    18e6:	1f 91       	pop	r17
    18e8:	0f 91       	pop	r16
    18ea:	08 95       	ret

000018ec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    18ec:	cf 93       	push	r28
    18ee:	df 93       	push	r29
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
    18f0:	00 97       	sbiw	r24, 0x00	; 0
    18f2:	21 f1       	breq	.+72     	; 0x193c <vPortFree+0x50>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
    18f4:	ec 01       	movw	r28, r24
    18f6:	24 97       	sbiw	r28, 0x04	; 4

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;

		vTaskSuspendAll();
    18f8:	0e 94 9d 18 	call	0x313a	; 0x313a <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    18fc:	4a 81       	ldd	r20, Y+2	; 0x02
    18fe:	5b 81       	ldd	r21, Y+3	; 0x03
    1900:	aa e9       	ldi	r26, 0x9A	; 154
    1902:	b5 e2       	ldi	r27, 0x25	; 37
    1904:	01 c0       	rjmp	.+2      	; 0x1908 <vPortFree+0x1c>
    1906:	df 01       	movw	r26, r30
    1908:	ed 91       	ld	r30, X+
    190a:	fc 91       	ld	r31, X
    190c:	11 97       	sbiw	r26, 0x01	; 1
    190e:	22 81       	ldd	r18, Z+2	; 0x02
    1910:	33 81       	ldd	r19, Z+3	; 0x03
    1912:	24 17       	cp	r18, r20
    1914:	35 07       	cpc	r19, r21
    1916:	b8 f3       	brcs	.-18     	; 0x1906 <vPortFree+0x1a>
    1918:	e8 83       	st	Y, r30
    191a:	f9 83       	std	Y+1, r31	; 0x01
    191c:	cd 93       	st	X+, r28
    191e:	dc 93       	st	X, r29
			xFreeBytesRemaining += pxLink->xBlockSize;
    1920:	80 91 14 20 	lds	r24, 0x2014	; 0x802014 <xFreeBytesRemaining>
    1924:	90 91 15 20 	lds	r25, 0x2015	; 0x802015 <xFreeBytesRemaining+0x1>
    1928:	48 0f       	add	r20, r24
    192a:	59 1f       	adc	r21, r25
    192c:	40 93 14 20 	sts	0x2014, r20	; 0x802014 <xFreeBytesRemaining>
    1930:	50 93 15 20 	sts	0x2015, r21	; 0x802015 <xFreeBytesRemaining+0x1>
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
	}
}
    1934:	df 91       	pop	r29
    1936:	cf 91       	pop	r28
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
			xFreeBytesRemaining += pxLink->xBlockSize;
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
    1938:	0c 94 87 19 	jmp	0x330e	; 0x330e <xTaskResumeAll>
	}
}
    193c:	df 91       	pop	r29
    193e:	cf 91       	pop	r28
    1940:	08 95       	ret

00001942 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    1942:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1944:	03 96       	adiw	r24, 0x03	; 3
    1946:	81 83       	std	Z+1, r24	; 0x01
    1948:	92 83       	std	Z+2, r25	; 0x02

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    194a:	2f ef       	ldi	r18, 0xFF	; 255
    194c:	3f ef       	ldi	r19, 0xFF	; 255
    194e:	23 83       	std	Z+3, r18	; 0x03
    1950:	34 83       	std	Z+4, r19	; 0x04

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1952:	85 83       	std	Z+5, r24	; 0x05
    1954:	96 83       	std	Z+6, r25	; 0x06
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1956:	87 83       	std	Z+7, r24	; 0x07
    1958:	90 87       	std	Z+8, r25	; 0x08

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    195a:	10 82       	st	Z, r1
    195c:	08 95       	ret

0000195e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
    195e:	fc 01       	movw	r30, r24
    1960:	10 86       	std	Z+8, r1	; 0x08
    1962:	11 86       	std	Z+9, r1	; 0x09
    1964:	08 95       	ret

00001966 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1966:	cf 93       	push	r28
    1968:	df 93       	push	r29
    196a:	9c 01       	movw	r18, r24
    196c:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    196e:	dc 01       	movw	r26, r24
    1970:	11 96       	adiw	r26, 0x01	; 1
    1972:	cd 91       	ld	r28, X+
    1974:	dc 91       	ld	r29, X
    1976:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    1978:	c2 83       	std	Z+2, r28	; 0x02
    197a:	d3 83       	std	Z+3, r29	; 0x03
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    197c:	8c 81       	ldd	r24, Y+4	; 0x04
    197e:	9d 81       	ldd	r25, Y+5	; 0x05
    1980:	84 83       	std	Z+4, r24	; 0x04
    1982:	95 83       	std	Z+5, r25	; 0x05

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    1984:	8c 81       	ldd	r24, Y+4	; 0x04
    1986:	9d 81       	ldd	r25, Y+5	; 0x05
    1988:	dc 01       	movw	r26, r24
    198a:	12 96       	adiw	r26, 0x02	; 2
    198c:	6d 93       	st	X+, r22
    198e:	7c 93       	st	X, r23
    1990:	13 97       	sbiw	r26, 0x03	; 3
	pxIndex->pxPrevious = pxNewListItem;
    1992:	6c 83       	std	Y+4, r22	; 0x04
    1994:	7d 83       	std	Y+5, r23	; 0x05

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
    1996:	20 87       	std	Z+8, r18	; 0x08
    1998:	31 87       	std	Z+9, r19	; 0x09

	( pxList->uxNumberOfItems )++;
    199a:	f9 01       	movw	r30, r18
    199c:	80 81       	ld	r24, Z
    199e:	8f 5f       	subi	r24, 0xFF	; 255
    19a0:	80 83       	st	Z, r24
}
    19a2:	df 91       	pop	r29
    19a4:	cf 91       	pop	r28
    19a6:	08 95       	ret

000019a8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    19a8:	cf 93       	push	r28
    19aa:	df 93       	push	r29
    19ac:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    19ae:	48 81       	ld	r20, Y
    19b0:	59 81       	ldd	r21, Y+1	; 0x01
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    19b2:	4f 3f       	cpi	r20, 0xFF	; 255
    19b4:	2f ef       	ldi	r18, 0xFF	; 255
    19b6:	52 07       	cpc	r21, r18
    19b8:	01 f1       	breq	.+64     	; 0x19fa <vListInsert+0x52>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    19ba:	dc 01       	movw	r26, r24
    19bc:	13 96       	adiw	r26, 0x03	; 3
    19be:	01 c0       	rjmp	.+2      	; 0x19c2 <vListInsert+0x1a>
    19c0:	df 01       	movw	r26, r30
    19c2:	12 96       	adiw	r26, 0x02	; 2
    19c4:	ed 91       	ld	r30, X+
    19c6:	fc 91       	ld	r31, X
    19c8:	13 97       	sbiw	r26, 0x03	; 3
    19ca:	20 81       	ld	r18, Z
    19cc:	31 81       	ldd	r19, Z+1	; 0x01
    19ce:	42 17       	cp	r20, r18
    19d0:	53 07       	cpc	r21, r19
    19d2:	b0 f7       	brcc	.-20     	; 0x19c0 <vListInsert+0x18>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    19d4:	ea 83       	std	Y+2, r30	; 0x02
    19d6:	fb 83       	std	Y+3, r31	; 0x03
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    19d8:	c4 83       	std	Z+4, r28	; 0x04
    19da:	d5 83       	std	Z+5, r29	; 0x05
	pxNewListItem->pxPrevious = pxIterator;
    19dc:	ac 83       	std	Y+4, r26	; 0x04
    19de:	bd 83       	std	Y+5, r27	; 0x05
	pxIterator->pxNext = pxNewListItem;
    19e0:	12 96       	adiw	r26, 0x02	; 2
    19e2:	cd 93       	st	X+, r28
    19e4:	dc 93       	st	X, r29
    19e6:	13 97       	sbiw	r26, 0x03	; 3

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
    19e8:	88 87       	std	Y+8, r24	; 0x08
    19ea:	99 87       	std	Y+9, r25	; 0x09

	( pxList->uxNumberOfItems )++;
    19ec:	fc 01       	movw	r30, r24
    19ee:	20 81       	ld	r18, Z
    19f0:	2f 5f       	subi	r18, 0xFF	; 255
    19f2:	20 83       	st	Z, r18
}
    19f4:	df 91       	pop	r29
    19f6:	cf 91       	pop	r28
    19f8:	08 95       	ret
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    19fa:	fc 01       	movw	r30, r24
    19fc:	a7 81       	ldd	r26, Z+7	; 0x07
    19fe:	b0 85       	ldd	r27, Z+8	; 0x08
    1a00:	12 96       	adiw	r26, 0x02	; 2
    1a02:	ed 91       	ld	r30, X+
    1a04:	fc 91       	ld	r31, X
    1a06:	13 97       	sbiw	r26, 0x03	; 3
    1a08:	e5 cf       	rjmp	.-54     	; 0x19d4 <vListInsert+0x2c>

00001a0a <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    1a0a:	cf 93       	push	r28
    1a0c:	df 93       	push	r29
    1a0e:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
    1a10:	a0 85       	ldd	r26, Z+8	; 0x08
    1a12:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1a14:	22 81       	ldd	r18, Z+2	; 0x02
    1a16:	33 81       	ldd	r19, Z+3	; 0x03
    1a18:	84 81       	ldd	r24, Z+4	; 0x04
    1a1a:	95 81       	ldd	r25, Z+5	; 0x05
    1a1c:	e9 01       	movw	r28, r18
    1a1e:	8c 83       	std	Y+4, r24	; 0x04
    1a20:	9d 83       	std	Y+5, r25	; 0x05
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1a22:	84 81       	ldd	r24, Z+4	; 0x04
    1a24:	95 81       	ldd	r25, Z+5	; 0x05
    1a26:	ec 01       	movw	r28, r24
    1a28:	2a 83       	std	Y+2, r18	; 0x02
    1a2a:	3b 83       	std	Y+3, r19	; 0x03

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    1a2c:	11 96       	adiw	r26, 0x01	; 1
    1a2e:	2d 91       	ld	r18, X+
    1a30:	3c 91       	ld	r19, X
    1a32:	12 97       	sbiw	r26, 0x02	; 2
    1a34:	e2 17       	cp	r30, r18
    1a36:	f3 07       	cpc	r31, r19
    1a38:	49 f0       	breq	.+18     	; 0x1a4c <uxListRemove+0x42>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
    1a3a:	10 86       	std	Z+8, r1	; 0x08
    1a3c:	11 86       	std	Z+9, r1	; 0x09
	( pxList->uxNumberOfItems )--;
    1a3e:	8c 91       	ld	r24, X
    1a40:	81 50       	subi	r24, 0x01	; 1
    1a42:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
    1a44:	8c 91       	ld	r24, X
}
    1a46:	df 91       	pop	r29
    1a48:	cf 91       	pop	r28
    1a4a:	08 95       	ret
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    1a4c:	11 96       	adiw	r26, 0x01	; 1
    1a4e:	8d 93       	st	X+, r24
    1a50:	9c 93       	st	X, r25
    1a52:	12 97       	sbiw	r26, 0x02	; 2
    1a54:	f2 cf       	rjmp	.-28     	; 0x1a3a <uxListRemove+0x30>

00001a56 <pxPortInitialiseStack>:
uint16_t usAddress;

	/* Place a few bytes of known values on the bottom of the stack. 
	This is just useful for debugging. */

	*pxTopOfStack = 0x11;
    1a56:	31 e1       	ldi	r19, 0x11	; 17
    1a58:	fc 01       	movw	r30, r24
    1a5a:	30 83       	st	Z, r19
	pxTopOfStack--;
	*pxTopOfStack = 0x22;
    1a5c:	31 97       	sbiw	r30, 0x01	; 1
    1a5e:	22 e2       	ldi	r18, 0x22	; 34
    1a60:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = 0x33;
    1a62:	31 97       	sbiw	r30, 0x01	; 1
    1a64:	a3 e3       	ldi	r26, 0x33	; 51
    1a66:	a0 83       	st	Z, r26
	/*lint -e950 -e611 -e923 Lint doesn't like this much - but nothing I can do about it. */

	/* The start of the task code will be popped off the stack last, so place
	it on first. */
	usAddress = ( uint16_t ) pxCode;
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    1a68:	31 97       	sbiw	r30, 0x01	; 1
    1a6a:	60 83       	st	Z, r22
	pxTopOfStack--;

	usAddress >>= 8;
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    1a6c:	31 97       	sbiw	r30, 0x01	; 1
    1a6e:	70 83       	st	Z, r23
	pxTopOfStack--;

#if defined(__AVR_3_BYTE_PC__) && __AVR_3_BYTE_PC__   //MCU's with more than 128kB of program memory: PC is 3 bytes
	usAddress >>= 8;
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    1a70:	31 97       	sbiw	r30, 0x01	; 1
    1a72:	10 82       	st	Z, r1

	/* Next simulate the stack as if after a call to portSAVE_CONTEXT().  
	portSAVE_CONTEXT places the flags on the stack immediately after r0
	to ensure the interrupts get disabled as soon as possible, and so ensuring
	the stack use is minimal should a context switch interrupt occur. */
	*pxTopOfStack = ( StackType_t ) 0x00;	/* R0 */
    1a74:	31 97       	sbiw	r30, 0x01	; 1
    1a76:	10 82       	st	Z, r1
	pxTopOfStack--;
	*pxTopOfStack = portFLAGS_INT_ENABLED;
    1a78:	31 97       	sbiw	r30, 0x01	; 1
    1a7a:	60 e8       	ldi	r22, 0x80	; 128
    1a7c:	60 83       	st	Z, r22
	pxTopOfStack--;


	/* Now the remaining registers.   The compiler expects R1 to be 0. */
	*pxTopOfStack = ( StackType_t ) 0x00;	/* R1 */
    1a7e:	31 97       	sbiw	r30, 0x01	; 1
    1a80:	10 82       	st	Z, r1
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x02;	/* R2 */
    1a82:	31 97       	sbiw	r30, 0x01	; 1
    1a84:	62 e0       	ldi	r22, 0x02	; 2
    1a86:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x03;	/* R3 */
    1a88:	31 97       	sbiw	r30, 0x01	; 1
    1a8a:	63 e0       	ldi	r22, 0x03	; 3
    1a8c:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x04;	/* R4 */
    1a8e:	31 97       	sbiw	r30, 0x01	; 1
    1a90:	64 e0       	ldi	r22, 0x04	; 4
    1a92:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x05;	/* R5 */
    1a94:	31 97       	sbiw	r30, 0x01	; 1
    1a96:	65 e0       	ldi	r22, 0x05	; 5
    1a98:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x06;	/* R6 */
    1a9a:	31 97       	sbiw	r30, 0x01	; 1
    1a9c:	66 e0       	ldi	r22, 0x06	; 6
    1a9e:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x07;	/* R7 */
    1aa0:	31 97       	sbiw	r30, 0x01	; 1
    1aa2:	67 e0       	ldi	r22, 0x07	; 7
    1aa4:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x08;	/* R8 */
    1aa6:	31 97       	sbiw	r30, 0x01	; 1
    1aa8:	68 e0       	ldi	r22, 0x08	; 8
    1aaa:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x09;	/* R9 */
    1aac:	31 97       	sbiw	r30, 0x01	; 1
    1aae:	69 e0       	ldi	r22, 0x09	; 9
    1ab0:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x10;	/* R10 */
    1ab2:	31 97       	sbiw	r30, 0x01	; 1
    1ab4:	60 e1       	ldi	r22, 0x10	; 16
    1ab6:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x11;	/* R11 */
    1ab8:	31 97       	sbiw	r30, 0x01	; 1
    1aba:	30 83       	st	Z, r19
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x12;	/* R12 */
    1abc:	31 97       	sbiw	r30, 0x01	; 1
    1abe:	32 e1       	ldi	r19, 0x12	; 18
    1ac0:	30 83       	st	Z, r19
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x13;	/* R13 */
    1ac2:	31 97       	sbiw	r30, 0x01	; 1
    1ac4:	33 e1       	ldi	r19, 0x13	; 19
    1ac6:	30 83       	st	Z, r19
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x14;	/* R14 */
    1ac8:	31 97       	sbiw	r30, 0x01	; 1
    1aca:	34 e1       	ldi	r19, 0x14	; 20
    1acc:	30 83       	st	Z, r19
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x15;	/* R15 */
    1ace:	31 97       	sbiw	r30, 0x01	; 1
    1ad0:	35 e1       	ldi	r19, 0x15	; 21
    1ad2:	30 83       	st	Z, r19
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x16;	/* R16 */
    1ad4:	31 97       	sbiw	r30, 0x01	; 1
    1ad6:	36 e1       	ldi	r19, 0x16	; 22
    1ad8:	30 83       	st	Z, r19
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x17;	/* R17 */
    1ada:	31 97       	sbiw	r30, 0x01	; 1
    1adc:	37 e1       	ldi	r19, 0x17	; 23
    1ade:	30 83       	st	Z, r19
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x18;	/* R18 */
    1ae0:	31 97       	sbiw	r30, 0x01	; 1
    1ae2:	38 e1       	ldi	r19, 0x18	; 24
    1ae4:	30 83       	st	Z, r19
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x19;	/* R19 */
    1ae6:	31 97       	sbiw	r30, 0x01	; 1
    1ae8:	39 e1       	ldi	r19, 0x19	; 25
    1aea:	30 83       	st	Z, r19
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x20;	/* R20 */
    1aec:	31 97       	sbiw	r30, 0x01	; 1
    1aee:	30 e2       	ldi	r19, 0x20	; 32
    1af0:	30 83       	st	Z, r19
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x21;	/* R21 */
    1af2:	31 97       	sbiw	r30, 0x01	; 1
    1af4:	31 e2       	ldi	r19, 0x21	; 33
    1af6:	30 83       	st	Z, r19
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x22;	/* R22 */
    1af8:	31 97       	sbiw	r30, 0x01	; 1
    1afa:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x23;	/* R23 */
    1afc:	31 97       	sbiw	r30, 0x01	; 1
    1afe:	23 e2       	ldi	r18, 0x23	; 35
    1b00:	20 83       	st	Z, r18
	pxTopOfStack--;

	/* Place the parameter on the stack in the expected location. */
	usAddress = ( uint16_t ) pvParameters;
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    1b02:	31 97       	sbiw	r30, 0x01	; 1
    1b04:	40 83       	st	Z, r20
	pxTopOfStack--;

	usAddress >>= 8;
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    1b06:	31 97       	sbiw	r30, 0x01	; 1
    1b08:	50 83       	st	Z, r21
	pxTopOfStack--;

	*pxTopOfStack = ( StackType_t ) 0x26;	/* R26 X */
    1b0a:	31 97       	sbiw	r30, 0x01	; 1
    1b0c:	26 e2       	ldi	r18, 0x26	; 38
    1b0e:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x27;	/* R27 */
    1b10:	31 97       	sbiw	r30, 0x01	; 1
    1b12:	27 e2       	ldi	r18, 0x27	; 39
    1b14:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x28;	/* R28 Y */
    1b16:	31 97       	sbiw	r30, 0x01	; 1
    1b18:	28 e2       	ldi	r18, 0x28	; 40
    1b1a:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x29;	/* R29 */
    1b1c:	31 97       	sbiw	r30, 0x01	; 1
    1b1e:	29 e2       	ldi	r18, 0x29	; 41
    1b20:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x30;	/* R30 Z */
    1b22:	31 97       	sbiw	r30, 0x01	; 1
    1b24:	20 e3       	ldi	r18, 0x30	; 48
    1b26:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x031;	/* R31 */
    1b28:	31 97       	sbiw	r30, 0x01	; 1
    1b2a:	21 e3       	ldi	r18, 0x31	; 49
    1b2c:	20 83       	st	Z, r18
	pxTopOfStack--;

	/*lint +e950 +e611 +e923 */

	return pxTopOfStack;
}
    1b2e:	87 97       	sbiw	r24, 0x27	; 39
    1b30:	08 95       	ret

00001b32 <xPortStartScheduler>:
 */

static void prvSetupTimerInterrupt( void )
{
	//TCC0 is used as tick timer
	TCC0.CCA=65535;
    1b32:	e0 e0       	ldi	r30, 0x00	; 0
    1b34:	f8 e0       	ldi	r31, 0x08	; 8
    1b36:	8f ef       	ldi	r24, 0xFF	; 255
    1b38:	9f ef       	ldi	r25, 0xFF	; 255
    1b3a:	80 a7       	std	Z+40, r24	; 0x28
    1b3c:	91 a7       	std	Z+41, r25	; 0x29
	TCC0.CTRLA=0b00000001; //DIV1
    1b3e:	81 e0       	ldi	r24, 0x01	; 1
    1b40:	80 83       	st	Z, r24
	TCC0.CTRLB=1<<6;
    1b42:	90 e4       	ldi	r25, 0x40	; 64
    1b44:	91 83       	std	Z+1, r25	; 0x01
	TCC0.INTCTRLA=0b00000001; //OVF priority LOW
    1b46:	86 83       	std	Z+6, r24	; 0x06
	TCC0.INTCTRLB=0b00000001; //CCA priority LOW
    1b48:	87 83       	std	Z+7, r24	; 0x07
	TCC0.PER=configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    1b4a:	80 e0       	ldi	r24, 0x00	; 0
    1b4c:	9d e7       	ldi	r25, 0x7D	; 125
    1b4e:	86 a3       	std	Z+38, r24	; 0x26
    1b50:	97 a3       	std	Z+39, r25	; 0x27
{
	/* Setup the hardware to generate the tick. */
	prvSetupTimerInterrupt();

	/* Restore the context of the first task that is going to run. */
	portRESTORE_CONTEXT();
    1b52:	a0 91 3c 26 	lds	r26, 0x263C	; 0x80263c <pxCurrentTCB>
    1b56:	b0 91 3d 26 	lds	r27, 0x263D	; 0x80263d <pxCurrentTCB+0x1>
    1b5a:	cd 91       	ld	r28, X+
    1b5c:	cd bf       	out	0x3d, r28	; 61
    1b5e:	dd 91       	ld	r29, X+
    1b60:	de bf       	out	0x3e, r29	; 62
    1b62:	ff 91       	pop	r31
    1b64:	ef 91       	pop	r30
    1b66:	df 91       	pop	r29
    1b68:	cf 91       	pop	r28
    1b6a:	bf 91       	pop	r27
    1b6c:	af 91       	pop	r26
    1b6e:	9f 91       	pop	r25
    1b70:	8f 91       	pop	r24
    1b72:	7f 91       	pop	r23
    1b74:	6f 91       	pop	r22
    1b76:	5f 91       	pop	r21
    1b78:	4f 91       	pop	r20
    1b7a:	3f 91       	pop	r19
    1b7c:	2f 91       	pop	r18
    1b7e:	1f 91       	pop	r17
    1b80:	0f 91       	pop	r16
    1b82:	ff 90       	pop	r15
    1b84:	ef 90       	pop	r14
    1b86:	df 90       	pop	r13
    1b88:	cf 90       	pop	r12
    1b8a:	bf 90       	pop	r11
    1b8c:	af 90       	pop	r10
    1b8e:	9f 90       	pop	r9
    1b90:	8f 90       	pop	r8
    1b92:	7f 90       	pop	r7
    1b94:	6f 90       	pop	r6
    1b96:	5f 90       	pop	r5
    1b98:	4f 90       	pop	r4
    1b9a:	3f 90       	pop	r3
    1b9c:	2f 90       	pop	r2
    1b9e:	1f 90       	pop	r1
    1ba0:	0f 90       	pop	r0
    1ba2:	0f be       	out	0x3f, r0	; 63
    1ba4:	0f 90       	pop	r0

	/* Simulate a function call end as generated by the compiler.  We will now
	jump to the start of the task the context of which we have just restored. */
	asm volatile ( "ret" );
    1ba6:	08 95       	ret

	/* Should not get here. */
	return pdTRUE;
}
    1ba8:	81 e0       	ldi	r24, 0x01	; 1
    1baa:	08 95       	ret

00001bac <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    1bac:	0f 92       	push	r0
    1bae:	0f b6       	in	r0, 0x3f	; 63
    1bb0:	f8 94       	cli
    1bb2:	0f 92       	push	r0
    1bb4:	1f 92       	push	r1
    1bb6:	11 24       	eor	r1, r1
    1bb8:	2f 92       	push	r2
    1bba:	3f 92       	push	r3
    1bbc:	4f 92       	push	r4
    1bbe:	5f 92       	push	r5
    1bc0:	6f 92       	push	r6
    1bc2:	7f 92       	push	r7
    1bc4:	8f 92       	push	r8
    1bc6:	9f 92       	push	r9
    1bc8:	af 92       	push	r10
    1bca:	bf 92       	push	r11
    1bcc:	cf 92       	push	r12
    1bce:	df 92       	push	r13
    1bd0:	ef 92       	push	r14
    1bd2:	ff 92       	push	r15
    1bd4:	0f 93       	push	r16
    1bd6:	1f 93       	push	r17
    1bd8:	2f 93       	push	r18
    1bda:	3f 93       	push	r19
    1bdc:	4f 93       	push	r20
    1bde:	5f 93       	push	r21
    1be0:	6f 93       	push	r22
    1be2:	7f 93       	push	r23
    1be4:	8f 93       	push	r24
    1be6:	9f 93       	push	r25
    1be8:	af 93       	push	r26
    1bea:	bf 93       	push	r27
    1bec:	cf 93       	push	r28
    1bee:	df 93       	push	r29
    1bf0:	ef 93       	push	r30
    1bf2:	ff 93       	push	r31
    1bf4:	a0 91 3c 26 	lds	r26, 0x263C	; 0x80263c <pxCurrentTCB>
    1bf8:	b0 91 3d 26 	lds	r27, 0x263D	; 0x80263d <pxCurrentTCB+0x1>
    1bfc:	0d b6       	in	r0, 0x3d	; 61
    1bfe:	0d 92       	st	X+, r0
    1c00:	0e b6       	in	r0, 0x3e	; 62
    1c02:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    1c04:	0e 94 91 1a 	call	0x3522	; 0x3522 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    1c08:	a0 91 3c 26 	lds	r26, 0x263C	; 0x80263c <pxCurrentTCB>
    1c0c:	b0 91 3d 26 	lds	r27, 0x263D	; 0x80263d <pxCurrentTCB+0x1>
    1c10:	cd 91       	ld	r28, X+
    1c12:	cd bf       	out	0x3d, r28	; 61
    1c14:	dd 91       	ld	r29, X+
    1c16:	de bf       	out	0x3e, r29	; 62
    1c18:	ff 91       	pop	r31
    1c1a:	ef 91       	pop	r30
    1c1c:	df 91       	pop	r29
    1c1e:	cf 91       	pop	r28
    1c20:	bf 91       	pop	r27
    1c22:	af 91       	pop	r26
    1c24:	9f 91       	pop	r25
    1c26:	8f 91       	pop	r24
    1c28:	7f 91       	pop	r23
    1c2a:	6f 91       	pop	r22
    1c2c:	5f 91       	pop	r21
    1c2e:	4f 91       	pop	r20
    1c30:	3f 91       	pop	r19
    1c32:	2f 91       	pop	r18
    1c34:	1f 91       	pop	r17
    1c36:	0f 91       	pop	r16
    1c38:	ff 90       	pop	r15
    1c3a:	ef 90       	pop	r14
    1c3c:	df 90       	pop	r13
    1c3e:	cf 90       	pop	r12
    1c40:	bf 90       	pop	r11
    1c42:	af 90       	pop	r10
    1c44:	9f 90       	pop	r9
    1c46:	8f 90       	pop	r8
    1c48:	7f 90       	pop	r7
    1c4a:	6f 90       	pop	r6
    1c4c:	5f 90       	pop	r5
    1c4e:	4f 90       	pop	r4
    1c50:	3f 90       	pop	r3
    1c52:	2f 90       	pop	r2
    1c54:	1f 90       	pop	r1
    1c56:	0f 90       	pop	r0
    1c58:	0f be       	out	0x3f, r0	; 63
    1c5a:	0f 90       	pop	r0
	asm volatile ( "ret" );
    1c5c:	08 95       	ret

00001c5e <vPortYieldISR>:
}*/

//void vPortYieldISR( void ) __attribute__ ( ( naked ) );
void vPortYieldISR( void )
{
	TCC0.CCA=TCC0.CNT+100;
    1c5e:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
    1c62:	90 91 21 08 	lds	r25, 0x0821	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
    1c66:	8c 59       	subi	r24, 0x9C	; 156
    1c68:	9f 4f       	sbci	r25, 0xFF	; 255
    1c6a:	80 93 28 08 	sts	0x0828, r24	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    1c6e:	90 93 29 08 	sts	0x0829, r25	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
	if (TCC0.CCA>=TCC0.PER) TCC0.CCA-= TCC0.PER;
    1c72:	20 91 28 08 	lds	r18, 0x0828	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    1c76:	30 91 29 08 	lds	r19, 0x0829	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
    1c7a:	80 91 26 08 	lds	r24, 0x0826	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
    1c7e:	90 91 27 08 	lds	r25, 0x0827	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
    1c82:	28 17       	cp	r18, r24
    1c84:	39 07       	cpc	r19, r25
    1c86:	70 f0       	brcs	.+28     	; 0x1ca4 <vPortYieldISR+0x46>
    1c88:	20 91 26 08 	lds	r18, 0x0826	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
    1c8c:	30 91 27 08 	lds	r19, 0x0827	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
    1c90:	80 91 28 08 	lds	r24, 0x0828	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    1c94:	90 91 29 08 	lds	r25, 0x0829	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
    1c98:	82 1b       	sub	r24, r18
    1c9a:	93 0b       	sbc	r25, r19
    1c9c:	80 93 28 08 	sts	0x0828, r24	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    1ca0:	90 93 29 08 	sts	0x0829, r25	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
	asm volatile ( "ret" );
    1ca4:	08 95       	ret

00001ca6 <__vector_14>:
	 * the context is saved at the start of the ISR.  The tick
	 * count is incremented after the context is saved.
	 */	
	ISR(TCC0_OVF_vect,ISR_NAKED)
	{
		portSAVE_CONTEXT();
    1ca6:	0f 92       	push	r0
    1ca8:	0f b6       	in	r0, 0x3f	; 63
    1caa:	f8 94       	cli
    1cac:	0f 92       	push	r0
    1cae:	1f 92       	push	r1
    1cb0:	11 24       	eor	r1, r1
    1cb2:	2f 92       	push	r2
    1cb4:	3f 92       	push	r3
    1cb6:	4f 92       	push	r4
    1cb8:	5f 92       	push	r5
    1cba:	6f 92       	push	r6
    1cbc:	7f 92       	push	r7
    1cbe:	8f 92       	push	r8
    1cc0:	9f 92       	push	r9
    1cc2:	af 92       	push	r10
    1cc4:	bf 92       	push	r11
    1cc6:	cf 92       	push	r12
    1cc8:	df 92       	push	r13
    1cca:	ef 92       	push	r14
    1ccc:	ff 92       	push	r15
    1cce:	0f 93       	push	r16
    1cd0:	1f 93       	push	r17
    1cd2:	2f 93       	push	r18
    1cd4:	3f 93       	push	r19
    1cd6:	4f 93       	push	r20
    1cd8:	5f 93       	push	r21
    1cda:	6f 93       	push	r22
    1cdc:	7f 93       	push	r23
    1cde:	8f 93       	push	r24
    1ce0:	9f 93       	push	r25
    1ce2:	af 93       	push	r26
    1ce4:	bf 93       	push	r27
    1ce6:	cf 93       	push	r28
    1ce8:	df 93       	push	r29
    1cea:	ef 93       	push	r30
    1cec:	ff 93       	push	r31
    1cee:	a0 91 3c 26 	lds	r26, 0x263C	; 0x80263c <pxCurrentTCB>
    1cf2:	b0 91 3d 26 	lds	r27, 0x263D	; 0x80263d <pxCurrentTCB+0x1>
    1cf6:	0d b6       	in	r0, 0x3d	; 61
    1cf8:	0d 92       	st	X+, r0
    1cfa:	0e b6       	in	r0, 0x3e	; 62
    1cfc:	0d 92       	st	X+, r0
		StatsTimer+=TCC0.PER;
    1cfe:	20 91 26 08 	lds	r18, 0x0826	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
    1d02:	30 91 27 08 	lds	r19, 0x0827	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
    1d06:	80 91 c0 26 	lds	r24, 0x26C0	; 0x8026c0 <StatsTimer>
    1d0a:	90 91 c1 26 	lds	r25, 0x26C1	; 0x8026c1 <StatsTimer+0x1>
    1d0e:	a0 91 c2 26 	lds	r26, 0x26C2	; 0x8026c2 <StatsTimer+0x2>
    1d12:	b0 91 c3 26 	lds	r27, 0x26C3	; 0x8026c3 <StatsTimer+0x3>
    1d16:	82 0f       	add	r24, r18
    1d18:	93 1f       	adc	r25, r19
    1d1a:	a1 1d       	adc	r26, r1
    1d1c:	b1 1d       	adc	r27, r1
    1d1e:	80 93 c0 26 	sts	0x26C0, r24	; 0x8026c0 <StatsTimer>
    1d22:	90 93 c1 26 	sts	0x26C1, r25	; 0x8026c1 <StatsTimer+0x1>
    1d26:	a0 93 c2 26 	sts	0x26C2, r26	; 0x8026c2 <StatsTimer+0x2>
    1d2a:	b0 93 c3 26 	sts	0x26C3, r27	; 0x8026c3 <StatsTimer+0x3>
		xTaskIncrementTick();
    1d2e:	0e 94 ad 18 	call	0x315a	; 0x315a <xTaskIncrementTick>
		vTaskSwitchContext();
    1d32:	0e 94 91 1a 	call	0x3522	; 0x3522 <vTaskSwitchContext>
		portRESTORE_CONTEXT();
    1d36:	a0 91 3c 26 	lds	r26, 0x263C	; 0x80263c <pxCurrentTCB>
    1d3a:	b0 91 3d 26 	lds	r27, 0x263D	; 0x80263d <pxCurrentTCB+0x1>
    1d3e:	cd 91       	ld	r28, X+
    1d40:	cd bf       	out	0x3d, r28	; 61
    1d42:	dd 91       	ld	r29, X+
    1d44:	de bf       	out	0x3e, r29	; 62
    1d46:	ff 91       	pop	r31
    1d48:	ef 91       	pop	r30
    1d4a:	df 91       	pop	r29
    1d4c:	cf 91       	pop	r28
    1d4e:	bf 91       	pop	r27
    1d50:	af 91       	pop	r26
    1d52:	9f 91       	pop	r25
    1d54:	8f 91       	pop	r24
    1d56:	7f 91       	pop	r23
    1d58:	6f 91       	pop	r22
    1d5a:	5f 91       	pop	r21
    1d5c:	4f 91       	pop	r20
    1d5e:	3f 91       	pop	r19
    1d60:	2f 91       	pop	r18
    1d62:	1f 91       	pop	r17
    1d64:	0f 91       	pop	r16
    1d66:	ff 90       	pop	r15
    1d68:	ef 90       	pop	r14
    1d6a:	df 90       	pop	r13
    1d6c:	cf 90       	pop	r12
    1d6e:	bf 90       	pop	r11
    1d70:	af 90       	pop	r10
    1d72:	9f 90       	pop	r9
    1d74:	8f 90       	pop	r8
    1d76:	7f 90       	pop	r7
    1d78:	6f 90       	pop	r6
    1d7a:	5f 90       	pop	r5
    1d7c:	4f 90       	pop	r4
    1d7e:	3f 90       	pop	r3
    1d80:	2f 90       	pop	r2
    1d82:	1f 90       	pop	r1
    1d84:	0f 90       	pop	r0
    1d86:	0f be       	out	0x3f, r0	; 63
    1d88:	0f 90       	pop	r0

		asm volatile ( "reti" );
    1d8a:	18 95       	reti

00001d8c <vConfigureTimerForRunTimeStats>:
 */

volatile uint32_t StatsTimer;

void vConfigureTimerForRunTimeStats(void)
{
    1d8c:	08 95       	ret

00001d8e <__vector_16>:
	//TCC1.INTCTRLA=0b00000001; //OVF priority LOW
}

ISR(TCC0_CCA_vect,ISR_NAKED)
	{
	portSAVE_CONTEXT();
    1d8e:	0f 92       	push	r0
    1d90:	0f b6       	in	r0, 0x3f	; 63
    1d92:	f8 94       	cli
    1d94:	0f 92       	push	r0
    1d96:	1f 92       	push	r1
    1d98:	11 24       	eor	r1, r1
    1d9a:	2f 92       	push	r2
    1d9c:	3f 92       	push	r3
    1d9e:	4f 92       	push	r4
    1da0:	5f 92       	push	r5
    1da2:	6f 92       	push	r6
    1da4:	7f 92       	push	r7
    1da6:	8f 92       	push	r8
    1da8:	9f 92       	push	r9
    1daa:	af 92       	push	r10
    1dac:	bf 92       	push	r11
    1dae:	cf 92       	push	r12
    1db0:	df 92       	push	r13
    1db2:	ef 92       	push	r14
    1db4:	ff 92       	push	r15
    1db6:	0f 93       	push	r16
    1db8:	1f 93       	push	r17
    1dba:	2f 93       	push	r18
    1dbc:	3f 93       	push	r19
    1dbe:	4f 93       	push	r20
    1dc0:	5f 93       	push	r21
    1dc2:	6f 93       	push	r22
    1dc4:	7f 93       	push	r23
    1dc6:	8f 93       	push	r24
    1dc8:	9f 93       	push	r25
    1dca:	af 93       	push	r26
    1dcc:	bf 93       	push	r27
    1dce:	cf 93       	push	r28
    1dd0:	df 93       	push	r29
    1dd2:	ef 93       	push	r30
    1dd4:	ff 93       	push	r31
    1dd6:	a0 91 3c 26 	lds	r26, 0x263C	; 0x80263c <pxCurrentTCB>
    1dda:	b0 91 3d 26 	lds	r27, 0x263D	; 0x80263d <pxCurrentTCB+0x1>
    1dde:	0d b6       	in	r0, 0x3d	; 61
    1de0:	0d 92       	st	X+, r0
    1de2:	0e b6       	in	r0, 0x3e	; 62
    1de4:	0d 92       	st	X+, r0
	TCC0.CCA=65535;
    1de6:	8f ef       	ldi	r24, 0xFF	; 255
    1de8:	9f ef       	ldi	r25, 0xFF	; 255
    1dea:	80 93 28 08 	sts	0x0828, r24	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    1dee:	90 93 29 08 	sts	0x0829, r25	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
	vTaskSwitchContext();
    1df2:	0e 94 91 1a 	call	0x3522	; 0x3522 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    1df6:	a0 91 3c 26 	lds	r26, 0x263C	; 0x80263c <pxCurrentTCB>
    1dfa:	b0 91 3d 26 	lds	r27, 0x263D	; 0x80263d <pxCurrentTCB+0x1>
    1dfe:	cd 91       	ld	r28, X+
    1e00:	cd bf       	out	0x3d, r28	; 61
    1e02:	dd 91       	ld	r29, X+
    1e04:	de bf       	out	0x3e, r29	; 62
    1e06:	ff 91       	pop	r31
    1e08:	ef 91       	pop	r30
    1e0a:	df 91       	pop	r29
    1e0c:	cf 91       	pop	r28
    1e0e:	bf 91       	pop	r27
    1e10:	af 91       	pop	r26
    1e12:	9f 91       	pop	r25
    1e14:	8f 91       	pop	r24
    1e16:	7f 91       	pop	r23
    1e18:	6f 91       	pop	r22
    1e1a:	5f 91       	pop	r21
    1e1c:	4f 91       	pop	r20
    1e1e:	3f 91       	pop	r19
    1e20:	2f 91       	pop	r18
    1e22:	1f 91       	pop	r17
    1e24:	0f 91       	pop	r16
    1e26:	ff 90       	pop	r15
    1e28:	ef 90       	pop	r14
    1e2a:	df 90       	pop	r13
    1e2c:	cf 90       	pop	r12
    1e2e:	bf 90       	pop	r11
    1e30:	af 90       	pop	r10
    1e32:	9f 90       	pop	r9
    1e34:	8f 90       	pop	r8
    1e36:	7f 90       	pop	r7
    1e38:	6f 90       	pop	r6
    1e3a:	5f 90       	pop	r5
    1e3c:	4f 90       	pop	r4
    1e3e:	3f 90       	pop	r3
    1e40:	2f 90       	pop	r2
    1e42:	1f 90       	pop	r1
    1e44:	0f 90       	pop	r0
    1e46:	0f be       	out	0x3f, r0	; 63
    1e48:	0f 90       	pop	r0
	asm volatile ( "reti" );
    1e4a:	18 95       	reti

00001e4c <prvCopyDataToQueue>:
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;

	configASSERT( pxQueue );
    1e4c:	0f 93       	push	r16
    1e4e:	1f 93       	push	r17
    1e50:	cf 93       	push	r28
    1e52:	df 93       	push	r29
    1e54:	ec 01       	movw	r28, r24
    1e56:	04 2f       	mov	r16, r20
    1e58:	1a 8d       	ldd	r17, Y+26	; 0x1a
    1e5a:	4c 8d       	ldd	r20, Y+28	; 0x1c
    1e5c:	41 11       	cpse	r20, r1
    1e5e:	0d c0       	rjmp	.+26     	; 0x1e7a <prvCopyDataToQueue+0x2e>
    1e60:	88 81       	ld	r24, Y
    1e62:	99 81       	ldd	r25, Y+1	; 0x01
    1e64:	89 2b       	or	r24, r25
    1e66:	09 f4       	brne	.+2      	; 0x1e6a <prvCopyDataToQueue+0x1e>
    1e68:	43 c0       	rjmp	.+134    	; 0x1ef0 <prvCopyDataToQueue+0xa4>
    1e6a:	1f 5f       	subi	r17, 0xFF	; 255
    1e6c:	80 e0       	ldi	r24, 0x00	; 0
    1e6e:	1a 8f       	std	Y+26, r17	; 0x1a
    1e70:	df 91       	pop	r29
    1e72:	cf 91       	pop	r28
    1e74:	1f 91       	pop	r17
    1e76:	0f 91       	pop	r16
    1e78:	08 95       	ret
    1e7a:	50 e0       	ldi	r21, 0x00	; 0
    1e7c:	01 11       	cpse	r16, r1
    1e7e:	15 c0       	rjmp	.+42     	; 0x1eaa <prvCopyDataToQueue+0x5e>
    1e80:	8a 81       	ldd	r24, Y+2	; 0x02
    1e82:	9b 81       	ldd	r25, Y+3	; 0x03
    1e84:	0e 94 3f 30 	call	0x607e	; 0x607e <memcpy>
    1e88:	2c 8d       	ldd	r18, Y+28	; 0x1c
    1e8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8c:	9b 81       	ldd	r25, Y+3	; 0x03
    1e8e:	82 0f       	add	r24, r18
    1e90:	91 1d       	adc	r25, r1
    1e92:	8a 83       	std	Y+2, r24	; 0x02
    1e94:	9b 83       	std	Y+3, r25	; 0x03
    1e96:	2c 81       	ldd	r18, Y+4	; 0x04
    1e98:	3d 81       	ldd	r19, Y+5	; 0x05
    1e9a:	82 17       	cp	r24, r18
    1e9c:	93 07       	cpc	r25, r19
    1e9e:	28 f3       	brcs	.-54     	; 0x1e6a <prvCopyDataToQueue+0x1e>
    1ea0:	88 81       	ld	r24, Y
    1ea2:	99 81       	ldd	r25, Y+1	; 0x01
    1ea4:	8a 83       	std	Y+2, r24	; 0x02
    1ea6:	9b 83       	std	Y+3, r25	; 0x03
    1ea8:	e0 cf       	rjmp	.-64     	; 0x1e6a <prvCopyDataToQueue+0x1e>
    1eaa:	8e 81       	ldd	r24, Y+6	; 0x06
    1eac:	9f 81       	ldd	r25, Y+7	; 0x07
    1eae:	0e 94 3f 30 	call	0x607e	; 0x607e <memcpy>
    1eb2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	91 95       	neg	r25
    1eb8:	81 95       	neg	r24
    1eba:	91 09       	sbc	r25, r1
    1ebc:	2e 81       	ldd	r18, Y+6	; 0x06
    1ebe:	3f 81       	ldd	r19, Y+7	; 0x07
    1ec0:	28 0f       	add	r18, r24
    1ec2:	39 1f       	adc	r19, r25
    1ec4:	2e 83       	std	Y+6, r18	; 0x06
    1ec6:	3f 83       	std	Y+7, r19	; 0x07
    1ec8:	48 81       	ld	r20, Y
    1eca:	59 81       	ldd	r21, Y+1	; 0x01
    1ecc:	24 17       	cp	r18, r20
    1ece:	35 07       	cpc	r19, r21
    1ed0:	30 f4       	brcc	.+12     	; 0x1ede <prvCopyDataToQueue+0x92>
    1ed2:	2c 81       	ldd	r18, Y+4	; 0x04
    1ed4:	3d 81       	ldd	r19, Y+5	; 0x05
    1ed6:	82 0f       	add	r24, r18
    1ed8:	93 1f       	adc	r25, r19
    1eda:	8e 83       	std	Y+6, r24	; 0x06
    1edc:	9f 83       	std	Y+7, r25	; 0x07
    1ede:	02 30       	cpi	r16, 0x02	; 2
    1ee0:	21 f6       	brne	.-120    	; 0x1e6a <prvCopyDataToQueue+0x1e>
    1ee2:	11 23       	and	r17, r17
    1ee4:	11 f0       	breq	.+4      	; 0x1eea <prvCopyDataToQueue+0x9e>
    1ee6:	80 e0       	ldi	r24, 0x00	; 0
    1ee8:	c2 cf       	rjmp	.-124    	; 0x1e6e <prvCopyDataToQueue+0x22>
    1eea:	11 e0       	ldi	r17, 0x01	; 1
    1eec:	80 e0       	ldi	r24, 0x00	; 0
    1eee:	bf cf       	rjmp	.-130    	; 0x1e6e <prvCopyDataToQueue+0x22>
    1ef0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ef2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ef4:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <xTaskPriorityDisinherit>
    1ef8:	1c 82       	std	Y+4, r1	; 0x04
    1efa:	1d 82       	std	Y+5, r1	; 0x05
    1efc:	1f 5f       	subi	r17, 0xFF	; 255
    1efe:	b7 cf       	rjmp	.-146    	; 0x1e6e <prvCopyDataToQueue+0x22>

00001f00 <prvCopyDataFromQueue>:
    1f00:	fc 01       	movw	r30, r24
    1f02:	cb 01       	movw	r24, r22
    1f04:	44 8d       	ldd	r20, Z+28	; 0x1c
    1f06:	44 23       	and	r20, r20
    1f08:	91 f0       	breq	.+36     	; 0x1f2e <prvCopyDataFromQueue+0x2e>
    1f0a:	50 e0       	ldi	r21, 0x00	; 0
    1f0c:	66 81       	ldd	r22, Z+6	; 0x06
    1f0e:	77 81       	ldd	r23, Z+7	; 0x07
    1f10:	64 0f       	add	r22, r20
    1f12:	75 1f       	adc	r23, r21
    1f14:	66 83       	std	Z+6, r22	; 0x06
    1f16:	77 83       	std	Z+7, r23	; 0x07
    1f18:	24 81       	ldd	r18, Z+4	; 0x04
    1f1a:	35 81       	ldd	r19, Z+5	; 0x05
    1f1c:	62 17       	cp	r22, r18
    1f1e:	73 07       	cpc	r23, r19
    1f20:	20 f0       	brcs	.+8      	; 0x1f2a <prvCopyDataFromQueue+0x2a>
    1f22:	60 81       	ld	r22, Z
    1f24:	71 81       	ldd	r23, Z+1	; 0x01
    1f26:	66 83       	std	Z+6, r22	; 0x06
    1f28:	77 83       	std	Z+7, r23	; 0x07
    1f2a:	0c 94 3f 30 	jmp	0x607e	; 0x607e <memcpy>
    1f2e:	08 95       	ret

00001f30 <prvUnlockQueue>:
    1f30:	ef 92       	push	r14
    1f32:	ff 92       	push	r15
    1f34:	0f 93       	push	r16
    1f36:	1f 93       	push	r17
    1f38:	cf 93       	push	r28
    1f3a:	8c 01       	movw	r16, r24
    1f3c:	0f b6       	in	r0, 0x3f	; 63
    1f3e:	f8 94       	cli
    1f40:	0f 92       	push	r0
    1f42:	fc 01       	movw	r30, r24
    1f44:	c6 8d       	ldd	r28, Z+30	; 0x1e
    1f46:	1c 16       	cp	r1, r28
    1f48:	c4 f4       	brge	.+48     	; 0x1f7a <prvUnlockQueue+0x4a>
    1f4a:	fc 01       	movw	r30, r24
    1f4c:	81 89       	ldd	r24, Z+17	; 0x11
    1f4e:	88 23       	and	r24, r24
    1f50:	a1 f0       	breq	.+40     	; 0x1f7a <prvUnlockQueue+0x4a>
    1f52:	78 01       	movw	r14, r16
    1f54:	f1 e1       	ldi	r31, 0x11	; 17
    1f56:	ef 0e       	add	r14, r31
    1f58:	f1 1c       	adc	r15, r1
    1f5a:	06 c0       	rjmp	.+12     	; 0x1f68 <prvUnlockQueue+0x38>
    1f5c:	c1 50       	subi	r28, 0x01	; 1
    1f5e:	69 f0       	breq	.+26     	; 0x1f7a <prvUnlockQueue+0x4a>
    1f60:	f8 01       	movw	r30, r16
    1f62:	81 89       	ldd	r24, Z+17	; 0x11
    1f64:	88 23       	and	r24, r24
    1f66:	49 f0       	breq	.+18     	; 0x1f7a <prvUnlockQueue+0x4a>
    1f68:	c7 01       	movw	r24, r14
    1f6a:	0e 94 bb 1a 	call	0x3576	; 0x3576 <xTaskRemoveFromEventList>
    1f6e:	88 23       	and	r24, r24
    1f70:	a9 f3       	breq	.-22     	; 0x1f5c <prvUnlockQueue+0x2c>
    1f72:	0e 94 74 1b 	call	0x36e8	; 0x36e8 <vTaskMissedYield>
    1f76:	c1 50       	subi	r28, 0x01	; 1
    1f78:	99 f7       	brne	.-26     	; 0x1f60 <prvUnlockQueue+0x30>
    1f7a:	8f ef       	ldi	r24, 0xFF	; 255
    1f7c:	f8 01       	movw	r30, r16
    1f7e:	86 8f       	std	Z+30, r24	; 0x1e
    1f80:	0f 90       	pop	r0
    1f82:	0f be       	out	0x3f, r0	; 63
    1f84:	0f b6       	in	r0, 0x3f	; 63
    1f86:	f8 94       	cli
    1f88:	0f 92       	push	r0
    1f8a:	c5 8d       	ldd	r28, Z+29	; 0x1d
    1f8c:	1c 16       	cp	r1, r28
    1f8e:	c4 f4       	brge	.+48     	; 0x1fc0 <prvUnlockQueue+0x90>
    1f90:	f8 01       	movw	r30, r16
    1f92:	80 85       	ldd	r24, Z+8	; 0x08
    1f94:	88 23       	and	r24, r24
    1f96:	a1 f0       	breq	.+40     	; 0x1fc0 <prvUnlockQueue+0x90>
    1f98:	78 01       	movw	r14, r16
    1f9a:	f8 e0       	ldi	r31, 0x08	; 8
    1f9c:	ef 0e       	add	r14, r31
    1f9e:	f1 1c       	adc	r15, r1
    1fa0:	06 c0       	rjmp	.+12     	; 0x1fae <prvUnlockQueue+0x7e>
    1fa2:	c1 50       	subi	r28, 0x01	; 1
    1fa4:	69 f0       	breq	.+26     	; 0x1fc0 <prvUnlockQueue+0x90>
    1fa6:	f8 01       	movw	r30, r16
    1fa8:	80 85       	ldd	r24, Z+8	; 0x08
    1faa:	88 23       	and	r24, r24
    1fac:	49 f0       	breq	.+18     	; 0x1fc0 <prvUnlockQueue+0x90>
    1fae:	c7 01       	movw	r24, r14
    1fb0:	0e 94 bb 1a 	call	0x3576	; 0x3576 <xTaskRemoveFromEventList>
    1fb4:	88 23       	and	r24, r24
    1fb6:	a9 f3       	breq	.-22     	; 0x1fa2 <prvUnlockQueue+0x72>
    1fb8:	0e 94 74 1b 	call	0x36e8	; 0x36e8 <vTaskMissedYield>
    1fbc:	c1 50       	subi	r28, 0x01	; 1
    1fbe:	99 f7       	brne	.-26     	; 0x1fa6 <prvUnlockQueue+0x76>
    1fc0:	8f ef       	ldi	r24, 0xFF	; 255
    1fc2:	f8 01       	movw	r30, r16
    1fc4:	85 8f       	std	Z+29, r24	; 0x1d
    1fc6:	0f 90       	pop	r0
    1fc8:	0f be       	out	0x3f, r0	; 63
    1fca:	cf 91       	pop	r28
    1fcc:	1f 91       	pop	r17
    1fce:	0f 91       	pop	r16
    1fd0:	ff 90       	pop	r15
    1fd2:	ef 90       	pop	r14
    1fd4:	08 95       	ret

00001fd6 <xQueueGenericReset>:
    1fd6:	1f 93       	push	r17
    1fd8:	cf 93       	push	r28
    1fda:	df 93       	push	r29
    1fdc:	ec 01       	movw	r28, r24
    1fde:	16 2f       	mov	r17, r22
    1fe0:	89 2b       	or	r24, r25
    1fe2:	09 f4       	brne	.+2      	; 0x1fe6 <xQueueGenericReset+0x10>
    1fe4:	3e c0       	rjmp	.+124    	; 0x2062 <xQueueGenericReset+0x8c>
    1fe6:	0f b6       	in	r0, 0x3f	; 63
    1fe8:	f8 94       	cli
    1fea:	0f 92       	push	r0
    1fec:	48 81       	ld	r20, Y
    1fee:	59 81       	ldd	r21, Y+1	; 0x01
    1ff0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ff2:	6c 8d       	ldd	r22, Y+28	; 0x1c
    1ff4:	9a 01       	movw	r18, r20
    1ff6:	86 9f       	mul	r24, r22
    1ff8:	20 0d       	add	r18, r0
    1ffa:	31 1d       	adc	r19, r1
    1ffc:	11 24       	eor	r1, r1
    1ffe:	2c 83       	std	Y+4, r18	; 0x04
    2000:	3d 83       	std	Y+5, r19	; 0x05
    2002:	1a 8e       	std	Y+26, r1	; 0x1a
    2004:	4a 83       	std	Y+2, r20	; 0x02
    2006:	5b 83       	std	Y+3, r21	; 0x03
    2008:	90 e0       	ldi	r25, 0x00	; 0
    200a:	01 97       	sbiw	r24, 0x01	; 1
    200c:	68 9f       	mul	r22, r24
    200e:	90 01       	movw	r18, r0
    2010:	69 9f       	mul	r22, r25
    2012:	30 0d       	add	r19, r0
    2014:	11 24       	eor	r1, r1
    2016:	ca 01       	movw	r24, r20
    2018:	82 0f       	add	r24, r18
    201a:	93 1f       	adc	r25, r19
    201c:	8e 83       	std	Y+6, r24	; 0x06
    201e:	9f 83       	std	Y+7, r25	; 0x07
    2020:	8f ef       	ldi	r24, 0xFF	; 255
    2022:	8d 8f       	std	Y+29, r24	; 0x1d
    2024:	8e 8f       	std	Y+30, r24	; 0x1e
    2026:	11 11       	cpse	r17, r1
    2028:	13 c0       	rjmp	.+38     	; 0x2050 <xQueueGenericReset+0x7a>
    202a:	88 85       	ldd	r24, Y+8	; 0x08
    202c:	81 11       	cpse	r24, r1
    202e:	07 c0       	rjmp	.+14     	; 0x203e <xQueueGenericReset+0x68>
    2030:	0f 90       	pop	r0
    2032:	0f be       	out	0x3f, r0	; 63
    2034:	81 e0       	ldi	r24, 0x01	; 1
    2036:	df 91       	pop	r29
    2038:	cf 91       	pop	r28
    203a:	1f 91       	pop	r17
    203c:	08 95       	ret
    203e:	ce 01       	movw	r24, r28
    2040:	08 96       	adiw	r24, 0x08	; 8
    2042:	0e 94 bb 1a 	call	0x3576	; 0x3576 <xTaskRemoveFromEventList>
    2046:	88 23       	and	r24, r24
    2048:	99 f3       	breq	.-26     	; 0x2030 <xQueueGenericReset+0x5a>
    204a:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <vPortYield>
    204e:	f0 cf       	rjmp	.-32     	; 0x2030 <xQueueGenericReset+0x5a>
    2050:	ce 01       	movw	r24, r28
    2052:	08 96       	adiw	r24, 0x08	; 8
    2054:	0e 94 a1 0c 	call	0x1942	; 0x1942 <vListInitialise>
    2058:	ce 01       	movw	r24, r28
    205a:	41 96       	adiw	r24, 0x11	; 17
    205c:	0e 94 a1 0c 	call	0x1942	; 0x1942 <vListInitialise>
    2060:	e7 cf       	rjmp	.-50     	; 0x2030 <xQueueGenericReset+0x5a>
    2062:	63 e0       	ldi	r22, 0x03	; 3
    2064:	71 e0       	ldi	r23, 0x01	; 1
    2066:	81 ea       	ldi	r24, 0xA1	; 161
    2068:	90 e2       	ldi	r25, 0x20	; 32
    206a:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <vAssertCalled>
    206e:	bb cf       	rjmp	.-138    	; 0x1fe6 <xQueueGenericReset+0x10>

00002070 <xQueueGenericCreate>:
    2070:	ff 92       	push	r15
    2072:	0f 93       	push	r16
    2074:	1f 93       	push	r17
    2076:	cf 93       	push	r28
    2078:	df 93       	push	r29
    207a:	18 2f       	mov	r17, r24
    207c:	06 2f       	mov	r16, r22
    207e:	f4 2e       	mov	r15, r20
    2080:	88 23       	and	r24, r24
    2082:	99 f1       	breq	.+102    	; 0x20ea <xQueueGenericCreate+0x7a>
    2084:	00 23       	and	r16, r16
    2086:	d1 f0       	breq	.+52     	; 0x20bc <xQueueGenericCreate+0x4c>
    2088:	10 9f       	mul	r17, r16
    208a:	c0 01       	movw	r24, r0
    208c:	11 24       	eor	r1, r1
    208e:	81 96       	adiw	r24, 0x21	; 33
    2090:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <pvPortMalloc>
    2094:	ec 01       	movw	r28, r24
    2096:	00 97       	sbiw	r24, 0x00	; 0
    2098:	51 f0       	breq	.+20     	; 0x20ae <xQueueGenericCreate+0x3e>
    209a:	81 96       	adiw	r24, 0x21	; 33
    209c:	88 83       	st	Y, r24
    209e:	99 83       	std	Y+1, r25	; 0x01
    20a0:	1b 8f       	std	Y+27, r17	; 0x1b
    20a2:	0c 8f       	std	Y+28, r16	; 0x1c
    20a4:	61 e0       	ldi	r22, 0x01	; 1
    20a6:	ce 01       	movw	r24, r28
    20a8:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <xQueueGenericReset>
    20ac:	f8 a2       	std	Y+32, r15	; 0x20
    20ae:	ce 01       	movw	r24, r28
    20b0:	df 91       	pop	r29
    20b2:	cf 91       	pop	r28
    20b4:	1f 91       	pop	r17
    20b6:	0f 91       	pop	r16
    20b8:	ff 90       	pop	r15
    20ba:	08 95       	ret
    20bc:	81 e2       	ldi	r24, 0x21	; 33
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <pvPortMalloc>
    20c4:	ec 01       	movw	r28, r24
    20c6:	89 2b       	or	r24, r25
    20c8:	91 f3       	breq	.-28     	; 0x20ae <xQueueGenericCreate+0x3e>
    20ca:	c8 83       	st	Y, r28
    20cc:	d9 83       	std	Y+1, r29	; 0x01
    20ce:	1b 8f       	std	Y+27, r17	; 0x1b
    20d0:	0c 8f       	std	Y+28, r16	; 0x1c
    20d2:	61 e0       	ldi	r22, 0x01	; 1
    20d4:	ce 01       	movw	r24, r28
    20d6:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <xQueueGenericReset>
    20da:	f8 a2       	std	Y+32, r15	; 0x20
    20dc:	ce 01       	movw	r24, r28
    20de:	df 91       	pop	r29
    20e0:	cf 91       	pop	r28
    20e2:	1f 91       	pop	r17
    20e4:	0f 91       	pop	r16
    20e6:	ff 90       	pop	r15
    20e8:	08 95       	ret
    20ea:	66 e7       	ldi	r22, 0x76	; 118
    20ec:	71 e0       	ldi	r23, 0x01	; 1
    20ee:	81 ea       	ldi	r24, 0xA1	; 161
    20f0:	90 e2       	ldi	r25, 0x20	; 32
    20f2:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <vAssertCalled>
    20f6:	c6 cf       	rjmp	.-116    	; 0x2084 <xQueueGenericCreate+0x14>

000020f8 <xQueueGenericSend>:
    20f8:	bf 92       	push	r11
    20fa:	cf 92       	push	r12
    20fc:	df 92       	push	r13
    20fe:	ef 92       	push	r14
    2100:	ff 92       	push	r15
    2102:	0f 93       	push	r16
    2104:	1f 93       	push	r17
    2106:	cf 93       	push	r28
    2108:	df 93       	push	r29
    210a:	cd b7       	in	r28, 0x3d	; 61
    210c:	de b7       	in	r29, 0x3e	; 62
    210e:	25 97       	sbiw	r28, 0x05	; 5
    2110:	cd bf       	out	0x3d, r28	; 61
    2112:	de bf       	out	0x3e, r29	; 62
    2114:	8c 01       	movw	r16, r24
    2116:	6b 01       	movw	r12, r22
    2118:	4c 83       	std	Y+4, r20	; 0x04
    211a:	5d 83       	std	Y+5, r21	; 0x05
    211c:	b2 2e       	mov	r11, r18
    211e:	89 2b       	or	r24, r25
    2120:	09 f4       	brne	.+2      	; 0x2124 <xQueueGenericSend+0x2c>
    2122:	b2 c0       	rjmp	.+356    	; 0x2288 <xQueueGenericSend+0x190>
    2124:	c1 14       	cp	r12, r1
    2126:	d1 04       	cpc	r13, r1
    2128:	09 f4       	brne	.+2      	; 0x212c <xQueueGenericSend+0x34>
    212a:	a2 c0       	rjmp	.+324    	; 0x2270 <xQueueGenericSend+0x178>
    212c:	f2 e0       	ldi	r31, 0x02	; 2
    212e:	bf 16       	cp	r11, r31
    2130:	09 f4       	brne	.+2      	; 0x2134 <xQueueGenericSend+0x3c>
    2132:	7d c0       	rjmp	.+250    	; 0x222e <xQueueGenericSend+0x136>
    2134:	f8 01       	movw	r30, r16
    2136:	83 8d       	ldd	r24, Z+27	; 0x1b
    2138:	20 e0       	ldi	r18, 0x00	; 0
    213a:	78 01       	movw	r14, r16
    213c:	f8 e0       	ldi	r31, 0x08	; 8
    213e:	ef 0e       	add	r14, r31
    2140:	f1 1c       	adc	r15, r1
    2142:	10 c0       	rjmp	.+32     	; 0x2164 <xQueueGenericSend+0x6c>
    2144:	6c 81       	ldd	r22, Y+4	; 0x04
    2146:	7d 81       	ldd	r23, Y+5	; 0x05
    2148:	c7 01       	movw	r24, r14
    214a:	0e 94 9b 1a 	call	0x3536	; 0x3536 <vTaskPlaceOnEventList>
    214e:	c8 01       	movw	r24, r16
    2150:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <prvUnlockQueue>
    2154:	0e 94 87 19 	call	0x330e	; 0x330e <xTaskResumeAll>
    2158:	88 23       	and	r24, r24
    215a:	09 f4       	brne	.+2      	; 0x215e <xQueueGenericSend+0x66>
    215c:	4a c0       	rjmp	.+148    	; 0x21f2 <xQueueGenericSend+0xfa>
    215e:	f8 01       	movw	r30, r16
    2160:	83 8d       	ldd	r24, Z+27	; 0x1b
    2162:	21 e0       	ldi	r18, 0x01	; 1
    2164:	0f b6       	in	r0, 0x3f	; 63
    2166:	f8 94       	cli
    2168:	0f 92       	push	r0
    216a:	f8 01       	movw	r30, r16
    216c:	92 8d       	ldd	r25, Z+26	; 0x1a
    216e:	98 17       	cp	r25, r24
    2170:	08 f4       	brcc	.+2      	; 0x2174 <xQueueGenericSend+0x7c>
    2172:	42 c0       	rjmp	.+132    	; 0x21f8 <xQueueGenericSend+0x100>
    2174:	f2 e0       	ldi	r31, 0x02	; 2
    2176:	bf 16       	cp	r11, r31
    2178:	09 f4       	brne	.+2      	; 0x217c <xQueueGenericSend+0x84>
    217a:	3e c0       	rjmp	.+124    	; 0x21f8 <xQueueGenericSend+0x100>
    217c:	8c 81       	ldd	r24, Y+4	; 0x04
    217e:	9d 81       	ldd	r25, Y+5	; 0x05
    2180:	89 2b       	or	r24, r25
    2182:	09 f4       	brne	.+2      	; 0x2186 <xQueueGenericSend+0x8e>
    2184:	60 c0       	rjmp	.+192    	; 0x2246 <xQueueGenericSend+0x14e>
    2186:	22 23       	and	r18, r18
    2188:	59 f1       	breq	.+86     	; 0x21e0 <xQueueGenericSend+0xe8>
    218a:	0f 90       	pop	r0
    218c:	0f be       	out	0x3f, r0	; 63
    218e:	0e 94 9d 18 	call	0x313a	; 0x313a <vTaskSuspendAll>
    2192:	0f b6       	in	r0, 0x3f	; 63
    2194:	f8 94       	cli
    2196:	0f 92       	push	r0
    2198:	f8 01       	movw	r30, r16
    219a:	85 8d       	ldd	r24, Z+29	; 0x1d
    219c:	8f 3f       	cpi	r24, 0xFF	; 255
    219e:	39 f1       	breq	.+78     	; 0x21ee <xQueueGenericSend+0xf6>
    21a0:	f8 01       	movw	r30, r16
    21a2:	86 8d       	ldd	r24, Z+30	; 0x1e
    21a4:	8f 3f       	cpi	r24, 0xFF	; 255
    21a6:	09 f1       	breq	.+66     	; 0x21ea <xQueueGenericSend+0xf2>
    21a8:	0f 90       	pop	r0
    21aa:	0f be       	out	0x3f, r0	; 63
    21ac:	be 01       	movw	r22, r28
    21ae:	6c 5f       	subi	r22, 0xFC	; 252
    21b0:	7f 4f       	sbci	r23, 0xFF	; 255
    21b2:	ce 01       	movw	r24, r28
    21b4:	01 96       	adiw	r24, 0x01	; 1
    21b6:	0e 94 1d 1b 	call	0x363a	; 0x363a <xTaskCheckForTimeOut>
    21ba:	81 11       	cpse	r24, r1
    21bc:	48 c0       	rjmp	.+144    	; 0x224e <xQueueGenericSend+0x156>
    21be:	0f b6       	in	r0, 0x3f	; 63
    21c0:	f8 94       	cli
    21c2:	0f 92       	push	r0
    21c4:	f8 01       	movw	r30, r16
    21c6:	92 8d       	ldd	r25, Z+26	; 0x1a
    21c8:	0f 90       	pop	r0
    21ca:	0f be       	out	0x3f, r0	; 63
    21cc:	83 8d       	ldd	r24, Z+27	; 0x1b
    21ce:	98 17       	cp	r25, r24
    21d0:	09 f4       	brne	.+2      	; 0x21d4 <xQueueGenericSend+0xdc>
    21d2:	b8 cf       	rjmp	.-144    	; 0x2144 <xQueueGenericSend+0x4c>
    21d4:	c8 01       	movw	r24, r16
    21d6:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <prvUnlockQueue>
    21da:	0e 94 87 19 	call	0x330e	; 0x330e <xTaskResumeAll>
    21de:	bf cf       	rjmp	.-130    	; 0x215e <xQueueGenericSend+0x66>
    21e0:	ce 01       	movw	r24, r28
    21e2:	01 96       	adiw	r24, 0x01	; 1
    21e4:	0e 94 12 1b 	call	0x3624	; 0x3624 <vTaskInternalSetTimeOutState>
    21e8:	d0 cf       	rjmp	.-96     	; 0x218a <xQueueGenericSend+0x92>
    21ea:	16 8e       	std	Z+30, r1	; 0x1e
    21ec:	dd cf       	rjmp	.-70     	; 0x21a8 <xQueueGenericSend+0xb0>
    21ee:	15 8e       	std	Z+29, r1	; 0x1d
    21f0:	d7 cf       	rjmp	.-82     	; 0x21a0 <xQueueGenericSend+0xa8>
    21f2:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <vPortYield>
    21f6:	b3 cf       	rjmp	.-154    	; 0x215e <xQueueGenericSend+0x66>
    21f8:	4b 2d       	mov	r20, r11
    21fa:	b6 01       	movw	r22, r12
    21fc:	c8 01       	movw	r24, r16
    21fe:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <prvCopyDataToQueue>
    2202:	f8 01       	movw	r30, r16
    2204:	91 89       	ldd	r25, Z+17	; 0x11
    2206:	91 11       	cpse	r25, r1
    2208:	2c c0       	rjmp	.+88     	; 0x2262 <xQueueGenericSend+0x16a>
    220a:	81 11       	cpse	r24, r1
    220c:	27 c0       	rjmp	.+78     	; 0x225c <xQueueGenericSend+0x164>
    220e:	0f 90       	pop	r0
    2210:	0f be       	out	0x3f, r0	; 63
    2212:	81 e0       	ldi	r24, 0x01	; 1
    2214:	25 96       	adiw	r28, 0x05	; 5
    2216:	cd bf       	out	0x3d, r28	; 61
    2218:	de bf       	out	0x3e, r29	; 62
    221a:	df 91       	pop	r29
    221c:	cf 91       	pop	r28
    221e:	1f 91       	pop	r17
    2220:	0f 91       	pop	r16
    2222:	ff 90       	pop	r15
    2224:	ef 90       	pop	r14
    2226:	df 90       	pop	r13
    2228:	cf 90       	pop	r12
    222a:	bf 90       	pop	r11
    222c:	08 95       	ret
    222e:	f8 01       	movw	r30, r16
    2230:	83 8d       	ldd	r24, Z+27	; 0x1b
    2232:	81 30       	cpi	r24, 0x01	; 1
    2234:	09 f4       	brne	.+2      	; 0x2238 <xQueueGenericSend+0x140>
    2236:	80 cf       	rjmp	.-256    	; 0x2138 <xQueueGenericSend+0x40>
    2238:	63 ef       	ldi	r22, 0xF3	; 243
    223a:	72 e0       	ldi	r23, 0x02	; 2
    223c:	81 ea       	ldi	r24, 0xA1	; 161
    223e:	90 e2       	ldi	r25, 0x20	; 32
    2240:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <vAssertCalled>
    2244:	77 cf       	rjmp	.-274    	; 0x2134 <xQueueGenericSend+0x3c>
    2246:	0f 90       	pop	r0
    2248:	0f be       	out	0x3f, r0	; 63
    224a:	80 e0       	ldi	r24, 0x00	; 0
    224c:	e3 cf       	rjmp	.-58     	; 0x2214 <xQueueGenericSend+0x11c>
    224e:	c8 01       	movw	r24, r16
    2250:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <prvUnlockQueue>
    2254:	0e 94 87 19 	call	0x330e	; 0x330e <xTaskResumeAll>
    2258:	80 e0       	ldi	r24, 0x00	; 0
    225a:	dc cf       	rjmp	.-72     	; 0x2214 <xQueueGenericSend+0x11c>
    225c:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <vPortYield>
    2260:	d6 cf       	rjmp	.-84     	; 0x220e <xQueueGenericSend+0x116>
    2262:	c8 01       	movw	r24, r16
    2264:	41 96       	adiw	r24, 0x11	; 17
    2266:	0e 94 bb 1a 	call	0x3576	; 0x3576 <xTaskRemoveFromEventList>
    226a:	88 23       	and	r24, r24
    226c:	81 f2       	breq	.-96     	; 0x220e <xQueueGenericSend+0x116>
    226e:	f6 cf       	rjmp	.-20     	; 0x225c <xQueueGenericSend+0x164>
    2270:	f8 01       	movw	r30, r16
    2272:	84 8d       	ldd	r24, Z+28	; 0x1c
    2274:	88 23       	and	r24, r24
    2276:	09 f4       	brne	.+2      	; 0x227a <xQueueGenericSend+0x182>
    2278:	59 cf       	rjmp	.-334    	; 0x212c <xQueueGenericSend+0x34>
    227a:	62 ef       	ldi	r22, 0xF2	; 242
    227c:	72 e0       	ldi	r23, 0x02	; 2
    227e:	81 ea       	ldi	r24, 0xA1	; 161
    2280:	90 e2       	ldi	r25, 0x20	; 32
    2282:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <vAssertCalled>
    2286:	52 cf       	rjmp	.-348    	; 0x212c <xQueueGenericSend+0x34>
    2288:	61 ef       	ldi	r22, 0xF1	; 241
    228a:	72 e0       	ldi	r23, 0x02	; 2
    228c:	81 ea       	ldi	r24, 0xA1	; 161
    228e:	90 e2       	ldi	r25, 0x20	; 32
    2290:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <vAssertCalled>
    2294:	47 cf       	rjmp	.-370    	; 0x2124 <xQueueGenericSend+0x2c>

00002296 <xQueueCreateMutex>:
    2296:	cf 93       	push	r28
    2298:	df 93       	push	r29
    229a:	48 2f       	mov	r20, r24
    229c:	60 e0       	ldi	r22, 0x00	; 0
    229e:	81 e0       	ldi	r24, 0x01	; 1
    22a0:	0e 94 38 10 	call	0x2070	; 0x2070 <xQueueGenericCreate>
    22a4:	ec 01       	movw	r28, r24
    22a6:	00 97       	sbiw	r24, 0x00	; 0
    22a8:	61 f0       	breq	.+24     	; 0x22c2 <xQueueCreateMutex+0x2c>
    22aa:	1c 82       	std	Y+4, r1	; 0x04
    22ac:	1d 82       	std	Y+5, r1	; 0x05
    22ae:	18 82       	st	Y, r1
    22b0:	19 82       	std	Y+1, r1	; 0x01
    22b2:	1e 82       	std	Y+6, r1	; 0x06
    22b4:	20 e0       	ldi	r18, 0x00	; 0
    22b6:	40 e0       	ldi	r20, 0x00	; 0
    22b8:	50 e0       	ldi	r21, 0x00	; 0
    22ba:	60 e0       	ldi	r22, 0x00	; 0
    22bc:	70 e0       	ldi	r23, 0x00	; 0
    22be:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <xQueueGenericSend>
    22c2:	ce 01       	movw	r24, r28
    22c4:	df 91       	pop	r29
    22c6:	cf 91       	pop	r28
    22c8:	08 95       	ret

000022ca <xQueueGenericSendFromISR>:
    22ca:	cf 92       	push	r12
    22cc:	df 92       	push	r13
    22ce:	ef 92       	push	r14
    22d0:	ff 92       	push	r15
    22d2:	0f 93       	push	r16
    22d4:	1f 93       	push	r17
    22d6:	cf 93       	push	r28
    22d8:	df 93       	push	r29
    22da:	ec 01       	movw	r28, r24
    22dc:	8b 01       	movw	r16, r22
    22de:	6a 01       	movw	r12, r20
    22e0:	f2 2e       	mov	r15, r18
    22e2:	89 2b       	or	r24, r25
    22e4:	09 f4       	brne	.+2      	; 0x22e8 <xQueueGenericSendFromISR+0x1e>
    22e6:	45 c0       	rjmp	.+138    	; 0x2372 <xQueueGenericSendFromISR+0xa8>
    22e8:	01 15       	cp	r16, r1
    22ea:	11 05       	cpc	r17, r1
    22ec:	c1 f1       	breq	.+112    	; 0x235e <xQueueGenericSendFromISR+0x94>
    22ee:	82 e0       	ldi	r24, 0x02	; 2
    22f0:	f8 16       	cp	r15, r24
    22f2:	71 f0       	breq	.+28     	; 0x2310 <xQueueGenericSendFromISR+0x46>
    22f4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    22f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22f8:	98 17       	cp	r25, r24
    22fa:	a0 f0       	brcs	.+40     	; 0x2324 <xQueueGenericSendFromISR+0x5a>
    22fc:	80 e0       	ldi	r24, 0x00	; 0
    22fe:	df 91       	pop	r29
    2300:	cf 91       	pop	r28
    2302:	1f 91       	pop	r17
    2304:	0f 91       	pop	r16
    2306:	ff 90       	pop	r15
    2308:	ef 90       	pop	r14
    230a:	df 90       	pop	r13
    230c:	cf 90       	pop	r12
    230e:	08 95       	ret
    2310:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2312:	81 30       	cpi	r24, 0x01	; 1
    2314:	31 f0       	breq	.+12     	; 0x2322 <xQueueGenericSendFromISR+0x58>
    2316:	65 ec       	ldi	r22, 0xC5	; 197
    2318:	73 e0       	ldi	r23, 0x03	; 3
    231a:	81 ea       	ldi	r24, 0xA1	; 161
    231c:	90 e2       	ldi	r25, 0x20	; 32
    231e:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <vAssertCalled>
    2322:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2324:	ee 8c       	ldd	r14, Y+30	; 0x1e
    2326:	4f 2d       	mov	r20, r15
    2328:	b8 01       	movw	r22, r16
    232a:	ce 01       	movw	r24, r28
    232c:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <prvCopyDataToQueue>
    2330:	ef ef       	ldi	r30, 0xFF	; 255
    2332:	ee 16       	cp	r14, r30
    2334:	21 f0       	breq	.+8      	; 0x233e <xQueueGenericSendFromISR+0x74>
    2336:	e3 94       	inc	r14
    2338:	ee 8e       	std	Y+30, r14	; 0x1e
    233a:	81 e0       	ldi	r24, 0x01	; 1
    233c:	e0 cf       	rjmp	.-64     	; 0x22fe <xQueueGenericSendFromISR+0x34>
    233e:	89 89       	ldd	r24, Y+17	; 0x11
    2340:	88 23       	and	r24, r24
    2342:	d9 f3       	breq	.-10     	; 0x233a <xQueueGenericSendFromISR+0x70>
    2344:	ce 01       	movw	r24, r28
    2346:	41 96       	adiw	r24, 0x11	; 17
    2348:	0e 94 bb 1a 	call	0x3576	; 0x3576 <xTaskRemoveFromEventList>
    234c:	88 23       	and	r24, r24
    234e:	a9 f3       	breq	.-22     	; 0x233a <xQueueGenericSendFromISR+0x70>
    2350:	c1 14       	cp	r12, r1
    2352:	d1 04       	cpc	r13, r1
    2354:	91 f3       	breq	.-28     	; 0x233a <xQueueGenericSendFromISR+0x70>
    2356:	81 e0       	ldi	r24, 0x01	; 1
    2358:	f6 01       	movw	r30, r12
    235a:	80 83       	st	Z, r24
    235c:	d0 cf       	rjmp	.-96     	; 0x22fe <xQueueGenericSendFromISR+0x34>
    235e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2360:	88 23       	and	r24, r24
    2362:	29 f2       	breq	.-118    	; 0x22ee <xQueueGenericSendFromISR+0x24>
    2364:	64 ec       	ldi	r22, 0xC4	; 196
    2366:	73 e0       	ldi	r23, 0x03	; 3
    2368:	81 ea       	ldi	r24, 0xA1	; 161
    236a:	90 e2       	ldi	r25, 0x20	; 32
    236c:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <vAssertCalled>
    2370:	be cf       	rjmp	.-132    	; 0x22ee <xQueueGenericSendFromISR+0x24>
    2372:	63 ec       	ldi	r22, 0xC3	; 195
    2374:	73 e0       	ldi	r23, 0x03	; 3
    2376:	81 ea       	ldi	r24, 0xA1	; 161
    2378:	90 e2       	ldi	r25, 0x20	; 32
    237a:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <vAssertCalled>
    237e:	b4 cf       	rjmp	.-152    	; 0x22e8 <xQueueGenericSendFromISR+0x1e>

00002380 <xQueueGiveFromISR>:
    2380:	0f 93       	push	r16
    2382:	1f 93       	push	r17
    2384:	cf 93       	push	r28
    2386:	df 93       	push	r29
    2388:	ec 01       	movw	r28, r24
    238a:	8b 01       	movw	r16, r22
    238c:	89 2b       	or	r24, r25
    238e:	09 f4       	brne	.+2      	; 0x2392 <xQueueGiveFromISR+0x12>
    2390:	43 c0       	rjmp	.+134    	; 0x2418 <xQueueGiveFromISR+0x98>
    2392:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2394:	81 11       	cpse	r24, r1
    2396:	1b c0       	rjmp	.+54     	; 0x23ce <xQueueGiveFromISR+0x4e>
    2398:	88 81       	ld	r24, Y
    239a:	99 81       	ldd	r25, Y+1	; 0x01
    239c:	89 2b       	or	r24, r25
    239e:	09 f1       	breq	.+66     	; 0x23e2 <xQueueGiveFromISR+0x62>
    23a0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    23a2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    23a4:	89 17       	cp	r24, r25
    23a6:	68 f4       	brcc	.+26     	; 0x23c2 <xQueueGiveFromISR+0x42>
    23a8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    23aa:	8f 5f       	subi	r24, 0xFF	; 255
    23ac:	8a 8f       	std	Y+26, r24	; 0x1a
    23ae:	9f 3f       	cpi	r25, 0xFF	; 255
    23b0:	19 f1       	breq	.+70     	; 0x23f8 <xQueueGiveFromISR+0x78>
    23b2:	9f 5f       	subi	r25, 0xFF	; 255
    23b4:	9e 8f       	std	Y+30, r25	; 0x1e
    23b6:	81 e0       	ldi	r24, 0x01	; 1
    23b8:	df 91       	pop	r29
    23ba:	cf 91       	pop	r28
    23bc:	1f 91       	pop	r17
    23be:	0f 91       	pop	r16
    23c0:	08 95       	ret
    23c2:	80 e0       	ldi	r24, 0x00	; 0
    23c4:	df 91       	pop	r29
    23c6:	cf 91       	pop	r28
    23c8:	1f 91       	pop	r17
    23ca:	0f 91       	pop	r16
    23cc:	08 95       	ret
    23ce:	64 e6       	ldi	r22, 0x64	; 100
    23d0:	74 e0       	ldi	r23, 0x04	; 4
    23d2:	81 ea       	ldi	r24, 0xA1	; 161
    23d4:	90 e2       	ldi	r25, 0x20	; 32
    23d6:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <vAssertCalled>
    23da:	88 81       	ld	r24, Y
    23dc:	99 81       	ldd	r25, Y+1	; 0x01
    23de:	89 2b       	or	r24, r25
    23e0:	f9 f6       	brne	.-66     	; 0x23a0 <xQueueGiveFromISR+0x20>
    23e2:	8c 81       	ldd	r24, Y+4	; 0x04
    23e4:	9d 81       	ldd	r25, Y+5	; 0x05
    23e6:	89 2b       	or	r24, r25
    23e8:	d9 f2       	breq	.-74     	; 0x23a0 <xQueueGiveFromISR+0x20>
    23ea:	69 e6       	ldi	r22, 0x69	; 105
    23ec:	74 e0       	ldi	r23, 0x04	; 4
    23ee:	81 ea       	ldi	r24, 0xA1	; 161
    23f0:	90 e2       	ldi	r25, 0x20	; 32
    23f2:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <vAssertCalled>
    23f6:	d4 cf       	rjmp	.-88     	; 0x23a0 <xQueueGiveFromISR+0x20>
    23f8:	89 89       	ldd	r24, Y+17	; 0x11
    23fa:	88 23       	and	r24, r24
    23fc:	e1 f2       	breq	.-72     	; 0x23b6 <xQueueGiveFromISR+0x36>
    23fe:	ce 01       	movw	r24, r28
    2400:	41 96       	adiw	r24, 0x11	; 17
    2402:	0e 94 bb 1a 	call	0x3576	; 0x3576 <xTaskRemoveFromEventList>
    2406:	88 23       	and	r24, r24
    2408:	b1 f2       	breq	.-84     	; 0x23b6 <xQueueGiveFromISR+0x36>
    240a:	01 15       	cp	r16, r1
    240c:	11 05       	cpc	r17, r1
    240e:	99 f2       	breq	.-90     	; 0x23b6 <xQueueGiveFromISR+0x36>
    2410:	81 e0       	ldi	r24, 0x01	; 1
    2412:	f8 01       	movw	r30, r16
    2414:	80 83       	st	Z, r24
    2416:	d0 cf       	rjmp	.-96     	; 0x23b8 <xQueueGiveFromISR+0x38>
    2418:	60 e6       	ldi	r22, 0x60	; 96
    241a:	74 e0       	ldi	r23, 0x04	; 4
    241c:	81 ea       	ldi	r24, 0xA1	; 161
    241e:	90 e2       	ldi	r25, 0x20	; 32
    2420:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <vAssertCalled>
    2424:	b6 cf       	rjmp	.-148    	; 0x2392 <xQueueGiveFromISR+0x12>

00002426 <xQueueReceive>:
    2426:	af 92       	push	r10
    2428:	bf 92       	push	r11
    242a:	cf 92       	push	r12
    242c:	df 92       	push	r13
    242e:	ff 92       	push	r15
    2430:	0f 93       	push	r16
    2432:	1f 93       	push	r17
    2434:	cf 93       	push	r28
    2436:	df 93       	push	r29
    2438:	cd b7       	in	r28, 0x3d	; 61
    243a:	de b7       	in	r29, 0x3e	; 62
    243c:	25 97       	sbiw	r28, 0x05	; 5
    243e:	cd bf       	out	0x3d, r28	; 61
    2440:	de bf       	out	0x3e, r29	; 62
    2442:	8c 01       	movw	r16, r24
    2444:	5b 01       	movw	r10, r22
    2446:	4c 83       	std	Y+4, r20	; 0x04
    2448:	5d 83       	std	Y+5, r21	; 0x05
    244a:	89 2b       	or	r24, r25
    244c:	09 f4       	brne	.+2      	; 0x2450 <xQueueReceive+0x2a>
    244e:	a1 c0       	rjmp	.+322    	; 0x2592 <xQueueReceive+0x16c>
    2450:	a1 14       	cp	r10, r1
    2452:	b1 04       	cpc	r11, r1
    2454:	09 f4       	brne	.+2      	; 0x2458 <xQueueReceive+0x32>
    2456:	91 c0       	rjmp	.+290    	; 0x257a <xQueueReceive+0x154>
    2458:	20 e0       	ldi	r18, 0x00	; 0
    245a:	68 01       	movw	r12, r16
    245c:	f1 e1       	ldi	r31, 0x11	; 17
    245e:	cf 0e       	add	r12, r31
    2460:	d1 1c       	adc	r13, r1
    2462:	0f b6       	in	r0, 0x3f	; 63
    2464:	f8 94       	cli
    2466:	0f 92       	push	r0
    2468:	f8 01       	movw	r30, r16
    246a:	f2 8c       	ldd	r15, Z+26	; 0x1a
    246c:	f1 10       	cpse	r15, r1
    246e:	6a c0       	rjmp	.+212    	; 0x2544 <xQueueReceive+0x11e>
    2470:	8c 81       	ldd	r24, Y+4	; 0x04
    2472:	9d 81       	ldd	r25, Y+5	; 0x05
    2474:	89 2b       	or	r24, r25
    2476:	09 f4       	brne	.+2      	; 0x247a <xQueueReceive+0x54>
    2478:	73 c0       	rjmp	.+230    	; 0x2560 <xQueueReceive+0x13a>
    247a:	22 23       	and	r18, r18
    247c:	09 f4       	brne	.+2      	; 0x2480 <xQueueReceive+0x5a>
    247e:	59 c0       	rjmp	.+178    	; 0x2532 <xQueueReceive+0x10c>
    2480:	0f 90       	pop	r0
    2482:	0f be       	out	0x3f, r0	; 63
    2484:	0e 94 9d 18 	call	0x313a	; 0x313a <vTaskSuspendAll>
    2488:	0f b6       	in	r0, 0x3f	; 63
    248a:	f8 94       	cli
    248c:	0f 92       	push	r0
    248e:	f8 01       	movw	r30, r16
    2490:	85 8d       	ldd	r24, Z+29	; 0x1d
    2492:	8f 3f       	cpi	r24, 0xFF	; 255
    2494:	09 f4       	brne	.+2      	; 0x2498 <xQueueReceive+0x72>
    2496:	54 c0       	rjmp	.+168    	; 0x2540 <xQueueReceive+0x11a>
    2498:	f8 01       	movw	r30, r16
    249a:	86 8d       	ldd	r24, Z+30	; 0x1e
    249c:	8f 3f       	cpi	r24, 0xFF	; 255
    249e:	09 f4       	brne	.+2      	; 0x24a2 <xQueueReceive+0x7c>
    24a0:	4d c0       	rjmp	.+154    	; 0x253c <xQueueReceive+0x116>
    24a2:	0f 90       	pop	r0
    24a4:	0f be       	out	0x3f, r0	; 63
    24a6:	be 01       	movw	r22, r28
    24a8:	6c 5f       	subi	r22, 0xFC	; 252
    24aa:	7f 4f       	sbci	r23, 0xFF	; 255
    24ac:	ce 01       	movw	r24, r28
    24ae:	01 96       	adiw	r24, 0x01	; 1
    24b0:	0e 94 1d 1b 	call	0x363a	; 0x363a <xTaskCheckForTimeOut>
    24b4:	81 11       	cpse	r24, r1
    24b6:	22 c0       	rjmp	.+68     	; 0x24fc <xQueueReceive+0xd6>
    24b8:	0f b6       	in	r0, 0x3f	; 63
    24ba:	f8 94       	cli
    24bc:	0f 92       	push	r0
    24be:	f8 01       	movw	r30, r16
    24c0:	82 8d       	ldd	r24, Z+26	; 0x1a
    24c2:	0f 90       	pop	r0
    24c4:	0f be       	out	0x3f, r0	; 63
    24c6:	81 11       	cpse	r24, r1
    24c8:	12 c0       	rjmp	.+36     	; 0x24ee <xQueueReceive+0xc8>
    24ca:	6c 81       	ldd	r22, Y+4	; 0x04
    24cc:	7d 81       	ldd	r23, Y+5	; 0x05
    24ce:	c6 01       	movw	r24, r12
    24d0:	0e 94 9b 1a 	call	0x3536	; 0x3536 <vTaskPlaceOnEventList>
    24d4:	c8 01       	movw	r24, r16
    24d6:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <prvUnlockQueue>
    24da:	0e 94 87 19 	call	0x330e	; 0x330e <xTaskResumeAll>
    24de:	88 23       	and	r24, r24
    24e0:	11 f0       	breq	.+4      	; 0x24e6 <xQueueReceive+0xc0>
    24e2:	21 e0       	ldi	r18, 0x01	; 1
    24e4:	be cf       	rjmp	.-132    	; 0x2462 <xQueueReceive+0x3c>
    24e6:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <vPortYield>
    24ea:	21 e0       	ldi	r18, 0x01	; 1
    24ec:	ba cf       	rjmp	.-140    	; 0x2462 <xQueueReceive+0x3c>
    24ee:	c8 01       	movw	r24, r16
    24f0:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <prvUnlockQueue>
    24f4:	0e 94 87 19 	call	0x330e	; 0x330e <xTaskResumeAll>
    24f8:	21 e0       	ldi	r18, 0x01	; 1
    24fa:	b3 cf       	rjmp	.-154    	; 0x2462 <xQueueReceive+0x3c>
    24fc:	c8 01       	movw	r24, r16
    24fe:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <prvUnlockQueue>
    2502:	0e 94 87 19 	call	0x330e	; 0x330e <xTaskResumeAll>
    2506:	0f b6       	in	r0, 0x3f	; 63
    2508:	f8 94       	cli
    250a:	0f 92       	push	r0
    250c:	f8 01       	movw	r30, r16
    250e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2510:	0f 90       	pop	r0
    2512:	0f be       	out	0x3f, r0	; 63
    2514:	81 11       	cpse	r24, r1
    2516:	e5 cf       	rjmp	.-54     	; 0x24e2 <xQueueReceive+0xbc>
    2518:	25 96       	adiw	r28, 0x05	; 5
    251a:	cd bf       	out	0x3d, r28	; 61
    251c:	de bf       	out	0x3e, r29	; 62
    251e:	df 91       	pop	r29
    2520:	cf 91       	pop	r28
    2522:	1f 91       	pop	r17
    2524:	0f 91       	pop	r16
    2526:	ff 90       	pop	r15
    2528:	df 90       	pop	r13
    252a:	cf 90       	pop	r12
    252c:	bf 90       	pop	r11
    252e:	af 90       	pop	r10
    2530:	08 95       	ret
    2532:	ce 01       	movw	r24, r28
    2534:	01 96       	adiw	r24, 0x01	; 1
    2536:	0e 94 12 1b 	call	0x3624	; 0x3624 <vTaskInternalSetTimeOutState>
    253a:	a2 cf       	rjmp	.-188    	; 0x2480 <xQueueReceive+0x5a>
    253c:	16 8e       	std	Z+30, r1	; 0x1e
    253e:	b1 cf       	rjmp	.-158    	; 0x24a2 <xQueueReceive+0x7c>
    2540:	15 8e       	std	Z+29, r1	; 0x1d
    2542:	aa cf       	rjmp	.-172    	; 0x2498 <xQueueReceive+0x72>
    2544:	b5 01       	movw	r22, r10
    2546:	c8 01       	movw	r24, r16
    2548:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <prvCopyDataFromQueue>
    254c:	fa 94       	dec	r15
    254e:	f8 01       	movw	r30, r16
    2550:	f2 8e       	std	Z+26, r15	; 0x1a
    2552:	80 85       	ldd	r24, Z+8	; 0x08
    2554:	81 11       	cpse	r24, r1
    2556:	08 c0       	rjmp	.+16     	; 0x2568 <xQueueReceive+0x142>
    2558:	0f 90       	pop	r0
    255a:	0f be       	out	0x3f, r0	; 63
    255c:	81 e0       	ldi	r24, 0x01	; 1
    255e:	dc cf       	rjmp	.-72     	; 0x2518 <xQueueReceive+0xf2>
    2560:	0f 90       	pop	r0
    2562:	0f be       	out	0x3f, r0	; 63
    2564:	80 e0       	ldi	r24, 0x00	; 0
    2566:	d8 cf       	rjmp	.-80     	; 0x2518 <xQueueReceive+0xf2>
    2568:	c8 01       	movw	r24, r16
    256a:	08 96       	adiw	r24, 0x08	; 8
    256c:	0e 94 bb 1a 	call	0x3576	; 0x3576 <xTaskRemoveFromEventList>
    2570:	88 23       	and	r24, r24
    2572:	91 f3       	breq	.-28     	; 0x2558 <xQueueReceive+0x132>
    2574:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <vPortYield>
    2578:	ef cf       	rjmp	.-34     	; 0x2558 <xQueueReceive+0x132>
    257a:	f8 01       	movw	r30, r16
    257c:	84 8d       	ldd	r24, Z+28	; 0x1c
    257e:	88 23       	and	r24, r24
    2580:	09 f4       	brne	.+2      	; 0x2584 <xQueueReceive+0x15e>
    2582:	6a cf       	rjmp	.-300    	; 0x2458 <xQueueReceive+0x32>
    2584:	64 e0       	ldi	r22, 0x04	; 4
    2586:	75 e0       	ldi	r23, 0x05	; 5
    2588:	81 ea       	ldi	r24, 0xA1	; 161
    258a:	90 e2       	ldi	r25, 0x20	; 32
    258c:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <vAssertCalled>
    2590:	63 cf       	rjmp	.-314    	; 0x2458 <xQueueReceive+0x32>
    2592:	60 e0       	ldi	r22, 0x00	; 0
    2594:	75 e0       	ldi	r23, 0x05	; 5
    2596:	81 ea       	ldi	r24, 0xA1	; 161
    2598:	90 e2       	ldi	r25, 0x20	; 32
    259a:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <vAssertCalled>
    259e:	58 cf       	rjmp	.-336    	; 0x2450 <xQueueReceive+0x2a>

000025a0 <xQueueSemaphoreTake>:
    25a0:	df 92       	push	r13
    25a2:	ef 92       	push	r14
    25a4:	ff 92       	push	r15
    25a6:	0f 93       	push	r16
    25a8:	1f 93       	push	r17
    25aa:	cf 93       	push	r28
    25ac:	df 93       	push	r29
    25ae:	cd b7       	in	r28, 0x3d	; 61
    25b0:	de b7       	in	r29, 0x3e	; 62
    25b2:	25 97       	sbiw	r28, 0x05	; 5
    25b4:	cd bf       	out	0x3d, r28	; 61
    25b6:	de bf       	out	0x3e, r29	; 62
    25b8:	8c 01       	movw	r16, r24
    25ba:	6c 83       	std	Y+4, r22	; 0x04
    25bc:	7d 83       	std	Y+5, r23	; 0x05
    25be:	89 2b       	or	r24, r25
    25c0:	09 f4       	brne	.+2      	; 0x25c4 <xQueueSemaphoreTake+0x24>
    25c2:	d0 c0       	rjmp	.+416    	; 0x2764 <xQueueSemaphoreTake+0x1c4>
    25c4:	d8 01       	movw	r26, r16
    25c6:	5c 96       	adiw	r26, 0x1c	; 28
    25c8:	8c 91       	ld	r24, X
    25ca:	81 11       	cpse	r24, r1
    25cc:	bb c0       	rjmp	.+374    	; 0x2744 <xQueueSemaphoreTake+0x1a4>
    25ce:	d1 2c       	mov	r13, r1
    25d0:	20 e0       	ldi	r18, 0x00	; 0
    25d2:	78 01       	movw	r14, r16
    25d4:	b1 e1       	ldi	r27, 0x11	; 17
    25d6:	eb 0e       	add	r14, r27
    25d8:	f1 1c       	adc	r15, r1
    25da:	0f b6       	in	r0, 0x3f	; 63
    25dc:	f8 94       	cli
    25de:	0f 92       	push	r0
    25e0:	f8 01       	movw	r30, r16
    25e2:	82 8d       	ldd	r24, Z+26	; 0x1a
    25e4:	81 11       	cpse	r24, r1
    25e6:	89 c0       	rjmp	.+274    	; 0x26fa <xQueueSemaphoreTake+0x15a>
    25e8:	8c 81       	ldd	r24, Y+4	; 0x04
    25ea:	9d 81       	ldd	r25, Y+5	; 0x05
    25ec:	89 2b       	or	r24, r25
    25ee:	09 f4       	brne	.+2      	; 0x25f2 <xQueueSemaphoreTake+0x52>
    25f0:	9d c0       	rjmp	.+314    	; 0x272c <xQueueSemaphoreTake+0x18c>
    25f2:	22 23       	and	r18, r18
    25f4:	09 f4       	brne	.+2      	; 0x25f8 <xQueueSemaphoreTake+0x58>
    25f6:	5f c0       	rjmp	.+190    	; 0x26b6 <xQueueSemaphoreTake+0x116>
    25f8:	0f 90       	pop	r0
    25fa:	0f be       	out	0x3f, r0	; 63
    25fc:	0e 94 9d 18 	call	0x313a	; 0x313a <vTaskSuspendAll>
    2600:	0f b6       	in	r0, 0x3f	; 63
    2602:	f8 94       	cli
    2604:	0f 92       	push	r0
    2606:	d8 01       	movw	r26, r16
    2608:	5d 96       	adiw	r26, 0x1d	; 29
    260a:	8c 91       	ld	r24, X
    260c:	5d 97       	sbiw	r26, 0x1d	; 29
    260e:	8f 3f       	cpi	r24, 0xFF	; 255
    2610:	09 f4       	brne	.+2      	; 0x2614 <xQueueSemaphoreTake+0x74>
    2612:	56 c0       	rjmp	.+172    	; 0x26c0 <xQueueSemaphoreTake+0x120>
    2614:	f8 01       	movw	r30, r16
    2616:	86 8d       	ldd	r24, Z+30	; 0x1e
    2618:	8f 3f       	cpi	r24, 0xFF	; 255
    261a:	09 f4       	brne	.+2      	; 0x261e <xQueueSemaphoreTake+0x7e>
    261c:	58 c0       	rjmp	.+176    	; 0x26ce <xQueueSemaphoreTake+0x12e>
    261e:	0f 90       	pop	r0
    2620:	0f be       	out	0x3f, r0	; 63
    2622:	be 01       	movw	r22, r28
    2624:	6c 5f       	subi	r22, 0xFC	; 252
    2626:	7f 4f       	sbci	r23, 0xFF	; 255
    2628:	ce 01       	movw	r24, r28
    262a:	01 96       	adiw	r24, 0x01	; 1
    262c:	0e 94 1d 1b 	call	0x363a	; 0x363a <xTaskCheckForTimeOut>
    2630:	81 11       	cpse	r24, r1
    2632:	23 c0       	rjmp	.+70     	; 0x267a <xQueueSemaphoreTake+0xda>
    2634:	0f b6       	in	r0, 0x3f	; 63
    2636:	f8 94       	cli
    2638:	0f 92       	push	r0
    263a:	d8 01       	movw	r26, r16
    263c:	5a 96       	adiw	r26, 0x1a	; 26
    263e:	8c 91       	ld	r24, X
    2640:	5a 97       	sbiw	r26, 0x1a	; 26
    2642:	0f 90       	pop	r0
    2644:	0f be       	out	0x3f, r0	; 63
    2646:	81 11       	cpse	r24, r1
    2648:	44 c0       	rjmp	.+136    	; 0x26d2 <xQueueSemaphoreTake+0x132>
    264a:	f8 01       	movw	r30, r16
    264c:	80 81       	ld	r24, Z
    264e:	91 81       	ldd	r25, Z+1	; 0x01
    2650:	89 2b       	or	r24, r25
    2652:	09 f4       	brne	.+2      	; 0x2656 <xQueueSemaphoreTake+0xb6>
    2654:	45 c0       	rjmp	.+138    	; 0x26e0 <xQueueSemaphoreTake+0x140>
    2656:	6c 81       	ldd	r22, Y+4	; 0x04
    2658:	7d 81       	ldd	r23, Y+5	; 0x05
    265a:	c7 01       	movw	r24, r14
    265c:	0e 94 9b 1a 	call	0x3536	; 0x3536 <vTaskPlaceOnEventList>
    2660:	c8 01       	movw	r24, r16
    2662:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <prvUnlockQueue>
    2666:	0e 94 87 19 	call	0x330e	; 0x330e <xTaskResumeAll>
    266a:	88 23       	and	r24, r24
    266c:	11 f0       	breq	.+4      	; 0x2672 <xQueueSemaphoreTake+0xd2>
    266e:	21 e0       	ldi	r18, 0x01	; 1
    2670:	b4 cf       	rjmp	.-152    	; 0x25da <xQueueSemaphoreTake+0x3a>
    2672:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <vPortYield>
    2676:	21 e0       	ldi	r18, 0x01	; 1
    2678:	b0 cf       	rjmp	.-160    	; 0x25da <xQueueSemaphoreTake+0x3a>
    267a:	c8 01       	movw	r24, r16
    267c:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <prvUnlockQueue>
    2680:	0e 94 87 19 	call	0x330e	; 0x330e <xTaskResumeAll>
    2684:	0f b6       	in	r0, 0x3f	; 63
    2686:	f8 94       	cli
    2688:	0f 92       	push	r0
    268a:	f8 01       	movw	r30, r16
    268c:	82 8d       	ldd	r24, Z+26	; 0x1a
    268e:	0f 90       	pop	r0
    2690:	0f be       	out	0x3f, r0	; 63
    2692:	81 11       	cpse	r24, r1
    2694:	ec cf       	rjmp	.-40     	; 0x266e <xQueueSemaphoreTake+0xce>
    2696:	dd 20       	and	r13, r13
    2698:	09 f4       	brne	.+2      	; 0x269c <xQueueSemaphoreTake+0xfc>
    269a:	72 c0       	rjmp	.+228    	; 0x2780 <xQueueSemaphoreTake+0x1e0>
    269c:	0f b6       	in	r0, 0x3f	; 63
    269e:	f8 94       	cli
    26a0:	0f 92       	push	r0
    26a2:	81 89       	ldd	r24, Z+17	; 0x11
    26a4:	81 11       	cpse	r24, r1
    26a6:	65 c0       	rjmp	.+202    	; 0x2772 <xQueueSemaphoreTake+0x1d2>
    26a8:	60 e0       	ldi	r22, 0x00	; 0
    26aa:	f8 01       	movw	r30, r16
    26ac:	84 81       	ldd	r24, Z+4	; 0x04
    26ae:	95 81       	ldd	r25, Z+5	; 0x05
    26b0:	0e 94 42 1c 	call	0x3884	; 0x3884 <vTaskPriorityDisinheritAfterTimeout>
    26b4:	43 c0       	rjmp	.+134    	; 0x273c <xQueueSemaphoreTake+0x19c>
    26b6:	ce 01       	movw	r24, r28
    26b8:	01 96       	adiw	r24, 0x01	; 1
    26ba:	0e 94 12 1b 	call	0x3624	; 0x3624 <vTaskInternalSetTimeOutState>
    26be:	9c cf       	rjmp	.-200    	; 0x25f8 <xQueueSemaphoreTake+0x58>
    26c0:	5d 96       	adiw	r26, 0x1d	; 29
    26c2:	1c 92       	st	X, r1
    26c4:	f8 01       	movw	r30, r16
    26c6:	86 8d       	ldd	r24, Z+30	; 0x1e
    26c8:	8f 3f       	cpi	r24, 0xFF	; 255
    26ca:	09 f0       	breq	.+2      	; 0x26ce <xQueueSemaphoreTake+0x12e>
    26cc:	a8 cf       	rjmp	.-176    	; 0x261e <xQueueSemaphoreTake+0x7e>
    26ce:	16 8e       	std	Z+30, r1	; 0x1e
    26d0:	a6 cf       	rjmp	.-180    	; 0x261e <xQueueSemaphoreTake+0x7e>
    26d2:	c8 01       	movw	r24, r16
    26d4:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <prvUnlockQueue>
    26d8:	0e 94 87 19 	call	0x330e	; 0x330e <xTaskResumeAll>
    26dc:	21 e0       	ldi	r18, 0x01	; 1
    26de:	7d cf       	rjmp	.-262    	; 0x25da <xQueueSemaphoreTake+0x3a>
    26e0:	0f b6       	in	r0, 0x3f	; 63
    26e2:	f8 94       	cli
    26e4:	0f 92       	push	r0
    26e6:	14 96       	adiw	r26, 0x04	; 4
    26e8:	8d 91       	ld	r24, X+
    26ea:	9c 91       	ld	r25, X
    26ec:	15 97       	sbiw	r26, 0x05	; 5
    26ee:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <xTaskPriorityInherit>
    26f2:	d8 2e       	mov	r13, r24
    26f4:	0f 90       	pop	r0
    26f6:	0f be       	out	0x3f, r0	; 63
    26f8:	ae cf       	rjmp	.-164    	; 0x2656 <xQueueSemaphoreTake+0xb6>
    26fa:	81 50       	subi	r24, 0x01	; 1
    26fc:	82 8f       	std	Z+26, r24	; 0x1a
    26fe:	80 81       	ld	r24, Z
    2700:	91 81       	ldd	r25, Z+1	; 0x01
    2702:	89 2b       	or	r24, r25
    2704:	09 f4       	brne	.+2      	; 0x2708 <xQueueSemaphoreTake+0x168>
    2706:	3e c0       	rjmp	.+124    	; 0x2784 <xQueueSemaphoreTake+0x1e4>
    2708:	f8 01       	movw	r30, r16
    270a:	80 85       	ldd	r24, Z+8	; 0x08
    270c:	81 11       	cpse	r24, r1
    270e:	21 c0       	rjmp	.+66     	; 0x2752 <xQueueSemaphoreTake+0x1b2>
    2710:	0f 90       	pop	r0
    2712:	0f be       	out	0x3f, r0	; 63
    2714:	81 e0       	ldi	r24, 0x01	; 1
    2716:	25 96       	adiw	r28, 0x05	; 5
    2718:	cd bf       	out	0x3d, r28	; 61
    271a:	de bf       	out	0x3e, r29	; 62
    271c:	df 91       	pop	r29
    271e:	cf 91       	pop	r28
    2720:	1f 91       	pop	r17
    2722:	0f 91       	pop	r16
    2724:	ff 90       	pop	r15
    2726:	ef 90       	pop	r14
    2728:	df 90       	pop	r13
    272a:	08 95       	ret
    272c:	dd 20       	and	r13, r13
    272e:	31 f0       	breq	.+12     	; 0x273c <xQueueSemaphoreTake+0x19c>
    2730:	61 ee       	ldi	r22, 0xE1	; 225
    2732:	75 e0       	ldi	r23, 0x05	; 5
    2734:	81 ea       	ldi	r24, 0xA1	; 161
    2736:	90 e2       	ldi	r25, 0x20	; 32
    2738:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <vAssertCalled>
    273c:	0f 90       	pop	r0
    273e:	0f be       	out	0x3f, r0	; 63
    2740:	80 e0       	ldi	r24, 0x00	; 0
    2742:	e9 cf       	rjmp	.-46     	; 0x2716 <xQueueSemaphoreTake+0x176>
    2744:	65 e9       	ldi	r22, 0x95	; 149
    2746:	75 e0       	ldi	r23, 0x05	; 5
    2748:	81 ea       	ldi	r24, 0xA1	; 161
    274a:	90 e2       	ldi	r25, 0x20	; 32
    274c:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <vAssertCalled>
    2750:	3e cf       	rjmp	.-388    	; 0x25ce <xQueueSemaphoreTake+0x2e>
    2752:	c8 01       	movw	r24, r16
    2754:	08 96       	adiw	r24, 0x08	; 8
    2756:	0e 94 bb 1a 	call	0x3576	; 0x3576 <xTaskRemoveFromEventList>
    275a:	88 23       	and	r24, r24
    275c:	c9 f2       	breq	.-78     	; 0x2710 <xQueueSemaphoreTake+0x170>
    275e:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <vPortYield>
    2762:	d6 cf       	rjmp	.-84     	; 0x2710 <xQueueSemaphoreTake+0x170>
    2764:	61 e9       	ldi	r22, 0x91	; 145
    2766:	75 e0       	ldi	r23, 0x05	; 5
    2768:	81 ea       	ldi	r24, 0xA1	; 161
    276a:	90 e2       	ldi	r25, 0x20	; 32
    276c:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <vAssertCalled>
    2770:	29 cf       	rjmp	.-430    	; 0x25c4 <xQueueSemaphoreTake+0x24>
    2772:	06 88       	ldd	r0, Z+22	; 0x16
    2774:	f7 89       	ldd	r31, Z+23	; 0x17
    2776:	e0 2d       	mov	r30, r0
    2778:	80 81       	ld	r24, Z
    277a:	6a e0       	ldi	r22, 0x0A	; 10
    277c:	68 1b       	sub	r22, r24
    277e:	95 cf       	rjmp	.-214    	; 0x26aa <xQueueSemaphoreTake+0x10a>
    2780:	80 e0       	ldi	r24, 0x00	; 0
    2782:	c9 cf       	rjmp	.-110    	; 0x2716 <xQueueSemaphoreTake+0x176>
    2784:	0e 94 b1 1c 	call	0x3962	; 0x3962 <pvTaskIncrementMutexHeldCount>
    2788:	d8 01       	movw	r26, r16
    278a:	14 96       	adiw	r26, 0x04	; 4
    278c:	8d 93       	st	X+, r24
    278e:	9c 93       	st	X, r25
    2790:	15 97       	sbiw	r26, 0x05	; 5
    2792:	ba cf       	rjmp	.-140    	; 0x2708 <xQueueSemaphoreTake+0x168>

00002794 <xQueuePeek>:
    2794:	cf 92       	push	r12
    2796:	df 92       	push	r13
    2798:	ef 92       	push	r14
    279a:	ff 92       	push	r15
    279c:	0f 93       	push	r16
    279e:	1f 93       	push	r17
    27a0:	cf 93       	push	r28
    27a2:	df 93       	push	r29
    27a4:	cd b7       	in	r28, 0x3d	; 61
    27a6:	de b7       	in	r29, 0x3e	; 62
    27a8:	25 97       	sbiw	r28, 0x05	; 5
    27aa:	cd bf       	out	0x3d, r28	; 61
    27ac:	de bf       	out	0x3e, r29	; 62
    27ae:	8c 01       	movw	r16, r24
    27b0:	6b 01       	movw	r12, r22
    27b2:	4c 83       	std	Y+4, r20	; 0x04
    27b4:	5d 83       	std	Y+5, r21	; 0x05
    27b6:	89 2b       	or	r24, r25
    27b8:	09 f4       	brne	.+2      	; 0x27bc <xQueuePeek+0x28>
    27ba:	a2 c0       	rjmp	.+324    	; 0x2900 <xQueuePeek+0x16c>
    27bc:	c1 14       	cp	r12, r1
    27be:	d1 04       	cpc	r13, r1
    27c0:	09 f4       	brne	.+2      	; 0x27c4 <xQueuePeek+0x30>
    27c2:	92 c0       	rjmp	.+292    	; 0x28e8 <xQueuePeek+0x154>
    27c4:	20 e0       	ldi	r18, 0x00	; 0
    27c6:	78 01       	movw	r14, r16
    27c8:	f1 e1       	ldi	r31, 0x11	; 17
    27ca:	ef 0e       	add	r14, r31
    27cc:	f1 1c       	adc	r15, r1
    27ce:	0f b6       	in	r0, 0x3f	; 63
    27d0:	f8 94       	cli
    27d2:	0f 92       	push	r0
    27d4:	f8 01       	movw	r30, r16
    27d6:	82 8d       	ldd	r24, Z+26	; 0x1a
    27d8:	81 11       	cpse	r24, r1
    27da:	69 c0       	rjmp	.+210    	; 0x28ae <xQueuePeek+0x11a>
    27dc:	8c 81       	ldd	r24, Y+4	; 0x04
    27de:	9d 81       	ldd	r25, Y+5	; 0x05
    27e0:	89 2b       	or	r24, r25
    27e2:	09 f4       	brne	.+2      	; 0x27e6 <xQueuePeek+0x52>
    27e4:	74 c0       	rjmp	.+232    	; 0x28ce <xQueuePeek+0x13a>
    27e6:	22 23       	and	r18, r18
    27e8:	09 f4       	brne	.+2      	; 0x27ec <xQueuePeek+0x58>
    27ea:	58 c0       	rjmp	.+176    	; 0x289c <xQueuePeek+0x108>
    27ec:	0f 90       	pop	r0
    27ee:	0f be       	out	0x3f, r0	; 63
    27f0:	0e 94 9d 18 	call	0x313a	; 0x313a <vTaskSuspendAll>
    27f4:	0f b6       	in	r0, 0x3f	; 63
    27f6:	f8 94       	cli
    27f8:	0f 92       	push	r0
    27fa:	f8 01       	movw	r30, r16
    27fc:	85 8d       	ldd	r24, Z+29	; 0x1d
    27fe:	8f 3f       	cpi	r24, 0xFF	; 255
    2800:	09 f4       	brne	.+2      	; 0x2804 <xQueuePeek+0x70>
    2802:	53 c0       	rjmp	.+166    	; 0x28aa <xQueuePeek+0x116>
    2804:	f8 01       	movw	r30, r16
    2806:	86 8d       	ldd	r24, Z+30	; 0x1e
    2808:	8f 3f       	cpi	r24, 0xFF	; 255
    280a:	09 f4       	brne	.+2      	; 0x280e <xQueuePeek+0x7a>
    280c:	4c c0       	rjmp	.+152    	; 0x28a6 <xQueuePeek+0x112>
    280e:	0f 90       	pop	r0
    2810:	0f be       	out	0x3f, r0	; 63
    2812:	be 01       	movw	r22, r28
    2814:	6c 5f       	subi	r22, 0xFC	; 252
    2816:	7f 4f       	sbci	r23, 0xFF	; 255
    2818:	ce 01       	movw	r24, r28
    281a:	01 96       	adiw	r24, 0x01	; 1
    281c:	0e 94 1d 1b 	call	0x363a	; 0x363a <xTaskCheckForTimeOut>
    2820:	81 11       	cpse	r24, r1
    2822:	22 c0       	rjmp	.+68     	; 0x2868 <xQueuePeek+0xd4>
    2824:	0f b6       	in	r0, 0x3f	; 63
    2826:	f8 94       	cli
    2828:	0f 92       	push	r0
    282a:	f8 01       	movw	r30, r16
    282c:	82 8d       	ldd	r24, Z+26	; 0x1a
    282e:	0f 90       	pop	r0
    2830:	0f be       	out	0x3f, r0	; 63
    2832:	81 11       	cpse	r24, r1
    2834:	12 c0       	rjmp	.+36     	; 0x285a <xQueuePeek+0xc6>
    2836:	6c 81       	ldd	r22, Y+4	; 0x04
    2838:	7d 81       	ldd	r23, Y+5	; 0x05
    283a:	c7 01       	movw	r24, r14
    283c:	0e 94 9b 1a 	call	0x3536	; 0x3536 <vTaskPlaceOnEventList>
    2840:	c8 01       	movw	r24, r16
    2842:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <prvUnlockQueue>
    2846:	0e 94 87 19 	call	0x330e	; 0x330e <xTaskResumeAll>
    284a:	88 23       	and	r24, r24
    284c:	11 f0       	breq	.+4      	; 0x2852 <xQueuePeek+0xbe>
    284e:	21 e0       	ldi	r18, 0x01	; 1
    2850:	be cf       	rjmp	.-132    	; 0x27ce <xQueuePeek+0x3a>
    2852:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <vPortYield>
    2856:	21 e0       	ldi	r18, 0x01	; 1
    2858:	ba cf       	rjmp	.-140    	; 0x27ce <xQueuePeek+0x3a>
    285a:	c8 01       	movw	r24, r16
    285c:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <prvUnlockQueue>
    2860:	0e 94 87 19 	call	0x330e	; 0x330e <xTaskResumeAll>
    2864:	21 e0       	ldi	r18, 0x01	; 1
    2866:	b3 cf       	rjmp	.-154    	; 0x27ce <xQueuePeek+0x3a>
    2868:	c8 01       	movw	r24, r16
    286a:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <prvUnlockQueue>
    286e:	0e 94 87 19 	call	0x330e	; 0x330e <xTaskResumeAll>
    2872:	0f b6       	in	r0, 0x3f	; 63
    2874:	f8 94       	cli
    2876:	0f 92       	push	r0
    2878:	f8 01       	movw	r30, r16
    287a:	82 8d       	ldd	r24, Z+26	; 0x1a
    287c:	0f 90       	pop	r0
    287e:	0f be       	out	0x3f, r0	; 63
    2880:	81 11       	cpse	r24, r1
    2882:	e5 cf       	rjmp	.-54     	; 0x284e <xQueuePeek+0xba>
    2884:	25 96       	adiw	r28, 0x05	; 5
    2886:	cd bf       	out	0x3d, r28	; 61
    2888:	de bf       	out	0x3e, r29	; 62
    288a:	df 91       	pop	r29
    288c:	cf 91       	pop	r28
    288e:	1f 91       	pop	r17
    2890:	0f 91       	pop	r16
    2892:	ff 90       	pop	r15
    2894:	ef 90       	pop	r14
    2896:	df 90       	pop	r13
    2898:	cf 90       	pop	r12
    289a:	08 95       	ret
    289c:	ce 01       	movw	r24, r28
    289e:	01 96       	adiw	r24, 0x01	; 1
    28a0:	0e 94 12 1b 	call	0x3624	; 0x3624 <vTaskInternalSetTimeOutState>
    28a4:	a3 cf       	rjmp	.-186    	; 0x27ec <xQueuePeek+0x58>
    28a6:	16 8e       	std	Z+30, r1	; 0x1e
    28a8:	b2 cf       	rjmp	.-156    	; 0x280e <xQueuePeek+0x7a>
    28aa:	15 8e       	std	Z+29, r1	; 0x1d
    28ac:	ab cf       	rjmp	.-170    	; 0x2804 <xQueuePeek+0x70>
    28ae:	e6 80       	ldd	r14, Z+6	; 0x06
    28b0:	f7 80       	ldd	r15, Z+7	; 0x07
    28b2:	b6 01       	movw	r22, r12
    28b4:	c8 01       	movw	r24, r16
    28b6:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <prvCopyDataFromQueue>
    28ba:	f8 01       	movw	r30, r16
    28bc:	e6 82       	std	Z+6, r14	; 0x06
    28be:	f7 82       	std	Z+7, r15	; 0x07
    28c0:	81 89       	ldd	r24, Z+17	; 0x11
    28c2:	81 11       	cpse	r24, r1
    28c4:	08 c0       	rjmp	.+16     	; 0x28d6 <xQueuePeek+0x142>
    28c6:	0f 90       	pop	r0
    28c8:	0f be       	out	0x3f, r0	; 63
    28ca:	81 e0       	ldi	r24, 0x01	; 1
    28cc:	db cf       	rjmp	.-74     	; 0x2884 <xQueuePeek+0xf0>
    28ce:	0f 90       	pop	r0
    28d0:	0f be       	out	0x3f, r0	; 63
    28d2:	80 e0       	ldi	r24, 0x00	; 0
    28d4:	d7 cf       	rjmp	.-82     	; 0x2884 <xQueuePeek+0xf0>
    28d6:	c8 01       	movw	r24, r16
    28d8:	41 96       	adiw	r24, 0x11	; 17
    28da:	0e 94 bb 1a 	call	0x3576	; 0x3576 <xTaskRemoveFromEventList>
    28de:	88 23       	and	r24, r24
    28e0:	91 f3       	breq	.-28     	; 0x28c6 <xQueuePeek+0x132>
    28e2:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <vPortYield>
    28e6:	ef cf       	rjmp	.-34     	; 0x28c6 <xQueuePeek+0x132>
    28e8:	f8 01       	movw	r30, r16
    28ea:	84 8d       	ldd	r24, Z+28	; 0x1c
    28ec:	88 23       	and	r24, r24
    28ee:	09 f4       	brne	.+2      	; 0x28f2 <xQueuePeek+0x15e>
    28f0:	69 cf       	rjmp	.-302    	; 0x27c4 <xQueuePeek+0x30>
    28f2:	6c e6       	ldi	r22, 0x6C	; 108
    28f4:	76 e0       	ldi	r23, 0x06	; 6
    28f6:	81 ea       	ldi	r24, 0xA1	; 161
    28f8:	90 e2       	ldi	r25, 0x20	; 32
    28fa:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <vAssertCalled>
    28fe:	62 cf       	rjmp	.-316    	; 0x27c4 <xQueuePeek+0x30>
    2900:	68 e6       	ldi	r22, 0x68	; 104
    2902:	76 e0       	ldi	r23, 0x06	; 6
    2904:	81 ea       	ldi	r24, 0xA1	; 161
    2906:	90 e2       	ldi	r25, 0x20	; 32
    2908:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <vAssertCalled>
    290c:	57 cf       	rjmp	.-338    	; 0x27bc <xQueuePeek+0x28>

0000290e <xQueueReceiveFromISR>:
    290e:	cf 92       	push	r12
    2910:	df 92       	push	r13
    2912:	ef 92       	push	r14
    2914:	ff 92       	push	r15
    2916:	0f 93       	push	r16
    2918:	1f 93       	push	r17
    291a:	cf 93       	push	r28
    291c:	df 93       	push	r29
    291e:	ec 01       	movw	r28, r24
    2920:	7b 01       	movw	r14, r22
    2922:	6a 01       	movw	r12, r20
    2924:	89 2b       	or	r24, r25
    2926:	b9 f1       	breq	.+110    	; 0x2996 <xQueueReceiveFromISR+0x88>
    2928:	e1 14       	cp	r14, r1
    292a:	f1 04       	cpc	r15, r1
    292c:	d1 f0       	breq	.+52     	; 0x2962 <xQueueReceiveFromISR+0x54>
    292e:	1a 8d       	ldd	r17, Y+26	; 0x1a
    2930:	11 11       	cpse	r17, r1
    2932:	0a c0       	rjmp	.+20     	; 0x2948 <xQueueReceiveFromISR+0x3a>
    2934:	80 e0       	ldi	r24, 0x00	; 0
    2936:	df 91       	pop	r29
    2938:	cf 91       	pop	r28
    293a:	1f 91       	pop	r17
    293c:	0f 91       	pop	r16
    293e:	ff 90       	pop	r15
    2940:	ef 90       	pop	r14
    2942:	df 90       	pop	r13
    2944:	cf 90       	pop	r12
    2946:	08 95       	ret
    2948:	0d 8d       	ldd	r16, Y+29	; 0x1d
    294a:	b7 01       	movw	r22, r14
    294c:	ce 01       	movw	r24, r28
    294e:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <prvCopyDataFromQueue>
    2952:	11 50       	subi	r17, 0x01	; 1
    2954:	1a 8f       	std	Y+26, r17	; 0x1a
    2956:	0f 3f       	cpi	r16, 0xFF	; 255
    2958:	71 f0       	breq	.+28     	; 0x2976 <xQueueReceiveFromISR+0x68>
    295a:	0f 5f       	subi	r16, 0xFF	; 255
    295c:	0d 8f       	std	Y+29, r16	; 0x1d
    295e:	81 e0       	ldi	r24, 0x01	; 1
    2960:	ea cf       	rjmp	.-44     	; 0x2936 <xQueueReceiveFromISR+0x28>
    2962:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2964:	88 23       	and	r24, r24
    2966:	19 f3       	breq	.-58     	; 0x292e <xQueueReceiveFromISR+0x20>
    2968:	6c ef       	ldi	r22, 0xFC	; 252
    296a:	76 e0       	ldi	r23, 0x06	; 6
    296c:	81 ea       	ldi	r24, 0xA1	; 161
    296e:	90 e2       	ldi	r25, 0x20	; 32
    2970:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <vAssertCalled>
    2974:	dc cf       	rjmp	.-72     	; 0x292e <xQueueReceiveFromISR+0x20>
    2976:	88 85       	ldd	r24, Y+8	; 0x08
    2978:	88 23       	and	r24, r24
    297a:	89 f3       	breq	.-30     	; 0x295e <xQueueReceiveFromISR+0x50>
    297c:	ce 01       	movw	r24, r28
    297e:	08 96       	adiw	r24, 0x08	; 8
    2980:	0e 94 bb 1a 	call	0x3576	; 0x3576 <xTaskRemoveFromEventList>
    2984:	88 23       	and	r24, r24
    2986:	59 f3       	breq	.-42     	; 0x295e <xQueueReceiveFromISR+0x50>
    2988:	c1 14       	cp	r12, r1
    298a:	d1 04       	cpc	r13, r1
    298c:	41 f3       	breq	.-48     	; 0x295e <xQueueReceiveFromISR+0x50>
    298e:	81 e0       	ldi	r24, 0x01	; 1
    2990:	f6 01       	movw	r30, r12
    2992:	80 83       	st	Z, r24
    2994:	d0 cf       	rjmp	.-96     	; 0x2936 <xQueueReceiveFromISR+0x28>
    2996:	6b ef       	ldi	r22, 0xFB	; 251
    2998:	76 e0       	ldi	r23, 0x06	; 6
    299a:	81 ea       	ldi	r24, 0xA1	; 161
    299c:	90 e2       	ldi	r25, 0x20	; 32
    299e:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <vAssertCalled>
    29a2:	c2 cf       	rjmp	.-124    	; 0x2928 <xQueueReceiveFromISR+0x1a>

000029a4 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
    29a4:	cf 93       	push	r28
    29a6:	df 93       	push	r29
    29a8:	ec 01       	movw	r28, r24
UBaseType_t uxReturn;

	configASSERT( xQueue );
    29aa:	89 2b       	or	r24, r25
    29ac:	49 f0       	breq	.+18     	; 0x29c0 <uxQueueMessagesWaiting+0x1c>

	taskENTER_CRITICAL();
    29ae:	0f b6       	in	r0, 0x3f	; 63
    29b0:	f8 94       	cli
    29b2:	0f 92       	push	r0
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
    29b4:	8a 8d       	ldd	r24, Y+26	; 0x1a
	}
	taskEXIT_CRITICAL();
    29b6:	0f 90       	pop	r0
    29b8:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    29ba:	df 91       	pop	r29
    29bc:	cf 91       	pop	r28
    29be:	08 95       	ret

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
UBaseType_t uxReturn;

	configASSERT( xQueue );
    29c0:	6a e8       	ldi	r22, 0x8A	; 138
    29c2:	77 e0       	ldi	r23, 0x07	; 7
    29c4:	81 ea       	ldi	r24, 0xA1	; 161
    29c6:	90 e2       	ldi	r25, 0x20	; 32
    29c8:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <vAssertCalled>
    29cc:	f0 cf       	rjmp	.-32     	; 0x29ae <uxQueueMessagesWaiting+0xa>

000029ce <prvIdleTask>:
						pxTCB->ulNotifiedValue = ulValue;
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
    29ce:	20 c0       	rjmp	.+64     	; 0x2a10 <prvIdleTask+0x42>
    29d0:	0f b6       	in	r0, 0x3f	; 63
    29d2:	f8 94       	cli
    29d4:	0f 92       	push	r0
    29d6:	e0 91 bf 25 	lds	r30, 0x25BF	; 0x8025bf <xTasksWaitingTermination+0x5>
    29da:	f0 91 c0 25 	lds	r31, 0x25C0	; 0x8025c0 <xTasksWaitingTermination+0x6>
    29de:	c6 81       	ldd	r28, Z+6	; 0x06
    29e0:	d7 81       	ldd	r29, Z+7	; 0x07
    29e2:	ce 01       	movw	r24, r28
    29e4:	02 96       	adiw	r24, 0x02	; 2
    29e6:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <uxListRemove>
    29ea:	80 91 af 25 	lds	r24, 0x25AF	; 0x8025af <uxCurrentNumberOfTasks>
    29ee:	81 50       	subi	r24, 0x01	; 1
    29f0:	80 93 af 25 	sts	0x25AF, r24	; 0x8025af <uxCurrentNumberOfTasks>
    29f4:	80 91 b9 25 	lds	r24, 0x25B9	; 0x8025b9 <uxDeletedTasksWaitingCleanUp>
    29f8:	81 50       	subi	r24, 0x01	; 1
    29fa:	80 93 b9 25 	sts	0x25B9, r24	; 0x8025b9 <uxDeletedTasksWaitingCleanUp>
    29fe:	0f 90       	pop	r0
    2a00:	0f be       	out	0x3f, r0	; 63
    2a02:	8f 89       	ldd	r24, Y+23	; 0x17
    2a04:	98 8d       	ldd	r25, Y+24	; 0x18
    2a06:	0e 94 76 0c 	call	0x18ec	; 0x18ec <vPortFree>
    2a0a:	ce 01       	movw	r24, r28
    2a0c:	0e 94 76 0c 	call	0x18ec	; 0x18ec <vPortFree>
    2a10:	80 91 b9 25 	lds	r24, 0x25B9	; 0x8025b9 <uxDeletedTasksWaitingCleanUp>
    2a14:	81 11       	cpse	r24, r1
    2a16:	dc cf       	rjmp	.-72     	; 0x29d0 <prvIdleTask+0x2>
    2a18:	80 91 e2 25 	lds	r24, 0x25E2	; 0x8025e2 <pxReadyTasksLists>
    2a1c:	82 30       	cpi	r24, 0x02	; 2
    2a1e:	10 f0       	brcs	.+4      	; 0x2a24 <prvIdleTask+0x56>
    2a20:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <vPortYield>
    2a24:	0e 94 37 1d 	call	0x3a6e	; 0x3a6e <vApplicationIdleHook>
    2a28:	f3 cf       	rjmp	.-26     	; 0x2a10 <prvIdleTask+0x42>

00002a2a <prvResetNextTaskUnblockTime.part.0>:
    2a2a:	e0 91 ce 25 	lds	r30, 0x25CE	; 0x8025ce <pxDelayedTaskList>
    2a2e:	f0 91 cf 25 	lds	r31, 0x25CF	; 0x8025cf <pxDelayedTaskList+0x1>
    2a32:	05 80       	ldd	r0, Z+5	; 0x05
    2a34:	f6 81       	ldd	r31, Z+6	; 0x06
    2a36:	e0 2d       	mov	r30, r0
    2a38:	06 80       	ldd	r0, Z+6	; 0x06
    2a3a:	f7 81       	ldd	r31, Z+7	; 0x07
    2a3c:	e0 2d       	mov	r30, r0
    2a3e:	82 81       	ldd	r24, Z+2	; 0x02
    2a40:	93 81       	ldd	r25, Z+3	; 0x03
    2a42:	80 93 a5 25 	sts	0x25A5, r24	; 0x8025a5 <xNextTaskUnblockTime>
    2a46:	90 93 a6 25 	sts	0x25A6, r25	; 0x8025a6 <xNextTaskUnblockTime+0x1>
    2a4a:	08 95       	ret

00002a4c <prvTaskIsTaskSuspended>:
    2a4c:	cf 93       	push	r28
    2a4e:	df 93       	push	r29
    2a50:	ec 01       	movw	r28, r24
    2a52:	89 2b       	or	r24, r25
    2a54:	99 f0       	breq	.+38     	; 0x2a7c <prvTaskIsTaskSuspended+0x30>
    2a56:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a58:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a5a:	80 5b       	subi	r24, 0xB0	; 176
    2a5c:	95 42       	sbci	r25, 0x25	; 37
    2a5e:	21 f0       	breq	.+8      	; 0x2a68 <prvTaskIsTaskSuspended+0x1c>
    2a60:	80 e0       	ldi	r24, 0x00	; 0
    2a62:	df 91       	pop	r29
    2a64:	cf 91       	pop	r28
    2a66:	08 95       	ret
    2a68:	2c 89       	ldd	r18, Y+20	; 0x14
    2a6a:	3d 89       	ldd	r19, Y+21	; 0x15
    2a6c:	85 e2       	ldi	r24, 0x25	; 37
    2a6e:	23 3c       	cpi	r18, 0xC3	; 195
    2a70:	38 07       	cpc	r19, r24
    2a72:	b1 f3       	breq	.-20     	; 0x2a60 <prvTaskIsTaskSuspended+0x14>
    2a74:	81 e0       	ldi	r24, 0x01	; 1
    2a76:	23 2b       	or	r18, r19
    2a78:	99 f7       	brne	.-26     	; 0x2a60 <prvTaskIsTaskSuspended+0x14>
    2a7a:	f3 cf       	rjmp	.-26     	; 0x2a62 <prvTaskIsTaskSuspended+0x16>
    2a7c:	62 ef       	ldi	r22, 0xF2	; 242
    2a7e:	76 e0       	ldi	r23, 0x06	; 6
    2a80:	85 eb       	ldi	r24, 0xB5	; 181
    2a82:	90 e2       	ldi	r25, 0x20	; 32
    2a84:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <vAssertCalled>
    2a88:	e6 cf       	rjmp	.-52     	; 0x2a56 <prvTaskIsTaskSuspended+0xa>

00002a8a <prvAddCurrentTaskToDelayedList>:
    2a8a:	ff 92       	push	r15
    2a8c:	0f 93       	push	r16
    2a8e:	1f 93       	push	r17
    2a90:	cf 93       	push	r28
    2a92:	df 93       	push	r29
    2a94:	ec 01       	movw	r28, r24
    2a96:	f6 2e       	mov	r15, r22
    2a98:	00 91 ad 25 	lds	r16, 0x25AD	; 0x8025ad <xTickCount>
    2a9c:	10 91 ae 25 	lds	r17, 0x25AE	; 0x8025ae <xTickCount+0x1>
    2aa0:	80 91 3c 26 	lds	r24, 0x263C	; 0x80263c <pxCurrentTCB>
    2aa4:	90 91 3d 26 	lds	r25, 0x263D	; 0x80263d <pxCurrentTCB+0x1>
    2aa8:	02 96       	adiw	r24, 0x02	; 2
    2aaa:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <uxListRemove>
    2aae:	cf 3f       	cpi	r28, 0xFF	; 255
    2ab0:	8f ef       	ldi	r24, 0xFF	; 255
    2ab2:	d8 07       	cpc	r29, r24
    2ab4:	a9 f1       	breq	.+106    	; 0x2b20 <prvAddCurrentTaskToDelayedList+0x96>
    2ab6:	c0 0f       	add	r28, r16
    2ab8:	d1 1f       	adc	r29, r17
    2aba:	e0 91 3c 26 	lds	r30, 0x263C	; 0x80263c <pxCurrentTCB>
    2abe:	f0 91 3d 26 	lds	r31, 0x263D	; 0x80263d <pxCurrentTCB+0x1>
    2ac2:	c2 83       	std	Z+2, r28	; 0x02
    2ac4:	d3 83       	std	Z+3, r29	; 0x03
    2ac6:	60 91 3c 26 	lds	r22, 0x263C	; 0x80263c <pxCurrentTCB>
    2aca:	70 91 3d 26 	lds	r23, 0x263D	; 0x80263d <pxCurrentTCB+0x1>
    2ace:	c0 17       	cp	r28, r16
    2ad0:	d1 07       	cpc	r29, r17
    2ad2:	c8 f0       	brcs	.+50     	; 0x2b06 <prvAddCurrentTaskToDelayedList+0x7c>
    2ad4:	80 91 ce 25 	lds	r24, 0x25CE	; 0x8025ce <pxDelayedTaskList>
    2ad8:	90 91 cf 25 	lds	r25, 0x25CF	; 0x8025cf <pxDelayedTaskList+0x1>
    2adc:	6e 5f       	subi	r22, 0xFE	; 254
    2ade:	7f 4f       	sbci	r23, 0xFF	; 255
    2ae0:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <vListInsert>
    2ae4:	80 91 a5 25 	lds	r24, 0x25A5	; 0x8025a5 <xNextTaskUnblockTime>
    2ae8:	90 91 a6 25 	lds	r25, 0x25A6	; 0x8025a6 <xNextTaskUnblockTime+0x1>
    2aec:	c8 17       	cp	r28, r24
    2aee:	d9 07       	cpc	r29, r25
    2af0:	20 f4       	brcc	.+8      	; 0x2afa <prvAddCurrentTaskToDelayedList+0x70>
    2af2:	c0 93 a5 25 	sts	0x25A5, r28	; 0x8025a5 <xNextTaskUnblockTime>
    2af6:	d0 93 a6 25 	sts	0x25A6, r29	; 0x8025a6 <xNextTaskUnblockTime+0x1>
    2afa:	df 91       	pop	r29
    2afc:	cf 91       	pop	r28
    2afe:	1f 91       	pop	r17
    2b00:	0f 91       	pop	r16
    2b02:	ff 90       	pop	r15
    2b04:	08 95       	ret
    2b06:	80 91 cc 25 	lds	r24, 0x25CC	; 0x8025cc <pxOverflowDelayedTaskList>
    2b0a:	90 91 cd 25 	lds	r25, 0x25CD	; 0x8025cd <pxOverflowDelayedTaskList+0x1>
    2b0e:	6e 5f       	subi	r22, 0xFE	; 254
    2b10:	7f 4f       	sbci	r23, 0xFF	; 255
    2b12:	df 91       	pop	r29
    2b14:	cf 91       	pop	r28
    2b16:	1f 91       	pop	r17
    2b18:	0f 91       	pop	r16
    2b1a:	ff 90       	pop	r15
    2b1c:	0c 94 d4 0c 	jmp	0x19a8	; 0x19a8 <vListInsert>
    2b20:	ff 20       	and	r15, r15
    2b22:	49 f2       	breq	.-110    	; 0x2ab6 <prvAddCurrentTaskToDelayedList+0x2c>
    2b24:	60 91 3c 26 	lds	r22, 0x263C	; 0x80263c <pxCurrentTCB>
    2b28:	70 91 3d 26 	lds	r23, 0x263D	; 0x80263d <pxCurrentTCB+0x1>
    2b2c:	6e 5f       	subi	r22, 0xFE	; 254
    2b2e:	7f 4f       	sbci	r23, 0xFF	; 255
    2b30:	80 eb       	ldi	r24, 0xB0	; 176
    2b32:	95 e2       	ldi	r25, 0x25	; 37
    2b34:	df 91       	pop	r29
    2b36:	cf 91       	pop	r28
    2b38:	1f 91       	pop	r17
    2b3a:	0f 91       	pop	r16
    2b3c:	ff 90       	pop	r15
    2b3e:	0c 94 b3 0c 	jmp	0x1966	; 0x1966 <vListInsertEnd>

00002b42 <vTaskSwitchContext.part.5>:
    2b42:	0f 93       	push	r16
    2b44:	1f 93       	push	r17
    2b46:	cf 93       	push	r28
    2b48:	10 92 a9 25 	sts	0x25A9, r1	; 0x8025a9 <xYieldPending>
    2b4c:	20 91 20 08 	lds	r18, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
    2b50:	30 91 21 08 	lds	r19, 0x0821	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
    2b54:	80 91 c0 26 	lds	r24, 0x26C0	; 0x8026c0 <StatsTimer>
    2b58:	90 91 c1 26 	lds	r25, 0x26C1	; 0x8026c1 <StatsTimer+0x1>
    2b5c:	a0 91 c2 26 	lds	r26, 0x26C2	; 0x8026c2 <StatsTimer+0x2>
    2b60:	b0 91 c3 26 	lds	r27, 0x26C3	; 0x8026c3 <StatsTimer+0x3>
    2b64:	82 0f       	add	r24, r18
    2b66:	93 1f       	adc	r25, r19
    2b68:	a1 1d       	adc	r26, r1
    2b6a:	b1 1d       	adc	r27, r1
    2b6c:	00 91 9e 25 	lds	r16, 0x259E	; 0x80259e <ulTaskSwitchedInTime>
    2b70:	10 91 9f 25 	lds	r17, 0x259F	; 0x80259f <ulTaskSwitchedInTime+0x1>
    2b74:	20 91 a0 25 	lds	r18, 0x25A0	; 0x8025a0 <ulTaskSwitchedInTime+0x2>
    2b78:	30 91 a1 25 	lds	r19, 0x25A1	; 0x8025a1 <ulTaskSwitchedInTime+0x3>
    2b7c:	08 17       	cp	r16, r24
    2b7e:	19 07       	cpc	r17, r25
    2b80:	2a 07       	cpc	r18, r26
    2b82:	3b 07       	cpc	r19, r27
    2b84:	a0 f4       	brcc	.+40     	; 0x2bae <vTaskSwitchContext.part.5+0x6c>
    2b86:	e0 91 3c 26 	lds	r30, 0x263C	; 0x80263c <pxCurrentTCB>
    2b8a:	f0 91 3d 26 	lds	r31, 0x263D	; 0x80263d <pxCurrentTCB+0x1>
    2b8e:	47 a1       	ldd	r20, Z+39	; 0x27
    2b90:	50 a5       	ldd	r21, Z+40	; 0x28
    2b92:	61 a5       	ldd	r22, Z+41	; 0x29
    2b94:	72 a5       	ldd	r23, Z+42	; 0x2a
    2b96:	40 1b       	sub	r20, r16
    2b98:	51 0b       	sbc	r21, r17
    2b9a:	62 0b       	sbc	r22, r18
    2b9c:	73 0b       	sbc	r23, r19
    2b9e:	48 0f       	add	r20, r24
    2ba0:	59 1f       	adc	r21, r25
    2ba2:	6a 1f       	adc	r22, r26
    2ba4:	7b 1f       	adc	r23, r27
    2ba6:	47 a3       	std	Z+39, r20	; 0x27
    2ba8:	50 a7       	std	Z+40, r21	; 0x28
    2baa:	61 a7       	std	Z+41, r22	; 0x29
    2bac:	72 a7       	std	Z+42, r23	; 0x2a
    2bae:	80 93 9e 25 	sts	0x259E, r24	; 0x80259e <ulTaskSwitchedInTime>
    2bb2:	90 93 9f 25 	sts	0x259F, r25	; 0x80259f <ulTaskSwitchedInTime+0x1>
    2bb6:	a0 93 a0 25 	sts	0x25A0, r26	; 0x8025a0 <ulTaskSwitchedInTime+0x2>
    2bba:	b0 93 a1 25 	sts	0x25A1, r27	; 0x8025a1 <ulTaskSwitchedInTime+0x3>
    2bbe:	e0 91 3c 26 	lds	r30, 0x263C	; 0x80263c <pxCurrentTCB>
    2bc2:	f0 91 3d 26 	lds	r31, 0x263D	; 0x80263d <pxCurrentTCB+0x1>
    2bc6:	07 88       	ldd	r0, Z+23	; 0x17
    2bc8:	f0 8d       	ldd	r31, Z+24	; 0x18
    2bca:	e0 2d       	mov	r30, r0
    2bcc:	80 81       	ld	r24, Z
    2bce:	91 81       	ldd	r25, Z+1	; 0x01
    2bd0:	a2 81       	ldd	r26, Z+2	; 0x02
    2bd2:	b3 81       	ldd	r27, Z+3	; 0x03
    2bd4:	85 3a       	cpi	r24, 0xA5	; 165
    2bd6:	95 4a       	sbci	r25, 0xA5	; 165
    2bd8:	a5 4a       	sbci	r26, 0xA5	; 165
    2bda:	b5 4a       	sbci	r27, 0xA5	; 165
    2bdc:	09 f4       	brne	.+2      	; 0x2be0 <vTaskSwitchContext.part.5+0x9e>
    2bde:	4c c0       	rjmp	.+152    	; 0x2c78 <vTaskSwitchContext.part.5+0x136>
    2be0:	60 91 3c 26 	lds	r22, 0x263C	; 0x80263c <pxCurrentTCB>
    2be4:	70 91 3d 26 	lds	r23, 0x263D	; 0x80263d <pxCurrentTCB+0x1>
    2be8:	80 91 3c 26 	lds	r24, 0x263C	; 0x80263c <pxCurrentTCB>
    2bec:	90 91 3d 26 	lds	r25, 0x263D	; 0x80263d <pxCurrentTCB+0x1>
    2bf0:	67 5e       	subi	r22, 0xE7	; 231
    2bf2:	7f 4f       	sbci	r23, 0xFF	; 255
    2bf4:	0e 94 57 1d 	call	0x3aae	; 0x3aae <vApplicationStackOverflowHook>
    2bf8:	c0 91 ac 25 	lds	r28, 0x25AC	; 0x8025ac <uxTopReadyPriority>
    2bfc:	8c 2f       	mov	r24, r28
    2bfe:	90 e0       	ldi	r25, 0x00	; 0
    2c00:	9c 01       	movw	r18, r24
    2c02:	22 0f       	add	r18, r18
    2c04:	33 1f       	adc	r19, r19
    2c06:	22 0f       	add	r18, r18
    2c08:	33 1f       	adc	r19, r19
    2c0a:	22 0f       	add	r18, r18
    2c0c:	33 1f       	adc	r19, r19
    2c0e:	f9 01       	movw	r30, r18
    2c10:	e8 0f       	add	r30, r24
    2c12:	f9 1f       	adc	r31, r25
    2c14:	ee 51       	subi	r30, 0x1E	; 30
    2c16:	fa 4d       	sbci	r31, 0xDA	; 218
    2c18:	40 81       	ld	r20, Z
    2c1a:	41 11       	cpse	r20, r1
    2c1c:	0c c0       	rjmp	.+24     	; 0x2c36 <vTaskSwitchContext.part.5+0xf4>
    2c1e:	cc 23       	and	r28, r28
    2c20:	11 f0       	breq	.+4      	; 0x2c26 <vTaskSwitchContext.part.5+0xe4>
    2c22:	c1 50       	subi	r28, 0x01	; 1
    2c24:	eb cf       	rjmp	.-42     	; 0x2bfc <vTaskSwitchContext.part.5+0xba>
    2c26:	6c e8       	ldi	r22, 0x8C	; 140
    2c28:	7b e0       	ldi	r23, 0x0B	; 11
    2c2a:	85 eb       	ldi	r24, 0xB5	; 181
    2c2c:	90 e2       	ldi	r25, 0x20	; 32
    2c2e:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <vAssertCalled>
    2c32:	c1 50       	subi	r28, 0x01	; 1
    2c34:	e3 cf       	rjmp	.-58     	; 0x2bfc <vTaskSwitchContext.part.5+0xba>
    2c36:	82 0f       	add	r24, r18
    2c38:	93 1f       	adc	r25, r19
    2c3a:	dc 01       	movw	r26, r24
    2c3c:	ae 51       	subi	r26, 0x1E	; 30
    2c3e:	ba 4d       	sbci	r27, 0xDA	; 218
    2c40:	11 96       	adiw	r26, 0x01	; 1
    2c42:	ed 91       	ld	r30, X+
    2c44:	fc 91       	ld	r31, X
    2c46:	12 97       	sbiw	r26, 0x02	; 2
    2c48:	02 80       	ldd	r0, Z+2	; 0x02
    2c4a:	f3 81       	ldd	r31, Z+3	; 0x03
    2c4c:	e0 2d       	mov	r30, r0
    2c4e:	11 96       	adiw	r26, 0x01	; 1
    2c50:	ed 93       	st	X+, r30
    2c52:	fc 93       	st	X, r31
    2c54:	12 97       	sbiw	r26, 0x02	; 2
    2c56:	8b 51       	subi	r24, 0x1B	; 27
    2c58:	9a 4d       	sbci	r25, 0xDA	; 218
    2c5a:	e8 17       	cp	r30, r24
    2c5c:	f9 07       	cpc	r31, r25
    2c5e:	59 f1       	breq	.+86     	; 0x2cb6 <vTaskSwitchContext.part.5+0x174>
    2c60:	86 81       	ldd	r24, Z+6	; 0x06
    2c62:	97 81       	ldd	r25, Z+7	; 0x07
    2c64:	80 93 3c 26 	sts	0x263C, r24	; 0x80263c <pxCurrentTCB>
    2c68:	90 93 3d 26 	sts	0x263D, r25	; 0x80263d <pxCurrentTCB+0x1>
    2c6c:	c0 93 ac 25 	sts	0x25AC, r28	; 0x8025ac <uxTopReadyPriority>
    2c70:	cf 91       	pop	r28
    2c72:	1f 91       	pop	r17
    2c74:	0f 91       	pop	r16
    2c76:	08 95       	ret
    2c78:	84 81       	ldd	r24, Z+4	; 0x04
    2c7a:	95 81       	ldd	r25, Z+5	; 0x05
    2c7c:	a6 81       	ldd	r26, Z+6	; 0x06
    2c7e:	b7 81       	ldd	r27, Z+7	; 0x07
    2c80:	85 3a       	cpi	r24, 0xA5	; 165
    2c82:	95 4a       	sbci	r25, 0xA5	; 165
    2c84:	a5 4a       	sbci	r26, 0xA5	; 165
    2c86:	b5 4a       	sbci	r27, 0xA5	; 165
    2c88:	09 f0       	breq	.+2      	; 0x2c8c <vTaskSwitchContext.part.5+0x14a>
    2c8a:	aa cf       	rjmp	.-172    	; 0x2be0 <vTaskSwitchContext.part.5+0x9e>
    2c8c:	80 85       	ldd	r24, Z+8	; 0x08
    2c8e:	91 85       	ldd	r25, Z+9	; 0x09
    2c90:	a2 85       	ldd	r26, Z+10	; 0x0a
    2c92:	b3 85       	ldd	r27, Z+11	; 0x0b
    2c94:	85 3a       	cpi	r24, 0xA5	; 165
    2c96:	95 4a       	sbci	r25, 0xA5	; 165
    2c98:	a5 4a       	sbci	r26, 0xA5	; 165
    2c9a:	b5 4a       	sbci	r27, 0xA5	; 165
    2c9c:	09 f0       	breq	.+2      	; 0x2ca0 <vTaskSwitchContext.part.5+0x15e>
    2c9e:	a0 cf       	rjmp	.-192    	; 0x2be0 <vTaskSwitchContext.part.5+0x9e>
    2ca0:	84 85       	ldd	r24, Z+12	; 0x0c
    2ca2:	95 85       	ldd	r25, Z+13	; 0x0d
    2ca4:	a6 85       	ldd	r26, Z+14	; 0x0e
    2ca6:	b7 85       	ldd	r27, Z+15	; 0x0f
    2ca8:	85 3a       	cpi	r24, 0xA5	; 165
    2caa:	95 4a       	sbci	r25, 0xA5	; 165
    2cac:	a5 4a       	sbci	r26, 0xA5	; 165
    2cae:	b5 4a       	sbci	r27, 0xA5	; 165
    2cb0:	09 f0       	breq	.+2      	; 0x2cb4 <vTaskSwitchContext.part.5+0x172>
    2cb2:	96 cf       	rjmp	.-212    	; 0x2be0 <vTaskSwitchContext.part.5+0x9e>
    2cb4:	a1 cf       	rjmp	.-190    	; 0x2bf8 <vTaskSwitchContext.part.5+0xb6>
    2cb6:	02 80       	ldd	r0, Z+2	; 0x02
    2cb8:	f3 81       	ldd	r31, Z+3	; 0x03
    2cba:	e0 2d       	mov	r30, r0
    2cbc:	11 96       	adiw	r26, 0x01	; 1
    2cbe:	ed 93       	st	X+, r30
    2cc0:	fc 93       	st	X, r31
    2cc2:	12 97       	sbiw	r26, 0x02	; 2
    2cc4:	cd cf       	rjmp	.-102    	; 0x2c60 <vTaskSwitchContext.part.5+0x11e>

00002cc6 <xTaskCreate>:
    2cc6:	5f 92       	push	r5
    2cc8:	6f 92       	push	r6
    2cca:	7f 92       	push	r7
    2ccc:	8f 92       	push	r8
    2cce:	9f 92       	push	r9
    2cd0:	af 92       	push	r10
    2cd2:	bf 92       	push	r11
    2cd4:	cf 92       	push	r12
    2cd6:	df 92       	push	r13
    2cd8:	ef 92       	push	r14
    2cda:	ff 92       	push	r15
    2cdc:	0f 93       	push	r16
    2cde:	1f 93       	push	r17
    2ce0:	cf 93       	push	r28
    2ce2:	df 93       	push	r29
    2ce4:	4c 01       	movw	r8, r24
    2ce6:	eb 01       	movw	r28, r22
    2ce8:	5a 01       	movw	r10, r20
    2cea:	39 01       	movw	r6, r18
    2cec:	50 2e       	mov	r5, r16
    2cee:	ca 01       	movw	r24, r20
    2cf0:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <pvPortMalloc>
    2cf4:	8c 01       	movw	r16, r24
    2cf6:	89 2b       	or	r24, r25
    2cf8:	09 f4       	brne	.+2      	; 0x2cfc <xTaskCreate+0x36>
    2cfa:	de c0       	rjmp	.+444    	; 0x2eb8 <xTaskCreate+0x1f2>
    2cfc:	80 e3       	ldi	r24, 0x30	; 48
    2cfe:	90 e0       	ldi	r25, 0x00	; 0
    2d00:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <pvPortMalloc>
    2d04:	6c 01       	movw	r12, r24
    2d06:	00 97       	sbiw	r24, 0x00	; 0
    2d08:	09 f4       	brne	.+2      	; 0x2d0c <xTaskCreate+0x46>
    2d0a:	d3 c0       	rjmp	.+422    	; 0x2eb2 <xTaskCreate+0x1ec>
    2d0c:	dc 01       	movw	r26, r24
    2d0e:	57 96       	adiw	r26, 0x17	; 23
    2d10:	0d 93       	st	X+, r16
    2d12:	1c 93       	st	X, r17
    2d14:	58 97       	sbiw	r26, 0x18	; 24
    2d16:	20 97       	sbiw	r28, 0x00	; 0
    2d18:	09 f4       	brne	.+2      	; 0x2d1c <xTaskCreate+0x56>
    2d1a:	d0 c0       	rjmp	.+416    	; 0x2ebc <xTaskCreate+0x1f6>
    2d1c:	c8 01       	movw	r24, r16
    2d1e:	a5 01       	movw	r20, r10
    2d20:	65 ea       	ldi	r22, 0xA5	; 165
    2d22:	70 e0       	ldi	r23, 0x00	; 0
    2d24:	0e 94 48 30 	call	0x6090	; 0x6090 <memset>
    2d28:	f1 e0       	ldi	r31, 0x01	; 1
    2d2a:	af 1a       	sub	r10, r31
    2d2c:	b1 08       	sbc	r11, r1
    2d2e:	d6 01       	movw	r26, r12
    2d30:	57 96       	adiw	r26, 0x17	; 23
    2d32:	8d 91       	ld	r24, X+
    2d34:	9c 91       	ld	r25, X
    2d36:	58 97       	sbiw	r26, 0x18	; 24
    2d38:	a8 0e       	add	r10, r24
    2d3a:	b9 1e       	adc	r11, r25
    2d3c:	f6 01       	movw	r30, r12
    2d3e:	79 96       	adiw	r30, 0x19	; 25
    2d40:	9e 01       	movw	r18, r28
    2d42:	28 5f       	subi	r18, 0xF8	; 248
    2d44:	3f 4f       	sbci	r19, 0xFF	; 255
    2d46:	de 01       	movw	r26, r28
    2d48:	89 91       	ld	r24, Y+
    2d4a:	81 93       	st	Z+, r24
    2d4c:	8c 91       	ld	r24, X
    2d4e:	88 23       	and	r24, r24
    2d50:	19 f0       	breq	.+6      	; 0x2d58 <xTaskCreate+0x92>
    2d52:	c2 17       	cp	r28, r18
    2d54:	d3 07       	cpc	r29, r19
    2d56:	b9 f7       	brne	.-18     	; 0x2d46 <xTaskCreate+0x80>
    2d58:	f6 01       	movw	r30, r12
    2d5a:	10 a2       	std	Z+32, r1	; 0x20
    2d5c:	05 2d       	mov	r16, r5
    2d5e:	0a 30       	cpi	r16, 0x0A	; 10
    2d60:	08 f0       	brcs	.+2      	; 0x2d64 <xTaskCreate+0x9e>
    2d62:	a1 c0       	rjmp	.+322    	; 0x2ea6 <xTaskCreate+0x1e0>
    2d64:	d6 01       	movw	r26, r12
    2d66:	56 96       	adiw	r26, 0x16	; 22
    2d68:	0c 93       	st	X, r16
    2d6a:	56 97       	sbiw	r26, 0x16	; 22
    2d6c:	93 96       	adiw	r26, 0x23	; 35
    2d6e:	0c 93       	st	X, r16
    2d70:	93 97       	sbiw	r26, 0x23	; 35
    2d72:	94 96       	adiw	r26, 0x24	; 36
    2d74:	1c 92       	st	X, r1
    2d76:	e6 01       	movw	r28, r12
    2d78:	22 96       	adiw	r28, 0x02	; 2
    2d7a:	ce 01       	movw	r24, r28
    2d7c:	0e 94 af 0c 	call	0x195e	; 0x195e <vListInitialiseItem>
    2d80:	c6 01       	movw	r24, r12
    2d82:	0c 96       	adiw	r24, 0x0c	; 12
    2d84:	0e 94 af 0c 	call	0x195e	; 0x195e <vListInitialiseItem>
    2d88:	f6 01       	movw	r30, r12
    2d8a:	c0 86       	std	Z+8, r12	; 0x08
    2d8c:	d1 86       	std	Z+9, r13	; 0x09
    2d8e:	8a e0       	ldi	r24, 0x0A	; 10
    2d90:	90 e0       	ldi	r25, 0x00	; 0
    2d92:	80 1b       	sub	r24, r16
    2d94:	91 09       	sbc	r25, r1
    2d96:	84 87       	std	Z+12, r24	; 0x0c
    2d98:	95 87       	std	Z+13, r25	; 0x0d
    2d9a:	c2 8a       	std	Z+18, r12	; 0x12
    2d9c:	d3 8a       	std	Z+19, r13	; 0x13
    2d9e:	15 a2       	std	Z+37, r1	; 0x25
    2da0:	16 a2       	std	Z+38, r1	; 0x26
    2da2:	17 a2       	std	Z+39, r1	; 0x27
    2da4:	10 a6       	std	Z+40, r1	; 0x28
    2da6:	11 a6       	std	Z+41, r1	; 0x29
    2da8:	12 a6       	std	Z+42, r1	; 0x2a
    2daa:	13 a6       	std	Z+43, r1	; 0x2b
    2dac:	14 a6       	std	Z+44, r1	; 0x2c
    2dae:	15 a6       	std	Z+45, r1	; 0x2d
    2db0:	16 a6       	std	Z+46, r1	; 0x2e
    2db2:	17 a6       	std	Z+47, r1	; 0x2f
    2db4:	a3 01       	movw	r20, r6
    2db6:	b4 01       	movw	r22, r8
    2db8:	c5 01       	movw	r24, r10
    2dba:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <pxPortInitialiseStack>
    2dbe:	d6 01       	movw	r26, r12
    2dc0:	8d 93       	st	X+, r24
    2dc2:	9c 93       	st	X, r25
    2dc4:	e1 14       	cp	r14, r1
    2dc6:	f1 04       	cpc	r15, r1
    2dc8:	19 f0       	breq	.+6      	; 0x2dd0 <xTaskCreate+0x10a>
    2dca:	f7 01       	movw	r30, r14
    2dcc:	c0 82       	st	Z, r12
    2dce:	d1 82       	std	Z+1, r13	; 0x01
    2dd0:	0f b6       	in	r0, 0x3f	; 63
    2dd2:	f8 94       	cli
    2dd4:	0f 92       	push	r0
    2dd6:	80 91 af 25 	lds	r24, 0x25AF	; 0x8025af <uxCurrentNumberOfTasks>
    2dda:	8f 5f       	subi	r24, 0xFF	; 255
    2ddc:	80 93 af 25 	sts	0x25AF, r24	; 0x8025af <uxCurrentNumberOfTasks>
    2de0:	80 91 3c 26 	lds	r24, 0x263C	; 0x80263c <pxCurrentTCB>
    2de4:	90 91 3d 26 	lds	r25, 0x263D	; 0x80263d <pxCurrentTCB+0x1>
    2de8:	89 2b       	or	r24, r25
    2dea:	99 f0       	breq	.+38     	; 0x2e12 <xTaskCreate+0x14c>
    2dec:	80 91 ab 25 	lds	r24, 0x25AB	; 0x8025ab <xSchedulerRunning>
    2df0:	81 11       	cpse	r24, r1
    2df2:	18 c0       	rjmp	.+48     	; 0x2e24 <xTaskCreate+0x15e>
    2df4:	e0 91 3c 26 	lds	r30, 0x263C	; 0x80263c <pxCurrentTCB>
    2df8:	f0 91 3d 26 	lds	r31, 0x263D	; 0x80263d <pxCurrentTCB+0x1>
    2dfc:	d6 01       	movw	r26, r12
    2dfe:	56 96       	adiw	r26, 0x16	; 22
    2e00:	8c 91       	ld	r24, X
    2e02:	96 89       	ldd	r25, Z+22	; 0x16
    2e04:	89 17       	cp	r24, r25
    2e06:	88 f0       	brcs	.+34     	; 0x2e2a <xTaskCreate+0x164>
    2e08:	c0 92 3c 26 	sts	0x263C, r12	; 0x80263c <pxCurrentTCB>
    2e0c:	d0 92 3d 26 	sts	0x263D, r13	; 0x80263d <pxCurrentTCB+0x1>
    2e10:	0c c0       	rjmp	.+24     	; 0x2e2a <xTaskCreate+0x164>
    2e12:	c0 92 3c 26 	sts	0x263C, r12	; 0x80263c <pxCurrentTCB>
    2e16:	d0 92 3d 26 	sts	0x263D, r13	; 0x80263d <pxCurrentTCB+0x1>
    2e1a:	80 91 af 25 	lds	r24, 0x25AF	; 0x8025af <uxCurrentNumberOfTasks>
    2e1e:	81 30       	cpi	r24, 0x01	; 1
    2e20:	09 f4       	brne	.+2      	; 0x2e24 <xTaskCreate+0x15e>
    2e22:	56 c0       	rjmp	.+172    	; 0x2ed0 <xTaskCreate+0x20a>
    2e24:	d6 01       	movw	r26, r12
    2e26:	56 96       	adiw	r26, 0x16	; 22
    2e28:	8c 91       	ld	r24, X
    2e2a:	90 91 a7 25 	lds	r25, 0x25A7	; 0x8025a7 <uxTaskNumber>
    2e2e:	9f 5f       	subi	r25, 0xFF	; 255
    2e30:	90 93 a7 25 	sts	0x25A7, r25	; 0x8025a7 <uxTaskNumber>
    2e34:	f6 01       	movw	r30, r12
    2e36:	91 a3       	std	Z+33, r25	; 0x21
    2e38:	90 91 ac 25 	lds	r25, 0x25AC	; 0x8025ac <uxTopReadyPriority>
    2e3c:	98 17       	cp	r25, r24
    2e3e:	80 f1       	brcs	.+96     	; 0x2ea0 <xTaskCreate+0x1da>
    2e40:	90 e0       	ldi	r25, 0x00	; 0
    2e42:	9c 01       	movw	r18, r24
    2e44:	22 0f       	add	r18, r18
    2e46:	33 1f       	adc	r19, r19
    2e48:	22 0f       	add	r18, r18
    2e4a:	33 1f       	adc	r19, r19
    2e4c:	22 0f       	add	r18, r18
    2e4e:	33 1f       	adc	r19, r19
    2e50:	82 0f       	add	r24, r18
    2e52:	93 1f       	adc	r25, r19
    2e54:	be 01       	movw	r22, r28
    2e56:	8e 51       	subi	r24, 0x1E	; 30
    2e58:	9a 4d       	sbci	r25, 0xDA	; 218
    2e5a:	0e 94 b3 0c 	call	0x1966	; 0x1966 <vListInsertEnd>
    2e5e:	0f 90       	pop	r0
    2e60:	0f be       	out	0x3f, r0	; 63
    2e62:	80 91 ab 25 	lds	r24, 0x25AB	; 0x8025ab <xSchedulerRunning>
    2e66:	88 23       	and	r24, r24
    2e68:	51 f0       	breq	.+20     	; 0x2e7e <xTaskCreate+0x1b8>
    2e6a:	e0 91 3c 26 	lds	r30, 0x263C	; 0x80263c <pxCurrentTCB>
    2e6e:	f0 91 3d 26 	lds	r31, 0x263D	; 0x80263d <pxCurrentTCB+0x1>
    2e72:	96 89       	ldd	r25, Z+22	; 0x16
    2e74:	d6 01       	movw	r26, r12
    2e76:	56 96       	adiw	r26, 0x16	; 22
    2e78:	8c 91       	ld	r24, X
    2e7a:	98 17       	cp	r25, r24
    2e7c:	b0 f0       	brcs	.+44     	; 0x2eaa <xTaskCreate+0x1e4>
    2e7e:	81 e0       	ldi	r24, 0x01	; 1
    2e80:	df 91       	pop	r29
    2e82:	cf 91       	pop	r28
    2e84:	1f 91       	pop	r17
    2e86:	0f 91       	pop	r16
    2e88:	ff 90       	pop	r15
    2e8a:	ef 90       	pop	r14
    2e8c:	df 90       	pop	r13
    2e8e:	cf 90       	pop	r12
    2e90:	bf 90       	pop	r11
    2e92:	af 90       	pop	r10
    2e94:	9f 90       	pop	r9
    2e96:	8f 90       	pop	r8
    2e98:	7f 90       	pop	r7
    2e9a:	6f 90       	pop	r6
    2e9c:	5f 90       	pop	r5
    2e9e:	08 95       	ret
    2ea0:	80 93 ac 25 	sts	0x25AC, r24	; 0x8025ac <uxTopReadyPriority>
    2ea4:	cd cf       	rjmp	.-102    	; 0x2e40 <xTaskCreate+0x17a>
    2ea6:	09 e0       	ldi	r16, 0x09	; 9
    2ea8:	5d cf       	rjmp	.-326    	; 0x2d64 <xTaskCreate+0x9e>
    2eaa:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <vPortYield>
    2eae:	81 e0       	ldi	r24, 0x01	; 1
    2eb0:	e7 cf       	rjmp	.-50     	; 0x2e80 <xTaskCreate+0x1ba>
    2eb2:	c8 01       	movw	r24, r16
    2eb4:	0e 94 76 0c 	call	0x18ec	; 0x18ec <vPortFree>
    2eb8:	8f ef       	ldi	r24, 0xFF	; 255
    2eba:	e2 cf       	rjmp	.-60     	; 0x2e80 <xTaskCreate+0x1ba>
    2ebc:	60 e6       	ldi	r22, 0x60	; 96
    2ebe:	73 e0       	ldi	r23, 0x03	; 3
    2ec0:	85 eb       	ldi	r24, 0xB5	; 181
    2ec2:	90 e2       	ldi	r25, 0x20	; 32
    2ec4:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <vAssertCalled>
    2ec8:	f6 01       	movw	r30, r12
    2eca:	87 89       	ldd	r24, Z+23	; 0x17
    2ecc:	90 8d       	ldd	r25, Z+24	; 0x18
    2ece:	27 cf       	rjmp	.-434    	; 0x2d1e <xTaskCreate+0x58>
    2ed0:	02 ee       	ldi	r16, 0xE2	; 226
    2ed2:	15 e2       	ldi	r17, 0x25	; 37
    2ed4:	5c e3       	ldi	r21, 0x3C	; 60
    2ed6:	e5 2e       	mov	r14, r21
    2ed8:	56 e2       	ldi	r21, 0x26	; 38
    2eda:	f5 2e       	mov	r15, r21
    2edc:	c8 01       	movw	r24, r16
    2ede:	0e 94 a1 0c 	call	0x1942	; 0x1942 <vListInitialise>
    2ee2:	07 5f       	subi	r16, 0xF7	; 247
    2ee4:	1f 4f       	sbci	r17, 0xFF	; 255
    2ee6:	e0 16       	cp	r14, r16
    2ee8:	f1 06       	cpc	r15, r17
    2eea:	c1 f7       	brne	.-16     	; 0x2edc <xTaskCreate+0x216>
    2eec:	89 ed       	ldi	r24, 0xD9	; 217
    2eee:	95 e2       	ldi	r25, 0x25	; 37
    2ef0:	0e 94 a1 0c 	call	0x1942	; 0x1942 <vListInitialise>
    2ef4:	80 ed       	ldi	r24, 0xD0	; 208
    2ef6:	95 e2       	ldi	r25, 0x25	; 37
    2ef8:	0e 94 a1 0c 	call	0x1942	; 0x1942 <vListInitialise>
    2efc:	83 ec       	ldi	r24, 0xC3	; 195
    2efe:	95 e2       	ldi	r25, 0x25	; 37
    2f00:	0e 94 a1 0c 	call	0x1942	; 0x1942 <vListInitialise>
    2f04:	8a eb       	ldi	r24, 0xBA	; 186
    2f06:	95 e2       	ldi	r25, 0x25	; 37
    2f08:	0e 94 a1 0c 	call	0x1942	; 0x1942 <vListInitialise>
    2f0c:	80 eb       	ldi	r24, 0xB0	; 176
    2f0e:	95 e2       	ldi	r25, 0x25	; 37
    2f10:	0e 94 a1 0c 	call	0x1942	; 0x1942 <vListInitialise>
    2f14:	89 ed       	ldi	r24, 0xD9	; 217
    2f16:	95 e2       	ldi	r25, 0x25	; 37
    2f18:	80 93 ce 25 	sts	0x25CE, r24	; 0x8025ce <pxDelayedTaskList>
    2f1c:	90 93 cf 25 	sts	0x25CF, r25	; 0x8025cf <pxDelayedTaskList+0x1>
    2f20:	80 ed       	ldi	r24, 0xD0	; 208
    2f22:	95 e2       	ldi	r25, 0x25	; 37
    2f24:	80 93 cc 25 	sts	0x25CC, r24	; 0x8025cc <pxOverflowDelayedTaskList>
    2f28:	90 93 cd 25 	sts	0x25CD, r25	; 0x8025cd <pxOverflowDelayedTaskList+0x1>
    2f2c:	f6 01       	movw	r30, r12
    2f2e:	86 89       	ldd	r24, Z+22	; 0x16
    2f30:	7c cf       	rjmp	.-264    	; 0x2e2a <xTaskCreate+0x164>

00002f32 <vTaskSuspend>:
    2f32:	0f 93       	push	r16
    2f34:	1f 93       	push	r17
    2f36:	cf 93       	push	r28
    2f38:	df 93       	push	r29
    2f3a:	ec 01       	movw	r28, r24
    2f3c:	0f b6       	in	r0, 0x3f	; 63
    2f3e:	f8 94       	cli
    2f40:	0f 92       	push	r0
    2f42:	89 2b       	or	r24, r25
    2f44:	09 f4       	brne	.+2      	; 0x2f48 <vTaskSuspend+0x16>
    2f46:	62 c0       	rjmp	.+196    	; 0x300c <vTaskSuspend+0xda>
    2f48:	8e 01       	movw	r16, r28
    2f4a:	0e 5f       	subi	r16, 0xFE	; 254
    2f4c:	1f 4f       	sbci	r17, 0xFF	; 255
    2f4e:	c8 01       	movw	r24, r16
    2f50:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <uxListRemove>
    2f54:	8c 89       	ldd	r24, Y+20	; 0x14
    2f56:	9d 89       	ldd	r25, Y+21	; 0x15
    2f58:	89 2b       	or	r24, r25
    2f5a:	21 f0       	breq	.+8      	; 0x2f64 <vTaskSuspend+0x32>
    2f5c:	ce 01       	movw	r24, r28
    2f5e:	0c 96       	adiw	r24, 0x0c	; 12
    2f60:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <uxListRemove>
    2f64:	b8 01       	movw	r22, r16
    2f66:	80 eb       	ldi	r24, 0xB0	; 176
    2f68:	95 e2       	ldi	r25, 0x25	; 37
    2f6a:	0e 94 b3 0c 	call	0x1966	; 0x1966 <vListInsertEnd>
    2f6e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f70:	81 30       	cpi	r24, 0x01	; 1
    2f72:	21 f1       	breq	.+72     	; 0x2fbc <vTaskSuspend+0x8a>
    2f74:	0f 90       	pop	r0
    2f76:	0f be       	out	0x3f, r0	; 63
    2f78:	80 91 ab 25 	lds	r24, 0x25AB	; 0x8025ab <xSchedulerRunning>
    2f7c:	88 23       	and	r24, r24
    2f7e:	91 f0       	breq	.+36     	; 0x2fa4 <vTaskSuspend+0x72>
    2f80:	0f b6       	in	r0, 0x3f	; 63
    2f82:	f8 94       	cli
    2f84:	0f 92       	push	r0
    2f86:	e0 91 ce 25 	lds	r30, 0x25CE	; 0x8025ce <pxDelayedTaskList>
    2f8a:	f0 91 cf 25 	lds	r31, 0x25CF	; 0x8025cf <pxDelayedTaskList+0x1>
    2f8e:	80 81       	ld	r24, Z
    2f90:	81 11       	cpse	r24, r1
    2f92:	2b c0       	rjmp	.+86     	; 0x2fea <vTaskSuspend+0xb8>
    2f94:	8f ef       	ldi	r24, 0xFF	; 255
    2f96:	9f ef       	ldi	r25, 0xFF	; 255
    2f98:	80 93 a5 25 	sts	0x25A5, r24	; 0x8025a5 <xNextTaskUnblockTime>
    2f9c:	90 93 a6 25 	sts	0x25A6, r25	; 0x8025a6 <xNextTaskUnblockTime+0x1>
    2fa0:	0f 90       	pop	r0
    2fa2:	0f be       	out	0x3f, r0	; 63
    2fa4:	80 91 3c 26 	lds	r24, 0x263C	; 0x80263c <pxCurrentTCB>
    2fa8:	90 91 3d 26 	lds	r25, 0x263D	; 0x80263d <pxCurrentTCB+0x1>
    2fac:	c8 17       	cp	r28, r24
    2fae:	d9 07       	cpc	r29, r25
    2fb0:	39 f0       	breq	.+14     	; 0x2fc0 <vTaskSuspend+0x8e>
    2fb2:	df 91       	pop	r29
    2fb4:	cf 91       	pop	r28
    2fb6:	1f 91       	pop	r17
    2fb8:	0f 91       	pop	r16
    2fba:	08 95       	ret
    2fbc:	1f a6       	std	Y+47, r1	; 0x2f
    2fbe:	da cf       	rjmp	.-76     	; 0x2f74 <vTaskSuspend+0x42>
    2fc0:	80 91 ab 25 	lds	r24, 0x25AB	; 0x8025ab <xSchedulerRunning>
    2fc4:	88 23       	and	r24, r24
    2fc6:	a1 f0       	breq	.+40     	; 0x2ff0 <vTaskSuspend+0xbe>
    2fc8:	80 91 a2 25 	lds	r24, 0x25A2	; 0x8025a2 <uxSchedulerSuspended>
    2fcc:	88 23       	and	r24, r24
    2fce:	31 f0       	breq	.+12     	; 0x2fdc <vTaskSuspend+0xaa>
    2fd0:	68 ec       	ldi	r22, 0xC8	; 200
    2fd2:	76 e0       	ldi	r23, 0x06	; 6
    2fd4:	85 eb       	ldi	r24, 0xB5	; 181
    2fd6:	90 e2       	ldi	r25, 0x20	; 32
    2fd8:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <vAssertCalled>
    2fdc:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <vPortYield>
    2fe0:	df 91       	pop	r29
    2fe2:	cf 91       	pop	r28
    2fe4:	1f 91       	pop	r17
    2fe6:	0f 91       	pop	r16
    2fe8:	08 95       	ret
    2fea:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <prvResetNextTaskUnblockTime.part.0>
    2fee:	d8 cf       	rjmp	.-80     	; 0x2fa0 <vTaskSuspend+0x6e>
    2ff0:	90 91 b0 25 	lds	r25, 0x25B0	; 0x8025b0 <xSuspendedTaskList>
    2ff4:	80 91 af 25 	lds	r24, 0x25AF	; 0x8025af <uxCurrentNumberOfTasks>
    2ff8:	98 17       	cp	r25, r24
    2ffa:	99 f0       	breq	.+38     	; 0x3022 <vTaskSuspend+0xf0>
    2ffc:	80 91 a2 25 	lds	r24, 0x25A2	; 0x8025a2 <uxSchedulerSuspended>
    3000:	88 23       	and	r24, r24
    3002:	49 f0       	breq	.+18     	; 0x3016 <vTaskSuspend+0xe4>
    3004:	81 e0       	ldi	r24, 0x01	; 1
    3006:	80 93 a9 25 	sts	0x25A9, r24	; 0x8025a9 <xYieldPending>
    300a:	d3 cf       	rjmp	.-90     	; 0x2fb2 <vTaskSuspend+0x80>
    300c:	c0 91 3c 26 	lds	r28, 0x263C	; 0x80263c <pxCurrentTCB>
    3010:	d0 91 3d 26 	lds	r29, 0x263D	; 0x80263d <pxCurrentTCB+0x1>
    3014:	99 cf       	rjmp	.-206    	; 0x2f48 <vTaskSuspend+0x16>
    3016:	df 91       	pop	r29
    3018:	cf 91       	pop	r28
    301a:	1f 91       	pop	r17
    301c:	0f 91       	pop	r16
    301e:	0c 94 a1 15 	jmp	0x2b42	; 0x2b42 <vTaskSwitchContext.part.5>
    3022:	10 92 3c 26 	sts	0x263C, r1	; 0x80263c <pxCurrentTCB>
    3026:	10 92 3d 26 	sts	0x263D, r1	; 0x80263d <pxCurrentTCB+0x1>
    302a:	c3 cf       	rjmp	.-122    	; 0x2fb2 <vTaskSuspend+0x80>

0000302c <vTaskResume>:
    302c:	0f 93       	push	r16
    302e:	1f 93       	push	r17
    3030:	cf 93       	push	r28
    3032:	df 93       	push	r29
    3034:	ec 01       	movw	r28, r24
    3036:	89 2b       	or	r24, r25
    3038:	09 f4       	brne	.+2      	; 0x303c <vTaskResume+0x10>
    303a:	3d c0       	rjmp	.+122    	; 0x30b6 <vTaskResume+0x8a>
    303c:	80 91 3c 26 	lds	r24, 0x263C	; 0x80263c <pxCurrentTCB>
    3040:	90 91 3d 26 	lds	r25, 0x263D	; 0x80263d <pxCurrentTCB+0x1>
    3044:	c8 17       	cp	r28, r24
    3046:	d9 07       	cpc	r29, r25
    3048:	51 f0       	breq	.+20     	; 0x305e <vTaskResume+0x32>
    304a:	0f b6       	in	r0, 0x3f	; 63
    304c:	f8 94       	cli
    304e:	0f 92       	push	r0
    3050:	ce 01       	movw	r24, r28
    3052:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <prvTaskIsTaskSuspended>
    3056:	81 11       	cpse	r24, r1
    3058:	07 c0       	rjmp	.+14     	; 0x3068 <vTaskResume+0x3c>
    305a:	0f 90       	pop	r0
    305c:	0f be       	out	0x3f, r0	; 63
    305e:	df 91       	pop	r29
    3060:	cf 91       	pop	r28
    3062:	1f 91       	pop	r17
    3064:	0f 91       	pop	r16
    3066:	08 95       	ret
    3068:	8e 01       	movw	r16, r28
    306a:	0e 5f       	subi	r16, 0xFE	; 254
    306c:	1f 4f       	sbci	r17, 0xFF	; 255
    306e:	c8 01       	movw	r24, r16
    3070:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <uxListRemove>
    3074:	8e 89       	ldd	r24, Y+22	; 0x16
    3076:	90 91 ac 25 	lds	r25, 0x25AC	; 0x8025ac <uxTopReadyPriority>
    307a:	98 17       	cp	r25, r24
    307c:	10 f4       	brcc	.+4      	; 0x3082 <vTaskResume+0x56>
    307e:	80 93 ac 25 	sts	0x25AC, r24	; 0x8025ac <uxTopReadyPriority>
    3082:	90 e0       	ldi	r25, 0x00	; 0
    3084:	9c 01       	movw	r18, r24
    3086:	22 0f       	add	r18, r18
    3088:	33 1f       	adc	r19, r19
    308a:	22 0f       	add	r18, r18
    308c:	33 1f       	adc	r19, r19
    308e:	22 0f       	add	r18, r18
    3090:	33 1f       	adc	r19, r19
    3092:	82 0f       	add	r24, r18
    3094:	93 1f       	adc	r25, r19
    3096:	b8 01       	movw	r22, r16
    3098:	8e 51       	subi	r24, 0x1E	; 30
    309a:	9a 4d       	sbci	r25, 0xDA	; 218
    309c:	0e 94 b3 0c 	call	0x1966	; 0x1966 <vListInsertEnd>
    30a0:	e0 91 3c 26 	lds	r30, 0x263C	; 0x80263c <pxCurrentTCB>
    30a4:	f0 91 3d 26 	lds	r31, 0x263D	; 0x80263d <pxCurrentTCB+0x1>
    30a8:	9e 89       	ldd	r25, Y+22	; 0x16
    30aa:	86 89       	ldd	r24, Z+22	; 0x16
    30ac:	98 17       	cp	r25, r24
    30ae:	a8 f2       	brcs	.-86     	; 0x305a <vTaskResume+0x2e>
    30b0:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <vPortYield>
    30b4:	d2 cf       	rjmp	.-92     	; 0x305a <vTaskResume+0x2e>
    30b6:	6c e1       	ldi	r22, 0x1C	; 28
    30b8:	77 e0       	ldi	r23, 0x07	; 7
    30ba:	85 eb       	ldi	r24, 0xB5	; 181
    30bc:	90 e2       	ldi	r25, 0x20	; 32
    30be:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <vAssertCalled>
    30c2:	80 91 3c 26 	lds	r24, 0x263C	; 0x80263c <pxCurrentTCB>
    30c6:	90 91 3d 26 	lds	r25, 0x263D	; 0x80263d <pxCurrentTCB+0x1>
    30ca:	c9 cf       	rjmp	.-110    	; 0x305e <vTaskResume+0x32>

000030cc <vTaskStartScheduler>:
    30cc:	ef 92       	push	r14
    30ce:	ff 92       	push	r15
    30d0:	0f 93       	push	r16
    30d2:	83 ea       	ldi	r24, 0xA3	; 163
    30d4:	e8 2e       	mov	r14, r24
    30d6:	85 e2       	ldi	r24, 0x25	; 37
    30d8:	f8 2e       	mov	r15, r24
    30da:	00 e0       	ldi	r16, 0x00	; 0
    30dc:	20 e0       	ldi	r18, 0x00	; 0
    30de:	30 e0       	ldi	r19, 0x00	; 0
    30e0:	40 e0       	ldi	r20, 0x00	; 0
    30e2:	51 e0       	ldi	r21, 0x01	; 1
    30e4:	69 ec       	ldi	r22, 0xC9	; 201
    30e6:	70 e2       	ldi	r23, 0x20	; 32
    30e8:	87 ee       	ldi	r24, 0xE7	; 231
    30ea:	94 e1       	ldi	r25, 0x14	; 20
    30ec:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <xTaskCreate>
    30f0:	81 30       	cpi	r24, 0x01	; 1
    30f2:	79 f0       	breq	.+30     	; 0x3112 <vTaskStartScheduler+0x46>
    30f4:	8f 3f       	cpi	r24, 0xFF	; 255
    30f6:	21 f0       	breq	.+8      	; 0x3100 <vTaskStartScheduler+0x34>
    30f8:	0f 91       	pop	r16
    30fa:	ff 90       	pop	r15
    30fc:	ef 90       	pop	r14
    30fe:	08 95       	ret
    3100:	67 e0       	ldi	r22, 0x07	; 7
    3102:	78 e0       	ldi	r23, 0x08	; 8
    3104:	85 eb       	ldi	r24, 0xB5	; 181
    3106:	90 e2       	ldi	r25, 0x20	; 32
    3108:	0f 91       	pop	r16
    310a:	ff 90       	pop	r15
    310c:	ef 90       	pop	r14
    310e:	0c 94 81 1d 	jmp	0x3b02	; 0x3b02 <vAssertCalled>
    3112:	f8 94       	cli
    3114:	2f ef       	ldi	r18, 0xFF	; 255
    3116:	3f ef       	ldi	r19, 0xFF	; 255
    3118:	20 93 a5 25 	sts	0x25A5, r18	; 0x8025a5 <xNextTaskUnblockTime>
    311c:	30 93 a6 25 	sts	0x25A6, r19	; 0x8025a6 <xNextTaskUnblockTime+0x1>
    3120:	80 93 ab 25 	sts	0x25AB, r24	; 0x8025ab <xSchedulerRunning>
    3124:	10 92 ad 25 	sts	0x25AD, r1	; 0x8025ad <xTickCount>
    3128:	10 92 ae 25 	sts	0x25AE, r1	; 0x8025ae <xTickCount+0x1>
    312c:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <vConfigureTimerForRunTimeStats>
    3130:	0f 91       	pop	r16
    3132:	ff 90       	pop	r15
    3134:	ef 90       	pop	r14
    3136:	0c 94 99 0d 	jmp	0x1b32	; 0x1b32 <xPortStartScheduler>

0000313a <vTaskSuspendAll>:
    313a:	80 91 a2 25 	lds	r24, 0x25A2	; 0x8025a2 <uxSchedulerSuspended>
    313e:	8f 5f       	subi	r24, 0xFF	; 255
    3140:	80 93 a2 25 	sts	0x25A2, r24	; 0x8025a2 <uxSchedulerSuspended>
    3144:	08 95       	ret

00003146 <xTaskGetTickCount>:
    3146:	0f b6       	in	r0, 0x3f	; 63
    3148:	f8 94       	cli
    314a:	0f 92       	push	r0
    314c:	80 91 ad 25 	lds	r24, 0x25AD	; 0x8025ad <xTickCount>
    3150:	90 91 ae 25 	lds	r25, 0x25AE	; 0x8025ae <xTickCount+0x1>
    3154:	0f 90       	pop	r0
    3156:	0f be       	out	0x3f, r0	; 63
    3158:	08 95       	ret

0000315a <xTaskIncrementTick>:
    315a:	df 92       	push	r13
    315c:	ef 92       	push	r14
    315e:	ff 92       	push	r15
    3160:	0f 93       	push	r16
    3162:	1f 93       	push	r17
    3164:	cf 93       	push	r28
    3166:	df 93       	push	r29
    3168:	80 91 a2 25 	lds	r24, 0x25A2	; 0x8025a2 <uxSchedulerSuspended>
    316c:	81 11       	cpse	r24, r1
    316e:	b9 c0       	rjmp	.+370    	; 0x32e2 <xTaskIncrementTick+0x188>
    3170:	e0 90 ad 25 	lds	r14, 0x25AD	; 0x8025ad <xTickCount>
    3174:	f0 90 ae 25 	lds	r15, 0x25AE	; 0x8025ae <xTickCount+0x1>
    3178:	8f ef       	ldi	r24, 0xFF	; 255
    317a:	e8 1a       	sub	r14, r24
    317c:	f8 0a       	sbc	r15, r24
    317e:	e0 92 ad 25 	sts	0x25AD, r14	; 0x8025ad <xTickCount>
    3182:	f0 92 ae 25 	sts	0x25AE, r15	; 0x8025ae <xTickCount+0x1>
    3186:	e1 14       	cp	r14, r1
    3188:	f1 04       	cpc	r15, r1
    318a:	49 f5       	brne	.+82     	; 0x31de <xTaskIncrementTick+0x84>
    318c:	e0 91 ce 25 	lds	r30, 0x25CE	; 0x8025ce <pxDelayedTaskList>
    3190:	f0 91 cf 25 	lds	r31, 0x25CF	; 0x8025cf <pxDelayedTaskList+0x1>
    3194:	80 81       	ld	r24, Z
    3196:	81 11       	cpse	r24, r1
    3198:	ab c0       	rjmp	.+342    	; 0x32f0 <xTaskIncrementTick+0x196>
    319a:	80 91 ce 25 	lds	r24, 0x25CE	; 0x8025ce <pxDelayedTaskList>
    319e:	90 91 cf 25 	lds	r25, 0x25CF	; 0x8025cf <pxDelayedTaskList+0x1>
    31a2:	20 91 cc 25 	lds	r18, 0x25CC	; 0x8025cc <pxOverflowDelayedTaskList>
    31a6:	30 91 cd 25 	lds	r19, 0x25CD	; 0x8025cd <pxOverflowDelayedTaskList+0x1>
    31aa:	20 93 ce 25 	sts	0x25CE, r18	; 0x8025ce <pxDelayedTaskList>
    31ae:	30 93 cf 25 	sts	0x25CF, r19	; 0x8025cf <pxDelayedTaskList+0x1>
    31b2:	80 93 cc 25 	sts	0x25CC, r24	; 0x8025cc <pxOverflowDelayedTaskList>
    31b6:	90 93 cd 25 	sts	0x25CD, r25	; 0x8025cd <pxOverflowDelayedTaskList+0x1>
    31ba:	80 91 a8 25 	lds	r24, 0x25A8	; 0x8025a8 <xNumOfOverflows>
    31be:	8f 5f       	subi	r24, 0xFF	; 255
    31c0:	80 93 a8 25 	sts	0x25A8, r24	; 0x8025a8 <xNumOfOverflows>
    31c4:	e0 91 ce 25 	lds	r30, 0x25CE	; 0x8025ce <pxDelayedTaskList>
    31c8:	f0 91 cf 25 	lds	r31, 0x25CF	; 0x8025cf <pxDelayedTaskList+0x1>
    31cc:	80 81       	ld	r24, Z
    31ce:	81 11       	cpse	r24, r1
    31d0:	96 c0       	rjmp	.+300    	; 0x32fe <xTaskIncrementTick+0x1a4>
    31d2:	8f ef       	ldi	r24, 0xFF	; 255
    31d4:	9f ef       	ldi	r25, 0xFF	; 255
    31d6:	80 93 a5 25 	sts	0x25A5, r24	; 0x8025a5 <xNextTaskUnblockTime>
    31da:	90 93 a6 25 	sts	0x25A6, r25	; 0x8025a6 <xNextTaskUnblockTime+0x1>
    31de:	80 91 a5 25 	lds	r24, 0x25A5	; 0x8025a5 <xNextTaskUnblockTime>
    31e2:	90 91 a6 25 	lds	r25, 0x25A6	; 0x8025a6 <xNextTaskUnblockTime+0x1>
    31e6:	d1 2c       	mov	r13, r1
    31e8:	e8 16       	cp	r14, r24
    31ea:	f9 06       	cpc	r15, r25
    31ec:	08 f4       	brcc	.+2      	; 0x31f0 <xTaskIncrementTick+0x96>
    31ee:	53 c0       	rjmp	.+166    	; 0x3296 <xTaskIncrementTick+0x13c>
    31f0:	e0 91 ce 25 	lds	r30, 0x25CE	; 0x8025ce <pxDelayedTaskList>
    31f4:	f0 91 cf 25 	lds	r31, 0x25CF	; 0x8025cf <pxDelayedTaskList+0x1>
    31f8:	80 81       	ld	r24, Z
    31fa:	88 23       	and	r24, r24
    31fc:	09 f4       	brne	.+2      	; 0x3200 <xTaskIncrementTick+0xa6>
    31fe:	45 c0       	rjmp	.+138    	; 0x328a <xTaskIncrementTick+0x130>
    3200:	e0 91 ce 25 	lds	r30, 0x25CE	; 0x8025ce <pxDelayedTaskList>
    3204:	f0 91 cf 25 	lds	r31, 0x25CF	; 0x8025cf <pxDelayedTaskList+0x1>
    3208:	05 80       	ldd	r0, Z+5	; 0x05
    320a:	f6 81       	ldd	r31, Z+6	; 0x06
    320c:	e0 2d       	mov	r30, r0
    320e:	c6 81       	ldd	r28, Z+6	; 0x06
    3210:	d7 81       	ldd	r29, Z+7	; 0x07
    3212:	8a 81       	ldd	r24, Y+2	; 0x02
    3214:	9b 81       	ldd	r25, Y+3	; 0x03
    3216:	e8 16       	cp	r14, r24
    3218:	f9 06       	cpc	r15, r25
    321a:	08 f4       	brcc	.+2      	; 0x321e <xTaskIncrementTick+0xc4>
    321c:	73 c0       	rjmp	.+230    	; 0x3304 <xTaskIncrementTick+0x1aa>
    321e:	8e 01       	movw	r16, r28
    3220:	0e 5f       	subi	r16, 0xFE	; 254
    3222:	1f 4f       	sbci	r17, 0xFF	; 255
    3224:	c8 01       	movw	r24, r16
    3226:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <uxListRemove>
    322a:	8c 89       	ldd	r24, Y+20	; 0x14
    322c:	9d 89       	ldd	r25, Y+21	; 0x15
    322e:	89 2b       	or	r24, r25
    3230:	21 f0       	breq	.+8      	; 0x323a <xTaskIncrementTick+0xe0>
    3232:	ce 01       	movw	r24, r28
    3234:	0c 96       	adiw	r24, 0x0c	; 12
    3236:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <uxListRemove>
    323a:	8e 89       	ldd	r24, Y+22	; 0x16
    323c:	90 91 ac 25 	lds	r25, 0x25AC	; 0x8025ac <uxTopReadyPriority>
    3240:	98 17       	cp	r25, r24
    3242:	10 f4       	brcc	.+4      	; 0x3248 <xTaskIncrementTick+0xee>
    3244:	80 93 ac 25 	sts	0x25AC, r24	; 0x8025ac <uxTopReadyPriority>
    3248:	90 e0       	ldi	r25, 0x00	; 0
    324a:	9c 01       	movw	r18, r24
    324c:	22 0f       	add	r18, r18
    324e:	33 1f       	adc	r19, r19
    3250:	22 0f       	add	r18, r18
    3252:	33 1f       	adc	r19, r19
    3254:	22 0f       	add	r18, r18
    3256:	33 1f       	adc	r19, r19
    3258:	82 0f       	add	r24, r18
    325a:	93 1f       	adc	r25, r19
    325c:	b8 01       	movw	r22, r16
    325e:	8e 51       	subi	r24, 0x1E	; 30
    3260:	9a 4d       	sbci	r25, 0xDA	; 218
    3262:	0e 94 b3 0c 	call	0x1966	; 0x1966 <vListInsertEnd>
    3266:	e0 91 3c 26 	lds	r30, 0x263C	; 0x80263c <pxCurrentTCB>
    326a:	f0 91 3d 26 	lds	r31, 0x263D	; 0x80263d <pxCurrentTCB+0x1>
    326e:	9e 89       	ldd	r25, Y+22	; 0x16
    3270:	86 89       	ldd	r24, Z+22	; 0x16
    3272:	98 17       	cp	r25, r24
    3274:	08 f4       	brcc	.+2      	; 0x3278 <xTaskIncrementTick+0x11e>
    3276:	bc cf       	rjmp	.-136    	; 0x31f0 <xTaskIncrementTick+0x96>
    3278:	dd 24       	eor	r13, r13
    327a:	d3 94       	inc	r13
    327c:	e0 91 ce 25 	lds	r30, 0x25CE	; 0x8025ce <pxDelayedTaskList>
    3280:	f0 91 cf 25 	lds	r31, 0x25CF	; 0x8025cf <pxDelayedTaskList+0x1>
    3284:	80 81       	ld	r24, Z
    3286:	81 11       	cpse	r24, r1
    3288:	bb cf       	rjmp	.-138    	; 0x3200 <xTaskIncrementTick+0xa6>
    328a:	8f ef       	ldi	r24, 0xFF	; 255
    328c:	9f ef       	ldi	r25, 0xFF	; 255
    328e:	80 93 a5 25 	sts	0x25A5, r24	; 0x8025a5 <xNextTaskUnblockTime>
    3292:	90 93 a6 25 	sts	0x25A6, r25	; 0x8025a6 <xNextTaskUnblockTime+0x1>
    3296:	e0 91 3c 26 	lds	r30, 0x263C	; 0x80263c <pxCurrentTCB>
    329a:	f0 91 3d 26 	lds	r31, 0x263D	; 0x80263d <pxCurrentTCB+0x1>
    329e:	86 89       	ldd	r24, Z+22	; 0x16
    32a0:	90 e0       	ldi	r25, 0x00	; 0
    32a2:	fc 01       	movw	r30, r24
    32a4:	ee 0f       	add	r30, r30
    32a6:	ff 1f       	adc	r31, r31
    32a8:	ee 0f       	add	r30, r30
    32aa:	ff 1f       	adc	r31, r31
    32ac:	ee 0f       	add	r30, r30
    32ae:	ff 1f       	adc	r31, r31
    32b0:	8e 0f       	add	r24, r30
    32b2:	9f 1f       	adc	r25, r31
    32b4:	fc 01       	movw	r30, r24
    32b6:	ee 51       	subi	r30, 0x1E	; 30
    32b8:	fa 4d       	sbci	r31, 0xDA	; 218
    32ba:	80 81       	ld	r24, Z
    32bc:	82 30       	cpi	r24, 0x02	; 2
    32be:	10 f0       	brcs	.+4      	; 0x32c4 <xTaskIncrementTick+0x16a>
    32c0:	dd 24       	eor	r13, r13
    32c2:	d3 94       	inc	r13
    32c4:	80 91 a9 25 	lds	r24, 0x25A9	; 0x8025a9 <xYieldPending>
    32c8:	88 23       	and	r24, r24
    32ca:	11 f0       	breq	.+4      	; 0x32d0 <xTaskIncrementTick+0x176>
    32cc:	dd 24       	eor	r13, r13
    32ce:	d3 94       	inc	r13
    32d0:	8d 2d       	mov	r24, r13
    32d2:	df 91       	pop	r29
    32d4:	cf 91       	pop	r28
    32d6:	1f 91       	pop	r17
    32d8:	0f 91       	pop	r16
    32da:	ff 90       	pop	r15
    32dc:	ef 90       	pop	r14
    32de:	df 90       	pop	r13
    32e0:	08 95       	ret
    32e2:	80 91 aa 25 	lds	r24, 0x25AA	; 0x8025aa <uxPendedTicks>
    32e6:	8f 5f       	subi	r24, 0xFF	; 255
    32e8:	80 93 aa 25 	sts	0x25AA, r24	; 0x8025aa <uxPendedTicks>
    32ec:	d1 2c       	mov	r13, r1
    32ee:	ea cf       	rjmp	.-44     	; 0x32c4 <xTaskIncrementTick+0x16a>
    32f0:	66 e6       	ldi	r22, 0x66	; 102
    32f2:	7a e0       	ldi	r23, 0x0A	; 10
    32f4:	85 eb       	ldi	r24, 0xB5	; 181
    32f6:	90 e2       	ldi	r25, 0x20	; 32
    32f8:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <vAssertCalled>
    32fc:	4e cf       	rjmp	.-356    	; 0x319a <xTaskIncrementTick+0x40>
    32fe:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <prvResetNextTaskUnblockTime.part.0>
    3302:	6d cf       	rjmp	.-294    	; 0x31de <xTaskIncrementTick+0x84>
    3304:	80 93 a5 25 	sts	0x25A5, r24	; 0x8025a5 <xNextTaskUnblockTime>
    3308:	90 93 a6 25 	sts	0x25A6, r25	; 0x8025a6 <xNextTaskUnblockTime+0x1>
    330c:	c4 cf       	rjmp	.-120    	; 0x3296 <xTaskIncrementTick+0x13c>

0000330e <xTaskResumeAll>:
    330e:	ff 92       	push	r15
    3310:	0f 93       	push	r16
    3312:	1f 93       	push	r17
    3314:	cf 93       	push	r28
    3316:	df 93       	push	r29
    3318:	80 91 a2 25 	lds	r24, 0x25A2	; 0x8025a2 <uxSchedulerSuspended>
    331c:	88 23       	and	r24, r24
    331e:	09 f4       	brne	.+2      	; 0x3322 <xTaskResumeAll+0x14>
    3320:	77 c0       	rjmp	.+238    	; 0x3410 <xTaskResumeAll+0x102>
    3322:	0f b6       	in	r0, 0x3f	; 63
    3324:	f8 94       	cli
    3326:	0f 92       	push	r0
    3328:	80 91 a2 25 	lds	r24, 0x25A2	; 0x8025a2 <uxSchedulerSuspended>
    332c:	81 50       	subi	r24, 0x01	; 1
    332e:	80 93 a2 25 	sts	0x25A2, r24	; 0x8025a2 <uxSchedulerSuspended>
    3332:	80 91 a2 25 	lds	r24, 0x25A2	; 0x8025a2 <uxSchedulerSuspended>
    3336:	81 11       	cpse	r24, r1
    3338:	62 c0       	rjmp	.+196    	; 0x33fe <xTaskResumeAll+0xf0>
    333a:	80 91 af 25 	lds	r24, 0x25AF	; 0x8025af <uxCurrentNumberOfTasks>
    333e:	88 23       	and	r24, r24
    3340:	09 f4       	brne	.+2      	; 0x3344 <xTaskResumeAll+0x36>
    3342:	5d c0       	rjmp	.+186    	; 0x33fe <xTaskResumeAll+0xf0>
    3344:	c0 e0       	ldi	r28, 0x00	; 0
    3346:	d0 e0       	ldi	r29, 0x00	; 0
    3348:	ff 24       	eor	r15, r15
    334a:	f3 94       	inc	r15
    334c:	80 91 c3 25 	lds	r24, 0x25C3	; 0x8025c3 <xPendingReadyList>
    3350:	88 23       	and	r24, r24
    3352:	a1 f1       	breq	.+104    	; 0x33bc <xTaskResumeAll+0xae>
    3354:	e0 91 c8 25 	lds	r30, 0x25C8	; 0x8025c8 <xPendingReadyList+0x5>
    3358:	f0 91 c9 25 	lds	r31, 0x25C9	; 0x8025c9 <xPendingReadyList+0x6>
    335c:	c6 81       	ldd	r28, Z+6	; 0x06
    335e:	d7 81       	ldd	r29, Z+7	; 0x07
    3360:	ce 01       	movw	r24, r28
    3362:	0c 96       	adiw	r24, 0x0c	; 12
    3364:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <uxListRemove>
    3368:	8e 01       	movw	r16, r28
    336a:	0e 5f       	subi	r16, 0xFE	; 254
    336c:	1f 4f       	sbci	r17, 0xFF	; 255
    336e:	c8 01       	movw	r24, r16
    3370:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <uxListRemove>
    3374:	8e 89       	ldd	r24, Y+22	; 0x16
    3376:	90 91 ac 25 	lds	r25, 0x25AC	; 0x8025ac <uxTopReadyPriority>
    337a:	98 17       	cp	r25, r24
    337c:	10 f4       	brcc	.+4      	; 0x3382 <xTaskResumeAll+0x74>
    337e:	80 93 ac 25 	sts	0x25AC, r24	; 0x8025ac <uxTopReadyPriority>
    3382:	90 e0       	ldi	r25, 0x00	; 0
    3384:	9c 01       	movw	r18, r24
    3386:	22 0f       	add	r18, r18
    3388:	33 1f       	adc	r19, r19
    338a:	22 0f       	add	r18, r18
    338c:	33 1f       	adc	r19, r19
    338e:	22 0f       	add	r18, r18
    3390:	33 1f       	adc	r19, r19
    3392:	82 0f       	add	r24, r18
    3394:	93 1f       	adc	r25, r19
    3396:	b8 01       	movw	r22, r16
    3398:	8e 51       	subi	r24, 0x1E	; 30
    339a:	9a 4d       	sbci	r25, 0xDA	; 218
    339c:	0e 94 b3 0c 	call	0x1966	; 0x1966 <vListInsertEnd>
    33a0:	e0 91 3c 26 	lds	r30, 0x263C	; 0x80263c <pxCurrentTCB>
    33a4:	f0 91 3d 26 	lds	r31, 0x263D	; 0x80263d <pxCurrentTCB+0x1>
    33a8:	9e 89       	ldd	r25, Y+22	; 0x16
    33aa:	86 89       	ldd	r24, Z+22	; 0x16
    33ac:	98 17       	cp	r25, r24
    33ae:	70 f2       	brcs	.-100    	; 0x334c <xTaskResumeAll+0x3e>
    33b0:	f0 92 a9 25 	sts	0x25A9, r15	; 0x8025a9 <xYieldPending>
    33b4:	80 91 c3 25 	lds	r24, 0x25C3	; 0x8025c3 <xPendingReadyList>
    33b8:	81 11       	cpse	r24, r1
    33ba:	cc cf       	rjmp	.-104    	; 0x3354 <xTaskResumeAll+0x46>
    33bc:	cd 2b       	or	r28, r29
    33be:	69 f0       	breq	.+26     	; 0x33da <xTaskResumeAll+0xcc>
    33c0:	e0 91 ce 25 	lds	r30, 0x25CE	; 0x8025ce <pxDelayedTaskList>
    33c4:	f0 91 cf 25 	lds	r31, 0x25CF	; 0x8025cf <pxDelayedTaskList+0x1>
    33c8:	80 81       	ld	r24, Z
    33ca:	81 11       	cpse	r24, r1
    33cc:	2c c0       	rjmp	.+88     	; 0x3426 <xTaskResumeAll+0x118>
    33ce:	8f ef       	ldi	r24, 0xFF	; 255
    33d0:	9f ef       	ldi	r25, 0xFF	; 255
    33d2:	80 93 a5 25 	sts	0x25A5, r24	; 0x8025a5 <xNextTaskUnblockTime>
    33d6:	90 93 a6 25 	sts	0x25A6, r25	; 0x8025a6 <xNextTaskUnblockTime+0x1>
    33da:	c0 91 aa 25 	lds	r28, 0x25AA	; 0x8025aa <uxPendedTicks>
    33de:	cc 23       	and	r28, r28
    33e0:	51 f0       	breq	.+20     	; 0x33f6 <xTaskResumeAll+0xe8>
    33e2:	d1 e0       	ldi	r29, 0x01	; 1
    33e4:	0e 94 ad 18 	call	0x315a	; 0x315a <xTaskIncrementTick>
    33e8:	81 11       	cpse	r24, r1
    33ea:	d0 93 a9 25 	sts	0x25A9, r29	; 0x8025a9 <xYieldPending>
    33ee:	c1 50       	subi	r28, 0x01	; 1
    33f0:	c9 f7       	brne	.-14     	; 0x33e4 <xTaskResumeAll+0xd6>
    33f2:	10 92 aa 25 	sts	0x25AA, r1	; 0x8025aa <uxPendedTicks>
    33f6:	80 91 a9 25 	lds	r24, 0x25A9	; 0x8025a9 <xYieldPending>
    33fa:	81 11       	cpse	r24, r1
    33fc:	10 c0       	rjmp	.+32     	; 0x341e <xTaskResumeAll+0x110>
    33fe:	80 e0       	ldi	r24, 0x00	; 0
    3400:	0f 90       	pop	r0
    3402:	0f be       	out	0x3f, r0	; 63
    3404:	df 91       	pop	r29
    3406:	cf 91       	pop	r28
    3408:	1f 91       	pop	r17
    340a:	0f 91       	pop	r16
    340c:	ff 90       	pop	r15
    340e:	08 95       	ret
    3410:	6c e6       	ldi	r22, 0x6C	; 108
    3412:	78 e0       	ldi	r23, 0x08	; 8
    3414:	85 eb       	ldi	r24, 0xB5	; 181
    3416:	90 e2       	ldi	r25, 0x20	; 32
    3418:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <vAssertCalled>
    341c:	82 cf       	rjmp	.-252    	; 0x3322 <xTaskResumeAll+0x14>
    341e:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <vPortYield>
    3422:	81 e0       	ldi	r24, 0x01	; 1
    3424:	ed cf       	rjmp	.-38     	; 0x3400 <xTaskResumeAll+0xf2>
    3426:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <prvResetNextTaskUnblockTime.part.0>
    342a:	d7 cf       	rjmp	.-82     	; 0x33da <xTaskResumeAll+0xcc>

0000342c <vTaskDelayUntil>:
    342c:	0f 93       	push	r16
    342e:	1f 93       	push	r17
    3430:	cf 93       	push	r28
    3432:	df 93       	push	r29
    3434:	8c 01       	movw	r16, r24
    3436:	eb 01       	movw	r28, r22
    3438:	89 2b       	or	r24, r25
    343a:	09 f4       	brne	.+2      	; 0x343e <vTaskDelayUntil+0x12>
    343c:	46 c0       	rjmp	.+140    	; 0x34ca <vTaskDelayUntil+0x9e>
    343e:	20 97       	sbiw	r28, 0x00	; 0
    3440:	e9 f1       	breq	.+122    	; 0x34bc <vTaskDelayUntil+0x90>
    3442:	80 91 a2 25 	lds	r24, 0x25A2	; 0x8025a2 <uxSchedulerSuspended>
    3446:	81 11       	cpse	r24, r1
    3448:	32 c0       	rjmp	.+100    	; 0x34ae <vTaskDelayUntil+0x82>
    344a:	80 91 a2 25 	lds	r24, 0x25A2	; 0x8025a2 <uxSchedulerSuspended>
    344e:	8f 5f       	subi	r24, 0xFF	; 255
    3450:	80 93 a2 25 	sts	0x25A2, r24	; 0x8025a2 <uxSchedulerSuspended>
    3454:	40 91 ad 25 	lds	r20, 0x25AD	; 0x8025ad <xTickCount>
    3458:	50 91 ae 25 	lds	r21, 0x25AE	; 0x8025ae <xTickCount+0x1>
    345c:	f8 01       	movw	r30, r16
    345e:	20 81       	ld	r18, Z
    3460:	31 81       	ldd	r19, Z+1	; 0x01
    3462:	ce 01       	movw	r24, r28
    3464:	82 0f       	add	r24, r18
    3466:	93 1f       	adc	r25, r19
    3468:	42 17       	cp	r20, r18
    346a:	53 07       	cpc	r21, r19
    346c:	88 f4       	brcc	.+34     	; 0x3490 <vTaskDelayUntil+0x64>
    346e:	82 17       	cp	r24, r18
    3470:	93 07       	cpc	r25, r19
    3472:	88 f0       	brcs	.+34     	; 0x3496 <vTaskDelayUntil+0x6a>
    3474:	f8 01       	movw	r30, r16
    3476:	80 83       	st	Z, r24
    3478:	91 83       	std	Z+1, r25	; 0x01
    347a:	0e 94 87 19 	call	0x330e	; 0x330e <xTaskResumeAll>
    347e:	81 11       	cpse	r24, r1
    3480:	02 c0       	rjmp	.+4      	; 0x3486 <vTaskDelayUntil+0x5a>
    3482:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <vPortYield>
    3486:	df 91       	pop	r29
    3488:	cf 91       	pop	r28
    348a:	1f 91       	pop	r17
    348c:	0f 91       	pop	r16
    348e:	08 95       	ret
    3490:	82 17       	cp	r24, r18
    3492:	93 07       	cpc	r25, r19
    3494:	18 f0       	brcs	.+6      	; 0x349c <vTaskDelayUntil+0x70>
    3496:	48 17       	cp	r20, r24
    3498:	59 07       	cpc	r21, r25
    349a:	60 f7       	brcc	.-40     	; 0x3474 <vTaskDelayUntil+0x48>
    349c:	f8 01       	movw	r30, r16
    349e:	80 83       	st	Z, r24
    34a0:	91 83       	std	Z+1, r25	; 0x01
    34a2:	60 e0       	ldi	r22, 0x00	; 0
    34a4:	84 1b       	sub	r24, r20
    34a6:	95 0b       	sbc	r25, r21
    34a8:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <prvAddCurrentTaskToDelayedList>
    34ac:	e6 cf       	rjmp	.-52     	; 0x347a <vTaskDelayUntil+0x4e>
    34ae:	6c ec       	ldi	r22, 0xCC	; 204
    34b0:	74 e0       	ldi	r23, 0x04	; 4
    34b2:	85 eb       	ldi	r24, 0xB5	; 181
    34b4:	90 e2       	ldi	r25, 0x20	; 32
    34b6:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <vAssertCalled>
    34ba:	c7 cf       	rjmp	.-114    	; 0x344a <vTaskDelayUntil+0x1e>
    34bc:	6b ec       	ldi	r22, 0xCB	; 203
    34be:	74 e0       	ldi	r23, 0x04	; 4
    34c0:	85 eb       	ldi	r24, 0xB5	; 181
    34c2:	90 e2       	ldi	r25, 0x20	; 32
    34c4:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <vAssertCalled>
    34c8:	bc cf       	rjmp	.-136    	; 0x3442 <vTaskDelayUntil+0x16>
    34ca:	6a ec       	ldi	r22, 0xCA	; 202
    34cc:	74 e0       	ldi	r23, 0x04	; 4
    34ce:	85 eb       	ldi	r24, 0xB5	; 181
    34d0:	90 e2       	ldi	r25, 0x20	; 32
    34d2:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <vAssertCalled>
    34d6:	b3 cf       	rjmp	.-154    	; 0x343e <vTaskDelayUntil+0x12>

000034d8 <vTaskDelay>:
    34d8:	cf 93       	push	r28
    34da:	df 93       	push	r29
    34dc:	ec 01       	movw	r28, r24
    34de:	89 2b       	or	r24, r25
    34e0:	29 f4       	brne	.+10     	; 0x34ec <vTaskDelay+0x14>
    34e2:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <vPortYield>
    34e6:	df 91       	pop	r29
    34e8:	cf 91       	pop	r28
    34ea:	08 95       	ret
    34ec:	80 91 a2 25 	lds	r24, 0x25A2	; 0x8025a2 <uxSchedulerSuspended>
    34f0:	81 11       	cpse	r24, r1
    34f2:	10 c0       	rjmp	.+32     	; 0x3514 <vTaskDelay+0x3c>
    34f4:	80 91 a2 25 	lds	r24, 0x25A2	; 0x8025a2 <uxSchedulerSuspended>
    34f8:	8f 5f       	subi	r24, 0xFF	; 255
    34fa:	80 93 a2 25 	sts	0x25A2, r24	; 0x8025a2 <uxSchedulerSuspended>
    34fe:	60 e0       	ldi	r22, 0x00	; 0
    3500:	ce 01       	movw	r24, r28
    3502:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <prvAddCurrentTaskToDelayedList>
    3506:	0e 94 87 19 	call	0x330e	; 0x330e <xTaskResumeAll>
    350a:	88 23       	and	r24, r24
    350c:	51 f3       	breq	.-44     	; 0x34e2 <vTaskDelay+0xa>
    350e:	df 91       	pop	r29
    3510:	cf 91       	pop	r28
    3512:	08 95       	ret
    3514:	60 e2       	ldi	r22, 0x20	; 32
    3516:	75 e0       	ldi	r23, 0x05	; 5
    3518:	85 eb       	ldi	r24, 0xB5	; 181
    351a:	90 e2       	ldi	r25, 0x20	; 32
    351c:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <vAssertCalled>
    3520:	e9 cf       	rjmp	.-46     	; 0x34f4 <vTaskDelay+0x1c>

00003522 <vTaskSwitchContext>:
    3522:	80 91 a2 25 	lds	r24, 0x25A2	; 0x8025a2 <uxSchedulerSuspended>
    3526:	81 11       	cpse	r24, r1
    3528:	02 c0       	rjmp	.+4      	; 0x352e <vTaskSwitchContext+0xc>
    352a:	0c 94 a1 15 	jmp	0x2b42	; 0x2b42 <vTaskSwitchContext.part.5>
    352e:	81 e0       	ldi	r24, 0x01	; 1
    3530:	80 93 a9 25 	sts	0x25A9, r24	; 0x8025a9 <xYieldPending>
    3534:	08 95       	ret

00003536 <vTaskPlaceOnEventList>:
    3536:	0f 93       	push	r16
    3538:	1f 93       	push	r17
    353a:	cf 93       	push	r28
    353c:	df 93       	push	r29
    353e:	ec 01       	movw	r28, r24
    3540:	8b 01       	movw	r16, r22
    3542:	89 2b       	or	r24, r25
    3544:	89 f0       	breq	.+34     	; 0x3568 <vTaskPlaceOnEventList+0x32>
    3546:	60 91 3c 26 	lds	r22, 0x263C	; 0x80263c <pxCurrentTCB>
    354a:	70 91 3d 26 	lds	r23, 0x263D	; 0x80263d <pxCurrentTCB+0x1>
    354e:	64 5f       	subi	r22, 0xF4	; 244
    3550:	7f 4f       	sbci	r23, 0xFF	; 255
    3552:	ce 01       	movw	r24, r28
    3554:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <vListInsert>
    3558:	61 e0       	ldi	r22, 0x01	; 1
    355a:	c8 01       	movw	r24, r16
    355c:	df 91       	pop	r29
    355e:	cf 91       	pop	r28
    3560:	1f 91       	pop	r17
    3562:	0f 91       	pop	r16
    3564:	0c 94 45 15 	jmp	0x2a8a	; 0x2a8a <prvAddCurrentTaskToDelayedList>
    3568:	63 ea       	ldi	r22, 0xA3	; 163
    356a:	7b e0       	ldi	r23, 0x0B	; 11
    356c:	85 eb       	ldi	r24, 0xB5	; 181
    356e:	90 e2       	ldi	r25, 0x20	; 32
    3570:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <vAssertCalled>
    3574:	e8 cf       	rjmp	.-48     	; 0x3546 <vTaskPlaceOnEventList+0x10>

00003576 <xTaskRemoveFromEventList>:
    3576:	0f 93       	push	r16
    3578:	1f 93       	push	r17
    357a:	cf 93       	push	r28
    357c:	df 93       	push	r29
    357e:	dc 01       	movw	r26, r24
    3580:	15 96       	adiw	r26, 0x05	; 5
    3582:	ed 91       	ld	r30, X+
    3584:	fc 91       	ld	r31, X
    3586:	16 97       	sbiw	r26, 0x06	; 6
    3588:	c6 81       	ldd	r28, Z+6	; 0x06
    358a:	d7 81       	ldd	r29, Z+7	; 0x07
    358c:	20 97       	sbiw	r28, 0x00	; 0
    358e:	09 f4       	brne	.+2      	; 0x3592 <xTaskRemoveFromEventList+0x1c>
    3590:	42 c0       	rjmp	.+132    	; 0x3616 <xTaskRemoveFromEventList+0xa0>
    3592:	8e 01       	movw	r16, r28
    3594:	04 5f       	subi	r16, 0xF4	; 244
    3596:	1f 4f       	sbci	r17, 0xFF	; 255
    3598:	c8 01       	movw	r24, r16
    359a:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <uxListRemove>
    359e:	80 91 a2 25 	lds	r24, 0x25A2	; 0x8025a2 <uxSchedulerSuspended>
    35a2:	81 11       	cpse	r24, r1
    35a4:	29 c0       	rjmp	.+82     	; 0x35f8 <xTaskRemoveFromEventList+0x82>
    35a6:	0a 50       	subi	r16, 0x0A	; 10
    35a8:	11 09       	sbc	r17, r1
    35aa:	c8 01       	movw	r24, r16
    35ac:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <uxListRemove>
    35b0:	8e 89       	ldd	r24, Y+22	; 0x16
    35b2:	90 91 ac 25 	lds	r25, 0x25AC	; 0x8025ac <uxTopReadyPriority>
    35b6:	98 17       	cp	r25, r24
    35b8:	28 f1       	brcs	.+74     	; 0x3604 <xTaskRemoveFromEventList+0x8e>
    35ba:	90 e0       	ldi	r25, 0x00	; 0
    35bc:	9c 01       	movw	r18, r24
    35be:	22 0f       	add	r18, r18
    35c0:	33 1f       	adc	r19, r19
    35c2:	22 0f       	add	r18, r18
    35c4:	33 1f       	adc	r19, r19
    35c6:	22 0f       	add	r18, r18
    35c8:	33 1f       	adc	r19, r19
    35ca:	82 0f       	add	r24, r18
    35cc:	93 1f       	adc	r25, r19
    35ce:	b8 01       	movw	r22, r16
    35d0:	8e 51       	subi	r24, 0x1E	; 30
    35d2:	9a 4d       	sbci	r25, 0xDA	; 218
    35d4:	0e 94 b3 0c 	call	0x1966	; 0x1966 <vListInsertEnd>
    35d8:	e0 91 3c 26 	lds	r30, 0x263C	; 0x80263c <pxCurrentTCB>
    35dc:	f0 91 3d 26 	lds	r31, 0x263D	; 0x80263d <pxCurrentTCB+0x1>
    35e0:	9e 89       	ldd	r25, Y+22	; 0x16
    35e2:	86 89       	ldd	r24, Z+22	; 0x16
    35e4:	89 17       	cp	r24, r25
    35e6:	88 f4       	brcc	.+34     	; 0x360a <xTaskRemoveFromEventList+0x94>
    35e8:	81 e0       	ldi	r24, 0x01	; 1
    35ea:	80 93 a9 25 	sts	0x25A9, r24	; 0x8025a9 <xYieldPending>
    35ee:	df 91       	pop	r29
    35f0:	cf 91       	pop	r28
    35f2:	1f 91       	pop	r17
    35f4:	0f 91       	pop	r16
    35f6:	08 95       	ret
    35f8:	b8 01       	movw	r22, r16
    35fa:	83 ec       	ldi	r24, 0xC3	; 195
    35fc:	95 e2       	ldi	r25, 0x25	; 37
    35fe:	0e 94 b3 0c 	call	0x1966	; 0x1966 <vListInsertEnd>
    3602:	ea cf       	rjmp	.-44     	; 0x35d8 <xTaskRemoveFromEventList+0x62>
    3604:	80 93 ac 25 	sts	0x25AC, r24	; 0x8025ac <uxTopReadyPriority>
    3608:	d8 cf       	rjmp	.-80     	; 0x35ba <xTaskRemoveFromEventList+0x44>
    360a:	80 e0       	ldi	r24, 0x00	; 0
    360c:	df 91       	pop	r29
    360e:	cf 91       	pop	r28
    3610:	1f 91       	pop	r17
    3612:	0f 91       	pop	r16
    3614:	08 95       	ret
    3616:	6e ef       	ldi	r22, 0xFE	; 254
    3618:	7b e0       	ldi	r23, 0x0B	; 11
    361a:	85 eb       	ldi	r24, 0xB5	; 181
    361c:	90 e2       	ldi	r25, 0x20	; 32
    361e:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <vAssertCalled>
    3622:	b7 cf       	rjmp	.-146    	; 0x3592 <xTaskRemoveFromEventList+0x1c>

00003624 <vTaskInternalSetTimeOutState>:
    3624:	20 91 a8 25 	lds	r18, 0x25A8	; 0x8025a8 <xNumOfOverflows>
    3628:	fc 01       	movw	r30, r24
    362a:	20 83       	st	Z, r18
    362c:	20 91 ad 25 	lds	r18, 0x25AD	; 0x8025ad <xTickCount>
    3630:	30 91 ae 25 	lds	r19, 0x25AE	; 0x8025ae <xTickCount+0x1>
    3634:	21 83       	std	Z+1, r18	; 0x01
    3636:	32 83       	std	Z+2, r19	; 0x02
    3638:	08 95       	ret

0000363a <xTaskCheckForTimeOut>:
    363a:	0f 93       	push	r16
    363c:	1f 93       	push	r17
    363e:	cf 93       	push	r28
    3640:	df 93       	push	r29
    3642:	ec 01       	movw	r28, r24
    3644:	8b 01       	movw	r16, r22
    3646:	89 2b       	or	r24, r25
    3648:	09 f4       	brne	.+2      	; 0x364c <xTaskCheckForTimeOut+0x12>
    364a:	40 c0       	rjmp	.+128    	; 0x36cc <xTaskCheckForTimeOut+0x92>
    364c:	01 15       	cp	r16, r1
    364e:	11 05       	cpc	r17, r1
    3650:	09 f4       	brne	.+2      	; 0x3654 <xTaskCheckForTimeOut+0x1a>
    3652:	43 c0       	rjmp	.+134    	; 0x36da <xTaskCheckForTimeOut+0xa0>
    3654:	0f b6       	in	r0, 0x3f	; 63
    3656:	f8 94       	cli
    3658:	0f 92       	push	r0
    365a:	80 91 ad 25 	lds	r24, 0x25AD	; 0x8025ad <xTickCount>
    365e:	90 91 ae 25 	lds	r25, 0x25AE	; 0x8025ae <xTickCount+0x1>
    3662:	f8 01       	movw	r30, r16
    3664:	20 81       	ld	r18, Z
    3666:	31 81       	ldd	r19, Z+1	; 0x01
    3668:	2f 3f       	cpi	r18, 0xFF	; 255
    366a:	ff ef       	ldi	r31, 0xFF	; 255
    366c:	3f 07       	cpc	r19, r31
    366e:	61 f1       	breq	.+88     	; 0x36c8 <xTaskCheckForTimeOut+0x8e>
    3670:	49 81       	ldd	r20, Y+1	; 0x01
    3672:	5a 81       	ldd	r21, Y+2	; 0x02
    3674:	60 91 a8 25 	lds	r22, 0x25A8	; 0x8025a8 <xNumOfOverflows>
    3678:	78 81       	ld	r23, Y
    367a:	76 17       	cp	r23, r22
    367c:	19 f0       	breq	.+6      	; 0x3684 <xTaskCheckForTimeOut+0x4a>
    367e:	84 17       	cp	r24, r20
    3680:	95 07       	cpc	r25, r21
    3682:	80 f4       	brcc	.+32     	; 0x36a4 <xTaskCheckForTimeOut+0x6a>
    3684:	84 1b       	sub	r24, r20
    3686:	95 0b       	sbc	r25, r21
    3688:	82 17       	cp	r24, r18
    368a:	93 07       	cpc	r25, r19
    368c:	68 f0       	brcs	.+26     	; 0x36a8 <xTaskCheckForTimeOut+0x6e>
    368e:	f8 01       	movw	r30, r16
    3690:	10 82       	st	Z, r1
    3692:	11 82       	std	Z+1, r1	; 0x01
    3694:	81 e0       	ldi	r24, 0x01	; 1
    3696:	0f 90       	pop	r0
    3698:	0f be       	out	0x3f, r0	; 63
    369a:	df 91       	pop	r29
    369c:	cf 91       	pop	r28
    369e:	1f 91       	pop	r17
    36a0:	0f 91       	pop	r16
    36a2:	08 95       	ret
    36a4:	81 e0       	ldi	r24, 0x01	; 1
    36a6:	f7 cf       	rjmp	.-18     	; 0x3696 <xTaskCheckForTimeOut+0x5c>
    36a8:	28 1b       	sub	r18, r24
    36aa:	39 0b       	sbc	r19, r25
    36ac:	f8 01       	movw	r30, r16
    36ae:	20 83       	st	Z, r18
    36b0:	31 83       	std	Z+1, r19	; 0x01
    36b2:	80 91 a8 25 	lds	r24, 0x25A8	; 0x8025a8 <xNumOfOverflows>
    36b6:	88 83       	st	Y, r24
    36b8:	80 91 ad 25 	lds	r24, 0x25AD	; 0x8025ad <xTickCount>
    36bc:	90 91 ae 25 	lds	r25, 0x25AE	; 0x8025ae <xTickCount+0x1>
    36c0:	89 83       	std	Y+1, r24	; 0x01
    36c2:	9a 83       	std	Y+2, r25	; 0x02
    36c4:	80 e0       	ldi	r24, 0x00	; 0
    36c6:	e7 cf       	rjmp	.-50     	; 0x3696 <xTaskCheckForTimeOut+0x5c>
    36c8:	80 e0       	ldi	r24, 0x00	; 0
    36ca:	e5 cf       	rjmp	.-54     	; 0x3696 <xTaskCheckForTimeOut+0x5c>
    36cc:	69 e6       	ldi	r22, 0x69	; 105
    36ce:	7c e0       	ldi	r23, 0x0C	; 12
    36d0:	85 eb       	ldi	r24, 0xB5	; 181
    36d2:	90 e2       	ldi	r25, 0x20	; 32
    36d4:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <vAssertCalled>
    36d8:	b9 cf       	rjmp	.-142    	; 0x364c <xTaskCheckForTimeOut+0x12>
    36da:	6a e6       	ldi	r22, 0x6A	; 106
    36dc:	7c e0       	ldi	r23, 0x0C	; 12
    36de:	85 eb       	ldi	r24, 0xB5	; 181
    36e0:	90 e2       	ldi	r25, 0x20	; 32
    36e2:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <vAssertCalled>
    36e6:	b6 cf       	rjmp	.-148    	; 0x3654 <xTaskCheckForTimeOut+0x1a>

000036e8 <vTaskMissedYield>:
    36e8:	81 e0       	ldi	r24, 0x01	; 1
    36ea:	80 93 a9 25 	sts	0x25A9, r24	; 0x8025a9 <xYieldPending>
    36ee:	08 95       	ret

000036f0 <xTaskPriorityInherit>:
    36f0:	0f 93       	push	r16
    36f2:	1f 93       	push	r17
    36f4:	cf 93       	push	r28
    36f6:	df 93       	push	r29
    36f8:	fc 01       	movw	r30, r24
    36fa:	89 2b       	or	r24, r25
    36fc:	09 f4       	brne	.+2      	; 0x3700 <xTaskPriorityInherit+0x10>
    36fe:	41 c0       	rjmp	.+130    	; 0x3782 <xTaskPriorityInherit+0x92>
    3700:	26 89       	ldd	r18, Z+22	; 0x16
    3702:	a0 91 3c 26 	lds	r26, 0x263C	; 0x80263c <pxCurrentTCB>
    3706:	b0 91 3d 26 	lds	r27, 0x263D	; 0x80263d <pxCurrentTCB+0x1>
    370a:	56 96       	adiw	r26, 0x16	; 22
    370c:	8c 91       	ld	r24, X
    370e:	28 17       	cp	r18, r24
    3710:	70 f5       	brcc	.+92     	; 0x376e <xTaskPriorityInherit+0x7e>
    3712:	84 85       	ldd	r24, Z+12	; 0x0c
    3714:	95 85       	ldd	r25, Z+13	; 0x0d
    3716:	97 fd       	sbrc	r25, 7
    3718:	0c c0       	rjmp	.+24     	; 0x3732 <xTaskPriorityInherit+0x42>
    371a:	a0 91 3c 26 	lds	r26, 0x263C	; 0x80263c <pxCurrentTCB>
    371e:	b0 91 3d 26 	lds	r27, 0x263D	; 0x80263d <pxCurrentTCB+0x1>
    3722:	56 96       	adiw	r26, 0x16	; 22
    3724:	3c 91       	ld	r19, X
    3726:	8a e0       	ldi	r24, 0x0A	; 10
    3728:	90 e0       	ldi	r25, 0x00	; 0
    372a:	83 1b       	sub	r24, r19
    372c:	91 09       	sbc	r25, r1
    372e:	84 87       	std	Z+12, r24	; 0x0c
    3730:	95 87       	std	Z+13, r25	; 0x0d
    3732:	30 e0       	ldi	r19, 0x00	; 0
    3734:	c9 01       	movw	r24, r18
    3736:	88 0f       	add	r24, r24
    3738:	99 1f       	adc	r25, r25
    373a:	88 0f       	add	r24, r24
    373c:	99 1f       	adc	r25, r25
    373e:	88 0f       	add	r24, r24
    3740:	99 1f       	adc	r25, r25
    3742:	28 0f       	add	r18, r24
    3744:	39 1f       	adc	r19, r25
    3746:	2e 51       	subi	r18, 0x1E	; 30
    3748:	3a 4d       	sbci	r19, 0xDA	; 218
    374a:	82 85       	ldd	r24, Z+10	; 0x0a
    374c:	93 85       	ldd	r25, Z+11	; 0x0b
    374e:	82 17       	cp	r24, r18
    3750:	93 07       	cpc	r25, r19
    3752:	e9 f0       	breq	.+58     	; 0x378e <xTaskPriorityInherit+0x9e>
    3754:	a0 91 3c 26 	lds	r26, 0x263C	; 0x80263c <pxCurrentTCB>
    3758:	b0 91 3d 26 	lds	r27, 0x263D	; 0x80263d <pxCurrentTCB+0x1>
    375c:	56 96       	adiw	r26, 0x16	; 22
    375e:	8c 91       	ld	r24, X
    3760:	86 8b       	std	Z+22, r24	; 0x16
    3762:	81 e0       	ldi	r24, 0x01	; 1
    3764:	df 91       	pop	r29
    3766:	cf 91       	pop	r28
    3768:	1f 91       	pop	r17
    376a:	0f 91       	pop	r16
    376c:	08 95       	ret
    376e:	a0 91 3c 26 	lds	r26, 0x263C	; 0x80263c <pxCurrentTCB>
    3772:	b0 91 3d 26 	lds	r27, 0x263D	; 0x80263d <pxCurrentTCB+0x1>
    3776:	81 e0       	ldi	r24, 0x01	; 1
    3778:	23 a1       	ldd	r18, Z+35	; 0x23
    377a:	56 96       	adiw	r26, 0x16	; 22
    377c:	9c 91       	ld	r25, X
    377e:	29 17       	cp	r18, r25
    3780:	88 f3       	brcs	.-30     	; 0x3764 <xTaskPriorityInherit+0x74>
    3782:	80 e0       	ldi	r24, 0x00	; 0
    3784:	df 91       	pop	r29
    3786:	cf 91       	pop	r28
    3788:	1f 91       	pop	r17
    378a:	0f 91       	pop	r16
    378c:	08 95       	ret
    378e:	8f 01       	movw	r16, r30
    3790:	ef 01       	movw	r28, r30
    3792:	22 96       	adiw	r28, 0x02	; 2
    3794:	ce 01       	movw	r24, r28
    3796:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <uxListRemove>
    379a:	e0 91 3c 26 	lds	r30, 0x263C	; 0x80263c <pxCurrentTCB>
    379e:	f0 91 3d 26 	lds	r31, 0x263D	; 0x80263d <pxCurrentTCB+0x1>
    37a2:	86 89       	ldd	r24, Z+22	; 0x16
    37a4:	f8 01       	movw	r30, r16
    37a6:	86 8b       	std	Z+22, r24	; 0x16
    37a8:	90 91 ac 25 	lds	r25, 0x25AC	; 0x8025ac <uxTopReadyPriority>
    37ac:	98 17       	cp	r25, r24
    37ae:	10 f4       	brcc	.+4      	; 0x37b4 <xTaskPriorityInherit+0xc4>
    37b0:	80 93 ac 25 	sts	0x25AC, r24	; 0x8025ac <uxTopReadyPriority>
    37b4:	90 e0       	ldi	r25, 0x00	; 0
    37b6:	9c 01       	movw	r18, r24
    37b8:	22 0f       	add	r18, r18
    37ba:	33 1f       	adc	r19, r19
    37bc:	22 0f       	add	r18, r18
    37be:	33 1f       	adc	r19, r19
    37c0:	22 0f       	add	r18, r18
    37c2:	33 1f       	adc	r19, r19
    37c4:	82 0f       	add	r24, r18
    37c6:	93 1f       	adc	r25, r19
    37c8:	be 01       	movw	r22, r28
    37ca:	8e 51       	subi	r24, 0x1E	; 30
    37cc:	9a 4d       	sbci	r25, 0xDA	; 218
    37ce:	0e 94 b3 0c 	call	0x1966	; 0x1966 <vListInsertEnd>
    37d2:	81 e0       	ldi	r24, 0x01	; 1
    37d4:	c7 cf       	rjmp	.-114    	; 0x3764 <xTaskPriorityInherit+0x74>

000037d6 <xTaskPriorityDisinherit>:
    37d6:	0f 93       	push	r16
    37d8:	1f 93       	push	r17
    37da:	cf 93       	push	r28
    37dc:	df 93       	push	r29
    37de:	00 97       	sbiw	r24, 0x00	; 0
    37e0:	c9 f0       	breq	.+50     	; 0x3814 <xTaskPriorityDisinherit+0x3e>
    37e2:	ec 01       	movw	r28, r24
    37e4:	80 91 3c 26 	lds	r24, 0x263C	; 0x80263c <pxCurrentTCB>
    37e8:	90 91 3d 26 	lds	r25, 0x263D	; 0x80263d <pxCurrentTCB+0x1>
    37ec:	c8 17       	cp	r28, r24
    37ee:	d9 07       	cpc	r29, r25
    37f0:	31 f0       	breq	.+12     	; 0x37fe <xTaskPriorityDisinherit+0x28>
    37f2:	6e e7       	ldi	r22, 0x7E	; 126
    37f4:	7f e0       	ldi	r23, 0x0F	; 15
    37f6:	85 eb       	ldi	r24, 0xB5	; 181
    37f8:	90 e2       	ldi	r25, 0x20	; 32
    37fa:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <vAssertCalled>
    37fe:	8c a1       	ldd	r24, Y+36	; 0x24
    3800:	88 23       	and	r24, r24
    3802:	c1 f1       	breq	.+112    	; 0x3874 <xTaskPriorityDisinherit+0x9e>
    3804:	81 50       	subi	r24, 0x01	; 1
    3806:	8c a3       	std	Y+36, r24	; 0x24
    3808:	2e 89       	ldd	r18, Y+22	; 0x16
    380a:	9b a1       	ldd	r25, Y+35	; 0x23
    380c:	29 17       	cp	r18, r25
    380e:	11 f0       	breq	.+4      	; 0x3814 <xTaskPriorityDisinherit+0x3e>
    3810:	88 23       	and	r24, r24
    3812:	31 f0       	breq	.+12     	; 0x3820 <xTaskPriorityDisinherit+0x4a>
    3814:	80 e0       	ldi	r24, 0x00	; 0
    3816:	df 91       	pop	r29
    3818:	cf 91       	pop	r28
    381a:	1f 91       	pop	r17
    381c:	0f 91       	pop	r16
    381e:	08 95       	ret
    3820:	8e 01       	movw	r16, r28
    3822:	0e 5f       	subi	r16, 0xFE	; 254
    3824:	1f 4f       	sbci	r17, 0xFF	; 255
    3826:	c8 01       	movw	r24, r16
    3828:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <uxListRemove>
    382c:	2b a1       	ldd	r18, Y+35	; 0x23
    382e:	2e 8b       	std	Y+22, r18	; 0x16
    3830:	82 2f       	mov	r24, r18
    3832:	90 e0       	ldi	r25, 0x00	; 0
    3834:	4a e0       	ldi	r20, 0x0A	; 10
    3836:	50 e0       	ldi	r21, 0x00	; 0
    3838:	48 1b       	sub	r20, r24
    383a:	59 0b       	sbc	r21, r25
    383c:	4c 87       	std	Y+12, r20	; 0x0c
    383e:	5d 87       	std	Y+13, r21	; 0x0d
    3840:	30 91 ac 25 	lds	r19, 0x25AC	; 0x8025ac <uxTopReadyPriority>
    3844:	32 17       	cp	r19, r18
    3846:	10 f4       	brcc	.+4      	; 0x384c <xTaskPriorityDisinherit+0x76>
    3848:	20 93 ac 25 	sts	0x25AC, r18	; 0x8025ac <uxTopReadyPriority>
    384c:	9c 01       	movw	r18, r24
    384e:	22 0f       	add	r18, r18
    3850:	33 1f       	adc	r19, r19
    3852:	22 0f       	add	r18, r18
    3854:	33 1f       	adc	r19, r19
    3856:	22 0f       	add	r18, r18
    3858:	33 1f       	adc	r19, r19
    385a:	82 0f       	add	r24, r18
    385c:	93 1f       	adc	r25, r19
    385e:	b8 01       	movw	r22, r16
    3860:	8e 51       	subi	r24, 0x1E	; 30
    3862:	9a 4d       	sbci	r25, 0xDA	; 218
    3864:	0e 94 b3 0c 	call	0x1966	; 0x1966 <vListInsertEnd>
    3868:	81 e0       	ldi	r24, 0x01	; 1
    386a:	df 91       	pop	r29
    386c:	cf 91       	pop	r28
    386e:	1f 91       	pop	r17
    3870:	0f 91       	pop	r16
    3872:	08 95       	ret
    3874:	6f e7       	ldi	r22, 0x7F	; 127
    3876:	7f e0       	ldi	r23, 0x0F	; 15
    3878:	85 eb       	ldi	r24, 0xB5	; 181
    387a:	90 e2       	ldi	r25, 0x20	; 32
    387c:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <vAssertCalled>
    3880:	8c a1       	ldd	r24, Y+36	; 0x24
    3882:	c0 cf       	rjmp	.-128    	; 0x3804 <xTaskPriorityDisinherit+0x2e>

00003884 <vTaskPriorityDisinheritAfterTimeout>:
    3884:	0f 93       	push	r16
    3886:	1f 93       	push	r17
    3888:	cf 93       	push	r28
    388a:	df 93       	push	r29
    388c:	00 97       	sbiw	r24, 0x00	; 0
    388e:	79 f0       	breq	.+30     	; 0x38ae <vTaskPriorityDisinheritAfterTimeout+0x2a>
    3890:	16 2f       	mov	r17, r22
    3892:	ec 01       	movw	r28, r24
    3894:	8c a1       	ldd	r24, Y+36	; 0x24
    3896:	88 23       	and	r24, r24
    3898:	09 f4       	brne	.+2      	; 0x389c <vTaskPriorityDisinheritAfterTimeout+0x18>
    389a:	54 c0       	rjmp	.+168    	; 0x3944 <vTaskPriorityDisinheritAfterTimeout+0xc0>
    389c:	0b a1       	ldd	r16, Y+35	; 0x23
    389e:	01 17       	cp	r16, r17
    38a0:	58 f0       	brcs	.+22     	; 0x38b8 <vTaskPriorityDisinheritAfterTimeout+0x34>
    38a2:	8e 89       	ldd	r24, Y+22	; 0x16
    38a4:	80 17       	cp	r24, r16
    38a6:	19 f0       	breq	.+6      	; 0x38ae <vTaskPriorityDisinheritAfterTimeout+0x2a>
    38a8:	9c a1       	ldd	r25, Y+36	; 0x24
    38aa:	91 30       	cpi	r25, 0x01	; 1
    38ac:	39 f0       	breq	.+14     	; 0x38bc <vTaskPriorityDisinheritAfterTimeout+0x38>
    38ae:	df 91       	pop	r29
    38b0:	cf 91       	pop	r28
    38b2:	1f 91       	pop	r17
    38b4:	0f 91       	pop	r16
    38b6:	08 95       	ret
    38b8:	01 2f       	mov	r16, r17
    38ba:	f3 cf       	rjmp	.-26     	; 0x38a2 <vTaskPriorityDisinheritAfterTimeout+0x1e>
    38bc:	20 91 3c 26 	lds	r18, 0x263C	; 0x80263c <pxCurrentTCB>
    38c0:	30 91 3d 26 	lds	r19, 0x263D	; 0x80263d <pxCurrentTCB+0x1>
    38c4:	c2 17       	cp	r28, r18
    38c6:	d3 07       	cpc	r29, r19
    38c8:	09 f4       	brne	.+2      	; 0x38cc <vTaskPriorityDisinheritAfterTimeout+0x48>
    38ca:	43 c0       	rjmp	.+134    	; 0x3952 <vTaskPriorityDisinheritAfterTimeout+0xce>
    38cc:	0e 8b       	std	Y+22, r16	; 0x16
    38ce:	2c 85       	ldd	r18, Y+12	; 0x0c
    38d0:	3d 85       	ldd	r19, Y+13	; 0x0d
    38d2:	37 fd       	sbrc	r19, 7
    38d4:	06 c0       	rjmp	.+12     	; 0x38e2 <vTaskPriorityDisinheritAfterTimeout+0x5e>
    38d6:	2a e0       	ldi	r18, 0x0A	; 10
    38d8:	30 e0       	ldi	r19, 0x00	; 0
    38da:	20 1b       	sub	r18, r16
    38dc:	31 09       	sbc	r19, r1
    38de:	2c 87       	std	Y+12, r18	; 0x0c
    38e0:	3d 87       	std	Y+13, r19	; 0x0d
    38e2:	90 e0       	ldi	r25, 0x00	; 0
    38e4:	9c 01       	movw	r18, r24
    38e6:	22 0f       	add	r18, r18
    38e8:	33 1f       	adc	r19, r19
    38ea:	22 0f       	add	r18, r18
    38ec:	33 1f       	adc	r19, r19
    38ee:	22 0f       	add	r18, r18
    38f0:	33 1f       	adc	r19, r19
    38f2:	82 0f       	add	r24, r18
    38f4:	93 1f       	adc	r25, r19
    38f6:	8e 51       	subi	r24, 0x1E	; 30
    38f8:	9a 4d       	sbci	r25, 0xDA	; 218
    38fa:	2a 85       	ldd	r18, Y+10	; 0x0a
    38fc:	3b 85       	ldd	r19, Y+11	; 0x0b
    38fe:	28 17       	cp	r18, r24
    3900:	39 07       	cpc	r19, r25
    3902:	a9 f6       	brne	.-86     	; 0x38ae <vTaskPriorityDisinheritAfterTimeout+0x2a>
    3904:	8e 01       	movw	r16, r28
    3906:	0e 5f       	subi	r16, 0xFE	; 254
    3908:	1f 4f       	sbci	r17, 0xFF	; 255
    390a:	c8 01       	movw	r24, r16
    390c:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <uxListRemove>
    3910:	8e 89       	ldd	r24, Y+22	; 0x16
    3912:	90 91 ac 25 	lds	r25, 0x25AC	; 0x8025ac <uxTopReadyPriority>
    3916:	98 17       	cp	r25, r24
    3918:	10 f4       	brcc	.+4      	; 0x391e <vTaskPriorityDisinheritAfterTimeout+0x9a>
    391a:	80 93 ac 25 	sts	0x25AC, r24	; 0x8025ac <uxTopReadyPriority>
    391e:	90 e0       	ldi	r25, 0x00	; 0
    3920:	9c 01       	movw	r18, r24
    3922:	22 0f       	add	r18, r18
    3924:	33 1f       	adc	r19, r19
    3926:	22 0f       	add	r18, r18
    3928:	33 1f       	adc	r19, r19
    392a:	22 0f       	add	r18, r18
    392c:	33 1f       	adc	r19, r19
    392e:	82 0f       	add	r24, r18
    3930:	93 1f       	adc	r25, r19
    3932:	b8 01       	movw	r22, r16
    3934:	8e 51       	subi	r24, 0x1E	; 30
    3936:	9a 4d       	sbci	r25, 0xDA	; 218
    3938:	df 91       	pop	r29
    393a:	cf 91       	pop	r28
    393c:	1f 91       	pop	r17
    393e:	0f 91       	pop	r16
    3940:	0c 94 b3 0c 	jmp	0x1966	; 0x1966 <vListInsertEnd>
    3944:	6d ec       	ldi	r22, 0xCD	; 205
    3946:	7f e0       	ldi	r23, 0x0F	; 15
    3948:	85 eb       	ldi	r24, 0xB5	; 181
    394a:	90 e2       	ldi	r25, 0x20	; 32
    394c:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <vAssertCalled>
    3950:	a5 cf       	rjmp	.-182    	; 0x389c <vTaskPriorityDisinheritAfterTimeout+0x18>
    3952:	68 ee       	ldi	r22, 0xE8	; 232
    3954:	7f e0       	ldi	r23, 0x0F	; 15
    3956:	85 eb       	ldi	r24, 0xB5	; 181
    3958:	90 e2       	ldi	r25, 0x20	; 32
    395a:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <vAssertCalled>
    395e:	8e 89       	ldd	r24, Y+22	; 0x16
    3960:	b5 cf       	rjmp	.-150    	; 0x38cc <vTaskPriorityDisinheritAfterTimeout+0x48>

00003962 <pvTaskIncrementMutexHeldCount>:
    3962:	80 91 3c 26 	lds	r24, 0x263C	; 0x80263c <pxCurrentTCB>
    3966:	90 91 3d 26 	lds	r25, 0x263D	; 0x80263d <pxCurrentTCB+0x1>
    396a:	89 2b       	or	r24, r25
    396c:	39 f0       	breq	.+14     	; 0x397c <pvTaskIncrementMutexHeldCount+0x1a>
    396e:	e0 91 3c 26 	lds	r30, 0x263C	; 0x80263c <pxCurrentTCB>
    3972:	f0 91 3d 26 	lds	r31, 0x263D	; 0x80263d <pxCurrentTCB+0x1>
    3976:	84 a1       	ldd	r24, Z+36	; 0x24
    3978:	8f 5f       	subi	r24, 0xFF	; 255
    397a:	84 a3       	std	Z+36, r24	; 0x24
    397c:	80 91 3c 26 	lds	r24, 0x263C	; 0x80263c <pxCurrentTCB>
    3980:	90 91 3d 26 	lds	r25, 0x263D	; 0x80263d <pxCurrentTCB+0x1>
    3984:	08 95       	ret

00003986 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
    3986:	ef 92       	push	r14
    3988:	ff 92       	push	r15
    398a:	0f 93       	push	r16
    398c:	1f 93       	push	r17
    398e:	cf 93       	push	r28
    3990:	df 93       	push	r29
    3992:	ec 01       	movw	r28, r24
    3994:	8b 01       	movw	r16, r22
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
    3996:	89 2b       	or	r24, r25
    3998:	09 f4       	brne	.+2      	; 0x399c <vTaskNotifyGiveFromISR+0x16>
    399a:	62 c0       	rjmp	.+196    	; 0x3a60 <vTaskNotifyGiveFromISR+0xda>

		pxTCB = xTaskToNotify;

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
    399c:	2f a5       	ldd	r18, Y+47	; 0x2f
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    399e:	82 e0       	ldi	r24, 0x02	; 2
    39a0:	8f a7       	std	Y+47, r24	; 0x2f

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
    39a2:	8b a5       	ldd	r24, Y+43	; 0x2b
    39a4:	9c a5       	ldd	r25, Y+44	; 0x2c
    39a6:	ad a5       	ldd	r26, Y+45	; 0x2d
    39a8:	be a5       	ldd	r27, Y+46	; 0x2e
    39aa:	01 96       	adiw	r24, 0x01	; 1
    39ac:	a1 1d       	adc	r26, r1
    39ae:	b1 1d       	adc	r27, r1
    39b0:	8b a7       	std	Y+43, r24	; 0x2b
    39b2:	9c a7       	std	Y+44, r25	; 0x2c
    39b4:	ad a7       	std	Y+45, r26	; 0x2d
    39b6:	be a7       	std	Y+46, r27	; 0x2e

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    39b8:	21 30       	cpi	r18, 0x01	; 1
    39ba:	39 f0       	breq	.+14     	; 0x39ca <vTaskNotifyGiveFromISR+0x44>
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
    39bc:	df 91       	pop	r29
    39be:	cf 91       	pop	r28
    39c0:	1f 91       	pop	r17
    39c2:	0f 91       	pop	r16
    39c4:	ff 90       	pop	r15
    39c6:	ef 90       	pop	r14
    39c8:	08 95       	ret
			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
    39ca:	8c 89       	ldd	r24, Y+20	; 0x14
    39cc:	9d 89       	ldd	r25, Y+21	; 0x15
    39ce:	89 2b       	or	r24, r25
    39d0:	31 f0       	breq	.+12     	; 0x39de <vTaskNotifyGiveFromISR+0x58>
    39d2:	66 e3       	ldi	r22, 0x36	; 54
    39d4:	73 e1       	ldi	r23, 0x13	; 19
    39d6:	85 eb       	ldi	r24, 0xB5	; 181
    39d8:	90 e2       	ldi	r25, 0x20	; 32
    39da:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <vAssertCalled>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    39de:	80 91 a2 25 	lds	r24, 0x25A2	; 0x8025a2 <uxSchedulerSuspended>
    39e2:	88 23       	and	r24, r24
    39e4:	f9 f0       	breq	.+62     	; 0x3a24 <vTaskNotifyGiveFromISR+0x9e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    39e6:	be 01       	movw	r22, r28
    39e8:	64 5f       	subi	r22, 0xF4	; 244
    39ea:	7f 4f       	sbci	r23, 0xFF	; 255
    39ec:	83 ec       	ldi	r24, 0xC3	; 195
    39ee:	95 e2       	ldi	r25, 0x25	; 37
    39f0:	0e 94 b3 0c 	call	0x1966	; 0x1966 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    39f4:	e0 91 3c 26 	lds	r30, 0x263C	; 0x80263c <pxCurrentTCB>
    39f8:	f0 91 3d 26 	lds	r31, 0x263D	; 0x80263d <pxCurrentTCB+0x1>
    39fc:	9e 89       	ldd	r25, Y+22	; 0x16
    39fe:	86 89       	ldd	r24, Z+22	; 0x16
    3a00:	89 17       	cp	r24, r25
    3a02:	e0 f6       	brcc	.-72     	; 0x39bc <vTaskNotifyGiveFromISR+0x36>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
    3a04:	01 15       	cp	r16, r1
    3a06:	11 05       	cpc	r17, r1
    3a08:	19 f0       	breq	.+6      	; 0x3a10 <vTaskNotifyGiveFromISR+0x8a>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
    3a0a:	81 e0       	ldi	r24, 0x01	; 1
    3a0c:	f8 01       	movw	r30, r16
    3a0e:	80 83       	st	Z, r24
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
    3a10:	81 e0       	ldi	r24, 0x01	; 1
    3a12:	80 93 a9 25 	sts	0x25A9, r24	; 0x8025a9 <xYieldPending>
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
    3a16:	df 91       	pop	r29
    3a18:	cf 91       	pop	r28
    3a1a:	1f 91       	pop	r17
    3a1c:	0f 91       	pop	r16
    3a1e:	ff 90       	pop	r15
    3a20:	ef 90       	pop	r14
    3a22:	08 95       	ret
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    3a24:	7e 01       	movw	r14, r28
    3a26:	82 e0       	ldi	r24, 0x02	; 2
    3a28:	e8 0e       	add	r14, r24
    3a2a:	f1 1c       	adc	r15, r1
    3a2c:	c7 01       	movw	r24, r14
    3a2e:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    3a32:	8e 89       	ldd	r24, Y+22	; 0x16
    3a34:	90 91 ac 25 	lds	r25, 0x25AC	; 0x8025ac <uxTopReadyPriority>
    3a38:	98 17       	cp	r25, r24
    3a3a:	10 f4       	brcc	.+4      	; 0x3a40 <vTaskNotifyGiveFromISR+0xba>
    3a3c:	80 93 ac 25 	sts	0x25AC, r24	; 0x8025ac <uxTopReadyPriority>
    3a40:	90 e0       	ldi	r25, 0x00	; 0
    3a42:	9c 01       	movw	r18, r24
    3a44:	22 0f       	add	r18, r18
    3a46:	33 1f       	adc	r19, r19
    3a48:	22 0f       	add	r18, r18
    3a4a:	33 1f       	adc	r19, r19
    3a4c:	22 0f       	add	r18, r18
    3a4e:	33 1f       	adc	r19, r19
    3a50:	82 0f       	add	r24, r18
    3a52:	93 1f       	adc	r25, r19
    3a54:	b7 01       	movw	r22, r14
    3a56:	8e 51       	subi	r24, 0x1E	; 30
    3a58:	9a 4d       	sbci	r25, 0xDA	; 218
    3a5a:	0e 94 b3 0c 	call	0x1966	; 0x1966 <vListInsertEnd>
    3a5e:	ca cf       	rjmp	.-108    	; 0x39f4 <vTaskNotifyGiveFromISR+0x6e>
	{
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
    3a60:	60 e1       	ldi	r22, 0x10	; 16
    3a62:	73 e1       	ldi	r23, 0x13	; 19
    3a64:	85 eb       	ldi	r24, 0xB5	; 181
    3a66:	90 e2       	ldi	r25, 0x20	; 32
    3a68:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <vAssertCalled>
    3a6c:	97 cf       	rjmp	.-210    	; 0x399c <vTaskNotifyGiveFromISR+0x16>

00003a6e <vApplicationIdleHook>:
#define SET_ERR_LED() PORTA.OUTSET=1<<7
#define CLR_ERR_LED() PORTA.OUTCLR=1<<7


void vApplicationIdleHook( void )
{
    3a6e:	08 95       	ret

00003a70 <vApplicationMallocFailedHook>:
	
}

void vApplicationMallocFailedHook(void)
{
	taskDISABLE_INTERRUPTS();
    3a70:	f8 94       	cli
	DbgPrint ("ERROR: memory allocation failed\r\n");
    3a72:	88 ef       	ldi	r24, 0xF8	; 248
    3a74:	90 e2       	ldi	r25, 0x20	; 32
    3a76:	0e 94 c4 02 	call	0x588	; 0x588 <DbgPrint>
	CFG_ERR_LED();
    3a7a:	80 e8       	ldi	r24, 0x80	; 128
    3a7c:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <__TEXT_REGION_LENGTH__+0x700601>
	while (1)
	{
		SET_ERR_LED();
    3a80:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3a84:	2f ef       	ldi	r18, 0xFF	; 255
    3a86:	33 ec       	ldi	r19, 0xC3	; 195
    3a88:	99 e0       	ldi	r25, 0x09	; 9
    3a8a:	21 50       	subi	r18, 0x01	; 1
    3a8c:	30 40       	sbci	r19, 0x00	; 0
    3a8e:	90 40       	sbci	r25, 0x00	; 0
    3a90:	e1 f7       	brne	.-8      	; 0x3a8a <vApplicationMallocFailedHook+0x1a>
    3a92:	00 c0       	rjmp	.+0      	; 0x3a94 <vApplicationMallocFailedHook+0x24>
    3a94:	00 00       	nop
		_delay_ms(100);
		CLR_ERR_LED();
    3a96:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
    3a9a:	2f ef       	ldi	r18, 0xFF	; 255
    3a9c:	33 ec       	ldi	r19, 0xC3	; 195
    3a9e:	99 e0       	ldi	r25, 0x09	; 9
    3aa0:	21 50       	subi	r18, 0x01	; 1
    3aa2:	30 40       	sbci	r19, 0x00	; 0
    3aa4:	90 40       	sbci	r25, 0x00	; 0
    3aa6:	e1 f7       	brne	.-8      	; 0x3aa0 <vApplicationMallocFailedHook+0x30>
    3aa8:	00 c0       	rjmp	.+0      	; 0x3aaa <vApplicationMallocFailedHook+0x3a>
    3aaa:	00 00       	nop
    3aac:	e9 cf       	rjmp	.-46     	; 0x3a80 <vApplicationMallocFailedHook+0x10>

00003aae <vApplicationStackOverflowHook>:
}



void vApplicationStackOverflowHook( TaskHandle_t xTask,signed char *pcTaskName )
{
    3aae:	eb 01       	movw	r28, r22
	taskDISABLE_INTERRUPTS();
    3ab0:	f8 94       	cli
	CFG_ERR_LED();
    3ab2:	80 e8       	ldi	r24, 0x80	; 128
    3ab4:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <__TEXT_REGION_LENGTH__+0x700601>
	DbgPrint("STACK overflow in task ");
    3ab8:	8a e1       	ldi	r24, 0x1A	; 26
    3aba:	91 e2       	ldi	r25, 0x21	; 33
    3abc:	0e 94 c4 02 	call	0x588	; 0x588 <DbgPrint>
	DbgPrintn(pcTaskName,10);
    3ac0:	6a e0       	ldi	r22, 0x0A	; 10
    3ac2:	70 e0       	ldi	r23, 0x00	; 0
    3ac4:	ce 01       	movw	r24, r28
    3ac6:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <DbgPrintn>
	DbgPrint("\r\n");
    3aca:	85 ef       	ldi	r24, 0xF5	; 245
    3acc:	90 e2       	ldi	r25, 0x20	; 32
    3ace:	0e 94 c4 02 	call	0x588	; 0x588 <DbgPrint>
	while (1)
	{
		SET_ERR_LED();
    3ad2:	80 e8       	ldi	r24, 0x80	; 128
    3ad4:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
    3ad8:	2f ef       	ldi	r18, 0xFF	; 255
    3ada:	33 ed       	ldi	r19, 0xD3	; 211
    3adc:	90 e3       	ldi	r25, 0x30	; 48
    3ade:	21 50       	subi	r18, 0x01	; 1
    3ae0:	30 40       	sbci	r19, 0x00	; 0
    3ae2:	90 40       	sbci	r25, 0x00	; 0
    3ae4:	e1 f7       	brne	.-8      	; 0x3ade <vApplicationStackOverflowHook+0x30>
    3ae6:	00 c0       	rjmp	.+0      	; 0x3ae8 <vApplicationStackOverflowHook+0x3a>
    3ae8:	00 00       	nop
		_delay_ms(500);
		CLR_ERR_LED();
    3aea:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
    3aee:	2f ef       	ldi	r18, 0xFF	; 255
    3af0:	33 ed       	ldi	r19, 0xD3	; 211
    3af2:	90 e3       	ldi	r25, 0x30	; 48
    3af4:	21 50       	subi	r18, 0x01	; 1
    3af6:	30 40       	sbci	r19, 0x00	; 0
    3af8:	90 40       	sbci	r25, 0x00	; 0
    3afa:	e1 f7       	brne	.-8      	; 0x3af4 <vApplicationStackOverflowHook+0x46>
    3afc:	00 c0       	rjmp	.+0      	; 0x3afe <vApplicationStackOverflowHook+0x50>
    3afe:	00 00       	nop
    3b00:	e9 cf       	rjmp	.-46     	; 0x3ad4 <vApplicationStackOverflowHook+0x26>

00003b02 <vAssertCalled>:
		_delay_ms(500);
	}
}

void vAssertCalled( char *File, int Line)
{
    3b02:	8c 01       	movw	r16, r24
    3b04:	eb 01       	movw	r28, r22
	taskDISABLE_INTERRUPTS();	
    3b06:	f8 94       	cli
	CFG_ERR_LED();
    3b08:	80 e8       	ldi	r24, 0x80	; 128
    3b0a:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <__TEXT_REGION_LENGTH__+0x700601>
	DbgPrint("Assert in file ");
    3b0e:	82 e3       	ldi	r24, 0x32	; 50
    3b10:	91 e2       	ldi	r25, 0x21	; 33
    3b12:	0e 94 c4 02 	call	0x588	; 0x588 <DbgPrint>
	DbgPrintn(File,100);
    3b16:	64 e6       	ldi	r22, 0x64	; 100
    3b18:	70 e0       	ldi	r23, 0x00	; 0
    3b1a:	c8 01       	movw	r24, r16
    3b1c:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <DbgPrintn>
	DbgPrint(", line nr ");
    3b20:	82 e4       	ldi	r24, 0x42	; 66
    3b22:	91 e2       	ldi	r25, 0x21	; 33
    3b24:	0e 94 c4 02 	call	0x588	; 0x588 <DbgPrint>
	DbgPrintInt(Line);
    3b28:	ce 01       	movw	r24, r28
    3b2a:	0e 94 08 03 	call	0x610	; 0x610 <DbgPrintInt>
	DbgPrint("\r\n");
    3b2e:	85 ef       	ldi	r24, 0xF5	; 245
    3b30:	90 e2       	ldi	r25, 0x20	; 32
    3b32:	0e 94 c4 02 	call	0x588	; 0x588 <DbgPrint>

	while (1)
	{
		SET_ERR_LED();
    3b36:	80 e8       	ldi	r24, 0x80	; 128
    3b38:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
    3b3c:	2f ef       	ldi	r18, 0xFF	; 255
    3b3e:	33 ec       	ldi	r19, 0xC3	; 195
    3b40:	99 e0       	ldi	r25, 0x09	; 9
    3b42:	21 50       	subi	r18, 0x01	; 1
    3b44:	30 40       	sbci	r19, 0x00	; 0
    3b46:	90 40       	sbci	r25, 0x00	; 0
    3b48:	e1 f7       	brne	.-8      	; 0x3b42 <vAssertCalled+0x40>
    3b4a:	00 c0       	rjmp	.+0      	; 0x3b4c <vAssertCalled+0x4a>
    3b4c:	00 00       	nop
		_delay_ms(100);
		CLR_ERR_LED();
    3b4e:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
    3b52:	2f ef       	ldi	r18, 0xFF	; 255
    3b54:	33 ed       	ldi	r19, 0xD3	; 211
    3b56:	90 e3       	ldi	r25, 0x30	; 48
    3b58:	21 50       	subi	r18, 0x01	; 1
    3b5a:	30 40       	sbci	r19, 0x00	; 0
    3b5c:	90 40       	sbci	r25, 0x00	; 0
    3b5e:	e1 f7       	brne	.-8      	; 0x3b58 <vAssertCalled+0x56>
    3b60:	00 c0       	rjmp	.+0      	; 0x3b62 <vAssertCalled+0x60>
    3b62:	00 00       	nop
    3b64:	e9 cf       	rjmp	.-46     	; 0x3b38 <vAssertCalled+0x36>

00003b66 <main>:

uint8_t *ucHeap;

int main(void)
{
	DriverSysClkXtalInit();	//Clock init
    3b66:	0e 94 13 09 	call	0x1226	; 0x1226 <DriverSysClkXtalInit>
	//Allocate FreeRTOS heap
	ucHeap=malloc(configTOTAL_HEAP_SIZE);
    3b6a:	80 e0       	ldi	r24, 0x00	; 0
    3b6c:	90 e4       	ldi	r25, 0x40	; 64
    3b6e:	0e 94 3b 2e 	call	0x5c76	; 0x5c76 <malloc>
    3b72:	80 93 c4 26 	sts	0x26C4, r24	; 0x8026c4 <ucHeap>
    3b76:	90 93 c5 26 	sts	0x26C5, r25	; 0x8026c5 <ucHeap+0x1>
	if (ucHeap==NULL) while(1);
    3b7a:	89 2b       	or	r24, r25
    3b7c:	59 f0       	breq	.+22     	; 0x3b94 <main+0x2e>
	
	//Enable interrupts
	PMIC.CTRL=0b111;		
    3b7e:	87 e0       	ldi	r24, 0x07	; 7
    3b80:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	sei();
    3b84:	78 94       	sei
	
	//Init startup task
	InitStartupTask();
    3b86:	0e 94 7d 27 	call	0x4efa	; 0x4efa <InitStartupTask>
	
	//Start scheduler loop
	vTaskStartScheduler();	
    3b8a:	0e 94 66 18 	call	0x30cc	; 0x30cc <vTaskStartScheduler>

	return 0;
}
    3b8e:	80 e0       	ldi	r24, 0x00	; 0
    3b90:	90 e0       	ldi	r25, 0x00	; 0
    3b92:	08 95       	ret
    3b94:	ff cf       	rjmp	.-2      	; 0x3b94 <main+0x2e>

00003b96 <WorkerAcc>:
    xTaskCreate( WorkerAcc, "acc", 256, NULL, tskIDLE_PRIORITY+3, NULL );    
    AccSema=xSemaphoreCreateMutex();
}

static void WorkerAcc(void *pvParameters)
{
    3b96:	cf 93       	push	r28
    3b98:	df 93       	push	r29
    3b9a:	00 d0       	rcall	.+0      	; 0x3b9c <WorkerAcc+0x6>
    3b9c:	1f 92       	push	r1
    3b9e:	cd b7       	in	r28, 0x3d	; 61
    3ba0:	de b7       	in	r29, 0x3e	; 62
    const TickType_t xPeriod = 10;
    float OldVelX=0;
    int calibrationCount = 0;
    float totalAccX = 0.0;
    
    DriverMPU6050Init();    //Initialize IMU
    3ba2:	0e 94 4d 06 	call	0xc9a	; 0xc9a <DriverMPU6050Init>
    xLastWakeTime=xTaskGetTickCount();
    3ba6:	0e 94 a3 18 	call	0x3146	; 0x3146 <xTaskGetTickCount>
    3baa:	89 83       	std	Y+1, r24	; 0x01
    3bac:	9a 83       	std	Y+2, r25	; 0x02
    3bae:	0c ed       	ldi	r16, 0xDC	; 220
    3bb0:	15 e0       	ldi	r17, 0x05	; 5
    3bb2:	c1 2c       	mov	r12, r1
    3bb4:	d1 2c       	mov	r13, r1
    3bb6:	76 01       	movw	r14, r12
    
    // Calibration period
    while (calibrationCount * CALIBRATION_INTERVAL < CALIBRATION_DURATION)
    {
        DriverMPU6050AccGet(&Ax,NULL,NULL);
    3bb8:	40 e0       	ldi	r20, 0x00	; 0
    3bba:	50 e0       	ldi	r21, 0x00	; 0
    3bbc:	60 e0       	ldi	r22, 0x00	; 0
    3bbe:	70 e0       	ldi	r23, 0x00	; 0
    3bc0:	ce 01       	movw	r24, r28
    3bc2:	03 96       	adiw	r24, 0x03	; 3
    3bc4:	0e 94 23 07 	call	0xe46	; 0xe46 <DriverMPU6050AccGet>
        totalAccX += (float) Ax * ACCEL_CST;
    3bc8:	6b 81       	ldd	r22, Y+3	; 0x03
    3bca:	7c 81       	ldd	r23, Y+4	; 0x04
    3bcc:	07 2e       	mov	r0, r23
    3bce:	00 0c       	add	r0, r0
    3bd0:	88 0b       	sbc	r24, r24
    3bd2:	99 0b       	sbc	r25, r25
    3bd4:	0e 94 b2 28 	call	0x5164	; 0x5164 <__floatsisf>
    3bd8:	20 e0       	ldi	r18, 0x00	; 0
    3bda:	30 e0       	ldi	r19, 0x00	; 0
    3bdc:	40 e8       	ldi	r20, 0x80	; 128
    3bde:	58 e3       	ldi	r21, 0x38	; 56
    3be0:	0e 94 a6 29 	call	0x534c	; 0x534c <__mulsf3>
    3be4:	9b 01       	movw	r18, r22
    3be6:	ac 01       	movw	r20, r24
    3be8:	c7 01       	movw	r24, r14
    3bea:	b6 01       	movw	r22, r12
    3bec:	0e 94 92 27 	call	0x4f24	; 0x4f24 <__addsf3>
    3bf0:	6b 01       	movw	r12, r22
    3bf2:	7c 01       	movw	r14, r24
        calibrationCount++;
        vTaskDelay(CALIBRATION_INTERVAL);
    3bf4:	8a e0       	ldi	r24, 0x0A	; 10
    3bf6:	90 e0       	ldi	r25, 0x00	; 0
    3bf8:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <vTaskDelay>
    3bfc:	01 50       	subi	r16, 0x01	; 1
    3bfe:	11 09       	sbc	r17, r1
    
    DriverMPU6050Init();    //Initialize IMU
    xLastWakeTime=xTaskGetTickCount();
    
    // Calibration period
    while (calibrationCount * CALIBRATION_INTERVAL < CALIBRATION_DURATION)
    3c00:	d9 f6       	brne	.-74     	; 0x3bb8 <WorkerAcc+0x22>
        DriverMPU6050AccGet(&Ax,NULL,NULL);
        totalAccX += (float) Ax * ACCEL_CST;
        calibrationCount++;
        vTaskDelay(CALIBRATION_INTERVAL);
    }
    AccOffsetX = totalAccX / calibrationCount;
    3c02:	20 e0       	ldi	r18, 0x00	; 0
    3c04:	30 e8       	ldi	r19, 0x80	; 128
    3c06:	4b eb       	ldi	r20, 0xBB	; 187
    3c08:	54 e4       	ldi	r21, 0x44	; 68
    3c0a:	c7 01       	movw	r24, r14
    3c0c:	b6 01       	movw	r22, r12
    3c0e:	0e 94 08 28 	call	0x5010	; 0x5010 <__divsf3>
    3c12:	60 93 3e 26 	sts	0x263E, r22	; 0x80263e <AccOffsetX>
    3c16:	70 93 3f 26 	sts	0x263F, r23	; 0x80263f <AccOffsetX+0x1>
    3c1a:	80 93 40 26 	sts	0x2640, r24	; 0x802640 <AccOffsetX+0x2>
    3c1e:	90 93 41 26 	sts	0x2641, r25	; 0x802641 <AccOffsetX+0x3>
static void WorkerAcc(void *pvParameters)
{
    int16_t Ax;
    TickType_t xLastWakeTime;
    const TickType_t xPeriod = 10;
    float OldVelX=0;
    3c22:	a1 2c       	mov	r10, r1
    3c24:	b1 2c       	mov	r11, r1
    3c26:	c1 2c       	mov	r12, r1
    3c28:	d1 2c       	mov	r13, r1
    3c2a:	6d c0       	rjmp	.+218    	; 0x3d06 <WorkerAcc+0x170>
        DriverMPU6050AccGet(&Ax,NULL,NULL);
        xSemaphoreTake(AccSema,portMAX_DELAY);
        
        // Subtract the offset from the measured acceleration
        float calibratedAccX = ((float) Ax * ACCEL_CST) - AccOffsetX;
		if (calibratedAccX < 0.005 && calibratedAccX > -0.005) calibratedAccX=0.0;
    3c2c:	2a e0       	ldi	r18, 0x0A	; 10
    3c2e:	37 ed       	ldi	r19, 0xD7	; 215
    3c30:	43 ea       	ldi	r20, 0xA3	; 163
    3c32:	5b eb       	ldi	r21, 0xBB	; 187
    3c34:	c3 01       	movw	r24, r6
    3c36:	b2 01       	movw	r22, r4
    3c38:	0e 94 a1 29 	call	0x5342	; 0x5342 <__gesf2>
    3c3c:	18 16       	cp	r1, r24
    3c3e:	0c f0       	brlt	.+2      	; 0x3c42 <WorkerAcc+0xac>
    3c40:	94 c0       	rjmp	.+296    	; 0x3d6a <WorkerAcc+0x1d4>
    3c42:	60 e0       	ldi	r22, 0x00	; 0
    3c44:	70 e0       	ldi	r23, 0x00	; 0
    3c46:	cb 01       	movw	r24, r22
    3c48:	2b 01       	movw	r4, r22
    3c4a:	3c 01       	movw	r6, r24
        GlobAx = calibratedAccX;
    3c4c:	40 92 42 26 	sts	0x2642, r4	; 0x802642 <GlobAx>
    3c50:	50 92 43 26 	sts	0x2643, r5	; 0x802643 <GlobAx+0x1>
    3c54:	60 92 44 26 	sts	0x2644, r6	; 0x802644 <GlobAx+0x2>
    3c58:	70 92 45 26 	sts	0x2645, r7	; 0x802645 <GlobAx+0x3>
        
        // Integration to get velocity
        GlobVelX += calibratedAccX * xPeriod / 1000.0;
    3c5c:	20 91 4a 26 	lds	r18, 0x264A	; 0x80264a <GlobVelX>
    3c60:	30 91 4b 26 	lds	r19, 0x264B	; 0x80264b <GlobVelX+0x1>
    3c64:	40 91 4c 26 	lds	r20, 0x264C	; 0x80264c <GlobVelX+0x2>
    3c68:	50 91 4d 26 	lds	r21, 0x264D	; 0x80264d <GlobVelX+0x3>
    3c6c:	0e 94 92 27 	call	0x4f24	; 0x4f24 <__addsf3>
    3c70:	7b 01       	movw	r14, r22
    3c72:	8c 01       	movw	r16, r24
    3c74:	cb 01       	movw	r24, r22
    3c76:	d8 01       	movw	r26, r16
    3c78:	80 93 4a 26 	sts	0x264A, r24	; 0x80264a <GlobVelX>
    3c7c:	90 93 4b 26 	sts	0x264B, r25	; 0x80264b <GlobVelX+0x1>
    3c80:	a0 93 4c 26 	sts	0x264C, r26	; 0x80264c <GlobVelX+0x2>
    3c84:	b0 93 4d 26 	sts	0x264D, r27	; 0x80264d <GlobVelX+0x3>
        
        // Integration to get distance
        GlobDistX += ((GlobVelX + OldVelX) / 2.0) * xPeriod / 1000.0;
    3c88:	97 01       	movw	r18, r14
    3c8a:	a8 01       	movw	r20, r16
    3c8c:	b5 01       	movw	r22, r10
    3c8e:	c6 01       	movw	r24, r12
    3c90:	0e 94 92 27 	call	0x4f24	; 0x4f24 <__addsf3>
    3c94:	20 e0       	ldi	r18, 0x00	; 0
    3c96:	30 e0       	ldi	r19, 0x00	; 0
    3c98:	40 e0       	ldi	r20, 0x00	; 0
    3c9a:	5f e3       	ldi	r21, 0x3F	; 63
    3c9c:	0e 94 a6 29 	call	0x534c	; 0x534c <__mulsf3>
    3ca0:	20 e0       	ldi	r18, 0x00	; 0
    3ca2:	30 e0       	ldi	r19, 0x00	; 0
    3ca4:	40 e2       	ldi	r20, 0x20	; 32
    3ca6:	51 e4       	ldi	r21, 0x41	; 65
    3ca8:	0e 94 a6 29 	call	0x534c	; 0x534c <__mulsf3>
    3cac:	20 e0       	ldi	r18, 0x00	; 0
    3cae:	30 e0       	ldi	r19, 0x00	; 0
    3cb0:	4a e7       	ldi	r20, 0x7A	; 122
    3cb2:	54 e4       	ldi	r21, 0x44	; 68
    3cb4:	0e 94 08 28 	call	0x5010	; 0x5010 <__divsf3>
    3cb8:	9b 01       	movw	r18, r22
    3cba:	ac 01       	movw	r20, r24
    3cbc:	60 91 46 26 	lds	r22, 0x2646	; 0x802646 <GlobDistX>
    3cc0:	70 91 47 26 	lds	r23, 0x2647	; 0x802647 <GlobDistX+0x1>
    3cc4:	80 91 48 26 	lds	r24, 0x2648	; 0x802648 <GlobDistX+0x2>
    3cc8:	90 91 49 26 	lds	r25, 0x2649	; 0x802649 <GlobDistX+0x3>
    3ccc:	0e 94 92 27 	call	0x4f24	; 0x4f24 <__addsf3>
    3cd0:	60 93 46 26 	sts	0x2646, r22	; 0x802646 <GlobDistX>
    3cd4:	70 93 47 26 	sts	0x2647, r23	; 0x802647 <GlobDistX+0x1>
    3cd8:	80 93 48 26 	sts	0x2648, r24	; 0x802648 <GlobDistX+0x2>
    3cdc:	90 93 49 26 	sts	0x2649, r25	; 0x802649 <GlobDistX+0x3>
        
        OldVelX = GlobVelX;
        
        xSemaphoreGive(AccSema);
    3ce0:	20 e0       	ldi	r18, 0x00	; 0
    3ce2:	40 e0       	ldi	r20, 0x00	; 0
    3ce4:	50 e0       	ldi	r21, 0x00	; 0
    3ce6:	60 e0       	ldi	r22, 0x00	; 0
    3ce8:	70 e0       	ldi	r23, 0x00	; 0
    3cea:	80 91 4e 26 	lds	r24, 0x264E	; 0x80264e <AccSema>
    3cee:	90 91 4f 26 	lds	r25, 0x264F	; 0x80264f <AccSema+0x1>
    3cf2:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <xQueueGenericSend>
        
        vTaskDelayUntil( &xLastWakeTime, xPeriod );
    3cf6:	6a e0       	ldi	r22, 0x0A	; 10
    3cf8:	70 e0       	ldi	r23, 0x00	; 0
    3cfa:	ce 01       	movw	r24, r28
    3cfc:	01 96       	adiw	r24, 0x01	; 1
    3cfe:	0e 94 16 1a 	call	0x342c	; 0x342c <vTaskDelayUntil>
        GlobVelX += calibratedAccX * xPeriod / 1000.0;
        
        // Integration to get distance
        GlobDistX += ((GlobVelX + OldVelX) / 2.0) * xPeriod / 1000.0;
        
        OldVelX = GlobVelX;
    3d02:	57 01       	movw	r10, r14
    3d04:	68 01       	movw	r12, r16
    }
    AccOffsetX = totalAccX / calibrationCount;
    
    while (1)
    {        
        DriverMPU6050AccGet(&Ax,NULL,NULL);
    3d06:	40 e0       	ldi	r20, 0x00	; 0
    3d08:	50 e0       	ldi	r21, 0x00	; 0
    3d0a:	60 e0       	ldi	r22, 0x00	; 0
    3d0c:	70 e0       	ldi	r23, 0x00	; 0
    3d0e:	ce 01       	movw	r24, r28
    3d10:	03 96       	adiw	r24, 0x03	; 3
    3d12:	0e 94 23 07 	call	0xe46	; 0xe46 <DriverMPU6050AccGet>
        xSemaphoreTake(AccSema,portMAX_DELAY);
    3d16:	6f ef       	ldi	r22, 0xFF	; 255
    3d18:	7f ef       	ldi	r23, 0xFF	; 255
    3d1a:	80 91 4e 26 	lds	r24, 0x264E	; 0x80264e <AccSema>
    3d1e:	90 91 4f 26 	lds	r25, 0x264F	; 0x80264f <AccSema+0x1>
    3d22:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <xQueueSemaphoreTake>
        
        // Subtract the offset from the measured acceleration
        float calibratedAccX = ((float) Ax * ACCEL_CST) - AccOffsetX;
    3d26:	6b 81       	ldd	r22, Y+3	; 0x03
    3d28:	7c 81       	ldd	r23, Y+4	; 0x04
    3d2a:	07 2e       	mov	r0, r23
    3d2c:	00 0c       	add	r0, r0
    3d2e:	88 0b       	sbc	r24, r24
    3d30:	99 0b       	sbc	r25, r25
    3d32:	0e 94 b2 28 	call	0x5164	; 0x5164 <__floatsisf>
    3d36:	20 e0       	ldi	r18, 0x00	; 0
    3d38:	30 e0       	ldi	r19, 0x00	; 0
    3d3a:	40 e8       	ldi	r20, 0x80	; 128
    3d3c:	58 e3       	ldi	r21, 0x38	; 56
    3d3e:	0e 94 a6 29 	call	0x534c	; 0x534c <__mulsf3>
    3d42:	20 91 3e 26 	lds	r18, 0x263E	; 0x80263e <AccOffsetX>
    3d46:	30 91 3f 26 	lds	r19, 0x263F	; 0x80263f <AccOffsetX+0x1>
    3d4a:	40 91 40 26 	lds	r20, 0x2640	; 0x802640 <AccOffsetX+0x2>
    3d4e:	50 91 41 26 	lds	r21, 0x2641	; 0x802641 <AccOffsetX+0x3>
    3d52:	0e 94 91 27 	call	0x4f22	; 0x4f22 <__subsf3>
    3d56:	2b 01       	movw	r4, r22
    3d58:	3c 01       	movw	r6, r24
		if (calibratedAccX < 0.005 && calibratedAccX > -0.005) calibratedAccX=0.0;
    3d5a:	2a e0       	ldi	r18, 0x0A	; 10
    3d5c:	37 ed       	ldi	r19, 0xD7	; 215
    3d5e:	43 ea       	ldi	r20, 0xA3	; 163
    3d60:	5b e3       	ldi	r21, 0x3B	; 59
    3d62:	0e 94 fe 27 	call	0x4ffc	; 0x4ffc <__cmpsf2>
    3d66:	87 fd       	sbrc	r24, 7
    3d68:	61 cf       	rjmp	.-318    	; 0x3c2c <WorkerAcc+0x96>
    3d6a:	20 e0       	ldi	r18, 0x00	; 0
    3d6c:	30 e0       	ldi	r19, 0x00	; 0
    3d6e:	40 e2       	ldi	r20, 0x20	; 32
    3d70:	51 e4       	ldi	r21, 0x41	; 65
    3d72:	c3 01       	movw	r24, r6
    3d74:	b2 01       	movw	r22, r4
    3d76:	0e 94 a6 29 	call	0x534c	; 0x534c <__mulsf3>
    3d7a:	20 e0       	ldi	r18, 0x00	; 0
    3d7c:	30 e0       	ldi	r19, 0x00	; 0
    3d7e:	4a e7       	ldi	r20, 0x7A	; 122
    3d80:	54 e4       	ldi	r21, 0x44	; 68
    3d82:	0e 94 08 28 	call	0x5010	; 0x5010 <__divsf3>
    3d86:	62 cf       	rjmp	.-316    	; 0x3c4c <WorkerAcc+0xb6>

00003d88 <InitAccTask>:
//Private function prototypes
static void WorkerAcc(void *pvParameters);

//Function definitions
void InitAccTask()
{
    3d88:	ef 92       	push	r14
    3d8a:	ff 92       	push	r15
    3d8c:	0f 93       	push	r16
    xTaskCreate( WorkerAcc, "acc", 256, NULL, tskIDLE_PRIORITY+3, NULL );    
    3d8e:	e1 2c       	mov	r14, r1
    3d90:	f1 2c       	mov	r15, r1
    3d92:	03 e0       	ldi	r16, 0x03	; 3
    3d94:	20 e0       	ldi	r18, 0x00	; 0
    3d96:	30 e0       	ldi	r19, 0x00	; 0
    3d98:	40 e0       	ldi	r20, 0x00	; 0
    3d9a:	51 e0       	ldi	r21, 0x01	; 1
    3d9c:	6d e4       	ldi	r22, 0x4D	; 77
    3d9e:	71 e2       	ldi	r23, 0x21	; 33
    3da0:	8b ec       	ldi	r24, 0xCB	; 203
    3da2:	9d e1       	ldi	r25, 0x1D	; 29
    3da4:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <xTaskCreate>
    AccSema=xSemaphoreCreateMutex();
    3da8:	81 e0       	ldi	r24, 0x01	; 1
    3daa:	0e 94 4b 11 	call	0x2296	; 0x2296 <xQueueCreateMutex>
    3dae:	80 93 4e 26 	sts	0x264E, r24	; 0x80264e <AccSema>
    3db2:	90 93 4f 26 	sts	0x264F, r25	; 0x80264f <AccSema+0x1>
}
    3db6:	0f 91       	pop	r16
    3db8:	ff 90       	pop	r15
    3dba:	ef 90       	pop	r14
    3dbc:	08 95       	ret

00003dbe <GetADCData>:
		vTaskDelayUntil( &xLastWakeTime, xPeriod );
	}
}

ADCStruct GetADCData(void)
{
    3dbe:	cf 93       	push	r28
    3dc0:	df 93       	push	r29
    3dc2:	cd b7       	in	r28, 0x3d	; 61
    3dc4:	de b7       	in	r29, 0x3e	; 62
    3dc6:	60 97       	sbiw	r28, 0x10	; 16
    3dc8:	cd bf       	out	0x3d, r28	; 61
    3dca:	de bf       	out	0x3e, r29	; 62
	ADCStruct ADCData;
	xQueuePeek(ADCQueue,&ADCData,portMAX_DELAY);
    3dcc:	4f ef       	ldi	r20, 0xFF	; 255
    3dce:	5f ef       	ldi	r21, 0xFF	; 255
    3dd0:	be 01       	movw	r22, r28
    3dd2:	67 5f       	subi	r22, 0xF7	; 247
    3dd4:	7f 4f       	sbci	r23, 0xFF	; 255
    3dd6:	80 91 c6 26 	lds	r24, 0x26C6	; 0x8026c6 <ADCQueue>
    3dda:	90 91 c7 26 	lds	r25, 0x26C7	; 0x8026c7 <ADCQueue+0x1>
    3dde:	0e 94 ca 13 	call	0x2794	; 0x2794 <xQueuePeek>
	return ADCData;
    3de2:	88 e0       	ldi	r24, 0x08	; 8
    3de4:	fe 01       	movw	r30, r28
    3de6:	39 96       	adiw	r30, 0x09	; 9
    3de8:	de 01       	movw	r26, r28
    3dea:	11 96       	adiw	r26, 0x01	; 1
    3dec:	01 90       	ld	r0, Z+
    3dee:	0d 92       	st	X+, r0
    3df0:	8a 95       	dec	r24
    3df2:	e1 f7       	brne	.-8      	; 0x3dec <GetADCData+0x2e>
    3df4:	29 81       	ldd	r18, Y+1	; 0x01
    3df6:	3a 81       	ldd	r19, Y+2	; 0x02
    3df8:	4b 81       	ldd	r20, Y+3	; 0x03
    3dfa:	5c 81       	ldd	r21, Y+4	; 0x04
    3dfc:	6d 81       	ldd	r22, Y+5	; 0x05
    3dfe:	7e 81       	ldd	r23, Y+6	; 0x06
    3e00:	8f 81       	ldd	r24, Y+7	; 0x07
    3e02:	98 85       	ldd	r25, Y+8	; 0x08
    3e04:	60 96       	adiw	r28, 0x10	; 16
    3e06:	cd bf       	out	0x3d, r28	; 61
    3e08:	de bf       	out	0x3e, r29	; 62
    3e0a:	df 91       	pop	r29
    3e0c:	cf 91       	pop	r28
    3e0e:	08 95       	ret

00003e10 <WorkerGyro>:
	xTaskCreate( WorkerGyro, "gyro", 256, NULL, tskIDLE_PRIORITY+3, NULL );	
	GyroSema=xSemaphoreCreateMutex();
}

static void WorkerGyro(void *pvParameters)
{
    3e10:	cf 93       	push	r28
    3e12:	df 93       	push	r29
    3e14:	00 d0       	rcall	.+0      	; 0x3e16 <WorkerGyro+0x6>
    3e16:	1f 92       	push	r1
    3e18:	cd b7       	in	r28, 0x3d	; 61
    3e1a:	de b7       	in	r29, 0x3e	; 62
	TickType_t xLastWakeTime;
	const TickType_t xPeriod = 10;
	float GyroYawOffset;
	float OldYawRate=0;
	
	DriverMPU6050Init();	//Initialize IMU
    3e1c:	0e 94 4d 06 	call	0xc9a	; 0xc9a <DriverMPU6050Init>
	xLastWakeTime=xTaskGetTickCount();
    3e20:	0e 94 a3 18 	call	0x3146	; 0x3146 <xTaskGetTickCount>
    3e24:	89 83       	std	Y+1, r24	; 0x01
    3e26:	9a 83       	std	Y+2, r25	; 0x02
	
	vTaskDelay(200);
    3e28:	88 ec       	ldi	r24, 0xC8	; 200
    3e2a:	90 e0       	ldi	r25, 0x00	; 0
    3e2c:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <vTaskDelay>
	DriverMPU6050GyroGet(NULL,NULL,&Gz);
    3e30:	ae 01       	movw	r20, r28
    3e32:	4d 5f       	subi	r20, 0xFD	; 253
    3e34:	5f 4f       	sbci	r21, 0xFF	; 255
    3e36:	60 e0       	ldi	r22, 0x00	; 0
    3e38:	70 e0       	ldi	r23, 0x00	; 0
    3e3a:	80 e0       	ldi	r24, 0x00	; 0
    3e3c:	90 e0       	ldi	r25, 0x00	; 0
    3e3e:	0e 94 cd 06 	call	0xd9a	; 0xd9a <DriverMPU6050GyroGet>
	GyroYawOffset=(float) Gz*RATE_CST;
    3e42:	6b 81       	ldd	r22, Y+3	; 0x03
    3e44:	7c 81       	ldd	r23, Y+4	; 0x04
    3e46:	07 2e       	mov	r0, r23
    3e48:	00 0c       	add	r0, r0
    3e4a:	88 0b       	sbc	r24, r24
    3e4c:	99 0b       	sbc	r25, r25
    3e4e:	0e 94 b2 28 	call	0x5164	; 0x5164 <__floatsisf>
    3e52:	2d e2       	ldi	r18, 0x2D	; 45
    3e54:	33 e2       	ldi	r19, 0x23	; 35
    3e56:	4a ef       	ldi	r20, 0xFA	; 250
    3e58:	5b e3       	ldi	r21, 0x3B	; 59
    3e5a:	0e 94 a6 29 	call	0x534c	; 0x534c <__mulsf3>
    3e5e:	4b 01       	movw	r8, r22
    3e60:	5c 01       	movw	r10, r24
{
	int16_t Gz;
	TickType_t xLastWakeTime;
	const TickType_t xPeriod = 10;
	float GyroYawOffset;
	float OldYawRate=0;
    3e62:	61 2c       	mov	r6, r1
    3e64:	71 2c       	mov	r7, r1
    3e66:	c1 2c       	mov	r12, r1
    3e68:	d1 2c       	mov	r13, r1
    3e6a:	0e c0       	rjmp	.+28     	; 0x3e88 <WorkerGyro+0x78>
		
		OldYawRate=GlobYawRate;
		
		xSemaphoreGive(GyroSema);
		if (GlobYawRate>0) 
			GyroYawOffset+=0.001;
    3e6c:	c5 01       	movw	r24, r10
    3e6e:	b4 01       	movw	r22, r8
    3e70:	0e 94 92 27 	call	0x4f24	; 0x4f24 <__addsf3>
    3e74:	4b 01       	movw	r8, r22
    3e76:	5c 01       	movw	r10, r24
		else
			GyroYawOffset-=0.001;
		
		vTaskDelayUntil( &xLastWakeTime, xPeriod );
    3e78:	6a e0       	ldi	r22, 0x0A	; 10
    3e7a:	70 e0       	ldi	r23, 0x00	; 0
    3e7c:	ce 01       	movw	r24, r28
    3e7e:	01 96       	adiw	r24, 0x01	; 1
    3e80:	0e 94 16 1a 	call	0x342c	; 0x342c <vTaskDelayUntil>
		GlobYawRate-=GyroYawOffset;
		
		//Integration to yaw angle
		GlobYaw+=((GlobYawRate/100)+(OldYawRate/100))/2;
		
		OldYawRate=GlobYawRate;
    3e84:	37 01       	movw	r6, r14
    3e86:	68 01       	movw	r12, r16
	GyroYawOffset=(float) Gz*RATE_CST;

	
	while (1)
	{		
		DriverMPU6050GyroGet(NULL,NULL,&Gz);
    3e88:	ae 01       	movw	r20, r28
    3e8a:	4d 5f       	subi	r20, 0xFD	; 253
    3e8c:	5f 4f       	sbci	r21, 0xFF	; 255
    3e8e:	60 e0       	ldi	r22, 0x00	; 0
    3e90:	70 e0       	ldi	r23, 0x00	; 0
    3e92:	80 e0       	ldi	r24, 0x00	; 0
    3e94:	90 e0       	ldi	r25, 0x00	; 0
    3e96:	0e 94 cd 06 	call	0xd9a	; 0xd9a <DriverMPU6050GyroGet>
		xSemaphoreTake(GyroSema,portMAX_DELAY);
    3e9a:	6f ef       	ldi	r22, 0xFF	; 255
    3e9c:	7f ef       	ldi	r23, 0xFF	; 255
    3e9e:	80 91 58 26 	lds	r24, 0x2658	; 0x802658 <GyroSema>
    3ea2:	90 91 59 26 	lds	r25, 0x2659	; 0x802659 <GyroSema+0x1>
    3ea6:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <xQueueSemaphoreTake>
		GlobYawRate=(float) Gz*RATE_CST;
		GlobYawRate-=GyroYawOffset;
    3eaa:	6b 81       	ldd	r22, Y+3	; 0x03
    3eac:	7c 81       	ldd	r23, Y+4	; 0x04
    3eae:	07 2e       	mov	r0, r23
    3eb0:	00 0c       	add	r0, r0
    3eb2:	88 0b       	sbc	r24, r24
    3eb4:	99 0b       	sbc	r25, r25
    3eb6:	0e 94 b2 28 	call	0x5164	; 0x5164 <__floatsisf>
    3eba:	2d e2       	ldi	r18, 0x2D	; 45
    3ebc:	33 e2       	ldi	r19, 0x23	; 35
    3ebe:	4a ef       	ldi	r20, 0xFA	; 250
    3ec0:	5b e3       	ldi	r21, 0x3B	; 59
    3ec2:	0e 94 a6 29 	call	0x534c	; 0x534c <__mulsf3>
    3ec6:	a5 01       	movw	r20, r10
    3ec8:	94 01       	movw	r18, r8
    3eca:	0e 94 91 27 	call	0x4f22	; 0x4f22 <__subsf3>
    3ece:	7b 01       	movw	r14, r22
    3ed0:	8c 01       	movw	r16, r24
    3ed2:	cb 01       	movw	r24, r22
    3ed4:	d8 01       	movw	r26, r16
    3ed6:	80 93 54 26 	sts	0x2654, r24	; 0x802654 <GlobYawRate>
    3eda:	90 93 55 26 	sts	0x2655, r25	; 0x802655 <GlobYawRate+0x1>
    3ede:	a0 93 56 26 	sts	0x2656, r26	; 0x802656 <GlobYawRate+0x2>
    3ee2:	b0 93 57 26 	sts	0x2657, r27	; 0x802657 <GlobYawRate+0x3>
		
		//Integration to yaw angle
		GlobYaw+=((GlobYawRate/100)+(OldYawRate/100))/2;
    3ee6:	20 e0       	ldi	r18, 0x00	; 0
    3ee8:	30 e0       	ldi	r19, 0x00	; 0
    3eea:	48 ec       	ldi	r20, 0xC8	; 200
    3eec:	52 e4       	ldi	r21, 0x42	; 66
    3eee:	b7 01       	movw	r22, r14
    3ef0:	c8 01       	movw	r24, r16
    3ef2:	0e 94 08 28 	call	0x5010	; 0x5010 <__divsf3>
    3ef6:	1b 01       	movw	r2, r22
    3ef8:	2c 01       	movw	r4, r24
    3efa:	20 e0       	ldi	r18, 0x00	; 0
    3efc:	30 e0       	ldi	r19, 0x00	; 0
    3efe:	48 ec       	ldi	r20, 0xC8	; 200
    3f00:	52 e4       	ldi	r21, 0x42	; 66
    3f02:	b3 01       	movw	r22, r6
    3f04:	c6 01       	movw	r24, r12
    3f06:	0e 94 08 28 	call	0x5010	; 0x5010 <__divsf3>
    3f0a:	9b 01       	movw	r18, r22
    3f0c:	ac 01       	movw	r20, r24
    3f0e:	c2 01       	movw	r24, r4
    3f10:	b1 01       	movw	r22, r2
    3f12:	0e 94 92 27 	call	0x4f24	; 0x4f24 <__addsf3>
    3f16:	20 e0       	ldi	r18, 0x00	; 0
    3f18:	30 e0       	ldi	r19, 0x00	; 0
    3f1a:	40 e0       	ldi	r20, 0x00	; 0
    3f1c:	5f e3       	ldi	r21, 0x3F	; 63
    3f1e:	0e 94 a6 29 	call	0x534c	; 0x534c <__mulsf3>
    3f22:	9b 01       	movw	r18, r22
    3f24:	ac 01       	movw	r20, r24
    3f26:	60 91 50 26 	lds	r22, 0x2650	; 0x802650 <GlobYaw>
    3f2a:	70 91 51 26 	lds	r23, 0x2651	; 0x802651 <GlobYaw+0x1>
    3f2e:	80 91 52 26 	lds	r24, 0x2652	; 0x802652 <GlobYaw+0x2>
    3f32:	90 91 53 26 	lds	r25, 0x2653	; 0x802653 <GlobYaw+0x3>
    3f36:	0e 94 92 27 	call	0x4f24	; 0x4f24 <__addsf3>
    3f3a:	60 93 50 26 	sts	0x2650, r22	; 0x802650 <GlobYaw>
    3f3e:	70 93 51 26 	sts	0x2651, r23	; 0x802651 <GlobYaw+0x1>
    3f42:	80 93 52 26 	sts	0x2652, r24	; 0x802652 <GlobYaw+0x2>
    3f46:	90 93 53 26 	sts	0x2653, r25	; 0x802653 <GlobYaw+0x3>
		
		OldYawRate=GlobYawRate;
		
		xSemaphoreGive(GyroSema);
    3f4a:	20 e0       	ldi	r18, 0x00	; 0
    3f4c:	40 e0       	ldi	r20, 0x00	; 0
    3f4e:	50 e0       	ldi	r21, 0x00	; 0
    3f50:	60 e0       	ldi	r22, 0x00	; 0
    3f52:	70 e0       	ldi	r23, 0x00	; 0
    3f54:	80 91 58 26 	lds	r24, 0x2658	; 0x802658 <GyroSema>
    3f58:	90 91 59 26 	lds	r25, 0x2659	; 0x802659 <GyroSema+0x1>
    3f5c:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <xQueueGenericSend>
		if (GlobYawRate>0) 
    3f60:	20 e0       	ldi	r18, 0x00	; 0
    3f62:	30 e0       	ldi	r19, 0x00	; 0
    3f64:	a9 01       	movw	r20, r18
    3f66:	60 91 54 26 	lds	r22, 0x2654	; 0x802654 <GlobYawRate>
    3f6a:	70 91 55 26 	lds	r23, 0x2655	; 0x802655 <GlobYawRate+0x1>
    3f6e:	80 91 56 26 	lds	r24, 0x2656	; 0x802656 <GlobYawRate+0x2>
    3f72:	90 91 57 26 	lds	r25, 0x2657	; 0x802657 <GlobYawRate+0x3>
    3f76:	0e 94 a1 29 	call	0x5342	; 0x5342 <__gesf2>
			GyroYawOffset+=0.001;
    3f7a:	2f e6       	ldi	r18, 0x6F	; 111
    3f7c:	32 e1       	ldi	r19, 0x12	; 18
    3f7e:	43 e8       	ldi	r20, 0x83	; 131
    3f80:	5a e3       	ldi	r21, 0x3A	; 58
		GlobYaw+=((GlobYawRate/100)+(OldYawRate/100))/2;
		
		OldYawRate=GlobYawRate;
		
		xSemaphoreGive(GyroSema);
		if (GlobYawRate>0) 
    3f82:	18 16       	cp	r1, r24
    3f84:	0c f4       	brge	.+2      	; 0x3f88 <WorkerGyro+0x178>
    3f86:	72 cf       	rjmp	.-284    	; 0x3e6c <WorkerGyro+0x5c>
			GyroYawOffset+=0.001;
		else
			GyroYawOffset-=0.001;
    3f88:	c5 01       	movw	r24, r10
    3f8a:	b4 01       	movw	r22, r8
    3f8c:	0e 94 91 27 	call	0x4f22	; 0x4f22 <__subsf3>
    3f90:	4b 01       	movw	r8, r22
    3f92:	5c 01       	movw	r10, r24
    3f94:	71 cf       	rjmp	.-286    	; 0x3e78 <WorkerGyro+0x68>

00003f96 <InitGyroTask>:
//Private function prototypes
static void WorkerGyro(void *pvParameters);

//Function definitions
void InitGyroTask()
{
    3f96:	ef 92       	push	r14
    3f98:	ff 92       	push	r15
    3f9a:	0f 93       	push	r16
	xTaskCreate( WorkerGyro, "gyro", 256, NULL, tskIDLE_PRIORITY+3, NULL );	
    3f9c:	e1 2c       	mov	r14, r1
    3f9e:	f1 2c       	mov	r15, r1
    3fa0:	03 e0       	ldi	r16, 0x03	; 3
    3fa2:	20 e0       	ldi	r18, 0x00	; 0
    3fa4:	30 e0       	ldi	r19, 0x00	; 0
    3fa6:	40 e0       	ldi	r20, 0x00	; 0
    3fa8:	51 e0       	ldi	r21, 0x01	; 1
    3faa:	61 e5       	ldi	r22, 0x51	; 81
    3fac:	71 e2       	ldi	r23, 0x21	; 33
    3fae:	88 e0       	ldi	r24, 0x08	; 8
    3fb0:	9f e1       	ldi	r25, 0x1F	; 31
    3fb2:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <xTaskCreate>
	GyroSema=xSemaphoreCreateMutex();
    3fb6:	81 e0       	ldi	r24, 0x01	; 1
    3fb8:	0e 94 4b 11 	call	0x2296	; 0x2296 <xQueueCreateMutex>
    3fbc:	80 93 58 26 	sts	0x2658, r24	; 0x802658 <GyroSema>
    3fc0:	90 93 59 26 	sts	0x2659, r25	; 0x802659 <GyroSema+0x1>
}
    3fc4:	0f 91       	pop	r16
    3fc6:	ff 90       	pop	r15
    3fc8:	ef 90       	pop	r14
    3fca:	08 95       	ret

00003fcc <WorkerIPS>:
    xTaskCreate( WorkerIPS, "IPS", 512, NULL, tskIDLE_PRIORITY+3, NULL );    
    IPS_Sema=xSemaphoreCreateMutex();
}

static void WorkerIPS(void *pvParameters)
{
    3fcc:	cf 93       	push	r28
    3fce:	df 93       	push	r29
    3fd0:	cd b7       	in	r28, 0x3d	; 61
    3fd2:	de b7       	in	r29, 0x3e	; 62
    3fd4:	a2 97       	sbiw	r28, 0x22	; 34
    3fd6:	cd bf       	out	0x3d, r28	; 61
    3fd8:	de bf       	out	0x3e, r29	; 62
    int16_t Ax, Ay, Az, Gx, Gy, Gz;
    TickType_t xLastWakeTime;
    const TickType_t xPeriod = 10;
    float OldVelX=0, OldVelY=0, OldVelZ=0;
    
    DriverMPU6050Init();    //Initialize IMU
    3fda:	0e 94 4d 06 	call	0xc9a	; 0xc9a <DriverMPU6050Init>
    xLastWakeTime=xTaskGetTickCount();
    3fde:	0e 94 a3 18 	call	0x3146	; 0x3146 <xTaskGetTickCount>
    3fe2:	89 83       	std	Y+1, r24	; 0x01
    3fe4:	9a 83       	std	Y+2, r25	; 0x02
static void WorkerIPS(void *pvParameters)
{
    int16_t Ax, Ay, Az, Gx, Gy, Gz;
    TickType_t xLastWakeTime;
    const TickType_t xPeriod = 10;
    float OldVelX=0, OldVelY=0, OldVelZ=0;
    3fe6:	1b 8e       	std	Y+27, r1	; 0x1b
    3fe8:	1c 8e       	std	Y+28, r1	; 0x1c
    3fea:	1d 8e       	std	Y+29, r1	; 0x1d
    3fec:	1e 8e       	std	Y+30, r1	; 0x1e
    3fee:	1f 8a       	std	Y+23, r1	; 0x17
    3ff0:	18 8e       	std	Y+24, r1	; 0x18
    3ff2:	19 8e       	std	Y+25, r1	; 0x19
    3ff4:	1a 8e       	std	Y+26, r1	; 0x1a
    3ff6:	1b 8a       	std	Y+19, r1	; 0x13
    3ff8:	1c 8a       	std	Y+20, r1	; 0x14
    3ffa:	1d 8a       	std	Y+21, r1	; 0x15
    3ffc:	1e 8a       	std	Y+22, r1	; 0x16
    
    // Calibration and initialization code here...
    
    while (1)
    {        
        DriverMPU6050AccGet(&Ax, &Ay, &Az);
    3ffe:	ae 01       	movw	r20, r28
    4000:	47 5f       	subi	r20, 0xF7	; 247
    4002:	5f 4f       	sbci	r21, 0xFF	; 255
    4004:	be 01       	movw	r22, r28
    4006:	65 5f       	subi	r22, 0xF5	; 245
    4008:	7f 4f       	sbci	r23, 0xFF	; 255
    400a:	ce 01       	movw	r24, r28
    400c:	0d 96       	adiw	r24, 0x0d	; 13
    400e:	0e 94 23 07 	call	0xe46	; 0xe46 <DriverMPU6050AccGet>
        DriverMPU6050GyroGet(&Gx, &Gy, &Gz);
    4012:	ae 01       	movw	r20, r28
    4014:	4d 5f       	subi	r20, 0xFD	; 253
    4016:	5f 4f       	sbci	r21, 0xFF	; 255
    4018:	be 01       	movw	r22, r28
    401a:	6b 5f       	subi	r22, 0xFB	; 251
    401c:	7f 4f       	sbci	r23, 0xFF	; 255
    401e:	ce 01       	movw	r24, r28
    4020:	07 96       	adiw	r24, 0x07	; 7
    4022:	0e 94 cd 06 	call	0xd9a	; 0xd9a <DriverMPU6050GyroGet>

        // Store the acceleration and gyroscope data in global variables
        GlobAccX = Ax * ACCEL_CST;
    4026:	6d 85       	ldd	r22, Y+13	; 0x0d
    4028:	7e 85       	ldd	r23, Y+14	; 0x0e
    402a:	07 2e       	mov	r0, r23
    402c:	00 0c       	add	r0, r0
    402e:	88 0b       	sbc	r24, r24
    4030:	99 0b       	sbc	r25, r25
    4032:	0e 94 b2 28 	call	0x5164	; 0x5164 <__floatsisf>
    4036:	20 e0       	ldi	r18, 0x00	; 0
    4038:	30 e0       	ldi	r19, 0x00	; 0
    403a:	40 e8       	ldi	r20, 0x80	; 128
    403c:	58 e3       	ldi	r21, 0x38	; 56
    403e:	0e 94 a6 29 	call	0x534c	; 0x534c <__mulsf3>
    4042:	60 93 6e 26 	sts	0x266E, r22	; 0x80266e <GlobAccX>
    4046:	70 93 6f 26 	sts	0x266F, r23	; 0x80266f <GlobAccX+0x1>
    404a:	80 93 70 26 	sts	0x2670, r24	; 0x802670 <GlobAccX+0x2>
    404e:	90 93 71 26 	sts	0x2671, r25	; 0x802671 <GlobAccX+0x3>
        GlobAccY = Ay * ACCEL_CST;
    4052:	6b 85       	ldd	r22, Y+11	; 0x0b
    4054:	7c 85       	ldd	r23, Y+12	; 0x0c
    4056:	07 2e       	mov	r0, r23
    4058:	00 0c       	add	r0, r0
    405a:	88 0b       	sbc	r24, r24
    405c:	99 0b       	sbc	r25, r25
    405e:	0e 94 b2 28 	call	0x5164	; 0x5164 <__floatsisf>
    4062:	20 e0       	ldi	r18, 0x00	; 0
    4064:	30 e0       	ldi	r19, 0x00	; 0
    4066:	40 e8       	ldi	r20, 0x80	; 128
    4068:	58 e3       	ldi	r21, 0x38	; 56
    406a:	0e 94 a6 29 	call	0x534c	; 0x534c <__mulsf3>
    406e:	60 93 6a 26 	sts	0x266A, r22	; 0x80266a <GlobAccY>
    4072:	70 93 6b 26 	sts	0x266B, r23	; 0x80266b <GlobAccY+0x1>
    4076:	80 93 6c 26 	sts	0x266C, r24	; 0x80266c <GlobAccY+0x2>
    407a:	90 93 6d 26 	sts	0x266D, r25	; 0x80266d <GlobAccY+0x3>
        GlobAccZ = Az * ACCEL_CST;
    407e:	69 85       	ldd	r22, Y+9	; 0x09
    4080:	7a 85       	ldd	r23, Y+10	; 0x0a
    4082:	07 2e       	mov	r0, r23
    4084:	00 0c       	add	r0, r0
    4086:	88 0b       	sbc	r24, r24
    4088:	99 0b       	sbc	r25, r25
    408a:	0e 94 b2 28 	call	0x5164	; 0x5164 <__floatsisf>
    408e:	20 e0       	ldi	r18, 0x00	; 0
    4090:	30 e0       	ldi	r19, 0x00	; 0
    4092:	40 e8       	ldi	r20, 0x80	; 128
    4094:	58 e3       	ldi	r21, 0x38	; 56
    4096:	0e 94 a6 29 	call	0x534c	; 0x534c <__mulsf3>
    409a:	60 93 66 26 	sts	0x2666, r22	; 0x802666 <GlobAccZ>
    409e:	70 93 67 26 	sts	0x2667, r23	; 0x802667 <GlobAccZ+0x1>
    40a2:	80 93 68 26 	sts	0x2668, r24	; 0x802668 <GlobAccZ+0x2>
    40a6:	90 93 69 26 	sts	0x2669, r25	; 0x802669 <GlobAccZ+0x3>
        
        GlobGyroX = Gx * GYRO_CST;
    40aa:	6f 81       	ldd	r22, Y+7	; 0x07
    40ac:	78 85       	ldd	r23, Y+8	; 0x08
    40ae:	07 2e       	mov	r0, r23
    40b0:	00 0c       	add	r0, r0
    40b2:	88 0b       	sbc	r24, r24
    40b4:	99 0b       	sbc	r25, r25
    40b6:	0e 94 b2 28 	call	0x5164	; 0x5164 <__floatsisf>
    40ba:	2d e2       	ldi	r18, 0x2D	; 45
    40bc:	33 e2       	ldi	r19, 0x23	; 35
    40be:	4a ef       	ldi	r20, 0xFA	; 250
    40c0:	5b e3       	ldi	r21, 0x3B	; 59
    40c2:	0e 94 a6 29 	call	0x534c	; 0x534c <__mulsf3>
    40c6:	60 93 62 26 	sts	0x2662, r22	; 0x802662 <GlobGyroX>
    40ca:	70 93 63 26 	sts	0x2663, r23	; 0x802663 <GlobGyroX+0x1>
    40ce:	80 93 64 26 	sts	0x2664, r24	; 0x802664 <GlobGyroX+0x2>
    40d2:	90 93 65 26 	sts	0x2665, r25	; 0x802665 <GlobGyroX+0x3>
        GlobGyroY = Gy * GYRO_CST;
    40d6:	6d 81       	ldd	r22, Y+5	; 0x05
    40d8:	7e 81       	ldd	r23, Y+6	; 0x06
    40da:	07 2e       	mov	r0, r23
    40dc:	00 0c       	add	r0, r0
    40de:	88 0b       	sbc	r24, r24
    40e0:	99 0b       	sbc	r25, r25
    40e2:	0e 94 b2 28 	call	0x5164	; 0x5164 <__floatsisf>
    40e6:	2d e2       	ldi	r18, 0x2D	; 45
    40e8:	33 e2       	ldi	r19, 0x23	; 35
    40ea:	4a ef       	ldi	r20, 0xFA	; 250
    40ec:	5b e3       	ldi	r21, 0x3B	; 59
    40ee:	0e 94 a6 29 	call	0x534c	; 0x534c <__mulsf3>
    40f2:	60 93 5e 26 	sts	0x265E, r22	; 0x80265e <GlobGyroY>
    40f6:	70 93 5f 26 	sts	0x265F, r23	; 0x80265f <GlobGyroY+0x1>
    40fa:	80 93 60 26 	sts	0x2660, r24	; 0x802660 <GlobGyroY+0x2>
    40fe:	90 93 61 26 	sts	0x2661, r25	; 0x802661 <GlobGyroY+0x3>
        GlobGyroZ = Gz * GYRO_CST;
    4102:	6b 81       	ldd	r22, Y+3	; 0x03
    4104:	7c 81       	ldd	r23, Y+4	; 0x04
    4106:	07 2e       	mov	r0, r23
    4108:	00 0c       	add	r0, r0
    410a:	88 0b       	sbc	r24, r24
    410c:	99 0b       	sbc	r25, r25
    410e:	0e 94 b2 28 	call	0x5164	; 0x5164 <__floatsisf>
    4112:	2d e2       	ldi	r18, 0x2D	; 45
    4114:	33 e2       	ldi	r19, 0x23	; 35
    4116:	4a ef       	ldi	r20, 0xFA	; 250
    4118:	5b e3       	ldi	r21, 0x3B	; 59
    411a:	0e 94 a6 29 	call	0x534c	; 0x534c <__mulsf3>
    411e:	60 93 5a 26 	sts	0x265A, r22	; 0x80265a <GlobGyroZ>
    4122:	70 93 5b 26 	sts	0x265B, r23	; 0x80265b <GlobGyroZ+0x1>
    4126:	80 93 5c 26 	sts	0x265C, r24	; 0x80265c <GlobGyroZ+0x2>
    412a:	90 93 5d 26 	sts	0x265D, r25	; 0x80265d <GlobGyroZ+0x3>
        
        xSemaphoreTake(IPS_Sema,portMAX_DELAY);
    412e:	6f ef       	ldi	r22, 0xFF	; 255
    4130:	7f ef       	ldi	r23, 0xFF	; 255
    4132:	80 91 8a 26 	lds	r24, 0x268A	; 0x80268a <IPS_Sema>
    4136:	90 91 8b 26 	lds	r25, 0x268B	; 0x80268b <IPS_Sema+0x1>
    413a:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <xQueueSemaphoreTake>
        
        // Update orientation using gyroscope data
        GlobYaw += Gz * GYRO_CST * xPeriod / 1000.0;
    413e:	6b 81       	ldd	r22, Y+3	; 0x03
    4140:	7c 81       	ldd	r23, Y+4	; 0x04
    4142:	07 2e       	mov	r0, r23
    4144:	00 0c       	add	r0, r0
    4146:	88 0b       	sbc	r24, r24
    4148:	99 0b       	sbc	r25, r25
    414a:	0e 94 b2 28 	call	0x5164	; 0x5164 <__floatsisf>
    414e:	2d e2       	ldi	r18, 0x2D	; 45
    4150:	33 e2       	ldi	r19, 0x23	; 35
    4152:	4a ef       	ldi	r20, 0xFA	; 250
    4154:	5b e3       	ldi	r21, 0x3B	; 59
    4156:	0e 94 a6 29 	call	0x534c	; 0x534c <__mulsf3>
    415a:	20 e0       	ldi	r18, 0x00	; 0
    415c:	30 e0       	ldi	r19, 0x00	; 0
    415e:	40 e2       	ldi	r20, 0x20	; 32
    4160:	51 e4       	ldi	r21, 0x41	; 65
    4162:	0e 94 a6 29 	call	0x534c	; 0x534c <__mulsf3>
    4166:	20 e0       	ldi	r18, 0x00	; 0
    4168:	30 e0       	ldi	r19, 0x00	; 0
    416a:	4a e7       	ldi	r20, 0x7A	; 122
    416c:	54 e4       	ldi	r21, 0x44	; 68
    416e:	0e 94 08 28 	call	0x5010	; 0x5010 <__divsf3>
    4172:	9b 01       	movw	r18, r22
    4174:	ac 01       	movw	r20, r24
    4176:	60 91 7a 26 	lds	r22, 0x267A	; 0x80267a <GlobYaw>
    417a:	70 91 7b 26 	lds	r23, 0x267B	; 0x80267b <GlobYaw+0x1>
    417e:	80 91 7c 26 	lds	r24, 0x267C	; 0x80267c <GlobYaw+0x2>
    4182:	90 91 7d 26 	lds	r25, 0x267D	; 0x80267d <GlobYaw+0x3>
    4186:	0e 94 92 27 	call	0x4f24	; 0x4f24 <__addsf3>
    418a:	60 93 7a 26 	sts	0x267A, r22	; 0x80267a <GlobYaw>
    418e:	70 93 7b 26 	sts	0x267B, r23	; 0x80267b <GlobYaw+0x1>
    4192:	80 93 7c 26 	sts	0x267C, r24	; 0x80267c <GlobYaw+0x2>
    4196:	90 93 7d 26 	sts	0x267D, r25	; 0x80267d <GlobYaw+0x3>
        GlobPitch += Gy * GYRO_CST * xPeriod / 1000.0;
    419a:	6d 81       	ldd	r22, Y+5	; 0x05
    419c:	7e 81       	ldd	r23, Y+6	; 0x06
    419e:	07 2e       	mov	r0, r23
    41a0:	00 0c       	add	r0, r0
    41a2:	88 0b       	sbc	r24, r24
    41a4:	99 0b       	sbc	r25, r25
    41a6:	0e 94 b2 28 	call	0x5164	; 0x5164 <__floatsisf>
    41aa:	2d e2       	ldi	r18, 0x2D	; 45
    41ac:	33 e2       	ldi	r19, 0x23	; 35
    41ae:	4a ef       	ldi	r20, 0xFA	; 250
    41b0:	5b e3       	ldi	r21, 0x3B	; 59
    41b2:	0e 94 a6 29 	call	0x534c	; 0x534c <__mulsf3>
    41b6:	20 e0       	ldi	r18, 0x00	; 0
    41b8:	30 e0       	ldi	r19, 0x00	; 0
    41ba:	40 e2       	ldi	r20, 0x20	; 32
    41bc:	51 e4       	ldi	r21, 0x41	; 65
    41be:	0e 94 a6 29 	call	0x534c	; 0x534c <__mulsf3>
    41c2:	20 e0       	ldi	r18, 0x00	; 0
    41c4:	30 e0       	ldi	r19, 0x00	; 0
    41c6:	4a e7       	ldi	r20, 0x7A	; 122
    41c8:	54 e4       	ldi	r21, 0x44	; 68
    41ca:	0e 94 08 28 	call	0x5010	; 0x5010 <__divsf3>
    41ce:	20 91 76 26 	lds	r18, 0x2676	; 0x802676 <GlobPitch>
    41d2:	30 91 77 26 	lds	r19, 0x2677	; 0x802677 <GlobPitch+0x1>
    41d6:	40 91 78 26 	lds	r20, 0x2678	; 0x802678 <GlobPitch+0x2>
    41da:	50 91 79 26 	lds	r21, 0x2679	; 0x802679 <GlobPitch+0x3>
    41de:	0e 94 92 27 	call	0x4f24	; 0x4f24 <__addsf3>
    41e2:	4b 01       	movw	r8, r22
    41e4:	5c 01       	movw	r10, r24
    41e6:	60 93 76 26 	sts	0x2676, r22	; 0x802676 <GlobPitch>
    41ea:	70 93 77 26 	sts	0x2677, r23	; 0x802677 <GlobPitch+0x1>
    41ee:	80 93 78 26 	sts	0x2678, r24	; 0x802678 <GlobPitch+0x2>
    41f2:	90 93 79 26 	sts	0x2679, r25	; 0x802679 <GlobPitch+0x3>
        GlobRoll += Gx * GYRO_CST * xPeriod / 1000.0;
    41f6:	6f 81       	ldd	r22, Y+7	; 0x07
    41f8:	78 85       	ldd	r23, Y+8	; 0x08
    41fa:	07 2e       	mov	r0, r23
    41fc:	00 0c       	add	r0, r0
    41fe:	88 0b       	sbc	r24, r24
    4200:	99 0b       	sbc	r25, r25
    4202:	0e 94 b2 28 	call	0x5164	; 0x5164 <__floatsisf>
    4206:	2d e2       	ldi	r18, 0x2D	; 45
    4208:	33 e2       	ldi	r19, 0x23	; 35
    420a:	4a ef       	ldi	r20, 0xFA	; 250
    420c:	5b e3       	ldi	r21, 0x3B	; 59
    420e:	0e 94 a6 29 	call	0x534c	; 0x534c <__mulsf3>
    4212:	20 e0       	ldi	r18, 0x00	; 0
    4214:	30 e0       	ldi	r19, 0x00	; 0
    4216:	40 e2       	ldi	r20, 0x20	; 32
    4218:	51 e4       	ldi	r21, 0x41	; 65
    421a:	0e 94 a6 29 	call	0x534c	; 0x534c <__mulsf3>
    421e:	20 e0       	ldi	r18, 0x00	; 0
    4220:	30 e0       	ldi	r19, 0x00	; 0
    4222:	4a e7       	ldi	r20, 0x7A	; 122
    4224:	54 e4       	ldi	r21, 0x44	; 68
    4226:	0e 94 08 28 	call	0x5010	; 0x5010 <__divsf3>
    422a:	20 91 72 26 	lds	r18, 0x2672	; 0x802672 <GlobRoll>
    422e:	30 91 73 26 	lds	r19, 0x2673	; 0x802673 <GlobRoll+0x1>
    4232:	40 91 74 26 	lds	r20, 0x2674	; 0x802674 <GlobRoll+0x2>
    4236:	50 91 75 26 	lds	r21, 0x2675	; 0x802675 <GlobRoll+0x3>
    423a:	0e 94 92 27 	call	0x4f24	; 0x4f24 <__addsf3>
    423e:	6b 01       	movw	r12, r22
    4240:	7c 01       	movw	r14, r24
    4242:	60 93 72 26 	sts	0x2672, r22	; 0x802672 <GlobRoll>
    4246:	70 93 73 26 	sts	0x2673, r23	; 0x802673 <GlobRoll+0x1>
    424a:	80 93 74 26 	sts	0x2674, r24	; 0x802674 <GlobRoll+0x2>
    424e:	90 93 75 26 	sts	0x2675, r25	; 0x802675 <GlobRoll+0x3>
        
        // Correct accelerometer data for gravity using orientation
        float gX = GRAVITY * sin(GlobPitch);
    4252:	c5 01       	movw	r24, r10
    4254:	b4 01       	movw	r22, r8
    4256:	0e 94 13 2a 	call	0x5426	; 0x5426 <sin>
    425a:	2b 01       	movw	r4, r22
    425c:	3c 01       	movw	r6, r24
        float gY = GRAVITY * -sin(GlobRoll);
    425e:	c7 01       	movw	r24, r14
    4260:	b6 01       	movw	r22, r12
    4262:	0e 94 13 2a 	call	0x5426	; 0x5426 <sin>
    4266:	6f 87       	std	Y+15, r22	; 0x0f
    4268:	78 8b       	std	Y+16, r23	; 0x10
    426a:	89 8b       	std	Y+17, r24	; 0x11
    426c:	9a 8b       	std	Y+18, r25	; 0x12
        float gZ = GRAVITY * cos(GlobPitch) * cos(GlobRoll);
    426e:	c5 01       	movw	r24, r10
    4270:	b4 01       	movw	r22, r8
    4272:	0e 94 03 28 	call	0x5006	; 0x5006 <cos>
    4276:	4b 01       	movw	r8, r22
    4278:	5c 01       	movw	r10, r24
    427a:	c7 01       	movw	r24, r14
    427c:	b6 01       	movw	r22, r12
    427e:	0e 94 03 28 	call	0x5006	; 0x5006 <cos>
    4282:	6f 8f       	std	Y+31, r22	; 0x1f
    4284:	78 a3       	std	Y+32, r23	; 0x20
    4286:	89 a3       	std	Y+33, r24	; 0x21
    4288:	9a a3       	std	Y+34, r25	; 0x22
        
        float accX = Ax * ACCEL_CST - gX;
    428a:	6d 85       	ldd	r22, Y+13	; 0x0d
    428c:	7e 85       	ldd	r23, Y+14	; 0x0e
    428e:	07 2e       	mov	r0, r23
    4290:	00 0c       	add	r0, r0
    4292:	88 0b       	sbc	r24, r24
    4294:	99 0b       	sbc	r25, r25
    4296:	0e 94 b2 28 	call	0x5164	; 0x5164 <__floatsisf>
    429a:	20 e0       	ldi	r18, 0x00	; 0
    429c:	30 e0       	ldi	r19, 0x00	; 0
    429e:	40 e8       	ldi	r20, 0x80	; 128
    42a0:	58 e3       	ldi	r21, 0x38	; 56
    42a2:	0e 94 a6 29 	call	0x534c	; 0x534c <__mulsf3>
    42a6:	6b 01       	movw	r12, r22
    42a8:	7c 01       	movw	r14, r24
    42aa:	23 ec       	ldi	r18, 0xC3	; 195
    42ac:	35 ef       	ldi	r19, 0xF5	; 245
    42ae:	4c e1       	ldi	r20, 0x1C	; 28
    42b0:	51 e4       	ldi	r21, 0x41	; 65
    42b2:	c3 01       	movw	r24, r6
    42b4:	b2 01       	movw	r22, r4
    42b6:	0e 94 a6 29 	call	0x534c	; 0x534c <__mulsf3>
    42ba:	9b 01       	movw	r18, r22
    42bc:	ac 01       	movw	r20, r24
    42be:	c7 01       	movw	r24, r14
    42c0:	b6 01       	movw	r22, r12
    42c2:	0e 94 91 27 	call	0x4f22	; 0x4f22 <__subsf3>
    42c6:	2b 01       	movw	r4, r22
    42c8:	3c 01       	movw	r6, r24
        float accY = Ay * ACCEL_CST - gY;
    42ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    42cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    42ce:	07 2e       	mov	r0, r23
    42d0:	00 0c       	add	r0, r0
    42d2:	88 0b       	sbc	r24, r24
    42d4:	99 0b       	sbc	r25, r25
    42d6:	0e 94 b2 28 	call	0x5164	; 0x5164 <__floatsisf>
    42da:	20 e0       	ldi	r18, 0x00	; 0
    42dc:	30 e0       	ldi	r19, 0x00	; 0
    42de:	40 e8       	ldi	r20, 0x80	; 128
    42e0:	58 e3       	ldi	r21, 0x38	; 56
    42e2:	0e 94 a6 29 	call	0x534c	; 0x534c <__mulsf3>
    42e6:	6b 01       	movw	r12, r22
    42e8:	7c 01       	movw	r14, r24
    42ea:	6f 85       	ldd	r22, Y+15	; 0x0f
    42ec:	78 89       	ldd	r23, Y+16	; 0x10
    42ee:	89 89       	ldd	r24, Y+17	; 0x11
    42f0:	9a 89       	ldd	r25, Y+18	; 0x12
    42f2:	90 58       	subi	r25, 0x80	; 128
    42f4:	23 ec       	ldi	r18, 0xC3	; 195
    42f6:	35 ef       	ldi	r19, 0xF5	; 245
    42f8:	4c e1       	ldi	r20, 0x1C	; 28
    42fa:	51 e4       	ldi	r21, 0x41	; 65
    42fc:	0e 94 a6 29 	call	0x534c	; 0x534c <__mulsf3>
    4300:	9b 01       	movw	r18, r22
    4302:	ac 01       	movw	r20, r24
    4304:	c7 01       	movw	r24, r14
    4306:	b6 01       	movw	r22, r12
    4308:	0e 94 91 27 	call	0x4f22	; 0x4f22 <__subsf3>
    430c:	6b 01       	movw	r12, r22
    430e:	7c 01       	movw	r14, r24
        float accZ = Az * ACCEL_CST - gZ;
    4310:	69 85       	ldd	r22, Y+9	; 0x09
    4312:	7a 85       	ldd	r23, Y+10	; 0x0a
    4314:	07 2e       	mov	r0, r23
    4316:	00 0c       	add	r0, r0
    4318:	88 0b       	sbc	r24, r24
    431a:	99 0b       	sbc	r25, r25
    431c:	0e 94 b2 28 	call	0x5164	; 0x5164 <__floatsisf>
    4320:	20 e0       	ldi	r18, 0x00	; 0
    4322:	30 e0       	ldi	r19, 0x00	; 0
    4324:	40 e8       	ldi	r20, 0x80	; 128
    4326:	58 e3       	ldi	r21, 0x38	; 56
    4328:	0e 94 a6 29 	call	0x534c	; 0x534c <__mulsf3>
    432c:	6f 87       	std	Y+15, r22	; 0x0f
    432e:	78 8b       	std	Y+16, r23	; 0x10
    4330:	89 8b       	std	Y+17, r24	; 0x11
    4332:	9a 8b       	std	Y+18, r25	; 0x12
    4334:	23 ec       	ldi	r18, 0xC3	; 195
    4336:	35 ef       	ldi	r19, 0xF5	; 245
    4338:	4c e1       	ldi	r20, 0x1C	; 28
    433a:	51 e4       	ldi	r21, 0x41	; 65
    433c:	c5 01       	movw	r24, r10
    433e:	b4 01       	movw	r22, r8
    4340:	0e 94 a6 29 	call	0x534c	; 0x534c <__mulsf3>
    4344:	2f 8d       	ldd	r18, Y+31	; 0x1f
    4346:	38 a1       	ldd	r19, Y+32	; 0x20
    4348:	49 a1       	ldd	r20, Y+33	; 0x21
    434a:	5a a1       	ldd	r21, Y+34	; 0x22
    434c:	0e 94 a6 29 	call	0x534c	; 0x534c <__mulsf3>
    4350:	9b 01       	movw	r18, r22
    4352:	ac 01       	movw	r20, r24
    4354:	6f 85       	ldd	r22, Y+15	; 0x0f
    4356:	78 89       	ldd	r23, Y+16	; 0x10
    4358:	89 89       	ldd	r24, Y+17	; 0x11
    435a:	9a 89       	ldd	r25, Y+18	; 0x12
    435c:	0e 94 91 27 	call	0x4f22	; 0x4f22 <__subsf3>
    4360:	4b 01       	movw	r8, r22
    4362:	5c 01       	movw	r10, r24
        
        // Integrate acceleration to get position
        GlobPosX += ((accX + OldVelX) / 2.0) * xPeriod / 1000.0;
    4364:	a3 01       	movw	r20, r6
    4366:	92 01       	movw	r18, r4
    4368:	6b 89       	ldd	r22, Y+19	; 0x13
    436a:	7c 89       	ldd	r23, Y+20	; 0x14
    436c:	8d 89       	ldd	r24, Y+21	; 0x15
    436e:	9e 89       	ldd	r25, Y+22	; 0x16
    4370:	0e 94 92 27 	call	0x4f24	; 0x4f24 <__addsf3>
    4374:	20 e0       	ldi	r18, 0x00	; 0
    4376:	30 e0       	ldi	r19, 0x00	; 0
    4378:	40 e0       	ldi	r20, 0x00	; 0
    437a:	5f e3       	ldi	r21, 0x3F	; 63
    437c:	0e 94 a6 29 	call	0x534c	; 0x534c <__mulsf3>
    4380:	20 e0       	ldi	r18, 0x00	; 0
    4382:	30 e0       	ldi	r19, 0x00	; 0
    4384:	40 e2       	ldi	r20, 0x20	; 32
    4386:	51 e4       	ldi	r21, 0x41	; 65
    4388:	0e 94 a6 29 	call	0x534c	; 0x534c <__mulsf3>
    438c:	20 e0       	ldi	r18, 0x00	; 0
    438e:	30 e0       	ldi	r19, 0x00	; 0
    4390:	4a e7       	ldi	r20, 0x7A	; 122
    4392:	54 e4       	ldi	r21, 0x44	; 68
    4394:	0e 94 08 28 	call	0x5010	; 0x5010 <__divsf3>
    4398:	9b 01       	movw	r18, r22
    439a:	ac 01       	movw	r20, r24
    439c:	60 91 86 26 	lds	r22, 0x2686	; 0x802686 <GlobPosX>
    43a0:	70 91 87 26 	lds	r23, 0x2687	; 0x802687 <GlobPosX+0x1>
    43a4:	80 91 88 26 	lds	r24, 0x2688	; 0x802688 <GlobPosX+0x2>
    43a8:	90 91 89 26 	lds	r25, 0x2689	; 0x802689 <GlobPosX+0x3>
    43ac:	0e 94 92 27 	call	0x4f24	; 0x4f24 <__addsf3>
    43b0:	60 93 86 26 	sts	0x2686, r22	; 0x802686 <GlobPosX>
    43b4:	70 93 87 26 	sts	0x2687, r23	; 0x802687 <GlobPosX+0x1>
    43b8:	80 93 88 26 	sts	0x2688, r24	; 0x802688 <GlobPosX+0x2>
    43bc:	90 93 89 26 	sts	0x2689, r25	; 0x802689 <GlobPosX+0x3>
        GlobPosY += ((accY + OldVelY) / 2.0) * xPeriod / 1000.0;
    43c0:	a7 01       	movw	r20, r14
    43c2:	96 01       	movw	r18, r12
    43c4:	6f 89       	ldd	r22, Y+23	; 0x17
    43c6:	78 8d       	ldd	r23, Y+24	; 0x18
    43c8:	89 8d       	ldd	r24, Y+25	; 0x19
    43ca:	9a 8d       	ldd	r25, Y+26	; 0x1a
    43cc:	0e 94 92 27 	call	0x4f24	; 0x4f24 <__addsf3>
    43d0:	20 e0       	ldi	r18, 0x00	; 0
    43d2:	30 e0       	ldi	r19, 0x00	; 0
    43d4:	40 e0       	ldi	r20, 0x00	; 0
    43d6:	5f e3       	ldi	r21, 0x3F	; 63
    43d8:	0e 94 a6 29 	call	0x534c	; 0x534c <__mulsf3>
    43dc:	20 e0       	ldi	r18, 0x00	; 0
    43de:	30 e0       	ldi	r19, 0x00	; 0
    43e0:	40 e2       	ldi	r20, 0x20	; 32
    43e2:	51 e4       	ldi	r21, 0x41	; 65
    43e4:	0e 94 a6 29 	call	0x534c	; 0x534c <__mulsf3>
    43e8:	20 e0       	ldi	r18, 0x00	; 0
    43ea:	30 e0       	ldi	r19, 0x00	; 0
    43ec:	4a e7       	ldi	r20, 0x7A	; 122
    43ee:	54 e4       	ldi	r21, 0x44	; 68
    43f0:	0e 94 08 28 	call	0x5010	; 0x5010 <__divsf3>
    43f4:	9b 01       	movw	r18, r22
    43f6:	ac 01       	movw	r20, r24
    43f8:	60 91 82 26 	lds	r22, 0x2682	; 0x802682 <GlobPosY>
    43fc:	70 91 83 26 	lds	r23, 0x2683	; 0x802683 <GlobPosY+0x1>
    4400:	80 91 84 26 	lds	r24, 0x2684	; 0x802684 <GlobPosY+0x2>
    4404:	90 91 85 26 	lds	r25, 0x2685	; 0x802685 <GlobPosY+0x3>
    4408:	0e 94 92 27 	call	0x4f24	; 0x4f24 <__addsf3>
    440c:	60 93 82 26 	sts	0x2682, r22	; 0x802682 <GlobPosY>
    4410:	70 93 83 26 	sts	0x2683, r23	; 0x802683 <GlobPosY+0x1>
    4414:	80 93 84 26 	sts	0x2684, r24	; 0x802684 <GlobPosY+0x2>
    4418:	90 93 85 26 	sts	0x2685, r25	; 0x802685 <GlobPosY+0x3>
        GlobPosZ += ((accZ + OldVelZ) / 2.0) * xPeriod / 1000.0;
    441c:	a5 01       	movw	r20, r10
    441e:	94 01       	movw	r18, r8
    4420:	6b 8d       	ldd	r22, Y+27	; 0x1b
    4422:	7c 8d       	ldd	r23, Y+28	; 0x1c
    4424:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4426:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4428:	0e 94 92 27 	call	0x4f24	; 0x4f24 <__addsf3>
    442c:	20 e0       	ldi	r18, 0x00	; 0
    442e:	30 e0       	ldi	r19, 0x00	; 0
    4430:	40 e0       	ldi	r20, 0x00	; 0
    4432:	5f e3       	ldi	r21, 0x3F	; 63
    4434:	0e 94 a6 29 	call	0x534c	; 0x534c <__mulsf3>
    4438:	20 e0       	ldi	r18, 0x00	; 0
    443a:	30 e0       	ldi	r19, 0x00	; 0
    443c:	40 e2       	ldi	r20, 0x20	; 32
    443e:	51 e4       	ldi	r21, 0x41	; 65
    4440:	0e 94 a6 29 	call	0x534c	; 0x534c <__mulsf3>
    4444:	20 e0       	ldi	r18, 0x00	; 0
    4446:	30 e0       	ldi	r19, 0x00	; 0
    4448:	4a e7       	ldi	r20, 0x7A	; 122
    444a:	54 e4       	ldi	r21, 0x44	; 68
    444c:	0e 94 08 28 	call	0x5010	; 0x5010 <__divsf3>
    4450:	9b 01       	movw	r18, r22
    4452:	ac 01       	movw	r20, r24
    4454:	60 91 7e 26 	lds	r22, 0x267E	; 0x80267e <GlobPosZ>
    4458:	70 91 7f 26 	lds	r23, 0x267F	; 0x80267f <GlobPosZ+0x1>
    445c:	80 91 80 26 	lds	r24, 0x2680	; 0x802680 <GlobPosZ+0x2>
    4460:	90 91 81 26 	lds	r25, 0x2681	; 0x802681 <GlobPosZ+0x3>
    4464:	0e 94 92 27 	call	0x4f24	; 0x4f24 <__addsf3>
    4468:	60 93 7e 26 	sts	0x267E, r22	; 0x80267e <GlobPosZ>
    446c:	70 93 7f 26 	sts	0x267F, r23	; 0x80267f <GlobPosZ+0x1>
    4470:	80 93 80 26 	sts	0x2680, r24	; 0x802680 <GlobPosZ+0x2>
    4474:	90 93 81 26 	sts	0x2681, r25	; 0x802681 <GlobPosZ+0x3>
        
        OldVelX += accX * xPeriod / 1000.0;
    4478:	20 e0       	ldi	r18, 0x00	; 0
    447a:	30 e0       	ldi	r19, 0x00	; 0
    447c:	40 e2       	ldi	r20, 0x20	; 32
    447e:	51 e4       	ldi	r21, 0x41	; 65
    4480:	c3 01       	movw	r24, r6
    4482:	b2 01       	movw	r22, r4
    4484:	0e 94 a6 29 	call	0x534c	; 0x534c <__mulsf3>
    4488:	20 e0       	ldi	r18, 0x00	; 0
    448a:	30 e0       	ldi	r19, 0x00	; 0
    448c:	4a e7       	ldi	r20, 0x7A	; 122
    448e:	54 e4       	ldi	r21, 0x44	; 68
    4490:	0e 94 08 28 	call	0x5010	; 0x5010 <__divsf3>
    4494:	9b 01       	movw	r18, r22
    4496:	ac 01       	movw	r20, r24
    4498:	6b 89       	ldd	r22, Y+19	; 0x13
    449a:	7c 89       	ldd	r23, Y+20	; 0x14
    449c:	8d 89       	ldd	r24, Y+21	; 0x15
    449e:	9e 89       	ldd	r25, Y+22	; 0x16
    44a0:	0e 94 92 27 	call	0x4f24	; 0x4f24 <__addsf3>
    44a4:	6b 8b       	std	Y+19, r22	; 0x13
    44a6:	7c 8b       	std	Y+20, r23	; 0x14
    44a8:	8d 8b       	std	Y+21, r24	; 0x15
    44aa:	9e 8b       	std	Y+22, r25	; 0x16
        OldVelY += accY * xPeriod / 1000.0;
    44ac:	20 e0       	ldi	r18, 0x00	; 0
    44ae:	30 e0       	ldi	r19, 0x00	; 0
    44b0:	40 e2       	ldi	r20, 0x20	; 32
    44b2:	51 e4       	ldi	r21, 0x41	; 65
    44b4:	c7 01       	movw	r24, r14
    44b6:	b6 01       	movw	r22, r12
    44b8:	0e 94 a6 29 	call	0x534c	; 0x534c <__mulsf3>
    44bc:	20 e0       	ldi	r18, 0x00	; 0
    44be:	30 e0       	ldi	r19, 0x00	; 0
    44c0:	4a e7       	ldi	r20, 0x7A	; 122
    44c2:	54 e4       	ldi	r21, 0x44	; 68
    44c4:	0e 94 08 28 	call	0x5010	; 0x5010 <__divsf3>
    44c8:	9b 01       	movw	r18, r22
    44ca:	ac 01       	movw	r20, r24
    44cc:	6f 89       	ldd	r22, Y+23	; 0x17
    44ce:	78 8d       	ldd	r23, Y+24	; 0x18
    44d0:	89 8d       	ldd	r24, Y+25	; 0x19
    44d2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    44d4:	0e 94 92 27 	call	0x4f24	; 0x4f24 <__addsf3>
    44d8:	6f 8b       	std	Y+23, r22	; 0x17
    44da:	78 8f       	std	Y+24, r23	; 0x18
    44dc:	89 8f       	std	Y+25, r24	; 0x19
    44de:	9a 8f       	std	Y+26, r25	; 0x1a
        OldVelZ += accZ * xPeriod / 1000.0;
    44e0:	20 e0       	ldi	r18, 0x00	; 0
    44e2:	30 e0       	ldi	r19, 0x00	; 0
    44e4:	40 e2       	ldi	r20, 0x20	; 32
    44e6:	51 e4       	ldi	r21, 0x41	; 65
    44e8:	c5 01       	movw	r24, r10
    44ea:	b4 01       	movw	r22, r8
    44ec:	0e 94 a6 29 	call	0x534c	; 0x534c <__mulsf3>
    44f0:	20 e0       	ldi	r18, 0x00	; 0
    44f2:	30 e0       	ldi	r19, 0x00	; 0
    44f4:	4a e7       	ldi	r20, 0x7A	; 122
    44f6:	54 e4       	ldi	r21, 0x44	; 68
    44f8:	0e 94 08 28 	call	0x5010	; 0x5010 <__divsf3>
    44fc:	9b 01       	movw	r18, r22
    44fe:	ac 01       	movw	r20, r24
    4500:	6b 8d       	ldd	r22, Y+27	; 0x1b
    4502:	7c 8d       	ldd	r23, Y+28	; 0x1c
    4504:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4506:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4508:	0e 94 92 27 	call	0x4f24	; 0x4f24 <__addsf3>
    450c:	6b 8f       	std	Y+27, r22	; 0x1b
    450e:	7c 8f       	std	Y+28, r23	; 0x1c
    4510:	8d 8f       	std	Y+29, r24	; 0x1d
    4512:	9e 8f       	std	Y+30, r25	; 0x1e
        
        xSemaphoreGive(IPS_Sema);
    4514:	20 e0       	ldi	r18, 0x00	; 0
    4516:	40 e0       	ldi	r20, 0x00	; 0
    4518:	50 e0       	ldi	r21, 0x00	; 0
    451a:	60 e0       	ldi	r22, 0x00	; 0
    451c:	70 e0       	ldi	r23, 0x00	; 0
    451e:	80 91 8a 26 	lds	r24, 0x268A	; 0x80268a <IPS_Sema>
    4522:	90 91 8b 26 	lds	r25, 0x268B	; 0x80268b <IPS_Sema+0x1>
    4526:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <xQueueGenericSend>
        
        vTaskDelayUntil( &xLastWakeTime, xPeriod );
    452a:	6a e0       	ldi	r22, 0x0A	; 10
    452c:	70 e0       	ldi	r23, 0x00	; 0
    452e:	ce 01       	movw	r24, r28
    4530:	01 96       	adiw	r24, 0x01	; 1
    4532:	0e 94 16 1a 	call	0x342c	; 0x342c <vTaskDelayUntil>
    4536:	63 cd       	rjmp	.-1338   	; 0x3ffe <WorkerIPS+0x32>

00004538 <InitIPSTask>:

//Private function prototypes
static void WorkerIPS(void *pvParameters);

void InitIPSTask()
{
    4538:	ef 92       	push	r14
    453a:	ff 92       	push	r15
    453c:	0f 93       	push	r16
    xTaskCreate( WorkerIPS, "IPS", 512, NULL, tskIDLE_PRIORITY+3, NULL );    
    453e:	e1 2c       	mov	r14, r1
    4540:	f1 2c       	mov	r15, r1
    4542:	03 e0       	ldi	r16, 0x03	; 3
    4544:	20 e0       	ldi	r18, 0x00	; 0
    4546:	30 e0       	ldi	r19, 0x00	; 0
    4548:	40 e0       	ldi	r20, 0x00	; 0
    454a:	52 e0       	ldi	r21, 0x02	; 2
    454c:	66 e5       	ldi	r22, 0x56	; 86
    454e:	71 e2       	ldi	r23, 0x21	; 33
    4550:	86 ee       	ldi	r24, 0xE6	; 230
    4552:	9f e1       	ldi	r25, 0x1F	; 31
    4554:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <xTaskCreate>
    IPS_Sema=xSemaphoreCreateMutex();
    4558:	81 e0       	ldi	r24, 0x01	; 1
    455a:	0e 94 4b 11 	call	0x2296	; 0x2296 <xQueueCreateMutex>
    455e:	80 93 8a 26 	sts	0x268A, r24	; 0x80268a <IPS_Sema>
    4562:	90 93 8b 26 	sts	0x268B, r25	; 0x80268b <IPS_Sema+0x1>
}
    4566:	0f 91       	pop	r16
    4568:	ff 90       	pop	r15
    456a:	ef 90       	pop	r14
    456c:	08 95       	ret

0000456e <StartLineFollower>:
	}
}

void StartLineFollower(float Speed)
{
	ReqSpeed=Speed;
    456e:	60 93 90 26 	sts	0x2690, r22	; 0x802690 <ReqSpeed>
    4572:	70 93 91 26 	sts	0x2691, r23	; 0x802691 <ReqSpeed+0x1>
    4576:	80 93 92 26 	sts	0x2692, r24	; 0x802692 <ReqSpeed+0x2>
    457a:	90 93 93 26 	sts	0x2693, r25	; 0x802693 <ReqSpeed+0x3>
	xSemaphoreGive(StartSema);
    457e:	20 e0       	ldi	r18, 0x00	; 0
    4580:	40 e0       	ldi	r20, 0x00	; 0
    4582:	50 e0       	ldi	r21, 0x00	; 0
    4584:	60 e0       	ldi	r22, 0x00	; 0
    4586:	70 e0       	ldi	r23, 0x00	; 0
    4588:	80 91 8e 26 	lds	r24, 0x268E	; 0x80268e <StartSema>
    458c:	90 91 8f 26 	lds	r25, 0x268F	; 0x80268f <StartSema+0x1>
    4590:	0c 94 7c 10 	jmp	0x20f8	; 0x20f8 <xQueueGenericSend>

00004594 <StopLineFollower>:
	
}
void StopLineFollower()
{
	xSemaphoreGive(StopSema);
    4594:	20 e0       	ldi	r18, 0x00	; 0
    4596:	40 e0       	ldi	r20, 0x00	; 0
    4598:	50 e0       	ldi	r21, 0x00	; 0
    459a:	60 e0       	ldi	r22, 0x00	; 0
    459c:	70 e0       	ldi	r23, 0x00	; 0
    459e:	80 91 8c 26 	lds	r24, 0x268C	; 0x80268c <StopSema>
    45a2:	90 91 8d 26 	lds	r25, 0x268D	; 0x80268d <StopSema+0x1>
    45a6:	0c 94 7c 10 	jmp	0x20f8	; 0x20f8 <xQueueGenericSend>

000045aa <WorkerMotion>:
	DisableMotorSpeedTask();
	
}

static void WorkerMotion(void *pvParameters)
{
    45aa:	cf 93       	push	r28
    45ac:	df 93       	push	r29
    45ae:	cd b7       	in	r28, 0x3d	; 61
    45b0:	de b7       	in	r29, 0x3e	; 62
    45b2:	67 97       	sbiw	r28, 0x17	; 23
    45b4:	cd bf       	out	0x3d, r28	; 61
    45b6:	de bf       	out	0x3e, r29	; 62
    45b8:	0f c0       	rjmp	.+30     	; 0x45d8 <WorkerMotion+0x2e>

		if (MotionCmd.Cmd==CMD_DRIVE_STRAIGHT)
		{
			CmdDriveStraight(MotionCmd.Params[0],MotionCmd.Params[1]);
		}	
		else if (MotionCmd.Cmd==CMD_DRIVE_SEGMENT)
    45ba:	82 30       	cpi	r24, 0x02	; 2
    45bc:	09 f4       	brne	.+2      	; 0x45c0 <WorkerMotion+0x16>
    45be:	ae c0       	rjmp	.+348    	; 0x471c <WorkerMotion+0x172>
		{
			CmdDriveSegment(MotionCmd.Params[0]);
		}
		else if (MotionCmd.Cmd==CMD_ROTATE_CENTER)
    45c0:	83 30       	cpi	r24, 0x03	; 3
    45c2:	09 f4       	brne	.+2      	; 0x45c6 <WorkerMotion+0x1c>
    45c4:	fa c0       	rjmp	.+500    	; 0x47ba <WorkerMotion+0x210>
		{
			CmdRotateCenter(MotionCmd.Params[0],MotionCmd.Params[1]);	
		}			
		if (uxQueueMessagesWaiting(CmdQueue)==0) xSemaphoreGive(CmdCompleteSema);
    45c6:	80 91 96 26 	lds	r24, 0x2696	; 0x802696 <CmdQueue>
    45ca:	90 91 97 26 	lds	r25, 0x2697	; 0x802697 <CmdQueue+0x1>
    45ce:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <uxQueueMessagesWaiting>
    45d2:	88 23       	and	r24, r24
    45d4:	09 f4       	brne	.+2      	; 0x45d8 <WorkerMotion+0x2e>
    45d6:	96 c0       	rjmp	.+300    	; 0x4704 <WorkerMotion+0x15a>
	
	float fa;
	
	while (1)
	{
		xQueueReceive(CmdQueue,&MotionCmd,portMAX_DELAY);
    45d8:	4f ef       	ldi	r20, 0xFF	; 255
    45da:	5f ef       	ldi	r21, 0xFF	; 255
    45dc:	be 01       	movw	r22, r28
    45de:	6f 5f       	subi	r22, 0xFF	; 255
    45e0:	7f 4f       	sbci	r23, 0xFF	; 255
    45e2:	80 91 96 26 	lds	r24, 0x2696	; 0x802696 <CmdQueue>
    45e6:	90 91 97 26 	lds	r25, 0x2697	; 0x802697 <CmdQueue+0x1>
    45ea:	0e 94 13 12 	call	0x2426	; 0x2426 <xQueueReceive>

		if (MotionCmd.Cmd==CMD_DRIVE_STRAIGHT)
    45ee:	89 81       	ldd	r24, Y+1	; 0x01
    45f0:	81 30       	cpi	r24, 0x01	; 1
    45f2:	19 f7       	brne	.-58     	; 0x45ba <WorkerMotion+0x10>
		{
			CmdDriveStraight(MotionCmd.Params[0],MotionCmd.Params[1]);
    45f4:	4e 80       	ldd	r4, Y+6	; 0x06
    45f6:	5f 80       	ldd	r5, Y+7	; 0x07
    45f8:	68 84       	ldd	r6, Y+8	; 0x08
    45fa:	79 84       	ldd	r7, Y+9	; 0x09
    45fc:	8a 80       	ldd	r8, Y+2	; 0x02
    45fe:	9b 80       	ldd	r9, Y+3	; 0x03
    4600:	ac 80       	ldd	r10, Y+4	; 0x04
    4602:	bd 80       	ldd	r11, Y+5	; 0x05
	ADCStruct ADCData;
	int Cnt;
		
	float fa;
		
	xLastWakeTime = xTaskGetTickCount();
    4604:	0e 94 a3 18 	call	0x3146	; 0x3146 <xTaskGetTickCount>
    4608:	8a 87       	std	Y+10, r24	; 0x0a
    460a:	9b 87       	std	Y+11, r25	; 0x0b
	EnableMotorPosTask();
    460c:	0e 94 63 26 	call	0x4cc6	; 0x4cc6 <EnableMotorPosTask>
	EnableMotorSpeedTask();
    4610:	0e 94 30 27 	call	0x4e60	; 0x4e60 <EnableMotorSpeedTask>
	Encoder=DriverMotorGetEncoder();
    4614:	0e 94 02 04 	call	0x804	; 0x804 <DriverMotorGetEncoder>
    4618:	6b 01       	movw	r12, r22
    461a:	7c 01       	movw	r14, r24
	if (Distance>0)
    461c:	20 e0       	ldi	r18, 0x00	; 0
    461e:	30 e0       	ldi	r19, 0x00	; 0
    4620:	a9 01       	movw	r20, r18
    4622:	c5 01       	movw	r24, r10
    4624:	b4 01       	movw	r22, r8
    4626:	0e 94 a1 29 	call	0x5342	; 0x5342 <__gesf2>
	{
		//Fwd
		EncoderTarget.Cnt1=Encoder.Cnt1+MM_TO_CNT(Distance);
    462a:	2d ec       	ldi	r18, 0xCD	; 205
    462c:	3c e4       	ldi	r19, 0x4C	; 76
    462e:	4f e4       	ldi	r20, 0x4F	; 79
    4630:	53 e4       	ldi	r21, 0x43	; 67
		
	xLastWakeTime = xTaskGetTickCount();
	EnableMotorPosTask();
	EnableMotorSpeedTask();
	Encoder=DriverMotorGetEncoder();
	if (Distance>0)
    4632:	18 16       	cp	r1, r24
    4634:	0c f0       	brlt	.+2      	; 0x4638 <WorkerMotion+0x8e>
    4636:	50 c1       	rjmp	.+672    	; 0x48d8 <WorkerMotion+0x32e>
	{
		//Fwd
		EncoderTarget.Cnt1=Encoder.Cnt1+MM_TO_CNT(Distance);
    4638:	c5 01       	movw	r24, r10
    463a:	b4 01       	movw	r22, r8
    463c:	0e 94 08 28 	call	0x5010	; 0x5010 <__divsf3>
    4640:	20 e0       	ldi	r18, 0x00	; 0
    4642:	30 e0       	ldi	r19, 0x00	; 0
    4644:	44 eb       	ldi	r20, 0xB4	; 180
    4646:	53 e4       	ldi	r21, 0x43	; 67
    4648:	0e 94 a6 29 	call	0x534c	; 0x534c <__mulsf3>
    464c:	20 e0       	ldi	r18, 0x00	; 0
    464e:	30 e0       	ldi	r19, 0x00	; 0
    4650:	40 e4       	ldi	r20, 0x40	; 64
    4652:	50 e4       	ldi	r21, 0x40	; 64
    4654:	0e 94 08 28 	call	0x5010	; 0x5010 <__divsf3>
    4658:	6c 8b       	std	Y+20, r22	; 0x14
    465a:	7d 8b       	std	Y+21, r23	; 0x15
    465c:	8e 8b       	std	Y+22, r24	; 0x16
    465e:	9f 8b       	std	Y+23, r25	; 0x17
    4660:	b6 01       	movw	r22, r12
    4662:	dd 0c       	add	r13, r13
    4664:	88 0b       	sbc	r24, r24
    4666:	99 0b       	sbc	r25, r25
    4668:	0e 94 b2 28 	call	0x5164	; 0x5164 <__floatsisf>
    466c:	9b 01       	movw	r18, r22
    466e:	ac 01       	movw	r20, r24
    4670:	6c 89       	ldd	r22, Y+20	; 0x14
    4672:	7d 89       	ldd	r23, Y+21	; 0x15
    4674:	8e 89       	ldd	r24, Y+22	; 0x16
    4676:	9f 89       	ldd	r25, Y+23	; 0x17
    4678:	0e 94 92 27 	call	0x4f24	; 0x4f24 <__addsf3>
    467c:	0e 94 7a 28 	call	0x50f4	; 0x50f4 <__fixsfsi>
    4680:	8b 01       	movw	r16, r22
				
		MotorSpeedSet(MM_TO_CNT(Speed),MM_TO_CNT(Speed));
    4682:	2d ec       	ldi	r18, 0xCD	; 205
    4684:	3c e4       	ldi	r19, 0x4C	; 76
    4686:	4f e4       	ldi	r20, 0x4F	; 79
    4688:	53 e4       	ldi	r21, 0x43	; 67
    468a:	c3 01       	movw	r24, r6
    468c:	b2 01       	movw	r22, r4
    468e:	0e 94 08 28 	call	0x5010	; 0x5010 <__divsf3>
    4692:	20 e0       	ldi	r18, 0x00	; 0
    4694:	30 e0       	ldi	r19, 0x00	; 0
    4696:	44 eb       	ldi	r20, 0xB4	; 180
    4698:	53 e4       	ldi	r21, 0x43	; 67
    469a:	0e 94 a6 29 	call	0x534c	; 0x534c <__mulsf3>
    469e:	20 e0       	ldi	r18, 0x00	; 0
    46a0:	30 e0       	ldi	r19, 0x00	; 0
    46a2:	40 e4       	ldi	r20, 0x40	; 64
    46a4:	50 e4       	ldi	r21, 0x40	; 64
    46a6:	0e 94 08 28 	call	0x5010	; 0x5010 <__divsf3>
    46aa:	0e 94 7a 28 	call	0x50f4	; 0x50f4 <__fixsfsi>
    46ae:	dc 01       	movw	r26, r24
    46b0:	cb 01       	movw	r24, r22
    46b2:	bc 01       	movw	r22, r24
    46b4:	0e 94 42 27 	call	0x4e84	; 0x4e84 <MotorSpeedSet>
    46b8:	09 c0       	rjmp	.+18     	; 0x46cc <WorkerMotion+0x122>
		Encoder=DriverMotorGetEncoder();
				
		//Stop if target distance is reached
		if (Distance>0)
		{//Fwd
			if (Encoder.Cnt1>EncoderTarget.Cnt1) break;
    46ba:	0c 15       	cp	r16, r12
    46bc:	1d 05       	cpc	r17, r13
    46be:	b4 f0       	brlt	.+44     	; 0x46ec <WorkerMotion+0x142>
		else
		{//Reverse
			if (Encoder.Cnt1<EncoderTarget.Cnt1) break;
		}
				
		vTaskDelayUntil( &xLastWakeTime, xPeriod );
    46c0:	6a e0       	ldi	r22, 0x0A	; 10
    46c2:	70 e0       	ldi	r23, 0x00	; 0
    46c4:	ce 01       	movw	r24, r28
    46c6:	0a 96       	adiw	r24, 0x0a	; 10
    46c8:	0e 94 16 1a 	call	0x342c	; 0x342c <vTaskDelayUntil>
		EncoderTarget.Cnt1=Encoder.Cnt1+MM_TO_CNT(Distance);
		MotorSpeedSet(-MM_TO_CNT(Speed),-MM_TO_CNT(Speed));
	}
	while (1)
	{
		Encoder=DriverMotorGetEncoder();
    46cc:	0e 94 02 04 	call	0x804	; 0x804 <DriverMotorGetEncoder>
    46d0:	6b 01       	movw	r12, r22
    46d2:	7c 01       	movw	r14, r24
				
		//Stop if target distance is reached
		if (Distance>0)
    46d4:	20 e0       	ldi	r18, 0x00	; 0
    46d6:	30 e0       	ldi	r19, 0x00	; 0
    46d8:	a9 01       	movw	r20, r18
    46da:	c5 01       	movw	r24, r10
    46dc:	b4 01       	movw	r22, r8
    46de:	0e 94 a1 29 	call	0x5342	; 0x5342 <__gesf2>
    46e2:	18 16       	cp	r1, r24
    46e4:	54 f3       	brlt	.-44     	; 0x46ba <WorkerMotion+0x110>
		{//Fwd
			if (Encoder.Cnt1>EncoderTarget.Cnt1) break;
		}
		else
		{//Reverse
			if (Encoder.Cnt1<EncoderTarget.Cnt1) break;
    46e6:	c0 16       	cp	r12, r16
    46e8:	d1 06       	cpc	r13, r17
    46ea:	54 f7       	brge	.-44     	; 0x46c0 <WorkerMotion+0x116>
			if (Encoder.Cnt1>EncoderTarget.Cnt1) break;
		}
		
		vTaskDelayUntil( &xLastWakeTime, xPeriod );
	}
	DisableMotorPosTask();
    46ec:	0e 94 7c 26 	call	0x4cf8	; 0x4cf8 <DisableMotorPosTask>
	DisableMotorSpeedTask();
    46f0:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <DisableMotorSpeedTask>
		}
		else if (MotionCmd.Cmd==CMD_ROTATE_CENTER)
		{
			CmdRotateCenter(MotionCmd.Params[0],MotionCmd.Params[1]);	
		}			
		if (uxQueueMessagesWaiting(CmdQueue)==0) xSemaphoreGive(CmdCompleteSema);
    46f4:	80 91 96 26 	lds	r24, 0x2696	; 0x802696 <CmdQueue>
    46f8:	90 91 97 26 	lds	r25, 0x2697	; 0x802697 <CmdQueue+0x1>
    46fc:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <uxQueueMessagesWaiting>
    4700:	81 11       	cpse	r24, r1
    4702:	6a cf       	rjmp	.-300    	; 0x45d8 <WorkerMotion+0x2e>
    4704:	20 e0       	ldi	r18, 0x00	; 0
    4706:	40 e0       	ldi	r20, 0x00	; 0
    4708:	50 e0       	ldi	r21, 0x00	; 0
    470a:	60 e0       	ldi	r22, 0x00	; 0
    470c:	70 e0       	ldi	r23, 0x00	; 0
    470e:	80 91 94 26 	lds	r24, 0x2694	; 0x802694 <CmdCompleteSema>
    4712:	90 91 95 26 	lds	r25, 0x2695	; 0x802695 <CmdCompleteSema+0x1>
    4716:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <xQueueGenericSend>
    471a:	5e cf       	rjmp	.-324    	; 0x45d8 <WorkerMotion+0x2e>
		{
			CmdDriveStraight(MotionCmd.Params[0],MotionCmd.Params[1]);
		}	
		else if (MotionCmd.Cmd==CMD_DRIVE_SEGMENT)
		{
			CmdDriveSegment(MotionCmd.Params[0]);
    471c:	ca 80       	ldd	r12, Y+2	; 0x02
    471e:	db 80       	ldd	r13, Y+3	; 0x03
    4720:	ec 80       	ldd	r14, Y+4	; 0x04
    4722:	fd 80       	ldd	r15, Y+5	; 0x05
	ADCStruct ADCData;
	int Cnt;
			
	float fa;
			
	xLastWakeTime = xTaskGetTickCount();
    4724:	0e 94 a3 18 	call	0x3146	; 0x3146 <xTaskGetTickCount>
    4728:	8a 8b       	std	Y+18, r24	; 0x12
    472a:	9b 8b       	std	Y+19, r25	; 0x13
	EnableMotorPosTask();
    472c:	0e 94 63 26 	call	0x4cc6	; 0x4cc6 <EnableMotorPosTask>
	EnableMotorSpeedTask();
    4730:	0e 94 30 27 	call	0x4e60	; 0x4e60 <EnableMotorSpeedTask>
	Encoder=DriverMotorGetEncoder();
    4734:	0e 94 02 04 	call	0x804	; 0x804 <DriverMotorGetEncoder>
				
	StartLineFollower(MM_TO_CNT(Speed));
    4738:	2d ec       	ldi	r18, 0xCD	; 205
    473a:	3c e4       	ldi	r19, 0x4C	; 76
    473c:	4f e4       	ldi	r20, 0x4F	; 79
    473e:	53 e4       	ldi	r21, 0x43	; 67
    4740:	c7 01       	movw	r24, r14
    4742:	b6 01       	movw	r22, r12
    4744:	0e 94 08 28 	call	0x5010	; 0x5010 <__divsf3>
    4748:	20 e0       	ldi	r18, 0x00	; 0
    474a:	30 e0       	ldi	r19, 0x00	; 0
    474c:	44 eb       	ldi	r20, 0xB4	; 180
    474e:	53 e4       	ldi	r21, 0x43	; 67
    4750:	0e 94 a6 29 	call	0x534c	; 0x534c <__mulsf3>
    4754:	20 e0       	ldi	r18, 0x00	; 0
    4756:	30 e0       	ldi	r19, 0x00	; 0
    4758:	40 e4       	ldi	r20, 0x40	; 64
    475a:	50 e4       	ldi	r21, 0x40	; 64
    475c:	0e 94 08 28 	call	0x5010	; 0x5010 <__divsf3>
    4760:	0e 94 b7 22 	call	0x456e	; 0x456e <StartLineFollower>

	Cnt=0;
    4764:	00 e0       	ldi	r16, 0x00	; 0
    4766:	10 e0       	ldi	r17, 0x00	; 0
    4768:	0b c0       	rjmp	.+22     	; 0x4780 <WorkerMotion+0x1d6>
	while (1)
	{
		ADCData=GetADCData();
		if ((ADCData.PhotoL+ADCData.PhotoR)/2>LINEFOLLOW_THRESHOLD)
		{
			Cnt++;
    476a:	0f 5f       	subi	r16, 0xFF	; 255
    476c:	1f 4f       	sbci	r17, 0xFF	; 255
			if (Cnt>LINEFOLLOW_THRESHOLD_CNT) break;
    476e:	05 31       	cpi	r16, 0x15	; 21
    4770:	11 05       	cpc	r17, r1
    4772:	e4 f4       	brge	.+56     	; 0x47ac <WorkerMotion+0x202>
		}
		else
		Cnt=0;
					
		vTaskDelayUntil( &xLastWakeTime, xPeriod );
    4774:	6a e0       	ldi	r22, 0x0A	; 10
    4776:	70 e0       	ldi	r23, 0x00	; 0
    4778:	ce 01       	movw	r24, r28
    477a:	42 96       	adiw	r24, 0x12	; 18
    477c:	0e 94 16 1a 	call	0x342c	; 0x342c <vTaskDelayUntil>
	StartLineFollower(MM_TO_CNT(Speed));

	Cnt=0;
	while (1)
	{
		ADCData=GetADCData();
    4780:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <GetADCData>
    4784:	2a 87       	std	Y+10, r18	; 0x0a
    4786:	3b 87       	std	Y+11, r19	; 0x0b
    4788:	4c 87       	std	Y+12, r20	; 0x0c
    478a:	5d 87       	std	Y+13, r21	; 0x0d
    478c:	6e 87       	std	Y+14, r22	; 0x0e
    478e:	7f 87       	std	Y+15, r23	; 0x0f
    4790:	88 8b       	std	Y+16, r24	; 0x10
    4792:	99 8b       	std	Y+17, r25	; 0x11
		if ((ADCData.PhotoL+ADCData.PhotoR)/2>LINEFOLLOW_THRESHOLD)
    4794:	2a 85       	ldd	r18, Y+10	; 0x0a
    4796:	3b 85       	ldd	r19, Y+11	; 0x0b
    4798:	8e 85       	ldd	r24, Y+14	; 0x0e
    479a:	9f 85       	ldd	r25, Y+15	; 0x0f
    479c:	82 0f       	add	r24, r18
    479e:	93 1f       	adc	r25, r19
    47a0:	8a 38       	cpi	r24, 0x8A	; 138
    47a2:	93 41       	sbci	r25, 0x13	; 19
    47a4:	14 f7       	brge	.-60     	; 0x476a <WorkerMotion+0x1c0>
		{
			Cnt++;
			if (Cnt>LINEFOLLOW_THRESHOLD_CNT) break;
		}
		else
		Cnt=0;
    47a6:	00 e0       	ldi	r16, 0x00	; 0
    47a8:	10 e0       	ldi	r17, 0x00	; 0
    47aa:	e4 cf       	rjmp	.-56     	; 0x4774 <WorkerMotion+0x1ca>
					
		vTaskDelayUntil( &xLastWakeTime, xPeriod );
	}
	StopLineFollower();
    47ac:	0e 94 ca 22 	call	0x4594	; 0x4594 <StopLineFollower>
	DisableMotorPosTask();
    47b0:	0e 94 7c 26 	call	0x4cf8	; 0x4cf8 <DisableMotorPosTask>
	DisableMotorSpeedTask();
    47b4:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <DisableMotorSpeedTask>
    47b8:	06 cf       	rjmp	.-500    	; 0x45c6 <WorkerMotion+0x1c>
		{
			CmdDriveSegment(MotionCmd.Params[0]);
		}
		else if (MotionCmd.Cmd==CMD_ROTATE_CENTER)
		{
			CmdRotateCenter(MotionCmd.Params[0],MotionCmd.Params[1]);	
    47ba:	4e 80       	ldd	r4, Y+6	; 0x06
    47bc:	5f 80       	ldd	r5, Y+7	; 0x07
    47be:	68 84       	ldd	r6, Y+8	; 0x08
    47c0:	79 84       	ldd	r7, Y+9	; 0x09
    47c2:	8a 80       	ldd	r8, Y+2	; 0x02
    47c4:	9b 80       	ldd	r9, Y+3	; 0x03
    47c6:	ac 80       	ldd	r10, Y+4	; 0x04
    47c8:	bd 80       	ldd	r11, Y+5	; 0x05
	ADCStruct ADCData;
	int Cnt;
		
	float fa;
	
	xLastWakeTime = xTaskGetTickCount();
    47ca:	0e 94 a3 18 	call	0x3146	; 0x3146 <xTaskGetTickCount>
    47ce:	8a 87       	std	Y+10, r24	; 0x0a
    47d0:	9b 87       	std	Y+11, r25	; 0x0b
	EnableMotorPosTask();
    47d2:	0e 94 63 26 	call	0x4cc6	; 0x4cc6 <EnableMotorPosTask>
	EnableMotorSpeedTask();
    47d6:	0e 94 30 27 	call	0x4e60	; 0x4e60 <EnableMotorSpeedTask>
	Encoder=DriverMotorGetEncoder();
    47da:	0e 94 02 04 	call	0x804	; 0x804 <DriverMotorGetEncoder>
    47de:	6b 01       	movw	r12, r22
    47e0:	7c 01       	movw	r14, r24
	fa=WHEEL_DISTANCE*3.14/360*Angle; //Calculate wheel distance to travel
    47e2:	26 ec       	ldi	r18, 0xC6	; 198
    47e4:	39 ed       	ldi	r19, 0xD9	; 217
    47e6:	47 e7       	ldi	r20, 0x77	; 119
    47e8:	5f e3       	ldi	r21, 0x3F	; 63
    47ea:	c5 01       	movw	r24, r10
    47ec:	b4 01       	movw	r22, r8
    47ee:	0e 94 a6 29 	call	0x534c	; 0x534c <__mulsf3>
    47f2:	4b 01       	movw	r8, r22
    47f4:	5c 01       	movw	r10, r24
	if (fa>0)
    47f6:	20 e0       	ldi	r18, 0x00	; 0
    47f8:	30 e0       	ldi	r19, 0x00	; 0
    47fa:	a9 01       	movw	r20, r18
    47fc:	0e 94 a1 29 	call	0x5342	; 0x5342 <__gesf2>
    4800:	18 16       	cp	r1, r24
    4802:	0c f0       	brlt	.+2      	; 0x4806 <WorkerMotion+0x25c>
    4804:	ab c0       	rjmp	.+342    	; 0x495c <WorkerMotion+0x3b2>
	{
		//Fwd
		EncoderTarget.Cnt1=(float) Encoder.Cnt1-MM_TO_CNT(fa);
    4806:	b6 01       	movw	r22, r12
    4808:	dd 0c       	add	r13, r13
    480a:	88 0b       	sbc	r24, r24
    480c:	99 0b       	sbc	r25, r25
    480e:	0e 94 b2 28 	call	0x5164	; 0x5164 <__floatsisf>
    4812:	6b 01       	movw	r12, r22
    4814:	7c 01       	movw	r14, r24
    4816:	2d ec       	ldi	r18, 0xCD	; 205
    4818:	3c e4       	ldi	r19, 0x4C	; 76
    481a:	4f e4       	ldi	r20, 0x4F	; 79
    481c:	53 e4       	ldi	r21, 0x43	; 67
    481e:	c5 01       	movw	r24, r10
    4820:	b4 01       	movw	r22, r8
    4822:	0e 94 08 28 	call	0x5010	; 0x5010 <__divsf3>
    4826:	20 e0       	ldi	r18, 0x00	; 0
    4828:	30 e0       	ldi	r19, 0x00	; 0
    482a:	44 eb       	ldi	r20, 0xB4	; 180
    482c:	53 e4       	ldi	r21, 0x43	; 67
    482e:	0e 94 a6 29 	call	0x534c	; 0x534c <__mulsf3>
    4832:	20 e0       	ldi	r18, 0x00	; 0
    4834:	30 e0       	ldi	r19, 0x00	; 0
    4836:	40 e4       	ldi	r20, 0x40	; 64
    4838:	50 e4       	ldi	r21, 0x40	; 64
    483a:	0e 94 08 28 	call	0x5010	; 0x5010 <__divsf3>
    483e:	9b 01       	movw	r18, r22
    4840:	ac 01       	movw	r20, r24
    4842:	c7 01       	movw	r24, r14
    4844:	b6 01       	movw	r22, r12
    4846:	0e 94 91 27 	call	0x4f22	; 0x4f22 <__subsf3>
    484a:	0e 94 7a 28 	call	0x50f4	; 0x50f4 <__fixsfsi>
    484e:	8b 01       	movw	r16, r22
		MotorSpeedSet(-MM_TO_CNT(Speed),MM_TO_CNT(Speed));
    4850:	2d ec       	ldi	r18, 0xCD	; 205
    4852:	3c e4       	ldi	r19, 0x4C	; 76
    4854:	4f e4       	ldi	r20, 0x4F	; 79
    4856:	53 e4       	ldi	r21, 0x43	; 67
    4858:	c3 01       	movw	r24, r6
    485a:	b2 01       	movw	r22, r4
    485c:	0e 94 08 28 	call	0x5010	; 0x5010 <__divsf3>
    4860:	20 e0       	ldi	r18, 0x00	; 0
    4862:	30 e0       	ldi	r19, 0x00	; 0
    4864:	44 eb       	ldi	r20, 0xB4	; 180
    4866:	53 e4       	ldi	r21, 0x43	; 67
    4868:	0e 94 a6 29 	call	0x534c	; 0x534c <__mulsf3>
    486c:	20 e0       	ldi	r18, 0x00	; 0
    486e:	30 e0       	ldi	r19, 0x00	; 0
    4870:	40 e4       	ldi	r20, 0x40	; 64
    4872:	50 e4       	ldi	r21, 0x40	; 64
    4874:	0e 94 08 28 	call	0x5010	; 0x5010 <__divsf3>
    4878:	2b 01       	movw	r4, r22
    487a:	3c 01       	movw	r6, r24
    487c:	0e 94 7a 28 	call	0x50f4	; 0x50f4 <__fixsfsi>
    4880:	6b 01       	movw	r12, r22
    4882:	7c 01       	movw	r14, r24
    4884:	c3 01       	movw	r24, r6
    4886:	b2 01       	movw	r22, r4
    4888:	90 58       	subi	r25, 0x80	; 128
    488a:	0e 94 7a 28 	call	0x50f4	; 0x50f4 <__fixsfsi>
    488e:	dc 01       	movw	r26, r24
    4890:	cb 01       	movw	r24, r22
    4892:	b6 01       	movw	r22, r12
    4894:	0e 94 42 27 	call	0x4e84	; 0x4e84 <MotorSpeedSet>
    4898:	0a c0       	rjmp	.+20     	; 0x48ae <WorkerMotion+0x304>
		Encoder=DriverMotorGetEncoder();
		
		//Stop if target distance is reached
		if (fa>0)
		{//Fwd
			if (Encoder.Cnt1<EncoderTarget.Cnt1) break;
    489a:	c0 16       	cp	r12, r16
    489c:	d1 06       	cpc	r13, r17
    489e:	0c f4       	brge	.+2      	; 0x48a2 <WorkerMotion+0x2f8>
    48a0:	25 cf       	rjmp	.-438    	; 0x46ec <WorkerMotion+0x142>
		else
		{//Reverse
			if (Encoder.Cnt1>EncoderTarget.Cnt1) break;
		}
		
		vTaskDelayUntil( &xLastWakeTime, xPeriod );
    48a2:	6a e0       	ldi	r22, 0x0A	; 10
    48a4:	70 e0       	ldi	r23, 0x00	; 0
    48a6:	ce 01       	movw	r24, r28
    48a8:	0a 96       	adiw	r24, 0x0a	; 10
    48aa:	0e 94 16 1a 	call	0x342c	; 0x342c <vTaskDelayUntil>
		EncoderTarget.Cnt1=(float) Encoder.Cnt1-MM_TO_CNT(fa);
		MotorSpeedSet(MM_TO_CNT(Speed),-MM_TO_CNT(Speed));
	}
	while (1)
	{
		Encoder=DriverMotorGetEncoder();
    48ae:	0e 94 02 04 	call	0x804	; 0x804 <DriverMotorGetEncoder>
    48b2:	6b 01       	movw	r12, r22
    48b4:	7c 01       	movw	r14, r24
		
		//Stop if target distance is reached
		if (fa>0)
    48b6:	20 e0       	ldi	r18, 0x00	; 0
    48b8:	30 e0       	ldi	r19, 0x00	; 0
    48ba:	a9 01       	movw	r20, r18
    48bc:	c5 01       	movw	r24, r10
    48be:	b4 01       	movw	r22, r8
    48c0:	0e 94 a1 29 	call	0x5342	; 0x5342 <__gesf2>
    48c4:	18 16       	cp	r1, r24
    48c6:	4c f3       	brlt	.-46     	; 0x489a <WorkerMotion+0x2f0>
		{//Fwd
			if (Encoder.Cnt1<EncoderTarget.Cnt1) break;
		}
		else
		{//Reverse
			if (Encoder.Cnt1>EncoderTarget.Cnt1) break;
    48c8:	0c 15       	cp	r16, r12
    48ca:	1d 05       	cpc	r17, r13
    48cc:	54 f7       	brge	.-44     	; 0x48a2 <WorkerMotion+0x2f8>
		}
		
		vTaskDelayUntil( &xLastWakeTime, xPeriod );
	}
	DisableMotorPosTask();
    48ce:	0e 94 7c 26 	call	0x4cf8	; 0x4cf8 <DisableMotorPosTask>
	DisableMotorSpeedTask();
    48d2:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <DisableMotorSpeedTask>
    48d6:	0e cf       	rjmp	.-484    	; 0x46f4 <WorkerMotion+0x14a>
		MotorSpeedSet(MM_TO_CNT(Speed),MM_TO_CNT(Speed));
	}
	else
	{
		//Reverse
		EncoderTarget.Cnt1=Encoder.Cnt1+MM_TO_CNT(Distance);
    48d8:	c5 01       	movw	r24, r10
    48da:	b4 01       	movw	r22, r8
    48dc:	0e 94 08 28 	call	0x5010	; 0x5010 <__divsf3>
    48e0:	20 e0       	ldi	r18, 0x00	; 0
    48e2:	30 e0       	ldi	r19, 0x00	; 0
    48e4:	44 eb       	ldi	r20, 0xB4	; 180
    48e6:	53 e4       	ldi	r21, 0x43	; 67
    48e8:	0e 94 a6 29 	call	0x534c	; 0x534c <__mulsf3>
    48ec:	20 e0       	ldi	r18, 0x00	; 0
    48ee:	30 e0       	ldi	r19, 0x00	; 0
    48f0:	40 e4       	ldi	r20, 0x40	; 64
    48f2:	50 e4       	ldi	r21, 0x40	; 64
    48f4:	0e 94 08 28 	call	0x5010	; 0x5010 <__divsf3>
    48f8:	6c 8b       	std	Y+20, r22	; 0x14
    48fa:	7d 8b       	std	Y+21, r23	; 0x15
    48fc:	8e 8b       	std	Y+22, r24	; 0x16
    48fe:	9f 8b       	std	Y+23, r25	; 0x17
    4900:	b6 01       	movw	r22, r12
    4902:	dd 0c       	add	r13, r13
    4904:	88 0b       	sbc	r24, r24
    4906:	99 0b       	sbc	r25, r25
    4908:	0e 94 b2 28 	call	0x5164	; 0x5164 <__floatsisf>
    490c:	9b 01       	movw	r18, r22
    490e:	ac 01       	movw	r20, r24
    4910:	6c 89       	ldd	r22, Y+20	; 0x14
    4912:	7d 89       	ldd	r23, Y+21	; 0x15
    4914:	8e 89       	ldd	r24, Y+22	; 0x16
    4916:	9f 89       	ldd	r25, Y+23	; 0x17
    4918:	0e 94 92 27 	call	0x4f24	; 0x4f24 <__addsf3>
    491c:	0e 94 7a 28 	call	0x50f4	; 0x50f4 <__fixsfsi>
    4920:	8b 01       	movw	r16, r22
		MotorSpeedSet(-MM_TO_CNT(Speed),-MM_TO_CNT(Speed));
    4922:	2d ec       	ldi	r18, 0xCD	; 205
    4924:	3c e4       	ldi	r19, 0x4C	; 76
    4926:	4f e4       	ldi	r20, 0x4F	; 79
    4928:	53 e4       	ldi	r21, 0x43	; 67
    492a:	c3 01       	movw	r24, r6
    492c:	b2 01       	movw	r22, r4
    492e:	0e 94 08 28 	call	0x5010	; 0x5010 <__divsf3>
    4932:	20 e0       	ldi	r18, 0x00	; 0
    4934:	30 e0       	ldi	r19, 0x00	; 0
    4936:	44 eb       	ldi	r20, 0xB4	; 180
    4938:	53 e4       	ldi	r21, 0x43	; 67
    493a:	0e 94 a6 29 	call	0x534c	; 0x534c <__mulsf3>
    493e:	20 e0       	ldi	r18, 0x00	; 0
    4940:	30 e0       	ldi	r19, 0x00	; 0
    4942:	40 e4       	ldi	r20, 0x40	; 64
    4944:	50 e4       	ldi	r21, 0x40	; 64
    4946:	0e 94 08 28 	call	0x5010	; 0x5010 <__divsf3>
    494a:	90 58       	subi	r25, 0x80	; 128
    494c:	0e 94 7a 28 	call	0x50f4	; 0x50f4 <__fixsfsi>
    4950:	dc 01       	movw	r26, r24
    4952:	cb 01       	movw	r24, r22
    4954:	bc 01       	movw	r22, r24
    4956:	0e 94 42 27 	call	0x4e84	; 0x4e84 <MotorSpeedSet>
    495a:	b8 ce       	rjmp	.-656    	; 0x46cc <WorkerMotion+0x122>
		MotorSpeedSet(-MM_TO_CNT(Speed),MM_TO_CNT(Speed));
	}
	else
	{
		//Reverse
		EncoderTarget.Cnt1=(float) Encoder.Cnt1-MM_TO_CNT(fa);
    495c:	b6 01       	movw	r22, r12
    495e:	dd 0c       	add	r13, r13
    4960:	88 0b       	sbc	r24, r24
    4962:	99 0b       	sbc	r25, r25
    4964:	0e 94 b2 28 	call	0x5164	; 0x5164 <__floatsisf>
    4968:	6b 01       	movw	r12, r22
    496a:	7c 01       	movw	r14, r24
    496c:	2d ec       	ldi	r18, 0xCD	; 205
    496e:	3c e4       	ldi	r19, 0x4C	; 76
    4970:	4f e4       	ldi	r20, 0x4F	; 79
    4972:	53 e4       	ldi	r21, 0x43	; 67
    4974:	c5 01       	movw	r24, r10
    4976:	b4 01       	movw	r22, r8
    4978:	0e 94 08 28 	call	0x5010	; 0x5010 <__divsf3>
    497c:	20 e0       	ldi	r18, 0x00	; 0
    497e:	30 e0       	ldi	r19, 0x00	; 0
    4980:	44 eb       	ldi	r20, 0xB4	; 180
    4982:	53 e4       	ldi	r21, 0x43	; 67
    4984:	0e 94 a6 29 	call	0x534c	; 0x534c <__mulsf3>
    4988:	20 e0       	ldi	r18, 0x00	; 0
    498a:	30 e0       	ldi	r19, 0x00	; 0
    498c:	40 e4       	ldi	r20, 0x40	; 64
    498e:	50 e4       	ldi	r21, 0x40	; 64
    4990:	0e 94 08 28 	call	0x5010	; 0x5010 <__divsf3>
    4994:	9b 01       	movw	r18, r22
    4996:	ac 01       	movw	r20, r24
    4998:	c7 01       	movw	r24, r14
    499a:	b6 01       	movw	r22, r12
    499c:	0e 94 91 27 	call	0x4f22	; 0x4f22 <__subsf3>
    49a0:	0e 94 7a 28 	call	0x50f4	; 0x50f4 <__fixsfsi>
    49a4:	8b 01       	movw	r16, r22
		MotorSpeedSet(MM_TO_CNT(Speed),-MM_TO_CNT(Speed));
    49a6:	2d ec       	ldi	r18, 0xCD	; 205
    49a8:	3c e4       	ldi	r19, 0x4C	; 76
    49aa:	4f e4       	ldi	r20, 0x4F	; 79
    49ac:	53 e4       	ldi	r21, 0x43	; 67
    49ae:	c3 01       	movw	r24, r6
    49b0:	b2 01       	movw	r22, r4
    49b2:	0e 94 08 28 	call	0x5010	; 0x5010 <__divsf3>
    49b6:	20 e0       	ldi	r18, 0x00	; 0
    49b8:	30 e0       	ldi	r19, 0x00	; 0
    49ba:	44 eb       	ldi	r20, 0xB4	; 180
    49bc:	53 e4       	ldi	r21, 0x43	; 67
    49be:	0e 94 a6 29 	call	0x534c	; 0x534c <__mulsf3>
    49c2:	20 e0       	ldi	r18, 0x00	; 0
    49c4:	30 e0       	ldi	r19, 0x00	; 0
    49c6:	40 e4       	ldi	r20, 0x40	; 64
    49c8:	50 e4       	ldi	r21, 0x40	; 64
    49ca:	0e 94 08 28 	call	0x5010	; 0x5010 <__divsf3>
    49ce:	2b 01       	movw	r4, r22
    49d0:	3c 01       	movw	r6, r24
    49d2:	90 58       	subi	r25, 0x80	; 128
    49d4:	0e 94 7a 28 	call	0x50f4	; 0x50f4 <__fixsfsi>
    49d8:	6b 01       	movw	r12, r22
    49da:	7c 01       	movw	r14, r24
    49dc:	c3 01       	movw	r24, r6
    49de:	b2 01       	movw	r22, r4
    49e0:	0e 94 7a 28 	call	0x50f4	; 0x50f4 <__fixsfsi>
    49e4:	dc 01       	movw	r26, r24
    49e6:	cb 01       	movw	r24, r22
    49e8:	b6 01       	movw	r22, r12
    49ea:	0e 94 42 27 	call	0x4e84	; 0x4e84 <MotorSpeedSet>
    49ee:	5f cf       	rjmp	.-322    	; 0x48ae <WorkerMotion+0x304>

000049f0 <InitMotionTask>:
static void CmdDriveStraight(float Distance, float Speed);
static void CmdDriveSegment(float Speed);

//Function definitions
void InitMotionTask()
{
    49f0:	ef 92       	push	r14
    49f2:	ff 92       	push	r15
    49f4:	0f 93       	push	r16
	xTaskCreate( WorkerMotion, "motion", 256, NULL, tskIDLE_PRIORITY+3, NULL );	
    49f6:	e1 2c       	mov	r14, r1
    49f8:	f1 2c       	mov	r15, r1
    49fa:	03 e0       	ldi	r16, 0x03	; 3
    49fc:	20 e0       	ldi	r18, 0x00	; 0
    49fe:	30 e0       	ldi	r19, 0x00	; 0
    4a00:	40 e0       	ldi	r20, 0x00	; 0
    4a02:	51 e0       	ldi	r21, 0x01	; 1
    4a04:	6a e5       	ldi	r22, 0x5A	; 90
    4a06:	71 e2       	ldi	r23, 0x21	; 33
    4a08:	85 ed       	ldi	r24, 0xD5	; 213
    4a0a:	92 e2       	ldi	r25, 0x22	; 34
    4a0c:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <xTaskCreate>
	CmdQueue=xQueueCreate(1,sizeof(MotionCmdStruct));
    4a10:	40 e0       	ldi	r20, 0x00	; 0
    4a12:	69 e0       	ldi	r22, 0x09	; 9
    4a14:	81 e0       	ldi	r24, 0x01	; 1
    4a16:	0e 94 38 10 	call	0x2070	; 0x2070 <xQueueGenericCreate>
    4a1a:	80 93 96 26 	sts	0x2696, r24	; 0x802696 <CmdQueue>
    4a1e:	90 93 97 26 	sts	0x2697, r25	; 0x802697 <CmdQueue+0x1>
	CmdCompleteSema=xSemaphoreCreateBinary();
    4a22:	43 e0       	ldi	r20, 0x03	; 3
    4a24:	60 e0       	ldi	r22, 0x00	; 0
    4a26:	81 e0       	ldi	r24, 0x01	; 1
    4a28:	0e 94 38 10 	call	0x2070	; 0x2070 <xQueueGenericCreate>
    4a2c:	80 93 94 26 	sts	0x2694, r24	; 0x802694 <CmdCompleteSema>
    4a30:	90 93 95 26 	sts	0x2695, r25	; 0x802695 <CmdCompleteSema+0x1>
}
    4a34:	0f 91       	pop	r16
    4a36:	ff 90       	pop	r15
    4a38:	ef 90       	pop	r14
    4a3a:	08 95       	ret

00004a3c <WorkerMotorPos>:
	IncSet.IncSet2=IncSet2;
	xQueueSend(IncSetQueue,&IncSet,portMAX_DELAY);
}

void WorkerMotorPos(void *pvParameters)
{
    4a3c:	cf 93       	push	r28
    4a3e:	df 93       	push	r29
    4a40:	cd b7       	in	r28, 0x3d	; 61
    4a42:	de b7       	in	r29, 0x3e	; 62
    4a44:	2c 97       	sbiw	r28, 0x0c	; 12
    4a46:	cd bf       	out	0x3d, r28	; 61
    4a48:	de bf       	out	0x3e, r29	; 62
	float Err1=0,Err2=0;
	
	IncSetStruct IncSet;
	EncoderStruct EncoderInfo;
	
	xLastWakeTime = xTaskGetTickCount();
    4a4a:	0e 94 a3 18 	call	0x3146	; 0x3146 <xTaskGetTickCount>
    4a4e:	80 93 98 26 	sts	0x2698, r24	; 0x802698 <xLastWakeTime>
    4a52:	90 93 99 26 	sts	0x2699, r25	; 0x802699 <xLastWakeTime+0x1>
void WorkerMotorPos(void *pvParameters)
{
	
	const TickType_t xPeriod = 10;
	
	float Set1=0,Set2=0;
    4a56:	19 86       	std	Y+9, r1	; 0x09
    4a58:	1a 86       	std	Y+10, r1	; 0x0a
    4a5a:	1b 86       	std	Y+11, r1	; 0x0b
    4a5c:	1c 86       	std	Y+12, r1	; 0x0c
    4a5e:	1d 82       	std	Y+5, r1	; 0x05
    4a60:	1e 82       	std	Y+6, r1	; 0x06
    4a62:	1f 82       	std	Y+7, r1	; 0x07
    4a64:	18 86       	std	Y+8, r1	; 0x08
    4a66:	77 c0       	rjmp	.+238    	; 0x4b56 <WorkerMotorPos+0x11a>
			//PID 1
			Err1=Set1-EncoderInfo.Cnt1;
			Out1=Err1*MOTPOS_KP;
			if (Out1>0) Out1+=MOTPOS_FF_OFFSET;
			if (Out1>4095) Out1=4095;
			if (Out1<0) Out1-=MOTPOS_FF_OFFSET;			
    4a68:	20 e0       	ldi	r18, 0x00	; 0
    4a6a:	30 e0       	ldi	r19, 0x00	; 0
    4a6c:	a9 01       	movw	r20, r18
    4a6e:	c7 01       	movw	r24, r14
    4a70:	b6 01       	movw	r22, r12
    4a72:	0e 94 fe 27 	call	0x4ffc	; 0x4ffc <__cmpsf2>
    4a76:	87 ff       	sbrs	r24, 7
    4a78:	0a c0       	rjmp	.+20     	; 0x4a8e <WorkerMotorPos+0x52>
    4a7a:	20 e0       	ldi	r18, 0x00	; 0
    4a7c:	30 e8       	ldi	r19, 0x80	; 128
    4a7e:	4b eb       	ldi	r20, 0xBB	; 187
    4a80:	54 e4       	ldi	r21, 0x44	; 68
    4a82:	c7 01       	movw	r24, r14
    4a84:	b6 01       	movw	r22, r12
    4a86:	0e 94 91 27 	call	0x4f22	; 0x4f22 <__subsf3>
    4a8a:	6b 01       	movw	r12, r22
    4a8c:	7c 01       	movw	r14, r24
			if (Out1<-4095) Out1=-4095;
    4a8e:	20 e0       	ldi	r18, 0x00	; 0
    4a90:	30 ef       	ldi	r19, 0xF0	; 240
    4a92:	4f e7       	ldi	r20, 0x7F	; 127
    4a94:	55 ec       	ldi	r21, 0xC5	; 197
    4a96:	c7 01       	movw	r24, r14
    4a98:	b6 01       	movw	r22, r12
    4a9a:	0e 94 fe 27 	call	0x4ffc	; 0x4ffc <__cmpsf2>
    4a9e:	87 ff       	sbrs	r24, 7
    4aa0:	b6 c0       	rjmp	.+364    	; 0x4c0e <WorkerMotorPos+0x1d2>
    4aa2:	01 e0       	ldi	r16, 0x01	; 1
    4aa4:	10 ef       	ldi	r17, 0xF0	; 240

			//PID 2
			Err2=Set2-EncoderInfo.Cnt2;
			Out2=Err2*MOTPOS_KP;
    4aa6:	c5 01       	movw	r24, r10
    4aa8:	b4 01       	movw	r22, r8
    4aaa:	0e 94 b2 28 	call	0x5164	; 0x5164 <__floatsisf>
    4aae:	9b 01       	movw	r18, r22
    4ab0:	ac 01       	movw	r20, r24
    4ab2:	69 85       	ldd	r22, Y+9	; 0x09
    4ab4:	7a 85       	ldd	r23, Y+10	; 0x0a
    4ab6:	8b 85       	ldd	r24, Y+11	; 0x0b
    4ab8:	9c 85       	ldd	r25, Y+12	; 0x0c
    4aba:	0e 94 91 27 	call	0x4f22	; 0x4f22 <__subsf3>
    4abe:	20 e0       	ldi	r18, 0x00	; 0
    4ac0:	30 e0       	ldi	r19, 0x00	; 0
    4ac2:	46 e9       	ldi	r20, 0x96	; 150
    4ac4:	53 e4       	ldi	r21, 0x43	; 67
    4ac6:	0e 94 a6 29 	call	0x534c	; 0x534c <__mulsf3>
    4aca:	6b 01       	movw	r12, r22
    4acc:	7c 01       	movw	r14, r24
			if (Out2>0) Out2+=MOTPOS_FF_OFFSET;
    4ace:	20 e0       	ldi	r18, 0x00	; 0
    4ad0:	30 e0       	ldi	r19, 0x00	; 0
    4ad2:	a9 01       	movw	r20, r18
    4ad4:	0e 94 a1 29 	call	0x5342	; 0x5342 <__gesf2>
    4ad8:	18 16       	cp	r1, r24
    4ada:	54 f4       	brge	.+20     	; 0x4af0 <WorkerMotorPos+0xb4>
    4adc:	20 e0       	ldi	r18, 0x00	; 0
    4ade:	30 e8       	ldi	r19, 0x80	; 128
    4ae0:	4b eb       	ldi	r20, 0xBB	; 187
    4ae2:	54 e4       	ldi	r21, 0x44	; 68
    4ae4:	c7 01       	movw	r24, r14
    4ae6:	b6 01       	movw	r22, r12
    4ae8:	0e 94 92 27 	call	0x4f24	; 0x4f24 <__addsf3>
    4aec:	6b 01       	movw	r12, r22
    4aee:	7c 01       	movw	r14, r24
			if (Out2>4095) Out2=4095;
    4af0:	20 e0       	ldi	r18, 0x00	; 0
    4af2:	30 ef       	ldi	r19, 0xF0	; 240
    4af4:	4f e7       	ldi	r20, 0x7F	; 127
    4af6:	55 e4       	ldi	r21, 0x45	; 69
    4af8:	c7 01       	movw	r24, r14
    4afa:	b6 01       	movw	r22, r12
    4afc:	0e 94 a1 29 	call	0x5342	; 0x5342 <__gesf2>
    4b00:	18 16       	cp	r1, r24
    4b02:	0c f4       	brge	.+2      	; 0x4b06 <WorkerMotorPos+0xca>
    4b04:	8a c0       	rjmp	.+276    	; 0x4c1a <WorkerMotorPos+0x1de>
			if (Out2<0) Out2-=MOTPOS_FF_OFFSET;
    4b06:	20 e0       	ldi	r18, 0x00	; 0
    4b08:	30 e0       	ldi	r19, 0x00	; 0
    4b0a:	a9 01       	movw	r20, r18
    4b0c:	c7 01       	movw	r24, r14
    4b0e:	b6 01       	movw	r22, r12
    4b10:	0e 94 fe 27 	call	0x4ffc	; 0x4ffc <__cmpsf2>
    4b14:	87 ff       	sbrs	r24, 7
    4b16:	0a c0       	rjmp	.+20     	; 0x4b2c <WorkerMotorPos+0xf0>
    4b18:	20 e0       	ldi	r18, 0x00	; 0
    4b1a:	30 e8       	ldi	r19, 0x80	; 128
    4b1c:	4b eb       	ldi	r20, 0xBB	; 187
    4b1e:	54 e4       	ldi	r21, 0x44	; 68
    4b20:	c7 01       	movw	r24, r14
    4b22:	b6 01       	movw	r22, r12
    4b24:	0e 94 91 27 	call	0x4f22	; 0x4f22 <__subsf3>
    4b28:	6b 01       	movw	r12, r22
    4b2a:	7c 01       	movw	r14, r24
			if (Out2<-4095) Out2=-4095;
    4b2c:	20 e0       	ldi	r18, 0x00	; 0
    4b2e:	30 ef       	ldi	r19, 0xF0	; 240
    4b30:	4f e7       	ldi	r20, 0x7F	; 127
    4b32:	55 ec       	ldi	r21, 0xC5	; 197
    4b34:	c7 01       	movw	r24, r14
    4b36:	b6 01       	movw	r22, r12
    4b38:	0e 94 fe 27 	call	0x4ffc	; 0x4ffc <__cmpsf2>
    4b3c:	87 ff       	sbrs	r24, 7
    4b3e:	74 c0       	rjmp	.+232    	; 0x4c28 <WorkerMotorPos+0x1ec>
    4b40:	61 e0       	ldi	r22, 0x01	; 1
    4b42:	70 ef       	ldi	r23, 0xF0	; 240
			
			//printf ("Err:%f   Out:%f\r\n",Err2 ,Out2);			
			
			DriverMotorSet(Out1,Out2);
    4b44:	c8 01       	movw	r24, r16
    4b46:	0e 94 97 03 	call	0x72e	; 0x72e <DriverMotorSet>
			
			vTaskDelayUntil( &xLastWakeTime, xPeriod );
    4b4a:	6a e0       	ldi	r22, 0x0A	; 10
    4b4c:	70 e0       	ldi	r23, 0x00	; 0
    4b4e:	88 e9       	ldi	r24, 0x98	; 152
    4b50:	96 e2       	ldi	r25, 0x26	; 38
    4b52:	0e 94 16 1a 	call	0x342c	; 0x342c <vTaskDelayUntil>
	
	xLastWakeTime = xTaskGetTickCount();
	
	while (1)
	{		
			EncoderInfo=DriverMotorGetEncoder();
    4b56:	0e 94 02 04 	call	0x804	; 0x804 <DriverMotorGetEncoder>
    4b5a:	6b 01       	movw	r12, r22
    4b5c:	7c 01       	movw	r14, r24

			//Process reset setpoint command
			if (xSemaphoreTake(ResetSetpointSema,0)==pdPASS)
    4b5e:	60 e0       	ldi	r22, 0x00	; 0
    4b60:	70 e0       	ldi	r23, 0x00	; 0
    4b62:	80 91 9e 26 	lds	r24, 0x269E	; 0x80269e <ResetSetpointSema>
    4b66:	90 91 9f 26 	lds	r25, 0x269F	; 0x80269f <ResetSetpointSema+0x1>
    4b6a:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <xQueueSemaphoreTake>
			{
				Set1=EncoderInfo.Cnt1;
    4b6e:	26 01       	movw	r4, r12
    4b70:	dd 0c       	add	r13, r13
    4b72:	66 08       	sbc	r6, r6
    4b74:	77 08       	sbc	r7, r7
	while (1)
	{		
			EncoderInfo=DriverMotorGetEncoder();

			//Process reset setpoint command
			if (xSemaphoreTake(ResetSetpointSema,0)==pdPASS)
    4b76:	81 30       	cpi	r24, 0x01	; 1
    4b78:	09 f4       	brne	.+2      	; 0x4b7c <WorkerMotorPos+0x140>
    4b7a:	90 c0       	rjmp	.+288    	; 0x4c9c <WorkerMotorPos+0x260>
    4b7c:	47 01       	movw	r8, r14
    4b7e:	ff 0c       	add	r15, r15
    4b80:	aa 08       	sbc	r10, r10
    4b82:	bb 08       	sbc	r11, r11
				Set1=EncoderInfo.Cnt1;
				Set2=EncoderInfo.Cnt2;
			}
			
			//Process setpoint increment data
			if (xQueueReceive(IncSetQueue,&IncSet,0)==pdPASS)
    4b84:	40 e0       	ldi	r20, 0x00	; 0
    4b86:	50 e0       	ldi	r21, 0x00	; 0
    4b88:	be 01       	movw	r22, r28
    4b8a:	6f 5f       	subi	r22, 0xFF	; 255
    4b8c:	7f 4f       	sbci	r23, 0xFF	; 255
    4b8e:	80 91 9c 26 	lds	r24, 0x269C	; 0x80269c <IncSetQueue>
    4b92:	90 91 9d 26 	lds	r25, 0x269D	; 0x80269d <IncSetQueue+0x1>
    4b96:	0e 94 13 12 	call	0x2426	; 0x2426 <xQueueReceive>
    4b9a:	81 30       	cpi	r24, 0x01	; 1
    4b9c:	09 f4       	brne	.+2      	; 0x4ba0 <WorkerMotorPos+0x164>
    4b9e:	49 c0       	rjmp	.+146    	; 0x4c32 <WorkerMotorPos+0x1f6>
				Set2+=((float) IncSet.IncSet2)/100;
			}
			
			//PID 1
			Err1=Set1-EncoderInfo.Cnt1;
			Out1=Err1*MOTPOS_KP;
    4ba0:	c3 01       	movw	r24, r6
    4ba2:	b2 01       	movw	r22, r4
    4ba4:	0e 94 b2 28 	call	0x5164	; 0x5164 <__floatsisf>
    4ba8:	9b 01       	movw	r18, r22
    4baa:	ac 01       	movw	r20, r24
    4bac:	6d 81       	ldd	r22, Y+5	; 0x05
    4bae:	7e 81       	ldd	r23, Y+6	; 0x06
    4bb0:	8f 81       	ldd	r24, Y+7	; 0x07
    4bb2:	98 85       	ldd	r25, Y+8	; 0x08
    4bb4:	0e 94 91 27 	call	0x4f22	; 0x4f22 <__subsf3>
    4bb8:	20 e0       	ldi	r18, 0x00	; 0
    4bba:	30 e0       	ldi	r19, 0x00	; 0
    4bbc:	46 e9       	ldi	r20, 0x96	; 150
    4bbe:	53 e4       	ldi	r21, 0x43	; 67
    4bc0:	0e 94 a6 29 	call	0x534c	; 0x534c <__mulsf3>
    4bc4:	6b 01       	movw	r12, r22
    4bc6:	7c 01       	movw	r14, r24
			if (Out1>0) Out1+=MOTPOS_FF_OFFSET;
    4bc8:	20 e0       	ldi	r18, 0x00	; 0
    4bca:	30 e0       	ldi	r19, 0x00	; 0
    4bcc:	a9 01       	movw	r20, r18
    4bce:	0e 94 a1 29 	call	0x5342	; 0x5342 <__gesf2>
    4bd2:	18 16       	cp	r1, r24
    4bd4:	54 f4       	brge	.+20     	; 0x4bea <WorkerMotorPos+0x1ae>
    4bd6:	20 e0       	ldi	r18, 0x00	; 0
    4bd8:	30 e8       	ldi	r19, 0x80	; 128
    4bda:	4b eb       	ldi	r20, 0xBB	; 187
    4bdc:	54 e4       	ldi	r21, 0x44	; 68
    4bde:	c7 01       	movw	r24, r14
    4be0:	b6 01       	movw	r22, r12
    4be2:	0e 94 92 27 	call	0x4f24	; 0x4f24 <__addsf3>
    4be6:	6b 01       	movw	r12, r22
    4be8:	7c 01       	movw	r14, r24
			if (Out1>4095) Out1=4095;
    4bea:	20 e0       	ldi	r18, 0x00	; 0
    4bec:	30 ef       	ldi	r19, 0xF0	; 240
    4bee:	4f e7       	ldi	r20, 0x7F	; 127
    4bf0:	55 e4       	ldi	r21, 0x45	; 69
    4bf2:	c7 01       	movw	r24, r14
    4bf4:	b6 01       	movw	r22, r12
    4bf6:	0e 94 a1 29 	call	0x5342	; 0x5342 <__gesf2>
    4bfa:	18 16       	cp	r1, r24
    4bfc:	0c f0       	brlt	.+2      	; 0x4c00 <WorkerMotorPos+0x1c4>
    4bfe:	34 cf       	rjmp	.-408    	; 0x4a68 <WorkerMotorPos+0x2c>
    4c00:	c1 2c       	mov	r12, r1
    4c02:	90 ef       	ldi	r25, 0xF0	; 240
    4c04:	d9 2e       	mov	r13, r25
    4c06:	9f e7       	ldi	r25, 0x7F	; 127
    4c08:	e9 2e       	mov	r14, r25
    4c0a:	95 e4       	ldi	r25, 0x45	; 69
    4c0c:	f9 2e       	mov	r15, r25
    4c0e:	c7 01       	movw	r24, r14
    4c10:	b6 01       	movw	r22, r12
    4c12:	0e 94 7a 28 	call	0x50f4	; 0x50f4 <__fixsfsi>
    4c16:	8b 01       	movw	r16, r22
    4c18:	46 cf       	rjmp	.-372    	; 0x4aa6 <WorkerMotorPos+0x6a>

			//PID 2
			Err2=Set2-EncoderInfo.Cnt2;
			Out2=Err2*MOTPOS_KP;
			if (Out2>0) Out2+=MOTPOS_FF_OFFSET;
			if (Out2>4095) Out2=4095;
    4c1a:	c1 2c       	mov	r12, r1
    4c1c:	80 ef       	ldi	r24, 0xF0	; 240
    4c1e:	d8 2e       	mov	r13, r24
    4c20:	8f e7       	ldi	r24, 0x7F	; 127
    4c22:	e8 2e       	mov	r14, r24
    4c24:	85 e4       	ldi	r24, 0x45	; 69
    4c26:	f8 2e       	mov	r15, r24
    4c28:	c7 01       	movw	r24, r14
    4c2a:	b6 01       	movw	r22, r12
    4c2c:	0e 94 7a 28 	call	0x50f4	; 0x50f4 <__fixsfsi>
    4c30:	89 cf       	rjmp	.-238    	; 0x4b44 <WorkerMotorPos+0x108>
			}
			
			//Process setpoint increment data
			if (xQueueReceive(IncSetQueue,&IncSet,0)==pdPASS)
			{
				Set1+=((float) IncSet.IncSet1)/100;
    4c32:	69 81       	ldd	r22, Y+1	; 0x01
    4c34:	7a 81       	ldd	r23, Y+2	; 0x02
    4c36:	07 2e       	mov	r0, r23
    4c38:	00 0c       	add	r0, r0
    4c3a:	88 0b       	sbc	r24, r24
    4c3c:	99 0b       	sbc	r25, r25
    4c3e:	0e 94 b2 28 	call	0x5164	; 0x5164 <__floatsisf>
    4c42:	20 e0       	ldi	r18, 0x00	; 0
    4c44:	30 e0       	ldi	r19, 0x00	; 0
    4c46:	48 ec       	ldi	r20, 0xC8	; 200
    4c48:	52 e4       	ldi	r21, 0x42	; 66
    4c4a:	0e 94 08 28 	call	0x5010	; 0x5010 <__divsf3>
    4c4e:	9b 01       	movw	r18, r22
    4c50:	ac 01       	movw	r20, r24
    4c52:	6d 81       	ldd	r22, Y+5	; 0x05
    4c54:	7e 81       	ldd	r23, Y+6	; 0x06
    4c56:	8f 81       	ldd	r24, Y+7	; 0x07
    4c58:	98 85       	ldd	r25, Y+8	; 0x08
    4c5a:	0e 94 92 27 	call	0x4f24	; 0x4f24 <__addsf3>
    4c5e:	6d 83       	std	Y+5, r22	; 0x05
    4c60:	7e 83       	std	Y+6, r23	; 0x06
    4c62:	8f 83       	std	Y+7, r24	; 0x07
    4c64:	98 87       	std	Y+8, r25	; 0x08
				Set2+=((float) IncSet.IncSet2)/100;
    4c66:	6b 81       	ldd	r22, Y+3	; 0x03
    4c68:	7c 81       	ldd	r23, Y+4	; 0x04
    4c6a:	07 2e       	mov	r0, r23
    4c6c:	00 0c       	add	r0, r0
    4c6e:	88 0b       	sbc	r24, r24
    4c70:	99 0b       	sbc	r25, r25
    4c72:	0e 94 b2 28 	call	0x5164	; 0x5164 <__floatsisf>
    4c76:	20 e0       	ldi	r18, 0x00	; 0
    4c78:	30 e0       	ldi	r19, 0x00	; 0
    4c7a:	48 ec       	ldi	r20, 0xC8	; 200
    4c7c:	52 e4       	ldi	r21, 0x42	; 66
    4c7e:	0e 94 08 28 	call	0x5010	; 0x5010 <__divsf3>
    4c82:	9b 01       	movw	r18, r22
    4c84:	ac 01       	movw	r20, r24
    4c86:	69 85       	ldd	r22, Y+9	; 0x09
    4c88:	7a 85       	ldd	r23, Y+10	; 0x0a
    4c8a:	8b 85       	ldd	r24, Y+11	; 0x0b
    4c8c:	9c 85       	ldd	r25, Y+12	; 0x0c
    4c8e:	0e 94 92 27 	call	0x4f24	; 0x4f24 <__addsf3>
    4c92:	69 87       	std	Y+9, r22	; 0x09
    4c94:	7a 87       	std	Y+10, r23	; 0x0a
    4c96:	8b 87       	std	Y+11, r24	; 0x0b
    4c98:	9c 87       	std	Y+12, r25	; 0x0c
    4c9a:	82 cf       	rjmp	.-252    	; 0x4ba0 <WorkerMotorPos+0x164>
			EncoderInfo=DriverMotorGetEncoder();

			//Process reset setpoint command
			if (xSemaphoreTake(ResetSetpointSema,0)==pdPASS)
			{
				Set1=EncoderInfo.Cnt1;
    4c9c:	c3 01       	movw	r24, r6
    4c9e:	b2 01       	movw	r22, r4
    4ca0:	0e 94 b2 28 	call	0x5164	; 0x5164 <__floatsisf>
    4ca4:	6d 83       	std	Y+5, r22	; 0x05
    4ca6:	7e 83       	std	Y+6, r23	; 0x06
    4ca8:	8f 83       	std	Y+7, r24	; 0x07
    4caa:	98 87       	std	Y+8, r25	; 0x08
				Set2=EncoderInfo.Cnt2;
    4cac:	47 01       	movw	r8, r14
    4cae:	ff 0c       	add	r15, r15
    4cb0:	aa 08       	sbc	r10, r10
    4cb2:	bb 08       	sbc	r11, r11
    4cb4:	c5 01       	movw	r24, r10
    4cb6:	b4 01       	movw	r22, r8
    4cb8:	0e 94 b2 28 	call	0x5164	; 0x5164 <__floatsisf>
    4cbc:	69 87       	std	Y+9, r22	; 0x09
    4cbe:	7a 87       	std	Y+10, r23	; 0x0a
    4cc0:	8b 87       	std	Y+11, r24	; 0x0b
    4cc2:	9c 87       	std	Y+12, r25	; 0x0c
    4cc4:	5f cf       	rjmp	.-322    	; 0x4b84 <WorkerMotorPos+0x148>

00004cc6 <EnableMotorPosTask>:
	vSemaphoreCreateBinary(ResetSetpointSema);
}

void EnableMotorPosTask()
{
	DriverMotorResetEncoder();
    4cc6:	0e 94 3f 06 	call	0xc7e	; 0xc7e <DriverMotorResetEncoder>
	xSemaphoreGive(ResetSetpointSema);
    4cca:	20 e0       	ldi	r18, 0x00	; 0
    4ccc:	40 e0       	ldi	r20, 0x00	; 0
    4cce:	50 e0       	ldi	r21, 0x00	; 0
    4cd0:	60 e0       	ldi	r22, 0x00	; 0
    4cd2:	70 e0       	ldi	r23, 0x00	; 0
    4cd4:	80 91 9e 26 	lds	r24, 0x269E	; 0x80269e <ResetSetpointSema>
    4cd8:	90 91 9f 26 	lds	r25, 0x269F	; 0x80269f <ResetSetpointSema+0x1>
    4cdc:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <xQueueGenericSend>
	xLastWakeTime = xTaskGetTickCount();
    4ce0:	0e 94 a3 18 	call	0x3146	; 0x3146 <xTaskGetTickCount>
    4ce4:	80 93 98 26 	sts	0x2698, r24	; 0x802698 <xLastWakeTime>
    4ce8:	90 93 99 26 	sts	0x2699, r25	; 0x802699 <xLastWakeTime+0x1>
	vTaskResume(MotorPosTaskHandle);
    4cec:	80 91 9a 26 	lds	r24, 0x269A	; 0x80269a <MotorPosTaskHandle>
    4cf0:	90 91 9b 26 	lds	r25, 0x269B	; 0x80269b <MotorPosTaskHandle+0x1>
    4cf4:	0c 94 16 18 	jmp	0x302c	; 0x302c <vTaskResume>

00004cf8 <DisableMotorPosTask>:
}

void DisableMotorPosTask()
{
	vTaskSuspend(MotorPosTaskHandle);
    4cf8:	80 91 9a 26 	lds	r24, 0x269A	; 0x80269a <MotorPosTaskHandle>
    4cfc:	90 91 9b 26 	lds	r25, 0x269B	; 0x80269b <MotorPosTaskHandle+0x1>
    4d00:	0e 94 99 17 	call	0x2f32	; 0x2f32 <vTaskSuspend>
	DriverMotorSet(0,0);
    4d04:	60 e0       	ldi	r22, 0x00	; 0
    4d06:	70 e0       	ldi	r23, 0x00	; 0
    4d08:	80 e0       	ldi	r24, 0x00	; 0
    4d0a:	90 e0       	ldi	r25, 0x00	; 0
    4d0c:	0c 94 97 03 	jmp	0x72e	; 0x72e <DriverMotorSet>

00004d10 <InitMotorPosTask>:
//Private function prototypes
void WorkerMotorPos(void *pvParameters);

//Function definitions
void InitMotorPosTask()
{
    4d10:	ef 92       	push	r14
    4d12:	ff 92       	push	r15
    4d14:	0f 93       	push	r16
	DriverMotorInit();
    4d16:	0e 94 66 03 	call	0x6cc	; 0x6cc <DriverMotorInit>
	xTaskCreate( WorkerMotorPos, "motpos", 256, NULL, tskIDLE_PRIORITY+3, &MotorPosTaskHandle );
    4d1a:	8a e9       	ldi	r24, 0x9A	; 154
    4d1c:	e8 2e       	mov	r14, r24
    4d1e:	86 e2       	ldi	r24, 0x26	; 38
    4d20:	f8 2e       	mov	r15, r24
    4d22:	03 e0       	ldi	r16, 0x03	; 3
    4d24:	20 e0       	ldi	r18, 0x00	; 0
    4d26:	30 e0       	ldi	r19, 0x00	; 0
    4d28:	40 e0       	ldi	r20, 0x00	; 0
    4d2a:	51 e0       	ldi	r21, 0x01	; 1
    4d2c:	61 e6       	ldi	r22, 0x61	; 97
    4d2e:	71 e2       	ldi	r23, 0x21	; 33
    4d30:	8e e1       	ldi	r24, 0x1E	; 30
    4d32:	95 e2       	ldi	r25, 0x25	; 37
    4d34:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <xTaskCreate>
	DisableMotorPosTask(); 	
    4d38:	0e 94 7c 26 	call	0x4cf8	; 0x4cf8 <DisableMotorPosTask>
	
	IncSetQueue=xQueueCreate(1,sizeof(IncSetStruct));
    4d3c:	40 e0       	ldi	r20, 0x00	; 0
    4d3e:	64 e0       	ldi	r22, 0x04	; 4
    4d40:	81 e0       	ldi	r24, 0x01	; 1
    4d42:	0e 94 38 10 	call	0x2070	; 0x2070 <xQueueGenericCreate>
    4d46:	80 93 9c 26 	sts	0x269C, r24	; 0x80269c <IncSetQueue>
    4d4a:	90 93 9d 26 	sts	0x269D, r25	; 0x80269d <IncSetQueue+0x1>
	vSemaphoreCreateBinary(ResetSetpointSema);
    4d4e:	43 e0       	ldi	r20, 0x03	; 3
    4d50:	60 e0       	ldi	r22, 0x00	; 0
    4d52:	81 e0       	ldi	r24, 0x01	; 1
    4d54:	0e 94 38 10 	call	0x2070	; 0x2070 <xQueueGenericCreate>
    4d58:	80 93 9e 26 	sts	0x269E, r24	; 0x80269e <ResetSetpointSema>
    4d5c:	90 93 9f 26 	sts	0x269F, r25	; 0x80269f <ResetSetpointSema+0x1>
    4d60:	00 97       	sbiw	r24, 0x00	; 0
    4d62:	51 f0       	breq	.+20     	; 0x4d78 <InitMotorPosTask+0x68>
    4d64:	20 e0       	ldi	r18, 0x00	; 0
    4d66:	40 e0       	ldi	r20, 0x00	; 0
    4d68:	50 e0       	ldi	r21, 0x00	; 0
    4d6a:	60 e0       	ldi	r22, 0x00	; 0
    4d6c:	70 e0       	ldi	r23, 0x00	; 0
}
    4d6e:	0f 91       	pop	r16
    4d70:	ff 90       	pop	r15
    4d72:	ef 90       	pop	r14
	DriverMotorInit();
	xTaskCreate( WorkerMotorPos, "motpos", 256, NULL, tskIDLE_PRIORITY+3, &MotorPosTaskHandle );
	DisableMotorPosTask(); 	
	
	IncSetQueue=xQueueCreate(1,sizeof(IncSetStruct));
	vSemaphoreCreateBinary(ResetSetpointSema);
    4d74:	0c 94 7c 10 	jmp	0x20f8	; 0x20f8 <xQueueGenericSend>
}
    4d78:	0f 91       	pop	r16
    4d7a:	ff 90       	pop	r15
    4d7c:	ef 90       	pop	r14
    4d7e:	08 95       	ret

00004d80 <MotorPosIncSet>:
	DriverMotorSet(0,0);
}


void MotorPosIncSet(int16_t IncSet1,int16_t IncSet2)
{
    4d80:	cf 93       	push	r28
    4d82:	df 93       	push	r29
    4d84:	00 d0       	rcall	.+0      	; 0x4d86 <MotorPosIncSet+0x6>
    4d86:	1f 92       	push	r1
    4d88:	cd b7       	in	r28, 0x3d	; 61
    4d8a:	de b7       	in	r29, 0x3e	; 62
	IncSetStruct IncSet;
	IncSet.IncSet1=IncSet1;
    4d8c:	89 83       	std	Y+1, r24	; 0x01
    4d8e:	9a 83       	std	Y+2, r25	; 0x02
	IncSet.IncSet2=IncSet2;
    4d90:	6b 83       	std	Y+3, r22	; 0x03
    4d92:	7c 83       	std	Y+4, r23	; 0x04
	xQueueSend(IncSetQueue,&IncSet,portMAX_DELAY);
    4d94:	20 e0       	ldi	r18, 0x00	; 0
    4d96:	4f ef       	ldi	r20, 0xFF	; 255
    4d98:	5f ef       	ldi	r21, 0xFF	; 255
    4d9a:	be 01       	movw	r22, r28
    4d9c:	6f 5f       	subi	r22, 0xFF	; 255
    4d9e:	7f 4f       	sbci	r23, 0xFF	; 255
    4da0:	80 91 9c 26 	lds	r24, 0x269C	; 0x80269c <IncSetQueue>
    4da4:	90 91 9d 26 	lds	r25, 0x269D	; 0x80269d <IncSetQueue+0x1>
    4da8:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <xQueueGenericSend>
}
    4dac:	24 96       	adiw	r28, 0x04	; 4
    4dae:	cd bf       	out	0x3d, r28	; 61
    4db0:	de bf       	out	0x3e, r29	; 62
    4db2:	df 91       	pop	r29
    4db4:	cf 91       	pop	r28
    4db6:	08 95       	ret

00004db8 <WorkerMotorSpeed>:
	xQueueOverwrite(MotorSpeedQueue,&MotorSpeed);
	
}

void WorkerMotorSpeed(void *pvParameters)
{
    4db8:	cf 93       	push	r28
    4dba:	df 93       	push	r29
    4dbc:	00 d0       	rcall	.+0      	; 0x4dbe <WorkerMotorSpeed+0x6>
    4dbe:	1f 92       	push	r1
    4dc0:	cd b7       	in	r28, 0x3d	; 61
    4dc2:	de b7       	in	r29, 0x3e	; 62
	const TickType_t xPeriod = 10;
	MotorSpeedStruct MotorSpeed;

	xLastWakeTime = xTaskGetTickCount();
    4dc4:	0e 94 a3 18 	call	0x3146	; 0x3146 <xTaskGetTickCount>
    4dc8:	80 93 a0 26 	sts	0x26A0, r24	; 0x8026a0 <xLastWakeTime>
    4dcc:	90 93 a1 26 	sts	0x26A1, r25	; 0x8026a1 <xLastWakeTime+0x1>
	
	while (1)
	{
			xQueuePeek(MotorSpeedQueue,&MotorSpeed,portMAX_DELAY);
    4dd0:	4f ef       	ldi	r20, 0xFF	; 255
    4dd2:	5f ef       	ldi	r21, 0xFF	; 255
    4dd4:	be 01       	movw	r22, r28
    4dd6:	6f 5f       	subi	r22, 0xFF	; 255
    4dd8:	7f 4f       	sbci	r23, 0xFF	; 255
    4dda:	80 91 a4 26 	lds	r24, 0x26A4	; 0x8026a4 <MotorSpeedQueue>
    4dde:	90 91 a5 26 	lds	r25, 0x26A5	; 0x8026a5 <MotorSpeedQueue+0x1>
    4de2:	0e 94 ca 13 	call	0x2794	; 0x2794 <xQueuePeek>
			MotorPosIncSet(MotorSpeed.Speed1,MotorSpeed.Speed2);
    4de6:	6b 81       	ldd	r22, Y+3	; 0x03
    4de8:	7c 81       	ldd	r23, Y+4	; 0x04
    4dea:	89 81       	ldd	r24, Y+1	; 0x01
    4dec:	9a 81       	ldd	r25, Y+2	; 0x02
    4dee:	0e 94 c0 26 	call	0x4d80	; 0x4d80 <MotorPosIncSet>
			
			vTaskDelayUntil( &xLastWakeTime, xPeriod );
    4df2:	6a e0       	ldi	r22, 0x0A	; 10
    4df4:	70 e0       	ldi	r23, 0x00	; 0
    4df6:	80 ea       	ldi	r24, 0xA0	; 160
    4df8:	96 e2       	ldi	r25, 0x26	; 38
    4dfa:	0e 94 16 1a 	call	0x342c	; 0x342c <vTaskDelayUntil>
    4dfe:	e8 cf       	rjmp	.-48     	; 0x4dd0 <WorkerMotorSpeed+0x18>

00004e00 <InitMotorSpeedTask>:
//Private function prototypes
void WorkerMotorSpeed(void *pvParameters);

//Function definitions
void InitMotorSpeedTask()
{
    4e00:	ef 92       	push	r14
    4e02:	ff 92       	push	r15
    4e04:	0f 93       	push	r16
	xTaskCreate( WorkerMotorSpeed, "motspd", 256, NULL, tskIDLE_PRIORITY+3, &MotorSpeedTaskHandle );	
    4e06:	82 ea       	ldi	r24, 0xA2	; 162
    4e08:	e8 2e       	mov	r14, r24
    4e0a:	86 e2       	ldi	r24, 0x26	; 38
    4e0c:	f8 2e       	mov	r15, r24
    4e0e:	03 e0       	ldi	r16, 0x03	; 3
    4e10:	20 e0       	ldi	r18, 0x00	; 0
    4e12:	30 e0       	ldi	r19, 0x00	; 0
    4e14:	40 e0       	ldi	r20, 0x00	; 0
    4e16:	51 e0       	ldi	r21, 0x01	; 1
    4e18:	68 e6       	ldi	r22, 0x68	; 104
    4e1a:	71 e2       	ldi	r23, 0x21	; 33
    4e1c:	8c ed       	ldi	r24, 0xDC	; 220
    4e1e:	96 e2       	ldi	r25, 0x26	; 38
    4e20:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <xTaskCreate>
	vTaskResume(MotorSpeedTaskHandle);
}

void DisableMotorSpeedTask()
{
	vTaskSuspend(MotorSpeedTaskHandle);
    4e24:	80 91 a2 26 	lds	r24, 0x26A2	; 0x8026a2 <MotorSpeedTaskHandle>
    4e28:	90 91 a3 26 	lds	r25, 0x26A3	; 0x8026a3 <MotorSpeedTaskHandle+0x1>
    4e2c:	0e 94 99 17 	call	0x2f32	; 0x2f32 <vTaskSuspend>
void InitMotorSpeedTask()
{
	xTaskCreate( WorkerMotorSpeed, "motspd", 256, NULL, tskIDLE_PRIORITY+3, &MotorSpeedTaskHandle );	
	DisableMotorSpeedTask();
	
	MotorSpeedQueue=xQueueCreate(1,sizeof(MotorSpeedStruct));
    4e30:	40 e0       	ldi	r20, 0x00	; 0
    4e32:	64 e0       	ldi	r22, 0x04	; 4
    4e34:	81 e0       	ldi	r24, 0x01	; 1
    4e36:	0e 94 38 10 	call	0x2070	; 0x2070 <xQueueGenericCreate>
    4e3a:	80 93 a4 26 	sts	0x26A4, r24	; 0x8026a4 <MotorSpeedQueue>
    4e3e:	90 93 a5 26 	sts	0x26A5, r25	; 0x8026a5 <MotorSpeedQueue+0x1>
}

void MotorSpeedSet(int16_t Speed1,int16_t Speed2)
{
	
	MotorSpeed.Speed1=Speed1;
    4e42:	e6 ea       	ldi	r30, 0xA6	; 166
    4e44:	f6 e2       	ldi	r31, 0x26	; 38
    4e46:	10 82       	st	Z, r1
    4e48:	11 82       	std	Z+1, r1	; 0x01
	MotorSpeed.Speed2=Speed2;
    4e4a:	12 82       	std	Z+2, r1	; 0x02
    4e4c:	13 82       	std	Z+3, r1	; 0x03
	xQueueOverwrite(MotorSpeedQueue,&MotorSpeed);
    4e4e:	22 e0       	ldi	r18, 0x02	; 2
    4e50:	40 e0       	ldi	r20, 0x00	; 0
    4e52:	50 e0       	ldi	r21, 0x00	; 0
    4e54:	bf 01       	movw	r22, r30
	xTaskCreate( WorkerMotorSpeed, "motspd", 256, NULL, tskIDLE_PRIORITY+3, &MotorSpeedTaskHandle );	
	DisableMotorSpeedTask();
	
	MotorSpeedQueue=xQueueCreate(1,sizeof(MotorSpeedStruct));
	MotorSpeedSet(0,0);
}
    4e56:	0f 91       	pop	r16
    4e58:	ff 90       	pop	r15
    4e5a:	ef 90       	pop	r14
void MotorSpeedSet(int16_t Speed1,int16_t Speed2)
{
	
	MotorSpeed.Speed1=Speed1;
	MotorSpeed.Speed2=Speed2;
	xQueueOverwrite(MotorSpeedQueue,&MotorSpeed);
    4e5c:	0c 94 7c 10 	jmp	0x20f8	; 0x20f8 <xQueueGenericSend>

00004e60 <EnableMotorSpeedTask>:
	MotorSpeedSet(0,0);
}

void EnableMotorSpeedTask()
{
	xLastWakeTime = xTaskGetTickCount();
    4e60:	0e 94 a3 18 	call	0x3146	; 0x3146 <xTaskGetTickCount>
    4e64:	80 93 a0 26 	sts	0x26A0, r24	; 0x8026a0 <xLastWakeTime>
    4e68:	90 93 a1 26 	sts	0x26A1, r25	; 0x8026a1 <xLastWakeTime+0x1>
	vTaskResume(MotorSpeedTaskHandle);
    4e6c:	80 91 a2 26 	lds	r24, 0x26A2	; 0x8026a2 <MotorSpeedTaskHandle>
    4e70:	90 91 a3 26 	lds	r25, 0x26A3	; 0x8026a3 <MotorSpeedTaskHandle+0x1>
    4e74:	0c 94 16 18 	jmp	0x302c	; 0x302c <vTaskResume>

00004e78 <DisableMotorSpeedTask>:
}

void DisableMotorSpeedTask()
{
	vTaskSuspend(MotorSpeedTaskHandle);
    4e78:	80 91 a2 26 	lds	r24, 0x26A2	; 0x8026a2 <MotorSpeedTaskHandle>
    4e7c:	90 91 a3 26 	lds	r25, 0x26A3	; 0x8026a3 <MotorSpeedTaskHandle+0x1>
    4e80:	0c 94 99 17 	jmp	0x2f32	; 0x2f32 <vTaskSuspend>

00004e84 <MotorSpeedSet>:
}

void MotorSpeedSet(int16_t Speed1,int16_t Speed2)
{
	
	MotorSpeed.Speed1=Speed1;
    4e84:	e6 ea       	ldi	r30, 0xA6	; 166
    4e86:	f6 e2       	ldi	r31, 0x26	; 38
    4e88:	80 83       	st	Z, r24
    4e8a:	91 83       	std	Z+1, r25	; 0x01
	MotorSpeed.Speed2=Speed2;
    4e8c:	62 83       	std	Z+2, r22	; 0x02
    4e8e:	73 83       	std	Z+3, r23	; 0x03
	xQueueOverwrite(MotorSpeedQueue,&MotorSpeed);
    4e90:	22 e0       	ldi	r18, 0x02	; 2
    4e92:	40 e0       	ldi	r20, 0x00	; 0
    4e94:	50 e0       	ldi	r21, 0x00	; 0
    4e96:	bf 01       	movw	r22, r30
    4e98:	80 91 a4 26 	lds	r24, 0x26A4	; 0x8026a4 <MotorSpeedQueue>
    4e9c:	90 91 a5 26 	lds	r25, 0x26A5	; 0x8026a5 <MotorSpeedQueue+0x1>
    4ea0:	0c 94 7c 10 	jmp	0x20f8	; 0x20f8 <xQueueGenericSend>

00004ea4 <WorkerStartup>:

static void WorkerStartup(void *pvParameters)
{
	int res;
	
	USART_RX_Queue_has_data = 0;
    4ea4:	10 92 b4 26 	sts	0x26B4, r1	; 0x8026b4 <USART_RX_Queue_has_data>
	USART_RX_transmission_complete =1;
    4ea8:	81 e0       	ldi	r24, 0x01	; 1
    4eaa:	80 93 b5 26 	sts	0x26B5, r24	; 0x8026b5 <USART_RX_transmission_complete>
	
	DriverPowerVccAuxSet(1);//Enable Auxillary power line
    4eae:	0e 94 09 09 	call	0x1212	; 0x1212 <DriverPowerVccAuxSet>
	DriverCursorstickInit();//Initialize cursor stick
    4eb2:	0e 94 01 02 	call	0x402	; 0x402 <DriverCursorstickInit>
	// DriverLedInit();		//Initialize LED's
	DriverUSARTInit();		//USART init and link to stdio
    4eb6:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <DriverUSARTInit>
	DriverPowerInit();		//Initialize aux power driver
    4eba:	0e 94 05 09 	call	0x120a	; 0x120a <DriverPowerInit>
	
	DriverTWIMInit();		//Initialize TWI in master mode
    4ebe:	0e 94 2e 09 	call	0x125c	; 0x125c <DriverTWIMInit>
	DriverPL9823Init();		//Initialize PL9823 LEDs
    4ec2:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DriverPL9823Init>
	//DriverAdcInit();		//Initialize ADC driver
	
	DriverOLEDInit(2);		//Initialize OLED display
    4ec6:	82 e0       	ldi	r24, 0x02	; 2
    4ec8:	0e 94 1a 08 	call	0x1034	; 0x1034 <DriverOLEDInit>
	// DriverAdps9960Init();	//Initialize color sensor	
	//DriverVL53L0XInit();	//Initialize rangefinder

	
	vTaskDelay(50);
    4ecc:	82 e3       	ldi	r24, 0x32	; 50
    4ece:	90 e0       	ldi	r25, 0x00	; 0
    4ed0:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <vTaskDelay>
	
	//Enable test output (T21)
	PORTA.DIRSET=1<<5;	
    4ed4:	80 e2       	ldi	r24, 0x20	; 32
    4ed6:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <__TEXT_REGION_LENGTH__+0x700601>
	//Initialize application tasks			
	
	// InitOLEDMenuTask();
	// InitADCTask();
	InitMotorPosTask();
    4eda:	0e 94 88 26 	call	0x4d10	; 0x4d10 <InitMotorPosTask>
	InitMotorSpeedTask();
    4ede:	0e 94 00 27 	call	0x4e00	; 0x4e00 <InitMotorSpeedTask>
	// InitLineFollowerSpeedTask();
	// InitLineFollowerDirectTask();
	// InitRGBTask();
	InitGyroTask();
    4ee2:	0e 94 cb 1f 	call	0x3f96	; 0x3f96 <InitGyroTask>
	InitAccTask();
    4ee6:	0e 94 c4 1e 	call	0x3d88	; 0x3d88 <InitAccTask>
	InitIPSTask();
    4eea:	0e 94 9c 22 	call	0x4538	; 0x4538 <InitIPSTask>
	// InitTerminalTask();
	InitMotionTask();
    4eee:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <InitMotionTask>
	
	vTaskSuspend(NULL);
    4ef2:	80 e0       	ldi	r24, 0x00	; 0
    4ef4:	90 e0       	ldi	r25, 0x00	; 0
    4ef6:	0c 94 99 17 	jmp	0x2f32	; 0x2f32 <vTaskSuspend>

00004efa <InitStartupTask>:
//Private function prototypes
static void WorkerStartup(void *pvParameters);

//Function definitions
void InitStartupTask()
{
    4efa:	ef 92       	push	r14
    4efc:	ff 92       	push	r15
    4efe:	0f 93       	push	r16
	xTaskCreate( WorkerStartup, "startup", 256, NULL, tskIDLE_PRIORITY+3, NULL );	
    4f00:	e1 2c       	mov	r14, r1
    4f02:	f1 2c       	mov	r15, r1
    4f04:	03 e0       	ldi	r16, 0x03	; 3
    4f06:	20 e0       	ldi	r18, 0x00	; 0
    4f08:	30 e0       	ldi	r19, 0x00	; 0
    4f0a:	40 e0       	ldi	r20, 0x00	; 0
    4f0c:	51 e0       	ldi	r21, 0x01	; 1
    4f0e:	6f e6       	ldi	r22, 0x6F	; 111
    4f10:	71 e2       	ldi	r23, 0x21	; 33
    4f12:	82 e5       	ldi	r24, 0x52	; 82
    4f14:	97 e2       	ldi	r25, 0x27	; 39
    4f16:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <xTaskCreate>
}
    4f1a:	0f 91       	pop	r16
    4f1c:	ff 90       	pop	r15
    4f1e:	ef 90       	pop	r14
    4f20:	08 95       	ret

00004f22 <__subsf3>:
    4f22:	50 58       	subi	r21, 0x80	; 128

00004f24 <__addsf3>:
    4f24:	bb 27       	eor	r27, r27
    4f26:	aa 27       	eor	r26, r26
    4f28:	0e 94 a9 27 	call	0x4f52	; 0x4f52 <__addsf3x>
    4f2c:	0c 94 53 29 	jmp	0x52a6	; 0x52a6 <__fp_round>
    4f30:	0e 94 1a 29 	call	0x5234	; 0x5234 <__fp_pscA>
    4f34:	38 f0       	brcs	.+14     	; 0x4f44 <__addsf3+0x20>
    4f36:	0e 94 21 29 	call	0x5242	; 0x5242 <__fp_pscB>
    4f3a:	20 f0       	brcs	.+8      	; 0x4f44 <__addsf3+0x20>
    4f3c:	39 f4       	brne	.+14     	; 0x4f4c <__addsf3+0x28>
    4f3e:	9f 3f       	cpi	r25, 0xFF	; 255
    4f40:	19 f4       	brne	.+6      	; 0x4f48 <__addsf3+0x24>
    4f42:	26 f4       	brtc	.+8      	; 0x4f4c <__addsf3+0x28>
    4f44:	0c 94 17 29 	jmp	0x522e	; 0x522e <__fp_nan>
    4f48:	0e f4       	brtc	.+2      	; 0x4f4c <__addsf3+0x28>
    4f4a:	e0 95       	com	r30
    4f4c:	e7 fb       	bst	r30, 7
    4f4e:	0c 94 11 29 	jmp	0x5222	; 0x5222 <__fp_inf>

00004f52 <__addsf3x>:
    4f52:	e9 2f       	mov	r30, r25
    4f54:	0e 94 78 29 	call	0x52f0	; 0x52f0 <__fp_split3>
    4f58:	58 f3       	brcs	.-42     	; 0x4f30 <__addsf3+0xc>
    4f5a:	ba 17       	cp	r27, r26
    4f5c:	62 07       	cpc	r22, r18
    4f5e:	73 07       	cpc	r23, r19
    4f60:	84 07       	cpc	r24, r20
    4f62:	95 07       	cpc	r25, r21
    4f64:	20 f0       	brcs	.+8      	; 0x4f6e <__addsf3x+0x1c>
    4f66:	79 f4       	brne	.+30     	; 0x4f86 <__addsf3x+0x34>
    4f68:	a6 f5       	brtc	.+104    	; 0x4fd2 <__addsf3x+0x80>
    4f6a:	0c 94 9a 29 	jmp	0x5334	; 0x5334 <__fp_zero>
    4f6e:	0e f4       	brtc	.+2      	; 0x4f72 <__addsf3x+0x20>
    4f70:	e0 95       	com	r30
    4f72:	0b 2e       	mov	r0, r27
    4f74:	ba 2f       	mov	r27, r26
    4f76:	a0 2d       	mov	r26, r0
    4f78:	0b 01       	movw	r0, r22
    4f7a:	b9 01       	movw	r22, r18
    4f7c:	90 01       	movw	r18, r0
    4f7e:	0c 01       	movw	r0, r24
    4f80:	ca 01       	movw	r24, r20
    4f82:	a0 01       	movw	r20, r0
    4f84:	11 24       	eor	r1, r1
    4f86:	ff 27       	eor	r31, r31
    4f88:	59 1b       	sub	r21, r25
    4f8a:	99 f0       	breq	.+38     	; 0x4fb2 <__addsf3x+0x60>
    4f8c:	59 3f       	cpi	r21, 0xF9	; 249
    4f8e:	50 f4       	brcc	.+20     	; 0x4fa4 <__addsf3x+0x52>
    4f90:	50 3e       	cpi	r21, 0xE0	; 224
    4f92:	68 f1       	brcs	.+90     	; 0x4fee <__addsf3x+0x9c>
    4f94:	1a 16       	cp	r1, r26
    4f96:	f0 40       	sbci	r31, 0x00	; 0
    4f98:	a2 2f       	mov	r26, r18
    4f9a:	23 2f       	mov	r18, r19
    4f9c:	34 2f       	mov	r19, r20
    4f9e:	44 27       	eor	r20, r20
    4fa0:	58 5f       	subi	r21, 0xF8	; 248
    4fa2:	f3 cf       	rjmp	.-26     	; 0x4f8a <__addsf3x+0x38>
    4fa4:	46 95       	lsr	r20
    4fa6:	37 95       	ror	r19
    4fa8:	27 95       	ror	r18
    4faa:	a7 95       	ror	r26
    4fac:	f0 40       	sbci	r31, 0x00	; 0
    4fae:	53 95       	inc	r21
    4fb0:	c9 f7       	brne	.-14     	; 0x4fa4 <__addsf3x+0x52>
    4fb2:	7e f4       	brtc	.+30     	; 0x4fd2 <__addsf3x+0x80>
    4fb4:	1f 16       	cp	r1, r31
    4fb6:	ba 0b       	sbc	r27, r26
    4fb8:	62 0b       	sbc	r22, r18
    4fba:	73 0b       	sbc	r23, r19
    4fbc:	84 0b       	sbc	r24, r20
    4fbe:	ba f0       	brmi	.+46     	; 0x4fee <__addsf3x+0x9c>
    4fc0:	91 50       	subi	r25, 0x01	; 1
    4fc2:	a1 f0       	breq	.+40     	; 0x4fec <__addsf3x+0x9a>
    4fc4:	ff 0f       	add	r31, r31
    4fc6:	bb 1f       	adc	r27, r27
    4fc8:	66 1f       	adc	r22, r22
    4fca:	77 1f       	adc	r23, r23
    4fcc:	88 1f       	adc	r24, r24
    4fce:	c2 f7       	brpl	.-16     	; 0x4fc0 <__addsf3x+0x6e>
    4fd0:	0e c0       	rjmp	.+28     	; 0x4fee <__addsf3x+0x9c>
    4fd2:	ba 0f       	add	r27, r26
    4fd4:	62 1f       	adc	r22, r18
    4fd6:	73 1f       	adc	r23, r19
    4fd8:	84 1f       	adc	r24, r20
    4fda:	48 f4       	brcc	.+18     	; 0x4fee <__addsf3x+0x9c>
    4fdc:	87 95       	ror	r24
    4fde:	77 95       	ror	r23
    4fe0:	67 95       	ror	r22
    4fe2:	b7 95       	ror	r27
    4fe4:	f7 95       	ror	r31
    4fe6:	9e 3f       	cpi	r25, 0xFE	; 254
    4fe8:	08 f0       	brcs	.+2      	; 0x4fec <__addsf3x+0x9a>
    4fea:	b0 cf       	rjmp	.-160    	; 0x4f4c <__addsf3+0x28>
    4fec:	93 95       	inc	r25
    4fee:	88 0f       	add	r24, r24
    4ff0:	08 f0       	brcs	.+2      	; 0x4ff4 <__addsf3x+0xa2>
    4ff2:	99 27       	eor	r25, r25
    4ff4:	ee 0f       	add	r30, r30
    4ff6:	97 95       	ror	r25
    4ff8:	87 95       	ror	r24
    4ffa:	08 95       	ret

00004ffc <__cmpsf2>:
    4ffc:	0e 94 ed 28 	call	0x51da	; 0x51da <__fp_cmp>
    5000:	08 f4       	brcc	.+2      	; 0x5004 <__cmpsf2+0x8>
    5002:	81 e0       	ldi	r24, 0x01	; 1
    5004:	08 95       	ret

00005006 <cos>:
    5006:	0e 94 2a 29 	call	0x5254	; 0x5254 <__fp_rempio2>
    500a:	e3 95       	inc	r30
    500c:	0c 94 64 29 	jmp	0x52c8	; 0x52c8 <__fp_sinus>

00005010 <__divsf3>:
    5010:	0e 94 1c 28 	call	0x5038	; 0x5038 <__divsf3x>
    5014:	0c 94 53 29 	jmp	0x52a6	; 0x52a6 <__fp_round>
    5018:	0e 94 21 29 	call	0x5242	; 0x5242 <__fp_pscB>
    501c:	58 f0       	brcs	.+22     	; 0x5034 <__divsf3+0x24>
    501e:	0e 94 1a 29 	call	0x5234	; 0x5234 <__fp_pscA>
    5022:	40 f0       	brcs	.+16     	; 0x5034 <__divsf3+0x24>
    5024:	29 f4       	brne	.+10     	; 0x5030 <__divsf3+0x20>
    5026:	5f 3f       	cpi	r21, 0xFF	; 255
    5028:	29 f0       	breq	.+10     	; 0x5034 <__divsf3+0x24>
    502a:	0c 94 11 29 	jmp	0x5222	; 0x5222 <__fp_inf>
    502e:	51 11       	cpse	r21, r1
    5030:	0c 94 9b 29 	jmp	0x5336	; 0x5336 <__fp_szero>
    5034:	0c 94 17 29 	jmp	0x522e	; 0x522e <__fp_nan>

00005038 <__divsf3x>:
    5038:	0e 94 78 29 	call	0x52f0	; 0x52f0 <__fp_split3>
    503c:	68 f3       	brcs	.-38     	; 0x5018 <__divsf3+0x8>

0000503e <__divsf3_pse>:
    503e:	99 23       	and	r25, r25
    5040:	b1 f3       	breq	.-20     	; 0x502e <__divsf3+0x1e>
    5042:	55 23       	and	r21, r21
    5044:	91 f3       	breq	.-28     	; 0x502a <__divsf3+0x1a>
    5046:	95 1b       	sub	r25, r21
    5048:	55 0b       	sbc	r21, r21
    504a:	bb 27       	eor	r27, r27
    504c:	aa 27       	eor	r26, r26
    504e:	62 17       	cp	r22, r18
    5050:	73 07       	cpc	r23, r19
    5052:	84 07       	cpc	r24, r20
    5054:	38 f0       	brcs	.+14     	; 0x5064 <__divsf3_pse+0x26>
    5056:	9f 5f       	subi	r25, 0xFF	; 255
    5058:	5f 4f       	sbci	r21, 0xFF	; 255
    505a:	22 0f       	add	r18, r18
    505c:	33 1f       	adc	r19, r19
    505e:	44 1f       	adc	r20, r20
    5060:	aa 1f       	adc	r26, r26
    5062:	a9 f3       	breq	.-22     	; 0x504e <__divsf3_pse+0x10>
    5064:	35 d0       	rcall	.+106    	; 0x50d0 <__divsf3_pse+0x92>
    5066:	0e 2e       	mov	r0, r30
    5068:	3a f0       	brmi	.+14     	; 0x5078 <__divsf3_pse+0x3a>
    506a:	e0 e8       	ldi	r30, 0x80	; 128
    506c:	32 d0       	rcall	.+100    	; 0x50d2 <__divsf3_pse+0x94>
    506e:	91 50       	subi	r25, 0x01	; 1
    5070:	50 40       	sbci	r21, 0x00	; 0
    5072:	e6 95       	lsr	r30
    5074:	00 1c       	adc	r0, r0
    5076:	ca f7       	brpl	.-14     	; 0x506a <__divsf3_pse+0x2c>
    5078:	2b d0       	rcall	.+86     	; 0x50d0 <__divsf3_pse+0x92>
    507a:	fe 2f       	mov	r31, r30
    507c:	29 d0       	rcall	.+82     	; 0x50d0 <__divsf3_pse+0x92>
    507e:	66 0f       	add	r22, r22
    5080:	77 1f       	adc	r23, r23
    5082:	88 1f       	adc	r24, r24
    5084:	bb 1f       	adc	r27, r27
    5086:	26 17       	cp	r18, r22
    5088:	37 07       	cpc	r19, r23
    508a:	48 07       	cpc	r20, r24
    508c:	ab 07       	cpc	r26, r27
    508e:	b0 e8       	ldi	r27, 0x80	; 128
    5090:	09 f0       	breq	.+2      	; 0x5094 <__divsf3_pse+0x56>
    5092:	bb 0b       	sbc	r27, r27
    5094:	80 2d       	mov	r24, r0
    5096:	bf 01       	movw	r22, r30
    5098:	ff 27       	eor	r31, r31
    509a:	93 58       	subi	r25, 0x83	; 131
    509c:	5f 4f       	sbci	r21, 0xFF	; 255
    509e:	3a f0       	brmi	.+14     	; 0x50ae <__divsf3_pse+0x70>
    50a0:	9e 3f       	cpi	r25, 0xFE	; 254
    50a2:	51 05       	cpc	r21, r1
    50a4:	78 f0       	brcs	.+30     	; 0x50c4 <__divsf3_pse+0x86>
    50a6:	0c 94 11 29 	jmp	0x5222	; 0x5222 <__fp_inf>
    50aa:	0c 94 9b 29 	jmp	0x5336	; 0x5336 <__fp_szero>
    50ae:	5f 3f       	cpi	r21, 0xFF	; 255
    50b0:	e4 f3       	brlt	.-8      	; 0x50aa <__divsf3_pse+0x6c>
    50b2:	98 3e       	cpi	r25, 0xE8	; 232
    50b4:	d4 f3       	brlt	.-12     	; 0x50aa <__divsf3_pse+0x6c>
    50b6:	86 95       	lsr	r24
    50b8:	77 95       	ror	r23
    50ba:	67 95       	ror	r22
    50bc:	b7 95       	ror	r27
    50be:	f7 95       	ror	r31
    50c0:	9f 5f       	subi	r25, 0xFF	; 255
    50c2:	c9 f7       	brne	.-14     	; 0x50b6 <__divsf3_pse+0x78>
    50c4:	88 0f       	add	r24, r24
    50c6:	91 1d       	adc	r25, r1
    50c8:	96 95       	lsr	r25
    50ca:	87 95       	ror	r24
    50cc:	97 f9       	bld	r25, 7
    50ce:	08 95       	ret
    50d0:	e1 e0       	ldi	r30, 0x01	; 1
    50d2:	66 0f       	add	r22, r22
    50d4:	77 1f       	adc	r23, r23
    50d6:	88 1f       	adc	r24, r24
    50d8:	bb 1f       	adc	r27, r27
    50da:	62 17       	cp	r22, r18
    50dc:	73 07       	cpc	r23, r19
    50de:	84 07       	cpc	r24, r20
    50e0:	ba 07       	cpc	r27, r26
    50e2:	20 f0       	brcs	.+8      	; 0x50ec <__divsf3_pse+0xae>
    50e4:	62 1b       	sub	r22, r18
    50e6:	73 0b       	sbc	r23, r19
    50e8:	84 0b       	sbc	r24, r20
    50ea:	ba 0b       	sbc	r27, r26
    50ec:	ee 1f       	adc	r30, r30
    50ee:	88 f7       	brcc	.-30     	; 0x50d2 <__divsf3_pse+0x94>
    50f0:	e0 95       	com	r30
    50f2:	08 95       	ret

000050f4 <__fixsfsi>:
    50f4:	0e 94 81 28 	call	0x5102	; 0x5102 <__fixunssfsi>
    50f8:	68 94       	set
    50fa:	b1 11       	cpse	r27, r1
    50fc:	0c 94 9b 29 	jmp	0x5336	; 0x5336 <__fp_szero>
    5100:	08 95       	ret

00005102 <__fixunssfsi>:
    5102:	0e 94 80 29 	call	0x5300	; 0x5300 <__fp_splitA>
    5106:	88 f0       	brcs	.+34     	; 0x512a <__fixunssfsi+0x28>
    5108:	9f 57       	subi	r25, 0x7F	; 127
    510a:	98 f0       	brcs	.+38     	; 0x5132 <__fixunssfsi+0x30>
    510c:	b9 2f       	mov	r27, r25
    510e:	99 27       	eor	r25, r25
    5110:	b7 51       	subi	r27, 0x17	; 23
    5112:	b0 f0       	brcs	.+44     	; 0x5140 <__fixunssfsi+0x3e>
    5114:	e1 f0       	breq	.+56     	; 0x514e <__fixunssfsi+0x4c>
    5116:	66 0f       	add	r22, r22
    5118:	77 1f       	adc	r23, r23
    511a:	88 1f       	adc	r24, r24
    511c:	99 1f       	adc	r25, r25
    511e:	1a f0       	brmi	.+6      	; 0x5126 <__fixunssfsi+0x24>
    5120:	ba 95       	dec	r27
    5122:	c9 f7       	brne	.-14     	; 0x5116 <__fixunssfsi+0x14>
    5124:	14 c0       	rjmp	.+40     	; 0x514e <__fixunssfsi+0x4c>
    5126:	b1 30       	cpi	r27, 0x01	; 1
    5128:	91 f0       	breq	.+36     	; 0x514e <__fixunssfsi+0x4c>
    512a:	0e 94 9a 29 	call	0x5334	; 0x5334 <__fp_zero>
    512e:	b1 e0       	ldi	r27, 0x01	; 1
    5130:	08 95       	ret
    5132:	0c 94 9a 29 	jmp	0x5334	; 0x5334 <__fp_zero>
    5136:	67 2f       	mov	r22, r23
    5138:	78 2f       	mov	r23, r24
    513a:	88 27       	eor	r24, r24
    513c:	b8 5f       	subi	r27, 0xF8	; 248
    513e:	39 f0       	breq	.+14     	; 0x514e <__fixunssfsi+0x4c>
    5140:	b9 3f       	cpi	r27, 0xF9	; 249
    5142:	cc f3       	brlt	.-14     	; 0x5136 <__fixunssfsi+0x34>
    5144:	86 95       	lsr	r24
    5146:	77 95       	ror	r23
    5148:	67 95       	ror	r22
    514a:	b3 95       	inc	r27
    514c:	d9 f7       	brne	.-10     	; 0x5144 <__fixunssfsi+0x42>
    514e:	3e f4       	brtc	.+14     	; 0x515e <__fixunssfsi+0x5c>
    5150:	90 95       	com	r25
    5152:	80 95       	com	r24
    5154:	70 95       	com	r23
    5156:	61 95       	neg	r22
    5158:	7f 4f       	sbci	r23, 0xFF	; 255
    515a:	8f 4f       	sbci	r24, 0xFF	; 255
    515c:	9f 4f       	sbci	r25, 0xFF	; 255
    515e:	08 95       	ret

00005160 <__floatunsisf>:
    5160:	e8 94       	clt
    5162:	09 c0       	rjmp	.+18     	; 0x5176 <__floatsisf+0x12>

00005164 <__floatsisf>:
    5164:	97 fb       	bst	r25, 7
    5166:	3e f4       	brtc	.+14     	; 0x5176 <__floatsisf+0x12>
    5168:	90 95       	com	r25
    516a:	80 95       	com	r24
    516c:	70 95       	com	r23
    516e:	61 95       	neg	r22
    5170:	7f 4f       	sbci	r23, 0xFF	; 255
    5172:	8f 4f       	sbci	r24, 0xFF	; 255
    5174:	9f 4f       	sbci	r25, 0xFF	; 255
    5176:	99 23       	and	r25, r25
    5178:	a9 f0       	breq	.+42     	; 0x51a4 <__floatsisf+0x40>
    517a:	f9 2f       	mov	r31, r25
    517c:	96 e9       	ldi	r25, 0x96	; 150
    517e:	bb 27       	eor	r27, r27
    5180:	93 95       	inc	r25
    5182:	f6 95       	lsr	r31
    5184:	87 95       	ror	r24
    5186:	77 95       	ror	r23
    5188:	67 95       	ror	r22
    518a:	b7 95       	ror	r27
    518c:	f1 11       	cpse	r31, r1
    518e:	f8 cf       	rjmp	.-16     	; 0x5180 <__floatsisf+0x1c>
    5190:	fa f4       	brpl	.+62     	; 0x51d0 <__floatsisf+0x6c>
    5192:	bb 0f       	add	r27, r27
    5194:	11 f4       	brne	.+4      	; 0x519a <__floatsisf+0x36>
    5196:	60 ff       	sbrs	r22, 0
    5198:	1b c0       	rjmp	.+54     	; 0x51d0 <__floatsisf+0x6c>
    519a:	6f 5f       	subi	r22, 0xFF	; 255
    519c:	7f 4f       	sbci	r23, 0xFF	; 255
    519e:	8f 4f       	sbci	r24, 0xFF	; 255
    51a0:	9f 4f       	sbci	r25, 0xFF	; 255
    51a2:	16 c0       	rjmp	.+44     	; 0x51d0 <__floatsisf+0x6c>
    51a4:	88 23       	and	r24, r24
    51a6:	11 f0       	breq	.+4      	; 0x51ac <__floatsisf+0x48>
    51a8:	96 e9       	ldi	r25, 0x96	; 150
    51aa:	11 c0       	rjmp	.+34     	; 0x51ce <__floatsisf+0x6a>
    51ac:	77 23       	and	r23, r23
    51ae:	21 f0       	breq	.+8      	; 0x51b8 <__floatsisf+0x54>
    51b0:	9e e8       	ldi	r25, 0x8E	; 142
    51b2:	87 2f       	mov	r24, r23
    51b4:	76 2f       	mov	r23, r22
    51b6:	05 c0       	rjmp	.+10     	; 0x51c2 <__floatsisf+0x5e>
    51b8:	66 23       	and	r22, r22
    51ba:	71 f0       	breq	.+28     	; 0x51d8 <__floatsisf+0x74>
    51bc:	96 e8       	ldi	r25, 0x86	; 134
    51be:	86 2f       	mov	r24, r22
    51c0:	70 e0       	ldi	r23, 0x00	; 0
    51c2:	60 e0       	ldi	r22, 0x00	; 0
    51c4:	2a f0       	brmi	.+10     	; 0x51d0 <__floatsisf+0x6c>
    51c6:	9a 95       	dec	r25
    51c8:	66 0f       	add	r22, r22
    51ca:	77 1f       	adc	r23, r23
    51cc:	88 1f       	adc	r24, r24
    51ce:	da f7       	brpl	.-10     	; 0x51c6 <__floatsisf+0x62>
    51d0:	88 0f       	add	r24, r24
    51d2:	96 95       	lsr	r25
    51d4:	87 95       	ror	r24
    51d6:	97 f9       	bld	r25, 7
    51d8:	08 95       	ret

000051da <__fp_cmp>:
    51da:	99 0f       	add	r25, r25
    51dc:	00 08       	sbc	r0, r0
    51de:	55 0f       	add	r21, r21
    51e0:	aa 0b       	sbc	r26, r26
    51e2:	e0 e8       	ldi	r30, 0x80	; 128
    51e4:	fe ef       	ldi	r31, 0xFE	; 254
    51e6:	16 16       	cp	r1, r22
    51e8:	17 06       	cpc	r1, r23
    51ea:	e8 07       	cpc	r30, r24
    51ec:	f9 07       	cpc	r31, r25
    51ee:	c0 f0       	brcs	.+48     	; 0x5220 <__fp_cmp+0x46>
    51f0:	12 16       	cp	r1, r18
    51f2:	13 06       	cpc	r1, r19
    51f4:	e4 07       	cpc	r30, r20
    51f6:	f5 07       	cpc	r31, r21
    51f8:	98 f0       	brcs	.+38     	; 0x5220 <__fp_cmp+0x46>
    51fa:	62 1b       	sub	r22, r18
    51fc:	73 0b       	sbc	r23, r19
    51fe:	84 0b       	sbc	r24, r20
    5200:	95 0b       	sbc	r25, r21
    5202:	39 f4       	brne	.+14     	; 0x5212 <__fp_cmp+0x38>
    5204:	0a 26       	eor	r0, r26
    5206:	61 f0       	breq	.+24     	; 0x5220 <__fp_cmp+0x46>
    5208:	23 2b       	or	r18, r19
    520a:	24 2b       	or	r18, r20
    520c:	25 2b       	or	r18, r21
    520e:	21 f4       	brne	.+8      	; 0x5218 <__fp_cmp+0x3e>
    5210:	08 95       	ret
    5212:	0a 26       	eor	r0, r26
    5214:	09 f4       	brne	.+2      	; 0x5218 <__fp_cmp+0x3e>
    5216:	a1 40       	sbci	r26, 0x01	; 1
    5218:	a6 95       	lsr	r26
    521a:	8f ef       	ldi	r24, 0xFF	; 255
    521c:	81 1d       	adc	r24, r1
    521e:	81 1d       	adc	r24, r1
    5220:	08 95       	ret

00005222 <__fp_inf>:
    5222:	97 f9       	bld	r25, 7
    5224:	9f 67       	ori	r25, 0x7F	; 127
    5226:	80 e8       	ldi	r24, 0x80	; 128
    5228:	70 e0       	ldi	r23, 0x00	; 0
    522a:	60 e0       	ldi	r22, 0x00	; 0
    522c:	08 95       	ret

0000522e <__fp_nan>:
    522e:	9f ef       	ldi	r25, 0xFF	; 255
    5230:	80 ec       	ldi	r24, 0xC0	; 192
    5232:	08 95       	ret

00005234 <__fp_pscA>:
    5234:	00 24       	eor	r0, r0
    5236:	0a 94       	dec	r0
    5238:	16 16       	cp	r1, r22
    523a:	17 06       	cpc	r1, r23
    523c:	18 06       	cpc	r1, r24
    523e:	09 06       	cpc	r0, r25
    5240:	08 95       	ret

00005242 <__fp_pscB>:
    5242:	00 24       	eor	r0, r0
    5244:	0a 94       	dec	r0
    5246:	12 16       	cp	r1, r18
    5248:	13 06       	cpc	r1, r19
    524a:	14 06       	cpc	r1, r20
    524c:	05 06       	cpc	r0, r21
    524e:	08 95       	ret
    5250:	0c 94 17 29 	jmp	0x522e	; 0x522e <__fp_nan>

00005254 <__fp_rempio2>:
    5254:	0e 94 80 29 	call	0x5300	; 0x5300 <__fp_splitA>
    5258:	d8 f3       	brcs	.-10     	; 0x5250 <__fp_pscB+0xe>
    525a:	e8 94       	clt
    525c:	e0 e0       	ldi	r30, 0x00	; 0
    525e:	bb 27       	eor	r27, r27
    5260:	9f 57       	subi	r25, 0x7F	; 127
    5262:	f0 f0       	brcs	.+60     	; 0x52a0 <__fp_rempio2+0x4c>
    5264:	2a ed       	ldi	r18, 0xDA	; 218
    5266:	3f e0       	ldi	r19, 0x0F	; 15
    5268:	49 ec       	ldi	r20, 0xC9	; 201
    526a:	06 c0       	rjmp	.+12     	; 0x5278 <__fp_rempio2+0x24>
    526c:	ee 0f       	add	r30, r30
    526e:	bb 0f       	add	r27, r27
    5270:	66 1f       	adc	r22, r22
    5272:	77 1f       	adc	r23, r23
    5274:	88 1f       	adc	r24, r24
    5276:	28 f0       	brcs	.+10     	; 0x5282 <__fp_rempio2+0x2e>
    5278:	b2 3a       	cpi	r27, 0xA2	; 162
    527a:	62 07       	cpc	r22, r18
    527c:	73 07       	cpc	r23, r19
    527e:	84 07       	cpc	r24, r20
    5280:	28 f0       	brcs	.+10     	; 0x528c <__fp_rempio2+0x38>
    5282:	b2 5a       	subi	r27, 0xA2	; 162
    5284:	62 0b       	sbc	r22, r18
    5286:	73 0b       	sbc	r23, r19
    5288:	84 0b       	sbc	r24, r20
    528a:	e3 95       	inc	r30
    528c:	9a 95       	dec	r25
    528e:	72 f7       	brpl	.-36     	; 0x526c <__fp_rempio2+0x18>
    5290:	80 38       	cpi	r24, 0x80	; 128
    5292:	30 f4       	brcc	.+12     	; 0x52a0 <__fp_rempio2+0x4c>
    5294:	9a 95       	dec	r25
    5296:	bb 0f       	add	r27, r27
    5298:	66 1f       	adc	r22, r22
    529a:	77 1f       	adc	r23, r23
    529c:	88 1f       	adc	r24, r24
    529e:	d2 f7       	brpl	.-12     	; 0x5294 <__fp_rempio2+0x40>
    52a0:	90 48       	sbci	r25, 0x80	; 128
    52a2:	0c 94 1d 2a 	jmp	0x543a	; 0x543a <__fp_mpack_finite>

000052a6 <__fp_round>:
    52a6:	09 2e       	mov	r0, r25
    52a8:	03 94       	inc	r0
    52aa:	00 0c       	add	r0, r0
    52ac:	11 f4       	brne	.+4      	; 0x52b2 <__fp_round+0xc>
    52ae:	88 23       	and	r24, r24
    52b0:	52 f0       	brmi	.+20     	; 0x52c6 <__fp_round+0x20>
    52b2:	bb 0f       	add	r27, r27
    52b4:	40 f4       	brcc	.+16     	; 0x52c6 <__fp_round+0x20>
    52b6:	bf 2b       	or	r27, r31
    52b8:	11 f4       	brne	.+4      	; 0x52be <__fp_round+0x18>
    52ba:	60 ff       	sbrs	r22, 0
    52bc:	04 c0       	rjmp	.+8      	; 0x52c6 <__fp_round+0x20>
    52be:	6f 5f       	subi	r22, 0xFF	; 255
    52c0:	7f 4f       	sbci	r23, 0xFF	; 255
    52c2:	8f 4f       	sbci	r24, 0xFF	; 255
    52c4:	9f 4f       	sbci	r25, 0xFF	; 255
    52c6:	08 95       	ret

000052c8 <__fp_sinus>:
    52c8:	ef 93       	push	r30
    52ca:	e0 ff       	sbrs	r30, 0
    52cc:	07 c0       	rjmp	.+14     	; 0x52dc <__fp_sinus+0x14>
    52ce:	a2 ea       	ldi	r26, 0xA2	; 162
    52d0:	2a ed       	ldi	r18, 0xDA	; 218
    52d2:	3f e0       	ldi	r19, 0x0F	; 15
    52d4:	49 ec       	ldi	r20, 0xC9	; 201
    52d6:	5f eb       	ldi	r21, 0xBF	; 191
    52d8:	0e 94 a9 27 	call	0x4f52	; 0x4f52 <__addsf3x>
    52dc:	0e 94 53 29 	call	0x52a6	; 0x52a6 <__fp_round>
    52e0:	0f 90       	pop	r0
    52e2:	03 94       	inc	r0
    52e4:	01 fc       	sbrc	r0, 1
    52e6:	90 58       	subi	r25, 0x80	; 128
    52e8:	ec ef       	ldi	r30, 0xFC	; 252
    52ea:	f1 e0       	ldi	r31, 0x01	; 1
    52ec:	0c 94 29 2a 	jmp	0x5452	; 0x5452 <__fp_powsodd>

000052f0 <__fp_split3>:
    52f0:	57 fd       	sbrc	r21, 7
    52f2:	90 58       	subi	r25, 0x80	; 128
    52f4:	44 0f       	add	r20, r20
    52f6:	55 1f       	adc	r21, r21
    52f8:	59 f0       	breq	.+22     	; 0x5310 <__fp_splitA+0x10>
    52fa:	5f 3f       	cpi	r21, 0xFF	; 255
    52fc:	71 f0       	breq	.+28     	; 0x531a <__fp_splitA+0x1a>
    52fe:	47 95       	ror	r20

00005300 <__fp_splitA>:
    5300:	88 0f       	add	r24, r24
    5302:	97 fb       	bst	r25, 7
    5304:	99 1f       	adc	r25, r25
    5306:	61 f0       	breq	.+24     	; 0x5320 <__fp_splitA+0x20>
    5308:	9f 3f       	cpi	r25, 0xFF	; 255
    530a:	79 f0       	breq	.+30     	; 0x532a <__fp_splitA+0x2a>
    530c:	87 95       	ror	r24
    530e:	08 95       	ret
    5310:	12 16       	cp	r1, r18
    5312:	13 06       	cpc	r1, r19
    5314:	14 06       	cpc	r1, r20
    5316:	55 1f       	adc	r21, r21
    5318:	f2 cf       	rjmp	.-28     	; 0x52fe <__fp_split3+0xe>
    531a:	46 95       	lsr	r20
    531c:	f1 df       	rcall	.-30     	; 0x5300 <__fp_splitA>
    531e:	08 c0       	rjmp	.+16     	; 0x5330 <__fp_splitA+0x30>
    5320:	16 16       	cp	r1, r22
    5322:	17 06       	cpc	r1, r23
    5324:	18 06       	cpc	r1, r24
    5326:	99 1f       	adc	r25, r25
    5328:	f1 cf       	rjmp	.-30     	; 0x530c <__fp_splitA+0xc>
    532a:	86 95       	lsr	r24
    532c:	71 05       	cpc	r23, r1
    532e:	61 05       	cpc	r22, r1
    5330:	08 94       	sec
    5332:	08 95       	ret

00005334 <__fp_zero>:
    5334:	e8 94       	clt

00005336 <__fp_szero>:
    5336:	bb 27       	eor	r27, r27
    5338:	66 27       	eor	r22, r22
    533a:	77 27       	eor	r23, r23
    533c:	cb 01       	movw	r24, r22
    533e:	97 f9       	bld	r25, 7
    5340:	08 95       	ret

00005342 <__gesf2>:
    5342:	0e 94 ed 28 	call	0x51da	; 0x51da <__fp_cmp>
    5346:	08 f4       	brcc	.+2      	; 0x534a <__gesf2+0x8>
    5348:	8f ef       	ldi	r24, 0xFF	; 255
    534a:	08 95       	ret

0000534c <__mulsf3>:
    534c:	0e 94 b9 29 	call	0x5372	; 0x5372 <__mulsf3x>
    5350:	0c 94 53 29 	jmp	0x52a6	; 0x52a6 <__fp_round>
    5354:	0e 94 1a 29 	call	0x5234	; 0x5234 <__fp_pscA>
    5358:	38 f0       	brcs	.+14     	; 0x5368 <__mulsf3+0x1c>
    535a:	0e 94 21 29 	call	0x5242	; 0x5242 <__fp_pscB>
    535e:	20 f0       	brcs	.+8      	; 0x5368 <__mulsf3+0x1c>
    5360:	95 23       	and	r25, r21
    5362:	11 f0       	breq	.+4      	; 0x5368 <__mulsf3+0x1c>
    5364:	0c 94 11 29 	jmp	0x5222	; 0x5222 <__fp_inf>
    5368:	0c 94 17 29 	jmp	0x522e	; 0x522e <__fp_nan>
    536c:	11 24       	eor	r1, r1
    536e:	0c 94 9b 29 	jmp	0x5336	; 0x5336 <__fp_szero>

00005372 <__mulsf3x>:
    5372:	0e 94 78 29 	call	0x52f0	; 0x52f0 <__fp_split3>
    5376:	70 f3       	brcs	.-36     	; 0x5354 <__mulsf3+0x8>

00005378 <__mulsf3_pse>:
    5378:	95 9f       	mul	r25, r21
    537a:	c1 f3       	breq	.-16     	; 0x536c <__mulsf3+0x20>
    537c:	95 0f       	add	r25, r21
    537e:	50 e0       	ldi	r21, 0x00	; 0
    5380:	55 1f       	adc	r21, r21
    5382:	62 9f       	mul	r22, r18
    5384:	f0 01       	movw	r30, r0
    5386:	72 9f       	mul	r23, r18
    5388:	bb 27       	eor	r27, r27
    538a:	f0 0d       	add	r31, r0
    538c:	b1 1d       	adc	r27, r1
    538e:	63 9f       	mul	r22, r19
    5390:	aa 27       	eor	r26, r26
    5392:	f0 0d       	add	r31, r0
    5394:	b1 1d       	adc	r27, r1
    5396:	aa 1f       	adc	r26, r26
    5398:	64 9f       	mul	r22, r20
    539a:	66 27       	eor	r22, r22
    539c:	b0 0d       	add	r27, r0
    539e:	a1 1d       	adc	r26, r1
    53a0:	66 1f       	adc	r22, r22
    53a2:	82 9f       	mul	r24, r18
    53a4:	22 27       	eor	r18, r18
    53a6:	b0 0d       	add	r27, r0
    53a8:	a1 1d       	adc	r26, r1
    53aa:	62 1f       	adc	r22, r18
    53ac:	73 9f       	mul	r23, r19
    53ae:	b0 0d       	add	r27, r0
    53b0:	a1 1d       	adc	r26, r1
    53b2:	62 1f       	adc	r22, r18
    53b4:	83 9f       	mul	r24, r19
    53b6:	a0 0d       	add	r26, r0
    53b8:	61 1d       	adc	r22, r1
    53ba:	22 1f       	adc	r18, r18
    53bc:	74 9f       	mul	r23, r20
    53be:	33 27       	eor	r19, r19
    53c0:	a0 0d       	add	r26, r0
    53c2:	61 1d       	adc	r22, r1
    53c4:	23 1f       	adc	r18, r19
    53c6:	84 9f       	mul	r24, r20
    53c8:	60 0d       	add	r22, r0
    53ca:	21 1d       	adc	r18, r1
    53cc:	82 2f       	mov	r24, r18
    53ce:	76 2f       	mov	r23, r22
    53d0:	6a 2f       	mov	r22, r26
    53d2:	11 24       	eor	r1, r1
    53d4:	9f 57       	subi	r25, 0x7F	; 127
    53d6:	50 40       	sbci	r21, 0x00	; 0
    53d8:	9a f0       	brmi	.+38     	; 0x5400 <__mulsf3_pse+0x88>
    53da:	f1 f0       	breq	.+60     	; 0x5418 <__mulsf3_pse+0xa0>
    53dc:	88 23       	and	r24, r24
    53de:	4a f0       	brmi	.+18     	; 0x53f2 <__mulsf3_pse+0x7a>
    53e0:	ee 0f       	add	r30, r30
    53e2:	ff 1f       	adc	r31, r31
    53e4:	bb 1f       	adc	r27, r27
    53e6:	66 1f       	adc	r22, r22
    53e8:	77 1f       	adc	r23, r23
    53ea:	88 1f       	adc	r24, r24
    53ec:	91 50       	subi	r25, 0x01	; 1
    53ee:	50 40       	sbci	r21, 0x00	; 0
    53f0:	a9 f7       	brne	.-22     	; 0x53dc <__mulsf3_pse+0x64>
    53f2:	9e 3f       	cpi	r25, 0xFE	; 254
    53f4:	51 05       	cpc	r21, r1
    53f6:	80 f0       	brcs	.+32     	; 0x5418 <__mulsf3_pse+0xa0>
    53f8:	0c 94 11 29 	jmp	0x5222	; 0x5222 <__fp_inf>
    53fc:	0c 94 9b 29 	jmp	0x5336	; 0x5336 <__fp_szero>
    5400:	5f 3f       	cpi	r21, 0xFF	; 255
    5402:	e4 f3       	brlt	.-8      	; 0x53fc <__mulsf3_pse+0x84>
    5404:	98 3e       	cpi	r25, 0xE8	; 232
    5406:	d4 f3       	brlt	.-12     	; 0x53fc <__mulsf3_pse+0x84>
    5408:	86 95       	lsr	r24
    540a:	77 95       	ror	r23
    540c:	67 95       	ror	r22
    540e:	b7 95       	ror	r27
    5410:	f7 95       	ror	r31
    5412:	e7 95       	ror	r30
    5414:	9f 5f       	subi	r25, 0xFF	; 255
    5416:	c1 f7       	brne	.-16     	; 0x5408 <__mulsf3_pse+0x90>
    5418:	fe 2b       	or	r31, r30
    541a:	88 0f       	add	r24, r24
    541c:	91 1d       	adc	r25, r1
    541e:	96 95       	lsr	r25
    5420:	87 95       	ror	r24
    5422:	97 f9       	bld	r25, 7
    5424:	08 95       	ret

00005426 <sin>:
    5426:	9f 93       	push	r25
    5428:	0e 94 2a 29 	call	0x5254	; 0x5254 <__fp_rempio2>
    542c:	0f 90       	pop	r0
    542e:	07 fc       	sbrc	r0, 7
    5430:	ee 5f       	subi	r30, 0xFE	; 254
    5432:	0c 94 64 29 	jmp	0x52c8	; 0x52c8 <__fp_sinus>

00005436 <__fp_mpack>:
    5436:	9f 3f       	cpi	r25, 0xFF	; 255
    5438:	31 f0       	breq	.+12     	; 0x5446 <__fp_mpack_finite+0xc>

0000543a <__fp_mpack_finite>:
    543a:	91 50       	subi	r25, 0x01	; 1
    543c:	20 f4       	brcc	.+8      	; 0x5446 <__fp_mpack_finite+0xc>
    543e:	87 95       	ror	r24
    5440:	77 95       	ror	r23
    5442:	67 95       	ror	r22
    5444:	b7 95       	ror	r27
    5446:	88 0f       	add	r24, r24
    5448:	91 1d       	adc	r25, r1
    544a:	96 95       	lsr	r25
    544c:	87 95       	ror	r24
    544e:	97 f9       	bld	r25, 7
    5450:	08 95       	ret

00005452 <__fp_powsodd>:
    5452:	9f 93       	push	r25
    5454:	8f 93       	push	r24
    5456:	7f 93       	push	r23
    5458:	6f 93       	push	r22
    545a:	ff 93       	push	r31
    545c:	ef 93       	push	r30
    545e:	9b 01       	movw	r18, r22
    5460:	ac 01       	movw	r20, r24
    5462:	0e 94 a6 29 	call	0x534c	; 0x534c <__mulsf3>
    5466:	ef 91       	pop	r30
    5468:	ff 91       	pop	r31
    546a:	0e 94 3d 2a 	call	0x547a	; 0x547a <__fp_powser>
    546e:	2f 91       	pop	r18
    5470:	3f 91       	pop	r19
    5472:	4f 91       	pop	r20
    5474:	5f 91       	pop	r21
    5476:	0c 94 a6 29 	jmp	0x534c	; 0x534c <__mulsf3>

0000547a <__fp_powser>:
    547a:	df 93       	push	r29
    547c:	cf 93       	push	r28
    547e:	1f 93       	push	r17
    5480:	0f 93       	push	r16
    5482:	ff 92       	push	r15
    5484:	ef 92       	push	r14
    5486:	df 92       	push	r13
    5488:	7b 01       	movw	r14, r22
    548a:	8c 01       	movw	r16, r24
    548c:	68 94       	set
    548e:	06 c0       	rjmp	.+12     	; 0x549c <__fp_powser+0x22>
    5490:	da 2e       	mov	r13, r26
    5492:	ef 01       	movw	r28, r30
    5494:	0e 94 b9 29 	call	0x5372	; 0x5372 <__mulsf3x>
    5498:	fe 01       	movw	r30, r28
    549a:	e8 94       	clt
    549c:	a5 91       	lpm	r26, Z+
    549e:	25 91       	lpm	r18, Z+
    54a0:	35 91       	lpm	r19, Z+
    54a2:	45 91       	lpm	r20, Z+
    54a4:	55 91       	lpm	r21, Z+
    54a6:	a6 f3       	brts	.-24     	; 0x5490 <__fp_powser+0x16>
    54a8:	ef 01       	movw	r28, r30
    54aa:	0e 94 a9 27 	call	0x4f52	; 0x4f52 <__addsf3x>
    54ae:	fe 01       	movw	r30, r28
    54b0:	97 01       	movw	r18, r14
    54b2:	a8 01       	movw	r20, r16
    54b4:	da 94       	dec	r13
    54b6:	69 f7       	brne	.-38     	; 0x5492 <__fp_powser+0x18>
    54b8:	df 90       	pop	r13
    54ba:	ef 90       	pop	r14
    54bc:	ff 90       	pop	r15
    54be:	0f 91       	pop	r16
    54c0:	1f 91       	pop	r17
    54c2:	cf 91       	pop	r28
    54c4:	df 91       	pop	r29
    54c6:	08 95       	ret

000054c8 <vfprintf>:
    54c8:	2f 92       	push	r2
    54ca:	3f 92       	push	r3
    54cc:	4f 92       	push	r4
    54ce:	5f 92       	push	r5
    54d0:	6f 92       	push	r6
    54d2:	7f 92       	push	r7
    54d4:	8f 92       	push	r8
    54d6:	9f 92       	push	r9
    54d8:	af 92       	push	r10
    54da:	bf 92       	push	r11
    54dc:	cf 92       	push	r12
    54de:	df 92       	push	r13
    54e0:	ef 92       	push	r14
    54e2:	ff 92       	push	r15
    54e4:	0f 93       	push	r16
    54e6:	1f 93       	push	r17
    54e8:	cf 93       	push	r28
    54ea:	df 93       	push	r29
    54ec:	cd b7       	in	r28, 0x3d	; 61
    54ee:	de b7       	in	r29, 0x3e	; 62
    54f0:	60 97       	sbiw	r28, 0x10	; 16
    54f2:	cd bf       	out	0x3d, r28	; 61
    54f4:	de bf       	out	0x3e, r29	; 62
    54f6:	7c 01       	movw	r14, r24
    54f8:	1b 01       	movw	r2, r22
    54fa:	6a 01       	movw	r12, r20
    54fc:	fc 01       	movw	r30, r24
    54fe:	16 82       	std	Z+6, r1	; 0x06
    5500:	17 82       	std	Z+7, r1	; 0x07
    5502:	83 81       	ldd	r24, Z+3	; 0x03
    5504:	81 ff       	sbrs	r24, 1
    5506:	44 c3       	rjmp	.+1672   	; 0x5b90 <vfprintf+0x6c8>
    5508:	9e 01       	movw	r18, r28
    550a:	2f 5f       	subi	r18, 0xFF	; 255
    550c:	3f 4f       	sbci	r19, 0xFF	; 255
    550e:	39 01       	movw	r6, r18
    5510:	f7 01       	movw	r30, r14
    5512:	93 81       	ldd	r25, Z+3	; 0x03
    5514:	f1 01       	movw	r30, r2
    5516:	93 fd       	sbrc	r25, 3
    5518:	85 91       	lpm	r24, Z+
    551a:	93 ff       	sbrs	r25, 3
    551c:	81 91       	ld	r24, Z+
    551e:	1f 01       	movw	r2, r30
    5520:	88 23       	and	r24, r24
    5522:	09 f4       	brne	.+2      	; 0x5526 <vfprintf+0x5e>
    5524:	31 c3       	rjmp	.+1634   	; 0x5b88 <vfprintf+0x6c0>
    5526:	85 32       	cpi	r24, 0x25	; 37
    5528:	39 f4       	brne	.+14     	; 0x5538 <vfprintf+0x70>
    552a:	93 fd       	sbrc	r25, 3
    552c:	85 91       	lpm	r24, Z+
    552e:	93 ff       	sbrs	r25, 3
    5530:	81 91       	ld	r24, Z+
    5532:	1f 01       	movw	r2, r30
    5534:	85 32       	cpi	r24, 0x25	; 37
    5536:	39 f4       	brne	.+14     	; 0x5546 <vfprintf+0x7e>
    5538:	b7 01       	movw	r22, r14
    553a:	90 e0       	ldi	r25, 0x00	; 0
    553c:	0e 94 5a 30 	call	0x60b4	; 0x60b4 <fputc>
    5540:	56 01       	movw	r10, r12
    5542:	65 01       	movw	r12, r10
    5544:	e5 cf       	rjmp	.-54     	; 0x5510 <vfprintf+0x48>
    5546:	10 e0       	ldi	r17, 0x00	; 0
    5548:	51 2c       	mov	r5, r1
    554a:	91 2c       	mov	r9, r1
    554c:	ff e1       	ldi	r31, 0x1F	; 31
    554e:	f9 15       	cp	r31, r9
    5550:	d8 f0       	brcs	.+54     	; 0x5588 <vfprintf+0xc0>
    5552:	8b 32       	cpi	r24, 0x2B	; 43
    5554:	79 f0       	breq	.+30     	; 0x5574 <vfprintf+0xac>
    5556:	38 f4       	brcc	.+14     	; 0x5566 <vfprintf+0x9e>
    5558:	80 32       	cpi	r24, 0x20	; 32
    555a:	79 f0       	breq	.+30     	; 0x557a <vfprintf+0xb2>
    555c:	83 32       	cpi	r24, 0x23	; 35
    555e:	a1 f4       	brne	.+40     	; 0x5588 <vfprintf+0xc0>
    5560:	f9 2d       	mov	r31, r9
    5562:	f0 61       	ori	r31, 0x10	; 16
    5564:	2e c0       	rjmp	.+92     	; 0x55c2 <vfprintf+0xfa>
    5566:	8d 32       	cpi	r24, 0x2D	; 45
    5568:	61 f0       	breq	.+24     	; 0x5582 <vfprintf+0xba>
    556a:	80 33       	cpi	r24, 0x30	; 48
    556c:	69 f4       	brne	.+26     	; 0x5588 <vfprintf+0xc0>
    556e:	29 2d       	mov	r18, r9
    5570:	21 60       	ori	r18, 0x01	; 1
    5572:	2d c0       	rjmp	.+90     	; 0x55ce <vfprintf+0x106>
    5574:	39 2d       	mov	r19, r9
    5576:	32 60       	ori	r19, 0x02	; 2
    5578:	93 2e       	mov	r9, r19
    557a:	89 2d       	mov	r24, r9
    557c:	84 60       	ori	r24, 0x04	; 4
    557e:	98 2e       	mov	r9, r24
    5580:	2a c0       	rjmp	.+84     	; 0x55d6 <vfprintf+0x10e>
    5582:	e9 2d       	mov	r30, r9
    5584:	e8 60       	ori	r30, 0x08	; 8
    5586:	15 c0       	rjmp	.+42     	; 0x55b2 <vfprintf+0xea>
    5588:	97 fc       	sbrc	r9, 7
    558a:	2d c0       	rjmp	.+90     	; 0x55e6 <vfprintf+0x11e>
    558c:	20 ed       	ldi	r18, 0xD0	; 208
    558e:	28 0f       	add	r18, r24
    5590:	2a 30       	cpi	r18, 0x0A	; 10
    5592:	88 f4       	brcc	.+34     	; 0x55b6 <vfprintf+0xee>
    5594:	96 fe       	sbrs	r9, 6
    5596:	06 c0       	rjmp	.+12     	; 0x55a4 <vfprintf+0xdc>
    5598:	3a e0       	ldi	r19, 0x0A	; 10
    559a:	13 9f       	mul	r17, r19
    559c:	20 0d       	add	r18, r0
    559e:	11 24       	eor	r1, r1
    55a0:	12 2f       	mov	r17, r18
    55a2:	19 c0       	rjmp	.+50     	; 0x55d6 <vfprintf+0x10e>
    55a4:	8a e0       	ldi	r24, 0x0A	; 10
    55a6:	58 9e       	mul	r5, r24
    55a8:	20 0d       	add	r18, r0
    55aa:	11 24       	eor	r1, r1
    55ac:	52 2e       	mov	r5, r18
    55ae:	e9 2d       	mov	r30, r9
    55b0:	e0 62       	ori	r30, 0x20	; 32
    55b2:	9e 2e       	mov	r9, r30
    55b4:	10 c0       	rjmp	.+32     	; 0x55d6 <vfprintf+0x10e>
    55b6:	8e 32       	cpi	r24, 0x2E	; 46
    55b8:	31 f4       	brne	.+12     	; 0x55c6 <vfprintf+0xfe>
    55ba:	96 fc       	sbrc	r9, 6
    55bc:	e5 c2       	rjmp	.+1482   	; 0x5b88 <vfprintf+0x6c0>
    55be:	f9 2d       	mov	r31, r9
    55c0:	f0 64       	ori	r31, 0x40	; 64
    55c2:	9f 2e       	mov	r9, r31
    55c4:	08 c0       	rjmp	.+16     	; 0x55d6 <vfprintf+0x10e>
    55c6:	8c 36       	cpi	r24, 0x6C	; 108
    55c8:	21 f4       	brne	.+8      	; 0x55d2 <vfprintf+0x10a>
    55ca:	29 2d       	mov	r18, r9
    55cc:	20 68       	ori	r18, 0x80	; 128
    55ce:	92 2e       	mov	r9, r18
    55d0:	02 c0       	rjmp	.+4      	; 0x55d6 <vfprintf+0x10e>
    55d2:	88 36       	cpi	r24, 0x68	; 104
    55d4:	41 f4       	brne	.+16     	; 0x55e6 <vfprintf+0x11e>
    55d6:	f1 01       	movw	r30, r2
    55d8:	93 fd       	sbrc	r25, 3
    55da:	85 91       	lpm	r24, Z+
    55dc:	93 ff       	sbrs	r25, 3
    55de:	81 91       	ld	r24, Z+
    55e0:	1f 01       	movw	r2, r30
    55e2:	81 11       	cpse	r24, r1
    55e4:	b3 cf       	rjmp	.-154    	; 0x554c <vfprintf+0x84>
    55e6:	9b eb       	ldi	r25, 0xBB	; 187
    55e8:	98 0f       	add	r25, r24
    55ea:	93 30       	cpi	r25, 0x03	; 3
    55ec:	20 f4       	brcc	.+8      	; 0x55f6 <vfprintf+0x12e>
    55ee:	99 2d       	mov	r25, r9
    55f0:	90 61       	ori	r25, 0x10	; 16
    55f2:	80 5e       	subi	r24, 0xE0	; 224
    55f4:	07 c0       	rjmp	.+14     	; 0x5604 <vfprintf+0x13c>
    55f6:	9b e9       	ldi	r25, 0x9B	; 155
    55f8:	98 0f       	add	r25, r24
    55fa:	93 30       	cpi	r25, 0x03	; 3
    55fc:	08 f0       	brcs	.+2      	; 0x5600 <vfprintf+0x138>
    55fe:	66 c1       	rjmp	.+716    	; 0x58cc <vfprintf+0x404>
    5600:	99 2d       	mov	r25, r9
    5602:	9f 7e       	andi	r25, 0xEF	; 239
    5604:	96 ff       	sbrs	r25, 6
    5606:	16 e0       	ldi	r17, 0x06	; 6
    5608:	9f 73       	andi	r25, 0x3F	; 63
    560a:	99 2e       	mov	r9, r25
    560c:	85 36       	cpi	r24, 0x65	; 101
    560e:	19 f4       	brne	.+6      	; 0x5616 <vfprintf+0x14e>
    5610:	90 64       	ori	r25, 0x40	; 64
    5612:	99 2e       	mov	r9, r25
    5614:	08 c0       	rjmp	.+16     	; 0x5626 <vfprintf+0x15e>
    5616:	86 36       	cpi	r24, 0x66	; 102
    5618:	21 f4       	brne	.+8      	; 0x5622 <vfprintf+0x15a>
    561a:	39 2f       	mov	r19, r25
    561c:	30 68       	ori	r19, 0x80	; 128
    561e:	93 2e       	mov	r9, r19
    5620:	02 c0       	rjmp	.+4      	; 0x5626 <vfprintf+0x15e>
    5622:	11 11       	cpse	r17, r1
    5624:	11 50       	subi	r17, 0x01	; 1
    5626:	97 fe       	sbrs	r9, 7
    5628:	07 c0       	rjmp	.+14     	; 0x5638 <vfprintf+0x170>
    562a:	1c 33       	cpi	r17, 0x3C	; 60
    562c:	50 f4       	brcc	.+20     	; 0x5642 <vfprintf+0x17a>
    562e:	44 24       	eor	r4, r4
    5630:	43 94       	inc	r4
    5632:	41 0e       	add	r4, r17
    5634:	27 e0       	ldi	r18, 0x07	; 7
    5636:	0b c0       	rjmp	.+22     	; 0x564e <vfprintf+0x186>
    5638:	18 30       	cpi	r17, 0x08	; 8
    563a:	38 f0       	brcs	.+14     	; 0x564a <vfprintf+0x182>
    563c:	27 e0       	ldi	r18, 0x07	; 7
    563e:	17 e0       	ldi	r17, 0x07	; 7
    5640:	05 c0       	rjmp	.+10     	; 0x564c <vfprintf+0x184>
    5642:	27 e0       	ldi	r18, 0x07	; 7
    5644:	9c e3       	ldi	r25, 0x3C	; 60
    5646:	49 2e       	mov	r4, r25
    5648:	02 c0       	rjmp	.+4      	; 0x564e <vfprintf+0x186>
    564a:	21 2f       	mov	r18, r17
    564c:	41 2c       	mov	r4, r1
    564e:	56 01       	movw	r10, r12
    5650:	84 e0       	ldi	r24, 0x04	; 4
    5652:	a8 0e       	add	r10, r24
    5654:	b1 1c       	adc	r11, r1
    5656:	f6 01       	movw	r30, r12
    5658:	60 81       	ld	r22, Z
    565a:	71 81       	ldd	r23, Z+1	; 0x01
    565c:	82 81       	ldd	r24, Z+2	; 0x02
    565e:	93 81       	ldd	r25, Z+3	; 0x03
    5660:	04 2d       	mov	r16, r4
    5662:	a3 01       	movw	r20, r6
    5664:	0e 94 5c 2f 	call	0x5eb8	; 0x5eb8 <__ftoa_engine>
    5668:	6c 01       	movw	r12, r24
    566a:	f9 81       	ldd	r31, Y+1	; 0x01
    566c:	fc 87       	std	Y+12, r31	; 0x0c
    566e:	f0 ff       	sbrs	r31, 0
    5670:	02 c0       	rjmp	.+4      	; 0x5676 <vfprintf+0x1ae>
    5672:	f3 ff       	sbrs	r31, 3
    5674:	06 c0       	rjmp	.+12     	; 0x5682 <vfprintf+0x1ba>
    5676:	91 fc       	sbrc	r9, 1
    5678:	06 c0       	rjmp	.+12     	; 0x5686 <vfprintf+0x1be>
    567a:	92 fe       	sbrs	r9, 2
    567c:	06 c0       	rjmp	.+12     	; 0x568a <vfprintf+0x1c2>
    567e:	00 e2       	ldi	r16, 0x20	; 32
    5680:	05 c0       	rjmp	.+10     	; 0x568c <vfprintf+0x1c4>
    5682:	0d e2       	ldi	r16, 0x2D	; 45
    5684:	03 c0       	rjmp	.+6      	; 0x568c <vfprintf+0x1c4>
    5686:	0b e2       	ldi	r16, 0x2B	; 43
    5688:	01 c0       	rjmp	.+2      	; 0x568c <vfprintf+0x1c4>
    568a:	00 e0       	ldi	r16, 0x00	; 0
    568c:	8c 85       	ldd	r24, Y+12	; 0x0c
    568e:	8c 70       	andi	r24, 0x0C	; 12
    5690:	19 f0       	breq	.+6      	; 0x5698 <vfprintf+0x1d0>
    5692:	01 11       	cpse	r16, r1
    5694:	5a c2       	rjmp	.+1204   	; 0x5b4a <vfprintf+0x682>
    5696:	9b c2       	rjmp	.+1334   	; 0x5bce <vfprintf+0x706>
    5698:	97 fe       	sbrs	r9, 7
    569a:	10 c0       	rjmp	.+32     	; 0x56bc <vfprintf+0x1f4>
    569c:	4c 0c       	add	r4, r12
    569e:	fc 85       	ldd	r31, Y+12	; 0x0c
    56a0:	f4 ff       	sbrs	r31, 4
    56a2:	04 c0       	rjmp	.+8      	; 0x56ac <vfprintf+0x1e4>
    56a4:	8a 81       	ldd	r24, Y+2	; 0x02
    56a6:	81 33       	cpi	r24, 0x31	; 49
    56a8:	09 f4       	brne	.+2      	; 0x56ac <vfprintf+0x1e4>
    56aa:	4a 94       	dec	r4
    56ac:	14 14       	cp	r1, r4
    56ae:	74 f5       	brge	.+92     	; 0x570c <vfprintf+0x244>
    56b0:	28 e0       	ldi	r18, 0x08	; 8
    56b2:	24 15       	cp	r18, r4
    56b4:	78 f5       	brcc	.+94     	; 0x5714 <vfprintf+0x24c>
    56b6:	88 e0       	ldi	r24, 0x08	; 8
    56b8:	48 2e       	mov	r4, r24
    56ba:	2c c0       	rjmp	.+88     	; 0x5714 <vfprintf+0x24c>
    56bc:	96 fc       	sbrc	r9, 6
    56be:	2a c0       	rjmp	.+84     	; 0x5714 <vfprintf+0x24c>
    56c0:	81 2f       	mov	r24, r17
    56c2:	90 e0       	ldi	r25, 0x00	; 0
    56c4:	8c 15       	cp	r24, r12
    56c6:	9d 05       	cpc	r25, r13
    56c8:	9c f0       	brlt	.+38     	; 0x56f0 <vfprintf+0x228>
    56ca:	3c ef       	ldi	r19, 0xFC	; 252
    56cc:	c3 16       	cp	r12, r19
    56ce:	3f ef       	ldi	r19, 0xFF	; 255
    56d0:	d3 06       	cpc	r13, r19
    56d2:	74 f0       	brlt	.+28     	; 0x56f0 <vfprintf+0x228>
    56d4:	89 2d       	mov	r24, r9
    56d6:	80 68       	ori	r24, 0x80	; 128
    56d8:	98 2e       	mov	r9, r24
    56da:	0a c0       	rjmp	.+20     	; 0x56f0 <vfprintf+0x228>
    56dc:	e2 e0       	ldi	r30, 0x02	; 2
    56de:	f0 e0       	ldi	r31, 0x00	; 0
    56e0:	ec 0f       	add	r30, r28
    56e2:	fd 1f       	adc	r31, r29
    56e4:	e1 0f       	add	r30, r17
    56e6:	f1 1d       	adc	r31, r1
    56e8:	80 81       	ld	r24, Z
    56ea:	80 33       	cpi	r24, 0x30	; 48
    56ec:	19 f4       	brne	.+6      	; 0x56f4 <vfprintf+0x22c>
    56ee:	11 50       	subi	r17, 0x01	; 1
    56f0:	11 11       	cpse	r17, r1
    56f2:	f4 cf       	rjmp	.-24     	; 0x56dc <vfprintf+0x214>
    56f4:	97 fe       	sbrs	r9, 7
    56f6:	0e c0       	rjmp	.+28     	; 0x5714 <vfprintf+0x24c>
    56f8:	44 24       	eor	r4, r4
    56fa:	43 94       	inc	r4
    56fc:	41 0e       	add	r4, r17
    56fe:	81 2f       	mov	r24, r17
    5700:	90 e0       	ldi	r25, 0x00	; 0
    5702:	c8 16       	cp	r12, r24
    5704:	d9 06       	cpc	r13, r25
    5706:	2c f4       	brge	.+10     	; 0x5712 <vfprintf+0x24a>
    5708:	1c 19       	sub	r17, r12
    570a:	04 c0       	rjmp	.+8      	; 0x5714 <vfprintf+0x24c>
    570c:	44 24       	eor	r4, r4
    570e:	43 94       	inc	r4
    5710:	01 c0       	rjmp	.+2      	; 0x5714 <vfprintf+0x24c>
    5712:	10 e0       	ldi	r17, 0x00	; 0
    5714:	97 fe       	sbrs	r9, 7
    5716:	06 c0       	rjmp	.+12     	; 0x5724 <vfprintf+0x25c>
    5718:	1c 14       	cp	r1, r12
    571a:	1d 04       	cpc	r1, r13
    571c:	34 f4       	brge	.+12     	; 0x572a <vfprintf+0x262>
    571e:	c6 01       	movw	r24, r12
    5720:	01 96       	adiw	r24, 0x01	; 1
    5722:	05 c0       	rjmp	.+10     	; 0x572e <vfprintf+0x266>
    5724:	85 e0       	ldi	r24, 0x05	; 5
    5726:	90 e0       	ldi	r25, 0x00	; 0
    5728:	02 c0       	rjmp	.+4      	; 0x572e <vfprintf+0x266>
    572a:	81 e0       	ldi	r24, 0x01	; 1
    572c:	90 e0       	ldi	r25, 0x00	; 0
    572e:	01 11       	cpse	r16, r1
    5730:	01 96       	adiw	r24, 0x01	; 1
    5732:	11 23       	and	r17, r17
    5734:	31 f0       	breq	.+12     	; 0x5742 <vfprintf+0x27a>
    5736:	21 2f       	mov	r18, r17
    5738:	30 e0       	ldi	r19, 0x00	; 0
    573a:	2f 5f       	subi	r18, 0xFF	; 255
    573c:	3f 4f       	sbci	r19, 0xFF	; 255
    573e:	82 0f       	add	r24, r18
    5740:	93 1f       	adc	r25, r19
    5742:	25 2d       	mov	r18, r5
    5744:	30 e0       	ldi	r19, 0x00	; 0
    5746:	82 17       	cp	r24, r18
    5748:	93 07       	cpc	r25, r19
    574a:	14 f4       	brge	.+4      	; 0x5750 <vfprintf+0x288>
    574c:	58 1a       	sub	r5, r24
    574e:	01 c0       	rjmp	.+2      	; 0x5752 <vfprintf+0x28a>
    5750:	51 2c       	mov	r5, r1
    5752:	89 2d       	mov	r24, r9
    5754:	89 70       	andi	r24, 0x09	; 9
    5756:	49 f4       	brne	.+18     	; 0x576a <vfprintf+0x2a2>
    5758:	55 20       	and	r5, r5
    575a:	39 f0       	breq	.+14     	; 0x576a <vfprintf+0x2a2>
    575c:	b7 01       	movw	r22, r14
    575e:	80 e2       	ldi	r24, 0x20	; 32
    5760:	90 e0       	ldi	r25, 0x00	; 0
    5762:	0e 94 5a 30 	call	0x60b4	; 0x60b4 <fputc>
    5766:	5a 94       	dec	r5
    5768:	f7 cf       	rjmp	.-18     	; 0x5758 <vfprintf+0x290>
    576a:	00 23       	and	r16, r16
    576c:	29 f0       	breq	.+10     	; 0x5778 <vfprintf+0x2b0>
    576e:	b7 01       	movw	r22, r14
    5770:	80 2f       	mov	r24, r16
    5772:	90 e0       	ldi	r25, 0x00	; 0
    5774:	0e 94 5a 30 	call	0x60b4	; 0x60b4 <fputc>
    5778:	93 fc       	sbrc	r9, 3
    577a:	09 c0       	rjmp	.+18     	; 0x578e <vfprintf+0x2c6>
    577c:	55 20       	and	r5, r5
    577e:	39 f0       	breq	.+14     	; 0x578e <vfprintf+0x2c6>
    5780:	b7 01       	movw	r22, r14
    5782:	80 e3       	ldi	r24, 0x30	; 48
    5784:	90 e0       	ldi	r25, 0x00	; 0
    5786:	0e 94 5a 30 	call	0x60b4	; 0x60b4 <fputc>
    578a:	5a 94       	dec	r5
    578c:	f7 cf       	rjmp	.-18     	; 0x577c <vfprintf+0x2b4>
    578e:	97 fe       	sbrs	r9, 7
    5790:	4c c0       	rjmp	.+152    	; 0x582a <vfprintf+0x362>
    5792:	46 01       	movw	r8, r12
    5794:	d7 fe       	sbrs	r13, 7
    5796:	02 c0       	rjmp	.+4      	; 0x579c <vfprintf+0x2d4>
    5798:	81 2c       	mov	r8, r1
    579a:	91 2c       	mov	r9, r1
    579c:	c6 01       	movw	r24, r12
    579e:	88 19       	sub	r24, r8
    57a0:	99 09       	sbc	r25, r9
    57a2:	f3 01       	movw	r30, r6
    57a4:	e8 0f       	add	r30, r24
    57a6:	f9 1f       	adc	r31, r25
    57a8:	ed 87       	std	Y+13, r30	; 0x0d
    57aa:	fe 87       	std	Y+14, r31	; 0x0e
    57ac:	96 01       	movw	r18, r12
    57ae:	24 19       	sub	r18, r4
    57b0:	31 09       	sbc	r19, r1
    57b2:	2f 87       	std	Y+15, r18	; 0x0f
    57b4:	38 8b       	std	Y+16, r19	; 0x10
    57b6:	01 2f       	mov	r16, r17
    57b8:	10 e0       	ldi	r17, 0x00	; 0
    57ba:	11 95       	neg	r17
    57bc:	01 95       	neg	r16
    57be:	11 09       	sbc	r17, r1
    57c0:	3f ef       	ldi	r19, 0xFF	; 255
    57c2:	83 16       	cp	r8, r19
    57c4:	93 06       	cpc	r9, r19
    57c6:	29 f4       	brne	.+10     	; 0x57d2 <vfprintf+0x30a>
    57c8:	b7 01       	movw	r22, r14
    57ca:	8e e2       	ldi	r24, 0x2E	; 46
    57cc:	90 e0       	ldi	r25, 0x00	; 0
    57ce:	0e 94 5a 30 	call	0x60b4	; 0x60b4 <fputc>
    57d2:	c8 14       	cp	r12, r8
    57d4:	d9 04       	cpc	r13, r9
    57d6:	4c f0       	brlt	.+18     	; 0x57ea <vfprintf+0x322>
    57d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    57da:	98 89       	ldd	r25, Y+16	; 0x10
    57dc:	88 15       	cp	r24, r8
    57de:	99 05       	cpc	r25, r9
    57e0:	24 f4       	brge	.+8      	; 0x57ea <vfprintf+0x322>
    57e2:	ed 85       	ldd	r30, Y+13	; 0x0d
    57e4:	fe 85       	ldd	r31, Y+14	; 0x0e
    57e6:	81 81       	ldd	r24, Z+1	; 0x01
    57e8:	01 c0       	rjmp	.+2      	; 0x57ec <vfprintf+0x324>
    57ea:	80 e3       	ldi	r24, 0x30	; 48
    57ec:	f1 e0       	ldi	r31, 0x01	; 1
    57ee:	8f 1a       	sub	r8, r31
    57f0:	91 08       	sbc	r9, r1
    57f2:	2d 85       	ldd	r18, Y+13	; 0x0d
    57f4:	3e 85       	ldd	r19, Y+14	; 0x0e
    57f6:	2f 5f       	subi	r18, 0xFF	; 255
    57f8:	3f 4f       	sbci	r19, 0xFF	; 255
    57fa:	2d 87       	std	Y+13, r18	; 0x0d
    57fc:	3e 87       	std	Y+14, r19	; 0x0e
    57fe:	80 16       	cp	r8, r16
    5800:	91 06       	cpc	r9, r17
    5802:	2c f0       	brlt	.+10     	; 0x580e <vfprintf+0x346>
    5804:	b7 01       	movw	r22, r14
    5806:	90 e0       	ldi	r25, 0x00	; 0
    5808:	0e 94 5a 30 	call	0x60b4	; 0x60b4 <fputc>
    580c:	d9 cf       	rjmp	.-78     	; 0x57c0 <vfprintf+0x2f8>
    580e:	c8 14       	cp	r12, r8
    5810:	d9 04       	cpc	r13, r9
    5812:	41 f4       	brne	.+16     	; 0x5824 <vfprintf+0x35c>
    5814:	9a 81       	ldd	r25, Y+2	; 0x02
    5816:	96 33       	cpi	r25, 0x36	; 54
    5818:	20 f4       	brcc	.+8      	; 0x5822 <vfprintf+0x35a>
    581a:	95 33       	cpi	r25, 0x35	; 53
    581c:	19 f4       	brne	.+6      	; 0x5824 <vfprintf+0x35c>
    581e:	3c 85       	ldd	r19, Y+12	; 0x0c
    5820:	34 ff       	sbrs	r19, 4
    5822:	81 e3       	ldi	r24, 0x31	; 49
    5824:	b7 01       	movw	r22, r14
    5826:	90 e0       	ldi	r25, 0x00	; 0
    5828:	4e c0       	rjmp	.+156    	; 0x58c6 <vfprintf+0x3fe>
    582a:	8a 81       	ldd	r24, Y+2	; 0x02
    582c:	81 33       	cpi	r24, 0x31	; 49
    582e:	19 f0       	breq	.+6      	; 0x5836 <vfprintf+0x36e>
    5830:	9c 85       	ldd	r25, Y+12	; 0x0c
    5832:	9f 7e       	andi	r25, 0xEF	; 239
    5834:	9c 87       	std	Y+12, r25	; 0x0c
    5836:	b7 01       	movw	r22, r14
    5838:	90 e0       	ldi	r25, 0x00	; 0
    583a:	0e 94 5a 30 	call	0x60b4	; 0x60b4 <fputc>
    583e:	11 11       	cpse	r17, r1
    5840:	05 c0       	rjmp	.+10     	; 0x584c <vfprintf+0x384>
    5842:	94 fc       	sbrc	r9, 4
    5844:	18 c0       	rjmp	.+48     	; 0x5876 <vfprintf+0x3ae>
    5846:	85 e6       	ldi	r24, 0x65	; 101
    5848:	90 e0       	ldi	r25, 0x00	; 0
    584a:	17 c0       	rjmp	.+46     	; 0x587a <vfprintf+0x3b2>
    584c:	b7 01       	movw	r22, r14
    584e:	8e e2       	ldi	r24, 0x2E	; 46
    5850:	90 e0       	ldi	r25, 0x00	; 0
    5852:	0e 94 5a 30 	call	0x60b4	; 0x60b4 <fputc>
    5856:	1e 5f       	subi	r17, 0xFE	; 254
    5858:	82 e0       	ldi	r24, 0x02	; 2
    585a:	01 e0       	ldi	r16, 0x01	; 1
    585c:	08 0f       	add	r16, r24
    585e:	f3 01       	movw	r30, r6
    5860:	e8 0f       	add	r30, r24
    5862:	f1 1d       	adc	r31, r1
    5864:	80 81       	ld	r24, Z
    5866:	b7 01       	movw	r22, r14
    5868:	90 e0       	ldi	r25, 0x00	; 0
    586a:	0e 94 5a 30 	call	0x60b4	; 0x60b4 <fputc>
    586e:	80 2f       	mov	r24, r16
    5870:	01 13       	cpse	r16, r17
    5872:	f3 cf       	rjmp	.-26     	; 0x585a <vfprintf+0x392>
    5874:	e6 cf       	rjmp	.-52     	; 0x5842 <vfprintf+0x37a>
    5876:	85 e4       	ldi	r24, 0x45	; 69
    5878:	90 e0       	ldi	r25, 0x00	; 0
    587a:	b7 01       	movw	r22, r14
    587c:	0e 94 5a 30 	call	0x60b4	; 0x60b4 <fputc>
    5880:	d7 fc       	sbrc	r13, 7
    5882:	06 c0       	rjmp	.+12     	; 0x5890 <vfprintf+0x3c8>
    5884:	c1 14       	cp	r12, r1
    5886:	d1 04       	cpc	r13, r1
    5888:	41 f4       	brne	.+16     	; 0x589a <vfprintf+0x3d2>
    588a:	ec 85       	ldd	r30, Y+12	; 0x0c
    588c:	e4 ff       	sbrs	r30, 4
    588e:	05 c0       	rjmp	.+10     	; 0x589a <vfprintf+0x3d2>
    5890:	d1 94       	neg	r13
    5892:	c1 94       	neg	r12
    5894:	d1 08       	sbc	r13, r1
    5896:	8d e2       	ldi	r24, 0x2D	; 45
    5898:	01 c0       	rjmp	.+2      	; 0x589c <vfprintf+0x3d4>
    589a:	8b e2       	ldi	r24, 0x2B	; 43
    589c:	b7 01       	movw	r22, r14
    589e:	90 e0       	ldi	r25, 0x00	; 0
    58a0:	0e 94 5a 30 	call	0x60b4	; 0x60b4 <fputc>
    58a4:	80 e3       	ldi	r24, 0x30	; 48
    58a6:	2a e0       	ldi	r18, 0x0A	; 10
    58a8:	c2 16       	cp	r12, r18
    58aa:	d1 04       	cpc	r13, r1
    58ac:	2c f0       	brlt	.+10     	; 0x58b8 <vfprintf+0x3f0>
    58ae:	8f 5f       	subi	r24, 0xFF	; 255
    58b0:	fa e0       	ldi	r31, 0x0A	; 10
    58b2:	cf 1a       	sub	r12, r31
    58b4:	d1 08       	sbc	r13, r1
    58b6:	f7 cf       	rjmp	.-18     	; 0x58a6 <vfprintf+0x3de>
    58b8:	b7 01       	movw	r22, r14
    58ba:	90 e0       	ldi	r25, 0x00	; 0
    58bc:	0e 94 5a 30 	call	0x60b4	; 0x60b4 <fputc>
    58c0:	b7 01       	movw	r22, r14
    58c2:	c6 01       	movw	r24, r12
    58c4:	c0 96       	adiw	r24, 0x30	; 48
    58c6:	0e 94 5a 30 	call	0x60b4	; 0x60b4 <fputc>
    58ca:	54 c1       	rjmp	.+680    	; 0x5b74 <vfprintf+0x6ac>
    58cc:	83 36       	cpi	r24, 0x63	; 99
    58ce:	31 f0       	breq	.+12     	; 0x58dc <vfprintf+0x414>
    58d0:	83 37       	cpi	r24, 0x73	; 115
    58d2:	79 f0       	breq	.+30     	; 0x58f2 <vfprintf+0x42a>
    58d4:	83 35       	cpi	r24, 0x53	; 83
    58d6:	09 f0       	breq	.+2      	; 0x58da <vfprintf+0x412>
    58d8:	56 c0       	rjmp	.+172    	; 0x5986 <vfprintf+0x4be>
    58da:	20 c0       	rjmp	.+64     	; 0x591c <vfprintf+0x454>
    58dc:	56 01       	movw	r10, r12
    58de:	32 e0       	ldi	r19, 0x02	; 2
    58e0:	a3 0e       	add	r10, r19
    58e2:	b1 1c       	adc	r11, r1
    58e4:	f6 01       	movw	r30, r12
    58e6:	80 81       	ld	r24, Z
    58e8:	89 83       	std	Y+1, r24	; 0x01
    58ea:	01 e0       	ldi	r16, 0x01	; 1
    58ec:	10 e0       	ldi	r17, 0x00	; 0
    58ee:	63 01       	movw	r12, r6
    58f0:	12 c0       	rjmp	.+36     	; 0x5916 <vfprintf+0x44e>
    58f2:	56 01       	movw	r10, r12
    58f4:	f2 e0       	ldi	r31, 0x02	; 2
    58f6:	af 0e       	add	r10, r31
    58f8:	b1 1c       	adc	r11, r1
    58fa:	f6 01       	movw	r30, r12
    58fc:	c0 80       	ld	r12, Z
    58fe:	d1 80       	ldd	r13, Z+1	; 0x01
    5900:	96 fe       	sbrs	r9, 6
    5902:	03 c0       	rjmp	.+6      	; 0x590a <vfprintf+0x442>
    5904:	61 2f       	mov	r22, r17
    5906:	70 e0       	ldi	r23, 0x00	; 0
    5908:	02 c0       	rjmp	.+4      	; 0x590e <vfprintf+0x446>
    590a:	6f ef       	ldi	r22, 0xFF	; 255
    590c:	7f ef       	ldi	r23, 0xFF	; 255
    590e:	c6 01       	movw	r24, r12
    5910:	0e 94 4f 30 	call	0x609e	; 0x609e <strnlen>
    5914:	8c 01       	movw	r16, r24
    5916:	f9 2d       	mov	r31, r9
    5918:	ff 77       	andi	r31, 0x7F	; 127
    591a:	14 c0       	rjmp	.+40     	; 0x5944 <vfprintf+0x47c>
    591c:	56 01       	movw	r10, r12
    591e:	22 e0       	ldi	r18, 0x02	; 2
    5920:	a2 0e       	add	r10, r18
    5922:	b1 1c       	adc	r11, r1
    5924:	f6 01       	movw	r30, r12
    5926:	c0 80       	ld	r12, Z
    5928:	d1 80       	ldd	r13, Z+1	; 0x01
    592a:	96 fe       	sbrs	r9, 6
    592c:	03 c0       	rjmp	.+6      	; 0x5934 <vfprintf+0x46c>
    592e:	61 2f       	mov	r22, r17
    5930:	70 e0       	ldi	r23, 0x00	; 0
    5932:	02 c0       	rjmp	.+4      	; 0x5938 <vfprintf+0x470>
    5934:	6f ef       	ldi	r22, 0xFF	; 255
    5936:	7f ef       	ldi	r23, 0xFF	; 255
    5938:	c6 01       	movw	r24, r12
    593a:	0e 94 34 30 	call	0x6068	; 0x6068 <strnlen_P>
    593e:	8c 01       	movw	r16, r24
    5940:	f9 2d       	mov	r31, r9
    5942:	f0 68       	ori	r31, 0x80	; 128
    5944:	9f 2e       	mov	r9, r31
    5946:	f3 fd       	sbrc	r31, 3
    5948:	1a c0       	rjmp	.+52     	; 0x597e <vfprintf+0x4b6>
    594a:	85 2d       	mov	r24, r5
    594c:	90 e0       	ldi	r25, 0x00	; 0
    594e:	08 17       	cp	r16, r24
    5950:	19 07       	cpc	r17, r25
    5952:	a8 f4       	brcc	.+42     	; 0x597e <vfprintf+0x4b6>
    5954:	b7 01       	movw	r22, r14
    5956:	80 e2       	ldi	r24, 0x20	; 32
    5958:	90 e0       	ldi	r25, 0x00	; 0
    595a:	0e 94 5a 30 	call	0x60b4	; 0x60b4 <fputc>
    595e:	5a 94       	dec	r5
    5960:	f4 cf       	rjmp	.-24     	; 0x594a <vfprintf+0x482>
    5962:	f6 01       	movw	r30, r12
    5964:	97 fc       	sbrc	r9, 7
    5966:	85 91       	lpm	r24, Z+
    5968:	97 fe       	sbrs	r9, 7
    596a:	81 91       	ld	r24, Z+
    596c:	6f 01       	movw	r12, r30
    596e:	b7 01       	movw	r22, r14
    5970:	90 e0       	ldi	r25, 0x00	; 0
    5972:	0e 94 5a 30 	call	0x60b4	; 0x60b4 <fputc>
    5976:	51 10       	cpse	r5, r1
    5978:	5a 94       	dec	r5
    597a:	01 50       	subi	r16, 0x01	; 1
    597c:	11 09       	sbc	r17, r1
    597e:	01 15       	cp	r16, r1
    5980:	11 05       	cpc	r17, r1
    5982:	79 f7       	brne	.-34     	; 0x5962 <vfprintf+0x49a>
    5984:	f7 c0       	rjmp	.+494    	; 0x5b74 <vfprintf+0x6ac>
    5986:	84 36       	cpi	r24, 0x64	; 100
    5988:	11 f0       	breq	.+4      	; 0x598e <vfprintf+0x4c6>
    598a:	89 36       	cpi	r24, 0x69	; 105
    598c:	61 f5       	brne	.+88     	; 0x59e6 <vfprintf+0x51e>
    598e:	56 01       	movw	r10, r12
    5990:	97 fe       	sbrs	r9, 7
    5992:	09 c0       	rjmp	.+18     	; 0x59a6 <vfprintf+0x4de>
    5994:	24 e0       	ldi	r18, 0x04	; 4
    5996:	a2 0e       	add	r10, r18
    5998:	b1 1c       	adc	r11, r1
    599a:	f6 01       	movw	r30, r12
    599c:	60 81       	ld	r22, Z
    599e:	71 81       	ldd	r23, Z+1	; 0x01
    59a0:	82 81       	ldd	r24, Z+2	; 0x02
    59a2:	93 81       	ldd	r25, Z+3	; 0x03
    59a4:	0a c0       	rjmp	.+20     	; 0x59ba <vfprintf+0x4f2>
    59a6:	f2 e0       	ldi	r31, 0x02	; 2
    59a8:	af 0e       	add	r10, r31
    59aa:	b1 1c       	adc	r11, r1
    59ac:	f6 01       	movw	r30, r12
    59ae:	60 81       	ld	r22, Z
    59b0:	71 81       	ldd	r23, Z+1	; 0x01
    59b2:	07 2e       	mov	r0, r23
    59b4:	00 0c       	add	r0, r0
    59b6:	88 0b       	sbc	r24, r24
    59b8:	99 0b       	sbc	r25, r25
    59ba:	f9 2d       	mov	r31, r9
    59bc:	ff 76       	andi	r31, 0x6F	; 111
    59be:	9f 2e       	mov	r9, r31
    59c0:	97 ff       	sbrs	r25, 7
    59c2:	09 c0       	rjmp	.+18     	; 0x59d6 <vfprintf+0x50e>
    59c4:	90 95       	com	r25
    59c6:	80 95       	com	r24
    59c8:	70 95       	com	r23
    59ca:	61 95       	neg	r22
    59cc:	7f 4f       	sbci	r23, 0xFF	; 255
    59ce:	8f 4f       	sbci	r24, 0xFF	; 255
    59d0:	9f 4f       	sbci	r25, 0xFF	; 255
    59d2:	f0 68       	ori	r31, 0x80	; 128
    59d4:	9f 2e       	mov	r9, r31
    59d6:	2a e0       	ldi	r18, 0x0A	; 10
    59d8:	30 e0       	ldi	r19, 0x00	; 0
    59da:	a3 01       	movw	r20, r6
    59dc:	0e 94 da 30 	call	0x61b4	; 0x61b4 <__ultoa_invert>
    59e0:	c8 2e       	mov	r12, r24
    59e2:	c6 18       	sub	r12, r6
    59e4:	3f c0       	rjmp	.+126    	; 0x5a64 <vfprintf+0x59c>
    59e6:	09 2d       	mov	r16, r9
    59e8:	85 37       	cpi	r24, 0x75	; 117
    59ea:	21 f4       	brne	.+8      	; 0x59f4 <vfprintf+0x52c>
    59ec:	0f 7e       	andi	r16, 0xEF	; 239
    59ee:	2a e0       	ldi	r18, 0x0A	; 10
    59f0:	30 e0       	ldi	r19, 0x00	; 0
    59f2:	1d c0       	rjmp	.+58     	; 0x5a2e <vfprintf+0x566>
    59f4:	09 7f       	andi	r16, 0xF9	; 249
    59f6:	8f 36       	cpi	r24, 0x6F	; 111
    59f8:	91 f0       	breq	.+36     	; 0x5a1e <vfprintf+0x556>
    59fa:	18 f4       	brcc	.+6      	; 0x5a02 <vfprintf+0x53a>
    59fc:	88 35       	cpi	r24, 0x58	; 88
    59fe:	59 f0       	breq	.+22     	; 0x5a16 <vfprintf+0x54e>
    5a00:	c3 c0       	rjmp	.+390    	; 0x5b88 <vfprintf+0x6c0>
    5a02:	80 37       	cpi	r24, 0x70	; 112
    5a04:	19 f0       	breq	.+6      	; 0x5a0c <vfprintf+0x544>
    5a06:	88 37       	cpi	r24, 0x78	; 120
    5a08:	11 f0       	breq	.+4      	; 0x5a0e <vfprintf+0x546>
    5a0a:	be c0       	rjmp	.+380    	; 0x5b88 <vfprintf+0x6c0>
    5a0c:	00 61       	ori	r16, 0x10	; 16
    5a0e:	04 ff       	sbrs	r16, 4
    5a10:	09 c0       	rjmp	.+18     	; 0x5a24 <vfprintf+0x55c>
    5a12:	04 60       	ori	r16, 0x04	; 4
    5a14:	07 c0       	rjmp	.+14     	; 0x5a24 <vfprintf+0x55c>
    5a16:	94 fe       	sbrs	r9, 4
    5a18:	08 c0       	rjmp	.+16     	; 0x5a2a <vfprintf+0x562>
    5a1a:	06 60       	ori	r16, 0x06	; 6
    5a1c:	06 c0       	rjmp	.+12     	; 0x5a2a <vfprintf+0x562>
    5a1e:	28 e0       	ldi	r18, 0x08	; 8
    5a20:	30 e0       	ldi	r19, 0x00	; 0
    5a22:	05 c0       	rjmp	.+10     	; 0x5a2e <vfprintf+0x566>
    5a24:	20 e1       	ldi	r18, 0x10	; 16
    5a26:	30 e0       	ldi	r19, 0x00	; 0
    5a28:	02 c0       	rjmp	.+4      	; 0x5a2e <vfprintf+0x566>
    5a2a:	20 e1       	ldi	r18, 0x10	; 16
    5a2c:	32 e0       	ldi	r19, 0x02	; 2
    5a2e:	56 01       	movw	r10, r12
    5a30:	07 ff       	sbrs	r16, 7
    5a32:	09 c0       	rjmp	.+18     	; 0x5a46 <vfprintf+0x57e>
    5a34:	84 e0       	ldi	r24, 0x04	; 4
    5a36:	a8 0e       	add	r10, r24
    5a38:	b1 1c       	adc	r11, r1
    5a3a:	f6 01       	movw	r30, r12
    5a3c:	60 81       	ld	r22, Z
    5a3e:	71 81       	ldd	r23, Z+1	; 0x01
    5a40:	82 81       	ldd	r24, Z+2	; 0x02
    5a42:	93 81       	ldd	r25, Z+3	; 0x03
    5a44:	08 c0       	rjmp	.+16     	; 0x5a56 <vfprintf+0x58e>
    5a46:	f2 e0       	ldi	r31, 0x02	; 2
    5a48:	af 0e       	add	r10, r31
    5a4a:	b1 1c       	adc	r11, r1
    5a4c:	f6 01       	movw	r30, r12
    5a4e:	60 81       	ld	r22, Z
    5a50:	71 81       	ldd	r23, Z+1	; 0x01
    5a52:	80 e0       	ldi	r24, 0x00	; 0
    5a54:	90 e0       	ldi	r25, 0x00	; 0
    5a56:	a3 01       	movw	r20, r6
    5a58:	0e 94 da 30 	call	0x61b4	; 0x61b4 <__ultoa_invert>
    5a5c:	c8 2e       	mov	r12, r24
    5a5e:	c6 18       	sub	r12, r6
    5a60:	0f 77       	andi	r16, 0x7F	; 127
    5a62:	90 2e       	mov	r9, r16
    5a64:	96 fe       	sbrs	r9, 6
    5a66:	0b c0       	rjmp	.+22     	; 0x5a7e <vfprintf+0x5b6>
    5a68:	09 2d       	mov	r16, r9
    5a6a:	0e 7f       	andi	r16, 0xFE	; 254
    5a6c:	c1 16       	cp	r12, r17
    5a6e:	50 f4       	brcc	.+20     	; 0x5a84 <vfprintf+0x5bc>
    5a70:	94 fe       	sbrs	r9, 4
    5a72:	0a c0       	rjmp	.+20     	; 0x5a88 <vfprintf+0x5c0>
    5a74:	92 fc       	sbrc	r9, 2
    5a76:	08 c0       	rjmp	.+16     	; 0x5a88 <vfprintf+0x5c0>
    5a78:	09 2d       	mov	r16, r9
    5a7a:	0e 7e       	andi	r16, 0xEE	; 238
    5a7c:	05 c0       	rjmp	.+10     	; 0x5a88 <vfprintf+0x5c0>
    5a7e:	dc 2c       	mov	r13, r12
    5a80:	09 2d       	mov	r16, r9
    5a82:	03 c0       	rjmp	.+6      	; 0x5a8a <vfprintf+0x5c2>
    5a84:	dc 2c       	mov	r13, r12
    5a86:	01 c0       	rjmp	.+2      	; 0x5a8a <vfprintf+0x5c2>
    5a88:	d1 2e       	mov	r13, r17
    5a8a:	04 ff       	sbrs	r16, 4
    5a8c:	0d c0       	rjmp	.+26     	; 0x5aa8 <vfprintf+0x5e0>
    5a8e:	fe 01       	movw	r30, r28
    5a90:	ec 0d       	add	r30, r12
    5a92:	f1 1d       	adc	r31, r1
    5a94:	80 81       	ld	r24, Z
    5a96:	80 33       	cpi	r24, 0x30	; 48
    5a98:	11 f4       	brne	.+4      	; 0x5a9e <vfprintf+0x5d6>
    5a9a:	09 7e       	andi	r16, 0xE9	; 233
    5a9c:	09 c0       	rjmp	.+18     	; 0x5ab0 <vfprintf+0x5e8>
    5a9e:	02 ff       	sbrs	r16, 2
    5aa0:	06 c0       	rjmp	.+12     	; 0x5aae <vfprintf+0x5e6>
    5aa2:	d3 94       	inc	r13
    5aa4:	d3 94       	inc	r13
    5aa6:	04 c0       	rjmp	.+8      	; 0x5ab0 <vfprintf+0x5e8>
    5aa8:	80 2f       	mov	r24, r16
    5aaa:	86 78       	andi	r24, 0x86	; 134
    5aac:	09 f0       	breq	.+2      	; 0x5ab0 <vfprintf+0x5e8>
    5aae:	d3 94       	inc	r13
    5ab0:	03 fd       	sbrc	r16, 3
    5ab2:	11 c0       	rjmp	.+34     	; 0x5ad6 <vfprintf+0x60e>
    5ab4:	00 ff       	sbrs	r16, 0
    5ab6:	06 c0       	rjmp	.+12     	; 0x5ac4 <vfprintf+0x5fc>
    5ab8:	1c 2d       	mov	r17, r12
    5aba:	d5 14       	cp	r13, r5
    5abc:	80 f4       	brcc	.+32     	; 0x5ade <vfprintf+0x616>
    5abe:	15 0d       	add	r17, r5
    5ac0:	1d 19       	sub	r17, r13
    5ac2:	0d c0       	rjmp	.+26     	; 0x5ade <vfprintf+0x616>
    5ac4:	d5 14       	cp	r13, r5
    5ac6:	58 f4       	brcc	.+22     	; 0x5ade <vfprintf+0x616>
    5ac8:	b7 01       	movw	r22, r14
    5aca:	80 e2       	ldi	r24, 0x20	; 32
    5acc:	90 e0       	ldi	r25, 0x00	; 0
    5ace:	0e 94 5a 30 	call	0x60b4	; 0x60b4 <fputc>
    5ad2:	d3 94       	inc	r13
    5ad4:	f7 cf       	rjmp	.-18     	; 0x5ac4 <vfprintf+0x5fc>
    5ad6:	d5 14       	cp	r13, r5
    5ad8:	10 f4       	brcc	.+4      	; 0x5ade <vfprintf+0x616>
    5ada:	5d 18       	sub	r5, r13
    5adc:	01 c0       	rjmp	.+2      	; 0x5ae0 <vfprintf+0x618>
    5ade:	51 2c       	mov	r5, r1
    5ae0:	04 ff       	sbrs	r16, 4
    5ae2:	10 c0       	rjmp	.+32     	; 0x5b04 <vfprintf+0x63c>
    5ae4:	b7 01       	movw	r22, r14
    5ae6:	80 e3       	ldi	r24, 0x30	; 48
    5ae8:	90 e0       	ldi	r25, 0x00	; 0
    5aea:	0e 94 5a 30 	call	0x60b4	; 0x60b4 <fputc>
    5aee:	02 ff       	sbrs	r16, 2
    5af0:	17 c0       	rjmp	.+46     	; 0x5b20 <vfprintf+0x658>
    5af2:	01 fd       	sbrc	r16, 1
    5af4:	03 c0       	rjmp	.+6      	; 0x5afc <vfprintf+0x634>
    5af6:	88 e7       	ldi	r24, 0x78	; 120
    5af8:	90 e0       	ldi	r25, 0x00	; 0
    5afa:	02 c0       	rjmp	.+4      	; 0x5b00 <vfprintf+0x638>
    5afc:	88 e5       	ldi	r24, 0x58	; 88
    5afe:	90 e0       	ldi	r25, 0x00	; 0
    5b00:	b7 01       	movw	r22, r14
    5b02:	0c c0       	rjmp	.+24     	; 0x5b1c <vfprintf+0x654>
    5b04:	80 2f       	mov	r24, r16
    5b06:	86 78       	andi	r24, 0x86	; 134
    5b08:	59 f0       	breq	.+22     	; 0x5b20 <vfprintf+0x658>
    5b0a:	01 ff       	sbrs	r16, 1
    5b0c:	02 c0       	rjmp	.+4      	; 0x5b12 <vfprintf+0x64a>
    5b0e:	8b e2       	ldi	r24, 0x2B	; 43
    5b10:	01 c0       	rjmp	.+2      	; 0x5b14 <vfprintf+0x64c>
    5b12:	80 e2       	ldi	r24, 0x20	; 32
    5b14:	07 fd       	sbrc	r16, 7
    5b16:	8d e2       	ldi	r24, 0x2D	; 45
    5b18:	b7 01       	movw	r22, r14
    5b1a:	90 e0       	ldi	r25, 0x00	; 0
    5b1c:	0e 94 5a 30 	call	0x60b4	; 0x60b4 <fputc>
    5b20:	c1 16       	cp	r12, r17
    5b22:	38 f4       	brcc	.+14     	; 0x5b32 <vfprintf+0x66a>
    5b24:	b7 01       	movw	r22, r14
    5b26:	80 e3       	ldi	r24, 0x30	; 48
    5b28:	90 e0       	ldi	r25, 0x00	; 0
    5b2a:	0e 94 5a 30 	call	0x60b4	; 0x60b4 <fputc>
    5b2e:	11 50       	subi	r17, 0x01	; 1
    5b30:	f7 cf       	rjmp	.-18     	; 0x5b20 <vfprintf+0x658>
    5b32:	ca 94       	dec	r12
    5b34:	f3 01       	movw	r30, r6
    5b36:	ec 0d       	add	r30, r12
    5b38:	f1 1d       	adc	r31, r1
    5b3a:	80 81       	ld	r24, Z
    5b3c:	b7 01       	movw	r22, r14
    5b3e:	90 e0       	ldi	r25, 0x00	; 0
    5b40:	0e 94 5a 30 	call	0x60b4	; 0x60b4 <fputc>
    5b44:	c1 10       	cpse	r12, r1
    5b46:	f5 cf       	rjmp	.-22     	; 0x5b32 <vfprintf+0x66a>
    5b48:	15 c0       	rjmp	.+42     	; 0x5b74 <vfprintf+0x6ac>
    5b4a:	f4 e0       	ldi	r31, 0x04	; 4
    5b4c:	f5 15       	cp	r31, r5
    5b4e:	60 f5       	brcc	.+88     	; 0x5ba8 <vfprintf+0x6e0>
    5b50:	84 e0       	ldi	r24, 0x04	; 4
    5b52:	58 1a       	sub	r5, r24
    5b54:	93 fe       	sbrs	r9, 3
    5b56:	1f c0       	rjmp	.+62     	; 0x5b96 <vfprintf+0x6ce>
    5b58:	01 11       	cpse	r16, r1
    5b5a:	27 c0       	rjmp	.+78     	; 0x5baa <vfprintf+0x6e2>
    5b5c:	2c 85       	ldd	r18, Y+12	; 0x0c
    5b5e:	23 ff       	sbrs	r18, 3
    5b60:	2a c0       	rjmp	.+84     	; 0x5bb6 <vfprintf+0x6ee>
    5b62:	02 e4       	ldi	r16, 0x42	; 66
    5b64:	12 e0       	ldi	r17, 0x02	; 2
    5b66:	39 2d       	mov	r19, r9
    5b68:	30 71       	andi	r19, 0x10	; 16
    5b6a:	93 2e       	mov	r9, r19
    5b6c:	f8 01       	movw	r30, r16
    5b6e:	84 91       	lpm	r24, Z
    5b70:	81 11       	cpse	r24, r1
    5b72:	24 c0       	rjmp	.+72     	; 0x5bbc <vfprintf+0x6f4>
    5b74:	55 20       	and	r5, r5
    5b76:	09 f4       	brne	.+2      	; 0x5b7a <vfprintf+0x6b2>
    5b78:	e4 cc       	rjmp	.-1592   	; 0x5542 <vfprintf+0x7a>
    5b7a:	b7 01       	movw	r22, r14
    5b7c:	80 e2       	ldi	r24, 0x20	; 32
    5b7e:	90 e0       	ldi	r25, 0x00	; 0
    5b80:	0e 94 5a 30 	call	0x60b4	; 0x60b4 <fputc>
    5b84:	5a 94       	dec	r5
    5b86:	f6 cf       	rjmp	.-20     	; 0x5b74 <vfprintf+0x6ac>
    5b88:	f7 01       	movw	r30, r14
    5b8a:	86 81       	ldd	r24, Z+6	; 0x06
    5b8c:	97 81       	ldd	r25, Z+7	; 0x07
    5b8e:	26 c0       	rjmp	.+76     	; 0x5bdc <vfprintf+0x714>
    5b90:	8f ef       	ldi	r24, 0xFF	; 255
    5b92:	9f ef       	ldi	r25, 0xFF	; 255
    5b94:	23 c0       	rjmp	.+70     	; 0x5bdc <vfprintf+0x714>
    5b96:	b7 01       	movw	r22, r14
    5b98:	80 e2       	ldi	r24, 0x20	; 32
    5b9a:	90 e0       	ldi	r25, 0x00	; 0
    5b9c:	0e 94 5a 30 	call	0x60b4	; 0x60b4 <fputc>
    5ba0:	5a 94       	dec	r5
    5ba2:	51 10       	cpse	r5, r1
    5ba4:	f8 cf       	rjmp	.-16     	; 0x5b96 <vfprintf+0x6ce>
    5ba6:	d8 cf       	rjmp	.-80     	; 0x5b58 <vfprintf+0x690>
    5ba8:	51 2c       	mov	r5, r1
    5baa:	b7 01       	movw	r22, r14
    5bac:	80 2f       	mov	r24, r16
    5bae:	90 e0       	ldi	r25, 0x00	; 0
    5bb0:	0e 94 5a 30 	call	0x60b4	; 0x60b4 <fputc>
    5bb4:	d3 cf       	rjmp	.-90     	; 0x5b5c <vfprintf+0x694>
    5bb6:	06 e4       	ldi	r16, 0x46	; 70
    5bb8:	12 e0       	ldi	r17, 0x02	; 2
    5bba:	d5 cf       	rjmp	.-86     	; 0x5b66 <vfprintf+0x69e>
    5bbc:	91 10       	cpse	r9, r1
    5bbe:	80 52       	subi	r24, 0x20	; 32
    5bc0:	b7 01       	movw	r22, r14
    5bc2:	90 e0       	ldi	r25, 0x00	; 0
    5bc4:	0e 94 5a 30 	call	0x60b4	; 0x60b4 <fputc>
    5bc8:	0f 5f       	subi	r16, 0xFF	; 255
    5bca:	1f 4f       	sbci	r17, 0xFF	; 255
    5bcc:	cf cf       	rjmp	.-98     	; 0x5b6c <vfprintf+0x6a4>
    5bce:	23 e0       	ldi	r18, 0x03	; 3
    5bd0:	25 15       	cp	r18, r5
    5bd2:	10 f4       	brcc	.+4      	; 0x5bd8 <vfprintf+0x710>
    5bd4:	83 e0       	ldi	r24, 0x03	; 3
    5bd6:	bd cf       	rjmp	.-134    	; 0x5b52 <vfprintf+0x68a>
    5bd8:	51 2c       	mov	r5, r1
    5bda:	c0 cf       	rjmp	.-128    	; 0x5b5c <vfprintf+0x694>
    5bdc:	60 96       	adiw	r28, 0x10	; 16
    5bde:	cd bf       	out	0x3d, r28	; 61
    5be0:	de bf       	out	0x3e, r29	; 62
    5be2:	df 91       	pop	r29
    5be4:	cf 91       	pop	r28
    5be6:	1f 91       	pop	r17
    5be8:	0f 91       	pop	r16
    5bea:	ff 90       	pop	r15
    5bec:	ef 90       	pop	r14
    5bee:	df 90       	pop	r13
    5bf0:	cf 90       	pop	r12
    5bf2:	bf 90       	pop	r11
    5bf4:	af 90       	pop	r10
    5bf6:	9f 90       	pop	r9
    5bf8:	8f 90       	pop	r8
    5bfa:	7f 90       	pop	r7
    5bfc:	6f 90       	pop	r6
    5bfe:	5f 90       	pop	r5
    5c00:	4f 90       	pop	r4
    5c02:	3f 90       	pop	r3
    5c04:	2f 90       	pop	r2
    5c06:	08 95       	ret

00005c08 <__udivmodhi4>:
    5c08:	aa 1b       	sub	r26, r26
    5c0a:	bb 1b       	sub	r27, r27
    5c0c:	51 e1       	ldi	r21, 0x11	; 17
    5c0e:	07 c0       	rjmp	.+14     	; 0x5c1e <__udivmodhi4_ep>

00005c10 <__udivmodhi4_loop>:
    5c10:	aa 1f       	adc	r26, r26
    5c12:	bb 1f       	adc	r27, r27
    5c14:	a6 17       	cp	r26, r22
    5c16:	b7 07       	cpc	r27, r23
    5c18:	10 f0       	brcs	.+4      	; 0x5c1e <__udivmodhi4_ep>
    5c1a:	a6 1b       	sub	r26, r22
    5c1c:	b7 0b       	sbc	r27, r23

00005c1e <__udivmodhi4_ep>:
    5c1e:	88 1f       	adc	r24, r24
    5c20:	99 1f       	adc	r25, r25
    5c22:	5a 95       	dec	r21
    5c24:	a9 f7       	brne	.-22     	; 0x5c10 <__udivmodhi4_loop>
    5c26:	80 95       	com	r24
    5c28:	90 95       	com	r25
    5c2a:	bc 01       	movw	r22, r24
    5c2c:	cd 01       	movw	r24, r26
    5c2e:	08 95       	ret

00005c30 <__divmodhi4>:
    5c30:	97 fb       	bst	r25, 7
    5c32:	07 2e       	mov	r0, r23
    5c34:	16 f4       	brtc	.+4      	; 0x5c3a <__divmodhi4+0xa>
    5c36:	00 94       	com	r0
    5c38:	07 d0       	rcall	.+14     	; 0x5c48 <__divmodhi4_neg1>
    5c3a:	77 fd       	sbrc	r23, 7
    5c3c:	09 d0       	rcall	.+18     	; 0x5c50 <__divmodhi4_neg2>
    5c3e:	0e 94 04 2e 	call	0x5c08	; 0x5c08 <__udivmodhi4>
    5c42:	07 fc       	sbrc	r0, 7
    5c44:	05 d0       	rcall	.+10     	; 0x5c50 <__divmodhi4_neg2>
    5c46:	3e f4       	brtc	.+14     	; 0x5c56 <__divmodhi4_exit>

00005c48 <__divmodhi4_neg1>:
    5c48:	90 95       	com	r25
    5c4a:	81 95       	neg	r24
    5c4c:	9f 4f       	sbci	r25, 0xFF	; 255
    5c4e:	08 95       	ret

00005c50 <__divmodhi4_neg2>:
    5c50:	70 95       	com	r23
    5c52:	61 95       	neg	r22
    5c54:	7f 4f       	sbci	r23, 0xFF	; 255

00005c56 <__divmodhi4_exit>:
    5c56:	08 95       	ret

00005c58 <__umulhisi3>:
    5c58:	a2 9f       	mul	r26, r18
    5c5a:	b0 01       	movw	r22, r0
    5c5c:	b3 9f       	mul	r27, r19
    5c5e:	c0 01       	movw	r24, r0
    5c60:	a3 9f       	mul	r26, r19
    5c62:	70 0d       	add	r23, r0
    5c64:	81 1d       	adc	r24, r1
    5c66:	11 24       	eor	r1, r1
    5c68:	91 1d       	adc	r25, r1
    5c6a:	b2 9f       	mul	r27, r18
    5c6c:	70 0d       	add	r23, r0
    5c6e:	81 1d       	adc	r24, r1
    5c70:	11 24       	eor	r1, r1
    5c72:	91 1d       	adc	r25, r1
    5c74:	08 95       	ret

00005c76 <malloc>:
    5c76:	0f 93       	push	r16
    5c78:	1f 93       	push	r17
    5c7a:	cf 93       	push	r28
    5c7c:	df 93       	push	r29
    5c7e:	82 30       	cpi	r24, 0x02	; 2
    5c80:	91 05       	cpc	r25, r1
    5c82:	10 f4       	brcc	.+4      	; 0x5c88 <malloc+0x12>
    5c84:	82 e0       	ldi	r24, 0x02	; 2
    5c86:	90 e0       	ldi	r25, 0x00	; 0
    5c88:	e0 91 ca 26 	lds	r30, 0x26CA	; 0x8026ca <__flp>
    5c8c:	f0 91 cb 26 	lds	r31, 0x26CB	; 0x8026cb <__flp+0x1>
    5c90:	20 e0       	ldi	r18, 0x00	; 0
    5c92:	30 e0       	ldi	r19, 0x00	; 0
    5c94:	a0 e0       	ldi	r26, 0x00	; 0
    5c96:	b0 e0       	ldi	r27, 0x00	; 0
    5c98:	30 97       	sbiw	r30, 0x00	; 0
    5c9a:	19 f1       	breq	.+70     	; 0x5ce2 <malloc+0x6c>
    5c9c:	40 81       	ld	r20, Z
    5c9e:	51 81       	ldd	r21, Z+1	; 0x01
    5ca0:	02 81       	ldd	r16, Z+2	; 0x02
    5ca2:	13 81       	ldd	r17, Z+3	; 0x03
    5ca4:	48 17       	cp	r20, r24
    5ca6:	59 07       	cpc	r21, r25
    5ca8:	c8 f0       	brcs	.+50     	; 0x5cdc <malloc+0x66>
    5caa:	84 17       	cp	r24, r20
    5cac:	95 07       	cpc	r25, r21
    5cae:	69 f4       	brne	.+26     	; 0x5cca <malloc+0x54>
    5cb0:	10 97       	sbiw	r26, 0x00	; 0
    5cb2:	31 f0       	breq	.+12     	; 0x5cc0 <malloc+0x4a>
    5cb4:	12 96       	adiw	r26, 0x02	; 2
    5cb6:	0c 93       	st	X, r16
    5cb8:	12 97       	sbiw	r26, 0x02	; 2
    5cba:	13 96       	adiw	r26, 0x03	; 3
    5cbc:	1c 93       	st	X, r17
    5cbe:	27 c0       	rjmp	.+78     	; 0x5d0e <malloc+0x98>
    5cc0:	00 93 ca 26 	sts	0x26CA, r16	; 0x8026ca <__flp>
    5cc4:	10 93 cb 26 	sts	0x26CB, r17	; 0x8026cb <__flp+0x1>
    5cc8:	22 c0       	rjmp	.+68     	; 0x5d0e <malloc+0x98>
    5cca:	21 15       	cp	r18, r1
    5ccc:	31 05       	cpc	r19, r1
    5cce:	19 f0       	breq	.+6      	; 0x5cd6 <malloc+0x60>
    5cd0:	42 17       	cp	r20, r18
    5cd2:	53 07       	cpc	r21, r19
    5cd4:	18 f4       	brcc	.+6      	; 0x5cdc <malloc+0x66>
    5cd6:	9a 01       	movw	r18, r20
    5cd8:	bd 01       	movw	r22, r26
    5cda:	ef 01       	movw	r28, r30
    5cdc:	df 01       	movw	r26, r30
    5cde:	f8 01       	movw	r30, r16
    5ce0:	db cf       	rjmp	.-74     	; 0x5c98 <malloc+0x22>
    5ce2:	21 15       	cp	r18, r1
    5ce4:	31 05       	cpc	r19, r1
    5ce6:	f9 f0       	breq	.+62     	; 0x5d26 <malloc+0xb0>
    5ce8:	28 1b       	sub	r18, r24
    5cea:	39 0b       	sbc	r19, r25
    5cec:	24 30       	cpi	r18, 0x04	; 4
    5cee:	31 05       	cpc	r19, r1
    5cf0:	80 f4       	brcc	.+32     	; 0x5d12 <malloc+0x9c>
    5cf2:	8a 81       	ldd	r24, Y+2	; 0x02
    5cf4:	9b 81       	ldd	r25, Y+3	; 0x03
    5cf6:	61 15       	cp	r22, r1
    5cf8:	71 05       	cpc	r23, r1
    5cfa:	21 f0       	breq	.+8      	; 0x5d04 <malloc+0x8e>
    5cfc:	fb 01       	movw	r30, r22
    5cfe:	82 83       	std	Z+2, r24	; 0x02
    5d00:	93 83       	std	Z+3, r25	; 0x03
    5d02:	04 c0       	rjmp	.+8      	; 0x5d0c <malloc+0x96>
    5d04:	80 93 ca 26 	sts	0x26CA, r24	; 0x8026ca <__flp>
    5d08:	90 93 cb 26 	sts	0x26CB, r25	; 0x8026cb <__flp+0x1>
    5d0c:	fe 01       	movw	r30, r28
    5d0e:	32 96       	adiw	r30, 0x02	; 2
    5d10:	44 c0       	rjmp	.+136    	; 0x5d9a <malloc+0x124>
    5d12:	fe 01       	movw	r30, r28
    5d14:	e2 0f       	add	r30, r18
    5d16:	f3 1f       	adc	r31, r19
    5d18:	81 93       	st	Z+, r24
    5d1a:	91 93       	st	Z+, r25
    5d1c:	22 50       	subi	r18, 0x02	; 2
    5d1e:	31 09       	sbc	r19, r1
    5d20:	28 83       	st	Y, r18
    5d22:	39 83       	std	Y+1, r19	; 0x01
    5d24:	3a c0       	rjmp	.+116    	; 0x5d9a <malloc+0x124>
    5d26:	20 91 c8 26 	lds	r18, 0x26C8	; 0x8026c8 <__brkval>
    5d2a:	30 91 c9 26 	lds	r19, 0x26C9	; 0x8026c9 <__brkval+0x1>
    5d2e:	23 2b       	or	r18, r19
    5d30:	41 f4       	brne	.+16     	; 0x5d42 <malloc+0xcc>
    5d32:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    5d36:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    5d3a:	20 93 c8 26 	sts	0x26C8, r18	; 0x8026c8 <__brkval>
    5d3e:	30 93 c9 26 	sts	0x26C9, r19	; 0x8026c9 <__brkval+0x1>
    5d42:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
    5d46:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
    5d4a:	21 15       	cp	r18, r1
    5d4c:	31 05       	cpc	r19, r1
    5d4e:	41 f4       	brne	.+16     	; 0x5d60 <malloc+0xea>
    5d50:	2d b7       	in	r18, 0x3d	; 61
    5d52:	3e b7       	in	r19, 0x3e	; 62
    5d54:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    5d58:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    5d5c:	24 1b       	sub	r18, r20
    5d5e:	35 0b       	sbc	r19, r21
    5d60:	e0 91 c8 26 	lds	r30, 0x26C8	; 0x8026c8 <__brkval>
    5d64:	f0 91 c9 26 	lds	r31, 0x26C9	; 0x8026c9 <__brkval+0x1>
    5d68:	e2 17       	cp	r30, r18
    5d6a:	f3 07       	cpc	r31, r19
    5d6c:	a0 f4       	brcc	.+40     	; 0x5d96 <malloc+0x120>
    5d6e:	2e 1b       	sub	r18, r30
    5d70:	3f 0b       	sbc	r19, r31
    5d72:	28 17       	cp	r18, r24
    5d74:	39 07       	cpc	r19, r25
    5d76:	78 f0       	brcs	.+30     	; 0x5d96 <malloc+0x120>
    5d78:	ac 01       	movw	r20, r24
    5d7a:	4e 5f       	subi	r20, 0xFE	; 254
    5d7c:	5f 4f       	sbci	r21, 0xFF	; 255
    5d7e:	24 17       	cp	r18, r20
    5d80:	35 07       	cpc	r19, r21
    5d82:	48 f0       	brcs	.+18     	; 0x5d96 <malloc+0x120>
    5d84:	4e 0f       	add	r20, r30
    5d86:	5f 1f       	adc	r21, r31
    5d88:	40 93 c8 26 	sts	0x26C8, r20	; 0x8026c8 <__brkval>
    5d8c:	50 93 c9 26 	sts	0x26C9, r21	; 0x8026c9 <__brkval+0x1>
    5d90:	81 93       	st	Z+, r24
    5d92:	91 93       	st	Z+, r25
    5d94:	02 c0       	rjmp	.+4      	; 0x5d9a <malloc+0x124>
    5d96:	e0 e0       	ldi	r30, 0x00	; 0
    5d98:	f0 e0       	ldi	r31, 0x00	; 0
    5d9a:	cf 01       	movw	r24, r30
    5d9c:	df 91       	pop	r29
    5d9e:	cf 91       	pop	r28
    5da0:	1f 91       	pop	r17
    5da2:	0f 91       	pop	r16
    5da4:	08 95       	ret

00005da6 <free>:
    5da6:	cf 93       	push	r28
    5da8:	df 93       	push	r29
    5daa:	00 97       	sbiw	r24, 0x00	; 0
    5dac:	09 f4       	brne	.+2      	; 0x5db0 <free+0xa>
    5dae:	81 c0       	rjmp	.+258    	; 0x5eb2 <free+0x10c>
    5db0:	fc 01       	movw	r30, r24
    5db2:	32 97       	sbiw	r30, 0x02	; 2
    5db4:	12 82       	std	Z+2, r1	; 0x02
    5db6:	13 82       	std	Z+3, r1	; 0x03
    5db8:	a0 91 ca 26 	lds	r26, 0x26CA	; 0x8026ca <__flp>
    5dbc:	b0 91 cb 26 	lds	r27, 0x26CB	; 0x8026cb <__flp+0x1>
    5dc0:	10 97       	sbiw	r26, 0x00	; 0
    5dc2:	81 f4       	brne	.+32     	; 0x5de4 <free+0x3e>
    5dc4:	20 81       	ld	r18, Z
    5dc6:	31 81       	ldd	r19, Z+1	; 0x01
    5dc8:	82 0f       	add	r24, r18
    5dca:	93 1f       	adc	r25, r19
    5dcc:	20 91 c8 26 	lds	r18, 0x26C8	; 0x8026c8 <__brkval>
    5dd0:	30 91 c9 26 	lds	r19, 0x26C9	; 0x8026c9 <__brkval+0x1>
    5dd4:	28 17       	cp	r18, r24
    5dd6:	39 07       	cpc	r19, r25
    5dd8:	51 f5       	brne	.+84     	; 0x5e2e <free+0x88>
    5dda:	e0 93 c8 26 	sts	0x26C8, r30	; 0x8026c8 <__brkval>
    5dde:	f0 93 c9 26 	sts	0x26C9, r31	; 0x8026c9 <__brkval+0x1>
    5de2:	67 c0       	rjmp	.+206    	; 0x5eb2 <free+0x10c>
    5de4:	ed 01       	movw	r28, r26
    5de6:	20 e0       	ldi	r18, 0x00	; 0
    5de8:	30 e0       	ldi	r19, 0x00	; 0
    5dea:	ce 17       	cp	r28, r30
    5dec:	df 07       	cpc	r29, r31
    5dee:	40 f4       	brcc	.+16     	; 0x5e00 <free+0x5a>
    5df0:	4a 81       	ldd	r20, Y+2	; 0x02
    5df2:	5b 81       	ldd	r21, Y+3	; 0x03
    5df4:	9e 01       	movw	r18, r28
    5df6:	41 15       	cp	r20, r1
    5df8:	51 05       	cpc	r21, r1
    5dfa:	f1 f0       	breq	.+60     	; 0x5e38 <free+0x92>
    5dfc:	ea 01       	movw	r28, r20
    5dfe:	f5 cf       	rjmp	.-22     	; 0x5dea <free+0x44>
    5e00:	c2 83       	std	Z+2, r28	; 0x02
    5e02:	d3 83       	std	Z+3, r29	; 0x03
    5e04:	40 81       	ld	r20, Z
    5e06:	51 81       	ldd	r21, Z+1	; 0x01
    5e08:	84 0f       	add	r24, r20
    5e0a:	95 1f       	adc	r25, r21
    5e0c:	c8 17       	cp	r28, r24
    5e0e:	d9 07       	cpc	r29, r25
    5e10:	59 f4       	brne	.+22     	; 0x5e28 <free+0x82>
    5e12:	88 81       	ld	r24, Y
    5e14:	99 81       	ldd	r25, Y+1	; 0x01
    5e16:	84 0f       	add	r24, r20
    5e18:	95 1f       	adc	r25, r21
    5e1a:	02 96       	adiw	r24, 0x02	; 2
    5e1c:	80 83       	st	Z, r24
    5e1e:	91 83       	std	Z+1, r25	; 0x01
    5e20:	8a 81       	ldd	r24, Y+2	; 0x02
    5e22:	9b 81       	ldd	r25, Y+3	; 0x03
    5e24:	82 83       	std	Z+2, r24	; 0x02
    5e26:	93 83       	std	Z+3, r25	; 0x03
    5e28:	21 15       	cp	r18, r1
    5e2a:	31 05       	cpc	r19, r1
    5e2c:	29 f4       	brne	.+10     	; 0x5e38 <free+0x92>
    5e2e:	e0 93 ca 26 	sts	0x26CA, r30	; 0x8026ca <__flp>
    5e32:	f0 93 cb 26 	sts	0x26CB, r31	; 0x8026cb <__flp+0x1>
    5e36:	3d c0       	rjmp	.+122    	; 0x5eb2 <free+0x10c>
    5e38:	e9 01       	movw	r28, r18
    5e3a:	ea 83       	std	Y+2, r30	; 0x02
    5e3c:	fb 83       	std	Y+3, r31	; 0x03
    5e3e:	49 91       	ld	r20, Y+
    5e40:	59 91       	ld	r21, Y+
    5e42:	c4 0f       	add	r28, r20
    5e44:	d5 1f       	adc	r29, r21
    5e46:	ec 17       	cp	r30, r28
    5e48:	fd 07       	cpc	r31, r29
    5e4a:	61 f4       	brne	.+24     	; 0x5e64 <free+0xbe>
    5e4c:	80 81       	ld	r24, Z
    5e4e:	91 81       	ldd	r25, Z+1	; 0x01
    5e50:	84 0f       	add	r24, r20
    5e52:	95 1f       	adc	r25, r21
    5e54:	02 96       	adiw	r24, 0x02	; 2
    5e56:	e9 01       	movw	r28, r18
    5e58:	88 83       	st	Y, r24
    5e5a:	99 83       	std	Y+1, r25	; 0x01
    5e5c:	82 81       	ldd	r24, Z+2	; 0x02
    5e5e:	93 81       	ldd	r25, Z+3	; 0x03
    5e60:	8a 83       	std	Y+2, r24	; 0x02
    5e62:	9b 83       	std	Y+3, r25	; 0x03
    5e64:	e0 e0       	ldi	r30, 0x00	; 0
    5e66:	f0 e0       	ldi	r31, 0x00	; 0
    5e68:	12 96       	adiw	r26, 0x02	; 2
    5e6a:	8d 91       	ld	r24, X+
    5e6c:	9c 91       	ld	r25, X
    5e6e:	13 97       	sbiw	r26, 0x03	; 3
    5e70:	00 97       	sbiw	r24, 0x00	; 0
    5e72:	19 f0       	breq	.+6      	; 0x5e7a <free+0xd4>
    5e74:	fd 01       	movw	r30, r26
    5e76:	dc 01       	movw	r26, r24
    5e78:	f7 cf       	rjmp	.-18     	; 0x5e68 <free+0xc2>
    5e7a:	8d 91       	ld	r24, X+
    5e7c:	9c 91       	ld	r25, X
    5e7e:	11 97       	sbiw	r26, 0x01	; 1
    5e80:	9d 01       	movw	r18, r26
    5e82:	2e 5f       	subi	r18, 0xFE	; 254
    5e84:	3f 4f       	sbci	r19, 0xFF	; 255
    5e86:	82 0f       	add	r24, r18
    5e88:	93 1f       	adc	r25, r19
    5e8a:	20 91 c8 26 	lds	r18, 0x26C8	; 0x8026c8 <__brkval>
    5e8e:	30 91 c9 26 	lds	r19, 0x26C9	; 0x8026c9 <__brkval+0x1>
    5e92:	28 17       	cp	r18, r24
    5e94:	39 07       	cpc	r19, r25
    5e96:	69 f4       	brne	.+26     	; 0x5eb2 <free+0x10c>
    5e98:	30 97       	sbiw	r30, 0x00	; 0
    5e9a:	29 f4       	brne	.+10     	; 0x5ea6 <free+0x100>
    5e9c:	10 92 ca 26 	sts	0x26CA, r1	; 0x8026ca <__flp>
    5ea0:	10 92 cb 26 	sts	0x26CB, r1	; 0x8026cb <__flp+0x1>
    5ea4:	02 c0       	rjmp	.+4      	; 0x5eaa <free+0x104>
    5ea6:	12 82       	std	Z+2, r1	; 0x02
    5ea8:	13 82       	std	Z+3, r1	; 0x03
    5eaa:	a0 93 c8 26 	sts	0x26C8, r26	; 0x8026c8 <__brkval>
    5eae:	b0 93 c9 26 	sts	0x26C9, r27	; 0x8026c9 <__brkval+0x1>
    5eb2:	df 91       	pop	r29
    5eb4:	cf 91       	pop	r28
    5eb6:	08 95       	ret

00005eb8 <__ftoa_engine>:
    5eb8:	28 30       	cpi	r18, 0x08	; 8
    5eba:	08 f0       	brcs	.+2      	; 0x5ebe <__ftoa_engine+0x6>
    5ebc:	27 e0       	ldi	r18, 0x07	; 7
    5ebe:	33 27       	eor	r19, r19
    5ec0:	da 01       	movw	r26, r20
    5ec2:	99 0f       	add	r25, r25
    5ec4:	31 1d       	adc	r19, r1
    5ec6:	87 fd       	sbrc	r24, 7
    5ec8:	91 60       	ori	r25, 0x01	; 1
    5eca:	00 96       	adiw	r24, 0x00	; 0
    5ecc:	61 05       	cpc	r22, r1
    5ece:	71 05       	cpc	r23, r1
    5ed0:	39 f4       	brne	.+14     	; 0x5ee0 <__ftoa_engine+0x28>
    5ed2:	32 60       	ori	r19, 0x02	; 2
    5ed4:	2e 5f       	subi	r18, 0xFE	; 254
    5ed6:	3d 93       	st	X+, r19
    5ed8:	30 e3       	ldi	r19, 0x30	; 48
    5eda:	2a 95       	dec	r18
    5edc:	e1 f7       	brne	.-8      	; 0x5ed6 <__ftoa_engine+0x1e>
    5ede:	08 95       	ret
    5ee0:	9f 3f       	cpi	r25, 0xFF	; 255
    5ee2:	30 f0       	brcs	.+12     	; 0x5ef0 <__ftoa_engine+0x38>
    5ee4:	80 38       	cpi	r24, 0x80	; 128
    5ee6:	71 05       	cpc	r23, r1
    5ee8:	61 05       	cpc	r22, r1
    5eea:	09 f0       	breq	.+2      	; 0x5eee <__ftoa_engine+0x36>
    5eec:	3c 5f       	subi	r19, 0xFC	; 252
    5eee:	3c 5f       	subi	r19, 0xFC	; 252
    5ef0:	3d 93       	st	X+, r19
    5ef2:	91 30       	cpi	r25, 0x01	; 1
    5ef4:	08 f0       	brcs	.+2      	; 0x5ef8 <__ftoa_engine+0x40>
    5ef6:	80 68       	ori	r24, 0x80	; 128
    5ef8:	91 1d       	adc	r25, r1
    5efa:	df 93       	push	r29
    5efc:	cf 93       	push	r28
    5efe:	1f 93       	push	r17
    5f00:	0f 93       	push	r16
    5f02:	ff 92       	push	r15
    5f04:	ef 92       	push	r14
    5f06:	19 2f       	mov	r17, r25
    5f08:	98 7f       	andi	r25, 0xF8	; 248
    5f0a:	96 95       	lsr	r25
    5f0c:	e9 2f       	mov	r30, r25
    5f0e:	96 95       	lsr	r25
    5f10:	96 95       	lsr	r25
    5f12:	e9 0f       	add	r30, r25
    5f14:	ff 27       	eor	r31, r31
    5f16:	ec 55       	subi	r30, 0x5C	; 92
    5f18:	fd 4f       	sbci	r31, 0xFD	; 253
    5f1a:	99 27       	eor	r25, r25
    5f1c:	33 27       	eor	r19, r19
    5f1e:	ee 24       	eor	r14, r14
    5f20:	ff 24       	eor	r15, r15
    5f22:	a7 01       	movw	r20, r14
    5f24:	e7 01       	movw	r28, r14
    5f26:	05 90       	lpm	r0, Z+
    5f28:	08 94       	sec
    5f2a:	07 94       	ror	r0
    5f2c:	28 f4       	brcc	.+10     	; 0x5f38 <__ftoa_engine+0x80>
    5f2e:	36 0f       	add	r19, r22
    5f30:	e7 1e       	adc	r14, r23
    5f32:	f8 1e       	adc	r15, r24
    5f34:	49 1f       	adc	r20, r25
    5f36:	51 1d       	adc	r21, r1
    5f38:	66 0f       	add	r22, r22
    5f3a:	77 1f       	adc	r23, r23
    5f3c:	88 1f       	adc	r24, r24
    5f3e:	99 1f       	adc	r25, r25
    5f40:	06 94       	lsr	r0
    5f42:	a1 f7       	brne	.-24     	; 0x5f2c <__ftoa_engine+0x74>
    5f44:	05 90       	lpm	r0, Z+
    5f46:	07 94       	ror	r0
    5f48:	28 f4       	brcc	.+10     	; 0x5f54 <__ftoa_engine+0x9c>
    5f4a:	e7 0e       	add	r14, r23
    5f4c:	f8 1e       	adc	r15, r24
    5f4e:	49 1f       	adc	r20, r25
    5f50:	56 1f       	adc	r21, r22
    5f52:	c1 1d       	adc	r28, r1
    5f54:	77 0f       	add	r23, r23
    5f56:	88 1f       	adc	r24, r24
    5f58:	99 1f       	adc	r25, r25
    5f5a:	66 1f       	adc	r22, r22
    5f5c:	06 94       	lsr	r0
    5f5e:	a1 f7       	brne	.-24     	; 0x5f48 <__ftoa_engine+0x90>
    5f60:	05 90       	lpm	r0, Z+
    5f62:	07 94       	ror	r0
    5f64:	28 f4       	brcc	.+10     	; 0x5f70 <__ftoa_engine+0xb8>
    5f66:	f8 0e       	add	r15, r24
    5f68:	49 1f       	adc	r20, r25
    5f6a:	56 1f       	adc	r21, r22
    5f6c:	c7 1f       	adc	r28, r23
    5f6e:	d1 1d       	adc	r29, r1
    5f70:	88 0f       	add	r24, r24
    5f72:	99 1f       	adc	r25, r25
    5f74:	66 1f       	adc	r22, r22
    5f76:	77 1f       	adc	r23, r23
    5f78:	06 94       	lsr	r0
    5f7a:	a1 f7       	brne	.-24     	; 0x5f64 <__ftoa_engine+0xac>
    5f7c:	05 90       	lpm	r0, Z+
    5f7e:	07 94       	ror	r0
    5f80:	20 f4       	brcc	.+8      	; 0x5f8a <__ftoa_engine+0xd2>
    5f82:	49 0f       	add	r20, r25
    5f84:	56 1f       	adc	r21, r22
    5f86:	c7 1f       	adc	r28, r23
    5f88:	d8 1f       	adc	r29, r24
    5f8a:	99 0f       	add	r25, r25
    5f8c:	66 1f       	adc	r22, r22
    5f8e:	77 1f       	adc	r23, r23
    5f90:	88 1f       	adc	r24, r24
    5f92:	06 94       	lsr	r0
    5f94:	a9 f7       	brne	.-22     	; 0x5f80 <__ftoa_engine+0xc8>
    5f96:	84 91       	lpm	r24, Z
    5f98:	10 95       	com	r17
    5f9a:	17 70       	andi	r17, 0x07	; 7
    5f9c:	41 f0       	breq	.+16     	; 0x5fae <__ftoa_engine+0xf6>
    5f9e:	d6 95       	lsr	r29
    5fa0:	c7 95       	ror	r28
    5fa2:	57 95       	ror	r21
    5fa4:	47 95       	ror	r20
    5fa6:	f7 94       	ror	r15
    5fa8:	e7 94       	ror	r14
    5faa:	1a 95       	dec	r17
    5fac:	c1 f7       	brne	.-16     	; 0x5f9e <__ftoa_engine+0xe6>
    5fae:	ea e4       	ldi	r30, 0x4A	; 74
    5fb0:	f2 e0       	ldi	r31, 0x02	; 2
    5fb2:	68 94       	set
    5fb4:	15 90       	lpm	r1, Z+
    5fb6:	15 91       	lpm	r17, Z+
    5fb8:	35 91       	lpm	r19, Z+
    5fba:	65 91       	lpm	r22, Z+
    5fbc:	95 91       	lpm	r25, Z+
    5fbe:	05 90       	lpm	r0, Z+
    5fc0:	7f e2       	ldi	r23, 0x2F	; 47
    5fc2:	73 95       	inc	r23
    5fc4:	e1 18       	sub	r14, r1
    5fc6:	f1 0a       	sbc	r15, r17
    5fc8:	43 0b       	sbc	r20, r19
    5fca:	56 0b       	sbc	r21, r22
    5fcc:	c9 0b       	sbc	r28, r25
    5fce:	d0 09       	sbc	r29, r0
    5fd0:	c0 f7       	brcc	.-16     	; 0x5fc2 <__ftoa_engine+0x10a>
    5fd2:	e1 0c       	add	r14, r1
    5fd4:	f1 1e       	adc	r15, r17
    5fd6:	43 1f       	adc	r20, r19
    5fd8:	56 1f       	adc	r21, r22
    5fda:	c9 1f       	adc	r28, r25
    5fdc:	d0 1d       	adc	r29, r0
    5fde:	7e f4       	brtc	.+30     	; 0x5ffe <__ftoa_engine+0x146>
    5fe0:	70 33       	cpi	r23, 0x30	; 48
    5fe2:	11 f4       	brne	.+4      	; 0x5fe8 <__ftoa_engine+0x130>
    5fe4:	8a 95       	dec	r24
    5fe6:	e6 cf       	rjmp	.-52     	; 0x5fb4 <__ftoa_engine+0xfc>
    5fe8:	e8 94       	clt
    5fea:	01 50       	subi	r16, 0x01	; 1
    5fec:	30 f0       	brcs	.+12     	; 0x5ffa <__ftoa_engine+0x142>
    5fee:	08 0f       	add	r16, r24
    5ff0:	0a f4       	brpl	.+2      	; 0x5ff4 <__ftoa_engine+0x13c>
    5ff2:	00 27       	eor	r16, r16
    5ff4:	02 17       	cp	r16, r18
    5ff6:	08 f4       	brcc	.+2      	; 0x5ffa <__ftoa_engine+0x142>
    5ff8:	20 2f       	mov	r18, r16
    5ffa:	23 95       	inc	r18
    5ffc:	02 2f       	mov	r16, r18
    5ffe:	7a 33       	cpi	r23, 0x3A	; 58
    6000:	28 f0       	brcs	.+10     	; 0x600c <__ftoa_engine+0x154>
    6002:	79 e3       	ldi	r23, 0x39	; 57
    6004:	7d 93       	st	X+, r23
    6006:	2a 95       	dec	r18
    6008:	e9 f7       	brne	.-6      	; 0x6004 <__ftoa_engine+0x14c>
    600a:	10 c0       	rjmp	.+32     	; 0x602c <__ftoa_engine+0x174>
    600c:	7d 93       	st	X+, r23
    600e:	2a 95       	dec	r18
    6010:	89 f6       	brne	.-94     	; 0x5fb4 <__ftoa_engine+0xfc>
    6012:	06 94       	lsr	r0
    6014:	97 95       	ror	r25
    6016:	67 95       	ror	r22
    6018:	37 95       	ror	r19
    601a:	17 95       	ror	r17
    601c:	17 94       	ror	r1
    601e:	e1 18       	sub	r14, r1
    6020:	f1 0a       	sbc	r15, r17
    6022:	43 0b       	sbc	r20, r19
    6024:	56 0b       	sbc	r21, r22
    6026:	c9 0b       	sbc	r28, r25
    6028:	d0 09       	sbc	r29, r0
    602a:	98 f0       	brcs	.+38     	; 0x6052 <__ftoa_engine+0x19a>
    602c:	23 95       	inc	r18
    602e:	7e 91       	ld	r23, -X
    6030:	73 95       	inc	r23
    6032:	7a 33       	cpi	r23, 0x3A	; 58
    6034:	08 f0       	brcs	.+2      	; 0x6038 <__ftoa_engine+0x180>
    6036:	70 e3       	ldi	r23, 0x30	; 48
    6038:	7c 93       	st	X, r23
    603a:	20 13       	cpse	r18, r16
    603c:	b8 f7       	brcc	.-18     	; 0x602c <__ftoa_engine+0x174>
    603e:	7e 91       	ld	r23, -X
    6040:	70 61       	ori	r23, 0x10	; 16
    6042:	7d 93       	st	X+, r23
    6044:	30 f0       	brcs	.+12     	; 0x6052 <__ftoa_engine+0x19a>
    6046:	83 95       	inc	r24
    6048:	71 e3       	ldi	r23, 0x31	; 49
    604a:	7d 93       	st	X+, r23
    604c:	70 e3       	ldi	r23, 0x30	; 48
    604e:	2a 95       	dec	r18
    6050:	e1 f7       	brne	.-8      	; 0x604a <__ftoa_engine+0x192>
    6052:	11 24       	eor	r1, r1
    6054:	ef 90       	pop	r14
    6056:	ff 90       	pop	r15
    6058:	0f 91       	pop	r16
    605a:	1f 91       	pop	r17
    605c:	cf 91       	pop	r28
    605e:	df 91       	pop	r29
    6060:	99 27       	eor	r25, r25
    6062:	87 fd       	sbrc	r24, 7
    6064:	90 95       	com	r25
    6066:	08 95       	ret

00006068 <strnlen_P>:
    6068:	fc 01       	movw	r30, r24
    606a:	05 90       	lpm	r0, Z+
    606c:	61 50       	subi	r22, 0x01	; 1
    606e:	70 40       	sbci	r23, 0x00	; 0
    6070:	01 10       	cpse	r0, r1
    6072:	d8 f7       	brcc	.-10     	; 0x606a <strnlen_P+0x2>
    6074:	80 95       	com	r24
    6076:	90 95       	com	r25
    6078:	8e 0f       	add	r24, r30
    607a:	9f 1f       	adc	r25, r31
    607c:	08 95       	ret

0000607e <memcpy>:
    607e:	fb 01       	movw	r30, r22
    6080:	dc 01       	movw	r26, r24
    6082:	02 c0       	rjmp	.+4      	; 0x6088 <memcpy+0xa>
    6084:	01 90       	ld	r0, Z+
    6086:	0d 92       	st	X+, r0
    6088:	41 50       	subi	r20, 0x01	; 1
    608a:	50 40       	sbci	r21, 0x00	; 0
    608c:	d8 f7       	brcc	.-10     	; 0x6084 <memcpy+0x6>
    608e:	08 95       	ret

00006090 <memset>:
    6090:	dc 01       	movw	r26, r24
    6092:	01 c0       	rjmp	.+2      	; 0x6096 <memset+0x6>
    6094:	6d 93       	st	X+, r22
    6096:	41 50       	subi	r20, 0x01	; 1
    6098:	50 40       	sbci	r21, 0x00	; 0
    609a:	e0 f7       	brcc	.-8      	; 0x6094 <memset+0x4>
    609c:	08 95       	ret

0000609e <strnlen>:
    609e:	fc 01       	movw	r30, r24
    60a0:	61 50       	subi	r22, 0x01	; 1
    60a2:	70 40       	sbci	r23, 0x00	; 0
    60a4:	01 90       	ld	r0, Z+
    60a6:	01 10       	cpse	r0, r1
    60a8:	d8 f7       	brcc	.-10     	; 0x60a0 <strnlen+0x2>
    60aa:	80 95       	com	r24
    60ac:	90 95       	com	r25
    60ae:	8e 0f       	add	r24, r30
    60b0:	9f 1f       	adc	r25, r31
    60b2:	08 95       	ret

000060b4 <fputc>:
    60b4:	0f 93       	push	r16
    60b6:	1f 93       	push	r17
    60b8:	cf 93       	push	r28
    60ba:	df 93       	push	r29
    60bc:	fb 01       	movw	r30, r22
    60be:	23 81       	ldd	r18, Z+3	; 0x03
    60c0:	21 fd       	sbrc	r18, 1
    60c2:	03 c0       	rjmp	.+6      	; 0x60ca <fputc+0x16>
    60c4:	8f ef       	ldi	r24, 0xFF	; 255
    60c6:	9f ef       	ldi	r25, 0xFF	; 255
    60c8:	2c c0       	rjmp	.+88     	; 0x6122 <fputc+0x6e>
    60ca:	22 ff       	sbrs	r18, 2
    60cc:	16 c0       	rjmp	.+44     	; 0x60fa <fputc+0x46>
    60ce:	46 81       	ldd	r20, Z+6	; 0x06
    60d0:	57 81       	ldd	r21, Z+7	; 0x07
    60d2:	24 81       	ldd	r18, Z+4	; 0x04
    60d4:	35 81       	ldd	r19, Z+5	; 0x05
    60d6:	42 17       	cp	r20, r18
    60d8:	53 07       	cpc	r21, r19
    60da:	44 f4       	brge	.+16     	; 0x60ec <fputc+0x38>
    60dc:	a0 81       	ld	r26, Z
    60de:	b1 81       	ldd	r27, Z+1	; 0x01
    60e0:	9d 01       	movw	r18, r26
    60e2:	2f 5f       	subi	r18, 0xFF	; 255
    60e4:	3f 4f       	sbci	r19, 0xFF	; 255
    60e6:	20 83       	st	Z, r18
    60e8:	31 83       	std	Z+1, r19	; 0x01
    60ea:	8c 93       	st	X, r24
    60ec:	26 81       	ldd	r18, Z+6	; 0x06
    60ee:	37 81       	ldd	r19, Z+7	; 0x07
    60f0:	2f 5f       	subi	r18, 0xFF	; 255
    60f2:	3f 4f       	sbci	r19, 0xFF	; 255
    60f4:	26 83       	std	Z+6, r18	; 0x06
    60f6:	37 83       	std	Z+7, r19	; 0x07
    60f8:	14 c0       	rjmp	.+40     	; 0x6122 <fputc+0x6e>
    60fa:	8b 01       	movw	r16, r22
    60fc:	ec 01       	movw	r28, r24
    60fe:	fb 01       	movw	r30, r22
    6100:	00 84       	ldd	r0, Z+8	; 0x08
    6102:	f1 85       	ldd	r31, Z+9	; 0x09
    6104:	e0 2d       	mov	r30, r0
    6106:	19 95       	eicall
    6108:	89 2b       	or	r24, r25
    610a:	e1 f6       	brne	.-72     	; 0x60c4 <fputc+0x10>
    610c:	d8 01       	movw	r26, r16
    610e:	16 96       	adiw	r26, 0x06	; 6
    6110:	8d 91       	ld	r24, X+
    6112:	9c 91       	ld	r25, X
    6114:	17 97       	sbiw	r26, 0x07	; 7
    6116:	01 96       	adiw	r24, 0x01	; 1
    6118:	16 96       	adiw	r26, 0x06	; 6
    611a:	8d 93       	st	X+, r24
    611c:	9c 93       	st	X, r25
    611e:	17 97       	sbiw	r26, 0x07	; 7
    6120:	ce 01       	movw	r24, r28
    6122:	df 91       	pop	r29
    6124:	cf 91       	pop	r28
    6126:	1f 91       	pop	r17
    6128:	0f 91       	pop	r16
    612a:	08 95       	ret

0000612c <printf>:
    612c:	cf 93       	push	r28
    612e:	df 93       	push	r29
    6130:	cd b7       	in	r28, 0x3d	; 61
    6132:	de b7       	in	r29, 0x3e	; 62
    6134:	ae 01       	movw	r20, r28
    6136:	4a 5f       	subi	r20, 0xFA	; 250
    6138:	5f 4f       	sbci	r21, 0xFF	; 255
    613a:	fa 01       	movw	r30, r20
    613c:	61 91       	ld	r22, Z+
    613e:	71 91       	ld	r23, Z+
    6140:	af 01       	movw	r20, r30
    6142:	80 91 ce 26 	lds	r24, 0x26CE	; 0x8026ce <__iob+0x2>
    6146:	90 91 cf 26 	lds	r25, 0x26CF	; 0x8026cf <__iob+0x3>
    614a:	0e 94 64 2a 	call	0x54c8	; 0x54c8 <vfprintf>
    614e:	df 91       	pop	r29
    6150:	cf 91       	pop	r28
    6152:	08 95       	ret

00006154 <puts>:
    6154:	0f 93       	push	r16
    6156:	1f 93       	push	r17
    6158:	cf 93       	push	r28
    615a:	df 93       	push	r29
    615c:	e0 91 ce 26 	lds	r30, 0x26CE	; 0x8026ce <__iob+0x2>
    6160:	f0 91 cf 26 	lds	r31, 0x26CF	; 0x8026cf <__iob+0x3>
    6164:	23 81       	ldd	r18, Z+3	; 0x03
    6166:	21 ff       	sbrs	r18, 1
    6168:	1b c0       	rjmp	.+54     	; 0x61a0 <puts+0x4c>
    616a:	8c 01       	movw	r16, r24
    616c:	d0 e0       	ldi	r29, 0x00	; 0
    616e:	c0 e0       	ldi	r28, 0x00	; 0
    6170:	f8 01       	movw	r30, r16
    6172:	81 91       	ld	r24, Z+
    6174:	8f 01       	movw	r16, r30
    6176:	60 91 ce 26 	lds	r22, 0x26CE	; 0x8026ce <__iob+0x2>
    617a:	70 91 cf 26 	lds	r23, 0x26CF	; 0x8026cf <__iob+0x3>
    617e:	db 01       	movw	r26, r22
    6180:	18 96       	adiw	r26, 0x08	; 8
    6182:	ed 91       	ld	r30, X+
    6184:	fc 91       	ld	r31, X
    6186:	19 97       	sbiw	r26, 0x09	; 9
    6188:	88 23       	and	r24, r24
    618a:	31 f0       	breq	.+12     	; 0x6198 <puts+0x44>
    618c:	19 95       	eicall
    618e:	89 2b       	or	r24, r25
    6190:	79 f3       	breq	.-34     	; 0x6170 <puts+0x1c>
    6192:	df ef       	ldi	r29, 0xFF	; 255
    6194:	cf ef       	ldi	r28, 0xFF	; 255
    6196:	ec cf       	rjmp	.-40     	; 0x6170 <puts+0x1c>
    6198:	8a e0       	ldi	r24, 0x0A	; 10
    619a:	19 95       	eicall
    619c:	89 2b       	or	r24, r25
    619e:	19 f0       	breq	.+6      	; 0x61a6 <puts+0x52>
    61a0:	8f ef       	ldi	r24, 0xFF	; 255
    61a2:	9f ef       	ldi	r25, 0xFF	; 255
    61a4:	02 c0       	rjmp	.+4      	; 0x61aa <puts+0x56>
    61a6:	8d 2f       	mov	r24, r29
    61a8:	9c 2f       	mov	r25, r28
    61aa:	df 91       	pop	r29
    61ac:	cf 91       	pop	r28
    61ae:	1f 91       	pop	r17
    61b0:	0f 91       	pop	r16
    61b2:	08 95       	ret

000061b4 <__ultoa_invert>:
    61b4:	fa 01       	movw	r30, r20
    61b6:	aa 27       	eor	r26, r26
    61b8:	28 30       	cpi	r18, 0x08	; 8
    61ba:	51 f1       	breq	.+84     	; 0x6210 <__ultoa_invert+0x5c>
    61bc:	20 31       	cpi	r18, 0x10	; 16
    61be:	81 f1       	breq	.+96     	; 0x6220 <__ultoa_invert+0x6c>
    61c0:	e8 94       	clt
    61c2:	6f 93       	push	r22
    61c4:	6e 7f       	andi	r22, 0xFE	; 254
    61c6:	6e 5f       	subi	r22, 0xFE	; 254
    61c8:	7f 4f       	sbci	r23, 0xFF	; 255
    61ca:	8f 4f       	sbci	r24, 0xFF	; 255
    61cc:	9f 4f       	sbci	r25, 0xFF	; 255
    61ce:	af 4f       	sbci	r26, 0xFF	; 255
    61d0:	b1 e0       	ldi	r27, 0x01	; 1
    61d2:	3e d0       	rcall	.+124    	; 0x6250 <__ultoa_invert+0x9c>
    61d4:	b4 e0       	ldi	r27, 0x04	; 4
    61d6:	3c d0       	rcall	.+120    	; 0x6250 <__ultoa_invert+0x9c>
    61d8:	67 0f       	add	r22, r23
    61da:	78 1f       	adc	r23, r24
    61dc:	89 1f       	adc	r24, r25
    61de:	9a 1f       	adc	r25, r26
    61e0:	a1 1d       	adc	r26, r1
    61e2:	68 0f       	add	r22, r24
    61e4:	79 1f       	adc	r23, r25
    61e6:	8a 1f       	adc	r24, r26
    61e8:	91 1d       	adc	r25, r1
    61ea:	a1 1d       	adc	r26, r1
    61ec:	6a 0f       	add	r22, r26
    61ee:	71 1d       	adc	r23, r1
    61f0:	81 1d       	adc	r24, r1
    61f2:	91 1d       	adc	r25, r1
    61f4:	a1 1d       	adc	r26, r1
    61f6:	20 d0       	rcall	.+64     	; 0x6238 <__ultoa_invert+0x84>
    61f8:	09 f4       	brne	.+2      	; 0x61fc <__ultoa_invert+0x48>
    61fa:	68 94       	set
    61fc:	3f 91       	pop	r19
    61fe:	2a e0       	ldi	r18, 0x0A	; 10
    6200:	26 9f       	mul	r18, r22
    6202:	11 24       	eor	r1, r1
    6204:	30 19       	sub	r19, r0
    6206:	30 5d       	subi	r19, 0xD0	; 208
    6208:	31 93       	st	Z+, r19
    620a:	de f6       	brtc	.-74     	; 0x61c2 <__ultoa_invert+0xe>
    620c:	cf 01       	movw	r24, r30
    620e:	08 95       	ret
    6210:	46 2f       	mov	r20, r22
    6212:	47 70       	andi	r20, 0x07	; 7
    6214:	40 5d       	subi	r20, 0xD0	; 208
    6216:	41 93       	st	Z+, r20
    6218:	b3 e0       	ldi	r27, 0x03	; 3
    621a:	0f d0       	rcall	.+30     	; 0x623a <__ultoa_invert+0x86>
    621c:	c9 f7       	brne	.-14     	; 0x6210 <__ultoa_invert+0x5c>
    621e:	f6 cf       	rjmp	.-20     	; 0x620c <__ultoa_invert+0x58>
    6220:	46 2f       	mov	r20, r22
    6222:	4f 70       	andi	r20, 0x0F	; 15
    6224:	40 5d       	subi	r20, 0xD0	; 208
    6226:	4a 33       	cpi	r20, 0x3A	; 58
    6228:	18 f0       	brcs	.+6      	; 0x6230 <__ultoa_invert+0x7c>
    622a:	49 5d       	subi	r20, 0xD9	; 217
    622c:	31 fd       	sbrc	r19, 1
    622e:	40 52       	subi	r20, 0x20	; 32
    6230:	41 93       	st	Z+, r20
    6232:	02 d0       	rcall	.+4      	; 0x6238 <__ultoa_invert+0x84>
    6234:	a9 f7       	brne	.-22     	; 0x6220 <__ultoa_invert+0x6c>
    6236:	ea cf       	rjmp	.-44     	; 0x620c <__ultoa_invert+0x58>
    6238:	b4 e0       	ldi	r27, 0x04	; 4
    623a:	a6 95       	lsr	r26
    623c:	97 95       	ror	r25
    623e:	87 95       	ror	r24
    6240:	77 95       	ror	r23
    6242:	67 95       	ror	r22
    6244:	ba 95       	dec	r27
    6246:	c9 f7       	brne	.-14     	; 0x623a <__ultoa_invert+0x86>
    6248:	00 97       	sbiw	r24, 0x00	; 0
    624a:	61 05       	cpc	r22, r1
    624c:	71 05       	cpc	r23, r1
    624e:	08 95       	ret
    6250:	9b 01       	movw	r18, r22
    6252:	ac 01       	movw	r20, r24
    6254:	0a 2e       	mov	r0, r26
    6256:	06 94       	lsr	r0
    6258:	57 95       	ror	r21
    625a:	47 95       	ror	r20
    625c:	37 95       	ror	r19
    625e:	27 95       	ror	r18
    6260:	ba 95       	dec	r27
    6262:	c9 f7       	brne	.-14     	; 0x6256 <__ultoa_invert+0xa2>
    6264:	62 0f       	add	r22, r18
    6266:	73 1f       	adc	r23, r19
    6268:	84 1f       	adc	r24, r20
    626a:	95 1f       	adc	r25, r21
    626c:	a0 1d       	adc	r26, r0
    626e:	08 95       	ret

00006270 <_exit>:
    6270:	f8 94       	cli

00006272 <__stop_program>:
    6272:	ff cf       	rjmp	.-2      	; 0x6272 <__stop_program>
