
ARES-STM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a50  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001dc  08008be0  08008be0  00018be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008dbc  08008dbc  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08008dbc  08008dbc  00018dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008dc4  08008dc4  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008dc4  08008dc4  00018dc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008dc8  08008dc8  00018dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08008dcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000024ac  2000006c  08008e38  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002518  08008e38  00022518  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000208b8  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000044aa  00000000  00000000  00040997  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001bc8  00000000  00000000  00044e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001599  00000000  00000000  00046a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d787  00000000  00000000  00047fa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000203fa  00000000  00000000  00065730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b8c98  00000000  00000000  00085b2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007cc4  00000000  00000000  0013e7c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00146488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008bc8 	.word	0x08008bc8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08008bc8 	.word	0x08008bc8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <LTR329_Init>:
#include "stm32l4xx_hal.h"
#include <stdint.h>

extern I2C_HandleTypeDef hi2c1;  // Assuming you are using hi2c1

void LTR329_Init() {
 800056c:	b580      	push	{r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af04      	add	r7, sp, #16
    uint8_t data;

    // Activate the sensor
    data = LTR329_ACTIVE_MODE;
 8000572:	2301      	movs	r3, #1
 8000574:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, LTR329_I2C_ADDRESS, LTR329_ALS_CONTR, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 8000576:	2364      	movs	r3, #100	; 0x64
 8000578:	9302      	str	r3, [sp, #8]
 800057a:	2301      	movs	r3, #1
 800057c:	9301      	str	r3, [sp, #4]
 800057e:	1dfb      	adds	r3, r7, #7
 8000580:	9300      	str	r3, [sp, #0]
 8000582:	2301      	movs	r3, #1
 8000584:	2280      	movs	r2, #128	; 0x80
 8000586:	2152      	movs	r1, #82	; 0x52
 8000588:	480a      	ldr	r0, [pc, #40]	; (80005b4 <LTR329_Init+0x48>)
 800058a:	f001 f8b1 	bl	80016f0 <HAL_I2C_Mem_Write>

    // Set measurement rate
    data = LTR329_MEAS_RATE;
 800058e:	2303      	movs	r3, #3
 8000590:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, LTR329_I2C_ADDRESS, LTR329_ALS_MEAS_RATE, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 8000592:	2364      	movs	r3, #100	; 0x64
 8000594:	9302      	str	r3, [sp, #8]
 8000596:	2301      	movs	r3, #1
 8000598:	9301      	str	r3, [sp, #4]
 800059a:	1dfb      	adds	r3, r7, #7
 800059c:	9300      	str	r3, [sp, #0]
 800059e:	2301      	movs	r3, #1
 80005a0:	2285      	movs	r2, #133	; 0x85
 80005a2:	2152      	movs	r1, #82	; 0x52
 80005a4:	4803      	ldr	r0, [pc, #12]	; (80005b4 <LTR329_Init+0x48>)
 80005a6:	f001 f8a3 	bl	80016f0 <HAL_I2C_Mem_Write>
}
 80005aa:	bf00      	nop
 80005ac:	3708      	adds	r7, #8
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	20000088 	.word	0x20000088

080005b8 <LTR329_Read_Light>:

void LTR329_Read_Light(uint16_t *ch0, uint16_t *ch1) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b088      	sub	sp, #32
 80005bc:	af04      	add	r7, sp, #16
 80005be:	6078      	str	r0, [r7, #4]
 80005c0:	6039      	str	r1, [r7, #0]
    uint8_t data[4];

    // Read 4 bytes of data starting from LTR329_ALS_DATA_CH1_0
    HAL_I2C_Mem_Read(&hi2c1, LTR329_I2C_ADDRESS, LTR329_ALS_DATA_CH1_0, I2C_MEMADD_SIZE_8BIT, data, 4, 100);
 80005c2:	2364      	movs	r3, #100	; 0x64
 80005c4:	9302      	str	r3, [sp, #8]
 80005c6:	2304      	movs	r3, #4
 80005c8:	9301      	str	r3, [sp, #4]
 80005ca:	f107 030c 	add.w	r3, r7, #12
 80005ce:	9300      	str	r3, [sp, #0]
 80005d0:	2301      	movs	r3, #1
 80005d2:	2288      	movs	r2, #136	; 0x88
 80005d4:	2152      	movs	r1, #82	; 0x52
 80005d6:	480d      	ldr	r0, [pc, #52]	; (800060c <LTR329_Read_Light+0x54>)
 80005d8:	f001 f99e 	bl	8001918 <HAL_I2C_Mem_Read>

    // Combine bytes to get the light data for each channel
    *ch1 = (uint16_t)(data[1] << 8) | data[0];
 80005dc:	7b7b      	ldrb	r3, [r7, #13]
 80005de:	b29b      	uxth	r3, r3
 80005e0:	021b      	lsls	r3, r3, #8
 80005e2:	b29a      	uxth	r2, r3
 80005e4:	7b3b      	ldrb	r3, [r7, #12]
 80005e6:	b29b      	uxth	r3, r3
 80005e8:	4313      	orrs	r3, r2
 80005ea:	b29a      	uxth	r2, r3
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	801a      	strh	r2, [r3, #0]
    *ch0 = (uint16_t)(data[3] << 8) | data[2];
 80005f0:	7bfb      	ldrb	r3, [r7, #15]
 80005f2:	b29b      	uxth	r3, r3
 80005f4:	021b      	lsls	r3, r3, #8
 80005f6:	b29a      	uxth	r2, r3
 80005f8:	7bbb      	ldrb	r3, [r7, #14]
 80005fa:	b29b      	uxth	r3, r3
 80005fc:	4313      	orrs	r3, r2
 80005fe:	b29a      	uxth	r2, r3
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	801a      	strh	r2, [r3, #0]
}
 8000604:	bf00      	nop
 8000606:	3710      	adds	r7, #16
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	20000088 	.word	0x20000088

08000610 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE {
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 8000618:	1d39      	adds	r1, r7, #4
 800061a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800061e:	2201      	movs	r2, #1
 8000620:	4803      	ldr	r0, [pc, #12]	; (8000630 <__io_putchar+0x20>)
 8000622:	f003 f955 	bl	80038d0 <HAL_UART_Transmit>
	return ch;
 8000626:	687b      	ldr	r3, [r7, #4]
}
 8000628:	4618      	mov	r0, r3
 800062a:	3708      	adds	r7, #8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	200000dc 	.word	0x200000dc

08000634 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000638:	f000 fc99 	bl	8000f6e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800063c:	f000 f86a 	bl	8000714 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000640:	f000 f92e 	bl	80008a0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000644:	f000 f8fc 	bl	8000840 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000648:	f000 f8ba 	bl	80007c0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, uart_buffer, 1);
 800064c:	2201      	movs	r2, #1
 800064e:	491e      	ldr	r1, [pc, #120]	; (80006c8 <main+0x94>)
 8000650:	481e      	ldr	r0, [pc, #120]	; (80006cc <main+0x98>)
 8000652:	f003 f9c7 	bl	80039e4 <HAL_UART_Receive_IT>
  printf("Setup complete\n");
 8000656:	481e      	ldr	r0, [pc, #120]	; (80006d0 <main+0x9c>)
 8000658:	f007 fbe8 	bl	8007e2c <puts>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800065c:	f004 fc98 	bl	8004f90 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of uart1Queue */
  uart1QueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &uart1Queue_attributes);
 8000660:	4a1c      	ldr	r2, [pc, #112]	; (80006d4 <main+0xa0>)
 8000662:	2102      	movs	r1, #2
 8000664:	2010      	movs	r0, #16
 8000666:	f004 fd8a 	bl	800517e <osMessageQueueNew>
 800066a:	4603      	mov	r3, r0
 800066c:	4a1a      	ldr	r2, [pc, #104]	; (80006d8 <main+0xa4>)
 800066e:	6013      	str	r3, [r2, #0]

  /* creation of uart2Queue */
  uart2QueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &uart2Queue_attributes);
 8000670:	4a1a      	ldr	r2, [pc, #104]	; (80006dc <main+0xa8>)
 8000672:	2102      	movs	r1, #2
 8000674:	2010      	movs	r0, #16
 8000676:	f004 fd82 	bl	800517e <osMessageQueueNew>
 800067a:	4603      	mov	r3, r0
 800067c:	4a18      	ldr	r2, [pc, #96]	; (80006e0 <main+0xac>)
 800067e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000680:	4a18      	ldr	r2, [pc, #96]	; (80006e4 <main+0xb0>)
 8000682:	2100      	movs	r1, #0
 8000684:	4818      	ldr	r0, [pc, #96]	; (80006e8 <main+0xb4>)
 8000686:	f004 fccd 	bl	8005024 <osThreadNew>
 800068a:	4603      	mov	r3, r0
 800068c:	4a17      	ldr	r2, [pc, #92]	; (80006ec <main+0xb8>)
 800068e:	6013      	str	r3, [r2, #0]

  /* creation of UART2Task */
  UART2TaskHandle = osThreadNew(UART2_Task, NULL, &UART2Task_attributes);
 8000690:	4a17      	ldr	r2, [pc, #92]	; (80006f0 <main+0xbc>)
 8000692:	2100      	movs	r1, #0
 8000694:	4817      	ldr	r0, [pc, #92]	; (80006f4 <main+0xc0>)
 8000696:	f004 fcc5 	bl	8005024 <osThreadNew>
 800069a:	4603      	mov	r3, r0
 800069c:	4a16      	ldr	r2, [pc, #88]	; (80006f8 <main+0xc4>)
 800069e:	6013      	str	r3, [r2, #0]

  /* creation of UART1Task */
  UART1TaskHandle = osThreadNew(UART1_Task, NULL, &UART1Task_attributes);
 80006a0:	4a16      	ldr	r2, [pc, #88]	; (80006fc <main+0xc8>)
 80006a2:	2100      	movs	r1, #0
 80006a4:	4816      	ldr	r0, [pc, #88]	; (8000700 <main+0xcc>)
 80006a6:	f004 fcbd 	bl	8005024 <osThreadNew>
 80006aa:	4603      	mov	r3, r0
 80006ac:	4a15      	ldr	r2, [pc, #84]	; (8000704 <main+0xd0>)
 80006ae:	6013      	str	r3, [r2, #0]

  /* creation of LightSensor_Tas */
  LightSensor_TasHandle = osThreadNew(LightSensorTask, NULL, &LightSensor_Tas_attributes);
 80006b0:	4a15      	ldr	r2, [pc, #84]	; (8000708 <main+0xd4>)
 80006b2:	2100      	movs	r1, #0
 80006b4:	4815      	ldr	r0, [pc, #84]	; (800070c <main+0xd8>)
 80006b6:	f004 fcb5 	bl	8005024 <osThreadNew>
 80006ba:	4603      	mov	r3, r0
 80006bc:	4a14      	ldr	r2, [pc, #80]	; (8000710 <main+0xdc>)
 80006be:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006c0:	f004 fc8a 	bl	8004fd8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006c4:	e7fe      	b.n	80006c4 <main+0x90>
 80006c6:	bf00      	nop
 80006c8:	2000017c 	.word	0x2000017c
 80006cc:	200000dc 	.word	0x200000dc
 80006d0:	08008c2c 	.word	0x08008c2c
 80006d4:	08008d10 	.word	0x08008d10
 80006d8:	20000174 	.word	0x20000174
 80006dc:	08008d28 	.word	0x08008d28
 80006e0:	20000178 	.word	0x20000178
 80006e4:	08008c80 	.word	0x08008c80
 80006e8:	08000979 	.word	0x08000979
 80006ec:	20000164 	.word	0x20000164
 80006f0:	08008ca4 	.word	0x08008ca4
 80006f4:	08000989 	.word	0x08000989
 80006f8:	20000168 	.word	0x20000168
 80006fc:	08008cc8 	.word	0x08008cc8
 8000700:	08000a01 	.word	0x08000a01
 8000704:	2000016c 	.word	0x2000016c
 8000708:	08008cec 	.word	0x08008cec
 800070c:	08000a11 	.word	0x08000a11
 8000710:	20000170 	.word	0x20000170

08000714 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b096      	sub	sp, #88	; 0x58
 8000718:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071a:	f107 0314 	add.w	r3, r7, #20
 800071e:	2244      	movs	r2, #68	; 0x44
 8000720:	2100      	movs	r1, #0
 8000722:	4618      	mov	r0, r3
 8000724:	f007 fb8a 	bl	8007e3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000728:	463b      	mov	r3, r7
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]
 8000734:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000736:	f44f 7000 	mov.w	r0, #512	; 0x200
 800073a:	f001 fd75 	bl	8002228 <HAL_PWREx_ControlVoltageScaling>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000744:	f000 f998 	bl	8000a78 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000748:	f001 fd50 	bl	80021ec <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800074c:	4b1b      	ldr	r3, [pc, #108]	; (80007bc <SystemClock_Config+0xa8>)
 800074e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000752:	4a1a      	ldr	r2, [pc, #104]	; (80007bc <SystemClock_Config+0xa8>)
 8000754:	f023 0318 	bic.w	r3, r3, #24
 8000758:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800075c:	2314      	movs	r3, #20
 800075e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000760:	2301      	movs	r3, #1
 8000762:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000764:	2301      	movs	r3, #1
 8000766:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000768:	2300      	movs	r3, #0
 800076a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 800076c:	23a0      	movs	r3, #160	; 0xa0
 800076e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000770:	2300      	movs	r3, #0
 8000772:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000774:	f107 0314 	add.w	r3, r7, #20
 8000778:	4618      	mov	r0, r3
 800077a:	f001 fdab 	bl	80022d4 <HAL_RCC_OscConfig>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000784:	f000 f978 	bl	8000a78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000788:	230f      	movs	r3, #15
 800078a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800078c:	2300      	movs	r3, #0
 800078e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000790:	2300      	movs	r3, #0
 8000792:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000794:	2300      	movs	r3, #0
 8000796:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000798:	2300      	movs	r3, #0
 800079a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800079c:	463b      	mov	r3, r7
 800079e:	2101      	movs	r1, #1
 80007a0:	4618      	mov	r0, r3
 80007a2:	f002 f9f9 	bl	8002b98 <HAL_RCC_ClockConfig>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80007ac:	f000 f964 	bl	8000a78 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80007b0:	f002 fdce 	bl	8003350 <HAL_RCCEx_EnableMSIPLLMode>
}
 80007b4:	bf00      	nop
 80007b6:	3758      	adds	r7, #88	; 0x58
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40021000 	.word	0x40021000

080007c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007c4:	4b1b      	ldr	r3, [pc, #108]	; (8000834 <MX_I2C1_Init+0x74>)
 80007c6:	4a1c      	ldr	r2, [pc, #112]	; (8000838 <MX_I2C1_Init+0x78>)
 80007c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80007ca:	4b1a      	ldr	r3, [pc, #104]	; (8000834 <MX_I2C1_Init+0x74>)
 80007cc:	4a1b      	ldr	r2, [pc, #108]	; (800083c <MX_I2C1_Init+0x7c>)
 80007ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007d0:	4b18      	ldr	r3, [pc, #96]	; (8000834 <MX_I2C1_Init+0x74>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007d6:	4b17      	ldr	r3, [pc, #92]	; (8000834 <MX_I2C1_Init+0x74>)
 80007d8:	2201      	movs	r2, #1
 80007da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007dc:	4b15      	ldr	r3, [pc, #84]	; (8000834 <MX_I2C1_Init+0x74>)
 80007de:	2200      	movs	r2, #0
 80007e0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007e2:	4b14      	ldr	r3, [pc, #80]	; (8000834 <MX_I2C1_Init+0x74>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007e8:	4b12      	ldr	r3, [pc, #72]	; (8000834 <MX_I2C1_Init+0x74>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007ee:	4b11      	ldr	r3, [pc, #68]	; (8000834 <MX_I2C1_Init+0x74>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007f4:	4b0f      	ldr	r3, [pc, #60]	; (8000834 <MX_I2C1_Init+0x74>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007fa:	480e      	ldr	r0, [pc, #56]	; (8000834 <MX_I2C1_Init+0x74>)
 80007fc:	f000 fedc 	bl	80015b8 <HAL_I2C_Init>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000806:	f000 f937 	bl	8000a78 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800080a:	2100      	movs	r1, #0
 800080c:	4809      	ldr	r0, [pc, #36]	; (8000834 <MX_I2C1_Init+0x74>)
 800080e:	f001 fc55 	bl	80020bc <HAL_I2CEx_ConfigAnalogFilter>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000818:	f000 f92e 	bl	8000a78 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800081c:	2100      	movs	r1, #0
 800081e:	4805      	ldr	r0, [pc, #20]	; (8000834 <MX_I2C1_Init+0x74>)
 8000820:	f001 fc97 	bl	8002152 <HAL_I2CEx_ConfigDigitalFilter>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800082a:	f000 f925 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	20000088 	.word	0x20000088
 8000838:	40005400 	.word	0x40005400
 800083c:	00707cbb 	.word	0x00707cbb

08000840 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000844:	4b14      	ldr	r3, [pc, #80]	; (8000898 <MX_USART2_UART_Init+0x58>)
 8000846:	4a15      	ldr	r2, [pc, #84]	; (800089c <MX_USART2_UART_Init+0x5c>)
 8000848:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800084a:	4b13      	ldr	r3, [pc, #76]	; (8000898 <MX_USART2_UART_Init+0x58>)
 800084c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000850:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000852:	4b11      	ldr	r3, [pc, #68]	; (8000898 <MX_USART2_UART_Init+0x58>)
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000858:	4b0f      	ldr	r3, [pc, #60]	; (8000898 <MX_USART2_UART_Init+0x58>)
 800085a:	2200      	movs	r2, #0
 800085c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800085e:	4b0e      	ldr	r3, [pc, #56]	; (8000898 <MX_USART2_UART_Init+0x58>)
 8000860:	2200      	movs	r2, #0
 8000862:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000864:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <MX_USART2_UART_Init+0x58>)
 8000866:	220c      	movs	r2, #12
 8000868:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800086a:	4b0b      	ldr	r3, [pc, #44]	; (8000898 <MX_USART2_UART_Init+0x58>)
 800086c:	2200      	movs	r2, #0
 800086e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000870:	4b09      	ldr	r3, [pc, #36]	; (8000898 <MX_USART2_UART_Init+0x58>)
 8000872:	2200      	movs	r2, #0
 8000874:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000876:	4b08      	ldr	r3, [pc, #32]	; (8000898 <MX_USART2_UART_Init+0x58>)
 8000878:	2200      	movs	r2, #0
 800087a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800087c:	4b06      	ldr	r3, [pc, #24]	; (8000898 <MX_USART2_UART_Init+0x58>)
 800087e:	2200      	movs	r2, #0
 8000880:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000882:	4805      	ldr	r0, [pc, #20]	; (8000898 <MX_USART2_UART_Init+0x58>)
 8000884:	f002 ffd6 	bl	8003834 <HAL_UART_Init>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800088e:	f000 f8f3 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	200000dc 	.word	0x200000dc
 800089c:	40004400 	.word	0x40004400

080008a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b088      	sub	sp, #32
 80008a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a6:	f107 030c 	add.w	r3, r7, #12
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	60da      	str	r2, [r3, #12]
 80008b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b6:	4b1d      	ldr	r3, [pc, #116]	; (800092c <MX_GPIO_Init+0x8c>)
 80008b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ba:	4a1c      	ldr	r2, [pc, #112]	; (800092c <MX_GPIO_Init+0x8c>)
 80008bc:	f043 0304 	orr.w	r3, r3, #4
 80008c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008c2:	4b1a      	ldr	r3, [pc, #104]	; (800092c <MX_GPIO_Init+0x8c>)
 80008c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c6:	f003 0304 	and.w	r3, r3, #4
 80008ca:	60bb      	str	r3, [r7, #8]
 80008cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ce:	4b17      	ldr	r3, [pc, #92]	; (800092c <MX_GPIO_Init+0x8c>)
 80008d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d2:	4a16      	ldr	r2, [pc, #88]	; (800092c <MX_GPIO_Init+0x8c>)
 80008d4:	f043 0301 	orr.w	r3, r3, #1
 80008d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008da:	4b14      	ldr	r3, [pc, #80]	; (800092c <MX_GPIO_Init+0x8c>)
 80008dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008de:	f003 0301 	and.w	r3, r3, #1
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e6:	4b11      	ldr	r3, [pc, #68]	; (800092c <MX_GPIO_Init+0x8c>)
 80008e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ea:	4a10      	ldr	r2, [pc, #64]	; (800092c <MX_GPIO_Init+0x8c>)
 80008ec:	f043 0302 	orr.w	r3, r3, #2
 80008f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008f2:	4b0e      	ldr	r3, [pc, #56]	; (800092c <MX_GPIO_Init+0x8c>)
 80008f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f6:	f003 0302 	and.w	r3, r3, #2
 80008fa:	603b      	str	r3, [r7, #0]
 80008fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80008fe:	2200      	movs	r2, #0
 8000900:	2108      	movs	r1, #8
 8000902:	480b      	ldr	r0, [pc, #44]	; (8000930 <MX_GPIO_Init+0x90>)
 8000904:	f000 fe40 	bl	8001588 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000908:	2308      	movs	r3, #8
 800090a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090c:	2301      	movs	r3, #1
 800090e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000914:	2300      	movs	r3, #0
 8000916:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000918:	f107 030c 	add.w	r3, r7, #12
 800091c:	4619      	mov	r1, r3
 800091e:	4804      	ldr	r0, [pc, #16]	; (8000930 <MX_GPIO_Init+0x90>)
 8000920:	f000 fcc0 	bl	80012a4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000924:	bf00      	nop
 8000926:	3720      	adds	r7, #32
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	40021000 	.word	0x40021000
 8000930:	48000400 	.word	0x48000400

08000934 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
////		xQueueSendFromISR(uart1Queue, uart_buffer, NULL);
//		printf("Received1\n");
//		HAL_UART_Receive_IT(&huart1, uart_buffer, sizeof(uart_buffer));
//	}
//	else
		if (huart->Instance == USART2)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a09      	ldr	r2, [pc, #36]	; (8000968 <HAL_UART_RxCpltCallback+0x34>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d10b      	bne.n	800095e <HAL_UART_RxCpltCallback+0x2a>
	{
		xQueueSendFromISR(uart2QueueHandle, uart_buffer, NULL);
 8000946:	4b09      	ldr	r3, [pc, #36]	; (800096c <HAL_UART_RxCpltCallback+0x38>)
 8000948:	6818      	ldr	r0, [r3, #0]
 800094a:	2300      	movs	r3, #0
 800094c:	2200      	movs	r2, #0
 800094e:	4908      	ldr	r1, [pc, #32]	; (8000970 <HAL_UART_RxCpltCallback+0x3c>)
 8000950:	f004 ffac 	bl	80058ac <xQueueGenericSendFromISR>

		// Prepare to receive the next character
		HAL_UART_Receive_IT(&huart2, uart_buffer, 1);
 8000954:	2201      	movs	r2, #1
 8000956:	4906      	ldr	r1, [pc, #24]	; (8000970 <HAL_UART_RxCpltCallback+0x3c>)
 8000958:	4806      	ldr	r0, [pc, #24]	; (8000974 <HAL_UART_RxCpltCallback+0x40>)
 800095a:	f003 f843 	bl	80039e4 <HAL_UART_Receive_IT>

	}
}
 800095e:	bf00      	nop
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40004400 	.word	0x40004400
 800096c:	20000178 	.word	0x20000178
 8000970:	2000017c 	.word	0x2000017c
 8000974:	200000dc 	.word	0x200000dc

08000978 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000980:	2001      	movs	r0, #1
 8000982:	f004 fbe1 	bl	8005148 <osDelay>
 8000986:	e7fb      	b.n	8000980 <StartDefaultTask+0x8>

08000988 <UART2_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UART2_Task */
void UART2_Task(void *argument)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b084      	sub	sp, #16
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART2_Task */
	char receivedChar;
	  /* Infinite loop */
	  for(;;)
	  {
	    if (xQueueReceive(uart2QueueHandle, &receivedChar, portMAX_DELAY) == pdPASS)
 8000990:	4b18      	ldr	r3, [pc, #96]	; (80009f4 <UART2_Task+0x6c>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f107 010f 	add.w	r1, r7, #15
 8000998:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800099c:	4618      	mov	r0, r3
 800099e:	f005 f821 	bl	80059e4 <xQueueReceive>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b01      	cmp	r3, #1
 80009a6:	d1f3      	bne.n	8000990 <UART2_Task+0x8>
	    {

	      // Check if the end of transmission is reached
	      if (receivedChar == '\n' || receivedChar == '\r')
 80009a8:	7bfb      	ldrb	r3, [r7, #15]
 80009aa:	2b0a      	cmp	r3, #10
 80009ac:	d002      	beq.n	80009b4 <UART2_Task+0x2c>
 80009ae:	7bfb      	ldrb	r3, [r7, #15]
 80009b0:	2b0d      	cmp	r3, #13
 80009b2:	d10c      	bne.n	80009ce <UART2_Task+0x46>
	      {
	        // Null-terminate the string
	        uart_accumulate_buffer[uart_accumulate_pos] = '\0';
 80009b4:	4b10      	ldr	r3, [pc, #64]	; (80009f8 <UART2_Task+0x70>)
 80009b6:	881b      	ldrh	r3, [r3, #0]
 80009b8:	461a      	mov	r2, r3
 80009ba:	4b10      	ldr	r3, [pc, #64]	; (80009fc <UART2_Task+0x74>)
 80009bc:	2100      	movs	r1, #0
 80009be:	5499      	strb	r1, [r3, r2]

	        // Process the complete message here
	        printf("%s\n", uart_accumulate_buffer);
 80009c0:	480e      	ldr	r0, [pc, #56]	; (80009fc <UART2_Task+0x74>)
 80009c2:	f007 fa33 	bl	8007e2c <puts>

	        // Reset the accumulate buffer position
	        uart_accumulate_pos = 0;
 80009c6:	4b0c      	ldr	r3, [pc, #48]	; (80009f8 <UART2_Task+0x70>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	801a      	strh	r2, [r3, #0]
 80009cc:	e009      	b.n	80009e2 <UART2_Task+0x5a>
	      } else {
		      // Accumulate the received characters
		      uart_accumulate_buffer[uart_accumulate_pos++] = receivedChar;
 80009ce:	4b0a      	ldr	r3, [pc, #40]	; (80009f8 <UART2_Task+0x70>)
 80009d0:	881b      	ldrh	r3, [r3, #0]
 80009d2:	1c5a      	adds	r2, r3, #1
 80009d4:	b291      	uxth	r1, r2
 80009d6:	4a08      	ldr	r2, [pc, #32]	; (80009f8 <UART2_Task+0x70>)
 80009d8:	8011      	strh	r1, [r2, #0]
 80009da:	461a      	mov	r2, r3
 80009dc:	7bf9      	ldrb	r1, [r7, #15]
 80009de:	4b07      	ldr	r3, [pc, #28]	; (80009fc <UART2_Task+0x74>)
 80009e0:	5499      	strb	r1, [r3, r2]
	      }

	      // Make sure we don't overflow the buffer
	      if (uart_accumulate_pos >= UART_BUFFER_SIZE)
 80009e2:	4b05      	ldr	r3, [pc, #20]	; (80009f8 <UART2_Task+0x70>)
 80009e4:	881b      	ldrh	r3, [r3, #0]
 80009e6:	2b7f      	cmp	r3, #127	; 0x7f
 80009e8:	d9d2      	bls.n	8000990 <UART2_Task+0x8>
	      {
	        uart_accumulate_pos = 0;
 80009ea:	4b03      	ldr	r3, [pc, #12]	; (80009f8 <UART2_Task+0x70>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	801a      	strh	r2, [r3, #0]
	    if (xQueueReceive(uart2QueueHandle, &receivedChar, portMAX_DELAY) == pdPASS)
 80009f0:	e7ce      	b.n	8000990 <UART2_Task+0x8>
 80009f2:	bf00      	nop
 80009f4:	20000178 	.word	0x20000178
 80009f8:	20000200 	.word	0x20000200
 80009fc:	20000180 	.word	0x20000180

08000a00 <UART1_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UART1_Task */
void UART1_Task(void *argument)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART1_Task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a08:	2001      	movs	r0, #1
 8000a0a:	f004 fb9d 	bl	8005148 <osDelay>
 8000a0e:	e7fb      	b.n	8000a08 <UART1_Task+0x8>

08000a10 <LightSensorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LightSensorTask */
void LightSensorTask(void *argument)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LightSensorTask */
	LTR329_Init();
 8000a18:	f7ff fda8 	bl	800056c <LTR329_Init>
	/* Infinite loop */
	  for(;;)
	  {
		// Read light data
		LTR329_Read_Light(&light_ch0, &light_ch1);
 8000a1c:	490a      	ldr	r1, [pc, #40]	; (8000a48 <LightSensorTask+0x38>)
 8000a1e:	480b      	ldr	r0, [pc, #44]	; (8000a4c <LightSensorTask+0x3c>)
 8000a20:	f7ff fdca 	bl	80005b8 <LTR329_Read_Light>
		if (verbose) printf("Light Ch0: %d \n Light Ch1: %d\n________\n\n",light_ch0,light_ch1);
 8000a24:	2300      	movs	r3, #0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d008      	beq.n	8000a3c <LightSensorTask+0x2c>
 8000a2a:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <LightSensorTask+0x3c>)
 8000a2c:	881b      	ldrh	r3, [r3, #0]
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4b05      	ldr	r3, [pc, #20]	; (8000a48 <LightSensorTask+0x38>)
 8000a32:	881b      	ldrh	r3, [r3, #0]
 8000a34:	461a      	mov	r2, r3
 8000a36:	4806      	ldr	r0, [pc, #24]	; (8000a50 <LightSensorTask+0x40>)
 8000a38:	f007 f992 	bl	8007d60 <iprintf>
		osDelay(1000);
 8000a3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a40:	f004 fb82 	bl	8005148 <osDelay>
		LTR329_Read_Light(&light_ch0, &light_ch1);
 8000a44:	e7ea      	b.n	8000a1c <LightSensorTask+0xc>
 8000a46:	bf00      	nop
 8000a48:	20000204 	.word	0x20000204
 8000a4c:	20000202 	.word	0x20000202
 8000a50:	08008c3c 	.word	0x08008c3c

08000a54 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a04      	ldr	r2, [pc, #16]	; (8000a74 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d101      	bne.n	8000a6a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a66:	f000 fa9b 	bl	8000fa0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	3708      	adds	r7, #8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40001000 	.word	0x40001000

08000a78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a7c:	b672      	cpsid	i
}
 8000a7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <Error_Handler+0x8>
	...

08000a84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a8a:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <HAL_MspInit+0x4c>)
 8000a8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a8e:	4a10      	ldr	r2, [pc, #64]	; (8000ad0 <HAL_MspInit+0x4c>)
 8000a90:	f043 0301 	orr.w	r3, r3, #1
 8000a94:	6613      	str	r3, [r2, #96]	; 0x60
 8000a96:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <HAL_MspInit+0x4c>)
 8000a98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a9a:	f003 0301 	and.w	r3, r3, #1
 8000a9e:	607b      	str	r3, [r7, #4]
 8000aa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa2:	4b0b      	ldr	r3, [pc, #44]	; (8000ad0 <HAL_MspInit+0x4c>)
 8000aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aa6:	4a0a      	ldr	r2, [pc, #40]	; (8000ad0 <HAL_MspInit+0x4c>)
 8000aa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aac:	6593      	str	r3, [r2, #88]	; 0x58
 8000aae:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <HAL_MspInit+0x4c>)
 8000ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab6:	603b      	str	r3, [r7, #0]
 8000ab8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000aba:	2200      	movs	r2, #0
 8000abc:	210f      	movs	r1, #15
 8000abe:	f06f 0001 	mvn.w	r0, #1
 8000ac2:	f000 fb45 	bl	8001150 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40021000 	.word	0x40021000

08000ad4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b096      	sub	sp, #88	; 0x58
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000adc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
 8000ae6:	609a      	str	r2, [r3, #8]
 8000ae8:	60da      	str	r2, [r3, #12]
 8000aea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000aec:	f107 0310 	add.w	r3, r7, #16
 8000af0:	2234      	movs	r2, #52	; 0x34
 8000af2:	2100      	movs	r1, #0
 8000af4:	4618      	mov	r0, r3
 8000af6:	f007 f9a1 	bl	8007e3c <memset>
  if(hi2c->Instance==I2C1)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4a1f      	ldr	r2, [pc, #124]	; (8000b7c <HAL_I2C_MspInit+0xa8>)
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d137      	bne.n	8000b74 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000b04:	2340      	movs	r3, #64	; 0x40
 8000b06:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b0c:	f107 0310 	add.w	r3, r7, #16
 8000b10:	4618      	mov	r0, r3
 8000b12:	f002 fa97 	bl	8003044 <HAL_RCCEx_PeriphCLKConfig>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000b1c:	f7ff ffac 	bl	8000a78 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b20:	4b17      	ldr	r3, [pc, #92]	; (8000b80 <HAL_I2C_MspInit+0xac>)
 8000b22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b24:	4a16      	ldr	r2, [pc, #88]	; (8000b80 <HAL_I2C_MspInit+0xac>)
 8000b26:	f043 0301 	orr.w	r3, r3, #1
 8000b2a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b2c:	4b14      	ldr	r3, [pc, #80]	; (8000b80 <HAL_I2C_MspInit+0xac>)
 8000b2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b30:	f003 0301 	and.w	r3, r3, #1
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b38:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b3c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b3e:	2312      	movs	r3, #18
 8000b40:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b46:	2303      	movs	r3, #3
 8000b48:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b4a:	2304      	movs	r3, #4
 8000b4c:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000b52:	4619      	mov	r1, r3
 8000b54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b58:	f000 fba4 	bl	80012a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b5c:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <HAL_I2C_MspInit+0xac>)
 8000b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b60:	4a07      	ldr	r2, [pc, #28]	; (8000b80 <HAL_I2C_MspInit+0xac>)
 8000b62:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b66:	6593      	str	r3, [r2, #88]	; 0x58
 8000b68:	4b05      	ldr	r3, [pc, #20]	; (8000b80 <HAL_I2C_MspInit+0xac>)
 8000b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b70:	60bb      	str	r3, [r7, #8]
 8000b72:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b74:	bf00      	nop
 8000b76:	3758      	adds	r7, #88	; 0x58
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	40005400 	.word	0x40005400
 8000b80:	40021000 	.word	0x40021000

08000b84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b096      	sub	sp, #88	; 0x58
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]
 8000b9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b9c:	f107 0310 	add.w	r3, r7, #16
 8000ba0:	2234      	movs	r2, #52	; 0x34
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f007 f949 	bl	8007e3c <memset>
  if(huart->Instance==USART2)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4a2c      	ldr	r2, [pc, #176]	; (8000c60 <HAL_UART_MspInit+0xdc>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d150      	bne.n	8000c56 <HAL_UART_MspInit+0xd2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bbc:	f107 0310 	add.w	r3, r7, #16
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f002 fa3f 	bl	8003044 <HAL_RCCEx_PeriphCLKConfig>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000bcc:	f7ff ff54 	bl	8000a78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bd0:	4b24      	ldr	r3, [pc, #144]	; (8000c64 <HAL_UART_MspInit+0xe0>)
 8000bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bd4:	4a23      	ldr	r2, [pc, #140]	; (8000c64 <HAL_UART_MspInit+0xe0>)
 8000bd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bda:	6593      	str	r3, [r2, #88]	; 0x58
 8000bdc:	4b21      	ldr	r3, [pc, #132]	; (8000c64 <HAL_UART_MspInit+0xe0>)
 8000bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000be0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000be4:	60fb      	str	r3, [r7, #12]
 8000be6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be8:	4b1e      	ldr	r3, [pc, #120]	; (8000c64 <HAL_UART_MspInit+0xe0>)
 8000bea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bec:	4a1d      	ldr	r2, [pc, #116]	; (8000c64 <HAL_UART_MspInit+0xe0>)
 8000bee:	f043 0301 	orr.w	r3, r3, #1
 8000bf2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bf4:	4b1b      	ldr	r3, [pc, #108]	; (8000c64 <HAL_UART_MspInit+0xe0>)
 8000bf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bf8:	f003 0301 	and.w	r3, r3, #1
 8000bfc:	60bb      	str	r3, [r7, #8]
 8000bfe:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000c00:	2304      	movs	r3, #4
 8000c02:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c04:	2302      	movs	r3, #2
 8000c06:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c0c:	2303      	movs	r3, #3
 8000c0e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c10:	2307      	movs	r3, #7
 8000c12:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000c14:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000c18:	4619      	mov	r1, r3
 8000c1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c1e:	f000 fb41 	bl	80012a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000c22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c26:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c30:	2303      	movs	r3, #3
 8000c32:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000c34:	2303      	movs	r3, #3
 8000c36:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000c38:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c42:	f000 fb2f 	bl	80012a4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000c46:	2200      	movs	r2, #0
 8000c48:	2105      	movs	r1, #5
 8000c4a:	2026      	movs	r0, #38	; 0x26
 8000c4c:	f000 fa80 	bl	8001150 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c50:	2026      	movs	r0, #38	; 0x26
 8000c52:	f000 fa99 	bl	8001188 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c56:	bf00      	nop
 8000c58:	3758      	adds	r7, #88	; 0x58
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40004400 	.word	0x40004400
 8000c64:	40021000 	.word	0x40021000

08000c68 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b08e      	sub	sp, #56	; 0x38
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000c70:	2300      	movs	r3, #0
 8000c72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c76:	4b34      	ldr	r3, [pc, #208]	; (8000d48 <HAL_InitTick+0xe0>)
 8000c78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c7a:	4a33      	ldr	r2, [pc, #204]	; (8000d48 <HAL_InitTick+0xe0>)
 8000c7c:	f043 0310 	orr.w	r3, r3, #16
 8000c80:	6593      	str	r3, [r2, #88]	; 0x58
 8000c82:	4b31      	ldr	r3, [pc, #196]	; (8000d48 <HAL_InitTick+0xe0>)
 8000c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c86:	f003 0310 	and.w	r3, r3, #16
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c8e:	f107 0210 	add.w	r2, r7, #16
 8000c92:	f107 0314 	add.w	r3, r7, #20
 8000c96:	4611      	mov	r1, r2
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f002 f941 	bl	8002f20 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c9e:	6a3b      	ldr	r3, [r7, #32]
 8000ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d103      	bne.n	8000cb0 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ca8:	f002 f90e 	bl	8002ec8 <HAL_RCC_GetPCLK1Freq>
 8000cac:	6378      	str	r0, [r7, #52]	; 0x34
 8000cae:	e004      	b.n	8000cba <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000cb0:	f002 f90a 	bl	8002ec8 <HAL_RCC_GetPCLK1Freq>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	005b      	lsls	r3, r3, #1
 8000cb8:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cbc:	4a23      	ldr	r2, [pc, #140]	; (8000d4c <HAL_InitTick+0xe4>)
 8000cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8000cc2:	0c9b      	lsrs	r3, r3, #18
 8000cc4:	3b01      	subs	r3, #1
 8000cc6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000cc8:	4b21      	ldr	r3, [pc, #132]	; (8000d50 <HAL_InitTick+0xe8>)
 8000cca:	4a22      	ldr	r2, [pc, #136]	; (8000d54 <HAL_InitTick+0xec>)
 8000ccc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000cce:	4b20      	ldr	r3, [pc, #128]	; (8000d50 <HAL_InitTick+0xe8>)
 8000cd0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cd4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000cd6:	4a1e      	ldr	r2, [pc, #120]	; (8000d50 <HAL_InitTick+0xe8>)
 8000cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cda:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000cdc:	4b1c      	ldr	r3, [pc, #112]	; (8000d50 <HAL_InitTick+0xe8>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ce2:	4b1b      	ldr	r3, [pc, #108]	; (8000d50 <HAL_InitTick+0xe8>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ce8:	4b19      	ldr	r3, [pc, #100]	; (8000d50 <HAL_InitTick+0xe8>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000cee:	4818      	ldr	r0, [pc, #96]	; (8000d50 <HAL_InitTick+0xe8>)
 8000cf0:	f002 fb3e 	bl	8003370 <HAL_TIM_Base_Init>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000cfa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d11b      	bne.n	8000d3a <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000d02:	4813      	ldr	r0, [pc, #76]	; (8000d50 <HAL_InitTick+0xe8>)
 8000d04:	f002 fb96 	bl	8003434 <HAL_TIM_Base_Start_IT>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000d0e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d111      	bne.n	8000d3a <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000d16:	2036      	movs	r0, #54	; 0x36
 8000d18:	f000 fa36 	bl	8001188 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2b0f      	cmp	r3, #15
 8000d20:	d808      	bhi.n	8000d34 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8000d22:	2200      	movs	r2, #0
 8000d24:	6879      	ldr	r1, [r7, #4]
 8000d26:	2036      	movs	r0, #54	; 0x36
 8000d28:	f000 fa12 	bl	8001150 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d2c:	4a0a      	ldr	r2, [pc, #40]	; (8000d58 <HAL_InitTick+0xf0>)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6013      	str	r3, [r2, #0]
 8000d32:	e002      	b.n	8000d3a <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000d34:	2301      	movs	r3, #1
 8000d36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000d3a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3738      	adds	r7, #56	; 0x38
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40021000 	.word	0x40021000
 8000d4c:	431bde83 	.word	0x431bde83
 8000d50:	20000208 	.word	0x20000208
 8000d54:	40001000 	.word	0x40001000
 8000d58:	20000004 	.word	0x20000004

08000d5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d60:	e7fe      	b.n	8000d60 <NMI_Handler+0x4>

08000d62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d66:	e7fe      	b.n	8000d66 <HardFault_Handler+0x4>

08000d68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d6c:	e7fe      	b.n	8000d6c <MemManage_Handler+0x4>

08000d6e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d72:	e7fe      	b.n	8000d72 <BusFault_Handler+0x4>

08000d74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d78:	e7fe      	b.n	8000d78 <UsageFault_Handler+0x4>

08000d7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d8c:	4802      	ldr	r0, [pc, #8]	; (8000d98 <USART2_IRQHandler+0x10>)
 8000d8e:	f002 fe75 	bl	8003a7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	200000dc 	.word	0x200000dc

08000d9c <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000da0:	4802      	ldr	r0, [pc, #8]	; (8000dac <TIM6_IRQHandler+0x10>)
 8000da2:	f002 fb9b 	bl	80034dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	20000208 	.word	0x20000208

08000db0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	60f8      	str	r0, [r7, #12]
 8000db8:	60b9      	str	r1, [r7, #8]
 8000dba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	617b      	str	r3, [r7, #20]
 8000dc0:	e00a      	b.n	8000dd8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000dc2:	f3af 8000 	nop.w
 8000dc6:	4601      	mov	r1, r0
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	1c5a      	adds	r2, r3, #1
 8000dcc:	60ba      	str	r2, [r7, #8]
 8000dce:	b2ca      	uxtb	r2, r1
 8000dd0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	617b      	str	r3, [r7, #20]
 8000dd8:	697a      	ldr	r2, [r7, #20]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	dbf0      	blt.n	8000dc2 <_read+0x12>
  }

  return len;
 8000de0:	687b      	ldr	r3, [r7, #4]
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3718      	adds	r7, #24
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}

08000dea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b086      	sub	sp, #24
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	60f8      	str	r0, [r7, #12]
 8000df2:	60b9      	str	r1, [r7, #8]
 8000df4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df6:	2300      	movs	r3, #0
 8000df8:	617b      	str	r3, [r7, #20]
 8000dfa:	e009      	b.n	8000e10 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	1c5a      	adds	r2, r3, #1
 8000e00:	60ba      	str	r2, [r7, #8]
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	4618      	mov	r0, r3
 8000e06:	f7ff fc03 	bl	8000610 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	617b      	str	r3, [r7, #20]
 8000e10:	697a      	ldr	r2, [r7, #20]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	dbf1      	blt.n	8000dfc <_write+0x12>
  }
  return len;
 8000e18:	687b      	ldr	r3, [r7, #4]
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3718      	adds	r7, #24
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <_close>:

int _close(int file)
{
 8000e22:	b480      	push	{r7}
 8000e24:	b083      	sub	sp, #12
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr

08000e3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	b083      	sub	sp, #12
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
 8000e42:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e4a:	605a      	str	r2, [r3, #4]
  return 0;
 8000e4c:	2300      	movs	r3, #0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	370c      	adds	r7, #12
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr

08000e5a <_isatty>:

int _isatty(int file)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	b083      	sub	sp, #12
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e62:	2301      	movs	r3, #1
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b085      	sub	sp, #20
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	60b9      	str	r1, [r7, #8]
 8000e7a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e7c:	2300      	movs	r3, #0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3714      	adds	r7, #20
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
	...

08000e8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e94:	4a14      	ldr	r2, [pc, #80]	; (8000ee8 <_sbrk+0x5c>)
 8000e96:	4b15      	ldr	r3, [pc, #84]	; (8000eec <_sbrk+0x60>)
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ea0:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <_sbrk+0x64>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d102      	bne.n	8000eae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ea8:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <_sbrk+0x64>)
 8000eaa:	4a12      	ldr	r2, [pc, #72]	; (8000ef4 <_sbrk+0x68>)
 8000eac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eae:	4b10      	ldr	r3, [pc, #64]	; (8000ef0 <_sbrk+0x64>)
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d207      	bcs.n	8000ecc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ebc:	f007 f81c 	bl	8007ef8 <__errno>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	220c      	movs	r2, #12
 8000ec4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ec6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000eca:	e009      	b.n	8000ee0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ecc:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <_sbrk+0x64>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ed2:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <_sbrk+0x64>)
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4413      	add	r3, r2
 8000eda:	4a05      	ldr	r2, [pc, #20]	; (8000ef0 <_sbrk+0x64>)
 8000edc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ede:	68fb      	ldr	r3, [r7, #12]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3718      	adds	r7, #24
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	2000a000 	.word	0x2000a000
 8000eec:	00000400 	.word	0x00000400
 8000ef0:	20000254 	.word	0x20000254
 8000ef4:	20002518 	.word	0x20002518

08000ef8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <SystemInit+0x20>)
 8000efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f02:	4a05      	ldr	r2, [pc, #20]	; (8000f18 <SystemInit+0x20>)
 8000f04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f54 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f20:	f7ff ffea 	bl	8000ef8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f24:	480c      	ldr	r0, [pc, #48]	; (8000f58 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f26:	490d      	ldr	r1, [pc, #52]	; (8000f5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f28:	4a0d      	ldr	r2, [pc, #52]	; (8000f60 <LoopForever+0xe>)
  movs r3, #0
 8000f2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f2c:	e002      	b.n	8000f34 <LoopCopyDataInit>

08000f2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f32:	3304      	adds	r3, #4

08000f34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f38:	d3f9      	bcc.n	8000f2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f3a:	4a0a      	ldr	r2, [pc, #40]	; (8000f64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f3c:	4c0a      	ldr	r4, [pc, #40]	; (8000f68 <LoopForever+0x16>)
  movs r3, #0
 8000f3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f40:	e001      	b.n	8000f46 <LoopFillZerobss>

08000f42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f44:	3204      	adds	r2, #4

08000f46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f48:	d3fb      	bcc.n	8000f42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f4a:	f006 ffdb 	bl	8007f04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f4e:	f7ff fb71 	bl	8000634 <main>

08000f52 <LoopForever>:

LoopForever:
    b LoopForever
 8000f52:	e7fe      	b.n	8000f52 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f54:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000f58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f5c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000f60:	08008dcc 	.word	0x08008dcc
  ldr r2, =_sbss
 8000f64:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000f68:	20002518 	.word	0x20002518

08000f6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f6c:	e7fe      	b.n	8000f6c <ADC1_2_IRQHandler>

08000f6e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b082      	sub	sp, #8
 8000f72:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f74:	2300      	movs	r3, #0
 8000f76:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f78:	2003      	movs	r0, #3
 8000f7a:	f000 f8de 	bl	800113a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f7e:	200f      	movs	r0, #15
 8000f80:	f7ff fe72 	bl	8000c68 <HAL_InitTick>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d002      	beq.n	8000f90 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	71fb      	strb	r3, [r7, #7]
 8000f8e:	e001      	b.n	8000f94 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f90:	f7ff fd78 	bl	8000a84 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f94:	79fb      	ldrb	r3, [r7, #7]
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
	...

08000fa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fa4:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <HAL_IncTick+0x20>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	461a      	mov	r2, r3
 8000faa:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <HAL_IncTick+0x24>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4413      	add	r3, r2
 8000fb0:	4a04      	ldr	r2, [pc, #16]	; (8000fc4 <HAL_IncTick+0x24>)
 8000fb2:	6013      	str	r3, [r2, #0]
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	20000008 	.word	0x20000008
 8000fc4:	20000258 	.word	0x20000258

08000fc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  return uwTick;
 8000fcc:	4b03      	ldr	r3, [pc, #12]	; (8000fdc <HAL_GetTick+0x14>)
 8000fce:	681b      	ldr	r3, [r3, #0]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	20000258 	.word	0x20000258

08000fe0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f003 0307 	and.w	r3, r3, #7
 8000fee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ff0:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ff6:	68ba      	ldr	r2, [r7, #8]
 8000ff8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001008:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800100c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001010:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001012:	4a04      	ldr	r2, [pc, #16]	; (8001024 <__NVIC_SetPriorityGrouping+0x44>)
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	60d3      	str	r3, [r2, #12]
}
 8001018:	bf00      	nop
 800101a:	3714      	adds	r7, #20
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800102c:	4b04      	ldr	r3, [pc, #16]	; (8001040 <__NVIC_GetPriorityGrouping+0x18>)
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	0a1b      	lsrs	r3, r3, #8
 8001032:	f003 0307 	and.w	r3, r3, #7
}
 8001036:	4618      	mov	r0, r3
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	e000ed00 	.word	0xe000ed00

08001044 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800104e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001052:	2b00      	cmp	r3, #0
 8001054:	db0b      	blt.n	800106e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	f003 021f 	and.w	r2, r3, #31
 800105c:	4907      	ldr	r1, [pc, #28]	; (800107c <__NVIC_EnableIRQ+0x38>)
 800105e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001062:	095b      	lsrs	r3, r3, #5
 8001064:	2001      	movs	r0, #1
 8001066:	fa00 f202 	lsl.w	r2, r0, r2
 800106a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800106e:	bf00      	nop
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	e000e100 	.word	0xe000e100

08001080 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	6039      	str	r1, [r7, #0]
 800108a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800108c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001090:	2b00      	cmp	r3, #0
 8001092:	db0a      	blt.n	80010aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	b2da      	uxtb	r2, r3
 8001098:	490c      	ldr	r1, [pc, #48]	; (80010cc <__NVIC_SetPriority+0x4c>)
 800109a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109e:	0112      	lsls	r2, r2, #4
 80010a0:	b2d2      	uxtb	r2, r2
 80010a2:	440b      	add	r3, r1
 80010a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010a8:	e00a      	b.n	80010c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	b2da      	uxtb	r2, r3
 80010ae:	4908      	ldr	r1, [pc, #32]	; (80010d0 <__NVIC_SetPriority+0x50>)
 80010b0:	79fb      	ldrb	r3, [r7, #7]
 80010b2:	f003 030f 	and.w	r3, r3, #15
 80010b6:	3b04      	subs	r3, #4
 80010b8:	0112      	lsls	r2, r2, #4
 80010ba:	b2d2      	uxtb	r2, r2
 80010bc:	440b      	add	r3, r1
 80010be:	761a      	strb	r2, [r3, #24]
}
 80010c0:	bf00      	nop
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	e000e100 	.word	0xe000e100
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b089      	sub	sp, #36	; 0x24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	60b9      	str	r1, [r7, #8]
 80010de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	f003 0307 	and.w	r3, r3, #7
 80010e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	f1c3 0307 	rsb	r3, r3, #7
 80010ee:	2b04      	cmp	r3, #4
 80010f0:	bf28      	it	cs
 80010f2:	2304      	movcs	r3, #4
 80010f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	3304      	adds	r3, #4
 80010fa:	2b06      	cmp	r3, #6
 80010fc:	d902      	bls.n	8001104 <NVIC_EncodePriority+0x30>
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	3b03      	subs	r3, #3
 8001102:	e000      	b.n	8001106 <NVIC_EncodePriority+0x32>
 8001104:	2300      	movs	r3, #0
 8001106:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001108:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	43da      	mvns	r2, r3
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	401a      	ands	r2, r3
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800111c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	fa01 f303 	lsl.w	r3, r1, r3
 8001126:	43d9      	mvns	r1, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800112c:	4313      	orrs	r3, r2
         );
}
 800112e:	4618      	mov	r0, r3
 8001130:	3724      	adds	r7, #36	; 0x24
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr

0800113a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b082      	sub	sp, #8
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f7ff ff4c 	bl	8000fe0 <__NVIC_SetPriorityGrouping>
}
 8001148:	bf00      	nop
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}

08001150 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	60b9      	str	r1, [r7, #8]
 800115a:	607a      	str	r2, [r7, #4]
 800115c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800115e:	2300      	movs	r3, #0
 8001160:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001162:	f7ff ff61 	bl	8001028 <__NVIC_GetPriorityGrouping>
 8001166:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001168:	687a      	ldr	r2, [r7, #4]
 800116a:	68b9      	ldr	r1, [r7, #8]
 800116c:	6978      	ldr	r0, [r7, #20]
 800116e:	f7ff ffb1 	bl	80010d4 <NVIC_EncodePriority>
 8001172:	4602      	mov	r2, r0
 8001174:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001178:	4611      	mov	r1, r2
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff ff80 	bl	8001080 <__NVIC_SetPriority>
}
 8001180:	bf00      	nop
 8001182:	3718      	adds	r7, #24
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff ff54 	bl	8001044 <__NVIC_EnableIRQ>
}
 800119c:	bf00      	nop
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b085      	sub	sp, #20
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011ac:	2300      	movs	r3, #0
 80011ae:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	2b02      	cmp	r3, #2
 80011ba:	d008      	beq.n	80011ce <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2204      	movs	r2, #4
 80011c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2200      	movs	r2, #0
 80011c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e022      	b.n	8001214 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f022 020e 	bic.w	r2, r2, #14
 80011dc:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f022 0201 	bic.w	r2, r2, #1
 80011ec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f2:	f003 021c 	and.w	r2, r3, #28
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fa:	2101      	movs	r1, #1
 80011fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001200:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2201      	movs	r2, #1
 8001206:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2200      	movs	r2, #0
 800120e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001212:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001214:	4618      	mov	r0, r3
 8001216:	3714      	adds	r7, #20
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001228:	2300      	movs	r3, #0
 800122a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001232:	b2db      	uxtb	r3, r3
 8001234:	2b02      	cmp	r3, #2
 8001236:	d005      	beq.n	8001244 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2204      	movs	r2, #4
 800123c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	73fb      	strb	r3, [r7, #15]
 8001242:	e029      	b.n	8001298 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f022 020e 	bic.w	r2, r2, #14
 8001252:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f022 0201 	bic.w	r2, r2, #1
 8001262:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001268:	f003 021c 	and.w	r2, r3, #28
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001270:	2101      	movs	r1, #1
 8001272:	fa01 f202 	lsl.w	r2, r1, r2
 8001276:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2201      	movs	r2, #1
 800127c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2200      	movs	r2, #0
 8001284:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800128c:	2b00      	cmp	r3, #0
 800128e:	d003      	beq.n	8001298 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	4798      	blx	r3
    }
  }
  return status;
 8001298:	7bfb      	ldrb	r3, [r7, #15]
}
 800129a:	4618      	mov	r0, r3
 800129c:	3710      	adds	r7, #16
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
	...

080012a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b087      	sub	sp, #28
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012ae:	2300      	movs	r3, #0
 80012b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012b2:	e14e      	b.n	8001552 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	2101      	movs	r1, #1
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	fa01 f303 	lsl.w	r3, r1, r3
 80012c0:	4013      	ands	r3, r2
 80012c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	f000 8140 	beq.w	800154c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f003 0303 	and.w	r3, r3, #3
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d005      	beq.n	80012e4 <HAL_GPIO_Init+0x40>
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f003 0303 	and.w	r3, r3, #3
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	d130      	bne.n	8001346 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	2203      	movs	r2, #3
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	43db      	mvns	r3, r3
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	4013      	ands	r3, r2
 80012fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	68da      	ldr	r2, [r3, #12]
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	693a      	ldr	r2, [r7, #16]
 800130a:	4313      	orrs	r3, r2
 800130c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800131a:	2201      	movs	r2, #1
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	43db      	mvns	r3, r3
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	4013      	ands	r3, r2
 8001328:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	091b      	lsrs	r3, r3, #4
 8001330:	f003 0201 	and.w	r2, r3, #1
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	4313      	orrs	r3, r2
 800133e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f003 0303 	and.w	r3, r3, #3
 800134e:	2b03      	cmp	r3, #3
 8001350:	d017      	beq.n	8001382 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	2203      	movs	r2, #3
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	43db      	mvns	r3, r3
 8001364:	693a      	ldr	r2, [r7, #16]
 8001366:	4013      	ands	r3, r2
 8001368:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	689a      	ldr	r2, [r3, #8]
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	4313      	orrs	r3, r2
 800137a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f003 0303 	and.w	r3, r3, #3
 800138a:	2b02      	cmp	r3, #2
 800138c:	d123      	bne.n	80013d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	08da      	lsrs	r2, r3, #3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	3208      	adds	r2, #8
 8001396:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800139a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	f003 0307 	and.w	r3, r3, #7
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	220f      	movs	r2, #15
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	43db      	mvns	r3, r3
 80013ac:	693a      	ldr	r2, [r7, #16]
 80013ae:	4013      	ands	r3, r2
 80013b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	691a      	ldr	r2, [r3, #16]
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	f003 0307 	and.w	r3, r3, #7
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	08da      	lsrs	r2, r3, #3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	3208      	adds	r2, #8
 80013d0:	6939      	ldr	r1, [r7, #16]
 80013d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	2203      	movs	r2, #3
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	43db      	mvns	r3, r3
 80013e8:	693a      	ldr	r2, [r7, #16]
 80013ea:	4013      	ands	r3, r2
 80013ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f003 0203 	and.w	r2, r3, #3
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	4313      	orrs	r3, r2
 8001402:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001412:	2b00      	cmp	r3, #0
 8001414:	f000 809a 	beq.w	800154c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001418:	4b55      	ldr	r3, [pc, #340]	; (8001570 <HAL_GPIO_Init+0x2cc>)
 800141a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800141c:	4a54      	ldr	r2, [pc, #336]	; (8001570 <HAL_GPIO_Init+0x2cc>)
 800141e:	f043 0301 	orr.w	r3, r3, #1
 8001422:	6613      	str	r3, [r2, #96]	; 0x60
 8001424:	4b52      	ldr	r3, [pc, #328]	; (8001570 <HAL_GPIO_Init+0x2cc>)
 8001426:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001428:	f003 0301 	and.w	r3, r3, #1
 800142c:	60bb      	str	r3, [r7, #8]
 800142e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001430:	4a50      	ldr	r2, [pc, #320]	; (8001574 <HAL_GPIO_Init+0x2d0>)
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	089b      	lsrs	r3, r3, #2
 8001436:	3302      	adds	r3, #2
 8001438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800143c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	f003 0303 	and.w	r3, r3, #3
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	220f      	movs	r2, #15
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	43db      	mvns	r3, r3
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	4013      	ands	r3, r2
 8001452:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800145a:	d013      	beq.n	8001484 <HAL_GPIO_Init+0x1e0>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	4a46      	ldr	r2, [pc, #280]	; (8001578 <HAL_GPIO_Init+0x2d4>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d00d      	beq.n	8001480 <HAL_GPIO_Init+0x1dc>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	4a45      	ldr	r2, [pc, #276]	; (800157c <HAL_GPIO_Init+0x2d8>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d007      	beq.n	800147c <HAL_GPIO_Init+0x1d8>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	4a44      	ldr	r2, [pc, #272]	; (8001580 <HAL_GPIO_Init+0x2dc>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d101      	bne.n	8001478 <HAL_GPIO_Init+0x1d4>
 8001474:	2303      	movs	r3, #3
 8001476:	e006      	b.n	8001486 <HAL_GPIO_Init+0x1e2>
 8001478:	2307      	movs	r3, #7
 800147a:	e004      	b.n	8001486 <HAL_GPIO_Init+0x1e2>
 800147c:	2302      	movs	r3, #2
 800147e:	e002      	b.n	8001486 <HAL_GPIO_Init+0x1e2>
 8001480:	2301      	movs	r3, #1
 8001482:	e000      	b.n	8001486 <HAL_GPIO_Init+0x1e2>
 8001484:	2300      	movs	r3, #0
 8001486:	697a      	ldr	r2, [r7, #20]
 8001488:	f002 0203 	and.w	r2, r2, #3
 800148c:	0092      	lsls	r2, r2, #2
 800148e:	4093      	lsls	r3, r2
 8001490:	693a      	ldr	r2, [r7, #16]
 8001492:	4313      	orrs	r3, r2
 8001494:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001496:	4937      	ldr	r1, [pc, #220]	; (8001574 <HAL_GPIO_Init+0x2d0>)
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	089b      	lsrs	r3, r3, #2
 800149c:	3302      	adds	r3, #2
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014a4:	4b37      	ldr	r3, [pc, #220]	; (8001584 <HAL_GPIO_Init+0x2e0>)
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	43db      	mvns	r3, r3
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	4013      	ands	r3, r2
 80014b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d003      	beq.n	80014c8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80014c0:	693a      	ldr	r2, [r7, #16]
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80014c8:	4a2e      	ldr	r2, [pc, #184]	; (8001584 <HAL_GPIO_Init+0x2e0>)
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80014ce:	4b2d      	ldr	r3, [pc, #180]	; (8001584 <HAL_GPIO_Init+0x2e0>)
 80014d0:	68db      	ldr	r3, [r3, #12]
 80014d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	43db      	mvns	r3, r3
 80014d8:	693a      	ldr	r2, [r7, #16]
 80014da:	4013      	ands	r3, r2
 80014dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d003      	beq.n	80014f2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014f2:	4a24      	ldr	r2, [pc, #144]	; (8001584 <HAL_GPIO_Init+0x2e0>)
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80014f8:	4b22      	ldr	r3, [pc, #136]	; (8001584 <HAL_GPIO_Init+0x2e0>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	43db      	mvns	r3, r3
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	4013      	ands	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001510:	2b00      	cmp	r3, #0
 8001512:	d003      	beq.n	800151c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001514:	693a      	ldr	r2, [r7, #16]
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	4313      	orrs	r3, r2
 800151a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800151c:	4a19      	ldr	r2, [pc, #100]	; (8001584 <HAL_GPIO_Init+0x2e0>)
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001522:	4b18      	ldr	r3, [pc, #96]	; (8001584 <HAL_GPIO_Init+0x2e0>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	43db      	mvns	r3, r3
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	4013      	ands	r3, r2
 8001530:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d003      	beq.n	8001546 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	4313      	orrs	r3, r2
 8001544:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001546:	4a0f      	ldr	r2, [pc, #60]	; (8001584 <HAL_GPIO_Init+0x2e0>)
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	3301      	adds	r3, #1
 8001550:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	fa22 f303 	lsr.w	r3, r2, r3
 800155c:	2b00      	cmp	r3, #0
 800155e:	f47f aea9 	bne.w	80012b4 <HAL_GPIO_Init+0x10>
  }
}
 8001562:	bf00      	nop
 8001564:	bf00      	nop
 8001566:	371c      	adds	r7, #28
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr
 8001570:	40021000 	.word	0x40021000
 8001574:	40010000 	.word	0x40010000
 8001578:	48000400 	.word	0x48000400
 800157c:	48000800 	.word	0x48000800
 8001580:	48000c00 	.word	0x48000c00
 8001584:	40010400 	.word	0x40010400

08001588 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	460b      	mov	r3, r1
 8001592:	807b      	strh	r3, [r7, #2]
 8001594:	4613      	mov	r3, r2
 8001596:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001598:	787b      	ldrb	r3, [r7, #1]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d003      	beq.n	80015a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800159e:	887a      	ldrh	r2, [r7, #2]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015a4:	e002      	b.n	80015ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015a6:	887a      	ldrh	r2, [r7, #2]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015ac:	bf00      	nop
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d101      	bne.n	80015ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e08d      	b.n	80016e6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d106      	bne.n	80015e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2200      	movs	r2, #0
 80015da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f7ff fa78 	bl	8000ad4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2224      	movs	r2, #36	; 0x24
 80015e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f022 0201 	bic.w	r2, r2, #1
 80015fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685a      	ldr	r2, [r3, #4]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001608:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	689a      	ldr	r2, [r3, #8]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001618:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	68db      	ldr	r3, [r3, #12]
 800161e:	2b01      	cmp	r3, #1
 8001620:	d107      	bne.n	8001632 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	689a      	ldr	r2, [r3, #8]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800162e:	609a      	str	r2, [r3, #8]
 8001630:	e006      	b.n	8001640 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	689a      	ldr	r2, [r3, #8]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800163e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	2b02      	cmp	r3, #2
 8001646:	d108      	bne.n	800165a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	685a      	ldr	r2, [r3, #4]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001656:	605a      	str	r2, [r3, #4]
 8001658:	e007      	b.n	800166a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	685a      	ldr	r2, [r3, #4]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001668:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	6812      	ldr	r2, [r2, #0]
 8001674:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001678:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800167c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	68da      	ldr	r2, [r3, #12]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800168c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	691a      	ldr	r2, [r3, #16]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	695b      	ldr	r3, [r3, #20]
 8001696:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	699b      	ldr	r3, [r3, #24]
 800169e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	430a      	orrs	r2, r1
 80016a6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	69d9      	ldr	r1, [r3, #28]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6a1a      	ldr	r2, [r3, #32]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	430a      	orrs	r2, r1
 80016b6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f042 0201 	orr.w	r2, r2, #1
 80016c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2200      	movs	r2, #0
 80016cc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2220      	movs	r2, #32
 80016d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2200      	movs	r2, #0
 80016da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2200      	movs	r2, #0
 80016e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
	...

080016f0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b088      	sub	sp, #32
 80016f4:	af02      	add	r7, sp, #8
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	4608      	mov	r0, r1
 80016fa:	4611      	mov	r1, r2
 80016fc:	461a      	mov	r2, r3
 80016fe:	4603      	mov	r3, r0
 8001700:	817b      	strh	r3, [r7, #10]
 8001702:	460b      	mov	r3, r1
 8001704:	813b      	strh	r3, [r7, #8]
 8001706:	4613      	mov	r3, r2
 8001708:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001710:	b2db      	uxtb	r3, r3
 8001712:	2b20      	cmp	r3, #32
 8001714:	f040 80f9 	bne.w	800190a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001718:	6a3b      	ldr	r3, [r7, #32]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d002      	beq.n	8001724 <HAL_I2C_Mem_Write+0x34>
 800171e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001720:	2b00      	cmp	r3, #0
 8001722:	d105      	bne.n	8001730 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f44f 7200 	mov.w	r2, #512	; 0x200
 800172a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e0ed      	b.n	800190c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001736:	2b01      	cmp	r3, #1
 8001738:	d101      	bne.n	800173e <HAL_I2C_Mem_Write+0x4e>
 800173a:	2302      	movs	r3, #2
 800173c:	e0e6      	b.n	800190c <HAL_I2C_Mem_Write+0x21c>
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	2201      	movs	r2, #1
 8001742:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001746:	f7ff fc3f 	bl	8000fc8 <HAL_GetTick>
 800174a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	9300      	str	r3, [sp, #0]
 8001750:	2319      	movs	r3, #25
 8001752:	2201      	movs	r2, #1
 8001754:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001758:	68f8      	ldr	r0, [r7, #12]
 800175a:	f000 fac3 	bl	8001ce4 <I2C_WaitOnFlagUntilTimeout>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e0d1      	b.n	800190c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	2221      	movs	r2, #33	; 0x21
 800176c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	2240      	movs	r2, #64	; 0x40
 8001774:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	2200      	movs	r2, #0
 800177c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	6a3a      	ldr	r2, [r7, #32]
 8001782:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001788:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	2200      	movs	r2, #0
 800178e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001790:	88f8      	ldrh	r0, [r7, #6]
 8001792:	893a      	ldrh	r2, [r7, #8]
 8001794:	8979      	ldrh	r1, [r7, #10]
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	9301      	str	r3, [sp, #4]
 800179a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800179c:	9300      	str	r3, [sp, #0]
 800179e:	4603      	mov	r3, r0
 80017a0:	68f8      	ldr	r0, [r7, #12]
 80017a2:	f000 f9d3 	bl	8001b4c <I2C_RequestMemoryWrite>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d005      	beq.n	80017b8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2200      	movs	r2, #0
 80017b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e0a9      	b.n	800190c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017bc:	b29b      	uxth	r3, r3
 80017be:	2bff      	cmp	r3, #255	; 0xff
 80017c0:	d90e      	bls.n	80017e0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	22ff      	movs	r2, #255	; 0xff
 80017c6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017cc:	b2da      	uxtb	r2, r3
 80017ce:	8979      	ldrh	r1, [r7, #10]
 80017d0:	2300      	movs	r3, #0
 80017d2:	9300      	str	r3, [sp, #0]
 80017d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017d8:	68f8      	ldr	r0, [r7, #12]
 80017da:	f000 fc3d 	bl	8002058 <I2C_TransferConfig>
 80017de:	e00f      	b.n	8001800 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017e4:	b29a      	uxth	r2, r3
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017ee:	b2da      	uxtb	r2, r3
 80017f0:	8979      	ldrh	r1, [r7, #10]
 80017f2:	2300      	movs	r3, #0
 80017f4:	9300      	str	r3, [sp, #0]
 80017f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017fa:	68f8      	ldr	r0, [r7, #12]
 80017fc:	f000 fc2c 	bl	8002058 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001800:	697a      	ldr	r2, [r7, #20]
 8001802:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001804:	68f8      	ldr	r0, [r7, #12]
 8001806:	f000 fabc 	bl	8001d82 <I2C_WaitOnTXISFlagUntilTimeout>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e07b      	b.n	800190c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001818:	781a      	ldrb	r2, [r3, #0]
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001824:	1c5a      	adds	r2, r3, #1
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800182e:	b29b      	uxth	r3, r3
 8001830:	3b01      	subs	r3, #1
 8001832:	b29a      	uxth	r2, r3
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800183c:	3b01      	subs	r3, #1
 800183e:	b29a      	uxth	r2, r3
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001848:	b29b      	uxth	r3, r3
 800184a:	2b00      	cmp	r3, #0
 800184c:	d034      	beq.n	80018b8 <HAL_I2C_Mem_Write+0x1c8>
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001852:	2b00      	cmp	r3, #0
 8001854:	d130      	bne.n	80018b8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	9300      	str	r3, [sp, #0]
 800185a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800185c:	2200      	movs	r2, #0
 800185e:	2180      	movs	r1, #128	; 0x80
 8001860:	68f8      	ldr	r0, [r7, #12]
 8001862:	f000 fa3f 	bl	8001ce4 <I2C_WaitOnFlagUntilTimeout>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e04d      	b.n	800190c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001874:	b29b      	uxth	r3, r3
 8001876:	2bff      	cmp	r3, #255	; 0xff
 8001878:	d90e      	bls.n	8001898 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	22ff      	movs	r2, #255	; 0xff
 800187e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001884:	b2da      	uxtb	r2, r3
 8001886:	8979      	ldrh	r1, [r7, #10]
 8001888:	2300      	movs	r3, #0
 800188a:	9300      	str	r3, [sp, #0]
 800188c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001890:	68f8      	ldr	r0, [r7, #12]
 8001892:	f000 fbe1 	bl	8002058 <I2C_TransferConfig>
 8001896:	e00f      	b.n	80018b8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800189c:	b29a      	uxth	r2, r3
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018a6:	b2da      	uxtb	r2, r3
 80018a8:	8979      	ldrh	r1, [r7, #10]
 80018aa:	2300      	movs	r3, #0
 80018ac:	9300      	str	r3, [sp, #0]
 80018ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018b2:	68f8      	ldr	r0, [r7, #12]
 80018b4:	f000 fbd0 	bl	8002058 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018bc:	b29b      	uxth	r3, r3
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d19e      	bne.n	8001800 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018c2:	697a      	ldr	r2, [r7, #20]
 80018c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80018c6:	68f8      	ldr	r0, [r7, #12]
 80018c8:	f000 faa2 	bl	8001e10 <I2C_WaitOnSTOPFlagUntilTimeout>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e01a      	b.n	800190c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	2220      	movs	r2, #32
 80018dc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	6859      	ldr	r1, [r3, #4]
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	4b0a      	ldr	r3, [pc, #40]	; (8001914 <HAL_I2C_Mem_Write+0x224>)
 80018ea:	400b      	ands	r3, r1
 80018ec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	2220      	movs	r2, #32
 80018f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	2200      	movs	r2, #0
 80018fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2200      	movs	r2, #0
 8001902:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001906:	2300      	movs	r3, #0
 8001908:	e000      	b.n	800190c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800190a:	2302      	movs	r3, #2
  }
}
 800190c:	4618      	mov	r0, r3
 800190e:	3718      	adds	r7, #24
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	fe00e800 	.word	0xfe00e800

08001918 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b088      	sub	sp, #32
 800191c:	af02      	add	r7, sp, #8
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	4608      	mov	r0, r1
 8001922:	4611      	mov	r1, r2
 8001924:	461a      	mov	r2, r3
 8001926:	4603      	mov	r3, r0
 8001928:	817b      	strh	r3, [r7, #10]
 800192a:	460b      	mov	r3, r1
 800192c:	813b      	strh	r3, [r7, #8]
 800192e:	4613      	mov	r3, r2
 8001930:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001938:	b2db      	uxtb	r3, r3
 800193a:	2b20      	cmp	r3, #32
 800193c:	f040 80fd 	bne.w	8001b3a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001940:	6a3b      	ldr	r3, [r7, #32]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d002      	beq.n	800194c <HAL_I2C_Mem_Read+0x34>
 8001946:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001948:	2b00      	cmp	r3, #0
 800194a:	d105      	bne.n	8001958 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001952:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e0f1      	b.n	8001b3c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800195e:	2b01      	cmp	r3, #1
 8001960:	d101      	bne.n	8001966 <HAL_I2C_Mem_Read+0x4e>
 8001962:	2302      	movs	r3, #2
 8001964:	e0ea      	b.n	8001b3c <HAL_I2C_Mem_Read+0x224>
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2201      	movs	r2, #1
 800196a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800196e:	f7ff fb2b 	bl	8000fc8 <HAL_GetTick>
 8001972:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	9300      	str	r3, [sp, #0]
 8001978:	2319      	movs	r3, #25
 800197a:	2201      	movs	r2, #1
 800197c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001980:	68f8      	ldr	r0, [r7, #12]
 8001982:	f000 f9af 	bl	8001ce4 <I2C_WaitOnFlagUntilTimeout>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e0d5      	b.n	8001b3c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2222      	movs	r2, #34	; 0x22
 8001994:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2240      	movs	r2, #64	; 0x40
 800199c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2200      	movs	r2, #0
 80019a4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	6a3a      	ldr	r2, [r7, #32]
 80019aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80019b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	2200      	movs	r2, #0
 80019b6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80019b8:	88f8      	ldrh	r0, [r7, #6]
 80019ba:	893a      	ldrh	r2, [r7, #8]
 80019bc:	8979      	ldrh	r1, [r7, #10]
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	9301      	str	r3, [sp, #4]
 80019c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019c4:	9300      	str	r3, [sp, #0]
 80019c6:	4603      	mov	r3, r0
 80019c8:	68f8      	ldr	r0, [r7, #12]
 80019ca:	f000 f913 	bl	8001bf4 <I2C_RequestMemoryRead>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d005      	beq.n	80019e0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2200      	movs	r2, #0
 80019d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e0ad      	b.n	8001b3c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	2bff      	cmp	r3, #255	; 0xff
 80019e8:	d90e      	bls.n	8001a08 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	22ff      	movs	r2, #255	; 0xff
 80019ee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019f4:	b2da      	uxtb	r2, r3
 80019f6:	8979      	ldrh	r1, [r7, #10]
 80019f8:	4b52      	ldr	r3, [pc, #328]	; (8001b44 <HAL_I2C_Mem_Read+0x22c>)
 80019fa:	9300      	str	r3, [sp, #0]
 80019fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a00:	68f8      	ldr	r0, [r7, #12]
 8001a02:	f000 fb29 	bl	8002058 <I2C_TransferConfig>
 8001a06:	e00f      	b.n	8001a28 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a0c:	b29a      	uxth	r2, r3
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a16:	b2da      	uxtb	r2, r3
 8001a18:	8979      	ldrh	r1, [r7, #10]
 8001a1a:	4b4a      	ldr	r3, [pc, #296]	; (8001b44 <HAL_I2C_Mem_Read+0x22c>)
 8001a1c:	9300      	str	r3, [sp, #0]
 8001a1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a22:	68f8      	ldr	r0, [r7, #12]
 8001a24:	f000 fb18 	bl	8002058 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	9300      	str	r3, [sp, #0]
 8001a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a2e:	2200      	movs	r2, #0
 8001a30:	2104      	movs	r1, #4
 8001a32:	68f8      	ldr	r0, [r7, #12]
 8001a34:	f000 f956 	bl	8001ce4 <I2C_WaitOnFlagUntilTimeout>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e07c      	b.n	8001b3c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4c:	b2d2      	uxtb	r2, r2
 8001a4e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a54:	1c5a      	adds	r2, r3, #1
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	b29a      	uxth	r2, r3
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	3b01      	subs	r3, #1
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d034      	beq.n	8001ae8 <HAL_I2C_Mem_Read+0x1d0>
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d130      	bne.n	8001ae8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	2180      	movs	r1, #128	; 0x80
 8001a90:	68f8      	ldr	r0, [r7, #12]
 8001a92:	f000 f927 	bl	8001ce4 <I2C_WaitOnFlagUntilTimeout>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e04d      	b.n	8001b3c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aa4:	b29b      	uxth	r3, r3
 8001aa6:	2bff      	cmp	r3, #255	; 0xff
 8001aa8:	d90e      	bls.n	8001ac8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	22ff      	movs	r2, #255	; 0xff
 8001aae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ab4:	b2da      	uxtb	r2, r3
 8001ab6:	8979      	ldrh	r1, [r7, #10]
 8001ab8:	2300      	movs	r3, #0
 8001aba:	9300      	str	r3, [sp, #0]
 8001abc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ac0:	68f8      	ldr	r0, [r7, #12]
 8001ac2:	f000 fac9 	bl	8002058 <I2C_TransferConfig>
 8001ac6:	e00f      	b.n	8001ae8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001acc:	b29a      	uxth	r2, r3
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ad6:	b2da      	uxtb	r2, r3
 8001ad8:	8979      	ldrh	r1, [r7, #10]
 8001ada:	2300      	movs	r3, #0
 8001adc:	9300      	str	r3, [sp, #0]
 8001ade:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ae2:	68f8      	ldr	r0, [r7, #12]
 8001ae4:	f000 fab8 	bl	8002058 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d19a      	bne.n	8001a28 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001af2:	697a      	ldr	r2, [r7, #20]
 8001af4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001af6:	68f8      	ldr	r0, [r7, #12]
 8001af8:	f000 f98a 	bl	8001e10 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e01a      	b.n	8001b3c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2220      	movs	r2, #32
 8001b0c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	6859      	ldr	r1, [r3, #4]
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <HAL_I2C_Mem_Read+0x230>)
 8001b1a:	400b      	ands	r3, r1
 8001b1c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2220      	movs	r2, #32
 8001b22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2200      	movs	r2, #0
 8001b32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001b36:	2300      	movs	r3, #0
 8001b38:	e000      	b.n	8001b3c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001b3a:	2302      	movs	r3, #2
  }
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3718      	adds	r7, #24
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	80002400 	.word	0x80002400
 8001b48:	fe00e800 	.word	0xfe00e800

08001b4c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b086      	sub	sp, #24
 8001b50:	af02      	add	r7, sp, #8
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	4608      	mov	r0, r1
 8001b56:	4611      	mov	r1, r2
 8001b58:	461a      	mov	r2, r3
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	817b      	strh	r3, [r7, #10]
 8001b5e:	460b      	mov	r3, r1
 8001b60:	813b      	strh	r3, [r7, #8]
 8001b62:	4613      	mov	r3, r2
 8001b64:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001b66:	88fb      	ldrh	r3, [r7, #6]
 8001b68:	b2da      	uxtb	r2, r3
 8001b6a:	8979      	ldrh	r1, [r7, #10]
 8001b6c:	4b20      	ldr	r3, [pc, #128]	; (8001bf0 <I2C_RequestMemoryWrite+0xa4>)
 8001b6e:	9300      	str	r3, [sp, #0]
 8001b70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b74:	68f8      	ldr	r0, [r7, #12]
 8001b76:	f000 fa6f 	bl	8002058 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b7a:	69fa      	ldr	r2, [r7, #28]
 8001b7c:	69b9      	ldr	r1, [r7, #24]
 8001b7e:	68f8      	ldr	r0, [r7, #12]
 8001b80:	f000 f8ff 	bl	8001d82 <I2C_WaitOnTXISFlagUntilTimeout>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e02c      	b.n	8001be8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001b8e:	88fb      	ldrh	r3, [r7, #6]
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d105      	bne.n	8001ba0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001b94:	893b      	ldrh	r3, [r7, #8]
 8001b96:	b2da      	uxtb	r2, r3
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	629a      	str	r2, [r3, #40]	; 0x28
 8001b9e:	e015      	b.n	8001bcc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001ba0:	893b      	ldrh	r3, [r7, #8]
 8001ba2:	0a1b      	lsrs	r3, r3, #8
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	b2da      	uxtb	r2, r3
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bae:	69fa      	ldr	r2, [r7, #28]
 8001bb0:	69b9      	ldr	r1, [r7, #24]
 8001bb2:	68f8      	ldr	r0, [r7, #12]
 8001bb4:	f000 f8e5 	bl	8001d82 <I2C_WaitOnTXISFlagUntilTimeout>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e012      	b.n	8001be8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001bc2:	893b      	ldrh	r3, [r7, #8]
 8001bc4:	b2da      	uxtb	r2, r3
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	9300      	str	r3, [sp, #0]
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	2180      	movs	r1, #128	; 0x80
 8001bd6:	68f8      	ldr	r0, [r7, #12]
 8001bd8:	f000 f884 	bl	8001ce4 <I2C_WaitOnFlagUntilTimeout>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e000      	b.n	8001be8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001be6:	2300      	movs	r3, #0
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3710      	adds	r7, #16
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	80002000 	.word	0x80002000

08001bf4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af02      	add	r7, sp, #8
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	4608      	mov	r0, r1
 8001bfe:	4611      	mov	r1, r2
 8001c00:	461a      	mov	r2, r3
 8001c02:	4603      	mov	r3, r0
 8001c04:	817b      	strh	r3, [r7, #10]
 8001c06:	460b      	mov	r3, r1
 8001c08:	813b      	strh	r3, [r7, #8]
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001c0e:	88fb      	ldrh	r3, [r7, #6]
 8001c10:	b2da      	uxtb	r2, r3
 8001c12:	8979      	ldrh	r1, [r7, #10]
 8001c14:	4b20      	ldr	r3, [pc, #128]	; (8001c98 <I2C_RequestMemoryRead+0xa4>)
 8001c16:	9300      	str	r3, [sp, #0]
 8001c18:	2300      	movs	r3, #0
 8001c1a:	68f8      	ldr	r0, [r7, #12]
 8001c1c:	f000 fa1c 	bl	8002058 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c20:	69fa      	ldr	r2, [r7, #28]
 8001c22:	69b9      	ldr	r1, [r7, #24]
 8001c24:	68f8      	ldr	r0, [r7, #12]
 8001c26:	f000 f8ac 	bl	8001d82 <I2C_WaitOnTXISFlagUntilTimeout>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e02c      	b.n	8001c8e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001c34:	88fb      	ldrh	r3, [r7, #6]
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d105      	bne.n	8001c46 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001c3a:	893b      	ldrh	r3, [r7, #8]
 8001c3c:	b2da      	uxtb	r2, r3
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	629a      	str	r2, [r3, #40]	; 0x28
 8001c44:	e015      	b.n	8001c72 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001c46:	893b      	ldrh	r3, [r7, #8]
 8001c48:	0a1b      	lsrs	r3, r3, #8
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	b2da      	uxtb	r2, r3
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c54:	69fa      	ldr	r2, [r7, #28]
 8001c56:	69b9      	ldr	r1, [r7, #24]
 8001c58:	68f8      	ldr	r0, [r7, #12]
 8001c5a:	f000 f892 	bl	8001d82 <I2C_WaitOnTXISFlagUntilTimeout>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e012      	b.n	8001c8e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001c68:	893b      	ldrh	r3, [r7, #8]
 8001c6a:	b2da      	uxtb	r2, r3
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	9300      	str	r3, [sp, #0]
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	2140      	movs	r1, #64	; 0x40
 8001c7c:	68f8      	ldr	r0, [r7, #12]
 8001c7e:	f000 f831 	bl	8001ce4 <I2C_WaitOnFlagUntilTimeout>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e000      	b.n	8001c8e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3710      	adds	r7, #16
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	80002000 	.word	0x80002000

08001c9c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	699b      	ldr	r3, [r3, #24]
 8001caa:	f003 0302 	and.w	r3, r3, #2
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d103      	bne.n	8001cba <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	699b      	ldr	r3, [r3, #24]
 8001cc0:	f003 0301 	and.w	r3, r3, #1
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d007      	beq.n	8001cd8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	699a      	ldr	r2, [r3, #24]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f042 0201 	orr.w	r2, r2, #1
 8001cd6:	619a      	str	r2, [r3, #24]
  }
}
 8001cd8:	bf00      	nop
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	603b      	str	r3, [r7, #0]
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001cf4:	e031      	b.n	8001d5a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001cfc:	d02d      	beq.n	8001d5a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cfe:	f7ff f963 	bl	8000fc8 <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	683a      	ldr	r2, [r7, #0]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d302      	bcc.n	8001d14 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d122      	bne.n	8001d5a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	699a      	ldr	r2, [r3, #24]
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	68ba      	ldr	r2, [r7, #8]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	bf0c      	ite	eq
 8001d24:	2301      	moveq	r3, #1
 8001d26:	2300      	movne	r3, #0
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	79fb      	ldrb	r3, [r7, #7]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d113      	bne.n	8001d5a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d36:	f043 0220 	orr.w	r2, r3, #32
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2220      	movs	r2, #32
 8001d42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2200      	movs	r2, #0
 8001d52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e00f      	b.n	8001d7a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	699a      	ldr	r2, [r3, #24]
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	4013      	ands	r3, r2
 8001d64:	68ba      	ldr	r2, [r7, #8]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	bf0c      	ite	eq
 8001d6a:	2301      	moveq	r3, #1
 8001d6c:	2300      	movne	r3, #0
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	461a      	mov	r2, r3
 8001d72:	79fb      	ldrb	r3, [r7, #7]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d0be      	beq.n	8001cf6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3710      	adds	r7, #16
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b084      	sub	sp, #16
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	60f8      	str	r0, [r7, #12]
 8001d8a:	60b9      	str	r1, [r7, #8]
 8001d8c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001d8e:	e033      	b.n	8001df8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	68b9      	ldr	r1, [r7, #8]
 8001d94:	68f8      	ldr	r0, [r7, #12]
 8001d96:	f000 f87f 	bl	8001e98 <I2C_IsErrorOccurred>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e031      	b.n	8001e08 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001daa:	d025      	beq.n	8001df8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dac:	f7ff f90c 	bl	8000fc8 <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	68ba      	ldr	r2, [r7, #8]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d302      	bcc.n	8001dc2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d11a      	bne.n	8001df8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	f003 0302 	and.w	r3, r3, #2
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d013      	beq.n	8001df8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd4:	f043 0220 	orr.w	r2, r3, #32
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2220      	movs	r2, #32
 8001de0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2200      	movs	r2, #0
 8001de8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2200      	movs	r2, #0
 8001df0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e007      	b.n	8001e08 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	699b      	ldr	r3, [r3, #24]
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d1c4      	bne.n	8001d90 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001e06:	2300      	movs	r3, #0
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3710      	adds	r7, #16
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	60b9      	str	r1, [r7, #8]
 8001e1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e1c:	e02f      	b.n	8001e7e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	68b9      	ldr	r1, [r7, #8]
 8001e22:	68f8      	ldr	r0, [r7, #12]
 8001e24:	f000 f838 	bl	8001e98 <I2C_IsErrorOccurred>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e02d      	b.n	8001e8e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e32:	f7ff f8c9 	bl	8000fc8 <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	68ba      	ldr	r2, [r7, #8]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d302      	bcc.n	8001e48 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d11a      	bne.n	8001e7e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	699b      	ldr	r3, [r3, #24]
 8001e4e:	f003 0320 	and.w	r3, r3, #32
 8001e52:	2b20      	cmp	r3, #32
 8001e54:	d013      	beq.n	8001e7e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5a:	f043 0220 	orr.w	r2, r3, #32
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2220      	movs	r2, #32
 8001e66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2200      	movs	r2, #0
 8001e76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e007      	b.n	8001e8e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	699b      	ldr	r3, [r3, #24]
 8001e84:	f003 0320 	and.w	r3, r3, #32
 8001e88:	2b20      	cmp	r3, #32
 8001e8a:	d1c8      	bne.n	8001e1e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
	...

08001e98 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b08a      	sub	sp, #40	; 0x28
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	60b9      	str	r1, [r7, #8]
 8001ea2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	699b      	ldr	r3, [r3, #24]
 8001eb0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	f003 0310 	and.w	r3, r3, #16
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d068      	beq.n	8001f96 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2210      	movs	r2, #16
 8001eca:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001ecc:	e049      	b.n	8001f62 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ed4:	d045      	beq.n	8001f62 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001ed6:	f7ff f877 	bl	8000fc8 <HAL_GetTick>
 8001eda:	4602      	mov	r2, r0
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	68ba      	ldr	r2, [r7, #8]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d302      	bcc.n	8001eec <I2C_IsErrorOccurred+0x54>
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d13a      	bne.n	8001f62 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ef6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001efe:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	699b      	ldr	r3, [r3, #24]
 8001f06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f0e:	d121      	bne.n	8001f54 <I2C_IsErrorOccurred+0xbc>
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f16:	d01d      	beq.n	8001f54 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001f18:	7cfb      	ldrb	r3, [r7, #19]
 8001f1a:	2b20      	cmp	r3, #32
 8001f1c:	d01a      	beq.n	8001f54 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	685a      	ldr	r2, [r3, #4]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f2c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001f2e:	f7ff f84b 	bl	8000fc8 <HAL_GetTick>
 8001f32:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f34:	e00e      	b.n	8001f54 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001f36:	f7ff f847 	bl	8000fc8 <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	2b19      	cmp	r3, #25
 8001f42:	d907      	bls.n	8001f54 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001f44:	6a3b      	ldr	r3, [r7, #32]
 8001f46:	f043 0320 	orr.w	r3, r3, #32
 8001f4a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8001f52:	e006      	b.n	8001f62 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	699b      	ldr	r3, [r3, #24]
 8001f5a:	f003 0320 	and.w	r3, r3, #32
 8001f5e:	2b20      	cmp	r3, #32
 8001f60:	d1e9      	bne.n	8001f36 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	f003 0320 	and.w	r3, r3, #32
 8001f6c:	2b20      	cmp	r3, #32
 8001f6e:	d003      	beq.n	8001f78 <I2C_IsErrorOccurred+0xe0>
 8001f70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d0aa      	beq.n	8001ece <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001f78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d103      	bne.n	8001f88 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2220      	movs	r2, #32
 8001f86:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001f88:	6a3b      	ldr	r3, [r7, #32]
 8001f8a:	f043 0304 	orr.w	r3, r3, #4
 8001f8e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	699b      	ldr	r3, [r3, #24]
 8001f9c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d00b      	beq.n	8001fc0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001fa8:	6a3b      	ldr	r3, [r7, #32]
 8001faa:	f043 0301 	orr.w	r3, r3, #1
 8001fae:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fb8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d00b      	beq.n	8001fe2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001fca:	6a3b      	ldr	r3, [r7, #32]
 8001fcc:	f043 0308 	orr.w	r3, r3, #8
 8001fd0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fda:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d00b      	beq.n	8002004 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001fec:	6a3b      	ldr	r3, [r7, #32]
 8001fee:	f043 0302 	orr.w	r3, r3, #2
 8001ff2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ffc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002004:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002008:	2b00      	cmp	r3, #0
 800200a:	d01c      	beq.n	8002046 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800200c:	68f8      	ldr	r0, [r7, #12]
 800200e:	f7ff fe45 	bl	8001c9c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	6859      	ldr	r1, [r3, #4]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	4b0d      	ldr	r3, [pc, #52]	; (8002054 <I2C_IsErrorOccurred+0x1bc>)
 800201e:	400b      	ands	r3, r1
 8002020:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002026:	6a3b      	ldr	r3, [r7, #32]
 8002028:	431a      	orrs	r2, r3
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2220      	movs	r2, #32
 8002032:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2200      	movs	r2, #0
 800203a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002046:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800204a:	4618      	mov	r0, r3
 800204c:	3728      	adds	r7, #40	; 0x28
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	fe00e800 	.word	0xfe00e800

08002058 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002058:	b480      	push	{r7}
 800205a:	b087      	sub	sp, #28
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	607b      	str	r3, [r7, #4]
 8002062:	460b      	mov	r3, r1
 8002064:	817b      	strh	r3, [r7, #10]
 8002066:	4613      	mov	r3, r2
 8002068:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800206a:	897b      	ldrh	r3, [r7, #10]
 800206c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002070:	7a7b      	ldrb	r3, [r7, #9]
 8002072:	041b      	lsls	r3, r3, #16
 8002074:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002078:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800207e:	6a3b      	ldr	r3, [r7, #32]
 8002080:	4313      	orrs	r3, r2
 8002082:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002086:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	685a      	ldr	r2, [r3, #4]
 800208e:	6a3b      	ldr	r3, [r7, #32]
 8002090:	0d5b      	lsrs	r3, r3, #21
 8002092:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002096:	4b08      	ldr	r3, [pc, #32]	; (80020b8 <I2C_TransferConfig+0x60>)
 8002098:	430b      	orrs	r3, r1
 800209a:	43db      	mvns	r3, r3
 800209c:	ea02 0103 	and.w	r1, r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	697a      	ldr	r2, [r7, #20]
 80020a6:	430a      	orrs	r2, r1
 80020a8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80020aa:	bf00      	nop
 80020ac:	371c      	adds	r7, #28
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	03ff63ff 	.word	0x03ff63ff

080020bc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	2b20      	cmp	r3, #32
 80020d0:	d138      	bne.n	8002144 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d101      	bne.n	80020e0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80020dc:	2302      	movs	r3, #2
 80020de:	e032      	b.n	8002146 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2224      	movs	r2, #36	; 0x24
 80020ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f022 0201 	bic.w	r2, r2, #1
 80020fe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800210e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	6819      	ldr	r1, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	683a      	ldr	r2, [r7, #0]
 800211c:	430a      	orrs	r2, r1
 800211e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f042 0201 	orr.w	r2, r2, #1
 800212e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2220      	movs	r2, #32
 8002134:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002140:	2300      	movs	r3, #0
 8002142:	e000      	b.n	8002146 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002144:	2302      	movs	r3, #2
  }
}
 8002146:	4618      	mov	r0, r3
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr

08002152 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002152:	b480      	push	{r7}
 8002154:	b085      	sub	sp, #20
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
 800215a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002162:	b2db      	uxtb	r3, r3
 8002164:	2b20      	cmp	r3, #32
 8002166:	d139      	bne.n	80021dc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800216e:	2b01      	cmp	r3, #1
 8002170:	d101      	bne.n	8002176 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002172:	2302      	movs	r3, #2
 8002174:	e033      	b.n	80021de <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2201      	movs	r2, #1
 800217a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2224      	movs	r2, #36	; 0x24
 8002182:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f022 0201 	bic.w	r2, r2, #1
 8002194:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80021a4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	021b      	lsls	r3, r3, #8
 80021aa:	68fa      	ldr	r2, [r7, #12]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	68fa      	ldr	r2, [r7, #12]
 80021b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f042 0201 	orr.w	r2, r2, #1
 80021c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2220      	movs	r2, #32
 80021cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80021d8:	2300      	movs	r3, #0
 80021da:	e000      	b.n	80021de <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80021dc:	2302      	movs	r3, #2
  }
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3714      	adds	r7, #20
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
	...

080021ec <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021f0:	4b05      	ldr	r3, [pc, #20]	; (8002208 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a04      	ldr	r2, [pc, #16]	; (8002208 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80021f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021fa:	6013      	str	r3, [r2, #0]
}
 80021fc:	bf00      	nop
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	40007000 	.word	0x40007000

0800220c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002210:	4b04      	ldr	r3, [pc, #16]	; (8002224 <HAL_PWREx_GetVoltageRange+0x18>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002218:	4618      	mov	r0, r3
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	40007000 	.word	0x40007000

08002228 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002236:	d130      	bne.n	800229a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002238:	4b23      	ldr	r3, [pc, #140]	; (80022c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002240:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002244:	d038      	beq.n	80022b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002246:	4b20      	ldr	r3, [pc, #128]	; (80022c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800224e:	4a1e      	ldr	r2, [pc, #120]	; (80022c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002250:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002254:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002256:	4b1d      	ldr	r3, [pc, #116]	; (80022cc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2232      	movs	r2, #50	; 0x32
 800225c:	fb02 f303 	mul.w	r3, r2, r3
 8002260:	4a1b      	ldr	r2, [pc, #108]	; (80022d0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002262:	fba2 2303 	umull	r2, r3, r2, r3
 8002266:	0c9b      	lsrs	r3, r3, #18
 8002268:	3301      	adds	r3, #1
 800226a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800226c:	e002      	b.n	8002274 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	3b01      	subs	r3, #1
 8002272:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002274:	4b14      	ldr	r3, [pc, #80]	; (80022c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002276:	695b      	ldr	r3, [r3, #20]
 8002278:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800227c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002280:	d102      	bne.n	8002288 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d1f2      	bne.n	800226e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002288:	4b0f      	ldr	r3, [pc, #60]	; (80022c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800228a:	695b      	ldr	r3, [r3, #20]
 800228c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002290:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002294:	d110      	bne.n	80022b8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e00f      	b.n	80022ba <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800229a:	4b0b      	ldr	r3, [pc, #44]	; (80022c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80022a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022a6:	d007      	beq.n	80022b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80022a8:	4b07      	ldr	r3, [pc, #28]	; (80022c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80022b0:	4a05      	ldr	r2, [pc, #20]	; (80022c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022b6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3714      	adds	r7, #20
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	40007000 	.word	0x40007000
 80022cc:	20000000 	.word	0x20000000
 80022d0:	431bde83 	.word	0x431bde83

080022d4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b08a      	sub	sp, #40	; 0x28
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d102      	bne.n	80022e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	f000 bc4f 	b.w	8002b86 <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022e8:	4b97      	ldr	r3, [pc, #604]	; (8002548 <HAL_RCC_OscConfig+0x274>)
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	f003 030c 	and.w	r3, r3, #12
 80022f0:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022f2:	4b95      	ldr	r3, [pc, #596]	; (8002548 <HAL_RCC_OscConfig+0x274>)
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	f003 0303 	and.w	r3, r3, #3
 80022fa:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0310 	and.w	r3, r3, #16
 8002304:	2b00      	cmp	r3, #0
 8002306:	f000 80e6 	beq.w	80024d6 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800230a:	6a3b      	ldr	r3, [r7, #32]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d007      	beq.n	8002320 <HAL_RCC_OscConfig+0x4c>
 8002310:	6a3b      	ldr	r3, [r7, #32]
 8002312:	2b0c      	cmp	r3, #12
 8002314:	f040 808d 	bne.w	8002432 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	2b01      	cmp	r3, #1
 800231c:	f040 8089 	bne.w	8002432 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002320:	4b89      	ldr	r3, [pc, #548]	; (8002548 <HAL_RCC_OscConfig+0x274>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0302 	and.w	r3, r3, #2
 8002328:	2b00      	cmp	r3, #0
 800232a:	d006      	beq.n	800233a <HAL_RCC_OscConfig+0x66>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	69db      	ldr	r3, [r3, #28]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d102      	bne.n	800233a <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	f000 bc26 	b.w	8002b86 <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800233e:	4b82      	ldr	r3, [pc, #520]	; (8002548 <HAL_RCC_OscConfig+0x274>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0308 	and.w	r3, r3, #8
 8002346:	2b00      	cmp	r3, #0
 8002348:	d004      	beq.n	8002354 <HAL_RCC_OscConfig+0x80>
 800234a:	4b7f      	ldr	r3, [pc, #508]	; (8002548 <HAL_RCC_OscConfig+0x274>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002352:	e005      	b.n	8002360 <HAL_RCC_OscConfig+0x8c>
 8002354:	4b7c      	ldr	r3, [pc, #496]	; (8002548 <HAL_RCC_OscConfig+0x274>)
 8002356:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800235a:	091b      	lsrs	r3, r3, #4
 800235c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002360:	4293      	cmp	r3, r2
 8002362:	d224      	bcs.n	80023ae <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002368:	4618      	mov	r0, r3
 800236a:	f000 fe0b 	bl	8002f84 <RCC_SetFlashLatencyFromMSIRange>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d002      	beq.n	800237a <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	f000 bc06 	b.w	8002b86 <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800237a:	4b73      	ldr	r3, [pc, #460]	; (8002548 <HAL_RCC_OscConfig+0x274>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a72      	ldr	r2, [pc, #456]	; (8002548 <HAL_RCC_OscConfig+0x274>)
 8002380:	f043 0308 	orr.w	r3, r3, #8
 8002384:	6013      	str	r3, [r2, #0]
 8002386:	4b70      	ldr	r3, [pc, #448]	; (8002548 <HAL_RCC_OscConfig+0x274>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002392:	496d      	ldr	r1, [pc, #436]	; (8002548 <HAL_RCC_OscConfig+0x274>)
 8002394:	4313      	orrs	r3, r2
 8002396:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002398:	4b6b      	ldr	r3, [pc, #428]	; (8002548 <HAL_RCC_OscConfig+0x274>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6a1b      	ldr	r3, [r3, #32]
 80023a4:	021b      	lsls	r3, r3, #8
 80023a6:	4968      	ldr	r1, [pc, #416]	; (8002548 <HAL_RCC_OscConfig+0x274>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	604b      	str	r3, [r1, #4]
 80023ac:	e025      	b.n	80023fa <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023ae:	4b66      	ldr	r3, [pc, #408]	; (8002548 <HAL_RCC_OscConfig+0x274>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a65      	ldr	r2, [pc, #404]	; (8002548 <HAL_RCC_OscConfig+0x274>)
 80023b4:	f043 0308 	orr.w	r3, r3, #8
 80023b8:	6013      	str	r3, [r2, #0]
 80023ba:	4b63      	ldr	r3, [pc, #396]	; (8002548 <HAL_RCC_OscConfig+0x274>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c6:	4960      	ldr	r1, [pc, #384]	; (8002548 <HAL_RCC_OscConfig+0x274>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023cc:	4b5e      	ldr	r3, [pc, #376]	; (8002548 <HAL_RCC_OscConfig+0x274>)
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a1b      	ldr	r3, [r3, #32]
 80023d8:	021b      	lsls	r3, r3, #8
 80023da:	495b      	ldr	r1, [pc, #364]	; (8002548 <HAL_RCC_OscConfig+0x274>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023e0:	6a3b      	ldr	r3, [r7, #32]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d109      	bne.n	80023fa <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ea:	4618      	mov	r0, r3
 80023ec:	f000 fdca 	bl	8002f84 <RCC_SetFlashLatencyFromMSIRange>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e3c5      	b.n	8002b86 <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023fa:	f000 fccd 	bl	8002d98 <HAL_RCC_GetSysClockFreq>
 80023fe:	4602      	mov	r2, r0
 8002400:	4b51      	ldr	r3, [pc, #324]	; (8002548 <HAL_RCC_OscConfig+0x274>)
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	091b      	lsrs	r3, r3, #4
 8002406:	f003 030f 	and.w	r3, r3, #15
 800240a:	4950      	ldr	r1, [pc, #320]	; (800254c <HAL_RCC_OscConfig+0x278>)
 800240c:	5ccb      	ldrb	r3, [r1, r3]
 800240e:	f003 031f 	and.w	r3, r3, #31
 8002412:	fa22 f303 	lsr.w	r3, r2, r3
 8002416:	4a4e      	ldr	r2, [pc, #312]	; (8002550 <HAL_RCC_OscConfig+0x27c>)
 8002418:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800241a:	4b4e      	ldr	r3, [pc, #312]	; (8002554 <HAL_RCC_OscConfig+0x280>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4618      	mov	r0, r3
 8002420:	f7fe fc22 	bl	8000c68 <HAL_InitTick>
 8002424:	4603      	mov	r3, r0
 8002426:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8002428:	7dfb      	ldrb	r3, [r7, #23]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d052      	beq.n	80024d4 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 800242e:	7dfb      	ldrb	r3, [r7, #23]
 8002430:	e3a9      	b.n	8002b86 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	69db      	ldr	r3, [r3, #28]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d032      	beq.n	80024a0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800243a:	4b43      	ldr	r3, [pc, #268]	; (8002548 <HAL_RCC_OscConfig+0x274>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a42      	ldr	r2, [pc, #264]	; (8002548 <HAL_RCC_OscConfig+0x274>)
 8002440:	f043 0301 	orr.w	r3, r3, #1
 8002444:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002446:	f7fe fdbf 	bl	8000fc8 <HAL_GetTick>
 800244a:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800244c:	e008      	b.n	8002460 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800244e:	f7fe fdbb 	bl	8000fc8 <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	2b02      	cmp	r3, #2
 800245a:	d901      	bls.n	8002460 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e392      	b.n	8002b86 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002460:	4b39      	ldr	r3, [pc, #228]	; (8002548 <HAL_RCC_OscConfig+0x274>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0302 	and.w	r3, r3, #2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d0f0      	beq.n	800244e <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800246c:	4b36      	ldr	r3, [pc, #216]	; (8002548 <HAL_RCC_OscConfig+0x274>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a35      	ldr	r2, [pc, #212]	; (8002548 <HAL_RCC_OscConfig+0x274>)
 8002472:	f043 0308 	orr.w	r3, r3, #8
 8002476:	6013      	str	r3, [r2, #0]
 8002478:	4b33      	ldr	r3, [pc, #204]	; (8002548 <HAL_RCC_OscConfig+0x274>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002484:	4930      	ldr	r1, [pc, #192]	; (8002548 <HAL_RCC_OscConfig+0x274>)
 8002486:	4313      	orrs	r3, r2
 8002488:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800248a:	4b2f      	ldr	r3, [pc, #188]	; (8002548 <HAL_RCC_OscConfig+0x274>)
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a1b      	ldr	r3, [r3, #32]
 8002496:	021b      	lsls	r3, r3, #8
 8002498:	492b      	ldr	r1, [pc, #172]	; (8002548 <HAL_RCC_OscConfig+0x274>)
 800249a:	4313      	orrs	r3, r2
 800249c:	604b      	str	r3, [r1, #4]
 800249e:	e01a      	b.n	80024d6 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80024a0:	4b29      	ldr	r3, [pc, #164]	; (8002548 <HAL_RCC_OscConfig+0x274>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a28      	ldr	r2, [pc, #160]	; (8002548 <HAL_RCC_OscConfig+0x274>)
 80024a6:	f023 0301 	bic.w	r3, r3, #1
 80024aa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80024ac:	f7fe fd8c 	bl	8000fc8 <HAL_GetTick>
 80024b0:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80024b2:	e008      	b.n	80024c6 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024b4:	f7fe fd88 	bl	8000fc8 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e35f      	b.n	8002b86 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80024c6:	4b20      	ldr	r3, [pc, #128]	; (8002548 <HAL_RCC_OscConfig+0x274>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d1f0      	bne.n	80024b4 <HAL_RCC_OscConfig+0x1e0>
 80024d2:	e000      	b.n	80024d6 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80024d4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d073      	beq.n	80025ca <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80024e2:	6a3b      	ldr	r3, [r7, #32]
 80024e4:	2b08      	cmp	r3, #8
 80024e6:	d005      	beq.n	80024f4 <HAL_RCC_OscConfig+0x220>
 80024e8:	6a3b      	ldr	r3, [r7, #32]
 80024ea:	2b0c      	cmp	r3, #12
 80024ec:	d10e      	bne.n	800250c <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	2b03      	cmp	r3, #3
 80024f2:	d10b      	bne.n	800250c <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024f4:	4b14      	ldr	r3, [pc, #80]	; (8002548 <HAL_RCC_OscConfig+0x274>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d063      	beq.n	80025c8 <HAL_RCC_OscConfig+0x2f4>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d15f      	bne.n	80025c8 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e33c      	b.n	8002b86 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002514:	d106      	bne.n	8002524 <HAL_RCC_OscConfig+0x250>
 8002516:	4b0c      	ldr	r3, [pc, #48]	; (8002548 <HAL_RCC_OscConfig+0x274>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a0b      	ldr	r2, [pc, #44]	; (8002548 <HAL_RCC_OscConfig+0x274>)
 800251c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002520:	6013      	str	r3, [r2, #0]
 8002522:	e025      	b.n	8002570 <HAL_RCC_OscConfig+0x29c>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800252c:	d114      	bne.n	8002558 <HAL_RCC_OscConfig+0x284>
 800252e:	4b06      	ldr	r3, [pc, #24]	; (8002548 <HAL_RCC_OscConfig+0x274>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a05      	ldr	r2, [pc, #20]	; (8002548 <HAL_RCC_OscConfig+0x274>)
 8002534:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002538:	6013      	str	r3, [r2, #0]
 800253a:	4b03      	ldr	r3, [pc, #12]	; (8002548 <HAL_RCC_OscConfig+0x274>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a02      	ldr	r2, [pc, #8]	; (8002548 <HAL_RCC_OscConfig+0x274>)
 8002540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002544:	6013      	str	r3, [r2, #0]
 8002546:	e013      	b.n	8002570 <HAL_RCC_OscConfig+0x29c>
 8002548:	40021000 	.word	0x40021000
 800254c:	08008d40 	.word	0x08008d40
 8002550:	20000000 	.word	0x20000000
 8002554:	20000004 	.word	0x20000004
 8002558:	4b8f      	ldr	r3, [pc, #572]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a8e      	ldr	r2, [pc, #568]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 800255e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002562:	6013      	str	r3, [r2, #0]
 8002564:	4b8c      	ldr	r3, [pc, #560]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a8b      	ldr	r2, [pc, #556]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 800256a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800256e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d013      	beq.n	80025a0 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002578:	f7fe fd26 	bl	8000fc8 <HAL_GetTick>
 800257c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800257e:	e008      	b.n	8002592 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002580:	f7fe fd22 	bl	8000fc8 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b64      	cmp	r3, #100	; 0x64
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e2f9      	b.n	8002b86 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002592:	4b81      	ldr	r3, [pc, #516]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d0f0      	beq.n	8002580 <HAL_RCC_OscConfig+0x2ac>
 800259e:	e014      	b.n	80025ca <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a0:	f7fe fd12 	bl	8000fc8 <HAL_GetTick>
 80025a4:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025a6:	e008      	b.n	80025ba <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025a8:	f7fe fd0e 	bl	8000fc8 <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b64      	cmp	r3, #100	; 0x64
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e2e5      	b.n	8002b86 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025ba:	4b77      	ldr	r3, [pc, #476]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d1f0      	bne.n	80025a8 <HAL_RCC_OscConfig+0x2d4>
 80025c6:	e000      	b.n	80025ca <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d060      	beq.n	8002698 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80025d6:	6a3b      	ldr	r3, [r7, #32]
 80025d8:	2b04      	cmp	r3, #4
 80025da:	d005      	beq.n	80025e8 <HAL_RCC_OscConfig+0x314>
 80025dc:	6a3b      	ldr	r3, [r7, #32]
 80025de:	2b0c      	cmp	r3, #12
 80025e0:	d119      	bne.n	8002616 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d116      	bne.n	8002616 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025e8:	4b6b      	ldr	r3, [pc, #428]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d005      	beq.n	8002600 <HAL_RCC_OscConfig+0x32c>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d101      	bne.n	8002600 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e2c2      	b.n	8002b86 <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002600:	4b65      	ldr	r3, [pc, #404]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	691b      	ldr	r3, [r3, #16]
 800260c:	061b      	lsls	r3, r3, #24
 800260e:	4962      	ldr	r1, [pc, #392]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 8002610:	4313      	orrs	r3, r2
 8002612:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002614:	e040      	b.n	8002698 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d023      	beq.n	8002666 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800261e:	4b5e      	ldr	r3, [pc, #376]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a5d      	ldr	r2, [pc, #372]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 8002624:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002628:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800262a:	f7fe fccd 	bl	8000fc8 <HAL_GetTick>
 800262e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002630:	e008      	b.n	8002644 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002632:	f7fe fcc9 	bl	8000fc8 <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	2b02      	cmp	r3, #2
 800263e:	d901      	bls.n	8002644 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e2a0      	b.n	8002b86 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002644:	4b54      	ldr	r3, [pc, #336]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800264c:	2b00      	cmp	r3, #0
 800264e:	d0f0      	beq.n	8002632 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002650:	4b51      	ldr	r3, [pc, #324]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	691b      	ldr	r3, [r3, #16]
 800265c:	061b      	lsls	r3, r3, #24
 800265e:	494e      	ldr	r1, [pc, #312]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 8002660:	4313      	orrs	r3, r2
 8002662:	604b      	str	r3, [r1, #4]
 8002664:	e018      	b.n	8002698 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002666:	4b4c      	ldr	r3, [pc, #304]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a4b      	ldr	r2, [pc, #300]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 800266c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002670:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002672:	f7fe fca9 	bl	8000fc8 <HAL_GetTick>
 8002676:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002678:	e008      	b.n	800268c <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800267a:	f7fe fca5 	bl	8000fc8 <HAL_GetTick>
 800267e:	4602      	mov	r2, r0
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	2b02      	cmp	r3, #2
 8002686:	d901      	bls.n	800268c <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8002688:	2303      	movs	r3, #3
 800268a:	e27c      	b.n	8002b86 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800268c:	4b42      	ldr	r3, [pc, #264]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002694:	2b00      	cmp	r3, #0
 8002696:	d1f0      	bne.n	800267a <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0308 	and.w	r3, r3, #8
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	f000 8082 	beq.w	80027aa <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	695b      	ldr	r3, [r3, #20]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d05f      	beq.n	800276e <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80026ae:	4b3a      	ldr	r3, [pc, #232]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 80026b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026b4:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	699a      	ldr	r2, [r3, #24]
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	f003 0310 	and.w	r3, r3, #16
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d037      	beq.n	8002734 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d006      	beq.n	80026dc <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d101      	bne.n	80026dc <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e254      	b.n	8002b86 <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d01b      	beq.n	800271e <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 80026e6:	4b2c      	ldr	r3, [pc, #176]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 80026e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026ec:	4a2a      	ldr	r2, [pc, #168]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 80026ee:	f023 0301 	bic.w	r3, r3, #1
 80026f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80026f6:	f7fe fc67 	bl	8000fc8 <HAL_GetTick>
 80026fa:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026fc:	e008      	b.n	8002710 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026fe:	f7fe fc63 	bl	8000fc8 <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	2b11      	cmp	r3, #17
 800270a:	d901      	bls.n	8002710 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e23a      	b.n	8002b86 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002710:	4b21      	ldr	r3, [pc, #132]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 8002712:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1ef      	bne.n	80026fe <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 800271e:	4b1e      	ldr	r3, [pc, #120]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 8002720:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002724:	f023 0210 	bic.w	r2, r3, #16
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	699b      	ldr	r3, [r3, #24]
 800272c:	491a      	ldr	r1, [pc, #104]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 800272e:	4313      	orrs	r3, r2
 8002730:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002734:	4b18      	ldr	r3, [pc, #96]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 8002736:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800273a:	4a17      	ldr	r2, [pc, #92]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 800273c:	f043 0301 	orr.w	r3, r3, #1
 8002740:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002744:	f7fe fc40 	bl	8000fc8 <HAL_GetTick>
 8002748:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800274a:	e008      	b.n	800275e <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800274c:	f7fe fc3c 	bl	8000fc8 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b11      	cmp	r3, #17
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e213      	b.n	8002b86 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800275e:	4b0e      	ldr	r3, [pc, #56]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 8002760:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002764:	f003 0302 	and.w	r3, r3, #2
 8002768:	2b00      	cmp	r3, #0
 800276a:	d0ef      	beq.n	800274c <HAL_RCC_OscConfig+0x478>
 800276c:	e01d      	b.n	80027aa <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800276e:	4b0a      	ldr	r3, [pc, #40]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 8002770:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002774:	4a08      	ldr	r2, [pc, #32]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 8002776:	f023 0301 	bic.w	r3, r3, #1
 800277a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800277e:	f7fe fc23 	bl	8000fc8 <HAL_GetTick>
 8002782:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002784:	e00a      	b.n	800279c <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002786:	f7fe fc1f 	bl	8000fc8 <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	2b11      	cmp	r3, #17
 8002792:	d903      	bls.n	800279c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e1f6      	b.n	8002b86 <HAL_RCC_OscConfig+0x8b2>
 8002798:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800279c:	4ba9      	ldr	r3, [pc, #676]	; (8002a44 <HAL_RCC_OscConfig+0x770>)
 800279e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1ed      	bne.n	8002786 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0304 	and.w	r3, r3, #4
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f000 80bd 	beq.w	8002932 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027b8:	2300      	movs	r3, #0
 80027ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80027be:	4ba1      	ldr	r3, [pc, #644]	; (8002a44 <HAL_RCC_OscConfig+0x770>)
 80027c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d10e      	bne.n	80027e8 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027ca:	4b9e      	ldr	r3, [pc, #632]	; (8002a44 <HAL_RCC_OscConfig+0x770>)
 80027cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ce:	4a9d      	ldr	r2, [pc, #628]	; (8002a44 <HAL_RCC_OscConfig+0x770>)
 80027d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027d4:	6593      	str	r3, [r2, #88]	; 0x58
 80027d6:	4b9b      	ldr	r3, [pc, #620]	; (8002a44 <HAL_RCC_OscConfig+0x770>)
 80027d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027de:	60fb      	str	r3, [r7, #12]
 80027e0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80027e2:	2301      	movs	r3, #1
 80027e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027e8:	4b97      	ldr	r3, [pc, #604]	; (8002a48 <HAL_RCC_OscConfig+0x774>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d118      	bne.n	8002826 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027f4:	4b94      	ldr	r3, [pc, #592]	; (8002a48 <HAL_RCC_OscConfig+0x774>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a93      	ldr	r2, [pc, #588]	; (8002a48 <HAL_RCC_OscConfig+0x774>)
 80027fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002800:	f7fe fbe2 	bl	8000fc8 <HAL_GetTick>
 8002804:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002806:	e008      	b.n	800281a <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002808:	f7fe fbde 	bl	8000fc8 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b02      	cmp	r3, #2
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e1b5      	b.n	8002b86 <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800281a:	4b8b      	ldr	r3, [pc, #556]	; (8002a48 <HAL_RCC_OscConfig+0x774>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002822:	2b00      	cmp	r3, #0
 8002824:	d0f0      	beq.n	8002808 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	2b00      	cmp	r3, #0
 8002830:	d02c      	beq.n	800288c <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8002832:	4b84      	ldr	r3, [pc, #528]	; (8002a44 <HAL_RCC_OscConfig+0x770>)
 8002834:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002838:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002844:	497f      	ldr	r1, [pc, #508]	; (8002a44 <HAL_RCC_OscConfig+0x770>)
 8002846:	4313      	orrs	r3, r2
 8002848:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f003 0304 	and.w	r3, r3, #4
 8002854:	2b00      	cmp	r3, #0
 8002856:	d010      	beq.n	800287a <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002858:	4b7a      	ldr	r3, [pc, #488]	; (8002a44 <HAL_RCC_OscConfig+0x770>)
 800285a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800285e:	4a79      	ldr	r2, [pc, #484]	; (8002a44 <HAL_RCC_OscConfig+0x770>)
 8002860:	f043 0304 	orr.w	r3, r3, #4
 8002864:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002868:	4b76      	ldr	r3, [pc, #472]	; (8002a44 <HAL_RCC_OscConfig+0x770>)
 800286a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800286e:	4a75      	ldr	r2, [pc, #468]	; (8002a44 <HAL_RCC_OscConfig+0x770>)
 8002870:	f043 0301 	orr.w	r3, r3, #1
 8002874:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002878:	e018      	b.n	80028ac <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800287a:	4b72      	ldr	r3, [pc, #456]	; (8002a44 <HAL_RCC_OscConfig+0x770>)
 800287c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002880:	4a70      	ldr	r2, [pc, #448]	; (8002a44 <HAL_RCC_OscConfig+0x770>)
 8002882:	f043 0301 	orr.w	r3, r3, #1
 8002886:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800288a:	e00f      	b.n	80028ac <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800288c:	4b6d      	ldr	r3, [pc, #436]	; (8002a44 <HAL_RCC_OscConfig+0x770>)
 800288e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002892:	4a6c      	ldr	r2, [pc, #432]	; (8002a44 <HAL_RCC_OscConfig+0x770>)
 8002894:	f023 0301 	bic.w	r3, r3, #1
 8002898:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800289c:	4b69      	ldr	r3, [pc, #420]	; (8002a44 <HAL_RCC_OscConfig+0x770>)
 800289e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028a2:	4a68      	ldr	r2, [pc, #416]	; (8002a44 <HAL_RCC_OscConfig+0x770>)
 80028a4:	f023 0304 	bic.w	r3, r3, #4
 80028a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d016      	beq.n	80028e2 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028b4:	f7fe fb88 	bl	8000fc8 <HAL_GetTick>
 80028b8:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028ba:	e00a      	b.n	80028d2 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028bc:	f7fe fb84 	bl	8000fc8 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e159      	b.n	8002b86 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028d2:	4b5c      	ldr	r3, [pc, #368]	; (8002a44 <HAL_RCC_OscConfig+0x770>)
 80028d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028d8:	f003 0302 	and.w	r3, r3, #2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d0ed      	beq.n	80028bc <HAL_RCC_OscConfig+0x5e8>
 80028e0:	e01d      	b.n	800291e <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028e2:	f7fe fb71 	bl	8000fc8 <HAL_GetTick>
 80028e6:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028e8:	e00a      	b.n	8002900 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028ea:	f7fe fb6d 	bl	8000fc8 <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d901      	bls.n	8002900 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e142      	b.n	8002b86 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002900:	4b50      	ldr	r3, [pc, #320]	; (8002a44 <HAL_RCC_OscConfig+0x770>)
 8002902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d1ed      	bne.n	80028ea <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 800290e:	4b4d      	ldr	r3, [pc, #308]	; (8002a44 <HAL_RCC_OscConfig+0x770>)
 8002910:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002914:	4a4b      	ldr	r2, [pc, #300]	; (8002a44 <HAL_RCC_OscConfig+0x770>)
 8002916:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800291a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800291e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002922:	2b01      	cmp	r3, #1
 8002924:	d105      	bne.n	8002932 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002926:	4b47      	ldr	r3, [pc, #284]	; (8002a44 <HAL_RCC_OscConfig+0x770>)
 8002928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800292a:	4a46      	ldr	r2, [pc, #280]	; (8002a44 <HAL_RCC_OscConfig+0x770>)
 800292c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002930:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0320 	and.w	r3, r3, #32
 800293a:	2b00      	cmp	r3, #0
 800293c:	d03c      	beq.n	80029b8 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002942:	2b00      	cmp	r3, #0
 8002944:	d01c      	beq.n	8002980 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002946:	4b3f      	ldr	r3, [pc, #252]	; (8002a44 <HAL_RCC_OscConfig+0x770>)
 8002948:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800294c:	4a3d      	ldr	r2, [pc, #244]	; (8002a44 <HAL_RCC_OscConfig+0x770>)
 800294e:	f043 0301 	orr.w	r3, r3, #1
 8002952:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002956:	f7fe fb37 	bl	8000fc8 <HAL_GetTick>
 800295a:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800295c:	e008      	b.n	8002970 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800295e:	f7fe fb33 	bl	8000fc8 <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	2b02      	cmp	r3, #2
 800296a:	d901      	bls.n	8002970 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e10a      	b.n	8002b86 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002970:	4b34      	ldr	r3, [pc, #208]	; (8002a44 <HAL_RCC_OscConfig+0x770>)
 8002972:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d0ef      	beq.n	800295e <HAL_RCC_OscConfig+0x68a>
 800297e:	e01b      	b.n	80029b8 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002980:	4b30      	ldr	r3, [pc, #192]	; (8002a44 <HAL_RCC_OscConfig+0x770>)
 8002982:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002986:	4a2f      	ldr	r2, [pc, #188]	; (8002a44 <HAL_RCC_OscConfig+0x770>)
 8002988:	f023 0301 	bic.w	r3, r3, #1
 800298c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002990:	f7fe fb1a 	bl	8000fc8 <HAL_GetTick>
 8002994:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002996:	e008      	b.n	80029aa <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002998:	f7fe fb16 	bl	8000fc8 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e0ed      	b.n	8002b86 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80029aa:	4b26      	ldr	r3, [pc, #152]	; (8002a44 <HAL_RCC_OscConfig+0x770>)
 80029ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80029b0:	f003 0302 	and.w	r3, r3, #2
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d1ef      	bne.n	8002998 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029bc:	2b00      	cmp	r3, #0
 80029be:	f000 80e1 	beq.w	8002b84 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	f040 80b5 	bne.w	8002b36 <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80029cc:	4b1d      	ldr	r3, [pc, #116]	; (8002a44 <HAL_RCC_OscConfig+0x770>)
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	f003 0203 	and.w	r2, r3, #3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029dc:	429a      	cmp	r2, r3
 80029de:	d124      	bne.n	8002a2a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029ea:	3b01      	subs	r3, #1
 80029ec:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d11b      	bne.n	8002a2a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029fc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d113      	bne.n	8002a2a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a0c:	085b      	lsrs	r3, r3, #1
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d109      	bne.n	8002a2a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a20:	085b      	lsrs	r3, r3, #1
 8002a22:	3b01      	subs	r3, #1
 8002a24:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d05f      	beq.n	8002aea <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a2a:	6a3b      	ldr	r3, [r7, #32]
 8002a2c:	2b0c      	cmp	r3, #12
 8002a2e:	d05a      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002a30:	4b04      	ldr	r3, [pc, #16]	; (8002a44 <HAL_RCC_OscConfig+0x770>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a03      	ldr	r2, [pc, #12]	; (8002a44 <HAL_RCC_OscConfig+0x770>)
 8002a36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a3a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a3c:	f7fe fac4 	bl	8000fc8 <HAL_GetTick>
 8002a40:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a42:	e00c      	b.n	8002a5e <HAL_RCC_OscConfig+0x78a>
 8002a44:	40021000 	.word	0x40021000
 8002a48:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a4c:	f7fe fabc 	bl	8000fc8 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e093      	b.n	8002b86 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a5e:	4b4c      	ldr	r3, [pc, #304]	; (8002b90 <HAL_RCC_OscConfig+0x8bc>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1f0      	bne.n	8002a4c <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a6a:	4b49      	ldr	r3, [pc, #292]	; (8002b90 <HAL_RCC_OscConfig+0x8bc>)
 8002a6c:	68da      	ldr	r2, [r3, #12]
 8002a6e:	4b49      	ldr	r3, [pc, #292]	; (8002b94 <HAL_RCC_OscConfig+0x8c0>)
 8002a70:	4013      	ands	r3, r2
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a7a:	3a01      	subs	r2, #1
 8002a7c:	0112      	lsls	r2, r2, #4
 8002a7e:	4311      	orrs	r1, r2
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a84:	0212      	lsls	r2, r2, #8
 8002a86:	4311      	orrs	r1, r2
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002a8c:	0852      	lsrs	r2, r2, #1
 8002a8e:	3a01      	subs	r2, #1
 8002a90:	0552      	lsls	r2, r2, #21
 8002a92:	4311      	orrs	r1, r2
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002a98:	0852      	lsrs	r2, r2, #1
 8002a9a:	3a01      	subs	r2, #1
 8002a9c:	0652      	lsls	r2, r2, #25
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	493b      	ldr	r1, [pc, #236]	; (8002b90 <HAL_RCC_OscConfig+0x8bc>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002aa6:	4b3a      	ldr	r3, [pc, #232]	; (8002b90 <HAL_RCC_OscConfig+0x8bc>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a39      	ldr	r2, [pc, #228]	; (8002b90 <HAL_RCC_OscConfig+0x8bc>)
 8002aac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ab0:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ab2:	4b37      	ldr	r3, [pc, #220]	; (8002b90 <HAL_RCC_OscConfig+0x8bc>)
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	4a36      	ldr	r2, [pc, #216]	; (8002b90 <HAL_RCC_OscConfig+0x8bc>)
 8002ab8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002abc:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002abe:	f7fe fa83 	bl	8000fc8 <HAL_GetTick>
 8002ac2:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ac4:	e008      	b.n	8002ad8 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ac6:	f7fe fa7f 	bl	8000fc8 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d901      	bls.n	8002ad8 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e056      	b.n	8002b86 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ad8:	4b2d      	ldr	r3, [pc, #180]	; (8002b90 <HAL_RCC_OscConfig+0x8bc>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d0f0      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ae4:	e04e      	b.n	8002b84 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e04d      	b.n	8002b86 <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aea:	4b29      	ldr	r3, [pc, #164]	; (8002b90 <HAL_RCC_OscConfig+0x8bc>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d146      	bne.n	8002b84 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002af6:	4b26      	ldr	r3, [pc, #152]	; (8002b90 <HAL_RCC_OscConfig+0x8bc>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a25      	ldr	r2, [pc, #148]	; (8002b90 <HAL_RCC_OscConfig+0x8bc>)
 8002afc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b00:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b02:	4b23      	ldr	r3, [pc, #140]	; (8002b90 <HAL_RCC_OscConfig+0x8bc>)
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	4a22      	ldr	r2, [pc, #136]	; (8002b90 <HAL_RCC_OscConfig+0x8bc>)
 8002b08:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b0c:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b0e:	f7fe fa5b 	bl	8000fc8 <HAL_GetTick>
 8002b12:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b14:	e008      	b.n	8002b28 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b16:	f7fe fa57 	bl	8000fc8 <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d901      	bls.n	8002b28 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e02e      	b.n	8002b86 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b28:	4b19      	ldr	r3, [pc, #100]	; (8002b90 <HAL_RCC_OscConfig+0x8bc>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d0f0      	beq.n	8002b16 <HAL_RCC_OscConfig+0x842>
 8002b34:	e026      	b.n	8002b84 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b36:	6a3b      	ldr	r3, [r7, #32]
 8002b38:	2b0c      	cmp	r3, #12
 8002b3a:	d021      	beq.n	8002b80 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b3c:	4b14      	ldr	r3, [pc, #80]	; (8002b90 <HAL_RCC_OscConfig+0x8bc>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a13      	ldr	r2, [pc, #76]	; (8002b90 <HAL_RCC_OscConfig+0x8bc>)
 8002b42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b48:	f7fe fa3e 	bl	8000fc8 <HAL_GetTick>
 8002b4c:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b4e:	e008      	b.n	8002b62 <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b50:	f7fe fa3a 	bl	8000fc8 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e011      	b.n	8002b86 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b62:	4b0b      	ldr	r3, [pc, #44]	; (8002b90 <HAL_RCC_OscConfig+0x8bc>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d1f0      	bne.n	8002b50 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8002b6e:	4b08      	ldr	r3, [pc, #32]	; (8002b90 <HAL_RCC_OscConfig+0x8bc>)
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	4a07      	ldr	r2, [pc, #28]	; (8002b90 <HAL_RCC_OscConfig+0x8bc>)
 8002b74:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002b78:	f023 0303 	bic.w	r3, r3, #3
 8002b7c:	60d3      	str	r3, [r2, #12]
 8002b7e:	e001      	b.n	8002b84 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e000      	b.n	8002b86 <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3728      	adds	r7, #40	; 0x28
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	40021000 	.word	0x40021000
 8002b94:	f99f808c 	.word	0xf99f808c

08002b98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d101      	bne.n	8002bac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e0e7      	b.n	8002d7c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bac:	4b75      	ldr	r3, [pc, #468]	; (8002d84 <HAL_RCC_ClockConfig+0x1ec>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0307 	and.w	r3, r3, #7
 8002bb4:	683a      	ldr	r2, [r7, #0]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d910      	bls.n	8002bdc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bba:	4b72      	ldr	r3, [pc, #456]	; (8002d84 <HAL_RCC_ClockConfig+0x1ec>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f023 0207 	bic.w	r2, r3, #7
 8002bc2:	4970      	ldr	r1, [pc, #448]	; (8002d84 <HAL_RCC_ClockConfig+0x1ec>)
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bca:	4b6e      	ldr	r3, [pc, #440]	; (8002d84 <HAL_RCC_ClockConfig+0x1ec>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0307 	and.w	r3, r3, #7
 8002bd2:	683a      	ldr	r2, [r7, #0]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d001      	beq.n	8002bdc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e0cf      	b.n	8002d7c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0302 	and.w	r3, r3, #2
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d010      	beq.n	8002c0a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	689a      	ldr	r2, [r3, #8]
 8002bec:	4b66      	ldr	r3, [pc, #408]	; (8002d88 <HAL_RCC_ClockConfig+0x1f0>)
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d908      	bls.n	8002c0a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bf8:	4b63      	ldr	r3, [pc, #396]	; (8002d88 <HAL_RCC_ClockConfig+0x1f0>)
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	4960      	ldr	r1, [pc, #384]	; (8002d88 <HAL_RCC_ClockConfig+0x1f0>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0301 	and.w	r3, r3, #1
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d04c      	beq.n	8002cb0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	2b03      	cmp	r3, #3
 8002c1c:	d107      	bne.n	8002c2e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c1e:	4b5a      	ldr	r3, [pc, #360]	; (8002d88 <HAL_RCC_ClockConfig+0x1f0>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d121      	bne.n	8002c6e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e0a6      	b.n	8002d7c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d107      	bne.n	8002c46 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c36:	4b54      	ldr	r3, [pc, #336]	; (8002d88 <HAL_RCC_ClockConfig+0x1f0>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d115      	bne.n	8002c6e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e09a      	b.n	8002d7c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d107      	bne.n	8002c5e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c4e:	4b4e      	ldr	r3, [pc, #312]	; (8002d88 <HAL_RCC_ClockConfig+0x1f0>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d109      	bne.n	8002c6e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e08e      	b.n	8002d7c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c5e:	4b4a      	ldr	r3, [pc, #296]	; (8002d88 <HAL_RCC_ClockConfig+0x1f0>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d101      	bne.n	8002c6e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e086      	b.n	8002d7c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c6e:	4b46      	ldr	r3, [pc, #280]	; (8002d88 <HAL_RCC_ClockConfig+0x1f0>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f023 0203 	bic.w	r2, r3, #3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	4943      	ldr	r1, [pc, #268]	; (8002d88 <HAL_RCC_ClockConfig+0x1f0>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c80:	f7fe f9a2 	bl	8000fc8 <HAL_GetTick>
 8002c84:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c86:	e00a      	b.n	8002c9e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c88:	f7fe f99e 	bl	8000fc8 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e06e      	b.n	8002d7c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c9e:	4b3a      	ldr	r3, [pc, #232]	; (8002d88 <HAL_RCC_ClockConfig+0x1f0>)
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f003 020c 	and.w	r2, r3, #12
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d1eb      	bne.n	8002c88 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0302 	and.w	r3, r3, #2
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d010      	beq.n	8002cde <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689a      	ldr	r2, [r3, #8]
 8002cc0:	4b31      	ldr	r3, [pc, #196]	; (8002d88 <HAL_RCC_ClockConfig+0x1f0>)
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d208      	bcs.n	8002cde <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ccc:	4b2e      	ldr	r3, [pc, #184]	; (8002d88 <HAL_RCC_ClockConfig+0x1f0>)
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	492b      	ldr	r1, [pc, #172]	; (8002d88 <HAL_RCC_ClockConfig+0x1f0>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cde:	4b29      	ldr	r3, [pc, #164]	; (8002d84 <HAL_RCC_ClockConfig+0x1ec>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0307 	and.w	r3, r3, #7
 8002ce6:	683a      	ldr	r2, [r7, #0]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d210      	bcs.n	8002d0e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cec:	4b25      	ldr	r3, [pc, #148]	; (8002d84 <HAL_RCC_ClockConfig+0x1ec>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f023 0207 	bic.w	r2, r3, #7
 8002cf4:	4923      	ldr	r1, [pc, #140]	; (8002d84 <HAL_RCC_ClockConfig+0x1ec>)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cfc:	4b21      	ldr	r3, [pc, #132]	; (8002d84 <HAL_RCC_ClockConfig+0x1ec>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0307 	and.w	r3, r3, #7
 8002d04:	683a      	ldr	r2, [r7, #0]
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d001      	beq.n	8002d0e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e036      	b.n	8002d7c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0304 	and.w	r3, r3, #4
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d008      	beq.n	8002d2c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d1a:	4b1b      	ldr	r3, [pc, #108]	; (8002d88 <HAL_RCC_ClockConfig+0x1f0>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	4918      	ldr	r1, [pc, #96]	; (8002d88 <HAL_RCC_ClockConfig+0x1f0>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0308 	and.w	r3, r3, #8
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d009      	beq.n	8002d4c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d38:	4b13      	ldr	r3, [pc, #76]	; (8002d88 <HAL_RCC_ClockConfig+0x1f0>)
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	691b      	ldr	r3, [r3, #16]
 8002d44:	00db      	lsls	r3, r3, #3
 8002d46:	4910      	ldr	r1, [pc, #64]	; (8002d88 <HAL_RCC_ClockConfig+0x1f0>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d4c:	f000 f824 	bl	8002d98 <HAL_RCC_GetSysClockFreq>
 8002d50:	4602      	mov	r2, r0
 8002d52:	4b0d      	ldr	r3, [pc, #52]	; (8002d88 <HAL_RCC_ClockConfig+0x1f0>)
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	091b      	lsrs	r3, r3, #4
 8002d58:	f003 030f 	and.w	r3, r3, #15
 8002d5c:	490b      	ldr	r1, [pc, #44]	; (8002d8c <HAL_RCC_ClockConfig+0x1f4>)
 8002d5e:	5ccb      	ldrb	r3, [r1, r3]
 8002d60:	f003 031f 	and.w	r3, r3, #31
 8002d64:	fa22 f303 	lsr.w	r3, r2, r3
 8002d68:	4a09      	ldr	r2, [pc, #36]	; (8002d90 <HAL_RCC_ClockConfig+0x1f8>)
 8002d6a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002d6c:	4b09      	ldr	r3, [pc, #36]	; (8002d94 <HAL_RCC_ClockConfig+0x1fc>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7fd ff79 	bl	8000c68 <HAL_InitTick>
 8002d76:	4603      	mov	r3, r0
 8002d78:	72fb      	strb	r3, [r7, #11]

  return status;
 8002d7a:	7afb      	ldrb	r3, [r7, #11]
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3710      	adds	r7, #16
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	40022000 	.word	0x40022000
 8002d88:	40021000 	.word	0x40021000
 8002d8c:	08008d40 	.word	0x08008d40
 8002d90:	20000000 	.word	0x20000000
 8002d94:	20000004 	.word	0x20000004

08002d98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b089      	sub	sp, #36	; 0x24
 8002d9c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	61fb      	str	r3, [r7, #28]
 8002da2:	2300      	movs	r3, #0
 8002da4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002da6:	4b3e      	ldr	r3, [pc, #248]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	f003 030c 	and.w	r3, r3, #12
 8002dae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002db0:	4b3b      	ldr	r3, [pc, #236]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	f003 0303 	and.w	r3, r3, #3
 8002db8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d005      	beq.n	8002dcc <HAL_RCC_GetSysClockFreq+0x34>
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	2b0c      	cmp	r3, #12
 8002dc4:	d121      	bne.n	8002e0a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d11e      	bne.n	8002e0a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002dcc:	4b34      	ldr	r3, [pc, #208]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0308 	and.w	r3, r3, #8
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d107      	bne.n	8002de8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002dd8:	4b31      	ldr	r3, [pc, #196]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dde:	0a1b      	lsrs	r3, r3, #8
 8002de0:	f003 030f 	and.w	r3, r3, #15
 8002de4:	61fb      	str	r3, [r7, #28]
 8002de6:	e005      	b.n	8002df4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002de8:	4b2d      	ldr	r3, [pc, #180]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	091b      	lsrs	r3, r3, #4
 8002dee:	f003 030f 	and.w	r3, r3, #15
 8002df2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002df4:	4a2b      	ldr	r2, [pc, #172]	; (8002ea4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dfc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d10d      	bne.n	8002e20 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e08:	e00a      	b.n	8002e20 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	2b04      	cmp	r3, #4
 8002e0e:	d102      	bne.n	8002e16 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002e10:	4b25      	ldr	r3, [pc, #148]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e12:	61bb      	str	r3, [r7, #24]
 8002e14:	e004      	b.n	8002e20 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	2b08      	cmp	r3, #8
 8002e1a:	d101      	bne.n	8002e20 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e1c:	4b23      	ldr	r3, [pc, #140]	; (8002eac <HAL_RCC_GetSysClockFreq+0x114>)
 8002e1e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	2b0c      	cmp	r3, #12
 8002e24:	d134      	bne.n	8002e90 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e26:	4b1e      	ldr	r3, [pc, #120]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	f003 0303 	and.w	r3, r3, #3
 8002e2e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d003      	beq.n	8002e3e <HAL_RCC_GetSysClockFreq+0xa6>
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	2b03      	cmp	r3, #3
 8002e3a:	d003      	beq.n	8002e44 <HAL_RCC_GetSysClockFreq+0xac>
 8002e3c:	e005      	b.n	8002e4a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002e3e:	4b1a      	ldr	r3, [pc, #104]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e40:	617b      	str	r3, [r7, #20]
      break;
 8002e42:	e005      	b.n	8002e50 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002e44:	4b19      	ldr	r3, [pc, #100]	; (8002eac <HAL_RCC_GetSysClockFreq+0x114>)
 8002e46:	617b      	str	r3, [r7, #20]
      break;
 8002e48:	e002      	b.n	8002e50 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	617b      	str	r3, [r7, #20]
      break;
 8002e4e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e50:	4b13      	ldr	r3, [pc, #76]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	091b      	lsrs	r3, r3, #4
 8002e56:	f003 0307 	and.w	r3, r3, #7
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002e5e:	4b10      	ldr	r3, [pc, #64]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	0a1b      	lsrs	r3, r3, #8
 8002e64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e68:	697a      	ldr	r2, [r7, #20]
 8002e6a:	fb03 f202 	mul.w	r2, r3, r2
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e74:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e76:	4b0a      	ldr	r3, [pc, #40]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	0e5b      	lsrs	r3, r3, #25
 8002e7c:	f003 0303 	and.w	r3, r3, #3
 8002e80:	3301      	adds	r3, #1
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002e86:	697a      	ldr	r2, [r7, #20]
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e8e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002e90:	69bb      	ldr	r3, [r7, #24]
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3724      	adds	r7, #36	; 0x24
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	40021000 	.word	0x40021000
 8002ea4:	08008d58 	.word	0x08008d58
 8002ea8:	00f42400 	.word	0x00f42400
 8002eac:	007a1200 	.word	0x007a1200

08002eb0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002eb4:	4b03      	ldr	r3, [pc, #12]	; (8002ec4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	20000000 	.word	0x20000000

08002ec8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002ecc:	f7ff fff0 	bl	8002eb0 <HAL_RCC_GetHCLKFreq>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	4b06      	ldr	r3, [pc, #24]	; (8002eec <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	0a1b      	lsrs	r3, r3, #8
 8002ed8:	f003 0307 	and.w	r3, r3, #7
 8002edc:	4904      	ldr	r1, [pc, #16]	; (8002ef0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ede:	5ccb      	ldrb	r3, [r1, r3]
 8002ee0:	f003 031f 	and.w	r3, r3, #31
 8002ee4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40021000 	.word	0x40021000
 8002ef0:	08008d50 	.word	0x08008d50

08002ef4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002ef8:	f7ff ffda 	bl	8002eb0 <HAL_RCC_GetHCLKFreq>
 8002efc:	4602      	mov	r2, r0
 8002efe:	4b06      	ldr	r3, [pc, #24]	; (8002f18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	0adb      	lsrs	r3, r3, #11
 8002f04:	f003 0307 	and.w	r3, r3, #7
 8002f08:	4904      	ldr	r1, [pc, #16]	; (8002f1c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002f0a:	5ccb      	ldrb	r3, [r1, r3]
 8002f0c:	f003 031f 	and.w	r3, r3, #31
 8002f10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	40021000 	.word	0x40021000
 8002f1c:	08008d50 	.word	0x08008d50

08002f20 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	220f      	movs	r2, #15
 8002f2e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002f30:	4b12      	ldr	r3, [pc, #72]	; (8002f7c <HAL_RCC_GetClockConfig+0x5c>)
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f003 0203 	and.w	r2, r3, #3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002f3c:	4b0f      	ldr	r3, [pc, #60]	; (8002f7c <HAL_RCC_GetClockConfig+0x5c>)
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002f48:	4b0c      	ldr	r3, [pc, #48]	; (8002f7c <HAL_RCC_GetClockConfig+0x5c>)
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002f54:	4b09      	ldr	r3, [pc, #36]	; (8002f7c <HAL_RCC_GetClockConfig+0x5c>)
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	08db      	lsrs	r3, r3, #3
 8002f5a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002f62:	4b07      	ldr	r3, [pc, #28]	; (8002f80 <HAL_RCC_GetClockConfig+0x60>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0207 	and.w	r2, r3, #7
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	601a      	str	r2, [r3, #0]
}
 8002f6e:	bf00      	nop
 8002f70:	370c      	adds	r7, #12
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	40021000 	.word	0x40021000
 8002f80:	40022000 	.word	0x40022000

08002f84 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b086      	sub	sp, #24
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002f90:	4b2a      	ldr	r3, [pc, #168]	; (800303c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d003      	beq.n	8002fa4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002f9c:	f7ff f936 	bl	800220c <HAL_PWREx_GetVoltageRange>
 8002fa0:	6178      	str	r0, [r7, #20]
 8002fa2:	e014      	b.n	8002fce <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002fa4:	4b25      	ldr	r3, [pc, #148]	; (800303c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa8:	4a24      	ldr	r2, [pc, #144]	; (800303c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002faa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fae:	6593      	str	r3, [r2, #88]	; 0x58
 8002fb0:	4b22      	ldr	r3, [pc, #136]	; (800303c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fb8:	60fb      	str	r3, [r7, #12]
 8002fba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002fbc:	f7ff f926 	bl	800220c <HAL_PWREx_GetVoltageRange>
 8002fc0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002fc2:	4b1e      	ldr	r3, [pc, #120]	; (800303c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fc6:	4a1d      	ldr	r2, [pc, #116]	; (800303c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fcc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fd4:	d10b      	bne.n	8002fee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2b80      	cmp	r3, #128	; 0x80
 8002fda:	d919      	bls.n	8003010 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2ba0      	cmp	r3, #160	; 0xa0
 8002fe0:	d902      	bls.n	8002fe8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002fe2:	2302      	movs	r3, #2
 8002fe4:	613b      	str	r3, [r7, #16]
 8002fe6:	e013      	b.n	8003010 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002fe8:	2301      	movs	r3, #1
 8002fea:	613b      	str	r3, [r7, #16]
 8002fec:	e010      	b.n	8003010 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2b80      	cmp	r3, #128	; 0x80
 8002ff2:	d902      	bls.n	8002ffa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	613b      	str	r3, [r7, #16]
 8002ff8:	e00a      	b.n	8003010 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2b80      	cmp	r3, #128	; 0x80
 8002ffe:	d102      	bne.n	8003006 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003000:	2302      	movs	r3, #2
 8003002:	613b      	str	r3, [r7, #16]
 8003004:	e004      	b.n	8003010 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2b70      	cmp	r3, #112	; 0x70
 800300a:	d101      	bne.n	8003010 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800300c:	2301      	movs	r3, #1
 800300e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003010:	4b0b      	ldr	r3, [pc, #44]	; (8003040 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f023 0207 	bic.w	r2, r3, #7
 8003018:	4909      	ldr	r1, [pc, #36]	; (8003040 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	4313      	orrs	r3, r2
 800301e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003020:	4b07      	ldr	r3, [pc, #28]	; (8003040 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0307 	and.w	r3, r3, #7
 8003028:	693a      	ldr	r2, [r7, #16]
 800302a:	429a      	cmp	r2, r3
 800302c:	d001      	beq.n	8003032 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e000      	b.n	8003034 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003032:	2300      	movs	r3, #0
}
 8003034:	4618      	mov	r0, r3
 8003036:	3718      	adds	r7, #24
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	40021000 	.word	0x40021000
 8003040:	40022000 	.word	0x40022000

08003044 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b086      	sub	sp, #24
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800304c:	2300      	movs	r3, #0
 800304e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003050:	2300      	movs	r3, #0
 8003052:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800305c:	2b00      	cmp	r3, #0
 800305e:	f000 809e 	beq.w	800319e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003062:	2300      	movs	r3, #0
 8003064:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003066:	4b46      	ldr	r3, [pc, #280]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800306a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d101      	bne.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003072:	2301      	movs	r3, #1
 8003074:	e000      	b.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8003076:	2300      	movs	r3, #0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d00d      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800307c:	4b40      	ldr	r3, [pc, #256]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800307e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003080:	4a3f      	ldr	r2, [pc, #252]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003082:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003086:	6593      	str	r3, [r2, #88]	; 0x58
 8003088:	4b3d      	ldr	r3, [pc, #244]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800308a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800308c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003090:	60bb      	str	r3, [r7, #8]
 8003092:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003094:	2301      	movs	r3, #1
 8003096:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003098:	4b3a      	ldr	r3, [pc, #232]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a39      	ldr	r2, [pc, #228]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800309e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030a2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030a4:	f7fd ff90 	bl	8000fc8 <HAL_GetTick>
 80030a8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80030aa:	e009      	b.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030ac:	f7fd ff8c 	bl	8000fc8 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d902      	bls.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	74fb      	strb	r3, [r7, #19]
        break;
 80030be:	e005      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80030c0:	4b30      	ldr	r3, [pc, #192]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d0ef      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 80030cc:	7cfb      	ldrb	r3, [r7, #19]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d15a      	bne.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80030d2:	4b2b      	ldr	r3, [pc, #172]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80030d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030dc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d01e      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e8:	697a      	ldr	r2, [r7, #20]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d019      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80030ee:	4b24      	ldr	r3, [pc, #144]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80030f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030f8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80030fa:	4b21      	ldr	r3, [pc, #132]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80030fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003100:	4a1f      	ldr	r2, [pc, #124]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003102:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003106:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800310a:	4b1d      	ldr	r3, [pc, #116]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800310c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003110:	4a1b      	ldr	r2, [pc, #108]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003112:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003116:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800311a:	4a19      	ldr	r2, [pc, #100]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	f003 0301 	and.w	r3, r3, #1
 8003128:	2b00      	cmp	r3, #0
 800312a:	d016      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800312c:	f7fd ff4c 	bl	8000fc8 <HAL_GetTick>
 8003130:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003132:	e00b      	b.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003134:	f7fd ff48 	bl	8000fc8 <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003142:	4293      	cmp	r3, r2
 8003144:	d902      	bls.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	74fb      	strb	r3, [r7, #19]
            break;
 800314a:	e006      	b.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800314c:	4b0c      	ldr	r3, [pc, #48]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800314e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	2b00      	cmp	r3, #0
 8003158:	d0ec      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 800315a:	7cfb      	ldrb	r3, [r7, #19]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d10b      	bne.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003160:	4b07      	ldr	r3, [pc, #28]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003162:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003166:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316e:	4904      	ldr	r1, [pc, #16]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003170:	4313      	orrs	r3, r2
 8003172:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003176:	e009      	b.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003178:	7cfb      	ldrb	r3, [r7, #19]
 800317a:	74bb      	strb	r3, [r7, #18]
 800317c:	e006      	b.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x148>
 800317e:	bf00      	nop
 8003180:	40021000 	.word	0x40021000
 8003184:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003188:	7cfb      	ldrb	r3, [r7, #19]
 800318a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800318c:	7c7b      	ldrb	r3, [r7, #17]
 800318e:	2b01      	cmp	r3, #1
 8003190:	d105      	bne.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003192:	4b6e      	ldr	r3, [pc, #440]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003196:	4a6d      	ldr	r2, [pc, #436]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003198:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800319c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00a      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031aa:	4b68      	ldr	r3, [pc, #416]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80031ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b0:	f023 0203 	bic.w	r2, r3, #3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	4964      	ldr	r1, [pc, #400]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0302 	and.w	r3, r3, #2
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d00a      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031cc:	4b5f      	ldr	r3, [pc, #380]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80031ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d2:	f023 020c 	bic.w	r2, r3, #12
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	495c      	ldr	r1, [pc, #368]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0304 	and.w	r3, r3, #4
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d00a      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80031ee:	4b57      	ldr	r3, [pc, #348]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80031f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031f4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	4953      	ldr	r1, [pc, #332]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0320 	and.w	r3, r3, #32
 800320c:	2b00      	cmp	r3, #0
 800320e:	d00a      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003210:	4b4e      	ldr	r3, [pc, #312]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003216:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	494b      	ldr	r1, [pc, #300]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003220:	4313      	orrs	r3, r2
 8003222:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00a      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003232:	4b46      	ldr	r3, [pc, #280]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003238:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6a1b      	ldr	r3, [r3, #32]
 8003240:	4942      	ldr	r1, [pc, #264]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003242:	4313      	orrs	r3, r2
 8003244:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003250:	2b00      	cmp	r3, #0
 8003252:	d00a      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003254:	4b3d      	ldr	r3, [pc, #244]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800325a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003262:	493a      	ldr	r1, [pc, #232]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003264:	4313      	orrs	r3, r2
 8003266:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003272:	2b00      	cmp	r3, #0
 8003274:	d00a      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003276:	4b35      	ldr	r3, [pc, #212]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800327c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	695b      	ldr	r3, [r3, #20]
 8003284:	4931      	ldr	r1, [pc, #196]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003286:	4313      	orrs	r3, r2
 8003288:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003294:	2b00      	cmp	r3, #0
 8003296:	d00a      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003298:	4b2c      	ldr	r3, [pc, #176]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800329a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800329e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	4929      	ldr	r1, [pc, #164]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d00a      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80032ba:	4b24      	ldr	r3, [pc, #144]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80032bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	69db      	ldr	r3, [r3, #28]
 80032c8:	4920      	ldr	r1, [pc, #128]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80032ca:	4313      	orrs	r3, r2
 80032cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d015      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032dc:	4b1b      	ldr	r3, [pc, #108]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80032de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ea:	4918      	ldr	r1, [pc, #96]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032fa:	d105      	bne.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032fc:	4b13      	ldr	r3, [pc, #76]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	4a12      	ldr	r2, [pc, #72]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003302:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003306:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d015      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003314:	4b0d      	ldr	r3, [pc, #52]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800331a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003322:	490a      	ldr	r1, [pc, #40]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003324:	4313      	orrs	r3, r2
 8003326:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003332:	d105      	bne.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003334:	4b05      	ldr	r3, [pc, #20]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	4a04      	ldr	r2, [pc, #16]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800333a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800333e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003340:	7cbb      	ldrb	r3, [r7, #18]
}
 8003342:	4618      	mov	r0, r3
 8003344:	3718      	adds	r7, #24
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	40021000 	.word	0x40021000

08003350 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003350:	b480      	push	{r7}
 8003352:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003354:	4b05      	ldr	r3, [pc, #20]	; (800336c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a04      	ldr	r2, [pc, #16]	; (800336c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800335a:	f043 0304 	orr.w	r3, r3, #4
 800335e:	6013      	str	r3, [r2, #0]
}
 8003360:	bf00      	nop
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop
 800336c:	40021000 	.word	0x40021000

08003370 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d101      	bne.n	8003382 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e049      	b.n	8003416 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d106      	bne.n	800339c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f000 f841 	bl	800341e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2202      	movs	r2, #2
 80033a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	3304      	adds	r3, #4
 80033ac:	4619      	mov	r1, r3
 80033ae:	4610      	mov	r0, r2
 80033b0:	f000 f9be 	bl	8003730 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	3708      	adds	r7, #8
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}

0800341e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800341e:	b480      	push	{r7}
 8003420:	b083      	sub	sp, #12
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003426:	bf00      	nop
 8003428:	370c      	adds	r7, #12
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr
	...

08003434 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003434:	b480      	push	{r7}
 8003436:	b085      	sub	sp, #20
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003442:	b2db      	uxtb	r3, r3
 8003444:	2b01      	cmp	r3, #1
 8003446:	d001      	beq.n	800344c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e03b      	b.n	80034c4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2202      	movs	r2, #2
 8003450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	68da      	ldr	r2, [r3, #12]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f042 0201 	orr.w	r2, r2, #1
 8003462:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a19      	ldr	r2, [pc, #100]	; (80034d0 <HAL_TIM_Base_Start_IT+0x9c>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d009      	beq.n	8003482 <HAL_TIM_Base_Start_IT+0x4e>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003476:	d004      	beq.n	8003482 <HAL_TIM_Base_Start_IT+0x4e>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a15      	ldr	r2, [pc, #84]	; (80034d4 <HAL_TIM_Base_Start_IT+0xa0>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d115      	bne.n	80034ae <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	689a      	ldr	r2, [r3, #8]
 8003488:	4b13      	ldr	r3, [pc, #76]	; (80034d8 <HAL_TIM_Base_Start_IT+0xa4>)
 800348a:	4013      	ands	r3, r2
 800348c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2b06      	cmp	r3, #6
 8003492:	d015      	beq.n	80034c0 <HAL_TIM_Base_Start_IT+0x8c>
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800349a:	d011      	beq.n	80034c0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f042 0201 	orr.w	r2, r2, #1
 80034aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034ac:	e008      	b.n	80034c0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f042 0201 	orr.w	r2, r2, #1
 80034bc:	601a      	str	r2, [r3, #0]
 80034be:	e000      	b.n	80034c2 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034c0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80034c2:	2300      	movs	r3, #0
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3714      	adds	r7, #20
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr
 80034d0:	40012c00 	.word	0x40012c00
 80034d4:	40014000 	.word	0x40014000
 80034d8:	00010007 	.word	0x00010007

080034dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	691b      	ldr	r3, [r3, #16]
 80034f2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	f003 0302 	and.w	r3, r3, #2
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d020      	beq.n	8003540 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f003 0302 	and.w	r3, r3, #2
 8003504:	2b00      	cmp	r3, #0
 8003506:	d01b      	beq.n	8003540 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f06f 0202 	mvn.w	r2, #2
 8003510:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2201      	movs	r2, #1
 8003516:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	f003 0303 	and.w	r3, r3, #3
 8003522:	2b00      	cmp	r3, #0
 8003524:	d003      	beq.n	800352e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 f8e4 	bl	80036f4 <HAL_TIM_IC_CaptureCallback>
 800352c:	e005      	b.n	800353a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f000 f8d6 	bl	80036e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f000 f8e7 	bl	8003708 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	f003 0304 	and.w	r3, r3, #4
 8003546:	2b00      	cmp	r3, #0
 8003548:	d020      	beq.n	800358c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	f003 0304 	and.w	r3, r3, #4
 8003550:	2b00      	cmp	r3, #0
 8003552:	d01b      	beq.n	800358c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f06f 0204 	mvn.w	r2, #4
 800355c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2202      	movs	r2, #2
 8003562:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	699b      	ldr	r3, [r3, #24]
 800356a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800356e:	2b00      	cmp	r3, #0
 8003570:	d003      	beq.n	800357a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f000 f8be 	bl	80036f4 <HAL_TIM_IC_CaptureCallback>
 8003578:	e005      	b.n	8003586 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 f8b0 	bl	80036e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f000 f8c1 	bl	8003708 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	f003 0308 	and.w	r3, r3, #8
 8003592:	2b00      	cmp	r3, #0
 8003594:	d020      	beq.n	80035d8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f003 0308 	and.w	r3, r3, #8
 800359c:	2b00      	cmp	r3, #0
 800359e:	d01b      	beq.n	80035d8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f06f 0208 	mvn.w	r2, #8
 80035a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2204      	movs	r2, #4
 80035ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	69db      	ldr	r3, [r3, #28]
 80035b6:	f003 0303 	and.w	r3, r3, #3
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d003      	beq.n	80035c6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 f898 	bl	80036f4 <HAL_TIM_IC_CaptureCallback>
 80035c4:	e005      	b.n	80035d2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 f88a 	bl	80036e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 f89b 	bl	8003708 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	f003 0310 	and.w	r3, r3, #16
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d020      	beq.n	8003624 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f003 0310 	and.w	r3, r3, #16
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d01b      	beq.n	8003624 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f06f 0210 	mvn.w	r2, #16
 80035f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2208      	movs	r2, #8
 80035fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	69db      	ldr	r3, [r3, #28]
 8003602:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003606:	2b00      	cmp	r3, #0
 8003608:	d003      	beq.n	8003612 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 f872 	bl	80036f4 <HAL_TIM_IC_CaptureCallback>
 8003610:	e005      	b.n	800361e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 f864 	bl	80036e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f000 f875 	bl	8003708 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	f003 0301 	and.w	r3, r3, #1
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00c      	beq.n	8003648 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f003 0301 	and.w	r3, r3, #1
 8003634:	2b00      	cmp	r3, #0
 8003636:	d007      	beq.n	8003648 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f06f 0201 	mvn.w	r2, #1
 8003640:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f7fd fa06 	bl	8000a54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00c      	beq.n	800366c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003658:	2b00      	cmp	r3, #0
 800365a:	d007      	beq.n	800366c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003664:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 f8d0 	bl	800380c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00c      	beq.n	8003690 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800367c:	2b00      	cmp	r3, #0
 800367e:	d007      	beq.n	8003690 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003688:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 f8c8 	bl	8003820 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00c      	beq.n	80036b4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d007      	beq.n	80036b4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80036ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 f834 	bl	800371c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	f003 0320 	and.w	r3, r3, #32
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00c      	beq.n	80036d8 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f003 0320 	and.w	r3, r3, #32
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d007      	beq.n	80036d8 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f06f 0220 	mvn.w	r2, #32
 80036d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 f890 	bl	80037f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036d8:	bf00      	nop
 80036da:	3710      	adds	r7, #16
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036e8:	bf00      	nop
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036fc:	bf00      	nop
 80036fe:	370c      	adds	r7, #12
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003724:	bf00      	nop
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003730:	b480      	push	{r7}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4a2a      	ldr	r2, [pc, #168]	; (80037ec <TIM_Base_SetConfig+0xbc>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d003      	beq.n	8003750 <TIM_Base_SetConfig+0x20>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800374e:	d108      	bne.n	8003762 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003756:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	68fa      	ldr	r2, [r7, #12]
 800375e:	4313      	orrs	r3, r2
 8003760:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a21      	ldr	r2, [pc, #132]	; (80037ec <TIM_Base_SetConfig+0xbc>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d00b      	beq.n	8003782 <TIM_Base_SetConfig+0x52>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003770:	d007      	beq.n	8003782 <TIM_Base_SetConfig+0x52>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a1e      	ldr	r2, [pc, #120]	; (80037f0 <TIM_Base_SetConfig+0xc0>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d003      	beq.n	8003782 <TIM_Base_SetConfig+0x52>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a1d      	ldr	r2, [pc, #116]	; (80037f4 <TIM_Base_SetConfig+0xc4>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d108      	bne.n	8003794 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003788:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	4313      	orrs	r3, r2
 8003792:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	695b      	ldr	r3, [r3, #20]
 800379e:	4313      	orrs	r3, r2
 80037a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	68fa      	ldr	r2, [r7, #12]
 80037a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	689a      	ldr	r2, [r3, #8]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a0c      	ldr	r2, [pc, #48]	; (80037ec <TIM_Base_SetConfig+0xbc>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d007      	beq.n	80037d0 <TIM_Base_SetConfig+0xa0>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4a0b      	ldr	r2, [pc, #44]	; (80037f0 <TIM_Base_SetConfig+0xc0>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d003      	beq.n	80037d0 <TIM_Base_SetConfig+0xa0>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4a0a      	ldr	r2, [pc, #40]	; (80037f4 <TIM_Base_SetConfig+0xc4>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d103      	bne.n	80037d8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	691a      	ldr	r2, [r3, #16]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	615a      	str	r2, [r3, #20]
}
 80037de:	bf00      	nop
 80037e0:	3714      	adds	r7, #20
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	40012c00 	.word	0x40012c00
 80037f0:	40014000 	.word	0x40014000
 80037f4:	40014400 	.word	0x40014400

080037f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003814:	bf00      	nop
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003828:	bf00      	nop
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr

08003834 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d101      	bne.n	8003846 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e040      	b.n	80038c8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800384a:	2b00      	cmp	r3, #0
 800384c:	d106      	bne.n	800385c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f7fd f994 	bl	8000b84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2224      	movs	r2, #36	; 0x24
 8003860:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f022 0201 	bic.w	r2, r2, #1
 8003870:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003876:	2b00      	cmp	r3, #0
 8003878:	d002      	beq.n	8003880 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 fe62 	bl	8004544 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f000 fc05 	bl	8004090 <UART_SetConfig>
 8003886:	4603      	mov	r3, r0
 8003888:	2b01      	cmp	r3, #1
 800388a:	d101      	bne.n	8003890 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e01b      	b.n	80038c8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	685a      	ldr	r2, [r3, #4]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800389e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	689a      	ldr	r2, [r3, #8]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f042 0201 	orr.w	r2, r2, #1
 80038be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f000 fee1 	bl	8004688 <UART_CheckIdleState>
 80038c6:	4603      	mov	r3, r0
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3708      	adds	r7, #8
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b08a      	sub	sp, #40	; 0x28
 80038d4:	af02      	add	r7, sp, #8
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	603b      	str	r3, [r7, #0]
 80038dc:	4613      	mov	r3, r2
 80038de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038e4:	2b20      	cmp	r3, #32
 80038e6:	d178      	bne.n	80039da <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d002      	beq.n	80038f4 <HAL_UART_Transmit+0x24>
 80038ee:	88fb      	ldrh	r3, [r7, #6]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d101      	bne.n	80038f8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e071      	b.n	80039dc <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2221      	movs	r2, #33	; 0x21
 8003904:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003906:	f7fd fb5f 	bl	8000fc8 <HAL_GetTick>
 800390a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	88fa      	ldrh	r2, [r7, #6]
 8003910:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	88fa      	ldrh	r2, [r7, #6]
 8003918:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003924:	d108      	bne.n	8003938 <HAL_UART_Transmit+0x68>
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d104      	bne.n	8003938 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800392e:	2300      	movs	r3, #0
 8003930:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	61bb      	str	r3, [r7, #24]
 8003936:	e003      	b.n	8003940 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800393c:	2300      	movs	r3, #0
 800393e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003940:	e030      	b.n	80039a4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	9300      	str	r3, [sp, #0]
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	2200      	movs	r2, #0
 800394a:	2180      	movs	r1, #128	; 0x80
 800394c:	68f8      	ldr	r0, [r7, #12]
 800394e:	f000 ff43 	bl	80047d8 <UART_WaitOnFlagUntilTimeout>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d004      	beq.n	8003962 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2220      	movs	r2, #32
 800395c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e03c      	b.n	80039dc <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d10b      	bne.n	8003980 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003968:	69bb      	ldr	r3, [r7, #24]
 800396a:	881a      	ldrh	r2, [r3, #0]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003974:	b292      	uxth	r2, r2
 8003976:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	3302      	adds	r3, #2
 800397c:	61bb      	str	r3, [r7, #24]
 800397e:	e008      	b.n	8003992 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	781a      	ldrb	r2, [r3, #0]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	b292      	uxth	r2, r2
 800398a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	3301      	adds	r3, #1
 8003990:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003998:	b29b      	uxth	r3, r3
 800399a:	3b01      	subs	r3, #1
 800399c:	b29a      	uxth	r2, r3
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d1c8      	bne.n	8003942 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	9300      	str	r3, [sp, #0]
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	2200      	movs	r2, #0
 80039b8:	2140      	movs	r1, #64	; 0x40
 80039ba:	68f8      	ldr	r0, [r7, #12]
 80039bc:	f000 ff0c 	bl	80047d8 <UART_WaitOnFlagUntilTimeout>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d004      	beq.n	80039d0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2220      	movs	r2, #32
 80039ca:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e005      	b.n	80039dc <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2220      	movs	r2, #32
 80039d4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80039d6:	2300      	movs	r3, #0
 80039d8:	e000      	b.n	80039dc <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80039da:	2302      	movs	r3, #2
  }
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3720      	adds	r7, #32
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b08a      	sub	sp, #40	; 0x28
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	4613      	mov	r3, r2
 80039f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039f8:	2b20      	cmp	r3, #32
 80039fa:	d137      	bne.n	8003a6c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d002      	beq.n	8003a08 <HAL_UART_Receive_IT+0x24>
 8003a02:	88fb      	ldrh	r3, [r7, #6]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d101      	bne.n	8003a0c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e030      	b.n	8003a6e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a18      	ldr	r2, [pc, #96]	; (8003a78 <HAL_UART_Receive_IT+0x94>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d01f      	beq.n	8003a5c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d018      	beq.n	8003a5c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	e853 3f00 	ldrex	r3, [r3]
 8003a36:	613b      	str	r3, [r7, #16]
   return(result);
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a3e:	627b      	str	r3, [r7, #36]	; 0x24
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	461a      	mov	r2, r3
 8003a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a48:	623b      	str	r3, [r7, #32]
 8003a4a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a4c:	69f9      	ldr	r1, [r7, #28]
 8003a4e:	6a3a      	ldr	r2, [r7, #32]
 8003a50:	e841 2300 	strex	r3, r2, [r1]
 8003a54:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d1e6      	bne.n	8003a2a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003a5c:	88fb      	ldrh	r3, [r7, #6]
 8003a5e:	461a      	mov	r2, r3
 8003a60:	68b9      	ldr	r1, [r7, #8]
 8003a62:	68f8      	ldr	r0, [r7, #12]
 8003a64:	f000 ff20 	bl	80048a8 <UART_Start_Receive_IT>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	e000      	b.n	8003a6e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003a6c:	2302      	movs	r3, #2
  }
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3728      	adds	r7, #40	; 0x28
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	40008000 	.word	0x40008000

08003a7c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b0ba      	sub	sp, #232	; 0xe8
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	69db      	ldr	r3, [r3, #28]
 8003a8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003aa2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003aa6:	f640 030f 	movw	r3, #2063	; 0x80f
 8003aaa:	4013      	ands	r3, r2
 8003aac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003ab0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d115      	bne.n	8003ae4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003ab8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003abc:	f003 0320 	and.w	r3, r3, #32
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00f      	beq.n	8003ae4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003ac4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ac8:	f003 0320 	and.w	r3, r3, #32
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d009      	beq.n	8003ae4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	f000 82ae 	beq.w	8004036 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	4798      	blx	r3
      }
      return;
 8003ae2:	e2a8      	b.n	8004036 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003ae4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	f000 8117 	beq.w	8003d1c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003aee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003af2:	f003 0301 	and.w	r3, r3, #1
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d106      	bne.n	8003b08 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003afa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003afe:	4b85      	ldr	r3, [pc, #532]	; (8003d14 <HAL_UART_IRQHandler+0x298>)
 8003b00:	4013      	ands	r3, r2
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	f000 810a 	beq.w	8003d1c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003b08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b0c:	f003 0301 	and.w	r3, r3, #1
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d011      	beq.n	8003b38 <HAL_UART_IRQHandler+0xbc>
 8003b14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d00b      	beq.n	8003b38 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2201      	movs	r2, #1
 8003b26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b2e:	f043 0201 	orr.w	r2, r3, #1
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003b38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b3c:	f003 0302 	and.w	r3, r3, #2
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d011      	beq.n	8003b68 <HAL_UART_IRQHandler+0xec>
 8003b44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b48:	f003 0301 	and.w	r3, r3, #1
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d00b      	beq.n	8003b68 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2202      	movs	r2, #2
 8003b56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b5e:	f043 0204 	orr.w	r2, r3, #4
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003b68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b6c:	f003 0304 	and.w	r3, r3, #4
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d011      	beq.n	8003b98 <HAL_UART_IRQHandler+0x11c>
 8003b74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b78:	f003 0301 	and.w	r3, r3, #1
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d00b      	beq.n	8003b98 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2204      	movs	r2, #4
 8003b86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b8e:	f043 0202 	orr.w	r2, r3, #2
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003b98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b9c:	f003 0308 	and.w	r3, r3, #8
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d017      	beq.n	8003bd4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003ba4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ba8:	f003 0320 	and.w	r3, r3, #32
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d105      	bne.n	8003bbc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003bb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003bb4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d00b      	beq.n	8003bd4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2208      	movs	r2, #8
 8003bc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bca:	f043 0208 	orr.w	r2, r3, #8
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003bd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d012      	beq.n	8003c06 <HAL_UART_IRQHandler+0x18a>
 8003be0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003be4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d00c      	beq.n	8003c06 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003bf4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bfc:	f043 0220 	orr.w	r2, r3, #32
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	f000 8214 	beq.w	800403a <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003c12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c16:	f003 0320 	and.w	r3, r3, #32
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d00d      	beq.n	8003c3a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003c1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c22:	f003 0320 	and.w	r3, r3, #32
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d007      	beq.n	8003c3a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d003      	beq.n	8003c3a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c40:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c4e:	2b40      	cmp	r3, #64	; 0x40
 8003c50:	d005      	beq.n	8003c5e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003c52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003c56:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d04f      	beq.n	8003cfe <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 fee8 	bl	8004a34 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c6e:	2b40      	cmp	r3, #64	; 0x40
 8003c70:	d141      	bne.n	8003cf6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	3308      	adds	r3, #8
 8003c78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c80:	e853 3f00 	ldrex	r3, [r3]
 8003c84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003c88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	3308      	adds	r3, #8
 8003c9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003c9e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003ca2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003caa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003cae:	e841 2300 	strex	r3, r2, [r1]
 8003cb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003cb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d1d9      	bne.n	8003c72 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d013      	beq.n	8003cee <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cca:	4a13      	ldr	r2, [pc, #76]	; (8003d18 <HAL_UART_IRQHandler+0x29c>)
 8003ccc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f7fd faa4 	bl	8001220 <HAL_DMA_Abort_IT>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d017      	beq.n	8003d0e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003ce8:	4610      	mov	r0, r2
 8003cea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cec:	e00f      	b.n	8003d0e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 f9b8 	bl	8004064 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cf4:	e00b      	b.n	8003d0e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 f9b4 	bl	8004064 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cfc:	e007      	b.n	8003d0e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 f9b0 	bl	8004064 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003d0c:	e195      	b.n	800403a <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d0e:	bf00      	nop
    return;
 8003d10:	e193      	b.n	800403a <HAL_UART_IRQHandler+0x5be>
 8003d12:	bf00      	nop
 8003d14:	04000120 	.word	0x04000120
 8003d18:	08004afd 	.word	0x08004afd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	f040 814e 	bne.w	8003fc2 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003d26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d2a:	f003 0310 	and.w	r3, r3, #16
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	f000 8147 	beq.w	8003fc2 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003d34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d38:	f003 0310 	and.w	r3, r3, #16
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	f000 8140 	beq.w	8003fc2 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2210      	movs	r2, #16
 8003d48:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d54:	2b40      	cmp	r3, #64	; 0x40
 8003d56:	f040 80b8 	bne.w	8003eca <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003d66:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	f000 8167 	beq.w	800403e <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003d76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	f080 815f 	bcs.w	800403e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d86:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0320 	and.w	r3, r3, #32
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	f040 8086 	bne.w	8003ea8 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003da8:	e853 3f00 	ldrex	r3, [r3]
 8003dac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003db0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003db4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003db8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003dc6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003dca:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dce:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003dd2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003dd6:	e841 2300 	strex	r3, r2, [r1]
 8003dda:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003dde:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1da      	bne.n	8003d9c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	3308      	adds	r3, #8
 8003dec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003df0:	e853 3f00 	ldrex	r3, [r3]
 8003df4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003df6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003df8:	f023 0301 	bic.w	r3, r3, #1
 8003dfc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	3308      	adds	r3, #8
 8003e06:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003e0a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003e0e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e10:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003e12:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003e16:	e841 2300 	strex	r3, r2, [r1]
 8003e1a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003e1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d1e1      	bne.n	8003de6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	3308      	adds	r3, #8
 8003e28:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e2c:	e853 3f00 	ldrex	r3, [r3]
 8003e30:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003e32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	3308      	adds	r3, #8
 8003e42:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003e46:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003e48:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e4a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003e4c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003e4e:	e841 2300 	strex	r3, r2, [r1]
 8003e52:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003e54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d1e3      	bne.n	8003e22 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2220      	movs	r2, #32
 8003e5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e70:	e853 3f00 	ldrex	r3, [r3]
 8003e74:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003e76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e78:	f023 0310 	bic.w	r3, r3, #16
 8003e7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	461a      	mov	r2, r3
 8003e86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003e8a:	65bb      	str	r3, [r7, #88]	; 0x58
 8003e8c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e8e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003e90:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e92:	e841 2300 	strex	r3, r2, [r1]
 8003e96:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003e98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d1e4      	bne.n	8003e68 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f7fd f97e 	bl	80011a4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2202      	movs	r2, #2
 8003eac:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f000 f8d8 	bl	8004078 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003ec8:	e0b9      	b.n	800403e <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	f000 80ab 	beq.w	8004042 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8003eec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	f000 80a6 	beq.w	8004042 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003efe:	e853 3f00 	ldrex	r3, [r3]
 8003f02:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f06:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f0a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	461a      	mov	r2, r3
 8003f14:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003f18:	647b      	str	r3, [r7, #68]	; 0x44
 8003f1a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f1c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003f1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f20:	e841 2300 	strex	r3, r2, [r1]
 8003f24:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003f26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d1e4      	bne.n	8003ef6 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	3308      	adds	r3, #8
 8003f32:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f36:	e853 3f00 	ldrex	r3, [r3]
 8003f3a:	623b      	str	r3, [r7, #32]
   return(result);
 8003f3c:	6a3b      	ldr	r3, [r7, #32]
 8003f3e:	f023 0301 	bic.w	r3, r3, #1
 8003f42:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	3308      	adds	r3, #8
 8003f4c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003f50:	633a      	str	r2, [r7, #48]	; 0x30
 8003f52:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f54:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f58:	e841 2300 	strex	r3, r2, [r1]
 8003f5c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d1e3      	bne.n	8003f2c <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2220      	movs	r2, #32
 8003f68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	e853 3f00 	ldrex	r3, [r3]
 8003f84:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f023 0310 	bic.w	r3, r3, #16
 8003f8c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	461a      	mov	r2, r3
 8003f96:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003f9a:	61fb      	str	r3, [r7, #28]
 8003f9c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f9e:	69b9      	ldr	r1, [r7, #24]
 8003fa0:	69fa      	ldr	r2, [r7, #28]
 8003fa2:	e841 2300 	strex	r3, r2, [r1]
 8003fa6:	617b      	str	r3, [r7, #20]
   return(result);
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d1e4      	bne.n	8003f78 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2202      	movs	r2, #2
 8003fb2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003fb4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003fb8:	4619      	mov	r1, r3
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 f85c 	bl	8004078 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003fc0:	e03f      	b.n	8004042 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003fc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d00e      	beq.n	8003fec <HAL_UART_IRQHandler+0x570>
 8003fce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d008      	beq.n	8003fec <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003fe2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f000 ff85 	bl	8004ef4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003fea:	e02d      	b.n	8004048 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003fec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ff0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d00e      	beq.n	8004016 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003ff8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ffc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004000:	2b00      	cmp	r3, #0
 8004002:	d008      	beq.n	8004016 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004008:	2b00      	cmp	r3, #0
 800400a:	d01c      	beq.n	8004046 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	4798      	blx	r3
    }
    return;
 8004014:	e017      	b.n	8004046 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004016:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800401a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800401e:	2b00      	cmp	r3, #0
 8004020:	d012      	beq.n	8004048 <HAL_UART_IRQHandler+0x5cc>
 8004022:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800402a:	2b00      	cmp	r3, #0
 800402c:	d00c      	beq.n	8004048 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 fd7a 	bl	8004b28 <UART_EndTransmit_IT>
    return;
 8004034:	e008      	b.n	8004048 <HAL_UART_IRQHandler+0x5cc>
      return;
 8004036:	bf00      	nop
 8004038:	e006      	b.n	8004048 <HAL_UART_IRQHandler+0x5cc>
    return;
 800403a:	bf00      	nop
 800403c:	e004      	b.n	8004048 <HAL_UART_IRQHandler+0x5cc>
      return;
 800403e:	bf00      	nop
 8004040:	e002      	b.n	8004048 <HAL_UART_IRQHandler+0x5cc>
      return;
 8004042:	bf00      	nop
 8004044:	e000      	b.n	8004048 <HAL_UART_IRQHandler+0x5cc>
    return;
 8004046:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004048:	37e8      	adds	r7, #232	; 0xe8
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop

08004050 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004050:	b480      	push	{r7}
 8004052:	b083      	sub	sp, #12
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004058:	bf00      	nop
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800406c:	bf00      	nop
 800406e:	370c      	adds	r7, #12
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr

08004078 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	460b      	mov	r3, r1
 8004082:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004084:	bf00      	nop
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004090:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004094:	b08a      	sub	sp, #40	; 0x28
 8004096:	af00      	add	r7, sp, #0
 8004098:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800409a:	2300      	movs	r3, #0
 800409c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	689a      	ldr	r2, [r3, #8]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	691b      	ldr	r3, [r3, #16]
 80040a8:	431a      	orrs	r2, r3
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	695b      	ldr	r3, [r3, #20]
 80040ae:	431a      	orrs	r2, r3
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	69db      	ldr	r3, [r3, #28]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	4b9e      	ldr	r3, [pc, #632]	; (8004338 <UART_SetConfig+0x2a8>)
 80040c0:	4013      	ands	r3, r2
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	6812      	ldr	r2, [r2, #0]
 80040c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80040c8:	430b      	orrs	r3, r1
 80040ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	68da      	ldr	r2, [r3, #12]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	430a      	orrs	r2, r1
 80040e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	699b      	ldr	r3, [r3, #24]
 80040e6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a93      	ldr	r2, [pc, #588]	; (800433c <UART_SetConfig+0x2ac>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d004      	beq.n	80040fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6a1b      	ldr	r3, [r3, #32]
 80040f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040f8:	4313      	orrs	r3, r2
 80040fa:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800410c:	430a      	orrs	r2, r1
 800410e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a8a      	ldr	r2, [pc, #552]	; (8004340 <UART_SetConfig+0x2b0>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d126      	bne.n	8004168 <UART_SetConfig+0xd8>
 800411a:	4b8a      	ldr	r3, [pc, #552]	; (8004344 <UART_SetConfig+0x2b4>)
 800411c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004120:	f003 0303 	and.w	r3, r3, #3
 8004124:	2b03      	cmp	r3, #3
 8004126:	d81b      	bhi.n	8004160 <UART_SetConfig+0xd0>
 8004128:	a201      	add	r2, pc, #4	; (adr r2, 8004130 <UART_SetConfig+0xa0>)
 800412a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800412e:	bf00      	nop
 8004130:	08004141 	.word	0x08004141
 8004134:	08004151 	.word	0x08004151
 8004138:	08004149 	.word	0x08004149
 800413c:	08004159 	.word	0x08004159
 8004140:	2301      	movs	r3, #1
 8004142:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004146:	e0ab      	b.n	80042a0 <UART_SetConfig+0x210>
 8004148:	2302      	movs	r3, #2
 800414a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800414e:	e0a7      	b.n	80042a0 <UART_SetConfig+0x210>
 8004150:	2304      	movs	r3, #4
 8004152:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004156:	e0a3      	b.n	80042a0 <UART_SetConfig+0x210>
 8004158:	2308      	movs	r3, #8
 800415a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800415e:	e09f      	b.n	80042a0 <UART_SetConfig+0x210>
 8004160:	2310      	movs	r3, #16
 8004162:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004166:	e09b      	b.n	80042a0 <UART_SetConfig+0x210>
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a76      	ldr	r2, [pc, #472]	; (8004348 <UART_SetConfig+0x2b8>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d138      	bne.n	80041e4 <UART_SetConfig+0x154>
 8004172:	4b74      	ldr	r3, [pc, #464]	; (8004344 <UART_SetConfig+0x2b4>)
 8004174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004178:	f003 030c 	and.w	r3, r3, #12
 800417c:	2b0c      	cmp	r3, #12
 800417e:	d82d      	bhi.n	80041dc <UART_SetConfig+0x14c>
 8004180:	a201      	add	r2, pc, #4	; (adr r2, 8004188 <UART_SetConfig+0xf8>)
 8004182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004186:	bf00      	nop
 8004188:	080041bd 	.word	0x080041bd
 800418c:	080041dd 	.word	0x080041dd
 8004190:	080041dd 	.word	0x080041dd
 8004194:	080041dd 	.word	0x080041dd
 8004198:	080041cd 	.word	0x080041cd
 800419c:	080041dd 	.word	0x080041dd
 80041a0:	080041dd 	.word	0x080041dd
 80041a4:	080041dd 	.word	0x080041dd
 80041a8:	080041c5 	.word	0x080041c5
 80041ac:	080041dd 	.word	0x080041dd
 80041b0:	080041dd 	.word	0x080041dd
 80041b4:	080041dd 	.word	0x080041dd
 80041b8:	080041d5 	.word	0x080041d5
 80041bc:	2300      	movs	r3, #0
 80041be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041c2:	e06d      	b.n	80042a0 <UART_SetConfig+0x210>
 80041c4:	2302      	movs	r3, #2
 80041c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041ca:	e069      	b.n	80042a0 <UART_SetConfig+0x210>
 80041cc:	2304      	movs	r3, #4
 80041ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041d2:	e065      	b.n	80042a0 <UART_SetConfig+0x210>
 80041d4:	2308      	movs	r3, #8
 80041d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041da:	e061      	b.n	80042a0 <UART_SetConfig+0x210>
 80041dc:	2310      	movs	r3, #16
 80041de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041e2:	e05d      	b.n	80042a0 <UART_SetConfig+0x210>
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a58      	ldr	r2, [pc, #352]	; (800434c <UART_SetConfig+0x2bc>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d125      	bne.n	800423a <UART_SetConfig+0x1aa>
 80041ee:	4b55      	ldr	r3, [pc, #340]	; (8004344 <UART_SetConfig+0x2b4>)
 80041f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041f4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80041f8:	2b30      	cmp	r3, #48	; 0x30
 80041fa:	d016      	beq.n	800422a <UART_SetConfig+0x19a>
 80041fc:	2b30      	cmp	r3, #48	; 0x30
 80041fe:	d818      	bhi.n	8004232 <UART_SetConfig+0x1a2>
 8004200:	2b20      	cmp	r3, #32
 8004202:	d00a      	beq.n	800421a <UART_SetConfig+0x18a>
 8004204:	2b20      	cmp	r3, #32
 8004206:	d814      	bhi.n	8004232 <UART_SetConfig+0x1a2>
 8004208:	2b00      	cmp	r3, #0
 800420a:	d002      	beq.n	8004212 <UART_SetConfig+0x182>
 800420c:	2b10      	cmp	r3, #16
 800420e:	d008      	beq.n	8004222 <UART_SetConfig+0x192>
 8004210:	e00f      	b.n	8004232 <UART_SetConfig+0x1a2>
 8004212:	2300      	movs	r3, #0
 8004214:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004218:	e042      	b.n	80042a0 <UART_SetConfig+0x210>
 800421a:	2302      	movs	r3, #2
 800421c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004220:	e03e      	b.n	80042a0 <UART_SetConfig+0x210>
 8004222:	2304      	movs	r3, #4
 8004224:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004228:	e03a      	b.n	80042a0 <UART_SetConfig+0x210>
 800422a:	2308      	movs	r3, #8
 800422c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004230:	e036      	b.n	80042a0 <UART_SetConfig+0x210>
 8004232:	2310      	movs	r3, #16
 8004234:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004238:	e032      	b.n	80042a0 <UART_SetConfig+0x210>
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a3f      	ldr	r2, [pc, #252]	; (800433c <UART_SetConfig+0x2ac>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d12a      	bne.n	800429a <UART_SetConfig+0x20a>
 8004244:	4b3f      	ldr	r3, [pc, #252]	; (8004344 <UART_SetConfig+0x2b4>)
 8004246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800424a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800424e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004252:	d01a      	beq.n	800428a <UART_SetConfig+0x1fa>
 8004254:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004258:	d81b      	bhi.n	8004292 <UART_SetConfig+0x202>
 800425a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800425e:	d00c      	beq.n	800427a <UART_SetConfig+0x1ea>
 8004260:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004264:	d815      	bhi.n	8004292 <UART_SetConfig+0x202>
 8004266:	2b00      	cmp	r3, #0
 8004268:	d003      	beq.n	8004272 <UART_SetConfig+0x1e2>
 800426a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800426e:	d008      	beq.n	8004282 <UART_SetConfig+0x1f2>
 8004270:	e00f      	b.n	8004292 <UART_SetConfig+0x202>
 8004272:	2300      	movs	r3, #0
 8004274:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004278:	e012      	b.n	80042a0 <UART_SetConfig+0x210>
 800427a:	2302      	movs	r3, #2
 800427c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004280:	e00e      	b.n	80042a0 <UART_SetConfig+0x210>
 8004282:	2304      	movs	r3, #4
 8004284:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004288:	e00a      	b.n	80042a0 <UART_SetConfig+0x210>
 800428a:	2308      	movs	r3, #8
 800428c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004290:	e006      	b.n	80042a0 <UART_SetConfig+0x210>
 8004292:	2310      	movs	r3, #16
 8004294:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004298:	e002      	b.n	80042a0 <UART_SetConfig+0x210>
 800429a:	2310      	movs	r3, #16
 800429c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a25      	ldr	r2, [pc, #148]	; (800433c <UART_SetConfig+0x2ac>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	f040 808a 	bne.w	80043c0 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80042ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80042b0:	2b08      	cmp	r3, #8
 80042b2:	d824      	bhi.n	80042fe <UART_SetConfig+0x26e>
 80042b4:	a201      	add	r2, pc, #4	; (adr r2, 80042bc <UART_SetConfig+0x22c>)
 80042b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ba:	bf00      	nop
 80042bc:	080042e1 	.word	0x080042e1
 80042c0:	080042ff 	.word	0x080042ff
 80042c4:	080042e9 	.word	0x080042e9
 80042c8:	080042ff 	.word	0x080042ff
 80042cc:	080042ef 	.word	0x080042ef
 80042d0:	080042ff 	.word	0x080042ff
 80042d4:	080042ff 	.word	0x080042ff
 80042d8:	080042ff 	.word	0x080042ff
 80042dc:	080042f7 	.word	0x080042f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042e0:	f7fe fdf2 	bl	8002ec8 <HAL_RCC_GetPCLK1Freq>
 80042e4:	61f8      	str	r0, [r7, #28]
        break;
 80042e6:	e010      	b.n	800430a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042e8:	4b19      	ldr	r3, [pc, #100]	; (8004350 <UART_SetConfig+0x2c0>)
 80042ea:	61fb      	str	r3, [r7, #28]
        break;
 80042ec:	e00d      	b.n	800430a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042ee:	f7fe fd53 	bl	8002d98 <HAL_RCC_GetSysClockFreq>
 80042f2:	61f8      	str	r0, [r7, #28]
        break;
 80042f4:	e009      	b.n	800430a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042fa:	61fb      	str	r3, [r7, #28]
        break;
 80042fc:	e005      	b.n	800430a <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 80042fe:	2300      	movs	r3, #0
 8004300:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004308:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	2b00      	cmp	r3, #0
 800430e:	f000 8109 	beq.w	8004524 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	685a      	ldr	r2, [r3, #4]
 8004316:	4613      	mov	r3, r2
 8004318:	005b      	lsls	r3, r3, #1
 800431a:	4413      	add	r3, r2
 800431c:	69fa      	ldr	r2, [r7, #28]
 800431e:	429a      	cmp	r2, r3
 8004320:	d305      	bcc.n	800432e <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004328:	69fa      	ldr	r2, [r7, #28]
 800432a:	429a      	cmp	r2, r3
 800432c:	d912      	bls.n	8004354 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004334:	e0f6      	b.n	8004524 <UART_SetConfig+0x494>
 8004336:	bf00      	nop
 8004338:	efff69f3 	.word	0xefff69f3
 800433c:	40008000 	.word	0x40008000
 8004340:	40013800 	.word	0x40013800
 8004344:	40021000 	.word	0x40021000
 8004348:	40004400 	.word	0x40004400
 800434c:	40004800 	.word	0x40004800
 8004350:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	2200      	movs	r2, #0
 8004358:	461c      	mov	r4, r3
 800435a:	4615      	mov	r5, r2
 800435c:	f04f 0200 	mov.w	r2, #0
 8004360:	f04f 0300 	mov.w	r3, #0
 8004364:	022b      	lsls	r3, r5, #8
 8004366:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800436a:	0222      	lsls	r2, r4, #8
 800436c:	68f9      	ldr	r1, [r7, #12]
 800436e:	6849      	ldr	r1, [r1, #4]
 8004370:	0849      	lsrs	r1, r1, #1
 8004372:	2000      	movs	r0, #0
 8004374:	4688      	mov	r8, r1
 8004376:	4681      	mov	r9, r0
 8004378:	eb12 0a08 	adds.w	sl, r2, r8
 800437c:	eb43 0b09 	adc.w	fp, r3, r9
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	603b      	str	r3, [r7, #0]
 8004388:	607a      	str	r2, [r7, #4]
 800438a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800438e:	4650      	mov	r0, sl
 8004390:	4659      	mov	r1, fp
 8004392:	f7fb ff6d 	bl	8000270 <__aeabi_uldivmod>
 8004396:	4602      	mov	r2, r0
 8004398:	460b      	mov	r3, r1
 800439a:	4613      	mov	r3, r2
 800439c:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043a4:	d308      	bcc.n	80043b8 <UART_SetConfig+0x328>
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043ac:	d204      	bcs.n	80043b8 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	69ba      	ldr	r2, [r7, #24]
 80043b4:	60da      	str	r2, [r3, #12]
 80043b6:	e0b5      	b.n	8004524 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80043be:	e0b1      	b.n	8004524 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	69db      	ldr	r3, [r3, #28]
 80043c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043c8:	d15d      	bne.n	8004486 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 80043ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80043ce:	2b08      	cmp	r3, #8
 80043d0:	d827      	bhi.n	8004422 <UART_SetConfig+0x392>
 80043d2:	a201      	add	r2, pc, #4	; (adr r2, 80043d8 <UART_SetConfig+0x348>)
 80043d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043d8:	080043fd 	.word	0x080043fd
 80043dc:	08004405 	.word	0x08004405
 80043e0:	0800440d 	.word	0x0800440d
 80043e4:	08004423 	.word	0x08004423
 80043e8:	08004413 	.word	0x08004413
 80043ec:	08004423 	.word	0x08004423
 80043f0:	08004423 	.word	0x08004423
 80043f4:	08004423 	.word	0x08004423
 80043f8:	0800441b 	.word	0x0800441b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043fc:	f7fe fd64 	bl	8002ec8 <HAL_RCC_GetPCLK1Freq>
 8004400:	61f8      	str	r0, [r7, #28]
        break;
 8004402:	e014      	b.n	800442e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004404:	f7fe fd76 	bl	8002ef4 <HAL_RCC_GetPCLK2Freq>
 8004408:	61f8      	str	r0, [r7, #28]
        break;
 800440a:	e010      	b.n	800442e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800440c:	4b4c      	ldr	r3, [pc, #304]	; (8004540 <UART_SetConfig+0x4b0>)
 800440e:	61fb      	str	r3, [r7, #28]
        break;
 8004410:	e00d      	b.n	800442e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004412:	f7fe fcc1 	bl	8002d98 <HAL_RCC_GetSysClockFreq>
 8004416:	61f8      	str	r0, [r7, #28]
        break;
 8004418:	e009      	b.n	800442e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800441a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800441e:	61fb      	str	r3, [r7, #28]
        break;
 8004420:	e005      	b.n	800442e <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8004422:	2300      	movs	r3, #0
 8004424:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800442c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d077      	beq.n	8004524 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	005a      	lsls	r2, r3, #1
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	085b      	lsrs	r3, r3, #1
 800443e:	441a      	add	r2, r3
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	fbb2 f3f3 	udiv	r3, r2, r3
 8004448:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	2b0f      	cmp	r3, #15
 800444e:	d916      	bls.n	800447e <UART_SetConfig+0x3ee>
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004456:	d212      	bcs.n	800447e <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004458:	69bb      	ldr	r3, [r7, #24]
 800445a:	b29b      	uxth	r3, r3
 800445c:	f023 030f 	bic.w	r3, r3, #15
 8004460:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	085b      	lsrs	r3, r3, #1
 8004466:	b29b      	uxth	r3, r3
 8004468:	f003 0307 	and.w	r3, r3, #7
 800446c:	b29a      	uxth	r2, r3
 800446e:	8afb      	ldrh	r3, [r7, #22]
 8004470:	4313      	orrs	r3, r2
 8004472:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	8afa      	ldrh	r2, [r7, #22]
 800447a:	60da      	str	r2, [r3, #12]
 800447c:	e052      	b.n	8004524 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004484:	e04e      	b.n	8004524 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004486:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800448a:	2b08      	cmp	r3, #8
 800448c:	d827      	bhi.n	80044de <UART_SetConfig+0x44e>
 800448e:	a201      	add	r2, pc, #4	; (adr r2, 8004494 <UART_SetConfig+0x404>)
 8004490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004494:	080044b9 	.word	0x080044b9
 8004498:	080044c1 	.word	0x080044c1
 800449c:	080044c9 	.word	0x080044c9
 80044a0:	080044df 	.word	0x080044df
 80044a4:	080044cf 	.word	0x080044cf
 80044a8:	080044df 	.word	0x080044df
 80044ac:	080044df 	.word	0x080044df
 80044b0:	080044df 	.word	0x080044df
 80044b4:	080044d7 	.word	0x080044d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044b8:	f7fe fd06 	bl	8002ec8 <HAL_RCC_GetPCLK1Freq>
 80044bc:	61f8      	str	r0, [r7, #28]
        break;
 80044be:	e014      	b.n	80044ea <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044c0:	f7fe fd18 	bl	8002ef4 <HAL_RCC_GetPCLK2Freq>
 80044c4:	61f8      	str	r0, [r7, #28]
        break;
 80044c6:	e010      	b.n	80044ea <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044c8:	4b1d      	ldr	r3, [pc, #116]	; (8004540 <UART_SetConfig+0x4b0>)
 80044ca:	61fb      	str	r3, [r7, #28]
        break;
 80044cc:	e00d      	b.n	80044ea <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044ce:	f7fe fc63 	bl	8002d98 <HAL_RCC_GetSysClockFreq>
 80044d2:	61f8      	str	r0, [r7, #28]
        break;
 80044d4:	e009      	b.n	80044ea <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044da:	61fb      	str	r3, [r7, #28]
        break;
 80044dc:	e005      	b.n	80044ea <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 80044de:	2300      	movs	r3, #0
 80044e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80044e8:	bf00      	nop
    }

    if (pclk != 0U)
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d019      	beq.n	8004524 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	085a      	lsrs	r2, r3, #1
 80044f6:	69fb      	ldr	r3, [r7, #28]
 80044f8:	441a      	add	r2, r3
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004502:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	2b0f      	cmp	r3, #15
 8004508:	d909      	bls.n	800451e <UART_SetConfig+0x48e>
 800450a:	69bb      	ldr	r3, [r7, #24]
 800450c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004510:	d205      	bcs.n	800451e <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	b29a      	uxth	r2, r3
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	60da      	str	r2, [r3, #12]
 800451c:	e002      	b.n	8004524 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2200      	movs	r2, #0
 8004528:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004530:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004534:	4618      	mov	r0, r3
 8004536:	3728      	adds	r7, #40	; 0x28
 8004538:	46bd      	mov	sp, r7
 800453a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800453e:	bf00      	nop
 8004540:	00f42400 	.word	0x00f42400

08004544 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004550:	f003 0308 	and.w	r3, r3, #8
 8004554:	2b00      	cmp	r3, #0
 8004556:	d00a      	beq.n	800456e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	430a      	orrs	r2, r1
 800456c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004572:	f003 0301 	and.w	r3, r3, #1
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00a      	beq.n	8004590 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	430a      	orrs	r2, r1
 800458e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004594:	f003 0302 	and.w	r3, r3, #2
 8004598:	2b00      	cmp	r3, #0
 800459a:	d00a      	beq.n	80045b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	430a      	orrs	r2, r1
 80045b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b6:	f003 0304 	and.w	r3, r3, #4
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d00a      	beq.n	80045d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	430a      	orrs	r2, r1
 80045d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d8:	f003 0310 	and.w	r3, r3, #16
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d00a      	beq.n	80045f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	430a      	orrs	r2, r1
 80045f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fa:	f003 0320 	and.w	r3, r3, #32
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00a      	beq.n	8004618 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	430a      	orrs	r2, r1
 8004616:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004620:	2b00      	cmp	r3, #0
 8004622:	d01a      	beq.n	800465a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	430a      	orrs	r2, r1
 8004638:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004642:	d10a      	bne.n	800465a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	430a      	orrs	r2, r1
 8004658:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004662:	2b00      	cmp	r3, #0
 8004664:	d00a      	beq.n	800467c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	430a      	orrs	r2, r1
 800467a:	605a      	str	r2, [r3, #4]
  }
}
 800467c:	bf00      	nop
 800467e:	370c      	adds	r7, #12
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b098      	sub	sp, #96	; 0x60
 800468c:	af02      	add	r7, sp, #8
 800468e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004698:	f7fc fc96 	bl	8000fc8 <HAL_GetTick>
 800469c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0308 	and.w	r3, r3, #8
 80046a8:	2b08      	cmp	r3, #8
 80046aa:	d12e      	bne.n	800470a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80046b0:	9300      	str	r3, [sp, #0]
 80046b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046b4:	2200      	movs	r2, #0
 80046b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f000 f88c 	bl	80047d8 <UART_WaitOnFlagUntilTimeout>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d021      	beq.n	800470a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ce:	e853 3f00 	ldrex	r3, [r3]
 80046d2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80046d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046da:	653b      	str	r3, [r7, #80]	; 0x50
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	461a      	mov	r2, r3
 80046e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046e4:	647b      	str	r3, [r7, #68]	; 0x44
 80046e6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80046ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80046ec:	e841 2300 	strex	r3, r2, [r1]
 80046f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80046f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d1e6      	bne.n	80046c6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2220      	movs	r2, #32
 80046fc:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e062      	b.n	80047d0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0304 	and.w	r3, r3, #4
 8004714:	2b04      	cmp	r3, #4
 8004716:	d149      	bne.n	80047ac <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004718:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800471c:	9300      	str	r3, [sp, #0]
 800471e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004720:	2200      	movs	r2, #0
 8004722:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 f856 	bl	80047d8 <UART_WaitOnFlagUntilTimeout>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d03c      	beq.n	80047ac <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473a:	e853 3f00 	ldrex	r3, [r3]
 800473e:	623b      	str	r3, [r7, #32]
   return(result);
 8004740:	6a3b      	ldr	r3, [r7, #32]
 8004742:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004746:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	461a      	mov	r2, r3
 800474e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004750:	633b      	str	r3, [r7, #48]	; 0x30
 8004752:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004754:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004756:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004758:	e841 2300 	strex	r3, r2, [r1]
 800475c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800475e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004760:	2b00      	cmp	r3, #0
 8004762:	d1e6      	bne.n	8004732 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	3308      	adds	r3, #8
 800476a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	e853 3f00 	ldrex	r3, [r3]
 8004772:	60fb      	str	r3, [r7, #12]
   return(result);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f023 0301 	bic.w	r3, r3, #1
 800477a:	64bb      	str	r3, [r7, #72]	; 0x48
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	3308      	adds	r3, #8
 8004782:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004784:	61fa      	str	r2, [r7, #28]
 8004786:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004788:	69b9      	ldr	r1, [r7, #24]
 800478a:	69fa      	ldr	r2, [r7, #28]
 800478c:	e841 2300 	strex	r3, r2, [r1]
 8004790:	617b      	str	r3, [r7, #20]
   return(result);
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d1e5      	bne.n	8004764 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2220      	movs	r2, #32
 800479c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047a8:	2303      	movs	r3, #3
 80047aa:	e011      	b.n	80047d0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2220      	movs	r2, #32
 80047b0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2220      	movs	r2, #32
 80047b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80047ce:	2300      	movs	r3, #0
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3758      	adds	r7, #88	; 0x58
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	603b      	str	r3, [r7, #0]
 80047e4:	4613      	mov	r3, r2
 80047e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047e8:	e049      	b.n	800487e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047f0:	d045      	beq.n	800487e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047f2:	f7fc fbe9 	bl	8000fc8 <HAL_GetTick>
 80047f6:	4602      	mov	r2, r0
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	1ad3      	subs	r3, r2, r3
 80047fc:	69ba      	ldr	r2, [r7, #24]
 80047fe:	429a      	cmp	r2, r3
 8004800:	d302      	bcc.n	8004808 <UART_WaitOnFlagUntilTimeout+0x30>
 8004802:	69bb      	ldr	r3, [r7, #24]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d101      	bne.n	800480c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004808:	2303      	movs	r3, #3
 800480a:	e048      	b.n	800489e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0304 	and.w	r3, r3, #4
 8004816:	2b00      	cmp	r3, #0
 8004818:	d031      	beq.n	800487e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	69db      	ldr	r3, [r3, #28]
 8004820:	f003 0308 	and.w	r3, r3, #8
 8004824:	2b08      	cmp	r3, #8
 8004826:	d110      	bne.n	800484a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2208      	movs	r2, #8
 800482e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004830:	68f8      	ldr	r0, [r7, #12]
 8004832:	f000 f8ff 	bl	8004a34 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2208      	movs	r2, #8
 800483a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2200      	movs	r2, #0
 8004842:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e029      	b.n	800489e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	69db      	ldr	r3, [r3, #28]
 8004850:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004854:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004858:	d111      	bne.n	800487e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004862:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004864:	68f8      	ldr	r0, [r7, #12]
 8004866:	f000 f8e5 	bl	8004a34 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2220      	movs	r2, #32
 800486e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e00f      	b.n	800489e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	69da      	ldr	r2, [r3, #28]
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	4013      	ands	r3, r2
 8004888:	68ba      	ldr	r2, [r7, #8]
 800488a:	429a      	cmp	r2, r3
 800488c:	bf0c      	ite	eq
 800488e:	2301      	moveq	r3, #1
 8004890:	2300      	movne	r3, #0
 8004892:	b2db      	uxtb	r3, r3
 8004894:	461a      	mov	r2, r3
 8004896:	79fb      	ldrb	r3, [r7, #7]
 8004898:	429a      	cmp	r2, r3
 800489a:	d0a6      	beq.n	80047ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800489c:	2300      	movs	r3, #0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3710      	adds	r7, #16
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
	...

080048a8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b097      	sub	sp, #92	; 0x5c
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	4613      	mov	r3, r2
 80048b4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	68ba      	ldr	r2, [r7, #8]
 80048ba:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	88fa      	ldrh	r2, [r7, #6]
 80048c0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	88fa      	ldrh	r2, [r7, #6]
 80048c8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2200      	movs	r2, #0
 80048d0:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048da:	d10e      	bne.n	80048fa <UART_Start_Receive_IT+0x52>
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d105      	bne.n	80048f0 <UART_Start_Receive_IT+0x48>
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80048ea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80048ee:	e02d      	b.n	800494c <UART_Start_Receive_IT+0xa4>
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	22ff      	movs	r2, #255	; 0xff
 80048f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80048f8:	e028      	b.n	800494c <UART_Start_Receive_IT+0xa4>
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d10d      	bne.n	800491e <UART_Start_Receive_IT+0x76>
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d104      	bne.n	8004914 <UART_Start_Receive_IT+0x6c>
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	22ff      	movs	r2, #255	; 0xff
 800490e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004912:	e01b      	b.n	800494c <UART_Start_Receive_IT+0xa4>
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	227f      	movs	r2, #127	; 0x7f
 8004918:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800491c:	e016      	b.n	800494c <UART_Start_Receive_IT+0xa4>
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004926:	d10d      	bne.n	8004944 <UART_Start_Receive_IT+0x9c>
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	691b      	ldr	r3, [r3, #16]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d104      	bne.n	800493a <UART_Start_Receive_IT+0x92>
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	227f      	movs	r2, #127	; 0x7f
 8004934:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004938:	e008      	b.n	800494c <UART_Start_Receive_IT+0xa4>
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	223f      	movs	r2, #63	; 0x3f
 800493e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004942:	e003      	b.n	800494c <UART_Start_Receive_IT+0xa4>
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2200      	movs	r2, #0
 8004948:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2200      	movs	r2, #0
 8004950:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2222      	movs	r2, #34	; 0x22
 8004958:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	3308      	adds	r3, #8
 8004962:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004966:	e853 3f00 	ldrex	r3, [r3]
 800496a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800496c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800496e:	f043 0301 	orr.w	r3, r3, #1
 8004972:	657b      	str	r3, [r7, #84]	; 0x54
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	3308      	adds	r3, #8
 800497a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800497c:	64ba      	str	r2, [r7, #72]	; 0x48
 800497e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004980:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004982:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004984:	e841 2300 	strex	r3, r2, [r1]
 8004988:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800498a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800498c:	2b00      	cmp	r3, #0
 800498e:	d1e5      	bne.n	800495c <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004998:	d107      	bne.n	80049aa <UART_Start_Receive_IT+0x102>
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d103      	bne.n	80049aa <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	4a21      	ldr	r2, [pc, #132]	; (8004a2c <UART_Start_Receive_IT+0x184>)
 80049a6:	669a      	str	r2, [r3, #104]	; 0x68
 80049a8:	e002      	b.n	80049b0 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	4a20      	ldr	r2, [pc, #128]	; (8004a30 <UART_Start_Receive_IT+0x188>)
 80049ae:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	691b      	ldr	r3, [r3, #16]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d019      	beq.n	80049ec <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c0:	e853 3f00 	ldrex	r3, [r3]
 80049c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c8:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80049cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	461a      	mov	r2, r3
 80049d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049d6:	637b      	str	r3, [r7, #52]	; 0x34
 80049d8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80049dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80049de:	e841 2300 	strex	r3, r2, [r1]
 80049e2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80049e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d1e6      	bne.n	80049b8 <UART_Start_Receive_IT+0x110>
 80049ea:	e018      	b.n	8004a1e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	e853 3f00 	ldrex	r3, [r3]
 80049f8:	613b      	str	r3, [r7, #16]
   return(result);
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	f043 0320 	orr.w	r3, r3, #32
 8004a00:	653b      	str	r3, [r7, #80]	; 0x50
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	461a      	mov	r2, r3
 8004a08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a0a:	623b      	str	r3, [r7, #32]
 8004a0c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a0e:	69f9      	ldr	r1, [r7, #28]
 8004a10:	6a3a      	ldr	r2, [r7, #32]
 8004a12:	e841 2300 	strex	r3, r2, [r1]
 8004a16:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d1e6      	bne.n	80049ec <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004a1e:	2300      	movs	r3, #0
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	375c      	adds	r7, #92	; 0x5c
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr
 8004a2c:	08004d39 	.word	0x08004d39
 8004a30:	08004b7d 	.word	0x08004b7d

08004a34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b095      	sub	sp, #84	; 0x54
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a44:	e853 3f00 	ldrex	r3, [r3]
 8004a48:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a4c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a50:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	461a      	mov	r2, r3
 8004a58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a5a:	643b      	str	r3, [r7, #64]	; 0x40
 8004a5c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a5e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004a60:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a62:	e841 2300 	strex	r3, r2, [r1]
 8004a66:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d1e6      	bne.n	8004a3c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	3308      	adds	r3, #8
 8004a74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a76:	6a3b      	ldr	r3, [r7, #32]
 8004a78:	e853 3f00 	ldrex	r3, [r3]
 8004a7c:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	f023 0301 	bic.w	r3, r3, #1
 8004a84:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	3308      	adds	r3, #8
 8004a8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a90:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a96:	e841 2300 	strex	r3, r2, [r1]
 8004a9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d1e5      	bne.n	8004a6e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d118      	bne.n	8004adc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	e853 3f00 	ldrex	r3, [r3]
 8004ab6:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	f023 0310 	bic.w	r3, r3, #16
 8004abe:	647b      	str	r3, [r7, #68]	; 0x44
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ac8:	61bb      	str	r3, [r7, #24]
 8004aca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004acc:	6979      	ldr	r1, [r7, #20]
 8004ace:	69ba      	ldr	r2, [r7, #24]
 8004ad0:	e841 2300 	strex	r3, r2, [r1]
 8004ad4:	613b      	str	r3, [r7, #16]
   return(result);
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d1e6      	bne.n	8004aaa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2220      	movs	r2, #32
 8004ae0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004af0:	bf00      	nop
 8004af2:	3754      	adds	r7, #84	; 0x54
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b08:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2200      	movs	r2, #0
 8004b16:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b1a:	68f8      	ldr	r0, [r7, #12]
 8004b1c:	f7ff faa2 	bl	8004064 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b20:	bf00      	nop
 8004b22:	3710      	adds	r7, #16
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b088      	sub	sp, #32
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	e853 3f00 	ldrex	r3, [r3]
 8004b3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b44:	61fb      	str	r3, [r7, #28]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	61bb      	str	r3, [r7, #24]
 8004b50:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b52:	6979      	ldr	r1, [r7, #20]
 8004b54:	69ba      	ldr	r2, [r7, #24]
 8004b56:	e841 2300 	strex	r3, r2, [r1]
 8004b5a:	613b      	str	r3, [r7, #16]
   return(result);
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d1e6      	bne.n	8004b30 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2220      	movs	r2, #32
 8004b66:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f7ff fa6e 	bl	8004050 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b74:	bf00      	nop
 8004b76:	3720      	adds	r7, #32
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b09c      	sub	sp, #112	; 0x70
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004b8a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b94:	2b22      	cmp	r3, #34	; 0x22
 8004b96:	f040 80be 	bne.w	8004d16 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004ba0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004ba4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004ba8:	b2d9      	uxtb	r1, r3
 8004baa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004bae:	b2da      	uxtb	r2, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bb4:	400a      	ands	r2, r1
 8004bb6:	b2d2      	uxtb	r2, r2
 8004bb8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bbe:	1c5a      	adds	r2, r3, #1
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	3b01      	subs	r3, #1
 8004bce:	b29a      	uxth	r2, r3
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	f040 80a3 	bne.w	8004d2a <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bec:	e853 3f00 	ldrex	r3, [r3]
 8004bf0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004bf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bf4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004bf8:	66bb      	str	r3, [r7, #104]	; 0x68
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	461a      	mov	r2, r3
 8004c00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c02:	65bb      	str	r3, [r7, #88]	; 0x58
 8004c04:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c06:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004c08:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c0a:	e841 2300 	strex	r3, r2, [r1]
 8004c0e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004c10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d1e6      	bne.n	8004be4 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	3308      	adds	r3, #8
 8004c1c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c20:	e853 3f00 	ldrex	r3, [r3]
 8004c24:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c28:	f023 0301 	bic.w	r3, r3, #1
 8004c2c:	667b      	str	r3, [r7, #100]	; 0x64
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	3308      	adds	r3, #8
 8004c34:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004c36:	647a      	str	r2, [r7, #68]	; 0x44
 8004c38:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c3a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004c3c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c3e:	e841 2300 	strex	r3, r2, [r1]
 8004c42:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004c44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d1e5      	bne.n	8004c16 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2220      	movs	r2, #32
 8004c4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a34      	ldr	r2, [pc, #208]	; (8004d34 <UART_RxISR_8BIT+0x1b8>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d01f      	beq.n	8004ca8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d018      	beq.n	8004ca8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7e:	e853 3f00 	ldrex	r3, [r3]
 8004c82:	623b      	str	r3, [r7, #32]
   return(result);
 8004c84:	6a3b      	ldr	r3, [r7, #32]
 8004c86:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004c8a:	663b      	str	r3, [r7, #96]	; 0x60
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	461a      	mov	r2, r3
 8004c92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c94:	633b      	str	r3, [r7, #48]	; 0x30
 8004c96:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c98:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c9c:	e841 2300 	strex	r3, r2, [r1]
 8004ca0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d1e6      	bne.n	8004c76 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d12e      	bne.n	8004d0e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	e853 3f00 	ldrex	r3, [r3]
 8004cc2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f023 0310 	bic.w	r3, r3, #16
 8004cca:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cd4:	61fb      	str	r3, [r7, #28]
 8004cd6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd8:	69b9      	ldr	r1, [r7, #24]
 8004cda:	69fa      	ldr	r2, [r7, #28]
 8004cdc:	e841 2300 	strex	r3, r2, [r1]
 8004ce0:	617b      	str	r3, [r7, #20]
   return(result);
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d1e6      	bne.n	8004cb6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	69db      	ldr	r3, [r3, #28]
 8004cee:	f003 0310 	and.w	r3, r3, #16
 8004cf2:	2b10      	cmp	r3, #16
 8004cf4:	d103      	bne.n	8004cfe <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	2210      	movs	r2, #16
 8004cfc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004d04:	4619      	mov	r1, r3
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f7ff f9b6 	bl	8004078 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004d0c:	e00d      	b.n	8004d2a <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f7fb fe10 	bl	8000934 <HAL_UART_RxCpltCallback>
}
 8004d14:	e009      	b.n	8004d2a <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	8b1b      	ldrh	r3, [r3, #24]
 8004d1c:	b29a      	uxth	r2, r3
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f042 0208 	orr.w	r2, r2, #8
 8004d26:	b292      	uxth	r2, r2
 8004d28:	831a      	strh	r2, [r3, #24]
}
 8004d2a:	bf00      	nop
 8004d2c:	3770      	adds	r7, #112	; 0x70
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	bf00      	nop
 8004d34:	40008000 	.word	0x40008000

08004d38 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b09c      	sub	sp, #112	; 0x70
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004d46:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d50:	2b22      	cmp	r3, #34	; 0x22
 8004d52:	f040 80be 	bne.w	8004ed2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004d5c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d64:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004d66:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8004d6a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004d6e:	4013      	ands	r3, r2
 8004d70:	b29a      	uxth	r2, r3
 8004d72:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d74:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d7a:	1c9a      	adds	r2, r3, #2
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	3b01      	subs	r3, #1
 8004d8a:	b29a      	uxth	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	f040 80a3 	bne.w	8004ee6 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004da8:	e853 3f00 	ldrex	r3, [r3]
 8004dac:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004dae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004db0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004db4:	667b      	str	r3, [r7, #100]	; 0x64
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	461a      	mov	r2, r3
 8004dbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004dbe:	657b      	str	r3, [r7, #84]	; 0x54
 8004dc0:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004dc4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004dc6:	e841 2300 	strex	r3, r2, [r1]
 8004dca:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004dcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d1e6      	bne.n	8004da0 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	3308      	adds	r3, #8
 8004dd8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ddc:	e853 3f00 	ldrex	r3, [r3]
 8004de0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de4:	f023 0301 	bic.w	r3, r3, #1
 8004de8:	663b      	str	r3, [r7, #96]	; 0x60
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	3308      	adds	r3, #8
 8004df0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004df2:	643a      	str	r2, [r7, #64]	; 0x40
 8004df4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004df8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004dfa:	e841 2300 	strex	r3, r2, [r1]
 8004dfe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d1e5      	bne.n	8004dd2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2220      	movs	r2, #32
 8004e0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a34      	ldr	r2, [pc, #208]	; (8004ef0 <UART_RxISR_16BIT+0x1b8>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d01f      	beq.n	8004e64 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d018      	beq.n	8004e64 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e38:	6a3b      	ldr	r3, [r7, #32]
 8004e3a:	e853 3f00 	ldrex	r3, [r3]
 8004e3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004e46:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e52:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e58:	e841 2300 	strex	r3, r2, [r1]
 8004e5c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d1e6      	bne.n	8004e32 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d12e      	bne.n	8004eca <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	e853 3f00 	ldrex	r3, [r3]
 8004e7e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	f023 0310 	bic.w	r3, r3, #16
 8004e86:	65bb      	str	r3, [r7, #88]	; 0x58
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e90:	61bb      	str	r3, [r7, #24]
 8004e92:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e94:	6979      	ldr	r1, [r7, #20]
 8004e96:	69ba      	ldr	r2, [r7, #24]
 8004e98:	e841 2300 	strex	r3, r2, [r1]
 8004e9c:	613b      	str	r3, [r7, #16]
   return(result);
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d1e6      	bne.n	8004e72 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	69db      	ldr	r3, [r3, #28]
 8004eaa:	f003 0310 	and.w	r3, r3, #16
 8004eae:	2b10      	cmp	r3, #16
 8004eb0:	d103      	bne.n	8004eba <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	2210      	movs	r2, #16
 8004eb8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004ec0:	4619      	mov	r1, r3
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f7ff f8d8 	bl	8004078 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004ec8:	e00d      	b.n	8004ee6 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f7fb fd32 	bl	8000934 <HAL_UART_RxCpltCallback>
}
 8004ed0:	e009      	b.n	8004ee6 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	8b1b      	ldrh	r3, [r3, #24]
 8004ed8:	b29a      	uxth	r2, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f042 0208 	orr.w	r2, r2, #8
 8004ee2:	b292      	uxth	r2, r2
 8004ee4:	831a      	strh	r2, [r3, #24]
}
 8004ee6:	bf00      	nop
 8004ee8:	3770      	adds	r7, #112	; 0x70
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	40008000 	.word	0x40008000

08004ef4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004efc:	bf00      	nop
 8004efe:	370c      	adds	r7, #12
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr

08004f08 <__NVIC_SetPriority>:
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b083      	sub	sp, #12
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	4603      	mov	r3, r0
 8004f10:	6039      	str	r1, [r7, #0]
 8004f12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	db0a      	blt.n	8004f32 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	b2da      	uxtb	r2, r3
 8004f20:	490c      	ldr	r1, [pc, #48]	; (8004f54 <__NVIC_SetPriority+0x4c>)
 8004f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f26:	0112      	lsls	r2, r2, #4
 8004f28:	b2d2      	uxtb	r2, r2
 8004f2a:	440b      	add	r3, r1
 8004f2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004f30:	e00a      	b.n	8004f48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	b2da      	uxtb	r2, r3
 8004f36:	4908      	ldr	r1, [pc, #32]	; (8004f58 <__NVIC_SetPriority+0x50>)
 8004f38:	79fb      	ldrb	r3, [r7, #7]
 8004f3a:	f003 030f 	and.w	r3, r3, #15
 8004f3e:	3b04      	subs	r3, #4
 8004f40:	0112      	lsls	r2, r2, #4
 8004f42:	b2d2      	uxtb	r2, r2
 8004f44:	440b      	add	r3, r1
 8004f46:	761a      	strb	r2, [r3, #24]
}
 8004f48:	bf00      	nop
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr
 8004f54:	e000e100 	.word	0xe000e100
 8004f58:	e000ed00 	.word	0xe000ed00

08004f5c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004f60:	4b05      	ldr	r3, [pc, #20]	; (8004f78 <SysTick_Handler+0x1c>)
 8004f62:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004f64:	f001 fdd4 	bl	8006b10 <xTaskGetSchedulerState>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d001      	beq.n	8004f72 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004f6e:	f002 fbbb 	bl	80076e8 <xPortSysTickHandler>
  }
}
 8004f72:	bf00      	nop
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	bf00      	nop
 8004f78:	e000e010 	.word	0xe000e010

08004f7c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004f80:	2100      	movs	r1, #0
 8004f82:	f06f 0004 	mvn.w	r0, #4
 8004f86:	f7ff ffbf 	bl	8004f08 <__NVIC_SetPriority>
#endif
}
 8004f8a:	bf00      	nop
 8004f8c:	bd80      	pop	{r7, pc}
	...

08004f90 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004f90:	b480      	push	{r7}
 8004f92:	b083      	sub	sp, #12
 8004f94:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f96:	f3ef 8305 	mrs	r3, IPSR
 8004f9a:	603b      	str	r3, [r7, #0]
  return(result);
 8004f9c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d003      	beq.n	8004faa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004fa2:	f06f 0305 	mvn.w	r3, #5
 8004fa6:	607b      	str	r3, [r7, #4]
 8004fa8:	e00c      	b.n	8004fc4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004faa:	4b0a      	ldr	r3, [pc, #40]	; (8004fd4 <osKernelInitialize+0x44>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d105      	bne.n	8004fbe <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004fb2:	4b08      	ldr	r3, [pc, #32]	; (8004fd4 <osKernelInitialize+0x44>)
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	607b      	str	r3, [r7, #4]
 8004fbc:	e002      	b.n	8004fc4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004fbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004fc2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004fc4:	687b      	ldr	r3, [r7, #4]
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	370c      	adds	r7, #12
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop
 8004fd4:	2000025c 	.word	0x2000025c

08004fd8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b082      	sub	sp, #8
 8004fdc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004fde:	f3ef 8305 	mrs	r3, IPSR
 8004fe2:	603b      	str	r3, [r7, #0]
  return(result);
 8004fe4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d003      	beq.n	8004ff2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8004fea:	f06f 0305 	mvn.w	r3, #5
 8004fee:	607b      	str	r3, [r7, #4]
 8004ff0:	e010      	b.n	8005014 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004ff2:	4b0b      	ldr	r3, [pc, #44]	; (8005020 <osKernelStart+0x48>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d109      	bne.n	800500e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004ffa:	f7ff ffbf 	bl	8004f7c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004ffe:	4b08      	ldr	r3, [pc, #32]	; (8005020 <osKernelStart+0x48>)
 8005000:	2202      	movs	r2, #2
 8005002:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005004:	f001 f928 	bl	8006258 <vTaskStartScheduler>
      stat = osOK;
 8005008:	2300      	movs	r3, #0
 800500a:	607b      	str	r3, [r7, #4]
 800500c:	e002      	b.n	8005014 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800500e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005012:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005014:	687b      	ldr	r3, [r7, #4]
}
 8005016:	4618      	mov	r0, r3
 8005018:	3708      	adds	r7, #8
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	2000025c 	.word	0x2000025c

08005024 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005024:	b580      	push	{r7, lr}
 8005026:	b08e      	sub	sp, #56	; 0x38
 8005028:	af04      	add	r7, sp, #16
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005030:	2300      	movs	r3, #0
 8005032:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005034:	f3ef 8305 	mrs	r3, IPSR
 8005038:	617b      	str	r3, [r7, #20]
  return(result);
 800503a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800503c:	2b00      	cmp	r3, #0
 800503e:	d17e      	bne.n	800513e <osThreadNew+0x11a>
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d07b      	beq.n	800513e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005046:	2380      	movs	r3, #128	; 0x80
 8005048:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800504a:	2318      	movs	r3, #24
 800504c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800504e:	2300      	movs	r3, #0
 8005050:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005052:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005056:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d045      	beq.n	80050ea <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d002      	beq.n	800506c <osThreadNew+0x48>
        name = attr->name;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	699b      	ldr	r3, [r3, #24]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d002      	beq.n	800507a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	699b      	ldr	r3, [r3, #24]
 8005078:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d008      	beq.n	8005092 <osThreadNew+0x6e>
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	2b38      	cmp	r3, #56	; 0x38
 8005084:	d805      	bhi.n	8005092 <osThreadNew+0x6e>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	f003 0301 	and.w	r3, r3, #1
 800508e:	2b00      	cmp	r3, #0
 8005090:	d001      	beq.n	8005096 <osThreadNew+0x72>
        return (NULL);
 8005092:	2300      	movs	r3, #0
 8005094:	e054      	b.n	8005140 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	695b      	ldr	r3, [r3, #20]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d003      	beq.n	80050a6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	695b      	ldr	r3, [r3, #20]
 80050a2:	089b      	lsrs	r3, r3, #2
 80050a4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d00e      	beq.n	80050cc <osThreadNew+0xa8>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	2ba7      	cmp	r3, #167	; 0xa7
 80050b4:	d90a      	bls.n	80050cc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d006      	beq.n	80050cc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	695b      	ldr	r3, [r3, #20]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d002      	beq.n	80050cc <osThreadNew+0xa8>
        mem = 1;
 80050c6:	2301      	movs	r3, #1
 80050c8:	61bb      	str	r3, [r7, #24]
 80050ca:	e010      	b.n	80050ee <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d10c      	bne.n	80050ee <osThreadNew+0xca>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d108      	bne.n	80050ee <osThreadNew+0xca>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	691b      	ldr	r3, [r3, #16]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d104      	bne.n	80050ee <osThreadNew+0xca>
          mem = 0;
 80050e4:	2300      	movs	r3, #0
 80050e6:	61bb      	str	r3, [r7, #24]
 80050e8:	e001      	b.n	80050ee <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80050ea:	2300      	movs	r3, #0
 80050ec:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d110      	bne.n	8005116 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80050fc:	9202      	str	r2, [sp, #8]
 80050fe:	9301      	str	r3, [sp, #4]
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	9300      	str	r3, [sp, #0]
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	6a3a      	ldr	r2, [r7, #32]
 8005108:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800510a:	68f8      	ldr	r0, [r7, #12]
 800510c:	f000 feb8 	bl	8005e80 <xTaskCreateStatic>
 8005110:	4603      	mov	r3, r0
 8005112:	613b      	str	r3, [r7, #16]
 8005114:	e013      	b.n	800513e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d110      	bne.n	800513e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800511c:	6a3b      	ldr	r3, [r7, #32]
 800511e:	b29a      	uxth	r2, r3
 8005120:	f107 0310 	add.w	r3, r7, #16
 8005124:	9301      	str	r3, [sp, #4]
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	9300      	str	r3, [sp, #0]
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800512e:	68f8      	ldr	r0, [r7, #12]
 8005130:	f000 ff03 	bl	8005f3a <xTaskCreate>
 8005134:	4603      	mov	r3, r0
 8005136:	2b01      	cmp	r3, #1
 8005138:	d001      	beq.n	800513e <osThreadNew+0x11a>
            hTask = NULL;
 800513a:	2300      	movs	r3, #0
 800513c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800513e:	693b      	ldr	r3, [r7, #16]
}
 8005140:	4618      	mov	r0, r3
 8005142:	3728      	adds	r7, #40	; 0x28
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005150:	f3ef 8305 	mrs	r3, IPSR
 8005154:	60bb      	str	r3, [r7, #8]
  return(result);
 8005156:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005158:	2b00      	cmp	r3, #0
 800515a:	d003      	beq.n	8005164 <osDelay+0x1c>
    stat = osErrorISR;
 800515c:	f06f 0305 	mvn.w	r3, #5
 8005160:	60fb      	str	r3, [r7, #12]
 8005162:	e007      	b.n	8005174 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005164:	2300      	movs	r3, #0
 8005166:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d002      	beq.n	8005174 <osDelay+0x2c>
      vTaskDelay(ticks);
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f001 f83e 	bl	80061f0 <vTaskDelay>
    }
  }

  return (stat);
 8005174:	68fb      	ldr	r3, [r7, #12]
}
 8005176:	4618      	mov	r0, r3
 8005178:	3710      	adds	r7, #16
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}

0800517e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800517e:	b580      	push	{r7, lr}
 8005180:	b08a      	sub	sp, #40	; 0x28
 8005182:	af02      	add	r7, sp, #8
 8005184:	60f8      	str	r0, [r7, #12]
 8005186:	60b9      	str	r1, [r7, #8]
 8005188:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800518a:	2300      	movs	r3, #0
 800518c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800518e:	f3ef 8305 	mrs	r3, IPSR
 8005192:	613b      	str	r3, [r7, #16]
  return(result);
 8005194:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005196:	2b00      	cmp	r3, #0
 8005198:	d15f      	bne.n	800525a <osMessageQueueNew+0xdc>
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d05c      	beq.n	800525a <osMessageQueueNew+0xdc>
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d059      	beq.n	800525a <osMessageQueueNew+0xdc>
    mem = -1;
 80051a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80051aa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d029      	beq.n	8005206 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d012      	beq.n	80051e0 <osMessageQueueNew+0x62>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	2b4f      	cmp	r3, #79	; 0x4f
 80051c0:	d90e      	bls.n	80051e0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d00a      	beq.n	80051e0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	695a      	ldr	r2, [r3, #20]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	68b9      	ldr	r1, [r7, #8]
 80051d2:	fb01 f303 	mul.w	r3, r1, r3
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d302      	bcc.n	80051e0 <osMessageQueueNew+0x62>
        mem = 1;
 80051da:	2301      	movs	r3, #1
 80051dc:	61bb      	str	r3, [r7, #24]
 80051de:	e014      	b.n	800520a <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d110      	bne.n	800520a <osMessageQueueNew+0x8c>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d10c      	bne.n	800520a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d108      	bne.n	800520a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	695b      	ldr	r3, [r3, #20]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d104      	bne.n	800520a <osMessageQueueNew+0x8c>
          mem = 0;
 8005200:	2300      	movs	r3, #0
 8005202:	61bb      	str	r3, [r7, #24]
 8005204:	e001      	b.n	800520a <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8005206:	2300      	movs	r3, #0
 8005208:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800520a:	69bb      	ldr	r3, [r7, #24]
 800520c:	2b01      	cmp	r3, #1
 800520e:	d10b      	bne.n	8005228 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	691a      	ldr	r2, [r3, #16]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	2100      	movs	r1, #0
 800521a:	9100      	str	r1, [sp, #0]
 800521c:	68b9      	ldr	r1, [r7, #8]
 800521e:	68f8      	ldr	r0, [r7, #12]
 8005220:	f000 f970 	bl	8005504 <xQueueGenericCreateStatic>
 8005224:	61f8      	str	r0, [r7, #28]
 8005226:	e008      	b.n	800523a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8005228:	69bb      	ldr	r3, [r7, #24]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d105      	bne.n	800523a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800522e:	2200      	movs	r2, #0
 8005230:	68b9      	ldr	r1, [r7, #8]
 8005232:	68f8      	ldr	r0, [r7, #12]
 8005234:	f000 f9de 	bl	80055f4 <xQueueGenericCreate>
 8005238:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800523a:	69fb      	ldr	r3, [r7, #28]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d00c      	beq.n	800525a <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d003      	beq.n	800524e <osMessageQueueNew+0xd0>
        name = attr->name;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	617b      	str	r3, [r7, #20]
 800524c:	e001      	b.n	8005252 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800524e:	2300      	movs	r3, #0
 8005250:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8005252:	6979      	ldr	r1, [r7, #20]
 8005254:	69f8      	ldr	r0, [r7, #28]
 8005256:	f000 fdb5 	bl	8005dc4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800525a:	69fb      	ldr	r3, [r7, #28]
}
 800525c:	4618      	mov	r0, r3
 800525e:	3720      	adds	r7, #32
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}

08005264 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005264:	b480      	push	{r7}
 8005266:	b085      	sub	sp, #20
 8005268:	af00      	add	r7, sp, #0
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	4a07      	ldr	r2, [pc, #28]	; (8005290 <vApplicationGetIdleTaskMemory+0x2c>)
 8005274:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	4a06      	ldr	r2, [pc, #24]	; (8005294 <vApplicationGetIdleTaskMemory+0x30>)
 800527a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2280      	movs	r2, #128	; 0x80
 8005280:	601a      	str	r2, [r3, #0]
}
 8005282:	bf00      	nop
 8005284:	3714      	adds	r7, #20
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop
 8005290:	20000260 	.word	0x20000260
 8005294:	20000308 	.word	0x20000308

08005298 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005298:	b480      	push	{r7}
 800529a:	b085      	sub	sp, #20
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	4a07      	ldr	r2, [pc, #28]	; (80052c4 <vApplicationGetTimerTaskMemory+0x2c>)
 80052a8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	4a06      	ldr	r2, [pc, #24]	; (80052c8 <vApplicationGetTimerTaskMemory+0x30>)
 80052ae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80052b6:	601a      	str	r2, [r3, #0]
}
 80052b8:	bf00      	nop
 80052ba:	3714      	adds	r7, #20
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr
 80052c4:	20000508 	.word	0x20000508
 80052c8:	200005b0 	.word	0x200005b0

080052cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80052cc:	b480      	push	{r7}
 80052ce:	b083      	sub	sp, #12
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f103 0208 	add.w	r2, r3, #8
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80052e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f103 0208 	add.w	r2, r3, #8
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f103 0208 	add.w	r2, r3, #8
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005300:	bf00      	nop
 8005302:	370c      	adds	r7, #12
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr

0800530c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800530c:	b480      	push	{r7}
 800530e:	b083      	sub	sp, #12
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800531a:	bf00      	nop
 800531c:	370c      	adds	r7, #12
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr

08005326 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005326:	b480      	push	{r7}
 8005328:	b085      	sub	sp, #20
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
 800532e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	68fa      	ldr	r2, [r7, #12]
 800533a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	689a      	ldr	r2, [r3, #8]
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	683a      	ldr	r2, [r7, #0]
 800534a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	683a      	ldr	r2, [r7, #0]
 8005350:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	1c5a      	adds	r2, r3, #1
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	601a      	str	r2, [r3, #0]
}
 8005362:	bf00      	nop
 8005364:	3714      	adds	r7, #20
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr

0800536e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800536e:	b480      	push	{r7}
 8005370:	b085      	sub	sp, #20
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
 8005376:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005384:	d103      	bne.n	800538e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	691b      	ldr	r3, [r3, #16]
 800538a:	60fb      	str	r3, [r7, #12]
 800538c:	e00c      	b.n	80053a8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	3308      	adds	r3, #8
 8005392:	60fb      	str	r3, [r7, #12]
 8005394:	e002      	b.n	800539c <vListInsert+0x2e>
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	60fb      	str	r3, [r7, #12]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	68ba      	ldr	r2, [r7, #8]
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d2f6      	bcs.n	8005396 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	685a      	ldr	r2, [r3, #4]
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	683a      	ldr	r2, [r7, #0]
 80053b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	68fa      	ldr	r2, [r7, #12]
 80053bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	683a      	ldr	r2, [r7, #0]
 80053c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	1c5a      	adds	r2, r3, #1
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	601a      	str	r2, [r3, #0]
}
 80053d4:	bf00      	nop
 80053d6:	3714      	adds	r7, #20
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80053e0:	b480      	push	{r7}
 80053e2:	b085      	sub	sp, #20
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	691b      	ldr	r3, [r3, #16]
 80053ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	6892      	ldr	r2, [r2, #8]
 80053f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	6852      	ldr	r2, [r2, #4]
 8005400:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	429a      	cmp	r2, r3
 800540a:	d103      	bne.n	8005414 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	689a      	ldr	r2, [r3, #8]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	1e5a      	subs	r2, r3, #1
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
}
 8005428:	4618      	mov	r0, r3
 800542a:	3714      	adds	r7, #20
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr

08005434 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d10a      	bne.n	800545e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800544c:	f383 8811 	msr	BASEPRI, r3
 8005450:	f3bf 8f6f 	isb	sy
 8005454:	f3bf 8f4f 	dsb	sy
 8005458:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800545a:	bf00      	nop
 800545c:	e7fe      	b.n	800545c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800545e:	f002 f8b1 	bl	80075c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800546a:	68f9      	ldr	r1, [r7, #12]
 800546c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800546e:	fb01 f303 	mul.w	r3, r1, r3
 8005472:	441a      	add	r2, r3
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2200      	movs	r2, #0
 800547c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800548e:	3b01      	subs	r3, #1
 8005490:	68f9      	ldr	r1, [r7, #12]
 8005492:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005494:	fb01 f303 	mul.w	r3, r1, r3
 8005498:	441a      	add	r2, r3
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	22ff      	movs	r2, #255	; 0xff
 80054a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	22ff      	movs	r2, #255	; 0xff
 80054aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d114      	bne.n	80054de <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	691b      	ldr	r3, [r3, #16]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d01a      	beq.n	80054f2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	3310      	adds	r3, #16
 80054c0:	4618      	mov	r0, r3
 80054c2:	f001 f963 	bl	800678c <xTaskRemoveFromEventList>
 80054c6:	4603      	mov	r3, r0
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d012      	beq.n	80054f2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80054cc:	4b0c      	ldr	r3, [pc, #48]	; (8005500 <xQueueGenericReset+0xcc>)
 80054ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054d2:	601a      	str	r2, [r3, #0]
 80054d4:	f3bf 8f4f 	dsb	sy
 80054d8:	f3bf 8f6f 	isb	sy
 80054dc:	e009      	b.n	80054f2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	3310      	adds	r3, #16
 80054e2:	4618      	mov	r0, r3
 80054e4:	f7ff fef2 	bl	80052cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	3324      	adds	r3, #36	; 0x24
 80054ec:	4618      	mov	r0, r3
 80054ee:	f7ff feed 	bl	80052cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80054f2:	f002 f897 	bl	8007624 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80054f6:	2301      	movs	r3, #1
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3710      	adds	r7, #16
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}
 8005500:	e000ed04 	.word	0xe000ed04

08005504 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005504:	b580      	push	{r7, lr}
 8005506:	b08e      	sub	sp, #56	; 0x38
 8005508:	af02      	add	r7, sp, #8
 800550a:	60f8      	str	r0, [r7, #12]
 800550c:	60b9      	str	r1, [r7, #8]
 800550e:	607a      	str	r2, [r7, #4]
 8005510:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d10a      	bne.n	800552e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800551c:	f383 8811 	msr	BASEPRI, r3
 8005520:	f3bf 8f6f 	isb	sy
 8005524:	f3bf 8f4f 	dsb	sy
 8005528:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800552a:	bf00      	nop
 800552c:	e7fe      	b.n	800552c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d10a      	bne.n	800554a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005538:	f383 8811 	msr	BASEPRI, r3
 800553c:	f3bf 8f6f 	isb	sy
 8005540:	f3bf 8f4f 	dsb	sy
 8005544:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005546:	bf00      	nop
 8005548:	e7fe      	b.n	8005548 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d002      	beq.n	8005556 <xQueueGenericCreateStatic+0x52>
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d001      	beq.n	800555a <xQueueGenericCreateStatic+0x56>
 8005556:	2301      	movs	r3, #1
 8005558:	e000      	b.n	800555c <xQueueGenericCreateStatic+0x58>
 800555a:	2300      	movs	r3, #0
 800555c:	2b00      	cmp	r3, #0
 800555e:	d10a      	bne.n	8005576 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005564:	f383 8811 	msr	BASEPRI, r3
 8005568:	f3bf 8f6f 	isb	sy
 800556c:	f3bf 8f4f 	dsb	sy
 8005570:	623b      	str	r3, [r7, #32]
}
 8005572:	bf00      	nop
 8005574:	e7fe      	b.n	8005574 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d102      	bne.n	8005582 <xQueueGenericCreateStatic+0x7e>
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d101      	bne.n	8005586 <xQueueGenericCreateStatic+0x82>
 8005582:	2301      	movs	r3, #1
 8005584:	e000      	b.n	8005588 <xQueueGenericCreateStatic+0x84>
 8005586:	2300      	movs	r3, #0
 8005588:	2b00      	cmp	r3, #0
 800558a:	d10a      	bne.n	80055a2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800558c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005590:	f383 8811 	msr	BASEPRI, r3
 8005594:	f3bf 8f6f 	isb	sy
 8005598:	f3bf 8f4f 	dsb	sy
 800559c:	61fb      	str	r3, [r7, #28]
}
 800559e:	bf00      	nop
 80055a0:	e7fe      	b.n	80055a0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80055a2:	2350      	movs	r3, #80	; 0x50
 80055a4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	2b50      	cmp	r3, #80	; 0x50
 80055aa:	d00a      	beq.n	80055c2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80055ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b0:	f383 8811 	msr	BASEPRI, r3
 80055b4:	f3bf 8f6f 	isb	sy
 80055b8:	f3bf 8f4f 	dsb	sy
 80055bc:	61bb      	str	r3, [r7, #24]
}
 80055be:	bf00      	nop
 80055c0:	e7fe      	b.n	80055c0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80055c2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80055c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d00d      	beq.n	80055ea <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80055ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055d0:	2201      	movs	r2, #1
 80055d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80055d6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80055da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055dc:	9300      	str	r3, [sp, #0]
 80055de:	4613      	mov	r3, r2
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	68b9      	ldr	r1, [r7, #8]
 80055e4:	68f8      	ldr	r0, [r7, #12]
 80055e6:	f000 f83f 	bl	8005668 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80055ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3730      	adds	r7, #48	; 0x30
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}

080055f4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b08a      	sub	sp, #40	; 0x28
 80055f8:	af02      	add	r7, sp, #8
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	60b9      	str	r1, [r7, #8]
 80055fe:	4613      	mov	r3, r2
 8005600:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d10a      	bne.n	800561e <xQueueGenericCreate+0x2a>
	__asm volatile
 8005608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800560c:	f383 8811 	msr	BASEPRI, r3
 8005610:	f3bf 8f6f 	isb	sy
 8005614:	f3bf 8f4f 	dsb	sy
 8005618:	613b      	str	r3, [r7, #16]
}
 800561a:	bf00      	nop
 800561c:	e7fe      	b.n	800561c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	68ba      	ldr	r2, [r7, #8]
 8005622:	fb02 f303 	mul.w	r3, r2, r3
 8005626:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005628:	69fb      	ldr	r3, [r7, #28]
 800562a:	3350      	adds	r3, #80	; 0x50
 800562c:	4618      	mov	r0, r3
 800562e:	f002 f8eb 	bl	8007808 <pvPortMalloc>
 8005632:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005634:	69bb      	ldr	r3, [r7, #24]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d011      	beq.n	800565e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800563a:	69bb      	ldr	r3, [r7, #24]
 800563c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	3350      	adds	r3, #80	; 0x50
 8005642:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	2200      	movs	r2, #0
 8005648:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800564c:	79fa      	ldrb	r2, [r7, #7]
 800564e:	69bb      	ldr	r3, [r7, #24]
 8005650:	9300      	str	r3, [sp, #0]
 8005652:	4613      	mov	r3, r2
 8005654:	697a      	ldr	r2, [r7, #20]
 8005656:	68b9      	ldr	r1, [r7, #8]
 8005658:	68f8      	ldr	r0, [r7, #12]
 800565a:	f000 f805 	bl	8005668 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800565e:	69bb      	ldr	r3, [r7, #24]
	}
 8005660:	4618      	mov	r0, r3
 8005662:	3720      	adds	r7, #32
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}

08005668 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b084      	sub	sp, #16
 800566c:	af00      	add	r7, sp, #0
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	607a      	str	r2, [r7, #4]
 8005674:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d103      	bne.n	8005684 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	69ba      	ldr	r2, [r7, #24]
 8005680:	601a      	str	r2, [r3, #0]
 8005682:	e002      	b.n	800568a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800568a:	69bb      	ldr	r3, [r7, #24]
 800568c:	68fa      	ldr	r2, [r7, #12]
 800568e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005690:	69bb      	ldr	r3, [r7, #24]
 8005692:	68ba      	ldr	r2, [r7, #8]
 8005694:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005696:	2101      	movs	r1, #1
 8005698:	69b8      	ldr	r0, [r7, #24]
 800569a:	f7ff fecb 	bl	8005434 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800569e:	69bb      	ldr	r3, [r7, #24]
 80056a0:	78fa      	ldrb	r2, [r7, #3]
 80056a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80056a6:	bf00      	nop
 80056a8:	3710      	adds	r7, #16
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
	...

080056b0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b08e      	sub	sp, #56	; 0x38
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	60f8      	str	r0, [r7, #12]
 80056b8:	60b9      	str	r1, [r7, #8]
 80056ba:	607a      	str	r2, [r7, #4]
 80056bc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80056be:	2300      	movs	r3, #0
 80056c0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80056c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d10a      	bne.n	80056e2 <xQueueGenericSend+0x32>
	__asm volatile
 80056cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d0:	f383 8811 	msr	BASEPRI, r3
 80056d4:	f3bf 8f6f 	isb	sy
 80056d8:	f3bf 8f4f 	dsb	sy
 80056dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80056de:	bf00      	nop
 80056e0:	e7fe      	b.n	80056e0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d103      	bne.n	80056f0 <xQueueGenericSend+0x40>
 80056e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d101      	bne.n	80056f4 <xQueueGenericSend+0x44>
 80056f0:	2301      	movs	r3, #1
 80056f2:	e000      	b.n	80056f6 <xQueueGenericSend+0x46>
 80056f4:	2300      	movs	r3, #0
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d10a      	bne.n	8005710 <xQueueGenericSend+0x60>
	__asm volatile
 80056fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056fe:	f383 8811 	msr	BASEPRI, r3
 8005702:	f3bf 8f6f 	isb	sy
 8005706:	f3bf 8f4f 	dsb	sy
 800570a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800570c:	bf00      	nop
 800570e:	e7fe      	b.n	800570e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	2b02      	cmp	r3, #2
 8005714:	d103      	bne.n	800571e <xQueueGenericSend+0x6e>
 8005716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800571a:	2b01      	cmp	r3, #1
 800571c:	d101      	bne.n	8005722 <xQueueGenericSend+0x72>
 800571e:	2301      	movs	r3, #1
 8005720:	e000      	b.n	8005724 <xQueueGenericSend+0x74>
 8005722:	2300      	movs	r3, #0
 8005724:	2b00      	cmp	r3, #0
 8005726:	d10a      	bne.n	800573e <xQueueGenericSend+0x8e>
	__asm volatile
 8005728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800572c:	f383 8811 	msr	BASEPRI, r3
 8005730:	f3bf 8f6f 	isb	sy
 8005734:	f3bf 8f4f 	dsb	sy
 8005738:	623b      	str	r3, [r7, #32]
}
 800573a:	bf00      	nop
 800573c:	e7fe      	b.n	800573c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800573e:	f001 f9e7 	bl	8006b10 <xTaskGetSchedulerState>
 8005742:	4603      	mov	r3, r0
 8005744:	2b00      	cmp	r3, #0
 8005746:	d102      	bne.n	800574e <xQueueGenericSend+0x9e>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d101      	bne.n	8005752 <xQueueGenericSend+0xa2>
 800574e:	2301      	movs	r3, #1
 8005750:	e000      	b.n	8005754 <xQueueGenericSend+0xa4>
 8005752:	2300      	movs	r3, #0
 8005754:	2b00      	cmp	r3, #0
 8005756:	d10a      	bne.n	800576e <xQueueGenericSend+0xbe>
	__asm volatile
 8005758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800575c:	f383 8811 	msr	BASEPRI, r3
 8005760:	f3bf 8f6f 	isb	sy
 8005764:	f3bf 8f4f 	dsb	sy
 8005768:	61fb      	str	r3, [r7, #28]
}
 800576a:	bf00      	nop
 800576c:	e7fe      	b.n	800576c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800576e:	f001 ff29 	bl	80075c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005774:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800577a:	429a      	cmp	r2, r3
 800577c:	d302      	bcc.n	8005784 <xQueueGenericSend+0xd4>
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	2b02      	cmp	r3, #2
 8005782:	d129      	bne.n	80057d8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005784:	683a      	ldr	r2, [r7, #0]
 8005786:	68b9      	ldr	r1, [r7, #8]
 8005788:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800578a:	f000 fa0b 	bl	8005ba4 <prvCopyDataToQueue>
 800578e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005794:	2b00      	cmp	r3, #0
 8005796:	d010      	beq.n	80057ba <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800579a:	3324      	adds	r3, #36	; 0x24
 800579c:	4618      	mov	r0, r3
 800579e:	f000 fff5 	bl	800678c <xTaskRemoveFromEventList>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d013      	beq.n	80057d0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80057a8:	4b3f      	ldr	r3, [pc, #252]	; (80058a8 <xQueueGenericSend+0x1f8>)
 80057aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057ae:	601a      	str	r2, [r3, #0]
 80057b0:	f3bf 8f4f 	dsb	sy
 80057b4:	f3bf 8f6f 	isb	sy
 80057b8:	e00a      	b.n	80057d0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80057ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d007      	beq.n	80057d0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80057c0:	4b39      	ldr	r3, [pc, #228]	; (80058a8 <xQueueGenericSend+0x1f8>)
 80057c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057c6:	601a      	str	r2, [r3, #0]
 80057c8:	f3bf 8f4f 	dsb	sy
 80057cc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80057d0:	f001 ff28 	bl	8007624 <vPortExitCritical>
				return pdPASS;
 80057d4:	2301      	movs	r3, #1
 80057d6:	e063      	b.n	80058a0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d103      	bne.n	80057e6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80057de:	f001 ff21 	bl	8007624 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80057e2:	2300      	movs	r3, #0
 80057e4:	e05c      	b.n	80058a0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80057e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d106      	bne.n	80057fa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80057ec:	f107 0314 	add.w	r3, r7, #20
 80057f0:	4618      	mov	r0, r3
 80057f2:	f001 f82f 	bl	8006854 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80057f6:	2301      	movs	r3, #1
 80057f8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80057fa:	f001 ff13 	bl	8007624 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80057fe:	f000 fd9b 	bl	8006338 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005802:	f001 fedf 	bl	80075c4 <vPortEnterCritical>
 8005806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005808:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800580c:	b25b      	sxtb	r3, r3
 800580e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005812:	d103      	bne.n	800581c <xQueueGenericSend+0x16c>
 8005814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005816:	2200      	movs	r2, #0
 8005818:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800581c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800581e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005822:	b25b      	sxtb	r3, r3
 8005824:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005828:	d103      	bne.n	8005832 <xQueueGenericSend+0x182>
 800582a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800582c:	2200      	movs	r2, #0
 800582e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005832:	f001 fef7 	bl	8007624 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005836:	1d3a      	adds	r2, r7, #4
 8005838:	f107 0314 	add.w	r3, r7, #20
 800583c:	4611      	mov	r1, r2
 800583e:	4618      	mov	r0, r3
 8005840:	f001 f81e 	bl	8006880 <xTaskCheckForTimeOut>
 8005844:	4603      	mov	r3, r0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d124      	bne.n	8005894 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800584a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800584c:	f000 faa2 	bl	8005d94 <prvIsQueueFull>
 8005850:	4603      	mov	r3, r0
 8005852:	2b00      	cmp	r3, #0
 8005854:	d018      	beq.n	8005888 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005858:	3310      	adds	r3, #16
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	4611      	mov	r1, r2
 800585e:	4618      	mov	r0, r3
 8005860:	f000 ff44 	bl	80066ec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005864:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005866:	f000 fa2d 	bl	8005cc4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800586a:	f000 fd73 	bl	8006354 <xTaskResumeAll>
 800586e:	4603      	mov	r3, r0
 8005870:	2b00      	cmp	r3, #0
 8005872:	f47f af7c 	bne.w	800576e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005876:	4b0c      	ldr	r3, [pc, #48]	; (80058a8 <xQueueGenericSend+0x1f8>)
 8005878:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800587c:	601a      	str	r2, [r3, #0]
 800587e:	f3bf 8f4f 	dsb	sy
 8005882:	f3bf 8f6f 	isb	sy
 8005886:	e772      	b.n	800576e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005888:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800588a:	f000 fa1b 	bl	8005cc4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800588e:	f000 fd61 	bl	8006354 <xTaskResumeAll>
 8005892:	e76c      	b.n	800576e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005894:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005896:	f000 fa15 	bl	8005cc4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800589a:	f000 fd5b 	bl	8006354 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800589e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3738      	adds	r7, #56	; 0x38
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}
 80058a8:	e000ed04 	.word	0xe000ed04

080058ac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b090      	sub	sp, #64	; 0x40
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	60b9      	str	r1, [r7, #8]
 80058b6:	607a      	str	r2, [r7, #4]
 80058b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80058be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d10a      	bne.n	80058da <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80058c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c8:	f383 8811 	msr	BASEPRI, r3
 80058cc:	f3bf 8f6f 	isb	sy
 80058d0:	f3bf 8f4f 	dsb	sy
 80058d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80058d6:	bf00      	nop
 80058d8:	e7fe      	b.n	80058d8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d103      	bne.n	80058e8 <xQueueGenericSendFromISR+0x3c>
 80058e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d101      	bne.n	80058ec <xQueueGenericSendFromISR+0x40>
 80058e8:	2301      	movs	r3, #1
 80058ea:	e000      	b.n	80058ee <xQueueGenericSendFromISR+0x42>
 80058ec:	2300      	movs	r3, #0
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d10a      	bne.n	8005908 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80058f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f6:	f383 8811 	msr	BASEPRI, r3
 80058fa:	f3bf 8f6f 	isb	sy
 80058fe:	f3bf 8f4f 	dsb	sy
 8005902:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005904:	bf00      	nop
 8005906:	e7fe      	b.n	8005906 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	2b02      	cmp	r3, #2
 800590c:	d103      	bne.n	8005916 <xQueueGenericSendFromISR+0x6a>
 800590e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005912:	2b01      	cmp	r3, #1
 8005914:	d101      	bne.n	800591a <xQueueGenericSendFromISR+0x6e>
 8005916:	2301      	movs	r3, #1
 8005918:	e000      	b.n	800591c <xQueueGenericSendFromISR+0x70>
 800591a:	2300      	movs	r3, #0
 800591c:	2b00      	cmp	r3, #0
 800591e:	d10a      	bne.n	8005936 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005924:	f383 8811 	msr	BASEPRI, r3
 8005928:	f3bf 8f6f 	isb	sy
 800592c:	f3bf 8f4f 	dsb	sy
 8005930:	623b      	str	r3, [r7, #32]
}
 8005932:	bf00      	nop
 8005934:	e7fe      	b.n	8005934 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005936:	f001 ff27 	bl	8007788 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800593a:	f3ef 8211 	mrs	r2, BASEPRI
 800593e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005942:	f383 8811 	msr	BASEPRI, r3
 8005946:	f3bf 8f6f 	isb	sy
 800594a:	f3bf 8f4f 	dsb	sy
 800594e:	61fa      	str	r2, [r7, #28]
 8005950:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005952:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005954:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005958:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800595a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800595c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800595e:	429a      	cmp	r2, r3
 8005960:	d302      	bcc.n	8005968 <xQueueGenericSendFromISR+0xbc>
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	2b02      	cmp	r3, #2
 8005966:	d12f      	bne.n	80059c8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800596a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800596e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005976:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005978:	683a      	ldr	r2, [r7, #0]
 800597a:	68b9      	ldr	r1, [r7, #8]
 800597c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800597e:	f000 f911 	bl	8005ba4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005982:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005986:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800598a:	d112      	bne.n	80059b2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800598c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800598e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005990:	2b00      	cmp	r3, #0
 8005992:	d016      	beq.n	80059c2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005996:	3324      	adds	r3, #36	; 0x24
 8005998:	4618      	mov	r0, r3
 800599a:	f000 fef7 	bl	800678c <xTaskRemoveFromEventList>
 800599e:	4603      	mov	r3, r0
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d00e      	beq.n	80059c2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d00b      	beq.n	80059c2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2201      	movs	r2, #1
 80059ae:	601a      	str	r2, [r3, #0]
 80059b0:	e007      	b.n	80059c2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80059b2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80059b6:	3301      	adds	r3, #1
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	b25a      	sxtb	r2, r3
 80059bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80059c2:	2301      	movs	r3, #1
 80059c4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80059c6:	e001      	b.n	80059cc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80059c8:	2300      	movs	r3, #0
 80059ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059ce:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80059d6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80059d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3740      	adds	r7, #64	; 0x40
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
	...

080059e4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b08c      	sub	sp, #48	; 0x30
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	60b9      	str	r1, [r7, #8]
 80059ee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80059f0:	2300      	movs	r3, #0
 80059f2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80059f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d10a      	bne.n	8005a14 <xQueueReceive+0x30>
	__asm volatile
 80059fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a02:	f383 8811 	msr	BASEPRI, r3
 8005a06:	f3bf 8f6f 	isb	sy
 8005a0a:	f3bf 8f4f 	dsb	sy
 8005a0e:	623b      	str	r3, [r7, #32]
}
 8005a10:	bf00      	nop
 8005a12:	e7fe      	b.n	8005a12 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d103      	bne.n	8005a22 <xQueueReceive+0x3e>
 8005a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d101      	bne.n	8005a26 <xQueueReceive+0x42>
 8005a22:	2301      	movs	r3, #1
 8005a24:	e000      	b.n	8005a28 <xQueueReceive+0x44>
 8005a26:	2300      	movs	r3, #0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d10a      	bne.n	8005a42 <xQueueReceive+0x5e>
	__asm volatile
 8005a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a30:	f383 8811 	msr	BASEPRI, r3
 8005a34:	f3bf 8f6f 	isb	sy
 8005a38:	f3bf 8f4f 	dsb	sy
 8005a3c:	61fb      	str	r3, [r7, #28]
}
 8005a3e:	bf00      	nop
 8005a40:	e7fe      	b.n	8005a40 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a42:	f001 f865 	bl	8006b10 <xTaskGetSchedulerState>
 8005a46:	4603      	mov	r3, r0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d102      	bne.n	8005a52 <xQueueReceive+0x6e>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d101      	bne.n	8005a56 <xQueueReceive+0x72>
 8005a52:	2301      	movs	r3, #1
 8005a54:	e000      	b.n	8005a58 <xQueueReceive+0x74>
 8005a56:	2300      	movs	r3, #0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d10a      	bne.n	8005a72 <xQueueReceive+0x8e>
	__asm volatile
 8005a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a60:	f383 8811 	msr	BASEPRI, r3
 8005a64:	f3bf 8f6f 	isb	sy
 8005a68:	f3bf 8f4f 	dsb	sy
 8005a6c:	61bb      	str	r3, [r7, #24]
}
 8005a6e:	bf00      	nop
 8005a70:	e7fe      	b.n	8005a70 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a72:	f001 fda7 	bl	80075c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a7a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d01f      	beq.n	8005ac2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005a82:	68b9      	ldr	r1, [r7, #8]
 8005a84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a86:	f000 f8f7 	bl	8005c78 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8c:	1e5a      	subs	r2, r3, #1
 8005a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a90:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d00f      	beq.n	8005aba <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a9c:	3310      	adds	r3, #16
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f000 fe74 	bl	800678c <xTaskRemoveFromEventList>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d007      	beq.n	8005aba <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005aaa:	4b3d      	ldr	r3, [pc, #244]	; (8005ba0 <xQueueReceive+0x1bc>)
 8005aac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ab0:	601a      	str	r2, [r3, #0]
 8005ab2:	f3bf 8f4f 	dsb	sy
 8005ab6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005aba:	f001 fdb3 	bl	8007624 <vPortExitCritical>
				return pdPASS;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e069      	b.n	8005b96 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d103      	bne.n	8005ad0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005ac8:	f001 fdac 	bl	8007624 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005acc:	2300      	movs	r3, #0
 8005ace:	e062      	b.n	8005b96 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d106      	bne.n	8005ae4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005ad6:	f107 0310 	add.w	r3, r7, #16
 8005ada:	4618      	mov	r0, r3
 8005adc:	f000 feba 	bl	8006854 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005ae4:	f001 fd9e 	bl	8007624 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005ae8:	f000 fc26 	bl	8006338 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005aec:	f001 fd6a 	bl	80075c4 <vPortEnterCritical>
 8005af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005af6:	b25b      	sxtb	r3, r3
 8005af8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005afc:	d103      	bne.n	8005b06 <xQueueReceive+0x122>
 8005afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b00:	2200      	movs	r2, #0
 8005b02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b0c:	b25b      	sxtb	r3, r3
 8005b0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b12:	d103      	bne.n	8005b1c <xQueueReceive+0x138>
 8005b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b16:	2200      	movs	r2, #0
 8005b18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b1c:	f001 fd82 	bl	8007624 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b20:	1d3a      	adds	r2, r7, #4
 8005b22:	f107 0310 	add.w	r3, r7, #16
 8005b26:	4611      	mov	r1, r2
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f000 fea9 	bl	8006880 <xTaskCheckForTimeOut>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d123      	bne.n	8005b7c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b36:	f000 f917 	bl	8005d68 <prvIsQueueEmpty>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d017      	beq.n	8005b70 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b42:	3324      	adds	r3, #36	; 0x24
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	4611      	mov	r1, r2
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f000 fdcf 	bl	80066ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005b4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b50:	f000 f8b8 	bl	8005cc4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005b54:	f000 fbfe 	bl	8006354 <xTaskResumeAll>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d189      	bne.n	8005a72 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005b5e:	4b10      	ldr	r3, [pc, #64]	; (8005ba0 <xQueueReceive+0x1bc>)
 8005b60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b64:	601a      	str	r2, [r3, #0]
 8005b66:	f3bf 8f4f 	dsb	sy
 8005b6a:	f3bf 8f6f 	isb	sy
 8005b6e:	e780      	b.n	8005a72 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005b70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b72:	f000 f8a7 	bl	8005cc4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b76:	f000 fbed 	bl	8006354 <xTaskResumeAll>
 8005b7a:	e77a      	b.n	8005a72 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005b7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b7e:	f000 f8a1 	bl	8005cc4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b82:	f000 fbe7 	bl	8006354 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b88:	f000 f8ee 	bl	8005d68 <prvIsQueueEmpty>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	f43f af6f 	beq.w	8005a72 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005b94:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3730      	adds	r7, #48	; 0x30
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	e000ed04 	.word	0xe000ed04

08005ba4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b086      	sub	sp, #24
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	60b9      	str	r1, [r7, #8]
 8005bae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d10d      	bne.n	8005bde <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d14d      	bne.n	8005c66 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f000 ffbc 	bl	8006b4c <xTaskPriorityDisinherit>
 8005bd4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	609a      	str	r2, [r3, #8]
 8005bdc:	e043      	b.n	8005c66 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d119      	bne.n	8005c18 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	6858      	ldr	r0, [r3, #4]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bec:	461a      	mov	r2, r3
 8005bee:	68b9      	ldr	r1, [r7, #8]
 8005bf0:	f002 f9af 	bl	8007f52 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	685a      	ldr	r2, [r3, #4]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfc:	441a      	add	r2, r3
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	685a      	ldr	r2, [r3, #4]
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d32b      	bcc.n	8005c66 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	605a      	str	r2, [r3, #4]
 8005c16:	e026      	b.n	8005c66 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	68d8      	ldr	r0, [r3, #12]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c20:	461a      	mov	r2, r3
 8005c22:	68b9      	ldr	r1, [r7, #8]
 8005c24:	f002 f995 	bl	8007f52 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	68da      	ldr	r2, [r3, #12]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c30:	425b      	negs	r3, r3
 8005c32:	441a      	add	r2, r3
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	68da      	ldr	r2, [r3, #12]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d207      	bcs.n	8005c54 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	689a      	ldr	r2, [r3, #8]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c4c:	425b      	negs	r3, r3
 8005c4e:	441a      	add	r2, r3
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2b02      	cmp	r3, #2
 8005c58:	d105      	bne.n	8005c66 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d002      	beq.n	8005c66 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	3b01      	subs	r3, #1
 8005c64:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	1c5a      	adds	r2, r3, #1
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005c6e:	697b      	ldr	r3, [r7, #20]
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3718      	adds	r7, #24
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b082      	sub	sp, #8
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d018      	beq.n	8005cbc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	68da      	ldr	r2, [r3, #12]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c92:	441a      	add	r2, r3
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	68da      	ldr	r2, [r3, #12]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d303      	bcc.n	8005cac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	68d9      	ldr	r1, [r3, #12]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	6838      	ldr	r0, [r7, #0]
 8005cb8:	f002 f94b 	bl	8007f52 <memcpy>
	}
}
 8005cbc:	bf00      	nop
 8005cbe:	3708      	adds	r7, #8
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b084      	sub	sp, #16
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005ccc:	f001 fc7a 	bl	80075c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005cd6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005cd8:	e011      	b.n	8005cfe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d012      	beq.n	8005d08 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	3324      	adds	r3, #36	; 0x24
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f000 fd50 	bl	800678c <xTaskRemoveFromEventList>
 8005cec:	4603      	mov	r3, r0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d001      	beq.n	8005cf6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005cf2:	f000 fe27 	bl	8006944 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005cf6:	7bfb      	ldrb	r3, [r7, #15]
 8005cf8:	3b01      	subs	r3, #1
 8005cfa:	b2db      	uxtb	r3, r3
 8005cfc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005cfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	dce9      	bgt.n	8005cda <prvUnlockQueue+0x16>
 8005d06:	e000      	b.n	8005d0a <prvUnlockQueue+0x46>
					break;
 8005d08:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	22ff      	movs	r2, #255	; 0xff
 8005d0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005d12:	f001 fc87 	bl	8007624 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005d16:	f001 fc55 	bl	80075c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d20:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d22:	e011      	b.n	8005d48 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	691b      	ldr	r3, [r3, #16]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d012      	beq.n	8005d52 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	3310      	adds	r3, #16
 8005d30:	4618      	mov	r0, r3
 8005d32:	f000 fd2b 	bl	800678c <xTaskRemoveFromEventList>
 8005d36:	4603      	mov	r3, r0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d001      	beq.n	8005d40 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005d3c:	f000 fe02 	bl	8006944 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005d40:	7bbb      	ldrb	r3, [r7, #14]
 8005d42:	3b01      	subs	r3, #1
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	dce9      	bgt.n	8005d24 <prvUnlockQueue+0x60>
 8005d50:	e000      	b.n	8005d54 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005d52:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	22ff      	movs	r2, #255	; 0xff
 8005d58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005d5c:	f001 fc62 	bl	8007624 <vPortExitCritical>
}
 8005d60:	bf00      	nop
 8005d62:	3710      	adds	r7, #16
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d70:	f001 fc28 	bl	80075c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d102      	bne.n	8005d82 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	60fb      	str	r3, [r7, #12]
 8005d80:	e001      	b.n	8005d86 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005d82:	2300      	movs	r3, #0
 8005d84:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005d86:	f001 fc4d 	bl	8007624 <vPortExitCritical>

	return xReturn;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3710      	adds	r7, #16
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b084      	sub	sp, #16
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d9c:	f001 fc12 	bl	80075c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d102      	bne.n	8005db2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005dac:	2301      	movs	r3, #1
 8005dae:	60fb      	str	r3, [r7, #12]
 8005db0:	e001      	b.n	8005db6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005db2:	2300      	movs	r3, #0
 8005db4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005db6:	f001 fc35 	bl	8007624 <vPortExitCritical>

	return xReturn;
 8005dba:	68fb      	ldr	r3, [r7, #12]
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3710      	adds	r7, #16
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}

08005dc4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b085      	sub	sp, #20
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005dce:	2300      	movs	r3, #0
 8005dd0:	60fb      	str	r3, [r7, #12]
 8005dd2:	e014      	b.n	8005dfe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005dd4:	4a0f      	ldr	r2, [pc, #60]	; (8005e14 <vQueueAddToRegistry+0x50>)
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d10b      	bne.n	8005df8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005de0:	490c      	ldr	r1, [pc, #48]	; (8005e14 <vQueueAddToRegistry+0x50>)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	683a      	ldr	r2, [r7, #0]
 8005de6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005dea:	4a0a      	ldr	r2, [pc, #40]	; (8005e14 <vQueueAddToRegistry+0x50>)
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	00db      	lsls	r3, r3, #3
 8005df0:	4413      	add	r3, r2
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005df6:	e006      	b.n	8005e06 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	60fb      	str	r3, [r7, #12]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2b07      	cmp	r3, #7
 8005e02:	d9e7      	bls.n	8005dd4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005e04:	bf00      	nop
 8005e06:	bf00      	nop
 8005e08:	3714      	adds	r7, #20
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr
 8005e12:	bf00      	nop
 8005e14:	200009b0 	.word	0x200009b0

08005e18 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b086      	sub	sp, #24
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	60f8      	str	r0, [r7, #12]
 8005e20:	60b9      	str	r1, [r7, #8]
 8005e22:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005e28:	f001 fbcc 	bl	80075c4 <vPortEnterCritical>
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e32:	b25b      	sxtb	r3, r3
 8005e34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e38:	d103      	bne.n	8005e42 <vQueueWaitForMessageRestricted+0x2a>
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e48:	b25b      	sxtb	r3, r3
 8005e4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e4e:	d103      	bne.n	8005e58 <vQueueWaitForMessageRestricted+0x40>
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	2200      	movs	r2, #0
 8005e54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e58:	f001 fbe4 	bl	8007624 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d106      	bne.n	8005e72 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	3324      	adds	r3, #36	; 0x24
 8005e68:	687a      	ldr	r2, [r7, #4]
 8005e6a:	68b9      	ldr	r1, [r7, #8]
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f000 fc61 	bl	8006734 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005e72:	6978      	ldr	r0, [r7, #20]
 8005e74:	f7ff ff26 	bl	8005cc4 <prvUnlockQueue>
	}
 8005e78:	bf00      	nop
 8005e7a:	3718      	adds	r7, #24
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b08e      	sub	sp, #56	; 0x38
 8005e84:	af04      	add	r7, sp, #16
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	60b9      	str	r1, [r7, #8]
 8005e8a:	607a      	str	r2, [r7, #4]
 8005e8c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d10a      	bne.n	8005eaa <xTaskCreateStatic+0x2a>
	__asm volatile
 8005e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e98:	f383 8811 	msr	BASEPRI, r3
 8005e9c:	f3bf 8f6f 	isb	sy
 8005ea0:	f3bf 8f4f 	dsb	sy
 8005ea4:	623b      	str	r3, [r7, #32]
}
 8005ea6:	bf00      	nop
 8005ea8:	e7fe      	b.n	8005ea8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d10a      	bne.n	8005ec6 <xTaskCreateStatic+0x46>
	__asm volatile
 8005eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb4:	f383 8811 	msr	BASEPRI, r3
 8005eb8:	f3bf 8f6f 	isb	sy
 8005ebc:	f3bf 8f4f 	dsb	sy
 8005ec0:	61fb      	str	r3, [r7, #28]
}
 8005ec2:	bf00      	nop
 8005ec4:	e7fe      	b.n	8005ec4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005ec6:	23a8      	movs	r3, #168	; 0xa8
 8005ec8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	2ba8      	cmp	r3, #168	; 0xa8
 8005ece:	d00a      	beq.n	8005ee6 <xTaskCreateStatic+0x66>
	__asm volatile
 8005ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed4:	f383 8811 	msr	BASEPRI, r3
 8005ed8:	f3bf 8f6f 	isb	sy
 8005edc:	f3bf 8f4f 	dsb	sy
 8005ee0:	61bb      	str	r3, [r7, #24]
}
 8005ee2:	bf00      	nop
 8005ee4:	e7fe      	b.n	8005ee4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005ee6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d01e      	beq.n	8005f2c <xTaskCreateStatic+0xac>
 8005eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d01b      	beq.n	8005f2c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ef6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005efc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f00:	2202      	movs	r2, #2
 8005f02:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005f06:	2300      	movs	r3, #0
 8005f08:	9303      	str	r3, [sp, #12]
 8005f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0c:	9302      	str	r3, [sp, #8]
 8005f0e:	f107 0314 	add.w	r3, r7, #20
 8005f12:	9301      	str	r3, [sp, #4]
 8005f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f16:	9300      	str	r3, [sp, #0]
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	68b9      	ldr	r1, [r7, #8]
 8005f1e:	68f8      	ldr	r0, [r7, #12]
 8005f20:	f000 f850 	bl	8005fc4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f26:	f000 f8f3 	bl	8006110 <prvAddNewTaskToReadyList>
 8005f2a:	e001      	b.n	8005f30 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005f30:	697b      	ldr	r3, [r7, #20]
	}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3728      	adds	r7, #40	; 0x28
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}

08005f3a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005f3a:	b580      	push	{r7, lr}
 8005f3c:	b08c      	sub	sp, #48	; 0x30
 8005f3e:	af04      	add	r7, sp, #16
 8005f40:	60f8      	str	r0, [r7, #12]
 8005f42:	60b9      	str	r1, [r7, #8]
 8005f44:	603b      	str	r3, [r7, #0]
 8005f46:	4613      	mov	r3, r2
 8005f48:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005f4a:	88fb      	ldrh	r3, [r7, #6]
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f001 fc5a 	bl	8007808 <pvPortMalloc>
 8005f54:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d00e      	beq.n	8005f7a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005f5c:	20a8      	movs	r0, #168	; 0xa8
 8005f5e:	f001 fc53 	bl	8007808 <pvPortMalloc>
 8005f62:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005f64:	69fb      	ldr	r3, [r7, #28]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d003      	beq.n	8005f72 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	697a      	ldr	r2, [r7, #20]
 8005f6e:	631a      	str	r2, [r3, #48]	; 0x30
 8005f70:	e005      	b.n	8005f7e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005f72:	6978      	ldr	r0, [r7, #20]
 8005f74:	f001 fd14 	bl	80079a0 <vPortFree>
 8005f78:	e001      	b.n	8005f7e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d017      	beq.n	8005fb4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005f84:	69fb      	ldr	r3, [r7, #28]
 8005f86:	2200      	movs	r2, #0
 8005f88:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005f8c:	88fa      	ldrh	r2, [r7, #6]
 8005f8e:	2300      	movs	r3, #0
 8005f90:	9303      	str	r3, [sp, #12]
 8005f92:	69fb      	ldr	r3, [r7, #28]
 8005f94:	9302      	str	r3, [sp, #8]
 8005f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f98:	9301      	str	r3, [sp, #4]
 8005f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f9c:	9300      	str	r3, [sp, #0]
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	68b9      	ldr	r1, [r7, #8]
 8005fa2:	68f8      	ldr	r0, [r7, #12]
 8005fa4:	f000 f80e 	bl	8005fc4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005fa8:	69f8      	ldr	r0, [r7, #28]
 8005faa:	f000 f8b1 	bl	8006110 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	61bb      	str	r3, [r7, #24]
 8005fb2:	e002      	b.n	8005fba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005fb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005fb8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005fba:	69bb      	ldr	r3, [r7, #24]
	}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3720      	adds	r7, #32
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}

08005fc4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b088      	sub	sp, #32
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	60f8      	str	r0, [r7, #12]
 8005fcc:	60b9      	str	r1, [r7, #8]
 8005fce:	607a      	str	r2, [r7, #4]
 8005fd0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	009b      	lsls	r3, r3, #2
 8005fda:	461a      	mov	r2, r3
 8005fdc:	21a5      	movs	r1, #165	; 0xa5
 8005fde:	f001 ff2d 	bl	8007e3c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005fec:	3b01      	subs	r3, #1
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	4413      	add	r3, r2
 8005ff2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005ff4:	69bb      	ldr	r3, [r7, #24]
 8005ff6:	f023 0307 	bic.w	r3, r3, #7
 8005ffa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005ffc:	69bb      	ldr	r3, [r7, #24]
 8005ffe:	f003 0307 	and.w	r3, r3, #7
 8006002:	2b00      	cmp	r3, #0
 8006004:	d00a      	beq.n	800601c <prvInitialiseNewTask+0x58>
	__asm volatile
 8006006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800600a:	f383 8811 	msr	BASEPRI, r3
 800600e:	f3bf 8f6f 	isb	sy
 8006012:	f3bf 8f4f 	dsb	sy
 8006016:	617b      	str	r3, [r7, #20]
}
 8006018:	bf00      	nop
 800601a:	e7fe      	b.n	800601a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d01f      	beq.n	8006062 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006022:	2300      	movs	r3, #0
 8006024:	61fb      	str	r3, [r7, #28]
 8006026:	e012      	b.n	800604e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006028:	68ba      	ldr	r2, [r7, #8]
 800602a:	69fb      	ldr	r3, [r7, #28]
 800602c:	4413      	add	r3, r2
 800602e:	7819      	ldrb	r1, [r3, #0]
 8006030:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006032:	69fb      	ldr	r3, [r7, #28]
 8006034:	4413      	add	r3, r2
 8006036:	3334      	adds	r3, #52	; 0x34
 8006038:	460a      	mov	r2, r1
 800603a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800603c:	68ba      	ldr	r2, [r7, #8]
 800603e:	69fb      	ldr	r3, [r7, #28]
 8006040:	4413      	add	r3, r2
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d006      	beq.n	8006056 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006048:	69fb      	ldr	r3, [r7, #28]
 800604a:	3301      	adds	r3, #1
 800604c:	61fb      	str	r3, [r7, #28]
 800604e:	69fb      	ldr	r3, [r7, #28]
 8006050:	2b0f      	cmp	r3, #15
 8006052:	d9e9      	bls.n	8006028 <prvInitialiseNewTask+0x64>
 8006054:	e000      	b.n	8006058 <prvInitialiseNewTask+0x94>
			{
				break;
 8006056:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800605a:	2200      	movs	r2, #0
 800605c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006060:	e003      	b.n	800606a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006064:	2200      	movs	r2, #0
 8006066:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800606a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800606c:	2b37      	cmp	r3, #55	; 0x37
 800606e:	d901      	bls.n	8006074 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006070:	2337      	movs	r3, #55	; 0x37
 8006072:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006076:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006078:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800607a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800607c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800607e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006082:	2200      	movs	r2, #0
 8006084:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006088:	3304      	adds	r3, #4
 800608a:	4618      	mov	r0, r3
 800608c:	f7ff f93e 	bl	800530c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006092:	3318      	adds	r3, #24
 8006094:	4618      	mov	r0, r3
 8006096:	f7ff f939 	bl	800530c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800609a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800609c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800609e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80060a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80060aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060ae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80060b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b2:	2200      	movs	r2, #0
 80060b4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80060b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ba:	2200      	movs	r2, #0
 80060bc:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80060c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c2:	3354      	adds	r3, #84	; 0x54
 80060c4:	224c      	movs	r2, #76	; 0x4c
 80060c6:	2100      	movs	r1, #0
 80060c8:	4618      	mov	r0, r3
 80060ca:	f001 feb7 	bl	8007e3c <memset>
 80060ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d0:	4a0c      	ldr	r2, [pc, #48]	; (8006104 <prvInitialiseNewTask+0x140>)
 80060d2:	659a      	str	r2, [r3, #88]	; 0x58
 80060d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d6:	4a0c      	ldr	r2, [pc, #48]	; (8006108 <prvInitialiseNewTask+0x144>)
 80060d8:	65da      	str	r2, [r3, #92]	; 0x5c
 80060da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060dc:	4a0b      	ldr	r2, [pc, #44]	; (800610c <prvInitialiseNewTask+0x148>)
 80060de:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80060e0:	683a      	ldr	r2, [r7, #0]
 80060e2:	68f9      	ldr	r1, [r7, #12]
 80060e4:	69b8      	ldr	r0, [r7, #24]
 80060e6:	f001 f941 	bl	800736c <pxPortInitialiseStack>
 80060ea:	4602      	mov	r2, r0
 80060ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ee:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80060f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d002      	beq.n	80060fc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80060f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060fa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060fc:	bf00      	nop
 80060fe:	3720      	adds	r7, #32
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}
 8006104:	200023cc 	.word	0x200023cc
 8006108:	20002434 	.word	0x20002434
 800610c:	2000249c 	.word	0x2000249c

08006110 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b082      	sub	sp, #8
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006118:	f001 fa54 	bl	80075c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800611c:	4b2d      	ldr	r3, [pc, #180]	; (80061d4 <prvAddNewTaskToReadyList+0xc4>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	3301      	adds	r3, #1
 8006122:	4a2c      	ldr	r2, [pc, #176]	; (80061d4 <prvAddNewTaskToReadyList+0xc4>)
 8006124:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006126:	4b2c      	ldr	r3, [pc, #176]	; (80061d8 <prvAddNewTaskToReadyList+0xc8>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d109      	bne.n	8006142 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800612e:	4a2a      	ldr	r2, [pc, #168]	; (80061d8 <prvAddNewTaskToReadyList+0xc8>)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006134:	4b27      	ldr	r3, [pc, #156]	; (80061d4 <prvAddNewTaskToReadyList+0xc4>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	2b01      	cmp	r3, #1
 800613a:	d110      	bne.n	800615e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800613c:	f000 fc26 	bl	800698c <prvInitialiseTaskLists>
 8006140:	e00d      	b.n	800615e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006142:	4b26      	ldr	r3, [pc, #152]	; (80061dc <prvAddNewTaskToReadyList+0xcc>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d109      	bne.n	800615e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800614a:	4b23      	ldr	r3, [pc, #140]	; (80061d8 <prvAddNewTaskToReadyList+0xc8>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006154:	429a      	cmp	r2, r3
 8006156:	d802      	bhi.n	800615e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006158:	4a1f      	ldr	r2, [pc, #124]	; (80061d8 <prvAddNewTaskToReadyList+0xc8>)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800615e:	4b20      	ldr	r3, [pc, #128]	; (80061e0 <prvAddNewTaskToReadyList+0xd0>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	3301      	adds	r3, #1
 8006164:	4a1e      	ldr	r2, [pc, #120]	; (80061e0 <prvAddNewTaskToReadyList+0xd0>)
 8006166:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006168:	4b1d      	ldr	r3, [pc, #116]	; (80061e0 <prvAddNewTaskToReadyList+0xd0>)
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006174:	4b1b      	ldr	r3, [pc, #108]	; (80061e4 <prvAddNewTaskToReadyList+0xd4>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	429a      	cmp	r2, r3
 800617a:	d903      	bls.n	8006184 <prvAddNewTaskToReadyList+0x74>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006180:	4a18      	ldr	r2, [pc, #96]	; (80061e4 <prvAddNewTaskToReadyList+0xd4>)
 8006182:	6013      	str	r3, [r2, #0]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006188:	4613      	mov	r3, r2
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	4413      	add	r3, r2
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	4a15      	ldr	r2, [pc, #84]	; (80061e8 <prvAddNewTaskToReadyList+0xd8>)
 8006192:	441a      	add	r2, r3
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	3304      	adds	r3, #4
 8006198:	4619      	mov	r1, r3
 800619a:	4610      	mov	r0, r2
 800619c:	f7ff f8c3 	bl	8005326 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80061a0:	f001 fa40 	bl	8007624 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80061a4:	4b0d      	ldr	r3, [pc, #52]	; (80061dc <prvAddNewTaskToReadyList+0xcc>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d00e      	beq.n	80061ca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80061ac:	4b0a      	ldr	r3, [pc, #40]	; (80061d8 <prvAddNewTaskToReadyList+0xc8>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d207      	bcs.n	80061ca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80061ba:	4b0c      	ldr	r3, [pc, #48]	; (80061ec <prvAddNewTaskToReadyList+0xdc>)
 80061bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061c0:	601a      	str	r2, [r3, #0]
 80061c2:	f3bf 8f4f 	dsb	sy
 80061c6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80061ca:	bf00      	nop
 80061cc:	3708      	adds	r7, #8
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
 80061d2:	bf00      	nop
 80061d4:	20000ec4 	.word	0x20000ec4
 80061d8:	200009f0 	.word	0x200009f0
 80061dc:	20000ed0 	.word	0x20000ed0
 80061e0:	20000ee0 	.word	0x20000ee0
 80061e4:	20000ecc 	.word	0x20000ecc
 80061e8:	200009f4 	.word	0x200009f4
 80061ec:	e000ed04 	.word	0xe000ed04

080061f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b084      	sub	sp, #16
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80061f8:	2300      	movs	r3, #0
 80061fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d017      	beq.n	8006232 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006202:	4b13      	ldr	r3, [pc, #76]	; (8006250 <vTaskDelay+0x60>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d00a      	beq.n	8006220 <vTaskDelay+0x30>
	__asm volatile
 800620a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800620e:	f383 8811 	msr	BASEPRI, r3
 8006212:	f3bf 8f6f 	isb	sy
 8006216:	f3bf 8f4f 	dsb	sy
 800621a:	60bb      	str	r3, [r7, #8]
}
 800621c:	bf00      	nop
 800621e:	e7fe      	b.n	800621e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006220:	f000 f88a 	bl	8006338 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006224:	2100      	movs	r1, #0
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 fcfe 	bl	8006c28 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800622c:	f000 f892 	bl	8006354 <xTaskResumeAll>
 8006230:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d107      	bne.n	8006248 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006238:	4b06      	ldr	r3, [pc, #24]	; (8006254 <vTaskDelay+0x64>)
 800623a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800623e:	601a      	str	r2, [r3, #0]
 8006240:	f3bf 8f4f 	dsb	sy
 8006244:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006248:	bf00      	nop
 800624a:	3710      	adds	r7, #16
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}
 8006250:	20000eec 	.word	0x20000eec
 8006254:	e000ed04 	.word	0xe000ed04

08006258 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b08a      	sub	sp, #40	; 0x28
 800625c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800625e:	2300      	movs	r3, #0
 8006260:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006262:	2300      	movs	r3, #0
 8006264:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006266:	463a      	mov	r2, r7
 8006268:	1d39      	adds	r1, r7, #4
 800626a:	f107 0308 	add.w	r3, r7, #8
 800626e:	4618      	mov	r0, r3
 8006270:	f7fe fff8 	bl	8005264 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006274:	6839      	ldr	r1, [r7, #0]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	68ba      	ldr	r2, [r7, #8]
 800627a:	9202      	str	r2, [sp, #8]
 800627c:	9301      	str	r3, [sp, #4]
 800627e:	2300      	movs	r3, #0
 8006280:	9300      	str	r3, [sp, #0]
 8006282:	2300      	movs	r3, #0
 8006284:	460a      	mov	r2, r1
 8006286:	4924      	ldr	r1, [pc, #144]	; (8006318 <vTaskStartScheduler+0xc0>)
 8006288:	4824      	ldr	r0, [pc, #144]	; (800631c <vTaskStartScheduler+0xc4>)
 800628a:	f7ff fdf9 	bl	8005e80 <xTaskCreateStatic>
 800628e:	4603      	mov	r3, r0
 8006290:	4a23      	ldr	r2, [pc, #140]	; (8006320 <vTaskStartScheduler+0xc8>)
 8006292:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006294:	4b22      	ldr	r3, [pc, #136]	; (8006320 <vTaskStartScheduler+0xc8>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d002      	beq.n	80062a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800629c:	2301      	movs	r3, #1
 800629e:	617b      	str	r3, [r7, #20]
 80062a0:	e001      	b.n	80062a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80062a2:	2300      	movs	r3, #0
 80062a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d102      	bne.n	80062b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80062ac:	f000 fd10 	bl	8006cd0 <xTimerCreateTimerTask>
 80062b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d11b      	bne.n	80062f0 <vTaskStartScheduler+0x98>
	__asm volatile
 80062b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062bc:	f383 8811 	msr	BASEPRI, r3
 80062c0:	f3bf 8f6f 	isb	sy
 80062c4:	f3bf 8f4f 	dsb	sy
 80062c8:	613b      	str	r3, [r7, #16]
}
 80062ca:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80062cc:	4b15      	ldr	r3, [pc, #84]	; (8006324 <vTaskStartScheduler+0xcc>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	3354      	adds	r3, #84	; 0x54
 80062d2:	4a15      	ldr	r2, [pc, #84]	; (8006328 <vTaskStartScheduler+0xd0>)
 80062d4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80062d6:	4b15      	ldr	r3, [pc, #84]	; (800632c <vTaskStartScheduler+0xd4>)
 80062d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80062dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80062de:	4b14      	ldr	r3, [pc, #80]	; (8006330 <vTaskStartScheduler+0xd8>)
 80062e0:	2201      	movs	r2, #1
 80062e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80062e4:	4b13      	ldr	r3, [pc, #76]	; (8006334 <vTaskStartScheduler+0xdc>)
 80062e6:	2200      	movs	r2, #0
 80062e8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80062ea:	f001 f8c9 	bl	8007480 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80062ee:	e00e      	b.n	800630e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062f6:	d10a      	bne.n	800630e <vTaskStartScheduler+0xb6>
	__asm volatile
 80062f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062fc:	f383 8811 	msr	BASEPRI, r3
 8006300:	f3bf 8f6f 	isb	sy
 8006304:	f3bf 8f4f 	dsb	sy
 8006308:	60fb      	str	r3, [r7, #12]
}
 800630a:	bf00      	nop
 800630c:	e7fe      	b.n	800630c <vTaskStartScheduler+0xb4>
}
 800630e:	bf00      	nop
 8006310:	3718      	adds	r7, #24
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}
 8006316:	bf00      	nop
 8006318:	08008c68 	.word	0x08008c68
 800631c:	0800695d 	.word	0x0800695d
 8006320:	20000ee8 	.word	0x20000ee8
 8006324:	200009f0 	.word	0x200009f0
 8006328:	20000068 	.word	0x20000068
 800632c:	20000ee4 	.word	0x20000ee4
 8006330:	20000ed0 	.word	0x20000ed0
 8006334:	20000ec8 	.word	0x20000ec8

08006338 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006338:	b480      	push	{r7}
 800633a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800633c:	4b04      	ldr	r3, [pc, #16]	; (8006350 <vTaskSuspendAll+0x18>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	3301      	adds	r3, #1
 8006342:	4a03      	ldr	r2, [pc, #12]	; (8006350 <vTaskSuspendAll+0x18>)
 8006344:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006346:	bf00      	nop
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr
 8006350:	20000eec 	.word	0x20000eec

08006354 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b084      	sub	sp, #16
 8006358:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800635a:	2300      	movs	r3, #0
 800635c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800635e:	2300      	movs	r3, #0
 8006360:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006362:	4b42      	ldr	r3, [pc, #264]	; (800646c <xTaskResumeAll+0x118>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d10a      	bne.n	8006380 <xTaskResumeAll+0x2c>
	__asm volatile
 800636a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800636e:	f383 8811 	msr	BASEPRI, r3
 8006372:	f3bf 8f6f 	isb	sy
 8006376:	f3bf 8f4f 	dsb	sy
 800637a:	603b      	str	r3, [r7, #0]
}
 800637c:	bf00      	nop
 800637e:	e7fe      	b.n	800637e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006380:	f001 f920 	bl	80075c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006384:	4b39      	ldr	r3, [pc, #228]	; (800646c <xTaskResumeAll+0x118>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	3b01      	subs	r3, #1
 800638a:	4a38      	ldr	r2, [pc, #224]	; (800646c <xTaskResumeAll+0x118>)
 800638c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800638e:	4b37      	ldr	r3, [pc, #220]	; (800646c <xTaskResumeAll+0x118>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d162      	bne.n	800645c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006396:	4b36      	ldr	r3, [pc, #216]	; (8006470 <xTaskResumeAll+0x11c>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d05e      	beq.n	800645c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800639e:	e02f      	b.n	8006400 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063a0:	4b34      	ldr	r3, [pc, #208]	; (8006474 <xTaskResumeAll+0x120>)
 80063a2:	68db      	ldr	r3, [r3, #12]
 80063a4:	68db      	ldr	r3, [r3, #12]
 80063a6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	3318      	adds	r3, #24
 80063ac:	4618      	mov	r0, r3
 80063ae:	f7ff f817 	bl	80053e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	3304      	adds	r3, #4
 80063b6:	4618      	mov	r0, r3
 80063b8:	f7ff f812 	bl	80053e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063c0:	4b2d      	ldr	r3, [pc, #180]	; (8006478 <xTaskResumeAll+0x124>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d903      	bls.n	80063d0 <xTaskResumeAll+0x7c>
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063cc:	4a2a      	ldr	r2, [pc, #168]	; (8006478 <xTaskResumeAll+0x124>)
 80063ce:	6013      	str	r3, [r2, #0]
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063d4:	4613      	mov	r3, r2
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	4413      	add	r3, r2
 80063da:	009b      	lsls	r3, r3, #2
 80063dc:	4a27      	ldr	r2, [pc, #156]	; (800647c <xTaskResumeAll+0x128>)
 80063de:	441a      	add	r2, r3
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	3304      	adds	r3, #4
 80063e4:	4619      	mov	r1, r3
 80063e6:	4610      	mov	r0, r2
 80063e8:	f7fe ff9d 	bl	8005326 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063f0:	4b23      	ldr	r3, [pc, #140]	; (8006480 <xTaskResumeAll+0x12c>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d302      	bcc.n	8006400 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80063fa:	4b22      	ldr	r3, [pc, #136]	; (8006484 <xTaskResumeAll+0x130>)
 80063fc:	2201      	movs	r2, #1
 80063fe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006400:	4b1c      	ldr	r3, [pc, #112]	; (8006474 <xTaskResumeAll+0x120>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d1cb      	bne.n	80063a0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d001      	beq.n	8006412 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800640e:	f000 fb5f 	bl	8006ad0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006412:	4b1d      	ldr	r3, [pc, #116]	; (8006488 <xTaskResumeAll+0x134>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d010      	beq.n	8006440 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800641e:	f000 f847 	bl	80064b0 <xTaskIncrementTick>
 8006422:	4603      	mov	r3, r0
 8006424:	2b00      	cmp	r3, #0
 8006426:	d002      	beq.n	800642e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006428:	4b16      	ldr	r3, [pc, #88]	; (8006484 <xTaskResumeAll+0x130>)
 800642a:	2201      	movs	r2, #1
 800642c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	3b01      	subs	r3, #1
 8006432:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d1f1      	bne.n	800641e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800643a:	4b13      	ldr	r3, [pc, #76]	; (8006488 <xTaskResumeAll+0x134>)
 800643c:	2200      	movs	r2, #0
 800643e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006440:	4b10      	ldr	r3, [pc, #64]	; (8006484 <xTaskResumeAll+0x130>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d009      	beq.n	800645c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006448:	2301      	movs	r3, #1
 800644a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800644c:	4b0f      	ldr	r3, [pc, #60]	; (800648c <xTaskResumeAll+0x138>)
 800644e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006452:	601a      	str	r2, [r3, #0]
 8006454:	f3bf 8f4f 	dsb	sy
 8006458:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800645c:	f001 f8e2 	bl	8007624 <vPortExitCritical>

	return xAlreadyYielded;
 8006460:	68bb      	ldr	r3, [r7, #8]
}
 8006462:	4618      	mov	r0, r3
 8006464:	3710      	adds	r7, #16
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}
 800646a:	bf00      	nop
 800646c:	20000eec 	.word	0x20000eec
 8006470:	20000ec4 	.word	0x20000ec4
 8006474:	20000e84 	.word	0x20000e84
 8006478:	20000ecc 	.word	0x20000ecc
 800647c:	200009f4 	.word	0x200009f4
 8006480:	200009f0 	.word	0x200009f0
 8006484:	20000ed8 	.word	0x20000ed8
 8006488:	20000ed4 	.word	0x20000ed4
 800648c:	e000ed04 	.word	0xe000ed04

08006490 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006490:	b480      	push	{r7}
 8006492:	b083      	sub	sp, #12
 8006494:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006496:	4b05      	ldr	r3, [pc, #20]	; (80064ac <xTaskGetTickCount+0x1c>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800649c:	687b      	ldr	r3, [r7, #4]
}
 800649e:	4618      	mov	r0, r3
 80064a0:	370c      	adds	r7, #12
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr
 80064aa:	bf00      	nop
 80064ac:	20000ec8 	.word	0x20000ec8

080064b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b086      	sub	sp, #24
 80064b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80064b6:	2300      	movs	r3, #0
 80064b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064ba:	4b4f      	ldr	r3, [pc, #316]	; (80065f8 <xTaskIncrementTick+0x148>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	f040 808f 	bne.w	80065e2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80064c4:	4b4d      	ldr	r3, [pc, #308]	; (80065fc <xTaskIncrementTick+0x14c>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	3301      	adds	r3, #1
 80064ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80064cc:	4a4b      	ldr	r2, [pc, #300]	; (80065fc <xTaskIncrementTick+0x14c>)
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d120      	bne.n	800651a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80064d8:	4b49      	ldr	r3, [pc, #292]	; (8006600 <xTaskIncrementTick+0x150>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d00a      	beq.n	80064f8 <xTaskIncrementTick+0x48>
	__asm volatile
 80064e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e6:	f383 8811 	msr	BASEPRI, r3
 80064ea:	f3bf 8f6f 	isb	sy
 80064ee:	f3bf 8f4f 	dsb	sy
 80064f2:	603b      	str	r3, [r7, #0]
}
 80064f4:	bf00      	nop
 80064f6:	e7fe      	b.n	80064f6 <xTaskIncrementTick+0x46>
 80064f8:	4b41      	ldr	r3, [pc, #260]	; (8006600 <xTaskIncrementTick+0x150>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	60fb      	str	r3, [r7, #12]
 80064fe:	4b41      	ldr	r3, [pc, #260]	; (8006604 <xTaskIncrementTick+0x154>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a3f      	ldr	r2, [pc, #252]	; (8006600 <xTaskIncrementTick+0x150>)
 8006504:	6013      	str	r3, [r2, #0]
 8006506:	4a3f      	ldr	r2, [pc, #252]	; (8006604 <xTaskIncrementTick+0x154>)
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	6013      	str	r3, [r2, #0]
 800650c:	4b3e      	ldr	r3, [pc, #248]	; (8006608 <xTaskIncrementTick+0x158>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	3301      	adds	r3, #1
 8006512:	4a3d      	ldr	r2, [pc, #244]	; (8006608 <xTaskIncrementTick+0x158>)
 8006514:	6013      	str	r3, [r2, #0]
 8006516:	f000 fadb 	bl	8006ad0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800651a:	4b3c      	ldr	r3, [pc, #240]	; (800660c <xTaskIncrementTick+0x15c>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	693a      	ldr	r2, [r7, #16]
 8006520:	429a      	cmp	r2, r3
 8006522:	d349      	bcc.n	80065b8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006524:	4b36      	ldr	r3, [pc, #216]	; (8006600 <xTaskIncrementTick+0x150>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d104      	bne.n	8006538 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800652e:	4b37      	ldr	r3, [pc, #220]	; (800660c <xTaskIncrementTick+0x15c>)
 8006530:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006534:	601a      	str	r2, [r3, #0]
					break;
 8006536:	e03f      	b.n	80065b8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006538:	4b31      	ldr	r3, [pc, #196]	; (8006600 <xTaskIncrementTick+0x150>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	68db      	ldr	r3, [r3, #12]
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006548:	693a      	ldr	r2, [r7, #16]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	429a      	cmp	r2, r3
 800654e:	d203      	bcs.n	8006558 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006550:	4a2e      	ldr	r2, [pc, #184]	; (800660c <xTaskIncrementTick+0x15c>)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006556:	e02f      	b.n	80065b8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	3304      	adds	r3, #4
 800655c:	4618      	mov	r0, r3
 800655e:	f7fe ff3f 	bl	80053e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006566:	2b00      	cmp	r3, #0
 8006568:	d004      	beq.n	8006574 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	3318      	adds	r3, #24
 800656e:	4618      	mov	r0, r3
 8006570:	f7fe ff36 	bl	80053e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006578:	4b25      	ldr	r3, [pc, #148]	; (8006610 <xTaskIncrementTick+0x160>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	429a      	cmp	r2, r3
 800657e:	d903      	bls.n	8006588 <xTaskIncrementTick+0xd8>
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006584:	4a22      	ldr	r2, [pc, #136]	; (8006610 <xTaskIncrementTick+0x160>)
 8006586:	6013      	str	r3, [r2, #0]
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800658c:	4613      	mov	r3, r2
 800658e:	009b      	lsls	r3, r3, #2
 8006590:	4413      	add	r3, r2
 8006592:	009b      	lsls	r3, r3, #2
 8006594:	4a1f      	ldr	r2, [pc, #124]	; (8006614 <xTaskIncrementTick+0x164>)
 8006596:	441a      	add	r2, r3
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	3304      	adds	r3, #4
 800659c:	4619      	mov	r1, r3
 800659e:	4610      	mov	r0, r2
 80065a0:	f7fe fec1 	bl	8005326 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065a8:	4b1b      	ldr	r3, [pc, #108]	; (8006618 <xTaskIncrementTick+0x168>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ae:	429a      	cmp	r2, r3
 80065b0:	d3b8      	bcc.n	8006524 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80065b2:	2301      	movs	r3, #1
 80065b4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80065b6:	e7b5      	b.n	8006524 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80065b8:	4b17      	ldr	r3, [pc, #92]	; (8006618 <xTaskIncrementTick+0x168>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065be:	4915      	ldr	r1, [pc, #84]	; (8006614 <xTaskIncrementTick+0x164>)
 80065c0:	4613      	mov	r3, r2
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	4413      	add	r3, r2
 80065c6:	009b      	lsls	r3, r3, #2
 80065c8:	440b      	add	r3, r1
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d901      	bls.n	80065d4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80065d0:	2301      	movs	r3, #1
 80065d2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80065d4:	4b11      	ldr	r3, [pc, #68]	; (800661c <xTaskIncrementTick+0x16c>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d007      	beq.n	80065ec <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80065dc:	2301      	movs	r3, #1
 80065de:	617b      	str	r3, [r7, #20]
 80065e0:	e004      	b.n	80065ec <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80065e2:	4b0f      	ldr	r3, [pc, #60]	; (8006620 <xTaskIncrementTick+0x170>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	3301      	adds	r3, #1
 80065e8:	4a0d      	ldr	r2, [pc, #52]	; (8006620 <xTaskIncrementTick+0x170>)
 80065ea:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80065ec:	697b      	ldr	r3, [r7, #20]
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3718      	adds	r7, #24
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	bf00      	nop
 80065f8:	20000eec 	.word	0x20000eec
 80065fc:	20000ec8 	.word	0x20000ec8
 8006600:	20000e7c 	.word	0x20000e7c
 8006604:	20000e80 	.word	0x20000e80
 8006608:	20000edc 	.word	0x20000edc
 800660c:	20000ee4 	.word	0x20000ee4
 8006610:	20000ecc 	.word	0x20000ecc
 8006614:	200009f4 	.word	0x200009f4
 8006618:	200009f0 	.word	0x200009f0
 800661c:	20000ed8 	.word	0x20000ed8
 8006620:	20000ed4 	.word	0x20000ed4

08006624 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006624:	b480      	push	{r7}
 8006626:	b085      	sub	sp, #20
 8006628:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800662a:	4b2a      	ldr	r3, [pc, #168]	; (80066d4 <vTaskSwitchContext+0xb0>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d003      	beq.n	800663a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006632:	4b29      	ldr	r3, [pc, #164]	; (80066d8 <vTaskSwitchContext+0xb4>)
 8006634:	2201      	movs	r2, #1
 8006636:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006638:	e046      	b.n	80066c8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800663a:	4b27      	ldr	r3, [pc, #156]	; (80066d8 <vTaskSwitchContext+0xb4>)
 800663c:	2200      	movs	r2, #0
 800663e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006640:	4b26      	ldr	r3, [pc, #152]	; (80066dc <vTaskSwitchContext+0xb8>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	60fb      	str	r3, [r7, #12]
 8006646:	e010      	b.n	800666a <vTaskSwitchContext+0x46>
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d10a      	bne.n	8006664 <vTaskSwitchContext+0x40>
	__asm volatile
 800664e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006652:	f383 8811 	msr	BASEPRI, r3
 8006656:	f3bf 8f6f 	isb	sy
 800665a:	f3bf 8f4f 	dsb	sy
 800665e:	607b      	str	r3, [r7, #4]
}
 8006660:	bf00      	nop
 8006662:	e7fe      	b.n	8006662 <vTaskSwitchContext+0x3e>
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	3b01      	subs	r3, #1
 8006668:	60fb      	str	r3, [r7, #12]
 800666a:	491d      	ldr	r1, [pc, #116]	; (80066e0 <vTaskSwitchContext+0xbc>)
 800666c:	68fa      	ldr	r2, [r7, #12]
 800666e:	4613      	mov	r3, r2
 8006670:	009b      	lsls	r3, r3, #2
 8006672:	4413      	add	r3, r2
 8006674:	009b      	lsls	r3, r3, #2
 8006676:	440b      	add	r3, r1
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d0e4      	beq.n	8006648 <vTaskSwitchContext+0x24>
 800667e:	68fa      	ldr	r2, [r7, #12]
 8006680:	4613      	mov	r3, r2
 8006682:	009b      	lsls	r3, r3, #2
 8006684:	4413      	add	r3, r2
 8006686:	009b      	lsls	r3, r3, #2
 8006688:	4a15      	ldr	r2, [pc, #84]	; (80066e0 <vTaskSwitchContext+0xbc>)
 800668a:	4413      	add	r3, r2
 800668c:	60bb      	str	r3, [r7, #8]
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	685a      	ldr	r2, [r3, #4]
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	605a      	str	r2, [r3, #4]
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	685a      	ldr	r2, [r3, #4]
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	3308      	adds	r3, #8
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d104      	bne.n	80066ae <vTaskSwitchContext+0x8a>
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	685a      	ldr	r2, [r3, #4]
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	605a      	str	r2, [r3, #4]
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	68db      	ldr	r3, [r3, #12]
 80066b4:	4a0b      	ldr	r2, [pc, #44]	; (80066e4 <vTaskSwitchContext+0xc0>)
 80066b6:	6013      	str	r3, [r2, #0]
 80066b8:	4a08      	ldr	r2, [pc, #32]	; (80066dc <vTaskSwitchContext+0xb8>)
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80066be:	4b09      	ldr	r3, [pc, #36]	; (80066e4 <vTaskSwitchContext+0xc0>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	3354      	adds	r3, #84	; 0x54
 80066c4:	4a08      	ldr	r2, [pc, #32]	; (80066e8 <vTaskSwitchContext+0xc4>)
 80066c6:	6013      	str	r3, [r2, #0]
}
 80066c8:	bf00      	nop
 80066ca:	3714      	adds	r7, #20
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr
 80066d4:	20000eec 	.word	0x20000eec
 80066d8:	20000ed8 	.word	0x20000ed8
 80066dc:	20000ecc 	.word	0x20000ecc
 80066e0:	200009f4 	.word	0x200009f4
 80066e4:	200009f0 	.word	0x200009f0
 80066e8:	20000068 	.word	0x20000068

080066ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b084      	sub	sp, #16
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
 80066f4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d10a      	bne.n	8006712 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80066fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006700:	f383 8811 	msr	BASEPRI, r3
 8006704:	f3bf 8f6f 	isb	sy
 8006708:	f3bf 8f4f 	dsb	sy
 800670c:	60fb      	str	r3, [r7, #12]
}
 800670e:	bf00      	nop
 8006710:	e7fe      	b.n	8006710 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006712:	4b07      	ldr	r3, [pc, #28]	; (8006730 <vTaskPlaceOnEventList+0x44>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	3318      	adds	r3, #24
 8006718:	4619      	mov	r1, r3
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f7fe fe27 	bl	800536e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006720:	2101      	movs	r1, #1
 8006722:	6838      	ldr	r0, [r7, #0]
 8006724:	f000 fa80 	bl	8006c28 <prvAddCurrentTaskToDelayedList>
}
 8006728:	bf00      	nop
 800672a:	3710      	adds	r7, #16
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}
 8006730:	200009f0 	.word	0x200009f0

08006734 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006734:	b580      	push	{r7, lr}
 8006736:	b086      	sub	sp, #24
 8006738:	af00      	add	r7, sp, #0
 800673a:	60f8      	str	r0, [r7, #12]
 800673c:	60b9      	str	r1, [r7, #8]
 800673e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d10a      	bne.n	800675c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800674a:	f383 8811 	msr	BASEPRI, r3
 800674e:	f3bf 8f6f 	isb	sy
 8006752:	f3bf 8f4f 	dsb	sy
 8006756:	617b      	str	r3, [r7, #20]
}
 8006758:	bf00      	nop
 800675a:	e7fe      	b.n	800675a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800675c:	4b0a      	ldr	r3, [pc, #40]	; (8006788 <vTaskPlaceOnEventListRestricted+0x54>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	3318      	adds	r3, #24
 8006762:	4619      	mov	r1, r3
 8006764:	68f8      	ldr	r0, [r7, #12]
 8006766:	f7fe fdde 	bl	8005326 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d002      	beq.n	8006776 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006770:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006774:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006776:	6879      	ldr	r1, [r7, #4]
 8006778:	68b8      	ldr	r0, [r7, #8]
 800677a:	f000 fa55 	bl	8006c28 <prvAddCurrentTaskToDelayedList>
	}
 800677e:	bf00      	nop
 8006780:	3718      	adds	r7, #24
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}
 8006786:	bf00      	nop
 8006788:	200009f0 	.word	0x200009f0

0800678c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b086      	sub	sp, #24
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	68db      	ldr	r3, [r3, #12]
 8006798:	68db      	ldr	r3, [r3, #12]
 800679a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d10a      	bne.n	80067b8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80067a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a6:	f383 8811 	msr	BASEPRI, r3
 80067aa:	f3bf 8f6f 	isb	sy
 80067ae:	f3bf 8f4f 	dsb	sy
 80067b2:	60fb      	str	r3, [r7, #12]
}
 80067b4:	bf00      	nop
 80067b6:	e7fe      	b.n	80067b6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	3318      	adds	r3, #24
 80067bc:	4618      	mov	r0, r3
 80067be:	f7fe fe0f 	bl	80053e0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80067c2:	4b1e      	ldr	r3, [pc, #120]	; (800683c <xTaskRemoveFromEventList+0xb0>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d11d      	bne.n	8006806 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	3304      	adds	r3, #4
 80067ce:	4618      	mov	r0, r3
 80067d0:	f7fe fe06 	bl	80053e0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067d8:	4b19      	ldr	r3, [pc, #100]	; (8006840 <xTaskRemoveFromEventList+0xb4>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	429a      	cmp	r2, r3
 80067de:	d903      	bls.n	80067e8 <xTaskRemoveFromEventList+0x5c>
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e4:	4a16      	ldr	r2, [pc, #88]	; (8006840 <xTaskRemoveFromEventList+0xb4>)
 80067e6:	6013      	str	r3, [r2, #0]
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067ec:	4613      	mov	r3, r2
 80067ee:	009b      	lsls	r3, r3, #2
 80067f0:	4413      	add	r3, r2
 80067f2:	009b      	lsls	r3, r3, #2
 80067f4:	4a13      	ldr	r2, [pc, #76]	; (8006844 <xTaskRemoveFromEventList+0xb8>)
 80067f6:	441a      	add	r2, r3
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	3304      	adds	r3, #4
 80067fc:	4619      	mov	r1, r3
 80067fe:	4610      	mov	r0, r2
 8006800:	f7fe fd91 	bl	8005326 <vListInsertEnd>
 8006804:	e005      	b.n	8006812 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	3318      	adds	r3, #24
 800680a:	4619      	mov	r1, r3
 800680c:	480e      	ldr	r0, [pc, #56]	; (8006848 <xTaskRemoveFromEventList+0xbc>)
 800680e:	f7fe fd8a 	bl	8005326 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006816:	4b0d      	ldr	r3, [pc, #52]	; (800684c <xTaskRemoveFromEventList+0xc0>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800681c:	429a      	cmp	r2, r3
 800681e:	d905      	bls.n	800682c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006820:	2301      	movs	r3, #1
 8006822:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006824:	4b0a      	ldr	r3, [pc, #40]	; (8006850 <xTaskRemoveFromEventList+0xc4>)
 8006826:	2201      	movs	r2, #1
 8006828:	601a      	str	r2, [r3, #0]
 800682a:	e001      	b.n	8006830 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800682c:	2300      	movs	r3, #0
 800682e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006830:	697b      	ldr	r3, [r7, #20]
}
 8006832:	4618      	mov	r0, r3
 8006834:	3718      	adds	r7, #24
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}
 800683a:	bf00      	nop
 800683c:	20000eec 	.word	0x20000eec
 8006840:	20000ecc 	.word	0x20000ecc
 8006844:	200009f4 	.word	0x200009f4
 8006848:	20000e84 	.word	0x20000e84
 800684c:	200009f0 	.word	0x200009f0
 8006850:	20000ed8 	.word	0x20000ed8

08006854 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006854:	b480      	push	{r7}
 8006856:	b083      	sub	sp, #12
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800685c:	4b06      	ldr	r3, [pc, #24]	; (8006878 <vTaskInternalSetTimeOutState+0x24>)
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006864:	4b05      	ldr	r3, [pc, #20]	; (800687c <vTaskInternalSetTimeOutState+0x28>)
 8006866:	681a      	ldr	r2, [r3, #0]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	605a      	str	r2, [r3, #4]
}
 800686c:	bf00      	nop
 800686e:	370c      	adds	r7, #12
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr
 8006878:	20000edc 	.word	0x20000edc
 800687c:	20000ec8 	.word	0x20000ec8

08006880 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b088      	sub	sp, #32
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d10a      	bne.n	80068a6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006894:	f383 8811 	msr	BASEPRI, r3
 8006898:	f3bf 8f6f 	isb	sy
 800689c:	f3bf 8f4f 	dsb	sy
 80068a0:	613b      	str	r3, [r7, #16]
}
 80068a2:	bf00      	nop
 80068a4:	e7fe      	b.n	80068a4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d10a      	bne.n	80068c2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80068ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b0:	f383 8811 	msr	BASEPRI, r3
 80068b4:	f3bf 8f6f 	isb	sy
 80068b8:	f3bf 8f4f 	dsb	sy
 80068bc:	60fb      	str	r3, [r7, #12]
}
 80068be:	bf00      	nop
 80068c0:	e7fe      	b.n	80068c0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80068c2:	f000 fe7f 	bl	80075c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80068c6:	4b1d      	ldr	r3, [pc, #116]	; (800693c <xTaskCheckForTimeOut+0xbc>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	69ba      	ldr	r2, [r7, #24]
 80068d2:	1ad3      	subs	r3, r2, r3
 80068d4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068de:	d102      	bne.n	80068e6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80068e0:	2300      	movs	r3, #0
 80068e2:	61fb      	str	r3, [r7, #28]
 80068e4:	e023      	b.n	800692e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	4b15      	ldr	r3, [pc, #84]	; (8006940 <xTaskCheckForTimeOut+0xc0>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	429a      	cmp	r2, r3
 80068f0:	d007      	beq.n	8006902 <xTaskCheckForTimeOut+0x82>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	69ba      	ldr	r2, [r7, #24]
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d302      	bcc.n	8006902 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80068fc:	2301      	movs	r3, #1
 80068fe:	61fb      	str	r3, [r7, #28]
 8006900:	e015      	b.n	800692e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	697a      	ldr	r2, [r7, #20]
 8006908:	429a      	cmp	r2, r3
 800690a:	d20b      	bcs.n	8006924 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	1ad2      	subs	r2, r2, r3
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f7ff ff9b 	bl	8006854 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800691e:	2300      	movs	r3, #0
 8006920:	61fb      	str	r3, [r7, #28]
 8006922:	e004      	b.n	800692e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	2200      	movs	r2, #0
 8006928:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800692a:	2301      	movs	r3, #1
 800692c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800692e:	f000 fe79 	bl	8007624 <vPortExitCritical>

	return xReturn;
 8006932:	69fb      	ldr	r3, [r7, #28]
}
 8006934:	4618      	mov	r0, r3
 8006936:	3720      	adds	r7, #32
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}
 800693c:	20000ec8 	.word	0x20000ec8
 8006940:	20000edc 	.word	0x20000edc

08006944 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006944:	b480      	push	{r7}
 8006946:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006948:	4b03      	ldr	r3, [pc, #12]	; (8006958 <vTaskMissedYield+0x14>)
 800694a:	2201      	movs	r2, #1
 800694c:	601a      	str	r2, [r3, #0]
}
 800694e:	bf00      	nop
 8006950:	46bd      	mov	sp, r7
 8006952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006956:	4770      	bx	lr
 8006958:	20000ed8 	.word	0x20000ed8

0800695c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b082      	sub	sp, #8
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006964:	f000 f852 	bl	8006a0c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006968:	4b06      	ldr	r3, [pc, #24]	; (8006984 <prvIdleTask+0x28>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	2b01      	cmp	r3, #1
 800696e:	d9f9      	bls.n	8006964 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006970:	4b05      	ldr	r3, [pc, #20]	; (8006988 <prvIdleTask+0x2c>)
 8006972:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006976:	601a      	str	r2, [r3, #0]
 8006978:	f3bf 8f4f 	dsb	sy
 800697c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006980:	e7f0      	b.n	8006964 <prvIdleTask+0x8>
 8006982:	bf00      	nop
 8006984:	200009f4 	.word	0x200009f4
 8006988:	e000ed04 	.word	0xe000ed04

0800698c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b082      	sub	sp, #8
 8006990:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006992:	2300      	movs	r3, #0
 8006994:	607b      	str	r3, [r7, #4]
 8006996:	e00c      	b.n	80069b2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	4613      	mov	r3, r2
 800699c:	009b      	lsls	r3, r3, #2
 800699e:	4413      	add	r3, r2
 80069a0:	009b      	lsls	r3, r3, #2
 80069a2:	4a12      	ldr	r2, [pc, #72]	; (80069ec <prvInitialiseTaskLists+0x60>)
 80069a4:	4413      	add	r3, r2
 80069a6:	4618      	mov	r0, r3
 80069a8:	f7fe fc90 	bl	80052cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	3301      	adds	r3, #1
 80069b0:	607b      	str	r3, [r7, #4]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2b37      	cmp	r3, #55	; 0x37
 80069b6:	d9ef      	bls.n	8006998 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80069b8:	480d      	ldr	r0, [pc, #52]	; (80069f0 <prvInitialiseTaskLists+0x64>)
 80069ba:	f7fe fc87 	bl	80052cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80069be:	480d      	ldr	r0, [pc, #52]	; (80069f4 <prvInitialiseTaskLists+0x68>)
 80069c0:	f7fe fc84 	bl	80052cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80069c4:	480c      	ldr	r0, [pc, #48]	; (80069f8 <prvInitialiseTaskLists+0x6c>)
 80069c6:	f7fe fc81 	bl	80052cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80069ca:	480c      	ldr	r0, [pc, #48]	; (80069fc <prvInitialiseTaskLists+0x70>)
 80069cc:	f7fe fc7e 	bl	80052cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80069d0:	480b      	ldr	r0, [pc, #44]	; (8006a00 <prvInitialiseTaskLists+0x74>)
 80069d2:	f7fe fc7b 	bl	80052cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80069d6:	4b0b      	ldr	r3, [pc, #44]	; (8006a04 <prvInitialiseTaskLists+0x78>)
 80069d8:	4a05      	ldr	r2, [pc, #20]	; (80069f0 <prvInitialiseTaskLists+0x64>)
 80069da:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80069dc:	4b0a      	ldr	r3, [pc, #40]	; (8006a08 <prvInitialiseTaskLists+0x7c>)
 80069de:	4a05      	ldr	r2, [pc, #20]	; (80069f4 <prvInitialiseTaskLists+0x68>)
 80069e0:	601a      	str	r2, [r3, #0]
}
 80069e2:	bf00      	nop
 80069e4:	3708      	adds	r7, #8
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}
 80069ea:	bf00      	nop
 80069ec:	200009f4 	.word	0x200009f4
 80069f0:	20000e54 	.word	0x20000e54
 80069f4:	20000e68 	.word	0x20000e68
 80069f8:	20000e84 	.word	0x20000e84
 80069fc:	20000e98 	.word	0x20000e98
 8006a00:	20000eb0 	.word	0x20000eb0
 8006a04:	20000e7c 	.word	0x20000e7c
 8006a08:	20000e80 	.word	0x20000e80

08006a0c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b082      	sub	sp, #8
 8006a10:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a12:	e019      	b.n	8006a48 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006a14:	f000 fdd6 	bl	80075c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a18:	4b10      	ldr	r3, [pc, #64]	; (8006a5c <prvCheckTasksWaitingTermination+0x50>)
 8006a1a:	68db      	ldr	r3, [r3, #12]
 8006a1c:	68db      	ldr	r3, [r3, #12]
 8006a1e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	3304      	adds	r3, #4
 8006a24:	4618      	mov	r0, r3
 8006a26:	f7fe fcdb 	bl	80053e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006a2a:	4b0d      	ldr	r3, [pc, #52]	; (8006a60 <prvCheckTasksWaitingTermination+0x54>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	3b01      	subs	r3, #1
 8006a30:	4a0b      	ldr	r2, [pc, #44]	; (8006a60 <prvCheckTasksWaitingTermination+0x54>)
 8006a32:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006a34:	4b0b      	ldr	r3, [pc, #44]	; (8006a64 <prvCheckTasksWaitingTermination+0x58>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	3b01      	subs	r3, #1
 8006a3a:	4a0a      	ldr	r2, [pc, #40]	; (8006a64 <prvCheckTasksWaitingTermination+0x58>)
 8006a3c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006a3e:	f000 fdf1 	bl	8007624 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f000 f810 	bl	8006a68 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a48:	4b06      	ldr	r3, [pc, #24]	; (8006a64 <prvCheckTasksWaitingTermination+0x58>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d1e1      	bne.n	8006a14 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006a50:	bf00      	nop
 8006a52:	bf00      	nop
 8006a54:	3708      	adds	r7, #8
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}
 8006a5a:	bf00      	nop
 8006a5c:	20000e98 	.word	0x20000e98
 8006a60:	20000ec4 	.word	0x20000ec4
 8006a64:	20000eac 	.word	0x20000eac

08006a68 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b084      	sub	sp, #16
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	3354      	adds	r3, #84	; 0x54
 8006a74:	4618      	mov	r0, r3
 8006a76:	f001 f9e9 	bl	8007e4c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d108      	bne.n	8006a96 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f000 ff89 	bl	80079a0 <vPortFree>
				vPortFree( pxTCB );
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f000 ff86 	bl	80079a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006a94:	e018      	b.n	8006ac8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	d103      	bne.n	8006aa8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f000 ff7d 	bl	80079a0 <vPortFree>
	}
 8006aa6:	e00f      	b.n	8006ac8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006aae:	2b02      	cmp	r3, #2
 8006ab0:	d00a      	beq.n	8006ac8 <prvDeleteTCB+0x60>
	__asm volatile
 8006ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab6:	f383 8811 	msr	BASEPRI, r3
 8006aba:	f3bf 8f6f 	isb	sy
 8006abe:	f3bf 8f4f 	dsb	sy
 8006ac2:	60fb      	str	r3, [r7, #12]
}
 8006ac4:	bf00      	nop
 8006ac6:	e7fe      	b.n	8006ac6 <prvDeleteTCB+0x5e>
	}
 8006ac8:	bf00      	nop
 8006aca:	3710      	adds	r7, #16
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b083      	sub	sp, #12
 8006ad4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ad6:	4b0c      	ldr	r3, [pc, #48]	; (8006b08 <prvResetNextTaskUnblockTime+0x38>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d104      	bne.n	8006aea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006ae0:	4b0a      	ldr	r3, [pc, #40]	; (8006b0c <prvResetNextTaskUnblockTime+0x3c>)
 8006ae2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ae6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006ae8:	e008      	b.n	8006afc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006aea:	4b07      	ldr	r3, [pc, #28]	; (8006b08 <prvResetNextTaskUnblockTime+0x38>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	68db      	ldr	r3, [r3, #12]
 8006af0:	68db      	ldr	r3, [r3, #12]
 8006af2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	4a04      	ldr	r2, [pc, #16]	; (8006b0c <prvResetNextTaskUnblockTime+0x3c>)
 8006afa:	6013      	str	r3, [r2, #0]
}
 8006afc:	bf00      	nop
 8006afe:	370c      	adds	r7, #12
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr
 8006b08:	20000e7c 	.word	0x20000e7c
 8006b0c:	20000ee4 	.word	0x20000ee4

08006b10 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006b10:	b480      	push	{r7}
 8006b12:	b083      	sub	sp, #12
 8006b14:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006b16:	4b0b      	ldr	r3, [pc, #44]	; (8006b44 <xTaskGetSchedulerState+0x34>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d102      	bne.n	8006b24 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	607b      	str	r3, [r7, #4]
 8006b22:	e008      	b.n	8006b36 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b24:	4b08      	ldr	r3, [pc, #32]	; (8006b48 <xTaskGetSchedulerState+0x38>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d102      	bne.n	8006b32 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006b2c:	2302      	movs	r3, #2
 8006b2e:	607b      	str	r3, [r7, #4]
 8006b30:	e001      	b.n	8006b36 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006b32:	2300      	movs	r3, #0
 8006b34:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006b36:	687b      	ldr	r3, [r7, #4]
	}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	370c      	adds	r7, #12
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr
 8006b44:	20000ed0 	.word	0x20000ed0
 8006b48:	20000eec 	.word	0x20000eec

08006b4c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b086      	sub	sp, #24
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d056      	beq.n	8006c10 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006b62:	4b2e      	ldr	r3, [pc, #184]	; (8006c1c <xTaskPriorityDisinherit+0xd0>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	693a      	ldr	r2, [r7, #16]
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d00a      	beq.n	8006b82 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b70:	f383 8811 	msr	BASEPRI, r3
 8006b74:	f3bf 8f6f 	isb	sy
 8006b78:	f3bf 8f4f 	dsb	sy
 8006b7c:	60fb      	str	r3, [r7, #12]
}
 8006b7e:	bf00      	nop
 8006b80:	e7fe      	b.n	8006b80 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d10a      	bne.n	8006ba0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b8e:	f383 8811 	msr	BASEPRI, r3
 8006b92:	f3bf 8f6f 	isb	sy
 8006b96:	f3bf 8f4f 	dsb	sy
 8006b9a:	60bb      	str	r3, [r7, #8]
}
 8006b9c:	bf00      	nop
 8006b9e:	e7fe      	b.n	8006b9e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ba4:	1e5a      	subs	r2, r3, #1
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d02c      	beq.n	8006c10 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d128      	bne.n	8006c10 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	3304      	adds	r3, #4
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f7fe fc0c 	bl	80053e0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bd4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006be0:	4b0f      	ldr	r3, [pc, #60]	; (8006c20 <xTaskPriorityDisinherit+0xd4>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d903      	bls.n	8006bf0 <xTaskPriorityDisinherit+0xa4>
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bec:	4a0c      	ldr	r2, [pc, #48]	; (8006c20 <xTaskPriorityDisinherit+0xd4>)
 8006bee:	6013      	str	r3, [r2, #0]
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bf4:	4613      	mov	r3, r2
 8006bf6:	009b      	lsls	r3, r3, #2
 8006bf8:	4413      	add	r3, r2
 8006bfa:	009b      	lsls	r3, r3, #2
 8006bfc:	4a09      	ldr	r2, [pc, #36]	; (8006c24 <xTaskPriorityDisinherit+0xd8>)
 8006bfe:	441a      	add	r2, r3
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	3304      	adds	r3, #4
 8006c04:	4619      	mov	r1, r3
 8006c06:	4610      	mov	r0, r2
 8006c08:	f7fe fb8d 	bl	8005326 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006c10:	697b      	ldr	r3, [r7, #20]
	}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3718      	adds	r7, #24
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}
 8006c1a:	bf00      	nop
 8006c1c:	200009f0 	.word	0x200009f0
 8006c20:	20000ecc 	.word	0x20000ecc
 8006c24:	200009f4 	.word	0x200009f4

08006c28 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b084      	sub	sp, #16
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006c32:	4b21      	ldr	r3, [pc, #132]	; (8006cb8 <prvAddCurrentTaskToDelayedList+0x90>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c38:	4b20      	ldr	r3, [pc, #128]	; (8006cbc <prvAddCurrentTaskToDelayedList+0x94>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	3304      	adds	r3, #4
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f7fe fbce 	bl	80053e0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c4a:	d10a      	bne.n	8006c62 <prvAddCurrentTaskToDelayedList+0x3a>
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d007      	beq.n	8006c62 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c52:	4b1a      	ldr	r3, [pc, #104]	; (8006cbc <prvAddCurrentTaskToDelayedList+0x94>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	3304      	adds	r3, #4
 8006c58:	4619      	mov	r1, r3
 8006c5a:	4819      	ldr	r0, [pc, #100]	; (8006cc0 <prvAddCurrentTaskToDelayedList+0x98>)
 8006c5c:	f7fe fb63 	bl	8005326 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006c60:	e026      	b.n	8006cb0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006c62:	68fa      	ldr	r2, [r7, #12]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	4413      	add	r3, r2
 8006c68:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006c6a:	4b14      	ldr	r3, [pc, #80]	; (8006cbc <prvAddCurrentTaskToDelayedList+0x94>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	68ba      	ldr	r2, [r7, #8]
 8006c70:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006c72:	68ba      	ldr	r2, [r7, #8]
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d209      	bcs.n	8006c8e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c7a:	4b12      	ldr	r3, [pc, #72]	; (8006cc4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	4b0f      	ldr	r3, [pc, #60]	; (8006cbc <prvAddCurrentTaskToDelayedList+0x94>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	3304      	adds	r3, #4
 8006c84:	4619      	mov	r1, r3
 8006c86:	4610      	mov	r0, r2
 8006c88:	f7fe fb71 	bl	800536e <vListInsert>
}
 8006c8c:	e010      	b.n	8006cb0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c8e:	4b0e      	ldr	r3, [pc, #56]	; (8006cc8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006c90:	681a      	ldr	r2, [r3, #0]
 8006c92:	4b0a      	ldr	r3, [pc, #40]	; (8006cbc <prvAddCurrentTaskToDelayedList+0x94>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	3304      	adds	r3, #4
 8006c98:	4619      	mov	r1, r3
 8006c9a:	4610      	mov	r0, r2
 8006c9c:	f7fe fb67 	bl	800536e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006ca0:	4b0a      	ldr	r3, [pc, #40]	; (8006ccc <prvAddCurrentTaskToDelayedList+0xa4>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	68ba      	ldr	r2, [r7, #8]
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d202      	bcs.n	8006cb0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006caa:	4a08      	ldr	r2, [pc, #32]	; (8006ccc <prvAddCurrentTaskToDelayedList+0xa4>)
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	6013      	str	r3, [r2, #0]
}
 8006cb0:	bf00      	nop
 8006cb2:	3710      	adds	r7, #16
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}
 8006cb8:	20000ec8 	.word	0x20000ec8
 8006cbc:	200009f0 	.word	0x200009f0
 8006cc0:	20000eb0 	.word	0x20000eb0
 8006cc4:	20000e80 	.word	0x20000e80
 8006cc8:	20000e7c 	.word	0x20000e7c
 8006ccc:	20000ee4 	.word	0x20000ee4

08006cd0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b08a      	sub	sp, #40	; 0x28
 8006cd4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006cda:	f000 fb07 	bl	80072ec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006cde:	4b1c      	ldr	r3, [pc, #112]	; (8006d50 <xTimerCreateTimerTask+0x80>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d021      	beq.n	8006d2a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006cea:	2300      	movs	r3, #0
 8006cec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006cee:	1d3a      	adds	r2, r7, #4
 8006cf0:	f107 0108 	add.w	r1, r7, #8
 8006cf4:	f107 030c 	add.w	r3, r7, #12
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f7fe facd 	bl	8005298 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006cfe:	6879      	ldr	r1, [r7, #4]
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	68fa      	ldr	r2, [r7, #12]
 8006d04:	9202      	str	r2, [sp, #8]
 8006d06:	9301      	str	r3, [sp, #4]
 8006d08:	2302      	movs	r3, #2
 8006d0a:	9300      	str	r3, [sp, #0]
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	460a      	mov	r2, r1
 8006d10:	4910      	ldr	r1, [pc, #64]	; (8006d54 <xTimerCreateTimerTask+0x84>)
 8006d12:	4811      	ldr	r0, [pc, #68]	; (8006d58 <xTimerCreateTimerTask+0x88>)
 8006d14:	f7ff f8b4 	bl	8005e80 <xTaskCreateStatic>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	4a10      	ldr	r2, [pc, #64]	; (8006d5c <xTimerCreateTimerTask+0x8c>)
 8006d1c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006d1e:	4b0f      	ldr	r3, [pc, #60]	; (8006d5c <xTimerCreateTimerTask+0x8c>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d001      	beq.n	8006d2a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006d26:	2301      	movs	r3, #1
 8006d28:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d10a      	bne.n	8006d46 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d34:	f383 8811 	msr	BASEPRI, r3
 8006d38:	f3bf 8f6f 	isb	sy
 8006d3c:	f3bf 8f4f 	dsb	sy
 8006d40:	613b      	str	r3, [r7, #16]
}
 8006d42:	bf00      	nop
 8006d44:	e7fe      	b.n	8006d44 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006d46:	697b      	ldr	r3, [r7, #20]
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3718      	adds	r7, #24
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}
 8006d50:	20000f20 	.word	0x20000f20
 8006d54:	08008c70 	.word	0x08008c70
 8006d58:	08006e95 	.word	0x08006e95
 8006d5c:	20000f24 	.word	0x20000f24

08006d60 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b08a      	sub	sp, #40	; 0x28
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	60f8      	str	r0, [r7, #12]
 8006d68:	60b9      	str	r1, [r7, #8]
 8006d6a:	607a      	str	r2, [r7, #4]
 8006d6c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d10a      	bne.n	8006d8e <xTimerGenericCommand+0x2e>
	__asm volatile
 8006d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d7c:	f383 8811 	msr	BASEPRI, r3
 8006d80:	f3bf 8f6f 	isb	sy
 8006d84:	f3bf 8f4f 	dsb	sy
 8006d88:	623b      	str	r3, [r7, #32]
}
 8006d8a:	bf00      	nop
 8006d8c:	e7fe      	b.n	8006d8c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006d8e:	4b1a      	ldr	r3, [pc, #104]	; (8006df8 <xTimerGenericCommand+0x98>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d02a      	beq.n	8006dec <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	2b05      	cmp	r3, #5
 8006da6:	dc18      	bgt.n	8006dda <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006da8:	f7ff feb2 	bl	8006b10 <xTaskGetSchedulerState>
 8006dac:	4603      	mov	r3, r0
 8006dae:	2b02      	cmp	r3, #2
 8006db0:	d109      	bne.n	8006dc6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006db2:	4b11      	ldr	r3, [pc, #68]	; (8006df8 <xTimerGenericCommand+0x98>)
 8006db4:	6818      	ldr	r0, [r3, #0]
 8006db6:	f107 0110 	add.w	r1, r7, #16
 8006dba:	2300      	movs	r3, #0
 8006dbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dbe:	f7fe fc77 	bl	80056b0 <xQueueGenericSend>
 8006dc2:	6278      	str	r0, [r7, #36]	; 0x24
 8006dc4:	e012      	b.n	8006dec <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006dc6:	4b0c      	ldr	r3, [pc, #48]	; (8006df8 <xTimerGenericCommand+0x98>)
 8006dc8:	6818      	ldr	r0, [r3, #0]
 8006dca:	f107 0110 	add.w	r1, r7, #16
 8006dce:	2300      	movs	r3, #0
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	f7fe fc6d 	bl	80056b0 <xQueueGenericSend>
 8006dd6:	6278      	str	r0, [r7, #36]	; 0x24
 8006dd8:	e008      	b.n	8006dec <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006dda:	4b07      	ldr	r3, [pc, #28]	; (8006df8 <xTimerGenericCommand+0x98>)
 8006ddc:	6818      	ldr	r0, [r3, #0]
 8006dde:	f107 0110 	add.w	r1, r7, #16
 8006de2:	2300      	movs	r3, #0
 8006de4:	683a      	ldr	r2, [r7, #0]
 8006de6:	f7fe fd61 	bl	80058ac <xQueueGenericSendFromISR>
 8006dea:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3728      	adds	r7, #40	; 0x28
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	bf00      	nop
 8006df8:	20000f20 	.word	0x20000f20

08006dfc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b088      	sub	sp, #32
 8006e00:	af02      	add	r7, sp, #8
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e06:	4b22      	ldr	r3, [pc, #136]	; (8006e90 <prvProcessExpiredTimer+0x94>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	68db      	ldr	r3, [r3, #12]
 8006e0c:	68db      	ldr	r3, [r3, #12]
 8006e0e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	3304      	adds	r3, #4
 8006e14:	4618      	mov	r0, r3
 8006e16:	f7fe fae3 	bl	80053e0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e20:	f003 0304 	and.w	r3, r3, #4
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d022      	beq.n	8006e6e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	699a      	ldr	r2, [r3, #24]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	18d1      	adds	r1, r2, r3
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	683a      	ldr	r2, [r7, #0]
 8006e34:	6978      	ldr	r0, [r7, #20]
 8006e36:	f000 f8d1 	bl	8006fdc <prvInsertTimerInActiveList>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d01f      	beq.n	8006e80 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006e40:	2300      	movs	r3, #0
 8006e42:	9300      	str	r3, [sp, #0]
 8006e44:	2300      	movs	r3, #0
 8006e46:	687a      	ldr	r2, [r7, #4]
 8006e48:	2100      	movs	r1, #0
 8006e4a:	6978      	ldr	r0, [r7, #20]
 8006e4c:	f7ff ff88 	bl	8006d60 <xTimerGenericCommand>
 8006e50:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d113      	bne.n	8006e80 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e5c:	f383 8811 	msr	BASEPRI, r3
 8006e60:	f3bf 8f6f 	isb	sy
 8006e64:	f3bf 8f4f 	dsb	sy
 8006e68:	60fb      	str	r3, [r7, #12]
}
 8006e6a:	bf00      	nop
 8006e6c:	e7fe      	b.n	8006e6c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e74:	f023 0301 	bic.w	r3, r3, #1
 8006e78:	b2da      	uxtb	r2, r3
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	6a1b      	ldr	r3, [r3, #32]
 8006e84:	6978      	ldr	r0, [r7, #20]
 8006e86:	4798      	blx	r3
}
 8006e88:	bf00      	nop
 8006e8a:	3718      	adds	r7, #24
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}
 8006e90:	20000f18 	.word	0x20000f18

08006e94 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b084      	sub	sp, #16
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006e9c:	f107 0308 	add.w	r3, r7, #8
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f000 f857 	bl	8006f54 <prvGetNextExpireTime>
 8006ea6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	4619      	mov	r1, r3
 8006eac:	68f8      	ldr	r0, [r7, #12]
 8006eae:	f000 f803 	bl	8006eb8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006eb2:	f000 f8d5 	bl	8007060 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006eb6:	e7f1      	b.n	8006e9c <prvTimerTask+0x8>

08006eb8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b084      	sub	sp, #16
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006ec2:	f7ff fa39 	bl	8006338 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006ec6:	f107 0308 	add.w	r3, r7, #8
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f000 f866 	bl	8006f9c <prvSampleTimeNow>
 8006ed0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d130      	bne.n	8006f3a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d10a      	bne.n	8006ef4 <prvProcessTimerOrBlockTask+0x3c>
 8006ede:	687a      	ldr	r2, [r7, #4]
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	429a      	cmp	r2, r3
 8006ee4:	d806      	bhi.n	8006ef4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006ee6:	f7ff fa35 	bl	8006354 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006eea:	68f9      	ldr	r1, [r7, #12]
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f7ff ff85 	bl	8006dfc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006ef2:	e024      	b.n	8006f3e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d008      	beq.n	8006f0c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006efa:	4b13      	ldr	r3, [pc, #76]	; (8006f48 <prvProcessTimerOrBlockTask+0x90>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d101      	bne.n	8006f08 <prvProcessTimerOrBlockTask+0x50>
 8006f04:	2301      	movs	r3, #1
 8006f06:	e000      	b.n	8006f0a <prvProcessTimerOrBlockTask+0x52>
 8006f08:	2300      	movs	r3, #0
 8006f0a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006f0c:	4b0f      	ldr	r3, [pc, #60]	; (8006f4c <prvProcessTimerOrBlockTask+0x94>)
 8006f0e:	6818      	ldr	r0, [r3, #0]
 8006f10:	687a      	ldr	r2, [r7, #4]
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	1ad3      	subs	r3, r2, r3
 8006f16:	683a      	ldr	r2, [r7, #0]
 8006f18:	4619      	mov	r1, r3
 8006f1a:	f7fe ff7d 	bl	8005e18 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006f1e:	f7ff fa19 	bl	8006354 <xTaskResumeAll>
 8006f22:	4603      	mov	r3, r0
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d10a      	bne.n	8006f3e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006f28:	4b09      	ldr	r3, [pc, #36]	; (8006f50 <prvProcessTimerOrBlockTask+0x98>)
 8006f2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f2e:	601a      	str	r2, [r3, #0]
 8006f30:	f3bf 8f4f 	dsb	sy
 8006f34:	f3bf 8f6f 	isb	sy
}
 8006f38:	e001      	b.n	8006f3e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006f3a:	f7ff fa0b 	bl	8006354 <xTaskResumeAll>
}
 8006f3e:	bf00      	nop
 8006f40:	3710      	adds	r7, #16
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}
 8006f46:	bf00      	nop
 8006f48:	20000f1c 	.word	0x20000f1c
 8006f4c:	20000f20 	.word	0x20000f20
 8006f50:	e000ed04 	.word	0xe000ed04

08006f54 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006f54:	b480      	push	{r7}
 8006f56:	b085      	sub	sp, #20
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006f5c:	4b0e      	ldr	r3, [pc, #56]	; (8006f98 <prvGetNextExpireTime+0x44>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d101      	bne.n	8006f6a <prvGetNextExpireTime+0x16>
 8006f66:	2201      	movs	r2, #1
 8006f68:	e000      	b.n	8006f6c <prvGetNextExpireTime+0x18>
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d105      	bne.n	8006f84 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006f78:	4b07      	ldr	r3, [pc, #28]	; (8006f98 <prvGetNextExpireTime+0x44>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	68db      	ldr	r3, [r3, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	60fb      	str	r3, [r7, #12]
 8006f82:	e001      	b.n	8006f88 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006f84:	2300      	movs	r3, #0
 8006f86:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006f88:	68fb      	ldr	r3, [r7, #12]
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3714      	adds	r7, #20
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f94:	4770      	bx	lr
 8006f96:	bf00      	nop
 8006f98:	20000f18 	.word	0x20000f18

08006f9c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b084      	sub	sp, #16
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006fa4:	f7ff fa74 	bl	8006490 <xTaskGetTickCount>
 8006fa8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006faa:	4b0b      	ldr	r3, [pc, #44]	; (8006fd8 <prvSampleTimeNow+0x3c>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	68fa      	ldr	r2, [r7, #12]
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d205      	bcs.n	8006fc0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006fb4:	f000 f936 	bl	8007224 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2201      	movs	r2, #1
 8006fbc:	601a      	str	r2, [r3, #0]
 8006fbe:	e002      	b.n	8006fc6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006fc6:	4a04      	ldr	r2, [pc, #16]	; (8006fd8 <prvSampleTimeNow+0x3c>)
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3710      	adds	r7, #16
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}
 8006fd6:	bf00      	nop
 8006fd8:	20000f28 	.word	0x20000f28

08006fdc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b086      	sub	sp, #24
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	60f8      	str	r0, [r7, #12]
 8006fe4:	60b9      	str	r1, [r7, #8]
 8006fe6:	607a      	str	r2, [r7, #4]
 8006fe8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006fea:	2300      	movs	r3, #0
 8006fec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	68ba      	ldr	r2, [r7, #8]
 8006ff2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	68fa      	ldr	r2, [r7, #12]
 8006ff8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006ffa:	68ba      	ldr	r2, [r7, #8]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	429a      	cmp	r2, r3
 8007000:	d812      	bhi.n	8007028 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007002:	687a      	ldr	r2, [r7, #4]
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	1ad2      	subs	r2, r2, r3
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	699b      	ldr	r3, [r3, #24]
 800700c:	429a      	cmp	r2, r3
 800700e:	d302      	bcc.n	8007016 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007010:	2301      	movs	r3, #1
 8007012:	617b      	str	r3, [r7, #20]
 8007014:	e01b      	b.n	800704e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007016:	4b10      	ldr	r3, [pc, #64]	; (8007058 <prvInsertTimerInActiveList+0x7c>)
 8007018:	681a      	ldr	r2, [r3, #0]
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	3304      	adds	r3, #4
 800701e:	4619      	mov	r1, r3
 8007020:	4610      	mov	r0, r2
 8007022:	f7fe f9a4 	bl	800536e <vListInsert>
 8007026:	e012      	b.n	800704e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007028:	687a      	ldr	r2, [r7, #4]
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	429a      	cmp	r2, r3
 800702e:	d206      	bcs.n	800703e <prvInsertTimerInActiveList+0x62>
 8007030:	68ba      	ldr	r2, [r7, #8]
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	429a      	cmp	r2, r3
 8007036:	d302      	bcc.n	800703e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007038:	2301      	movs	r3, #1
 800703a:	617b      	str	r3, [r7, #20]
 800703c:	e007      	b.n	800704e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800703e:	4b07      	ldr	r3, [pc, #28]	; (800705c <prvInsertTimerInActiveList+0x80>)
 8007040:	681a      	ldr	r2, [r3, #0]
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	3304      	adds	r3, #4
 8007046:	4619      	mov	r1, r3
 8007048:	4610      	mov	r0, r2
 800704a:	f7fe f990 	bl	800536e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800704e:	697b      	ldr	r3, [r7, #20]
}
 8007050:	4618      	mov	r0, r3
 8007052:	3718      	adds	r7, #24
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}
 8007058:	20000f1c 	.word	0x20000f1c
 800705c:	20000f18 	.word	0x20000f18

08007060 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b08e      	sub	sp, #56	; 0x38
 8007064:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007066:	e0ca      	b.n	80071fe <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2b00      	cmp	r3, #0
 800706c:	da18      	bge.n	80070a0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800706e:	1d3b      	adds	r3, r7, #4
 8007070:	3304      	adds	r3, #4
 8007072:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007076:	2b00      	cmp	r3, #0
 8007078:	d10a      	bne.n	8007090 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800707a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800707e:	f383 8811 	msr	BASEPRI, r3
 8007082:	f3bf 8f6f 	isb	sy
 8007086:	f3bf 8f4f 	dsb	sy
 800708a:	61fb      	str	r3, [r7, #28]
}
 800708c:	bf00      	nop
 800708e:	e7fe      	b.n	800708e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007096:	6850      	ldr	r0, [r2, #4]
 8007098:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800709a:	6892      	ldr	r2, [r2, #8]
 800709c:	4611      	mov	r1, r2
 800709e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	f2c0 80ab 	blt.w	80071fe <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80070ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ae:	695b      	ldr	r3, [r3, #20]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d004      	beq.n	80070be <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80070b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b6:	3304      	adds	r3, #4
 80070b8:	4618      	mov	r0, r3
 80070ba:	f7fe f991 	bl	80053e0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80070be:	463b      	mov	r3, r7
 80070c0:	4618      	mov	r0, r3
 80070c2:	f7ff ff6b 	bl	8006f9c <prvSampleTimeNow>
 80070c6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2b09      	cmp	r3, #9
 80070cc:	f200 8096 	bhi.w	80071fc <prvProcessReceivedCommands+0x19c>
 80070d0:	a201      	add	r2, pc, #4	; (adr r2, 80070d8 <prvProcessReceivedCommands+0x78>)
 80070d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070d6:	bf00      	nop
 80070d8:	08007101 	.word	0x08007101
 80070dc:	08007101 	.word	0x08007101
 80070e0:	08007101 	.word	0x08007101
 80070e4:	08007175 	.word	0x08007175
 80070e8:	08007189 	.word	0x08007189
 80070ec:	080071d3 	.word	0x080071d3
 80070f0:	08007101 	.word	0x08007101
 80070f4:	08007101 	.word	0x08007101
 80070f8:	08007175 	.word	0x08007175
 80070fc:	08007189 	.word	0x08007189
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007102:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007106:	f043 0301 	orr.w	r3, r3, #1
 800710a:	b2da      	uxtb	r2, r3
 800710c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800710e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007112:	68ba      	ldr	r2, [r7, #8]
 8007114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007116:	699b      	ldr	r3, [r3, #24]
 8007118:	18d1      	adds	r1, r2, r3
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800711e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007120:	f7ff ff5c 	bl	8006fdc <prvInsertTimerInActiveList>
 8007124:	4603      	mov	r3, r0
 8007126:	2b00      	cmp	r3, #0
 8007128:	d069      	beq.n	80071fe <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800712a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800712c:	6a1b      	ldr	r3, [r3, #32]
 800712e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007130:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007134:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007138:	f003 0304 	and.w	r3, r3, #4
 800713c:	2b00      	cmp	r3, #0
 800713e:	d05e      	beq.n	80071fe <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007140:	68ba      	ldr	r2, [r7, #8]
 8007142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007144:	699b      	ldr	r3, [r3, #24]
 8007146:	441a      	add	r2, r3
 8007148:	2300      	movs	r3, #0
 800714a:	9300      	str	r3, [sp, #0]
 800714c:	2300      	movs	r3, #0
 800714e:	2100      	movs	r1, #0
 8007150:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007152:	f7ff fe05 	bl	8006d60 <xTimerGenericCommand>
 8007156:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007158:	6a3b      	ldr	r3, [r7, #32]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d14f      	bne.n	80071fe <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800715e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007162:	f383 8811 	msr	BASEPRI, r3
 8007166:	f3bf 8f6f 	isb	sy
 800716a:	f3bf 8f4f 	dsb	sy
 800716e:	61bb      	str	r3, [r7, #24]
}
 8007170:	bf00      	nop
 8007172:	e7fe      	b.n	8007172 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007176:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800717a:	f023 0301 	bic.w	r3, r3, #1
 800717e:	b2da      	uxtb	r2, r3
 8007180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007182:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007186:	e03a      	b.n	80071fe <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800718a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800718e:	f043 0301 	orr.w	r3, r3, #1
 8007192:	b2da      	uxtb	r2, r3
 8007194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007196:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800719a:	68ba      	ldr	r2, [r7, #8]
 800719c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800719e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80071a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a2:	699b      	ldr	r3, [r3, #24]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d10a      	bne.n	80071be <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80071a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ac:	f383 8811 	msr	BASEPRI, r3
 80071b0:	f3bf 8f6f 	isb	sy
 80071b4:	f3bf 8f4f 	dsb	sy
 80071b8:	617b      	str	r3, [r7, #20]
}
 80071ba:	bf00      	nop
 80071bc:	e7fe      	b.n	80071bc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80071be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071c0:	699a      	ldr	r2, [r3, #24]
 80071c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c4:	18d1      	adds	r1, r2, r3
 80071c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071cc:	f7ff ff06 	bl	8006fdc <prvInsertTimerInActiveList>
					break;
 80071d0:	e015      	b.n	80071fe <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80071d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071d8:	f003 0302 	and.w	r3, r3, #2
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d103      	bne.n	80071e8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80071e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071e2:	f000 fbdd 	bl	80079a0 <vPortFree>
 80071e6:	e00a      	b.n	80071fe <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80071e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071ee:	f023 0301 	bic.w	r3, r3, #1
 80071f2:	b2da      	uxtb	r2, r3
 80071f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80071fa:	e000      	b.n	80071fe <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80071fc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80071fe:	4b08      	ldr	r3, [pc, #32]	; (8007220 <prvProcessReceivedCommands+0x1c0>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	1d39      	adds	r1, r7, #4
 8007204:	2200      	movs	r2, #0
 8007206:	4618      	mov	r0, r3
 8007208:	f7fe fbec 	bl	80059e4 <xQueueReceive>
 800720c:	4603      	mov	r3, r0
 800720e:	2b00      	cmp	r3, #0
 8007210:	f47f af2a 	bne.w	8007068 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007214:	bf00      	nop
 8007216:	bf00      	nop
 8007218:	3730      	adds	r7, #48	; 0x30
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}
 800721e:	bf00      	nop
 8007220:	20000f20 	.word	0x20000f20

08007224 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b088      	sub	sp, #32
 8007228:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800722a:	e048      	b.n	80072be <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800722c:	4b2d      	ldr	r3, [pc, #180]	; (80072e4 <prvSwitchTimerLists+0xc0>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	68db      	ldr	r3, [r3, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007236:	4b2b      	ldr	r3, [pc, #172]	; (80072e4 <prvSwitchTimerLists+0xc0>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	68db      	ldr	r3, [r3, #12]
 800723e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	3304      	adds	r3, #4
 8007244:	4618      	mov	r0, r3
 8007246:	f7fe f8cb 	bl	80053e0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	6a1b      	ldr	r3, [r3, #32]
 800724e:	68f8      	ldr	r0, [r7, #12]
 8007250:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007258:	f003 0304 	and.w	r3, r3, #4
 800725c:	2b00      	cmp	r3, #0
 800725e:	d02e      	beq.n	80072be <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	699b      	ldr	r3, [r3, #24]
 8007264:	693a      	ldr	r2, [r7, #16]
 8007266:	4413      	add	r3, r2
 8007268:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800726a:	68ba      	ldr	r2, [r7, #8]
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	429a      	cmp	r2, r3
 8007270:	d90e      	bls.n	8007290 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	68ba      	ldr	r2, [r7, #8]
 8007276:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	68fa      	ldr	r2, [r7, #12]
 800727c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800727e:	4b19      	ldr	r3, [pc, #100]	; (80072e4 <prvSwitchTimerLists+0xc0>)
 8007280:	681a      	ldr	r2, [r3, #0]
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	3304      	adds	r3, #4
 8007286:	4619      	mov	r1, r3
 8007288:	4610      	mov	r0, r2
 800728a:	f7fe f870 	bl	800536e <vListInsert>
 800728e:	e016      	b.n	80072be <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007290:	2300      	movs	r3, #0
 8007292:	9300      	str	r3, [sp, #0]
 8007294:	2300      	movs	r3, #0
 8007296:	693a      	ldr	r2, [r7, #16]
 8007298:	2100      	movs	r1, #0
 800729a:	68f8      	ldr	r0, [r7, #12]
 800729c:	f7ff fd60 	bl	8006d60 <xTimerGenericCommand>
 80072a0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d10a      	bne.n	80072be <prvSwitchTimerLists+0x9a>
	__asm volatile
 80072a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ac:	f383 8811 	msr	BASEPRI, r3
 80072b0:	f3bf 8f6f 	isb	sy
 80072b4:	f3bf 8f4f 	dsb	sy
 80072b8:	603b      	str	r3, [r7, #0]
}
 80072ba:	bf00      	nop
 80072bc:	e7fe      	b.n	80072bc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80072be:	4b09      	ldr	r3, [pc, #36]	; (80072e4 <prvSwitchTimerLists+0xc0>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d1b1      	bne.n	800722c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80072c8:	4b06      	ldr	r3, [pc, #24]	; (80072e4 <prvSwitchTimerLists+0xc0>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80072ce:	4b06      	ldr	r3, [pc, #24]	; (80072e8 <prvSwitchTimerLists+0xc4>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a04      	ldr	r2, [pc, #16]	; (80072e4 <prvSwitchTimerLists+0xc0>)
 80072d4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80072d6:	4a04      	ldr	r2, [pc, #16]	; (80072e8 <prvSwitchTimerLists+0xc4>)
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	6013      	str	r3, [r2, #0]
}
 80072dc:	bf00      	nop
 80072de:	3718      	adds	r7, #24
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}
 80072e4:	20000f18 	.word	0x20000f18
 80072e8:	20000f1c 	.word	0x20000f1c

080072ec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b082      	sub	sp, #8
 80072f0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80072f2:	f000 f967 	bl	80075c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80072f6:	4b15      	ldr	r3, [pc, #84]	; (800734c <prvCheckForValidListAndQueue+0x60>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d120      	bne.n	8007340 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80072fe:	4814      	ldr	r0, [pc, #80]	; (8007350 <prvCheckForValidListAndQueue+0x64>)
 8007300:	f7fd ffe4 	bl	80052cc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007304:	4813      	ldr	r0, [pc, #76]	; (8007354 <prvCheckForValidListAndQueue+0x68>)
 8007306:	f7fd ffe1 	bl	80052cc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800730a:	4b13      	ldr	r3, [pc, #76]	; (8007358 <prvCheckForValidListAndQueue+0x6c>)
 800730c:	4a10      	ldr	r2, [pc, #64]	; (8007350 <prvCheckForValidListAndQueue+0x64>)
 800730e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007310:	4b12      	ldr	r3, [pc, #72]	; (800735c <prvCheckForValidListAndQueue+0x70>)
 8007312:	4a10      	ldr	r2, [pc, #64]	; (8007354 <prvCheckForValidListAndQueue+0x68>)
 8007314:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007316:	2300      	movs	r3, #0
 8007318:	9300      	str	r3, [sp, #0]
 800731a:	4b11      	ldr	r3, [pc, #68]	; (8007360 <prvCheckForValidListAndQueue+0x74>)
 800731c:	4a11      	ldr	r2, [pc, #68]	; (8007364 <prvCheckForValidListAndQueue+0x78>)
 800731e:	2110      	movs	r1, #16
 8007320:	200a      	movs	r0, #10
 8007322:	f7fe f8ef 	bl	8005504 <xQueueGenericCreateStatic>
 8007326:	4603      	mov	r3, r0
 8007328:	4a08      	ldr	r2, [pc, #32]	; (800734c <prvCheckForValidListAndQueue+0x60>)
 800732a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800732c:	4b07      	ldr	r3, [pc, #28]	; (800734c <prvCheckForValidListAndQueue+0x60>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d005      	beq.n	8007340 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007334:	4b05      	ldr	r3, [pc, #20]	; (800734c <prvCheckForValidListAndQueue+0x60>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	490b      	ldr	r1, [pc, #44]	; (8007368 <prvCheckForValidListAndQueue+0x7c>)
 800733a:	4618      	mov	r0, r3
 800733c:	f7fe fd42 	bl	8005dc4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007340:	f000 f970 	bl	8007624 <vPortExitCritical>
}
 8007344:	bf00      	nop
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}
 800734a:	bf00      	nop
 800734c:	20000f20 	.word	0x20000f20
 8007350:	20000ef0 	.word	0x20000ef0
 8007354:	20000f04 	.word	0x20000f04
 8007358:	20000f18 	.word	0x20000f18
 800735c:	20000f1c 	.word	0x20000f1c
 8007360:	20000fcc 	.word	0x20000fcc
 8007364:	20000f2c 	.word	0x20000f2c
 8007368:	08008c78 	.word	0x08008c78

0800736c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800736c:	b480      	push	{r7}
 800736e:	b085      	sub	sp, #20
 8007370:	af00      	add	r7, sp, #0
 8007372:	60f8      	str	r0, [r7, #12]
 8007374:	60b9      	str	r1, [r7, #8]
 8007376:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	3b04      	subs	r3, #4
 800737c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007384:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	3b04      	subs	r3, #4
 800738a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	f023 0201 	bic.w	r2, r3, #1
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	3b04      	subs	r3, #4
 800739a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800739c:	4a0c      	ldr	r2, [pc, #48]	; (80073d0 <pxPortInitialiseStack+0x64>)
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	3b14      	subs	r3, #20
 80073a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	3b04      	subs	r3, #4
 80073b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	f06f 0202 	mvn.w	r2, #2
 80073ba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	3b20      	subs	r3, #32
 80073c0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80073c2:	68fb      	ldr	r3, [r7, #12]
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	3714      	adds	r7, #20
 80073c8:	46bd      	mov	sp, r7
 80073ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ce:	4770      	bx	lr
 80073d0:	080073d5 	.word	0x080073d5

080073d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80073d4:	b480      	push	{r7}
 80073d6:	b085      	sub	sp, #20
 80073d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80073da:	2300      	movs	r3, #0
 80073dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80073de:	4b12      	ldr	r3, [pc, #72]	; (8007428 <prvTaskExitError+0x54>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073e6:	d00a      	beq.n	80073fe <prvTaskExitError+0x2a>
	__asm volatile
 80073e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ec:	f383 8811 	msr	BASEPRI, r3
 80073f0:	f3bf 8f6f 	isb	sy
 80073f4:	f3bf 8f4f 	dsb	sy
 80073f8:	60fb      	str	r3, [r7, #12]
}
 80073fa:	bf00      	nop
 80073fc:	e7fe      	b.n	80073fc <prvTaskExitError+0x28>
	__asm volatile
 80073fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007402:	f383 8811 	msr	BASEPRI, r3
 8007406:	f3bf 8f6f 	isb	sy
 800740a:	f3bf 8f4f 	dsb	sy
 800740e:	60bb      	str	r3, [r7, #8]
}
 8007410:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007412:	bf00      	nop
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d0fc      	beq.n	8007414 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800741a:	bf00      	nop
 800741c:	bf00      	nop
 800741e:	3714      	adds	r7, #20
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr
 8007428:	2000000c 	.word	0x2000000c
 800742c:	00000000 	.word	0x00000000

08007430 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007430:	4b07      	ldr	r3, [pc, #28]	; (8007450 <pxCurrentTCBConst2>)
 8007432:	6819      	ldr	r1, [r3, #0]
 8007434:	6808      	ldr	r0, [r1, #0]
 8007436:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800743a:	f380 8809 	msr	PSP, r0
 800743e:	f3bf 8f6f 	isb	sy
 8007442:	f04f 0000 	mov.w	r0, #0
 8007446:	f380 8811 	msr	BASEPRI, r0
 800744a:	4770      	bx	lr
 800744c:	f3af 8000 	nop.w

08007450 <pxCurrentTCBConst2>:
 8007450:	200009f0 	.word	0x200009f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007454:	bf00      	nop
 8007456:	bf00      	nop

08007458 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007458:	4808      	ldr	r0, [pc, #32]	; (800747c <prvPortStartFirstTask+0x24>)
 800745a:	6800      	ldr	r0, [r0, #0]
 800745c:	6800      	ldr	r0, [r0, #0]
 800745e:	f380 8808 	msr	MSP, r0
 8007462:	f04f 0000 	mov.w	r0, #0
 8007466:	f380 8814 	msr	CONTROL, r0
 800746a:	b662      	cpsie	i
 800746c:	b661      	cpsie	f
 800746e:	f3bf 8f4f 	dsb	sy
 8007472:	f3bf 8f6f 	isb	sy
 8007476:	df00      	svc	0
 8007478:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800747a:	bf00      	nop
 800747c:	e000ed08 	.word	0xe000ed08

08007480 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b086      	sub	sp, #24
 8007484:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007486:	4b46      	ldr	r3, [pc, #280]	; (80075a0 <xPortStartScheduler+0x120>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a46      	ldr	r2, [pc, #280]	; (80075a4 <xPortStartScheduler+0x124>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d10a      	bne.n	80074a6 <xPortStartScheduler+0x26>
	__asm volatile
 8007490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007494:	f383 8811 	msr	BASEPRI, r3
 8007498:	f3bf 8f6f 	isb	sy
 800749c:	f3bf 8f4f 	dsb	sy
 80074a0:	613b      	str	r3, [r7, #16]
}
 80074a2:	bf00      	nop
 80074a4:	e7fe      	b.n	80074a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80074a6:	4b3e      	ldr	r3, [pc, #248]	; (80075a0 <xPortStartScheduler+0x120>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a3f      	ldr	r2, [pc, #252]	; (80075a8 <xPortStartScheduler+0x128>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d10a      	bne.n	80074c6 <xPortStartScheduler+0x46>
	__asm volatile
 80074b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b4:	f383 8811 	msr	BASEPRI, r3
 80074b8:	f3bf 8f6f 	isb	sy
 80074bc:	f3bf 8f4f 	dsb	sy
 80074c0:	60fb      	str	r3, [r7, #12]
}
 80074c2:	bf00      	nop
 80074c4:	e7fe      	b.n	80074c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80074c6:	4b39      	ldr	r3, [pc, #228]	; (80075ac <xPortStartScheduler+0x12c>)
 80074c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	781b      	ldrb	r3, [r3, #0]
 80074ce:	b2db      	uxtb	r3, r3
 80074d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	22ff      	movs	r2, #255	; 0xff
 80074d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	781b      	ldrb	r3, [r3, #0]
 80074dc:	b2db      	uxtb	r3, r3
 80074de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80074e0:	78fb      	ldrb	r3, [r7, #3]
 80074e2:	b2db      	uxtb	r3, r3
 80074e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80074e8:	b2da      	uxtb	r2, r3
 80074ea:	4b31      	ldr	r3, [pc, #196]	; (80075b0 <xPortStartScheduler+0x130>)
 80074ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80074ee:	4b31      	ldr	r3, [pc, #196]	; (80075b4 <xPortStartScheduler+0x134>)
 80074f0:	2207      	movs	r2, #7
 80074f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80074f4:	e009      	b.n	800750a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80074f6:	4b2f      	ldr	r3, [pc, #188]	; (80075b4 <xPortStartScheduler+0x134>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	3b01      	subs	r3, #1
 80074fc:	4a2d      	ldr	r2, [pc, #180]	; (80075b4 <xPortStartScheduler+0x134>)
 80074fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007500:	78fb      	ldrb	r3, [r7, #3]
 8007502:	b2db      	uxtb	r3, r3
 8007504:	005b      	lsls	r3, r3, #1
 8007506:	b2db      	uxtb	r3, r3
 8007508:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800750a:	78fb      	ldrb	r3, [r7, #3]
 800750c:	b2db      	uxtb	r3, r3
 800750e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007512:	2b80      	cmp	r3, #128	; 0x80
 8007514:	d0ef      	beq.n	80074f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007516:	4b27      	ldr	r3, [pc, #156]	; (80075b4 <xPortStartScheduler+0x134>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f1c3 0307 	rsb	r3, r3, #7
 800751e:	2b04      	cmp	r3, #4
 8007520:	d00a      	beq.n	8007538 <xPortStartScheduler+0xb8>
	__asm volatile
 8007522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007526:	f383 8811 	msr	BASEPRI, r3
 800752a:	f3bf 8f6f 	isb	sy
 800752e:	f3bf 8f4f 	dsb	sy
 8007532:	60bb      	str	r3, [r7, #8]
}
 8007534:	bf00      	nop
 8007536:	e7fe      	b.n	8007536 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007538:	4b1e      	ldr	r3, [pc, #120]	; (80075b4 <xPortStartScheduler+0x134>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	021b      	lsls	r3, r3, #8
 800753e:	4a1d      	ldr	r2, [pc, #116]	; (80075b4 <xPortStartScheduler+0x134>)
 8007540:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007542:	4b1c      	ldr	r3, [pc, #112]	; (80075b4 <xPortStartScheduler+0x134>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800754a:	4a1a      	ldr	r2, [pc, #104]	; (80075b4 <xPortStartScheduler+0x134>)
 800754c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	b2da      	uxtb	r2, r3
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007556:	4b18      	ldr	r3, [pc, #96]	; (80075b8 <xPortStartScheduler+0x138>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a17      	ldr	r2, [pc, #92]	; (80075b8 <xPortStartScheduler+0x138>)
 800755c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007560:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007562:	4b15      	ldr	r3, [pc, #84]	; (80075b8 <xPortStartScheduler+0x138>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a14      	ldr	r2, [pc, #80]	; (80075b8 <xPortStartScheduler+0x138>)
 8007568:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800756c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800756e:	f000 f8dd 	bl	800772c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007572:	4b12      	ldr	r3, [pc, #72]	; (80075bc <xPortStartScheduler+0x13c>)
 8007574:	2200      	movs	r2, #0
 8007576:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007578:	f000 f8fc 	bl	8007774 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800757c:	4b10      	ldr	r3, [pc, #64]	; (80075c0 <xPortStartScheduler+0x140>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a0f      	ldr	r2, [pc, #60]	; (80075c0 <xPortStartScheduler+0x140>)
 8007582:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007586:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007588:	f7ff ff66 	bl	8007458 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800758c:	f7ff f84a 	bl	8006624 <vTaskSwitchContext>
	prvTaskExitError();
 8007590:	f7ff ff20 	bl	80073d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007594:	2300      	movs	r3, #0
}
 8007596:	4618      	mov	r0, r3
 8007598:	3718      	adds	r7, #24
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}
 800759e:	bf00      	nop
 80075a0:	e000ed00 	.word	0xe000ed00
 80075a4:	410fc271 	.word	0x410fc271
 80075a8:	410fc270 	.word	0x410fc270
 80075ac:	e000e400 	.word	0xe000e400
 80075b0:	2000101c 	.word	0x2000101c
 80075b4:	20001020 	.word	0x20001020
 80075b8:	e000ed20 	.word	0xe000ed20
 80075bc:	2000000c 	.word	0x2000000c
 80075c0:	e000ef34 	.word	0xe000ef34

080075c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80075c4:	b480      	push	{r7}
 80075c6:	b083      	sub	sp, #12
 80075c8:	af00      	add	r7, sp, #0
	__asm volatile
 80075ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ce:	f383 8811 	msr	BASEPRI, r3
 80075d2:	f3bf 8f6f 	isb	sy
 80075d6:	f3bf 8f4f 	dsb	sy
 80075da:	607b      	str	r3, [r7, #4]
}
 80075dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80075de:	4b0f      	ldr	r3, [pc, #60]	; (800761c <vPortEnterCritical+0x58>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	3301      	adds	r3, #1
 80075e4:	4a0d      	ldr	r2, [pc, #52]	; (800761c <vPortEnterCritical+0x58>)
 80075e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80075e8:	4b0c      	ldr	r3, [pc, #48]	; (800761c <vPortEnterCritical+0x58>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	d10f      	bne.n	8007610 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80075f0:	4b0b      	ldr	r3, [pc, #44]	; (8007620 <vPortEnterCritical+0x5c>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	b2db      	uxtb	r3, r3
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d00a      	beq.n	8007610 <vPortEnterCritical+0x4c>
	__asm volatile
 80075fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075fe:	f383 8811 	msr	BASEPRI, r3
 8007602:	f3bf 8f6f 	isb	sy
 8007606:	f3bf 8f4f 	dsb	sy
 800760a:	603b      	str	r3, [r7, #0]
}
 800760c:	bf00      	nop
 800760e:	e7fe      	b.n	800760e <vPortEnterCritical+0x4a>
	}
}
 8007610:	bf00      	nop
 8007612:	370c      	adds	r7, #12
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr
 800761c:	2000000c 	.word	0x2000000c
 8007620:	e000ed04 	.word	0xe000ed04

08007624 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007624:	b480      	push	{r7}
 8007626:	b083      	sub	sp, #12
 8007628:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800762a:	4b12      	ldr	r3, [pc, #72]	; (8007674 <vPortExitCritical+0x50>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d10a      	bne.n	8007648 <vPortExitCritical+0x24>
	__asm volatile
 8007632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007636:	f383 8811 	msr	BASEPRI, r3
 800763a:	f3bf 8f6f 	isb	sy
 800763e:	f3bf 8f4f 	dsb	sy
 8007642:	607b      	str	r3, [r7, #4]
}
 8007644:	bf00      	nop
 8007646:	e7fe      	b.n	8007646 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007648:	4b0a      	ldr	r3, [pc, #40]	; (8007674 <vPortExitCritical+0x50>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	3b01      	subs	r3, #1
 800764e:	4a09      	ldr	r2, [pc, #36]	; (8007674 <vPortExitCritical+0x50>)
 8007650:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007652:	4b08      	ldr	r3, [pc, #32]	; (8007674 <vPortExitCritical+0x50>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d105      	bne.n	8007666 <vPortExitCritical+0x42>
 800765a:	2300      	movs	r3, #0
 800765c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	f383 8811 	msr	BASEPRI, r3
}
 8007664:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007666:	bf00      	nop
 8007668:	370c      	adds	r7, #12
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr
 8007672:	bf00      	nop
 8007674:	2000000c 	.word	0x2000000c
	...

08007680 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007680:	f3ef 8009 	mrs	r0, PSP
 8007684:	f3bf 8f6f 	isb	sy
 8007688:	4b15      	ldr	r3, [pc, #84]	; (80076e0 <pxCurrentTCBConst>)
 800768a:	681a      	ldr	r2, [r3, #0]
 800768c:	f01e 0f10 	tst.w	lr, #16
 8007690:	bf08      	it	eq
 8007692:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007696:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800769a:	6010      	str	r0, [r2, #0]
 800769c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80076a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80076a4:	f380 8811 	msr	BASEPRI, r0
 80076a8:	f3bf 8f4f 	dsb	sy
 80076ac:	f3bf 8f6f 	isb	sy
 80076b0:	f7fe ffb8 	bl	8006624 <vTaskSwitchContext>
 80076b4:	f04f 0000 	mov.w	r0, #0
 80076b8:	f380 8811 	msr	BASEPRI, r0
 80076bc:	bc09      	pop	{r0, r3}
 80076be:	6819      	ldr	r1, [r3, #0]
 80076c0:	6808      	ldr	r0, [r1, #0]
 80076c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076c6:	f01e 0f10 	tst.w	lr, #16
 80076ca:	bf08      	it	eq
 80076cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80076d0:	f380 8809 	msr	PSP, r0
 80076d4:	f3bf 8f6f 	isb	sy
 80076d8:	4770      	bx	lr
 80076da:	bf00      	nop
 80076dc:	f3af 8000 	nop.w

080076e0 <pxCurrentTCBConst>:
 80076e0:	200009f0 	.word	0x200009f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80076e4:	bf00      	nop
 80076e6:	bf00      	nop

080076e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b082      	sub	sp, #8
 80076ec:	af00      	add	r7, sp, #0
	__asm volatile
 80076ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f2:	f383 8811 	msr	BASEPRI, r3
 80076f6:	f3bf 8f6f 	isb	sy
 80076fa:	f3bf 8f4f 	dsb	sy
 80076fe:	607b      	str	r3, [r7, #4]
}
 8007700:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007702:	f7fe fed5 	bl	80064b0 <xTaskIncrementTick>
 8007706:	4603      	mov	r3, r0
 8007708:	2b00      	cmp	r3, #0
 800770a:	d003      	beq.n	8007714 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800770c:	4b06      	ldr	r3, [pc, #24]	; (8007728 <xPortSysTickHandler+0x40>)
 800770e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007712:	601a      	str	r2, [r3, #0]
 8007714:	2300      	movs	r3, #0
 8007716:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	f383 8811 	msr	BASEPRI, r3
}
 800771e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007720:	bf00      	nop
 8007722:	3708      	adds	r7, #8
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}
 8007728:	e000ed04 	.word	0xe000ed04

0800772c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800772c:	b480      	push	{r7}
 800772e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007730:	4b0b      	ldr	r3, [pc, #44]	; (8007760 <vPortSetupTimerInterrupt+0x34>)
 8007732:	2200      	movs	r2, #0
 8007734:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007736:	4b0b      	ldr	r3, [pc, #44]	; (8007764 <vPortSetupTimerInterrupt+0x38>)
 8007738:	2200      	movs	r2, #0
 800773a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800773c:	4b0a      	ldr	r3, [pc, #40]	; (8007768 <vPortSetupTimerInterrupt+0x3c>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a0a      	ldr	r2, [pc, #40]	; (800776c <vPortSetupTimerInterrupt+0x40>)
 8007742:	fba2 2303 	umull	r2, r3, r2, r3
 8007746:	099b      	lsrs	r3, r3, #6
 8007748:	4a09      	ldr	r2, [pc, #36]	; (8007770 <vPortSetupTimerInterrupt+0x44>)
 800774a:	3b01      	subs	r3, #1
 800774c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800774e:	4b04      	ldr	r3, [pc, #16]	; (8007760 <vPortSetupTimerInterrupt+0x34>)
 8007750:	2207      	movs	r2, #7
 8007752:	601a      	str	r2, [r3, #0]
}
 8007754:	bf00      	nop
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr
 800775e:	bf00      	nop
 8007760:	e000e010 	.word	0xe000e010
 8007764:	e000e018 	.word	0xe000e018
 8007768:	20000000 	.word	0x20000000
 800776c:	10624dd3 	.word	0x10624dd3
 8007770:	e000e014 	.word	0xe000e014

08007774 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007774:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007784 <vPortEnableVFP+0x10>
 8007778:	6801      	ldr	r1, [r0, #0]
 800777a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800777e:	6001      	str	r1, [r0, #0]
 8007780:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007782:	bf00      	nop
 8007784:	e000ed88 	.word	0xe000ed88

08007788 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007788:	b480      	push	{r7}
 800778a:	b085      	sub	sp, #20
 800778c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800778e:	f3ef 8305 	mrs	r3, IPSR
 8007792:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2b0f      	cmp	r3, #15
 8007798:	d914      	bls.n	80077c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800779a:	4a17      	ldr	r2, [pc, #92]	; (80077f8 <vPortValidateInterruptPriority+0x70>)
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	4413      	add	r3, r2
 80077a0:	781b      	ldrb	r3, [r3, #0]
 80077a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80077a4:	4b15      	ldr	r3, [pc, #84]	; (80077fc <vPortValidateInterruptPriority+0x74>)
 80077a6:	781b      	ldrb	r3, [r3, #0]
 80077a8:	7afa      	ldrb	r2, [r7, #11]
 80077aa:	429a      	cmp	r2, r3
 80077ac:	d20a      	bcs.n	80077c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80077ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b2:	f383 8811 	msr	BASEPRI, r3
 80077b6:	f3bf 8f6f 	isb	sy
 80077ba:	f3bf 8f4f 	dsb	sy
 80077be:	607b      	str	r3, [r7, #4]
}
 80077c0:	bf00      	nop
 80077c2:	e7fe      	b.n	80077c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80077c4:	4b0e      	ldr	r3, [pc, #56]	; (8007800 <vPortValidateInterruptPriority+0x78>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80077cc:	4b0d      	ldr	r3, [pc, #52]	; (8007804 <vPortValidateInterruptPriority+0x7c>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	429a      	cmp	r2, r3
 80077d2:	d90a      	bls.n	80077ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80077d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d8:	f383 8811 	msr	BASEPRI, r3
 80077dc:	f3bf 8f6f 	isb	sy
 80077e0:	f3bf 8f4f 	dsb	sy
 80077e4:	603b      	str	r3, [r7, #0]
}
 80077e6:	bf00      	nop
 80077e8:	e7fe      	b.n	80077e8 <vPortValidateInterruptPriority+0x60>
	}
 80077ea:	bf00      	nop
 80077ec:	3714      	adds	r7, #20
 80077ee:	46bd      	mov	sp, r7
 80077f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f4:	4770      	bx	lr
 80077f6:	bf00      	nop
 80077f8:	e000e3f0 	.word	0xe000e3f0
 80077fc:	2000101c 	.word	0x2000101c
 8007800:	e000ed0c 	.word	0xe000ed0c
 8007804:	20001020 	.word	0x20001020

08007808 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b08a      	sub	sp, #40	; 0x28
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007810:	2300      	movs	r3, #0
 8007812:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007814:	f7fe fd90 	bl	8006338 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007818:	4b5b      	ldr	r3, [pc, #364]	; (8007988 <pvPortMalloc+0x180>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d101      	bne.n	8007824 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007820:	f000 f920 	bl	8007a64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007824:	4b59      	ldr	r3, [pc, #356]	; (800798c <pvPortMalloc+0x184>)
 8007826:	681a      	ldr	r2, [r3, #0]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	4013      	ands	r3, r2
 800782c:	2b00      	cmp	r3, #0
 800782e:	f040 8093 	bne.w	8007958 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d01d      	beq.n	8007874 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007838:	2208      	movs	r2, #8
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	4413      	add	r3, r2
 800783e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f003 0307 	and.w	r3, r3, #7
 8007846:	2b00      	cmp	r3, #0
 8007848:	d014      	beq.n	8007874 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f023 0307 	bic.w	r3, r3, #7
 8007850:	3308      	adds	r3, #8
 8007852:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f003 0307 	and.w	r3, r3, #7
 800785a:	2b00      	cmp	r3, #0
 800785c:	d00a      	beq.n	8007874 <pvPortMalloc+0x6c>
	__asm volatile
 800785e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007862:	f383 8811 	msr	BASEPRI, r3
 8007866:	f3bf 8f6f 	isb	sy
 800786a:	f3bf 8f4f 	dsb	sy
 800786e:	617b      	str	r3, [r7, #20]
}
 8007870:	bf00      	nop
 8007872:	e7fe      	b.n	8007872 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d06e      	beq.n	8007958 <pvPortMalloc+0x150>
 800787a:	4b45      	ldr	r3, [pc, #276]	; (8007990 <pvPortMalloc+0x188>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	687a      	ldr	r2, [r7, #4]
 8007880:	429a      	cmp	r2, r3
 8007882:	d869      	bhi.n	8007958 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007884:	4b43      	ldr	r3, [pc, #268]	; (8007994 <pvPortMalloc+0x18c>)
 8007886:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007888:	4b42      	ldr	r3, [pc, #264]	; (8007994 <pvPortMalloc+0x18c>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800788e:	e004      	b.n	800789a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007892:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800789a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	687a      	ldr	r2, [r7, #4]
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d903      	bls.n	80078ac <pvPortMalloc+0xa4>
 80078a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d1f1      	bne.n	8007890 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80078ac:	4b36      	ldr	r3, [pc, #216]	; (8007988 <pvPortMalloc+0x180>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078b2:	429a      	cmp	r2, r3
 80078b4:	d050      	beq.n	8007958 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80078b6:	6a3b      	ldr	r3, [r7, #32]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	2208      	movs	r2, #8
 80078bc:	4413      	add	r3, r2
 80078be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80078c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c2:	681a      	ldr	r2, [r3, #0]
 80078c4:	6a3b      	ldr	r3, [r7, #32]
 80078c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80078c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ca:	685a      	ldr	r2, [r3, #4]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	1ad2      	subs	r2, r2, r3
 80078d0:	2308      	movs	r3, #8
 80078d2:	005b      	lsls	r3, r3, #1
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d91f      	bls.n	8007918 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80078d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	4413      	add	r3, r2
 80078de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80078e0:	69bb      	ldr	r3, [r7, #24]
 80078e2:	f003 0307 	and.w	r3, r3, #7
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d00a      	beq.n	8007900 <pvPortMalloc+0xf8>
	__asm volatile
 80078ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ee:	f383 8811 	msr	BASEPRI, r3
 80078f2:	f3bf 8f6f 	isb	sy
 80078f6:	f3bf 8f4f 	dsb	sy
 80078fa:	613b      	str	r3, [r7, #16]
}
 80078fc:	bf00      	nop
 80078fe:	e7fe      	b.n	80078fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007902:	685a      	ldr	r2, [r3, #4]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	1ad2      	subs	r2, r2, r3
 8007908:	69bb      	ldr	r3, [r7, #24]
 800790a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800790c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790e:	687a      	ldr	r2, [r7, #4]
 8007910:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007912:	69b8      	ldr	r0, [r7, #24]
 8007914:	f000 f908 	bl	8007b28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007918:	4b1d      	ldr	r3, [pc, #116]	; (8007990 <pvPortMalloc+0x188>)
 800791a:	681a      	ldr	r2, [r3, #0]
 800791c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	1ad3      	subs	r3, r2, r3
 8007922:	4a1b      	ldr	r2, [pc, #108]	; (8007990 <pvPortMalloc+0x188>)
 8007924:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007926:	4b1a      	ldr	r3, [pc, #104]	; (8007990 <pvPortMalloc+0x188>)
 8007928:	681a      	ldr	r2, [r3, #0]
 800792a:	4b1b      	ldr	r3, [pc, #108]	; (8007998 <pvPortMalloc+0x190>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	429a      	cmp	r2, r3
 8007930:	d203      	bcs.n	800793a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007932:	4b17      	ldr	r3, [pc, #92]	; (8007990 <pvPortMalloc+0x188>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4a18      	ldr	r2, [pc, #96]	; (8007998 <pvPortMalloc+0x190>)
 8007938:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800793a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800793c:	685a      	ldr	r2, [r3, #4]
 800793e:	4b13      	ldr	r3, [pc, #76]	; (800798c <pvPortMalloc+0x184>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	431a      	orrs	r2, r3
 8007944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007946:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794a:	2200      	movs	r2, #0
 800794c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800794e:	4b13      	ldr	r3, [pc, #76]	; (800799c <pvPortMalloc+0x194>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	3301      	adds	r3, #1
 8007954:	4a11      	ldr	r2, [pc, #68]	; (800799c <pvPortMalloc+0x194>)
 8007956:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007958:	f7fe fcfc 	bl	8006354 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800795c:	69fb      	ldr	r3, [r7, #28]
 800795e:	f003 0307 	and.w	r3, r3, #7
 8007962:	2b00      	cmp	r3, #0
 8007964:	d00a      	beq.n	800797c <pvPortMalloc+0x174>
	__asm volatile
 8007966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800796a:	f383 8811 	msr	BASEPRI, r3
 800796e:	f3bf 8f6f 	isb	sy
 8007972:	f3bf 8f4f 	dsb	sy
 8007976:	60fb      	str	r3, [r7, #12]
}
 8007978:	bf00      	nop
 800797a:	e7fe      	b.n	800797a <pvPortMalloc+0x172>
	return pvReturn;
 800797c:	69fb      	ldr	r3, [r7, #28]
}
 800797e:	4618      	mov	r0, r3
 8007980:	3728      	adds	r7, #40	; 0x28
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}
 8007986:	bf00      	nop
 8007988:	200023b4 	.word	0x200023b4
 800798c:	200023c8 	.word	0x200023c8
 8007990:	200023b8 	.word	0x200023b8
 8007994:	200023ac 	.word	0x200023ac
 8007998:	200023bc 	.word	0x200023bc
 800799c:	200023c0 	.word	0x200023c0

080079a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b086      	sub	sp, #24
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d04d      	beq.n	8007a4e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80079b2:	2308      	movs	r3, #8
 80079b4:	425b      	negs	r3, r3
 80079b6:	697a      	ldr	r2, [r7, #20]
 80079b8:	4413      	add	r3, r2
 80079ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	685a      	ldr	r2, [r3, #4]
 80079c4:	4b24      	ldr	r3, [pc, #144]	; (8007a58 <vPortFree+0xb8>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4013      	ands	r3, r2
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d10a      	bne.n	80079e4 <vPortFree+0x44>
	__asm volatile
 80079ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d2:	f383 8811 	msr	BASEPRI, r3
 80079d6:	f3bf 8f6f 	isb	sy
 80079da:	f3bf 8f4f 	dsb	sy
 80079de:	60fb      	str	r3, [r7, #12]
}
 80079e0:	bf00      	nop
 80079e2:	e7fe      	b.n	80079e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d00a      	beq.n	8007a02 <vPortFree+0x62>
	__asm volatile
 80079ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079f0:	f383 8811 	msr	BASEPRI, r3
 80079f4:	f3bf 8f6f 	isb	sy
 80079f8:	f3bf 8f4f 	dsb	sy
 80079fc:	60bb      	str	r3, [r7, #8]
}
 80079fe:	bf00      	nop
 8007a00:	e7fe      	b.n	8007a00 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	685a      	ldr	r2, [r3, #4]
 8007a06:	4b14      	ldr	r3, [pc, #80]	; (8007a58 <vPortFree+0xb8>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4013      	ands	r3, r2
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d01e      	beq.n	8007a4e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d11a      	bne.n	8007a4e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	685a      	ldr	r2, [r3, #4]
 8007a1c:	4b0e      	ldr	r3, [pc, #56]	; (8007a58 <vPortFree+0xb8>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	43db      	mvns	r3, r3
 8007a22:	401a      	ands	r2, r3
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007a28:	f7fe fc86 	bl	8006338 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	685a      	ldr	r2, [r3, #4]
 8007a30:	4b0a      	ldr	r3, [pc, #40]	; (8007a5c <vPortFree+0xbc>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4413      	add	r3, r2
 8007a36:	4a09      	ldr	r2, [pc, #36]	; (8007a5c <vPortFree+0xbc>)
 8007a38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007a3a:	6938      	ldr	r0, [r7, #16]
 8007a3c:	f000 f874 	bl	8007b28 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007a40:	4b07      	ldr	r3, [pc, #28]	; (8007a60 <vPortFree+0xc0>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	3301      	adds	r3, #1
 8007a46:	4a06      	ldr	r2, [pc, #24]	; (8007a60 <vPortFree+0xc0>)
 8007a48:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007a4a:	f7fe fc83 	bl	8006354 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007a4e:	bf00      	nop
 8007a50:	3718      	adds	r7, #24
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}
 8007a56:	bf00      	nop
 8007a58:	200023c8 	.word	0x200023c8
 8007a5c:	200023b8 	.word	0x200023b8
 8007a60:	200023c4 	.word	0x200023c4

08007a64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007a64:	b480      	push	{r7}
 8007a66:	b085      	sub	sp, #20
 8007a68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007a6a:	f241 3388 	movw	r3, #5000	; 0x1388
 8007a6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007a70:	4b27      	ldr	r3, [pc, #156]	; (8007b10 <prvHeapInit+0xac>)
 8007a72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	f003 0307 	and.w	r3, r3, #7
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d00c      	beq.n	8007a98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	3307      	adds	r3, #7
 8007a82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f023 0307 	bic.w	r3, r3, #7
 8007a8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007a8c:	68ba      	ldr	r2, [r7, #8]
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	1ad3      	subs	r3, r2, r3
 8007a92:	4a1f      	ldr	r2, [pc, #124]	; (8007b10 <prvHeapInit+0xac>)
 8007a94:	4413      	add	r3, r2
 8007a96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007a9c:	4a1d      	ldr	r2, [pc, #116]	; (8007b14 <prvHeapInit+0xb0>)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007aa2:	4b1c      	ldr	r3, [pc, #112]	; (8007b14 <prvHeapInit+0xb0>)
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	68ba      	ldr	r2, [r7, #8]
 8007aac:	4413      	add	r3, r2
 8007aae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007ab0:	2208      	movs	r2, #8
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	1a9b      	subs	r3, r3, r2
 8007ab6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f023 0307 	bic.w	r3, r3, #7
 8007abe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	4a15      	ldr	r2, [pc, #84]	; (8007b18 <prvHeapInit+0xb4>)
 8007ac4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007ac6:	4b14      	ldr	r3, [pc, #80]	; (8007b18 <prvHeapInit+0xb4>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	2200      	movs	r2, #0
 8007acc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007ace:	4b12      	ldr	r3, [pc, #72]	; (8007b18 <prvHeapInit+0xb4>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	68fa      	ldr	r2, [r7, #12]
 8007ade:	1ad2      	subs	r2, r2, r3
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007ae4:	4b0c      	ldr	r3, [pc, #48]	; (8007b18 <prvHeapInit+0xb4>)
 8007ae6:	681a      	ldr	r2, [r3, #0]
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	685b      	ldr	r3, [r3, #4]
 8007af0:	4a0a      	ldr	r2, [pc, #40]	; (8007b1c <prvHeapInit+0xb8>)
 8007af2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	4a09      	ldr	r2, [pc, #36]	; (8007b20 <prvHeapInit+0xbc>)
 8007afa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007afc:	4b09      	ldr	r3, [pc, #36]	; (8007b24 <prvHeapInit+0xc0>)
 8007afe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007b02:	601a      	str	r2, [r3, #0]
}
 8007b04:	bf00      	nop
 8007b06:	3714      	adds	r7, #20
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr
 8007b10:	20001024 	.word	0x20001024
 8007b14:	200023ac 	.word	0x200023ac
 8007b18:	200023b4 	.word	0x200023b4
 8007b1c:	200023bc 	.word	0x200023bc
 8007b20:	200023b8 	.word	0x200023b8
 8007b24:	200023c8 	.word	0x200023c8

08007b28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b085      	sub	sp, #20
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007b30:	4b28      	ldr	r3, [pc, #160]	; (8007bd4 <prvInsertBlockIntoFreeList+0xac>)
 8007b32:	60fb      	str	r3, [r7, #12]
 8007b34:	e002      	b.n	8007b3c <prvInsertBlockIntoFreeList+0x14>
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	60fb      	str	r3, [r7, #12]
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	687a      	ldr	r2, [r7, #4]
 8007b42:	429a      	cmp	r2, r3
 8007b44:	d8f7      	bhi.n	8007b36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	68ba      	ldr	r2, [r7, #8]
 8007b50:	4413      	add	r3, r2
 8007b52:	687a      	ldr	r2, [r7, #4]
 8007b54:	429a      	cmp	r2, r3
 8007b56:	d108      	bne.n	8007b6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	685a      	ldr	r2, [r3, #4]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	685b      	ldr	r3, [r3, #4]
 8007b60:	441a      	add	r2, r3
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	68ba      	ldr	r2, [r7, #8]
 8007b74:	441a      	add	r2, r3
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	d118      	bne.n	8007bb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681a      	ldr	r2, [r3, #0]
 8007b82:	4b15      	ldr	r3, [pc, #84]	; (8007bd8 <prvInsertBlockIntoFreeList+0xb0>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	429a      	cmp	r2, r3
 8007b88:	d00d      	beq.n	8007ba6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	685a      	ldr	r2, [r3, #4]
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	441a      	add	r2, r3
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	681a      	ldr	r2, [r3, #0]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	601a      	str	r2, [r3, #0]
 8007ba4:	e008      	b.n	8007bb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007ba6:	4b0c      	ldr	r3, [pc, #48]	; (8007bd8 <prvInsertBlockIntoFreeList+0xb0>)
 8007ba8:	681a      	ldr	r2, [r3, #0]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	601a      	str	r2, [r3, #0]
 8007bae:	e003      	b.n	8007bb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681a      	ldr	r2, [r3, #0]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007bb8:	68fa      	ldr	r2, [r7, #12]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	429a      	cmp	r2, r3
 8007bbe:	d002      	beq.n	8007bc6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	687a      	ldr	r2, [r7, #4]
 8007bc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007bc6:	bf00      	nop
 8007bc8:	3714      	adds	r7, #20
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd0:	4770      	bx	lr
 8007bd2:	bf00      	nop
 8007bd4:	200023ac 	.word	0x200023ac
 8007bd8:	200023b4 	.word	0x200023b4

08007bdc <std>:
 8007bdc:	2300      	movs	r3, #0
 8007bde:	b510      	push	{r4, lr}
 8007be0:	4604      	mov	r4, r0
 8007be2:	e9c0 3300 	strd	r3, r3, [r0]
 8007be6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007bea:	6083      	str	r3, [r0, #8]
 8007bec:	8181      	strh	r1, [r0, #12]
 8007bee:	6643      	str	r3, [r0, #100]	; 0x64
 8007bf0:	81c2      	strh	r2, [r0, #14]
 8007bf2:	6183      	str	r3, [r0, #24]
 8007bf4:	4619      	mov	r1, r3
 8007bf6:	2208      	movs	r2, #8
 8007bf8:	305c      	adds	r0, #92	; 0x5c
 8007bfa:	f000 f91f 	bl	8007e3c <memset>
 8007bfe:	4b0d      	ldr	r3, [pc, #52]	; (8007c34 <std+0x58>)
 8007c00:	6263      	str	r3, [r4, #36]	; 0x24
 8007c02:	4b0d      	ldr	r3, [pc, #52]	; (8007c38 <std+0x5c>)
 8007c04:	62a3      	str	r3, [r4, #40]	; 0x28
 8007c06:	4b0d      	ldr	r3, [pc, #52]	; (8007c3c <std+0x60>)
 8007c08:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007c0a:	4b0d      	ldr	r3, [pc, #52]	; (8007c40 <std+0x64>)
 8007c0c:	6323      	str	r3, [r4, #48]	; 0x30
 8007c0e:	4b0d      	ldr	r3, [pc, #52]	; (8007c44 <std+0x68>)
 8007c10:	6224      	str	r4, [r4, #32]
 8007c12:	429c      	cmp	r4, r3
 8007c14:	d006      	beq.n	8007c24 <std+0x48>
 8007c16:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007c1a:	4294      	cmp	r4, r2
 8007c1c:	d002      	beq.n	8007c24 <std+0x48>
 8007c1e:	33d0      	adds	r3, #208	; 0xd0
 8007c20:	429c      	cmp	r4, r3
 8007c22:	d105      	bne.n	8007c30 <std+0x54>
 8007c24:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007c28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c2c:	f000 b98e 	b.w	8007f4c <__retarget_lock_init_recursive>
 8007c30:	bd10      	pop	{r4, pc}
 8007c32:	bf00      	nop
 8007c34:	08008865 	.word	0x08008865
 8007c38:	08008887 	.word	0x08008887
 8007c3c:	080088bf 	.word	0x080088bf
 8007c40:	080088e3 	.word	0x080088e3
 8007c44:	200023cc 	.word	0x200023cc

08007c48 <stdio_exit_handler>:
 8007c48:	4a02      	ldr	r2, [pc, #8]	; (8007c54 <stdio_exit_handler+0xc>)
 8007c4a:	4903      	ldr	r1, [pc, #12]	; (8007c58 <stdio_exit_handler+0x10>)
 8007c4c:	4803      	ldr	r0, [pc, #12]	; (8007c5c <stdio_exit_handler+0x14>)
 8007c4e:	f000 b869 	b.w	8007d24 <_fwalk_sglue>
 8007c52:	bf00      	nop
 8007c54:	20000010 	.word	0x20000010
 8007c58:	080087fd 	.word	0x080087fd
 8007c5c:	2000001c 	.word	0x2000001c

08007c60 <cleanup_stdio>:
 8007c60:	6841      	ldr	r1, [r0, #4]
 8007c62:	4b0c      	ldr	r3, [pc, #48]	; (8007c94 <cleanup_stdio+0x34>)
 8007c64:	4299      	cmp	r1, r3
 8007c66:	b510      	push	{r4, lr}
 8007c68:	4604      	mov	r4, r0
 8007c6a:	d001      	beq.n	8007c70 <cleanup_stdio+0x10>
 8007c6c:	f000 fdc6 	bl	80087fc <_fflush_r>
 8007c70:	68a1      	ldr	r1, [r4, #8]
 8007c72:	4b09      	ldr	r3, [pc, #36]	; (8007c98 <cleanup_stdio+0x38>)
 8007c74:	4299      	cmp	r1, r3
 8007c76:	d002      	beq.n	8007c7e <cleanup_stdio+0x1e>
 8007c78:	4620      	mov	r0, r4
 8007c7a:	f000 fdbf 	bl	80087fc <_fflush_r>
 8007c7e:	68e1      	ldr	r1, [r4, #12]
 8007c80:	4b06      	ldr	r3, [pc, #24]	; (8007c9c <cleanup_stdio+0x3c>)
 8007c82:	4299      	cmp	r1, r3
 8007c84:	d004      	beq.n	8007c90 <cleanup_stdio+0x30>
 8007c86:	4620      	mov	r0, r4
 8007c88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c8c:	f000 bdb6 	b.w	80087fc <_fflush_r>
 8007c90:	bd10      	pop	{r4, pc}
 8007c92:	bf00      	nop
 8007c94:	200023cc 	.word	0x200023cc
 8007c98:	20002434 	.word	0x20002434
 8007c9c:	2000249c 	.word	0x2000249c

08007ca0 <global_stdio_init.part.0>:
 8007ca0:	b510      	push	{r4, lr}
 8007ca2:	4b0b      	ldr	r3, [pc, #44]	; (8007cd0 <global_stdio_init.part.0+0x30>)
 8007ca4:	4c0b      	ldr	r4, [pc, #44]	; (8007cd4 <global_stdio_init.part.0+0x34>)
 8007ca6:	4a0c      	ldr	r2, [pc, #48]	; (8007cd8 <global_stdio_init.part.0+0x38>)
 8007ca8:	601a      	str	r2, [r3, #0]
 8007caa:	4620      	mov	r0, r4
 8007cac:	2200      	movs	r2, #0
 8007cae:	2104      	movs	r1, #4
 8007cb0:	f7ff ff94 	bl	8007bdc <std>
 8007cb4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007cb8:	2201      	movs	r2, #1
 8007cba:	2109      	movs	r1, #9
 8007cbc:	f7ff ff8e 	bl	8007bdc <std>
 8007cc0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007cc4:	2202      	movs	r2, #2
 8007cc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cca:	2112      	movs	r1, #18
 8007ccc:	f7ff bf86 	b.w	8007bdc <std>
 8007cd0:	20002504 	.word	0x20002504
 8007cd4:	200023cc 	.word	0x200023cc
 8007cd8:	08007c49 	.word	0x08007c49

08007cdc <__sfp_lock_acquire>:
 8007cdc:	4801      	ldr	r0, [pc, #4]	; (8007ce4 <__sfp_lock_acquire+0x8>)
 8007cde:	f000 b936 	b.w	8007f4e <__retarget_lock_acquire_recursive>
 8007ce2:	bf00      	nop
 8007ce4:	2000250d 	.word	0x2000250d

08007ce8 <__sfp_lock_release>:
 8007ce8:	4801      	ldr	r0, [pc, #4]	; (8007cf0 <__sfp_lock_release+0x8>)
 8007cea:	f000 b931 	b.w	8007f50 <__retarget_lock_release_recursive>
 8007cee:	bf00      	nop
 8007cf0:	2000250d 	.word	0x2000250d

08007cf4 <__sinit>:
 8007cf4:	b510      	push	{r4, lr}
 8007cf6:	4604      	mov	r4, r0
 8007cf8:	f7ff fff0 	bl	8007cdc <__sfp_lock_acquire>
 8007cfc:	6a23      	ldr	r3, [r4, #32]
 8007cfe:	b11b      	cbz	r3, 8007d08 <__sinit+0x14>
 8007d00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d04:	f7ff bff0 	b.w	8007ce8 <__sfp_lock_release>
 8007d08:	4b04      	ldr	r3, [pc, #16]	; (8007d1c <__sinit+0x28>)
 8007d0a:	6223      	str	r3, [r4, #32]
 8007d0c:	4b04      	ldr	r3, [pc, #16]	; (8007d20 <__sinit+0x2c>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d1f5      	bne.n	8007d00 <__sinit+0xc>
 8007d14:	f7ff ffc4 	bl	8007ca0 <global_stdio_init.part.0>
 8007d18:	e7f2      	b.n	8007d00 <__sinit+0xc>
 8007d1a:	bf00      	nop
 8007d1c:	08007c61 	.word	0x08007c61
 8007d20:	20002504 	.word	0x20002504

08007d24 <_fwalk_sglue>:
 8007d24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d28:	4607      	mov	r7, r0
 8007d2a:	4688      	mov	r8, r1
 8007d2c:	4614      	mov	r4, r2
 8007d2e:	2600      	movs	r6, #0
 8007d30:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007d34:	f1b9 0901 	subs.w	r9, r9, #1
 8007d38:	d505      	bpl.n	8007d46 <_fwalk_sglue+0x22>
 8007d3a:	6824      	ldr	r4, [r4, #0]
 8007d3c:	2c00      	cmp	r4, #0
 8007d3e:	d1f7      	bne.n	8007d30 <_fwalk_sglue+0xc>
 8007d40:	4630      	mov	r0, r6
 8007d42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d46:	89ab      	ldrh	r3, [r5, #12]
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	d907      	bls.n	8007d5c <_fwalk_sglue+0x38>
 8007d4c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007d50:	3301      	adds	r3, #1
 8007d52:	d003      	beq.n	8007d5c <_fwalk_sglue+0x38>
 8007d54:	4629      	mov	r1, r5
 8007d56:	4638      	mov	r0, r7
 8007d58:	47c0      	blx	r8
 8007d5a:	4306      	orrs	r6, r0
 8007d5c:	3568      	adds	r5, #104	; 0x68
 8007d5e:	e7e9      	b.n	8007d34 <_fwalk_sglue+0x10>

08007d60 <iprintf>:
 8007d60:	b40f      	push	{r0, r1, r2, r3}
 8007d62:	b507      	push	{r0, r1, r2, lr}
 8007d64:	4906      	ldr	r1, [pc, #24]	; (8007d80 <iprintf+0x20>)
 8007d66:	ab04      	add	r3, sp, #16
 8007d68:	6808      	ldr	r0, [r1, #0]
 8007d6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d6e:	6881      	ldr	r1, [r0, #8]
 8007d70:	9301      	str	r3, [sp, #4]
 8007d72:	f000 f973 	bl	800805c <_vfiprintf_r>
 8007d76:	b003      	add	sp, #12
 8007d78:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d7c:	b004      	add	sp, #16
 8007d7e:	4770      	bx	lr
 8007d80:	20000068 	.word	0x20000068

08007d84 <_puts_r>:
 8007d84:	6a03      	ldr	r3, [r0, #32]
 8007d86:	b570      	push	{r4, r5, r6, lr}
 8007d88:	6884      	ldr	r4, [r0, #8]
 8007d8a:	4605      	mov	r5, r0
 8007d8c:	460e      	mov	r6, r1
 8007d8e:	b90b      	cbnz	r3, 8007d94 <_puts_r+0x10>
 8007d90:	f7ff ffb0 	bl	8007cf4 <__sinit>
 8007d94:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d96:	07db      	lsls	r3, r3, #31
 8007d98:	d405      	bmi.n	8007da6 <_puts_r+0x22>
 8007d9a:	89a3      	ldrh	r3, [r4, #12]
 8007d9c:	0598      	lsls	r0, r3, #22
 8007d9e:	d402      	bmi.n	8007da6 <_puts_r+0x22>
 8007da0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007da2:	f000 f8d4 	bl	8007f4e <__retarget_lock_acquire_recursive>
 8007da6:	89a3      	ldrh	r3, [r4, #12]
 8007da8:	0719      	lsls	r1, r3, #28
 8007daa:	d513      	bpl.n	8007dd4 <_puts_r+0x50>
 8007dac:	6923      	ldr	r3, [r4, #16]
 8007dae:	b18b      	cbz	r3, 8007dd4 <_puts_r+0x50>
 8007db0:	3e01      	subs	r6, #1
 8007db2:	68a3      	ldr	r3, [r4, #8]
 8007db4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007db8:	3b01      	subs	r3, #1
 8007dba:	60a3      	str	r3, [r4, #8]
 8007dbc:	b9e9      	cbnz	r1, 8007dfa <_puts_r+0x76>
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	da2e      	bge.n	8007e20 <_puts_r+0x9c>
 8007dc2:	4622      	mov	r2, r4
 8007dc4:	210a      	movs	r1, #10
 8007dc6:	4628      	mov	r0, r5
 8007dc8:	f000 fd8f 	bl	80088ea <__swbuf_r>
 8007dcc:	3001      	adds	r0, #1
 8007dce:	d007      	beq.n	8007de0 <_puts_r+0x5c>
 8007dd0:	250a      	movs	r5, #10
 8007dd2:	e007      	b.n	8007de4 <_puts_r+0x60>
 8007dd4:	4621      	mov	r1, r4
 8007dd6:	4628      	mov	r0, r5
 8007dd8:	f000 fdc4 	bl	8008964 <__swsetup_r>
 8007ddc:	2800      	cmp	r0, #0
 8007dde:	d0e7      	beq.n	8007db0 <_puts_r+0x2c>
 8007de0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007de4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007de6:	07da      	lsls	r2, r3, #31
 8007de8:	d405      	bmi.n	8007df6 <_puts_r+0x72>
 8007dea:	89a3      	ldrh	r3, [r4, #12]
 8007dec:	059b      	lsls	r3, r3, #22
 8007dee:	d402      	bmi.n	8007df6 <_puts_r+0x72>
 8007df0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007df2:	f000 f8ad 	bl	8007f50 <__retarget_lock_release_recursive>
 8007df6:	4628      	mov	r0, r5
 8007df8:	bd70      	pop	{r4, r5, r6, pc}
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	da04      	bge.n	8007e08 <_puts_r+0x84>
 8007dfe:	69a2      	ldr	r2, [r4, #24]
 8007e00:	429a      	cmp	r2, r3
 8007e02:	dc06      	bgt.n	8007e12 <_puts_r+0x8e>
 8007e04:	290a      	cmp	r1, #10
 8007e06:	d004      	beq.n	8007e12 <_puts_r+0x8e>
 8007e08:	6823      	ldr	r3, [r4, #0]
 8007e0a:	1c5a      	adds	r2, r3, #1
 8007e0c:	6022      	str	r2, [r4, #0]
 8007e0e:	7019      	strb	r1, [r3, #0]
 8007e10:	e7cf      	b.n	8007db2 <_puts_r+0x2e>
 8007e12:	4622      	mov	r2, r4
 8007e14:	4628      	mov	r0, r5
 8007e16:	f000 fd68 	bl	80088ea <__swbuf_r>
 8007e1a:	3001      	adds	r0, #1
 8007e1c:	d1c9      	bne.n	8007db2 <_puts_r+0x2e>
 8007e1e:	e7df      	b.n	8007de0 <_puts_r+0x5c>
 8007e20:	6823      	ldr	r3, [r4, #0]
 8007e22:	250a      	movs	r5, #10
 8007e24:	1c5a      	adds	r2, r3, #1
 8007e26:	6022      	str	r2, [r4, #0]
 8007e28:	701d      	strb	r5, [r3, #0]
 8007e2a:	e7db      	b.n	8007de4 <_puts_r+0x60>

08007e2c <puts>:
 8007e2c:	4b02      	ldr	r3, [pc, #8]	; (8007e38 <puts+0xc>)
 8007e2e:	4601      	mov	r1, r0
 8007e30:	6818      	ldr	r0, [r3, #0]
 8007e32:	f7ff bfa7 	b.w	8007d84 <_puts_r>
 8007e36:	bf00      	nop
 8007e38:	20000068 	.word	0x20000068

08007e3c <memset>:
 8007e3c:	4402      	add	r2, r0
 8007e3e:	4603      	mov	r3, r0
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d100      	bne.n	8007e46 <memset+0xa>
 8007e44:	4770      	bx	lr
 8007e46:	f803 1b01 	strb.w	r1, [r3], #1
 8007e4a:	e7f9      	b.n	8007e40 <memset+0x4>

08007e4c <_reclaim_reent>:
 8007e4c:	4b29      	ldr	r3, [pc, #164]	; (8007ef4 <_reclaim_reent+0xa8>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4283      	cmp	r3, r0
 8007e52:	b570      	push	{r4, r5, r6, lr}
 8007e54:	4604      	mov	r4, r0
 8007e56:	d04b      	beq.n	8007ef0 <_reclaim_reent+0xa4>
 8007e58:	69c3      	ldr	r3, [r0, #28]
 8007e5a:	b143      	cbz	r3, 8007e6e <_reclaim_reent+0x22>
 8007e5c:	68db      	ldr	r3, [r3, #12]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d144      	bne.n	8007eec <_reclaim_reent+0xa0>
 8007e62:	69e3      	ldr	r3, [r4, #28]
 8007e64:	6819      	ldr	r1, [r3, #0]
 8007e66:	b111      	cbz	r1, 8007e6e <_reclaim_reent+0x22>
 8007e68:	4620      	mov	r0, r4
 8007e6a:	f000 f881 	bl	8007f70 <_free_r>
 8007e6e:	6961      	ldr	r1, [r4, #20]
 8007e70:	b111      	cbz	r1, 8007e78 <_reclaim_reent+0x2c>
 8007e72:	4620      	mov	r0, r4
 8007e74:	f000 f87c 	bl	8007f70 <_free_r>
 8007e78:	69e1      	ldr	r1, [r4, #28]
 8007e7a:	b111      	cbz	r1, 8007e82 <_reclaim_reent+0x36>
 8007e7c:	4620      	mov	r0, r4
 8007e7e:	f000 f877 	bl	8007f70 <_free_r>
 8007e82:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007e84:	b111      	cbz	r1, 8007e8c <_reclaim_reent+0x40>
 8007e86:	4620      	mov	r0, r4
 8007e88:	f000 f872 	bl	8007f70 <_free_r>
 8007e8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e8e:	b111      	cbz	r1, 8007e96 <_reclaim_reent+0x4a>
 8007e90:	4620      	mov	r0, r4
 8007e92:	f000 f86d 	bl	8007f70 <_free_r>
 8007e96:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007e98:	b111      	cbz	r1, 8007ea0 <_reclaim_reent+0x54>
 8007e9a:	4620      	mov	r0, r4
 8007e9c:	f000 f868 	bl	8007f70 <_free_r>
 8007ea0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007ea2:	b111      	cbz	r1, 8007eaa <_reclaim_reent+0x5e>
 8007ea4:	4620      	mov	r0, r4
 8007ea6:	f000 f863 	bl	8007f70 <_free_r>
 8007eaa:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8007eac:	b111      	cbz	r1, 8007eb4 <_reclaim_reent+0x68>
 8007eae:	4620      	mov	r0, r4
 8007eb0:	f000 f85e 	bl	8007f70 <_free_r>
 8007eb4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007eb6:	b111      	cbz	r1, 8007ebe <_reclaim_reent+0x72>
 8007eb8:	4620      	mov	r0, r4
 8007eba:	f000 f859 	bl	8007f70 <_free_r>
 8007ebe:	6a23      	ldr	r3, [r4, #32]
 8007ec0:	b1b3      	cbz	r3, 8007ef0 <_reclaim_reent+0xa4>
 8007ec2:	4620      	mov	r0, r4
 8007ec4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007ec8:	4718      	bx	r3
 8007eca:	5949      	ldr	r1, [r1, r5]
 8007ecc:	b941      	cbnz	r1, 8007ee0 <_reclaim_reent+0x94>
 8007ece:	3504      	adds	r5, #4
 8007ed0:	69e3      	ldr	r3, [r4, #28]
 8007ed2:	2d80      	cmp	r5, #128	; 0x80
 8007ed4:	68d9      	ldr	r1, [r3, #12]
 8007ed6:	d1f8      	bne.n	8007eca <_reclaim_reent+0x7e>
 8007ed8:	4620      	mov	r0, r4
 8007eda:	f000 f849 	bl	8007f70 <_free_r>
 8007ede:	e7c0      	b.n	8007e62 <_reclaim_reent+0x16>
 8007ee0:	680e      	ldr	r6, [r1, #0]
 8007ee2:	4620      	mov	r0, r4
 8007ee4:	f000 f844 	bl	8007f70 <_free_r>
 8007ee8:	4631      	mov	r1, r6
 8007eea:	e7ef      	b.n	8007ecc <_reclaim_reent+0x80>
 8007eec:	2500      	movs	r5, #0
 8007eee:	e7ef      	b.n	8007ed0 <_reclaim_reent+0x84>
 8007ef0:	bd70      	pop	{r4, r5, r6, pc}
 8007ef2:	bf00      	nop
 8007ef4:	20000068 	.word	0x20000068

08007ef8 <__errno>:
 8007ef8:	4b01      	ldr	r3, [pc, #4]	; (8007f00 <__errno+0x8>)
 8007efa:	6818      	ldr	r0, [r3, #0]
 8007efc:	4770      	bx	lr
 8007efe:	bf00      	nop
 8007f00:	20000068 	.word	0x20000068

08007f04 <__libc_init_array>:
 8007f04:	b570      	push	{r4, r5, r6, lr}
 8007f06:	4d0d      	ldr	r5, [pc, #52]	; (8007f3c <__libc_init_array+0x38>)
 8007f08:	4c0d      	ldr	r4, [pc, #52]	; (8007f40 <__libc_init_array+0x3c>)
 8007f0a:	1b64      	subs	r4, r4, r5
 8007f0c:	10a4      	asrs	r4, r4, #2
 8007f0e:	2600      	movs	r6, #0
 8007f10:	42a6      	cmp	r6, r4
 8007f12:	d109      	bne.n	8007f28 <__libc_init_array+0x24>
 8007f14:	4d0b      	ldr	r5, [pc, #44]	; (8007f44 <__libc_init_array+0x40>)
 8007f16:	4c0c      	ldr	r4, [pc, #48]	; (8007f48 <__libc_init_array+0x44>)
 8007f18:	f000 fe56 	bl	8008bc8 <_init>
 8007f1c:	1b64      	subs	r4, r4, r5
 8007f1e:	10a4      	asrs	r4, r4, #2
 8007f20:	2600      	movs	r6, #0
 8007f22:	42a6      	cmp	r6, r4
 8007f24:	d105      	bne.n	8007f32 <__libc_init_array+0x2e>
 8007f26:	bd70      	pop	{r4, r5, r6, pc}
 8007f28:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f2c:	4798      	blx	r3
 8007f2e:	3601      	adds	r6, #1
 8007f30:	e7ee      	b.n	8007f10 <__libc_init_array+0xc>
 8007f32:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f36:	4798      	blx	r3
 8007f38:	3601      	adds	r6, #1
 8007f3a:	e7f2      	b.n	8007f22 <__libc_init_array+0x1e>
 8007f3c:	08008dc4 	.word	0x08008dc4
 8007f40:	08008dc4 	.word	0x08008dc4
 8007f44:	08008dc4 	.word	0x08008dc4
 8007f48:	08008dc8 	.word	0x08008dc8

08007f4c <__retarget_lock_init_recursive>:
 8007f4c:	4770      	bx	lr

08007f4e <__retarget_lock_acquire_recursive>:
 8007f4e:	4770      	bx	lr

08007f50 <__retarget_lock_release_recursive>:
 8007f50:	4770      	bx	lr

08007f52 <memcpy>:
 8007f52:	440a      	add	r2, r1
 8007f54:	4291      	cmp	r1, r2
 8007f56:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007f5a:	d100      	bne.n	8007f5e <memcpy+0xc>
 8007f5c:	4770      	bx	lr
 8007f5e:	b510      	push	{r4, lr}
 8007f60:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f64:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f68:	4291      	cmp	r1, r2
 8007f6a:	d1f9      	bne.n	8007f60 <memcpy+0xe>
 8007f6c:	bd10      	pop	{r4, pc}
	...

08007f70 <_free_r>:
 8007f70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007f72:	2900      	cmp	r1, #0
 8007f74:	d044      	beq.n	8008000 <_free_r+0x90>
 8007f76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f7a:	9001      	str	r0, [sp, #4]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	f1a1 0404 	sub.w	r4, r1, #4
 8007f82:	bfb8      	it	lt
 8007f84:	18e4      	addlt	r4, r4, r3
 8007f86:	f000 fc61 	bl	800884c <__malloc_lock>
 8007f8a:	4a1e      	ldr	r2, [pc, #120]	; (8008004 <_free_r+0x94>)
 8007f8c:	9801      	ldr	r0, [sp, #4]
 8007f8e:	6813      	ldr	r3, [r2, #0]
 8007f90:	b933      	cbnz	r3, 8007fa0 <_free_r+0x30>
 8007f92:	6063      	str	r3, [r4, #4]
 8007f94:	6014      	str	r4, [r2, #0]
 8007f96:	b003      	add	sp, #12
 8007f98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007f9c:	f000 bc5c 	b.w	8008858 <__malloc_unlock>
 8007fa0:	42a3      	cmp	r3, r4
 8007fa2:	d908      	bls.n	8007fb6 <_free_r+0x46>
 8007fa4:	6825      	ldr	r5, [r4, #0]
 8007fa6:	1961      	adds	r1, r4, r5
 8007fa8:	428b      	cmp	r3, r1
 8007faa:	bf01      	itttt	eq
 8007fac:	6819      	ldreq	r1, [r3, #0]
 8007fae:	685b      	ldreq	r3, [r3, #4]
 8007fb0:	1949      	addeq	r1, r1, r5
 8007fb2:	6021      	streq	r1, [r4, #0]
 8007fb4:	e7ed      	b.n	8007f92 <_free_r+0x22>
 8007fb6:	461a      	mov	r2, r3
 8007fb8:	685b      	ldr	r3, [r3, #4]
 8007fba:	b10b      	cbz	r3, 8007fc0 <_free_r+0x50>
 8007fbc:	42a3      	cmp	r3, r4
 8007fbe:	d9fa      	bls.n	8007fb6 <_free_r+0x46>
 8007fc0:	6811      	ldr	r1, [r2, #0]
 8007fc2:	1855      	adds	r5, r2, r1
 8007fc4:	42a5      	cmp	r5, r4
 8007fc6:	d10b      	bne.n	8007fe0 <_free_r+0x70>
 8007fc8:	6824      	ldr	r4, [r4, #0]
 8007fca:	4421      	add	r1, r4
 8007fcc:	1854      	adds	r4, r2, r1
 8007fce:	42a3      	cmp	r3, r4
 8007fd0:	6011      	str	r1, [r2, #0]
 8007fd2:	d1e0      	bne.n	8007f96 <_free_r+0x26>
 8007fd4:	681c      	ldr	r4, [r3, #0]
 8007fd6:	685b      	ldr	r3, [r3, #4]
 8007fd8:	6053      	str	r3, [r2, #4]
 8007fda:	440c      	add	r4, r1
 8007fdc:	6014      	str	r4, [r2, #0]
 8007fde:	e7da      	b.n	8007f96 <_free_r+0x26>
 8007fe0:	d902      	bls.n	8007fe8 <_free_r+0x78>
 8007fe2:	230c      	movs	r3, #12
 8007fe4:	6003      	str	r3, [r0, #0]
 8007fe6:	e7d6      	b.n	8007f96 <_free_r+0x26>
 8007fe8:	6825      	ldr	r5, [r4, #0]
 8007fea:	1961      	adds	r1, r4, r5
 8007fec:	428b      	cmp	r3, r1
 8007fee:	bf04      	itt	eq
 8007ff0:	6819      	ldreq	r1, [r3, #0]
 8007ff2:	685b      	ldreq	r3, [r3, #4]
 8007ff4:	6063      	str	r3, [r4, #4]
 8007ff6:	bf04      	itt	eq
 8007ff8:	1949      	addeq	r1, r1, r5
 8007ffa:	6021      	streq	r1, [r4, #0]
 8007ffc:	6054      	str	r4, [r2, #4]
 8007ffe:	e7ca      	b.n	8007f96 <_free_r+0x26>
 8008000:	b003      	add	sp, #12
 8008002:	bd30      	pop	{r4, r5, pc}
 8008004:	20002510 	.word	0x20002510

08008008 <__sfputc_r>:
 8008008:	6893      	ldr	r3, [r2, #8]
 800800a:	3b01      	subs	r3, #1
 800800c:	2b00      	cmp	r3, #0
 800800e:	b410      	push	{r4}
 8008010:	6093      	str	r3, [r2, #8]
 8008012:	da08      	bge.n	8008026 <__sfputc_r+0x1e>
 8008014:	6994      	ldr	r4, [r2, #24]
 8008016:	42a3      	cmp	r3, r4
 8008018:	db01      	blt.n	800801e <__sfputc_r+0x16>
 800801a:	290a      	cmp	r1, #10
 800801c:	d103      	bne.n	8008026 <__sfputc_r+0x1e>
 800801e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008022:	f000 bc62 	b.w	80088ea <__swbuf_r>
 8008026:	6813      	ldr	r3, [r2, #0]
 8008028:	1c58      	adds	r0, r3, #1
 800802a:	6010      	str	r0, [r2, #0]
 800802c:	7019      	strb	r1, [r3, #0]
 800802e:	4608      	mov	r0, r1
 8008030:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008034:	4770      	bx	lr

08008036 <__sfputs_r>:
 8008036:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008038:	4606      	mov	r6, r0
 800803a:	460f      	mov	r7, r1
 800803c:	4614      	mov	r4, r2
 800803e:	18d5      	adds	r5, r2, r3
 8008040:	42ac      	cmp	r4, r5
 8008042:	d101      	bne.n	8008048 <__sfputs_r+0x12>
 8008044:	2000      	movs	r0, #0
 8008046:	e007      	b.n	8008058 <__sfputs_r+0x22>
 8008048:	f814 1b01 	ldrb.w	r1, [r4], #1
 800804c:	463a      	mov	r2, r7
 800804e:	4630      	mov	r0, r6
 8008050:	f7ff ffda 	bl	8008008 <__sfputc_r>
 8008054:	1c43      	adds	r3, r0, #1
 8008056:	d1f3      	bne.n	8008040 <__sfputs_r+0xa>
 8008058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800805c <_vfiprintf_r>:
 800805c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008060:	460d      	mov	r5, r1
 8008062:	b09d      	sub	sp, #116	; 0x74
 8008064:	4614      	mov	r4, r2
 8008066:	4698      	mov	r8, r3
 8008068:	4606      	mov	r6, r0
 800806a:	b118      	cbz	r0, 8008074 <_vfiprintf_r+0x18>
 800806c:	6a03      	ldr	r3, [r0, #32]
 800806e:	b90b      	cbnz	r3, 8008074 <_vfiprintf_r+0x18>
 8008070:	f7ff fe40 	bl	8007cf4 <__sinit>
 8008074:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008076:	07d9      	lsls	r1, r3, #31
 8008078:	d405      	bmi.n	8008086 <_vfiprintf_r+0x2a>
 800807a:	89ab      	ldrh	r3, [r5, #12]
 800807c:	059a      	lsls	r2, r3, #22
 800807e:	d402      	bmi.n	8008086 <_vfiprintf_r+0x2a>
 8008080:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008082:	f7ff ff64 	bl	8007f4e <__retarget_lock_acquire_recursive>
 8008086:	89ab      	ldrh	r3, [r5, #12]
 8008088:	071b      	lsls	r3, r3, #28
 800808a:	d501      	bpl.n	8008090 <_vfiprintf_r+0x34>
 800808c:	692b      	ldr	r3, [r5, #16]
 800808e:	b99b      	cbnz	r3, 80080b8 <_vfiprintf_r+0x5c>
 8008090:	4629      	mov	r1, r5
 8008092:	4630      	mov	r0, r6
 8008094:	f000 fc66 	bl	8008964 <__swsetup_r>
 8008098:	b170      	cbz	r0, 80080b8 <_vfiprintf_r+0x5c>
 800809a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800809c:	07dc      	lsls	r4, r3, #31
 800809e:	d504      	bpl.n	80080aa <_vfiprintf_r+0x4e>
 80080a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80080a4:	b01d      	add	sp, #116	; 0x74
 80080a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080aa:	89ab      	ldrh	r3, [r5, #12]
 80080ac:	0598      	lsls	r0, r3, #22
 80080ae:	d4f7      	bmi.n	80080a0 <_vfiprintf_r+0x44>
 80080b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80080b2:	f7ff ff4d 	bl	8007f50 <__retarget_lock_release_recursive>
 80080b6:	e7f3      	b.n	80080a0 <_vfiprintf_r+0x44>
 80080b8:	2300      	movs	r3, #0
 80080ba:	9309      	str	r3, [sp, #36]	; 0x24
 80080bc:	2320      	movs	r3, #32
 80080be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80080c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80080c6:	2330      	movs	r3, #48	; 0x30
 80080c8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800827c <_vfiprintf_r+0x220>
 80080cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80080d0:	f04f 0901 	mov.w	r9, #1
 80080d4:	4623      	mov	r3, r4
 80080d6:	469a      	mov	sl, r3
 80080d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080dc:	b10a      	cbz	r2, 80080e2 <_vfiprintf_r+0x86>
 80080de:	2a25      	cmp	r2, #37	; 0x25
 80080e0:	d1f9      	bne.n	80080d6 <_vfiprintf_r+0x7a>
 80080e2:	ebba 0b04 	subs.w	fp, sl, r4
 80080e6:	d00b      	beq.n	8008100 <_vfiprintf_r+0xa4>
 80080e8:	465b      	mov	r3, fp
 80080ea:	4622      	mov	r2, r4
 80080ec:	4629      	mov	r1, r5
 80080ee:	4630      	mov	r0, r6
 80080f0:	f7ff ffa1 	bl	8008036 <__sfputs_r>
 80080f4:	3001      	adds	r0, #1
 80080f6:	f000 80a9 	beq.w	800824c <_vfiprintf_r+0x1f0>
 80080fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080fc:	445a      	add	r2, fp
 80080fe:	9209      	str	r2, [sp, #36]	; 0x24
 8008100:	f89a 3000 	ldrb.w	r3, [sl]
 8008104:	2b00      	cmp	r3, #0
 8008106:	f000 80a1 	beq.w	800824c <_vfiprintf_r+0x1f0>
 800810a:	2300      	movs	r3, #0
 800810c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008110:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008114:	f10a 0a01 	add.w	sl, sl, #1
 8008118:	9304      	str	r3, [sp, #16]
 800811a:	9307      	str	r3, [sp, #28]
 800811c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008120:	931a      	str	r3, [sp, #104]	; 0x68
 8008122:	4654      	mov	r4, sl
 8008124:	2205      	movs	r2, #5
 8008126:	f814 1b01 	ldrb.w	r1, [r4], #1
 800812a:	4854      	ldr	r0, [pc, #336]	; (800827c <_vfiprintf_r+0x220>)
 800812c:	f7f8 f850 	bl	80001d0 <memchr>
 8008130:	9a04      	ldr	r2, [sp, #16]
 8008132:	b9d8      	cbnz	r0, 800816c <_vfiprintf_r+0x110>
 8008134:	06d1      	lsls	r1, r2, #27
 8008136:	bf44      	itt	mi
 8008138:	2320      	movmi	r3, #32
 800813a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800813e:	0713      	lsls	r3, r2, #28
 8008140:	bf44      	itt	mi
 8008142:	232b      	movmi	r3, #43	; 0x2b
 8008144:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008148:	f89a 3000 	ldrb.w	r3, [sl]
 800814c:	2b2a      	cmp	r3, #42	; 0x2a
 800814e:	d015      	beq.n	800817c <_vfiprintf_r+0x120>
 8008150:	9a07      	ldr	r2, [sp, #28]
 8008152:	4654      	mov	r4, sl
 8008154:	2000      	movs	r0, #0
 8008156:	f04f 0c0a 	mov.w	ip, #10
 800815a:	4621      	mov	r1, r4
 800815c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008160:	3b30      	subs	r3, #48	; 0x30
 8008162:	2b09      	cmp	r3, #9
 8008164:	d94d      	bls.n	8008202 <_vfiprintf_r+0x1a6>
 8008166:	b1b0      	cbz	r0, 8008196 <_vfiprintf_r+0x13a>
 8008168:	9207      	str	r2, [sp, #28]
 800816a:	e014      	b.n	8008196 <_vfiprintf_r+0x13a>
 800816c:	eba0 0308 	sub.w	r3, r0, r8
 8008170:	fa09 f303 	lsl.w	r3, r9, r3
 8008174:	4313      	orrs	r3, r2
 8008176:	9304      	str	r3, [sp, #16]
 8008178:	46a2      	mov	sl, r4
 800817a:	e7d2      	b.n	8008122 <_vfiprintf_r+0xc6>
 800817c:	9b03      	ldr	r3, [sp, #12]
 800817e:	1d19      	adds	r1, r3, #4
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	9103      	str	r1, [sp, #12]
 8008184:	2b00      	cmp	r3, #0
 8008186:	bfbb      	ittet	lt
 8008188:	425b      	neglt	r3, r3
 800818a:	f042 0202 	orrlt.w	r2, r2, #2
 800818e:	9307      	strge	r3, [sp, #28]
 8008190:	9307      	strlt	r3, [sp, #28]
 8008192:	bfb8      	it	lt
 8008194:	9204      	strlt	r2, [sp, #16]
 8008196:	7823      	ldrb	r3, [r4, #0]
 8008198:	2b2e      	cmp	r3, #46	; 0x2e
 800819a:	d10c      	bne.n	80081b6 <_vfiprintf_r+0x15a>
 800819c:	7863      	ldrb	r3, [r4, #1]
 800819e:	2b2a      	cmp	r3, #42	; 0x2a
 80081a0:	d134      	bne.n	800820c <_vfiprintf_r+0x1b0>
 80081a2:	9b03      	ldr	r3, [sp, #12]
 80081a4:	1d1a      	adds	r2, r3, #4
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	9203      	str	r2, [sp, #12]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	bfb8      	it	lt
 80081ae:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80081b2:	3402      	adds	r4, #2
 80081b4:	9305      	str	r3, [sp, #20]
 80081b6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800828c <_vfiprintf_r+0x230>
 80081ba:	7821      	ldrb	r1, [r4, #0]
 80081bc:	2203      	movs	r2, #3
 80081be:	4650      	mov	r0, sl
 80081c0:	f7f8 f806 	bl	80001d0 <memchr>
 80081c4:	b138      	cbz	r0, 80081d6 <_vfiprintf_r+0x17a>
 80081c6:	9b04      	ldr	r3, [sp, #16]
 80081c8:	eba0 000a 	sub.w	r0, r0, sl
 80081cc:	2240      	movs	r2, #64	; 0x40
 80081ce:	4082      	lsls	r2, r0
 80081d0:	4313      	orrs	r3, r2
 80081d2:	3401      	adds	r4, #1
 80081d4:	9304      	str	r3, [sp, #16]
 80081d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081da:	4829      	ldr	r0, [pc, #164]	; (8008280 <_vfiprintf_r+0x224>)
 80081dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80081e0:	2206      	movs	r2, #6
 80081e2:	f7f7 fff5 	bl	80001d0 <memchr>
 80081e6:	2800      	cmp	r0, #0
 80081e8:	d03f      	beq.n	800826a <_vfiprintf_r+0x20e>
 80081ea:	4b26      	ldr	r3, [pc, #152]	; (8008284 <_vfiprintf_r+0x228>)
 80081ec:	bb1b      	cbnz	r3, 8008236 <_vfiprintf_r+0x1da>
 80081ee:	9b03      	ldr	r3, [sp, #12]
 80081f0:	3307      	adds	r3, #7
 80081f2:	f023 0307 	bic.w	r3, r3, #7
 80081f6:	3308      	adds	r3, #8
 80081f8:	9303      	str	r3, [sp, #12]
 80081fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081fc:	443b      	add	r3, r7
 80081fe:	9309      	str	r3, [sp, #36]	; 0x24
 8008200:	e768      	b.n	80080d4 <_vfiprintf_r+0x78>
 8008202:	fb0c 3202 	mla	r2, ip, r2, r3
 8008206:	460c      	mov	r4, r1
 8008208:	2001      	movs	r0, #1
 800820a:	e7a6      	b.n	800815a <_vfiprintf_r+0xfe>
 800820c:	2300      	movs	r3, #0
 800820e:	3401      	adds	r4, #1
 8008210:	9305      	str	r3, [sp, #20]
 8008212:	4619      	mov	r1, r3
 8008214:	f04f 0c0a 	mov.w	ip, #10
 8008218:	4620      	mov	r0, r4
 800821a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800821e:	3a30      	subs	r2, #48	; 0x30
 8008220:	2a09      	cmp	r2, #9
 8008222:	d903      	bls.n	800822c <_vfiprintf_r+0x1d0>
 8008224:	2b00      	cmp	r3, #0
 8008226:	d0c6      	beq.n	80081b6 <_vfiprintf_r+0x15a>
 8008228:	9105      	str	r1, [sp, #20]
 800822a:	e7c4      	b.n	80081b6 <_vfiprintf_r+0x15a>
 800822c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008230:	4604      	mov	r4, r0
 8008232:	2301      	movs	r3, #1
 8008234:	e7f0      	b.n	8008218 <_vfiprintf_r+0x1bc>
 8008236:	ab03      	add	r3, sp, #12
 8008238:	9300      	str	r3, [sp, #0]
 800823a:	462a      	mov	r2, r5
 800823c:	4b12      	ldr	r3, [pc, #72]	; (8008288 <_vfiprintf_r+0x22c>)
 800823e:	a904      	add	r1, sp, #16
 8008240:	4630      	mov	r0, r6
 8008242:	f3af 8000 	nop.w
 8008246:	4607      	mov	r7, r0
 8008248:	1c78      	adds	r0, r7, #1
 800824a:	d1d6      	bne.n	80081fa <_vfiprintf_r+0x19e>
 800824c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800824e:	07d9      	lsls	r1, r3, #31
 8008250:	d405      	bmi.n	800825e <_vfiprintf_r+0x202>
 8008252:	89ab      	ldrh	r3, [r5, #12]
 8008254:	059a      	lsls	r2, r3, #22
 8008256:	d402      	bmi.n	800825e <_vfiprintf_r+0x202>
 8008258:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800825a:	f7ff fe79 	bl	8007f50 <__retarget_lock_release_recursive>
 800825e:	89ab      	ldrh	r3, [r5, #12]
 8008260:	065b      	lsls	r3, r3, #25
 8008262:	f53f af1d 	bmi.w	80080a0 <_vfiprintf_r+0x44>
 8008266:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008268:	e71c      	b.n	80080a4 <_vfiprintf_r+0x48>
 800826a:	ab03      	add	r3, sp, #12
 800826c:	9300      	str	r3, [sp, #0]
 800826e:	462a      	mov	r2, r5
 8008270:	4b05      	ldr	r3, [pc, #20]	; (8008288 <_vfiprintf_r+0x22c>)
 8008272:	a904      	add	r1, sp, #16
 8008274:	4630      	mov	r0, r6
 8008276:	f000 f919 	bl	80084ac <_printf_i>
 800827a:	e7e4      	b.n	8008246 <_vfiprintf_r+0x1ea>
 800827c:	08008d88 	.word	0x08008d88
 8008280:	08008d92 	.word	0x08008d92
 8008284:	00000000 	.word	0x00000000
 8008288:	08008037 	.word	0x08008037
 800828c:	08008d8e 	.word	0x08008d8e

08008290 <sbrk_aligned>:
 8008290:	b570      	push	{r4, r5, r6, lr}
 8008292:	4e0e      	ldr	r6, [pc, #56]	; (80082cc <sbrk_aligned+0x3c>)
 8008294:	460c      	mov	r4, r1
 8008296:	6831      	ldr	r1, [r6, #0]
 8008298:	4605      	mov	r5, r0
 800829a:	b911      	cbnz	r1, 80082a2 <sbrk_aligned+0x12>
 800829c:	f000 fc72 	bl	8008b84 <_sbrk_r>
 80082a0:	6030      	str	r0, [r6, #0]
 80082a2:	4621      	mov	r1, r4
 80082a4:	4628      	mov	r0, r5
 80082a6:	f000 fc6d 	bl	8008b84 <_sbrk_r>
 80082aa:	1c43      	adds	r3, r0, #1
 80082ac:	d00a      	beq.n	80082c4 <sbrk_aligned+0x34>
 80082ae:	1cc4      	adds	r4, r0, #3
 80082b0:	f024 0403 	bic.w	r4, r4, #3
 80082b4:	42a0      	cmp	r0, r4
 80082b6:	d007      	beq.n	80082c8 <sbrk_aligned+0x38>
 80082b8:	1a21      	subs	r1, r4, r0
 80082ba:	4628      	mov	r0, r5
 80082bc:	f000 fc62 	bl	8008b84 <_sbrk_r>
 80082c0:	3001      	adds	r0, #1
 80082c2:	d101      	bne.n	80082c8 <sbrk_aligned+0x38>
 80082c4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80082c8:	4620      	mov	r0, r4
 80082ca:	bd70      	pop	{r4, r5, r6, pc}
 80082cc:	20002514 	.word	0x20002514

080082d0 <_malloc_r>:
 80082d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082d4:	1ccd      	adds	r5, r1, #3
 80082d6:	f025 0503 	bic.w	r5, r5, #3
 80082da:	3508      	adds	r5, #8
 80082dc:	2d0c      	cmp	r5, #12
 80082de:	bf38      	it	cc
 80082e0:	250c      	movcc	r5, #12
 80082e2:	2d00      	cmp	r5, #0
 80082e4:	4607      	mov	r7, r0
 80082e6:	db01      	blt.n	80082ec <_malloc_r+0x1c>
 80082e8:	42a9      	cmp	r1, r5
 80082ea:	d905      	bls.n	80082f8 <_malloc_r+0x28>
 80082ec:	230c      	movs	r3, #12
 80082ee:	603b      	str	r3, [r7, #0]
 80082f0:	2600      	movs	r6, #0
 80082f2:	4630      	mov	r0, r6
 80082f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082f8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80083cc <_malloc_r+0xfc>
 80082fc:	f000 faa6 	bl	800884c <__malloc_lock>
 8008300:	f8d8 3000 	ldr.w	r3, [r8]
 8008304:	461c      	mov	r4, r3
 8008306:	bb5c      	cbnz	r4, 8008360 <_malloc_r+0x90>
 8008308:	4629      	mov	r1, r5
 800830a:	4638      	mov	r0, r7
 800830c:	f7ff ffc0 	bl	8008290 <sbrk_aligned>
 8008310:	1c43      	adds	r3, r0, #1
 8008312:	4604      	mov	r4, r0
 8008314:	d155      	bne.n	80083c2 <_malloc_r+0xf2>
 8008316:	f8d8 4000 	ldr.w	r4, [r8]
 800831a:	4626      	mov	r6, r4
 800831c:	2e00      	cmp	r6, #0
 800831e:	d145      	bne.n	80083ac <_malloc_r+0xdc>
 8008320:	2c00      	cmp	r4, #0
 8008322:	d048      	beq.n	80083b6 <_malloc_r+0xe6>
 8008324:	6823      	ldr	r3, [r4, #0]
 8008326:	4631      	mov	r1, r6
 8008328:	4638      	mov	r0, r7
 800832a:	eb04 0903 	add.w	r9, r4, r3
 800832e:	f000 fc29 	bl	8008b84 <_sbrk_r>
 8008332:	4581      	cmp	r9, r0
 8008334:	d13f      	bne.n	80083b6 <_malloc_r+0xe6>
 8008336:	6821      	ldr	r1, [r4, #0]
 8008338:	1a6d      	subs	r5, r5, r1
 800833a:	4629      	mov	r1, r5
 800833c:	4638      	mov	r0, r7
 800833e:	f7ff ffa7 	bl	8008290 <sbrk_aligned>
 8008342:	3001      	adds	r0, #1
 8008344:	d037      	beq.n	80083b6 <_malloc_r+0xe6>
 8008346:	6823      	ldr	r3, [r4, #0]
 8008348:	442b      	add	r3, r5
 800834a:	6023      	str	r3, [r4, #0]
 800834c:	f8d8 3000 	ldr.w	r3, [r8]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d038      	beq.n	80083c6 <_malloc_r+0xf6>
 8008354:	685a      	ldr	r2, [r3, #4]
 8008356:	42a2      	cmp	r2, r4
 8008358:	d12b      	bne.n	80083b2 <_malloc_r+0xe2>
 800835a:	2200      	movs	r2, #0
 800835c:	605a      	str	r2, [r3, #4]
 800835e:	e00f      	b.n	8008380 <_malloc_r+0xb0>
 8008360:	6822      	ldr	r2, [r4, #0]
 8008362:	1b52      	subs	r2, r2, r5
 8008364:	d41f      	bmi.n	80083a6 <_malloc_r+0xd6>
 8008366:	2a0b      	cmp	r2, #11
 8008368:	d917      	bls.n	800839a <_malloc_r+0xca>
 800836a:	1961      	adds	r1, r4, r5
 800836c:	42a3      	cmp	r3, r4
 800836e:	6025      	str	r5, [r4, #0]
 8008370:	bf18      	it	ne
 8008372:	6059      	strne	r1, [r3, #4]
 8008374:	6863      	ldr	r3, [r4, #4]
 8008376:	bf08      	it	eq
 8008378:	f8c8 1000 	streq.w	r1, [r8]
 800837c:	5162      	str	r2, [r4, r5]
 800837e:	604b      	str	r3, [r1, #4]
 8008380:	4638      	mov	r0, r7
 8008382:	f104 060b 	add.w	r6, r4, #11
 8008386:	f000 fa67 	bl	8008858 <__malloc_unlock>
 800838a:	f026 0607 	bic.w	r6, r6, #7
 800838e:	1d23      	adds	r3, r4, #4
 8008390:	1af2      	subs	r2, r6, r3
 8008392:	d0ae      	beq.n	80082f2 <_malloc_r+0x22>
 8008394:	1b9b      	subs	r3, r3, r6
 8008396:	50a3      	str	r3, [r4, r2]
 8008398:	e7ab      	b.n	80082f2 <_malloc_r+0x22>
 800839a:	42a3      	cmp	r3, r4
 800839c:	6862      	ldr	r2, [r4, #4]
 800839e:	d1dd      	bne.n	800835c <_malloc_r+0x8c>
 80083a0:	f8c8 2000 	str.w	r2, [r8]
 80083a4:	e7ec      	b.n	8008380 <_malloc_r+0xb0>
 80083a6:	4623      	mov	r3, r4
 80083a8:	6864      	ldr	r4, [r4, #4]
 80083aa:	e7ac      	b.n	8008306 <_malloc_r+0x36>
 80083ac:	4634      	mov	r4, r6
 80083ae:	6876      	ldr	r6, [r6, #4]
 80083b0:	e7b4      	b.n	800831c <_malloc_r+0x4c>
 80083b2:	4613      	mov	r3, r2
 80083b4:	e7cc      	b.n	8008350 <_malloc_r+0x80>
 80083b6:	230c      	movs	r3, #12
 80083b8:	603b      	str	r3, [r7, #0]
 80083ba:	4638      	mov	r0, r7
 80083bc:	f000 fa4c 	bl	8008858 <__malloc_unlock>
 80083c0:	e797      	b.n	80082f2 <_malloc_r+0x22>
 80083c2:	6025      	str	r5, [r4, #0]
 80083c4:	e7dc      	b.n	8008380 <_malloc_r+0xb0>
 80083c6:	605b      	str	r3, [r3, #4]
 80083c8:	deff      	udf	#255	; 0xff
 80083ca:	bf00      	nop
 80083cc:	20002510 	.word	0x20002510

080083d0 <_printf_common>:
 80083d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083d4:	4616      	mov	r6, r2
 80083d6:	4699      	mov	r9, r3
 80083d8:	688a      	ldr	r2, [r1, #8]
 80083da:	690b      	ldr	r3, [r1, #16]
 80083dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80083e0:	4293      	cmp	r3, r2
 80083e2:	bfb8      	it	lt
 80083e4:	4613      	movlt	r3, r2
 80083e6:	6033      	str	r3, [r6, #0]
 80083e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80083ec:	4607      	mov	r7, r0
 80083ee:	460c      	mov	r4, r1
 80083f0:	b10a      	cbz	r2, 80083f6 <_printf_common+0x26>
 80083f2:	3301      	adds	r3, #1
 80083f4:	6033      	str	r3, [r6, #0]
 80083f6:	6823      	ldr	r3, [r4, #0]
 80083f8:	0699      	lsls	r1, r3, #26
 80083fa:	bf42      	ittt	mi
 80083fc:	6833      	ldrmi	r3, [r6, #0]
 80083fe:	3302      	addmi	r3, #2
 8008400:	6033      	strmi	r3, [r6, #0]
 8008402:	6825      	ldr	r5, [r4, #0]
 8008404:	f015 0506 	ands.w	r5, r5, #6
 8008408:	d106      	bne.n	8008418 <_printf_common+0x48>
 800840a:	f104 0a19 	add.w	sl, r4, #25
 800840e:	68e3      	ldr	r3, [r4, #12]
 8008410:	6832      	ldr	r2, [r6, #0]
 8008412:	1a9b      	subs	r3, r3, r2
 8008414:	42ab      	cmp	r3, r5
 8008416:	dc26      	bgt.n	8008466 <_printf_common+0x96>
 8008418:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800841c:	1e13      	subs	r3, r2, #0
 800841e:	6822      	ldr	r2, [r4, #0]
 8008420:	bf18      	it	ne
 8008422:	2301      	movne	r3, #1
 8008424:	0692      	lsls	r2, r2, #26
 8008426:	d42b      	bmi.n	8008480 <_printf_common+0xb0>
 8008428:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800842c:	4649      	mov	r1, r9
 800842e:	4638      	mov	r0, r7
 8008430:	47c0      	blx	r8
 8008432:	3001      	adds	r0, #1
 8008434:	d01e      	beq.n	8008474 <_printf_common+0xa4>
 8008436:	6823      	ldr	r3, [r4, #0]
 8008438:	6922      	ldr	r2, [r4, #16]
 800843a:	f003 0306 	and.w	r3, r3, #6
 800843e:	2b04      	cmp	r3, #4
 8008440:	bf02      	ittt	eq
 8008442:	68e5      	ldreq	r5, [r4, #12]
 8008444:	6833      	ldreq	r3, [r6, #0]
 8008446:	1aed      	subeq	r5, r5, r3
 8008448:	68a3      	ldr	r3, [r4, #8]
 800844a:	bf0c      	ite	eq
 800844c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008450:	2500      	movne	r5, #0
 8008452:	4293      	cmp	r3, r2
 8008454:	bfc4      	itt	gt
 8008456:	1a9b      	subgt	r3, r3, r2
 8008458:	18ed      	addgt	r5, r5, r3
 800845a:	2600      	movs	r6, #0
 800845c:	341a      	adds	r4, #26
 800845e:	42b5      	cmp	r5, r6
 8008460:	d11a      	bne.n	8008498 <_printf_common+0xc8>
 8008462:	2000      	movs	r0, #0
 8008464:	e008      	b.n	8008478 <_printf_common+0xa8>
 8008466:	2301      	movs	r3, #1
 8008468:	4652      	mov	r2, sl
 800846a:	4649      	mov	r1, r9
 800846c:	4638      	mov	r0, r7
 800846e:	47c0      	blx	r8
 8008470:	3001      	adds	r0, #1
 8008472:	d103      	bne.n	800847c <_printf_common+0xac>
 8008474:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800847c:	3501      	adds	r5, #1
 800847e:	e7c6      	b.n	800840e <_printf_common+0x3e>
 8008480:	18e1      	adds	r1, r4, r3
 8008482:	1c5a      	adds	r2, r3, #1
 8008484:	2030      	movs	r0, #48	; 0x30
 8008486:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800848a:	4422      	add	r2, r4
 800848c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008490:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008494:	3302      	adds	r3, #2
 8008496:	e7c7      	b.n	8008428 <_printf_common+0x58>
 8008498:	2301      	movs	r3, #1
 800849a:	4622      	mov	r2, r4
 800849c:	4649      	mov	r1, r9
 800849e:	4638      	mov	r0, r7
 80084a0:	47c0      	blx	r8
 80084a2:	3001      	adds	r0, #1
 80084a4:	d0e6      	beq.n	8008474 <_printf_common+0xa4>
 80084a6:	3601      	adds	r6, #1
 80084a8:	e7d9      	b.n	800845e <_printf_common+0x8e>
	...

080084ac <_printf_i>:
 80084ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80084b0:	7e0f      	ldrb	r7, [r1, #24]
 80084b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80084b4:	2f78      	cmp	r7, #120	; 0x78
 80084b6:	4691      	mov	r9, r2
 80084b8:	4680      	mov	r8, r0
 80084ba:	460c      	mov	r4, r1
 80084bc:	469a      	mov	sl, r3
 80084be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80084c2:	d807      	bhi.n	80084d4 <_printf_i+0x28>
 80084c4:	2f62      	cmp	r7, #98	; 0x62
 80084c6:	d80a      	bhi.n	80084de <_printf_i+0x32>
 80084c8:	2f00      	cmp	r7, #0
 80084ca:	f000 80d4 	beq.w	8008676 <_printf_i+0x1ca>
 80084ce:	2f58      	cmp	r7, #88	; 0x58
 80084d0:	f000 80c0 	beq.w	8008654 <_printf_i+0x1a8>
 80084d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80084d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80084dc:	e03a      	b.n	8008554 <_printf_i+0xa8>
 80084de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80084e2:	2b15      	cmp	r3, #21
 80084e4:	d8f6      	bhi.n	80084d4 <_printf_i+0x28>
 80084e6:	a101      	add	r1, pc, #4	; (adr r1, 80084ec <_printf_i+0x40>)
 80084e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80084ec:	08008545 	.word	0x08008545
 80084f0:	08008559 	.word	0x08008559
 80084f4:	080084d5 	.word	0x080084d5
 80084f8:	080084d5 	.word	0x080084d5
 80084fc:	080084d5 	.word	0x080084d5
 8008500:	080084d5 	.word	0x080084d5
 8008504:	08008559 	.word	0x08008559
 8008508:	080084d5 	.word	0x080084d5
 800850c:	080084d5 	.word	0x080084d5
 8008510:	080084d5 	.word	0x080084d5
 8008514:	080084d5 	.word	0x080084d5
 8008518:	0800865d 	.word	0x0800865d
 800851c:	08008585 	.word	0x08008585
 8008520:	08008617 	.word	0x08008617
 8008524:	080084d5 	.word	0x080084d5
 8008528:	080084d5 	.word	0x080084d5
 800852c:	0800867f 	.word	0x0800867f
 8008530:	080084d5 	.word	0x080084d5
 8008534:	08008585 	.word	0x08008585
 8008538:	080084d5 	.word	0x080084d5
 800853c:	080084d5 	.word	0x080084d5
 8008540:	0800861f 	.word	0x0800861f
 8008544:	682b      	ldr	r3, [r5, #0]
 8008546:	1d1a      	adds	r2, r3, #4
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	602a      	str	r2, [r5, #0]
 800854c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008550:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008554:	2301      	movs	r3, #1
 8008556:	e09f      	b.n	8008698 <_printf_i+0x1ec>
 8008558:	6820      	ldr	r0, [r4, #0]
 800855a:	682b      	ldr	r3, [r5, #0]
 800855c:	0607      	lsls	r7, r0, #24
 800855e:	f103 0104 	add.w	r1, r3, #4
 8008562:	6029      	str	r1, [r5, #0]
 8008564:	d501      	bpl.n	800856a <_printf_i+0xbe>
 8008566:	681e      	ldr	r6, [r3, #0]
 8008568:	e003      	b.n	8008572 <_printf_i+0xc6>
 800856a:	0646      	lsls	r6, r0, #25
 800856c:	d5fb      	bpl.n	8008566 <_printf_i+0xba>
 800856e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008572:	2e00      	cmp	r6, #0
 8008574:	da03      	bge.n	800857e <_printf_i+0xd2>
 8008576:	232d      	movs	r3, #45	; 0x2d
 8008578:	4276      	negs	r6, r6
 800857a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800857e:	485a      	ldr	r0, [pc, #360]	; (80086e8 <_printf_i+0x23c>)
 8008580:	230a      	movs	r3, #10
 8008582:	e012      	b.n	80085aa <_printf_i+0xfe>
 8008584:	682b      	ldr	r3, [r5, #0]
 8008586:	6820      	ldr	r0, [r4, #0]
 8008588:	1d19      	adds	r1, r3, #4
 800858a:	6029      	str	r1, [r5, #0]
 800858c:	0605      	lsls	r5, r0, #24
 800858e:	d501      	bpl.n	8008594 <_printf_i+0xe8>
 8008590:	681e      	ldr	r6, [r3, #0]
 8008592:	e002      	b.n	800859a <_printf_i+0xee>
 8008594:	0641      	lsls	r1, r0, #25
 8008596:	d5fb      	bpl.n	8008590 <_printf_i+0xe4>
 8008598:	881e      	ldrh	r6, [r3, #0]
 800859a:	4853      	ldr	r0, [pc, #332]	; (80086e8 <_printf_i+0x23c>)
 800859c:	2f6f      	cmp	r7, #111	; 0x6f
 800859e:	bf0c      	ite	eq
 80085a0:	2308      	moveq	r3, #8
 80085a2:	230a      	movne	r3, #10
 80085a4:	2100      	movs	r1, #0
 80085a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80085aa:	6865      	ldr	r5, [r4, #4]
 80085ac:	60a5      	str	r5, [r4, #8]
 80085ae:	2d00      	cmp	r5, #0
 80085b0:	bfa2      	ittt	ge
 80085b2:	6821      	ldrge	r1, [r4, #0]
 80085b4:	f021 0104 	bicge.w	r1, r1, #4
 80085b8:	6021      	strge	r1, [r4, #0]
 80085ba:	b90e      	cbnz	r6, 80085c0 <_printf_i+0x114>
 80085bc:	2d00      	cmp	r5, #0
 80085be:	d04b      	beq.n	8008658 <_printf_i+0x1ac>
 80085c0:	4615      	mov	r5, r2
 80085c2:	fbb6 f1f3 	udiv	r1, r6, r3
 80085c6:	fb03 6711 	mls	r7, r3, r1, r6
 80085ca:	5dc7      	ldrb	r7, [r0, r7]
 80085cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80085d0:	4637      	mov	r7, r6
 80085d2:	42bb      	cmp	r3, r7
 80085d4:	460e      	mov	r6, r1
 80085d6:	d9f4      	bls.n	80085c2 <_printf_i+0x116>
 80085d8:	2b08      	cmp	r3, #8
 80085da:	d10b      	bne.n	80085f4 <_printf_i+0x148>
 80085dc:	6823      	ldr	r3, [r4, #0]
 80085de:	07de      	lsls	r6, r3, #31
 80085e0:	d508      	bpl.n	80085f4 <_printf_i+0x148>
 80085e2:	6923      	ldr	r3, [r4, #16]
 80085e4:	6861      	ldr	r1, [r4, #4]
 80085e6:	4299      	cmp	r1, r3
 80085e8:	bfde      	ittt	le
 80085ea:	2330      	movle	r3, #48	; 0x30
 80085ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 80085f0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80085f4:	1b52      	subs	r2, r2, r5
 80085f6:	6122      	str	r2, [r4, #16]
 80085f8:	f8cd a000 	str.w	sl, [sp]
 80085fc:	464b      	mov	r3, r9
 80085fe:	aa03      	add	r2, sp, #12
 8008600:	4621      	mov	r1, r4
 8008602:	4640      	mov	r0, r8
 8008604:	f7ff fee4 	bl	80083d0 <_printf_common>
 8008608:	3001      	adds	r0, #1
 800860a:	d14a      	bne.n	80086a2 <_printf_i+0x1f6>
 800860c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008610:	b004      	add	sp, #16
 8008612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008616:	6823      	ldr	r3, [r4, #0]
 8008618:	f043 0320 	orr.w	r3, r3, #32
 800861c:	6023      	str	r3, [r4, #0]
 800861e:	4833      	ldr	r0, [pc, #204]	; (80086ec <_printf_i+0x240>)
 8008620:	2778      	movs	r7, #120	; 0x78
 8008622:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008626:	6823      	ldr	r3, [r4, #0]
 8008628:	6829      	ldr	r1, [r5, #0]
 800862a:	061f      	lsls	r7, r3, #24
 800862c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008630:	d402      	bmi.n	8008638 <_printf_i+0x18c>
 8008632:	065f      	lsls	r7, r3, #25
 8008634:	bf48      	it	mi
 8008636:	b2b6      	uxthmi	r6, r6
 8008638:	07df      	lsls	r7, r3, #31
 800863a:	bf48      	it	mi
 800863c:	f043 0320 	orrmi.w	r3, r3, #32
 8008640:	6029      	str	r1, [r5, #0]
 8008642:	bf48      	it	mi
 8008644:	6023      	strmi	r3, [r4, #0]
 8008646:	b91e      	cbnz	r6, 8008650 <_printf_i+0x1a4>
 8008648:	6823      	ldr	r3, [r4, #0]
 800864a:	f023 0320 	bic.w	r3, r3, #32
 800864e:	6023      	str	r3, [r4, #0]
 8008650:	2310      	movs	r3, #16
 8008652:	e7a7      	b.n	80085a4 <_printf_i+0xf8>
 8008654:	4824      	ldr	r0, [pc, #144]	; (80086e8 <_printf_i+0x23c>)
 8008656:	e7e4      	b.n	8008622 <_printf_i+0x176>
 8008658:	4615      	mov	r5, r2
 800865a:	e7bd      	b.n	80085d8 <_printf_i+0x12c>
 800865c:	682b      	ldr	r3, [r5, #0]
 800865e:	6826      	ldr	r6, [r4, #0]
 8008660:	6961      	ldr	r1, [r4, #20]
 8008662:	1d18      	adds	r0, r3, #4
 8008664:	6028      	str	r0, [r5, #0]
 8008666:	0635      	lsls	r5, r6, #24
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	d501      	bpl.n	8008670 <_printf_i+0x1c4>
 800866c:	6019      	str	r1, [r3, #0]
 800866e:	e002      	b.n	8008676 <_printf_i+0x1ca>
 8008670:	0670      	lsls	r0, r6, #25
 8008672:	d5fb      	bpl.n	800866c <_printf_i+0x1c0>
 8008674:	8019      	strh	r1, [r3, #0]
 8008676:	2300      	movs	r3, #0
 8008678:	6123      	str	r3, [r4, #16]
 800867a:	4615      	mov	r5, r2
 800867c:	e7bc      	b.n	80085f8 <_printf_i+0x14c>
 800867e:	682b      	ldr	r3, [r5, #0]
 8008680:	1d1a      	adds	r2, r3, #4
 8008682:	602a      	str	r2, [r5, #0]
 8008684:	681d      	ldr	r5, [r3, #0]
 8008686:	6862      	ldr	r2, [r4, #4]
 8008688:	2100      	movs	r1, #0
 800868a:	4628      	mov	r0, r5
 800868c:	f7f7 fda0 	bl	80001d0 <memchr>
 8008690:	b108      	cbz	r0, 8008696 <_printf_i+0x1ea>
 8008692:	1b40      	subs	r0, r0, r5
 8008694:	6060      	str	r0, [r4, #4]
 8008696:	6863      	ldr	r3, [r4, #4]
 8008698:	6123      	str	r3, [r4, #16]
 800869a:	2300      	movs	r3, #0
 800869c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086a0:	e7aa      	b.n	80085f8 <_printf_i+0x14c>
 80086a2:	6923      	ldr	r3, [r4, #16]
 80086a4:	462a      	mov	r2, r5
 80086a6:	4649      	mov	r1, r9
 80086a8:	4640      	mov	r0, r8
 80086aa:	47d0      	blx	sl
 80086ac:	3001      	adds	r0, #1
 80086ae:	d0ad      	beq.n	800860c <_printf_i+0x160>
 80086b0:	6823      	ldr	r3, [r4, #0]
 80086b2:	079b      	lsls	r3, r3, #30
 80086b4:	d413      	bmi.n	80086de <_printf_i+0x232>
 80086b6:	68e0      	ldr	r0, [r4, #12]
 80086b8:	9b03      	ldr	r3, [sp, #12]
 80086ba:	4298      	cmp	r0, r3
 80086bc:	bfb8      	it	lt
 80086be:	4618      	movlt	r0, r3
 80086c0:	e7a6      	b.n	8008610 <_printf_i+0x164>
 80086c2:	2301      	movs	r3, #1
 80086c4:	4632      	mov	r2, r6
 80086c6:	4649      	mov	r1, r9
 80086c8:	4640      	mov	r0, r8
 80086ca:	47d0      	blx	sl
 80086cc:	3001      	adds	r0, #1
 80086ce:	d09d      	beq.n	800860c <_printf_i+0x160>
 80086d0:	3501      	adds	r5, #1
 80086d2:	68e3      	ldr	r3, [r4, #12]
 80086d4:	9903      	ldr	r1, [sp, #12]
 80086d6:	1a5b      	subs	r3, r3, r1
 80086d8:	42ab      	cmp	r3, r5
 80086da:	dcf2      	bgt.n	80086c2 <_printf_i+0x216>
 80086dc:	e7eb      	b.n	80086b6 <_printf_i+0x20a>
 80086de:	2500      	movs	r5, #0
 80086e0:	f104 0619 	add.w	r6, r4, #25
 80086e4:	e7f5      	b.n	80086d2 <_printf_i+0x226>
 80086e6:	bf00      	nop
 80086e8:	08008d99 	.word	0x08008d99
 80086ec:	08008daa 	.word	0x08008daa

080086f0 <__sflush_r>:
 80086f0:	898a      	ldrh	r2, [r1, #12]
 80086f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086f6:	4605      	mov	r5, r0
 80086f8:	0710      	lsls	r0, r2, #28
 80086fa:	460c      	mov	r4, r1
 80086fc:	d458      	bmi.n	80087b0 <__sflush_r+0xc0>
 80086fe:	684b      	ldr	r3, [r1, #4]
 8008700:	2b00      	cmp	r3, #0
 8008702:	dc05      	bgt.n	8008710 <__sflush_r+0x20>
 8008704:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008706:	2b00      	cmp	r3, #0
 8008708:	dc02      	bgt.n	8008710 <__sflush_r+0x20>
 800870a:	2000      	movs	r0, #0
 800870c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008710:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008712:	2e00      	cmp	r6, #0
 8008714:	d0f9      	beq.n	800870a <__sflush_r+0x1a>
 8008716:	2300      	movs	r3, #0
 8008718:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800871c:	682f      	ldr	r7, [r5, #0]
 800871e:	6a21      	ldr	r1, [r4, #32]
 8008720:	602b      	str	r3, [r5, #0]
 8008722:	d032      	beq.n	800878a <__sflush_r+0x9a>
 8008724:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008726:	89a3      	ldrh	r3, [r4, #12]
 8008728:	075a      	lsls	r2, r3, #29
 800872a:	d505      	bpl.n	8008738 <__sflush_r+0x48>
 800872c:	6863      	ldr	r3, [r4, #4]
 800872e:	1ac0      	subs	r0, r0, r3
 8008730:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008732:	b10b      	cbz	r3, 8008738 <__sflush_r+0x48>
 8008734:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008736:	1ac0      	subs	r0, r0, r3
 8008738:	2300      	movs	r3, #0
 800873a:	4602      	mov	r2, r0
 800873c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800873e:	6a21      	ldr	r1, [r4, #32]
 8008740:	4628      	mov	r0, r5
 8008742:	47b0      	blx	r6
 8008744:	1c43      	adds	r3, r0, #1
 8008746:	89a3      	ldrh	r3, [r4, #12]
 8008748:	d106      	bne.n	8008758 <__sflush_r+0x68>
 800874a:	6829      	ldr	r1, [r5, #0]
 800874c:	291d      	cmp	r1, #29
 800874e:	d82b      	bhi.n	80087a8 <__sflush_r+0xb8>
 8008750:	4a29      	ldr	r2, [pc, #164]	; (80087f8 <__sflush_r+0x108>)
 8008752:	410a      	asrs	r2, r1
 8008754:	07d6      	lsls	r6, r2, #31
 8008756:	d427      	bmi.n	80087a8 <__sflush_r+0xb8>
 8008758:	2200      	movs	r2, #0
 800875a:	6062      	str	r2, [r4, #4]
 800875c:	04d9      	lsls	r1, r3, #19
 800875e:	6922      	ldr	r2, [r4, #16]
 8008760:	6022      	str	r2, [r4, #0]
 8008762:	d504      	bpl.n	800876e <__sflush_r+0x7e>
 8008764:	1c42      	adds	r2, r0, #1
 8008766:	d101      	bne.n	800876c <__sflush_r+0x7c>
 8008768:	682b      	ldr	r3, [r5, #0]
 800876a:	b903      	cbnz	r3, 800876e <__sflush_r+0x7e>
 800876c:	6560      	str	r0, [r4, #84]	; 0x54
 800876e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008770:	602f      	str	r7, [r5, #0]
 8008772:	2900      	cmp	r1, #0
 8008774:	d0c9      	beq.n	800870a <__sflush_r+0x1a>
 8008776:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800877a:	4299      	cmp	r1, r3
 800877c:	d002      	beq.n	8008784 <__sflush_r+0x94>
 800877e:	4628      	mov	r0, r5
 8008780:	f7ff fbf6 	bl	8007f70 <_free_r>
 8008784:	2000      	movs	r0, #0
 8008786:	6360      	str	r0, [r4, #52]	; 0x34
 8008788:	e7c0      	b.n	800870c <__sflush_r+0x1c>
 800878a:	2301      	movs	r3, #1
 800878c:	4628      	mov	r0, r5
 800878e:	47b0      	blx	r6
 8008790:	1c41      	adds	r1, r0, #1
 8008792:	d1c8      	bne.n	8008726 <__sflush_r+0x36>
 8008794:	682b      	ldr	r3, [r5, #0]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d0c5      	beq.n	8008726 <__sflush_r+0x36>
 800879a:	2b1d      	cmp	r3, #29
 800879c:	d001      	beq.n	80087a2 <__sflush_r+0xb2>
 800879e:	2b16      	cmp	r3, #22
 80087a0:	d101      	bne.n	80087a6 <__sflush_r+0xb6>
 80087a2:	602f      	str	r7, [r5, #0]
 80087a4:	e7b1      	b.n	800870a <__sflush_r+0x1a>
 80087a6:	89a3      	ldrh	r3, [r4, #12]
 80087a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087ac:	81a3      	strh	r3, [r4, #12]
 80087ae:	e7ad      	b.n	800870c <__sflush_r+0x1c>
 80087b0:	690f      	ldr	r7, [r1, #16]
 80087b2:	2f00      	cmp	r7, #0
 80087b4:	d0a9      	beq.n	800870a <__sflush_r+0x1a>
 80087b6:	0793      	lsls	r3, r2, #30
 80087b8:	680e      	ldr	r6, [r1, #0]
 80087ba:	bf08      	it	eq
 80087bc:	694b      	ldreq	r3, [r1, #20]
 80087be:	600f      	str	r7, [r1, #0]
 80087c0:	bf18      	it	ne
 80087c2:	2300      	movne	r3, #0
 80087c4:	eba6 0807 	sub.w	r8, r6, r7
 80087c8:	608b      	str	r3, [r1, #8]
 80087ca:	f1b8 0f00 	cmp.w	r8, #0
 80087ce:	dd9c      	ble.n	800870a <__sflush_r+0x1a>
 80087d0:	6a21      	ldr	r1, [r4, #32]
 80087d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80087d4:	4643      	mov	r3, r8
 80087d6:	463a      	mov	r2, r7
 80087d8:	4628      	mov	r0, r5
 80087da:	47b0      	blx	r6
 80087dc:	2800      	cmp	r0, #0
 80087de:	dc06      	bgt.n	80087ee <__sflush_r+0xfe>
 80087e0:	89a3      	ldrh	r3, [r4, #12]
 80087e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087e6:	81a3      	strh	r3, [r4, #12]
 80087e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80087ec:	e78e      	b.n	800870c <__sflush_r+0x1c>
 80087ee:	4407      	add	r7, r0
 80087f0:	eba8 0800 	sub.w	r8, r8, r0
 80087f4:	e7e9      	b.n	80087ca <__sflush_r+0xda>
 80087f6:	bf00      	nop
 80087f8:	dfbffffe 	.word	0xdfbffffe

080087fc <_fflush_r>:
 80087fc:	b538      	push	{r3, r4, r5, lr}
 80087fe:	690b      	ldr	r3, [r1, #16]
 8008800:	4605      	mov	r5, r0
 8008802:	460c      	mov	r4, r1
 8008804:	b913      	cbnz	r3, 800880c <_fflush_r+0x10>
 8008806:	2500      	movs	r5, #0
 8008808:	4628      	mov	r0, r5
 800880a:	bd38      	pop	{r3, r4, r5, pc}
 800880c:	b118      	cbz	r0, 8008816 <_fflush_r+0x1a>
 800880e:	6a03      	ldr	r3, [r0, #32]
 8008810:	b90b      	cbnz	r3, 8008816 <_fflush_r+0x1a>
 8008812:	f7ff fa6f 	bl	8007cf4 <__sinit>
 8008816:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d0f3      	beq.n	8008806 <_fflush_r+0xa>
 800881e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008820:	07d0      	lsls	r0, r2, #31
 8008822:	d404      	bmi.n	800882e <_fflush_r+0x32>
 8008824:	0599      	lsls	r1, r3, #22
 8008826:	d402      	bmi.n	800882e <_fflush_r+0x32>
 8008828:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800882a:	f7ff fb90 	bl	8007f4e <__retarget_lock_acquire_recursive>
 800882e:	4628      	mov	r0, r5
 8008830:	4621      	mov	r1, r4
 8008832:	f7ff ff5d 	bl	80086f0 <__sflush_r>
 8008836:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008838:	07da      	lsls	r2, r3, #31
 800883a:	4605      	mov	r5, r0
 800883c:	d4e4      	bmi.n	8008808 <_fflush_r+0xc>
 800883e:	89a3      	ldrh	r3, [r4, #12]
 8008840:	059b      	lsls	r3, r3, #22
 8008842:	d4e1      	bmi.n	8008808 <_fflush_r+0xc>
 8008844:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008846:	f7ff fb83 	bl	8007f50 <__retarget_lock_release_recursive>
 800884a:	e7dd      	b.n	8008808 <_fflush_r+0xc>

0800884c <__malloc_lock>:
 800884c:	4801      	ldr	r0, [pc, #4]	; (8008854 <__malloc_lock+0x8>)
 800884e:	f7ff bb7e 	b.w	8007f4e <__retarget_lock_acquire_recursive>
 8008852:	bf00      	nop
 8008854:	2000250c 	.word	0x2000250c

08008858 <__malloc_unlock>:
 8008858:	4801      	ldr	r0, [pc, #4]	; (8008860 <__malloc_unlock+0x8>)
 800885a:	f7ff bb79 	b.w	8007f50 <__retarget_lock_release_recursive>
 800885e:	bf00      	nop
 8008860:	2000250c 	.word	0x2000250c

08008864 <__sread>:
 8008864:	b510      	push	{r4, lr}
 8008866:	460c      	mov	r4, r1
 8008868:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800886c:	f000 f978 	bl	8008b60 <_read_r>
 8008870:	2800      	cmp	r0, #0
 8008872:	bfab      	itete	ge
 8008874:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008876:	89a3      	ldrhlt	r3, [r4, #12]
 8008878:	181b      	addge	r3, r3, r0
 800887a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800887e:	bfac      	ite	ge
 8008880:	6563      	strge	r3, [r4, #84]	; 0x54
 8008882:	81a3      	strhlt	r3, [r4, #12]
 8008884:	bd10      	pop	{r4, pc}

08008886 <__swrite>:
 8008886:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800888a:	461f      	mov	r7, r3
 800888c:	898b      	ldrh	r3, [r1, #12]
 800888e:	05db      	lsls	r3, r3, #23
 8008890:	4605      	mov	r5, r0
 8008892:	460c      	mov	r4, r1
 8008894:	4616      	mov	r6, r2
 8008896:	d505      	bpl.n	80088a4 <__swrite+0x1e>
 8008898:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800889c:	2302      	movs	r3, #2
 800889e:	2200      	movs	r2, #0
 80088a0:	f000 f94c 	bl	8008b3c <_lseek_r>
 80088a4:	89a3      	ldrh	r3, [r4, #12]
 80088a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80088aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80088ae:	81a3      	strh	r3, [r4, #12]
 80088b0:	4632      	mov	r2, r6
 80088b2:	463b      	mov	r3, r7
 80088b4:	4628      	mov	r0, r5
 80088b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088ba:	f000 b973 	b.w	8008ba4 <_write_r>

080088be <__sseek>:
 80088be:	b510      	push	{r4, lr}
 80088c0:	460c      	mov	r4, r1
 80088c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088c6:	f000 f939 	bl	8008b3c <_lseek_r>
 80088ca:	1c43      	adds	r3, r0, #1
 80088cc:	89a3      	ldrh	r3, [r4, #12]
 80088ce:	bf15      	itete	ne
 80088d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80088d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80088d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80088da:	81a3      	strheq	r3, [r4, #12]
 80088dc:	bf18      	it	ne
 80088de:	81a3      	strhne	r3, [r4, #12]
 80088e0:	bd10      	pop	{r4, pc}

080088e2 <__sclose>:
 80088e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088e6:	f000 b8f7 	b.w	8008ad8 <_close_r>

080088ea <__swbuf_r>:
 80088ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088ec:	460e      	mov	r6, r1
 80088ee:	4614      	mov	r4, r2
 80088f0:	4605      	mov	r5, r0
 80088f2:	b118      	cbz	r0, 80088fc <__swbuf_r+0x12>
 80088f4:	6a03      	ldr	r3, [r0, #32]
 80088f6:	b90b      	cbnz	r3, 80088fc <__swbuf_r+0x12>
 80088f8:	f7ff f9fc 	bl	8007cf4 <__sinit>
 80088fc:	69a3      	ldr	r3, [r4, #24]
 80088fe:	60a3      	str	r3, [r4, #8]
 8008900:	89a3      	ldrh	r3, [r4, #12]
 8008902:	071a      	lsls	r2, r3, #28
 8008904:	d525      	bpl.n	8008952 <__swbuf_r+0x68>
 8008906:	6923      	ldr	r3, [r4, #16]
 8008908:	b31b      	cbz	r3, 8008952 <__swbuf_r+0x68>
 800890a:	6823      	ldr	r3, [r4, #0]
 800890c:	6922      	ldr	r2, [r4, #16]
 800890e:	1a98      	subs	r0, r3, r2
 8008910:	6963      	ldr	r3, [r4, #20]
 8008912:	b2f6      	uxtb	r6, r6
 8008914:	4283      	cmp	r3, r0
 8008916:	4637      	mov	r7, r6
 8008918:	dc04      	bgt.n	8008924 <__swbuf_r+0x3a>
 800891a:	4621      	mov	r1, r4
 800891c:	4628      	mov	r0, r5
 800891e:	f7ff ff6d 	bl	80087fc <_fflush_r>
 8008922:	b9e0      	cbnz	r0, 800895e <__swbuf_r+0x74>
 8008924:	68a3      	ldr	r3, [r4, #8]
 8008926:	3b01      	subs	r3, #1
 8008928:	60a3      	str	r3, [r4, #8]
 800892a:	6823      	ldr	r3, [r4, #0]
 800892c:	1c5a      	adds	r2, r3, #1
 800892e:	6022      	str	r2, [r4, #0]
 8008930:	701e      	strb	r6, [r3, #0]
 8008932:	6962      	ldr	r2, [r4, #20]
 8008934:	1c43      	adds	r3, r0, #1
 8008936:	429a      	cmp	r2, r3
 8008938:	d004      	beq.n	8008944 <__swbuf_r+0x5a>
 800893a:	89a3      	ldrh	r3, [r4, #12]
 800893c:	07db      	lsls	r3, r3, #31
 800893e:	d506      	bpl.n	800894e <__swbuf_r+0x64>
 8008940:	2e0a      	cmp	r6, #10
 8008942:	d104      	bne.n	800894e <__swbuf_r+0x64>
 8008944:	4621      	mov	r1, r4
 8008946:	4628      	mov	r0, r5
 8008948:	f7ff ff58 	bl	80087fc <_fflush_r>
 800894c:	b938      	cbnz	r0, 800895e <__swbuf_r+0x74>
 800894e:	4638      	mov	r0, r7
 8008950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008952:	4621      	mov	r1, r4
 8008954:	4628      	mov	r0, r5
 8008956:	f000 f805 	bl	8008964 <__swsetup_r>
 800895a:	2800      	cmp	r0, #0
 800895c:	d0d5      	beq.n	800890a <__swbuf_r+0x20>
 800895e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008962:	e7f4      	b.n	800894e <__swbuf_r+0x64>

08008964 <__swsetup_r>:
 8008964:	b538      	push	{r3, r4, r5, lr}
 8008966:	4b2a      	ldr	r3, [pc, #168]	; (8008a10 <__swsetup_r+0xac>)
 8008968:	4605      	mov	r5, r0
 800896a:	6818      	ldr	r0, [r3, #0]
 800896c:	460c      	mov	r4, r1
 800896e:	b118      	cbz	r0, 8008978 <__swsetup_r+0x14>
 8008970:	6a03      	ldr	r3, [r0, #32]
 8008972:	b90b      	cbnz	r3, 8008978 <__swsetup_r+0x14>
 8008974:	f7ff f9be 	bl	8007cf4 <__sinit>
 8008978:	89a3      	ldrh	r3, [r4, #12]
 800897a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800897e:	0718      	lsls	r0, r3, #28
 8008980:	d422      	bmi.n	80089c8 <__swsetup_r+0x64>
 8008982:	06d9      	lsls	r1, r3, #27
 8008984:	d407      	bmi.n	8008996 <__swsetup_r+0x32>
 8008986:	2309      	movs	r3, #9
 8008988:	602b      	str	r3, [r5, #0]
 800898a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800898e:	81a3      	strh	r3, [r4, #12]
 8008990:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008994:	e034      	b.n	8008a00 <__swsetup_r+0x9c>
 8008996:	0758      	lsls	r0, r3, #29
 8008998:	d512      	bpl.n	80089c0 <__swsetup_r+0x5c>
 800899a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800899c:	b141      	cbz	r1, 80089b0 <__swsetup_r+0x4c>
 800899e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80089a2:	4299      	cmp	r1, r3
 80089a4:	d002      	beq.n	80089ac <__swsetup_r+0x48>
 80089a6:	4628      	mov	r0, r5
 80089a8:	f7ff fae2 	bl	8007f70 <_free_r>
 80089ac:	2300      	movs	r3, #0
 80089ae:	6363      	str	r3, [r4, #52]	; 0x34
 80089b0:	89a3      	ldrh	r3, [r4, #12]
 80089b2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80089b6:	81a3      	strh	r3, [r4, #12]
 80089b8:	2300      	movs	r3, #0
 80089ba:	6063      	str	r3, [r4, #4]
 80089bc:	6923      	ldr	r3, [r4, #16]
 80089be:	6023      	str	r3, [r4, #0]
 80089c0:	89a3      	ldrh	r3, [r4, #12]
 80089c2:	f043 0308 	orr.w	r3, r3, #8
 80089c6:	81a3      	strh	r3, [r4, #12]
 80089c8:	6923      	ldr	r3, [r4, #16]
 80089ca:	b94b      	cbnz	r3, 80089e0 <__swsetup_r+0x7c>
 80089cc:	89a3      	ldrh	r3, [r4, #12]
 80089ce:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80089d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089d6:	d003      	beq.n	80089e0 <__swsetup_r+0x7c>
 80089d8:	4621      	mov	r1, r4
 80089da:	4628      	mov	r0, r5
 80089dc:	f000 f840 	bl	8008a60 <__smakebuf_r>
 80089e0:	89a0      	ldrh	r0, [r4, #12]
 80089e2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80089e6:	f010 0301 	ands.w	r3, r0, #1
 80089ea:	d00a      	beq.n	8008a02 <__swsetup_r+0x9e>
 80089ec:	2300      	movs	r3, #0
 80089ee:	60a3      	str	r3, [r4, #8]
 80089f0:	6963      	ldr	r3, [r4, #20]
 80089f2:	425b      	negs	r3, r3
 80089f4:	61a3      	str	r3, [r4, #24]
 80089f6:	6923      	ldr	r3, [r4, #16]
 80089f8:	b943      	cbnz	r3, 8008a0c <__swsetup_r+0xa8>
 80089fa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80089fe:	d1c4      	bne.n	800898a <__swsetup_r+0x26>
 8008a00:	bd38      	pop	{r3, r4, r5, pc}
 8008a02:	0781      	lsls	r1, r0, #30
 8008a04:	bf58      	it	pl
 8008a06:	6963      	ldrpl	r3, [r4, #20]
 8008a08:	60a3      	str	r3, [r4, #8]
 8008a0a:	e7f4      	b.n	80089f6 <__swsetup_r+0x92>
 8008a0c:	2000      	movs	r0, #0
 8008a0e:	e7f7      	b.n	8008a00 <__swsetup_r+0x9c>
 8008a10:	20000068 	.word	0x20000068

08008a14 <__swhatbuf_r>:
 8008a14:	b570      	push	{r4, r5, r6, lr}
 8008a16:	460c      	mov	r4, r1
 8008a18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a1c:	2900      	cmp	r1, #0
 8008a1e:	b096      	sub	sp, #88	; 0x58
 8008a20:	4615      	mov	r5, r2
 8008a22:	461e      	mov	r6, r3
 8008a24:	da0d      	bge.n	8008a42 <__swhatbuf_r+0x2e>
 8008a26:	89a3      	ldrh	r3, [r4, #12]
 8008a28:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008a2c:	f04f 0100 	mov.w	r1, #0
 8008a30:	bf0c      	ite	eq
 8008a32:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008a36:	2340      	movne	r3, #64	; 0x40
 8008a38:	2000      	movs	r0, #0
 8008a3a:	6031      	str	r1, [r6, #0]
 8008a3c:	602b      	str	r3, [r5, #0]
 8008a3e:	b016      	add	sp, #88	; 0x58
 8008a40:	bd70      	pop	{r4, r5, r6, pc}
 8008a42:	466a      	mov	r2, sp
 8008a44:	f000 f858 	bl	8008af8 <_fstat_r>
 8008a48:	2800      	cmp	r0, #0
 8008a4a:	dbec      	blt.n	8008a26 <__swhatbuf_r+0x12>
 8008a4c:	9901      	ldr	r1, [sp, #4]
 8008a4e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008a52:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008a56:	4259      	negs	r1, r3
 8008a58:	4159      	adcs	r1, r3
 8008a5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a5e:	e7eb      	b.n	8008a38 <__swhatbuf_r+0x24>

08008a60 <__smakebuf_r>:
 8008a60:	898b      	ldrh	r3, [r1, #12]
 8008a62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008a64:	079d      	lsls	r5, r3, #30
 8008a66:	4606      	mov	r6, r0
 8008a68:	460c      	mov	r4, r1
 8008a6a:	d507      	bpl.n	8008a7c <__smakebuf_r+0x1c>
 8008a6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008a70:	6023      	str	r3, [r4, #0]
 8008a72:	6123      	str	r3, [r4, #16]
 8008a74:	2301      	movs	r3, #1
 8008a76:	6163      	str	r3, [r4, #20]
 8008a78:	b002      	add	sp, #8
 8008a7a:	bd70      	pop	{r4, r5, r6, pc}
 8008a7c:	ab01      	add	r3, sp, #4
 8008a7e:	466a      	mov	r2, sp
 8008a80:	f7ff ffc8 	bl	8008a14 <__swhatbuf_r>
 8008a84:	9900      	ldr	r1, [sp, #0]
 8008a86:	4605      	mov	r5, r0
 8008a88:	4630      	mov	r0, r6
 8008a8a:	f7ff fc21 	bl	80082d0 <_malloc_r>
 8008a8e:	b948      	cbnz	r0, 8008aa4 <__smakebuf_r+0x44>
 8008a90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a94:	059a      	lsls	r2, r3, #22
 8008a96:	d4ef      	bmi.n	8008a78 <__smakebuf_r+0x18>
 8008a98:	f023 0303 	bic.w	r3, r3, #3
 8008a9c:	f043 0302 	orr.w	r3, r3, #2
 8008aa0:	81a3      	strh	r3, [r4, #12]
 8008aa2:	e7e3      	b.n	8008a6c <__smakebuf_r+0xc>
 8008aa4:	89a3      	ldrh	r3, [r4, #12]
 8008aa6:	6020      	str	r0, [r4, #0]
 8008aa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008aac:	81a3      	strh	r3, [r4, #12]
 8008aae:	9b00      	ldr	r3, [sp, #0]
 8008ab0:	6163      	str	r3, [r4, #20]
 8008ab2:	9b01      	ldr	r3, [sp, #4]
 8008ab4:	6120      	str	r0, [r4, #16]
 8008ab6:	b15b      	cbz	r3, 8008ad0 <__smakebuf_r+0x70>
 8008ab8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008abc:	4630      	mov	r0, r6
 8008abe:	f000 f82d 	bl	8008b1c <_isatty_r>
 8008ac2:	b128      	cbz	r0, 8008ad0 <__smakebuf_r+0x70>
 8008ac4:	89a3      	ldrh	r3, [r4, #12]
 8008ac6:	f023 0303 	bic.w	r3, r3, #3
 8008aca:	f043 0301 	orr.w	r3, r3, #1
 8008ace:	81a3      	strh	r3, [r4, #12]
 8008ad0:	89a3      	ldrh	r3, [r4, #12]
 8008ad2:	431d      	orrs	r5, r3
 8008ad4:	81a5      	strh	r5, [r4, #12]
 8008ad6:	e7cf      	b.n	8008a78 <__smakebuf_r+0x18>

08008ad8 <_close_r>:
 8008ad8:	b538      	push	{r3, r4, r5, lr}
 8008ada:	4d06      	ldr	r5, [pc, #24]	; (8008af4 <_close_r+0x1c>)
 8008adc:	2300      	movs	r3, #0
 8008ade:	4604      	mov	r4, r0
 8008ae0:	4608      	mov	r0, r1
 8008ae2:	602b      	str	r3, [r5, #0]
 8008ae4:	f7f8 f99d 	bl	8000e22 <_close>
 8008ae8:	1c43      	adds	r3, r0, #1
 8008aea:	d102      	bne.n	8008af2 <_close_r+0x1a>
 8008aec:	682b      	ldr	r3, [r5, #0]
 8008aee:	b103      	cbz	r3, 8008af2 <_close_r+0x1a>
 8008af0:	6023      	str	r3, [r4, #0]
 8008af2:	bd38      	pop	{r3, r4, r5, pc}
 8008af4:	20002508 	.word	0x20002508

08008af8 <_fstat_r>:
 8008af8:	b538      	push	{r3, r4, r5, lr}
 8008afa:	4d07      	ldr	r5, [pc, #28]	; (8008b18 <_fstat_r+0x20>)
 8008afc:	2300      	movs	r3, #0
 8008afe:	4604      	mov	r4, r0
 8008b00:	4608      	mov	r0, r1
 8008b02:	4611      	mov	r1, r2
 8008b04:	602b      	str	r3, [r5, #0]
 8008b06:	f7f8 f998 	bl	8000e3a <_fstat>
 8008b0a:	1c43      	adds	r3, r0, #1
 8008b0c:	d102      	bne.n	8008b14 <_fstat_r+0x1c>
 8008b0e:	682b      	ldr	r3, [r5, #0]
 8008b10:	b103      	cbz	r3, 8008b14 <_fstat_r+0x1c>
 8008b12:	6023      	str	r3, [r4, #0]
 8008b14:	bd38      	pop	{r3, r4, r5, pc}
 8008b16:	bf00      	nop
 8008b18:	20002508 	.word	0x20002508

08008b1c <_isatty_r>:
 8008b1c:	b538      	push	{r3, r4, r5, lr}
 8008b1e:	4d06      	ldr	r5, [pc, #24]	; (8008b38 <_isatty_r+0x1c>)
 8008b20:	2300      	movs	r3, #0
 8008b22:	4604      	mov	r4, r0
 8008b24:	4608      	mov	r0, r1
 8008b26:	602b      	str	r3, [r5, #0]
 8008b28:	f7f8 f997 	bl	8000e5a <_isatty>
 8008b2c:	1c43      	adds	r3, r0, #1
 8008b2e:	d102      	bne.n	8008b36 <_isatty_r+0x1a>
 8008b30:	682b      	ldr	r3, [r5, #0]
 8008b32:	b103      	cbz	r3, 8008b36 <_isatty_r+0x1a>
 8008b34:	6023      	str	r3, [r4, #0]
 8008b36:	bd38      	pop	{r3, r4, r5, pc}
 8008b38:	20002508 	.word	0x20002508

08008b3c <_lseek_r>:
 8008b3c:	b538      	push	{r3, r4, r5, lr}
 8008b3e:	4d07      	ldr	r5, [pc, #28]	; (8008b5c <_lseek_r+0x20>)
 8008b40:	4604      	mov	r4, r0
 8008b42:	4608      	mov	r0, r1
 8008b44:	4611      	mov	r1, r2
 8008b46:	2200      	movs	r2, #0
 8008b48:	602a      	str	r2, [r5, #0]
 8008b4a:	461a      	mov	r2, r3
 8008b4c:	f7f8 f990 	bl	8000e70 <_lseek>
 8008b50:	1c43      	adds	r3, r0, #1
 8008b52:	d102      	bne.n	8008b5a <_lseek_r+0x1e>
 8008b54:	682b      	ldr	r3, [r5, #0]
 8008b56:	b103      	cbz	r3, 8008b5a <_lseek_r+0x1e>
 8008b58:	6023      	str	r3, [r4, #0]
 8008b5a:	bd38      	pop	{r3, r4, r5, pc}
 8008b5c:	20002508 	.word	0x20002508

08008b60 <_read_r>:
 8008b60:	b538      	push	{r3, r4, r5, lr}
 8008b62:	4d07      	ldr	r5, [pc, #28]	; (8008b80 <_read_r+0x20>)
 8008b64:	4604      	mov	r4, r0
 8008b66:	4608      	mov	r0, r1
 8008b68:	4611      	mov	r1, r2
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	602a      	str	r2, [r5, #0]
 8008b6e:	461a      	mov	r2, r3
 8008b70:	f7f8 f91e 	bl	8000db0 <_read>
 8008b74:	1c43      	adds	r3, r0, #1
 8008b76:	d102      	bne.n	8008b7e <_read_r+0x1e>
 8008b78:	682b      	ldr	r3, [r5, #0]
 8008b7a:	b103      	cbz	r3, 8008b7e <_read_r+0x1e>
 8008b7c:	6023      	str	r3, [r4, #0]
 8008b7e:	bd38      	pop	{r3, r4, r5, pc}
 8008b80:	20002508 	.word	0x20002508

08008b84 <_sbrk_r>:
 8008b84:	b538      	push	{r3, r4, r5, lr}
 8008b86:	4d06      	ldr	r5, [pc, #24]	; (8008ba0 <_sbrk_r+0x1c>)
 8008b88:	2300      	movs	r3, #0
 8008b8a:	4604      	mov	r4, r0
 8008b8c:	4608      	mov	r0, r1
 8008b8e:	602b      	str	r3, [r5, #0]
 8008b90:	f7f8 f97c 	bl	8000e8c <_sbrk>
 8008b94:	1c43      	adds	r3, r0, #1
 8008b96:	d102      	bne.n	8008b9e <_sbrk_r+0x1a>
 8008b98:	682b      	ldr	r3, [r5, #0]
 8008b9a:	b103      	cbz	r3, 8008b9e <_sbrk_r+0x1a>
 8008b9c:	6023      	str	r3, [r4, #0]
 8008b9e:	bd38      	pop	{r3, r4, r5, pc}
 8008ba0:	20002508 	.word	0x20002508

08008ba4 <_write_r>:
 8008ba4:	b538      	push	{r3, r4, r5, lr}
 8008ba6:	4d07      	ldr	r5, [pc, #28]	; (8008bc4 <_write_r+0x20>)
 8008ba8:	4604      	mov	r4, r0
 8008baa:	4608      	mov	r0, r1
 8008bac:	4611      	mov	r1, r2
 8008bae:	2200      	movs	r2, #0
 8008bb0:	602a      	str	r2, [r5, #0]
 8008bb2:	461a      	mov	r2, r3
 8008bb4:	f7f8 f919 	bl	8000dea <_write>
 8008bb8:	1c43      	adds	r3, r0, #1
 8008bba:	d102      	bne.n	8008bc2 <_write_r+0x1e>
 8008bbc:	682b      	ldr	r3, [r5, #0]
 8008bbe:	b103      	cbz	r3, 8008bc2 <_write_r+0x1e>
 8008bc0:	6023      	str	r3, [r4, #0]
 8008bc2:	bd38      	pop	{r3, r4, r5, pc}
 8008bc4:	20002508 	.word	0x20002508

08008bc8 <_init>:
 8008bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bca:	bf00      	nop
 8008bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bce:	bc08      	pop	{r3}
 8008bd0:	469e      	mov	lr, r3
 8008bd2:	4770      	bx	lr

08008bd4 <_fini>:
 8008bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bd6:	bf00      	nop
 8008bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bda:	bc08      	pop	{r3}
 8008bdc:	469e      	mov	lr, r3
 8008bde:	4770      	bx	lr
