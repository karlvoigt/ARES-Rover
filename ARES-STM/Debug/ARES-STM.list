
ARES-STM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cdbc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000648  0800cf50  0800cf50  0001cf50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d598  0800d598  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d598  0800d598  0001d598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d5a0  0800d5a0  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d5a0  0800d5a0  0001d5a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d5a4  0800d5a4  0001d5a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800d5a8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002584  200001e8  0800d790  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000276c  0800d790  0002276c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021f79  00000000  00000000  0002025b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000047ba  00000000  00000000  000421d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c60  00000000  00000000  00046990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000160d  00000000  00000000  000485f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e00f  00000000  00000000  00049bfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002124a  00000000  00000000  00067c0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b9b96  00000000  00000000  00088e56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008914  00000000  00000000  001429ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0014b300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cf34 	.word	0x0800cf34

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800cf34 	.word	0x0800cf34

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <sendMessage>:
#include <string.h>

extern UART_HandleTypeDef huart2;


void sendMessage(SensorType sensorType, uint32_t timestamp, uint16_t sensorData) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	6039      	str	r1, [r7, #0]
 8000f4e:	71fb      	strb	r3, [r7, #7]
 8000f50:	4613      	mov	r3, r2
 8000f52:	80bb      	strh	r3, [r7, #4]
    CustomMessage message;
    message.startDelimiter = START_DELIMITER;
 8000f54:	235b      	movs	r3, #91	; 0x5b
 8000f56:	723b      	strb	r3, [r7, #8]
    message.sensorType = sensorType;
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	727b      	strb	r3, [r7, #9]
    message.timestamp = timestamp;
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	f8c7 300a 	str.w	r3, [r7, #10]
    message.sensorData = sensorData;
 8000f62:	88bb      	ldrh	r3, [r7, #4]
 8000f64:	81fb      	strh	r3, [r7, #14]
    message.checksum = START_DELIMITER + sensorType + (timestamp & 0xFF) + ((timestamp >> 8) & 0xFF) + ((timestamp >> 16) & 0xFF) + ((timestamp >> 24) & 0xFF) + (sensorData & 0xFF) + ((sensorData >> 8) & 0xFF);
 8000f66:	79fa      	ldrb	r2, [r7, #7]
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	441a      	add	r2, r3
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	0a1b      	lsrs	r3, r3, #8
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	441a      	add	r2, r3
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	0c1b      	lsrs	r3, r3, #16
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	441a      	add	r2, r3
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	0e1b      	lsrs	r3, r3, #24
 8000f82:	441a      	add	r2, r3
 8000f84:	88bb      	ldrh	r3, [r7, #4]
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	441a      	add	r2, r3
 8000f8a:	88bb      	ldrh	r3, [r7, #4]
 8000f8c:	0a1b      	lsrs	r3, r3, #8
 8000f8e:	b29b      	uxth	r3, r3
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	4413      	add	r3, r2
 8000f94:	335b      	adds	r3, #91	; 0x5b
 8000f96:	613b      	str	r3, [r7, #16]
    message.endDelimiter = END_DELIMITER;
 8000f98:	235d      	movs	r3, #93	; 0x5d
 8000f9a:	753b      	strb	r3, [r7, #20]
    HAL_UART_Transmit(&huart2, (uint8_t*)&message, CUSTOM_MESSAGE_SIZE, HAL_MAX_DELAY);
 8000f9c:	f107 0108 	add.w	r1, r7, #8
 8000fa0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fa4:	220a      	movs	r2, #10
 8000fa6:	4803      	ldr	r0, [pc, #12]	; (8000fb4 <sendMessage+0x70>)
 8000fa8:	f004 f80c 	bl	8004fc4 <HAL_UART_Transmit>
}
 8000fac:	bf00      	nop
 8000fae:	3718      	adds	r7, #24
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	200002e0 	.word	0x200002e0

08000fb8 <sendLightSensorData>:

 void sendLightSensorData(uint16_t sensorData) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	80fb      	strh	r3, [r7, #6]
 	uint32_t curTime;
 	curTime = HAL_GetTick();
 8000fc2:	f001 f92f 	bl	8002224 <HAL_GetTick>
 8000fc6:	60f8      	str	r0, [r7, #12]
 	sendMessage(0x02, curTime, sensorData);
 8000fc8:	88fb      	ldrh	r3, [r7, #6]
 8000fca:	461a      	mov	r2, r3
 8000fcc:	68f9      	ldr	r1, [r7, #12]
 8000fce:	2002      	movs	r0, #2
 8000fd0:	f7ff ffb8 	bl	8000f44 <sendMessage>
 }
 8000fd4:	bf00      	nop
 8000fd6:	3710      	adds	r7, #16
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <LTR329_Init>:
#include "stm32l4xx_hal.h"
#include <stdint.h>

extern I2C_HandleTypeDef hi2c1;  // Assuming you are using hi2c1

void LTR329_Init() {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af04      	add	r7, sp, #16
    uint8_t data;

    // Activate the sensor
    data = LTR329_ACTIVE_MODE;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, LTR329_I2C_ADDRESS, LTR329_ALS_CONTR, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 8000fe6:	2364      	movs	r3, #100	; 0x64
 8000fe8:	9302      	str	r3, [sp, #8]
 8000fea:	2301      	movs	r3, #1
 8000fec:	9301      	str	r3, [sp, #4]
 8000fee:	1dfb      	adds	r3, r7, #7
 8000ff0:	9300      	str	r3, [sp, #0]
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	2280      	movs	r2, #128	; 0x80
 8000ff6:	2152      	movs	r1, #82	; 0x52
 8000ff8:	480a      	ldr	r0, [pc, #40]	; (8001024 <LTR329_Init+0x48>)
 8000ffa:	f001 fec3 	bl	8002d84 <HAL_I2C_Mem_Write>

    // Set measurement rate
    data = LTR329_MEAS_RATE;
 8000ffe:	2303      	movs	r3, #3
 8001000:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, LTR329_I2C_ADDRESS, LTR329_ALS_MEAS_RATE, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 8001002:	2364      	movs	r3, #100	; 0x64
 8001004:	9302      	str	r3, [sp, #8]
 8001006:	2301      	movs	r3, #1
 8001008:	9301      	str	r3, [sp, #4]
 800100a:	1dfb      	adds	r3, r7, #7
 800100c:	9300      	str	r3, [sp, #0]
 800100e:	2301      	movs	r3, #1
 8001010:	2285      	movs	r2, #133	; 0x85
 8001012:	2152      	movs	r1, #82	; 0x52
 8001014:	4803      	ldr	r0, [pc, #12]	; (8001024 <LTR329_Init+0x48>)
 8001016:	f001 feb5 	bl	8002d84 <HAL_I2C_Mem_Write>
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20000204 	.word	0x20000204

08001028 <LTR329_Read_Light>:

void LTR329_Read_Light(uint16_t *ch0, uint16_t *ch1) {
 8001028:	b580      	push	{r7, lr}
 800102a:	b088      	sub	sp, #32
 800102c:	af04      	add	r7, sp, #16
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
    uint8_t data[4];

    // Read 4 bytes of data starting from LTR329_ALS_DATA_CH1_0
    HAL_I2C_Mem_Read(&hi2c1, LTR329_I2C_ADDRESS, LTR329_ALS_DATA_CH1_0, I2C_MEMADD_SIZE_8BIT, data, 4, 100);
 8001032:	2364      	movs	r3, #100	; 0x64
 8001034:	9302      	str	r3, [sp, #8]
 8001036:	2304      	movs	r3, #4
 8001038:	9301      	str	r3, [sp, #4]
 800103a:	f107 030c 	add.w	r3, r7, #12
 800103e:	9300      	str	r3, [sp, #0]
 8001040:	2301      	movs	r3, #1
 8001042:	2288      	movs	r2, #136	; 0x88
 8001044:	2152      	movs	r1, #82	; 0x52
 8001046:	480d      	ldr	r0, [pc, #52]	; (800107c <LTR329_Read_Light+0x54>)
 8001048:	f001 ffb0 	bl	8002fac <HAL_I2C_Mem_Read>

    // Combine bytes to get the light data for each channel
    *ch1 = (uint16_t)(data[1] << 8) | data[0];
 800104c:	7b7b      	ldrb	r3, [r7, #13]
 800104e:	b29b      	uxth	r3, r3
 8001050:	021b      	lsls	r3, r3, #8
 8001052:	b29a      	uxth	r2, r3
 8001054:	7b3b      	ldrb	r3, [r7, #12]
 8001056:	b29b      	uxth	r3, r3
 8001058:	4313      	orrs	r3, r2
 800105a:	b29a      	uxth	r2, r3
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	801a      	strh	r2, [r3, #0]
    *ch0 = (uint16_t)(data[3] << 8) | data[2];
 8001060:	7bfb      	ldrb	r3, [r7, #15]
 8001062:	b29b      	uxth	r3, r3
 8001064:	021b      	lsls	r3, r3, #8
 8001066:	b29a      	uxth	r2, r3
 8001068:	7bbb      	ldrb	r3, [r7, #14]
 800106a:	b29b      	uxth	r3, r3
 800106c:	4313      	orrs	r3, r2
 800106e:	b29a      	uxth	r2, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	801a      	strh	r2, [r3, #0]
}
 8001074:	bf00      	nop
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	20000204 	.word	0x20000204

08001080 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE {
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 8001088:	1d39      	adds	r1, r7, #4
 800108a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800108e:	2201      	movs	r2, #1
 8001090:	4803      	ldr	r0, [pc, #12]	; (80010a0 <__io_putchar+0x20>)
 8001092:	f003 ff97 	bl	8004fc4 <HAL_UART_Transmit>
	return ch;
 8001096:	687b      	ldr	r3, [r7, #4]
}
 8001098:	4618      	mov	r0, r3
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	200002e0 	.word	0x200002e0

080010a4 <Toggle_LED>:
void transmitInstructions(navigationInstruction* instructions, uint8_t instructionCnt);
uint8_t receiveInstructions(uint8_t* data, uint16_t dataLength);
void printInstructions(navigationInstruction* instructions, uint16_t numInstructions);
uint8_t calculatePath(navigationInstruction* instructions);

void Toggle_LED(void) {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 80010a8:	2108      	movs	r1, #8
 80010aa:	4802      	ldr	r0, [pc, #8]	; (80010b4 <Toggle_LED+0x10>)
 80010ac:	f001 fdb4 	bl	8002c18 <HAL_GPIO_TogglePin>
}
 80010b0:	bf00      	nop
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	48000400 	.word	0x48000400

080010b8 <Enter_Stop2_Mode>:
void Enter_Stop2_Mode(void) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80010bc:	2200      	movs	r2, #0
 80010be:	2108      	movs	r1, #8
 80010c0:	4803      	ldr	r0, [pc, #12]	; (80010d0 <Enter_Stop2_Mode+0x18>)
 80010c2:	f001 fd91 	bl	8002be8 <HAL_GPIO_WritePin>

    // Enter Stop 2 mode
    HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 80010c6:	2001      	movs	r0, #1
 80010c8:	f002 fc4e 	bl	8003968 <HAL_PWREx_EnterSTOP2Mode>
}
 80010cc:	bf00      	nop
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	48000400 	.word	0x48000400
 80010d4:	00000000 	.word	0x00000000

080010d8 <calculatePath>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t calculatePath(navigationInstruction* instructions){
 80010d8:	b5b0      	push	{r4, r5, r7, lr}
 80010da:	b088      	sub	sp, #32
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
    uint8_t instructionCount = 0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	77fb      	strb	r3, [r7, #31]
    float deltaX = targetX - curX;
 80010e4:	4b86      	ldr	r3, [pc, #536]	; (8001300 <calculatePath+0x228>)
 80010e6:	ed93 7a00 	vldr	s14, [r3]
 80010ea:	4b86      	ldr	r3, [pc, #536]	; (8001304 <calculatePath+0x22c>)
 80010ec:	edd3 7a00 	vldr	s15, [r3]
 80010f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010f4:	edc7 7a05 	vstr	s15, [r7, #20]
    float deltaY = targetY - curY;
 80010f8:	4b83      	ldr	r3, [pc, #524]	; (8001308 <calculatePath+0x230>)
 80010fa:	ed93 7a00 	vldr	s14, [r3]
 80010fe:	4b83      	ldr	r3, [pc, #524]	; (800130c <calculatePath+0x234>)
 8001100:	edd3 7a00 	vldr	s15, [r3]
 8001104:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001108:	edc7 7a04 	vstr	s15, [r7, #16]

    // Calculate the angle to the target point
    float targetAngle = atan2(deltaY, deltaX) * (180.0 / M_PI);
 800110c:	6938      	ldr	r0, [r7, #16]
 800110e:	f7ff fa1b 	bl	8000548 <__aeabi_f2d>
 8001112:	4604      	mov	r4, r0
 8001114:	460d      	mov	r5, r1
 8001116:	6978      	ldr	r0, [r7, #20]
 8001118:	f7ff fa16 	bl	8000548 <__aeabi_f2d>
 800111c:	4602      	mov	r2, r0
 800111e:	460b      	mov	r3, r1
 8001120:	ec43 2b11 	vmov	d1, r2, r3
 8001124:	ec45 4b10 	vmov	d0, r4, r5
 8001128:	f00b fa4c 	bl	800c5c4 <atan2>
 800112c:	ec51 0b10 	vmov	r0, r1, d0
 8001130:	a36f      	add	r3, pc, #444	; (adr r3, 80012f0 <calculatePath+0x218>)
 8001132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001136:	f7ff fa5f 	bl	80005f8 <__aeabi_dmul>
 800113a:	4602      	mov	r2, r0
 800113c:	460b      	mov	r3, r1
 800113e:	4610      	mov	r0, r2
 8001140:	4619      	mov	r1, r3
 8001142:	f7ff fd31 	bl	8000ba8 <__aeabi_d2f>
 8001146:	4603      	mov	r3, r0
 8001148:	60fb      	str	r3, [r7, #12]
    targetAngle = fmod(targetAngle + 360.0, 360.0); // Ensure the angle is between 0 and 360
 800114a:	68f8      	ldr	r0, [r7, #12]
 800114c:	f7ff f9fc 	bl	8000548 <__aeabi_f2d>
 8001150:	f04f 0200 	mov.w	r2, #0
 8001154:	4b6e      	ldr	r3, [pc, #440]	; (8001310 <calculatePath+0x238>)
 8001156:	f7ff f899 	bl	800028c <__adddf3>
 800115a:	4602      	mov	r2, r0
 800115c:	460b      	mov	r3, r1
 800115e:	ec43 2b17 	vmov	d7, r2, r3
 8001162:	ed9f 1b65 	vldr	d1, [pc, #404]	; 80012f8 <calculatePath+0x220>
 8001166:	eeb0 0a47 	vmov.f32	s0, s14
 800116a:	eef0 0a67 	vmov.f32	s1, s15
 800116e:	f00b fa2b 	bl	800c5c8 <fmod>
 8001172:	ec53 2b10 	vmov	r2, r3, d0
 8001176:	4610      	mov	r0, r2
 8001178:	4619      	mov	r1, r3
 800117a:	f7ff fd15 	bl	8000ba8 <__aeabi_d2f>
 800117e:	4603      	mov	r3, r0
 8001180:	60fb      	str	r3, [r7, #12]

    // Calculate the shortest turn to the target angle
    float turnAngle = targetAngle - curAngle;
 8001182:	4b64      	ldr	r3, [pc, #400]	; (8001314 <calculatePath+0x23c>)
 8001184:	edd3 7a00 	vldr	s15, [r3]
 8001188:	ed97 7a03 	vldr	s14, [r7, #12]
 800118c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001190:	edc7 7a06 	vstr	s15, [r7, #24]
    if (turnAngle < -180.0) turnAngle += 360.0;
 8001194:	edd7 7a06 	vldr	s15, [r7, #24]
 8001198:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8001318 <calculatePath+0x240>
 800119c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011a4:	d507      	bpl.n	80011b6 <calculatePath+0xde>
 80011a6:	edd7 7a06 	vldr	s15, [r7, #24]
 80011aa:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 800131c <calculatePath+0x244>
 80011ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011b2:	edc7 7a06 	vstr	s15, [r7, #24]
    if (turnAngle > 180.0) turnAngle -= 360.0;
 80011b6:	edd7 7a06 	vldr	s15, [r7, #24]
 80011ba:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8001320 <calculatePath+0x248>
 80011be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011c6:	dd07      	ble.n	80011d8 <calculatePath+0x100>
 80011c8:	edd7 7a06 	vldr	s15, [r7, #24]
 80011cc:	ed9f 7a53 	vldr	s14, [pc, #332]	; 800131c <calculatePath+0x244>
 80011d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80011d4:	edc7 7a06 	vstr	s15, [r7, #24]

    // Turn to face the target point
    if (turnAngle != 0.0) {
 80011d8:	edd7 7a06 	vldr	s15, [r7, #24]
 80011dc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80011e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011e4:	d025      	beq.n	8001232 <calculatePath+0x15a>
        instructions[instructionCount].instructionType = turnAngle > 0.0 ? CLOCKWISE : COUNTERCLOCKWISE;
 80011e6:	edd7 7a06 	vldr	s15, [r7, #24]
 80011ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011f2:	dd01      	ble.n	80011f8 <calculatePath+0x120>
 80011f4:	2104      	movs	r1, #4
 80011f6:	e000      	b.n	80011fa <calculatePath+0x122>
 80011f8:	2105      	movs	r1, #5
 80011fa:	7ffa      	ldrb	r2, [r7, #31]
 80011fc:	4613      	mov	r3, r2
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	4413      	add	r3, r2
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	4413      	add	r3, r2
 8001206:	460a      	mov	r2, r1
 8001208:	701a      	strb	r2, [r3, #0]
        instructions[instructionCount].instructionValue = fabs(turnAngle);
 800120a:	7ffa      	ldrb	r2, [r7, #31]
 800120c:	4613      	mov	r3, r2
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	4413      	add	r3, r2
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	4413      	add	r3, r2
 8001216:	edd7 7a06 	vldr	s15, [r7, #24]
 800121a:	eef0 7ae7 	vabs.f32	s15, s15
 800121e:	3301      	adds	r3, #1
 8001220:	ee17 2a90 	vmov	r2, s15
 8001224:	601a      	str	r2, [r3, #0]
        instructionCount++;
 8001226:	7ffb      	ldrb	r3, [r7, #31]
 8001228:	3301      	adds	r3, #1
 800122a:	77fb      	strb	r3, [r7, #31]
        plannedAngle = targetAngle;
 800122c:	4a3d      	ldr	r2, [pc, #244]	; (8001324 <calculatePath+0x24c>)
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	6013      	str	r3, [r2, #0]
    }

    // Move to the target point
    float distance = sqrt(deltaX * deltaX + deltaY * deltaY);
 8001232:	edd7 7a05 	vldr	s15, [r7, #20]
 8001236:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800123a:	edd7 7a04 	vldr	s15, [r7, #16]
 800123e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001242:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001246:	ee17 0a90 	vmov	r0, s15
 800124a:	f7ff f97d 	bl	8000548 <__aeabi_f2d>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	ec43 2b10 	vmov	d0, r2, r3
 8001256:	f00b faad 	bl	800c7b4 <sqrt>
 800125a:	ec53 2b10 	vmov	r2, r3, d0
 800125e:	4610      	mov	r0, r2
 8001260:	4619      	mov	r1, r3
 8001262:	f7ff fca1 	bl	8000ba8 <__aeabi_d2f>
 8001266:	4603      	mov	r3, r0
 8001268:	60bb      	str	r3, [r7, #8]
    instructions[instructionCount].instructionType = turnAngle >= -90.0 && turnAngle <= 90.0 ? FORWARD : BACKWARD;
 800126a:	edd7 7a06 	vldr	s15, [r7, #24]
 800126e:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8001328 <calculatePath+0x250>
 8001272:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800127a:	db0a      	blt.n	8001292 <calculatePath+0x1ba>
 800127c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001280:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800132c <calculatePath+0x254>
 8001284:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800128c:	d801      	bhi.n	8001292 <calculatePath+0x1ba>
 800128e:	2102      	movs	r1, #2
 8001290:	e000      	b.n	8001294 <calculatePath+0x1bc>
 8001292:	2103      	movs	r1, #3
 8001294:	7ffa      	ldrb	r2, [r7, #31]
 8001296:	4613      	mov	r3, r2
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	4413      	add	r3, r2
 800129c:	687a      	ldr	r2, [r7, #4]
 800129e:	4413      	add	r3, r2
 80012a0:	460a      	mov	r2, r1
 80012a2:	701a      	strb	r2, [r3, #0]
    instructions[instructionCount].instructionValue = distance;
 80012a4:	7ffa      	ldrb	r2, [r7, #31]
 80012a6:	4613      	mov	r3, r2
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	4413      	add	r3, r2
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	4413      	add	r3, r2
 80012b0:	3301      	adds	r3, #1
 80012b2:	68ba      	ldr	r2, [r7, #8]
 80012b4:	601a      	str	r2, [r3, #0]
    instructionCount++;
 80012b6:	7ffb      	ldrb	r3, [r7, #31]
 80012b8:	3301      	adds	r3, #1
 80012ba:	77fb      	strb	r3, [r7, #31]

    // Add a stop instruction
    instructions[instructionCount].instructionType = STOP;
 80012bc:	7ffa      	ldrb	r2, [r7, #31]
 80012be:	4613      	mov	r3, r2
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	4413      	add	r3, r2
 80012c4:	687a      	ldr	r2, [r7, #4]
 80012c6:	4413      	add	r3, r2
 80012c8:	2206      	movs	r2, #6
 80012ca:	701a      	strb	r2, [r3, #0]
    instructions[instructionCount].instructionValue = 0.0;
 80012cc:	7ffa      	ldrb	r2, [r7, #31]
 80012ce:	4613      	mov	r3, r2
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	4413      	add	r3, r2
 80012d4:	687a      	ldr	r2, [r7, #4]
 80012d6:	4413      	add	r3, r2
 80012d8:	3301      	adds	r3, #1
 80012da:	f04f 0200 	mov.w	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
    instructionCount++;
 80012e0:	7ffb      	ldrb	r3, [r7, #31]
 80012e2:	3301      	adds	r3, #1
 80012e4:	77fb      	strb	r3, [r7, #31]

    return instructionCount;
 80012e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3720      	adds	r7, #32
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bdb0      	pop	{r4, r5, r7, pc}
 80012f0:	1a63c1f8 	.word	0x1a63c1f8
 80012f4:	404ca5dc 	.word	0x404ca5dc
 80012f8:	00000000 	.word	0x00000000
 80012fc:	40768000 	.word	0x40768000
 8001300:	20000440 	.word	0x20000440
 8001304:	20000434 	.word	0x20000434
 8001308:	20000444 	.word	0x20000444
 800130c:	20000438 	.word	0x20000438
 8001310:	40768000 	.word	0x40768000
 8001314:	2000043c 	.word	0x2000043c
 8001318:	c3340000 	.word	0xc3340000
 800131c:	43b40000 	.word	0x43b40000
 8001320:	43340000 	.word	0x43340000
 8001324:	20000448 	.word	0x20000448
 8001328:	c2b40000 	.word	0xc2b40000
 800132c:	42b40000 	.word	0x42b40000

08001330 <transmitInstructions>:

void transmitInstructions(navigationInstruction* instructions, uint8_t instructionCnt){
 8001330:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001334:	b087      	sub	sp, #28
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
 800133a:	460b      	mov	r3, r1
 800133c:	70fb      	strb	r3, [r7, #3]
 800133e:	466b      	mov	r3, sp
 8001340:	461e      	mov	r6, r3
      Transmissions consists of a START_DELIMITER, Instruction Count, payload and END_DELIMITER
      Instruction Count is a 1 byte value
      Payload consists of the instructions which are 5 bytes each
      The data is transmitted on USART2 using HAL_UART_Transmit
    */
    uint8_t transmission[instructionCnt*sizeof(navigationInstruction) + 3];
 8001342:	78fa      	ldrb	r2, [r7, #3]
 8001344:	4613      	mov	r3, r2
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	4413      	add	r3, r2
 800134a:	1cd9      	adds	r1, r3, #3
 800134c:	460b      	mov	r3, r1
 800134e:	3b01      	subs	r3, #1
 8001350:	613b      	str	r3, [r7, #16]
 8001352:	2300      	movs	r3, #0
 8001354:	4688      	mov	r8, r1
 8001356:	4699      	mov	r9, r3
 8001358:	f04f 0200 	mov.w	r2, #0
 800135c:	f04f 0300 	mov.w	r3, #0
 8001360:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001364:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001368:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800136c:	2300      	movs	r3, #0
 800136e:	460c      	mov	r4, r1
 8001370:	461d      	mov	r5, r3
 8001372:	f04f 0200 	mov.w	r2, #0
 8001376:	f04f 0300 	mov.w	r3, #0
 800137a:	00eb      	lsls	r3, r5, #3
 800137c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001380:	00e2      	lsls	r2, r4, #3
 8001382:	1dcb      	adds	r3, r1, #7
 8001384:	08db      	lsrs	r3, r3, #3
 8001386:	00db      	lsls	r3, r3, #3
 8001388:	ebad 0d03 	sub.w	sp, sp, r3
 800138c:	466b      	mov	r3, sp
 800138e:	3300      	adds	r3, #0
 8001390:	60fb      	str	r3, [r7, #12]

    transmission[0] = START_DELIMITER;
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	225b      	movs	r2, #91	; 0x5b
 8001396:	701a      	strb	r2, [r3, #0]
    transmission[1] = instructionCnt;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	78fa      	ldrb	r2, [r7, #3]
 800139c:	705a      	strb	r2, [r3, #1]
    for (int i = 0; i < instructionCnt; i++) {
 800139e:	2300      	movs	r3, #0
 80013a0:	617b      	str	r3, [r7, #20]
 80013a2:	e020      	b.n	80013e6 <transmitInstructions+0xb6>
        transmission[2 + i*sizeof(navigationInstruction)] = instructions[i].instructionType;
 80013a4:	697a      	ldr	r2, [r7, #20]
 80013a6:	4613      	mov	r3, r2
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	4413      	add	r3, r2
 80013ac:	687a      	ldr	r2, [r7, #4]
 80013ae:	18d1      	adds	r1, r2, r3
 80013b0:	697a      	ldr	r2, [r7, #20]
 80013b2:	4613      	mov	r3, r2
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	4413      	add	r3, r2
 80013b8:	3302      	adds	r3, #2
 80013ba:	7809      	ldrb	r1, [r1, #0]
 80013bc:	68fa      	ldr	r2, [r7, #12]
 80013be:	54d1      	strb	r1, [r2, r3]
        memcpy(&transmission[3 + i*sizeof(navigationInstruction)], &instructions[i].instructionValue, 4);
 80013c0:	697a      	ldr	r2, [r7, #20]
 80013c2:	4613      	mov	r3, r2
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	4413      	add	r3, r2
 80013c8:	3303      	adds	r3, #3
 80013ca:	68fa      	ldr	r2, [r7, #12]
 80013cc:	18d1      	adds	r1, r2, r3
 80013ce:	697a      	ldr	r2, [r7, #20]
 80013d0:	4613      	mov	r3, r2
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	4413      	add	r3, r2
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	4413      	add	r3, r2
 80013da:	3301      	adds	r3, #1
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	600b      	str	r3, [r1, #0]
    for (int i = 0; i < instructionCnt; i++) {
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	3301      	adds	r3, #1
 80013e4:	617b      	str	r3, [r7, #20]
 80013e6:	78fb      	ldrb	r3, [r7, #3]
 80013e8:	697a      	ldr	r2, [r7, #20]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	dbda      	blt.n	80013a4 <transmitInstructions+0x74>
    }
    transmission[instructionCnt*sizeof(navigationInstruction) + 2] = END_DELIMITER;
 80013ee:	78fa      	ldrb	r2, [r7, #3]
 80013f0:	4613      	mov	r3, r2
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	4413      	add	r3, r2
 80013f6:	3302      	adds	r3, #2
 80013f8:	68fa      	ldr	r2, [r7, #12]
 80013fa:	215d      	movs	r1, #93	; 0x5d
 80013fc:	54d1      	strb	r1, [r2, r3]
    HAL_UART_Transmit(&huart2, transmission, instructionCnt*sizeof(navigationInstruction) + 3, HAL_MAX_DELAY);
 80013fe:	78fb      	ldrb	r3, [r7, #3]
 8001400:	b29b      	uxth	r3, r3
 8001402:	461a      	mov	r2, r3
 8001404:	0092      	lsls	r2, r2, #2
 8001406:	4413      	add	r3, r2
 8001408:	b29b      	uxth	r3, r3
 800140a:	3303      	adds	r3, #3
 800140c:	b29a      	uxth	r2, r3
 800140e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001412:	68f9      	ldr	r1, [r7, #12]
 8001414:	4804      	ldr	r0, [pc, #16]	; (8001428 <transmitInstructions+0xf8>)
 8001416:	f003 fdd5 	bl	8004fc4 <HAL_UART_Transmit>
 800141a:	46b5      	mov	sp, r6
//    receiveInstructions(transmission, instructionCnt*sizeof(navigationInstruction) + 3);
}
 800141c:	bf00      	nop
 800141e:	371c      	adds	r7, #28
 8001420:	46bd      	mov	sp, r7
 8001422:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001426:	bf00      	nop
 8001428:	200002e0 	.word	0x200002e0

0800142c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001430:	f000 fecb 	bl	80021ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001434:	f000 f880 	bl	8001538 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001438:	f000 f99a 	bl	8001770 <MX_GPIO_Init>
  MX_DMA_Init();
 800143c:	f000 f972 	bl	8001724 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001440:	f000 f940 	bl	80016c4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001444:	f000 f8ce 	bl	80015e4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001448:	f000 f90c 	bl	8001664 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
//  HAL_UART_Receive_IT(&huart2, uart2_buffer, 1);
//  HAL_UART_Receive_IT(&huart1, uart1_buffer, 1);
  printf("Setup complete\n");
 800144c:	4823      	ldr	r0, [pc, #140]	; (80014dc <main+0xb0>)
 800144e:	f009 f8c9 	bl	800a5e4 <puts>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001452:	f005 fbb9 	bl	8006bc8 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of uart1Queue */
  uart1QueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &uart1Queue_attributes);
 8001456:	4a22      	ldr	r2, [pc, #136]	; (80014e0 <main+0xb4>)
 8001458:	2102      	movs	r1, #2
 800145a:	2010      	movs	r0, #16
 800145c:	f005 fcab 	bl	8006db6 <osMessageQueueNew>
 8001460:	4603      	mov	r3, r0
 8001462:	4a20      	ldr	r2, [pc, #128]	; (80014e4 <main+0xb8>)
 8001464:	6013      	str	r3, [r2, #0]

  /* creation of uart2Queue */
  uart2QueueHandle = osMessageQueueNew (2, sizeof(Dash7ToSTM32Message), &uart2Queue_attributes);
 8001466:	4a20      	ldr	r2, [pc, #128]	; (80014e8 <main+0xbc>)
 8001468:	210b      	movs	r1, #11
 800146a:	2002      	movs	r0, #2
 800146c:	f005 fca3 	bl	8006db6 <osMessageQueueNew>
 8001470:	4603      	mov	r3, r0
 8001472:	4a1e      	ldr	r2, [pc, #120]	; (80014ec <main+0xc0>)
 8001474:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001476:	4a1e      	ldr	r2, [pc, #120]	; (80014f0 <main+0xc4>)
 8001478:	2100      	movs	r1, #0
 800147a:	481e      	ldr	r0, [pc, #120]	; (80014f4 <main+0xc8>)
 800147c:	f005 fbee 	bl	8006c5c <osThreadNew>
 8001480:	4603      	mov	r3, r0
 8001482:	4a1d      	ldr	r2, [pc, #116]	; (80014f8 <main+0xcc>)
 8001484:	6013      	str	r3, [r2, #0]

  /* creation of UART2Task */
  UART2TaskHandle = osThreadNew(UART2_Task, NULL, &UART2Task_attributes);
 8001486:	4a1d      	ldr	r2, [pc, #116]	; (80014fc <main+0xd0>)
 8001488:	2100      	movs	r1, #0
 800148a:	481d      	ldr	r0, [pc, #116]	; (8001500 <main+0xd4>)
 800148c:	f005 fbe6 	bl	8006c5c <osThreadNew>
 8001490:	4603      	mov	r3, r0
 8001492:	4a1c      	ldr	r2, [pc, #112]	; (8001504 <main+0xd8>)
 8001494:	6013      	str	r3, [r2, #0]

  /* creation of UART1Task */
  UART1TaskHandle = osThreadNew(UART1_Task, NULL, &UART1Task_attributes);
 8001496:	4a1c      	ldr	r2, [pc, #112]	; (8001508 <main+0xdc>)
 8001498:	2100      	movs	r1, #0
 800149a:	481c      	ldr	r0, [pc, #112]	; (800150c <main+0xe0>)
 800149c:	f005 fbde 	bl	8006c5c <osThreadNew>
 80014a0:	4603      	mov	r3, r0
 80014a2:	4a1b      	ldr	r2, [pc, #108]	; (8001510 <main+0xe4>)
 80014a4:	6013      	str	r3, [r2, #0]

  /* creation of LightSensor_Tas */
  LightSensor_TasHandle = osThreadNew(LightSensorTask, NULL, &LightSensor_Tas_attributes);
 80014a6:	4a1b      	ldr	r2, [pc, #108]	; (8001514 <main+0xe8>)
 80014a8:	2100      	movs	r1, #0
 80014aa:	481b      	ldr	r0, [pc, #108]	; (8001518 <main+0xec>)
 80014ac:	f005 fbd6 	bl	8006c5c <osThreadNew>
 80014b0:	4603      	mov	r3, r0
 80014b2:	4a1a      	ldr	r2, [pc, #104]	; (800151c <main+0xf0>)
 80014b4:	6013      	str	r3, [r2, #0]

  /* creation of Temp_Task */
  Temp_TaskHandle = osThreadNew(TempTask, NULL, &Temp_Task_attributes);
 80014b6:	4a1a      	ldr	r2, [pc, #104]	; (8001520 <main+0xf4>)
 80014b8:	2100      	movs	r1, #0
 80014ba:	481a      	ldr	r0, [pc, #104]	; (8001524 <main+0xf8>)
 80014bc:	f005 fbce 	bl	8006c5c <osThreadNew>
 80014c0:	4603      	mov	r3, r0
 80014c2:	4a19      	ldr	r2, [pc, #100]	; (8001528 <main+0xfc>)
 80014c4:	6013      	str	r3, [r2, #0]

  /* creation of NavigationTask */
  NavigationTaskHandle = osThreadNew(StartNavigationTask, NULL, &NavigationTask_attributes);
 80014c6:	4a19      	ldr	r2, [pc, #100]	; (800152c <main+0x100>)
 80014c8:	2100      	movs	r1, #0
 80014ca:	4819      	ldr	r0, [pc, #100]	; (8001530 <main+0x104>)
 80014cc:	f005 fbc6 	bl	8006c5c <osThreadNew>
 80014d0:	4603      	mov	r3, r0
 80014d2:	4a18      	ldr	r2, [pc, #96]	; (8001534 <main+0x108>)
 80014d4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80014d6:	f005 fb9b 	bl	8006c10 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80014da:	e7fe      	b.n	80014da <main+0xae>
 80014dc:	0800cfb8 	.word	0x0800cfb8
 80014e0:	0800d128 	.word	0x0800d128
 80014e4:	20000410 	.word	0x20000410
 80014e8:	0800d140 	.word	0x0800d140
 80014ec:	20000414 	.word	0x20000414
 80014f0:	0800d050 	.word	0x0800d050
 80014f4:	080019a9 	.word	0x080019a9
 80014f8:	200003f8 	.word	0x200003f8
 80014fc:	0800d074 	.word	0x0800d074
 8001500:	080019f9 	.word	0x080019f9
 8001504:	200003fc 	.word	0x200003fc
 8001508:	0800d098 	.word	0x0800d098
 800150c:	08001a0b 	.word	0x08001a0b
 8001510:	20000400 	.word	0x20000400
 8001514:	0800d0bc 	.word	0x0800d0bc
 8001518:	08001a21 	.word	0x08001a21
 800151c:	20000404 	.word	0x20000404
 8001520:	0800d0e0 	.word	0x0800d0e0
 8001524:	08001a51 	.word	0x08001a51
 8001528:	20000408 	.word	0x20000408
 800152c:	0800d104 	.word	0x0800d104
 8001530:	08001a69 	.word	0x08001a69
 8001534:	2000040c 	.word	0x2000040c

08001538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b096      	sub	sp, #88	; 0x58
 800153c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800153e:	f107 0314 	add.w	r3, r7, #20
 8001542:	2244      	movs	r2, #68	; 0x44
 8001544:	2100      	movs	r1, #0
 8001546:	4618      	mov	r0, r3
 8001548:	f009 f854 	bl	800a5f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800154c:	463b      	mov	r3, r7
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	605a      	str	r2, [r3, #4]
 8001554:	609a      	str	r2, [r3, #8]
 8001556:	60da      	str	r2, [r3, #12]
 8001558:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800155a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800155e:	f002 f9ad 	bl	80038bc <HAL_PWREx_ControlVoltageScaling>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001568:	f000 fad0 	bl	8001b0c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800156c:	f002 f988 	bl	8003880 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001570:	4b1b      	ldr	r3, [pc, #108]	; (80015e0 <SystemClock_Config+0xa8>)
 8001572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001576:	4a1a      	ldr	r2, [pc, #104]	; (80015e0 <SystemClock_Config+0xa8>)
 8001578:	f023 0318 	bic.w	r3, r3, #24
 800157c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001580:	2314      	movs	r3, #20
 8001582:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001584:	2301      	movs	r3, #1
 8001586:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001588:	2301      	movs	r3, #1
 800158a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800158c:	2300      	movs	r3, #0
 800158e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8001590:	23a0      	movs	r3, #160	; 0xa0
 8001592:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001594:	2300      	movs	r3, #0
 8001596:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001598:	f107 0314 	add.w	r3, r7, #20
 800159c:	4618      	mov	r0, r3
 800159e:	f002 fa13 	bl	80039c8 <HAL_RCC_OscConfig>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <SystemClock_Config+0x74>
  {
    Error_Handler();
 80015a8:	f000 fab0 	bl	8001b0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015ac:	230f      	movs	r3, #15
 80015ae:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80015b0:	2300      	movs	r3, #0
 80015b2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015b4:	2300      	movs	r3, #0
 80015b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015b8:	2300      	movs	r3, #0
 80015ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015bc:	2300      	movs	r3, #0
 80015be:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80015c0:	463b      	mov	r3, r7
 80015c2:	2101      	movs	r1, #1
 80015c4:	4618      	mov	r0, r3
 80015c6:	f002 fe61 	bl	800428c <HAL_RCC_ClockConfig>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80015d0:	f000 fa9c 	bl	8001b0c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80015d4:	f003 fa36 	bl	8004a44 <HAL_RCCEx_EnableMSIPLLMode>
}
 80015d8:	bf00      	nop
 80015da:	3758      	adds	r7, #88	; 0x58
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	40021000 	.word	0x40021000

080015e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015e8:	4b1b      	ldr	r3, [pc, #108]	; (8001658 <MX_I2C1_Init+0x74>)
 80015ea:	4a1c      	ldr	r2, [pc, #112]	; (800165c <MX_I2C1_Init+0x78>)
 80015ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80015ee:	4b1a      	ldr	r3, [pc, #104]	; (8001658 <MX_I2C1_Init+0x74>)
 80015f0:	4a1b      	ldr	r2, [pc, #108]	; (8001660 <MX_I2C1_Init+0x7c>)
 80015f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80015f4:	4b18      	ldr	r3, [pc, #96]	; (8001658 <MX_I2C1_Init+0x74>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015fa:	4b17      	ldr	r3, [pc, #92]	; (8001658 <MX_I2C1_Init+0x74>)
 80015fc:	2201      	movs	r2, #1
 80015fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001600:	4b15      	ldr	r3, [pc, #84]	; (8001658 <MX_I2C1_Init+0x74>)
 8001602:	2200      	movs	r2, #0
 8001604:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001606:	4b14      	ldr	r3, [pc, #80]	; (8001658 <MX_I2C1_Init+0x74>)
 8001608:	2200      	movs	r2, #0
 800160a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800160c:	4b12      	ldr	r3, [pc, #72]	; (8001658 <MX_I2C1_Init+0x74>)
 800160e:	2200      	movs	r2, #0
 8001610:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001612:	4b11      	ldr	r3, [pc, #68]	; (8001658 <MX_I2C1_Init+0x74>)
 8001614:	2200      	movs	r2, #0
 8001616:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001618:	4b0f      	ldr	r3, [pc, #60]	; (8001658 <MX_I2C1_Init+0x74>)
 800161a:	2200      	movs	r2, #0
 800161c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800161e:	480e      	ldr	r0, [pc, #56]	; (8001658 <MX_I2C1_Init+0x74>)
 8001620:	f001 fb14 	bl	8002c4c <HAL_I2C_Init>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800162a:	f000 fa6f 	bl	8001b0c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800162e:	2100      	movs	r1, #0
 8001630:	4809      	ldr	r0, [pc, #36]	; (8001658 <MX_I2C1_Init+0x74>)
 8001632:	f002 f88d 	bl	8003750 <HAL_I2CEx_ConfigAnalogFilter>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800163c:	f000 fa66 	bl	8001b0c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001640:	2100      	movs	r1, #0
 8001642:	4805      	ldr	r0, [pc, #20]	; (8001658 <MX_I2C1_Init+0x74>)
 8001644:	f002 f8cf 	bl	80037e6 <HAL_I2CEx_ConfigDigitalFilter>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800164e:	f000 fa5d 	bl	8001b0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20000204 	.word	0x20000204
 800165c:	40005400 	.word	0x40005400
 8001660:	00707cbb 	.word	0x00707cbb

08001664 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001668:	4b14      	ldr	r3, [pc, #80]	; (80016bc <MX_USART1_UART_Init+0x58>)
 800166a:	4a15      	ldr	r2, [pc, #84]	; (80016c0 <MX_USART1_UART_Init+0x5c>)
 800166c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 800166e:	4b13      	ldr	r3, [pc, #76]	; (80016bc <MX_USART1_UART_Init+0x58>)
 8001670:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8001674:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001676:	4b11      	ldr	r3, [pc, #68]	; (80016bc <MX_USART1_UART_Init+0x58>)
 8001678:	2200      	movs	r2, #0
 800167a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800167c:	4b0f      	ldr	r3, [pc, #60]	; (80016bc <MX_USART1_UART_Init+0x58>)
 800167e:	2200      	movs	r2, #0
 8001680:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001682:	4b0e      	ldr	r3, [pc, #56]	; (80016bc <MX_USART1_UART_Init+0x58>)
 8001684:	2200      	movs	r2, #0
 8001686:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001688:	4b0c      	ldr	r3, [pc, #48]	; (80016bc <MX_USART1_UART_Init+0x58>)
 800168a:	220c      	movs	r2, #12
 800168c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800168e:	4b0b      	ldr	r3, [pc, #44]	; (80016bc <MX_USART1_UART_Init+0x58>)
 8001690:	2200      	movs	r2, #0
 8001692:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001694:	4b09      	ldr	r3, [pc, #36]	; (80016bc <MX_USART1_UART_Init+0x58>)
 8001696:	2200      	movs	r2, #0
 8001698:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800169a:	4b08      	ldr	r3, [pc, #32]	; (80016bc <MX_USART1_UART_Init+0x58>)
 800169c:	2200      	movs	r2, #0
 800169e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016a0:	4b06      	ldr	r3, [pc, #24]	; (80016bc <MX_USART1_UART_Init+0x58>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016a6:	4805      	ldr	r0, [pc, #20]	; (80016bc <MX_USART1_UART_Init+0x58>)
 80016a8:	f003 fc3e 	bl	8004f28 <HAL_UART_Init>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80016b2:	f000 fa2b 	bl	8001b0c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	20000258 	.word	0x20000258
 80016c0:	40013800 	.word	0x40013800

080016c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016c8:	4b14      	ldr	r3, [pc, #80]	; (800171c <MX_USART2_UART_Init+0x58>)
 80016ca:	4a15      	ldr	r2, [pc, #84]	; (8001720 <MX_USART2_UART_Init+0x5c>)
 80016cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016ce:	4b13      	ldr	r3, [pc, #76]	; (800171c <MX_USART2_UART_Init+0x58>)
 80016d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016d6:	4b11      	ldr	r3, [pc, #68]	; (800171c <MX_USART2_UART_Init+0x58>)
 80016d8:	2200      	movs	r2, #0
 80016da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016dc:	4b0f      	ldr	r3, [pc, #60]	; (800171c <MX_USART2_UART_Init+0x58>)
 80016de:	2200      	movs	r2, #0
 80016e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016e2:	4b0e      	ldr	r3, [pc, #56]	; (800171c <MX_USART2_UART_Init+0x58>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016e8:	4b0c      	ldr	r3, [pc, #48]	; (800171c <MX_USART2_UART_Init+0x58>)
 80016ea:	220c      	movs	r2, #12
 80016ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ee:	4b0b      	ldr	r3, [pc, #44]	; (800171c <MX_USART2_UART_Init+0x58>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016f4:	4b09      	ldr	r3, [pc, #36]	; (800171c <MX_USART2_UART_Init+0x58>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016fa:	4b08      	ldr	r3, [pc, #32]	; (800171c <MX_USART2_UART_Init+0x58>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001700:	4b06      	ldr	r3, [pc, #24]	; (800171c <MX_USART2_UART_Init+0x58>)
 8001702:	2200      	movs	r2, #0
 8001704:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001706:	4805      	ldr	r0, [pc, #20]	; (800171c <MX_USART2_UART_Init+0x58>)
 8001708:	f003 fc0e 	bl	8004f28 <HAL_UART_Init>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001712:	f000 f9fb 	bl	8001b0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	200002e0 	.word	0x200002e0
 8001720:	40004400 	.word	0x40004400

08001724 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800172a:	4b10      	ldr	r3, [pc, #64]	; (800176c <MX_DMA_Init+0x48>)
 800172c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800172e:	4a0f      	ldr	r2, [pc, #60]	; (800176c <MX_DMA_Init+0x48>)
 8001730:	f043 0301 	orr.w	r3, r3, #1
 8001734:	6493      	str	r3, [r2, #72]	; 0x48
 8001736:	4b0d      	ldr	r3, [pc, #52]	; (800176c <MX_DMA_Init+0x48>)
 8001738:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	607b      	str	r3, [r7, #4]
 8001740:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8001742:	2200      	movs	r2, #0
 8001744:	2105      	movs	r1, #5
 8001746:	200f      	movs	r0, #15
 8001748:	f000 fe30 	bl	80023ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800174c:	200f      	movs	r0, #15
 800174e:	f000 fe49 	bl	80023e4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8001752:	2200      	movs	r2, #0
 8001754:	2105      	movs	r1, #5
 8001756:	2010      	movs	r0, #16
 8001758:	f000 fe28 	bl	80023ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800175c:	2010      	movs	r0, #16
 800175e:	f000 fe41 	bl	80023e4 <HAL_NVIC_EnableIRQ>

}
 8001762:	bf00      	nop
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40021000 	.word	0x40021000

08001770 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b088      	sub	sp, #32
 8001774:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001776:	f107 030c 	add.w	r3, r7, #12
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	605a      	str	r2, [r3, #4]
 8001780:	609a      	str	r2, [r3, #8]
 8001782:	60da      	str	r2, [r3, #12]
 8001784:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001786:	4b1d      	ldr	r3, [pc, #116]	; (80017fc <MX_GPIO_Init+0x8c>)
 8001788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800178a:	4a1c      	ldr	r2, [pc, #112]	; (80017fc <MX_GPIO_Init+0x8c>)
 800178c:	f043 0304 	orr.w	r3, r3, #4
 8001790:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001792:	4b1a      	ldr	r3, [pc, #104]	; (80017fc <MX_GPIO_Init+0x8c>)
 8001794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001796:	f003 0304 	and.w	r3, r3, #4
 800179a:	60bb      	str	r3, [r7, #8]
 800179c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800179e:	4b17      	ldr	r3, [pc, #92]	; (80017fc <MX_GPIO_Init+0x8c>)
 80017a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a2:	4a16      	ldr	r2, [pc, #88]	; (80017fc <MX_GPIO_Init+0x8c>)
 80017a4:	f043 0301 	orr.w	r3, r3, #1
 80017a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017aa:	4b14      	ldr	r3, [pc, #80]	; (80017fc <MX_GPIO_Init+0x8c>)
 80017ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	607b      	str	r3, [r7, #4]
 80017b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017b6:	4b11      	ldr	r3, [pc, #68]	; (80017fc <MX_GPIO_Init+0x8c>)
 80017b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ba:	4a10      	ldr	r2, [pc, #64]	; (80017fc <MX_GPIO_Init+0x8c>)
 80017bc:	f043 0302 	orr.w	r3, r3, #2
 80017c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017c2:	4b0e      	ldr	r3, [pc, #56]	; (80017fc <MX_GPIO_Init+0x8c>)
 80017c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	603b      	str	r3, [r7, #0]
 80017cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80017ce:	2200      	movs	r2, #0
 80017d0:	2108      	movs	r1, #8
 80017d2:	480b      	ldr	r0, [pc, #44]	; (8001800 <MX_GPIO_Init+0x90>)
 80017d4:	f001 fa08 	bl	8002be8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80017d8:	2308      	movs	r3, #8
 80017da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017dc:	2301      	movs	r3, #1
 80017de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e0:	2300      	movs	r3, #0
 80017e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e4:	2300      	movs	r3, #0
 80017e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80017e8:	f107 030c 	add.w	r3, r7, #12
 80017ec:	4619      	mov	r1, r3
 80017ee:	4804      	ldr	r0, [pc, #16]	; (8001800 <MX_GPIO_Init+0x90>)
 80017f0:	f001 f888 	bl	8002904 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017f4:	bf00      	nop
 80017f6:	3720      	adds	r7, #32
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40021000 	.word	0x40021000
 8001800:	48000400 	.word	0x48000400

08001804 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a59      	ldr	r2, [pc, #356]	; (8001978 <HAL_UART_RxCpltCallback+0x174>)
 8001812:	4293      	cmp	r3, r2
 8001814:	f040 8080 	bne.w	8001918 <HAL_UART_RxCpltCallback+0x114>
    {
        switch (UART1receiveState) {
 8001818:	4b58      	ldr	r3, [pc, #352]	; (800197c <HAL_UART_RxCpltCallback+0x178>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	2b03      	cmp	r3, #3
 800181e:	f200 80a6 	bhi.w	800196e <HAL_UART_RxCpltCallback+0x16a>
 8001822:	a201      	add	r2, pc, #4	; (adr r2, 8001828 <HAL_UART_RxCpltCallback+0x24>)
 8001824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001828:	08001839 	.word	0x08001839
 800182c:	08001853 	.word	0x08001853
 8001830:	08001873 	.word	0x08001873
 8001834:	080018c7 	.word	0x080018c7
            case WAIT_FOR_START_DELIMITER:
                if (uart1_buffer[0] == START_DELIMITER) {
 8001838:	4b51      	ldr	r3, [pc, #324]	; (8001980 <HAL_UART_RxCpltCallback+0x17c>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	2b5b      	cmp	r3, #91	; 0x5b
 800183e:	d102      	bne.n	8001846 <HAL_UART_RxCpltCallback+0x42>
                    UART1receiveState = WAIT_FOR_DATA_LENGTH_HIGH;
 8001840:	4b4e      	ldr	r3, [pc, #312]	; (800197c <HAL_UART_RxCpltCallback+0x178>)
 8001842:	2201      	movs	r2, #1
 8001844:	701a      	strb	r2, [r3, #0]
                }
                HAL_UART_Receive_IT(&huart1, uart1_buffer, 1);
 8001846:	2201      	movs	r2, #1
 8001848:	494d      	ldr	r1, [pc, #308]	; (8001980 <HAL_UART_RxCpltCallback+0x17c>)
 800184a:	484e      	ldr	r0, [pc, #312]	; (8001984 <HAL_UART_RxCpltCallback+0x180>)
 800184c:	f003 fc44 	bl	80050d8 <HAL_UART_Receive_IT>
                break;
 8001850:	e08d      	b.n	800196e <HAL_UART_RxCpltCallback+0x16a>

            case WAIT_FOR_DATA_LENGTH_HIGH:
                dataLength = uart1_buffer[0] << 8;
 8001852:	4b4b      	ldr	r3, [pc, #300]	; (8001980 <HAL_UART_RxCpltCallback+0x17c>)
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	b29b      	uxth	r3, r3
 8001858:	021b      	lsls	r3, r3, #8
 800185a:	b29a      	uxth	r2, r3
 800185c:	4b4a      	ldr	r3, [pc, #296]	; (8001988 <HAL_UART_RxCpltCallback+0x184>)
 800185e:	801a      	strh	r2, [r3, #0]
                UART1receiveState = WAIT_FOR_DATA_LENGTH_LOW;
 8001860:	4b46      	ldr	r3, [pc, #280]	; (800197c <HAL_UART_RxCpltCallback+0x178>)
 8001862:	2202      	movs	r2, #2
 8001864:	701a      	strb	r2, [r3, #0]
                HAL_UART_Receive_IT(&huart1, uart1_buffer, 1);
 8001866:	2201      	movs	r2, #1
 8001868:	4945      	ldr	r1, [pc, #276]	; (8001980 <HAL_UART_RxCpltCallback+0x17c>)
 800186a:	4846      	ldr	r0, [pc, #280]	; (8001984 <HAL_UART_RxCpltCallback+0x180>)
 800186c:	f003 fc34 	bl	80050d8 <HAL_UART_Receive_IT>
                break;
 8001870:	e07d      	b.n	800196e <HAL_UART_RxCpltCallback+0x16a>

            case WAIT_FOR_DATA_LENGTH_LOW:
                dataLength |= uart1_buffer[0];
 8001872:	4b43      	ldr	r3, [pc, #268]	; (8001980 <HAL_UART_RxCpltCallback+0x17c>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	b29a      	uxth	r2, r3
 8001878:	4b43      	ldr	r3, [pc, #268]	; (8001988 <HAL_UART_RxCpltCallback+0x184>)
 800187a:	881b      	ldrh	r3, [r3, #0]
 800187c:	4313      	orrs	r3, r2
 800187e:	b29a      	uxth	r2, r3
 8001880:	4b41      	ldr	r3, [pc, #260]	; (8001988 <HAL_UART_RxCpltCallback+0x184>)
 8001882:	801a      	strh	r2, [r3, #0]
                UART1receiveState = WAIT_FOR_DATA;
 8001884:	4b3d      	ldr	r3, [pc, #244]	; (800197c <HAL_UART_RxCpltCallback+0x178>)
 8001886:	2203      	movs	r2, #3
 8001888:	701a      	strb	r2, [r3, #0]
                dma_buffer = (uint8_t*)pvPortMalloc((dataLength*12 + 1) * sizeof(uint8_t)); // Allocate buffer for DMA transfer
 800188a:	4b3f      	ldr	r3, [pc, #252]	; (8001988 <HAL_UART_RxCpltCallback+0x184>)
 800188c:	881b      	ldrh	r3, [r3, #0]
 800188e:	461a      	mov	r2, r3
 8001890:	4613      	mov	r3, r2
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	4413      	add	r3, r2
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	3301      	adds	r3, #1
 800189a:	4618      	mov	r0, r3
 800189c:	f007 ff3c 	bl	8009718 <pvPortMalloc>
 80018a0:	4603      	mov	r3, r0
 80018a2:	4a3a      	ldr	r2, [pc, #232]	; (800198c <HAL_UART_RxCpltCallback+0x188>)
 80018a4:	6013      	str	r3, [r2, #0]
                HAL_UART_Receive_DMA(&huart1, dma_buffer, dataLength*12 + 1);
 80018a6:	4b39      	ldr	r3, [pc, #228]	; (800198c <HAL_UART_RxCpltCallback+0x188>)
 80018a8:	6819      	ldr	r1, [r3, #0]
 80018aa:	4b37      	ldr	r3, [pc, #220]	; (8001988 <HAL_UART_RxCpltCallback+0x184>)
 80018ac:	881b      	ldrh	r3, [r3, #0]
 80018ae:	461a      	mov	r2, r3
 80018b0:	0052      	lsls	r2, r2, #1
 80018b2:	4413      	add	r3, r2
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	3301      	adds	r3, #1
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	461a      	mov	r2, r3
 80018be:	4831      	ldr	r0, [pc, #196]	; (8001984 <HAL_UART_RxCpltCallback+0x180>)
 80018c0:	f003 fc56 	bl	8005170 <HAL_UART_Receive_DMA>
                break;
 80018c4:	e053      	b.n	800196e <HAL_UART_RxCpltCallback+0x16a>

            case WAIT_FOR_DATA:
                // DMA transfer is complete
                HAL_UART_DMAStop(&huart1); // Stop the DMA transfer
 80018c6:	482f      	ldr	r0, [pc, #188]	; (8001984 <HAL_UART_RxCpltCallback+0x180>)
 80018c8:	f003 fc9e 	bl	8005208 <HAL_UART_DMAStop>

                // Check if the last byte is the end delimiter
                if (dma_buffer[dataLength*12] == END_DELIMITER) {
 80018cc:	4b2f      	ldr	r3, [pc, #188]	; (800198c <HAL_UART_RxCpltCallback+0x188>)
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	4b2d      	ldr	r3, [pc, #180]	; (8001988 <HAL_UART_RxCpltCallback+0x184>)
 80018d2:	881b      	ldrh	r3, [r3, #0]
 80018d4:	4619      	mov	r1, r3
 80018d6:	460b      	mov	r3, r1
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	440b      	add	r3, r1
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	4413      	add	r3, r2
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	2b5d      	cmp	r3, #93	; 0x5d
 80018e4:	d107      	bne.n	80018f6 <HAL_UART_RxCpltCallback+0xf2>
                    // Process the received data here
                    // You can send the data to a FreeRTOS task using a queue
                    xQueueSendFromISR(uart1QueueHandle, dma_buffer, NULL);
 80018e6:	4b2a      	ldr	r3, [pc, #168]	; (8001990 <HAL_UART_RxCpltCallback+0x18c>)
 80018e8:	6818      	ldr	r0, [r3, #0]
 80018ea:	4b28      	ldr	r3, [pc, #160]	; (800198c <HAL_UART_RxCpltCallback+0x188>)
 80018ec:	6819      	ldr	r1, [r3, #0]
 80018ee:	2300      	movs	r3, #0
 80018f0:	2200      	movs	r2, #0
 80018f2:	f005 fdf7 	bl	80074e4 <xQueueGenericSendFromISR>
                }

                // Free the DMA buffer
                vPortFree(dma_buffer);
 80018f6:	4b25      	ldr	r3, [pc, #148]	; (800198c <HAL_UART_RxCpltCallback+0x188>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f007 ffd8 	bl	80098b0 <vPortFree>
                dma_buffer = NULL;
 8001900:	4b22      	ldr	r3, [pc, #136]	; (800198c <HAL_UART_RxCpltCallback+0x188>)
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]

                // Restart the interrupt-based reception
                UART1receiveState = WAIT_FOR_START_DELIMITER;
 8001906:	4b1d      	ldr	r3, [pc, #116]	; (800197c <HAL_UART_RxCpltCallback+0x178>)
 8001908:	2200      	movs	r2, #0
 800190a:	701a      	strb	r2, [r3, #0]
                HAL_UART_Receive_IT(&huart1, uart1_buffer, 1);
 800190c:	2201      	movs	r2, #1
 800190e:	491c      	ldr	r1, [pc, #112]	; (8001980 <HAL_UART_RxCpltCallback+0x17c>)
 8001910:	481c      	ldr	r0, [pc, #112]	; (8001984 <HAL_UART_RxCpltCallback+0x180>)
 8001912:	f003 fbe1 	bl	80050d8 <HAL_UART_Receive_IT>
                break;
 8001916:	e02a      	b.n	800196e <HAL_UART_RxCpltCallback+0x16a>
	// if (huart->Instance == USART1)
	// {
	// 	xQueueSendFromISR(uart1QueueHandle, uart1_buffer, NULL);
	// 	HAL_UART_Receive_IT(&huart1, uart1_buffer, 1);
	// }
	else if (huart->Instance == USART2)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a1d      	ldr	r2, [pc, #116]	; (8001994 <HAL_UART_RxCpltCallback+0x190>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d125      	bne.n	800196e <HAL_UART_RxCpltCallback+0x16a>
	{
//		HAL_UART_Receive_IT(&huart2, uart2_buffer, 1);
      newInstruction.startDelimiter = uart2_buffer[0];
 8001922:	4b1d      	ldr	r3, [pc, #116]	; (8001998 <HAL_UART_RxCpltCallback+0x194>)
 8001924:	781a      	ldrb	r2, [r3, #0]
 8001926:	4b1d      	ldr	r3, [pc, #116]	; (800199c <HAL_UART_RxCpltCallback+0x198>)
 8001928:	701a      	strb	r2, [r3, #0]
 800192a:	4b1b      	ldr	r3, [pc, #108]	; (8001998 <HAL_UART_RxCpltCallback+0x194>)
 800192c:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8001930:	461a      	mov	r2, r3

      memcpy(&newInstruction.xCoord, &uart2_buffer[1], sizeof(float));
 8001932:	4b1a      	ldr	r3, [pc, #104]	; (800199c <HAL_UART_RxCpltCallback+0x198>)
 8001934:	f8c3 2001 	str.w	r2, [r3, #1]
 8001938:	4b17      	ldr	r3, [pc, #92]	; (8001998 <HAL_UART_RxCpltCallback+0x194>)
 800193a:	f8d3 3005 	ldr.w	r3, [r3, #5]
 800193e:	461a      	mov	r2, r3
      memcpy(&newInstruction.yCoord, &uart2_buffer[5], sizeof(float));
 8001940:	4b16      	ldr	r3, [pc, #88]	; (800199c <HAL_UART_RxCpltCallback+0x198>)
 8001942:	f8c3 2005 	str.w	r2, [r3, #5]

      newInstruction.sensorControl = uart2_buffer[9];
 8001946:	4b14      	ldr	r3, [pc, #80]	; (8001998 <HAL_UART_RxCpltCallback+0x194>)
 8001948:	7a5a      	ldrb	r2, [r3, #9]
 800194a:	4b14      	ldr	r3, [pc, #80]	; (800199c <HAL_UART_RxCpltCallback+0x198>)
 800194c:	725a      	strb	r2, [r3, #9]
      newInstruction.endDelimiter = uart2_buffer[10];
 800194e:	4b12      	ldr	r3, [pc, #72]	; (8001998 <HAL_UART_RxCpltCallback+0x194>)
 8001950:	7a9a      	ldrb	r2, [r3, #10]
 8001952:	4b12      	ldr	r3, [pc, #72]	; (800199c <HAL_UART_RxCpltCallback+0x198>)
 8001954:	729a      	strb	r2, [r3, #10]
//		xQueueSendFromISR(uart2QueueHandle, &msg, NULL);

      // Prepare to receive the next character
      HAL_UART_Receive_DMA(&huart2, uart2_buffer, 11);
 8001956:	220b      	movs	r2, #11
 8001958:	490f      	ldr	r1, [pc, #60]	; (8001998 <HAL_UART_RxCpltCallback+0x194>)
 800195a:	4811      	ldr	r0, [pc, #68]	; (80019a0 <HAL_UART_RxCpltCallback+0x19c>)
 800195c:	f003 fc08 	bl	8005170 <HAL_UART_Receive_DMA>

      // Notify the StartNavigationTask
      vTaskNotifyGiveFromISR(NavigationTaskHandle, pdFALSE);
 8001960:	4b10      	ldr	r3, [pc, #64]	; (80019a4 <HAL_UART_RxCpltCallback+0x1a0>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2100      	movs	r1, #0
 8001966:	4618      	mov	r0, r3
 8001968:	f007 f850 	bl	8008a0c <vTaskNotifyGiveFromISR>

//      xTaskResumeFromISR(NavigationTaskHandle);

	}
}
 800196c:	e7ff      	b.n	800196e <HAL_UART_RxCpltCallback+0x16a>
 800196e:	bf00      	nop
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40013800 	.word	0x40013800
 800197c:	2000042c 	.word	0x2000042c
 8001980:	20000418 	.word	0x20000418
 8001984:	20000258 	.word	0x20000258
 8001988:	2000042e 	.word	0x2000042e
 800198c:	20000430 	.word	0x20000430
 8001990:	20000410 	.word	0x20000410
 8001994:	40004400 	.word	0x40004400
 8001998:	2000041c 	.word	0x2000041c
 800199c:	20000450 	.word	0x20000450
 80019a0:	200002e0 	.word	0x200002e0
 80019a4:	2000040c 	.word	0x2000040c

080019a8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
//  HAL_UART_Receive_IT(&huart2, uart2_buffer, 1);
  HAL_UART_Receive_DMA(&huart2, uart2_buffer,11);
 80019b0:	220b      	movs	r2, #11
 80019b2:	490c      	ldr	r1, [pc, #48]	; (80019e4 <StartDefaultTask+0x3c>)
 80019b4:	480c      	ldr	r0, [pc, #48]	; (80019e8 <StartDefaultTask+0x40>)
 80019b6:	f003 fbdb 	bl	8005170 <HAL_UART_Receive_DMA>
  HAL_UART_Receive_IT(&huart1, uart1_buffer, 1);
 80019ba:	2201      	movs	r2, #1
 80019bc:	490b      	ldr	r1, [pc, #44]	; (80019ec <StartDefaultTask+0x44>)
 80019be:	480c      	ldr	r0, [pc, #48]	; (80019f0 <StartDefaultTask+0x48>)
 80019c0:	f003 fb8a 	bl	80050d8 <HAL_UART_Receive_IT>
  printf("Setup complete\n");
 80019c4:	480b      	ldr	r0, [pc, #44]	; (80019f4 <StartDefaultTask+0x4c>)
 80019c6:	f008 fe0d 	bl	800a5e4 <puts>
  vTaskSuspend(NULL);
 80019ca:	2000      	movs	r0, #0
 80019cc:	f006 fa60 	bl	8007e90 <vTaskSuspend>
  Enter_Stop2_Mode();
 80019d0:	f7ff fb72 	bl	80010b8 <Enter_Stop2_Mode>
  /* Infinite loop */
  for(;;)
  {
	Toggle_LED();
 80019d4:	f7ff fb66 	bl	80010a4 <Toggle_LED>
    osDelay(500);
 80019d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80019dc:	f005 f9d0 	bl	8006d80 <osDelay>
	Toggle_LED();
 80019e0:	e7f8      	b.n	80019d4 <StartDefaultTask+0x2c>
 80019e2:	bf00      	nop
 80019e4:	2000041c 	.word	0x2000041c
 80019e8:	200002e0 	.word	0x200002e0
 80019ec:	20000418 	.word	0x20000418
 80019f0:	20000258 	.word	0x20000258
 80019f4:	0800cfb8 	.word	0x0800cfb8

080019f8 <UART2_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UART2_Task */
void UART2_Task(void *argument)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
//        targetMeasurements = *(SensorMeasurements*)&receivedMessage.sensorControl;
//        printSensorMeasurements(targetMeasurements);
//        printf("Received message with x: %f, y: %f\n", targetX, targetY);
//      }
//    }
	  osDelay(10000);
 8001a00:	f242 7010 	movw	r0, #10000	; 0x2710
 8001a04:	f005 f9bc 	bl	8006d80 <osDelay>
 8001a08:	e7fa      	b.n	8001a00 <UART2_Task+0x8>

08001a0a <UART1_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UART1_Task */
void UART1_Task(void *argument)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b082      	sub	sp, #8
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART1_Task */
	vTaskSuspend(NULL);
 8001a12:	2000      	movs	r0, #0
 8001a14:	f006 fa3c 	bl	8007e90 <vTaskSuspend>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001a18:	2001      	movs	r0, #1
 8001a1a:	f005 f9b1 	bl	8006d80 <osDelay>
 8001a1e:	e7fb      	b.n	8001a18 <UART1_Task+0xe>

08001a20 <LightSensorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LightSensorTask */
void LightSensorTask(void *argument)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LightSensorTask */
	LTR329_Init();
 8001a28:	f7ff fad8 	bl	8000fdc <LTR329_Init>
	/* Infinite loop */
	  for(;;)
	  {
		// Read light data
		LTR329_Read_Light(&light_ch0, &light_ch1);
 8001a2c:	4906      	ldr	r1, [pc, #24]	; (8001a48 <LightSensorTask+0x28>)
 8001a2e:	4807      	ldr	r0, [pc, #28]	; (8001a4c <LightSensorTask+0x2c>)
 8001a30:	f7ff fafa 	bl	8001028 <LTR329_Read_Light>
//		if (verbose) printf("Light Ch0: %d \n Light Ch1: %d\n________\n\n",light_ch0,light_ch1);
		sendLightSensorData(light_ch0);
 8001a34:	4b05      	ldr	r3, [pc, #20]	; (8001a4c <LightSensorTask+0x2c>)
 8001a36:	881b      	ldrh	r3, [r3, #0]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7ff fabd 	bl	8000fb8 <sendLightSensorData>
		osDelay(2000);
 8001a3e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001a42:	f005 f99d 	bl	8006d80 <osDelay>
		LTR329_Read_Light(&light_ch0, &light_ch1);
 8001a46:	e7f1      	b.n	8001a2c <LightSensorTask+0xc>
 8001a48:	2000042a 	.word	0x2000042a
 8001a4c:	20000428 	.word	0x20000428

08001a50 <TempTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TempTask */
void TempTask(void *argument)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TempTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001a58:	2001      	movs	r0, #1
 8001a5a:	f005 f991 	bl	8006d80 <osDelay>
    vTaskSuspend(NULL);
 8001a5e:	2000      	movs	r0, #0
 8001a60:	f006 fa16 	bl	8007e90 <vTaskSuspend>
    osDelay(1);
 8001a64:	e7f8      	b.n	8001a58 <TempTask+0x8>
	...

08001a68 <StartNavigationTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartNavigationTask */
void StartNavigationTask(void *argument)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b08c      	sub	sp, #48	; 0x30
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartNavigationTask */
  /* Infinite loop */
  for(;;)
  {
    uint32_t ulNotificationValue;
    BaseType_t xResult = xTaskNotifyWait( pdFALSE, 0, &ulNotificationValue, portMAX_DELAY );
 8001a70:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001a74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a78:	2100      	movs	r1, #0
 8001a7a:	2000      	movs	r0, #0
 8001a7c:	f006 ff66 	bl	800894c <xTaskNotifyWait>
 8001a80:	62f8      	str	r0, [r7, #44]	; 0x2c

    if( xResult == pdPASS )
 8001a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d1f3      	bne.n	8001a70 <StartNavigationTask+0x8>
    {
      /* A notification was received. */
      if (newInstruction.startDelimiter == START_DELIMITER && newInstruction.endDelimiter == END_DELIMITER)
 8001a88:	4b13      	ldr	r3, [pc, #76]	; (8001ad8 <StartNavigationTask+0x70>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	2b5b      	cmp	r3, #91	; 0x5b
 8001a8e:	d1ef      	bne.n	8001a70 <StartNavigationTask+0x8>
 8001a90:	4b11      	ldr	r3, [pc, #68]	; (8001ad8 <StartNavigationTask+0x70>)
 8001a92:	7a9b      	ldrb	r3, [r3, #10]
 8001a94:	2b5d      	cmp	r3, #93	; 0x5d
 8001a96:	d1eb      	bne.n	8001a70 <StartNavigationTask+0x8>
      {
        targetX = newInstruction.xCoord;
 8001a98:	4b0f      	ldr	r3, [pc, #60]	; (8001ad8 <StartNavigationTask+0x70>)
 8001a9a:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8001a9e:	4a0f      	ldr	r2, [pc, #60]	; (8001adc <StartNavigationTask+0x74>)
 8001aa0:	6013      	str	r3, [r2, #0]
        targetY = newInstruction.yCoord;
 8001aa2:	4b0d      	ldr	r3, [pc, #52]	; (8001ad8 <StartNavigationTask+0x70>)
 8001aa4:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8001aa8:	4a0d      	ldr	r2, [pc, #52]	; (8001ae0 <StartNavigationTask+0x78>)
 8001aaa:	6013      	str	r3, [r2, #0]
 8001aac:	4b0a      	ldr	r3, [pc, #40]	; (8001ad8 <StartNavigationTask+0x70>)
 8001aae:	7a5a      	ldrb	r2, [r3, #9]
        memcpy(&targetMeasurements, &newInstruction.sensorControl, sizeof(targetMeasurements));
 8001ab0:	4b0c      	ldr	r3, [pc, #48]	; (8001ae4 <StartNavigationTask+0x7c>)
 8001ab2:	701a      	strb	r2, [r3, #0]
        navigationInstruction instructions[INSTRUCTION_BUFFER_SIZE];
        uint8_t instructionCnt = calculatePath(instructions);
 8001ab4:	f107 0308 	add.w	r3, r7, #8
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff fb0d 	bl	80010d8 <calculatePath>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        transmitInstructions(instructions, instructionCnt);
 8001ac4:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001ac8:	f107 0308 	add.w	r3, r7, #8
 8001acc:	4611      	mov	r1, r2
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff fc2e 	bl	8001330 <transmitInstructions>
  {
 8001ad4:	e7cc      	b.n	8001a70 <StartNavigationTask+0x8>
 8001ad6:	bf00      	nop
 8001ad8:	20000450 	.word	0x20000450
 8001adc:	20000440 	.word	0x20000440
 8001ae0:	20000444 	.word	0x20000444
 8001ae4:	2000044c 	.word	0x2000044c

08001ae8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a04      	ldr	r2, [pc, #16]	; (8001b08 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d101      	bne.n	8001afe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001afa:	f000 fb7f 	bl	80021fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001afe:	bf00      	nop
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	40001000 	.word	0x40001000

08001b0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b10:	b672      	cpsid	i
}
 8001b12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b14:	e7fe      	b.n	8001b14 <Error_Handler+0x8>
	...

08001b18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b1e:	4b11      	ldr	r3, [pc, #68]	; (8001b64 <HAL_MspInit+0x4c>)
 8001b20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b22:	4a10      	ldr	r2, [pc, #64]	; (8001b64 <HAL_MspInit+0x4c>)
 8001b24:	f043 0301 	orr.w	r3, r3, #1
 8001b28:	6613      	str	r3, [r2, #96]	; 0x60
 8001b2a:	4b0e      	ldr	r3, [pc, #56]	; (8001b64 <HAL_MspInit+0x4c>)
 8001b2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	607b      	str	r3, [r7, #4]
 8001b34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b36:	4b0b      	ldr	r3, [pc, #44]	; (8001b64 <HAL_MspInit+0x4c>)
 8001b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b3a:	4a0a      	ldr	r2, [pc, #40]	; (8001b64 <HAL_MspInit+0x4c>)
 8001b3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b40:	6593      	str	r3, [r2, #88]	; 0x58
 8001b42:	4b08      	ldr	r3, [pc, #32]	; (8001b64 <HAL_MspInit+0x4c>)
 8001b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b4a:	603b      	str	r3, [r7, #0]
 8001b4c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b4e:	2200      	movs	r2, #0
 8001b50:	210f      	movs	r1, #15
 8001b52:	f06f 0001 	mvn.w	r0, #1
 8001b56:	f000 fc29 	bl	80023ac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	40021000 	.word	0x40021000

08001b68 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b096      	sub	sp, #88	; 0x58
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b70:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	605a      	str	r2, [r3, #4]
 8001b7a:	609a      	str	r2, [r3, #8]
 8001b7c:	60da      	str	r2, [r3, #12]
 8001b7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b80:	f107 0310 	add.w	r3, r7, #16
 8001b84:	2234      	movs	r2, #52	; 0x34
 8001b86:	2100      	movs	r1, #0
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f008 fd33 	bl	800a5f4 <memset>
  if(hi2c->Instance==I2C1)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a1f      	ldr	r2, [pc, #124]	; (8001c10 <HAL_I2C_MspInit+0xa8>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d137      	bne.n	8001c08 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001b98:	2340      	movs	r3, #64	; 0x40
 8001b9a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ba0:	f107 0310 	add.w	r3, r7, #16
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f002 fdc7 	bl	8004738 <HAL_RCCEx_PeriphCLKConfig>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001bb0:	f7ff ffac 	bl	8001b0c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bb4:	4b17      	ldr	r3, [pc, #92]	; (8001c14 <HAL_I2C_MspInit+0xac>)
 8001bb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bb8:	4a16      	ldr	r2, [pc, #88]	; (8001c14 <HAL_I2C_MspInit+0xac>)
 8001bba:	f043 0301 	orr.w	r3, r3, #1
 8001bbe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bc0:	4b14      	ldr	r3, [pc, #80]	; (8001c14 <HAL_I2C_MspInit+0xac>)
 8001bc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bc4:	f003 0301 	and.w	r3, r3, #1
 8001bc8:	60fb      	str	r3, [r7, #12]
 8001bca:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001bcc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001bd0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bd2:	2312      	movs	r3, #18
 8001bd4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bde:	2304      	movs	r3, #4
 8001be0:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001be6:	4619      	mov	r1, r3
 8001be8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bec:	f000 fe8a 	bl	8002904 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bf0:	4b08      	ldr	r3, [pc, #32]	; (8001c14 <HAL_I2C_MspInit+0xac>)
 8001bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf4:	4a07      	ldr	r2, [pc, #28]	; (8001c14 <HAL_I2C_MspInit+0xac>)
 8001bf6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bfa:	6593      	str	r3, [r2, #88]	; 0x58
 8001bfc:	4b05      	ldr	r3, [pc, #20]	; (8001c14 <HAL_I2C_MspInit+0xac>)
 8001bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c04:	60bb      	str	r3, [r7, #8]
 8001c06:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c08:	bf00      	nop
 8001c0a:	3758      	adds	r7, #88	; 0x58
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	40005400 	.word	0x40005400
 8001c14:	40021000 	.word	0x40021000

08001c18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b098      	sub	sp, #96	; 0x60
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c20:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]
 8001c2a:	609a      	str	r2, [r3, #8]
 8001c2c:	60da      	str	r2, [r3, #12]
 8001c2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c30:	f107 0318 	add.w	r3, r7, #24
 8001c34:	2234      	movs	r2, #52	; 0x34
 8001c36:	2100      	movs	r1, #0
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f008 fcdb 	bl	800a5f4 <memset>
  if(huart->Instance==USART1)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a78      	ldr	r2, [pc, #480]	; (8001e24 <HAL_UART_MspInit+0x20c>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d168      	bne.n	8001d1a <HAL_UART_MspInit+0x102>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c50:	f107 0318 	add.w	r3, r7, #24
 8001c54:	4618      	mov	r0, r3
 8001c56:	f002 fd6f 	bl	8004738 <HAL_RCCEx_PeriphCLKConfig>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c60:	f7ff ff54 	bl	8001b0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c64:	4b70      	ldr	r3, [pc, #448]	; (8001e28 <HAL_UART_MspInit+0x210>)
 8001c66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c68:	4a6f      	ldr	r2, [pc, #444]	; (8001e28 <HAL_UART_MspInit+0x210>)
 8001c6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c6e:	6613      	str	r3, [r2, #96]	; 0x60
 8001c70:	4b6d      	ldr	r3, [pc, #436]	; (8001e28 <HAL_UART_MspInit+0x210>)
 8001c72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c78:	617b      	str	r3, [r7, #20]
 8001c7a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c7c:	4b6a      	ldr	r3, [pc, #424]	; (8001e28 <HAL_UART_MspInit+0x210>)
 8001c7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c80:	4a69      	ldr	r2, [pc, #420]	; (8001e28 <HAL_UART_MspInit+0x210>)
 8001c82:	f043 0302 	orr.w	r3, r3, #2
 8001c86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c88:	4b67      	ldr	r3, [pc, #412]	; (8001e28 <HAL_UART_MspInit+0x210>)
 8001c8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c8c:	f003 0302 	and.w	r3, r3, #2
 8001c90:	613b      	str	r3, [r7, #16]
 8001c92:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c94:	23c0      	movs	r3, #192	; 0xc0
 8001c96:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c98:	2302      	movs	r3, #2
 8001c9a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ca4:	2307      	movs	r3, #7
 8001ca6:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ca8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001cac:	4619      	mov	r1, r3
 8001cae:	485f      	ldr	r0, [pc, #380]	; (8001e2c <HAL_UART_MspInit+0x214>)
 8001cb0:	f000 fe28 	bl	8002904 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001cb4:	4b5e      	ldr	r3, [pc, #376]	; (8001e30 <HAL_UART_MspInit+0x218>)
 8001cb6:	4a5f      	ldr	r2, [pc, #380]	; (8001e34 <HAL_UART_MspInit+0x21c>)
 8001cb8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8001cba:	4b5d      	ldr	r3, [pc, #372]	; (8001e30 <HAL_UART_MspInit+0x218>)
 8001cbc:	2202      	movs	r2, #2
 8001cbe:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cc0:	4b5b      	ldr	r3, [pc, #364]	; (8001e30 <HAL_UART_MspInit+0x218>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cc6:	4b5a      	ldr	r3, [pc, #360]	; (8001e30 <HAL_UART_MspInit+0x218>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ccc:	4b58      	ldr	r3, [pc, #352]	; (8001e30 <HAL_UART_MspInit+0x218>)
 8001cce:	2280      	movs	r2, #128	; 0x80
 8001cd0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cd2:	4b57      	ldr	r3, [pc, #348]	; (8001e30 <HAL_UART_MspInit+0x218>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cd8:	4b55      	ldr	r3, [pc, #340]	; (8001e30 <HAL_UART_MspInit+0x218>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001cde:	4b54      	ldr	r3, [pc, #336]	; (8001e30 <HAL_UART_MspInit+0x218>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001ce4:	4b52      	ldr	r3, [pc, #328]	; (8001e30 <HAL_UART_MspInit+0x218>)
 8001ce6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cea:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001cec:	4850      	ldr	r0, [pc, #320]	; (8001e30 <HAL_UART_MspInit+0x218>)
 8001cee:	f000 fb87 	bl	8002400 <HAL_DMA_Init>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 8001cf8:	f7ff ff08 	bl	8001b0c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	4a4c      	ldr	r2, [pc, #304]	; (8001e30 <HAL_UART_MspInit+0x218>)
 8001d00:	675a      	str	r2, [r3, #116]	; 0x74
 8001d02:	4a4b      	ldr	r2, [pc, #300]	; (8001e30 <HAL_UART_MspInit+0x218>)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001d08:	2200      	movs	r2, #0
 8001d0a:	2105      	movs	r1, #5
 8001d0c:	2025      	movs	r0, #37	; 0x25
 8001d0e:	f000 fb4d 	bl	80023ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d12:	2025      	movs	r0, #37	; 0x25
 8001d14:	f000 fb66 	bl	80023e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d18:	e07f      	b.n	8001e1a <HAL_UART_MspInit+0x202>
  else if(huart->Instance==USART2)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a46      	ldr	r2, [pc, #280]	; (8001e38 <HAL_UART_MspInit+0x220>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d17a      	bne.n	8001e1a <HAL_UART_MspInit+0x202>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001d24:	2302      	movs	r3, #2
 8001d26:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d2c:	f107 0318 	add.w	r3, r7, #24
 8001d30:	4618      	mov	r0, r3
 8001d32:	f002 fd01 	bl	8004738 <HAL_RCCEx_PeriphCLKConfig>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <HAL_UART_MspInit+0x128>
      Error_Handler();
 8001d3c:	f7ff fee6 	bl	8001b0c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d40:	4b39      	ldr	r3, [pc, #228]	; (8001e28 <HAL_UART_MspInit+0x210>)
 8001d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d44:	4a38      	ldr	r2, [pc, #224]	; (8001e28 <HAL_UART_MspInit+0x210>)
 8001d46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d4a:	6593      	str	r3, [r2, #88]	; 0x58
 8001d4c:	4b36      	ldr	r3, [pc, #216]	; (8001e28 <HAL_UART_MspInit+0x210>)
 8001d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d54:	60fb      	str	r3, [r7, #12]
 8001d56:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d58:	4b33      	ldr	r3, [pc, #204]	; (8001e28 <HAL_UART_MspInit+0x210>)
 8001d5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d5c:	4a32      	ldr	r2, [pc, #200]	; (8001e28 <HAL_UART_MspInit+0x210>)
 8001d5e:	f043 0301 	orr.w	r3, r3, #1
 8001d62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d64:	4b30      	ldr	r3, [pc, #192]	; (8001e28 <HAL_UART_MspInit+0x210>)
 8001d66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d68:	f003 0301 	and.w	r3, r3, #1
 8001d6c:	60bb      	str	r3, [r7, #8]
 8001d6e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d70:	2304      	movs	r3, #4
 8001d72:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d74:	2302      	movs	r3, #2
 8001d76:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d80:	2307      	movs	r3, #7
 8001d82:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d84:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d88:	4619      	mov	r1, r3
 8001d8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d8e:	f000 fdb9 	bl	8002904 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001d92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d96:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d98:	2302      	movs	r3, #2
 8001d9a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001da0:	2303      	movs	r3, #3
 8001da2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001da4:	2303      	movs	r3, #3
 8001da6:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001da8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001dac:	4619      	mov	r1, r3
 8001dae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001db2:	f000 fda7 	bl	8002904 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001db6:	4b21      	ldr	r3, [pc, #132]	; (8001e3c <HAL_UART_MspInit+0x224>)
 8001db8:	4a21      	ldr	r2, [pc, #132]	; (8001e40 <HAL_UART_MspInit+0x228>)
 8001dba:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8001dbc:	4b1f      	ldr	r3, [pc, #124]	; (8001e3c <HAL_UART_MspInit+0x224>)
 8001dbe:	2202      	movs	r2, #2
 8001dc0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001dc2:	4b1e      	ldr	r3, [pc, #120]	; (8001e3c <HAL_UART_MspInit+0x224>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dc8:	4b1c      	ldr	r3, [pc, #112]	; (8001e3c <HAL_UART_MspInit+0x224>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001dce:	4b1b      	ldr	r3, [pc, #108]	; (8001e3c <HAL_UART_MspInit+0x224>)
 8001dd0:	2280      	movs	r2, #128	; 0x80
 8001dd2:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001dd4:	4b19      	ldr	r3, [pc, #100]	; (8001e3c <HAL_UART_MspInit+0x224>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001dda:	4b18      	ldr	r3, [pc, #96]	; (8001e3c <HAL_UART_MspInit+0x224>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001de0:	4b16      	ldr	r3, [pc, #88]	; (8001e3c <HAL_UART_MspInit+0x224>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001de6:	4b15      	ldr	r3, [pc, #84]	; (8001e3c <HAL_UART_MspInit+0x224>)
 8001de8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001dec:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001dee:	4813      	ldr	r0, [pc, #76]	; (8001e3c <HAL_UART_MspInit+0x224>)
 8001df0:	f000 fb06 	bl	8002400 <HAL_DMA_Init>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <HAL_UART_MspInit+0x1e6>
      Error_Handler();
 8001dfa:	f7ff fe87 	bl	8001b0c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a0e      	ldr	r2, [pc, #56]	; (8001e3c <HAL_UART_MspInit+0x224>)
 8001e02:	675a      	str	r2, [r3, #116]	; 0x74
 8001e04:	4a0d      	ldr	r2, [pc, #52]	; (8001e3c <HAL_UART_MspInit+0x224>)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	2105      	movs	r1, #5
 8001e0e:	2026      	movs	r0, #38	; 0x26
 8001e10:	f000 facc 	bl	80023ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e14:	2026      	movs	r0, #38	; 0x26
 8001e16:	f000 fae5 	bl	80023e4 <HAL_NVIC_EnableIRQ>
}
 8001e1a:	bf00      	nop
 8001e1c:	3760      	adds	r7, #96	; 0x60
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	40013800 	.word	0x40013800
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	48000400 	.word	0x48000400
 8001e30:	20000368 	.word	0x20000368
 8001e34:	40020058 	.word	0x40020058
 8001e38:	40004400 	.word	0x40004400
 8001e3c:	200003b0 	.word	0x200003b0
 8001e40:	4002006c 	.word	0x4002006c

08001e44 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b08e      	sub	sp, #56	; 0x38
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001e52:	4b34      	ldr	r3, [pc, #208]	; (8001f24 <HAL_InitTick+0xe0>)
 8001e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e56:	4a33      	ldr	r2, [pc, #204]	; (8001f24 <HAL_InitTick+0xe0>)
 8001e58:	f043 0310 	orr.w	r3, r3, #16
 8001e5c:	6593      	str	r3, [r2, #88]	; 0x58
 8001e5e:	4b31      	ldr	r3, [pc, #196]	; (8001f24 <HAL_InitTick+0xe0>)
 8001e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e62:	f003 0310 	and.w	r3, r3, #16
 8001e66:	60fb      	str	r3, [r7, #12]
 8001e68:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e6a:	f107 0210 	add.w	r2, r7, #16
 8001e6e:	f107 0314 	add.w	r3, r7, #20
 8001e72:	4611      	mov	r1, r2
 8001e74:	4618      	mov	r0, r3
 8001e76:	f002 fbcd 	bl	8004614 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001e7a:	6a3b      	ldr	r3, [r7, #32]
 8001e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d103      	bne.n	8001e8c <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001e84:	f002 fb9a 	bl	80045bc <HAL_RCC_GetPCLK1Freq>
 8001e88:	6378      	str	r0, [r7, #52]	; 0x34
 8001e8a:	e004      	b.n	8001e96 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001e8c:	f002 fb96 	bl	80045bc <HAL_RCC_GetPCLK1Freq>
 8001e90:	4603      	mov	r3, r0
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e98:	4a23      	ldr	r2, [pc, #140]	; (8001f28 <HAL_InitTick+0xe4>)
 8001e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e9e:	0c9b      	lsrs	r3, r3, #18
 8001ea0:	3b01      	subs	r3, #1
 8001ea2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001ea4:	4b21      	ldr	r3, [pc, #132]	; (8001f2c <HAL_InitTick+0xe8>)
 8001ea6:	4a22      	ldr	r2, [pc, #136]	; (8001f30 <HAL_InitTick+0xec>)
 8001ea8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001eaa:	4b20      	ldr	r3, [pc, #128]	; (8001f2c <HAL_InitTick+0xe8>)
 8001eac:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001eb0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001eb2:	4a1e      	ldr	r2, [pc, #120]	; (8001f2c <HAL_InitTick+0xe8>)
 8001eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eb6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001eb8:	4b1c      	ldr	r3, [pc, #112]	; (8001f2c <HAL_InitTick+0xe8>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ebe:	4b1b      	ldr	r3, [pc, #108]	; (8001f2c <HAL_InitTick+0xe8>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ec4:	4b19      	ldr	r3, [pc, #100]	; (8001f2c <HAL_InitTick+0xe8>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001eca:	4818      	ldr	r0, [pc, #96]	; (8001f2c <HAL_InitTick+0xe8>)
 8001ecc:	f002 fdca 	bl	8004a64 <HAL_TIM_Base_Init>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001ed6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d11b      	bne.n	8001f16 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001ede:	4813      	ldr	r0, [pc, #76]	; (8001f2c <HAL_InitTick+0xe8>)
 8001ee0:	f002 fe22 	bl	8004b28 <HAL_TIM_Base_Start_IT>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001eea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d111      	bne.n	8001f16 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8001ef2:	2036      	movs	r0, #54	; 0x36
 8001ef4:	f000 fa76 	bl	80023e4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2b0f      	cmp	r3, #15
 8001efc:	d808      	bhi.n	8001f10 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8001efe:	2200      	movs	r2, #0
 8001f00:	6879      	ldr	r1, [r7, #4]
 8001f02:	2036      	movs	r0, #54	; 0x36
 8001f04:	f000 fa52 	bl	80023ac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f08:	4a0a      	ldr	r2, [pc, #40]	; (8001f34 <HAL_InitTick+0xf0>)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6013      	str	r3, [r2, #0]
 8001f0e:	e002      	b.n	8001f16 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001f16:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3738      	adds	r7, #56	; 0x38
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	40021000 	.word	0x40021000
 8001f28:	431bde83 	.word	0x431bde83
 8001f2c:	2000045c 	.word	0x2000045c
 8001f30:	40001000 	.word	0x40001000
 8001f34:	20000004 	.word	0x20000004

08001f38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f3c:	e7fe      	b.n	8001f3c <NMI_Handler+0x4>

08001f3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f42:	e7fe      	b.n	8001f42 <HardFault_Handler+0x4>

08001f44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f48:	e7fe      	b.n	8001f48 <MemManage_Handler+0x4>

08001f4a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f4e:	e7fe      	b.n	8001f4e <BusFault_Handler+0x4>

08001f50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f54:	e7fe      	b.n	8001f54 <UsageFault_Handler+0x4>

08001f56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f56:	b480      	push	{r7}
 8001f58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f5a:	bf00      	nop
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001f68:	4802      	ldr	r0, [pc, #8]	; (8001f74 <DMA1_Channel5_IRQHandler+0x10>)
 8001f6a:	f000 fbe0 	bl	800272e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001f6e:	bf00      	nop
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	20000368 	.word	0x20000368

08001f78 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001f7c:	4802      	ldr	r0, [pc, #8]	; (8001f88 <DMA1_Channel6_IRQHandler+0x10>)
 8001f7e:	f000 fbd6 	bl	800272e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001f82:	bf00      	nop
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	200003b0 	.word	0x200003b0

08001f8c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001f90:	4802      	ldr	r0, [pc, #8]	; (8001f9c <USART1_IRQHandler+0x10>)
 8001f92:	f003 f9cb 	bl	800532c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001f96:	bf00      	nop
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	20000258 	.word	0x20000258

08001fa0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001fa4:	4802      	ldr	r0, [pc, #8]	; (8001fb0 <USART2_IRQHandler+0x10>)
 8001fa6:	f003 f9c1 	bl	800532c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001faa:	bf00      	nop
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	200002e0 	.word	0x200002e0

08001fb4 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001fb8:	4802      	ldr	r0, [pc, #8]	; (8001fc4 <TIM6_IRQHandler+0x10>)
 8001fba:	f002 fe09 	bl	8004bd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8001fbe:	bf00      	nop
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	2000045c 	.word	0x2000045c

08001fc8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  return 1;
 8001fcc:	2301      	movs	r3, #1
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <_kill>:

int _kill(int pid, int sig)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001fe2:	f008 fb69 	bl	800a6b8 <__errno>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2216      	movs	r2, #22
 8001fea:	601a      	str	r2, [r3, #0]
  return -1;
 8001fec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3708      	adds	r7, #8
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <_exit>:

void _exit (int status)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002000:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f7ff ffe7 	bl	8001fd8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800200a:	e7fe      	b.n	800200a <_exit+0x12>

0800200c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af00      	add	r7, sp, #0
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	60b9      	str	r1, [r7, #8]
 8002016:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002018:	2300      	movs	r3, #0
 800201a:	617b      	str	r3, [r7, #20]
 800201c:	e00a      	b.n	8002034 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800201e:	f3af 8000 	nop.w
 8002022:	4601      	mov	r1, r0
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	1c5a      	adds	r2, r3, #1
 8002028:	60ba      	str	r2, [r7, #8]
 800202a:	b2ca      	uxtb	r2, r1
 800202c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	3301      	adds	r3, #1
 8002032:	617b      	str	r3, [r7, #20]
 8002034:	697a      	ldr	r2, [r7, #20]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	429a      	cmp	r2, r3
 800203a:	dbf0      	blt.n	800201e <_read+0x12>
  }

  return len;
 800203c:	687b      	ldr	r3, [r7, #4]
}
 800203e:	4618      	mov	r0, r3
 8002040:	3718      	adds	r7, #24
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002046:	b580      	push	{r7, lr}
 8002048:	b086      	sub	sp, #24
 800204a:	af00      	add	r7, sp, #0
 800204c:	60f8      	str	r0, [r7, #12]
 800204e:	60b9      	str	r1, [r7, #8]
 8002050:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002052:	2300      	movs	r3, #0
 8002054:	617b      	str	r3, [r7, #20]
 8002056:	e009      	b.n	800206c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	1c5a      	adds	r2, r3, #1
 800205c:	60ba      	str	r2, [r7, #8]
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff f80d 	bl	8001080 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	3301      	adds	r3, #1
 800206a:	617b      	str	r3, [r7, #20]
 800206c:	697a      	ldr	r2, [r7, #20]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	429a      	cmp	r2, r3
 8002072:	dbf1      	blt.n	8002058 <_write+0x12>
  }
  return len;
 8002074:	687b      	ldr	r3, [r7, #4]
}
 8002076:	4618      	mov	r0, r3
 8002078:	3718      	adds	r7, #24
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}

0800207e <_close>:

int _close(int file)
{
 800207e:	b480      	push	{r7}
 8002080:	b083      	sub	sp, #12
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002086:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800208a:	4618      	mov	r0, r3
 800208c:	370c      	adds	r7, #12
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr

08002096 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002096:	b480      	push	{r7}
 8002098:	b083      	sub	sp, #12
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
 800209e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020a6:	605a      	str	r2, [r3, #4]
  return 0;
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr

080020b6 <_isatty>:

int _isatty(int file)
{
 80020b6:	b480      	push	{r7}
 80020b8:	b083      	sub	sp, #12
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020be:	2301      	movs	r3, #1
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b085      	sub	sp, #20
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3714      	adds	r7, #20
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
	...

080020e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b086      	sub	sp, #24
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020f0:	4a14      	ldr	r2, [pc, #80]	; (8002144 <_sbrk+0x5c>)
 80020f2:	4b15      	ldr	r3, [pc, #84]	; (8002148 <_sbrk+0x60>)
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020fc:	4b13      	ldr	r3, [pc, #76]	; (800214c <_sbrk+0x64>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d102      	bne.n	800210a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002104:	4b11      	ldr	r3, [pc, #68]	; (800214c <_sbrk+0x64>)
 8002106:	4a12      	ldr	r2, [pc, #72]	; (8002150 <_sbrk+0x68>)
 8002108:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800210a:	4b10      	ldr	r3, [pc, #64]	; (800214c <_sbrk+0x64>)
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4413      	add	r3, r2
 8002112:	693a      	ldr	r2, [r7, #16]
 8002114:	429a      	cmp	r2, r3
 8002116:	d207      	bcs.n	8002128 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002118:	f008 face 	bl	800a6b8 <__errno>
 800211c:	4603      	mov	r3, r0
 800211e:	220c      	movs	r2, #12
 8002120:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002122:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002126:	e009      	b.n	800213c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002128:	4b08      	ldr	r3, [pc, #32]	; (800214c <_sbrk+0x64>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800212e:	4b07      	ldr	r3, [pc, #28]	; (800214c <_sbrk+0x64>)
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4413      	add	r3, r2
 8002136:	4a05      	ldr	r2, [pc, #20]	; (800214c <_sbrk+0x64>)
 8002138:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800213a:	68fb      	ldr	r3, [r7, #12]
}
 800213c:	4618      	mov	r0, r3
 800213e:	3718      	adds	r7, #24
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	2000a000 	.word	0x2000a000
 8002148:	00000400 	.word	0x00000400
 800214c:	200004a8 	.word	0x200004a8
 8002150:	20002770 	.word	0x20002770

08002154 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002158:	4b06      	ldr	r3, [pc, #24]	; (8002174 <SystemInit+0x20>)
 800215a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800215e:	4a05      	ldr	r2, [pc, #20]	; (8002174 <SystemInit+0x20>)
 8002160:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002164:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002168:	bf00      	nop
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	e000ed00 	.word	0xe000ed00

08002178 <Reset_Handler>:
 8002178:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021b0 <LoopForever+0x2>
 800217c:	f7ff ffea 	bl	8002154 <SystemInit>
 8002180:	480c      	ldr	r0, [pc, #48]	; (80021b4 <LoopForever+0x6>)
 8002182:	490d      	ldr	r1, [pc, #52]	; (80021b8 <LoopForever+0xa>)
 8002184:	4a0d      	ldr	r2, [pc, #52]	; (80021bc <LoopForever+0xe>)
 8002186:	2300      	movs	r3, #0
 8002188:	e002      	b.n	8002190 <LoopCopyDataInit>

0800218a <CopyDataInit>:
 800218a:	58d4      	ldr	r4, [r2, r3]
 800218c:	50c4      	str	r4, [r0, r3]
 800218e:	3304      	adds	r3, #4

08002190 <LoopCopyDataInit>:
 8002190:	18c4      	adds	r4, r0, r3
 8002192:	428c      	cmp	r4, r1
 8002194:	d3f9      	bcc.n	800218a <CopyDataInit>
 8002196:	4a0a      	ldr	r2, [pc, #40]	; (80021c0 <LoopForever+0x12>)
 8002198:	4c0a      	ldr	r4, [pc, #40]	; (80021c4 <LoopForever+0x16>)
 800219a:	2300      	movs	r3, #0
 800219c:	e001      	b.n	80021a2 <LoopFillZerobss>

0800219e <FillZerobss>:
 800219e:	6013      	str	r3, [r2, #0]
 80021a0:	3204      	adds	r2, #4

080021a2 <LoopFillZerobss>:
 80021a2:	42a2      	cmp	r2, r4
 80021a4:	d3fb      	bcc.n	800219e <FillZerobss>
 80021a6:	f008 fa8d 	bl	800a6c4 <__libc_init_array>
 80021aa:	f7ff f93f 	bl	800142c <main>

080021ae <LoopForever>:
 80021ae:	e7fe      	b.n	80021ae <LoopForever>
 80021b0:	2000a000 	.word	0x2000a000
 80021b4:	20000000 	.word	0x20000000
 80021b8:	200001e8 	.word	0x200001e8
 80021bc:	0800d5a8 	.word	0x0800d5a8
 80021c0:	200001e8 	.word	0x200001e8
 80021c4:	2000276c 	.word	0x2000276c

080021c8 <ADC1_2_IRQHandler>:
 80021c8:	e7fe      	b.n	80021c8 <ADC1_2_IRQHandler>

080021ca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b082      	sub	sp, #8
 80021ce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80021d0:	2300      	movs	r3, #0
 80021d2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021d4:	2003      	movs	r0, #3
 80021d6:	f000 f8de 	bl	8002396 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021da:	200f      	movs	r0, #15
 80021dc:	f7ff fe32 	bl	8001e44 <HAL_InitTick>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d002      	beq.n	80021ec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	71fb      	strb	r3, [r7, #7]
 80021ea:	e001      	b.n	80021f0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80021ec:	f7ff fc94 	bl	8001b18 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80021f0:	79fb      	ldrb	r3, [r7, #7]
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
	...

080021fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002200:	4b06      	ldr	r3, [pc, #24]	; (800221c <HAL_IncTick+0x20>)
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	461a      	mov	r2, r3
 8002206:	4b06      	ldr	r3, [pc, #24]	; (8002220 <HAL_IncTick+0x24>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4413      	add	r3, r2
 800220c:	4a04      	ldr	r2, [pc, #16]	; (8002220 <HAL_IncTick+0x24>)
 800220e:	6013      	str	r3, [r2, #0]
}
 8002210:	bf00      	nop
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	20000008 	.word	0x20000008
 8002220:	200004ac 	.word	0x200004ac

08002224 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  return uwTick;
 8002228:	4b03      	ldr	r3, [pc, #12]	; (8002238 <HAL_GetTick+0x14>)
 800222a:	681b      	ldr	r3, [r3, #0]
}
 800222c:	4618      	mov	r0, r3
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	200004ac 	.word	0x200004ac

0800223c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800223c:	b480      	push	{r7}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f003 0307 	and.w	r3, r3, #7
 800224a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800224c:	4b0c      	ldr	r3, [pc, #48]	; (8002280 <__NVIC_SetPriorityGrouping+0x44>)
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002252:	68ba      	ldr	r2, [r7, #8]
 8002254:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002258:	4013      	ands	r3, r2
 800225a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002264:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002268:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800226c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800226e:	4a04      	ldr	r2, [pc, #16]	; (8002280 <__NVIC_SetPriorityGrouping+0x44>)
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	60d3      	str	r3, [r2, #12]
}
 8002274:	bf00      	nop
 8002276:	3714      	adds	r7, #20
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	e000ed00 	.word	0xe000ed00

08002284 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002288:	4b04      	ldr	r3, [pc, #16]	; (800229c <__NVIC_GetPriorityGrouping+0x18>)
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	0a1b      	lsrs	r3, r3, #8
 800228e:	f003 0307 	and.w	r3, r3, #7
}
 8002292:	4618      	mov	r0, r3
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr
 800229c:	e000ed00 	.word	0xe000ed00

080022a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	4603      	mov	r3, r0
 80022a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	db0b      	blt.n	80022ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022b2:	79fb      	ldrb	r3, [r7, #7]
 80022b4:	f003 021f 	and.w	r2, r3, #31
 80022b8:	4907      	ldr	r1, [pc, #28]	; (80022d8 <__NVIC_EnableIRQ+0x38>)
 80022ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022be:	095b      	lsrs	r3, r3, #5
 80022c0:	2001      	movs	r0, #1
 80022c2:	fa00 f202 	lsl.w	r2, r0, r2
 80022c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022ca:	bf00      	nop
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	e000e100 	.word	0xe000e100

080022dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	4603      	mov	r3, r0
 80022e4:	6039      	str	r1, [r7, #0]
 80022e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	db0a      	blt.n	8002306 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	b2da      	uxtb	r2, r3
 80022f4:	490c      	ldr	r1, [pc, #48]	; (8002328 <__NVIC_SetPriority+0x4c>)
 80022f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fa:	0112      	lsls	r2, r2, #4
 80022fc:	b2d2      	uxtb	r2, r2
 80022fe:	440b      	add	r3, r1
 8002300:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002304:	e00a      	b.n	800231c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	b2da      	uxtb	r2, r3
 800230a:	4908      	ldr	r1, [pc, #32]	; (800232c <__NVIC_SetPriority+0x50>)
 800230c:	79fb      	ldrb	r3, [r7, #7]
 800230e:	f003 030f 	and.w	r3, r3, #15
 8002312:	3b04      	subs	r3, #4
 8002314:	0112      	lsls	r2, r2, #4
 8002316:	b2d2      	uxtb	r2, r2
 8002318:	440b      	add	r3, r1
 800231a:	761a      	strb	r2, [r3, #24]
}
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr
 8002328:	e000e100 	.word	0xe000e100
 800232c:	e000ed00 	.word	0xe000ed00

08002330 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002330:	b480      	push	{r7}
 8002332:	b089      	sub	sp, #36	; 0x24
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f003 0307 	and.w	r3, r3, #7
 8002342:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	f1c3 0307 	rsb	r3, r3, #7
 800234a:	2b04      	cmp	r3, #4
 800234c:	bf28      	it	cs
 800234e:	2304      	movcs	r3, #4
 8002350:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	3304      	adds	r3, #4
 8002356:	2b06      	cmp	r3, #6
 8002358:	d902      	bls.n	8002360 <NVIC_EncodePriority+0x30>
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	3b03      	subs	r3, #3
 800235e:	e000      	b.n	8002362 <NVIC_EncodePriority+0x32>
 8002360:	2300      	movs	r3, #0
 8002362:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002364:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	43da      	mvns	r2, r3
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	401a      	ands	r2, r3
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002378:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	fa01 f303 	lsl.w	r3, r1, r3
 8002382:	43d9      	mvns	r1, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002388:	4313      	orrs	r3, r2
         );
}
 800238a:	4618      	mov	r0, r3
 800238c:	3724      	adds	r7, #36	; 0x24
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr

08002396 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002396:	b580      	push	{r7, lr}
 8002398:	b082      	sub	sp, #8
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f7ff ff4c 	bl	800223c <__NVIC_SetPriorityGrouping>
}
 80023a4:	bf00      	nop
 80023a6:	3708      	adds	r7, #8
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b086      	sub	sp, #24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	4603      	mov	r3, r0
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	607a      	str	r2, [r7, #4]
 80023b8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80023ba:	2300      	movs	r3, #0
 80023bc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80023be:	f7ff ff61 	bl	8002284 <__NVIC_GetPriorityGrouping>
 80023c2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	68b9      	ldr	r1, [r7, #8]
 80023c8:	6978      	ldr	r0, [r7, #20]
 80023ca:	f7ff ffb1 	bl	8002330 <NVIC_EncodePriority>
 80023ce:	4602      	mov	r2, r0
 80023d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023d4:	4611      	mov	r1, r2
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7ff ff80 	bl	80022dc <__NVIC_SetPriority>
}
 80023dc:	bf00      	nop
 80023de:	3718      	adds	r7, #24
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	4603      	mov	r3, r0
 80023ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7ff ff54 	bl	80022a0 <__NVIC_EnableIRQ>
}
 80023f8:	bf00      	nop
 80023fa:	3708      	adds	r7, #8
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002400:	b480      	push	{r7}
 8002402:	b085      	sub	sp, #20
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d101      	bne.n	8002412 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e098      	b.n	8002544 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	461a      	mov	r2, r3
 8002418:	4b4d      	ldr	r3, [pc, #308]	; (8002550 <HAL_DMA_Init+0x150>)
 800241a:	429a      	cmp	r2, r3
 800241c:	d80f      	bhi.n	800243e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	461a      	mov	r2, r3
 8002424:	4b4b      	ldr	r3, [pc, #300]	; (8002554 <HAL_DMA_Init+0x154>)
 8002426:	4413      	add	r3, r2
 8002428:	4a4b      	ldr	r2, [pc, #300]	; (8002558 <HAL_DMA_Init+0x158>)
 800242a:	fba2 2303 	umull	r2, r3, r2, r3
 800242e:	091b      	lsrs	r3, r3, #4
 8002430:	009a      	lsls	r2, r3, #2
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a48      	ldr	r2, [pc, #288]	; (800255c <HAL_DMA_Init+0x15c>)
 800243a:	641a      	str	r2, [r3, #64]	; 0x40
 800243c:	e00e      	b.n	800245c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	461a      	mov	r2, r3
 8002444:	4b46      	ldr	r3, [pc, #280]	; (8002560 <HAL_DMA_Init+0x160>)
 8002446:	4413      	add	r3, r2
 8002448:	4a43      	ldr	r2, [pc, #268]	; (8002558 <HAL_DMA_Init+0x158>)
 800244a:	fba2 2303 	umull	r2, r3, r2, r3
 800244e:	091b      	lsrs	r3, r3, #4
 8002450:	009a      	lsls	r2, r3, #2
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a42      	ldr	r2, [pc, #264]	; (8002564 <HAL_DMA_Init+0x164>)
 800245a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2202      	movs	r2, #2
 8002460:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002476:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002480:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800248c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	699b      	ldr	r3, [r3, #24]
 8002492:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002498:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a1b      	ldr	r3, [r3, #32]
 800249e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80024a0:	68fa      	ldr	r2, [r7, #12]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	68fa      	ldr	r2, [r7, #12]
 80024ac:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80024b6:	d039      	beq.n	800252c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024bc:	4a27      	ldr	r2, [pc, #156]	; (800255c <HAL_DMA_Init+0x15c>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d11a      	bne.n	80024f8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80024c2:	4b29      	ldr	r3, [pc, #164]	; (8002568 <HAL_DMA_Init+0x168>)
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ca:	f003 031c 	and.w	r3, r3, #28
 80024ce:	210f      	movs	r1, #15
 80024d0:	fa01 f303 	lsl.w	r3, r1, r3
 80024d4:	43db      	mvns	r3, r3
 80024d6:	4924      	ldr	r1, [pc, #144]	; (8002568 <HAL_DMA_Init+0x168>)
 80024d8:	4013      	ands	r3, r2
 80024da:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80024dc:	4b22      	ldr	r3, [pc, #136]	; (8002568 <HAL_DMA_Init+0x168>)
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6859      	ldr	r1, [r3, #4]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e8:	f003 031c 	and.w	r3, r3, #28
 80024ec:	fa01 f303 	lsl.w	r3, r1, r3
 80024f0:	491d      	ldr	r1, [pc, #116]	; (8002568 <HAL_DMA_Init+0x168>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	600b      	str	r3, [r1, #0]
 80024f6:	e019      	b.n	800252c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80024f8:	4b1c      	ldr	r3, [pc, #112]	; (800256c <HAL_DMA_Init+0x16c>)
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002500:	f003 031c 	and.w	r3, r3, #28
 8002504:	210f      	movs	r1, #15
 8002506:	fa01 f303 	lsl.w	r3, r1, r3
 800250a:	43db      	mvns	r3, r3
 800250c:	4917      	ldr	r1, [pc, #92]	; (800256c <HAL_DMA_Init+0x16c>)
 800250e:	4013      	ands	r3, r2
 8002510:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002512:	4b16      	ldr	r3, [pc, #88]	; (800256c <HAL_DMA_Init+0x16c>)
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6859      	ldr	r1, [r3, #4]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800251e:	f003 031c 	and.w	r3, r3, #28
 8002522:	fa01 f303 	lsl.w	r3, r1, r3
 8002526:	4911      	ldr	r1, [pc, #68]	; (800256c <HAL_DMA_Init+0x16c>)
 8002528:	4313      	orrs	r3, r2
 800252a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2201      	movs	r2, #1
 8002536:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002542:	2300      	movs	r3, #0
}
 8002544:	4618      	mov	r0, r3
 8002546:	3714      	adds	r7, #20
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr
 8002550:	40020407 	.word	0x40020407
 8002554:	bffdfff8 	.word	0xbffdfff8
 8002558:	cccccccd 	.word	0xcccccccd
 800255c:	40020000 	.word	0x40020000
 8002560:	bffdfbf8 	.word	0xbffdfbf8
 8002564:	40020400 	.word	0x40020400
 8002568:	400200a8 	.word	0x400200a8
 800256c:	400204a8 	.word	0x400204a8

08002570 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
 800257c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800257e:	2300      	movs	r3, #0
 8002580:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002588:	2b01      	cmp	r3, #1
 800258a:	d101      	bne.n	8002590 <HAL_DMA_Start_IT+0x20>
 800258c:	2302      	movs	r3, #2
 800258e:	e04b      	b.n	8002628 <HAL_DMA_Start_IT+0xb8>
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d13a      	bne.n	800261a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2202      	movs	r2, #2
 80025a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2200      	movs	r2, #0
 80025b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f022 0201 	bic.w	r2, r2, #1
 80025c0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	68b9      	ldr	r1, [r7, #8]
 80025c8:	68f8      	ldr	r0, [r7, #12]
 80025ca:	f000 f96b 	bl	80028a4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d008      	beq.n	80025e8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f042 020e 	orr.w	r2, r2, #14
 80025e4:	601a      	str	r2, [r3, #0]
 80025e6:	e00f      	b.n	8002608 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f022 0204 	bic.w	r2, r2, #4
 80025f6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f042 020a 	orr.w	r2, r2, #10
 8002606:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f042 0201 	orr.w	r2, r2, #1
 8002616:	601a      	str	r2, [r3, #0]
 8002618:	e005      	b.n	8002626 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002622:	2302      	movs	r3, #2
 8002624:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002626:	7dfb      	ldrb	r3, [r7, #23]
}
 8002628:	4618      	mov	r0, r3
 800262a:	3718      	adds	r7, #24
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002630:	b480      	push	{r7}
 8002632:	b085      	sub	sp, #20
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002638:	2300      	movs	r3, #0
 800263a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002642:	b2db      	uxtb	r3, r3
 8002644:	2b02      	cmp	r3, #2
 8002646:	d008      	beq.n	800265a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2204      	movs	r2, #4
 800264c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e022      	b.n	80026a0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f022 020e 	bic.w	r2, r2, #14
 8002668:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f022 0201 	bic.w	r2, r2, #1
 8002678:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800267e:	f003 021c 	and.w	r2, r3, #28
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002686:	2101      	movs	r1, #1
 8002688:	fa01 f202 	lsl.w	r2, r1, r2
 800268c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2201      	movs	r2, #1
 8002692:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800269e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3714      	adds	r7, #20
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026b4:	2300      	movs	r3, #0
 80026b6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d005      	beq.n	80026d0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2204      	movs	r2, #4
 80026c8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	73fb      	strb	r3, [r7, #15]
 80026ce:	e029      	b.n	8002724 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f022 020e 	bic.w	r2, r2, #14
 80026de:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f022 0201 	bic.w	r2, r2, #1
 80026ee:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f4:	f003 021c 	and.w	r2, r3, #28
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fc:	2101      	movs	r1, #1
 80026fe:	fa01 f202 	lsl.w	r2, r1, r2
 8002702:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002718:	2b00      	cmp	r3, #0
 800271a:	d003      	beq.n	8002724 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	4798      	blx	r3
    }
  }
  return status;
 8002724:	7bfb      	ldrb	r3, [r7, #15]
}
 8002726:	4618      	mov	r0, r3
 8002728:	3710      	adds	r7, #16
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800272e:	b580      	push	{r7, lr}
 8002730:	b084      	sub	sp, #16
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274a:	f003 031c 	and.w	r3, r3, #28
 800274e:	2204      	movs	r2, #4
 8002750:	409a      	lsls	r2, r3
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	4013      	ands	r3, r2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d026      	beq.n	80027a8 <HAL_DMA_IRQHandler+0x7a>
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	f003 0304 	and.w	r3, r3, #4
 8002760:	2b00      	cmp	r3, #0
 8002762:	d021      	beq.n	80027a8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0320 	and.w	r3, r3, #32
 800276e:	2b00      	cmp	r3, #0
 8002770:	d107      	bne.n	8002782 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f022 0204 	bic.w	r2, r2, #4
 8002780:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002786:	f003 021c 	and.w	r2, r3, #28
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278e:	2104      	movs	r1, #4
 8002790:	fa01 f202 	lsl.w	r2, r1, r2
 8002794:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279a:	2b00      	cmp	r3, #0
 800279c:	d071      	beq.n	8002882 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80027a6:	e06c      	b.n	8002882 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ac:	f003 031c 	and.w	r3, r3, #28
 80027b0:	2202      	movs	r2, #2
 80027b2:	409a      	lsls	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	4013      	ands	r3, r2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d02e      	beq.n	800281a <HAL_DMA_IRQHandler+0xec>
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	f003 0302 	and.w	r3, r3, #2
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d029      	beq.n	800281a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0320 	and.w	r3, r3, #32
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d10b      	bne.n	80027ec <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f022 020a 	bic.w	r2, r2, #10
 80027e2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f0:	f003 021c 	and.w	r2, r3, #28
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f8:	2102      	movs	r1, #2
 80027fa:	fa01 f202 	lsl.w	r2, r1, r2
 80027fe:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800280c:	2b00      	cmp	r3, #0
 800280e:	d038      	beq.n	8002882 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002818:	e033      	b.n	8002882 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800281e:	f003 031c 	and.w	r3, r3, #28
 8002822:	2208      	movs	r2, #8
 8002824:	409a      	lsls	r2, r3
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	4013      	ands	r3, r2
 800282a:	2b00      	cmp	r3, #0
 800282c:	d02a      	beq.n	8002884 <HAL_DMA_IRQHandler+0x156>
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	f003 0308 	and.w	r3, r3, #8
 8002834:	2b00      	cmp	r3, #0
 8002836:	d025      	beq.n	8002884 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f022 020e 	bic.w	r2, r2, #14
 8002846:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800284c:	f003 021c 	and.w	r2, r3, #28
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002854:	2101      	movs	r1, #1
 8002856:	fa01 f202 	lsl.w	r2, r1, r2
 800285a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2201      	movs	r2, #1
 8002866:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002876:	2b00      	cmp	r3, #0
 8002878:	d004      	beq.n	8002884 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002882:	bf00      	nop
 8002884:	bf00      	nop
}
 8002886:	3710      	adds	r7, #16
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8002898:	4618      	mov	r0, r3
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	607a      	str	r2, [r7, #4]
 80028b0:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b6:	f003 021c 	and.w	r2, r3, #28
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028be:	2101      	movs	r1, #1
 80028c0:	fa01 f202 	lsl.w	r2, r1, r2
 80028c4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	683a      	ldr	r2, [r7, #0]
 80028cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	2b10      	cmp	r3, #16
 80028d4:	d108      	bne.n	80028e8 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	68ba      	ldr	r2, [r7, #8]
 80028e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80028e6:	e007      	b.n	80028f8 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	68ba      	ldr	r2, [r7, #8]
 80028ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	60da      	str	r2, [r3, #12]
}
 80028f8:	bf00      	nop
 80028fa:	3714      	adds	r7, #20
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002904:	b480      	push	{r7}
 8002906:	b087      	sub	sp, #28
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800290e:	2300      	movs	r3, #0
 8002910:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002912:	e14e      	b.n	8002bb2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	2101      	movs	r1, #1
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	fa01 f303 	lsl.w	r3, r1, r3
 8002920:	4013      	ands	r3, r2
 8002922:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2b00      	cmp	r3, #0
 8002928:	f000 8140 	beq.w	8002bac <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f003 0303 	and.w	r3, r3, #3
 8002934:	2b01      	cmp	r3, #1
 8002936:	d005      	beq.n	8002944 <HAL_GPIO_Init+0x40>
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f003 0303 	and.w	r3, r3, #3
 8002940:	2b02      	cmp	r3, #2
 8002942:	d130      	bne.n	80029a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	2203      	movs	r2, #3
 8002950:	fa02 f303 	lsl.w	r3, r2, r3
 8002954:	43db      	mvns	r3, r3
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	4013      	ands	r3, r2
 800295a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	68da      	ldr	r2, [r3, #12]
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	4313      	orrs	r3, r2
 800296c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800297a:	2201      	movs	r2, #1
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	fa02 f303 	lsl.w	r3, r2, r3
 8002982:	43db      	mvns	r3, r3
 8002984:	693a      	ldr	r2, [r7, #16]
 8002986:	4013      	ands	r3, r2
 8002988:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	091b      	lsrs	r3, r3, #4
 8002990:	f003 0201 	and.w	r2, r3, #1
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	fa02 f303 	lsl.w	r3, r2, r3
 800299a:	693a      	ldr	r2, [r7, #16]
 800299c:	4313      	orrs	r3, r2
 800299e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	693a      	ldr	r2, [r7, #16]
 80029a4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f003 0303 	and.w	r3, r3, #3
 80029ae:	2b03      	cmp	r3, #3
 80029b0:	d017      	beq.n	80029e2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	2203      	movs	r2, #3
 80029be:	fa02 f303 	lsl.w	r3, r2, r3
 80029c2:	43db      	mvns	r3, r3
 80029c4:	693a      	ldr	r2, [r7, #16]
 80029c6:	4013      	ands	r3, r2
 80029c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	689a      	ldr	r2, [r3, #8]
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	fa02 f303 	lsl.w	r3, r2, r3
 80029d6:	693a      	ldr	r2, [r7, #16]
 80029d8:	4313      	orrs	r3, r2
 80029da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	693a      	ldr	r2, [r7, #16]
 80029e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f003 0303 	and.w	r3, r3, #3
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d123      	bne.n	8002a36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	08da      	lsrs	r2, r3, #3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	3208      	adds	r2, #8
 80029f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	f003 0307 	and.w	r3, r3, #7
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	220f      	movs	r2, #15
 8002a06:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0a:	43db      	mvns	r3, r3
 8002a0c:	693a      	ldr	r2, [r7, #16]
 8002a0e:	4013      	ands	r3, r2
 8002a10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	691a      	ldr	r2, [r3, #16]
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	f003 0307 	and.w	r3, r3, #7
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	08da      	lsrs	r2, r3, #3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	3208      	adds	r2, #8
 8002a30:	6939      	ldr	r1, [r7, #16]
 8002a32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	2203      	movs	r2, #3
 8002a42:	fa02 f303 	lsl.w	r3, r2, r3
 8002a46:	43db      	mvns	r3, r3
 8002a48:	693a      	ldr	r2, [r7, #16]
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f003 0203 	and.w	r2, r3, #3
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5e:	693a      	ldr	r2, [r7, #16]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	693a      	ldr	r2, [r7, #16]
 8002a68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	f000 809a 	beq.w	8002bac <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a78:	4b55      	ldr	r3, [pc, #340]	; (8002bd0 <HAL_GPIO_Init+0x2cc>)
 8002a7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a7c:	4a54      	ldr	r2, [pc, #336]	; (8002bd0 <HAL_GPIO_Init+0x2cc>)
 8002a7e:	f043 0301 	orr.w	r3, r3, #1
 8002a82:	6613      	str	r3, [r2, #96]	; 0x60
 8002a84:	4b52      	ldr	r3, [pc, #328]	; (8002bd0 <HAL_GPIO_Init+0x2cc>)
 8002a86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a88:	f003 0301 	and.w	r3, r3, #1
 8002a8c:	60bb      	str	r3, [r7, #8]
 8002a8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002a90:	4a50      	ldr	r2, [pc, #320]	; (8002bd4 <HAL_GPIO_Init+0x2d0>)
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	089b      	lsrs	r3, r3, #2
 8002a96:	3302      	adds	r3, #2
 8002a98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	f003 0303 	and.w	r3, r3, #3
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	220f      	movs	r2, #15
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	43db      	mvns	r3, r3
 8002aae:	693a      	ldr	r2, [r7, #16]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002aba:	d013      	beq.n	8002ae4 <HAL_GPIO_Init+0x1e0>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	4a46      	ldr	r2, [pc, #280]	; (8002bd8 <HAL_GPIO_Init+0x2d4>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d00d      	beq.n	8002ae0 <HAL_GPIO_Init+0x1dc>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	4a45      	ldr	r2, [pc, #276]	; (8002bdc <HAL_GPIO_Init+0x2d8>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d007      	beq.n	8002adc <HAL_GPIO_Init+0x1d8>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4a44      	ldr	r2, [pc, #272]	; (8002be0 <HAL_GPIO_Init+0x2dc>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d101      	bne.n	8002ad8 <HAL_GPIO_Init+0x1d4>
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e006      	b.n	8002ae6 <HAL_GPIO_Init+0x1e2>
 8002ad8:	2307      	movs	r3, #7
 8002ada:	e004      	b.n	8002ae6 <HAL_GPIO_Init+0x1e2>
 8002adc:	2302      	movs	r3, #2
 8002ade:	e002      	b.n	8002ae6 <HAL_GPIO_Init+0x1e2>
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e000      	b.n	8002ae6 <HAL_GPIO_Init+0x1e2>
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	697a      	ldr	r2, [r7, #20]
 8002ae8:	f002 0203 	and.w	r2, r2, #3
 8002aec:	0092      	lsls	r2, r2, #2
 8002aee:	4093      	lsls	r3, r2
 8002af0:	693a      	ldr	r2, [r7, #16]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002af6:	4937      	ldr	r1, [pc, #220]	; (8002bd4 <HAL_GPIO_Init+0x2d0>)
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	089b      	lsrs	r3, r3, #2
 8002afc:	3302      	adds	r3, #2
 8002afe:	693a      	ldr	r2, [r7, #16]
 8002b00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b04:	4b37      	ldr	r3, [pc, #220]	; (8002be4 <HAL_GPIO_Init+0x2e0>)
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	43db      	mvns	r3, r3
 8002b0e:	693a      	ldr	r2, [r7, #16]
 8002b10:	4013      	ands	r3, r2
 8002b12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d003      	beq.n	8002b28 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b28:	4a2e      	ldr	r2, [pc, #184]	; (8002be4 <HAL_GPIO_Init+0x2e0>)
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002b2e:	4b2d      	ldr	r3, [pc, #180]	; (8002be4 <HAL_GPIO_Init+0x2e0>)
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	43db      	mvns	r3, r3
 8002b38:	693a      	ldr	r2, [r7, #16]
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d003      	beq.n	8002b52 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b52:	4a24      	ldr	r2, [pc, #144]	; (8002be4 <HAL_GPIO_Init+0x2e0>)
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002b58:	4b22      	ldr	r3, [pc, #136]	; (8002be4 <HAL_GPIO_Init+0x2e0>)
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	43db      	mvns	r3, r3
 8002b62:	693a      	ldr	r2, [r7, #16]
 8002b64:	4013      	ands	r3, r2
 8002b66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d003      	beq.n	8002b7c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002b74:	693a      	ldr	r2, [r7, #16]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b7c:	4a19      	ldr	r2, [pc, #100]	; (8002be4 <HAL_GPIO_Init+0x2e0>)
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002b82:	4b18      	ldr	r3, [pc, #96]	; (8002be4 <HAL_GPIO_Init+0x2e0>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	43db      	mvns	r3, r3
 8002b8c:	693a      	ldr	r2, [r7, #16]
 8002b8e:	4013      	ands	r3, r2
 8002b90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d003      	beq.n	8002ba6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002b9e:	693a      	ldr	r2, [r7, #16]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ba6:	4a0f      	ldr	r2, [pc, #60]	; (8002be4 <HAL_GPIO_Init+0x2e0>)
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	3301      	adds	r3, #1
 8002bb0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	fa22 f303 	lsr.w	r3, r2, r3
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	f47f aea9 	bne.w	8002914 <HAL_GPIO_Init+0x10>
  }
}
 8002bc2:	bf00      	nop
 8002bc4:	bf00      	nop
 8002bc6:	371c      	adds	r7, #28
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr
 8002bd0:	40021000 	.word	0x40021000
 8002bd4:	40010000 	.word	0x40010000
 8002bd8:	48000400 	.word	0x48000400
 8002bdc:	48000800 	.word	0x48000800
 8002be0:	48000c00 	.word	0x48000c00
 8002be4:	40010400 	.word	0x40010400

08002be8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	807b      	strh	r3, [r7, #2]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bf8:	787b      	ldrb	r3, [r7, #1]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d003      	beq.n	8002c06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002bfe:	887a      	ldrh	r2, [r7, #2]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c04:	e002      	b.n	8002c0c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c06:	887a      	ldrh	r2, [r7, #2]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c0c:	bf00      	nop
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b085      	sub	sp, #20
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	460b      	mov	r3, r1
 8002c22:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	695b      	ldr	r3, [r3, #20]
 8002c28:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002c2a:	887a      	ldrh	r2, [r7, #2]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	4013      	ands	r3, r2
 8002c30:	041a      	lsls	r2, r3, #16
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	43d9      	mvns	r1, r3
 8002c36:	887b      	ldrh	r3, [r7, #2]
 8002c38:	400b      	ands	r3, r1
 8002c3a:	431a      	orrs	r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	619a      	str	r2, [r3, #24]
}
 8002c40:	bf00      	nop
 8002c42:	3714      	adds	r7, #20
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d101      	bne.n	8002c5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e08d      	b.n	8002d7a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d106      	bne.n	8002c78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f7fe ff78 	bl	8001b68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2224      	movs	r2, #36	; 0x24
 8002c7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f022 0201 	bic.w	r2, r2, #1
 8002c8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685a      	ldr	r2, [r3, #4]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c9c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	689a      	ldr	r2, [r3, #8]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002cac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d107      	bne.n	8002cc6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	689a      	ldr	r2, [r3, #8]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cc2:	609a      	str	r2, [r3, #8]
 8002cc4:	e006      	b.n	8002cd4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	689a      	ldr	r2, [r3, #8]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002cd2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d108      	bne.n	8002cee <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	685a      	ldr	r2, [r3, #4]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cea:	605a      	str	r2, [r3, #4]
 8002cec:	e007      	b.n	8002cfe <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	685a      	ldr	r2, [r3, #4]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cfc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	6812      	ldr	r2, [r2, #0]
 8002d08:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d10:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68da      	ldr	r2, [r3, #12]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d20:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	691a      	ldr	r2, [r3, #16]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	69d9      	ldr	r1, [r3, #28]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a1a      	ldr	r2, [r3, #32]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f042 0201 	orr.w	r2, r2, #1
 8002d5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2220      	movs	r2, #32
 8002d66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3708      	adds	r7, #8
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
	...

08002d84 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b088      	sub	sp, #32
 8002d88:	af02      	add	r7, sp, #8
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	4608      	mov	r0, r1
 8002d8e:	4611      	mov	r1, r2
 8002d90:	461a      	mov	r2, r3
 8002d92:	4603      	mov	r3, r0
 8002d94:	817b      	strh	r3, [r7, #10]
 8002d96:	460b      	mov	r3, r1
 8002d98:	813b      	strh	r3, [r7, #8]
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b20      	cmp	r3, #32
 8002da8:	f040 80f9 	bne.w	8002f9e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dac:	6a3b      	ldr	r3, [r7, #32]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d002      	beq.n	8002db8 <HAL_I2C_Mem_Write+0x34>
 8002db2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d105      	bne.n	8002dc4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dbe:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e0ed      	b.n	8002fa0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d101      	bne.n	8002dd2 <HAL_I2C_Mem_Write+0x4e>
 8002dce:	2302      	movs	r3, #2
 8002dd0:	e0e6      	b.n	8002fa0 <HAL_I2C_Mem_Write+0x21c>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002dda:	f7ff fa23 	bl	8002224 <HAL_GetTick>
 8002dde:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	9300      	str	r3, [sp, #0]
 8002de4:	2319      	movs	r3, #25
 8002de6:	2201      	movs	r2, #1
 8002de8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002dec:	68f8      	ldr	r0, [r7, #12]
 8002dee:	f000 fac3 	bl	8003378 <I2C_WaitOnFlagUntilTimeout>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d001      	beq.n	8002dfc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e0d1      	b.n	8002fa0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2221      	movs	r2, #33	; 0x21
 8002e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2240      	movs	r2, #64	; 0x40
 8002e08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6a3a      	ldr	r2, [r7, #32]
 8002e16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002e1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2200      	movs	r2, #0
 8002e22:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e24:	88f8      	ldrh	r0, [r7, #6]
 8002e26:	893a      	ldrh	r2, [r7, #8]
 8002e28:	8979      	ldrh	r1, [r7, #10]
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	9301      	str	r3, [sp, #4]
 8002e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e30:	9300      	str	r3, [sp, #0]
 8002e32:	4603      	mov	r3, r0
 8002e34:	68f8      	ldr	r0, [r7, #12]
 8002e36:	f000 f9d3 	bl	80031e0 <I2C_RequestMemoryWrite>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d005      	beq.n	8002e4c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e0a9      	b.n	8002fa0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	2bff      	cmp	r3, #255	; 0xff
 8002e54:	d90e      	bls.n	8002e74 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	22ff      	movs	r2, #255	; 0xff
 8002e5a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e60:	b2da      	uxtb	r2, r3
 8002e62:	8979      	ldrh	r1, [r7, #10]
 8002e64:	2300      	movs	r3, #0
 8002e66:	9300      	str	r3, [sp, #0]
 8002e68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e6c:	68f8      	ldr	r0, [r7, #12]
 8002e6e:	f000 fc3d 	bl	80036ec <I2C_TransferConfig>
 8002e72:	e00f      	b.n	8002e94 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e78:	b29a      	uxth	r2, r3
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e82:	b2da      	uxtb	r2, r3
 8002e84:	8979      	ldrh	r1, [r7, #10]
 8002e86:	2300      	movs	r3, #0
 8002e88:	9300      	str	r3, [sp, #0]
 8002e8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e8e:	68f8      	ldr	r0, [r7, #12]
 8002e90:	f000 fc2c 	bl	80036ec <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e94:	697a      	ldr	r2, [r7, #20]
 8002e96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e98:	68f8      	ldr	r0, [r7, #12]
 8002e9a:	f000 fabc 	bl	8003416 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d001      	beq.n	8002ea8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e07b      	b.n	8002fa0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eac:	781a      	ldrb	r2, [r3, #0]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb8:	1c5a      	adds	r2, r3, #1
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	3b01      	subs	r3, #1
 8002ec6:	b29a      	uxth	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d034      	beq.n	8002f4c <HAL_I2C_Mem_Write+0x1c8>
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d130      	bne.n	8002f4c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	9300      	str	r3, [sp, #0]
 8002eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	2180      	movs	r1, #128	; 0x80
 8002ef4:	68f8      	ldr	r0, [r7, #12]
 8002ef6:	f000 fa3f 	bl	8003378 <I2C_WaitOnFlagUntilTimeout>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d001      	beq.n	8002f04 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e04d      	b.n	8002fa0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	2bff      	cmp	r3, #255	; 0xff
 8002f0c:	d90e      	bls.n	8002f2c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	22ff      	movs	r2, #255	; 0xff
 8002f12:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f18:	b2da      	uxtb	r2, r3
 8002f1a:	8979      	ldrh	r1, [r7, #10]
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	9300      	str	r3, [sp, #0]
 8002f20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f24:	68f8      	ldr	r0, [r7, #12]
 8002f26:	f000 fbe1 	bl	80036ec <I2C_TransferConfig>
 8002f2a:	e00f      	b.n	8002f4c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f30:	b29a      	uxth	r2, r3
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f3a:	b2da      	uxtb	r2, r3
 8002f3c:	8979      	ldrh	r1, [r7, #10]
 8002f3e:	2300      	movs	r3, #0
 8002f40:	9300      	str	r3, [sp, #0]
 8002f42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f46:	68f8      	ldr	r0, [r7, #12]
 8002f48:	f000 fbd0 	bl	80036ec <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d19e      	bne.n	8002e94 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f56:	697a      	ldr	r2, [r7, #20]
 8002f58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f5a:	68f8      	ldr	r0, [r7, #12]
 8002f5c:	f000 faa2 	bl	80034a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e01a      	b.n	8002fa0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2220      	movs	r2, #32
 8002f70:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	6859      	ldr	r1, [r3, #4]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	4b0a      	ldr	r3, [pc, #40]	; (8002fa8 <HAL_I2C_Mem_Write+0x224>)
 8002f7e:	400b      	ands	r3, r1
 8002f80:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2220      	movs	r2, #32
 8002f86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	e000      	b.n	8002fa0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002f9e:	2302      	movs	r3, #2
  }
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3718      	adds	r7, #24
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	fe00e800 	.word	0xfe00e800

08002fac <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b088      	sub	sp, #32
 8002fb0:	af02      	add	r7, sp, #8
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	4608      	mov	r0, r1
 8002fb6:	4611      	mov	r1, r2
 8002fb8:	461a      	mov	r2, r3
 8002fba:	4603      	mov	r3, r0
 8002fbc:	817b      	strh	r3, [r7, #10]
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	813b      	strh	r3, [r7, #8]
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b20      	cmp	r3, #32
 8002fd0:	f040 80fd 	bne.w	80031ce <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fd4:	6a3b      	ldr	r3, [r7, #32]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d002      	beq.n	8002fe0 <HAL_I2C_Mem_Read+0x34>
 8002fda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d105      	bne.n	8002fec <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fe6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e0f1      	b.n	80031d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d101      	bne.n	8002ffa <HAL_I2C_Mem_Read+0x4e>
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	e0ea      	b.n	80031d0 <HAL_I2C_Mem_Read+0x224>
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003002:	f7ff f90f 	bl	8002224 <HAL_GetTick>
 8003006:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	9300      	str	r3, [sp, #0]
 800300c:	2319      	movs	r3, #25
 800300e:	2201      	movs	r2, #1
 8003010:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003014:	68f8      	ldr	r0, [r7, #12]
 8003016:	f000 f9af 	bl	8003378 <I2C_WaitOnFlagUntilTimeout>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d001      	beq.n	8003024 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e0d5      	b.n	80031d0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2222      	movs	r2, #34	; 0x22
 8003028:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2240      	movs	r2, #64	; 0x40
 8003030:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2200      	movs	r2, #0
 8003038:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6a3a      	ldr	r2, [r7, #32]
 800303e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003044:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2200      	movs	r2, #0
 800304a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800304c:	88f8      	ldrh	r0, [r7, #6]
 800304e:	893a      	ldrh	r2, [r7, #8]
 8003050:	8979      	ldrh	r1, [r7, #10]
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	9301      	str	r3, [sp, #4]
 8003056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003058:	9300      	str	r3, [sp, #0]
 800305a:	4603      	mov	r3, r0
 800305c:	68f8      	ldr	r0, [r7, #12]
 800305e:	f000 f913 	bl	8003288 <I2C_RequestMemoryRead>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d005      	beq.n	8003074 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2200      	movs	r2, #0
 800306c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e0ad      	b.n	80031d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003078:	b29b      	uxth	r3, r3
 800307a:	2bff      	cmp	r3, #255	; 0xff
 800307c:	d90e      	bls.n	800309c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	22ff      	movs	r2, #255	; 0xff
 8003082:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003088:	b2da      	uxtb	r2, r3
 800308a:	8979      	ldrh	r1, [r7, #10]
 800308c:	4b52      	ldr	r3, [pc, #328]	; (80031d8 <HAL_I2C_Mem_Read+0x22c>)
 800308e:	9300      	str	r3, [sp, #0]
 8003090:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003094:	68f8      	ldr	r0, [r7, #12]
 8003096:	f000 fb29 	bl	80036ec <I2C_TransferConfig>
 800309a:	e00f      	b.n	80030bc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a0:	b29a      	uxth	r2, r3
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030aa:	b2da      	uxtb	r2, r3
 80030ac:	8979      	ldrh	r1, [r7, #10]
 80030ae:	4b4a      	ldr	r3, [pc, #296]	; (80031d8 <HAL_I2C_Mem_Read+0x22c>)
 80030b0:	9300      	str	r3, [sp, #0]
 80030b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030b6:	68f8      	ldr	r0, [r7, #12]
 80030b8:	f000 fb18 	bl	80036ec <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	9300      	str	r3, [sp, #0]
 80030c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c2:	2200      	movs	r2, #0
 80030c4:	2104      	movs	r1, #4
 80030c6:	68f8      	ldr	r0, [r7, #12]
 80030c8:	f000 f956 	bl	8003378 <I2C_WaitOnFlagUntilTimeout>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d001      	beq.n	80030d6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e07c      	b.n	80031d0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e0:	b2d2      	uxtb	r2, r2
 80030e2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e8:	1c5a      	adds	r2, r3, #1
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030f2:	3b01      	subs	r3, #1
 80030f4:	b29a      	uxth	r2, r3
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030fe:	b29b      	uxth	r3, r3
 8003100:	3b01      	subs	r3, #1
 8003102:	b29a      	uxth	r2, r3
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800310c:	b29b      	uxth	r3, r3
 800310e:	2b00      	cmp	r3, #0
 8003110:	d034      	beq.n	800317c <HAL_I2C_Mem_Read+0x1d0>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003116:	2b00      	cmp	r3, #0
 8003118:	d130      	bne.n	800317c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	9300      	str	r3, [sp, #0]
 800311e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003120:	2200      	movs	r2, #0
 8003122:	2180      	movs	r1, #128	; 0x80
 8003124:	68f8      	ldr	r0, [r7, #12]
 8003126:	f000 f927 	bl	8003378 <I2C_WaitOnFlagUntilTimeout>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d001      	beq.n	8003134 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e04d      	b.n	80031d0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003138:	b29b      	uxth	r3, r3
 800313a:	2bff      	cmp	r3, #255	; 0xff
 800313c:	d90e      	bls.n	800315c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	22ff      	movs	r2, #255	; 0xff
 8003142:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003148:	b2da      	uxtb	r2, r3
 800314a:	8979      	ldrh	r1, [r7, #10]
 800314c:	2300      	movs	r3, #0
 800314e:	9300      	str	r3, [sp, #0]
 8003150:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003154:	68f8      	ldr	r0, [r7, #12]
 8003156:	f000 fac9 	bl	80036ec <I2C_TransferConfig>
 800315a:	e00f      	b.n	800317c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003160:	b29a      	uxth	r2, r3
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800316a:	b2da      	uxtb	r2, r3
 800316c:	8979      	ldrh	r1, [r7, #10]
 800316e:	2300      	movs	r3, #0
 8003170:	9300      	str	r3, [sp, #0]
 8003172:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003176:	68f8      	ldr	r0, [r7, #12]
 8003178:	f000 fab8 	bl	80036ec <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003180:	b29b      	uxth	r3, r3
 8003182:	2b00      	cmp	r3, #0
 8003184:	d19a      	bne.n	80030bc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003186:	697a      	ldr	r2, [r7, #20]
 8003188:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800318a:	68f8      	ldr	r0, [r7, #12]
 800318c:	f000 f98a 	bl	80034a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d001      	beq.n	800319a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e01a      	b.n	80031d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2220      	movs	r2, #32
 80031a0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	6859      	ldr	r1, [r3, #4]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	4b0b      	ldr	r3, [pc, #44]	; (80031dc <HAL_I2C_Mem_Read+0x230>)
 80031ae:	400b      	ands	r3, r1
 80031b0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2220      	movs	r2, #32
 80031b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80031ca:	2300      	movs	r3, #0
 80031cc:	e000      	b.n	80031d0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80031ce:	2302      	movs	r3, #2
  }
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3718      	adds	r7, #24
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	80002400 	.word	0x80002400
 80031dc:	fe00e800 	.word	0xfe00e800

080031e0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b086      	sub	sp, #24
 80031e4:	af02      	add	r7, sp, #8
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	4608      	mov	r0, r1
 80031ea:	4611      	mov	r1, r2
 80031ec:	461a      	mov	r2, r3
 80031ee:	4603      	mov	r3, r0
 80031f0:	817b      	strh	r3, [r7, #10]
 80031f2:	460b      	mov	r3, r1
 80031f4:	813b      	strh	r3, [r7, #8]
 80031f6:	4613      	mov	r3, r2
 80031f8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80031fa:	88fb      	ldrh	r3, [r7, #6]
 80031fc:	b2da      	uxtb	r2, r3
 80031fe:	8979      	ldrh	r1, [r7, #10]
 8003200:	4b20      	ldr	r3, [pc, #128]	; (8003284 <I2C_RequestMemoryWrite+0xa4>)
 8003202:	9300      	str	r3, [sp, #0]
 8003204:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003208:	68f8      	ldr	r0, [r7, #12]
 800320a:	f000 fa6f 	bl	80036ec <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800320e:	69fa      	ldr	r2, [r7, #28]
 8003210:	69b9      	ldr	r1, [r7, #24]
 8003212:	68f8      	ldr	r0, [r7, #12]
 8003214:	f000 f8ff 	bl	8003416 <I2C_WaitOnTXISFlagUntilTimeout>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d001      	beq.n	8003222 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e02c      	b.n	800327c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003222:	88fb      	ldrh	r3, [r7, #6]
 8003224:	2b01      	cmp	r3, #1
 8003226:	d105      	bne.n	8003234 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003228:	893b      	ldrh	r3, [r7, #8]
 800322a:	b2da      	uxtb	r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	629a      	str	r2, [r3, #40]	; 0x28
 8003232:	e015      	b.n	8003260 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003234:	893b      	ldrh	r3, [r7, #8]
 8003236:	0a1b      	lsrs	r3, r3, #8
 8003238:	b29b      	uxth	r3, r3
 800323a:	b2da      	uxtb	r2, r3
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003242:	69fa      	ldr	r2, [r7, #28]
 8003244:	69b9      	ldr	r1, [r7, #24]
 8003246:	68f8      	ldr	r0, [r7, #12]
 8003248:	f000 f8e5 	bl	8003416 <I2C_WaitOnTXISFlagUntilTimeout>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e012      	b.n	800327c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003256:	893b      	ldrh	r3, [r7, #8]
 8003258:	b2da      	uxtb	r2, r3
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	9300      	str	r3, [sp, #0]
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	2200      	movs	r2, #0
 8003268:	2180      	movs	r1, #128	; 0x80
 800326a:	68f8      	ldr	r0, [r7, #12]
 800326c:	f000 f884 	bl	8003378 <I2C_WaitOnFlagUntilTimeout>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d001      	beq.n	800327a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e000      	b.n	800327c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800327a:	2300      	movs	r3, #0
}
 800327c:	4618      	mov	r0, r3
 800327e:	3710      	adds	r7, #16
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	80002000 	.word	0x80002000

08003288 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b086      	sub	sp, #24
 800328c:	af02      	add	r7, sp, #8
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	4608      	mov	r0, r1
 8003292:	4611      	mov	r1, r2
 8003294:	461a      	mov	r2, r3
 8003296:	4603      	mov	r3, r0
 8003298:	817b      	strh	r3, [r7, #10]
 800329a:	460b      	mov	r3, r1
 800329c:	813b      	strh	r3, [r7, #8]
 800329e:	4613      	mov	r3, r2
 80032a0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80032a2:	88fb      	ldrh	r3, [r7, #6]
 80032a4:	b2da      	uxtb	r2, r3
 80032a6:	8979      	ldrh	r1, [r7, #10]
 80032a8:	4b20      	ldr	r3, [pc, #128]	; (800332c <I2C_RequestMemoryRead+0xa4>)
 80032aa:	9300      	str	r3, [sp, #0]
 80032ac:	2300      	movs	r3, #0
 80032ae:	68f8      	ldr	r0, [r7, #12]
 80032b0:	f000 fa1c 	bl	80036ec <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032b4:	69fa      	ldr	r2, [r7, #28]
 80032b6:	69b9      	ldr	r1, [r7, #24]
 80032b8:	68f8      	ldr	r0, [r7, #12]
 80032ba:	f000 f8ac 	bl	8003416 <I2C_WaitOnTXISFlagUntilTimeout>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d001      	beq.n	80032c8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e02c      	b.n	8003322 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80032c8:	88fb      	ldrh	r3, [r7, #6]
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d105      	bne.n	80032da <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80032ce:	893b      	ldrh	r3, [r7, #8]
 80032d0:	b2da      	uxtb	r2, r3
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	629a      	str	r2, [r3, #40]	; 0x28
 80032d8:	e015      	b.n	8003306 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80032da:	893b      	ldrh	r3, [r7, #8]
 80032dc:	0a1b      	lsrs	r3, r3, #8
 80032de:	b29b      	uxth	r3, r3
 80032e0:	b2da      	uxtb	r2, r3
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032e8:	69fa      	ldr	r2, [r7, #28]
 80032ea:	69b9      	ldr	r1, [r7, #24]
 80032ec:	68f8      	ldr	r0, [r7, #12]
 80032ee:	f000 f892 	bl	8003416 <I2C_WaitOnTXISFlagUntilTimeout>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d001      	beq.n	80032fc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e012      	b.n	8003322 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80032fc:	893b      	ldrh	r3, [r7, #8]
 80032fe:	b2da      	uxtb	r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	9300      	str	r3, [sp, #0]
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	2200      	movs	r2, #0
 800330e:	2140      	movs	r1, #64	; 0x40
 8003310:	68f8      	ldr	r0, [r7, #12]
 8003312:	f000 f831 	bl	8003378 <I2C_WaitOnFlagUntilTimeout>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d001      	beq.n	8003320 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e000      	b.n	8003322 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3710      	adds	r7, #16
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	80002000 	.word	0x80002000

08003330 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	f003 0302 	and.w	r3, r3, #2
 8003342:	2b02      	cmp	r3, #2
 8003344:	d103      	bne.n	800334e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2200      	movs	r2, #0
 800334c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	f003 0301 	and.w	r3, r3, #1
 8003358:	2b01      	cmp	r3, #1
 800335a:	d007      	beq.n	800336c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	699a      	ldr	r2, [r3, #24]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f042 0201 	orr.w	r2, r2, #1
 800336a:	619a      	str	r2, [r3, #24]
  }
}
 800336c:	bf00      	nop
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	60b9      	str	r1, [r7, #8]
 8003382:	603b      	str	r3, [r7, #0]
 8003384:	4613      	mov	r3, r2
 8003386:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003388:	e031      	b.n	80033ee <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003390:	d02d      	beq.n	80033ee <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003392:	f7fe ff47 	bl	8002224 <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	683a      	ldr	r2, [r7, #0]
 800339e:	429a      	cmp	r2, r3
 80033a0:	d302      	bcc.n	80033a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d122      	bne.n	80033ee <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	699a      	ldr	r2, [r3, #24]
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	4013      	ands	r3, r2
 80033b2:	68ba      	ldr	r2, [r7, #8]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	bf0c      	ite	eq
 80033b8:	2301      	moveq	r3, #1
 80033ba:	2300      	movne	r3, #0
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	461a      	mov	r2, r3
 80033c0:	79fb      	ldrb	r3, [r7, #7]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d113      	bne.n	80033ee <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ca:	f043 0220 	orr.w	r2, r3, #32
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2220      	movs	r2, #32
 80033d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e00f      	b.n	800340e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	699a      	ldr	r2, [r3, #24]
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	4013      	ands	r3, r2
 80033f8:	68ba      	ldr	r2, [r7, #8]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	bf0c      	ite	eq
 80033fe:	2301      	moveq	r3, #1
 8003400:	2300      	movne	r3, #0
 8003402:	b2db      	uxtb	r3, r3
 8003404:	461a      	mov	r2, r3
 8003406:	79fb      	ldrb	r3, [r7, #7]
 8003408:	429a      	cmp	r2, r3
 800340a:	d0be      	beq.n	800338a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3710      	adds	r7, #16
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003416:	b580      	push	{r7, lr}
 8003418:	b084      	sub	sp, #16
 800341a:	af00      	add	r7, sp, #0
 800341c:	60f8      	str	r0, [r7, #12]
 800341e:	60b9      	str	r1, [r7, #8]
 8003420:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003422:	e033      	b.n	800348c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	68b9      	ldr	r1, [r7, #8]
 8003428:	68f8      	ldr	r0, [r7, #12]
 800342a:	f000 f87f 	bl	800352c <I2C_IsErrorOccurred>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d001      	beq.n	8003438 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e031      	b.n	800349c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800343e:	d025      	beq.n	800348c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003440:	f7fe fef0 	bl	8002224 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	68ba      	ldr	r2, [r7, #8]
 800344c:	429a      	cmp	r2, r3
 800344e:	d302      	bcc.n	8003456 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d11a      	bne.n	800348c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	f003 0302 	and.w	r3, r3, #2
 8003460:	2b02      	cmp	r3, #2
 8003462:	d013      	beq.n	800348c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003468:	f043 0220 	orr.w	r2, r3, #32
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2220      	movs	r2, #32
 8003474:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2200      	movs	r2, #0
 8003484:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e007      	b.n	800349c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	f003 0302 	and.w	r3, r3, #2
 8003496:	2b02      	cmp	r3, #2
 8003498:	d1c4      	bne.n	8003424 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800349a:	2300      	movs	r3, #0
}
 800349c:	4618      	mov	r0, r3
 800349e:	3710      	adds	r7, #16
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	60b9      	str	r1, [r7, #8]
 80034ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034b0:	e02f      	b.n	8003512 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	68b9      	ldr	r1, [r7, #8]
 80034b6:	68f8      	ldr	r0, [r7, #12]
 80034b8:	f000 f838 	bl	800352c <I2C_IsErrorOccurred>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d001      	beq.n	80034c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e02d      	b.n	8003522 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034c6:	f7fe fead 	bl	8002224 <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	68ba      	ldr	r2, [r7, #8]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d302      	bcc.n	80034dc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d11a      	bne.n	8003512 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	699b      	ldr	r3, [r3, #24]
 80034e2:	f003 0320 	and.w	r3, r3, #32
 80034e6:	2b20      	cmp	r3, #32
 80034e8:	d013      	beq.n	8003512 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ee:	f043 0220 	orr.w	r2, r3, #32
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2220      	movs	r2, #32
 80034fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e007      	b.n	8003522 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	699b      	ldr	r3, [r3, #24]
 8003518:	f003 0320 	and.w	r3, r3, #32
 800351c:	2b20      	cmp	r3, #32
 800351e:	d1c8      	bne.n	80034b2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3710      	adds	r7, #16
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
	...

0800352c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b08a      	sub	sp, #40	; 0x28
 8003530:	af00      	add	r7, sp, #0
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003538:	2300      	movs	r3, #0
 800353a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003546:	2300      	movs	r3, #0
 8003548:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	f003 0310 	and.w	r3, r3, #16
 8003554:	2b00      	cmp	r3, #0
 8003556:	d068      	beq.n	800362a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2210      	movs	r2, #16
 800355e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003560:	e049      	b.n	80035f6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003568:	d045      	beq.n	80035f6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800356a:	f7fe fe5b 	bl	8002224 <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	68ba      	ldr	r2, [r7, #8]
 8003576:	429a      	cmp	r2, r3
 8003578:	d302      	bcc.n	8003580 <I2C_IsErrorOccurred+0x54>
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d13a      	bne.n	80035f6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800358a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003592:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800359e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035a2:	d121      	bne.n	80035e8 <I2C_IsErrorOccurred+0xbc>
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035aa:	d01d      	beq.n	80035e8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80035ac:	7cfb      	ldrb	r3, [r7, #19]
 80035ae:	2b20      	cmp	r3, #32
 80035b0:	d01a      	beq.n	80035e8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	685a      	ldr	r2, [r3, #4]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035c0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80035c2:	f7fe fe2f 	bl	8002224 <HAL_GetTick>
 80035c6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035c8:	e00e      	b.n	80035e8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80035ca:	f7fe fe2b 	bl	8002224 <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	2b19      	cmp	r3, #25
 80035d6:	d907      	bls.n	80035e8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80035d8:	6a3b      	ldr	r3, [r7, #32]
 80035da:	f043 0320 	orr.w	r3, r3, #32
 80035de:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80035e6:	e006      	b.n	80035f6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	699b      	ldr	r3, [r3, #24]
 80035ee:	f003 0320 	and.w	r3, r3, #32
 80035f2:	2b20      	cmp	r3, #32
 80035f4:	d1e9      	bne.n	80035ca <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	f003 0320 	and.w	r3, r3, #32
 8003600:	2b20      	cmp	r3, #32
 8003602:	d003      	beq.n	800360c <I2C_IsErrorOccurred+0xe0>
 8003604:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003608:	2b00      	cmp	r3, #0
 800360a:	d0aa      	beq.n	8003562 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800360c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003610:	2b00      	cmp	r3, #0
 8003612:	d103      	bne.n	800361c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2220      	movs	r2, #32
 800361a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800361c:	6a3b      	ldr	r3, [r7, #32]
 800361e:	f043 0304 	orr.w	r3, r3, #4
 8003622:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	699b      	ldr	r3, [r3, #24]
 8003630:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00b      	beq.n	8003654 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800363c:	6a3b      	ldr	r3, [r7, #32]
 800363e:	f043 0301 	orr.w	r3, r3, #1
 8003642:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f44f 7280 	mov.w	r2, #256	; 0x100
 800364c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00b      	beq.n	8003676 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800365e:	6a3b      	ldr	r3, [r7, #32]
 8003660:	f043 0308 	orr.w	r3, r3, #8
 8003664:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800366e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800367c:	2b00      	cmp	r3, #0
 800367e:	d00b      	beq.n	8003698 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003680:	6a3b      	ldr	r3, [r7, #32]
 8003682:	f043 0302 	orr.w	r3, r3, #2
 8003686:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003690:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003698:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800369c:	2b00      	cmp	r3, #0
 800369e:	d01c      	beq.n	80036da <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80036a0:	68f8      	ldr	r0, [r7, #12]
 80036a2:	f7ff fe45 	bl	8003330 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	6859      	ldr	r1, [r3, #4]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	4b0d      	ldr	r3, [pc, #52]	; (80036e8 <I2C_IsErrorOccurred+0x1bc>)
 80036b2:	400b      	ands	r3, r1
 80036b4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036ba:	6a3b      	ldr	r3, [r7, #32]
 80036bc:	431a      	orrs	r2, r3
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2220      	movs	r2, #32
 80036c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80036da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3728      	adds	r7, #40	; 0x28
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	fe00e800 	.word	0xfe00e800

080036ec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b087      	sub	sp, #28
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	607b      	str	r3, [r7, #4]
 80036f6:	460b      	mov	r3, r1
 80036f8:	817b      	strh	r3, [r7, #10]
 80036fa:	4613      	mov	r3, r2
 80036fc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80036fe:	897b      	ldrh	r3, [r7, #10]
 8003700:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003704:	7a7b      	ldrb	r3, [r7, #9]
 8003706:	041b      	lsls	r3, r3, #16
 8003708:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800370c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003712:	6a3b      	ldr	r3, [r7, #32]
 8003714:	4313      	orrs	r3, r2
 8003716:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800371a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	685a      	ldr	r2, [r3, #4]
 8003722:	6a3b      	ldr	r3, [r7, #32]
 8003724:	0d5b      	lsrs	r3, r3, #21
 8003726:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800372a:	4b08      	ldr	r3, [pc, #32]	; (800374c <I2C_TransferConfig+0x60>)
 800372c:	430b      	orrs	r3, r1
 800372e:	43db      	mvns	r3, r3
 8003730:	ea02 0103 	and.w	r1, r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	697a      	ldr	r2, [r7, #20]
 800373a:	430a      	orrs	r2, r1
 800373c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800373e:	bf00      	nop
 8003740:	371c      	adds	r7, #28
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	03ff63ff 	.word	0x03ff63ff

08003750 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003760:	b2db      	uxtb	r3, r3
 8003762:	2b20      	cmp	r3, #32
 8003764:	d138      	bne.n	80037d8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800376c:	2b01      	cmp	r3, #1
 800376e:	d101      	bne.n	8003774 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003770:	2302      	movs	r3, #2
 8003772:	e032      	b.n	80037da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2224      	movs	r2, #36	; 0x24
 8003780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f022 0201 	bic.w	r2, r2, #1
 8003792:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80037a2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	6819      	ldr	r1, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	683a      	ldr	r2, [r7, #0]
 80037b0:	430a      	orrs	r2, r1
 80037b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f042 0201 	orr.w	r2, r2, #1
 80037c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2220      	movs	r2, #32
 80037c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80037d4:	2300      	movs	r3, #0
 80037d6:	e000      	b.n	80037da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80037d8:	2302      	movs	r3, #2
  }
}
 80037da:	4618      	mov	r0, r3
 80037dc:	370c      	adds	r7, #12
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr

080037e6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80037e6:	b480      	push	{r7}
 80037e8:	b085      	sub	sp, #20
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
 80037ee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	2b20      	cmp	r3, #32
 80037fa:	d139      	bne.n	8003870 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003802:	2b01      	cmp	r3, #1
 8003804:	d101      	bne.n	800380a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003806:	2302      	movs	r3, #2
 8003808:	e033      	b.n	8003872 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2201      	movs	r2, #1
 800380e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2224      	movs	r2, #36	; 0x24
 8003816:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f022 0201 	bic.w	r2, r2, #1
 8003828:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003838:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	021b      	lsls	r3, r3, #8
 800383e:	68fa      	ldr	r2, [r7, #12]
 8003840:	4313      	orrs	r3, r2
 8003842:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68fa      	ldr	r2, [r7, #12]
 800384a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f042 0201 	orr.w	r2, r2, #1
 800385a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2220      	movs	r2, #32
 8003860:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800386c:	2300      	movs	r3, #0
 800386e:	e000      	b.n	8003872 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003870:	2302      	movs	r3, #2
  }
}
 8003872:	4618      	mov	r0, r3
 8003874:	3714      	adds	r7, #20
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
	...

08003880 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003880:	b480      	push	{r7}
 8003882:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003884:	4b05      	ldr	r3, [pc, #20]	; (800389c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a04      	ldr	r2, [pc, #16]	; (800389c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800388a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800388e:	6013      	str	r3, [r2, #0]
}
 8003890:	bf00      	nop
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	40007000 	.word	0x40007000

080038a0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80038a0:	b480      	push	{r7}
 80038a2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80038a4:	4b04      	ldr	r3, [pc, #16]	; (80038b8 <HAL_PWREx_GetVoltageRange+0x18>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop
 80038b8:	40007000 	.word	0x40007000

080038bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80038bc:	b480      	push	{r7}
 80038be:	b085      	sub	sp, #20
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038ca:	d130      	bne.n	800392e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80038cc:	4b23      	ldr	r3, [pc, #140]	; (800395c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80038d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038d8:	d038      	beq.n	800394c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80038da:	4b20      	ldr	r3, [pc, #128]	; (800395c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80038e2:	4a1e      	ldr	r2, [pc, #120]	; (800395c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038e8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80038ea:	4b1d      	ldr	r3, [pc, #116]	; (8003960 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2232      	movs	r2, #50	; 0x32
 80038f0:	fb02 f303 	mul.w	r3, r2, r3
 80038f4:	4a1b      	ldr	r2, [pc, #108]	; (8003964 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80038f6:	fba2 2303 	umull	r2, r3, r2, r3
 80038fa:	0c9b      	lsrs	r3, r3, #18
 80038fc:	3301      	adds	r3, #1
 80038fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003900:	e002      	b.n	8003908 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	3b01      	subs	r3, #1
 8003906:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003908:	4b14      	ldr	r3, [pc, #80]	; (800395c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800390a:	695b      	ldr	r3, [r3, #20]
 800390c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003910:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003914:	d102      	bne.n	800391c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d1f2      	bne.n	8003902 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800391c:	4b0f      	ldr	r3, [pc, #60]	; (800395c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800391e:	695b      	ldr	r3, [r3, #20]
 8003920:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003924:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003928:	d110      	bne.n	800394c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e00f      	b.n	800394e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800392e:	4b0b      	ldr	r3, [pc, #44]	; (800395c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003936:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800393a:	d007      	beq.n	800394c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800393c:	4b07      	ldr	r3, [pc, #28]	; (800395c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003944:	4a05      	ldr	r2, [pc, #20]	; (800395c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003946:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800394a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3714      	adds	r7, #20
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	40007000 	.word	0x40007000
 8003960:	20000000 	.word	0x20000000
 8003964:	431bde83 	.word	0x431bde83

08003968 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
 800396e:	4603      	mov	r3, r0
 8003970:	71fb      	strb	r3, [r7, #7]
  /* Check the parameter */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP2);
 8003972:	4b13      	ldr	r3, [pc, #76]	; (80039c0 <HAL_PWREx_EnterSTOP2Mode+0x58>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f023 0307 	bic.w	r3, r3, #7
 800397a:	4a11      	ldr	r2, [pc, #68]	; (80039c0 <HAL_PWREx_EnterSTOP2Mode+0x58>)
 800397c:	f043 0302 	orr.w	r3, r3, #2
 8003980:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003982:	4b10      	ldr	r3, [pc, #64]	; (80039c4 <HAL_PWREx_EnterSTOP2Mode+0x5c>)
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	4a0f      	ldr	r2, [pc, #60]	; (80039c4 <HAL_PWREx_EnterSTOP2Mode+0x5c>)
 8003988:	f043 0304 	orr.w	r3, r3, #4
 800398c:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 800398e:	79fb      	ldrb	r3, [r7, #7]
 8003990:	2b01      	cmp	r3, #1
 8003992:	d107      	bne.n	80039a4 <HAL_PWREx_EnterSTOP2Mode+0x3c>
  __ASM volatile ("cpsid i" : : : "memory");
 8003994:	b672      	cpsid	i
}
 8003996:	bf00      	nop
  {
    /* Request Wait For Interrupt */
	  __disable_irq();
	  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8003998:	200a      	movs	r0, #10
 800399a:	f7fe fd23 	bl	80023e4 <HAL_NVIC_EnableIRQ>
    __WFI();
 800399e:	bf30      	wfi
  __ASM volatile ("cpsie i" : : : "memory");
 80039a0:	b662      	cpsie	i
}
 80039a2:	e002      	b.n	80039aa <HAL_PWREx_EnterSTOP2Mode+0x42>
    __enable_irq();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80039a4:	bf40      	sev
    __WFE();
 80039a6:	bf20      	wfe
    __WFE();
 80039a8:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80039aa:	4b06      	ldr	r3, [pc, #24]	; (80039c4 <HAL_PWREx_EnterSTOP2Mode+0x5c>)
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	4a05      	ldr	r2, [pc, #20]	; (80039c4 <HAL_PWREx_EnterSTOP2Mode+0x5c>)
 80039b0:	f023 0304 	bic.w	r3, r3, #4
 80039b4:	6113      	str	r3, [r2, #16]
}
 80039b6:	bf00      	nop
 80039b8:	3708      	adds	r7, #8
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	40007000 	.word	0x40007000
 80039c4:	e000ed00 	.word	0xe000ed00

080039c8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b08a      	sub	sp, #40	; 0x28
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d102      	bne.n	80039dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	f000 bc4f 	b.w	800427a <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039dc:	4b97      	ldr	r3, [pc, #604]	; (8003c3c <HAL_RCC_OscConfig+0x274>)
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	f003 030c 	and.w	r3, r3, #12
 80039e4:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039e6:	4b95      	ldr	r3, [pc, #596]	; (8003c3c <HAL_RCC_OscConfig+0x274>)
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	f003 0303 	and.w	r3, r3, #3
 80039ee:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0310 	and.w	r3, r3, #16
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	f000 80e6 	beq.w	8003bca <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80039fe:	6a3b      	ldr	r3, [r7, #32]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d007      	beq.n	8003a14 <HAL_RCC_OscConfig+0x4c>
 8003a04:	6a3b      	ldr	r3, [r7, #32]
 8003a06:	2b0c      	cmp	r3, #12
 8003a08:	f040 808d 	bne.w	8003b26 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	f040 8089 	bne.w	8003b26 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a14:	4b89      	ldr	r3, [pc, #548]	; (8003c3c <HAL_RCC_OscConfig+0x274>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0302 	and.w	r3, r3, #2
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d006      	beq.n	8003a2e <HAL_RCC_OscConfig+0x66>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	69db      	ldr	r3, [r3, #28]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d102      	bne.n	8003a2e <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	f000 bc26 	b.w	800427a <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a32:	4b82      	ldr	r3, [pc, #520]	; (8003c3c <HAL_RCC_OscConfig+0x274>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0308 	and.w	r3, r3, #8
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d004      	beq.n	8003a48 <HAL_RCC_OscConfig+0x80>
 8003a3e:	4b7f      	ldr	r3, [pc, #508]	; (8003c3c <HAL_RCC_OscConfig+0x274>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a46:	e005      	b.n	8003a54 <HAL_RCC_OscConfig+0x8c>
 8003a48:	4b7c      	ldr	r3, [pc, #496]	; (8003c3c <HAL_RCC_OscConfig+0x274>)
 8003a4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a4e:	091b      	lsrs	r3, r3, #4
 8003a50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d224      	bcs.n	8003aa2 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f000 fe0b 	bl	8004678 <RCC_SetFlashLatencyFromMSIRange>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d002      	beq.n	8003a6e <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	f000 bc06 	b.w	800427a <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a6e:	4b73      	ldr	r3, [pc, #460]	; (8003c3c <HAL_RCC_OscConfig+0x274>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a72      	ldr	r2, [pc, #456]	; (8003c3c <HAL_RCC_OscConfig+0x274>)
 8003a74:	f043 0308 	orr.w	r3, r3, #8
 8003a78:	6013      	str	r3, [r2, #0]
 8003a7a:	4b70      	ldr	r3, [pc, #448]	; (8003c3c <HAL_RCC_OscConfig+0x274>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a86:	496d      	ldr	r1, [pc, #436]	; (8003c3c <HAL_RCC_OscConfig+0x274>)
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a8c:	4b6b      	ldr	r3, [pc, #428]	; (8003c3c <HAL_RCC_OscConfig+0x274>)
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a1b      	ldr	r3, [r3, #32]
 8003a98:	021b      	lsls	r3, r3, #8
 8003a9a:	4968      	ldr	r1, [pc, #416]	; (8003c3c <HAL_RCC_OscConfig+0x274>)
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	604b      	str	r3, [r1, #4]
 8003aa0:	e025      	b.n	8003aee <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003aa2:	4b66      	ldr	r3, [pc, #408]	; (8003c3c <HAL_RCC_OscConfig+0x274>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a65      	ldr	r2, [pc, #404]	; (8003c3c <HAL_RCC_OscConfig+0x274>)
 8003aa8:	f043 0308 	orr.w	r3, r3, #8
 8003aac:	6013      	str	r3, [r2, #0]
 8003aae:	4b63      	ldr	r3, [pc, #396]	; (8003c3c <HAL_RCC_OscConfig+0x274>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aba:	4960      	ldr	r1, [pc, #384]	; (8003c3c <HAL_RCC_OscConfig+0x274>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ac0:	4b5e      	ldr	r3, [pc, #376]	; (8003c3c <HAL_RCC_OscConfig+0x274>)
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a1b      	ldr	r3, [r3, #32]
 8003acc:	021b      	lsls	r3, r3, #8
 8003ace:	495b      	ldr	r1, [pc, #364]	; (8003c3c <HAL_RCC_OscConfig+0x274>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ad4:	6a3b      	ldr	r3, [r7, #32]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d109      	bne.n	8003aee <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f000 fdca 	bl	8004678 <RCC_SetFlashLatencyFromMSIRange>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d001      	beq.n	8003aee <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e3c5      	b.n	800427a <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003aee:	f000 fccd 	bl	800448c <HAL_RCC_GetSysClockFreq>
 8003af2:	4602      	mov	r2, r0
 8003af4:	4b51      	ldr	r3, [pc, #324]	; (8003c3c <HAL_RCC_OscConfig+0x274>)
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	091b      	lsrs	r3, r3, #4
 8003afa:	f003 030f 	and.w	r3, r3, #15
 8003afe:	4950      	ldr	r1, [pc, #320]	; (8003c40 <HAL_RCC_OscConfig+0x278>)
 8003b00:	5ccb      	ldrb	r3, [r1, r3]
 8003b02:	f003 031f 	and.w	r3, r3, #31
 8003b06:	fa22 f303 	lsr.w	r3, r2, r3
 8003b0a:	4a4e      	ldr	r2, [pc, #312]	; (8003c44 <HAL_RCC_OscConfig+0x27c>)
 8003b0c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003b0e:	4b4e      	ldr	r3, [pc, #312]	; (8003c48 <HAL_RCC_OscConfig+0x280>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4618      	mov	r0, r3
 8003b14:	f7fe f996 	bl	8001e44 <HAL_InitTick>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8003b1c:	7dfb      	ldrb	r3, [r7, #23]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d052      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8003b22:	7dfb      	ldrb	r3, [r7, #23]
 8003b24:	e3a9      	b.n	800427a <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	69db      	ldr	r3, [r3, #28]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d032      	beq.n	8003b94 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003b2e:	4b43      	ldr	r3, [pc, #268]	; (8003c3c <HAL_RCC_OscConfig+0x274>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a42      	ldr	r2, [pc, #264]	; (8003c3c <HAL_RCC_OscConfig+0x274>)
 8003b34:	f043 0301 	orr.w	r3, r3, #1
 8003b38:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b3a:	f7fe fb73 	bl	8002224 <HAL_GetTick>
 8003b3e:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b40:	e008      	b.n	8003b54 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b42:	f7fe fb6f 	bl	8002224 <HAL_GetTick>
 8003b46:	4602      	mov	r2, r0
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d901      	bls.n	8003b54 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8003b50:	2303      	movs	r3, #3
 8003b52:	e392      	b.n	800427a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b54:	4b39      	ldr	r3, [pc, #228]	; (8003c3c <HAL_RCC_OscConfig+0x274>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0302 	and.w	r3, r3, #2
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d0f0      	beq.n	8003b42 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b60:	4b36      	ldr	r3, [pc, #216]	; (8003c3c <HAL_RCC_OscConfig+0x274>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a35      	ldr	r2, [pc, #212]	; (8003c3c <HAL_RCC_OscConfig+0x274>)
 8003b66:	f043 0308 	orr.w	r3, r3, #8
 8003b6a:	6013      	str	r3, [r2, #0]
 8003b6c:	4b33      	ldr	r3, [pc, #204]	; (8003c3c <HAL_RCC_OscConfig+0x274>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b78:	4930      	ldr	r1, [pc, #192]	; (8003c3c <HAL_RCC_OscConfig+0x274>)
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b7e:	4b2f      	ldr	r3, [pc, #188]	; (8003c3c <HAL_RCC_OscConfig+0x274>)
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a1b      	ldr	r3, [r3, #32]
 8003b8a:	021b      	lsls	r3, r3, #8
 8003b8c:	492b      	ldr	r1, [pc, #172]	; (8003c3c <HAL_RCC_OscConfig+0x274>)
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	604b      	str	r3, [r1, #4]
 8003b92:	e01a      	b.n	8003bca <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003b94:	4b29      	ldr	r3, [pc, #164]	; (8003c3c <HAL_RCC_OscConfig+0x274>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a28      	ldr	r2, [pc, #160]	; (8003c3c <HAL_RCC_OscConfig+0x274>)
 8003b9a:	f023 0301 	bic.w	r3, r3, #1
 8003b9e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ba0:	f7fe fb40 	bl	8002224 <HAL_GetTick>
 8003ba4:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ba6:	e008      	b.n	8003bba <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ba8:	f7fe fb3c 	bl	8002224 <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d901      	bls.n	8003bba <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e35f      	b.n	800427a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003bba:	4b20      	ldr	r3, [pc, #128]	; (8003c3c <HAL_RCC_OscConfig+0x274>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1f0      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x1e0>
 8003bc6:	e000      	b.n	8003bca <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003bc8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0301 	and.w	r3, r3, #1
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d073      	beq.n	8003cbe <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003bd6:	6a3b      	ldr	r3, [r7, #32]
 8003bd8:	2b08      	cmp	r3, #8
 8003bda:	d005      	beq.n	8003be8 <HAL_RCC_OscConfig+0x220>
 8003bdc:	6a3b      	ldr	r3, [r7, #32]
 8003bde:	2b0c      	cmp	r3, #12
 8003be0:	d10e      	bne.n	8003c00 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	2b03      	cmp	r3, #3
 8003be6:	d10b      	bne.n	8003c00 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003be8:	4b14      	ldr	r3, [pc, #80]	; (8003c3c <HAL_RCC_OscConfig+0x274>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d063      	beq.n	8003cbc <HAL_RCC_OscConfig+0x2f4>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d15f      	bne.n	8003cbc <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e33c      	b.n	800427a <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c08:	d106      	bne.n	8003c18 <HAL_RCC_OscConfig+0x250>
 8003c0a:	4b0c      	ldr	r3, [pc, #48]	; (8003c3c <HAL_RCC_OscConfig+0x274>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a0b      	ldr	r2, [pc, #44]	; (8003c3c <HAL_RCC_OscConfig+0x274>)
 8003c10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c14:	6013      	str	r3, [r2, #0]
 8003c16:	e025      	b.n	8003c64 <HAL_RCC_OscConfig+0x29c>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c20:	d114      	bne.n	8003c4c <HAL_RCC_OscConfig+0x284>
 8003c22:	4b06      	ldr	r3, [pc, #24]	; (8003c3c <HAL_RCC_OscConfig+0x274>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a05      	ldr	r2, [pc, #20]	; (8003c3c <HAL_RCC_OscConfig+0x274>)
 8003c28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c2c:	6013      	str	r3, [r2, #0]
 8003c2e:	4b03      	ldr	r3, [pc, #12]	; (8003c3c <HAL_RCC_OscConfig+0x274>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a02      	ldr	r2, [pc, #8]	; (8003c3c <HAL_RCC_OscConfig+0x274>)
 8003c34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c38:	6013      	str	r3, [r2, #0]
 8003c3a:	e013      	b.n	8003c64 <HAL_RCC_OscConfig+0x29c>
 8003c3c:	40021000 	.word	0x40021000
 8003c40:	0800d158 	.word	0x0800d158
 8003c44:	20000000 	.word	0x20000000
 8003c48:	20000004 	.word	0x20000004
 8003c4c:	4b8f      	ldr	r3, [pc, #572]	; (8003e8c <HAL_RCC_OscConfig+0x4c4>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a8e      	ldr	r2, [pc, #568]	; (8003e8c <HAL_RCC_OscConfig+0x4c4>)
 8003c52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c56:	6013      	str	r3, [r2, #0]
 8003c58:	4b8c      	ldr	r3, [pc, #560]	; (8003e8c <HAL_RCC_OscConfig+0x4c4>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a8b      	ldr	r2, [pc, #556]	; (8003e8c <HAL_RCC_OscConfig+0x4c4>)
 8003c5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d013      	beq.n	8003c94 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c6c:	f7fe fada 	bl	8002224 <HAL_GetTick>
 8003c70:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c72:	e008      	b.n	8003c86 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c74:	f7fe fad6 	bl	8002224 <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b64      	cmp	r3, #100	; 0x64
 8003c80:	d901      	bls.n	8003c86 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e2f9      	b.n	800427a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c86:	4b81      	ldr	r3, [pc, #516]	; (8003e8c <HAL_RCC_OscConfig+0x4c4>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d0f0      	beq.n	8003c74 <HAL_RCC_OscConfig+0x2ac>
 8003c92:	e014      	b.n	8003cbe <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c94:	f7fe fac6 	bl	8002224 <HAL_GetTick>
 8003c98:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c9a:	e008      	b.n	8003cae <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c9c:	f7fe fac2 	bl	8002224 <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	2b64      	cmp	r3, #100	; 0x64
 8003ca8:	d901      	bls.n	8003cae <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e2e5      	b.n	800427a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003cae:	4b77      	ldr	r3, [pc, #476]	; (8003e8c <HAL_RCC_OscConfig+0x4c4>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d1f0      	bne.n	8003c9c <HAL_RCC_OscConfig+0x2d4>
 8003cba:	e000      	b.n	8003cbe <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0302 	and.w	r3, r3, #2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d060      	beq.n	8003d8c <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003cca:	6a3b      	ldr	r3, [r7, #32]
 8003ccc:	2b04      	cmp	r3, #4
 8003cce:	d005      	beq.n	8003cdc <HAL_RCC_OscConfig+0x314>
 8003cd0:	6a3b      	ldr	r3, [r7, #32]
 8003cd2:	2b0c      	cmp	r3, #12
 8003cd4:	d119      	bne.n	8003d0a <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d116      	bne.n	8003d0a <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cdc:	4b6b      	ldr	r3, [pc, #428]	; (8003e8c <HAL_RCC_OscConfig+0x4c4>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d005      	beq.n	8003cf4 <HAL_RCC_OscConfig+0x32c>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d101      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e2c2      	b.n	800427a <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cf4:	4b65      	ldr	r3, [pc, #404]	; (8003e8c <HAL_RCC_OscConfig+0x4c4>)
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	691b      	ldr	r3, [r3, #16]
 8003d00:	061b      	lsls	r3, r3, #24
 8003d02:	4962      	ldr	r1, [pc, #392]	; (8003e8c <HAL_RCC_OscConfig+0x4c4>)
 8003d04:	4313      	orrs	r3, r2
 8003d06:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d08:	e040      	b.n	8003d8c <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d023      	beq.n	8003d5a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d12:	4b5e      	ldr	r3, [pc, #376]	; (8003e8c <HAL_RCC_OscConfig+0x4c4>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a5d      	ldr	r2, [pc, #372]	; (8003e8c <HAL_RCC_OscConfig+0x4c4>)
 8003d18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d1e:	f7fe fa81 	bl	8002224 <HAL_GetTick>
 8003d22:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d24:	e008      	b.n	8003d38 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d26:	f7fe fa7d 	bl	8002224 <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d901      	bls.n	8003d38 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	e2a0      	b.n	800427a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d38:	4b54      	ldr	r3, [pc, #336]	; (8003e8c <HAL_RCC_OscConfig+0x4c4>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d0f0      	beq.n	8003d26 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d44:	4b51      	ldr	r3, [pc, #324]	; (8003e8c <HAL_RCC_OscConfig+0x4c4>)
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	691b      	ldr	r3, [r3, #16]
 8003d50:	061b      	lsls	r3, r3, #24
 8003d52:	494e      	ldr	r1, [pc, #312]	; (8003e8c <HAL_RCC_OscConfig+0x4c4>)
 8003d54:	4313      	orrs	r3, r2
 8003d56:	604b      	str	r3, [r1, #4]
 8003d58:	e018      	b.n	8003d8c <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d5a:	4b4c      	ldr	r3, [pc, #304]	; (8003e8c <HAL_RCC_OscConfig+0x4c4>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a4b      	ldr	r2, [pc, #300]	; (8003e8c <HAL_RCC_OscConfig+0x4c4>)
 8003d60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d66:	f7fe fa5d 	bl	8002224 <HAL_GetTick>
 8003d6a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d6c:	e008      	b.n	8003d80 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d6e:	f7fe fa59 	bl	8002224 <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d901      	bls.n	8003d80 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e27c      	b.n	800427a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d80:	4b42      	ldr	r3, [pc, #264]	; (8003e8c <HAL_RCC_OscConfig+0x4c4>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d1f0      	bne.n	8003d6e <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0308 	and.w	r3, r3, #8
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	f000 8082 	beq.w	8003e9e <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d05f      	beq.n	8003e62 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8003da2:	4b3a      	ldr	r3, [pc, #232]	; (8003e8c <HAL_RCC_OscConfig+0x4c4>)
 8003da4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003da8:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	699a      	ldr	r2, [r3, #24]
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	f003 0310 	and.w	r3, r3, #16
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d037      	beq.n	8003e28 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	f003 0302 	and.w	r3, r3, #2
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d006      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d101      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e254      	b.n	800427a <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	f003 0301 	and.w	r3, r3, #1
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d01b      	beq.n	8003e12 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8003dda:	4b2c      	ldr	r3, [pc, #176]	; (8003e8c <HAL_RCC_OscConfig+0x4c4>)
 8003ddc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003de0:	4a2a      	ldr	r2, [pc, #168]	; (8003e8c <HAL_RCC_OscConfig+0x4c4>)
 8003de2:	f023 0301 	bic.w	r3, r3, #1
 8003de6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003dea:	f7fe fa1b 	bl	8002224 <HAL_GetTick>
 8003dee:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003df0:	e008      	b.n	8003e04 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003df2:	f7fe fa17 	bl	8002224 <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	2b11      	cmp	r3, #17
 8003dfe:	d901      	bls.n	8003e04 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e23a      	b.n	800427a <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e04:	4b21      	ldr	r3, [pc, #132]	; (8003e8c <HAL_RCC_OscConfig+0x4c4>)
 8003e06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e0a:	f003 0302 	and.w	r3, r3, #2
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d1ef      	bne.n	8003df2 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8003e12:	4b1e      	ldr	r3, [pc, #120]	; (8003e8c <HAL_RCC_OscConfig+0x4c4>)
 8003e14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e18:	f023 0210 	bic.w	r2, r3, #16
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	699b      	ldr	r3, [r3, #24]
 8003e20:	491a      	ldr	r1, [pc, #104]	; (8003e8c <HAL_RCC_OscConfig+0x4c4>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e28:	4b18      	ldr	r3, [pc, #96]	; (8003e8c <HAL_RCC_OscConfig+0x4c4>)
 8003e2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e2e:	4a17      	ldr	r2, [pc, #92]	; (8003e8c <HAL_RCC_OscConfig+0x4c4>)
 8003e30:	f043 0301 	orr.w	r3, r3, #1
 8003e34:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e38:	f7fe f9f4 	bl	8002224 <HAL_GetTick>
 8003e3c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e3e:	e008      	b.n	8003e52 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e40:	f7fe f9f0 	bl	8002224 <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	2b11      	cmp	r3, #17
 8003e4c:	d901      	bls.n	8003e52 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e213      	b.n	800427a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e52:	4b0e      	ldr	r3, [pc, #56]	; (8003e8c <HAL_RCC_OscConfig+0x4c4>)
 8003e54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e58:	f003 0302 	and.w	r3, r3, #2
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d0ef      	beq.n	8003e40 <HAL_RCC_OscConfig+0x478>
 8003e60:	e01d      	b.n	8003e9e <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e62:	4b0a      	ldr	r3, [pc, #40]	; (8003e8c <HAL_RCC_OscConfig+0x4c4>)
 8003e64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e68:	4a08      	ldr	r2, [pc, #32]	; (8003e8c <HAL_RCC_OscConfig+0x4c4>)
 8003e6a:	f023 0301 	bic.w	r3, r3, #1
 8003e6e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e72:	f7fe f9d7 	bl	8002224 <HAL_GetTick>
 8003e76:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e78:	e00a      	b.n	8003e90 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e7a:	f7fe f9d3 	bl	8002224 <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	2b11      	cmp	r3, #17
 8003e86:	d903      	bls.n	8003e90 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e1f6      	b.n	800427a <HAL_RCC_OscConfig+0x8b2>
 8003e8c:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e90:	4ba9      	ldr	r3, [pc, #676]	; (8004138 <HAL_RCC_OscConfig+0x770>)
 8003e92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e96:	f003 0302 	and.w	r3, r3, #2
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d1ed      	bne.n	8003e7a <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0304 	and.w	r3, r3, #4
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	f000 80bd 	beq.w	8004026 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003eac:	2300      	movs	r3, #0
 8003eae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003eb2:	4ba1      	ldr	r3, [pc, #644]	; (8004138 <HAL_RCC_OscConfig+0x770>)
 8003eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d10e      	bne.n	8003edc <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ebe:	4b9e      	ldr	r3, [pc, #632]	; (8004138 <HAL_RCC_OscConfig+0x770>)
 8003ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec2:	4a9d      	ldr	r2, [pc, #628]	; (8004138 <HAL_RCC_OscConfig+0x770>)
 8003ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ec8:	6593      	str	r3, [r2, #88]	; 0x58
 8003eca:	4b9b      	ldr	r3, [pc, #620]	; (8004138 <HAL_RCC_OscConfig+0x770>)
 8003ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ed2:	60fb      	str	r3, [r7, #12]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003edc:	4b97      	ldr	r3, [pc, #604]	; (800413c <HAL_RCC_OscConfig+0x774>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d118      	bne.n	8003f1a <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ee8:	4b94      	ldr	r3, [pc, #592]	; (800413c <HAL_RCC_OscConfig+0x774>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a93      	ldr	r2, [pc, #588]	; (800413c <HAL_RCC_OscConfig+0x774>)
 8003eee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ef2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ef4:	f7fe f996 	bl	8002224 <HAL_GetTick>
 8003ef8:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003efa:	e008      	b.n	8003f0e <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003efc:	f7fe f992 	bl	8002224 <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d901      	bls.n	8003f0e <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e1b5      	b.n	800427a <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f0e:	4b8b      	ldr	r3, [pc, #556]	; (800413c <HAL_RCC_OscConfig+0x774>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d0f0      	beq.n	8003efc <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d02c      	beq.n	8003f80 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8003f26:	4b84      	ldr	r3, [pc, #528]	; (8004138 <HAL_RCC_OscConfig+0x770>)
 8003f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f2c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f38:	497f      	ldr	r1, [pc, #508]	; (8004138 <HAL_RCC_OscConfig+0x770>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f003 0304 	and.w	r3, r3, #4
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d010      	beq.n	8003f6e <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003f4c:	4b7a      	ldr	r3, [pc, #488]	; (8004138 <HAL_RCC_OscConfig+0x770>)
 8003f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f52:	4a79      	ldr	r2, [pc, #484]	; (8004138 <HAL_RCC_OscConfig+0x770>)
 8003f54:	f043 0304 	orr.w	r3, r3, #4
 8003f58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003f5c:	4b76      	ldr	r3, [pc, #472]	; (8004138 <HAL_RCC_OscConfig+0x770>)
 8003f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f62:	4a75      	ldr	r2, [pc, #468]	; (8004138 <HAL_RCC_OscConfig+0x770>)
 8003f64:	f043 0301 	orr.w	r3, r3, #1
 8003f68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f6c:	e018      	b.n	8003fa0 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003f6e:	4b72      	ldr	r3, [pc, #456]	; (8004138 <HAL_RCC_OscConfig+0x770>)
 8003f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f74:	4a70      	ldr	r2, [pc, #448]	; (8004138 <HAL_RCC_OscConfig+0x770>)
 8003f76:	f043 0301 	orr.w	r3, r3, #1
 8003f7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f7e:	e00f      	b.n	8003fa0 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003f80:	4b6d      	ldr	r3, [pc, #436]	; (8004138 <HAL_RCC_OscConfig+0x770>)
 8003f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f86:	4a6c      	ldr	r2, [pc, #432]	; (8004138 <HAL_RCC_OscConfig+0x770>)
 8003f88:	f023 0301 	bic.w	r3, r3, #1
 8003f8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003f90:	4b69      	ldr	r3, [pc, #420]	; (8004138 <HAL_RCC_OscConfig+0x770>)
 8003f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f96:	4a68      	ldr	r2, [pc, #416]	; (8004138 <HAL_RCC_OscConfig+0x770>)
 8003f98:	f023 0304 	bic.w	r3, r3, #4
 8003f9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d016      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fa8:	f7fe f93c 	bl	8002224 <HAL_GetTick>
 8003fac:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fae:	e00a      	b.n	8003fc6 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fb0:	f7fe f938 	bl	8002224 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d901      	bls.n	8003fc6 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e159      	b.n	800427a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fc6:	4b5c      	ldr	r3, [pc, #368]	; (8004138 <HAL_RCC_OscConfig+0x770>)
 8003fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fcc:	f003 0302 	and.w	r3, r3, #2
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d0ed      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x5e8>
 8003fd4:	e01d      	b.n	8004012 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fd6:	f7fe f925 	bl	8002224 <HAL_GetTick>
 8003fda:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003fdc:	e00a      	b.n	8003ff4 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fde:	f7fe f921 	bl	8002224 <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d901      	bls.n	8003ff4 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	e142      	b.n	800427a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ff4:	4b50      	ldr	r3, [pc, #320]	; (8004138 <HAL_RCC_OscConfig+0x770>)
 8003ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ffa:	f003 0302 	and.w	r3, r3, #2
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d1ed      	bne.n	8003fde <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8004002:	4b4d      	ldr	r3, [pc, #308]	; (8004138 <HAL_RCC_OscConfig+0x770>)
 8004004:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004008:	4a4b      	ldr	r2, [pc, #300]	; (8004138 <HAL_RCC_OscConfig+0x770>)
 800400a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800400e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004012:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004016:	2b01      	cmp	r3, #1
 8004018:	d105      	bne.n	8004026 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800401a:	4b47      	ldr	r3, [pc, #284]	; (8004138 <HAL_RCC_OscConfig+0x770>)
 800401c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800401e:	4a46      	ldr	r2, [pc, #280]	; (8004138 <HAL_RCC_OscConfig+0x770>)
 8004020:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004024:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0320 	and.w	r3, r3, #32
 800402e:	2b00      	cmp	r3, #0
 8004030:	d03c      	beq.n	80040ac <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004036:	2b00      	cmp	r3, #0
 8004038:	d01c      	beq.n	8004074 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800403a:	4b3f      	ldr	r3, [pc, #252]	; (8004138 <HAL_RCC_OscConfig+0x770>)
 800403c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004040:	4a3d      	ldr	r2, [pc, #244]	; (8004138 <HAL_RCC_OscConfig+0x770>)
 8004042:	f043 0301 	orr.w	r3, r3, #1
 8004046:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800404a:	f7fe f8eb 	bl	8002224 <HAL_GetTick>
 800404e:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004050:	e008      	b.n	8004064 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004052:	f7fe f8e7 	bl	8002224 <HAL_GetTick>
 8004056:	4602      	mov	r2, r0
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	2b02      	cmp	r3, #2
 800405e:	d901      	bls.n	8004064 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8004060:	2303      	movs	r3, #3
 8004062:	e10a      	b.n	800427a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004064:	4b34      	ldr	r3, [pc, #208]	; (8004138 <HAL_RCC_OscConfig+0x770>)
 8004066:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800406a:	f003 0302 	and.w	r3, r3, #2
 800406e:	2b00      	cmp	r3, #0
 8004070:	d0ef      	beq.n	8004052 <HAL_RCC_OscConfig+0x68a>
 8004072:	e01b      	b.n	80040ac <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004074:	4b30      	ldr	r3, [pc, #192]	; (8004138 <HAL_RCC_OscConfig+0x770>)
 8004076:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800407a:	4a2f      	ldr	r2, [pc, #188]	; (8004138 <HAL_RCC_OscConfig+0x770>)
 800407c:	f023 0301 	bic.w	r3, r3, #1
 8004080:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004084:	f7fe f8ce 	bl	8002224 <HAL_GetTick>
 8004088:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800408a:	e008      	b.n	800409e <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800408c:	f7fe f8ca 	bl	8002224 <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	2b02      	cmp	r3, #2
 8004098:	d901      	bls.n	800409e <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e0ed      	b.n	800427a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800409e:	4b26      	ldr	r3, [pc, #152]	; (8004138 <HAL_RCC_OscConfig+0x770>)
 80040a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040a4:	f003 0302 	and.w	r3, r3, #2
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d1ef      	bne.n	800408c <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	f000 80e1 	beq.w	8004278 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	f040 80b5 	bne.w	800422a <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80040c0:	4b1d      	ldr	r3, [pc, #116]	; (8004138 <HAL_RCC_OscConfig+0x770>)
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	f003 0203 	and.w	r2, r3, #3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d124      	bne.n	800411e <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040de:	3b01      	subs	r3, #1
 80040e0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d11b      	bne.n	800411e <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d113      	bne.n	800411e <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004100:	085b      	lsrs	r3, r3, #1
 8004102:	3b01      	subs	r3, #1
 8004104:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004106:	429a      	cmp	r2, r3
 8004108:	d109      	bne.n	800411e <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004114:	085b      	lsrs	r3, r3, #1
 8004116:	3b01      	subs	r3, #1
 8004118:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800411a:	429a      	cmp	r2, r3
 800411c:	d05f      	beq.n	80041de <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800411e:	6a3b      	ldr	r3, [r7, #32]
 8004120:	2b0c      	cmp	r3, #12
 8004122:	d05a      	beq.n	80041da <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004124:	4b04      	ldr	r3, [pc, #16]	; (8004138 <HAL_RCC_OscConfig+0x770>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a03      	ldr	r2, [pc, #12]	; (8004138 <HAL_RCC_OscConfig+0x770>)
 800412a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800412e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004130:	f7fe f878 	bl	8002224 <HAL_GetTick>
 8004134:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004136:	e00c      	b.n	8004152 <HAL_RCC_OscConfig+0x78a>
 8004138:	40021000 	.word	0x40021000
 800413c:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004140:	f7fe f870 	bl	8002224 <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	2b02      	cmp	r3, #2
 800414c:	d901      	bls.n	8004152 <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e093      	b.n	800427a <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004152:	4b4c      	ldr	r3, [pc, #304]	; (8004284 <HAL_RCC_OscConfig+0x8bc>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d1f0      	bne.n	8004140 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800415e:	4b49      	ldr	r3, [pc, #292]	; (8004284 <HAL_RCC_OscConfig+0x8bc>)
 8004160:	68da      	ldr	r2, [r3, #12]
 8004162:	4b49      	ldr	r3, [pc, #292]	; (8004288 <HAL_RCC_OscConfig+0x8c0>)
 8004164:	4013      	ands	r3, r2
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800416e:	3a01      	subs	r2, #1
 8004170:	0112      	lsls	r2, r2, #4
 8004172:	4311      	orrs	r1, r2
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004178:	0212      	lsls	r2, r2, #8
 800417a:	4311      	orrs	r1, r2
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004180:	0852      	lsrs	r2, r2, #1
 8004182:	3a01      	subs	r2, #1
 8004184:	0552      	lsls	r2, r2, #21
 8004186:	4311      	orrs	r1, r2
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800418c:	0852      	lsrs	r2, r2, #1
 800418e:	3a01      	subs	r2, #1
 8004190:	0652      	lsls	r2, r2, #25
 8004192:	430a      	orrs	r2, r1
 8004194:	493b      	ldr	r1, [pc, #236]	; (8004284 <HAL_RCC_OscConfig+0x8bc>)
 8004196:	4313      	orrs	r3, r2
 8004198:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800419a:	4b3a      	ldr	r3, [pc, #232]	; (8004284 <HAL_RCC_OscConfig+0x8bc>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a39      	ldr	r2, [pc, #228]	; (8004284 <HAL_RCC_OscConfig+0x8bc>)
 80041a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041a4:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80041a6:	4b37      	ldr	r3, [pc, #220]	; (8004284 <HAL_RCC_OscConfig+0x8bc>)
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	4a36      	ldr	r2, [pc, #216]	; (8004284 <HAL_RCC_OscConfig+0x8bc>)
 80041ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041b0:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80041b2:	f7fe f837 	bl	8002224 <HAL_GetTick>
 80041b6:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041b8:	e008      	b.n	80041cc <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041ba:	f7fe f833 	bl	8002224 <HAL_GetTick>
 80041be:	4602      	mov	r2, r0
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	2b02      	cmp	r3, #2
 80041c6:	d901      	bls.n	80041cc <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 80041c8:	2303      	movs	r3, #3
 80041ca:	e056      	b.n	800427a <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041cc:	4b2d      	ldr	r3, [pc, #180]	; (8004284 <HAL_RCC_OscConfig+0x8bc>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d0f0      	beq.n	80041ba <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80041d8:	e04e      	b.n	8004278 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e04d      	b.n	800427a <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041de:	4b29      	ldr	r3, [pc, #164]	; (8004284 <HAL_RCC_OscConfig+0x8bc>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d146      	bne.n	8004278 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80041ea:	4b26      	ldr	r3, [pc, #152]	; (8004284 <HAL_RCC_OscConfig+0x8bc>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a25      	ldr	r2, [pc, #148]	; (8004284 <HAL_RCC_OscConfig+0x8bc>)
 80041f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041f4:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80041f6:	4b23      	ldr	r3, [pc, #140]	; (8004284 <HAL_RCC_OscConfig+0x8bc>)
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	4a22      	ldr	r2, [pc, #136]	; (8004284 <HAL_RCC_OscConfig+0x8bc>)
 80041fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004200:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004202:	f7fe f80f 	bl	8002224 <HAL_GetTick>
 8004206:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004208:	e008      	b.n	800421c <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800420a:	f7fe f80b 	bl	8002224 <HAL_GetTick>
 800420e:	4602      	mov	r2, r0
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	2b02      	cmp	r3, #2
 8004216:	d901      	bls.n	800421c <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8004218:	2303      	movs	r3, #3
 800421a:	e02e      	b.n	800427a <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800421c:	4b19      	ldr	r3, [pc, #100]	; (8004284 <HAL_RCC_OscConfig+0x8bc>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d0f0      	beq.n	800420a <HAL_RCC_OscConfig+0x842>
 8004228:	e026      	b.n	8004278 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800422a:	6a3b      	ldr	r3, [r7, #32]
 800422c:	2b0c      	cmp	r3, #12
 800422e:	d021      	beq.n	8004274 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004230:	4b14      	ldr	r3, [pc, #80]	; (8004284 <HAL_RCC_OscConfig+0x8bc>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a13      	ldr	r2, [pc, #76]	; (8004284 <HAL_RCC_OscConfig+0x8bc>)
 8004236:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800423a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800423c:	f7fd fff2 	bl	8002224 <HAL_GetTick>
 8004240:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004242:	e008      	b.n	8004256 <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004244:	f7fd ffee 	bl	8002224 <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	69bb      	ldr	r3, [r7, #24]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	2b02      	cmp	r3, #2
 8004250:	d901      	bls.n	8004256 <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e011      	b.n	800427a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004256:	4b0b      	ldr	r3, [pc, #44]	; (8004284 <HAL_RCC_OscConfig+0x8bc>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d1f0      	bne.n	8004244 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8004262:	4b08      	ldr	r3, [pc, #32]	; (8004284 <HAL_RCC_OscConfig+0x8bc>)
 8004264:	68db      	ldr	r3, [r3, #12]
 8004266:	4a07      	ldr	r2, [pc, #28]	; (8004284 <HAL_RCC_OscConfig+0x8bc>)
 8004268:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800426c:	f023 0303 	bic.w	r3, r3, #3
 8004270:	60d3      	str	r3, [r2, #12]
 8004272:	e001      	b.n	8004278 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e000      	b.n	800427a <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8004278:	2300      	movs	r3, #0
}
 800427a:	4618      	mov	r0, r3
 800427c:	3728      	adds	r7, #40	; 0x28
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	40021000 	.word	0x40021000
 8004288:	f99f808c 	.word	0xf99f808c

0800428c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d101      	bne.n	80042a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e0e7      	b.n	8004470 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042a0:	4b75      	ldr	r3, [pc, #468]	; (8004478 <HAL_RCC_ClockConfig+0x1ec>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0307 	and.w	r3, r3, #7
 80042a8:	683a      	ldr	r2, [r7, #0]
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d910      	bls.n	80042d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ae:	4b72      	ldr	r3, [pc, #456]	; (8004478 <HAL_RCC_ClockConfig+0x1ec>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f023 0207 	bic.w	r2, r3, #7
 80042b6:	4970      	ldr	r1, [pc, #448]	; (8004478 <HAL_RCC_ClockConfig+0x1ec>)
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042be:	4b6e      	ldr	r3, [pc, #440]	; (8004478 <HAL_RCC_ClockConfig+0x1ec>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0307 	and.w	r3, r3, #7
 80042c6:	683a      	ldr	r2, [r7, #0]
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d001      	beq.n	80042d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e0cf      	b.n	8004470 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 0302 	and.w	r3, r3, #2
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d010      	beq.n	80042fe <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	689a      	ldr	r2, [r3, #8]
 80042e0:	4b66      	ldr	r3, [pc, #408]	; (800447c <HAL_RCC_ClockConfig+0x1f0>)
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d908      	bls.n	80042fe <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042ec:	4b63      	ldr	r3, [pc, #396]	; (800447c <HAL_RCC_ClockConfig+0x1f0>)
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	4960      	ldr	r1, [pc, #384]	; (800447c <HAL_RCC_ClockConfig+0x1f0>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0301 	and.w	r3, r3, #1
 8004306:	2b00      	cmp	r3, #0
 8004308:	d04c      	beq.n	80043a4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	2b03      	cmp	r3, #3
 8004310:	d107      	bne.n	8004322 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004312:	4b5a      	ldr	r3, [pc, #360]	; (800447c <HAL_RCC_ClockConfig+0x1f0>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d121      	bne.n	8004362 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e0a6      	b.n	8004470 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	2b02      	cmp	r3, #2
 8004328:	d107      	bne.n	800433a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800432a:	4b54      	ldr	r3, [pc, #336]	; (800447c <HAL_RCC_ClockConfig+0x1f0>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d115      	bne.n	8004362 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e09a      	b.n	8004470 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d107      	bne.n	8004352 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004342:	4b4e      	ldr	r3, [pc, #312]	; (800447c <HAL_RCC_ClockConfig+0x1f0>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0302 	and.w	r3, r3, #2
 800434a:	2b00      	cmp	r3, #0
 800434c:	d109      	bne.n	8004362 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e08e      	b.n	8004470 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004352:	4b4a      	ldr	r3, [pc, #296]	; (800447c <HAL_RCC_ClockConfig+0x1f0>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800435a:	2b00      	cmp	r3, #0
 800435c:	d101      	bne.n	8004362 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e086      	b.n	8004470 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004362:	4b46      	ldr	r3, [pc, #280]	; (800447c <HAL_RCC_ClockConfig+0x1f0>)
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f023 0203 	bic.w	r2, r3, #3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	4943      	ldr	r1, [pc, #268]	; (800447c <HAL_RCC_ClockConfig+0x1f0>)
 8004370:	4313      	orrs	r3, r2
 8004372:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004374:	f7fd ff56 	bl	8002224 <HAL_GetTick>
 8004378:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800437a:	e00a      	b.n	8004392 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800437c:	f7fd ff52 	bl	8002224 <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	f241 3288 	movw	r2, #5000	; 0x1388
 800438a:	4293      	cmp	r3, r2
 800438c:	d901      	bls.n	8004392 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e06e      	b.n	8004470 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004392:	4b3a      	ldr	r3, [pc, #232]	; (800447c <HAL_RCC_ClockConfig+0x1f0>)
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f003 020c 	and.w	r2, r3, #12
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d1eb      	bne.n	800437c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0302 	and.w	r3, r3, #2
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d010      	beq.n	80043d2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	689a      	ldr	r2, [r3, #8]
 80043b4:	4b31      	ldr	r3, [pc, #196]	; (800447c <HAL_RCC_ClockConfig+0x1f0>)
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043bc:	429a      	cmp	r2, r3
 80043be:	d208      	bcs.n	80043d2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043c0:	4b2e      	ldr	r3, [pc, #184]	; (800447c <HAL_RCC_ClockConfig+0x1f0>)
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	492b      	ldr	r1, [pc, #172]	; (800447c <HAL_RCC_ClockConfig+0x1f0>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043d2:	4b29      	ldr	r3, [pc, #164]	; (8004478 <HAL_RCC_ClockConfig+0x1ec>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0307 	and.w	r3, r3, #7
 80043da:	683a      	ldr	r2, [r7, #0]
 80043dc:	429a      	cmp	r2, r3
 80043de:	d210      	bcs.n	8004402 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043e0:	4b25      	ldr	r3, [pc, #148]	; (8004478 <HAL_RCC_ClockConfig+0x1ec>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f023 0207 	bic.w	r2, r3, #7
 80043e8:	4923      	ldr	r1, [pc, #140]	; (8004478 <HAL_RCC_ClockConfig+0x1ec>)
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043f0:	4b21      	ldr	r3, [pc, #132]	; (8004478 <HAL_RCC_ClockConfig+0x1ec>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0307 	and.w	r3, r3, #7
 80043f8:	683a      	ldr	r2, [r7, #0]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d001      	beq.n	8004402 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e036      	b.n	8004470 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0304 	and.w	r3, r3, #4
 800440a:	2b00      	cmp	r3, #0
 800440c:	d008      	beq.n	8004420 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800440e:	4b1b      	ldr	r3, [pc, #108]	; (800447c <HAL_RCC_ClockConfig+0x1f0>)
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	4918      	ldr	r1, [pc, #96]	; (800447c <HAL_RCC_ClockConfig+0x1f0>)
 800441c:	4313      	orrs	r3, r2
 800441e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0308 	and.w	r3, r3, #8
 8004428:	2b00      	cmp	r3, #0
 800442a:	d009      	beq.n	8004440 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800442c:	4b13      	ldr	r3, [pc, #76]	; (800447c <HAL_RCC_ClockConfig+0x1f0>)
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	691b      	ldr	r3, [r3, #16]
 8004438:	00db      	lsls	r3, r3, #3
 800443a:	4910      	ldr	r1, [pc, #64]	; (800447c <HAL_RCC_ClockConfig+0x1f0>)
 800443c:	4313      	orrs	r3, r2
 800443e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004440:	f000 f824 	bl	800448c <HAL_RCC_GetSysClockFreq>
 8004444:	4602      	mov	r2, r0
 8004446:	4b0d      	ldr	r3, [pc, #52]	; (800447c <HAL_RCC_ClockConfig+0x1f0>)
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	091b      	lsrs	r3, r3, #4
 800444c:	f003 030f 	and.w	r3, r3, #15
 8004450:	490b      	ldr	r1, [pc, #44]	; (8004480 <HAL_RCC_ClockConfig+0x1f4>)
 8004452:	5ccb      	ldrb	r3, [r1, r3]
 8004454:	f003 031f 	and.w	r3, r3, #31
 8004458:	fa22 f303 	lsr.w	r3, r2, r3
 800445c:	4a09      	ldr	r2, [pc, #36]	; (8004484 <HAL_RCC_ClockConfig+0x1f8>)
 800445e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004460:	4b09      	ldr	r3, [pc, #36]	; (8004488 <HAL_RCC_ClockConfig+0x1fc>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4618      	mov	r0, r3
 8004466:	f7fd fced 	bl	8001e44 <HAL_InitTick>
 800446a:	4603      	mov	r3, r0
 800446c:	72fb      	strb	r3, [r7, #11]

  return status;
 800446e:	7afb      	ldrb	r3, [r7, #11]
}
 8004470:	4618      	mov	r0, r3
 8004472:	3710      	adds	r7, #16
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}
 8004478:	40022000 	.word	0x40022000
 800447c:	40021000 	.word	0x40021000
 8004480:	0800d158 	.word	0x0800d158
 8004484:	20000000 	.word	0x20000000
 8004488:	20000004 	.word	0x20000004

0800448c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800448c:	b480      	push	{r7}
 800448e:	b089      	sub	sp, #36	; 0x24
 8004490:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004492:	2300      	movs	r3, #0
 8004494:	61fb      	str	r3, [r7, #28]
 8004496:	2300      	movs	r3, #0
 8004498:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800449a:	4b3e      	ldr	r3, [pc, #248]	; (8004594 <HAL_RCC_GetSysClockFreq+0x108>)
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	f003 030c 	and.w	r3, r3, #12
 80044a2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044a4:	4b3b      	ldr	r3, [pc, #236]	; (8004594 <HAL_RCC_GetSysClockFreq+0x108>)
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	f003 0303 	and.w	r3, r3, #3
 80044ac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d005      	beq.n	80044c0 <HAL_RCC_GetSysClockFreq+0x34>
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	2b0c      	cmp	r3, #12
 80044b8:	d121      	bne.n	80044fe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d11e      	bne.n	80044fe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80044c0:	4b34      	ldr	r3, [pc, #208]	; (8004594 <HAL_RCC_GetSysClockFreq+0x108>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0308 	and.w	r3, r3, #8
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d107      	bne.n	80044dc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80044cc:	4b31      	ldr	r3, [pc, #196]	; (8004594 <HAL_RCC_GetSysClockFreq+0x108>)
 80044ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044d2:	0a1b      	lsrs	r3, r3, #8
 80044d4:	f003 030f 	and.w	r3, r3, #15
 80044d8:	61fb      	str	r3, [r7, #28]
 80044da:	e005      	b.n	80044e8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80044dc:	4b2d      	ldr	r3, [pc, #180]	; (8004594 <HAL_RCC_GetSysClockFreq+0x108>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	091b      	lsrs	r3, r3, #4
 80044e2:	f003 030f 	and.w	r3, r3, #15
 80044e6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80044e8:	4a2b      	ldr	r2, [pc, #172]	; (8004598 <HAL_RCC_GetSysClockFreq+0x10c>)
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044f0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d10d      	bne.n	8004514 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80044fc:	e00a      	b.n	8004514 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	2b04      	cmp	r3, #4
 8004502:	d102      	bne.n	800450a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004504:	4b25      	ldr	r3, [pc, #148]	; (800459c <HAL_RCC_GetSysClockFreq+0x110>)
 8004506:	61bb      	str	r3, [r7, #24]
 8004508:	e004      	b.n	8004514 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	2b08      	cmp	r3, #8
 800450e:	d101      	bne.n	8004514 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004510:	4b23      	ldr	r3, [pc, #140]	; (80045a0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004512:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	2b0c      	cmp	r3, #12
 8004518:	d134      	bne.n	8004584 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800451a:	4b1e      	ldr	r3, [pc, #120]	; (8004594 <HAL_RCC_GetSysClockFreq+0x108>)
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	f003 0303 	and.w	r3, r3, #3
 8004522:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	2b02      	cmp	r3, #2
 8004528:	d003      	beq.n	8004532 <HAL_RCC_GetSysClockFreq+0xa6>
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	2b03      	cmp	r3, #3
 800452e:	d003      	beq.n	8004538 <HAL_RCC_GetSysClockFreq+0xac>
 8004530:	e005      	b.n	800453e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004532:	4b1a      	ldr	r3, [pc, #104]	; (800459c <HAL_RCC_GetSysClockFreq+0x110>)
 8004534:	617b      	str	r3, [r7, #20]
      break;
 8004536:	e005      	b.n	8004544 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004538:	4b19      	ldr	r3, [pc, #100]	; (80045a0 <HAL_RCC_GetSysClockFreq+0x114>)
 800453a:	617b      	str	r3, [r7, #20]
      break;
 800453c:	e002      	b.n	8004544 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	617b      	str	r3, [r7, #20]
      break;
 8004542:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004544:	4b13      	ldr	r3, [pc, #76]	; (8004594 <HAL_RCC_GetSysClockFreq+0x108>)
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	091b      	lsrs	r3, r3, #4
 800454a:	f003 0307 	and.w	r3, r3, #7
 800454e:	3301      	adds	r3, #1
 8004550:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004552:	4b10      	ldr	r3, [pc, #64]	; (8004594 <HAL_RCC_GetSysClockFreq+0x108>)
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	0a1b      	lsrs	r3, r3, #8
 8004558:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800455c:	697a      	ldr	r2, [r7, #20]
 800455e:	fb03 f202 	mul.w	r2, r3, r2
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	fbb2 f3f3 	udiv	r3, r2, r3
 8004568:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800456a:	4b0a      	ldr	r3, [pc, #40]	; (8004594 <HAL_RCC_GetSysClockFreq+0x108>)
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	0e5b      	lsrs	r3, r3, #25
 8004570:	f003 0303 	and.w	r3, r3, #3
 8004574:	3301      	adds	r3, #1
 8004576:	005b      	lsls	r3, r3, #1
 8004578:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800457a:	697a      	ldr	r2, [r7, #20]
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004582:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004584:	69bb      	ldr	r3, [r7, #24]
}
 8004586:	4618      	mov	r0, r3
 8004588:	3724      	adds	r7, #36	; 0x24
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop
 8004594:	40021000 	.word	0x40021000
 8004598:	0800d170 	.word	0x0800d170
 800459c:	00f42400 	.word	0x00f42400
 80045a0:	007a1200 	.word	0x007a1200

080045a4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045a4:	b480      	push	{r7}
 80045a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045a8:	4b03      	ldr	r3, [pc, #12]	; (80045b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80045aa:	681b      	ldr	r3, [r3, #0]
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	20000000 	.word	0x20000000

080045bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80045c0:	f7ff fff0 	bl	80045a4 <HAL_RCC_GetHCLKFreq>
 80045c4:	4602      	mov	r2, r0
 80045c6:	4b06      	ldr	r3, [pc, #24]	; (80045e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	0a1b      	lsrs	r3, r3, #8
 80045cc:	f003 0307 	and.w	r3, r3, #7
 80045d0:	4904      	ldr	r1, [pc, #16]	; (80045e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80045d2:	5ccb      	ldrb	r3, [r1, r3]
 80045d4:	f003 031f 	and.w	r3, r3, #31
 80045d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045dc:	4618      	mov	r0, r3
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	40021000 	.word	0x40021000
 80045e4:	0800d168 	.word	0x0800d168

080045e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80045ec:	f7ff ffda 	bl	80045a4 <HAL_RCC_GetHCLKFreq>
 80045f0:	4602      	mov	r2, r0
 80045f2:	4b06      	ldr	r3, [pc, #24]	; (800460c <HAL_RCC_GetPCLK2Freq+0x24>)
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	0adb      	lsrs	r3, r3, #11
 80045f8:	f003 0307 	and.w	r3, r3, #7
 80045fc:	4904      	ldr	r1, [pc, #16]	; (8004610 <HAL_RCC_GetPCLK2Freq+0x28>)
 80045fe:	5ccb      	ldrb	r3, [r1, r3]
 8004600:	f003 031f 	and.w	r3, r3, #31
 8004604:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004608:	4618      	mov	r0, r3
 800460a:	bd80      	pop	{r7, pc}
 800460c:	40021000 	.word	0x40021000
 8004610:	0800d168 	.word	0x0800d168

08004614 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	220f      	movs	r2, #15
 8004622:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004624:	4b12      	ldr	r3, [pc, #72]	; (8004670 <HAL_RCC_GetClockConfig+0x5c>)
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	f003 0203 	and.w	r2, r3, #3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004630:	4b0f      	ldr	r3, [pc, #60]	; (8004670 <HAL_RCC_GetClockConfig+0x5c>)
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800463c:	4b0c      	ldr	r3, [pc, #48]	; (8004670 <HAL_RCC_GetClockConfig+0x5c>)
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004648:	4b09      	ldr	r3, [pc, #36]	; (8004670 <HAL_RCC_GetClockConfig+0x5c>)
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	08db      	lsrs	r3, r3, #3
 800464e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004656:	4b07      	ldr	r3, [pc, #28]	; (8004674 <HAL_RCC_GetClockConfig+0x60>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0207 	and.w	r2, r3, #7
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	601a      	str	r2, [r3, #0]
}
 8004662:	bf00      	nop
 8004664:	370c      	adds	r7, #12
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop
 8004670:	40021000 	.word	0x40021000
 8004674:	40022000 	.word	0x40022000

08004678 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b086      	sub	sp, #24
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004680:	2300      	movs	r3, #0
 8004682:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004684:	4b2a      	ldr	r3, [pc, #168]	; (8004730 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800468c:	2b00      	cmp	r3, #0
 800468e:	d003      	beq.n	8004698 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004690:	f7ff f906 	bl	80038a0 <HAL_PWREx_GetVoltageRange>
 8004694:	6178      	str	r0, [r7, #20]
 8004696:	e014      	b.n	80046c2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004698:	4b25      	ldr	r3, [pc, #148]	; (8004730 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800469a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800469c:	4a24      	ldr	r2, [pc, #144]	; (8004730 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800469e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046a2:	6593      	str	r3, [r2, #88]	; 0x58
 80046a4:	4b22      	ldr	r3, [pc, #136]	; (8004730 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046ac:	60fb      	str	r3, [r7, #12]
 80046ae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80046b0:	f7ff f8f6 	bl	80038a0 <HAL_PWREx_GetVoltageRange>
 80046b4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80046b6:	4b1e      	ldr	r3, [pc, #120]	; (8004730 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ba:	4a1d      	ldr	r2, [pc, #116]	; (8004730 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046c0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046c8:	d10b      	bne.n	80046e2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2b80      	cmp	r3, #128	; 0x80
 80046ce:	d919      	bls.n	8004704 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2ba0      	cmp	r3, #160	; 0xa0
 80046d4:	d902      	bls.n	80046dc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80046d6:	2302      	movs	r3, #2
 80046d8:	613b      	str	r3, [r7, #16]
 80046da:	e013      	b.n	8004704 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80046dc:	2301      	movs	r3, #1
 80046de:	613b      	str	r3, [r7, #16]
 80046e0:	e010      	b.n	8004704 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2b80      	cmp	r3, #128	; 0x80
 80046e6:	d902      	bls.n	80046ee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80046e8:	2303      	movs	r3, #3
 80046ea:	613b      	str	r3, [r7, #16]
 80046ec:	e00a      	b.n	8004704 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2b80      	cmp	r3, #128	; 0x80
 80046f2:	d102      	bne.n	80046fa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80046f4:	2302      	movs	r3, #2
 80046f6:	613b      	str	r3, [r7, #16]
 80046f8:	e004      	b.n	8004704 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2b70      	cmp	r3, #112	; 0x70
 80046fe:	d101      	bne.n	8004704 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004700:	2301      	movs	r3, #1
 8004702:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004704:	4b0b      	ldr	r3, [pc, #44]	; (8004734 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f023 0207 	bic.w	r2, r3, #7
 800470c:	4909      	ldr	r1, [pc, #36]	; (8004734 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	4313      	orrs	r3, r2
 8004712:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004714:	4b07      	ldr	r3, [pc, #28]	; (8004734 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0307 	and.w	r3, r3, #7
 800471c:	693a      	ldr	r2, [r7, #16]
 800471e:	429a      	cmp	r2, r3
 8004720:	d001      	beq.n	8004726 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e000      	b.n	8004728 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004726:	2300      	movs	r3, #0
}
 8004728:	4618      	mov	r0, r3
 800472a:	3718      	adds	r7, #24
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	40021000 	.word	0x40021000
 8004734:	40022000 	.word	0x40022000

08004738 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b086      	sub	sp, #24
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004740:	2300      	movs	r3, #0
 8004742:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004744:	2300      	movs	r3, #0
 8004746:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004750:	2b00      	cmp	r3, #0
 8004752:	f000 809e 	beq.w	8004892 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004756:	2300      	movs	r3, #0
 8004758:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800475a:	4b46      	ldr	r3, [pc, #280]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800475c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800475e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d101      	bne.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004766:	2301      	movs	r3, #1
 8004768:	e000      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x34>
 800476a:	2300      	movs	r3, #0
 800476c:	2b00      	cmp	r3, #0
 800476e:	d00d      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004770:	4b40      	ldr	r3, [pc, #256]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004774:	4a3f      	ldr	r2, [pc, #252]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004776:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800477a:	6593      	str	r3, [r2, #88]	; 0x58
 800477c:	4b3d      	ldr	r3, [pc, #244]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800477e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004780:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004784:	60bb      	str	r3, [r7, #8]
 8004786:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004788:	2301      	movs	r3, #1
 800478a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800478c:	4b3a      	ldr	r3, [pc, #232]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a39      	ldr	r2, [pc, #228]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8004792:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004796:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004798:	f7fd fd44 	bl	8002224 <HAL_GetTick>
 800479c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800479e:	e009      	b.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047a0:	f7fd fd40 	bl	8002224 <HAL_GetTick>
 80047a4:	4602      	mov	r2, r0
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d902      	bls.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	74fb      	strb	r3, [r7, #19]
        break;
 80047b2:	e005      	b.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80047b4:	4b30      	ldr	r3, [pc, #192]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d0ef      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 80047c0:	7cfb      	ldrb	r3, [r7, #19]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d15a      	bne.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80047c6:	4b2b      	ldr	r3, [pc, #172]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80047c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047d0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d01e      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047dc:	697a      	ldr	r2, [r7, #20]
 80047de:	429a      	cmp	r2, r3
 80047e0:	d019      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80047e2:	4b24      	ldr	r3, [pc, #144]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80047e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047ec:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80047ee:	4b21      	ldr	r3, [pc, #132]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80047f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047f4:	4a1f      	ldr	r2, [pc, #124]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80047f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80047fe:	4b1d      	ldr	r3, [pc, #116]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004800:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004804:	4a1b      	ldr	r2, [pc, #108]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004806:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800480a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800480e:	4a19      	ldr	r2, [pc, #100]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	f003 0301 	and.w	r3, r3, #1
 800481c:	2b00      	cmp	r3, #0
 800481e:	d016      	beq.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004820:	f7fd fd00 	bl	8002224 <HAL_GetTick>
 8004824:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004826:	e00b      	b.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004828:	f7fd fcfc 	bl	8002224 <HAL_GetTick>
 800482c:	4602      	mov	r2, r0
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	f241 3288 	movw	r2, #5000	; 0x1388
 8004836:	4293      	cmp	r3, r2
 8004838:	d902      	bls.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	74fb      	strb	r3, [r7, #19]
            break;
 800483e:	e006      	b.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004840:	4b0c      	ldr	r3, [pc, #48]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004846:	f003 0302 	and.w	r3, r3, #2
 800484a:	2b00      	cmp	r3, #0
 800484c:	d0ec      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 800484e:	7cfb      	ldrb	r3, [r7, #19]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d10b      	bne.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004854:	4b07      	ldr	r3, [pc, #28]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800485a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004862:	4904      	ldr	r1, [pc, #16]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004864:	4313      	orrs	r3, r2
 8004866:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800486a:	e009      	b.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800486c:	7cfb      	ldrb	r3, [r7, #19]
 800486e:	74bb      	strb	r3, [r7, #18]
 8004870:	e006      	b.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8004872:	bf00      	nop
 8004874:	40021000 	.word	0x40021000
 8004878:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800487c:	7cfb      	ldrb	r3, [r7, #19]
 800487e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004880:	7c7b      	ldrb	r3, [r7, #17]
 8004882:	2b01      	cmp	r3, #1
 8004884:	d105      	bne.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004886:	4b6e      	ldr	r3, [pc, #440]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800488a:	4a6d      	ldr	r2, [pc, #436]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800488c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004890:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0301 	and.w	r3, r3, #1
 800489a:	2b00      	cmp	r3, #0
 800489c:	d00a      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800489e:	4b68      	ldr	r3, [pc, #416]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80048a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048a4:	f023 0203 	bic.w	r2, r3, #3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	4964      	ldr	r1, [pc, #400]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80048ae:	4313      	orrs	r3, r2
 80048b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0302 	and.w	r3, r3, #2
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d00a      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80048c0:	4b5f      	ldr	r3, [pc, #380]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80048c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048c6:	f023 020c 	bic.w	r2, r3, #12
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	495c      	ldr	r1, [pc, #368]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80048d0:	4313      	orrs	r3, r2
 80048d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 0304 	and.w	r3, r3, #4
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d00a      	beq.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80048e2:	4b57      	ldr	r3, [pc, #348]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80048e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048e8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	4953      	ldr	r1, [pc, #332]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0320 	and.w	r3, r3, #32
 8004900:	2b00      	cmp	r3, #0
 8004902:	d00a      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004904:	4b4e      	ldr	r3, [pc, #312]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800490a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	691b      	ldr	r3, [r3, #16]
 8004912:	494b      	ldr	r1, [pc, #300]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004914:	4313      	orrs	r3, r2
 8004916:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004922:	2b00      	cmp	r3, #0
 8004924:	d00a      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004926:	4b46      	ldr	r3, [pc, #280]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004928:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800492c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a1b      	ldr	r3, [r3, #32]
 8004934:	4942      	ldr	r1, [pc, #264]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004936:	4313      	orrs	r3, r2
 8004938:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004944:	2b00      	cmp	r3, #0
 8004946:	d00a      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004948:	4b3d      	ldr	r3, [pc, #244]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800494a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800494e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004956:	493a      	ldr	r1, [pc, #232]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004958:	4313      	orrs	r3, r2
 800495a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004966:	2b00      	cmp	r3, #0
 8004968:	d00a      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800496a:	4b35      	ldr	r3, [pc, #212]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800496c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004970:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	695b      	ldr	r3, [r3, #20]
 8004978:	4931      	ldr	r1, [pc, #196]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800497a:	4313      	orrs	r3, r2
 800497c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004988:	2b00      	cmp	r3, #0
 800498a:	d00a      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800498c:	4b2c      	ldr	r3, [pc, #176]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800498e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004992:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	699b      	ldr	r3, [r3, #24]
 800499a:	4929      	ldr	r1, [pc, #164]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800499c:	4313      	orrs	r3, r2
 800499e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d00a      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80049ae:	4b24      	ldr	r3, [pc, #144]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80049b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	69db      	ldr	r3, [r3, #28]
 80049bc:	4920      	ldr	r1, [pc, #128]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80049be:	4313      	orrs	r3, r2
 80049c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d015      	beq.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80049d0:	4b1b      	ldr	r3, [pc, #108]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80049d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049de:	4918      	ldr	r1, [pc, #96]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80049e0:	4313      	orrs	r3, r2
 80049e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049ee:	d105      	bne.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049f0:	4b13      	ldr	r3, [pc, #76]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	4a12      	ldr	r2, [pc, #72]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80049f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049fa:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d015      	beq.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a08:	4b0d      	ldr	r3, [pc, #52]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a0e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a16:	490a      	ldr	r1, [pc, #40]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a26:	d105      	bne.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a28:	4b05      	ldr	r3, [pc, #20]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	4a04      	ldr	r2, [pc, #16]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004a2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a32:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004a34:	7cbb      	ldrb	r3, [r7, #18]
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3718      	adds	r7, #24
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	40021000 	.word	0x40021000

08004a44 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004a44:	b480      	push	{r7}
 8004a46:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004a48:	4b05      	ldr	r3, [pc, #20]	; (8004a60 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a04      	ldr	r2, [pc, #16]	; (8004a60 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004a4e:	f043 0304 	orr.w	r3, r3, #4
 8004a52:	6013      	str	r3, [r2, #0]
}
 8004a54:	bf00      	nop
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr
 8004a5e:	bf00      	nop
 8004a60:	40021000 	.word	0x40021000

08004a64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b082      	sub	sp, #8
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d101      	bne.n	8004a76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e049      	b.n	8004b0a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d106      	bne.n	8004a90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 f841 	bl	8004b12 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2202      	movs	r2, #2
 8004a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	3304      	adds	r3, #4
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	4610      	mov	r0, r2
 8004aa4:	f000 f9be 	bl	8004e24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b08:	2300      	movs	r3, #0
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3708      	adds	r7, #8
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}

08004b12 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004b12:	b480      	push	{r7}
 8004b14:	b083      	sub	sp, #12
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004b1a:	bf00      	nop
 8004b1c:	370c      	adds	r7, #12
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr
	...

08004b28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b085      	sub	sp, #20
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d001      	beq.n	8004b40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e03b      	b.n	8004bb8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2202      	movs	r2, #2
 8004b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	68da      	ldr	r2, [r3, #12]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f042 0201 	orr.w	r2, r2, #1
 8004b56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a19      	ldr	r2, [pc, #100]	; (8004bc4 <HAL_TIM_Base_Start_IT+0x9c>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d009      	beq.n	8004b76 <HAL_TIM_Base_Start_IT+0x4e>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b6a:	d004      	beq.n	8004b76 <HAL_TIM_Base_Start_IT+0x4e>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a15      	ldr	r2, [pc, #84]	; (8004bc8 <HAL_TIM_Base_Start_IT+0xa0>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d115      	bne.n	8004ba2 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	689a      	ldr	r2, [r3, #8]
 8004b7c:	4b13      	ldr	r3, [pc, #76]	; (8004bcc <HAL_TIM_Base_Start_IT+0xa4>)
 8004b7e:	4013      	ands	r3, r2
 8004b80:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2b06      	cmp	r3, #6
 8004b86:	d015      	beq.n	8004bb4 <HAL_TIM_Base_Start_IT+0x8c>
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b8e:	d011      	beq.n	8004bb4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f042 0201 	orr.w	r2, r2, #1
 8004b9e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ba0:	e008      	b.n	8004bb4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f042 0201 	orr.w	r2, r2, #1
 8004bb0:	601a      	str	r2, [r3, #0]
 8004bb2:	e000      	b.n	8004bb6 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bb4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004bb6:	2300      	movs	r3, #0
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3714      	adds	r7, #20
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr
 8004bc4:	40012c00 	.word	0x40012c00
 8004bc8:	40014000 	.word	0x40014000
 8004bcc:	00010007 	.word	0x00010007

08004bd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	f003 0302 	and.w	r3, r3, #2
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d020      	beq.n	8004c34 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f003 0302 	and.w	r3, r3, #2
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d01b      	beq.n	8004c34 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f06f 0202 	mvn.w	r2, #2
 8004c04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2201      	movs	r2, #1
 8004c0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	699b      	ldr	r3, [r3, #24]
 8004c12:	f003 0303 	and.w	r3, r3, #3
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d003      	beq.n	8004c22 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f000 f8e4 	bl	8004de8 <HAL_TIM_IC_CaptureCallback>
 8004c20:	e005      	b.n	8004c2e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 f8d6 	bl	8004dd4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f000 f8e7 	bl	8004dfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	f003 0304 	and.w	r3, r3, #4
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d020      	beq.n	8004c80 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f003 0304 	and.w	r3, r3, #4
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d01b      	beq.n	8004c80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f06f 0204 	mvn.w	r2, #4
 8004c50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2202      	movs	r2, #2
 8004c56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	699b      	ldr	r3, [r3, #24]
 8004c5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d003      	beq.n	8004c6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 f8be 	bl	8004de8 <HAL_TIM_IC_CaptureCallback>
 8004c6c:	e005      	b.n	8004c7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 f8b0 	bl	8004dd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f000 f8c1 	bl	8004dfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	f003 0308 	and.w	r3, r3, #8
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d020      	beq.n	8004ccc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f003 0308 	and.w	r3, r3, #8
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d01b      	beq.n	8004ccc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f06f 0208 	mvn.w	r2, #8
 8004c9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2204      	movs	r2, #4
 8004ca2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	69db      	ldr	r3, [r3, #28]
 8004caa:	f003 0303 	and.w	r3, r3, #3
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d003      	beq.n	8004cba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 f898 	bl	8004de8 <HAL_TIM_IC_CaptureCallback>
 8004cb8:	e005      	b.n	8004cc6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 f88a 	bl	8004dd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f000 f89b 	bl	8004dfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	f003 0310 	and.w	r3, r3, #16
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d020      	beq.n	8004d18 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	f003 0310 	and.w	r3, r3, #16
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d01b      	beq.n	8004d18 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f06f 0210 	mvn.w	r2, #16
 8004ce8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2208      	movs	r2, #8
 8004cee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	69db      	ldr	r3, [r3, #28]
 8004cf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d003      	beq.n	8004d06 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f000 f872 	bl	8004de8 <HAL_TIM_IC_CaptureCallback>
 8004d04:	e005      	b.n	8004d12 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 f864 	bl	8004dd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f000 f875 	bl	8004dfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	f003 0301 	and.w	r3, r3, #1
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d00c      	beq.n	8004d3c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f003 0301 	and.w	r3, r3, #1
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d007      	beq.n	8004d3c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f06f 0201 	mvn.w	r2, #1
 8004d34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f7fc fed6 	bl	8001ae8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d00c      	beq.n	8004d60 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d007      	beq.n	8004d60 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 f8d0 	bl	8004f00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d00c      	beq.n	8004d84 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d007      	beq.n	8004d84 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004d7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 f8c8 	bl	8004f14 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00c      	beq.n	8004da8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d007      	beq.n	8004da8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004da0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f000 f834 	bl	8004e10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	f003 0320 	and.w	r3, r3, #32
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d00c      	beq.n	8004dcc <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f003 0320 	and.w	r3, r3, #32
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d007      	beq.n	8004dcc <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f06f 0220 	mvn.w	r2, #32
 8004dc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 f890 	bl	8004eec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004dcc:	bf00      	nop
 8004dce:	3710      	adds	r7, #16
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ddc:	bf00      	nop
 8004dde:	370c      	adds	r7, #12
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b083      	sub	sp, #12
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004df0:	bf00      	nop
 8004df2:	370c      	adds	r7, #12
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr

08004dfc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b083      	sub	sp, #12
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e04:	bf00      	nop
 8004e06:	370c      	adds	r7, #12
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr

08004e10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b083      	sub	sp, #12
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e18:	bf00      	nop
 8004e1a:	370c      	adds	r7, #12
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr

08004e24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b085      	sub	sp, #20
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	4a2a      	ldr	r2, [pc, #168]	; (8004ee0 <TIM_Base_SetConfig+0xbc>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d003      	beq.n	8004e44 <TIM_Base_SetConfig+0x20>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e42:	d108      	bne.n	8004e56 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	68fa      	ldr	r2, [r7, #12]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a21      	ldr	r2, [pc, #132]	; (8004ee0 <TIM_Base_SetConfig+0xbc>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d00b      	beq.n	8004e76 <TIM_Base_SetConfig+0x52>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e64:	d007      	beq.n	8004e76 <TIM_Base_SetConfig+0x52>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a1e      	ldr	r2, [pc, #120]	; (8004ee4 <TIM_Base_SetConfig+0xc0>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d003      	beq.n	8004e76 <TIM_Base_SetConfig+0x52>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a1d      	ldr	r2, [pc, #116]	; (8004ee8 <TIM_Base_SetConfig+0xc4>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d108      	bne.n	8004e88 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	68fa      	ldr	r2, [r7, #12]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	695b      	ldr	r3, [r3, #20]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	68fa      	ldr	r2, [r7, #12]
 8004e9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	689a      	ldr	r2, [r3, #8]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a0c      	ldr	r2, [pc, #48]	; (8004ee0 <TIM_Base_SetConfig+0xbc>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d007      	beq.n	8004ec4 <TIM_Base_SetConfig+0xa0>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a0b      	ldr	r2, [pc, #44]	; (8004ee4 <TIM_Base_SetConfig+0xc0>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d003      	beq.n	8004ec4 <TIM_Base_SetConfig+0xa0>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	4a0a      	ldr	r2, [pc, #40]	; (8004ee8 <TIM_Base_SetConfig+0xc4>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d103      	bne.n	8004ecc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	691a      	ldr	r2, [r3, #16]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	615a      	str	r2, [r3, #20]
}
 8004ed2:	bf00      	nop
 8004ed4:	3714      	adds	r7, #20
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr
 8004ede:	bf00      	nop
 8004ee0:	40012c00 	.word	0x40012c00
 8004ee4:	40014000 	.word	0x40014000
 8004ee8:	40014400 	.word	0x40014400

08004eec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ef4:	bf00      	nop
 8004ef6:	370c      	adds	r7, #12
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr

08004f00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f08:	bf00      	nop
 8004f0a:	370c      	adds	r7, #12
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004f1c:	bf00      	nop
 8004f1e:	370c      	adds	r7, #12
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr

08004f28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b082      	sub	sp, #8
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d101      	bne.n	8004f3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e040      	b.n	8004fbc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d106      	bne.n	8004f50 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f7fc fe64 	bl	8001c18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2224      	movs	r2, #36	; 0x24
 8004f54:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f022 0201 	bic.w	r2, r2, #1
 8004f64:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d002      	beq.n	8004f74 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f000 ff4a 	bl	8005e08 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f000 fced 	bl	8005954 <UART_SetConfig>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d101      	bne.n	8004f84 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e01b      	b.n	8004fbc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	685a      	ldr	r2, [r3, #4]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	689a      	ldr	r2, [r3, #8]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004fa2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f042 0201 	orr.w	r2, r2, #1
 8004fb2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f000 ffc9 	bl	8005f4c <UART_CheckIdleState>
 8004fba:	4603      	mov	r3, r0
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3708      	adds	r7, #8
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b08a      	sub	sp, #40	; 0x28
 8004fc8:	af02      	add	r7, sp, #8
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	603b      	str	r3, [r7, #0]
 8004fd0:	4613      	mov	r3, r2
 8004fd2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fd8:	2b20      	cmp	r3, #32
 8004fda:	d178      	bne.n	80050ce <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d002      	beq.n	8004fe8 <HAL_UART_Transmit+0x24>
 8004fe2:	88fb      	ldrh	r3, [r7, #6]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d101      	bne.n	8004fec <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e071      	b.n	80050d0 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2221      	movs	r2, #33	; 0x21
 8004ff8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ffa:	f7fd f913 	bl	8002224 <HAL_GetTick>
 8004ffe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	88fa      	ldrh	r2, [r7, #6]
 8005004:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	88fa      	ldrh	r2, [r7, #6]
 800500c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005018:	d108      	bne.n	800502c <HAL_UART_Transmit+0x68>
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d104      	bne.n	800502c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005022:	2300      	movs	r3, #0
 8005024:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	61bb      	str	r3, [r7, #24]
 800502a:	e003      	b.n	8005034 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005030:	2300      	movs	r3, #0
 8005032:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005034:	e030      	b.n	8005098 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	9300      	str	r3, [sp, #0]
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	2200      	movs	r2, #0
 800503e:	2180      	movs	r1, #128	; 0x80
 8005040:	68f8      	ldr	r0, [r7, #12]
 8005042:	f001 f82b 	bl	800609c <UART_WaitOnFlagUntilTimeout>
 8005046:	4603      	mov	r3, r0
 8005048:	2b00      	cmp	r3, #0
 800504a:	d004      	beq.n	8005056 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2220      	movs	r2, #32
 8005050:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005052:	2303      	movs	r3, #3
 8005054:	e03c      	b.n	80050d0 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d10b      	bne.n	8005074 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	881a      	ldrh	r2, [r3, #0]
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005068:	b292      	uxth	r2, r2
 800506a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800506c:	69bb      	ldr	r3, [r7, #24]
 800506e:	3302      	adds	r3, #2
 8005070:	61bb      	str	r3, [r7, #24]
 8005072:	e008      	b.n	8005086 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	781a      	ldrb	r2, [r3, #0]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	b292      	uxth	r2, r2
 800507e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	3301      	adds	r3, #1
 8005084:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800508c:	b29b      	uxth	r3, r3
 800508e:	3b01      	subs	r3, #1
 8005090:	b29a      	uxth	r2, r3
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800509e:	b29b      	uxth	r3, r3
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d1c8      	bne.n	8005036 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	9300      	str	r3, [sp, #0]
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	2200      	movs	r2, #0
 80050ac:	2140      	movs	r1, #64	; 0x40
 80050ae:	68f8      	ldr	r0, [r7, #12]
 80050b0:	f000 fff4 	bl	800609c <UART_WaitOnFlagUntilTimeout>
 80050b4:	4603      	mov	r3, r0
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d004      	beq.n	80050c4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2220      	movs	r2, #32
 80050be:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80050c0:	2303      	movs	r3, #3
 80050c2:	e005      	b.n	80050d0 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2220      	movs	r2, #32
 80050c8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80050ca:	2300      	movs	r3, #0
 80050cc:	e000      	b.n	80050d0 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80050ce:	2302      	movs	r3, #2
  }
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3720      	adds	r7, #32
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b08a      	sub	sp, #40	; 0x28
 80050dc:	af00      	add	r7, sp, #0
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	60b9      	str	r1, [r7, #8]
 80050e2:	4613      	mov	r3, r2
 80050e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050ec:	2b20      	cmp	r3, #32
 80050ee:	d137      	bne.n	8005160 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d002      	beq.n	80050fc <HAL_UART_Receive_IT+0x24>
 80050f6:	88fb      	ldrh	r3, [r7, #6]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d101      	bne.n	8005100 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	e030      	b.n	8005162 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2200      	movs	r2, #0
 8005104:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a18      	ldr	r2, [pc, #96]	; (800516c <HAL_UART_Receive_IT+0x94>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d01f      	beq.n	8005150 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800511a:	2b00      	cmp	r3, #0
 800511c:	d018      	beq.n	8005150 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	e853 3f00 	ldrex	r3, [r3]
 800512a:	613b      	str	r3, [r7, #16]
   return(result);
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005132:	627b      	str	r3, [r7, #36]	; 0x24
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	461a      	mov	r2, r3
 800513a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513c:	623b      	str	r3, [r7, #32]
 800513e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005140:	69f9      	ldr	r1, [r7, #28]
 8005142:	6a3a      	ldr	r2, [r7, #32]
 8005144:	e841 2300 	strex	r3, r2, [r1]
 8005148:	61bb      	str	r3, [r7, #24]
   return(result);
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d1e6      	bne.n	800511e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005150:	88fb      	ldrh	r3, [r7, #6]
 8005152:	461a      	mov	r2, r3
 8005154:	68b9      	ldr	r1, [r7, #8]
 8005156:	68f8      	ldr	r0, [r7, #12]
 8005158:	f001 f808 	bl	800616c <UART_Start_Receive_IT>
 800515c:	4603      	mov	r3, r0
 800515e:	e000      	b.n	8005162 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005160:	2302      	movs	r3, #2
  }
}
 8005162:	4618      	mov	r0, r3
 8005164:	3728      	adds	r7, #40	; 0x28
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
 800516a:	bf00      	nop
 800516c:	40008000 	.word	0x40008000

08005170 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b08a      	sub	sp, #40	; 0x28
 8005174:	af00      	add	r7, sp, #0
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	60b9      	str	r1, [r7, #8]
 800517a:	4613      	mov	r3, r2
 800517c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005184:	2b20      	cmp	r3, #32
 8005186:	d137      	bne.n	80051f8 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d002      	beq.n	8005194 <HAL_UART_Receive_DMA+0x24>
 800518e:	88fb      	ldrh	r3, [r7, #6]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d101      	bne.n	8005198 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e030      	b.n	80051fa <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2200      	movs	r2, #0
 800519c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a18      	ldr	r2, [pc, #96]	; (8005204 <HAL_UART_Receive_DMA+0x94>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d01f      	beq.n	80051e8 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d018      	beq.n	80051e8 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	e853 3f00 	ldrex	r3, [r3]
 80051c2:	613b      	str	r3, [r7, #16]
   return(result);
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80051ca:	627b      	str	r3, [r7, #36]	; 0x24
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	461a      	mov	r2, r3
 80051d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d4:	623b      	str	r3, [r7, #32]
 80051d6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d8:	69f9      	ldr	r1, [r7, #28]
 80051da:	6a3a      	ldr	r2, [r7, #32]
 80051dc:	e841 2300 	strex	r3, r2, [r1]
 80051e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d1e6      	bne.n	80051b6 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80051e8:	88fb      	ldrh	r3, [r7, #6]
 80051ea:	461a      	mov	r2, r3
 80051ec:	68b9      	ldr	r1, [r7, #8]
 80051ee:	68f8      	ldr	r0, [r7, #12]
 80051f0:	f001 f882 	bl	80062f8 <UART_Start_Receive_DMA>
 80051f4:	4603      	mov	r3, r0
 80051f6:	e000      	b.n	80051fa <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80051f8:	2302      	movs	r3, #2
  }
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3728      	adds	r7, #40	; 0x28
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop
 8005204:	40008000 	.word	0x40008000

08005208 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b090      	sub	sp, #64	; 0x40
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005214:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800521c:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005228:	2b80      	cmp	r3, #128	; 0x80
 800522a:	d139      	bne.n	80052a0 <HAL_UART_DMAStop+0x98>
 800522c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800522e:	2b21      	cmp	r3, #33	; 0x21
 8005230:	d136      	bne.n	80052a0 <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	3308      	adds	r3, #8
 8005238:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800523a:	6a3b      	ldr	r3, [r7, #32]
 800523c:	e853 3f00 	ldrex	r3, [r3]
 8005240:	61fb      	str	r3, [r7, #28]
   return(result);
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005248:	637b      	str	r3, [r7, #52]	; 0x34
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	3308      	adds	r3, #8
 8005250:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005252:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005254:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005256:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005258:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800525a:	e841 2300 	strex	r3, r2, [r1]
 800525e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005262:	2b00      	cmp	r3, #0
 8005264:	d1e5      	bne.n	8005232 <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800526a:	2b00      	cmp	r3, #0
 800526c:	d015      	beq.n	800529a <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005272:	4618      	mov	r0, r3
 8005274:	f7fd f9dc 	bl	8002630 <HAL_DMA_Abort>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d00d      	beq.n	800529a <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005282:	4618      	mov	r0, r3
 8005284:	f7fd fb02 	bl	800288c <HAL_DMA_GetError>
 8005288:	4603      	mov	r3, r0
 800528a:	2b20      	cmp	r3, #32
 800528c:	d105      	bne.n	800529a <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2210      	movs	r2, #16
 8005292:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005296:	2303      	movs	r3, #3
 8005298:	e044      	b.n	8005324 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f001 f8cc 	bl	8006438 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052aa:	2b40      	cmp	r3, #64	; 0x40
 80052ac:	d139      	bne.n	8005322 <HAL_UART_DMAStop+0x11a>
 80052ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052b0:	2b22      	cmp	r3, #34	; 0x22
 80052b2:	d136      	bne.n	8005322 <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	3308      	adds	r3, #8
 80052ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	e853 3f00 	ldrex	r3, [r3]
 80052c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052ca:	633b      	str	r3, [r7, #48]	; 0x30
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	3308      	adds	r3, #8
 80052d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052d4:	61ba      	str	r2, [r7, #24]
 80052d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d8:	6979      	ldr	r1, [r7, #20]
 80052da:	69ba      	ldr	r2, [r7, #24]
 80052dc:	e841 2300 	strex	r3, r2, [r1]
 80052e0:	613b      	str	r3, [r7, #16]
   return(result);
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d1e5      	bne.n	80052b4 <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d015      	beq.n	800531c <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052f4:	4618      	mov	r0, r3
 80052f6:	f7fd f99b 	bl	8002630 <HAL_DMA_Abort>
 80052fa:	4603      	mov	r3, r0
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d00d      	beq.n	800531c <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005304:	4618      	mov	r0, r3
 8005306:	f7fd fac1 	bl	800288c <HAL_DMA_GetError>
 800530a:	4603      	mov	r3, r0
 800530c:	2b20      	cmp	r3, #32
 800530e:	d105      	bne.n	800531c <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2210      	movs	r2, #16
 8005314:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005318:	2303      	movs	r3, #3
 800531a:	e003      	b.n	8005324 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f001 f8b1 	bl	8006484 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8005322:	2300      	movs	r3, #0
}
 8005324:	4618      	mov	r0, r3
 8005326:	3740      	adds	r7, #64	; 0x40
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}

0800532c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b0ba      	sub	sp, #232	; 0xe8
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	69db      	ldr	r3, [r3, #28]
 800533a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005352:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005356:	f640 030f 	movw	r3, #2063	; 0x80f
 800535a:	4013      	ands	r3, r2
 800535c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005360:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005364:	2b00      	cmp	r3, #0
 8005366:	d115      	bne.n	8005394 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005368:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800536c:	f003 0320 	and.w	r3, r3, #32
 8005370:	2b00      	cmp	r3, #0
 8005372:	d00f      	beq.n	8005394 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005374:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005378:	f003 0320 	and.w	r3, r3, #32
 800537c:	2b00      	cmp	r3, #0
 800537e:	d009      	beq.n	8005394 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005384:	2b00      	cmp	r3, #0
 8005386:	f000 82ae 	beq.w	80058e6 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	4798      	blx	r3
      }
      return;
 8005392:	e2a8      	b.n	80058e6 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005394:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005398:	2b00      	cmp	r3, #0
 800539a:	f000 8117 	beq.w	80055cc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800539e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053a2:	f003 0301 	and.w	r3, r3, #1
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d106      	bne.n	80053b8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80053aa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80053ae:	4b85      	ldr	r3, [pc, #532]	; (80055c4 <HAL_UART_IRQHandler+0x298>)
 80053b0:	4013      	ands	r3, r2
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	f000 810a 	beq.w	80055cc <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80053b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053bc:	f003 0301 	and.w	r3, r3, #1
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d011      	beq.n	80053e8 <HAL_UART_IRQHandler+0xbc>
 80053c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d00b      	beq.n	80053e8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	2201      	movs	r2, #1
 80053d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053de:	f043 0201 	orr.w	r2, r3, #1
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80053e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053ec:	f003 0302 	and.w	r3, r3, #2
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d011      	beq.n	8005418 <HAL_UART_IRQHandler+0xec>
 80053f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053f8:	f003 0301 	and.w	r3, r3, #1
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d00b      	beq.n	8005418 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	2202      	movs	r2, #2
 8005406:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800540e:	f043 0204 	orr.w	r2, r3, #4
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005418:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800541c:	f003 0304 	and.w	r3, r3, #4
 8005420:	2b00      	cmp	r3, #0
 8005422:	d011      	beq.n	8005448 <HAL_UART_IRQHandler+0x11c>
 8005424:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005428:	f003 0301 	and.w	r3, r3, #1
 800542c:	2b00      	cmp	r3, #0
 800542e:	d00b      	beq.n	8005448 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	2204      	movs	r2, #4
 8005436:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800543e:	f043 0202 	orr.w	r2, r3, #2
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005448:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800544c:	f003 0308 	and.w	r3, r3, #8
 8005450:	2b00      	cmp	r3, #0
 8005452:	d017      	beq.n	8005484 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005454:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005458:	f003 0320 	and.w	r3, r3, #32
 800545c:	2b00      	cmp	r3, #0
 800545e:	d105      	bne.n	800546c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005460:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005464:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005468:	2b00      	cmp	r3, #0
 800546a:	d00b      	beq.n	8005484 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	2208      	movs	r2, #8
 8005472:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800547a:	f043 0208 	orr.w	r2, r3, #8
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005484:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005488:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800548c:	2b00      	cmp	r3, #0
 800548e:	d012      	beq.n	80054b6 <HAL_UART_IRQHandler+0x18a>
 8005490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005494:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005498:	2b00      	cmp	r3, #0
 800549a:	d00c      	beq.n	80054b6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80054a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054ac:	f043 0220 	orr.w	r2, r3, #32
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054bc:	2b00      	cmp	r3, #0
 80054be:	f000 8214 	beq.w	80058ea <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80054c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054c6:	f003 0320 	and.w	r3, r3, #32
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d00d      	beq.n	80054ea <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80054ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054d2:	f003 0320 	and.w	r3, r3, #32
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d007      	beq.n	80054ea <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d003      	beq.n	80054ea <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054fe:	2b40      	cmp	r3, #64	; 0x40
 8005500:	d005      	beq.n	800550e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005502:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005506:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800550a:	2b00      	cmp	r3, #0
 800550c:	d04f      	beq.n	80055ae <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f000 ffb8 	bl	8006484 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800551e:	2b40      	cmp	r3, #64	; 0x40
 8005520:	d141      	bne.n	80055a6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	3308      	adds	r3, #8
 8005528:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800552c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005530:	e853 3f00 	ldrex	r3, [r3]
 8005534:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005538:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800553c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005540:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	3308      	adds	r3, #8
 800554a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800554e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005552:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005556:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800555a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800555e:	e841 2300 	strex	r3, r2, [r1]
 8005562:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005566:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800556a:	2b00      	cmp	r3, #0
 800556c:	d1d9      	bne.n	8005522 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005572:	2b00      	cmp	r3, #0
 8005574:	d013      	beq.n	800559e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800557a:	4a13      	ldr	r2, [pc, #76]	; (80055c8 <HAL_UART_IRQHandler+0x29c>)
 800557c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005582:	4618      	mov	r0, r3
 8005584:	f7fd f892 	bl	80026ac <HAL_DMA_Abort_IT>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d017      	beq.n	80055be <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005598:	4610      	mov	r0, r2
 800559a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800559c:	e00f      	b.n	80055be <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 f9c2 	bl	8005928 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055a4:	e00b      	b.n	80055be <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f000 f9be 	bl	8005928 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055ac:	e007      	b.n	80055be <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 f9ba 	bl	8005928 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80055bc:	e195      	b.n	80058ea <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055be:	bf00      	nop
    return;
 80055c0:	e193      	b.n	80058ea <HAL_UART_IRQHandler+0x5be>
 80055c2:	bf00      	nop
 80055c4:	04000120 	.word	0x04000120
 80055c8:	08006735 	.word	0x08006735

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	f040 814e 	bne.w	8005872 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80055d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055da:	f003 0310 	and.w	r3, r3, #16
 80055de:	2b00      	cmp	r3, #0
 80055e0:	f000 8147 	beq.w	8005872 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80055e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055e8:	f003 0310 	and.w	r3, r3, #16
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	f000 8140 	beq.w	8005872 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	2210      	movs	r2, #16
 80055f8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005604:	2b40      	cmp	r3, #64	; 0x40
 8005606:	f040 80b8 	bne.w	800577a <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005616:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800561a:	2b00      	cmp	r3, #0
 800561c:	f000 8167 	beq.w	80058ee <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005626:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800562a:	429a      	cmp	r2, r3
 800562c:	f080 815f 	bcs.w	80058ee <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005636:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 0320 	and.w	r3, r3, #32
 8005646:	2b00      	cmp	r3, #0
 8005648:	f040 8086 	bne.w	8005758 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005654:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005658:	e853 3f00 	ldrex	r3, [r3]
 800565c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005660:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005664:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005668:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	461a      	mov	r2, r3
 8005672:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005676:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800567a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800567e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005682:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005686:	e841 2300 	strex	r3, r2, [r1]
 800568a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800568e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005692:	2b00      	cmp	r3, #0
 8005694:	d1da      	bne.n	800564c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	3308      	adds	r3, #8
 800569c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800569e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056a0:	e853 3f00 	ldrex	r3, [r3]
 80056a4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80056a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80056a8:	f023 0301 	bic.w	r3, r3, #1
 80056ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	3308      	adds	r3, #8
 80056b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80056ba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80056be:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80056c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80056c6:	e841 2300 	strex	r3, r2, [r1]
 80056ca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80056cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d1e1      	bne.n	8005696 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	3308      	adds	r3, #8
 80056d8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056dc:	e853 3f00 	ldrex	r3, [r3]
 80056e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80056e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	3308      	adds	r3, #8
 80056f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80056f6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80056f8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056fa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80056fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80056fe:	e841 2300 	strex	r3, r2, [r1]
 8005702:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005704:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005706:	2b00      	cmp	r3, #0
 8005708:	d1e3      	bne.n	80056d2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2220      	movs	r2, #32
 800570e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800571e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005720:	e853 3f00 	ldrex	r3, [r3]
 8005724:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005726:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005728:	f023 0310 	bic.w	r3, r3, #16
 800572c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	461a      	mov	r2, r3
 8005736:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800573a:	65bb      	str	r3, [r7, #88]	; 0x58
 800573c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800573e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005740:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005742:	e841 2300 	strex	r3, r2, [r1]
 8005746:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005748:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800574a:	2b00      	cmp	r3, #0
 800574c:	d1e4      	bne.n	8005718 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005752:	4618      	mov	r0, r3
 8005754:	f7fc ff6c 	bl	8002630 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2202      	movs	r2, #2
 800575c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800576a:	b29b      	uxth	r3, r3
 800576c:	1ad3      	subs	r3, r2, r3
 800576e:	b29b      	uxth	r3, r3
 8005770:	4619      	mov	r1, r3
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f000 f8e2 	bl	800593c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005778:	e0b9      	b.n	80058ee <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005786:	b29b      	uxth	r3, r3
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005794:	b29b      	uxth	r3, r3
 8005796:	2b00      	cmp	r3, #0
 8005798:	f000 80ab 	beq.w	80058f2 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 800579c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	f000 80a6 	beq.w	80058f2 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ae:	e853 3f00 	ldrex	r3, [r3]
 80057b2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80057b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80057ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	461a      	mov	r2, r3
 80057c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80057c8:	647b      	str	r3, [r7, #68]	; 0x44
 80057ca:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80057ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80057d0:	e841 2300 	strex	r3, r2, [r1]
 80057d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80057d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d1e4      	bne.n	80057a6 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	3308      	adds	r3, #8
 80057e2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e6:	e853 3f00 	ldrex	r3, [r3]
 80057ea:	623b      	str	r3, [r7, #32]
   return(result);
 80057ec:	6a3b      	ldr	r3, [r7, #32]
 80057ee:	f023 0301 	bic.w	r3, r3, #1
 80057f2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	3308      	adds	r3, #8
 80057fc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005800:	633a      	str	r2, [r7, #48]	; 0x30
 8005802:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005804:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005806:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005808:	e841 2300 	strex	r3, r2, [r1]
 800580c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800580e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005810:	2b00      	cmp	r3, #0
 8005812:	d1e3      	bne.n	80057dc <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2220      	movs	r2, #32
 8005818:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	e853 3f00 	ldrex	r3, [r3]
 8005834:	60fb      	str	r3, [r7, #12]
   return(result);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f023 0310 	bic.w	r3, r3, #16
 800583c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	461a      	mov	r2, r3
 8005846:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800584a:	61fb      	str	r3, [r7, #28]
 800584c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800584e:	69b9      	ldr	r1, [r7, #24]
 8005850:	69fa      	ldr	r2, [r7, #28]
 8005852:	e841 2300 	strex	r3, r2, [r1]
 8005856:	617b      	str	r3, [r7, #20]
   return(result);
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d1e4      	bne.n	8005828 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2202      	movs	r2, #2
 8005862:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005864:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005868:	4619      	mov	r1, r3
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f000 f866 	bl	800593c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005870:	e03f      	b.n	80058f2 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005872:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005876:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800587a:	2b00      	cmp	r3, #0
 800587c:	d00e      	beq.n	800589c <HAL_UART_IRQHandler+0x570>
 800587e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005882:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005886:	2b00      	cmp	r3, #0
 8005888:	d008      	beq.n	800589c <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005892:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f001 f949 	bl	8006b2c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800589a:	e02d      	b.n	80058f8 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800589c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d00e      	beq.n	80058c6 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80058a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d008      	beq.n	80058c6 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d01c      	beq.n	80058f6 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	4798      	blx	r3
    }
    return;
 80058c4:	e017      	b.n	80058f6 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80058c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d012      	beq.n	80058f8 <HAL_UART_IRQHandler+0x5cc>
 80058d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d00c      	beq.n	80058f8 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 ff3e 	bl	8006760 <UART_EndTransmit_IT>
    return;
 80058e4:	e008      	b.n	80058f8 <HAL_UART_IRQHandler+0x5cc>
      return;
 80058e6:	bf00      	nop
 80058e8:	e006      	b.n	80058f8 <HAL_UART_IRQHandler+0x5cc>
    return;
 80058ea:	bf00      	nop
 80058ec:	e004      	b.n	80058f8 <HAL_UART_IRQHandler+0x5cc>
      return;
 80058ee:	bf00      	nop
 80058f0:	e002      	b.n	80058f8 <HAL_UART_IRQHandler+0x5cc>
      return;
 80058f2:	bf00      	nop
 80058f4:	e000      	b.n	80058f8 <HAL_UART_IRQHandler+0x5cc>
    return;
 80058f6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80058f8:	37e8      	adds	r7, #232	; 0xe8
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
 80058fe:	bf00      	nop

08005900 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005900:	b480      	push	{r7}
 8005902:	b083      	sub	sp, #12
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005908:	bf00      	nop
 800590a:	370c      	adds	r7, #12
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800591c:	bf00      	nop
 800591e:	370c      	adds	r7, #12
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr

08005928 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005928:	b480      	push	{r7}
 800592a:	b083      	sub	sp, #12
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005930:	bf00      	nop
 8005932:	370c      	adds	r7, #12
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr

0800593c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	460b      	mov	r3, r1
 8005946:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005948:	bf00      	nop
 800594a:	370c      	adds	r7, #12
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr

08005954 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005954:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005958:	b08a      	sub	sp, #40	; 0x28
 800595a:	af00      	add	r7, sp, #0
 800595c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800595e:	2300      	movs	r3, #0
 8005960:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	689a      	ldr	r2, [r3, #8]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	691b      	ldr	r3, [r3, #16]
 800596c:	431a      	orrs	r2, r3
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	695b      	ldr	r3, [r3, #20]
 8005972:	431a      	orrs	r2, r3
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	69db      	ldr	r3, [r3, #28]
 8005978:	4313      	orrs	r3, r2
 800597a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	4b9e      	ldr	r3, [pc, #632]	; (8005bfc <UART_SetConfig+0x2a8>)
 8005984:	4013      	ands	r3, r2
 8005986:	68fa      	ldr	r2, [r7, #12]
 8005988:	6812      	ldr	r2, [r2, #0]
 800598a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800598c:	430b      	orrs	r3, r1
 800598e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	68da      	ldr	r2, [r3, #12]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	430a      	orrs	r2, r1
 80059a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	699b      	ldr	r3, [r3, #24]
 80059aa:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a93      	ldr	r2, [pc, #588]	; (8005c00 <UART_SetConfig+0x2ac>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d004      	beq.n	80059c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	6a1b      	ldr	r3, [r3, #32]
 80059ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059bc:	4313      	orrs	r3, r2
 80059be:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059d0:	430a      	orrs	r2, r1
 80059d2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a8a      	ldr	r2, [pc, #552]	; (8005c04 <UART_SetConfig+0x2b0>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d126      	bne.n	8005a2c <UART_SetConfig+0xd8>
 80059de:	4b8a      	ldr	r3, [pc, #552]	; (8005c08 <UART_SetConfig+0x2b4>)
 80059e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059e4:	f003 0303 	and.w	r3, r3, #3
 80059e8:	2b03      	cmp	r3, #3
 80059ea:	d81b      	bhi.n	8005a24 <UART_SetConfig+0xd0>
 80059ec:	a201      	add	r2, pc, #4	; (adr r2, 80059f4 <UART_SetConfig+0xa0>)
 80059ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f2:	bf00      	nop
 80059f4:	08005a05 	.word	0x08005a05
 80059f8:	08005a15 	.word	0x08005a15
 80059fc:	08005a0d 	.word	0x08005a0d
 8005a00:	08005a1d 	.word	0x08005a1d
 8005a04:	2301      	movs	r3, #1
 8005a06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a0a:	e0ab      	b.n	8005b64 <UART_SetConfig+0x210>
 8005a0c:	2302      	movs	r3, #2
 8005a0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a12:	e0a7      	b.n	8005b64 <UART_SetConfig+0x210>
 8005a14:	2304      	movs	r3, #4
 8005a16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a1a:	e0a3      	b.n	8005b64 <UART_SetConfig+0x210>
 8005a1c:	2308      	movs	r3, #8
 8005a1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a22:	e09f      	b.n	8005b64 <UART_SetConfig+0x210>
 8005a24:	2310      	movs	r3, #16
 8005a26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a2a:	e09b      	b.n	8005b64 <UART_SetConfig+0x210>
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a76      	ldr	r2, [pc, #472]	; (8005c0c <UART_SetConfig+0x2b8>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d138      	bne.n	8005aa8 <UART_SetConfig+0x154>
 8005a36:	4b74      	ldr	r3, [pc, #464]	; (8005c08 <UART_SetConfig+0x2b4>)
 8005a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a3c:	f003 030c 	and.w	r3, r3, #12
 8005a40:	2b0c      	cmp	r3, #12
 8005a42:	d82d      	bhi.n	8005aa0 <UART_SetConfig+0x14c>
 8005a44:	a201      	add	r2, pc, #4	; (adr r2, 8005a4c <UART_SetConfig+0xf8>)
 8005a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a4a:	bf00      	nop
 8005a4c:	08005a81 	.word	0x08005a81
 8005a50:	08005aa1 	.word	0x08005aa1
 8005a54:	08005aa1 	.word	0x08005aa1
 8005a58:	08005aa1 	.word	0x08005aa1
 8005a5c:	08005a91 	.word	0x08005a91
 8005a60:	08005aa1 	.word	0x08005aa1
 8005a64:	08005aa1 	.word	0x08005aa1
 8005a68:	08005aa1 	.word	0x08005aa1
 8005a6c:	08005a89 	.word	0x08005a89
 8005a70:	08005aa1 	.word	0x08005aa1
 8005a74:	08005aa1 	.word	0x08005aa1
 8005a78:	08005aa1 	.word	0x08005aa1
 8005a7c:	08005a99 	.word	0x08005a99
 8005a80:	2300      	movs	r3, #0
 8005a82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a86:	e06d      	b.n	8005b64 <UART_SetConfig+0x210>
 8005a88:	2302      	movs	r3, #2
 8005a8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a8e:	e069      	b.n	8005b64 <UART_SetConfig+0x210>
 8005a90:	2304      	movs	r3, #4
 8005a92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a96:	e065      	b.n	8005b64 <UART_SetConfig+0x210>
 8005a98:	2308      	movs	r3, #8
 8005a9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a9e:	e061      	b.n	8005b64 <UART_SetConfig+0x210>
 8005aa0:	2310      	movs	r3, #16
 8005aa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005aa6:	e05d      	b.n	8005b64 <UART_SetConfig+0x210>
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a58      	ldr	r2, [pc, #352]	; (8005c10 <UART_SetConfig+0x2bc>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d125      	bne.n	8005afe <UART_SetConfig+0x1aa>
 8005ab2:	4b55      	ldr	r3, [pc, #340]	; (8005c08 <UART_SetConfig+0x2b4>)
 8005ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ab8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005abc:	2b30      	cmp	r3, #48	; 0x30
 8005abe:	d016      	beq.n	8005aee <UART_SetConfig+0x19a>
 8005ac0:	2b30      	cmp	r3, #48	; 0x30
 8005ac2:	d818      	bhi.n	8005af6 <UART_SetConfig+0x1a2>
 8005ac4:	2b20      	cmp	r3, #32
 8005ac6:	d00a      	beq.n	8005ade <UART_SetConfig+0x18a>
 8005ac8:	2b20      	cmp	r3, #32
 8005aca:	d814      	bhi.n	8005af6 <UART_SetConfig+0x1a2>
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d002      	beq.n	8005ad6 <UART_SetConfig+0x182>
 8005ad0:	2b10      	cmp	r3, #16
 8005ad2:	d008      	beq.n	8005ae6 <UART_SetConfig+0x192>
 8005ad4:	e00f      	b.n	8005af6 <UART_SetConfig+0x1a2>
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005adc:	e042      	b.n	8005b64 <UART_SetConfig+0x210>
 8005ade:	2302      	movs	r3, #2
 8005ae0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ae4:	e03e      	b.n	8005b64 <UART_SetConfig+0x210>
 8005ae6:	2304      	movs	r3, #4
 8005ae8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005aec:	e03a      	b.n	8005b64 <UART_SetConfig+0x210>
 8005aee:	2308      	movs	r3, #8
 8005af0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005af4:	e036      	b.n	8005b64 <UART_SetConfig+0x210>
 8005af6:	2310      	movs	r3, #16
 8005af8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005afc:	e032      	b.n	8005b64 <UART_SetConfig+0x210>
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a3f      	ldr	r2, [pc, #252]	; (8005c00 <UART_SetConfig+0x2ac>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d12a      	bne.n	8005b5e <UART_SetConfig+0x20a>
 8005b08:	4b3f      	ldr	r3, [pc, #252]	; (8005c08 <UART_SetConfig+0x2b4>)
 8005b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b0e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005b12:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b16:	d01a      	beq.n	8005b4e <UART_SetConfig+0x1fa>
 8005b18:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b1c:	d81b      	bhi.n	8005b56 <UART_SetConfig+0x202>
 8005b1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b22:	d00c      	beq.n	8005b3e <UART_SetConfig+0x1ea>
 8005b24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b28:	d815      	bhi.n	8005b56 <UART_SetConfig+0x202>
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d003      	beq.n	8005b36 <UART_SetConfig+0x1e2>
 8005b2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b32:	d008      	beq.n	8005b46 <UART_SetConfig+0x1f2>
 8005b34:	e00f      	b.n	8005b56 <UART_SetConfig+0x202>
 8005b36:	2300      	movs	r3, #0
 8005b38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b3c:	e012      	b.n	8005b64 <UART_SetConfig+0x210>
 8005b3e:	2302      	movs	r3, #2
 8005b40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b44:	e00e      	b.n	8005b64 <UART_SetConfig+0x210>
 8005b46:	2304      	movs	r3, #4
 8005b48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b4c:	e00a      	b.n	8005b64 <UART_SetConfig+0x210>
 8005b4e:	2308      	movs	r3, #8
 8005b50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b54:	e006      	b.n	8005b64 <UART_SetConfig+0x210>
 8005b56:	2310      	movs	r3, #16
 8005b58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b5c:	e002      	b.n	8005b64 <UART_SetConfig+0x210>
 8005b5e:	2310      	movs	r3, #16
 8005b60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a25      	ldr	r2, [pc, #148]	; (8005c00 <UART_SetConfig+0x2ac>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	f040 808a 	bne.w	8005c84 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005b70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005b74:	2b08      	cmp	r3, #8
 8005b76:	d824      	bhi.n	8005bc2 <UART_SetConfig+0x26e>
 8005b78:	a201      	add	r2, pc, #4	; (adr r2, 8005b80 <UART_SetConfig+0x22c>)
 8005b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b7e:	bf00      	nop
 8005b80:	08005ba5 	.word	0x08005ba5
 8005b84:	08005bc3 	.word	0x08005bc3
 8005b88:	08005bad 	.word	0x08005bad
 8005b8c:	08005bc3 	.word	0x08005bc3
 8005b90:	08005bb3 	.word	0x08005bb3
 8005b94:	08005bc3 	.word	0x08005bc3
 8005b98:	08005bc3 	.word	0x08005bc3
 8005b9c:	08005bc3 	.word	0x08005bc3
 8005ba0:	08005bbb 	.word	0x08005bbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ba4:	f7fe fd0a 	bl	80045bc <HAL_RCC_GetPCLK1Freq>
 8005ba8:	61f8      	str	r0, [r7, #28]
        break;
 8005baa:	e010      	b.n	8005bce <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bac:	4b19      	ldr	r3, [pc, #100]	; (8005c14 <UART_SetConfig+0x2c0>)
 8005bae:	61fb      	str	r3, [r7, #28]
        break;
 8005bb0:	e00d      	b.n	8005bce <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bb2:	f7fe fc6b 	bl	800448c <HAL_RCC_GetSysClockFreq>
 8005bb6:	61f8      	str	r0, [r7, #28]
        break;
 8005bb8:	e009      	b.n	8005bce <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bbe:	61fb      	str	r3, [r7, #28]
        break;
 8005bc0:	e005      	b.n	8005bce <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005bcc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005bce:	69fb      	ldr	r3, [r7, #28]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	f000 8109 	beq.w	8005de8 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	685a      	ldr	r2, [r3, #4]
 8005bda:	4613      	mov	r3, r2
 8005bdc:	005b      	lsls	r3, r3, #1
 8005bde:	4413      	add	r3, r2
 8005be0:	69fa      	ldr	r2, [r7, #28]
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d305      	bcc.n	8005bf2 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005bec:	69fa      	ldr	r2, [r7, #28]
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d912      	bls.n	8005c18 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005bf8:	e0f6      	b.n	8005de8 <UART_SetConfig+0x494>
 8005bfa:	bf00      	nop
 8005bfc:	efff69f3 	.word	0xefff69f3
 8005c00:	40008000 	.word	0x40008000
 8005c04:	40013800 	.word	0x40013800
 8005c08:	40021000 	.word	0x40021000
 8005c0c:	40004400 	.word	0x40004400
 8005c10:	40004800 	.word	0x40004800
 8005c14:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	461c      	mov	r4, r3
 8005c1e:	4615      	mov	r5, r2
 8005c20:	f04f 0200 	mov.w	r2, #0
 8005c24:	f04f 0300 	mov.w	r3, #0
 8005c28:	022b      	lsls	r3, r5, #8
 8005c2a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005c2e:	0222      	lsls	r2, r4, #8
 8005c30:	68f9      	ldr	r1, [r7, #12]
 8005c32:	6849      	ldr	r1, [r1, #4]
 8005c34:	0849      	lsrs	r1, r1, #1
 8005c36:	2000      	movs	r0, #0
 8005c38:	4688      	mov	r8, r1
 8005c3a:	4681      	mov	r9, r0
 8005c3c:	eb12 0a08 	adds.w	sl, r2, r8
 8005c40:	eb43 0b09 	adc.w	fp, r3, r9
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	603b      	str	r3, [r7, #0]
 8005c4c:	607a      	str	r2, [r7, #4]
 8005c4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c52:	4650      	mov	r0, sl
 8005c54:	4659      	mov	r1, fp
 8005c56:	f7fa fff7 	bl	8000c48 <__aeabi_uldivmod>
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	460b      	mov	r3, r1
 8005c5e:	4613      	mov	r3, r2
 8005c60:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005c62:	69bb      	ldr	r3, [r7, #24]
 8005c64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c68:	d308      	bcc.n	8005c7c <UART_SetConfig+0x328>
 8005c6a:	69bb      	ldr	r3, [r7, #24]
 8005c6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c70:	d204      	bcs.n	8005c7c <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	69ba      	ldr	r2, [r7, #24]
 8005c78:	60da      	str	r2, [r3, #12]
 8005c7a:	e0b5      	b.n	8005de8 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005c82:	e0b1      	b.n	8005de8 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	69db      	ldr	r3, [r3, #28]
 8005c88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c8c:	d15d      	bne.n	8005d4a <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8005c8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005c92:	2b08      	cmp	r3, #8
 8005c94:	d827      	bhi.n	8005ce6 <UART_SetConfig+0x392>
 8005c96:	a201      	add	r2, pc, #4	; (adr r2, 8005c9c <UART_SetConfig+0x348>)
 8005c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c9c:	08005cc1 	.word	0x08005cc1
 8005ca0:	08005cc9 	.word	0x08005cc9
 8005ca4:	08005cd1 	.word	0x08005cd1
 8005ca8:	08005ce7 	.word	0x08005ce7
 8005cac:	08005cd7 	.word	0x08005cd7
 8005cb0:	08005ce7 	.word	0x08005ce7
 8005cb4:	08005ce7 	.word	0x08005ce7
 8005cb8:	08005ce7 	.word	0x08005ce7
 8005cbc:	08005cdf 	.word	0x08005cdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cc0:	f7fe fc7c 	bl	80045bc <HAL_RCC_GetPCLK1Freq>
 8005cc4:	61f8      	str	r0, [r7, #28]
        break;
 8005cc6:	e014      	b.n	8005cf2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cc8:	f7fe fc8e 	bl	80045e8 <HAL_RCC_GetPCLK2Freq>
 8005ccc:	61f8      	str	r0, [r7, #28]
        break;
 8005cce:	e010      	b.n	8005cf2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cd0:	4b4c      	ldr	r3, [pc, #304]	; (8005e04 <UART_SetConfig+0x4b0>)
 8005cd2:	61fb      	str	r3, [r7, #28]
        break;
 8005cd4:	e00d      	b.n	8005cf2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cd6:	f7fe fbd9 	bl	800448c <HAL_RCC_GetSysClockFreq>
 8005cda:	61f8      	str	r0, [r7, #28]
        break;
 8005cdc:	e009      	b.n	8005cf2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ce2:	61fb      	str	r3, [r7, #28]
        break;
 8005ce4:	e005      	b.n	8005cf2 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005cf0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d077      	beq.n	8005de8 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005cf8:	69fb      	ldr	r3, [r7, #28]
 8005cfa:	005a      	lsls	r2, r3, #1
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	085b      	lsrs	r3, r3, #1
 8005d02:	441a      	add	r2, r3
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d0c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d0e:	69bb      	ldr	r3, [r7, #24]
 8005d10:	2b0f      	cmp	r3, #15
 8005d12:	d916      	bls.n	8005d42 <UART_SetConfig+0x3ee>
 8005d14:	69bb      	ldr	r3, [r7, #24]
 8005d16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d1a:	d212      	bcs.n	8005d42 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d1c:	69bb      	ldr	r3, [r7, #24]
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	f023 030f 	bic.w	r3, r3, #15
 8005d24:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	085b      	lsrs	r3, r3, #1
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	f003 0307 	and.w	r3, r3, #7
 8005d30:	b29a      	uxth	r2, r3
 8005d32:	8afb      	ldrh	r3, [r7, #22]
 8005d34:	4313      	orrs	r3, r2
 8005d36:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	8afa      	ldrh	r2, [r7, #22]
 8005d3e:	60da      	str	r2, [r3, #12]
 8005d40:	e052      	b.n	8005de8 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005d48:	e04e      	b.n	8005de8 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d4a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005d4e:	2b08      	cmp	r3, #8
 8005d50:	d827      	bhi.n	8005da2 <UART_SetConfig+0x44e>
 8005d52:	a201      	add	r2, pc, #4	; (adr r2, 8005d58 <UART_SetConfig+0x404>)
 8005d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d58:	08005d7d 	.word	0x08005d7d
 8005d5c:	08005d85 	.word	0x08005d85
 8005d60:	08005d8d 	.word	0x08005d8d
 8005d64:	08005da3 	.word	0x08005da3
 8005d68:	08005d93 	.word	0x08005d93
 8005d6c:	08005da3 	.word	0x08005da3
 8005d70:	08005da3 	.word	0x08005da3
 8005d74:	08005da3 	.word	0x08005da3
 8005d78:	08005d9b 	.word	0x08005d9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d7c:	f7fe fc1e 	bl	80045bc <HAL_RCC_GetPCLK1Freq>
 8005d80:	61f8      	str	r0, [r7, #28]
        break;
 8005d82:	e014      	b.n	8005dae <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d84:	f7fe fc30 	bl	80045e8 <HAL_RCC_GetPCLK2Freq>
 8005d88:	61f8      	str	r0, [r7, #28]
        break;
 8005d8a:	e010      	b.n	8005dae <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d8c:	4b1d      	ldr	r3, [pc, #116]	; (8005e04 <UART_SetConfig+0x4b0>)
 8005d8e:	61fb      	str	r3, [r7, #28]
        break;
 8005d90:	e00d      	b.n	8005dae <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d92:	f7fe fb7b 	bl	800448c <HAL_RCC_GetSysClockFreq>
 8005d96:	61f8      	str	r0, [r7, #28]
        break;
 8005d98:	e009      	b.n	8005dae <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d9e:	61fb      	str	r3, [r7, #28]
        break;
 8005da0:	e005      	b.n	8005dae <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8005da2:	2300      	movs	r3, #0
 8005da4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005dac:	bf00      	nop
    }

    if (pclk != 0U)
 8005dae:	69fb      	ldr	r3, [r7, #28]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d019      	beq.n	8005de8 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	085a      	lsrs	r2, r3, #1
 8005dba:	69fb      	ldr	r3, [r7, #28]
 8005dbc:	441a      	add	r2, r3
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dc6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005dc8:	69bb      	ldr	r3, [r7, #24]
 8005dca:	2b0f      	cmp	r3, #15
 8005dcc:	d909      	bls.n	8005de2 <UART_SetConfig+0x48e>
 8005dce:	69bb      	ldr	r3, [r7, #24]
 8005dd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dd4:	d205      	bcs.n	8005de2 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005dd6:	69bb      	ldr	r3, [r7, #24]
 8005dd8:	b29a      	uxth	r2, r3
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	60da      	str	r2, [r3, #12]
 8005de0:	e002      	b.n	8005de8 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2200      	movs	r2, #0
 8005dec:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2200      	movs	r2, #0
 8005df2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005df4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3728      	adds	r7, #40	; 0x28
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e02:	bf00      	nop
 8005e04:	00f42400 	.word	0x00f42400

08005e08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e14:	f003 0308 	and.w	r3, r3, #8
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d00a      	beq.n	8005e32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	430a      	orrs	r2, r1
 8005e30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e36:	f003 0301 	and.w	r3, r3, #1
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d00a      	beq.n	8005e54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	430a      	orrs	r2, r1
 8005e52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e58:	f003 0302 	and.w	r3, r3, #2
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d00a      	beq.n	8005e76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	430a      	orrs	r2, r1
 8005e74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7a:	f003 0304 	and.w	r3, r3, #4
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d00a      	beq.n	8005e98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	430a      	orrs	r2, r1
 8005e96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9c:	f003 0310 	and.w	r3, r3, #16
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d00a      	beq.n	8005eba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	430a      	orrs	r2, r1
 8005eb8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ebe:	f003 0320 	and.w	r3, r3, #32
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d00a      	beq.n	8005edc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	430a      	orrs	r2, r1
 8005eda:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d01a      	beq.n	8005f1e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	430a      	orrs	r2, r1
 8005efc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f06:	d10a      	bne.n	8005f1e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	430a      	orrs	r2, r1
 8005f1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d00a      	beq.n	8005f40 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	430a      	orrs	r2, r1
 8005f3e:	605a      	str	r2, [r3, #4]
  }
}
 8005f40:	bf00      	nop
 8005f42:	370c      	adds	r7, #12
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr

08005f4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b098      	sub	sp, #96	; 0x60
 8005f50:	af02      	add	r7, sp, #8
 8005f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2200      	movs	r2, #0
 8005f58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f5c:	f7fc f962 	bl	8002224 <HAL_GetTick>
 8005f60:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f003 0308 	and.w	r3, r3, #8
 8005f6c:	2b08      	cmp	r3, #8
 8005f6e:	d12e      	bne.n	8005fce <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f74:	9300      	str	r3, [sp, #0]
 8005f76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 f88c 	bl	800609c <UART_WaitOnFlagUntilTimeout>
 8005f84:	4603      	mov	r3, r0
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d021      	beq.n	8005fce <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f92:	e853 3f00 	ldrex	r3, [r3]
 8005f96:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f9e:	653b      	str	r3, [r7, #80]	; 0x50
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fa8:	647b      	str	r3, [r7, #68]	; 0x44
 8005faa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005fae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005fb0:	e841 2300 	strex	r3, r2, [r1]
 8005fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005fb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d1e6      	bne.n	8005f8a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2220      	movs	r2, #32
 8005fc0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fca:	2303      	movs	r3, #3
 8005fcc:	e062      	b.n	8006094 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f003 0304 	and.w	r3, r3, #4
 8005fd8:	2b04      	cmp	r3, #4
 8005fda:	d149      	bne.n	8006070 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fdc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005fe0:	9300      	str	r3, [sp, #0]
 8005fe2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f000 f856 	bl	800609c <UART_WaitOnFlagUntilTimeout>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d03c      	beq.n	8006070 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffe:	e853 3f00 	ldrex	r3, [r3]
 8006002:	623b      	str	r3, [r7, #32]
   return(result);
 8006004:	6a3b      	ldr	r3, [r7, #32]
 8006006:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800600a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	461a      	mov	r2, r3
 8006012:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006014:	633b      	str	r3, [r7, #48]	; 0x30
 8006016:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006018:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800601a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800601c:	e841 2300 	strex	r3, r2, [r1]
 8006020:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006024:	2b00      	cmp	r3, #0
 8006026:	d1e6      	bne.n	8005ff6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	3308      	adds	r3, #8
 800602e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	e853 3f00 	ldrex	r3, [r3]
 8006036:	60fb      	str	r3, [r7, #12]
   return(result);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f023 0301 	bic.w	r3, r3, #1
 800603e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	3308      	adds	r3, #8
 8006046:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006048:	61fa      	str	r2, [r7, #28]
 800604a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800604c:	69b9      	ldr	r1, [r7, #24]
 800604e:	69fa      	ldr	r2, [r7, #28]
 8006050:	e841 2300 	strex	r3, r2, [r1]
 8006054:	617b      	str	r3, [r7, #20]
   return(result);
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d1e5      	bne.n	8006028 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2220      	movs	r2, #32
 8006060:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800606c:	2303      	movs	r3, #3
 800606e:	e011      	b.n	8006094 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2220      	movs	r2, #32
 8006074:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2220      	movs	r2, #32
 800607a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2200      	movs	r2, #0
 8006088:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006092:	2300      	movs	r3, #0
}
 8006094:	4618      	mov	r0, r3
 8006096:	3758      	adds	r7, #88	; 0x58
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}

0800609c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b084      	sub	sp, #16
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	60f8      	str	r0, [r7, #12]
 80060a4:	60b9      	str	r1, [r7, #8]
 80060a6:	603b      	str	r3, [r7, #0]
 80060a8:	4613      	mov	r3, r2
 80060aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060ac:	e049      	b.n	8006142 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060ae:	69bb      	ldr	r3, [r7, #24]
 80060b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060b4:	d045      	beq.n	8006142 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060b6:	f7fc f8b5 	bl	8002224 <HAL_GetTick>
 80060ba:	4602      	mov	r2, r0
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	1ad3      	subs	r3, r2, r3
 80060c0:	69ba      	ldr	r2, [r7, #24]
 80060c2:	429a      	cmp	r2, r3
 80060c4:	d302      	bcc.n	80060cc <UART_WaitOnFlagUntilTimeout+0x30>
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d101      	bne.n	80060d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80060cc:	2303      	movs	r3, #3
 80060ce:	e048      	b.n	8006162 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f003 0304 	and.w	r3, r3, #4
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d031      	beq.n	8006142 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	69db      	ldr	r3, [r3, #28]
 80060e4:	f003 0308 	and.w	r3, r3, #8
 80060e8:	2b08      	cmp	r3, #8
 80060ea:	d110      	bne.n	800610e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2208      	movs	r2, #8
 80060f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80060f4:	68f8      	ldr	r0, [r7, #12]
 80060f6:	f000 f9c5 	bl	8006484 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2208      	movs	r2, #8
 80060fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2200      	movs	r2, #0
 8006106:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	e029      	b.n	8006162 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	69db      	ldr	r3, [r3, #28]
 8006114:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006118:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800611c:	d111      	bne.n	8006142 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006126:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006128:	68f8      	ldr	r0, [r7, #12]
 800612a:	f000 f9ab 	bl	8006484 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2220      	movs	r2, #32
 8006132:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2200      	movs	r2, #0
 800613a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800613e:	2303      	movs	r3, #3
 8006140:	e00f      	b.n	8006162 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	69da      	ldr	r2, [r3, #28]
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	4013      	ands	r3, r2
 800614c:	68ba      	ldr	r2, [r7, #8]
 800614e:	429a      	cmp	r2, r3
 8006150:	bf0c      	ite	eq
 8006152:	2301      	moveq	r3, #1
 8006154:	2300      	movne	r3, #0
 8006156:	b2db      	uxtb	r3, r3
 8006158:	461a      	mov	r2, r3
 800615a:	79fb      	ldrb	r3, [r7, #7]
 800615c:	429a      	cmp	r2, r3
 800615e:	d0a6      	beq.n	80060ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006160:	2300      	movs	r3, #0
}
 8006162:	4618      	mov	r0, r3
 8006164:	3710      	adds	r7, #16
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
	...

0800616c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800616c:	b480      	push	{r7}
 800616e:	b097      	sub	sp, #92	; 0x5c
 8006170:	af00      	add	r7, sp, #0
 8006172:	60f8      	str	r0, [r7, #12]
 8006174:	60b9      	str	r1, [r7, #8]
 8006176:	4613      	mov	r3, r2
 8006178:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	68ba      	ldr	r2, [r7, #8]
 800617e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	88fa      	ldrh	r2, [r7, #6]
 8006184:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	88fa      	ldrh	r2, [r7, #6]
 800618c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2200      	movs	r2, #0
 8006194:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800619e:	d10e      	bne.n	80061be <UART_Start_Receive_IT+0x52>
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	691b      	ldr	r3, [r3, #16]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d105      	bne.n	80061b4 <UART_Start_Receive_IT+0x48>
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f240 12ff 	movw	r2, #511	; 0x1ff
 80061ae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80061b2:	e02d      	b.n	8006210 <UART_Start_Receive_IT+0xa4>
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	22ff      	movs	r2, #255	; 0xff
 80061b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80061bc:	e028      	b.n	8006210 <UART_Start_Receive_IT+0xa4>
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d10d      	bne.n	80061e2 <UART_Start_Receive_IT+0x76>
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d104      	bne.n	80061d8 <UART_Start_Receive_IT+0x6c>
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	22ff      	movs	r2, #255	; 0xff
 80061d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80061d6:	e01b      	b.n	8006210 <UART_Start_Receive_IT+0xa4>
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	227f      	movs	r2, #127	; 0x7f
 80061dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80061e0:	e016      	b.n	8006210 <UART_Start_Receive_IT+0xa4>
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80061ea:	d10d      	bne.n	8006208 <UART_Start_Receive_IT+0x9c>
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	691b      	ldr	r3, [r3, #16]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d104      	bne.n	80061fe <UART_Start_Receive_IT+0x92>
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	227f      	movs	r2, #127	; 0x7f
 80061f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80061fc:	e008      	b.n	8006210 <UART_Start_Receive_IT+0xa4>
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	223f      	movs	r2, #63	; 0x3f
 8006202:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006206:	e003      	b.n	8006210 <UART_Start_Receive_IT+0xa4>
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2200      	movs	r2, #0
 800620c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2200      	movs	r2, #0
 8006214:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2222      	movs	r2, #34	; 0x22
 800621c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	3308      	adds	r3, #8
 8006226:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006228:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800622a:	e853 3f00 	ldrex	r3, [r3]
 800622e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006232:	f043 0301 	orr.w	r3, r3, #1
 8006236:	657b      	str	r3, [r7, #84]	; 0x54
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	3308      	adds	r3, #8
 800623e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006240:	64ba      	str	r2, [r7, #72]	; 0x48
 8006242:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006244:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006246:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006248:	e841 2300 	strex	r3, r2, [r1]
 800624c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800624e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006250:	2b00      	cmp	r3, #0
 8006252:	d1e5      	bne.n	8006220 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800625c:	d107      	bne.n	800626e <UART_Start_Receive_IT+0x102>
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	691b      	ldr	r3, [r3, #16]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d103      	bne.n	800626e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	4a21      	ldr	r2, [pc, #132]	; (80062f0 <UART_Start_Receive_IT+0x184>)
 800626a:	669a      	str	r2, [r3, #104]	; 0x68
 800626c:	e002      	b.n	8006274 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	4a20      	ldr	r2, [pc, #128]	; (80062f4 <UART_Start_Receive_IT+0x188>)
 8006272:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	691b      	ldr	r3, [r3, #16]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d019      	beq.n	80062b0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006284:	e853 3f00 	ldrex	r3, [r3]
 8006288:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800628a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006290:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	461a      	mov	r2, r3
 8006298:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800629a:	637b      	str	r3, [r7, #52]	; 0x34
 800629c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800629e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80062a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80062a2:	e841 2300 	strex	r3, r2, [r1]
 80062a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80062a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d1e6      	bne.n	800627c <UART_Start_Receive_IT+0x110>
 80062ae:	e018      	b.n	80062e2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	e853 3f00 	ldrex	r3, [r3]
 80062bc:	613b      	str	r3, [r7, #16]
   return(result);
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	f043 0320 	orr.w	r3, r3, #32
 80062c4:	653b      	str	r3, [r7, #80]	; 0x50
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	461a      	mov	r2, r3
 80062cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062ce:	623b      	str	r3, [r7, #32]
 80062d0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d2:	69f9      	ldr	r1, [r7, #28]
 80062d4:	6a3a      	ldr	r2, [r7, #32]
 80062d6:	e841 2300 	strex	r3, r2, [r1]
 80062da:	61bb      	str	r3, [r7, #24]
   return(result);
 80062dc:	69bb      	ldr	r3, [r7, #24]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d1e6      	bne.n	80062b0 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80062e2:	2300      	movs	r3, #0
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	375c      	adds	r7, #92	; 0x5c
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr
 80062f0:	08006971 	.word	0x08006971
 80062f4:	080067b5 	.word	0x080067b5

080062f8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b096      	sub	sp, #88	; 0x58
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	60f8      	str	r0, [r7, #12]
 8006300:	60b9      	str	r1, [r7, #8]
 8006302:	4613      	mov	r3, r2
 8006304:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	68ba      	ldr	r2, [r7, #8]
 800630a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	88fa      	ldrh	r2, [r7, #6]
 8006310:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2200      	movs	r2, #0
 8006318:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2222      	movs	r2, #34	; 0x22
 8006320:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006328:	2b00      	cmp	r3, #0
 800632a:	d028      	beq.n	800637e <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006330:	4a3e      	ldr	r2, [pc, #248]	; (800642c <UART_Start_Receive_DMA+0x134>)
 8006332:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006338:	4a3d      	ldr	r2, [pc, #244]	; (8006430 <UART_Start_Receive_DMA+0x138>)
 800633a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006340:	4a3c      	ldr	r2, [pc, #240]	; (8006434 <UART_Start_Receive_DMA+0x13c>)
 8006342:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006348:	2200      	movs	r2, #0
 800634a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	3324      	adds	r3, #36	; 0x24
 8006356:	4619      	mov	r1, r3
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800635c:	461a      	mov	r2, r3
 800635e:	88fb      	ldrh	r3, [r7, #6]
 8006360:	f7fc f906 	bl	8002570 <HAL_DMA_Start_IT>
 8006364:	4603      	mov	r3, r0
 8006366:	2b00      	cmp	r3, #0
 8006368:	d009      	beq.n	800637e <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2210      	movs	r2, #16
 800636e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2220      	movs	r2, #32
 8006376:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	e051      	b.n	8006422 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	691b      	ldr	r3, [r3, #16]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d018      	beq.n	80063b8 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800638c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800638e:	e853 3f00 	ldrex	r3, [r3]
 8006392:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006396:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800639a:	657b      	str	r3, [r7, #84]	; 0x54
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	461a      	mov	r2, r3
 80063a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80063a6:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80063aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063ac:	e841 2300 	strex	r3, r2, [r1]
 80063b0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80063b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d1e6      	bne.n	8006386 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	3308      	adds	r3, #8
 80063be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c2:	e853 3f00 	ldrex	r3, [r3]
 80063c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80063c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ca:	f043 0301 	orr.w	r3, r3, #1
 80063ce:	653b      	str	r3, [r7, #80]	; 0x50
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	3308      	adds	r3, #8
 80063d6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80063d8:	637a      	str	r2, [r7, #52]	; 0x34
 80063da:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80063de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063e0:	e841 2300 	strex	r3, r2, [r1]
 80063e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80063e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d1e5      	bne.n	80063b8 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	3308      	adds	r3, #8
 80063f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	e853 3f00 	ldrex	r3, [r3]
 80063fa:	613b      	str	r3, [r7, #16]
   return(result);
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006402:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	3308      	adds	r3, #8
 800640a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800640c:	623a      	str	r2, [r7, #32]
 800640e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006410:	69f9      	ldr	r1, [r7, #28]
 8006412:	6a3a      	ldr	r2, [r7, #32]
 8006414:	e841 2300 	strex	r3, r2, [r1]
 8006418:	61bb      	str	r3, [r7, #24]
   return(result);
 800641a:	69bb      	ldr	r3, [r7, #24]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d1e5      	bne.n	80063ec <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8006420:	2300      	movs	r3, #0
}
 8006422:	4618      	mov	r0, r3
 8006424:	3758      	adds	r7, #88	; 0x58
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}
 800642a:	bf00      	nop
 800642c:	0800654d 	.word	0x0800654d
 8006430:	08006679 	.word	0x08006679
 8006434:	080066b7 	.word	0x080066b7

08006438 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006438:	b480      	push	{r7}
 800643a:	b089      	sub	sp, #36	; 0x24
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	e853 3f00 	ldrex	r3, [r3]
 800644c:	60bb      	str	r3, [r7, #8]
   return(result);
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006454:	61fb      	str	r3, [r7, #28]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	461a      	mov	r2, r3
 800645c:	69fb      	ldr	r3, [r7, #28]
 800645e:	61bb      	str	r3, [r7, #24]
 8006460:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006462:	6979      	ldr	r1, [r7, #20]
 8006464:	69ba      	ldr	r2, [r7, #24]
 8006466:	e841 2300 	strex	r3, r2, [r1]
 800646a:	613b      	str	r3, [r7, #16]
   return(result);
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d1e6      	bne.n	8006440 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2220      	movs	r2, #32
 8006476:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8006478:	bf00      	nop
 800647a:	3724      	adds	r7, #36	; 0x24
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr

08006484 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006484:	b480      	push	{r7}
 8006486:	b095      	sub	sp, #84	; 0x54
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006494:	e853 3f00 	ldrex	r3, [r3]
 8006498:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800649a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800649c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80064a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	461a      	mov	r2, r3
 80064a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064aa:	643b      	str	r3, [r7, #64]	; 0x40
 80064ac:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80064b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80064b2:	e841 2300 	strex	r3, r2, [r1]
 80064b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80064b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d1e6      	bne.n	800648c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	3308      	adds	r3, #8
 80064c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c6:	6a3b      	ldr	r3, [r7, #32]
 80064c8:	e853 3f00 	ldrex	r3, [r3]
 80064cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80064ce:	69fb      	ldr	r3, [r7, #28]
 80064d0:	f023 0301 	bic.w	r3, r3, #1
 80064d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	3308      	adds	r3, #8
 80064dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80064e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064e6:	e841 2300 	strex	r3, r2, [r1]
 80064ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80064ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d1e5      	bne.n	80064be <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064f6:	2b01      	cmp	r3, #1
 80064f8:	d118      	bne.n	800652c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	e853 3f00 	ldrex	r3, [r3]
 8006506:	60bb      	str	r3, [r7, #8]
   return(result);
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	f023 0310 	bic.w	r3, r3, #16
 800650e:	647b      	str	r3, [r7, #68]	; 0x44
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	461a      	mov	r2, r3
 8006516:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006518:	61bb      	str	r3, [r7, #24]
 800651a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800651c:	6979      	ldr	r1, [r7, #20]
 800651e:	69ba      	ldr	r2, [r7, #24]
 8006520:	e841 2300 	strex	r3, r2, [r1]
 8006524:	613b      	str	r3, [r7, #16]
   return(result);
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d1e6      	bne.n	80064fa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2220      	movs	r2, #32
 8006530:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2200      	movs	r2, #0
 800653e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006540:	bf00      	nop
 8006542:	3754      	adds	r7, #84	; 0x54
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr

0800654c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b09c      	sub	sp, #112	; 0x70
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006558:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f003 0320 	and.w	r3, r3, #32
 8006564:	2b00      	cmp	r3, #0
 8006566:	d171      	bne.n	800664c <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8006568:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800656a:	2200      	movs	r2, #0
 800656c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006570:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006576:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006578:	e853 3f00 	ldrex	r3, [r3]
 800657c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800657e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006580:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006584:	66bb      	str	r3, [r7, #104]	; 0x68
 8006586:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	461a      	mov	r2, r3
 800658c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800658e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006590:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006592:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006594:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006596:	e841 2300 	strex	r3, r2, [r1]
 800659a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800659c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d1e6      	bne.n	8006570 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	3308      	adds	r3, #8
 80065a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ac:	e853 3f00 	ldrex	r3, [r3]
 80065b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80065b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065b4:	f023 0301 	bic.w	r3, r3, #1
 80065b8:	667b      	str	r3, [r7, #100]	; 0x64
 80065ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	3308      	adds	r3, #8
 80065c0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80065c2:	647a      	str	r2, [r7, #68]	; 0x44
 80065c4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80065c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065ca:	e841 2300 	strex	r3, r2, [r1]
 80065ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80065d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d1e5      	bne.n	80065a2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	3308      	adds	r3, #8
 80065dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e0:	e853 3f00 	ldrex	r3, [r3]
 80065e4:	623b      	str	r3, [r7, #32]
   return(result);
 80065e6:	6a3b      	ldr	r3, [r7, #32]
 80065e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065ec:	663b      	str	r3, [r7, #96]	; 0x60
 80065ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	3308      	adds	r3, #8
 80065f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80065f6:	633a      	str	r2, [r7, #48]	; 0x30
 80065f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80065fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065fe:	e841 2300 	strex	r3, r2, [r1]
 8006602:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006606:	2b00      	cmp	r3, #0
 8006608:	d1e5      	bne.n	80065d6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800660a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800660c:	2220      	movs	r2, #32
 800660e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006612:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006614:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006616:	2b01      	cmp	r3, #1
 8006618:	d118      	bne.n	800664c <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800661a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	e853 3f00 	ldrex	r3, [r3]
 8006626:	60fb      	str	r3, [r7, #12]
   return(result);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f023 0310 	bic.w	r3, r3, #16
 800662e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006630:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	461a      	mov	r2, r3
 8006636:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006638:	61fb      	str	r3, [r7, #28]
 800663a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800663c:	69b9      	ldr	r1, [r7, #24]
 800663e:	69fa      	ldr	r2, [r7, #28]
 8006640:	e841 2300 	strex	r3, r2, [r1]
 8006644:	617b      	str	r3, [r7, #20]
   return(result);
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d1e6      	bne.n	800661a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800664c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800664e:	2200      	movs	r2, #0
 8006650:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006652:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006654:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006656:	2b01      	cmp	r3, #1
 8006658:	d107      	bne.n	800666a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800665a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800665c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006660:	4619      	mov	r1, r3
 8006662:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006664:	f7ff f96a 	bl	800593c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006668:	e002      	b.n	8006670 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800666a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800666c:	f7fb f8ca 	bl	8001804 <HAL_UART_RxCpltCallback>
}
 8006670:	bf00      	nop
 8006672:	3770      	adds	r7, #112	; 0x70
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}

08006678 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b084      	sub	sp, #16
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006684:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2201      	movs	r2, #1
 800668a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006690:	2b01      	cmp	r3, #1
 8006692:	d109      	bne.n	80066a8 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800669a:	085b      	lsrs	r3, r3, #1
 800669c:	b29b      	uxth	r3, r3
 800669e:	4619      	mov	r1, r3
 80066a0:	68f8      	ldr	r0, [r7, #12]
 80066a2:	f7ff f94b 	bl	800593c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80066a6:	e002      	b.n	80066ae <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80066a8:	68f8      	ldr	r0, [r7, #12]
 80066aa:	f7ff f933 	bl	8005914 <HAL_UART_RxHalfCpltCallback>
}
 80066ae:	bf00      	nop
 80066b0:	3710      	adds	r7, #16
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}

080066b6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80066b6:	b580      	push	{r7, lr}
 80066b8:	b086      	sub	sp, #24
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066c2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066c8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066d0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066dc:	2b80      	cmp	r3, #128	; 0x80
 80066de:	d109      	bne.n	80066f4 <UART_DMAError+0x3e>
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	2b21      	cmp	r3, #33	; 0x21
 80066e4:	d106      	bne.n	80066f4 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	2200      	movs	r2, #0
 80066ea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80066ee:	6978      	ldr	r0, [r7, #20]
 80066f0:	f7ff fea2 	bl	8006438 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066fe:	2b40      	cmp	r3, #64	; 0x40
 8006700:	d109      	bne.n	8006716 <UART_DMAError+0x60>
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2b22      	cmp	r3, #34	; 0x22
 8006706:	d106      	bne.n	8006716 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	2200      	movs	r2, #0
 800670c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8006710:	6978      	ldr	r0, [r7, #20]
 8006712:	f7ff feb7 	bl	8006484 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800671c:	f043 0210 	orr.w	r2, r3, #16
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006726:	6978      	ldr	r0, [r7, #20]
 8006728:	f7ff f8fe 	bl	8005928 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800672c:	bf00      	nop
 800672e:	3718      	adds	r7, #24
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}

08006734 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b084      	sub	sp, #16
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006740:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2200      	movs	r2, #0
 8006746:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2200      	movs	r2, #0
 800674e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006752:	68f8      	ldr	r0, [r7, #12]
 8006754:	f7ff f8e8 	bl	8005928 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006758:	bf00      	nop
 800675a:	3710      	adds	r7, #16
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}

08006760 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b088      	sub	sp, #32
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	e853 3f00 	ldrex	r3, [r3]
 8006774:	60bb      	str	r3, [r7, #8]
   return(result);
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800677c:	61fb      	str	r3, [r7, #28]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	461a      	mov	r2, r3
 8006784:	69fb      	ldr	r3, [r7, #28]
 8006786:	61bb      	str	r3, [r7, #24]
 8006788:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800678a:	6979      	ldr	r1, [r7, #20]
 800678c:	69ba      	ldr	r2, [r7, #24]
 800678e:	e841 2300 	strex	r3, r2, [r1]
 8006792:	613b      	str	r3, [r7, #16]
   return(result);
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d1e6      	bne.n	8006768 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2220      	movs	r2, #32
 800679e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2200      	movs	r2, #0
 80067a4:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f7ff f8aa 	bl	8005900 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067ac:	bf00      	nop
 80067ae:	3720      	adds	r7, #32
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b09c      	sub	sp, #112	; 0x70
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80067c2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067cc:	2b22      	cmp	r3, #34	; 0x22
 80067ce:	f040 80be 	bne.w	800694e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80067d8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80067dc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80067e0:	b2d9      	uxtb	r1, r3
 80067e2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80067e6:	b2da      	uxtb	r2, r3
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067ec:	400a      	ands	r2, r1
 80067ee:	b2d2      	uxtb	r2, r2
 80067f0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067f6:	1c5a      	adds	r2, r3, #1
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006802:	b29b      	uxth	r3, r3
 8006804:	3b01      	subs	r3, #1
 8006806:	b29a      	uxth	r2, r3
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006814:	b29b      	uxth	r3, r3
 8006816:	2b00      	cmp	r3, #0
 8006818:	f040 80a3 	bne.w	8006962 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006822:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006824:	e853 3f00 	ldrex	r3, [r3]
 8006828:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800682a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800682c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006830:	66bb      	str	r3, [r7, #104]	; 0x68
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	461a      	mov	r2, r3
 8006838:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800683a:	65bb      	str	r3, [r7, #88]	; 0x58
 800683c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800683e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006840:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006842:	e841 2300 	strex	r3, r2, [r1]
 8006846:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006848:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800684a:	2b00      	cmp	r3, #0
 800684c:	d1e6      	bne.n	800681c <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	3308      	adds	r3, #8
 8006854:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006858:	e853 3f00 	ldrex	r3, [r3]
 800685c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800685e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006860:	f023 0301 	bic.w	r3, r3, #1
 8006864:	667b      	str	r3, [r7, #100]	; 0x64
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	3308      	adds	r3, #8
 800686c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800686e:	647a      	str	r2, [r7, #68]	; 0x44
 8006870:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006872:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006874:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006876:	e841 2300 	strex	r3, r2, [r1]
 800687a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800687c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800687e:	2b00      	cmp	r3, #0
 8006880:	d1e5      	bne.n	800684e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2220      	movs	r2, #32
 8006886:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2200      	movs	r2, #0
 800688e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a34      	ldr	r2, [pc, #208]	; (800696c <UART_RxISR_8BIT+0x1b8>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d01f      	beq.n	80068e0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d018      	beq.n	80068e0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b6:	e853 3f00 	ldrex	r3, [r3]
 80068ba:	623b      	str	r3, [r7, #32]
   return(result);
 80068bc:	6a3b      	ldr	r3, [r7, #32]
 80068be:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80068c2:	663b      	str	r3, [r7, #96]	; 0x60
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	461a      	mov	r2, r3
 80068ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80068cc:	633b      	str	r3, [r7, #48]	; 0x30
 80068ce:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80068d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068d4:	e841 2300 	strex	r3, r2, [r1]
 80068d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80068da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d1e6      	bne.n	80068ae <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	d12e      	bne.n	8006946 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	e853 3f00 	ldrex	r3, [r3]
 80068fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f023 0310 	bic.w	r3, r3, #16
 8006902:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	461a      	mov	r2, r3
 800690a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800690c:	61fb      	str	r3, [r7, #28]
 800690e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006910:	69b9      	ldr	r1, [r7, #24]
 8006912:	69fa      	ldr	r2, [r7, #28]
 8006914:	e841 2300 	strex	r3, r2, [r1]
 8006918:	617b      	str	r3, [r7, #20]
   return(result);
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d1e6      	bne.n	80068ee <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	69db      	ldr	r3, [r3, #28]
 8006926:	f003 0310 	and.w	r3, r3, #16
 800692a:	2b10      	cmp	r3, #16
 800692c:	d103      	bne.n	8006936 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	2210      	movs	r2, #16
 8006934:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800693c:	4619      	mov	r1, r3
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f7fe fffc 	bl	800593c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006944:	e00d      	b.n	8006962 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f7fa ff5c 	bl	8001804 <HAL_UART_RxCpltCallback>
}
 800694c:	e009      	b.n	8006962 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	8b1b      	ldrh	r3, [r3, #24]
 8006954:	b29a      	uxth	r2, r3
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f042 0208 	orr.w	r2, r2, #8
 800695e:	b292      	uxth	r2, r2
 8006960:	831a      	strh	r2, [r3, #24]
}
 8006962:	bf00      	nop
 8006964:	3770      	adds	r7, #112	; 0x70
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}
 800696a:	bf00      	nop
 800696c:	40008000 	.word	0x40008000

08006970 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b09c      	sub	sp, #112	; 0x70
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800697e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006988:	2b22      	cmp	r3, #34	; 0x22
 800698a:	f040 80be 	bne.w	8006b0a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006994:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800699c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800699e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80069a2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80069a6:	4013      	ands	r3, r2
 80069a8:	b29a      	uxth	r2, r3
 80069aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80069ac:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069b2:	1c9a      	adds	r2, r3, #2
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80069be:	b29b      	uxth	r3, r3
 80069c0:	3b01      	subs	r3, #1
 80069c2:	b29a      	uxth	r2, r3
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	f040 80a3 	bne.w	8006b1e <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069e0:	e853 3f00 	ldrex	r3, [r3]
 80069e4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80069e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80069ec:	667b      	str	r3, [r7, #100]	; 0x64
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	461a      	mov	r2, r3
 80069f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80069f6:	657b      	str	r3, [r7, #84]	; 0x54
 80069f8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069fa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80069fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80069fe:	e841 2300 	strex	r3, r2, [r1]
 8006a02:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006a04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d1e6      	bne.n	80069d8 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	3308      	adds	r3, #8
 8006a10:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a14:	e853 3f00 	ldrex	r3, [r3]
 8006a18:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a1c:	f023 0301 	bic.w	r3, r3, #1
 8006a20:	663b      	str	r3, [r7, #96]	; 0x60
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	3308      	adds	r3, #8
 8006a28:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006a2a:	643a      	str	r2, [r7, #64]	; 0x40
 8006a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a2e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006a30:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a32:	e841 2300 	strex	r3, r2, [r1]
 8006a36:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d1e5      	bne.n	8006a0a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2220      	movs	r2, #32
 8006a42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a34      	ldr	r2, [pc, #208]	; (8006b28 <UART_RxISR_16BIT+0x1b8>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d01f      	beq.n	8006a9c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d018      	beq.n	8006a9c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a70:	6a3b      	ldr	r3, [r7, #32]
 8006a72:	e853 3f00 	ldrex	r3, [r3]
 8006a76:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a78:	69fb      	ldr	r3, [r7, #28]
 8006a7a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006a7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	461a      	mov	r2, r3
 8006a86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a8a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a90:	e841 2300 	strex	r3, r2, [r1]
 8006a94:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d1e6      	bne.n	8006a6a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d12e      	bne.n	8006b02 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	e853 3f00 	ldrex	r3, [r3]
 8006ab6:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	f023 0310 	bic.w	r3, r3, #16
 8006abe:	65bb      	str	r3, [r7, #88]	; 0x58
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006ac8:	61bb      	str	r3, [r7, #24]
 8006aca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006acc:	6979      	ldr	r1, [r7, #20]
 8006ace:	69ba      	ldr	r2, [r7, #24]
 8006ad0:	e841 2300 	strex	r3, r2, [r1]
 8006ad4:	613b      	str	r3, [r7, #16]
   return(result);
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d1e6      	bne.n	8006aaa <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	69db      	ldr	r3, [r3, #28]
 8006ae2:	f003 0310 	and.w	r3, r3, #16
 8006ae6:	2b10      	cmp	r3, #16
 8006ae8:	d103      	bne.n	8006af2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	2210      	movs	r2, #16
 8006af0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006af8:	4619      	mov	r1, r3
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f7fe ff1e 	bl	800593c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006b00:	e00d      	b.n	8006b1e <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f7fa fe7e 	bl	8001804 <HAL_UART_RxCpltCallback>
}
 8006b08:	e009      	b.n	8006b1e <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	8b1b      	ldrh	r3, [r3, #24]
 8006b10:	b29a      	uxth	r2, r3
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f042 0208 	orr.w	r2, r2, #8
 8006b1a:	b292      	uxth	r2, r2
 8006b1c:	831a      	strh	r2, [r3, #24]
}
 8006b1e:	bf00      	nop
 8006b20:	3770      	adds	r7, #112	; 0x70
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}
 8006b26:	bf00      	nop
 8006b28:	40008000 	.word	0x40008000

08006b2c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b083      	sub	sp, #12
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006b34:	bf00      	nop
 8006b36:	370c      	adds	r7, #12
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr

08006b40 <__NVIC_SetPriority>:
{
 8006b40:	b480      	push	{r7}
 8006b42:	b083      	sub	sp, #12
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	4603      	mov	r3, r0
 8006b48:	6039      	str	r1, [r7, #0]
 8006b4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006b4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	db0a      	blt.n	8006b6a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	b2da      	uxtb	r2, r3
 8006b58:	490c      	ldr	r1, [pc, #48]	; (8006b8c <__NVIC_SetPriority+0x4c>)
 8006b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b5e:	0112      	lsls	r2, r2, #4
 8006b60:	b2d2      	uxtb	r2, r2
 8006b62:	440b      	add	r3, r1
 8006b64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006b68:	e00a      	b.n	8006b80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	b2da      	uxtb	r2, r3
 8006b6e:	4908      	ldr	r1, [pc, #32]	; (8006b90 <__NVIC_SetPriority+0x50>)
 8006b70:	79fb      	ldrb	r3, [r7, #7]
 8006b72:	f003 030f 	and.w	r3, r3, #15
 8006b76:	3b04      	subs	r3, #4
 8006b78:	0112      	lsls	r2, r2, #4
 8006b7a:	b2d2      	uxtb	r2, r2
 8006b7c:	440b      	add	r3, r1
 8006b7e:	761a      	strb	r2, [r3, #24]
}
 8006b80:	bf00      	nop
 8006b82:	370c      	adds	r7, #12
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr
 8006b8c:	e000e100 	.word	0xe000e100
 8006b90:	e000ed00 	.word	0xe000ed00

08006b94 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006b94:	b580      	push	{r7, lr}
 8006b96:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006b98:	4b05      	ldr	r3, [pc, #20]	; (8006bb0 <SysTick_Handler+0x1c>)
 8006b9a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006b9c:	f001 fe4a 	bl	8008834 <xTaskGetSchedulerState>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	d001      	beq.n	8006baa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006ba6:	f002 fd27 	bl	80095f8 <xPortSysTickHandler>
  }
}
 8006baa:	bf00      	nop
 8006bac:	bd80      	pop	{r7, pc}
 8006bae:	bf00      	nop
 8006bb0:	e000e010 	.word	0xe000e010

08006bb4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006bb8:	2100      	movs	r1, #0
 8006bba:	f06f 0004 	mvn.w	r0, #4
 8006bbe:	f7ff ffbf 	bl	8006b40 <__NVIC_SetPriority>
#endif
}
 8006bc2:	bf00      	nop
 8006bc4:	bd80      	pop	{r7, pc}
	...

08006bc8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006bc8:	b480      	push	{r7}
 8006bca:	b083      	sub	sp, #12
 8006bcc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006bce:	f3ef 8305 	mrs	r3, IPSR
 8006bd2:	603b      	str	r3, [r7, #0]
  return(result);
 8006bd4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d003      	beq.n	8006be2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006bda:	f06f 0305 	mvn.w	r3, #5
 8006bde:	607b      	str	r3, [r7, #4]
 8006be0:	e00c      	b.n	8006bfc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006be2:	4b0a      	ldr	r3, [pc, #40]	; (8006c0c <osKernelInitialize+0x44>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d105      	bne.n	8006bf6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006bea:	4b08      	ldr	r3, [pc, #32]	; (8006c0c <osKernelInitialize+0x44>)
 8006bec:	2201      	movs	r2, #1
 8006bee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	607b      	str	r3, [r7, #4]
 8006bf4:	e002      	b.n	8006bfc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006bf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006bfa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006bfc:	687b      	ldr	r3, [r7, #4]
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	370c      	adds	r7, #12
 8006c02:	46bd      	mov	sp, r7
 8006c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c08:	4770      	bx	lr
 8006c0a:	bf00      	nop
 8006c0c:	200004b0 	.word	0x200004b0

08006c10 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b082      	sub	sp, #8
 8006c14:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c16:	f3ef 8305 	mrs	r3, IPSR
 8006c1a:	603b      	str	r3, [r7, #0]
  return(result);
 8006c1c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d003      	beq.n	8006c2a <osKernelStart+0x1a>
    stat = osErrorISR;
 8006c22:	f06f 0305 	mvn.w	r3, #5
 8006c26:	607b      	str	r3, [r7, #4]
 8006c28:	e010      	b.n	8006c4c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006c2a:	4b0b      	ldr	r3, [pc, #44]	; (8006c58 <osKernelStart+0x48>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	d109      	bne.n	8006c46 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006c32:	f7ff ffbf 	bl	8006bb4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006c36:	4b08      	ldr	r3, [pc, #32]	; (8006c58 <osKernelStart+0x48>)
 8006c38:	2202      	movs	r2, #2
 8006c3a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006c3c:	f001 f99e 	bl	8007f7c <vTaskStartScheduler>
      stat = osOK;
 8006c40:	2300      	movs	r3, #0
 8006c42:	607b      	str	r3, [r7, #4]
 8006c44:	e002      	b.n	8006c4c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006c46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c4a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006c4c:	687b      	ldr	r3, [r7, #4]
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3708      	adds	r7, #8
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}
 8006c56:	bf00      	nop
 8006c58:	200004b0 	.word	0x200004b0

08006c5c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b08e      	sub	sp, #56	; 0x38
 8006c60:	af04      	add	r7, sp, #16
 8006c62:	60f8      	str	r0, [r7, #12]
 8006c64:	60b9      	str	r1, [r7, #8]
 8006c66:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c6c:	f3ef 8305 	mrs	r3, IPSR
 8006c70:	617b      	str	r3, [r7, #20]
  return(result);
 8006c72:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d17e      	bne.n	8006d76 <osThreadNew+0x11a>
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d07b      	beq.n	8006d76 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006c7e:	2380      	movs	r3, #128	; 0x80
 8006c80:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006c82:	2318      	movs	r3, #24
 8006c84:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006c86:	2300      	movs	r3, #0
 8006c88:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006c8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c8e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d045      	beq.n	8006d22 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d002      	beq.n	8006ca4 <osThreadNew+0x48>
        name = attr->name;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	699b      	ldr	r3, [r3, #24]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d002      	beq.n	8006cb2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	699b      	ldr	r3, [r3, #24]
 8006cb0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006cb2:	69fb      	ldr	r3, [r7, #28]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d008      	beq.n	8006cca <osThreadNew+0x6e>
 8006cb8:	69fb      	ldr	r3, [r7, #28]
 8006cba:	2b38      	cmp	r3, #56	; 0x38
 8006cbc:	d805      	bhi.n	8006cca <osThreadNew+0x6e>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	f003 0301 	and.w	r3, r3, #1
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d001      	beq.n	8006cce <osThreadNew+0x72>
        return (NULL);
 8006cca:	2300      	movs	r3, #0
 8006ccc:	e054      	b.n	8006d78 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	695b      	ldr	r3, [r3, #20]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d003      	beq.n	8006cde <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	695b      	ldr	r3, [r3, #20]
 8006cda:	089b      	lsrs	r3, r3, #2
 8006cdc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d00e      	beq.n	8006d04 <osThreadNew+0xa8>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	68db      	ldr	r3, [r3, #12]
 8006cea:	2ba7      	cmp	r3, #167	; 0xa7
 8006cec:	d90a      	bls.n	8006d04 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d006      	beq.n	8006d04 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	695b      	ldr	r3, [r3, #20]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d002      	beq.n	8006d04 <osThreadNew+0xa8>
        mem = 1;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	61bb      	str	r3, [r7, #24]
 8006d02:	e010      	b.n	8006d26 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d10c      	bne.n	8006d26 <osThreadNew+0xca>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	68db      	ldr	r3, [r3, #12]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d108      	bne.n	8006d26 <osThreadNew+0xca>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	691b      	ldr	r3, [r3, #16]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d104      	bne.n	8006d26 <osThreadNew+0xca>
          mem = 0;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	61bb      	str	r3, [r7, #24]
 8006d20:	e001      	b.n	8006d26 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006d22:	2300      	movs	r3, #0
 8006d24:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006d26:	69bb      	ldr	r3, [r7, #24]
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d110      	bne.n	8006d4e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006d30:	687a      	ldr	r2, [r7, #4]
 8006d32:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006d34:	9202      	str	r2, [sp, #8]
 8006d36:	9301      	str	r3, [sp, #4]
 8006d38:	69fb      	ldr	r3, [r7, #28]
 8006d3a:	9300      	str	r3, [sp, #0]
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	6a3a      	ldr	r2, [r7, #32]
 8006d40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006d42:	68f8      	ldr	r0, [r7, #12]
 8006d44:	f000 feb8 	bl	8007ab8 <xTaskCreateStatic>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	613b      	str	r3, [r7, #16]
 8006d4c:	e013      	b.n	8006d76 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006d4e:	69bb      	ldr	r3, [r7, #24]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d110      	bne.n	8006d76 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006d54:	6a3b      	ldr	r3, [r7, #32]
 8006d56:	b29a      	uxth	r2, r3
 8006d58:	f107 0310 	add.w	r3, r7, #16
 8006d5c:	9301      	str	r3, [sp, #4]
 8006d5e:	69fb      	ldr	r3, [r7, #28]
 8006d60:	9300      	str	r3, [sp, #0]
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006d66:	68f8      	ldr	r0, [r7, #12]
 8006d68:	f000 ff03 	bl	8007b72 <xTaskCreate>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	d001      	beq.n	8006d76 <osThreadNew+0x11a>
            hTask = NULL;
 8006d72:	2300      	movs	r3, #0
 8006d74:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006d76:	693b      	ldr	r3, [r7, #16]
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3728      	adds	r7, #40	; 0x28
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}

08006d80 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b084      	sub	sp, #16
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d88:	f3ef 8305 	mrs	r3, IPSR
 8006d8c:	60bb      	str	r3, [r7, #8]
  return(result);
 8006d8e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d003      	beq.n	8006d9c <osDelay+0x1c>
    stat = osErrorISR;
 8006d94:	f06f 0305 	mvn.w	r3, #5
 8006d98:	60fb      	str	r3, [r7, #12]
 8006d9a:	e007      	b.n	8006dac <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d002      	beq.n	8006dac <osDelay+0x2c>
      vTaskDelay(ticks);
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f001 f83e 	bl	8007e28 <vTaskDelay>
    }
  }

  return (stat);
 8006dac:	68fb      	ldr	r3, [r7, #12]
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3710      	adds	r7, #16
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}

08006db6 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006db6:	b580      	push	{r7, lr}
 8006db8:	b08a      	sub	sp, #40	; 0x28
 8006dba:	af02      	add	r7, sp, #8
 8006dbc:	60f8      	str	r0, [r7, #12]
 8006dbe:	60b9      	str	r1, [r7, #8]
 8006dc0:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006dc6:	f3ef 8305 	mrs	r3, IPSR
 8006dca:	613b      	str	r3, [r7, #16]
  return(result);
 8006dcc:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d15f      	bne.n	8006e92 <osMessageQueueNew+0xdc>
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d05c      	beq.n	8006e92 <osMessageQueueNew+0xdc>
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d059      	beq.n	8006e92 <osMessageQueueNew+0xdc>
    mem = -1;
 8006dde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006de2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d029      	beq.n	8006e3e <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d012      	beq.n	8006e18 <osMessageQueueNew+0x62>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	68db      	ldr	r3, [r3, #12]
 8006df6:	2b4f      	cmp	r3, #79	; 0x4f
 8006df8:	d90e      	bls.n	8006e18 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d00a      	beq.n	8006e18 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	695a      	ldr	r2, [r3, #20]
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	68b9      	ldr	r1, [r7, #8]
 8006e0a:	fb01 f303 	mul.w	r3, r1, r3
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	d302      	bcc.n	8006e18 <osMessageQueueNew+0x62>
        mem = 1;
 8006e12:	2301      	movs	r3, #1
 8006e14:	61bb      	str	r3, [r7, #24]
 8006e16:	e014      	b.n	8006e42 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d110      	bne.n	8006e42 <osMessageQueueNew+0x8c>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	68db      	ldr	r3, [r3, #12]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d10c      	bne.n	8006e42 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d108      	bne.n	8006e42 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	695b      	ldr	r3, [r3, #20]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d104      	bne.n	8006e42 <osMessageQueueNew+0x8c>
          mem = 0;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	61bb      	str	r3, [r7, #24]
 8006e3c:	e001      	b.n	8006e42 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006e42:	69bb      	ldr	r3, [r7, #24]
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	d10b      	bne.n	8006e60 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	691a      	ldr	r2, [r3, #16]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	2100      	movs	r1, #0
 8006e52:	9100      	str	r1, [sp, #0]
 8006e54:	68b9      	ldr	r1, [r7, #8]
 8006e56:	68f8      	ldr	r0, [r7, #12]
 8006e58:	f000 f970 	bl	800713c <xQueueGenericCreateStatic>
 8006e5c:	61f8      	str	r0, [r7, #28]
 8006e5e:	e008      	b.n	8006e72 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8006e60:	69bb      	ldr	r3, [r7, #24]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d105      	bne.n	8006e72 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8006e66:	2200      	movs	r2, #0
 8006e68:	68b9      	ldr	r1, [r7, #8]
 8006e6a:	68f8      	ldr	r0, [r7, #12]
 8006e6c:	f000 f9de 	bl	800722c <xQueueGenericCreate>
 8006e70:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006e72:	69fb      	ldr	r3, [r7, #28]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d00c      	beq.n	8006e92 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d003      	beq.n	8006e86 <osMessageQueueNew+0xd0>
        name = attr->name;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	617b      	str	r3, [r7, #20]
 8006e84:	e001      	b.n	8006e8a <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8006e86:	2300      	movs	r3, #0
 8006e88:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8006e8a:	6979      	ldr	r1, [r7, #20]
 8006e8c:	69f8      	ldr	r0, [r7, #28]
 8006e8e:	f000 fdb5 	bl	80079fc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006e92:	69fb      	ldr	r3, [r7, #28]
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3720      	adds	r7, #32
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006e9c:	b480      	push	{r7}
 8006e9e:	b085      	sub	sp, #20
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	60f8      	str	r0, [r7, #12]
 8006ea4:	60b9      	str	r1, [r7, #8]
 8006ea6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	4a07      	ldr	r2, [pc, #28]	; (8006ec8 <vApplicationGetIdleTaskMemory+0x2c>)
 8006eac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	4a06      	ldr	r2, [pc, #24]	; (8006ecc <vApplicationGetIdleTaskMemory+0x30>)
 8006eb2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2280      	movs	r2, #128	; 0x80
 8006eb8:	601a      	str	r2, [r3, #0]
}
 8006eba:	bf00      	nop
 8006ebc:	3714      	adds	r7, #20
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec4:	4770      	bx	lr
 8006ec6:	bf00      	nop
 8006ec8:	200004b4 	.word	0x200004b4
 8006ecc:	2000055c 	.word	0x2000055c

08006ed0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006ed0:	b480      	push	{r7}
 8006ed2:	b085      	sub	sp, #20
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	60f8      	str	r0, [r7, #12]
 8006ed8:	60b9      	str	r1, [r7, #8]
 8006eda:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	4a07      	ldr	r2, [pc, #28]	; (8006efc <vApplicationGetTimerTaskMemory+0x2c>)
 8006ee0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	4a06      	ldr	r2, [pc, #24]	; (8006f00 <vApplicationGetTimerTaskMemory+0x30>)
 8006ee6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006eee:	601a      	str	r2, [r3, #0]
}
 8006ef0:	bf00      	nop
 8006ef2:	3714      	adds	r7, #20
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr
 8006efc:	2000075c 	.word	0x2000075c
 8006f00:	20000804 	.word	0x20000804

08006f04 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006f04:	b480      	push	{r7}
 8006f06:	b083      	sub	sp, #12
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f103 0208 	add.w	r2, r3, #8
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f1c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f103 0208 	add.w	r2, r3, #8
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f103 0208 	add.w	r2, r3, #8
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2200      	movs	r2, #0
 8006f36:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006f38:	bf00      	nop
 8006f3a:	370c      	adds	r7, #12
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr

08006f44 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006f44:	b480      	push	{r7}
 8006f46:	b083      	sub	sp, #12
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006f52:	bf00      	nop
 8006f54:	370c      	adds	r7, #12
 8006f56:	46bd      	mov	sp, r7
 8006f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5c:	4770      	bx	lr

08006f5e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006f5e:	b480      	push	{r7}
 8006f60:	b085      	sub	sp, #20
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	6078      	str	r0, [r7, #4]
 8006f66:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	68fa      	ldr	r2, [r7, #12]
 8006f72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	689a      	ldr	r2, [r3, #8]
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	689b      	ldr	r3, [r3, #8]
 8006f80:	683a      	ldr	r2, [r7, #0]
 8006f82:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	683a      	ldr	r2, [r7, #0]
 8006f88:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	687a      	ldr	r2, [r7, #4]
 8006f8e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	1c5a      	adds	r2, r3, #1
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	601a      	str	r2, [r3, #0]
}
 8006f9a:	bf00      	nop
 8006f9c:	3714      	adds	r7, #20
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa4:	4770      	bx	lr

08006fa6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006fa6:	b480      	push	{r7}
 8006fa8:	b085      	sub	sp, #20
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	6078      	str	r0, [r7, #4]
 8006fae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006fbc:	d103      	bne.n	8006fc6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	691b      	ldr	r3, [r3, #16]
 8006fc2:	60fb      	str	r3, [r7, #12]
 8006fc4:	e00c      	b.n	8006fe0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	3308      	adds	r3, #8
 8006fca:	60fb      	str	r3, [r7, #12]
 8006fcc:	e002      	b.n	8006fd4 <vListInsert+0x2e>
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	60fb      	str	r3, [r7, #12]
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	68ba      	ldr	r2, [r7, #8]
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d2f6      	bcs.n	8006fce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	685a      	ldr	r2, [r3, #4]
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	683a      	ldr	r2, [r7, #0]
 8006fee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	68fa      	ldr	r2, [r7, #12]
 8006ff4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	683a      	ldr	r2, [r7, #0]
 8006ffa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	687a      	ldr	r2, [r7, #4]
 8007000:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	1c5a      	adds	r2, r3, #1
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	601a      	str	r2, [r3, #0]
}
 800700c:	bf00      	nop
 800700e:	3714      	adds	r7, #20
 8007010:	46bd      	mov	sp, r7
 8007012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007016:	4770      	bx	lr

08007018 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007018:	b480      	push	{r7}
 800701a:	b085      	sub	sp, #20
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	691b      	ldr	r3, [r3, #16]
 8007024:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	687a      	ldr	r2, [r7, #4]
 800702c:	6892      	ldr	r2, [r2, #8]
 800702e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	687a      	ldr	r2, [r7, #4]
 8007036:	6852      	ldr	r2, [r2, #4]
 8007038:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	687a      	ldr	r2, [r7, #4]
 8007040:	429a      	cmp	r2, r3
 8007042:	d103      	bne.n	800704c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	689a      	ldr	r2, [r3, #8]
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2200      	movs	r2, #0
 8007050:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	1e5a      	subs	r2, r3, #1
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
}
 8007060:	4618      	mov	r0, r3
 8007062:	3714      	adds	r7, #20
 8007064:	46bd      	mov	sp, r7
 8007066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706a:	4770      	bx	lr

0800706c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b084      	sub	sp, #16
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d10a      	bne.n	8007096 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007084:	f383 8811 	msr	BASEPRI, r3
 8007088:	f3bf 8f6f 	isb	sy
 800708c:	f3bf 8f4f 	dsb	sy
 8007090:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007092:	bf00      	nop
 8007094:	e7fe      	b.n	8007094 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007096:	f002 fa1d 	bl	80094d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681a      	ldr	r2, [r3, #0]
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070a2:	68f9      	ldr	r1, [r7, #12]
 80070a4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80070a6:	fb01 f303 	mul.w	r3, r1, r3
 80070aa:	441a      	add	r2, r3
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2200      	movs	r2, #0
 80070b4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681a      	ldr	r2, [r3, #0]
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070c6:	3b01      	subs	r3, #1
 80070c8:	68f9      	ldr	r1, [r7, #12]
 80070ca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80070cc:	fb01 f303 	mul.w	r3, r1, r3
 80070d0:	441a      	add	r2, r3
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	22ff      	movs	r2, #255	; 0xff
 80070da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	22ff      	movs	r2, #255	; 0xff
 80070e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d114      	bne.n	8007116 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	691b      	ldr	r3, [r3, #16]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d01a      	beq.n	800712a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	3310      	adds	r3, #16
 80070f8:	4618      	mov	r0, r3
 80070fa:	f001 f9d9 	bl	80084b0 <xTaskRemoveFromEventList>
 80070fe:	4603      	mov	r3, r0
 8007100:	2b00      	cmp	r3, #0
 8007102:	d012      	beq.n	800712a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007104:	4b0c      	ldr	r3, [pc, #48]	; (8007138 <xQueueGenericReset+0xcc>)
 8007106:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800710a:	601a      	str	r2, [r3, #0]
 800710c:	f3bf 8f4f 	dsb	sy
 8007110:	f3bf 8f6f 	isb	sy
 8007114:	e009      	b.n	800712a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	3310      	adds	r3, #16
 800711a:	4618      	mov	r0, r3
 800711c:	f7ff fef2 	bl	8006f04 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	3324      	adds	r3, #36	; 0x24
 8007124:	4618      	mov	r0, r3
 8007126:	f7ff feed 	bl	8006f04 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800712a:	f002 fa03 	bl	8009534 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800712e:	2301      	movs	r3, #1
}
 8007130:	4618      	mov	r0, r3
 8007132:	3710      	adds	r7, #16
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}
 8007138:	e000ed04 	.word	0xe000ed04

0800713c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800713c:	b580      	push	{r7, lr}
 800713e:	b08e      	sub	sp, #56	; 0x38
 8007140:	af02      	add	r7, sp, #8
 8007142:	60f8      	str	r0, [r7, #12]
 8007144:	60b9      	str	r1, [r7, #8]
 8007146:	607a      	str	r2, [r7, #4]
 8007148:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d10a      	bne.n	8007166 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007154:	f383 8811 	msr	BASEPRI, r3
 8007158:	f3bf 8f6f 	isb	sy
 800715c:	f3bf 8f4f 	dsb	sy
 8007160:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007162:	bf00      	nop
 8007164:	e7fe      	b.n	8007164 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d10a      	bne.n	8007182 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800716c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007170:	f383 8811 	msr	BASEPRI, r3
 8007174:	f3bf 8f6f 	isb	sy
 8007178:	f3bf 8f4f 	dsb	sy
 800717c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800717e:	bf00      	nop
 8007180:	e7fe      	b.n	8007180 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d002      	beq.n	800718e <xQueueGenericCreateStatic+0x52>
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d001      	beq.n	8007192 <xQueueGenericCreateStatic+0x56>
 800718e:	2301      	movs	r3, #1
 8007190:	e000      	b.n	8007194 <xQueueGenericCreateStatic+0x58>
 8007192:	2300      	movs	r3, #0
 8007194:	2b00      	cmp	r3, #0
 8007196:	d10a      	bne.n	80071ae <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800719c:	f383 8811 	msr	BASEPRI, r3
 80071a0:	f3bf 8f6f 	isb	sy
 80071a4:	f3bf 8f4f 	dsb	sy
 80071a8:	623b      	str	r3, [r7, #32]
}
 80071aa:	bf00      	nop
 80071ac:	e7fe      	b.n	80071ac <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d102      	bne.n	80071ba <xQueueGenericCreateStatic+0x7e>
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d101      	bne.n	80071be <xQueueGenericCreateStatic+0x82>
 80071ba:	2301      	movs	r3, #1
 80071bc:	e000      	b.n	80071c0 <xQueueGenericCreateStatic+0x84>
 80071be:	2300      	movs	r3, #0
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d10a      	bne.n	80071da <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80071c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c8:	f383 8811 	msr	BASEPRI, r3
 80071cc:	f3bf 8f6f 	isb	sy
 80071d0:	f3bf 8f4f 	dsb	sy
 80071d4:	61fb      	str	r3, [r7, #28]
}
 80071d6:	bf00      	nop
 80071d8:	e7fe      	b.n	80071d8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80071da:	2350      	movs	r3, #80	; 0x50
 80071dc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	2b50      	cmp	r3, #80	; 0x50
 80071e2:	d00a      	beq.n	80071fa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80071e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e8:	f383 8811 	msr	BASEPRI, r3
 80071ec:	f3bf 8f6f 	isb	sy
 80071f0:	f3bf 8f4f 	dsb	sy
 80071f4:	61bb      	str	r3, [r7, #24]
}
 80071f6:	bf00      	nop
 80071f8:	e7fe      	b.n	80071f8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80071fa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007202:	2b00      	cmp	r3, #0
 8007204:	d00d      	beq.n	8007222 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007208:	2201      	movs	r2, #1
 800720a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800720e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007214:	9300      	str	r3, [sp, #0]
 8007216:	4613      	mov	r3, r2
 8007218:	687a      	ldr	r2, [r7, #4]
 800721a:	68b9      	ldr	r1, [r7, #8]
 800721c:	68f8      	ldr	r0, [r7, #12]
 800721e:	f000 f83f 	bl	80072a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007224:	4618      	mov	r0, r3
 8007226:	3730      	adds	r7, #48	; 0x30
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}

0800722c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800722c:	b580      	push	{r7, lr}
 800722e:	b08a      	sub	sp, #40	; 0x28
 8007230:	af02      	add	r7, sp, #8
 8007232:	60f8      	str	r0, [r7, #12]
 8007234:	60b9      	str	r1, [r7, #8]
 8007236:	4613      	mov	r3, r2
 8007238:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d10a      	bne.n	8007256 <xQueueGenericCreate+0x2a>
	__asm volatile
 8007240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007244:	f383 8811 	msr	BASEPRI, r3
 8007248:	f3bf 8f6f 	isb	sy
 800724c:	f3bf 8f4f 	dsb	sy
 8007250:	613b      	str	r3, [r7, #16]
}
 8007252:	bf00      	nop
 8007254:	e7fe      	b.n	8007254 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	68ba      	ldr	r2, [r7, #8]
 800725a:	fb02 f303 	mul.w	r3, r2, r3
 800725e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007260:	69fb      	ldr	r3, [r7, #28]
 8007262:	3350      	adds	r3, #80	; 0x50
 8007264:	4618      	mov	r0, r3
 8007266:	f002 fa57 	bl	8009718 <pvPortMalloc>
 800726a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800726c:	69bb      	ldr	r3, [r7, #24]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d011      	beq.n	8007296 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007272:	69bb      	ldr	r3, [r7, #24]
 8007274:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	3350      	adds	r3, #80	; 0x50
 800727a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800727c:	69bb      	ldr	r3, [r7, #24]
 800727e:	2200      	movs	r2, #0
 8007280:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007284:	79fa      	ldrb	r2, [r7, #7]
 8007286:	69bb      	ldr	r3, [r7, #24]
 8007288:	9300      	str	r3, [sp, #0]
 800728a:	4613      	mov	r3, r2
 800728c:	697a      	ldr	r2, [r7, #20]
 800728e:	68b9      	ldr	r1, [r7, #8]
 8007290:	68f8      	ldr	r0, [r7, #12]
 8007292:	f000 f805 	bl	80072a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007296:	69bb      	ldr	r3, [r7, #24]
	}
 8007298:	4618      	mov	r0, r3
 800729a:	3720      	adds	r7, #32
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}

080072a0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b084      	sub	sp, #16
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	60f8      	str	r0, [r7, #12]
 80072a8:	60b9      	str	r1, [r7, #8]
 80072aa:	607a      	str	r2, [r7, #4]
 80072ac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d103      	bne.n	80072bc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80072b4:	69bb      	ldr	r3, [r7, #24]
 80072b6:	69ba      	ldr	r2, [r7, #24]
 80072b8:	601a      	str	r2, [r3, #0]
 80072ba:	e002      	b.n	80072c2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80072bc:	69bb      	ldr	r3, [r7, #24]
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80072c2:	69bb      	ldr	r3, [r7, #24]
 80072c4:	68fa      	ldr	r2, [r7, #12]
 80072c6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80072c8:	69bb      	ldr	r3, [r7, #24]
 80072ca:	68ba      	ldr	r2, [r7, #8]
 80072cc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80072ce:	2101      	movs	r1, #1
 80072d0:	69b8      	ldr	r0, [r7, #24]
 80072d2:	f7ff fecb 	bl	800706c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80072d6:	69bb      	ldr	r3, [r7, #24]
 80072d8:	78fa      	ldrb	r2, [r7, #3]
 80072da:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80072de:	bf00      	nop
 80072e0:	3710      	adds	r7, #16
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}
	...

080072e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b08e      	sub	sp, #56	; 0x38
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	60f8      	str	r0, [r7, #12]
 80072f0:	60b9      	str	r1, [r7, #8]
 80072f2:	607a      	str	r2, [r7, #4]
 80072f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80072f6:	2300      	movs	r3, #0
 80072f8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80072fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007300:	2b00      	cmp	r3, #0
 8007302:	d10a      	bne.n	800731a <xQueueGenericSend+0x32>
	__asm volatile
 8007304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007308:	f383 8811 	msr	BASEPRI, r3
 800730c:	f3bf 8f6f 	isb	sy
 8007310:	f3bf 8f4f 	dsb	sy
 8007314:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007316:	bf00      	nop
 8007318:	e7fe      	b.n	8007318 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d103      	bne.n	8007328 <xQueueGenericSend+0x40>
 8007320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007324:	2b00      	cmp	r3, #0
 8007326:	d101      	bne.n	800732c <xQueueGenericSend+0x44>
 8007328:	2301      	movs	r3, #1
 800732a:	e000      	b.n	800732e <xQueueGenericSend+0x46>
 800732c:	2300      	movs	r3, #0
 800732e:	2b00      	cmp	r3, #0
 8007330:	d10a      	bne.n	8007348 <xQueueGenericSend+0x60>
	__asm volatile
 8007332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007336:	f383 8811 	msr	BASEPRI, r3
 800733a:	f3bf 8f6f 	isb	sy
 800733e:	f3bf 8f4f 	dsb	sy
 8007342:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007344:	bf00      	nop
 8007346:	e7fe      	b.n	8007346 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	2b02      	cmp	r3, #2
 800734c:	d103      	bne.n	8007356 <xQueueGenericSend+0x6e>
 800734e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007352:	2b01      	cmp	r3, #1
 8007354:	d101      	bne.n	800735a <xQueueGenericSend+0x72>
 8007356:	2301      	movs	r3, #1
 8007358:	e000      	b.n	800735c <xQueueGenericSend+0x74>
 800735a:	2300      	movs	r3, #0
 800735c:	2b00      	cmp	r3, #0
 800735e:	d10a      	bne.n	8007376 <xQueueGenericSend+0x8e>
	__asm volatile
 8007360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007364:	f383 8811 	msr	BASEPRI, r3
 8007368:	f3bf 8f6f 	isb	sy
 800736c:	f3bf 8f4f 	dsb	sy
 8007370:	623b      	str	r3, [r7, #32]
}
 8007372:	bf00      	nop
 8007374:	e7fe      	b.n	8007374 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007376:	f001 fa5d 	bl	8008834 <xTaskGetSchedulerState>
 800737a:	4603      	mov	r3, r0
 800737c:	2b00      	cmp	r3, #0
 800737e:	d102      	bne.n	8007386 <xQueueGenericSend+0x9e>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d101      	bne.n	800738a <xQueueGenericSend+0xa2>
 8007386:	2301      	movs	r3, #1
 8007388:	e000      	b.n	800738c <xQueueGenericSend+0xa4>
 800738a:	2300      	movs	r3, #0
 800738c:	2b00      	cmp	r3, #0
 800738e:	d10a      	bne.n	80073a6 <xQueueGenericSend+0xbe>
	__asm volatile
 8007390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007394:	f383 8811 	msr	BASEPRI, r3
 8007398:	f3bf 8f6f 	isb	sy
 800739c:	f3bf 8f4f 	dsb	sy
 80073a0:	61fb      	str	r3, [r7, #28]
}
 80073a2:	bf00      	nop
 80073a4:	e7fe      	b.n	80073a4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80073a6:	f002 f895 	bl	80094d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80073aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073b2:	429a      	cmp	r2, r3
 80073b4:	d302      	bcc.n	80073bc <xQueueGenericSend+0xd4>
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	2b02      	cmp	r3, #2
 80073ba:	d129      	bne.n	8007410 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80073bc:	683a      	ldr	r2, [r7, #0]
 80073be:	68b9      	ldr	r1, [r7, #8]
 80073c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80073c2:	f000 fa0b 	bl	80077dc <prvCopyDataToQueue>
 80073c6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80073c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d010      	beq.n	80073f2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80073d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d2:	3324      	adds	r3, #36	; 0x24
 80073d4:	4618      	mov	r0, r3
 80073d6:	f001 f86b 	bl	80084b0 <xTaskRemoveFromEventList>
 80073da:	4603      	mov	r3, r0
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d013      	beq.n	8007408 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80073e0:	4b3f      	ldr	r3, [pc, #252]	; (80074e0 <xQueueGenericSend+0x1f8>)
 80073e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073e6:	601a      	str	r2, [r3, #0]
 80073e8:	f3bf 8f4f 	dsb	sy
 80073ec:	f3bf 8f6f 	isb	sy
 80073f0:	e00a      	b.n	8007408 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80073f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d007      	beq.n	8007408 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80073f8:	4b39      	ldr	r3, [pc, #228]	; (80074e0 <xQueueGenericSend+0x1f8>)
 80073fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073fe:	601a      	str	r2, [r3, #0]
 8007400:	f3bf 8f4f 	dsb	sy
 8007404:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007408:	f002 f894 	bl	8009534 <vPortExitCritical>
				return pdPASS;
 800740c:	2301      	movs	r3, #1
 800740e:	e063      	b.n	80074d8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d103      	bne.n	800741e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007416:	f002 f88d 	bl	8009534 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800741a:	2300      	movs	r3, #0
 800741c:	e05c      	b.n	80074d8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800741e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007420:	2b00      	cmp	r3, #0
 8007422:	d106      	bne.n	8007432 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007424:	f107 0314 	add.w	r3, r7, #20
 8007428:	4618      	mov	r0, r3
 800742a:	f001 f8a5 	bl	8008578 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800742e:	2301      	movs	r3, #1
 8007430:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007432:	f002 f87f 	bl	8009534 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007436:	f000 fe11 	bl	800805c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800743a:	f002 f84b 	bl	80094d4 <vPortEnterCritical>
 800743e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007440:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007444:	b25b      	sxtb	r3, r3
 8007446:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800744a:	d103      	bne.n	8007454 <xQueueGenericSend+0x16c>
 800744c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800744e:	2200      	movs	r2, #0
 8007450:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007456:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800745a:	b25b      	sxtb	r3, r3
 800745c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007460:	d103      	bne.n	800746a <xQueueGenericSend+0x182>
 8007462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007464:	2200      	movs	r2, #0
 8007466:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800746a:	f002 f863 	bl	8009534 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800746e:	1d3a      	adds	r2, r7, #4
 8007470:	f107 0314 	add.w	r3, r7, #20
 8007474:	4611      	mov	r1, r2
 8007476:	4618      	mov	r0, r3
 8007478:	f001 f894 	bl	80085a4 <xTaskCheckForTimeOut>
 800747c:	4603      	mov	r3, r0
 800747e:	2b00      	cmp	r3, #0
 8007480:	d124      	bne.n	80074cc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007482:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007484:	f000 faa2 	bl	80079cc <prvIsQueueFull>
 8007488:	4603      	mov	r3, r0
 800748a:	2b00      	cmp	r3, #0
 800748c:	d018      	beq.n	80074c0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800748e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007490:	3310      	adds	r3, #16
 8007492:	687a      	ldr	r2, [r7, #4]
 8007494:	4611      	mov	r1, r2
 8007496:	4618      	mov	r0, r3
 8007498:	f000 ffba 	bl	8008410 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800749c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800749e:	f000 fa2d 	bl	80078fc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80074a2:	f000 fde9 	bl	8008078 <xTaskResumeAll>
 80074a6:	4603      	mov	r3, r0
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	f47f af7c 	bne.w	80073a6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80074ae:	4b0c      	ldr	r3, [pc, #48]	; (80074e0 <xQueueGenericSend+0x1f8>)
 80074b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074b4:	601a      	str	r2, [r3, #0]
 80074b6:	f3bf 8f4f 	dsb	sy
 80074ba:	f3bf 8f6f 	isb	sy
 80074be:	e772      	b.n	80073a6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80074c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80074c2:	f000 fa1b 	bl	80078fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80074c6:	f000 fdd7 	bl	8008078 <xTaskResumeAll>
 80074ca:	e76c      	b.n	80073a6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80074cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80074ce:	f000 fa15 	bl	80078fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80074d2:	f000 fdd1 	bl	8008078 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80074d6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3738      	adds	r7, #56	; 0x38
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}
 80074e0:	e000ed04 	.word	0xe000ed04

080074e4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b090      	sub	sp, #64	; 0x40
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	60f8      	str	r0, [r7, #12]
 80074ec:	60b9      	str	r1, [r7, #8]
 80074ee:	607a      	str	r2, [r7, #4]
 80074f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80074f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d10a      	bne.n	8007512 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80074fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007500:	f383 8811 	msr	BASEPRI, r3
 8007504:	f3bf 8f6f 	isb	sy
 8007508:	f3bf 8f4f 	dsb	sy
 800750c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800750e:	bf00      	nop
 8007510:	e7fe      	b.n	8007510 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d103      	bne.n	8007520 <xQueueGenericSendFromISR+0x3c>
 8007518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800751a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800751c:	2b00      	cmp	r3, #0
 800751e:	d101      	bne.n	8007524 <xQueueGenericSendFromISR+0x40>
 8007520:	2301      	movs	r3, #1
 8007522:	e000      	b.n	8007526 <xQueueGenericSendFromISR+0x42>
 8007524:	2300      	movs	r3, #0
 8007526:	2b00      	cmp	r3, #0
 8007528:	d10a      	bne.n	8007540 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800752a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800752e:	f383 8811 	msr	BASEPRI, r3
 8007532:	f3bf 8f6f 	isb	sy
 8007536:	f3bf 8f4f 	dsb	sy
 800753a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800753c:	bf00      	nop
 800753e:	e7fe      	b.n	800753e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	2b02      	cmp	r3, #2
 8007544:	d103      	bne.n	800754e <xQueueGenericSendFromISR+0x6a>
 8007546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800754a:	2b01      	cmp	r3, #1
 800754c:	d101      	bne.n	8007552 <xQueueGenericSendFromISR+0x6e>
 800754e:	2301      	movs	r3, #1
 8007550:	e000      	b.n	8007554 <xQueueGenericSendFromISR+0x70>
 8007552:	2300      	movs	r3, #0
 8007554:	2b00      	cmp	r3, #0
 8007556:	d10a      	bne.n	800756e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800755c:	f383 8811 	msr	BASEPRI, r3
 8007560:	f3bf 8f6f 	isb	sy
 8007564:	f3bf 8f4f 	dsb	sy
 8007568:	623b      	str	r3, [r7, #32]
}
 800756a:	bf00      	nop
 800756c:	e7fe      	b.n	800756c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800756e:	f002 f893 	bl	8009698 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007572:	f3ef 8211 	mrs	r2, BASEPRI
 8007576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800757a:	f383 8811 	msr	BASEPRI, r3
 800757e:	f3bf 8f6f 	isb	sy
 8007582:	f3bf 8f4f 	dsb	sy
 8007586:	61fa      	str	r2, [r7, #28]
 8007588:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800758a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800758c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800758e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007590:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007596:	429a      	cmp	r2, r3
 8007598:	d302      	bcc.n	80075a0 <xQueueGenericSendFromISR+0xbc>
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	2b02      	cmp	r3, #2
 800759e:	d12f      	bne.n	8007600 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80075a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80075a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80075aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ae:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80075b0:	683a      	ldr	r2, [r7, #0]
 80075b2:	68b9      	ldr	r1, [r7, #8]
 80075b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80075b6:	f000 f911 	bl	80077dc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80075ba:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80075be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075c2:	d112      	bne.n	80075ea <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80075c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d016      	beq.n	80075fa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80075cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ce:	3324      	adds	r3, #36	; 0x24
 80075d0:	4618      	mov	r0, r3
 80075d2:	f000 ff6d 	bl	80084b0 <xTaskRemoveFromEventList>
 80075d6:	4603      	mov	r3, r0
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d00e      	beq.n	80075fa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d00b      	beq.n	80075fa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2201      	movs	r2, #1
 80075e6:	601a      	str	r2, [r3, #0]
 80075e8:	e007      	b.n	80075fa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80075ea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80075ee:	3301      	adds	r3, #1
 80075f0:	b2db      	uxtb	r3, r3
 80075f2:	b25a      	sxtb	r2, r3
 80075f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80075fa:	2301      	movs	r3, #1
 80075fc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80075fe:	e001      	b.n	8007604 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007600:	2300      	movs	r3, #0
 8007602:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007606:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800760e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007610:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007612:	4618      	mov	r0, r3
 8007614:	3740      	adds	r7, #64	; 0x40
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}
	...

0800761c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b08c      	sub	sp, #48	; 0x30
 8007620:	af00      	add	r7, sp, #0
 8007622:	60f8      	str	r0, [r7, #12]
 8007624:	60b9      	str	r1, [r7, #8]
 8007626:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007628:	2300      	movs	r3, #0
 800762a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007632:	2b00      	cmp	r3, #0
 8007634:	d10a      	bne.n	800764c <xQueueReceive+0x30>
	__asm volatile
 8007636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800763a:	f383 8811 	msr	BASEPRI, r3
 800763e:	f3bf 8f6f 	isb	sy
 8007642:	f3bf 8f4f 	dsb	sy
 8007646:	623b      	str	r3, [r7, #32]
}
 8007648:	bf00      	nop
 800764a:	e7fe      	b.n	800764a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d103      	bne.n	800765a <xQueueReceive+0x3e>
 8007652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007656:	2b00      	cmp	r3, #0
 8007658:	d101      	bne.n	800765e <xQueueReceive+0x42>
 800765a:	2301      	movs	r3, #1
 800765c:	e000      	b.n	8007660 <xQueueReceive+0x44>
 800765e:	2300      	movs	r3, #0
 8007660:	2b00      	cmp	r3, #0
 8007662:	d10a      	bne.n	800767a <xQueueReceive+0x5e>
	__asm volatile
 8007664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007668:	f383 8811 	msr	BASEPRI, r3
 800766c:	f3bf 8f6f 	isb	sy
 8007670:	f3bf 8f4f 	dsb	sy
 8007674:	61fb      	str	r3, [r7, #28]
}
 8007676:	bf00      	nop
 8007678:	e7fe      	b.n	8007678 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800767a:	f001 f8db 	bl	8008834 <xTaskGetSchedulerState>
 800767e:	4603      	mov	r3, r0
 8007680:	2b00      	cmp	r3, #0
 8007682:	d102      	bne.n	800768a <xQueueReceive+0x6e>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d101      	bne.n	800768e <xQueueReceive+0x72>
 800768a:	2301      	movs	r3, #1
 800768c:	e000      	b.n	8007690 <xQueueReceive+0x74>
 800768e:	2300      	movs	r3, #0
 8007690:	2b00      	cmp	r3, #0
 8007692:	d10a      	bne.n	80076aa <xQueueReceive+0x8e>
	__asm volatile
 8007694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007698:	f383 8811 	msr	BASEPRI, r3
 800769c:	f3bf 8f6f 	isb	sy
 80076a0:	f3bf 8f4f 	dsb	sy
 80076a4:	61bb      	str	r3, [r7, #24]
}
 80076a6:	bf00      	nop
 80076a8:	e7fe      	b.n	80076a8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80076aa:	f001 ff13 	bl	80094d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80076ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076b2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80076b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d01f      	beq.n	80076fa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80076ba:	68b9      	ldr	r1, [r7, #8]
 80076bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076be:	f000 f8f7 	bl	80078b0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80076c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c4:	1e5a      	subs	r2, r3, #1
 80076c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076c8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80076ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076cc:	691b      	ldr	r3, [r3, #16]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d00f      	beq.n	80076f2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80076d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076d4:	3310      	adds	r3, #16
 80076d6:	4618      	mov	r0, r3
 80076d8:	f000 feea 	bl	80084b0 <xTaskRemoveFromEventList>
 80076dc:	4603      	mov	r3, r0
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d007      	beq.n	80076f2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80076e2:	4b3d      	ldr	r3, [pc, #244]	; (80077d8 <xQueueReceive+0x1bc>)
 80076e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076e8:	601a      	str	r2, [r3, #0]
 80076ea:	f3bf 8f4f 	dsb	sy
 80076ee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80076f2:	f001 ff1f 	bl	8009534 <vPortExitCritical>
				return pdPASS;
 80076f6:	2301      	movs	r3, #1
 80076f8:	e069      	b.n	80077ce <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d103      	bne.n	8007708 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007700:	f001 ff18 	bl	8009534 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007704:	2300      	movs	r3, #0
 8007706:	e062      	b.n	80077ce <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800770a:	2b00      	cmp	r3, #0
 800770c:	d106      	bne.n	800771c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800770e:	f107 0310 	add.w	r3, r7, #16
 8007712:	4618      	mov	r0, r3
 8007714:	f000 ff30 	bl	8008578 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007718:	2301      	movs	r3, #1
 800771a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800771c:	f001 ff0a 	bl	8009534 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007720:	f000 fc9c 	bl	800805c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007724:	f001 fed6 	bl	80094d4 <vPortEnterCritical>
 8007728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800772a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800772e:	b25b      	sxtb	r3, r3
 8007730:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007734:	d103      	bne.n	800773e <xQueueReceive+0x122>
 8007736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007738:	2200      	movs	r2, #0
 800773a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800773e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007740:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007744:	b25b      	sxtb	r3, r3
 8007746:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800774a:	d103      	bne.n	8007754 <xQueueReceive+0x138>
 800774c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800774e:	2200      	movs	r2, #0
 8007750:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007754:	f001 feee 	bl	8009534 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007758:	1d3a      	adds	r2, r7, #4
 800775a:	f107 0310 	add.w	r3, r7, #16
 800775e:	4611      	mov	r1, r2
 8007760:	4618      	mov	r0, r3
 8007762:	f000 ff1f 	bl	80085a4 <xTaskCheckForTimeOut>
 8007766:	4603      	mov	r3, r0
 8007768:	2b00      	cmp	r3, #0
 800776a:	d123      	bne.n	80077b4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800776c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800776e:	f000 f917 	bl	80079a0 <prvIsQueueEmpty>
 8007772:	4603      	mov	r3, r0
 8007774:	2b00      	cmp	r3, #0
 8007776:	d017      	beq.n	80077a8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800777a:	3324      	adds	r3, #36	; 0x24
 800777c:	687a      	ldr	r2, [r7, #4]
 800777e:	4611      	mov	r1, r2
 8007780:	4618      	mov	r0, r3
 8007782:	f000 fe45 	bl	8008410 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007786:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007788:	f000 f8b8 	bl	80078fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800778c:	f000 fc74 	bl	8008078 <xTaskResumeAll>
 8007790:	4603      	mov	r3, r0
 8007792:	2b00      	cmp	r3, #0
 8007794:	d189      	bne.n	80076aa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007796:	4b10      	ldr	r3, [pc, #64]	; (80077d8 <xQueueReceive+0x1bc>)
 8007798:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800779c:	601a      	str	r2, [r3, #0]
 800779e:	f3bf 8f4f 	dsb	sy
 80077a2:	f3bf 8f6f 	isb	sy
 80077a6:	e780      	b.n	80076aa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80077a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077aa:	f000 f8a7 	bl	80078fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80077ae:	f000 fc63 	bl	8008078 <xTaskResumeAll>
 80077b2:	e77a      	b.n	80076aa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80077b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077b6:	f000 f8a1 	bl	80078fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80077ba:	f000 fc5d 	bl	8008078 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80077be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077c0:	f000 f8ee 	bl	80079a0 <prvIsQueueEmpty>
 80077c4:	4603      	mov	r3, r0
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	f43f af6f 	beq.w	80076aa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80077cc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3730      	adds	r7, #48	; 0x30
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}
 80077d6:	bf00      	nop
 80077d8:	e000ed04 	.word	0xe000ed04

080077dc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b086      	sub	sp, #24
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	60f8      	str	r0, [r7, #12]
 80077e4:	60b9      	str	r1, [r7, #8]
 80077e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80077e8:	2300      	movs	r3, #0
 80077ea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077f0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d10d      	bne.n	8007816 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d14d      	bne.n	800789e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	689b      	ldr	r3, [r3, #8]
 8007806:	4618      	mov	r0, r3
 8007808:	f001 f832 	bl	8008870 <xTaskPriorityDisinherit>
 800780c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	2200      	movs	r2, #0
 8007812:	609a      	str	r2, [r3, #8]
 8007814:	e043      	b.n	800789e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d119      	bne.n	8007850 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	6858      	ldr	r0, [r3, #4]
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007824:	461a      	mov	r2, r3
 8007826:	68b9      	ldr	r1, [r7, #8]
 8007828:	f002 ff73 	bl	800a712 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	685a      	ldr	r2, [r3, #4]
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007834:	441a      	add	r2, r3
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	685a      	ldr	r2, [r3, #4]
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	689b      	ldr	r3, [r3, #8]
 8007842:	429a      	cmp	r2, r3
 8007844:	d32b      	bcc.n	800789e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681a      	ldr	r2, [r3, #0]
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	605a      	str	r2, [r3, #4]
 800784e:	e026      	b.n	800789e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	68d8      	ldr	r0, [r3, #12]
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007858:	461a      	mov	r2, r3
 800785a:	68b9      	ldr	r1, [r7, #8]
 800785c:	f002 ff59 	bl	800a712 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	68da      	ldr	r2, [r3, #12]
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007868:	425b      	negs	r3, r3
 800786a:	441a      	add	r2, r3
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	68da      	ldr	r2, [r3, #12]
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	429a      	cmp	r2, r3
 800787a:	d207      	bcs.n	800788c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	689a      	ldr	r2, [r3, #8]
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007884:	425b      	negs	r3, r3
 8007886:	441a      	add	r2, r3
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2b02      	cmp	r3, #2
 8007890:	d105      	bne.n	800789e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d002      	beq.n	800789e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	3b01      	subs	r3, #1
 800789c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	1c5a      	adds	r2, r3, #1
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80078a6:	697b      	ldr	r3, [r7, #20]
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3718      	adds	r7, #24
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}

080078b0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b082      	sub	sp, #8
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
 80078b8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d018      	beq.n	80078f4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	68da      	ldr	r2, [r3, #12]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ca:	441a      	add	r2, r3
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	68da      	ldr	r2, [r3, #12]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	689b      	ldr	r3, [r3, #8]
 80078d8:	429a      	cmp	r2, r3
 80078da:	d303      	bcc.n	80078e4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681a      	ldr	r2, [r3, #0]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	68d9      	ldr	r1, [r3, #12]
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ec:	461a      	mov	r2, r3
 80078ee:	6838      	ldr	r0, [r7, #0]
 80078f0:	f002 ff0f 	bl	800a712 <memcpy>
	}
}
 80078f4:	bf00      	nop
 80078f6:	3708      	adds	r7, #8
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}

080078fc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b084      	sub	sp, #16
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007904:	f001 fde6 	bl	80094d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800790e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007910:	e011      	b.n	8007936 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007916:	2b00      	cmp	r3, #0
 8007918:	d012      	beq.n	8007940 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	3324      	adds	r3, #36	; 0x24
 800791e:	4618      	mov	r0, r3
 8007920:	f000 fdc6 	bl	80084b0 <xTaskRemoveFromEventList>
 8007924:	4603      	mov	r3, r0
 8007926:	2b00      	cmp	r3, #0
 8007928:	d001      	beq.n	800792e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800792a:	f000 fe9d 	bl	8008668 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800792e:	7bfb      	ldrb	r3, [r7, #15]
 8007930:	3b01      	subs	r3, #1
 8007932:	b2db      	uxtb	r3, r3
 8007934:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800793a:	2b00      	cmp	r3, #0
 800793c:	dce9      	bgt.n	8007912 <prvUnlockQueue+0x16>
 800793e:	e000      	b.n	8007942 <prvUnlockQueue+0x46>
					break;
 8007940:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	22ff      	movs	r2, #255	; 0xff
 8007946:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800794a:	f001 fdf3 	bl	8009534 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800794e:	f001 fdc1 	bl	80094d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007958:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800795a:	e011      	b.n	8007980 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	691b      	ldr	r3, [r3, #16]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d012      	beq.n	800798a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	3310      	adds	r3, #16
 8007968:	4618      	mov	r0, r3
 800796a:	f000 fda1 	bl	80084b0 <xTaskRemoveFromEventList>
 800796e:	4603      	mov	r3, r0
 8007970:	2b00      	cmp	r3, #0
 8007972:	d001      	beq.n	8007978 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007974:	f000 fe78 	bl	8008668 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007978:	7bbb      	ldrb	r3, [r7, #14]
 800797a:	3b01      	subs	r3, #1
 800797c:	b2db      	uxtb	r3, r3
 800797e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007980:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007984:	2b00      	cmp	r3, #0
 8007986:	dce9      	bgt.n	800795c <prvUnlockQueue+0x60>
 8007988:	e000      	b.n	800798c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800798a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	22ff      	movs	r2, #255	; 0xff
 8007990:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007994:	f001 fdce 	bl	8009534 <vPortExitCritical>
}
 8007998:	bf00      	nop
 800799a:	3710      	adds	r7, #16
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}

080079a0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b084      	sub	sp, #16
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80079a8:	f001 fd94 	bl	80094d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d102      	bne.n	80079ba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80079b4:	2301      	movs	r3, #1
 80079b6:	60fb      	str	r3, [r7, #12]
 80079b8:	e001      	b.n	80079be <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80079ba:	2300      	movs	r3, #0
 80079bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80079be:	f001 fdb9 	bl	8009534 <vPortExitCritical>

	return xReturn;
 80079c2:	68fb      	ldr	r3, [r7, #12]
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3710      	adds	r7, #16
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}

080079cc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b084      	sub	sp, #16
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80079d4:	f001 fd7e 	bl	80094d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079e0:	429a      	cmp	r2, r3
 80079e2:	d102      	bne.n	80079ea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80079e4:	2301      	movs	r3, #1
 80079e6:	60fb      	str	r3, [r7, #12]
 80079e8:	e001      	b.n	80079ee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80079ea:	2300      	movs	r3, #0
 80079ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80079ee:	f001 fda1 	bl	8009534 <vPortExitCritical>

	return xReturn;
 80079f2:	68fb      	ldr	r3, [r7, #12]
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3710      	adds	r7, #16
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}

080079fc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80079fc:	b480      	push	{r7}
 80079fe:	b085      	sub	sp, #20
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
 8007a04:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007a06:	2300      	movs	r3, #0
 8007a08:	60fb      	str	r3, [r7, #12]
 8007a0a:	e014      	b.n	8007a36 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007a0c:	4a0f      	ldr	r2, [pc, #60]	; (8007a4c <vQueueAddToRegistry+0x50>)
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d10b      	bne.n	8007a30 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007a18:	490c      	ldr	r1, [pc, #48]	; (8007a4c <vQueueAddToRegistry+0x50>)
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	683a      	ldr	r2, [r7, #0]
 8007a1e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007a22:	4a0a      	ldr	r2, [pc, #40]	; (8007a4c <vQueueAddToRegistry+0x50>)
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	00db      	lsls	r3, r3, #3
 8007a28:	4413      	add	r3, r2
 8007a2a:	687a      	ldr	r2, [r7, #4]
 8007a2c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007a2e:	e006      	b.n	8007a3e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	3301      	adds	r3, #1
 8007a34:	60fb      	str	r3, [r7, #12]
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	2b07      	cmp	r3, #7
 8007a3a:	d9e7      	bls.n	8007a0c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007a3c:	bf00      	nop
 8007a3e:	bf00      	nop
 8007a40:	3714      	adds	r7, #20
 8007a42:	46bd      	mov	sp, r7
 8007a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a48:	4770      	bx	lr
 8007a4a:	bf00      	nop
 8007a4c:	20000c04 	.word	0x20000c04

08007a50 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b086      	sub	sp, #24
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	60f8      	str	r0, [r7, #12]
 8007a58:	60b9      	str	r1, [r7, #8]
 8007a5a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007a60:	f001 fd38 	bl	80094d4 <vPortEnterCritical>
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007a6a:	b25b      	sxtb	r3, r3
 8007a6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a70:	d103      	bne.n	8007a7a <vQueueWaitForMessageRestricted+0x2a>
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	2200      	movs	r2, #0
 8007a76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a80:	b25b      	sxtb	r3, r3
 8007a82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a86:	d103      	bne.n	8007a90 <vQueueWaitForMessageRestricted+0x40>
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a90:	f001 fd50 	bl	8009534 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d106      	bne.n	8007aaa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	3324      	adds	r3, #36	; 0x24
 8007aa0:	687a      	ldr	r2, [r7, #4]
 8007aa2:	68b9      	ldr	r1, [r7, #8]
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f000 fcd7 	bl	8008458 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007aaa:	6978      	ldr	r0, [r7, #20]
 8007aac:	f7ff ff26 	bl	80078fc <prvUnlockQueue>
	}
 8007ab0:	bf00      	nop
 8007ab2:	3718      	adds	r7, #24
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}

08007ab8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b08e      	sub	sp, #56	; 0x38
 8007abc:	af04      	add	r7, sp, #16
 8007abe:	60f8      	str	r0, [r7, #12]
 8007ac0:	60b9      	str	r1, [r7, #8]
 8007ac2:	607a      	str	r2, [r7, #4]
 8007ac4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d10a      	bne.n	8007ae2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8007acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad0:	f383 8811 	msr	BASEPRI, r3
 8007ad4:	f3bf 8f6f 	isb	sy
 8007ad8:	f3bf 8f4f 	dsb	sy
 8007adc:	623b      	str	r3, [r7, #32]
}
 8007ade:	bf00      	nop
 8007ae0:	e7fe      	b.n	8007ae0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d10a      	bne.n	8007afe <xTaskCreateStatic+0x46>
	__asm volatile
 8007ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aec:	f383 8811 	msr	BASEPRI, r3
 8007af0:	f3bf 8f6f 	isb	sy
 8007af4:	f3bf 8f4f 	dsb	sy
 8007af8:	61fb      	str	r3, [r7, #28]
}
 8007afa:	bf00      	nop
 8007afc:	e7fe      	b.n	8007afc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007afe:	23a8      	movs	r3, #168	; 0xa8
 8007b00:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	2ba8      	cmp	r3, #168	; 0xa8
 8007b06:	d00a      	beq.n	8007b1e <xTaskCreateStatic+0x66>
	__asm volatile
 8007b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b0c:	f383 8811 	msr	BASEPRI, r3
 8007b10:	f3bf 8f6f 	isb	sy
 8007b14:	f3bf 8f4f 	dsb	sy
 8007b18:	61bb      	str	r3, [r7, #24]
}
 8007b1a:	bf00      	nop
 8007b1c:	e7fe      	b.n	8007b1c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007b1e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d01e      	beq.n	8007b64 <xTaskCreateStatic+0xac>
 8007b26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d01b      	beq.n	8007b64 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b2e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b34:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b38:	2202      	movs	r2, #2
 8007b3a:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007b3e:	2300      	movs	r3, #0
 8007b40:	9303      	str	r3, [sp, #12]
 8007b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b44:	9302      	str	r3, [sp, #8]
 8007b46:	f107 0314 	add.w	r3, r7, #20
 8007b4a:	9301      	str	r3, [sp, #4]
 8007b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b4e:	9300      	str	r3, [sp, #0]
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	687a      	ldr	r2, [r7, #4]
 8007b54:	68b9      	ldr	r1, [r7, #8]
 8007b56:	68f8      	ldr	r0, [r7, #12]
 8007b58:	f000 f850 	bl	8007bfc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007b5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007b5e:	f000 f8f3 	bl	8007d48 <prvAddNewTaskToReadyList>
 8007b62:	e001      	b.n	8007b68 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007b64:	2300      	movs	r3, #0
 8007b66:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007b68:	697b      	ldr	r3, [r7, #20]
	}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3728      	adds	r7, #40	; 0x28
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}

08007b72 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007b72:	b580      	push	{r7, lr}
 8007b74:	b08c      	sub	sp, #48	; 0x30
 8007b76:	af04      	add	r7, sp, #16
 8007b78:	60f8      	str	r0, [r7, #12]
 8007b7a:	60b9      	str	r1, [r7, #8]
 8007b7c:	603b      	str	r3, [r7, #0]
 8007b7e:	4613      	mov	r3, r2
 8007b80:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007b82:	88fb      	ldrh	r3, [r7, #6]
 8007b84:	009b      	lsls	r3, r3, #2
 8007b86:	4618      	mov	r0, r3
 8007b88:	f001 fdc6 	bl	8009718 <pvPortMalloc>
 8007b8c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d00e      	beq.n	8007bb2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007b94:	20a8      	movs	r0, #168	; 0xa8
 8007b96:	f001 fdbf 	bl	8009718 <pvPortMalloc>
 8007b9a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007b9c:	69fb      	ldr	r3, [r7, #28]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d003      	beq.n	8007baa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007ba2:	69fb      	ldr	r3, [r7, #28]
 8007ba4:	697a      	ldr	r2, [r7, #20]
 8007ba6:	631a      	str	r2, [r3, #48]	; 0x30
 8007ba8:	e005      	b.n	8007bb6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007baa:	6978      	ldr	r0, [r7, #20]
 8007bac:	f001 fe80 	bl	80098b0 <vPortFree>
 8007bb0:	e001      	b.n	8007bb6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007bb6:	69fb      	ldr	r3, [r7, #28]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d017      	beq.n	8007bec <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007bbc:	69fb      	ldr	r3, [r7, #28]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007bc4:	88fa      	ldrh	r2, [r7, #6]
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	9303      	str	r3, [sp, #12]
 8007bca:	69fb      	ldr	r3, [r7, #28]
 8007bcc:	9302      	str	r3, [sp, #8]
 8007bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bd0:	9301      	str	r3, [sp, #4]
 8007bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd4:	9300      	str	r3, [sp, #0]
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	68b9      	ldr	r1, [r7, #8]
 8007bda:	68f8      	ldr	r0, [r7, #12]
 8007bdc:	f000 f80e 	bl	8007bfc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007be0:	69f8      	ldr	r0, [r7, #28]
 8007be2:	f000 f8b1 	bl	8007d48 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007be6:	2301      	movs	r3, #1
 8007be8:	61bb      	str	r3, [r7, #24]
 8007bea:	e002      	b.n	8007bf2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007bec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007bf0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007bf2:	69bb      	ldr	r3, [r7, #24]
	}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3720      	adds	r7, #32
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}

08007bfc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b088      	sub	sp, #32
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	60f8      	str	r0, [r7, #12]
 8007c04:	60b9      	str	r1, [r7, #8]
 8007c06:	607a      	str	r2, [r7, #4]
 8007c08:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c0c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	009b      	lsls	r3, r3, #2
 8007c12:	461a      	mov	r2, r3
 8007c14:	21a5      	movs	r1, #165	; 0xa5
 8007c16:	f002 fced 	bl	800a5f4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007c24:	3b01      	subs	r3, #1
 8007c26:	009b      	lsls	r3, r3, #2
 8007c28:	4413      	add	r3, r2
 8007c2a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007c2c:	69bb      	ldr	r3, [r7, #24]
 8007c2e:	f023 0307 	bic.w	r3, r3, #7
 8007c32:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007c34:	69bb      	ldr	r3, [r7, #24]
 8007c36:	f003 0307 	and.w	r3, r3, #7
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d00a      	beq.n	8007c54 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c42:	f383 8811 	msr	BASEPRI, r3
 8007c46:	f3bf 8f6f 	isb	sy
 8007c4a:	f3bf 8f4f 	dsb	sy
 8007c4e:	617b      	str	r3, [r7, #20]
}
 8007c50:	bf00      	nop
 8007c52:	e7fe      	b.n	8007c52 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d01f      	beq.n	8007c9a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	61fb      	str	r3, [r7, #28]
 8007c5e:	e012      	b.n	8007c86 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007c60:	68ba      	ldr	r2, [r7, #8]
 8007c62:	69fb      	ldr	r3, [r7, #28]
 8007c64:	4413      	add	r3, r2
 8007c66:	7819      	ldrb	r1, [r3, #0]
 8007c68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c6a:	69fb      	ldr	r3, [r7, #28]
 8007c6c:	4413      	add	r3, r2
 8007c6e:	3334      	adds	r3, #52	; 0x34
 8007c70:	460a      	mov	r2, r1
 8007c72:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007c74:	68ba      	ldr	r2, [r7, #8]
 8007c76:	69fb      	ldr	r3, [r7, #28]
 8007c78:	4413      	add	r3, r2
 8007c7a:	781b      	ldrb	r3, [r3, #0]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d006      	beq.n	8007c8e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007c80:	69fb      	ldr	r3, [r7, #28]
 8007c82:	3301      	adds	r3, #1
 8007c84:	61fb      	str	r3, [r7, #28]
 8007c86:	69fb      	ldr	r3, [r7, #28]
 8007c88:	2b0f      	cmp	r3, #15
 8007c8a:	d9e9      	bls.n	8007c60 <prvInitialiseNewTask+0x64>
 8007c8c:	e000      	b.n	8007c90 <prvInitialiseNewTask+0x94>
			{
				break;
 8007c8e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c92:	2200      	movs	r2, #0
 8007c94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007c98:	e003      	b.n	8007ca2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ca4:	2b37      	cmp	r3, #55	; 0x37
 8007ca6:	d901      	bls.n	8007cac <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007ca8:	2337      	movs	r3, #55	; 0x37
 8007caa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007cb0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007cb6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cba:	2200      	movs	r2, #0
 8007cbc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cc0:	3304      	adds	r3, #4
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f7ff f93e 	bl	8006f44 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cca:	3318      	adds	r3, #24
 8007ccc:	4618      	mov	r0, r3
 8007cce:	f7ff f939 	bl	8006f44 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cd6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cda:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ce6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cea:	2200      	movs	r2, #0
 8007cec:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cfa:	3354      	adds	r3, #84	; 0x54
 8007cfc:	224c      	movs	r2, #76	; 0x4c
 8007cfe:	2100      	movs	r1, #0
 8007d00:	4618      	mov	r0, r3
 8007d02:	f002 fc77 	bl	800a5f4 <memset>
 8007d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d08:	4a0c      	ldr	r2, [pc, #48]	; (8007d3c <prvInitialiseNewTask+0x140>)
 8007d0a:	659a      	str	r2, [r3, #88]	; 0x58
 8007d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d0e:	4a0c      	ldr	r2, [pc, #48]	; (8007d40 <prvInitialiseNewTask+0x144>)
 8007d10:	65da      	str	r2, [r3, #92]	; 0x5c
 8007d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d14:	4a0b      	ldr	r2, [pc, #44]	; (8007d44 <prvInitialiseNewTask+0x148>)
 8007d16:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007d18:	683a      	ldr	r2, [r7, #0]
 8007d1a:	68f9      	ldr	r1, [r7, #12]
 8007d1c:	69b8      	ldr	r0, [r7, #24]
 8007d1e:	f001 faab 	bl	8009278 <pxPortInitialiseStack>
 8007d22:	4602      	mov	r2, r0
 8007d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d26:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d002      	beq.n	8007d34 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d32:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007d34:	bf00      	nop
 8007d36:	3720      	adds	r7, #32
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}
 8007d3c:	20002620 	.word	0x20002620
 8007d40:	20002688 	.word	0x20002688
 8007d44:	200026f0 	.word	0x200026f0

08007d48 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b082      	sub	sp, #8
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007d50:	f001 fbc0 	bl	80094d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007d54:	4b2d      	ldr	r3, [pc, #180]	; (8007e0c <prvAddNewTaskToReadyList+0xc4>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	3301      	adds	r3, #1
 8007d5a:	4a2c      	ldr	r2, [pc, #176]	; (8007e0c <prvAddNewTaskToReadyList+0xc4>)
 8007d5c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007d5e:	4b2c      	ldr	r3, [pc, #176]	; (8007e10 <prvAddNewTaskToReadyList+0xc8>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d109      	bne.n	8007d7a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007d66:	4a2a      	ldr	r2, [pc, #168]	; (8007e10 <prvAddNewTaskToReadyList+0xc8>)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007d6c:	4b27      	ldr	r3, [pc, #156]	; (8007e0c <prvAddNewTaskToReadyList+0xc4>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d110      	bne.n	8007d96 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007d74:	f000 fc9c 	bl	80086b0 <prvInitialiseTaskLists>
 8007d78:	e00d      	b.n	8007d96 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007d7a:	4b26      	ldr	r3, [pc, #152]	; (8007e14 <prvAddNewTaskToReadyList+0xcc>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d109      	bne.n	8007d96 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007d82:	4b23      	ldr	r3, [pc, #140]	; (8007e10 <prvAddNewTaskToReadyList+0xc8>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d8c:	429a      	cmp	r2, r3
 8007d8e:	d802      	bhi.n	8007d96 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007d90:	4a1f      	ldr	r2, [pc, #124]	; (8007e10 <prvAddNewTaskToReadyList+0xc8>)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007d96:	4b20      	ldr	r3, [pc, #128]	; (8007e18 <prvAddNewTaskToReadyList+0xd0>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	3301      	adds	r3, #1
 8007d9c:	4a1e      	ldr	r2, [pc, #120]	; (8007e18 <prvAddNewTaskToReadyList+0xd0>)
 8007d9e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007da0:	4b1d      	ldr	r3, [pc, #116]	; (8007e18 <prvAddNewTaskToReadyList+0xd0>)
 8007da2:	681a      	ldr	r2, [r3, #0]
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dac:	4b1b      	ldr	r3, [pc, #108]	; (8007e1c <prvAddNewTaskToReadyList+0xd4>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	429a      	cmp	r2, r3
 8007db2:	d903      	bls.n	8007dbc <prvAddNewTaskToReadyList+0x74>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007db8:	4a18      	ldr	r2, [pc, #96]	; (8007e1c <prvAddNewTaskToReadyList+0xd4>)
 8007dba:	6013      	str	r3, [r2, #0]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dc0:	4613      	mov	r3, r2
 8007dc2:	009b      	lsls	r3, r3, #2
 8007dc4:	4413      	add	r3, r2
 8007dc6:	009b      	lsls	r3, r3, #2
 8007dc8:	4a15      	ldr	r2, [pc, #84]	; (8007e20 <prvAddNewTaskToReadyList+0xd8>)
 8007dca:	441a      	add	r2, r3
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	3304      	adds	r3, #4
 8007dd0:	4619      	mov	r1, r3
 8007dd2:	4610      	mov	r0, r2
 8007dd4:	f7ff f8c3 	bl	8006f5e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007dd8:	f001 fbac 	bl	8009534 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007ddc:	4b0d      	ldr	r3, [pc, #52]	; (8007e14 <prvAddNewTaskToReadyList+0xcc>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d00e      	beq.n	8007e02 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007de4:	4b0a      	ldr	r3, [pc, #40]	; (8007e10 <prvAddNewTaskToReadyList+0xc8>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dee:	429a      	cmp	r2, r3
 8007df0:	d207      	bcs.n	8007e02 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007df2:	4b0c      	ldr	r3, [pc, #48]	; (8007e24 <prvAddNewTaskToReadyList+0xdc>)
 8007df4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007df8:	601a      	str	r2, [r3, #0]
 8007dfa:	f3bf 8f4f 	dsb	sy
 8007dfe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e02:	bf00      	nop
 8007e04:	3708      	adds	r7, #8
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}
 8007e0a:	bf00      	nop
 8007e0c:	20001118 	.word	0x20001118
 8007e10:	20000c44 	.word	0x20000c44
 8007e14:	20001124 	.word	0x20001124
 8007e18:	20001134 	.word	0x20001134
 8007e1c:	20001120 	.word	0x20001120
 8007e20:	20000c48 	.word	0x20000c48
 8007e24:	e000ed04 	.word	0xe000ed04

08007e28 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b084      	sub	sp, #16
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007e30:	2300      	movs	r3, #0
 8007e32:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d017      	beq.n	8007e6a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007e3a:	4b13      	ldr	r3, [pc, #76]	; (8007e88 <vTaskDelay+0x60>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d00a      	beq.n	8007e58 <vTaskDelay+0x30>
	__asm volatile
 8007e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e46:	f383 8811 	msr	BASEPRI, r3
 8007e4a:	f3bf 8f6f 	isb	sy
 8007e4e:	f3bf 8f4f 	dsb	sy
 8007e52:	60bb      	str	r3, [r7, #8]
}
 8007e54:	bf00      	nop
 8007e56:	e7fe      	b.n	8007e56 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007e58:	f000 f900 	bl	800805c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007e5c:	2100      	movs	r1, #0
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f000 fe68 	bl	8008b34 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007e64:	f000 f908 	bl	8008078 <xTaskResumeAll>
 8007e68:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d107      	bne.n	8007e80 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007e70:	4b06      	ldr	r3, [pc, #24]	; (8007e8c <vTaskDelay+0x64>)
 8007e72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e76:	601a      	str	r2, [r3, #0]
 8007e78:	f3bf 8f4f 	dsb	sy
 8007e7c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007e80:	bf00      	nop
 8007e82:	3710      	adds	r7, #16
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}
 8007e88:	20001140 	.word	0x20001140
 8007e8c:	e000ed04 	.word	0xe000ed04

08007e90 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b084      	sub	sp, #16
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8007e98:	f001 fb1c 	bl	80094d4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d102      	bne.n	8007ea8 <vTaskSuspend+0x18>
 8007ea2:	4b30      	ldr	r3, [pc, #192]	; (8007f64 <vTaskSuspend+0xd4>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	e000      	b.n	8007eaa <vTaskSuspend+0x1a>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	3304      	adds	r3, #4
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	f7ff f8b1 	bl	8007018 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d004      	beq.n	8007ec8 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	3318      	adds	r3, #24
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f7ff f8a8 	bl	8007018 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	3304      	adds	r3, #4
 8007ecc:	4619      	mov	r1, r3
 8007ece:	4826      	ldr	r0, [pc, #152]	; (8007f68 <vTaskSuspend+0xd8>)
 8007ed0:	f7ff f845 	bl	8006f5e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8007eda:	b2db      	uxtb	r3, r3
 8007edc:	2b01      	cmp	r3, #1
 8007ede:	d103      	bne.n	8007ee8 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8007ee8:	f001 fb24 	bl	8009534 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8007eec:	4b1f      	ldr	r3, [pc, #124]	; (8007f6c <vTaskSuspend+0xdc>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d005      	beq.n	8007f00 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8007ef4:	f001 faee 	bl	80094d4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8007ef8:	f000 fc7c 	bl	80087f4 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8007efc:	f001 fb1a 	bl	8009534 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8007f00:	4b18      	ldr	r3, [pc, #96]	; (8007f64 <vTaskSuspend+0xd4>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	68fa      	ldr	r2, [r7, #12]
 8007f06:	429a      	cmp	r2, r3
 8007f08:	d127      	bne.n	8007f5a <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 8007f0a:	4b18      	ldr	r3, [pc, #96]	; (8007f6c <vTaskSuspend+0xdc>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d017      	beq.n	8007f42 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8007f12:	4b17      	ldr	r3, [pc, #92]	; (8007f70 <vTaskSuspend+0xe0>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d00a      	beq.n	8007f30 <vTaskSuspend+0xa0>
	__asm volatile
 8007f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f1e:	f383 8811 	msr	BASEPRI, r3
 8007f22:	f3bf 8f6f 	isb	sy
 8007f26:	f3bf 8f4f 	dsb	sy
 8007f2a:	60bb      	str	r3, [r7, #8]
}
 8007f2c:	bf00      	nop
 8007f2e:	e7fe      	b.n	8007f2e <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8007f30:	4b10      	ldr	r3, [pc, #64]	; (8007f74 <vTaskSuspend+0xe4>)
 8007f32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f36:	601a      	str	r2, [r3, #0]
 8007f38:	f3bf 8f4f 	dsb	sy
 8007f3c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007f40:	e00b      	b.n	8007f5a <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8007f42:	4b09      	ldr	r3, [pc, #36]	; (8007f68 <vTaskSuspend+0xd8>)
 8007f44:	681a      	ldr	r2, [r3, #0]
 8007f46:	4b0c      	ldr	r3, [pc, #48]	; (8007f78 <vTaskSuspend+0xe8>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	d103      	bne.n	8007f56 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 8007f4e:	4b05      	ldr	r3, [pc, #20]	; (8007f64 <vTaskSuspend+0xd4>)
 8007f50:	2200      	movs	r2, #0
 8007f52:	601a      	str	r2, [r3, #0]
	}
 8007f54:	e001      	b.n	8007f5a <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8007f56:	f000 f9f7 	bl	8008348 <vTaskSwitchContext>
	}
 8007f5a:	bf00      	nop
 8007f5c:	3710      	adds	r7, #16
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}
 8007f62:	bf00      	nop
 8007f64:	20000c44 	.word	0x20000c44
 8007f68:	20001104 	.word	0x20001104
 8007f6c:	20001124 	.word	0x20001124
 8007f70:	20001140 	.word	0x20001140
 8007f74:	e000ed04 	.word	0xe000ed04
 8007f78:	20001118 	.word	0x20001118

08007f7c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b08a      	sub	sp, #40	; 0x28
 8007f80:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007f82:	2300      	movs	r3, #0
 8007f84:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007f86:	2300      	movs	r3, #0
 8007f88:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007f8a:	463a      	mov	r2, r7
 8007f8c:	1d39      	adds	r1, r7, #4
 8007f8e:	f107 0308 	add.w	r3, r7, #8
 8007f92:	4618      	mov	r0, r3
 8007f94:	f7fe ff82 	bl	8006e9c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007f98:	6839      	ldr	r1, [r7, #0]
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	68ba      	ldr	r2, [r7, #8]
 8007f9e:	9202      	str	r2, [sp, #8]
 8007fa0:	9301      	str	r3, [sp, #4]
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	9300      	str	r3, [sp, #0]
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	460a      	mov	r2, r1
 8007faa:	4924      	ldr	r1, [pc, #144]	; (800803c <vTaskStartScheduler+0xc0>)
 8007fac:	4824      	ldr	r0, [pc, #144]	; (8008040 <vTaskStartScheduler+0xc4>)
 8007fae:	f7ff fd83 	bl	8007ab8 <xTaskCreateStatic>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	4a23      	ldr	r2, [pc, #140]	; (8008044 <vTaskStartScheduler+0xc8>)
 8007fb6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007fb8:	4b22      	ldr	r3, [pc, #136]	; (8008044 <vTaskStartScheduler+0xc8>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d002      	beq.n	8007fc6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	617b      	str	r3, [r7, #20]
 8007fc4:	e001      	b.n	8007fca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	d102      	bne.n	8007fd6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007fd0:	f000 fe04 	bl	8008bdc <xTimerCreateTimerTask>
 8007fd4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	2b01      	cmp	r3, #1
 8007fda:	d11b      	bne.n	8008014 <vTaskStartScheduler+0x98>
	__asm volatile
 8007fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe0:	f383 8811 	msr	BASEPRI, r3
 8007fe4:	f3bf 8f6f 	isb	sy
 8007fe8:	f3bf 8f4f 	dsb	sy
 8007fec:	613b      	str	r3, [r7, #16]
}
 8007fee:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007ff0:	4b15      	ldr	r3, [pc, #84]	; (8008048 <vTaskStartScheduler+0xcc>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	3354      	adds	r3, #84	; 0x54
 8007ff6:	4a15      	ldr	r2, [pc, #84]	; (800804c <vTaskStartScheduler+0xd0>)
 8007ff8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007ffa:	4b15      	ldr	r3, [pc, #84]	; (8008050 <vTaskStartScheduler+0xd4>)
 8007ffc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008000:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008002:	4b14      	ldr	r3, [pc, #80]	; (8008054 <vTaskStartScheduler+0xd8>)
 8008004:	2201      	movs	r2, #1
 8008006:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008008:	4b13      	ldr	r3, [pc, #76]	; (8008058 <vTaskStartScheduler+0xdc>)
 800800a:	2200      	movs	r2, #0
 800800c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800800e:	f001 f9bf 	bl	8009390 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008012:	e00e      	b.n	8008032 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800801a:	d10a      	bne.n	8008032 <vTaskStartScheduler+0xb6>
	__asm volatile
 800801c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008020:	f383 8811 	msr	BASEPRI, r3
 8008024:	f3bf 8f6f 	isb	sy
 8008028:	f3bf 8f4f 	dsb	sy
 800802c:	60fb      	str	r3, [r7, #12]
}
 800802e:	bf00      	nop
 8008030:	e7fe      	b.n	8008030 <vTaskStartScheduler+0xb4>
}
 8008032:	bf00      	nop
 8008034:	3718      	adds	r7, #24
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}
 800803a:	bf00      	nop
 800803c:	0800d038 	.word	0x0800d038
 8008040:	08008681 	.word	0x08008681
 8008044:	2000113c 	.word	0x2000113c
 8008048:	20000c44 	.word	0x20000c44
 800804c:	20000068 	.word	0x20000068
 8008050:	20001138 	.word	0x20001138
 8008054:	20001124 	.word	0x20001124
 8008058:	2000111c 	.word	0x2000111c

0800805c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800805c:	b480      	push	{r7}
 800805e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008060:	4b04      	ldr	r3, [pc, #16]	; (8008074 <vTaskSuspendAll+0x18>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	3301      	adds	r3, #1
 8008066:	4a03      	ldr	r2, [pc, #12]	; (8008074 <vTaskSuspendAll+0x18>)
 8008068:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800806a:	bf00      	nop
 800806c:	46bd      	mov	sp, r7
 800806e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008072:	4770      	bx	lr
 8008074:	20001140 	.word	0x20001140

08008078 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b084      	sub	sp, #16
 800807c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800807e:	2300      	movs	r3, #0
 8008080:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008082:	2300      	movs	r3, #0
 8008084:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008086:	4b42      	ldr	r3, [pc, #264]	; (8008190 <xTaskResumeAll+0x118>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d10a      	bne.n	80080a4 <xTaskResumeAll+0x2c>
	__asm volatile
 800808e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008092:	f383 8811 	msr	BASEPRI, r3
 8008096:	f3bf 8f6f 	isb	sy
 800809a:	f3bf 8f4f 	dsb	sy
 800809e:	603b      	str	r3, [r7, #0]
}
 80080a0:	bf00      	nop
 80080a2:	e7fe      	b.n	80080a2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80080a4:	f001 fa16 	bl	80094d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80080a8:	4b39      	ldr	r3, [pc, #228]	; (8008190 <xTaskResumeAll+0x118>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	3b01      	subs	r3, #1
 80080ae:	4a38      	ldr	r2, [pc, #224]	; (8008190 <xTaskResumeAll+0x118>)
 80080b0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080b2:	4b37      	ldr	r3, [pc, #220]	; (8008190 <xTaskResumeAll+0x118>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d162      	bne.n	8008180 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80080ba:	4b36      	ldr	r3, [pc, #216]	; (8008194 <xTaskResumeAll+0x11c>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d05e      	beq.n	8008180 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80080c2:	e02f      	b.n	8008124 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080c4:	4b34      	ldr	r3, [pc, #208]	; (8008198 <xTaskResumeAll+0x120>)
 80080c6:	68db      	ldr	r3, [r3, #12]
 80080c8:	68db      	ldr	r3, [r3, #12]
 80080ca:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	3318      	adds	r3, #24
 80080d0:	4618      	mov	r0, r3
 80080d2:	f7fe ffa1 	bl	8007018 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	3304      	adds	r3, #4
 80080da:	4618      	mov	r0, r3
 80080dc:	f7fe ff9c 	bl	8007018 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080e4:	4b2d      	ldr	r3, [pc, #180]	; (800819c <xTaskResumeAll+0x124>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	429a      	cmp	r2, r3
 80080ea:	d903      	bls.n	80080f4 <xTaskResumeAll+0x7c>
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080f0:	4a2a      	ldr	r2, [pc, #168]	; (800819c <xTaskResumeAll+0x124>)
 80080f2:	6013      	str	r3, [r2, #0]
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080f8:	4613      	mov	r3, r2
 80080fa:	009b      	lsls	r3, r3, #2
 80080fc:	4413      	add	r3, r2
 80080fe:	009b      	lsls	r3, r3, #2
 8008100:	4a27      	ldr	r2, [pc, #156]	; (80081a0 <xTaskResumeAll+0x128>)
 8008102:	441a      	add	r2, r3
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	3304      	adds	r3, #4
 8008108:	4619      	mov	r1, r3
 800810a:	4610      	mov	r0, r2
 800810c:	f7fe ff27 	bl	8006f5e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008114:	4b23      	ldr	r3, [pc, #140]	; (80081a4 <xTaskResumeAll+0x12c>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800811a:	429a      	cmp	r2, r3
 800811c:	d302      	bcc.n	8008124 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800811e:	4b22      	ldr	r3, [pc, #136]	; (80081a8 <xTaskResumeAll+0x130>)
 8008120:	2201      	movs	r2, #1
 8008122:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008124:	4b1c      	ldr	r3, [pc, #112]	; (8008198 <xTaskResumeAll+0x120>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d1cb      	bne.n	80080c4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d001      	beq.n	8008136 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008132:	f000 fb5f 	bl	80087f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008136:	4b1d      	ldr	r3, [pc, #116]	; (80081ac <xTaskResumeAll+0x134>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d010      	beq.n	8008164 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008142:	f000 f847 	bl	80081d4 <xTaskIncrementTick>
 8008146:	4603      	mov	r3, r0
 8008148:	2b00      	cmp	r3, #0
 800814a:	d002      	beq.n	8008152 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800814c:	4b16      	ldr	r3, [pc, #88]	; (80081a8 <xTaskResumeAll+0x130>)
 800814e:	2201      	movs	r2, #1
 8008150:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	3b01      	subs	r3, #1
 8008156:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d1f1      	bne.n	8008142 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800815e:	4b13      	ldr	r3, [pc, #76]	; (80081ac <xTaskResumeAll+0x134>)
 8008160:	2200      	movs	r2, #0
 8008162:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008164:	4b10      	ldr	r3, [pc, #64]	; (80081a8 <xTaskResumeAll+0x130>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d009      	beq.n	8008180 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800816c:	2301      	movs	r3, #1
 800816e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008170:	4b0f      	ldr	r3, [pc, #60]	; (80081b0 <xTaskResumeAll+0x138>)
 8008172:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008176:	601a      	str	r2, [r3, #0]
 8008178:	f3bf 8f4f 	dsb	sy
 800817c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008180:	f001 f9d8 	bl	8009534 <vPortExitCritical>

	return xAlreadyYielded;
 8008184:	68bb      	ldr	r3, [r7, #8]
}
 8008186:	4618      	mov	r0, r3
 8008188:	3710      	adds	r7, #16
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}
 800818e:	bf00      	nop
 8008190:	20001140 	.word	0x20001140
 8008194:	20001118 	.word	0x20001118
 8008198:	200010d8 	.word	0x200010d8
 800819c:	20001120 	.word	0x20001120
 80081a0:	20000c48 	.word	0x20000c48
 80081a4:	20000c44 	.word	0x20000c44
 80081a8:	2000112c 	.word	0x2000112c
 80081ac:	20001128 	.word	0x20001128
 80081b0:	e000ed04 	.word	0xe000ed04

080081b4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80081b4:	b480      	push	{r7}
 80081b6:	b083      	sub	sp, #12
 80081b8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80081ba:	4b05      	ldr	r3, [pc, #20]	; (80081d0 <xTaskGetTickCount+0x1c>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80081c0:	687b      	ldr	r3, [r7, #4]
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	370c      	adds	r7, #12
 80081c6:	46bd      	mov	sp, r7
 80081c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081cc:	4770      	bx	lr
 80081ce:	bf00      	nop
 80081d0:	2000111c 	.word	0x2000111c

080081d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b086      	sub	sp, #24
 80081d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80081da:	2300      	movs	r3, #0
 80081dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081de:	4b4f      	ldr	r3, [pc, #316]	; (800831c <xTaskIncrementTick+0x148>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	f040 808f 	bne.w	8008306 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80081e8:	4b4d      	ldr	r3, [pc, #308]	; (8008320 <xTaskIncrementTick+0x14c>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	3301      	adds	r3, #1
 80081ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80081f0:	4a4b      	ldr	r2, [pc, #300]	; (8008320 <xTaskIncrementTick+0x14c>)
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d120      	bne.n	800823e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80081fc:	4b49      	ldr	r3, [pc, #292]	; (8008324 <xTaskIncrementTick+0x150>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d00a      	beq.n	800821c <xTaskIncrementTick+0x48>
	__asm volatile
 8008206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800820a:	f383 8811 	msr	BASEPRI, r3
 800820e:	f3bf 8f6f 	isb	sy
 8008212:	f3bf 8f4f 	dsb	sy
 8008216:	603b      	str	r3, [r7, #0]
}
 8008218:	bf00      	nop
 800821a:	e7fe      	b.n	800821a <xTaskIncrementTick+0x46>
 800821c:	4b41      	ldr	r3, [pc, #260]	; (8008324 <xTaskIncrementTick+0x150>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	60fb      	str	r3, [r7, #12]
 8008222:	4b41      	ldr	r3, [pc, #260]	; (8008328 <xTaskIncrementTick+0x154>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	4a3f      	ldr	r2, [pc, #252]	; (8008324 <xTaskIncrementTick+0x150>)
 8008228:	6013      	str	r3, [r2, #0]
 800822a:	4a3f      	ldr	r2, [pc, #252]	; (8008328 <xTaskIncrementTick+0x154>)
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	6013      	str	r3, [r2, #0]
 8008230:	4b3e      	ldr	r3, [pc, #248]	; (800832c <xTaskIncrementTick+0x158>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	3301      	adds	r3, #1
 8008236:	4a3d      	ldr	r2, [pc, #244]	; (800832c <xTaskIncrementTick+0x158>)
 8008238:	6013      	str	r3, [r2, #0]
 800823a:	f000 fadb 	bl	80087f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800823e:	4b3c      	ldr	r3, [pc, #240]	; (8008330 <xTaskIncrementTick+0x15c>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	693a      	ldr	r2, [r7, #16]
 8008244:	429a      	cmp	r2, r3
 8008246:	d349      	bcc.n	80082dc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008248:	4b36      	ldr	r3, [pc, #216]	; (8008324 <xTaskIncrementTick+0x150>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d104      	bne.n	800825c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008252:	4b37      	ldr	r3, [pc, #220]	; (8008330 <xTaskIncrementTick+0x15c>)
 8008254:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008258:	601a      	str	r2, [r3, #0]
					break;
 800825a:	e03f      	b.n	80082dc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800825c:	4b31      	ldr	r3, [pc, #196]	; (8008324 <xTaskIncrementTick+0x150>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	68db      	ldr	r3, [r3, #12]
 8008262:	68db      	ldr	r3, [r3, #12]
 8008264:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800826c:	693a      	ldr	r2, [r7, #16]
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	429a      	cmp	r2, r3
 8008272:	d203      	bcs.n	800827c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008274:	4a2e      	ldr	r2, [pc, #184]	; (8008330 <xTaskIncrementTick+0x15c>)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800827a:	e02f      	b.n	80082dc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	3304      	adds	r3, #4
 8008280:	4618      	mov	r0, r3
 8008282:	f7fe fec9 	bl	8007018 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800828a:	2b00      	cmp	r3, #0
 800828c:	d004      	beq.n	8008298 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	3318      	adds	r3, #24
 8008292:	4618      	mov	r0, r3
 8008294:	f7fe fec0 	bl	8007018 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800829c:	4b25      	ldr	r3, [pc, #148]	; (8008334 <xTaskIncrementTick+0x160>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	429a      	cmp	r2, r3
 80082a2:	d903      	bls.n	80082ac <xTaskIncrementTick+0xd8>
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082a8:	4a22      	ldr	r2, [pc, #136]	; (8008334 <xTaskIncrementTick+0x160>)
 80082aa:	6013      	str	r3, [r2, #0]
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082b0:	4613      	mov	r3, r2
 80082b2:	009b      	lsls	r3, r3, #2
 80082b4:	4413      	add	r3, r2
 80082b6:	009b      	lsls	r3, r3, #2
 80082b8:	4a1f      	ldr	r2, [pc, #124]	; (8008338 <xTaskIncrementTick+0x164>)
 80082ba:	441a      	add	r2, r3
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	3304      	adds	r3, #4
 80082c0:	4619      	mov	r1, r3
 80082c2:	4610      	mov	r0, r2
 80082c4:	f7fe fe4b 	bl	8006f5e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082cc:	4b1b      	ldr	r3, [pc, #108]	; (800833c <xTaskIncrementTick+0x168>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082d2:	429a      	cmp	r2, r3
 80082d4:	d3b8      	bcc.n	8008248 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80082d6:	2301      	movs	r3, #1
 80082d8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80082da:	e7b5      	b.n	8008248 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80082dc:	4b17      	ldr	r3, [pc, #92]	; (800833c <xTaskIncrementTick+0x168>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082e2:	4915      	ldr	r1, [pc, #84]	; (8008338 <xTaskIncrementTick+0x164>)
 80082e4:	4613      	mov	r3, r2
 80082e6:	009b      	lsls	r3, r3, #2
 80082e8:	4413      	add	r3, r2
 80082ea:	009b      	lsls	r3, r3, #2
 80082ec:	440b      	add	r3, r1
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	2b01      	cmp	r3, #1
 80082f2:	d901      	bls.n	80082f8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80082f4:	2301      	movs	r3, #1
 80082f6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80082f8:	4b11      	ldr	r3, [pc, #68]	; (8008340 <xTaskIncrementTick+0x16c>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d007      	beq.n	8008310 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008300:	2301      	movs	r3, #1
 8008302:	617b      	str	r3, [r7, #20]
 8008304:	e004      	b.n	8008310 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008306:	4b0f      	ldr	r3, [pc, #60]	; (8008344 <xTaskIncrementTick+0x170>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	3301      	adds	r3, #1
 800830c:	4a0d      	ldr	r2, [pc, #52]	; (8008344 <xTaskIncrementTick+0x170>)
 800830e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008310:	697b      	ldr	r3, [r7, #20]
}
 8008312:	4618      	mov	r0, r3
 8008314:	3718      	adds	r7, #24
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}
 800831a:	bf00      	nop
 800831c:	20001140 	.word	0x20001140
 8008320:	2000111c 	.word	0x2000111c
 8008324:	200010d0 	.word	0x200010d0
 8008328:	200010d4 	.word	0x200010d4
 800832c:	20001130 	.word	0x20001130
 8008330:	20001138 	.word	0x20001138
 8008334:	20001120 	.word	0x20001120
 8008338:	20000c48 	.word	0x20000c48
 800833c:	20000c44 	.word	0x20000c44
 8008340:	2000112c 	.word	0x2000112c
 8008344:	20001128 	.word	0x20001128

08008348 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008348:	b480      	push	{r7}
 800834a:	b085      	sub	sp, #20
 800834c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800834e:	4b2a      	ldr	r3, [pc, #168]	; (80083f8 <vTaskSwitchContext+0xb0>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d003      	beq.n	800835e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008356:	4b29      	ldr	r3, [pc, #164]	; (80083fc <vTaskSwitchContext+0xb4>)
 8008358:	2201      	movs	r2, #1
 800835a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800835c:	e046      	b.n	80083ec <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800835e:	4b27      	ldr	r3, [pc, #156]	; (80083fc <vTaskSwitchContext+0xb4>)
 8008360:	2200      	movs	r2, #0
 8008362:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008364:	4b26      	ldr	r3, [pc, #152]	; (8008400 <vTaskSwitchContext+0xb8>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	60fb      	str	r3, [r7, #12]
 800836a:	e010      	b.n	800838e <vTaskSwitchContext+0x46>
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d10a      	bne.n	8008388 <vTaskSwitchContext+0x40>
	__asm volatile
 8008372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008376:	f383 8811 	msr	BASEPRI, r3
 800837a:	f3bf 8f6f 	isb	sy
 800837e:	f3bf 8f4f 	dsb	sy
 8008382:	607b      	str	r3, [r7, #4]
}
 8008384:	bf00      	nop
 8008386:	e7fe      	b.n	8008386 <vTaskSwitchContext+0x3e>
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	3b01      	subs	r3, #1
 800838c:	60fb      	str	r3, [r7, #12]
 800838e:	491d      	ldr	r1, [pc, #116]	; (8008404 <vTaskSwitchContext+0xbc>)
 8008390:	68fa      	ldr	r2, [r7, #12]
 8008392:	4613      	mov	r3, r2
 8008394:	009b      	lsls	r3, r3, #2
 8008396:	4413      	add	r3, r2
 8008398:	009b      	lsls	r3, r3, #2
 800839a:	440b      	add	r3, r1
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d0e4      	beq.n	800836c <vTaskSwitchContext+0x24>
 80083a2:	68fa      	ldr	r2, [r7, #12]
 80083a4:	4613      	mov	r3, r2
 80083a6:	009b      	lsls	r3, r3, #2
 80083a8:	4413      	add	r3, r2
 80083aa:	009b      	lsls	r3, r3, #2
 80083ac:	4a15      	ldr	r2, [pc, #84]	; (8008404 <vTaskSwitchContext+0xbc>)
 80083ae:	4413      	add	r3, r2
 80083b0:	60bb      	str	r3, [r7, #8]
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	685b      	ldr	r3, [r3, #4]
 80083b6:	685a      	ldr	r2, [r3, #4]
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	605a      	str	r2, [r3, #4]
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	685a      	ldr	r2, [r3, #4]
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	3308      	adds	r3, #8
 80083c4:	429a      	cmp	r2, r3
 80083c6:	d104      	bne.n	80083d2 <vTaskSwitchContext+0x8a>
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	685b      	ldr	r3, [r3, #4]
 80083cc:	685a      	ldr	r2, [r3, #4]
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	605a      	str	r2, [r3, #4]
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	685b      	ldr	r3, [r3, #4]
 80083d6:	68db      	ldr	r3, [r3, #12]
 80083d8:	4a0b      	ldr	r2, [pc, #44]	; (8008408 <vTaskSwitchContext+0xc0>)
 80083da:	6013      	str	r3, [r2, #0]
 80083dc:	4a08      	ldr	r2, [pc, #32]	; (8008400 <vTaskSwitchContext+0xb8>)
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80083e2:	4b09      	ldr	r3, [pc, #36]	; (8008408 <vTaskSwitchContext+0xc0>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	3354      	adds	r3, #84	; 0x54
 80083e8:	4a08      	ldr	r2, [pc, #32]	; (800840c <vTaskSwitchContext+0xc4>)
 80083ea:	6013      	str	r3, [r2, #0]
}
 80083ec:	bf00      	nop
 80083ee:	3714      	adds	r7, #20
 80083f0:	46bd      	mov	sp, r7
 80083f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f6:	4770      	bx	lr
 80083f8:	20001140 	.word	0x20001140
 80083fc:	2000112c 	.word	0x2000112c
 8008400:	20001120 	.word	0x20001120
 8008404:	20000c48 	.word	0x20000c48
 8008408:	20000c44 	.word	0x20000c44
 800840c:	20000068 	.word	0x20000068

08008410 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b084      	sub	sp, #16
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
 8008418:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d10a      	bne.n	8008436 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008424:	f383 8811 	msr	BASEPRI, r3
 8008428:	f3bf 8f6f 	isb	sy
 800842c:	f3bf 8f4f 	dsb	sy
 8008430:	60fb      	str	r3, [r7, #12]
}
 8008432:	bf00      	nop
 8008434:	e7fe      	b.n	8008434 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008436:	4b07      	ldr	r3, [pc, #28]	; (8008454 <vTaskPlaceOnEventList+0x44>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	3318      	adds	r3, #24
 800843c:	4619      	mov	r1, r3
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f7fe fdb1 	bl	8006fa6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008444:	2101      	movs	r1, #1
 8008446:	6838      	ldr	r0, [r7, #0]
 8008448:	f000 fb74 	bl	8008b34 <prvAddCurrentTaskToDelayedList>
}
 800844c:	bf00      	nop
 800844e:	3710      	adds	r7, #16
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}
 8008454:	20000c44 	.word	0x20000c44

08008458 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008458:	b580      	push	{r7, lr}
 800845a:	b086      	sub	sp, #24
 800845c:	af00      	add	r7, sp, #0
 800845e:	60f8      	str	r0, [r7, #12]
 8008460:	60b9      	str	r1, [r7, #8]
 8008462:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d10a      	bne.n	8008480 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800846a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800846e:	f383 8811 	msr	BASEPRI, r3
 8008472:	f3bf 8f6f 	isb	sy
 8008476:	f3bf 8f4f 	dsb	sy
 800847a:	617b      	str	r3, [r7, #20]
}
 800847c:	bf00      	nop
 800847e:	e7fe      	b.n	800847e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008480:	4b0a      	ldr	r3, [pc, #40]	; (80084ac <vTaskPlaceOnEventListRestricted+0x54>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	3318      	adds	r3, #24
 8008486:	4619      	mov	r1, r3
 8008488:	68f8      	ldr	r0, [r7, #12]
 800848a:	f7fe fd68 	bl	8006f5e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d002      	beq.n	800849a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008494:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008498:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800849a:	6879      	ldr	r1, [r7, #4]
 800849c:	68b8      	ldr	r0, [r7, #8]
 800849e:	f000 fb49 	bl	8008b34 <prvAddCurrentTaskToDelayedList>
	}
 80084a2:	bf00      	nop
 80084a4:	3718      	adds	r7, #24
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}
 80084aa:	bf00      	nop
 80084ac:	20000c44 	.word	0x20000c44

080084b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b086      	sub	sp, #24
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	68db      	ldr	r3, [r3, #12]
 80084bc:	68db      	ldr	r3, [r3, #12]
 80084be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80084c0:	693b      	ldr	r3, [r7, #16]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d10a      	bne.n	80084dc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80084c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ca:	f383 8811 	msr	BASEPRI, r3
 80084ce:	f3bf 8f6f 	isb	sy
 80084d2:	f3bf 8f4f 	dsb	sy
 80084d6:	60fb      	str	r3, [r7, #12]
}
 80084d8:	bf00      	nop
 80084da:	e7fe      	b.n	80084da <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	3318      	adds	r3, #24
 80084e0:	4618      	mov	r0, r3
 80084e2:	f7fe fd99 	bl	8007018 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80084e6:	4b1e      	ldr	r3, [pc, #120]	; (8008560 <xTaskRemoveFromEventList+0xb0>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d11d      	bne.n	800852a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	3304      	adds	r3, #4
 80084f2:	4618      	mov	r0, r3
 80084f4:	f7fe fd90 	bl	8007018 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084fc:	4b19      	ldr	r3, [pc, #100]	; (8008564 <xTaskRemoveFromEventList+0xb4>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	429a      	cmp	r2, r3
 8008502:	d903      	bls.n	800850c <xTaskRemoveFromEventList+0x5c>
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008508:	4a16      	ldr	r2, [pc, #88]	; (8008564 <xTaskRemoveFromEventList+0xb4>)
 800850a:	6013      	str	r3, [r2, #0]
 800850c:	693b      	ldr	r3, [r7, #16]
 800850e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008510:	4613      	mov	r3, r2
 8008512:	009b      	lsls	r3, r3, #2
 8008514:	4413      	add	r3, r2
 8008516:	009b      	lsls	r3, r3, #2
 8008518:	4a13      	ldr	r2, [pc, #76]	; (8008568 <xTaskRemoveFromEventList+0xb8>)
 800851a:	441a      	add	r2, r3
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	3304      	adds	r3, #4
 8008520:	4619      	mov	r1, r3
 8008522:	4610      	mov	r0, r2
 8008524:	f7fe fd1b 	bl	8006f5e <vListInsertEnd>
 8008528:	e005      	b.n	8008536 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800852a:	693b      	ldr	r3, [r7, #16]
 800852c:	3318      	adds	r3, #24
 800852e:	4619      	mov	r1, r3
 8008530:	480e      	ldr	r0, [pc, #56]	; (800856c <xTaskRemoveFromEventList+0xbc>)
 8008532:	f7fe fd14 	bl	8006f5e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800853a:	4b0d      	ldr	r3, [pc, #52]	; (8008570 <xTaskRemoveFromEventList+0xc0>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008540:	429a      	cmp	r2, r3
 8008542:	d905      	bls.n	8008550 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008544:	2301      	movs	r3, #1
 8008546:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008548:	4b0a      	ldr	r3, [pc, #40]	; (8008574 <xTaskRemoveFromEventList+0xc4>)
 800854a:	2201      	movs	r2, #1
 800854c:	601a      	str	r2, [r3, #0]
 800854e:	e001      	b.n	8008554 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008550:	2300      	movs	r3, #0
 8008552:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008554:	697b      	ldr	r3, [r7, #20]
}
 8008556:	4618      	mov	r0, r3
 8008558:	3718      	adds	r7, #24
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}
 800855e:	bf00      	nop
 8008560:	20001140 	.word	0x20001140
 8008564:	20001120 	.word	0x20001120
 8008568:	20000c48 	.word	0x20000c48
 800856c:	200010d8 	.word	0x200010d8
 8008570:	20000c44 	.word	0x20000c44
 8008574:	2000112c 	.word	0x2000112c

08008578 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008578:	b480      	push	{r7}
 800857a:	b083      	sub	sp, #12
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008580:	4b06      	ldr	r3, [pc, #24]	; (800859c <vTaskInternalSetTimeOutState+0x24>)
 8008582:	681a      	ldr	r2, [r3, #0]
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008588:	4b05      	ldr	r3, [pc, #20]	; (80085a0 <vTaskInternalSetTimeOutState+0x28>)
 800858a:	681a      	ldr	r2, [r3, #0]
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	605a      	str	r2, [r3, #4]
}
 8008590:	bf00      	nop
 8008592:	370c      	adds	r7, #12
 8008594:	46bd      	mov	sp, r7
 8008596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859a:	4770      	bx	lr
 800859c:	20001130 	.word	0x20001130
 80085a0:	2000111c 	.word	0x2000111c

080085a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b088      	sub	sp, #32
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
 80085ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d10a      	bne.n	80085ca <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80085b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085b8:	f383 8811 	msr	BASEPRI, r3
 80085bc:	f3bf 8f6f 	isb	sy
 80085c0:	f3bf 8f4f 	dsb	sy
 80085c4:	613b      	str	r3, [r7, #16]
}
 80085c6:	bf00      	nop
 80085c8:	e7fe      	b.n	80085c8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d10a      	bne.n	80085e6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80085d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d4:	f383 8811 	msr	BASEPRI, r3
 80085d8:	f3bf 8f6f 	isb	sy
 80085dc:	f3bf 8f4f 	dsb	sy
 80085e0:	60fb      	str	r3, [r7, #12]
}
 80085e2:	bf00      	nop
 80085e4:	e7fe      	b.n	80085e4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80085e6:	f000 ff75 	bl	80094d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80085ea:	4b1d      	ldr	r3, [pc, #116]	; (8008660 <xTaskCheckForTimeOut+0xbc>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	685b      	ldr	r3, [r3, #4]
 80085f4:	69ba      	ldr	r2, [r7, #24]
 80085f6:	1ad3      	subs	r3, r2, r3
 80085f8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008602:	d102      	bne.n	800860a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008604:	2300      	movs	r3, #0
 8008606:	61fb      	str	r3, [r7, #28]
 8008608:	e023      	b.n	8008652 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681a      	ldr	r2, [r3, #0]
 800860e:	4b15      	ldr	r3, [pc, #84]	; (8008664 <xTaskCheckForTimeOut+0xc0>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	429a      	cmp	r2, r3
 8008614:	d007      	beq.n	8008626 <xTaskCheckForTimeOut+0x82>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	685b      	ldr	r3, [r3, #4]
 800861a:	69ba      	ldr	r2, [r7, #24]
 800861c:	429a      	cmp	r2, r3
 800861e:	d302      	bcc.n	8008626 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008620:	2301      	movs	r3, #1
 8008622:	61fb      	str	r3, [r7, #28]
 8008624:	e015      	b.n	8008652 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	697a      	ldr	r2, [r7, #20]
 800862c:	429a      	cmp	r2, r3
 800862e:	d20b      	bcs.n	8008648 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	681a      	ldr	r2, [r3, #0]
 8008634:	697b      	ldr	r3, [r7, #20]
 8008636:	1ad2      	subs	r2, r2, r3
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f7ff ff9b 	bl	8008578 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008642:	2300      	movs	r3, #0
 8008644:	61fb      	str	r3, [r7, #28]
 8008646:	e004      	b.n	8008652 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	2200      	movs	r2, #0
 800864c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800864e:	2301      	movs	r3, #1
 8008650:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008652:	f000 ff6f 	bl	8009534 <vPortExitCritical>

	return xReturn;
 8008656:	69fb      	ldr	r3, [r7, #28]
}
 8008658:	4618      	mov	r0, r3
 800865a:	3720      	adds	r7, #32
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}
 8008660:	2000111c 	.word	0x2000111c
 8008664:	20001130 	.word	0x20001130

08008668 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008668:	b480      	push	{r7}
 800866a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800866c:	4b03      	ldr	r3, [pc, #12]	; (800867c <vTaskMissedYield+0x14>)
 800866e:	2201      	movs	r2, #1
 8008670:	601a      	str	r2, [r3, #0]
}
 8008672:	bf00      	nop
 8008674:	46bd      	mov	sp, r7
 8008676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867a:	4770      	bx	lr
 800867c:	2000112c 	.word	0x2000112c

08008680 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b082      	sub	sp, #8
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008688:	f000 f852 	bl	8008730 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800868c:	4b06      	ldr	r3, [pc, #24]	; (80086a8 <prvIdleTask+0x28>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	2b01      	cmp	r3, #1
 8008692:	d9f9      	bls.n	8008688 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008694:	4b05      	ldr	r3, [pc, #20]	; (80086ac <prvIdleTask+0x2c>)
 8008696:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800869a:	601a      	str	r2, [r3, #0]
 800869c:	f3bf 8f4f 	dsb	sy
 80086a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80086a4:	e7f0      	b.n	8008688 <prvIdleTask+0x8>
 80086a6:	bf00      	nop
 80086a8:	20000c48 	.word	0x20000c48
 80086ac:	e000ed04 	.word	0xe000ed04

080086b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b082      	sub	sp, #8
 80086b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80086b6:	2300      	movs	r3, #0
 80086b8:	607b      	str	r3, [r7, #4]
 80086ba:	e00c      	b.n	80086d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80086bc:	687a      	ldr	r2, [r7, #4]
 80086be:	4613      	mov	r3, r2
 80086c0:	009b      	lsls	r3, r3, #2
 80086c2:	4413      	add	r3, r2
 80086c4:	009b      	lsls	r3, r3, #2
 80086c6:	4a12      	ldr	r2, [pc, #72]	; (8008710 <prvInitialiseTaskLists+0x60>)
 80086c8:	4413      	add	r3, r2
 80086ca:	4618      	mov	r0, r3
 80086cc:	f7fe fc1a 	bl	8006f04 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	3301      	adds	r3, #1
 80086d4:	607b      	str	r3, [r7, #4]
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2b37      	cmp	r3, #55	; 0x37
 80086da:	d9ef      	bls.n	80086bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80086dc:	480d      	ldr	r0, [pc, #52]	; (8008714 <prvInitialiseTaskLists+0x64>)
 80086de:	f7fe fc11 	bl	8006f04 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80086e2:	480d      	ldr	r0, [pc, #52]	; (8008718 <prvInitialiseTaskLists+0x68>)
 80086e4:	f7fe fc0e 	bl	8006f04 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80086e8:	480c      	ldr	r0, [pc, #48]	; (800871c <prvInitialiseTaskLists+0x6c>)
 80086ea:	f7fe fc0b 	bl	8006f04 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80086ee:	480c      	ldr	r0, [pc, #48]	; (8008720 <prvInitialiseTaskLists+0x70>)
 80086f0:	f7fe fc08 	bl	8006f04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80086f4:	480b      	ldr	r0, [pc, #44]	; (8008724 <prvInitialiseTaskLists+0x74>)
 80086f6:	f7fe fc05 	bl	8006f04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80086fa:	4b0b      	ldr	r3, [pc, #44]	; (8008728 <prvInitialiseTaskLists+0x78>)
 80086fc:	4a05      	ldr	r2, [pc, #20]	; (8008714 <prvInitialiseTaskLists+0x64>)
 80086fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008700:	4b0a      	ldr	r3, [pc, #40]	; (800872c <prvInitialiseTaskLists+0x7c>)
 8008702:	4a05      	ldr	r2, [pc, #20]	; (8008718 <prvInitialiseTaskLists+0x68>)
 8008704:	601a      	str	r2, [r3, #0]
}
 8008706:	bf00      	nop
 8008708:	3708      	adds	r7, #8
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}
 800870e:	bf00      	nop
 8008710:	20000c48 	.word	0x20000c48
 8008714:	200010a8 	.word	0x200010a8
 8008718:	200010bc 	.word	0x200010bc
 800871c:	200010d8 	.word	0x200010d8
 8008720:	200010ec 	.word	0x200010ec
 8008724:	20001104 	.word	0x20001104
 8008728:	200010d0 	.word	0x200010d0
 800872c:	200010d4 	.word	0x200010d4

08008730 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b082      	sub	sp, #8
 8008734:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008736:	e019      	b.n	800876c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008738:	f000 fecc 	bl	80094d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800873c:	4b10      	ldr	r3, [pc, #64]	; (8008780 <prvCheckTasksWaitingTermination+0x50>)
 800873e:	68db      	ldr	r3, [r3, #12]
 8008740:	68db      	ldr	r3, [r3, #12]
 8008742:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	3304      	adds	r3, #4
 8008748:	4618      	mov	r0, r3
 800874a:	f7fe fc65 	bl	8007018 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800874e:	4b0d      	ldr	r3, [pc, #52]	; (8008784 <prvCheckTasksWaitingTermination+0x54>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	3b01      	subs	r3, #1
 8008754:	4a0b      	ldr	r2, [pc, #44]	; (8008784 <prvCheckTasksWaitingTermination+0x54>)
 8008756:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008758:	4b0b      	ldr	r3, [pc, #44]	; (8008788 <prvCheckTasksWaitingTermination+0x58>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	3b01      	subs	r3, #1
 800875e:	4a0a      	ldr	r2, [pc, #40]	; (8008788 <prvCheckTasksWaitingTermination+0x58>)
 8008760:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008762:	f000 fee7 	bl	8009534 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f000 f810 	bl	800878c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800876c:	4b06      	ldr	r3, [pc, #24]	; (8008788 <prvCheckTasksWaitingTermination+0x58>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d1e1      	bne.n	8008738 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008774:	bf00      	nop
 8008776:	bf00      	nop
 8008778:	3708      	adds	r7, #8
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}
 800877e:	bf00      	nop
 8008780:	200010ec 	.word	0x200010ec
 8008784:	20001118 	.word	0x20001118
 8008788:	20001100 	.word	0x20001100

0800878c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800878c:	b580      	push	{r7, lr}
 800878e:	b084      	sub	sp, #16
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	3354      	adds	r3, #84	; 0x54
 8008798:	4618      	mov	r0, r3
 800879a:	f001 ff37 	bl	800a60c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d108      	bne.n	80087ba <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087ac:	4618      	mov	r0, r3
 80087ae:	f001 f87f 	bl	80098b0 <vPortFree>
				vPortFree( pxTCB );
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f001 f87c 	bl	80098b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80087b8:	e018      	b.n	80087ec <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80087c0:	2b01      	cmp	r3, #1
 80087c2:	d103      	bne.n	80087cc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f001 f873 	bl	80098b0 <vPortFree>
	}
 80087ca:	e00f      	b.n	80087ec <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80087d2:	2b02      	cmp	r3, #2
 80087d4:	d00a      	beq.n	80087ec <prvDeleteTCB+0x60>
	__asm volatile
 80087d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087da:	f383 8811 	msr	BASEPRI, r3
 80087de:	f3bf 8f6f 	isb	sy
 80087e2:	f3bf 8f4f 	dsb	sy
 80087e6:	60fb      	str	r3, [r7, #12]
}
 80087e8:	bf00      	nop
 80087ea:	e7fe      	b.n	80087ea <prvDeleteTCB+0x5e>
	}
 80087ec:	bf00      	nop
 80087ee:	3710      	adds	r7, #16
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}

080087f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80087f4:	b480      	push	{r7}
 80087f6:	b083      	sub	sp, #12
 80087f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80087fa:	4b0c      	ldr	r3, [pc, #48]	; (800882c <prvResetNextTaskUnblockTime+0x38>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d104      	bne.n	800880e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008804:	4b0a      	ldr	r3, [pc, #40]	; (8008830 <prvResetNextTaskUnblockTime+0x3c>)
 8008806:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800880a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800880c:	e008      	b.n	8008820 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800880e:	4b07      	ldr	r3, [pc, #28]	; (800882c <prvResetNextTaskUnblockTime+0x38>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	68db      	ldr	r3, [r3, #12]
 8008814:	68db      	ldr	r3, [r3, #12]
 8008816:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	685b      	ldr	r3, [r3, #4]
 800881c:	4a04      	ldr	r2, [pc, #16]	; (8008830 <prvResetNextTaskUnblockTime+0x3c>)
 800881e:	6013      	str	r3, [r2, #0]
}
 8008820:	bf00      	nop
 8008822:	370c      	adds	r7, #12
 8008824:	46bd      	mov	sp, r7
 8008826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882a:	4770      	bx	lr
 800882c:	200010d0 	.word	0x200010d0
 8008830:	20001138 	.word	0x20001138

08008834 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008834:	b480      	push	{r7}
 8008836:	b083      	sub	sp, #12
 8008838:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800883a:	4b0b      	ldr	r3, [pc, #44]	; (8008868 <xTaskGetSchedulerState+0x34>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d102      	bne.n	8008848 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008842:	2301      	movs	r3, #1
 8008844:	607b      	str	r3, [r7, #4]
 8008846:	e008      	b.n	800885a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008848:	4b08      	ldr	r3, [pc, #32]	; (800886c <xTaskGetSchedulerState+0x38>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d102      	bne.n	8008856 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008850:	2302      	movs	r3, #2
 8008852:	607b      	str	r3, [r7, #4]
 8008854:	e001      	b.n	800885a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008856:	2300      	movs	r3, #0
 8008858:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800885a:	687b      	ldr	r3, [r7, #4]
	}
 800885c:	4618      	mov	r0, r3
 800885e:	370c      	adds	r7, #12
 8008860:	46bd      	mov	sp, r7
 8008862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008866:	4770      	bx	lr
 8008868:	20001124 	.word	0x20001124
 800886c:	20001140 	.word	0x20001140

08008870 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008870:	b580      	push	{r7, lr}
 8008872:	b086      	sub	sp, #24
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800887c:	2300      	movs	r3, #0
 800887e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d056      	beq.n	8008934 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008886:	4b2e      	ldr	r3, [pc, #184]	; (8008940 <xTaskPriorityDisinherit+0xd0>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	693a      	ldr	r2, [r7, #16]
 800888c:	429a      	cmp	r2, r3
 800888e:	d00a      	beq.n	80088a6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008894:	f383 8811 	msr	BASEPRI, r3
 8008898:	f3bf 8f6f 	isb	sy
 800889c:	f3bf 8f4f 	dsb	sy
 80088a0:	60fb      	str	r3, [r7, #12]
}
 80088a2:	bf00      	nop
 80088a4:	e7fe      	b.n	80088a4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d10a      	bne.n	80088c4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80088ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b2:	f383 8811 	msr	BASEPRI, r3
 80088b6:	f3bf 8f6f 	isb	sy
 80088ba:	f3bf 8f4f 	dsb	sy
 80088be:	60bb      	str	r3, [r7, #8]
}
 80088c0:	bf00      	nop
 80088c2:	e7fe      	b.n	80088c2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088c8:	1e5a      	subs	r2, r3, #1
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80088ce:	693b      	ldr	r3, [r7, #16]
 80088d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088d2:	693b      	ldr	r3, [r7, #16]
 80088d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088d6:	429a      	cmp	r2, r3
 80088d8:	d02c      	beq.n	8008934 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80088da:	693b      	ldr	r3, [r7, #16]
 80088dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d128      	bne.n	8008934 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80088e2:	693b      	ldr	r3, [r7, #16]
 80088e4:	3304      	adds	r3, #4
 80088e6:	4618      	mov	r0, r3
 80088e8:	f7fe fb96 	bl	8007018 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80088f0:	693b      	ldr	r3, [r7, #16]
 80088f2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088f8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80088fc:	693b      	ldr	r3, [r7, #16]
 80088fe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008900:	693b      	ldr	r3, [r7, #16]
 8008902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008904:	4b0f      	ldr	r3, [pc, #60]	; (8008944 <xTaskPriorityDisinherit+0xd4>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	429a      	cmp	r2, r3
 800890a:	d903      	bls.n	8008914 <xTaskPriorityDisinherit+0xa4>
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008910:	4a0c      	ldr	r2, [pc, #48]	; (8008944 <xTaskPriorityDisinherit+0xd4>)
 8008912:	6013      	str	r3, [r2, #0]
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008918:	4613      	mov	r3, r2
 800891a:	009b      	lsls	r3, r3, #2
 800891c:	4413      	add	r3, r2
 800891e:	009b      	lsls	r3, r3, #2
 8008920:	4a09      	ldr	r2, [pc, #36]	; (8008948 <xTaskPriorityDisinherit+0xd8>)
 8008922:	441a      	add	r2, r3
 8008924:	693b      	ldr	r3, [r7, #16]
 8008926:	3304      	adds	r3, #4
 8008928:	4619      	mov	r1, r3
 800892a:	4610      	mov	r0, r2
 800892c:	f7fe fb17 	bl	8006f5e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008930:	2301      	movs	r3, #1
 8008932:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008934:	697b      	ldr	r3, [r7, #20]
	}
 8008936:	4618      	mov	r0, r3
 8008938:	3718      	adds	r7, #24
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}
 800893e:	bf00      	nop
 8008940:	20000c44 	.word	0x20000c44
 8008944:	20001120 	.word	0x20001120
 8008948:	20000c48 	.word	0x20000c48

0800894c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800894c:	b580      	push	{r7, lr}
 800894e:	b086      	sub	sp, #24
 8008950:	af00      	add	r7, sp, #0
 8008952:	60f8      	str	r0, [r7, #12]
 8008954:	60b9      	str	r1, [r7, #8]
 8008956:	607a      	str	r2, [r7, #4]
 8008958:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800895a:	f000 fdbb 	bl	80094d4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800895e:	4b29      	ldr	r3, [pc, #164]	; (8008a04 <xTaskNotifyWait+0xb8>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8008966:	b2db      	uxtb	r3, r3
 8008968:	2b02      	cmp	r3, #2
 800896a:	d01c      	beq.n	80089a6 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800896c:	4b25      	ldr	r3, [pc, #148]	; (8008a04 <xTaskNotifyWait+0xb8>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 8008974:	68fa      	ldr	r2, [r7, #12]
 8008976:	43d2      	mvns	r2, r2
 8008978:	400a      	ands	r2, r1
 800897a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800897e:	4b21      	ldr	r3, [pc, #132]	; (8008a04 <xTaskNotifyWait+0xb8>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	2201      	movs	r2, #1
 8008984:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d00b      	beq.n	80089a6 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800898e:	2101      	movs	r1, #1
 8008990:	6838      	ldr	r0, [r7, #0]
 8008992:	f000 f8cf 	bl	8008b34 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8008996:	4b1c      	ldr	r3, [pc, #112]	; (8008a08 <xTaskNotifyWait+0xbc>)
 8008998:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800899c:	601a      	str	r2, [r3, #0]
 800899e:	f3bf 8f4f 	dsb	sy
 80089a2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80089a6:	f000 fdc5 	bl	8009534 <vPortExitCritical>

		taskENTER_CRITICAL();
 80089aa:	f000 fd93 	bl	80094d4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d005      	beq.n	80089c0 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80089b4:	4b13      	ldr	r3, [pc, #76]	; (8008a04 <xTaskNotifyWait+0xb8>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80089c0:	4b10      	ldr	r3, [pc, #64]	; (8008a04 <xTaskNotifyWait+0xb8>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 80089c8:	b2db      	uxtb	r3, r3
 80089ca:	2b02      	cmp	r3, #2
 80089cc:	d002      	beq.n	80089d4 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80089ce:	2300      	movs	r3, #0
 80089d0:	617b      	str	r3, [r7, #20]
 80089d2:	e00a      	b.n	80089ea <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80089d4:	4b0b      	ldr	r3, [pc, #44]	; (8008a04 <xTaskNotifyWait+0xb8>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 80089dc:	68ba      	ldr	r2, [r7, #8]
 80089de:	43d2      	mvns	r2, r2
 80089e0:	400a      	ands	r2, r1
 80089e2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
				xReturn = pdTRUE;
 80089e6:	2301      	movs	r3, #1
 80089e8:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80089ea:	4b06      	ldr	r3, [pc, #24]	; (8008a04 <xTaskNotifyWait+0xb8>)
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	2200      	movs	r2, #0
 80089f0:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
		}
		taskEXIT_CRITICAL();
 80089f4:	f000 fd9e 	bl	8009534 <vPortExitCritical>

		return xReturn;
 80089f8:	697b      	ldr	r3, [r7, #20]
	}
 80089fa:	4618      	mov	r0, r3
 80089fc:	3718      	adds	r7, #24
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}
 8008a02:	bf00      	nop
 8008a04:	20000c44 	.word	0x20000c44
 8008a08:	e000ed04 	.word	0xe000ed04

08008a0c <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b08a      	sub	sp, #40	; 0x28
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
 8008a14:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d10a      	bne.n	8008a32 <vTaskNotifyGiveFromISR+0x26>
	__asm volatile
 8008a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a20:	f383 8811 	msr	BASEPRI, r3
 8008a24:	f3bf 8f6f 	isb	sy
 8008a28:	f3bf 8f4f 	dsb	sy
 8008a2c:	61bb      	str	r3, [r7, #24]
}
 8008a2e:	bf00      	nop
 8008a30:	e7fe      	b.n	8008a30 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008a32:	f000 fe31 	bl	8009698 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	627b      	str	r3, [r7, #36]	; 0x24
	__asm volatile
 8008a3a:	f3ef 8211 	mrs	r2, BASEPRI
 8008a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a42:	f383 8811 	msr	BASEPRI, r3
 8008a46:	f3bf 8f6f 	isb	sy
 8008a4a:	f3bf 8f4f 	dsb	sy
 8008a4e:	617a      	str	r2, [r7, #20]
 8008a50:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008a52:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008a54:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8008a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a58:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8008a5c:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8008a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a60:	2202      	movs	r2, #2
 8008a62:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8008a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a68:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008a6c:	1c5a      	adds	r2, r3, #1
 8008a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a70:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8008a74:	7ffb      	ldrb	r3, [r7, #31]
 8008a76:	2b01      	cmp	r3, #1
 8008a78:	d146      	bne.n	8008b08 <vTaskNotifyGiveFromISR+0xfc>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8008a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d00a      	beq.n	8008a98 <vTaskNotifyGiveFromISR+0x8c>
	__asm volatile
 8008a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a86:	f383 8811 	msr	BASEPRI, r3
 8008a8a:	f3bf 8f6f 	isb	sy
 8008a8e:	f3bf 8f4f 	dsb	sy
 8008a92:	60fb      	str	r3, [r7, #12]
}
 8008a94:	bf00      	nop
 8008a96:	e7fe      	b.n	8008a96 <vTaskNotifyGiveFromISR+0x8a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a98:	4b20      	ldr	r3, [pc, #128]	; (8008b1c <vTaskNotifyGiveFromISR+0x110>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d11d      	bne.n	8008adc <vTaskNotifyGiveFromISR+0xd0>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa2:	3304      	adds	r3, #4
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	f7fe fab7 	bl	8007018 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008aae:	4b1c      	ldr	r3, [pc, #112]	; (8008b20 <vTaskNotifyGiveFromISR+0x114>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	429a      	cmp	r2, r3
 8008ab4:	d903      	bls.n	8008abe <vTaskNotifyGiveFromISR+0xb2>
 8008ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aba:	4a19      	ldr	r2, [pc, #100]	; (8008b20 <vTaskNotifyGiveFromISR+0x114>)
 8008abc:	6013      	str	r3, [r2, #0]
 8008abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ac2:	4613      	mov	r3, r2
 8008ac4:	009b      	lsls	r3, r3, #2
 8008ac6:	4413      	add	r3, r2
 8008ac8:	009b      	lsls	r3, r3, #2
 8008aca:	4a16      	ldr	r2, [pc, #88]	; (8008b24 <vTaskNotifyGiveFromISR+0x118>)
 8008acc:	441a      	add	r2, r3
 8008ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad0:	3304      	adds	r3, #4
 8008ad2:	4619      	mov	r1, r3
 8008ad4:	4610      	mov	r0, r2
 8008ad6:	f7fe fa42 	bl	8006f5e <vListInsertEnd>
 8008ada:	e005      	b.n	8008ae8 <vTaskNotifyGiveFromISR+0xdc>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8008adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ade:	3318      	adds	r3, #24
 8008ae0:	4619      	mov	r1, r3
 8008ae2:	4811      	ldr	r0, [pc, #68]	; (8008b28 <vTaskNotifyGiveFromISR+0x11c>)
 8008ae4:	f7fe fa3b 	bl	8006f5e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008aec:	4b0f      	ldr	r3, [pc, #60]	; (8008b2c <vTaskNotifyGiveFromISR+0x120>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008af2:	429a      	cmp	r2, r3
 8008af4:	d908      	bls.n	8008b08 <vTaskNotifyGiveFromISR+0xfc>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d002      	beq.n	8008b02 <vTaskNotifyGiveFromISR+0xf6>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	2201      	movs	r2, #1
 8008b00:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8008b02:	4b0b      	ldr	r3, [pc, #44]	; (8008b30 <vTaskNotifyGiveFromISR+0x124>)
 8008b04:	2201      	movs	r2, #1
 8008b06:	601a      	str	r2, [r3, #0]
 8008b08:	6a3b      	ldr	r3, [r7, #32]
 8008b0a:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	f383 8811 	msr	BASEPRI, r3
}
 8008b12:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 8008b14:	bf00      	nop
 8008b16:	3728      	adds	r7, #40	; 0x28
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bd80      	pop	{r7, pc}
 8008b1c:	20001140 	.word	0x20001140
 8008b20:	20001120 	.word	0x20001120
 8008b24:	20000c48 	.word	0x20000c48
 8008b28:	200010d8 	.word	0x200010d8
 8008b2c:	20000c44 	.word	0x20000c44
 8008b30:	2000112c 	.word	0x2000112c

08008b34 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b084      	sub	sp, #16
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008b3e:	4b21      	ldr	r3, [pc, #132]	; (8008bc4 <prvAddCurrentTaskToDelayedList+0x90>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b44:	4b20      	ldr	r3, [pc, #128]	; (8008bc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	3304      	adds	r3, #4
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f7fe fa64 	bl	8007018 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b56:	d10a      	bne.n	8008b6e <prvAddCurrentTaskToDelayedList+0x3a>
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d007      	beq.n	8008b6e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b5e:	4b1a      	ldr	r3, [pc, #104]	; (8008bc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	3304      	adds	r3, #4
 8008b64:	4619      	mov	r1, r3
 8008b66:	4819      	ldr	r0, [pc, #100]	; (8008bcc <prvAddCurrentTaskToDelayedList+0x98>)
 8008b68:	f7fe f9f9 	bl	8006f5e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008b6c:	e026      	b.n	8008bbc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008b6e:	68fa      	ldr	r2, [r7, #12]
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	4413      	add	r3, r2
 8008b74:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008b76:	4b14      	ldr	r3, [pc, #80]	; (8008bc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	68ba      	ldr	r2, [r7, #8]
 8008b7c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008b7e:	68ba      	ldr	r2, [r7, #8]
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	429a      	cmp	r2, r3
 8008b84:	d209      	bcs.n	8008b9a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b86:	4b12      	ldr	r3, [pc, #72]	; (8008bd0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008b88:	681a      	ldr	r2, [r3, #0]
 8008b8a:	4b0f      	ldr	r3, [pc, #60]	; (8008bc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	3304      	adds	r3, #4
 8008b90:	4619      	mov	r1, r3
 8008b92:	4610      	mov	r0, r2
 8008b94:	f7fe fa07 	bl	8006fa6 <vListInsert>
}
 8008b98:	e010      	b.n	8008bbc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b9a:	4b0e      	ldr	r3, [pc, #56]	; (8008bd4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008b9c:	681a      	ldr	r2, [r3, #0]
 8008b9e:	4b0a      	ldr	r3, [pc, #40]	; (8008bc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	3304      	adds	r3, #4
 8008ba4:	4619      	mov	r1, r3
 8008ba6:	4610      	mov	r0, r2
 8008ba8:	f7fe f9fd 	bl	8006fa6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008bac:	4b0a      	ldr	r3, [pc, #40]	; (8008bd8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	68ba      	ldr	r2, [r7, #8]
 8008bb2:	429a      	cmp	r2, r3
 8008bb4:	d202      	bcs.n	8008bbc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008bb6:	4a08      	ldr	r2, [pc, #32]	; (8008bd8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	6013      	str	r3, [r2, #0]
}
 8008bbc:	bf00      	nop
 8008bbe:	3710      	adds	r7, #16
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bd80      	pop	{r7, pc}
 8008bc4:	2000111c 	.word	0x2000111c
 8008bc8:	20000c44 	.word	0x20000c44
 8008bcc:	20001104 	.word	0x20001104
 8008bd0:	200010d4 	.word	0x200010d4
 8008bd4:	200010d0 	.word	0x200010d0
 8008bd8:	20001138 	.word	0x20001138

08008bdc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b08a      	sub	sp, #40	; 0x28
 8008be0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008be2:	2300      	movs	r3, #0
 8008be4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008be6:	f000 fb07 	bl	80091f8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008bea:	4b1c      	ldr	r3, [pc, #112]	; (8008c5c <xTimerCreateTimerTask+0x80>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d021      	beq.n	8008c36 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008bfa:	1d3a      	adds	r2, r7, #4
 8008bfc:	f107 0108 	add.w	r1, r7, #8
 8008c00:	f107 030c 	add.w	r3, r7, #12
 8008c04:	4618      	mov	r0, r3
 8008c06:	f7fe f963 	bl	8006ed0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008c0a:	6879      	ldr	r1, [r7, #4]
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	68fa      	ldr	r2, [r7, #12]
 8008c10:	9202      	str	r2, [sp, #8]
 8008c12:	9301      	str	r3, [sp, #4]
 8008c14:	2302      	movs	r3, #2
 8008c16:	9300      	str	r3, [sp, #0]
 8008c18:	2300      	movs	r3, #0
 8008c1a:	460a      	mov	r2, r1
 8008c1c:	4910      	ldr	r1, [pc, #64]	; (8008c60 <xTimerCreateTimerTask+0x84>)
 8008c1e:	4811      	ldr	r0, [pc, #68]	; (8008c64 <xTimerCreateTimerTask+0x88>)
 8008c20:	f7fe ff4a 	bl	8007ab8 <xTaskCreateStatic>
 8008c24:	4603      	mov	r3, r0
 8008c26:	4a10      	ldr	r2, [pc, #64]	; (8008c68 <xTimerCreateTimerTask+0x8c>)
 8008c28:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008c2a:	4b0f      	ldr	r3, [pc, #60]	; (8008c68 <xTimerCreateTimerTask+0x8c>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d001      	beq.n	8008c36 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008c32:	2301      	movs	r3, #1
 8008c34:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d10a      	bne.n	8008c52 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c40:	f383 8811 	msr	BASEPRI, r3
 8008c44:	f3bf 8f6f 	isb	sy
 8008c48:	f3bf 8f4f 	dsb	sy
 8008c4c:	613b      	str	r3, [r7, #16]
}
 8008c4e:	bf00      	nop
 8008c50:	e7fe      	b.n	8008c50 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008c52:	697b      	ldr	r3, [r7, #20]
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	3718      	adds	r7, #24
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd80      	pop	{r7, pc}
 8008c5c:	20001174 	.word	0x20001174
 8008c60:	0800d040 	.word	0x0800d040
 8008c64:	08008da1 	.word	0x08008da1
 8008c68:	20001178 	.word	0x20001178

08008c6c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b08a      	sub	sp, #40	; 0x28
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	60f8      	str	r0, [r7, #12]
 8008c74:	60b9      	str	r1, [r7, #8]
 8008c76:	607a      	str	r2, [r7, #4]
 8008c78:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d10a      	bne.n	8008c9a <xTimerGenericCommand+0x2e>
	__asm volatile
 8008c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c88:	f383 8811 	msr	BASEPRI, r3
 8008c8c:	f3bf 8f6f 	isb	sy
 8008c90:	f3bf 8f4f 	dsb	sy
 8008c94:	623b      	str	r3, [r7, #32]
}
 8008c96:	bf00      	nop
 8008c98:	e7fe      	b.n	8008c98 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008c9a:	4b1a      	ldr	r3, [pc, #104]	; (8008d04 <xTimerGenericCommand+0x98>)
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d02a      	beq.n	8008cf8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	2b05      	cmp	r3, #5
 8008cb2:	dc18      	bgt.n	8008ce6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008cb4:	f7ff fdbe 	bl	8008834 <xTaskGetSchedulerState>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	2b02      	cmp	r3, #2
 8008cbc:	d109      	bne.n	8008cd2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008cbe:	4b11      	ldr	r3, [pc, #68]	; (8008d04 <xTimerGenericCommand+0x98>)
 8008cc0:	6818      	ldr	r0, [r3, #0]
 8008cc2:	f107 0110 	add.w	r1, r7, #16
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cca:	f7fe fb0d 	bl	80072e8 <xQueueGenericSend>
 8008cce:	6278      	str	r0, [r7, #36]	; 0x24
 8008cd0:	e012      	b.n	8008cf8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008cd2:	4b0c      	ldr	r3, [pc, #48]	; (8008d04 <xTimerGenericCommand+0x98>)
 8008cd4:	6818      	ldr	r0, [r3, #0]
 8008cd6:	f107 0110 	add.w	r1, r7, #16
 8008cda:	2300      	movs	r3, #0
 8008cdc:	2200      	movs	r2, #0
 8008cde:	f7fe fb03 	bl	80072e8 <xQueueGenericSend>
 8008ce2:	6278      	str	r0, [r7, #36]	; 0x24
 8008ce4:	e008      	b.n	8008cf8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008ce6:	4b07      	ldr	r3, [pc, #28]	; (8008d04 <xTimerGenericCommand+0x98>)
 8008ce8:	6818      	ldr	r0, [r3, #0]
 8008cea:	f107 0110 	add.w	r1, r7, #16
 8008cee:	2300      	movs	r3, #0
 8008cf0:	683a      	ldr	r2, [r7, #0]
 8008cf2:	f7fe fbf7 	bl	80074e4 <xQueueGenericSendFromISR>
 8008cf6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3728      	adds	r7, #40	; 0x28
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}
 8008d02:	bf00      	nop
 8008d04:	20001174 	.word	0x20001174

08008d08 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b088      	sub	sp, #32
 8008d0c:	af02      	add	r7, sp, #8
 8008d0e:	6078      	str	r0, [r7, #4]
 8008d10:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d12:	4b22      	ldr	r3, [pc, #136]	; (8008d9c <prvProcessExpiredTimer+0x94>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	68db      	ldr	r3, [r3, #12]
 8008d18:	68db      	ldr	r3, [r3, #12]
 8008d1a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	3304      	adds	r3, #4
 8008d20:	4618      	mov	r0, r3
 8008d22:	f7fe f979 	bl	8007018 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008d26:	697b      	ldr	r3, [r7, #20]
 8008d28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d2c:	f003 0304 	and.w	r3, r3, #4
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d022      	beq.n	8008d7a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	699a      	ldr	r2, [r3, #24]
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	18d1      	adds	r1, r2, r3
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	683a      	ldr	r2, [r7, #0]
 8008d40:	6978      	ldr	r0, [r7, #20]
 8008d42:	f000 f8d1 	bl	8008ee8 <prvInsertTimerInActiveList>
 8008d46:	4603      	mov	r3, r0
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d01f      	beq.n	8008d8c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	9300      	str	r3, [sp, #0]
 8008d50:	2300      	movs	r3, #0
 8008d52:	687a      	ldr	r2, [r7, #4]
 8008d54:	2100      	movs	r1, #0
 8008d56:	6978      	ldr	r0, [r7, #20]
 8008d58:	f7ff ff88 	bl	8008c6c <xTimerGenericCommand>
 8008d5c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008d5e:	693b      	ldr	r3, [r7, #16]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d113      	bne.n	8008d8c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d68:	f383 8811 	msr	BASEPRI, r3
 8008d6c:	f3bf 8f6f 	isb	sy
 8008d70:	f3bf 8f4f 	dsb	sy
 8008d74:	60fb      	str	r3, [r7, #12]
}
 8008d76:	bf00      	nop
 8008d78:	e7fe      	b.n	8008d78 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d80:	f023 0301 	bic.w	r3, r3, #1
 8008d84:	b2da      	uxtb	r2, r3
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008d8c:	697b      	ldr	r3, [r7, #20]
 8008d8e:	6a1b      	ldr	r3, [r3, #32]
 8008d90:	6978      	ldr	r0, [r7, #20]
 8008d92:	4798      	blx	r3
}
 8008d94:	bf00      	nop
 8008d96:	3718      	adds	r7, #24
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}
 8008d9c:	2000116c 	.word	0x2000116c

08008da0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b084      	sub	sp, #16
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008da8:	f107 0308 	add.w	r3, r7, #8
 8008dac:	4618      	mov	r0, r3
 8008dae:	f000 f857 	bl	8008e60 <prvGetNextExpireTime>
 8008db2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	4619      	mov	r1, r3
 8008db8:	68f8      	ldr	r0, [r7, #12]
 8008dba:	f000 f803 	bl	8008dc4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008dbe:	f000 f8d5 	bl	8008f6c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008dc2:	e7f1      	b.n	8008da8 <prvTimerTask+0x8>

08008dc4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b084      	sub	sp, #16
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
 8008dcc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008dce:	f7ff f945 	bl	800805c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008dd2:	f107 0308 	add.w	r3, r7, #8
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f000 f866 	bl	8008ea8 <prvSampleTimeNow>
 8008ddc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d130      	bne.n	8008e46 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d10a      	bne.n	8008e00 <prvProcessTimerOrBlockTask+0x3c>
 8008dea:	687a      	ldr	r2, [r7, #4]
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	429a      	cmp	r2, r3
 8008df0:	d806      	bhi.n	8008e00 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008df2:	f7ff f941 	bl	8008078 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008df6:	68f9      	ldr	r1, [r7, #12]
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f7ff ff85 	bl	8008d08 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008dfe:	e024      	b.n	8008e4a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d008      	beq.n	8008e18 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008e06:	4b13      	ldr	r3, [pc, #76]	; (8008e54 <prvProcessTimerOrBlockTask+0x90>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d101      	bne.n	8008e14 <prvProcessTimerOrBlockTask+0x50>
 8008e10:	2301      	movs	r3, #1
 8008e12:	e000      	b.n	8008e16 <prvProcessTimerOrBlockTask+0x52>
 8008e14:	2300      	movs	r3, #0
 8008e16:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008e18:	4b0f      	ldr	r3, [pc, #60]	; (8008e58 <prvProcessTimerOrBlockTask+0x94>)
 8008e1a:	6818      	ldr	r0, [r3, #0]
 8008e1c:	687a      	ldr	r2, [r7, #4]
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	1ad3      	subs	r3, r2, r3
 8008e22:	683a      	ldr	r2, [r7, #0]
 8008e24:	4619      	mov	r1, r3
 8008e26:	f7fe fe13 	bl	8007a50 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008e2a:	f7ff f925 	bl	8008078 <xTaskResumeAll>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d10a      	bne.n	8008e4a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008e34:	4b09      	ldr	r3, [pc, #36]	; (8008e5c <prvProcessTimerOrBlockTask+0x98>)
 8008e36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e3a:	601a      	str	r2, [r3, #0]
 8008e3c:	f3bf 8f4f 	dsb	sy
 8008e40:	f3bf 8f6f 	isb	sy
}
 8008e44:	e001      	b.n	8008e4a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008e46:	f7ff f917 	bl	8008078 <xTaskResumeAll>
}
 8008e4a:	bf00      	nop
 8008e4c:	3710      	adds	r7, #16
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}
 8008e52:	bf00      	nop
 8008e54:	20001170 	.word	0x20001170
 8008e58:	20001174 	.word	0x20001174
 8008e5c:	e000ed04 	.word	0xe000ed04

08008e60 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008e60:	b480      	push	{r7}
 8008e62:	b085      	sub	sp, #20
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008e68:	4b0e      	ldr	r3, [pc, #56]	; (8008ea4 <prvGetNextExpireTime+0x44>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d101      	bne.n	8008e76 <prvGetNextExpireTime+0x16>
 8008e72:	2201      	movs	r2, #1
 8008e74:	e000      	b.n	8008e78 <prvGetNextExpireTime+0x18>
 8008e76:	2200      	movs	r2, #0
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d105      	bne.n	8008e90 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008e84:	4b07      	ldr	r3, [pc, #28]	; (8008ea4 <prvGetNextExpireTime+0x44>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	68db      	ldr	r3, [r3, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	60fb      	str	r3, [r7, #12]
 8008e8e:	e001      	b.n	8008e94 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008e90:	2300      	movs	r3, #0
 8008e92:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008e94:	68fb      	ldr	r3, [r7, #12]
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3714      	adds	r7, #20
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea0:	4770      	bx	lr
 8008ea2:	bf00      	nop
 8008ea4:	2000116c 	.word	0x2000116c

08008ea8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b084      	sub	sp, #16
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008eb0:	f7ff f980 	bl	80081b4 <xTaskGetTickCount>
 8008eb4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008eb6:	4b0b      	ldr	r3, [pc, #44]	; (8008ee4 <prvSampleTimeNow+0x3c>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	68fa      	ldr	r2, [r7, #12]
 8008ebc:	429a      	cmp	r2, r3
 8008ebe:	d205      	bcs.n	8008ecc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008ec0:	f000 f936 	bl	8009130 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2201      	movs	r2, #1
 8008ec8:	601a      	str	r2, [r3, #0]
 8008eca:	e002      	b.n	8008ed2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008ed2:	4a04      	ldr	r2, [pc, #16]	; (8008ee4 <prvSampleTimeNow+0x3c>)
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3710      	adds	r7, #16
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}
 8008ee2:	bf00      	nop
 8008ee4:	2000117c 	.word	0x2000117c

08008ee8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b086      	sub	sp, #24
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	60f8      	str	r0, [r7, #12]
 8008ef0:	60b9      	str	r1, [r7, #8]
 8008ef2:	607a      	str	r2, [r7, #4]
 8008ef4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	68ba      	ldr	r2, [r7, #8]
 8008efe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	68fa      	ldr	r2, [r7, #12]
 8008f04:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008f06:	68ba      	ldr	r2, [r7, #8]
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	429a      	cmp	r2, r3
 8008f0c:	d812      	bhi.n	8008f34 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f0e:	687a      	ldr	r2, [r7, #4]
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	1ad2      	subs	r2, r2, r3
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	699b      	ldr	r3, [r3, #24]
 8008f18:	429a      	cmp	r2, r3
 8008f1a:	d302      	bcc.n	8008f22 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	617b      	str	r3, [r7, #20]
 8008f20:	e01b      	b.n	8008f5a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008f22:	4b10      	ldr	r3, [pc, #64]	; (8008f64 <prvInsertTimerInActiveList+0x7c>)
 8008f24:	681a      	ldr	r2, [r3, #0]
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	3304      	adds	r3, #4
 8008f2a:	4619      	mov	r1, r3
 8008f2c:	4610      	mov	r0, r2
 8008f2e:	f7fe f83a 	bl	8006fa6 <vListInsert>
 8008f32:	e012      	b.n	8008f5a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008f34:	687a      	ldr	r2, [r7, #4]
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	429a      	cmp	r2, r3
 8008f3a:	d206      	bcs.n	8008f4a <prvInsertTimerInActiveList+0x62>
 8008f3c:	68ba      	ldr	r2, [r7, #8]
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	429a      	cmp	r2, r3
 8008f42:	d302      	bcc.n	8008f4a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008f44:	2301      	movs	r3, #1
 8008f46:	617b      	str	r3, [r7, #20]
 8008f48:	e007      	b.n	8008f5a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008f4a:	4b07      	ldr	r3, [pc, #28]	; (8008f68 <prvInsertTimerInActiveList+0x80>)
 8008f4c:	681a      	ldr	r2, [r3, #0]
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	3304      	adds	r3, #4
 8008f52:	4619      	mov	r1, r3
 8008f54:	4610      	mov	r0, r2
 8008f56:	f7fe f826 	bl	8006fa6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008f5a:	697b      	ldr	r3, [r7, #20]
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	3718      	adds	r7, #24
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}
 8008f64:	20001170 	.word	0x20001170
 8008f68:	2000116c 	.word	0x2000116c

08008f6c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b08e      	sub	sp, #56	; 0x38
 8008f70:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008f72:	e0ca      	b.n	800910a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	da18      	bge.n	8008fac <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008f7a:	1d3b      	adds	r3, r7, #4
 8008f7c:	3304      	adds	r3, #4
 8008f7e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d10a      	bne.n	8008f9c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f8a:	f383 8811 	msr	BASEPRI, r3
 8008f8e:	f3bf 8f6f 	isb	sy
 8008f92:	f3bf 8f4f 	dsb	sy
 8008f96:	61fb      	str	r3, [r7, #28]
}
 8008f98:	bf00      	nop
 8008f9a:	e7fe      	b.n	8008f9a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008fa2:	6850      	ldr	r0, [r2, #4]
 8008fa4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008fa6:	6892      	ldr	r2, [r2, #8]
 8008fa8:	4611      	mov	r1, r2
 8008faa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	f2c0 80ab 	blt.w	800910a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fba:	695b      	ldr	r3, [r3, #20]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d004      	beq.n	8008fca <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fc2:	3304      	adds	r3, #4
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	f7fe f827 	bl	8007018 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008fca:	463b      	mov	r3, r7
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f7ff ff6b 	bl	8008ea8 <prvSampleTimeNow>
 8008fd2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2b09      	cmp	r3, #9
 8008fd8:	f200 8096 	bhi.w	8009108 <prvProcessReceivedCommands+0x19c>
 8008fdc:	a201      	add	r2, pc, #4	; (adr r2, 8008fe4 <prvProcessReceivedCommands+0x78>)
 8008fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fe2:	bf00      	nop
 8008fe4:	0800900d 	.word	0x0800900d
 8008fe8:	0800900d 	.word	0x0800900d
 8008fec:	0800900d 	.word	0x0800900d
 8008ff0:	08009081 	.word	0x08009081
 8008ff4:	08009095 	.word	0x08009095
 8008ff8:	080090df 	.word	0x080090df
 8008ffc:	0800900d 	.word	0x0800900d
 8009000:	0800900d 	.word	0x0800900d
 8009004:	08009081 	.word	0x08009081
 8009008:	08009095 	.word	0x08009095
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800900c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800900e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009012:	f043 0301 	orr.w	r3, r3, #1
 8009016:	b2da      	uxtb	r2, r3
 8009018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800901a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800901e:	68ba      	ldr	r2, [r7, #8]
 8009020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009022:	699b      	ldr	r3, [r3, #24]
 8009024:	18d1      	adds	r1, r2, r3
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800902a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800902c:	f7ff ff5c 	bl	8008ee8 <prvInsertTimerInActiveList>
 8009030:	4603      	mov	r3, r0
 8009032:	2b00      	cmp	r3, #0
 8009034:	d069      	beq.n	800910a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009038:	6a1b      	ldr	r3, [r3, #32]
 800903a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800903c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800903e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009040:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009044:	f003 0304 	and.w	r3, r3, #4
 8009048:	2b00      	cmp	r3, #0
 800904a:	d05e      	beq.n	800910a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800904c:	68ba      	ldr	r2, [r7, #8]
 800904e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009050:	699b      	ldr	r3, [r3, #24]
 8009052:	441a      	add	r2, r3
 8009054:	2300      	movs	r3, #0
 8009056:	9300      	str	r3, [sp, #0]
 8009058:	2300      	movs	r3, #0
 800905a:	2100      	movs	r1, #0
 800905c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800905e:	f7ff fe05 	bl	8008c6c <xTimerGenericCommand>
 8009062:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009064:	6a3b      	ldr	r3, [r7, #32]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d14f      	bne.n	800910a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800906a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800906e:	f383 8811 	msr	BASEPRI, r3
 8009072:	f3bf 8f6f 	isb	sy
 8009076:	f3bf 8f4f 	dsb	sy
 800907a:	61bb      	str	r3, [r7, #24]
}
 800907c:	bf00      	nop
 800907e:	e7fe      	b.n	800907e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009082:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009086:	f023 0301 	bic.w	r3, r3, #1
 800908a:	b2da      	uxtb	r2, r3
 800908c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800908e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009092:	e03a      	b.n	800910a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009096:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800909a:	f043 0301 	orr.w	r3, r3, #1
 800909e:	b2da      	uxtb	r2, r3
 80090a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80090a6:	68ba      	ldr	r2, [r7, #8]
 80090a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090aa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80090ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ae:	699b      	ldr	r3, [r3, #24]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d10a      	bne.n	80090ca <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80090b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090b8:	f383 8811 	msr	BASEPRI, r3
 80090bc:	f3bf 8f6f 	isb	sy
 80090c0:	f3bf 8f4f 	dsb	sy
 80090c4:	617b      	str	r3, [r7, #20]
}
 80090c6:	bf00      	nop
 80090c8:	e7fe      	b.n	80090c8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80090ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090cc:	699a      	ldr	r2, [r3, #24]
 80090ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d0:	18d1      	adds	r1, r2, r3
 80090d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090d8:	f7ff ff06 	bl	8008ee8 <prvInsertTimerInActiveList>
					break;
 80090dc:	e015      	b.n	800910a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80090de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80090e4:	f003 0302 	and.w	r3, r3, #2
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d103      	bne.n	80090f4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80090ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090ee:	f000 fbdf 	bl	80098b0 <vPortFree>
 80090f2:	e00a      	b.n	800910a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80090f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80090fa:	f023 0301 	bic.w	r3, r3, #1
 80090fe:	b2da      	uxtb	r2, r3
 8009100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009102:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009106:	e000      	b.n	800910a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8009108:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800910a:	4b08      	ldr	r3, [pc, #32]	; (800912c <prvProcessReceivedCommands+0x1c0>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	1d39      	adds	r1, r7, #4
 8009110:	2200      	movs	r2, #0
 8009112:	4618      	mov	r0, r3
 8009114:	f7fe fa82 	bl	800761c <xQueueReceive>
 8009118:	4603      	mov	r3, r0
 800911a:	2b00      	cmp	r3, #0
 800911c:	f47f af2a 	bne.w	8008f74 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009120:	bf00      	nop
 8009122:	bf00      	nop
 8009124:	3730      	adds	r7, #48	; 0x30
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}
 800912a:	bf00      	nop
 800912c:	20001174 	.word	0x20001174

08009130 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b088      	sub	sp, #32
 8009134:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009136:	e048      	b.n	80091ca <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009138:	4b2d      	ldr	r3, [pc, #180]	; (80091f0 <prvSwitchTimerLists+0xc0>)
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	68db      	ldr	r3, [r3, #12]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009142:	4b2b      	ldr	r3, [pc, #172]	; (80091f0 <prvSwitchTimerLists+0xc0>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	68db      	ldr	r3, [r3, #12]
 8009148:	68db      	ldr	r3, [r3, #12]
 800914a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	3304      	adds	r3, #4
 8009150:	4618      	mov	r0, r3
 8009152:	f7fd ff61 	bl	8007018 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	6a1b      	ldr	r3, [r3, #32]
 800915a:	68f8      	ldr	r0, [r7, #12]
 800915c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009164:	f003 0304 	and.w	r3, r3, #4
 8009168:	2b00      	cmp	r3, #0
 800916a:	d02e      	beq.n	80091ca <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	699b      	ldr	r3, [r3, #24]
 8009170:	693a      	ldr	r2, [r7, #16]
 8009172:	4413      	add	r3, r2
 8009174:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009176:	68ba      	ldr	r2, [r7, #8]
 8009178:	693b      	ldr	r3, [r7, #16]
 800917a:	429a      	cmp	r2, r3
 800917c:	d90e      	bls.n	800919c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	68ba      	ldr	r2, [r7, #8]
 8009182:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	68fa      	ldr	r2, [r7, #12]
 8009188:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800918a:	4b19      	ldr	r3, [pc, #100]	; (80091f0 <prvSwitchTimerLists+0xc0>)
 800918c:	681a      	ldr	r2, [r3, #0]
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	3304      	adds	r3, #4
 8009192:	4619      	mov	r1, r3
 8009194:	4610      	mov	r0, r2
 8009196:	f7fd ff06 	bl	8006fa6 <vListInsert>
 800919a:	e016      	b.n	80091ca <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800919c:	2300      	movs	r3, #0
 800919e:	9300      	str	r3, [sp, #0]
 80091a0:	2300      	movs	r3, #0
 80091a2:	693a      	ldr	r2, [r7, #16]
 80091a4:	2100      	movs	r1, #0
 80091a6:	68f8      	ldr	r0, [r7, #12]
 80091a8:	f7ff fd60 	bl	8008c6c <xTimerGenericCommand>
 80091ac:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d10a      	bne.n	80091ca <prvSwitchTimerLists+0x9a>
	__asm volatile
 80091b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091b8:	f383 8811 	msr	BASEPRI, r3
 80091bc:	f3bf 8f6f 	isb	sy
 80091c0:	f3bf 8f4f 	dsb	sy
 80091c4:	603b      	str	r3, [r7, #0]
}
 80091c6:	bf00      	nop
 80091c8:	e7fe      	b.n	80091c8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80091ca:	4b09      	ldr	r3, [pc, #36]	; (80091f0 <prvSwitchTimerLists+0xc0>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d1b1      	bne.n	8009138 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80091d4:	4b06      	ldr	r3, [pc, #24]	; (80091f0 <prvSwitchTimerLists+0xc0>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80091da:	4b06      	ldr	r3, [pc, #24]	; (80091f4 <prvSwitchTimerLists+0xc4>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	4a04      	ldr	r2, [pc, #16]	; (80091f0 <prvSwitchTimerLists+0xc0>)
 80091e0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80091e2:	4a04      	ldr	r2, [pc, #16]	; (80091f4 <prvSwitchTimerLists+0xc4>)
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	6013      	str	r3, [r2, #0]
}
 80091e8:	bf00      	nop
 80091ea:	3718      	adds	r7, #24
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd80      	pop	{r7, pc}
 80091f0:	2000116c 	.word	0x2000116c
 80091f4:	20001170 	.word	0x20001170

080091f8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b082      	sub	sp, #8
 80091fc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80091fe:	f000 f969 	bl	80094d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009202:	4b15      	ldr	r3, [pc, #84]	; (8009258 <prvCheckForValidListAndQueue+0x60>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d120      	bne.n	800924c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800920a:	4814      	ldr	r0, [pc, #80]	; (800925c <prvCheckForValidListAndQueue+0x64>)
 800920c:	f7fd fe7a 	bl	8006f04 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009210:	4813      	ldr	r0, [pc, #76]	; (8009260 <prvCheckForValidListAndQueue+0x68>)
 8009212:	f7fd fe77 	bl	8006f04 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009216:	4b13      	ldr	r3, [pc, #76]	; (8009264 <prvCheckForValidListAndQueue+0x6c>)
 8009218:	4a10      	ldr	r2, [pc, #64]	; (800925c <prvCheckForValidListAndQueue+0x64>)
 800921a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800921c:	4b12      	ldr	r3, [pc, #72]	; (8009268 <prvCheckForValidListAndQueue+0x70>)
 800921e:	4a10      	ldr	r2, [pc, #64]	; (8009260 <prvCheckForValidListAndQueue+0x68>)
 8009220:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009222:	2300      	movs	r3, #0
 8009224:	9300      	str	r3, [sp, #0]
 8009226:	4b11      	ldr	r3, [pc, #68]	; (800926c <prvCheckForValidListAndQueue+0x74>)
 8009228:	4a11      	ldr	r2, [pc, #68]	; (8009270 <prvCheckForValidListAndQueue+0x78>)
 800922a:	2110      	movs	r1, #16
 800922c:	200a      	movs	r0, #10
 800922e:	f7fd ff85 	bl	800713c <xQueueGenericCreateStatic>
 8009232:	4603      	mov	r3, r0
 8009234:	4a08      	ldr	r2, [pc, #32]	; (8009258 <prvCheckForValidListAndQueue+0x60>)
 8009236:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009238:	4b07      	ldr	r3, [pc, #28]	; (8009258 <prvCheckForValidListAndQueue+0x60>)
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d005      	beq.n	800924c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009240:	4b05      	ldr	r3, [pc, #20]	; (8009258 <prvCheckForValidListAndQueue+0x60>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	490b      	ldr	r1, [pc, #44]	; (8009274 <prvCheckForValidListAndQueue+0x7c>)
 8009246:	4618      	mov	r0, r3
 8009248:	f7fe fbd8 	bl	80079fc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800924c:	f000 f972 	bl	8009534 <vPortExitCritical>
}
 8009250:	bf00      	nop
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}
 8009256:	bf00      	nop
 8009258:	20001174 	.word	0x20001174
 800925c:	20001144 	.word	0x20001144
 8009260:	20001158 	.word	0x20001158
 8009264:	2000116c 	.word	0x2000116c
 8009268:	20001170 	.word	0x20001170
 800926c:	20001220 	.word	0x20001220
 8009270:	20001180 	.word	0x20001180
 8009274:	0800d048 	.word	0x0800d048

08009278 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009278:	b480      	push	{r7}
 800927a:	b085      	sub	sp, #20
 800927c:	af00      	add	r7, sp, #0
 800927e:	60f8      	str	r0, [r7, #12]
 8009280:	60b9      	str	r1, [r7, #8]
 8009282:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	3b04      	subs	r3, #4
 8009288:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009290:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	3b04      	subs	r3, #4
 8009296:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	f023 0201 	bic.w	r2, r3, #1
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	3b04      	subs	r3, #4
 80092a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80092a8:	4a0c      	ldr	r2, [pc, #48]	; (80092dc <pxPortInitialiseStack+0x64>)
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	3b14      	subs	r3, #20
 80092b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80092b4:	687a      	ldr	r2, [r7, #4]
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	3b04      	subs	r3, #4
 80092be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	f06f 0202 	mvn.w	r2, #2
 80092c6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	3b20      	subs	r3, #32
 80092cc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80092ce:	68fb      	ldr	r3, [r7, #12]
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	3714      	adds	r7, #20
 80092d4:	46bd      	mov	sp, r7
 80092d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092da:	4770      	bx	lr
 80092dc:	080092e1 	.word	0x080092e1

080092e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80092e0:	b480      	push	{r7}
 80092e2:	b085      	sub	sp, #20
 80092e4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80092e6:	2300      	movs	r3, #0
 80092e8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80092ea:	4b12      	ldr	r3, [pc, #72]	; (8009334 <prvTaskExitError+0x54>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80092f2:	d00a      	beq.n	800930a <prvTaskExitError+0x2a>
	__asm volatile
 80092f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092f8:	f383 8811 	msr	BASEPRI, r3
 80092fc:	f3bf 8f6f 	isb	sy
 8009300:	f3bf 8f4f 	dsb	sy
 8009304:	60fb      	str	r3, [r7, #12]
}
 8009306:	bf00      	nop
 8009308:	e7fe      	b.n	8009308 <prvTaskExitError+0x28>
	__asm volatile
 800930a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800930e:	f383 8811 	msr	BASEPRI, r3
 8009312:	f3bf 8f6f 	isb	sy
 8009316:	f3bf 8f4f 	dsb	sy
 800931a:	60bb      	str	r3, [r7, #8]
}
 800931c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800931e:	bf00      	nop
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d0fc      	beq.n	8009320 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009326:	bf00      	nop
 8009328:	bf00      	nop
 800932a:	3714      	adds	r7, #20
 800932c:	46bd      	mov	sp, r7
 800932e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009332:	4770      	bx	lr
 8009334:	2000000c 	.word	0x2000000c
	...

08009340 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009340:	4b07      	ldr	r3, [pc, #28]	; (8009360 <pxCurrentTCBConst2>)
 8009342:	6819      	ldr	r1, [r3, #0]
 8009344:	6808      	ldr	r0, [r1, #0]
 8009346:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800934a:	f380 8809 	msr	PSP, r0
 800934e:	f3bf 8f6f 	isb	sy
 8009352:	f04f 0000 	mov.w	r0, #0
 8009356:	f380 8811 	msr	BASEPRI, r0
 800935a:	4770      	bx	lr
 800935c:	f3af 8000 	nop.w

08009360 <pxCurrentTCBConst2>:
 8009360:	20000c44 	.word	0x20000c44
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009364:	bf00      	nop
 8009366:	bf00      	nop

08009368 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009368:	4808      	ldr	r0, [pc, #32]	; (800938c <prvPortStartFirstTask+0x24>)
 800936a:	6800      	ldr	r0, [r0, #0]
 800936c:	6800      	ldr	r0, [r0, #0]
 800936e:	f380 8808 	msr	MSP, r0
 8009372:	f04f 0000 	mov.w	r0, #0
 8009376:	f380 8814 	msr	CONTROL, r0
 800937a:	b662      	cpsie	i
 800937c:	b661      	cpsie	f
 800937e:	f3bf 8f4f 	dsb	sy
 8009382:	f3bf 8f6f 	isb	sy
 8009386:	df00      	svc	0
 8009388:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800938a:	bf00      	nop
 800938c:	e000ed08 	.word	0xe000ed08

08009390 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b086      	sub	sp, #24
 8009394:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009396:	4b46      	ldr	r3, [pc, #280]	; (80094b0 <xPortStartScheduler+0x120>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	4a46      	ldr	r2, [pc, #280]	; (80094b4 <xPortStartScheduler+0x124>)
 800939c:	4293      	cmp	r3, r2
 800939e:	d10a      	bne.n	80093b6 <xPortStartScheduler+0x26>
	__asm volatile
 80093a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a4:	f383 8811 	msr	BASEPRI, r3
 80093a8:	f3bf 8f6f 	isb	sy
 80093ac:	f3bf 8f4f 	dsb	sy
 80093b0:	613b      	str	r3, [r7, #16]
}
 80093b2:	bf00      	nop
 80093b4:	e7fe      	b.n	80093b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80093b6:	4b3e      	ldr	r3, [pc, #248]	; (80094b0 <xPortStartScheduler+0x120>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	4a3f      	ldr	r2, [pc, #252]	; (80094b8 <xPortStartScheduler+0x128>)
 80093bc:	4293      	cmp	r3, r2
 80093be:	d10a      	bne.n	80093d6 <xPortStartScheduler+0x46>
	__asm volatile
 80093c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093c4:	f383 8811 	msr	BASEPRI, r3
 80093c8:	f3bf 8f6f 	isb	sy
 80093cc:	f3bf 8f4f 	dsb	sy
 80093d0:	60fb      	str	r3, [r7, #12]
}
 80093d2:	bf00      	nop
 80093d4:	e7fe      	b.n	80093d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80093d6:	4b39      	ldr	r3, [pc, #228]	; (80094bc <xPortStartScheduler+0x12c>)
 80093d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	781b      	ldrb	r3, [r3, #0]
 80093de:	b2db      	uxtb	r3, r3
 80093e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80093e2:	697b      	ldr	r3, [r7, #20]
 80093e4:	22ff      	movs	r2, #255	; 0xff
 80093e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	781b      	ldrb	r3, [r3, #0]
 80093ec:	b2db      	uxtb	r3, r3
 80093ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80093f0:	78fb      	ldrb	r3, [r7, #3]
 80093f2:	b2db      	uxtb	r3, r3
 80093f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80093f8:	b2da      	uxtb	r2, r3
 80093fa:	4b31      	ldr	r3, [pc, #196]	; (80094c0 <xPortStartScheduler+0x130>)
 80093fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80093fe:	4b31      	ldr	r3, [pc, #196]	; (80094c4 <xPortStartScheduler+0x134>)
 8009400:	2207      	movs	r2, #7
 8009402:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009404:	e009      	b.n	800941a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009406:	4b2f      	ldr	r3, [pc, #188]	; (80094c4 <xPortStartScheduler+0x134>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	3b01      	subs	r3, #1
 800940c:	4a2d      	ldr	r2, [pc, #180]	; (80094c4 <xPortStartScheduler+0x134>)
 800940e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009410:	78fb      	ldrb	r3, [r7, #3]
 8009412:	b2db      	uxtb	r3, r3
 8009414:	005b      	lsls	r3, r3, #1
 8009416:	b2db      	uxtb	r3, r3
 8009418:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800941a:	78fb      	ldrb	r3, [r7, #3]
 800941c:	b2db      	uxtb	r3, r3
 800941e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009422:	2b80      	cmp	r3, #128	; 0x80
 8009424:	d0ef      	beq.n	8009406 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009426:	4b27      	ldr	r3, [pc, #156]	; (80094c4 <xPortStartScheduler+0x134>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f1c3 0307 	rsb	r3, r3, #7
 800942e:	2b04      	cmp	r3, #4
 8009430:	d00a      	beq.n	8009448 <xPortStartScheduler+0xb8>
	__asm volatile
 8009432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009436:	f383 8811 	msr	BASEPRI, r3
 800943a:	f3bf 8f6f 	isb	sy
 800943e:	f3bf 8f4f 	dsb	sy
 8009442:	60bb      	str	r3, [r7, #8]
}
 8009444:	bf00      	nop
 8009446:	e7fe      	b.n	8009446 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009448:	4b1e      	ldr	r3, [pc, #120]	; (80094c4 <xPortStartScheduler+0x134>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	021b      	lsls	r3, r3, #8
 800944e:	4a1d      	ldr	r2, [pc, #116]	; (80094c4 <xPortStartScheduler+0x134>)
 8009450:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009452:	4b1c      	ldr	r3, [pc, #112]	; (80094c4 <xPortStartScheduler+0x134>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800945a:	4a1a      	ldr	r2, [pc, #104]	; (80094c4 <xPortStartScheduler+0x134>)
 800945c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	b2da      	uxtb	r2, r3
 8009462:	697b      	ldr	r3, [r7, #20]
 8009464:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009466:	4b18      	ldr	r3, [pc, #96]	; (80094c8 <xPortStartScheduler+0x138>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	4a17      	ldr	r2, [pc, #92]	; (80094c8 <xPortStartScheduler+0x138>)
 800946c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009470:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009472:	4b15      	ldr	r3, [pc, #84]	; (80094c8 <xPortStartScheduler+0x138>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	4a14      	ldr	r2, [pc, #80]	; (80094c8 <xPortStartScheduler+0x138>)
 8009478:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800947c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800947e:	f000 f8dd 	bl	800963c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009482:	4b12      	ldr	r3, [pc, #72]	; (80094cc <xPortStartScheduler+0x13c>)
 8009484:	2200      	movs	r2, #0
 8009486:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009488:	f000 f8fc 	bl	8009684 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800948c:	4b10      	ldr	r3, [pc, #64]	; (80094d0 <xPortStartScheduler+0x140>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	4a0f      	ldr	r2, [pc, #60]	; (80094d0 <xPortStartScheduler+0x140>)
 8009492:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009496:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009498:	f7ff ff66 	bl	8009368 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800949c:	f7fe ff54 	bl	8008348 <vTaskSwitchContext>
	prvTaskExitError();
 80094a0:	f7ff ff1e 	bl	80092e0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80094a4:	2300      	movs	r3, #0
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	3718      	adds	r7, #24
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}
 80094ae:	bf00      	nop
 80094b0:	e000ed00 	.word	0xe000ed00
 80094b4:	410fc271 	.word	0x410fc271
 80094b8:	410fc270 	.word	0x410fc270
 80094bc:	e000e400 	.word	0xe000e400
 80094c0:	20001270 	.word	0x20001270
 80094c4:	20001274 	.word	0x20001274
 80094c8:	e000ed20 	.word	0xe000ed20
 80094cc:	2000000c 	.word	0x2000000c
 80094d0:	e000ef34 	.word	0xe000ef34

080094d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80094d4:	b480      	push	{r7}
 80094d6:	b083      	sub	sp, #12
 80094d8:	af00      	add	r7, sp, #0
	__asm volatile
 80094da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094de:	f383 8811 	msr	BASEPRI, r3
 80094e2:	f3bf 8f6f 	isb	sy
 80094e6:	f3bf 8f4f 	dsb	sy
 80094ea:	607b      	str	r3, [r7, #4]
}
 80094ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80094ee:	4b0f      	ldr	r3, [pc, #60]	; (800952c <vPortEnterCritical+0x58>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	3301      	adds	r3, #1
 80094f4:	4a0d      	ldr	r2, [pc, #52]	; (800952c <vPortEnterCritical+0x58>)
 80094f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80094f8:	4b0c      	ldr	r3, [pc, #48]	; (800952c <vPortEnterCritical+0x58>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	2b01      	cmp	r3, #1
 80094fe:	d10f      	bne.n	8009520 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009500:	4b0b      	ldr	r3, [pc, #44]	; (8009530 <vPortEnterCritical+0x5c>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	b2db      	uxtb	r3, r3
 8009506:	2b00      	cmp	r3, #0
 8009508:	d00a      	beq.n	8009520 <vPortEnterCritical+0x4c>
	__asm volatile
 800950a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800950e:	f383 8811 	msr	BASEPRI, r3
 8009512:	f3bf 8f6f 	isb	sy
 8009516:	f3bf 8f4f 	dsb	sy
 800951a:	603b      	str	r3, [r7, #0]
}
 800951c:	bf00      	nop
 800951e:	e7fe      	b.n	800951e <vPortEnterCritical+0x4a>
	}
}
 8009520:	bf00      	nop
 8009522:	370c      	adds	r7, #12
 8009524:	46bd      	mov	sp, r7
 8009526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952a:	4770      	bx	lr
 800952c:	2000000c 	.word	0x2000000c
 8009530:	e000ed04 	.word	0xe000ed04

08009534 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009534:	b480      	push	{r7}
 8009536:	b083      	sub	sp, #12
 8009538:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800953a:	4b12      	ldr	r3, [pc, #72]	; (8009584 <vPortExitCritical+0x50>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d10a      	bne.n	8009558 <vPortExitCritical+0x24>
	__asm volatile
 8009542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009546:	f383 8811 	msr	BASEPRI, r3
 800954a:	f3bf 8f6f 	isb	sy
 800954e:	f3bf 8f4f 	dsb	sy
 8009552:	607b      	str	r3, [r7, #4]
}
 8009554:	bf00      	nop
 8009556:	e7fe      	b.n	8009556 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009558:	4b0a      	ldr	r3, [pc, #40]	; (8009584 <vPortExitCritical+0x50>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	3b01      	subs	r3, #1
 800955e:	4a09      	ldr	r2, [pc, #36]	; (8009584 <vPortExitCritical+0x50>)
 8009560:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009562:	4b08      	ldr	r3, [pc, #32]	; (8009584 <vPortExitCritical+0x50>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d105      	bne.n	8009576 <vPortExitCritical+0x42>
 800956a:	2300      	movs	r3, #0
 800956c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	f383 8811 	msr	BASEPRI, r3
}
 8009574:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009576:	bf00      	nop
 8009578:	370c      	adds	r7, #12
 800957a:	46bd      	mov	sp, r7
 800957c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009580:	4770      	bx	lr
 8009582:	bf00      	nop
 8009584:	2000000c 	.word	0x2000000c
	...

08009590 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009590:	f3ef 8009 	mrs	r0, PSP
 8009594:	f3bf 8f6f 	isb	sy
 8009598:	4b15      	ldr	r3, [pc, #84]	; (80095f0 <pxCurrentTCBConst>)
 800959a:	681a      	ldr	r2, [r3, #0]
 800959c:	f01e 0f10 	tst.w	lr, #16
 80095a0:	bf08      	it	eq
 80095a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80095a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095aa:	6010      	str	r0, [r2, #0]
 80095ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80095b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80095b4:	f380 8811 	msr	BASEPRI, r0
 80095b8:	f3bf 8f4f 	dsb	sy
 80095bc:	f3bf 8f6f 	isb	sy
 80095c0:	f7fe fec2 	bl	8008348 <vTaskSwitchContext>
 80095c4:	f04f 0000 	mov.w	r0, #0
 80095c8:	f380 8811 	msr	BASEPRI, r0
 80095cc:	bc09      	pop	{r0, r3}
 80095ce:	6819      	ldr	r1, [r3, #0]
 80095d0:	6808      	ldr	r0, [r1, #0]
 80095d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095d6:	f01e 0f10 	tst.w	lr, #16
 80095da:	bf08      	it	eq
 80095dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80095e0:	f380 8809 	msr	PSP, r0
 80095e4:	f3bf 8f6f 	isb	sy
 80095e8:	4770      	bx	lr
 80095ea:	bf00      	nop
 80095ec:	f3af 8000 	nop.w

080095f0 <pxCurrentTCBConst>:
 80095f0:	20000c44 	.word	0x20000c44
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80095f4:	bf00      	nop
 80095f6:	bf00      	nop

080095f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b082      	sub	sp, #8
 80095fc:	af00      	add	r7, sp, #0
	__asm volatile
 80095fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009602:	f383 8811 	msr	BASEPRI, r3
 8009606:	f3bf 8f6f 	isb	sy
 800960a:	f3bf 8f4f 	dsb	sy
 800960e:	607b      	str	r3, [r7, #4]
}
 8009610:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009612:	f7fe fddf 	bl	80081d4 <xTaskIncrementTick>
 8009616:	4603      	mov	r3, r0
 8009618:	2b00      	cmp	r3, #0
 800961a:	d003      	beq.n	8009624 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800961c:	4b06      	ldr	r3, [pc, #24]	; (8009638 <xPortSysTickHandler+0x40>)
 800961e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009622:	601a      	str	r2, [r3, #0]
 8009624:	2300      	movs	r3, #0
 8009626:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	f383 8811 	msr	BASEPRI, r3
}
 800962e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009630:	bf00      	nop
 8009632:	3708      	adds	r7, #8
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}
 8009638:	e000ed04 	.word	0xe000ed04

0800963c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800963c:	b480      	push	{r7}
 800963e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009640:	4b0b      	ldr	r3, [pc, #44]	; (8009670 <vPortSetupTimerInterrupt+0x34>)
 8009642:	2200      	movs	r2, #0
 8009644:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009646:	4b0b      	ldr	r3, [pc, #44]	; (8009674 <vPortSetupTimerInterrupt+0x38>)
 8009648:	2200      	movs	r2, #0
 800964a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800964c:	4b0a      	ldr	r3, [pc, #40]	; (8009678 <vPortSetupTimerInterrupt+0x3c>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	4a0a      	ldr	r2, [pc, #40]	; (800967c <vPortSetupTimerInterrupt+0x40>)
 8009652:	fba2 2303 	umull	r2, r3, r2, r3
 8009656:	099b      	lsrs	r3, r3, #6
 8009658:	4a09      	ldr	r2, [pc, #36]	; (8009680 <vPortSetupTimerInterrupt+0x44>)
 800965a:	3b01      	subs	r3, #1
 800965c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800965e:	4b04      	ldr	r3, [pc, #16]	; (8009670 <vPortSetupTimerInterrupt+0x34>)
 8009660:	2207      	movs	r2, #7
 8009662:	601a      	str	r2, [r3, #0]
}
 8009664:	bf00      	nop
 8009666:	46bd      	mov	sp, r7
 8009668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966c:	4770      	bx	lr
 800966e:	bf00      	nop
 8009670:	e000e010 	.word	0xe000e010
 8009674:	e000e018 	.word	0xe000e018
 8009678:	20000000 	.word	0x20000000
 800967c:	10624dd3 	.word	0x10624dd3
 8009680:	e000e014 	.word	0xe000e014

08009684 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009684:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009694 <vPortEnableVFP+0x10>
 8009688:	6801      	ldr	r1, [r0, #0]
 800968a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800968e:	6001      	str	r1, [r0, #0]
 8009690:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009692:	bf00      	nop
 8009694:	e000ed88 	.word	0xe000ed88

08009698 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009698:	b480      	push	{r7}
 800969a:	b085      	sub	sp, #20
 800969c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800969e:	f3ef 8305 	mrs	r3, IPSR
 80096a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	2b0f      	cmp	r3, #15
 80096a8:	d914      	bls.n	80096d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80096aa:	4a17      	ldr	r2, [pc, #92]	; (8009708 <vPortValidateInterruptPriority+0x70>)
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	4413      	add	r3, r2
 80096b0:	781b      	ldrb	r3, [r3, #0]
 80096b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80096b4:	4b15      	ldr	r3, [pc, #84]	; (800970c <vPortValidateInterruptPriority+0x74>)
 80096b6:	781b      	ldrb	r3, [r3, #0]
 80096b8:	7afa      	ldrb	r2, [r7, #11]
 80096ba:	429a      	cmp	r2, r3
 80096bc:	d20a      	bcs.n	80096d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80096be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096c2:	f383 8811 	msr	BASEPRI, r3
 80096c6:	f3bf 8f6f 	isb	sy
 80096ca:	f3bf 8f4f 	dsb	sy
 80096ce:	607b      	str	r3, [r7, #4]
}
 80096d0:	bf00      	nop
 80096d2:	e7fe      	b.n	80096d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80096d4:	4b0e      	ldr	r3, [pc, #56]	; (8009710 <vPortValidateInterruptPriority+0x78>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80096dc:	4b0d      	ldr	r3, [pc, #52]	; (8009714 <vPortValidateInterruptPriority+0x7c>)
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	429a      	cmp	r2, r3
 80096e2:	d90a      	bls.n	80096fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80096e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e8:	f383 8811 	msr	BASEPRI, r3
 80096ec:	f3bf 8f6f 	isb	sy
 80096f0:	f3bf 8f4f 	dsb	sy
 80096f4:	603b      	str	r3, [r7, #0]
}
 80096f6:	bf00      	nop
 80096f8:	e7fe      	b.n	80096f8 <vPortValidateInterruptPriority+0x60>
	}
 80096fa:	bf00      	nop
 80096fc:	3714      	adds	r7, #20
 80096fe:	46bd      	mov	sp, r7
 8009700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009704:	4770      	bx	lr
 8009706:	bf00      	nop
 8009708:	e000e3f0 	.word	0xe000e3f0
 800970c:	20001270 	.word	0x20001270
 8009710:	e000ed0c 	.word	0xe000ed0c
 8009714:	20001274 	.word	0x20001274

08009718 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b08a      	sub	sp, #40	; 0x28
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009720:	2300      	movs	r3, #0
 8009722:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009724:	f7fe fc9a 	bl	800805c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009728:	4b5b      	ldr	r3, [pc, #364]	; (8009898 <pvPortMalloc+0x180>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d101      	bne.n	8009734 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009730:	f000 f920 	bl	8009974 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009734:	4b59      	ldr	r3, [pc, #356]	; (800989c <pvPortMalloc+0x184>)
 8009736:	681a      	ldr	r2, [r3, #0]
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	4013      	ands	r3, r2
 800973c:	2b00      	cmp	r3, #0
 800973e:	f040 8093 	bne.w	8009868 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d01d      	beq.n	8009784 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009748:	2208      	movs	r2, #8
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	4413      	add	r3, r2
 800974e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f003 0307 	and.w	r3, r3, #7
 8009756:	2b00      	cmp	r3, #0
 8009758:	d014      	beq.n	8009784 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f023 0307 	bic.w	r3, r3, #7
 8009760:	3308      	adds	r3, #8
 8009762:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f003 0307 	and.w	r3, r3, #7
 800976a:	2b00      	cmp	r3, #0
 800976c:	d00a      	beq.n	8009784 <pvPortMalloc+0x6c>
	__asm volatile
 800976e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009772:	f383 8811 	msr	BASEPRI, r3
 8009776:	f3bf 8f6f 	isb	sy
 800977a:	f3bf 8f4f 	dsb	sy
 800977e:	617b      	str	r3, [r7, #20]
}
 8009780:	bf00      	nop
 8009782:	e7fe      	b.n	8009782 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d06e      	beq.n	8009868 <pvPortMalloc+0x150>
 800978a:	4b45      	ldr	r3, [pc, #276]	; (80098a0 <pvPortMalloc+0x188>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	687a      	ldr	r2, [r7, #4]
 8009790:	429a      	cmp	r2, r3
 8009792:	d869      	bhi.n	8009868 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009794:	4b43      	ldr	r3, [pc, #268]	; (80098a4 <pvPortMalloc+0x18c>)
 8009796:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009798:	4b42      	ldr	r3, [pc, #264]	; (80098a4 <pvPortMalloc+0x18c>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800979e:	e004      	b.n	80097aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80097a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80097a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80097aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ac:	685b      	ldr	r3, [r3, #4]
 80097ae:	687a      	ldr	r2, [r7, #4]
 80097b0:	429a      	cmp	r2, r3
 80097b2:	d903      	bls.n	80097bc <pvPortMalloc+0xa4>
 80097b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d1f1      	bne.n	80097a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80097bc:	4b36      	ldr	r3, [pc, #216]	; (8009898 <pvPortMalloc+0x180>)
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097c2:	429a      	cmp	r2, r3
 80097c4:	d050      	beq.n	8009868 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80097c6:	6a3b      	ldr	r3, [r7, #32]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	2208      	movs	r2, #8
 80097cc:	4413      	add	r3, r2
 80097ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80097d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097d2:	681a      	ldr	r2, [r3, #0]
 80097d4:	6a3b      	ldr	r3, [r7, #32]
 80097d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80097d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097da:	685a      	ldr	r2, [r3, #4]
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	1ad2      	subs	r2, r2, r3
 80097e0:	2308      	movs	r3, #8
 80097e2:	005b      	lsls	r3, r3, #1
 80097e4:	429a      	cmp	r2, r3
 80097e6:	d91f      	bls.n	8009828 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80097e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	4413      	add	r3, r2
 80097ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80097f0:	69bb      	ldr	r3, [r7, #24]
 80097f2:	f003 0307 	and.w	r3, r3, #7
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d00a      	beq.n	8009810 <pvPortMalloc+0xf8>
	__asm volatile
 80097fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097fe:	f383 8811 	msr	BASEPRI, r3
 8009802:	f3bf 8f6f 	isb	sy
 8009806:	f3bf 8f4f 	dsb	sy
 800980a:	613b      	str	r3, [r7, #16]
}
 800980c:	bf00      	nop
 800980e:	e7fe      	b.n	800980e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009812:	685a      	ldr	r2, [r3, #4]
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	1ad2      	subs	r2, r2, r3
 8009818:	69bb      	ldr	r3, [r7, #24]
 800981a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800981c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800981e:	687a      	ldr	r2, [r7, #4]
 8009820:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009822:	69b8      	ldr	r0, [r7, #24]
 8009824:	f000 f908 	bl	8009a38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009828:	4b1d      	ldr	r3, [pc, #116]	; (80098a0 <pvPortMalloc+0x188>)
 800982a:	681a      	ldr	r2, [r3, #0]
 800982c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800982e:	685b      	ldr	r3, [r3, #4]
 8009830:	1ad3      	subs	r3, r2, r3
 8009832:	4a1b      	ldr	r2, [pc, #108]	; (80098a0 <pvPortMalloc+0x188>)
 8009834:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009836:	4b1a      	ldr	r3, [pc, #104]	; (80098a0 <pvPortMalloc+0x188>)
 8009838:	681a      	ldr	r2, [r3, #0]
 800983a:	4b1b      	ldr	r3, [pc, #108]	; (80098a8 <pvPortMalloc+0x190>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	429a      	cmp	r2, r3
 8009840:	d203      	bcs.n	800984a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009842:	4b17      	ldr	r3, [pc, #92]	; (80098a0 <pvPortMalloc+0x188>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	4a18      	ldr	r2, [pc, #96]	; (80098a8 <pvPortMalloc+0x190>)
 8009848:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800984a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800984c:	685a      	ldr	r2, [r3, #4]
 800984e:	4b13      	ldr	r3, [pc, #76]	; (800989c <pvPortMalloc+0x184>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	431a      	orrs	r2, r3
 8009854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009856:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800985a:	2200      	movs	r2, #0
 800985c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800985e:	4b13      	ldr	r3, [pc, #76]	; (80098ac <pvPortMalloc+0x194>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	3301      	adds	r3, #1
 8009864:	4a11      	ldr	r2, [pc, #68]	; (80098ac <pvPortMalloc+0x194>)
 8009866:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009868:	f7fe fc06 	bl	8008078 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800986c:	69fb      	ldr	r3, [r7, #28]
 800986e:	f003 0307 	and.w	r3, r3, #7
 8009872:	2b00      	cmp	r3, #0
 8009874:	d00a      	beq.n	800988c <pvPortMalloc+0x174>
	__asm volatile
 8009876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800987a:	f383 8811 	msr	BASEPRI, r3
 800987e:	f3bf 8f6f 	isb	sy
 8009882:	f3bf 8f4f 	dsb	sy
 8009886:	60fb      	str	r3, [r7, #12]
}
 8009888:	bf00      	nop
 800988a:	e7fe      	b.n	800988a <pvPortMalloc+0x172>
	return pvReturn;
 800988c:	69fb      	ldr	r3, [r7, #28]
}
 800988e:	4618      	mov	r0, r3
 8009890:	3728      	adds	r7, #40	; 0x28
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}
 8009896:	bf00      	nop
 8009898:	20002608 	.word	0x20002608
 800989c:	2000261c 	.word	0x2000261c
 80098a0:	2000260c 	.word	0x2000260c
 80098a4:	20002600 	.word	0x20002600
 80098a8:	20002610 	.word	0x20002610
 80098ac:	20002614 	.word	0x20002614

080098b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b086      	sub	sp, #24
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d04d      	beq.n	800995e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80098c2:	2308      	movs	r3, #8
 80098c4:	425b      	negs	r3, r3
 80098c6:	697a      	ldr	r2, [r7, #20]
 80098c8:	4413      	add	r3, r2
 80098ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80098cc:	697b      	ldr	r3, [r7, #20]
 80098ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80098d0:	693b      	ldr	r3, [r7, #16]
 80098d2:	685a      	ldr	r2, [r3, #4]
 80098d4:	4b24      	ldr	r3, [pc, #144]	; (8009968 <vPortFree+0xb8>)
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	4013      	ands	r3, r2
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d10a      	bne.n	80098f4 <vPortFree+0x44>
	__asm volatile
 80098de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098e2:	f383 8811 	msr	BASEPRI, r3
 80098e6:	f3bf 8f6f 	isb	sy
 80098ea:	f3bf 8f4f 	dsb	sy
 80098ee:	60fb      	str	r3, [r7, #12]
}
 80098f0:	bf00      	nop
 80098f2:	e7fe      	b.n	80098f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80098f4:	693b      	ldr	r3, [r7, #16]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d00a      	beq.n	8009912 <vPortFree+0x62>
	__asm volatile
 80098fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009900:	f383 8811 	msr	BASEPRI, r3
 8009904:	f3bf 8f6f 	isb	sy
 8009908:	f3bf 8f4f 	dsb	sy
 800990c:	60bb      	str	r3, [r7, #8]
}
 800990e:	bf00      	nop
 8009910:	e7fe      	b.n	8009910 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009912:	693b      	ldr	r3, [r7, #16]
 8009914:	685a      	ldr	r2, [r3, #4]
 8009916:	4b14      	ldr	r3, [pc, #80]	; (8009968 <vPortFree+0xb8>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	4013      	ands	r3, r2
 800991c:	2b00      	cmp	r3, #0
 800991e:	d01e      	beq.n	800995e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009920:	693b      	ldr	r3, [r7, #16]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d11a      	bne.n	800995e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009928:	693b      	ldr	r3, [r7, #16]
 800992a:	685a      	ldr	r2, [r3, #4]
 800992c:	4b0e      	ldr	r3, [pc, #56]	; (8009968 <vPortFree+0xb8>)
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	43db      	mvns	r3, r3
 8009932:	401a      	ands	r2, r3
 8009934:	693b      	ldr	r3, [r7, #16]
 8009936:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009938:	f7fe fb90 	bl	800805c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800993c:	693b      	ldr	r3, [r7, #16]
 800993e:	685a      	ldr	r2, [r3, #4]
 8009940:	4b0a      	ldr	r3, [pc, #40]	; (800996c <vPortFree+0xbc>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	4413      	add	r3, r2
 8009946:	4a09      	ldr	r2, [pc, #36]	; (800996c <vPortFree+0xbc>)
 8009948:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800994a:	6938      	ldr	r0, [r7, #16]
 800994c:	f000 f874 	bl	8009a38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009950:	4b07      	ldr	r3, [pc, #28]	; (8009970 <vPortFree+0xc0>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	3301      	adds	r3, #1
 8009956:	4a06      	ldr	r2, [pc, #24]	; (8009970 <vPortFree+0xc0>)
 8009958:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800995a:	f7fe fb8d 	bl	8008078 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800995e:	bf00      	nop
 8009960:	3718      	adds	r7, #24
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}
 8009966:	bf00      	nop
 8009968:	2000261c 	.word	0x2000261c
 800996c:	2000260c 	.word	0x2000260c
 8009970:	20002618 	.word	0x20002618

08009974 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009974:	b480      	push	{r7}
 8009976:	b085      	sub	sp, #20
 8009978:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800997a:	f241 3388 	movw	r3, #5000	; 0x1388
 800997e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009980:	4b27      	ldr	r3, [pc, #156]	; (8009a20 <prvHeapInit+0xac>)
 8009982:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	f003 0307 	and.w	r3, r3, #7
 800998a:	2b00      	cmp	r3, #0
 800998c:	d00c      	beq.n	80099a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	3307      	adds	r3, #7
 8009992:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	f023 0307 	bic.w	r3, r3, #7
 800999a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800999c:	68ba      	ldr	r2, [r7, #8]
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	1ad3      	subs	r3, r2, r3
 80099a2:	4a1f      	ldr	r2, [pc, #124]	; (8009a20 <prvHeapInit+0xac>)
 80099a4:	4413      	add	r3, r2
 80099a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80099ac:	4a1d      	ldr	r2, [pc, #116]	; (8009a24 <prvHeapInit+0xb0>)
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80099b2:	4b1c      	ldr	r3, [pc, #112]	; (8009a24 <prvHeapInit+0xb0>)
 80099b4:	2200      	movs	r2, #0
 80099b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	68ba      	ldr	r2, [r7, #8]
 80099bc:	4413      	add	r3, r2
 80099be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80099c0:	2208      	movs	r2, #8
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	1a9b      	subs	r3, r3, r2
 80099c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	f023 0307 	bic.w	r3, r3, #7
 80099ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	4a15      	ldr	r2, [pc, #84]	; (8009a28 <prvHeapInit+0xb4>)
 80099d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80099d6:	4b14      	ldr	r3, [pc, #80]	; (8009a28 <prvHeapInit+0xb4>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	2200      	movs	r2, #0
 80099dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80099de:	4b12      	ldr	r3, [pc, #72]	; (8009a28 <prvHeapInit+0xb4>)
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	2200      	movs	r2, #0
 80099e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	68fa      	ldr	r2, [r7, #12]
 80099ee:	1ad2      	subs	r2, r2, r3
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80099f4:	4b0c      	ldr	r3, [pc, #48]	; (8009a28 <prvHeapInit+0xb4>)
 80099f6:	681a      	ldr	r2, [r3, #0]
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	685b      	ldr	r3, [r3, #4]
 8009a00:	4a0a      	ldr	r2, [pc, #40]	; (8009a2c <prvHeapInit+0xb8>)
 8009a02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	685b      	ldr	r3, [r3, #4]
 8009a08:	4a09      	ldr	r2, [pc, #36]	; (8009a30 <prvHeapInit+0xbc>)
 8009a0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009a0c:	4b09      	ldr	r3, [pc, #36]	; (8009a34 <prvHeapInit+0xc0>)
 8009a0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009a12:	601a      	str	r2, [r3, #0]
}
 8009a14:	bf00      	nop
 8009a16:	3714      	adds	r7, #20
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1e:	4770      	bx	lr
 8009a20:	20001278 	.word	0x20001278
 8009a24:	20002600 	.word	0x20002600
 8009a28:	20002608 	.word	0x20002608
 8009a2c:	20002610 	.word	0x20002610
 8009a30:	2000260c 	.word	0x2000260c
 8009a34:	2000261c 	.word	0x2000261c

08009a38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009a38:	b480      	push	{r7}
 8009a3a:	b085      	sub	sp, #20
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009a40:	4b28      	ldr	r3, [pc, #160]	; (8009ae4 <prvInsertBlockIntoFreeList+0xac>)
 8009a42:	60fb      	str	r3, [r7, #12]
 8009a44:	e002      	b.n	8009a4c <prvInsertBlockIntoFreeList+0x14>
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	60fb      	str	r3, [r7, #12]
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	687a      	ldr	r2, [r7, #4]
 8009a52:	429a      	cmp	r2, r3
 8009a54:	d8f7      	bhi.n	8009a46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	685b      	ldr	r3, [r3, #4]
 8009a5e:	68ba      	ldr	r2, [r7, #8]
 8009a60:	4413      	add	r3, r2
 8009a62:	687a      	ldr	r2, [r7, #4]
 8009a64:	429a      	cmp	r2, r3
 8009a66:	d108      	bne.n	8009a7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	685a      	ldr	r2, [r3, #4]
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	685b      	ldr	r3, [r3, #4]
 8009a70:	441a      	add	r2, r3
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	685b      	ldr	r3, [r3, #4]
 8009a82:	68ba      	ldr	r2, [r7, #8]
 8009a84:	441a      	add	r2, r3
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	429a      	cmp	r2, r3
 8009a8c:	d118      	bne.n	8009ac0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	681a      	ldr	r2, [r3, #0]
 8009a92:	4b15      	ldr	r3, [pc, #84]	; (8009ae8 <prvInsertBlockIntoFreeList+0xb0>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	429a      	cmp	r2, r3
 8009a98:	d00d      	beq.n	8009ab6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	685a      	ldr	r2, [r3, #4]
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	685b      	ldr	r3, [r3, #4]
 8009aa4:	441a      	add	r2, r3
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	681a      	ldr	r2, [r3, #0]
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	601a      	str	r2, [r3, #0]
 8009ab4:	e008      	b.n	8009ac8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009ab6:	4b0c      	ldr	r3, [pc, #48]	; (8009ae8 <prvInsertBlockIntoFreeList+0xb0>)
 8009ab8:	681a      	ldr	r2, [r3, #0]
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	601a      	str	r2, [r3, #0]
 8009abe:	e003      	b.n	8009ac8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681a      	ldr	r2, [r3, #0]
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009ac8:	68fa      	ldr	r2, [r7, #12]
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	429a      	cmp	r2, r3
 8009ace:	d002      	beq.n	8009ad6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	687a      	ldr	r2, [r7, #4]
 8009ad4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009ad6:	bf00      	nop
 8009ad8:	3714      	adds	r7, #20
 8009ada:	46bd      	mov	sp, r7
 8009adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae0:	4770      	bx	lr
 8009ae2:	bf00      	nop
 8009ae4:	20002600 	.word	0x20002600
 8009ae8:	20002608 	.word	0x20002608

08009aec <__cvt>:
 8009aec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009af0:	ec55 4b10 	vmov	r4, r5, d0
 8009af4:	2d00      	cmp	r5, #0
 8009af6:	460e      	mov	r6, r1
 8009af8:	4619      	mov	r1, r3
 8009afa:	462b      	mov	r3, r5
 8009afc:	bfbb      	ittet	lt
 8009afe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009b02:	461d      	movlt	r5, r3
 8009b04:	2300      	movge	r3, #0
 8009b06:	232d      	movlt	r3, #45	; 0x2d
 8009b08:	700b      	strb	r3, [r1, #0]
 8009b0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b0c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009b10:	4691      	mov	r9, r2
 8009b12:	f023 0820 	bic.w	r8, r3, #32
 8009b16:	bfbc      	itt	lt
 8009b18:	4622      	movlt	r2, r4
 8009b1a:	4614      	movlt	r4, r2
 8009b1c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009b20:	d005      	beq.n	8009b2e <__cvt+0x42>
 8009b22:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009b26:	d100      	bne.n	8009b2a <__cvt+0x3e>
 8009b28:	3601      	adds	r6, #1
 8009b2a:	2102      	movs	r1, #2
 8009b2c:	e000      	b.n	8009b30 <__cvt+0x44>
 8009b2e:	2103      	movs	r1, #3
 8009b30:	ab03      	add	r3, sp, #12
 8009b32:	9301      	str	r3, [sp, #4]
 8009b34:	ab02      	add	r3, sp, #8
 8009b36:	9300      	str	r3, [sp, #0]
 8009b38:	ec45 4b10 	vmov	d0, r4, r5
 8009b3c:	4653      	mov	r3, sl
 8009b3e:	4632      	mov	r2, r6
 8009b40:	f000 fe7e 	bl	800a840 <_dtoa_r>
 8009b44:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009b48:	4607      	mov	r7, r0
 8009b4a:	d102      	bne.n	8009b52 <__cvt+0x66>
 8009b4c:	f019 0f01 	tst.w	r9, #1
 8009b50:	d022      	beq.n	8009b98 <__cvt+0xac>
 8009b52:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009b56:	eb07 0906 	add.w	r9, r7, r6
 8009b5a:	d110      	bne.n	8009b7e <__cvt+0x92>
 8009b5c:	783b      	ldrb	r3, [r7, #0]
 8009b5e:	2b30      	cmp	r3, #48	; 0x30
 8009b60:	d10a      	bne.n	8009b78 <__cvt+0x8c>
 8009b62:	2200      	movs	r2, #0
 8009b64:	2300      	movs	r3, #0
 8009b66:	4620      	mov	r0, r4
 8009b68:	4629      	mov	r1, r5
 8009b6a:	f7f6 ffad 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b6e:	b918      	cbnz	r0, 8009b78 <__cvt+0x8c>
 8009b70:	f1c6 0601 	rsb	r6, r6, #1
 8009b74:	f8ca 6000 	str.w	r6, [sl]
 8009b78:	f8da 3000 	ldr.w	r3, [sl]
 8009b7c:	4499      	add	r9, r3
 8009b7e:	2200      	movs	r2, #0
 8009b80:	2300      	movs	r3, #0
 8009b82:	4620      	mov	r0, r4
 8009b84:	4629      	mov	r1, r5
 8009b86:	f7f6 ff9f 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b8a:	b108      	cbz	r0, 8009b90 <__cvt+0xa4>
 8009b8c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009b90:	2230      	movs	r2, #48	; 0x30
 8009b92:	9b03      	ldr	r3, [sp, #12]
 8009b94:	454b      	cmp	r3, r9
 8009b96:	d307      	bcc.n	8009ba8 <__cvt+0xbc>
 8009b98:	9b03      	ldr	r3, [sp, #12]
 8009b9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009b9c:	1bdb      	subs	r3, r3, r7
 8009b9e:	4638      	mov	r0, r7
 8009ba0:	6013      	str	r3, [r2, #0]
 8009ba2:	b004      	add	sp, #16
 8009ba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ba8:	1c59      	adds	r1, r3, #1
 8009baa:	9103      	str	r1, [sp, #12]
 8009bac:	701a      	strb	r2, [r3, #0]
 8009bae:	e7f0      	b.n	8009b92 <__cvt+0xa6>

08009bb0 <__exponent>:
 8009bb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	2900      	cmp	r1, #0
 8009bb6:	bfb8      	it	lt
 8009bb8:	4249      	neglt	r1, r1
 8009bba:	f803 2b02 	strb.w	r2, [r3], #2
 8009bbe:	bfb4      	ite	lt
 8009bc0:	222d      	movlt	r2, #45	; 0x2d
 8009bc2:	222b      	movge	r2, #43	; 0x2b
 8009bc4:	2909      	cmp	r1, #9
 8009bc6:	7042      	strb	r2, [r0, #1]
 8009bc8:	dd2a      	ble.n	8009c20 <__exponent+0x70>
 8009bca:	f10d 0207 	add.w	r2, sp, #7
 8009bce:	4617      	mov	r7, r2
 8009bd0:	260a      	movs	r6, #10
 8009bd2:	4694      	mov	ip, r2
 8009bd4:	fb91 f5f6 	sdiv	r5, r1, r6
 8009bd8:	fb06 1415 	mls	r4, r6, r5, r1
 8009bdc:	3430      	adds	r4, #48	; 0x30
 8009bde:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009be2:	460c      	mov	r4, r1
 8009be4:	2c63      	cmp	r4, #99	; 0x63
 8009be6:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8009bea:	4629      	mov	r1, r5
 8009bec:	dcf1      	bgt.n	8009bd2 <__exponent+0x22>
 8009bee:	3130      	adds	r1, #48	; 0x30
 8009bf0:	f1ac 0402 	sub.w	r4, ip, #2
 8009bf4:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009bf8:	1c41      	adds	r1, r0, #1
 8009bfa:	4622      	mov	r2, r4
 8009bfc:	42ba      	cmp	r2, r7
 8009bfe:	d30a      	bcc.n	8009c16 <__exponent+0x66>
 8009c00:	f10d 0209 	add.w	r2, sp, #9
 8009c04:	eba2 020c 	sub.w	r2, r2, ip
 8009c08:	42bc      	cmp	r4, r7
 8009c0a:	bf88      	it	hi
 8009c0c:	2200      	movhi	r2, #0
 8009c0e:	4413      	add	r3, r2
 8009c10:	1a18      	subs	r0, r3, r0
 8009c12:	b003      	add	sp, #12
 8009c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c16:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009c1a:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009c1e:	e7ed      	b.n	8009bfc <__exponent+0x4c>
 8009c20:	2330      	movs	r3, #48	; 0x30
 8009c22:	3130      	adds	r1, #48	; 0x30
 8009c24:	7083      	strb	r3, [r0, #2]
 8009c26:	70c1      	strb	r1, [r0, #3]
 8009c28:	1d03      	adds	r3, r0, #4
 8009c2a:	e7f1      	b.n	8009c10 <__exponent+0x60>

08009c2c <_printf_float>:
 8009c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c30:	ed2d 8b02 	vpush	{d8}
 8009c34:	b08d      	sub	sp, #52	; 0x34
 8009c36:	460c      	mov	r4, r1
 8009c38:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009c3c:	4616      	mov	r6, r2
 8009c3e:	461f      	mov	r7, r3
 8009c40:	4605      	mov	r5, r0
 8009c42:	f000 fcdf 	bl	800a604 <_localeconv_r>
 8009c46:	f8d0 a000 	ldr.w	sl, [r0]
 8009c4a:	4650      	mov	r0, sl
 8009c4c:	f7f6 fb10 	bl	8000270 <strlen>
 8009c50:	2300      	movs	r3, #0
 8009c52:	930a      	str	r3, [sp, #40]	; 0x28
 8009c54:	6823      	ldr	r3, [r4, #0]
 8009c56:	9305      	str	r3, [sp, #20]
 8009c58:	f8d8 3000 	ldr.w	r3, [r8]
 8009c5c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009c60:	3307      	adds	r3, #7
 8009c62:	f023 0307 	bic.w	r3, r3, #7
 8009c66:	f103 0208 	add.w	r2, r3, #8
 8009c6a:	f8c8 2000 	str.w	r2, [r8]
 8009c6e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009c72:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009c76:	9307      	str	r3, [sp, #28]
 8009c78:	f8cd 8018 	str.w	r8, [sp, #24]
 8009c7c:	ee08 0a10 	vmov	s16, r0
 8009c80:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8009c84:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009c88:	4b9e      	ldr	r3, [pc, #632]	; (8009f04 <_printf_float+0x2d8>)
 8009c8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009c8e:	f7f6 ff4d 	bl	8000b2c <__aeabi_dcmpun>
 8009c92:	bb88      	cbnz	r0, 8009cf8 <_printf_float+0xcc>
 8009c94:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009c98:	4b9a      	ldr	r3, [pc, #616]	; (8009f04 <_printf_float+0x2d8>)
 8009c9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009c9e:	f7f6 ff27 	bl	8000af0 <__aeabi_dcmple>
 8009ca2:	bb48      	cbnz	r0, 8009cf8 <_printf_float+0xcc>
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	4640      	mov	r0, r8
 8009caa:	4649      	mov	r1, r9
 8009cac:	f7f6 ff16 	bl	8000adc <__aeabi_dcmplt>
 8009cb0:	b110      	cbz	r0, 8009cb8 <_printf_float+0x8c>
 8009cb2:	232d      	movs	r3, #45	; 0x2d
 8009cb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009cb8:	4a93      	ldr	r2, [pc, #588]	; (8009f08 <_printf_float+0x2dc>)
 8009cba:	4b94      	ldr	r3, [pc, #592]	; (8009f0c <_printf_float+0x2e0>)
 8009cbc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009cc0:	bf94      	ite	ls
 8009cc2:	4690      	movls	r8, r2
 8009cc4:	4698      	movhi	r8, r3
 8009cc6:	2303      	movs	r3, #3
 8009cc8:	6123      	str	r3, [r4, #16]
 8009cca:	9b05      	ldr	r3, [sp, #20]
 8009ccc:	f023 0304 	bic.w	r3, r3, #4
 8009cd0:	6023      	str	r3, [r4, #0]
 8009cd2:	f04f 0900 	mov.w	r9, #0
 8009cd6:	9700      	str	r7, [sp, #0]
 8009cd8:	4633      	mov	r3, r6
 8009cda:	aa0b      	add	r2, sp, #44	; 0x2c
 8009cdc:	4621      	mov	r1, r4
 8009cde:	4628      	mov	r0, r5
 8009ce0:	f000 f9da 	bl	800a098 <_printf_common>
 8009ce4:	3001      	adds	r0, #1
 8009ce6:	f040 8090 	bne.w	8009e0a <_printf_float+0x1de>
 8009cea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009cee:	b00d      	add	sp, #52	; 0x34
 8009cf0:	ecbd 8b02 	vpop	{d8}
 8009cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cf8:	4642      	mov	r2, r8
 8009cfa:	464b      	mov	r3, r9
 8009cfc:	4640      	mov	r0, r8
 8009cfe:	4649      	mov	r1, r9
 8009d00:	f7f6 ff14 	bl	8000b2c <__aeabi_dcmpun>
 8009d04:	b140      	cbz	r0, 8009d18 <_printf_float+0xec>
 8009d06:	464b      	mov	r3, r9
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	bfbc      	itt	lt
 8009d0c:	232d      	movlt	r3, #45	; 0x2d
 8009d0e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009d12:	4a7f      	ldr	r2, [pc, #508]	; (8009f10 <_printf_float+0x2e4>)
 8009d14:	4b7f      	ldr	r3, [pc, #508]	; (8009f14 <_printf_float+0x2e8>)
 8009d16:	e7d1      	b.n	8009cbc <_printf_float+0x90>
 8009d18:	6863      	ldr	r3, [r4, #4]
 8009d1a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009d1e:	9206      	str	r2, [sp, #24]
 8009d20:	1c5a      	adds	r2, r3, #1
 8009d22:	d13f      	bne.n	8009da4 <_printf_float+0x178>
 8009d24:	2306      	movs	r3, #6
 8009d26:	6063      	str	r3, [r4, #4]
 8009d28:	9b05      	ldr	r3, [sp, #20]
 8009d2a:	6861      	ldr	r1, [r4, #4]
 8009d2c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009d30:	2300      	movs	r3, #0
 8009d32:	9303      	str	r3, [sp, #12]
 8009d34:	ab0a      	add	r3, sp, #40	; 0x28
 8009d36:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009d3a:	ab09      	add	r3, sp, #36	; 0x24
 8009d3c:	ec49 8b10 	vmov	d0, r8, r9
 8009d40:	9300      	str	r3, [sp, #0]
 8009d42:	6022      	str	r2, [r4, #0]
 8009d44:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009d48:	4628      	mov	r0, r5
 8009d4a:	f7ff fecf 	bl	8009aec <__cvt>
 8009d4e:	9b06      	ldr	r3, [sp, #24]
 8009d50:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009d52:	2b47      	cmp	r3, #71	; 0x47
 8009d54:	4680      	mov	r8, r0
 8009d56:	d108      	bne.n	8009d6a <_printf_float+0x13e>
 8009d58:	1cc8      	adds	r0, r1, #3
 8009d5a:	db02      	blt.n	8009d62 <_printf_float+0x136>
 8009d5c:	6863      	ldr	r3, [r4, #4]
 8009d5e:	4299      	cmp	r1, r3
 8009d60:	dd41      	ble.n	8009de6 <_printf_float+0x1ba>
 8009d62:	f1ab 0302 	sub.w	r3, fp, #2
 8009d66:	fa5f fb83 	uxtb.w	fp, r3
 8009d6a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009d6e:	d820      	bhi.n	8009db2 <_printf_float+0x186>
 8009d70:	3901      	subs	r1, #1
 8009d72:	465a      	mov	r2, fp
 8009d74:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009d78:	9109      	str	r1, [sp, #36]	; 0x24
 8009d7a:	f7ff ff19 	bl	8009bb0 <__exponent>
 8009d7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d80:	1813      	adds	r3, r2, r0
 8009d82:	2a01      	cmp	r2, #1
 8009d84:	4681      	mov	r9, r0
 8009d86:	6123      	str	r3, [r4, #16]
 8009d88:	dc02      	bgt.n	8009d90 <_printf_float+0x164>
 8009d8a:	6822      	ldr	r2, [r4, #0]
 8009d8c:	07d2      	lsls	r2, r2, #31
 8009d8e:	d501      	bpl.n	8009d94 <_printf_float+0x168>
 8009d90:	3301      	adds	r3, #1
 8009d92:	6123      	str	r3, [r4, #16]
 8009d94:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d09c      	beq.n	8009cd6 <_printf_float+0xaa>
 8009d9c:	232d      	movs	r3, #45	; 0x2d
 8009d9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009da2:	e798      	b.n	8009cd6 <_printf_float+0xaa>
 8009da4:	9a06      	ldr	r2, [sp, #24]
 8009da6:	2a47      	cmp	r2, #71	; 0x47
 8009da8:	d1be      	bne.n	8009d28 <_printf_float+0xfc>
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d1bc      	bne.n	8009d28 <_printf_float+0xfc>
 8009dae:	2301      	movs	r3, #1
 8009db0:	e7b9      	b.n	8009d26 <_printf_float+0xfa>
 8009db2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009db6:	d118      	bne.n	8009dea <_printf_float+0x1be>
 8009db8:	2900      	cmp	r1, #0
 8009dba:	6863      	ldr	r3, [r4, #4]
 8009dbc:	dd0b      	ble.n	8009dd6 <_printf_float+0x1aa>
 8009dbe:	6121      	str	r1, [r4, #16]
 8009dc0:	b913      	cbnz	r3, 8009dc8 <_printf_float+0x19c>
 8009dc2:	6822      	ldr	r2, [r4, #0]
 8009dc4:	07d0      	lsls	r0, r2, #31
 8009dc6:	d502      	bpl.n	8009dce <_printf_float+0x1a2>
 8009dc8:	3301      	adds	r3, #1
 8009dca:	440b      	add	r3, r1
 8009dcc:	6123      	str	r3, [r4, #16]
 8009dce:	65a1      	str	r1, [r4, #88]	; 0x58
 8009dd0:	f04f 0900 	mov.w	r9, #0
 8009dd4:	e7de      	b.n	8009d94 <_printf_float+0x168>
 8009dd6:	b913      	cbnz	r3, 8009dde <_printf_float+0x1b2>
 8009dd8:	6822      	ldr	r2, [r4, #0]
 8009dda:	07d2      	lsls	r2, r2, #31
 8009ddc:	d501      	bpl.n	8009de2 <_printf_float+0x1b6>
 8009dde:	3302      	adds	r3, #2
 8009de0:	e7f4      	b.n	8009dcc <_printf_float+0x1a0>
 8009de2:	2301      	movs	r3, #1
 8009de4:	e7f2      	b.n	8009dcc <_printf_float+0x1a0>
 8009de6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009dea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009dec:	4299      	cmp	r1, r3
 8009dee:	db05      	blt.n	8009dfc <_printf_float+0x1d0>
 8009df0:	6823      	ldr	r3, [r4, #0]
 8009df2:	6121      	str	r1, [r4, #16]
 8009df4:	07d8      	lsls	r0, r3, #31
 8009df6:	d5ea      	bpl.n	8009dce <_printf_float+0x1a2>
 8009df8:	1c4b      	adds	r3, r1, #1
 8009dfa:	e7e7      	b.n	8009dcc <_printf_float+0x1a0>
 8009dfc:	2900      	cmp	r1, #0
 8009dfe:	bfd4      	ite	le
 8009e00:	f1c1 0202 	rsble	r2, r1, #2
 8009e04:	2201      	movgt	r2, #1
 8009e06:	4413      	add	r3, r2
 8009e08:	e7e0      	b.n	8009dcc <_printf_float+0x1a0>
 8009e0a:	6823      	ldr	r3, [r4, #0]
 8009e0c:	055a      	lsls	r2, r3, #21
 8009e0e:	d407      	bmi.n	8009e20 <_printf_float+0x1f4>
 8009e10:	6923      	ldr	r3, [r4, #16]
 8009e12:	4642      	mov	r2, r8
 8009e14:	4631      	mov	r1, r6
 8009e16:	4628      	mov	r0, r5
 8009e18:	47b8      	blx	r7
 8009e1a:	3001      	adds	r0, #1
 8009e1c:	d12c      	bne.n	8009e78 <_printf_float+0x24c>
 8009e1e:	e764      	b.n	8009cea <_printf_float+0xbe>
 8009e20:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009e24:	f240 80e0 	bls.w	8009fe8 <_printf_float+0x3bc>
 8009e28:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	2300      	movs	r3, #0
 8009e30:	f7f6 fe4a 	bl	8000ac8 <__aeabi_dcmpeq>
 8009e34:	2800      	cmp	r0, #0
 8009e36:	d034      	beq.n	8009ea2 <_printf_float+0x276>
 8009e38:	4a37      	ldr	r2, [pc, #220]	; (8009f18 <_printf_float+0x2ec>)
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	4631      	mov	r1, r6
 8009e3e:	4628      	mov	r0, r5
 8009e40:	47b8      	blx	r7
 8009e42:	3001      	adds	r0, #1
 8009e44:	f43f af51 	beq.w	8009cea <_printf_float+0xbe>
 8009e48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009e4c:	429a      	cmp	r2, r3
 8009e4e:	db02      	blt.n	8009e56 <_printf_float+0x22a>
 8009e50:	6823      	ldr	r3, [r4, #0]
 8009e52:	07d8      	lsls	r0, r3, #31
 8009e54:	d510      	bpl.n	8009e78 <_printf_float+0x24c>
 8009e56:	ee18 3a10 	vmov	r3, s16
 8009e5a:	4652      	mov	r2, sl
 8009e5c:	4631      	mov	r1, r6
 8009e5e:	4628      	mov	r0, r5
 8009e60:	47b8      	blx	r7
 8009e62:	3001      	adds	r0, #1
 8009e64:	f43f af41 	beq.w	8009cea <_printf_float+0xbe>
 8009e68:	f04f 0800 	mov.w	r8, #0
 8009e6c:	f104 091a 	add.w	r9, r4, #26
 8009e70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e72:	3b01      	subs	r3, #1
 8009e74:	4543      	cmp	r3, r8
 8009e76:	dc09      	bgt.n	8009e8c <_printf_float+0x260>
 8009e78:	6823      	ldr	r3, [r4, #0]
 8009e7a:	079b      	lsls	r3, r3, #30
 8009e7c:	f100 8107 	bmi.w	800a08e <_printf_float+0x462>
 8009e80:	68e0      	ldr	r0, [r4, #12]
 8009e82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e84:	4298      	cmp	r0, r3
 8009e86:	bfb8      	it	lt
 8009e88:	4618      	movlt	r0, r3
 8009e8a:	e730      	b.n	8009cee <_printf_float+0xc2>
 8009e8c:	2301      	movs	r3, #1
 8009e8e:	464a      	mov	r2, r9
 8009e90:	4631      	mov	r1, r6
 8009e92:	4628      	mov	r0, r5
 8009e94:	47b8      	blx	r7
 8009e96:	3001      	adds	r0, #1
 8009e98:	f43f af27 	beq.w	8009cea <_printf_float+0xbe>
 8009e9c:	f108 0801 	add.w	r8, r8, #1
 8009ea0:	e7e6      	b.n	8009e70 <_printf_float+0x244>
 8009ea2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	dc39      	bgt.n	8009f1c <_printf_float+0x2f0>
 8009ea8:	4a1b      	ldr	r2, [pc, #108]	; (8009f18 <_printf_float+0x2ec>)
 8009eaa:	2301      	movs	r3, #1
 8009eac:	4631      	mov	r1, r6
 8009eae:	4628      	mov	r0, r5
 8009eb0:	47b8      	blx	r7
 8009eb2:	3001      	adds	r0, #1
 8009eb4:	f43f af19 	beq.w	8009cea <_printf_float+0xbe>
 8009eb8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009ebc:	4313      	orrs	r3, r2
 8009ebe:	d102      	bne.n	8009ec6 <_printf_float+0x29a>
 8009ec0:	6823      	ldr	r3, [r4, #0]
 8009ec2:	07d9      	lsls	r1, r3, #31
 8009ec4:	d5d8      	bpl.n	8009e78 <_printf_float+0x24c>
 8009ec6:	ee18 3a10 	vmov	r3, s16
 8009eca:	4652      	mov	r2, sl
 8009ecc:	4631      	mov	r1, r6
 8009ece:	4628      	mov	r0, r5
 8009ed0:	47b8      	blx	r7
 8009ed2:	3001      	adds	r0, #1
 8009ed4:	f43f af09 	beq.w	8009cea <_printf_float+0xbe>
 8009ed8:	f04f 0900 	mov.w	r9, #0
 8009edc:	f104 0a1a 	add.w	sl, r4, #26
 8009ee0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ee2:	425b      	negs	r3, r3
 8009ee4:	454b      	cmp	r3, r9
 8009ee6:	dc01      	bgt.n	8009eec <_printf_float+0x2c0>
 8009ee8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009eea:	e792      	b.n	8009e12 <_printf_float+0x1e6>
 8009eec:	2301      	movs	r3, #1
 8009eee:	4652      	mov	r2, sl
 8009ef0:	4631      	mov	r1, r6
 8009ef2:	4628      	mov	r0, r5
 8009ef4:	47b8      	blx	r7
 8009ef6:	3001      	adds	r0, #1
 8009ef8:	f43f aef7 	beq.w	8009cea <_printf_float+0xbe>
 8009efc:	f109 0901 	add.w	r9, r9, #1
 8009f00:	e7ee      	b.n	8009ee0 <_printf_float+0x2b4>
 8009f02:	bf00      	nop
 8009f04:	7fefffff 	.word	0x7fefffff
 8009f08:	0800d1a0 	.word	0x0800d1a0
 8009f0c:	0800d1a4 	.word	0x0800d1a4
 8009f10:	0800d1a8 	.word	0x0800d1a8
 8009f14:	0800d1ac 	.word	0x0800d1ac
 8009f18:	0800d1b0 	.word	0x0800d1b0
 8009f1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f1e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009f20:	429a      	cmp	r2, r3
 8009f22:	bfa8      	it	ge
 8009f24:	461a      	movge	r2, r3
 8009f26:	2a00      	cmp	r2, #0
 8009f28:	4691      	mov	r9, r2
 8009f2a:	dc37      	bgt.n	8009f9c <_printf_float+0x370>
 8009f2c:	f04f 0b00 	mov.w	fp, #0
 8009f30:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009f34:	f104 021a 	add.w	r2, r4, #26
 8009f38:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009f3a:	9305      	str	r3, [sp, #20]
 8009f3c:	eba3 0309 	sub.w	r3, r3, r9
 8009f40:	455b      	cmp	r3, fp
 8009f42:	dc33      	bgt.n	8009fac <_printf_float+0x380>
 8009f44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009f48:	429a      	cmp	r2, r3
 8009f4a:	db3b      	blt.n	8009fc4 <_printf_float+0x398>
 8009f4c:	6823      	ldr	r3, [r4, #0]
 8009f4e:	07da      	lsls	r2, r3, #31
 8009f50:	d438      	bmi.n	8009fc4 <_printf_float+0x398>
 8009f52:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009f56:	eba2 0903 	sub.w	r9, r2, r3
 8009f5a:	9b05      	ldr	r3, [sp, #20]
 8009f5c:	1ad2      	subs	r2, r2, r3
 8009f5e:	4591      	cmp	r9, r2
 8009f60:	bfa8      	it	ge
 8009f62:	4691      	movge	r9, r2
 8009f64:	f1b9 0f00 	cmp.w	r9, #0
 8009f68:	dc35      	bgt.n	8009fd6 <_printf_float+0x3aa>
 8009f6a:	f04f 0800 	mov.w	r8, #0
 8009f6e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009f72:	f104 0a1a 	add.w	sl, r4, #26
 8009f76:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009f7a:	1a9b      	subs	r3, r3, r2
 8009f7c:	eba3 0309 	sub.w	r3, r3, r9
 8009f80:	4543      	cmp	r3, r8
 8009f82:	f77f af79 	ble.w	8009e78 <_printf_float+0x24c>
 8009f86:	2301      	movs	r3, #1
 8009f88:	4652      	mov	r2, sl
 8009f8a:	4631      	mov	r1, r6
 8009f8c:	4628      	mov	r0, r5
 8009f8e:	47b8      	blx	r7
 8009f90:	3001      	adds	r0, #1
 8009f92:	f43f aeaa 	beq.w	8009cea <_printf_float+0xbe>
 8009f96:	f108 0801 	add.w	r8, r8, #1
 8009f9a:	e7ec      	b.n	8009f76 <_printf_float+0x34a>
 8009f9c:	4613      	mov	r3, r2
 8009f9e:	4631      	mov	r1, r6
 8009fa0:	4642      	mov	r2, r8
 8009fa2:	4628      	mov	r0, r5
 8009fa4:	47b8      	blx	r7
 8009fa6:	3001      	adds	r0, #1
 8009fa8:	d1c0      	bne.n	8009f2c <_printf_float+0x300>
 8009faa:	e69e      	b.n	8009cea <_printf_float+0xbe>
 8009fac:	2301      	movs	r3, #1
 8009fae:	4631      	mov	r1, r6
 8009fb0:	4628      	mov	r0, r5
 8009fb2:	9205      	str	r2, [sp, #20]
 8009fb4:	47b8      	blx	r7
 8009fb6:	3001      	adds	r0, #1
 8009fb8:	f43f ae97 	beq.w	8009cea <_printf_float+0xbe>
 8009fbc:	9a05      	ldr	r2, [sp, #20]
 8009fbe:	f10b 0b01 	add.w	fp, fp, #1
 8009fc2:	e7b9      	b.n	8009f38 <_printf_float+0x30c>
 8009fc4:	ee18 3a10 	vmov	r3, s16
 8009fc8:	4652      	mov	r2, sl
 8009fca:	4631      	mov	r1, r6
 8009fcc:	4628      	mov	r0, r5
 8009fce:	47b8      	blx	r7
 8009fd0:	3001      	adds	r0, #1
 8009fd2:	d1be      	bne.n	8009f52 <_printf_float+0x326>
 8009fd4:	e689      	b.n	8009cea <_printf_float+0xbe>
 8009fd6:	9a05      	ldr	r2, [sp, #20]
 8009fd8:	464b      	mov	r3, r9
 8009fda:	4442      	add	r2, r8
 8009fdc:	4631      	mov	r1, r6
 8009fde:	4628      	mov	r0, r5
 8009fe0:	47b8      	blx	r7
 8009fe2:	3001      	adds	r0, #1
 8009fe4:	d1c1      	bne.n	8009f6a <_printf_float+0x33e>
 8009fe6:	e680      	b.n	8009cea <_printf_float+0xbe>
 8009fe8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009fea:	2a01      	cmp	r2, #1
 8009fec:	dc01      	bgt.n	8009ff2 <_printf_float+0x3c6>
 8009fee:	07db      	lsls	r3, r3, #31
 8009ff0:	d53a      	bpl.n	800a068 <_printf_float+0x43c>
 8009ff2:	2301      	movs	r3, #1
 8009ff4:	4642      	mov	r2, r8
 8009ff6:	4631      	mov	r1, r6
 8009ff8:	4628      	mov	r0, r5
 8009ffa:	47b8      	blx	r7
 8009ffc:	3001      	adds	r0, #1
 8009ffe:	f43f ae74 	beq.w	8009cea <_printf_float+0xbe>
 800a002:	ee18 3a10 	vmov	r3, s16
 800a006:	4652      	mov	r2, sl
 800a008:	4631      	mov	r1, r6
 800a00a:	4628      	mov	r0, r5
 800a00c:	47b8      	blx	r7
 800a00e:	3001      	adds	r0, #1
 800a010:	f43f ae6b 	beq.w	8009cea <_printf_float+0xbe>
 800a014:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a018:	2200      	movs	r2, #0
 800a01a:	2300      	movs	r3, #0
 800a01c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800a020:	f7f6 fd52 	bl	8000ac8 <__aeabi_dcmpeq>
 800a024:	b9d8      	cbnz	r0, 800a05e <_printf_float+0x432>
 800a026:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800a02a:	f108 0201 	add.w	r2, r8, #1
 800a02e:	4631      	mov	r1, r6
 800a030:	4628      	mov	r0, r5
 800a032:	47b8      	blx	r7
 800a034:	3001      	adds	r0, #1
 800a036:	d10e      	bne.n	800a056 <_printf_float+0x42a>
 800a038:	e657      	b.n	8009cea <_printf_float+0xbe>
 800a03a:	2301      	movs	r3, #1
 800a03c:	4652      	mov	r2, sl
 800a03e:	4631      	mov	r1, r6
 800a040:	4628      	mov	r0, r5
 800a042:	47b8      	blx	r7
 800a044:	3001      	adds	r0, #1
 800a046:	f43f ae50 	beq.w	8009cea <_printf_float+0xbe>
 800a04a:	f108 0801 	add.w	r8, r8, #1
 800a04e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a050:	3b01      	subs	r3, #1
 800a052:	4543      	cmp	r3, r8
 800a054:	dcf1      	bgt.n	800a03a <_printf_float+0x40e>
 800a056:	464b      	mov	r3, r9
 800a058:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a05c:	e6da      	b.n	8009e14 <_printf_float+0x1e8>
 800a05e:	f04f 0800 	mov.w	r8, #0
 800a062:	f104 0a1a 	add.w	sl, r4, #26
 800a066:	e7f2      	b.n	800a04e <_printf_float+0x422>
 800a068:	2301      	movs	r3, #1
 800a06a:	4642      	mov	r2, r8
 800a06c:	e7df      	b.n	800a02e <_printf_float+0x402>
 800a06e:	2301      	movs	r3, #1
 800a070:	464a      	mov	r2, r9
 800a072:	4631      	mov	r1, r6
 800a074:	4628      	mov	r0, r5
 800a076:	47b8      	blx	r7
 800a078:	3001      	adds	r0, #1
 800a07a:	f43f ae36 	beq.w	8009cea <_printf_float+0xbe>
 800a07e:	f108 0801 	add.w	r8, r8, #1
 800a082:	68e3      	ldr	r3, [r4, #12]
 800a084:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a086:	1a5b      	subs	r3, r3, r1
 800a088:	4543      	cmp	r3, r8
 800a08a:	dcf0      	bgt.n	800a06e <_printf_float+0x442>
 800a08c:	e6f8      	b.n	8009e80 <_printf_float+0x254>
 800a08e:	f04f 0800 	mov.w	r8, #0
 800a092:	f104 0919 	add.w	r9, r4, #25
 800a096:	e7f4      	b.n	800a082 <_printf_float+0x456>

0800a098 <_printf_common>:
 800a098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a09c:	4616      	mov	r6, r2
 800a09e:	4699      	mov	r9, r3
 800a0a0:	688a      	ldr	r2, [r1, #8]
 800a0a2:	690b      	ldr	r3, [r1, #16]
 800a0a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a0a8:	4293      	cmp	r3, r2
 800a0aa:	bfb8      	it	lt
 800a0ac:	4613      	movlt	r3, r2
 800a0ae:	6033      	str	r3, [r6, #0]
 800a0b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a0b4:	4607      	mov	r7, r0
 800a0b6:	460c      	mov	r4, r1
 800a0b8:	b10a      	cbz	r2, 800a0be <_printf_common+0x26>
 800a0ba:	3301      	adds	r3, #1
 800a0bc:	6033      	str	r3, [r6, #0]
 800a0be:	6823      	ldr	r3, [r4, #0]
 800a0c0:	0699      	lsls	r1, r3, #26
 800a0c2:	bf42      	ittt	mi
 800a0c4:	6833      	ldrmi	r3, [r6, #0]
 800a0c6:	3302      	addmi	r3, #2
 800a0c8:	6033      	strmi	r3, [r6, #0]
 800a0ca:	6825      	ldr	r5, [r4, #0]
 800a0cc:	f015 0506 	ands.w	r5, r5, #6
 800a0d0:	d106      	bne.n	800a0e0 <_printf_common+0x48>
 800a0d2:	f104 0a19 	add.w	sl, r4, #25
 800a0d6:	68e3      	ldr	r3, [r4, #12]
 800a0d8:	6832      	ldr	r2, [r6, #0]
 800a0da:	1a9b      	subs	r3, r3, r2
 800a0dc:	42ab      	cmp	r3, r5
 800a0de:	dc26      	bgt.n	800a12e <_printf_common+0x96>
 800a0e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a0e4:	1e13      	subs	r3, r2, #0
 800a0e6:	6822      	ldr	r2, [r4, #0]
 800a0e8:	bf18      	it	ne
 800a0ea:	2301      	movne	r3, #1
 800a0ec:	0692      	lsls	r2, r2, #26
 800a0ee:	d42b      	bmi.n	800a148 <_printf_common+0xb0>
 800a0f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a0f4:	4649      	mov	r1, r9
 800a0f6:	4638      	mov	r0, r7
 800a0f8:	47c0      	blx	r8
 800a0fa:	3001      	adds	r0, #1
 800a0fc:	d01e      	beq.n	800a13c <_printf_common+0xa4>
 800a0fe:	6823      	ldr	r3, [r4, #0]
 800a100:	6922      	ldr	r2, [r4, #16]
 800a102:	f003 0306 	and.w	r3, r3, #6
 800a106:	2b04      	cmp	r3, #4
 800a108:	bf02      	ittt	eq
 800a10a:	68e5      	ldreq	r5, [r4, #12]
 800a10c:	6833      	ldreq	r3, [r6, #0]
 800a10e:	1aed      	subeq	r5, r5, r3
 800a110:	68a3      	ldr	r3, [r4, #8]
 800a112:	bf0c      	ite	eq
 800a114:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a118:	2500      	movne	r5, #0
 800a11a:	4293      	cmp	r3, r2
 800a11c:	bfc4      	itt	gt
 800a11e:	1a9b      	subgt	r3, r3, r2
 800a120:	18ed      	addgt	r5, r5, r3
 800a122:	2600      	movs	r6, #0
 800a124:	341a      	adds	r4, #26
 800a126:	42b5      	cmp	r5, r6
 800a128:	d11a      	bne.n	800a160 <_printf_common+0xc8>
 800a12a:	2000      	movs	r0, #0
 800a12c:	e008      	b.n	800a140 <_printf_common+0xa8>
 800a12e:	2301      	movs	r3, #1
 800a130:	4652      	mov	r2, sl
 800a132:	4649      	mov	r1, r9
 800a134:	4638      	mov	r0, r7
 800a136:	47c0      	blx	r8
 800a138:	3001      	adds	r0, #1
 800a13a:	d103      	bne.n	800a144 <_printf_common+0xac>
 800a13c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a144:	3501      	adds	r5, #1
 800a146:	e7c6      	b.n	800a0d6 <_printf_common+0x3e>
 800a148:	18e1      	adds	r1, r4, r3
 800a14a:	1c5a      	adds	r2, r3, #1
 800a14c:	2030      	movs	r0, #48	; 0x30
 800a14e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a152:	4422      	add	r2, r4
 800a154:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a158:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a15c:	3302      	adds	r3, #2
 800a15e:	e7c7      	b.n	800a0f0 <_printf_common+0x58>
 800a160:	2301      	movs	r3, #1
 800a162:	4622      	mov	r2, r4
 800a164:	4649      	mov	r1, r9
 800a166:	4638      	mov	r0, r7
 800a168:	47c0      	blx	r8
 800a16a:	3001      	adds	r0, #1
 800a16c:	d0e6      	beq.n	800a13c <_printf_common+0xa4>
 800a16e:	3601      	adds	r6, #1
 800a170:	e7d9      	b.n	800a126 <_printf_common+0x8e>
	...

0800a174 <_printf_i>:
 800a174:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a178:	7e0f      	ldrb	r7, [r1, #24]
 800a17a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a17c:	2f78      	cmp	r7, #120	; 0x78
 800a17e:	4691      	mov	r9, r2
 800a180:	4680      	mov	r8, r0
 800a182:	460c      	mov	r4, r1
 800a184:	469a      	mov	sl, r3
 800a186:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a18a:	d807      	bhi.n	800a19c <_printf_i+0x28>
 800a18c:	2f62      	cmp	r7, #98	; 0x62
 800a18e:	d80a      	bhi.n	800a1a6 <_printf_i+0x32>
 800a190:	2f00      	cmp	r7, #0
 800a192:	f000 80d4 	beq.w	800a33e <_printf_i+0x1ca>
 800a196:	2f58      	cmp	r7, #88	; 0x58
 800a198:	f000 80c0 	beq.w	800a31c <_printf_i+0x1a8>
 800a19c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a1a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a1a4:	e03a      	b.n	800a21c <_printf_i+0xa8>
 800a1a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a1aa:	2b15      	cmp	r3, #21
 800a1ac:	d8f6      	bhi.n	800a19c <_printf_i+0x28>
 800a1ae:	a101      	add	r1, pc, #4	; (adr r1, 800a1b4 <_printf_i+0x40>)
 800a1b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a1b4:	0800a20d 	.word	0x0800a20d
 800a1b8:	0800a221 	.word	0x0800a221
 800a1bc:	0800a19d 	.word	0x0800a19d
 800a1c0:	0800a19d 	.word	0x0800a19d
 800a1c4:	0800a19d 	.word	0x0800a19d
 800a1c8:	0800a19d 	.word	0x0800a19d
 800a1cc:	0800a221 	.word	0x0800a221
 800a1d0:	0800a19d 	.word	0x0800a19d
 800a1d4:	0800a19d 	.word	0x0800a19d
 800a1d8:	0800a19d 	.word	0x0800a19d
 800a1dc:	0800a19d 	.word	0x0800a19d
 800a1e0:	0800a325 	.word	0x0800a325
 800a1e4:	0800a24d 	.word	0x0800a24d
 800a1e8:	0800a2df 	.word	0x0800a2df
 800a1ec:	0800a19d 	.word	0x0800a19d
 800a1f0:	0800a19d 	.word	0x0800a19d
 800a1f4:	0800a347 	.word	0x0800a347
 800a1f8:	0800a19d 	.word	0x0800a19d
 800a1fc:	0800a24d 	.word	0x0800a24d
 800a200:	0800a19d 	.word	0x0800a19d
 800a204:	0800a19d 	.word	0x0800a19d
 800a208:	0800a2e7 	.word	0x0800a2e7
 800a20c:	682b      	ldr	r3, [r5, #0]
 800a20e:	1d1a      	adds	r2, r3, #4
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	602a      	str	r2, [r5, #0]
 800a214:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a218:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a21c:	2301      	movs	r3, #1
 800a21e:	e09f      	b.n	800a360 <_printf_i+0x1ec>
 800a220:	6820      	ldr	r0, [r4, #0]
 800a222:	682b      	ldr	r3, [r5, #0]
 800a224:	0607      	lsls	r7, r0, #24
 800a226:	f103 0104 	add.w	r1, r3, #4
 800a22a:	6029      	str	r1, [r5, #0]
 800a22c:	d501      	bpl.n	800a232 <_printf_i+0xbe>
 800a22e:	681e      	ldr	r6, [r3, #0]
 800a230:	e003      	b.n	800a23a <_printf_i+0xc6>
 800a232:	0646      	lsls	r6, r0, #25
 800a234:	d5fb      	bpl.n	800a22e <_printf_i+0xba>
 800a236:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a23a:	2e00      	cmp	r6, #0
 800a23c:	da03      	bge.n	800a246 <_printf_i+0xd2>
 800a23e:	232d      	movs	r3, #45	; 0x2d
 800a240:	4276      	negs	r6, r6
 800a242:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a246:	485a      	ldr	r0, [pc, #360]	; (800a3b0 <_printf_i+0x23c>)
 800a248:	230a      	movs	r3, #10
 800a24a:	e012      	b.n	800a272 <_printf_i+0xfe>
 800a24c:	682b      	ldr	r3, [r5, #0]
 800a24e:	6820      	ldr	r0, [r4, #0]
 800a250:	1d19      	adds	r1, r3, #4
 800a252:	6029      	str	r1, [r5, #0]
 800a254:	0605      	lsls	r5, r0, #24
 800a256:	d501      	bpl.n	800a25c <_printf_i+0xe8>
 800a258:	681e      	ldr	r6, [r3, #0]
 800a25a:	e002      	b.n	800a262 <_printf_i+0xee>
 800a25c:	0641      	lsls	r1, r0, #25
 800a25e:	d5fb      	bpl.n	800a258 <_printf_i+0xe4>
 800a260:	881e      	ldrh	r6, [r3, #0]
 800a262:	4853      	ldr	r0, [pc, #332]	; (800a3b0 <_printf_i+0x23c>)
 800a264:	2f6f      	cmp	r7, #111	; 0x6f
 800a266:	bf0c      	ite	eq
 800a268:	2308      	moveq	r3, #8
 800a26a:	230a      	movne	r3, #10
 800a26c:	2100      	movs	r1, #0
 800a26e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a272:	6865      	ldr	r5, [r4, #4]
 800a274:	60a5      	str	r5, [r4, #8]
 800a276:	2d00      	cmp	r5, #0
 800a278:	bfa2      	ittt	ge
 800a27a:	6821      	ldrge	r1, [r4, #0]
 800a27c:	f021 0104 	bicge.w	r1, r1, #4
 800a280:	6021      	strge	r1, [r4, #0]
 800a282:	b90e      	cbnz	r6, 800a288 <_printf_i+0x114>
 800a284:	2d00      	cmp	r5, #0
 800a286:	d04b      	beq.n	800a320 <_printf_i+0x1ac>
 800a288:	4615      	mov	r5, r2
 800a28a:	fbb6 f1f3 	udiv	r1, r6, r3
 800a28e:	fb03 6711 	mls	r7, r3, r1, r6
 800a292:	5dc7      	ldrb	r7, [r0, r7]
 800a294:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a298:	4637      	mov	r7, r6
 800a29a:	42bb      	cmp	r3, r7
 800a29c:	460e      	mov	r6, r1
 800a29e:	d9f4      	bls.n	800a28a <_printf_i+0x116>
 800a2a0:	2b08      	cmp	r3, #8
 800a2a2:	d10b      	bne.n	800a2bc <_printf_i+0x148>
 800a2a4:	6823      	ldr	r3, [r4, #0]
 800a2a6:	07de      	lsls	r6, r3, #31
 800a2a8:	d508      	bpl.n	800a2bc <_printf_i+0x148>
 800a2aa:	6923      	ldr	r3, [r4, #16]
 800a2ac:	6861      	ldr	r1, [r4, #4]
 800a2ae:	4299      	cmp	r1, r3
 800a2b0:	bfde      	ittt	le
 800a2b2:	2330      	movle	r3, #48	; 0x30
 800a2b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a2b8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a2bc:	1b52      	subs	r2, r2, r5
 800a2be:	6122      	str	r2, [r4, #16]
 800a2c0:	f8cd a000 	str.w	sl, [sp]
 800a2c4:	464b      	mov	r3, r9
 800a2c6:	aa03      	add	r2, sp, #12
 800a2c8:	4621      	mov	r1, r4
 800a2ca:	4640      	mov	r0, r8
 800a2cc:	f7ff fee4 	bl	800a098 <_printf_common>
 800a2d0:	3001      	adds	r0, #1
 800a2d2:	d14a      	bne.n	800a36a <_printf_i+0x1f6>
 800a2d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a2d8:	b004      	add	sp, #16
 800a2da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2de:	6823      	ldr	r3, [r4, #0]
 800a2e0:	f043 0320 	orr.w	r3, r3, #32
 800a2e4:	6023      	str	r3, [r4, #0]
 800a2e6:	4833      	ldr	r0, [pc, #204]	; (800a3b4 <_printf_i+0x240>)
 800a2e8:	2778      	movs	r7, #120	; 0x78
 800a2ea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a2ee:	6823      	ldr	r3, [r4, #0]
 800a2f0:	6829      	ldr	r1, [r5, #0]
 800a2f2:	061f      	lsls	r7, r3, #24
 800a2f4:	f851 6b04 	ldr.w	r6, [r1], #4
 800a2f8:	d402      	bmi.n	800a300 <_printf_i+0x18c>
 800a2fa:	065f      	lsls	r7, r3, #25
 800a2fc:	bf48      	it	mi
 800a2fe:	b2b6      	uxthmi	r6, r6
 800a300:	07df      	lsls	r7, r3, #31
 800a302:	bf48      	it	mi
 800a304:	f043 0320 	orrmi.w	r3, r3, #32
 800a308:	6029      	str	r1, [r5, #0]
 800a30a:	bf48      	it	mi
 800a30c:	6023      	strmi	r3, [r4, #0]
 800a30e:	b91e      	cbnz	r6, 800a318 <_printf_i+0x1a4>
 800a310:	6823      	ldr	r3, [r4, #0]
 800a312:	f023 0320 	bic.w	r3, r3, #32
 800a316:	6023      	str	r3, [r4, #0]
 800a318:	2310      	movs	r3, #16
 800a31a:	e7a7      	b.n	800a26c <_printf_i+0xf8>
 800a31c:	4824      	ldr	r0, [pc, #144]	; (800a3b0 <_printf_i+0x23c>)
 800a31e:	e7e4      	b.n	800a2ea <_printf_i+0x176>
 800a320:	4615      	mov	r5, r2
 800a322:	e7bd      	b.n	800a2a0 <_printf_i+0x12c>
 800a324:	682b      	ldr	r3, [r5, #0]
 800a326:	6826      	ldr	r6, [r4, #0]
 800a328:	6961      	ldr	r1, [r4, #20]
 800a32a:	1d18      	adds	r0, r3, #4
 800a32c:	6028      	str	r0, [r5, #0]
 800a32e:	0635      	lsls	r5, r6, #24
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	d501      	bpl.n	800a338 <_printf_i+0x1c4>
 800a334:	6019      	str	r1, [r3, #0]
 800a336:	e002      	b.n	800a33e <_printf_i+0x1ca>
 800a338:	0670      	lsls	r0, r6, #25
 800a33a:	d5fb      	bpl.n	800a334 <_printf_i+0x1c0>
 800a33c:	8019      	strh	r1, [r3, #0]
 800a33e:	2300      	movs	r3, #0
 800a340:	6123      	str	r3, [r4, #16]
 800a342:	4615      	mov	r5, r2
 800a344:	e7bc      	b.n	800a2c0 <_printf_i+0x14c>
 800a346:	682b      	ldr	r3, [r5, #0]
 800a348:	1d1a      	adds	r2, r3, #4
 800a34a:	602a      	str	r2, [r5, #0]
 800a34c:	681d      	ldr	r5, [r3, #0]
 800a34e:	6862      	ldr	r2, [r4, #4]
 800a350:	2100      	movs	r1, #0
 800a352:	4628      	mov	r0, r5
 800a354:	f7f5 ff3c 	bl	80001d0 <memchr>
 800a358:	b108      	cbz	r0, 800a35e <_printf_i+0x1ea>
 800a35a:	1b40      	subs	r0, r0, r5
 800a35c:	6060      	str	r0, [r4, #4]
 800a35e:	6863      	ldr	r3, [r4, #4]
 800a360:	6123      	str	r3, [r4, #16]
 800a362:	2300      	movs	r3, #0
 800a364:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a368:	e7aa      	b.n	800a2c0 <_printf_i+0x14c>
 800a36a:	6923      	ldr	r3, [r4, #16]
 800a36c:	462a      	mov	r2, r5
 800a36e:	4649      	mov	r1, r9
 800a370:	4640      	mov	r0, r8
 800a372:	47d0      	blx	sl
 800a374:	3001      	adds	r0, #1
 800a376:	d0ad      	beq.n	800a2d4 <_printf_i+0x160>
 800a378:	6823      	ldr	r3, [r4, #0]
 800a37a:	079b      	lsls	r3, r3, #30
 800a37c:	d413      	bmi.n	800a3a6 <_printf_i+0x232>
 800a37e:	68e0      	ldr	r0, [r4, #12]
 800a380:	9b03      	ldr	r3, [sp, #12]
 800a382:	4298      	cmp	r0, r3
 800a384:	bfb8      	it	lt
 800a386:	4618      	movlt	r0, r3
 800a388:	e7a6      	b.n	800a2d8 <_printf_i+0x164>
 800a38a:	2301      	movs	r3, #1
 800a38c:	4632      	mov	r2, r6
 800a38e:	4649      	mov	r1, r9
 800a390:	4640      	mov	r0, r8
 800a392:	47d0      	blx	sl
 800a394:	3001      	adds	r0, #1
 800a396:	d09d      	beq.n	800a2d4 <_printf_i+0x160>
 800a398:	3501      	adds	r5, #1
 800a39a:	68e3      	ldr	r3, [r4, #12]
 800a39c:	9903      	ldr	r1, [sp, #12]
 800a39e:	1a5b      	subs	r3, r3, r1
 800a3a0:	42ab      	cmp	r3, r5
 800a3a2:	dcf2      	bgt.n	800a38a <_printf_i+0x216>
 800a3a4:	e7eb      	b.n	800a37e <_printf_i+0x20a>
 800a3a6:	2500      	movs	r5, #0
 800a3a8:	f104 0619 	add.w	r6, r4, #25
 800a3ac:	e7f5      	b.n	800a39a <_printf_i+0x226>
 800a3ae:	bf00      	nop
 800a3b0:	0800d1b2 	.word	0x0800d1b2
 800a3b4:	0800d1c3 	.word	0x0800d1c3

0800a3b8 <std>:
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	b510      	push	{r4, lr}
 800a3bc:	4604      	mov	r4, r0
 800a3be:	e9c0 3300 	strd	r3, r3, [r0]
 800a3c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a3c6:	6083      	str	r3, [r0, #8]
 800a3c8:	8181      	strh	r1, [r0, #12]
 800a3ca:	6643      	str	r3, [r0, #100]	; 0x64
 800a3cc:	81c2      	strh	r2, [r0, #14]
 800a3ce:	6183      	str	r3, [r0, #24]
 800a3d0:	4619      	mov	r1, r3
 800a3d2:	2208      	movs	r2, #8
 800a3d4:	305c      	adds	r0, #92	; 0x5c
 800a3d6:	f000 f90d 	bl	800a5f4 <memset>
 800a3da:	4b0d      	ldr	r3, [pc, #52]	; (800a410 <std+0x58>)
 800a3dc:	6263      	str	r3, [r4, #36]	; 0x24
 800a3de:	4b0d      	ldr	r3, [pc, #52]	; (800a414 <std+0x5c>)
 800a3e0:	62a3      	str	r3, [r4, #40]	; 0x28
 800a3e2:	4b0d      	ldr	r3, [pc, #52]	; (800a418 <std+0x60>)
 800a3e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a3e6:	4b0d      	ldr	r3, [pc, #52]	; (800a41c <std+0x64>)
 800a3e8:	6323      	str	r3, [r4, #48]	; 0x30
 800a3ea:	4b0d      	ldr	r3, [pc, #52]	; (800a420 <std+0x68>)
 800a3ec:	6224      	str	r4, [r4, #32]
 800a3ee:	429c      	cmp	r4, r3
 800a3f0:	d006      	beq.n	800a400 <std+0x48>
 800a3f2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a3f6:	4294      	cmp	r4, r2
 800a3f8:	d002      	beq.n	800a400 <std+0x48>
 800a3fa:	33d0      	adds	r3, #208	; 0xd0
 800a3fc:	429c      	cmp	r4, r3
 800a3fe:	d105      	bne.n	800a40c <std+0x54>
 800a400:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a408:	f000 b980 	b.w	800a70c <__retarget_lock_init_recursive>
 800a40c:	bd10      	pop	{r4, pc}
 800a40e:	bf00      	nop
 800a410:	0800c101 	.word	0x0800c101
 800a414:	0800c123 	.word	0x0800c123
 800a418:	0800c15b 	.word	0x0800c15b
 800a41c:	0800c17f 	.word	0x0800c17f
 800a420:	20002620 	.word	0x20002620

0800a424 <stdio_exit_handler>:
 800a424:	4a02      	ldr	r2, [pc, #8]	; (800a430 <stdio_exit_handler+0xc>)
 800a426:	4903      	ldr	r1, [pc, #12]	; (800a434 <stdio_exit_handler+0x10>)
 800a428:	4803      	ldr	r0, [pc, #12]	; (800a438 <stdio_exit_handler+0x14>)
 800a42a:	f000 b869 	b.w	800a500 <_fwalk_sglue>
 800a42e:	bf00      	nop
 800a430:	20000010 	.word	0x20000010
 800a434:	0800b9a1 	.word	0x0800b9a1
 800a438:	2000001c 	.word	0x2000001c

0800a43c <cleanup_stdio>:
 800a43c:	6841      	ldr	r1, [r0, #4]
 800a43e:	4b0c      	ldr	r3, [pc, #48]	; (800a470 <cleanup_stdio+0x34>)
 800a440:	4299      	cmp	r1, r3
 800a442:	b510      	push	{r4, lr}
 800a444:	4604      	mov	r4, r0
 800a446:	d001      	beq.n	800a44c <cleanup_stdio+0x10>
 800a448:	f001 faaa 	bl	800b9a0 <_fflush_r>
 800a44c:	68a1      	ldr	r1, [r4, #8]
 800a44e:	4b09      	ldr	r3, [pc, #36]	; (800a474 <cleanup_stdio+0x38>)
 800a450:	4299      	cmp	r1, r3
 800a452:	d002      	beq.n	800a45a <cleanup_stdio+0x1e>
 800a454:	4620      	mov	r0, r4
 800a456:	f001 faa3 	bl	800b9a0 <_fflush_r>
 800a45a:	68e1      	ldr	r1, [r4, #12]
 800a45c:	4b06      	ldr	r3, [pc, #24]	; (800a478 <cleanup_stdio+0x3c>)
 800a45e:	4299      	cmp	r1, r3
 800a460:	d004      	beq.n	800a46c <cleanup_stdio+0x30>
 800a462:	4620      	mov	r0, r4
 800a464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a468:	f001 ba9a 	b.w	800b9a0 <_fflush_r>
 800a46c:	bd10      	pop	{r4, pc}
 800a46e:	bf00      	nop
 800a470:	20002620 	.word	0x20002620
 800a474:	20002688 	.word	0x20002688
 800a478:	200026f0 	.word	0x200026f0

0800a47c <global_stdio_init.part.0>:
 800a47c:	b510      	push	{r4, lr}
 800a47e:	4b0b      	ldr	r3, [pc, #44]	; (800a4ac <global_stdio_init.part.0+0x30>)
 800a480:	4c0b      	ldr	r4, [pc, #44]	; (800a4b0 <global_stdio_init.part.0+0x34>)
 800a482:	4a0c      	ldr	r2, [pc, #48]	; (800a4b4 <global_stdio_init.part.0+0x38>)
 800a484:	601a      	str	r2, [r3, #0]
 800a486:	4620      	mov	r0, r4
 800a488:	2200      	movs	r2, #0
 800a48a:	2104      	movs	r1, #4
 800a48c:	f7ff ff94 	bl	800a3b8 <std>
 800a490:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a494:	2201      	movs	r2, #1
 800a496:	2109      	movs	r1, #9
 800a498:	f7ff ff8e 	bl	800a3b8 <std>
 800a49c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a4a0:	2202      	movs	r2, #2
 800a4a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4a6:	2112      	movs	r1, #18
 800a4a8:	f7ff bf86 	b.w	800a3b8 <std>
 800a4ac:	20002758 	.word	0x20002758
 800a4b0:	20002620 	.word	0x20002620
 800a4b4:	0800a425 	.word	0x0800a425

0800a4b8 <__sfp_lock_acquire>:
 800a4b8:	4801      	ldr	r0, [pc, #4]	; (800a4c0 <__sfp_lock_acquire+0x8>)
 800a4ba:	f000 b928 	b.w	800a70e <__retarget_lock_acquire_recursive>
 800a4be:	bf00      	nop
 800a4c0:	20002761 	.word	0x20002761

0800a4c4 <__sfp_lock_release>:
 800a4c4:	4801      	ldr	r0, [pc, #4]	; (800a4cc <__sfp_lock_release+0x8>)
 800a4c6:	f000 b923 	b.w	800a710 <__retarget_lock_release_recursive>
 800a4ca:	bf00      	nop
 800a4cc:	20002761 	.word	0x20002761

0800a4d0 <__sinit>:
 800a4d0:	b510      	push	{r4, lr}
 800a4d2:	4604      	mov	r4, r0
 800a4d4:	f7ff fff0 	bl	800a4b8 <__sfp_lock_acquire>
 800a4d8:	6a23      	ldr	r3, [r4, #32]
 800a4da:	b11b      	cbz	r3, 800a4e4 <__sinit+0x14>
 800a4dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4e0:	f7ff bff0 	b.w	800a4c4 <__sfp_lock_release>
 800a4e4:	4b04      	ldr	r3, [pc, #16]	; (800a4f8 <__sinit+0x28>)
 800a4e6:	6223      	str	r3, [r4, #32]
 800a4e8:	4b04      	ldr	r3, [pc, #16]	; (800a4fc <__sinit+0x2c>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d1f5      	bne.n	800a4dc <__sinit+0xc>
 800a4f0:	f7ff ffc4 	bl	800a47c <global_stdio_init.part.0>
 800a4f4:	e7f2      	b.n	800a4dc <__sinit+0xc>
 800a4f6:	bf00      	nop
 800a4f8:	0800a43d 	.word	0x0800a43d
 800a4fc:	20002758 	.word	0x20002758

0800a500 <_fwalk_sglue>:
 800a500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a504:	4607      	mov	r7, r0
 800a506:	4688      	mov	r8, r1
 800a508:	4614      	mov	r4, r2
 800a50a:	2600      	movs	r6, #0
 800a50c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a510:	f1b9 0901 	subs.w	r9, r9, #1
 800a514:	d505      	bpl.n	800a522 <_fwalk_sglue+0x22>
 800a516:	6824      	ldr	r4, [r4, #0]
 800a518:	2c00      	cmp	r4, #0
 800a51a:	d1f7      	bne.n	800a50c <_fwalk_sglue+0xc>
 800a51c:	4630      	mov	r0, r6
 800a51e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a522:	89ab      	ldrh	r3, [r5, #12]
 800a524:	2b01      	cmp	r3, #1
 800a526:	d907      	bls.n	800a538 <_fwalk_sglue+0x38>
 800a528:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a52c:	3301      	adds	r3, #1
 800a52e:	d003      	beq.n	800a538 <_fwalk_sglue+0x38>
 800a530:	4629      	mov	r1, r5
 800a532:	4638      	mov	r0, r7
 800a534:	47c0      	blx	r8
 800a536:	4306      	orrs	r6, r0
 800a538:	3568      	adds	r5, #104	; 0x68
 800a53a:	e7e9      	b.n	800a510 <_fwalk_sglue+0x10>

0800a53c <_puts_r>:
 800a53c:	6a03      	ldr	r3, [r0, #32]
 800a53e:	b570      	push	{r4, r5, r6, lr}
 800a540:	6884      	ldr	r4, [r0, #8]
 800a542:	4605      	mov	r5, r0
 800a544:	460e      	mov	r6, r1
 800a546:	b90b      	cbnz	r3, 800a54c <_puts_r+0x10>
 800a548:	f7ff ffc2 	bl	800a4d0 <__sinit>
 800a54c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a54e:	07db      	lsls	r3, r3, #31
 800a550:	d405      	bmi.n	800a55e <_puts_r+0x22>
 800a552:	89a3      	ldrh	r3, [r4, #12]
 800a554:	0598      	lsls	r0, r3, #22
 800a556:	d402      	bmi.n	800a55e <_puts_r+0x22>
 800a558:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a55a:	f000 f8d8 	bl	800a70e <__retarget_lock_acquire_recursive>
 800a55e:	89a3      	ldrh	r3, [r4, #12]
 800a560:	0719      	lsls	r1, r3, #28
 800a562:	d513      	bpl.n	800a58c <_puts_r+0x50>
 800a564:	6923      	ldr	r3, [r4, #16]
 800a566:	b18b      	cbz	r3, 800a58c <_puts_r+0x50>
 800a568:	3e01      	subs	r6, #1
 800a56a:	68a3      	ldr	r3, [r4, #8]
 800a56c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a570:	3b01      	subs	r3, #1
 800a572:	60a3      	str	r3, [r4, #8]
 800a574:	b9e9      	cbnz	r1, 800a5b2 <_puts_r+0x76>
 800a576:	2b00      	cmp	r3, #0
 800a578:	da2e      	bge.n	800a5d8 <_puts_r+0x9c>
 800a57a:	4622      	mov	r2, r4
 800a57c:	210a      	movs	r1, #10
 800a57e:	4628      	mov	r0, r5
 800a580:	f001 fe01 	bl	800c186 <__swbuf_r>
 800a584:	3001      	adds	r0, #1
 800a586:	d007      	beq.n	800a598 <_puts_r+0x5c>
 800a588:	250a      	movs	r5, #10
 800a58a:	e007      	b.n	800a59c <_puts_r+0x60>
 800a58c:	4621      	mov	r1, r4
 800a58e:	4628      	mov	r0, r5
 800a590:	f001 fe36 	bl	800c200 <__swsetup_r>
 800a594:	2800      	cmp	r0, #0
 800a596:	d0e7      	beq.n	800a568 <_puts_r+0x2c>
 800a598:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800a59c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a59e:	07da      	lsls	r2, r3, #31
 800a5a0:	d405      	bmi.n	800a5ae <_puts_r+0x72>
 800a5a2:	89a3      	ldrh	r3, [r4, #12]
 800a5a4:	059b      	lsls	r3, r3, #22
 800a5a6:	d402      	bmi.n	800a5ae <_puts_r+0x72>
 800a5a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a5aa:	f000 f8b1 	bl	800a710 <__retarget_lock_release_recursive>
 800a5ae:	4628      	mov	r0, r5
 800a5b0:	bd70      	pop	{r4, r5, r6, pc}
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	da04      	bge.n	800a5c0 <_puts_r+0x84>
 800a5b6:	69a2      	ldr	r2, [r4, #24]
 800a5b8:	429a      	cmp	r2, r3
 800a5ba:	dc06      	bgt.n	800a5ca <_puts_r+0x8e>
 800a5bc:	290a      	cmp	r1, #10
 800a5be:	d004      	beq.n	800a5ca <_puts_r+0x8e>
 800a5c0:	6823      	ldr	r3, [r4, #0]
 800a5c2:	1c5a      	adds	r2, r3, #1
 800a5c4:	6022      	str	r2, [r4, #0]
 800a5c6:	7019      	strb	r1, [r3, #0]
 800a5c8:	e7cf      	b.n	800a56a <_puts_r+0x2e>
 800a5ca:	4622      	mov	r2, r4
 800a5cc:	4628      	mov	r0, r5
 800a5ce:	f001 fdda 	bl	800c186 <__swbuf_r>
 800a5d2:	3001      	adds	r0, #1
 800a5d4:	d1c9      	bne.n	800a56a <_puts_r+0x2e>
 800a5d6:	e7df      	b.n	800a598 <_puts_r+0x5c>
 800a5d8:	6823      	ldr	r3, [r4, #0]
 800a5da:	250a      	movs	r5, #10
 800a5dc:	1c5a      	adds	r2, r3, #1
 800a5de:	6022      	str	r2, [r4, #0]
 800a5e0:	701d      	strb	r5, [r3, #0]
 800a5e2:	e7db      	b.n	800a59c <_puts_r+0x60>

0800a5e4 <puts>:
 800a5e4:	4b02      	ldr	r3, [pc, #8]	; (800a5f0 <puts+0xc>)
 800a5e6:	4601      	mov	r1, r0
 800a5e8:	6818      	ldr	r0, [r3, #0]
 800a5ea:	f7ff bfa7 	b.w	800a53c <_puts_r>
 800a5ee:	bf00      	nop
 800a5f0:	20000068 	.word	0x20000068

0800a5f4 <memset>:
 800a5f4:	4402      	add	r2, r0
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	4293      	cmp	r3, r2
 800a5fa:	d100      	bne.n	800a5fe <memset+0xa>
 800a5fc:	4770      	bx	lr
 800a5fe:	f803 1b01 	strb.w	r1, [r3], #1
 800a602:	e7f9      	b.n	800a5f8 <memset+0x4>

0800a604 <_localeconv_r>:
 800a604:	4800      	ldr	r0, [pc, #0]	; (800a608 <_localeconv_r+0x4>)
 800a606:	4770      	bx	lr
 800a608:	2000015c 	.word	0x2000015c

0800a60c <_reclaim_reent>:
 800a60c:	4b29      	ldr	r3, [pc, #164]	; (800a6b4 <_reclaim_reent+0xa8>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	4283      	cmp	r3, r0
 800a612:	b570      	push	{r4, r5, r6, lr}
 800a614:	4604      	mov	r4, r0
 800a616:	d04b      	beq.n	800a6b0 <_reclaim_reent+0xa4>
 800a618:	69c3      	ldr	r3, [r0, #28]
 800a61a:	b143      	cbz	r3, 800a62e <_reclaim_reent+0x22>
 800a61c:	68db      	ldr	r3, [r3, #12]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d144      	bne.n	800a6ac <_reclaim_reent+0xa0>
 800a622:	69e3      	ldr	r3, [r4, #28]
 800a624:	6819      	ldr	r1, [r3, #0]
 800a626:	b111      	cbz	r1, 800a62e <_reclaim_reent+0x22>
 800a628:	4620      	mov	r0, r4
 800a62a:	f000 fefb 	bl	800b424 <_free_r>
 800a62e:	6961      	ldr	r1, [r4, #20]
 800a630:	b111      	cbz	r1, 800a638 <_reclaim_reent+0x2c>
 800a632:	4620      	mov	r0, r4
 800a634:	f000 fef6 	bl	800b424 <_free_r>
 800a638:	69e1      	ldr	r1, [r4, #28]
 800a63a:	b111      	cbz	r1, 800a642 <_reclaim_reent+0x36>
 800a63c:	4620      	mov	r0, r4
 800a63e:	f000 fef1 	bl	800b424 <_free_r>
 800a642:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a644:	b111      	cbz	r1, 800a64c <_reclaim_reent+0x40>
 800a646:	4620      	mov	r0, r4
 800a648:	f000 feec 	bl	800b424 <_free_r>
 800a64c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a64e:	b111      	cbz	r1, 800a656 <_reclaim_reent+0x4a>
 800a650:	4620      	mov	r0, r4
 800a652:	f000 fee7 	bl	800b424 <_free_r>
 800a656:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a658:	b111      	cbz	r1, 800a660 <_reclaim_reent+0x54>
 800a65a:	4620      	mov	r0, r4
 800a65c:	f000 fee2 	bl	800b424 <_free_r>
 800a660:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a662:	b111      	cbz	r1, 800a66a <_reclaim_reent+0x5e>
 800a664:	4620      	mov	r0, r4
 800a666:	f000 fedd 	bl	800b424 <_free_r>
 800a66a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a66c:	b111      	cbz	r1, 800a674 <_reclaim_reent+0x68>
 800a66e:	4620      	mov	r0, r4
 800a670:	f000 fed8 	bl	800b424 <_free_r>
 800a674:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800a676:	b111      	cbz	r1, 800a67e <_reclaim_reent+0x72>
 800a678:	4620      	mov	r0, r4
 800a67a:	f000 fed3 	bl	800b424 <_free_r>
 800a67e:	6a23      	ldr	r3, [r4, #32]
 800a680:	b1b3      	cbz	r3, 800a6b0 <_reclaim_reent+0xa4>
 800a682:	4620      	mov	r0, r4
 800a684:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a688:	4718      	bx	r3
 800a68a:	5949      	ldr	r1, [r1, r5]
 800a68c:	b941      	cbnz	r1, 800a6a0 <_reclaim_reent+0x94>
 800a68e:	3504      	adds	r5, #4
 800a690:	69e3      	ldr	r3, [r4, #28]
 800a692:	2d80      	cmp	r5, #128	; 0x80
 800a694:	68d9      	ldr	r1, [r3, #12]
 800a696:	d1f8      	bne.n	800a68a <_reclaim_reent+0x7e>
 800a698:	4620      	mov	r0, r4
 800a69a:	f000 fec3 	bl	800b424 <_free_r>
 800a69e:	e7c0      	b.n	800a622 <_reclaim_reent+0x16>
 800a6a0:	680e      	ldr	r6, [r1, #0]
 800a6a2:	4620      	mov	r0, r4
 800a6a4:	f000 febe 	bl	800b424 <_free_r>
 800a6a8:	4631      	mov	r1, r6
 800a6aa:	e7ef      	b.n	800a68c <_reclaim_reent+0x80>
 800a6ac:	2500      	movs	r5, #0
 800a6ae:	e7ef      	b.n	800a690 <_reclaim_reent+0x84>
 800a6b0:	bd70      	pop	{r4, r5, r6, pc}
 800a6b2:	bf00      	nop
 800a6b4:	20000068 	.word	0x20000068

0800a6b8 <__errno>:
 800a6b8:	4b01      	ldr	r3, [pc, #4]	; (800a6c0 <__errno+0x8>)
 800a6ba:	6818      	ldr	r0, [r3, #0]
 800a6bc:	4770      	bx	lr
 800a6be:	bf00      	nop
 800a6c0:	20000068 	.word	0x20000068

0800a6c4 <__libc_init_array>:
 800a6c4:	b570      	push	{r4, r5, r6, lr}
 800a6c6:	4d0d      	ldr	r5, [pc, #52]	; (800a6fc <__libc_init_array+0x38>)
 800a6c8:	4c0d      	ldr	r4, [pc, #52]	; (800a700 <__libc_init_array+0x3c>)
 800a6ca:	1b64      	subs	r4, r4, r5
 800a6cc:	10a4      	asrs	r4, r4, #2
 800a6ce:	2600      	movs	r6, #0
 800a6d0:	42a6      	cmp	r6, r4
 800a6d2:	d109      	bne.n	800a6e8 <__libc_init_array+0x24>
 800a6d4:	4d0b      	ldr	r5, [pc, #44]	; (800a704 <__libc_init_array+0x40>)
 800a6d6:	4c0c      	ldr	r4, [pc, #48]	; (800a708 <__libc_init_array+0x44>)
 800a6d8:	f002 fc2c 	bl	800cf34 <_init>
 800a6dc:	1b64      	subs	r4, r4, r5
 800a6de:	10a4      	asrs	r4, r4, #2
 800a6e0:	2600      	movs	r6, #0
 800a6e2:	42a6      	cmp	r6, r4
 800a6e4:	d105      	bne.n	800a6f2 <__libc_init_array+0x2e>
 800a6e6:	bd70      	pop	{r4, r5, r6, pc}
 800a6e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6ec:	4798      	blx	r3
 800a6ee:	3601      	adds	r6, #1
 800a6f0:	e7ee      	b.n	800a6d0 <__libc_init_array+0xc>
 800a6f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6f6:	4798      	blx	r3
 800a6f8:	3601      	adds	r6, #1
 800a6fa:	e7f2      	b.n	800a6e2 <__libc_init_array+0x1e>
 800a6fc:	0800d5a0 	.word	0x0800d5a0
 800a700:	0800d5a0 	.word	0x0800d5a0
 800a704:	0800d5a0 	.word	0x0800d5a0
 800a708:	0800d5a4 	.word	0x0800d5a4

0800a70c <__retarget_lock_init_recursive>:
 800a70c:	4770      	bx	lr

0800a70e <__retarget_lock_acquire_recursive>:
 800a70e:	4770      	bx	lr

0800a710 <__retarget_lock_release_recursive>:
 800a710:	4770      	bx	lr

0800a712 <memcpy>:
 800a712:	440a      	add	r2, r1
 800a714:	4291      	cmp	r1, r2
 800a716:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a71a:	d100      	bne.n	800a71e <memcpy+0xc>
 800a71c:	4770      	bx	lr
 800a71e:	b510      	push	{r4, lr}
 800a720:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a724:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a728:	4291      	cmp	r1, r2
 800a72a:	d1f9      	bne.n	800a720 <memcpy+0xe>
 800a72c:	bd10      	pop	{r4, pc}

0800a72e <quorem>:
 800a72e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a732:	6903      	ldr	r3, [r0, #16]
 800a734:	690c      	ldr	r4, [r1, #16]
 800a736:	42a3      	cmp	r3, r4
 800a738:	4607      	mov	r7, r0
 800a73a:	db7e      	blt.n	800a83a <quorem+0x10c>
 800a73c:	3c01      	subs	r4, #1
 800a73e:	f101 0814 	add.w	r8, r1, #20
 800a742:	f100 0514 	add.w	r5, r0, #20
 800a746:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a74a:	9301      	str	r3, [sp, #4]
 800a74c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a750:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a754:	3301      	adds	r3, #1
 800a756:	429a      	cmp	r2, r3
 800a758:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a75c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a760:	fbb2 f6f3 	udiv	r6, r2, r3
 800a764:	d331      	bcc.n	800a7ca <quorem+0x9c>
 800a766:	f04f 0e00 	mov.w	lr, #0
 800a76a:	4640      	mov	r0, r8
 800a76c:	46ac      	mov	ip, r5
 800a76e:	46f2      	mov	sl, lr
 800a770:	f850 2b04 	ldr.w	r2, [r0], #4
 800a774:	b293      	uxth	r3, r2
 800a776:	fb06 e303 	mla	r3, r6, r3, lr
 800a77a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a77e:	0c1a      	lsrs	r2, r3, #16
 800a780:	b29b      	uxth	r3, r3
 800a782:	ebaa 0303 	sub.w	r3, sl, r3
 800a786:	f8dc a000 	ldr.w	sl, [ip]
 800a78a:	fa13 f38a 	uxtah	r3, r3, sl
 800a78e:	fb06 220e 	mla	r2, r6, lr, r2
 800a792:	9300      	str	r3, [sp, #0]
 800a794:	9b00      	ldr	r3, [sp, #0]
 800a796:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a79a:	b292      	uxth	r2, r2
 800a79c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a7a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a7a4:	f8bd 3000 	ldrh.w	r3, [sp]
 800a7a8:	4581      	cmp	r9, r0
 800a7aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a7ae:	f84c 3b04 	str.w	r3, [ip], #4
 800a7b2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a7b6:	d2db      	bcs.n	800a770 <quorem+0x42>
 800a7b8:	f855 300b 	ldr.w	r3, [r5, fp]
 800a7bc:	b92b      	cbnz	r3, 800a7ca <quorem+0x9c>
 800a7be:	9b01      	ldr	r3, [sp, #4]
 800a7c0:	3b04      	subs	r3, #4
 800a7c2:	429d      	cmp	r5, r3
 800a7c4:	461a      	mov	r2, r3
 800a7c6:	d32c      	bcc.n	800a822 <quorem+0xf4>
 800a7c8:	613c      	str	r4, [r7, #16]
 800a7ca:	4638      	mov	r0, r7
 800a7cc:	f001 fb98 	bl	800bf00 <__mcmp>
 800a7d0:	2800      	cmp	r0, #0
 800a7d2:	db22      	blt.n	800a81a <quorem+0xec>
 800a7d4:	3601      	adds	r6, #1
 800a7d6:	4629      	mov	r1, r5
 800a7d8:	2000      	movs	r0, #0
 800a7da:	f858 2b04 	ldr.w	r2, [r8], #4
 800a7de:	f8d1 c000 	ldr.w	ip, [r1]
 800a7e2:	b293      	uxth	r3, r2
 800a7e4:	1ac3      	subs	r3, r0, r3
 800a7e6:	0c12      	lsrs	r2, r2, #16
 800a7e8:	fa13 f38c 	uxtah	r3, r3, ip
 800a7ec:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a7f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a7f4:	b29b      	uxth	r3, r3
 800a7f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a7fa:	45c1      	cmp	r9, r8
 800a7fc:	f841 3b04 	str.w	r3, [r1], #4
 800a800:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a804:	d2e9      	bcs.n	800a7da <quorem+0xac>
 800a806:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a80a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a80e:	b922      	cbnz	r2, 800a81a <quorem+0xec>
 800a810:	3b04      	subs	r3, #4
 800a812:	429d      	cmp	r5, r3
 800a814:	461a      	mov	r2, r3
 800a816:	d30a      	bcc.n	800a82e <quorem+0x100>
 800a818:	613c      	str	r4, [r7, #16]
 800a81a:	4630      	mov	r0, r6
 800a81c:	b003      	add	sp, #12
 800a81e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a822:	6812      	ldr	r2, [r2, #0]
 800a824:	3b04      	subs	r3, #4
 800a826:	2a00      	cmp	r2, #0
 800a828:	d1ce      	bne.n	800a7c8 <quorem+0x9a>
 800a82a:	3c01      	subs	r4, #1
 800a82c:	e7c9      	b.n	800a7c2 <quorem+0x94>
 800a82e:	6812      	ldr	r2, [r2, #0]
 800a830:	3b04      	subs	r3, #4
 800a832:	2a00      	cmp	r2, #0
 800a834:	d1f0      	bne.n	800a818 <quorem+0xea>
 800a836:	3c01      	subs	r4, #1
 800a838:	e7eb      	b.n	800a812 <quorem+0xe4>
 800a83a:	2000      	movs	r0, #0
 800a83c:	e7ee      	b.n	800a81c <quorem+0xee>
	...

0800a840 <_dtoa_r>:
 800a840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a844:	ed2d 8b04 	vpush	{d8-d9}
 800a848:	69c5      	ldr	r5, [r0, #28]
 800a84a:	b093      	sub	sp, #76	; 0x4c
 800a84c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a850:	ec57 6b10 	vmov	r6, r7, d0
 800a854:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a858:	9107      	str	r1, [sp, #28]
 800a85a:	4604      	mov	r4, r0
 800a85c:	920a      	str	r2, [sp, #40]	; 0x28
 800a85e:	930d      	str	r3, [sp, #52]	; 0x34
 800a860:	b975      	cbnz	r5, 800a880 <_dtoa_r+0x40>
 800a862:	2010      	movs	r0, #16
 800a864:	f000 ff6e 	bl	800b744 <malloc>
 800a868:	4602      	mov	r2, r0
 800a86a:	61e0      	str	r0, [r4, #28]
 800a86c:	b920      	cbnz	r0, 800a878 <_dtoa_r+0x38>
 800a86e:	4bae      	ldr	r3, [pc, #696]	; (800ab28 <_dtoa_r+0x2e8>)
 800a870:	21ef      	movs	r1, #239	; 0xef
 800a872:	48ae      	ldr	r0, [pc, #696]	; (800ab2c <_dtoa_r+0x2ec>)
 800a874:	f001 fdf6 	bl	800c464 <__assert_func>
 800a878:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a87c:	6005      	str	r5, [r0, #0]
 800a87e:	60c5      	str	r5, [r0, #12]
 800a880:	69e3      	ldr	r3, [r4, #28]
 800a882:	6819      	ldr	r1, [r3, #0]
 800a884:	b151      	cbz	r1, 800a89c <_dtoa_r+0x5c>
 800a886:	685a      	ldr	r2, [r3, #4]
 800a888:	604a      	str	r2, [r1, #4]
 800a88a:	2301      	movs	r3, #1
 800a88c:	4093      	lsls	r3, r2
 800a88e:	608b      	str	r3, [r1, #8]
 800a890:	4620      	mov	r0, r4
 800a892:	f001 f8f9 	bl	800ba88 <_Bfree>
 800a896:	69e3      	ldr	r3, [r4, #28]
 800a898:	2200      	movs	r2, #0
 800a89a:	601a      	str	r2, [r3, #0]
 800a89c:	1e3b      	subs	r3, r7, #0
 800a89e:	bfbb      	ittet	lt
 800a8a0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a8a4:	9303      	strlt	r3, [sp, #12]
 800a8a6:	2300      	movge	r3, #0
 800a8a8:	2201      	movlt	r2, #1
 800a8aa:	bfac      	ite	ge
 800a8ac:	f8c8 3000 	strge.w	r3, [r8]
 800a8b0:	f8c8 2000 	strlt.w	r2, [r8]
 800a8b4:	4b9e      	ldr	r3, [pc, #632]	; (800ab30 <_dtoa_r+0x2f0>)
 800a8b6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a8ba:	ea33 0308 	bics.w	r3, r3, r8
 800a8be:	d11b      	bne.n	800a8f8 <_dtoa_r+0xb8>
 800a8c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a8c2:	f242 730f 	movw	r3, #9999	; 0x270f
 800a8c6:	6013      	str	r3, [r2, #0]
 800a8c8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a8cc:	4333      	orrs	r3, r6
 800a8ce:	f000 8593 	beq.w	800b3f8 <_dtoa_r+0xbb8>
 800a8d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a8d4:	b963      	cbnz	r3, 800a8f0 <_dtoa_r+0xb0>
 800a8d6:	4b97      	ldr	r3, [pc, #604]	; (800ab34 <_dtoa_r+0x2f4>)
 800a8d8:	e027      	b.n	800a92a <_dtoa_r+0xea>
 800a8da:	4b97      	ldr	r3, [pc, #604]	; (800ab38 <_dtoa_r+0x2f8>)
 800a8dc:	9300      	str	r3, [sp, #0]
 800a8de:	3308      	adds	r3, #8
 800a8e0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a8e2:	6013      	str	r3, [r2, #0]
 800a8e4:	9800      	ldr	r0, [sp, #0]
 800a8e6:	b013      	add	sp, #76	; 0x4c
 800a8e8:	ecbd 8b04 	vpop	{d8-d9}
 800a8ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8f0:	4b90      	ldr	r3, [pc, #576]	; (800ab34 <_dtoa_r+0x2f4>)
 800a8f2:	9300      	str	r3, [sp, #0]
 800a8f4:	3303      	adds	r3, #3
 800a8f6:	e7f3      	b.n	800a8e0 <_dtoa_r+0xa0>
 800a8f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	ec51 0b17 	vmov	r0, r1, d7
 800a902:	eeb0 8a47 	vmov.f32	s16, s14
 800a906:	eef0 8a67 	vmov.f32	s17, s15
 800a90a:	2300      	movs	r3, #0
 800a90c:	f7f6 f8dc 	bl	8000ac8 <__aeabi_dcmpeq>
 800a910:	4681      	mov	r9, r0
 800a912:	b160      	cbz	r0, 800a92e <_dtoa_r+0xee>
 800a914:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a916:	2301      	movs	r3, #1
 800a918:	6013      	str	r3, [r2, #0]
 800a91a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	f000 8568 	beq.w	800b3f2 <_dtoa_r+0xbb2>
 800a922:	4b86      	ldr	r3, [pc, #536]	; (800ab3c <_dtoa_r+0x2fc>)
 800a924:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a926:	6013      	str	r3, [r2, #0]
 800a928:	3b01      	subs	r3, #1
 800a92a:	9300      	str	r3, [sp, #0]
 800a92c:	e7da      	b.n	800a8e4 <_dtoa_r+0xa4>
 800a92e:	aa10      	add	r2, sp, #64	; 0x40
 800a930:	a911      	add	r1, sp, #68	; 0x44
 800a932:	4620      	mov	r0, r4
 800a934:	eeb0 0a48 	vmov.f32	s0, s16
 800a938:	eef0 0a68 	vmov.f32	s1, s17
 800a93c:	f001 fb86 	bl	800c04c <__d2b>
 800a940:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a944:	4682      	mov	sl, r0
 800a946:	2d00      	cmp	r5, #0
 800a948:	d07f      	beq.n	800aa4a <_dtoa_r+0x20a>
 800a94a:	ee18 3a90 	vmov	r3, s17
 800a94e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a952:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a956:	ec51 0b18 	vmov	r0, r1, d8
 800a95a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a95e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a962:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a966:	4619      	mov	r1, r3
 800a968:	2200      	movs	r2, #0
 800a96a:	4b75      	ldr	r3, [pc, #468]	; (800ab40 <_dtoa_r+0x300>)
 800a96c:	f7f5 fc8c 	bl	8000288 <__aeabi_dsub>
 800a970:	a367      	add	r3, pc, #412	; (adr r3, 800ab10 <_dtoa_r+0x2d0>)
 800a972:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a976:	f7f5 fe3f 	bl	80005f8 <__aeabi_dmul>
 800a97a:	a367      	add	r3, pc, #412	; (adr r3, 800ab18 <_dtoa_r+0x2d8>)
 800a97c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a980:	f7f5 fc84 	bl	800028c <__adddf3>
 800a984:	4606      	mov	r6, r0
 800a986:	4628      	mov	r0, r5
 800a988:	460f      	mov	r7, r1
 800a98a:	f7f5 fdcb 	bl	8000524 <__aeabi_i2d>
 800a98e:	a364      	add	r3, pc, #400	; (adr r3, 800ab20 <_dtoa_r+0x2e0>)
 800a990:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a994:	f7f5 fe30 	bl	80005f8 <__aeabi_dmul>
 800a998:	4602      	mov	r2, r0
 800a99a:	460b      	mov	r3, r1
 800a99c:	4630      	mov	r0, r6
 800a99e:	4639      	mov	r1, r7
 800a9a0:	f7f5 fc74 	bl	800028c <__adddf3>
 800a9a4:	4606      	mov	r6, r0
 800a9a6:	460f      	mov	r7, r1
 800a9a8:	f7f6 f8d6 	bl	8000b58 <__aeabi_d2iz>
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	4683      	mov	fp, r0
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	4630      	mov	r0, r6
 800a9b4:	4639      	mov	r1, r7
 800a9b6:	f7f6 f891 	bl	8000adc <__aeabi_dcmplt>
 800a9ba:	b148      	cbz	r0, 800a9d0 <_dtoa_r+0x190>
 800a9bc:	4658      	mov	r0, fp
 800a9be:	f7f5 fdb1 	bl	8000524 <__aeabi_i2d>
 800a9c2:	4632      	mov	r2, r6
 800a9c4:	463b      	mov	r3, r7
 800a9c6:	f7f6 f87f 	bl	8000ac8 <__aeabi_dcmpeq>
 800a9ca:	b908      	cbnz	r0, 800a9d0 <_dtoa_r+0x190>
 800a9cc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a9d0:	f1bb 0f16 	cmp.w	fp, #22
 800a9d4:	d857      	bhi.n	800aa86 <_dtoa_r+0x246>
 800a9d6:	4b5b      	ldr	r3, [pc, #364]	; (800ab44 <_dtoa_r+0x304>)
 800a9d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a9dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9e0:	ec51 0b18 	vmov	r0, r1, d8
 800a9e4:	f7f6 f87a 	bl	8000adc <__aeabi_dcmplt>
 800a9e8:	2800      	cmp	r0, #0
 800a9ea:	d04e      	beq.n	800aa8a <_dtoa_r+0x24a>
 800a9ec:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	930c      	str	r3, [sp, #48]	; 0x30
 800a9f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a9f6:	1b5b      	subs	r3, r3, r5
 800a9f8:	1e5a      	subs	r2, r3, #1
 800a9fa:	bf45      	ittet	mi
 800a9fc:	f1c3 0301 	rsbmi	r3, r3, #1
 800aa00:	9305      	strmi	r3, [sp, #20]
 800aa02:	2300      	movpl	r3, #0
 800aa04:	2300      	movmi	r3, #0
 800aa06:	9206      	str	r2, [sp, #24]
 800aa08:	bf54      	ite	pl
 800aa0a:	9305      	strpl	r3, [sp, #20]
 800aa0c:	9306      	strmi	r3, [sp, #24]
 800aa0e:	f1bb 0f00 	cmp.w	fp, #0
 800aa12:	db3c      	blt.n	800aa8e <_dtoa_r+0x24e>
 800aa14:	9b06      	ldr	r3, [sp, #24]
 800aa16:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800aa1a:	445b      	add	r3, fp
 800aa1c:	9306      	str	r3, [sp, #24]
 800aa1e:	2300      	movs	r3, #0
 800aa20:	9308      	str	r3, [sp, #32]
 800aa22:	9b07      	ldr	r3, [sp, #28]
 800aa24:	2b09      	cmp	r3, #9
 800aa26:	d868      	bhi.n	800aafa <_dtoa_r+0x2ba>
 800aa28:	2b05      	cmp	r3, #5
 800aa2a:	bfc4      	itt	gt
 800aa2c:	3b04      	subgt	r3, #4
 800aa2e:	9307      	strgt	r3, [sp, #28]
 800aa30:	9b07      	ldr	r3, [sp, #28]
 800aa32:	f1a3 0302 	sub.w	r3, r3, #2
 800aa36:	bfcc      	ite	gt
 800aa38:	2500      	movgt	r5, #0
 800aa3a:	2501      	movle	r5, #1
 800aa3c:	2b03      	cmp	r3, #3
 800aa3e:	f200 8085 	bhi.w	800ab4c <_dtoa_r+0x30c>
 800aa42:	e8df f003 	tbb	[pc, r3]
 800aa46:	3b2e      	.short	0x3b2e
 800aa48:	5839      	.short	0x5839
 800aa4a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800aa4e:	441d      	add	r5, r3
 800aa50:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800aa54:	2b20      	cmp	r3, #32
 800aa56:	bfc1      	itttt	gt
 800aa58:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800aa5c:	fa08 f803 	lslgt.w	r8, r8, r3
 800aa60:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800aa64:	fa26 f303 	lsrgt.w	r3, r6, r3
 800aa68:	bfd6      	itet	le
 800aa6a:	f1c3 0320 	rsble	r3, r3, #32
 800aa6e:	ea48 0003 	orrgt.w	r0, r8, r3
 800aa72:	fa06 f003 	lslle.w	r0, r6, r3
 800aa76:	f7f5 fd45 	bl	8000504 <__aeabi_ui2d>
 800aa7a:	2201      	movs	r2, #1
 800aa7c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800aa80:	3d01      	subs	r5, #1
 800aa82:	920e      	str	r2, [sp, #56]	; 0x38
 800aa84:	e76f      	b.n	800a966 <_dtoa_r+0x126>
 800aa86:	2301      	movs	r3, #1
 800aa88:	e7b3      	b.n	800a9f2 <_dtoa_r+0x1b2>
 800aa8a:	900c      	str	r0, [sp, #48]	; 0x30
 800aa8c:	e7b2      	b.n	800a9f4 <_dtoa_r+0x1b4>
 800aa8e:	9b05      	ldr	r3, [sp, #20]
 800aa90:	eba3 030b 	sub.w	r3, r3, fp
 800aa94:	9305      	str	r3, [sp, #20]
 800aa96:	f1cb 0300 	rsb	r3, fp, #0
 800aa9a:	9308      	str	r3, [sp, #32]
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	930b      	str	r3, [sp, #44]	; 0x2c
 800aaa0:	e7bf      	b.n	800aa22 <_dtoa_r+0x1e2>
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	9309      	str	r3, [sp, #36]	; 0x24
 800aaa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	dc52      	bgt.n	800ab52 <_dtoa_r+0x312>
 800aaac:	2301      	movs	r3, #1
 800aaae:	9301      	str	r3, [sp, #4]
 800aab0:	9304      	str	r3, [sp, #16]
 800aab2:	461a      	mov	r2, r3
 800aab4:	920a      	str	r2, [sp, #40]	; 0x28
 800aab6:	e00b      	b.n	800aad0 <_dtoa_r+0x290>
 800aab8:	2301      	movs	r3, #1
 800aaba:	e7f3      	b.n	800aaa4 <_dtoa_r+0x264>
 800aabc:	2300      	movs	r3, #0
 800aabe:	9309      	str	r3, [sp, #36]	; 0x24
 800aac0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aac2:	445b      	add	r3, fp
 800aac4:	9301      	str	r3, [sp, #4]
 800aac6:	3301      	adds	r3, #1
 800aac8:	2b01      	cmp	r3, #1
 800aaca:	9304      	str	r3, [sp, #16]
 800aacc:	bfb8      	it	lt
 800aace:	2301      	movlt	r3, #1
 800aad0:	69e0      	ldr	r0, [r4, #28]
 800aad2:	2100      	movs	r1, #0
 800aad4:	2204      	movs	r2, #4
 800aad6:	f102 0614 	add.w	r6, r2, #20
 800aada:	429e      	cmp	r6, r3
 800aadc:	d93d      	bls.n	800ab5a <_dtoa_r+0x31a>
 800aade:	6041      	str	r1, [r0, #4]
 800aae0:	4620      	mov	r0, r4
 800aae2:	f000 ff91 	bl	800ba08 <_Balloc>
 800aae6:	9000      	str	r0, [sp, #0]
 800aae8:	2800      	cmp	r0, #0
 800aaea:	d139      	bne.n	800ab60 <_dtoa_r+0x320>
 800aaec:	4b16      	ldr	r3, [pc, #88]	; (800ab48 <_dtoa_r+0x308>)
 800aaee:	4602      	mov	r2, r0
 800aaf0:	f240 11af 	movw	r1, #431	; 0x1af
 800aaf4:	e6bd      	b.n	800a872 <_dtoa_r+0x32>
 800aaf6:	2301      	movs	r3, #1
 800aaf8:	e7e1      	b.n	800aabe <_dtoa_r+0x27e>
 800aafa:	2501      	movs	r5, #1
 800aafc:	2300      	movs	r3, #0
 800aafe:	9307      	str	r3, [sp, #28]
 800ab00:	9509      	str	r5, [sp, #36]	; 0x24
 800ab02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ab06:	9301      	str	r3, [sp, #4]
 800ab08:	9304      	str	r3, [sp, #16]
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	2312      	movs	r3, #18
 800ab0e:	e7d1      	b.n	800aab4 <_dtoa_r+0x274>
 800ab10:	636f4361 	.word	0x636f4361
 800ab14:	3fd287a7 	.word	0x3fd287a7
 800ab18:	8b60c8b3 	.word	0x8b60c8b3
 800ab1c:	3fc68a28 	.word	0x3fc68a28
 800ab20:	509f79fb 	.word	0x509f79fb
 800ab24:	3fd34413 	.word	0x3fd34413
 800ab28:	0800d1e1 	.word	0x0800d1e1
 800ab2c:	0800d1f8 	.word	0x0800d1f8
 800ab30:	7ff00000 	.word	0x7ff00000
 800ab34:	0800d1dd 	.word	0x0800d1dd
 800ab38:	0800d1d4 	.word	0x0800d1d4
 800ab3c:	0800d1b1 	.word	0x0800d1b1
 800ab40:	3ff80000 	.word	0x3ff80000
 800ab44:	0800d2f8 	.word	0x0800d2f8
 800ab48:	0800d250 	.word	0x0800d250
 800ab4c:	2301      	movs	r3, #1
 800ab4e:	9309      	str	r3, [sp, #36]	; 0x24
 800ab50:	e7d7      	b.n	800ab02 <_dtoa_r+0x2c2>
 800ab52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab54:	9301      	str	r3, [sp, #4]
 800ab56:	9304      	str	r3, [sp, #16]
 800ab58:	e7ba      	b.n	800aad0 <_dtoa_r+0x290>
 800ab5a:	3101      	adds	r1, #1
 800ab5c:	0052      	lsls	r2, r2, #1
 800ab5e:	e7ba      	b.n	800aad6 <_dtoa_r+0x296>
 800ab60:	69e3      	ldr	r3, [r4, #28]
 800ab62:	9a00      	ldr	r2, [sp, #0]
 800ab64:	601a      	str	r2, [r3, #0]
 800ab66:	9b04      	ldr	r3, [sp, #16]
 800ab68:	2b0e      	cmp	r3, #14
 800ab6a:	f200 80a8 	bhi.w	800acbe <_dtoa_r+0x47e>
 800ab6e:	2d00      	cmp	r5, #0
 800ab70:	f000 80a5 	beq.w	800acbe <_dtoa_r+0x47e>
 800ab74:	f1bb 0f00 	cmp.w	fp, #0
 800ab78:	dd38      	ble.n	800abec <_dtoa_r+0x3ac>
 800ab7a:	4bc0      	ldr	r3, [pc, #768]	; (800ae7c <_dtoa_r+0x63c>)
 800ab7c:	f00b 020f 	and.w	r2, fp, #15
 800ab80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ab84:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800ab88:	e9d3 6700 	ldrd	r6, r7, [r3]
 800ab8c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800ab90:	d019      	beq.n	800abc6 <_dtoa_r+0x386>
 800ab92:	4bbb      	ldr	r3, [pc, #748]	; (800ae80 <_dtoa_r+0x640>)
 800ab94:	ec51 0b18 	vmov	r0, r1, d8
 800ab98:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ab9c:	f7f5 fe56 	bl	800084c <__aeabi_ddiv>
 800aba0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aba4:	f008 080f 	and.w	r8, r8, #15
 800aba8:	2503      	movs	r5, #3
 800abaa:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800ae80 <_dtoa_r+0x640>
 800abae:	f1b8 0f00 	cmp.w	r8, #0
 800abb2:	d10a      	bne.n	800abca <_dtoa_r+0x38a>
 800abb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800abb8:	4632      	mov	r2, r6
 800abba:	463b      	mov	r3, r7
 800abbc:	f7f5 fe46 	bl	800084c <__aeabi_ddiv>
 800abc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800abc4:	e02b      	b.n	800ac1e <_dtoa_r+0x3de>
 800abc6:	2502      	movs	r5, #2
 800abc8:	e7ef      	b.n	800abaa <_dtoa_r+0x36a>
 800abca:	f018 0f01 	tst.w	r8, #1
 800abce:	d008      	beq.n	800abe2 <_dtoa_r+0x3a2>
 800abd0:	4630      	mov	r0, r6
 800abd2:	4639      	mov	r1, r7
 800abd4:	e9d9 2300 	ldrd	r2, r3, [r9]
 800abd8:	f7f5 fd0e 	bl	80005f8 <__aeabi_dmul>
 800abdc:	3501      	adds	r5, #1
 800abde:	4606      	mov	r6, r0
 800abe0:	460f      	mov	r7, r1
 800abe2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800abe6:	f109 0908 	add.w	r9, r9, #8
 800abea:	e7e0      	b.n	800abae <_dtoa_r+0x36e>
 800abec:	f000 809f 	beq.w	800ad2e <_dtoa_r+0x4ee>
 800abf0:	f1cb 0600 	rsb	r6, fp, #0
 800abf4:	4ba1      	ldr	r3, [pc, #644]	; (800ae7c <_dtoa_r+0x63c>)
 800abf6:	4fa2      	ldr	r7, [pc, #648]	; (800ae80 <_dtoa_r+0x640>)
 800abf8:	f006 020f 	and.w	r2, r6, #15
 800abfc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ac00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac04:	ec51 0b18 	vmov	r0, r1, d8
 800ac08:	f7f5 fcf6 	bl	80005f8 <__aeabi_dmul>
 800ac0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac10:	1136      	asrs	r6, r6, #4
 800ac12:	2300      	movs	r3, #0
 800ac14:	2502      	movs	r5, #2
 800ac16:	2e00      	cmp	r6, #0
 800ac18:	d17e      	bne.n	800ad18 <_dtoa_r+0x4d8>
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d1d0      	bne.n	800abc0 <_dtoa_r+0x380>
 800ac1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac20:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	f000 8084 	beq.w	800ad32 <_dtoa_r+0x4f2>
 800ac2a:	4b96      	ldr	r3, [pc, #600]	; (800ae84 <_dtoa_r+0x644>)
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	4640      	mov	r0, r8
 800ac30:	4649      	mov	r1, r9
 800ac32:	f7f5 ff53 	bl	8000adc <__aeabi_dcmplt>
 800ac36:	2800      	cmp	r0, #0
 800ac38:	d07b      	beq.n	800ad32 <_dtoa_r+0x4f2>
 800ac3a:	9b04      	ldr	r3, [sp, #16]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d078      	beq.n	800ad32 <_dtoa_r+0x4f2>
 800ac40:	9b01      	ldr	r3, [sp, #4]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	dd39      	ble.n	800acba <_dtoa_r+0x47a>
 800ac46:	4b90      	ldr	r3, [pc, #576]	; (800ae88 <_dtoa_r+0x648>)
 800ac48:	2200      	movs	r2, #0
 800ac4a:	4640      	mov	r0, r8
 800ac4c:	4649      	mov	r1, r9
 800ac4e:	f7f5 fcd3 	bl	80005f8 <__aeabi_dmul>
 800ac52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac56:	9e01      	ldr	r6, [sp, #4]
 800ac58:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800ac5c:	3501      	adds	r5, #1
 800ac5e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ac62:	4628      	mov	r0, r5
 800ac64:	f7f5 fc5e 	bl	8000524 <__aeabi_i2d>
 800ac68:	4642      	mov	r2, r8
 800ac6a:	464b      	mov	r3, r9
 800ac6c:	f7f5 fcc4 	bl	80005f8 <__aeabi_dmul>
 800ac70:	4b86      	ldr	r3, [pc, #536]	; (800ae8c <_dtoa_r+0x64c>)
 800ac72:	2200      	movs	r2, #0
 800ac74:	f7f5 fb0a 	bl	800028c <__adddf3>
 800ac78:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800ac7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac80:	9303      	str	r3, [sp, #12]
 800ac82:	2e00      	cmp	r6, #0
 800ac84:	d158      	bne.n	800ad38 <_dtoa_r+0x4f8>
 800ac86:	4b82      	ldr	r3, [pc, #520]	; (800ae90 <_dtoa_r+0x650>)
 800ac88:	2200      	movs	r2, #0
 800ac8a:	4640      	mov	r0, r8
 800ac8c:	4649      	mov	r1, r9
 800ac8e:	f7f5 fafb 	bl	8000288 <__aeabi_dsub>
 800ac92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ac96:	4680      	mov	r8, r0
 800ac98:	4689      	mov	r9, r1
 800ac9a:	f7f5 ff3d 	bl	8000b18 <__aeabi_dcmpgt>
 800ac9e:	2800      	cmp	r0, #0
 800aca0:	f040 8296 	bne.w	800b1d0 <_dtoa_r+0x990>
 800aca4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800aca8:	4640      	mov	r0, r8
 800acaa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800acae:	4649      	mov	r1, r9
 800acb0:	f7f5 ff14 	bl	8000adc <__aeabi_dcmplt>
 800acb4:	2800      	cmp	r0, #0
 800acb6:	f040 8289 	bne.w	800b1cc <_dtoa_r+0x98c>
 800acba:	ed8d 8b02 	vstr	d8, [sp, #8]
 800acbe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	f2c0 814e 	blt.w	800af62 <_dtoa_r+0x722>
 800acc6:	f1bb 0f0e 	cmp.w	fp, #14
 800acca:	f300 814a 	bgt.w	800af62 <_dtoa_r+0x722>
 800acce:	4b6b      	ldr	r3, [pc, #428]	; (800ae7c <_dtoa_r+0x63c>)
 800acd0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800acd4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800acd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800acda:	2b00      	cmp	r3, #0
 800acdc:	f280 80dc 	bge.w	800ae98 <_dtoa_r+0x658>
 800ace0:	9b04      	ldr	r3, [sp, #16]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	f300 80d8 	bgt.w	800ae98 <_dtoa_r+0x658>
 800ace8:	f040 826f 	bne.w	800b1ca <_dtoa_r+0x98a>
 800acec:	4b68      	ldr	r3, [pc, #416]	; (800ae90 <_dtoa_r+0x650>)
 800acee:	2200      	movs	r2, #0
 800acf0:	4640      	mov	r0, r8
 800acf2:	4649      	mov	r1, r9
 800acf4:	f7f5 fc80 	bl	80005f8 <__aeabi_dmul>
 800acf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800acfc:	f7f5 ff02 	bl	8000b04 <__aeabi_dcmpge>
 800ad00:	9e04      	ldr	r6, [sp, #16]
 800ad02:	4637      	mov	r7, r6
 800ad04:	2800      	cmp	r0, #0
 800ad06:	f040 8245 	bne.w	800b194 <_dtoa_r+0x954>
 800ad0a:	9d00      	ldr	r5, [sp, #0]
 800ad0c:	2331      	movs	r3, #49	; 0x31
 800ad0e:	f805 3b01 	strb.w	r3, [r5], #1
 800ad12:	f10b 0b01 	add.w	fp, fp, #1
 800ad16:	e241      	b.n	800b19c <_dtoa_r+0x95c>
 800ad18:	07f2      	lsls	r2, r6, #31
 800ad1a:	d505      	bpl.n	800ad28 <_dtoa_r+0x4e8>
 800ad1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad20:	f7f5 fc6a 	bl	80005f8 <__aeabi_dmul>
 800ad24:	3501      	adds	r5, #1
 800ad26:	2301      	movs	r3, #1
 800ad28:	1076      	asrs	r6, r6, #1
 800ad2a:	3708      	adds	r7, #8
 800ad2c:	e773      	b.n	800ac16 <_dtoa_r+0x3d6>
 800ad2e:	2502      	movs	r5, #2
 800ad30:	e775      	b.n	800ac1e <_dtoa_r+0x3de>
 800ad32:	9e04      	ldr	r6, [sp, #16]
 800ad34:	465f      	mov	r7, fp
 800ad36:	e792      	b.n	800ac5e <_dtoa_r+0x41e>
 800ad38:	9900      	ldr	r1, [sp, #0]
 800ad3a:	4b50      	ldr	r3, [pc, #320]	; (800ae7c <_dtoa_r+0x63c>)
 800ad3c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ad40:	4431      	add	r1, r6
 800ad42:	9102      	str	r1, [sp, #8]
 800ad44:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ad46:	eeb0 9a47 	vmov.f32	s18, s14
 800ad4a:	eef0 9a67 	vmov.f32	s19, s15
 800ad4e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ad52:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ad56:	2900      	cmp	r1, #0
 800ad58:	d044      	beq.n	800ade4 <_dtoa_r+0x5a4>
 800ad5a:	494e      	ldr	r1, [pc, #312]	; (800ae94 <_dtoa_r+0x654>)
 800ad5c:	2000      	movs	r0, #0
 800ad5e:	f7f5 fd75 	bl	800084c <__aeabi_ddiv>
 800ad62:	ec53 2b19 	vmov	r2, r3, d9
 800ad66:	f7f5 fa8f 	bl	8000288 <__aeabi_dsub>
 800ad6a:	9d00      	ldr	r5, [sp, #0]
 800ad6c:	ec41 0b19 	vmov	d9, r0, r1
 800ad70:	4649      	mov	r1, r9
 800ad72:	4640      	mov	r0, r8
 800ad74:	f7f5 fef0 	bl	8000b58 <__aeabi_d2iz>
 800ad78:	4606      	mov	r6, r0
 800ad7a:	f7f5 fbd3 	bl	8000524 <__aeabi_i2d>
 800ad7e:	4602      	mov	r2, r0
 800ad80:	460b      	mov	r3, r1
 800ad82:	4640      	mov	r0, r8
 800ad84:	4649      	mov	r1, r9
 800ad86:	f7f5 fa7f 	bl	8000288 <__aeabi_dsub>
 800ad8a:	3630      	adds	r6, #48	; 0x30
 800ad8c:	f805 6b01 	strb.w	r6, [r5], #1
 800ad90:	ec53 2b19 	vmov	r2, r3, d9
 800ad94:	4680      	mov	r8, r0
 800ad96:	4689      	mov	r9, r1
 800ad98:	f7f5 fea0 	bl	8000adc <__aeabi_dcmplt>
 800ad9c:	2800      	cmp	r0, #0
 800ad9e:	d164      	bne.n	800ae6a <_dtoa_r+0x62a>
 800ada0:	4642      	mov	r2, r8
 800ada2:	464b      	mov	r3, r9
 800ada4:	4937      	ldr	r1, [pc, #220]	; (800ae84 <_dtoa_r+0x644>)
 800ada6:	2000      	movs	r0, #0
 800ada8:	f7f5 fa6e 	bl	8000288 <__aeabi_dsub>
 800adac:	ec53 2b19 	vmov	r2, r3, d9
 800adb0:	f7f5 fe94 	bl	8000adc <__aeabi_dcmplt>
 800adb4:	2800      	cmp	r0, #0
 800adb6:	f040 80b6 	bne.w	800af26 <_dtoa_r+0x6e6>
 800adba:	9b02      	ldr	r3, [sp, #8]
 800adbc:	429d      	cmp	r5, r3
 800adbe:	f43f af7c 	beq.w	800acba <_dtoa_r+0x47a>
 800adc2:	4b31      	ldr	r3, [pc, #196]	; (800ae88 <_dtoa_r+0x648>)
 800adc4:	ec51 0b19 	vmov	r0, r1, d9
 800adc8:	2200      	movs	r2, #0
 800adca:	f7f5 fc15 	bl	80005f8 <__aeabi_dmul>
 800adce:	4b2e      	ldr	r3, [pc, #184]	; (800ae88 <_dtoa_r+0x648>)
 800add0:	ec41 0b19 	vmov	d9, r0, r1
 800add4:	2200      	movs	r2, #0
 800add6:	4640      	mov	r0, r8
 800add8:	4649      	mov	r1, r9
 800adda:	f7f5 fc0d 	bl	80005f8 <__aeabi_dmul>
 800adde:	4680      	mov	r8, r0
 800ade0:	4689      	mov	r9, r1
 800ade2:	e7c5      	b.n	800ad70 <_dtoa_r+0x530>
 800ade4:	ec51 0b17 	vmov	r0, r1, d7
 800ade8:	f7f5 fc06 	bl	80005f8 <__aeabi_dmul>
 800adec:	9b02      	ldr	r3, [sp, #8]
 800adee:	9d00      	ldr	r5, [sp, #0]
 800adf0:	930f      	str	r3, [sp, #60]	; 0x3c
 800adf2:	ec41 0b19 	vmov	d9, r0, r1
 800adf6:	4649      	mov	r1, r9
 800adf8:	4640      	mov	r0, r8
 800adfa:	f7f5 fead 	bl	8000b58 <__aeabi_d2iz>
 800adfe:	4606      	mov	r6, r0
 800ae00:	f7f5 fb90 	bl	8000524 <__aeabi_i2d>
 800ae04:	3630      	adds	r6, #48	; 0x30
 800ae06:	4602      	mov	r2, r0
 800ae08:	460b      	mov	r3, r1
 800ae0a:	4640      	mov	r0, r8
 800ae0c:	4649      	mov	r1, r9
 800ae0e:	f7f5 fa3b 	bl	8000288 <__aeabi_dsub>
 800ae12:	f805 6b01 	strb.w	r6, [r5], #1
 800ae16:	9b02      	ldr	r3, [sp, #8]
 800ae18:	429d      	cmp	r5, r3
 800ae1a:	4680      	mov	r8, r0
 800ae1c:	4689      	mov	r9, r1
 800ae1e:	f04f 0200 	mov.w	r2, #0
 800ae22:	d124      	bne.n	800ae6e <_dtoa_r+0x62e>
 800ae24:	4b1b      	ldr	r3, [pc, #108]	; (800ae94 <_dtoa_r+0x654>)
 800ae26:	ec51 0b19 	vmov	r0, r1, d9
 800ae2a:	f7f5 fa2f 	bl	800028c <__adddf3>
 800ae2e:	4602      	mov	r2, r0
 800ae30:	460b      	mov	r3, r1
 800ae32:	4640      	mov	r0, r8
 800ae34:	4649      	mov	r1, r9
 800ae36:	f7f5 fe6f 	bl	8000b18 <__aeabi_dcmpgt>
 800ae3a:	2800      	cmp	r0, #0
 800ae3c:	d173      	bne.n	800af26 <_dtoa_r+0x6e6>
 800ae3e:	ec53 2b19 	vmov	r2, r3, d9
 800ae42:	4914      	ldr	r1, [pc, #80]	; (800ae94 <_dtoa_r+0x654>)
 800ae44:	2000      	movs	r0, #0
 800ae46:	f7f5 fa1f 	bl	8000288 <__aeabi_dsub>
 800ae4a:	4602      	mov	r2, r0
 800ae4c:	460b      	mov	r3, r1
 800ae4e:	4640      	mov	r0, r8
 800ae50:	4649      	mov	r1, r9
 800ae52:	f7f5 fe43 	bl	8000adc <__aeabi_dcmplt>
 800ae56:	2800      	cmp	r0, #0
 800ae58:	f43f af2f 	beq.w	800acba <_dtoa_r+0x47a>
 800ae5c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ae5e:	1e6b      	subs	r3, r5, #1
 800ae60:	930f      	str	r3, [sp, #60]	; 0x3c
 800ae62:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ae66:	2b30      	cmp	r3, #48	; 0x30
 800ae68:	d0f8      	beq.n	800ae5c <_dtoa_r+0x61c>
 800ae6a:	46bb      	mov	fp, r7
 800ae6c:	e04a      	b.n	800af04 <_dtoa_r+0x6c4>
 800ae6e:	4b06      	ldr	r3, [pc, #24]	; (800ae88 <_dtoa_r+0x648>)
 800ae70:	f7f5 fbc2 	bl	80005f8 <__aeabi_dmul>
 800ae74:	4680      	mov	r8, r0
 800ae76:	4689      	mov	r9, r1
 800ae78:	e7bd      	b.n	800adf6 <_dtoa_r+0x5b6>
 800ae7a:	bf00      	nop
 800ae7c:	0800d2f8 	.word	0x0800d2f8
 800ae80:	0800d2d0 	.word	0x0800d2d0
 800ae84:	3ff00000 	.word	0x3ff00000
 800ae88:	40240000 	.word	0x40240000
 800ae8c:	401c0000 	.word	0x401c0000
 800ae90:	40140000 	.word	0x40140000
 800ae94:	3fe00000 	.word	0x3fe00000
 800ae98:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ae9c:	9d00      	ldr	r5, [sp, #0]
 800ae9e:	4642      	mov	r2, r8
 800aea0:	464b      	mov	r3, r9
 800aea2:	4630      	mov	r0, r6
 800aea4:	4639      	mov	r1, r7
 800aea6:	f7f5 fcd1 	bl	800084c <__aeabi_ddiv>
 800aeaa:	f7f5 fe55 	bl	8000b58 <__aeabi_d2iz>
 800aeae:	9001      	str	r0, [sp, #4]
 800aeb0:	f7f5 fb38 	bl	8000524 <__aeabi_i2d>
 800aeb4:	4642      	mov	r2, r8
 800aeb6:	464b      	mov	r3, r9
 800aeb8:	f7f5 fb9e 	bl	80005f8 <__aeabi_dmul>
 800aebc:	4602      	mov	r2, r0
 800aebe:	460b      	mov	r3, r1
 800aec0:	4630      	mov	r0, r6
 800aec2:	4639      	mov	r1, r7
 800aec4:	f7f5 f9e0 	bl	8000288 <__aeabi_dsub>
 800aec8:	9e01      	ldr	r6, [sp, #4]
 800aeca:	9f04      	ldr	r7, [sp, #16]
 800aecc:	3630      	adds	r6, #48	; 0x30
 800aece:	f805 6b01 	strb.w	r6, [r5], #1
 800aed2:	9e00      	ldr	r6, [sp, #0]
 800aed4:	1bae      	subs	r6, r5, r6
 800aed6:	42b7      	cmp	r7, r6
 800aed8:	4602      	mov	r2, r0
 800aeda:	460b      	mov	r3, r1
 800aedc:	d134      	bne.n	800af48 <_dtoa_r+0x708>
 800aede:	f7f5 f9d5 	bl	800028c <__adddf3>
 800aee2:	4642      	mov	r2, r8
 800aee4:	464b      	mov	r3, r9
 800aee6:	4606      	mov	r6, r0
 800aee8:	460f      	mov	r7, r1
 800aeea:	f7f5 fe15 	bl	8000b18 <__aeabi_dcmpgt>
 800aeee:	b9c8      	cbnz	r0, 800af24 <_dtoa_r+0x6e4>
 800aef0:	4642      	mov	r2, r8
 800aef2:	464b      	mov	r3, r9
 800aef4:	4630      	mov	r0, r6
 800aef6:	4639      	mov	r1, r7
 800aef8:	f7f5 fde6 	bl	8000ac8 <__aeabi_dcmpeq>
 800aefc:	b110      	cbz	r0, 800af04 <_dtoa_r+0x6c4>
 800aefe:	9b01      	ldr	r3, [sp, #4]
 800af00:	07db      	lsls	r3, r3, #31
 800af02:	d40f      	bmi.n	800af24 <_dtoa_r+0x6e4>
 800af04:	4651      	mov	r1, sl
 800af06:	4620      	mov	r0, r4
 800af08:	f000 fdbe 	bl	800ba88 <_Bfree>
 800af0c:	2300      	movs	r3, #0
 800af0e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800af10:	702b      	strb	r3, [r5, #0]
 800af12:	f10b 0301 	add.w	r3, fp, #1
 800af16:	6013      	str	r3, [r2, #0]
 800af18:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	f43f ace2 	beq.w	800a8e4 <_dtoa_r+0xa4>
 800af20:	601d      	str	r5, [r3, #0]
 800af22:	e4df      	b.n	800a8e4 <_dtoa_r+0xa4>
 800af24:	465f      	mov	r7, fp
 800af26:	462b      	mov	r3, r5
 800af28:	461d      	mov	r5, r3
 800af2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800af2e:	2a39      	cmp	r2, #57	; 0x39
 800af30:	d106      	bne.n	800af40 <_dtoa_r+0x700>
 800af32:	9a00      	ldr	r2, [sp, #0]
 800af34:	429a      	cmp	r2, r3
 800af36:	d1f7      	bne.n	800af28 <_dtoa_r+0x6e8>
 800af38:	9900      	ldr	r1, [sp, #0]
 800af3a:	2230      	movs	r2, #48	; 0x30
 800af3c:	3701      	adds	r7, #1
 800af3e:	700a      	strb	r2, [r1, #0]
 800af40:	781a      	ldrb	r2, [r3, #0]
 800af42:	3201      	adds	r2, #1
 800af44:	701a      	strb	r2, [r3, #0]
 800af46:	e790      	b.n	800ae6a <_dtoa_r+0x62a>
 800af48:	4ba3      	ldr	r3, [pc, #652]	; (800b1d8 <_dtoa_r+0x998>)
 800af4a:	2200      	movs	r2, #0
 800af4c:	f7f5 fb54 	bl	80005f8 <__aeabi_dmul>
 800af50:	2200      	movs	r2, #0
 800af52:	2300      	movs	r3, #0
 800af54:	4606      	mov	r6, r0
 800af56:	460f      	mov	r7, r1
 800af58:	f7f5 fdb6 	bl	8000ac8 <__aeabi_dcmpeq>
 800af5c:	2800      	cmp	r0, #0
 800af5e:	d09e      	beq.n	800ae9e <_dtoa_r+0x65e>
 800af60:	e7d0      	b.n	800af04 <_dtoa_r+0x6c4>
 800af62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af64:	2a00      	cmp	r2, #0
 800af66:	f000 80ca 	beq.w	800b0fe <_dtoa_r+0x8be>
 800af6a:	9a07      	ldr	r2, [sp, #28]
 800af6c:	2a01      	cmp	r2, #1
 800af6e:	f300 80ad 	bgt.w	800b0cc <_dtoa_r+0x88c>
 800af72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800af74:	2a00      	cmp	r2, #0
 800af76:	f000 80a5 	beq.w	800b0c4 <_dtoa_r+0x884>
 800af7a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800af7e:	9e08      	ldr	r6, [sp, #32]
 800af80:	9d05      	ldr	r5, [sp, #20]
 800af82:	9a05      	ldr	r2, [sp, #20]
 800af84:	441a      	add	r2, r3
 800af86:	9205      	str	r2, [sp, #20]
 800af88:	9a06      	ldr	r2, [sp, #24]
 800af8a:	2101      	movs	r1, #1
 800af8c:	441a      	add	r2, r3
 800af8e:	4620      	mov	r0, r4
 800af90:	9206      	str	r2, [sp, #24]
 800af92:	f000 fe2f 	bl	800bbf4 <__i2b>
 800af96:	4607      	mov	r7, r0
 800af98:	b165      	cbz	r5, 800afb4 <_dtoa_r+0x774>
 800af9a:	9b06      	ldr	r3, [sp, #24]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	dd09      	ble.n	800afb4 <_dtoa_r+0x774>
 800afa0:	42ab      	cmp	r3, r5
 800afa2:	9a05      	ldr	r2, [sp, #20]
 800afa4:	bfa8      	it	ge
 800afa6:	462b      	movge	r3, r5
 800afa8:	1ad2      	subs	r2, r2, r3
 800afaa:	9205      	str	r2, [sp, #20]
 800afac:	9a06      	ldr	r2, [sp, #24]
 800afae:	1aed      	subs	r5, r5, r3
 800afb0:	1ad3      	subs	r3, r2, r3
 800afb2:	9306      	str	r3, [sp, #24]
 800afb4:	9b08      	ldr	r3, [sp, #32]
 800afb6:	b1f3      	cbz	r3, 800aff6 <_dtoa_r+0x7b6>
 800afb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afba:	2b00      	cmp	r3, #0
 800afbc:	f000 80a3 	beq.w	800b106 <_dtoa_r+0x8c6>
 800afc0:	2e00      	cmp	r6, #0
 800afc2:	dd10      	ble.n	800afe6 <_dtoa_r+0x7a6>
 800afc4:	4639      	mov	r1, r7
 800afc6:	4632      	mov	r2, r6
 800afc8:	4620      	mov	r0, r4
 800afca:	f000 fed3 	bl	800bd74 <__pow5mult>
 800afce:	4652      	mov	r2, sl
 800afd0:	4601      	mov	r1, r0
 800afd2:	4607      	mov	r7, r0
 800afd4:	4620      	mov	r0, r4
 800afd6:	f000 fe23 	bl	800bc20 <__multiply>
 800afda:	4651      	mov	r1, sl
 800afdc:	4680      	mov	r8, r0
 800afde:	4620      	mov	r0, r4
 800afe0:	f000 fd52 	bl	800ba88 <_Bfree>
 800afe4:	46c2      	mov	sl, r8
 800afe6:	9b08      	ldr	r3, [sp, #32]
 800afe8:	1b9a      	subs	r2, r3, r6
 800afea:	d004      	beq.n	800aff6 <_dtoa_r+0x7b6>
 800afec:	4651      	mov	r1, sl
 800afee:	4620      	mov	r0, r4
 800aff0:	f000 fec0 	bl	800bd74 <__pow5mult>
 800aff4:	4682      	mov	sl, r0
 800aff6:	2101      	movs	r1, #1
 800aff8:	4620      	mov	r0, r4
 800affa:	f000 fdfb 	bl	800bbf4 <__i2b>
 800affe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b000:	2b00      	cmp	r3, #0
 800b002:	4606      	mov	r6, r0
 800b004:	f340 8081 	ble.w	800b10a <_dtoa_r+0x8ca>
 800b008:	461a      	mov	r2, r3
 800b00a:	4601      	mov	r1, r0
 800b00c:	4620      	mov	r0, r4
 800b00e:	f000 feb1 	bl	800bd74 <__pow5mult>
 800b012:	9b07      	ldr	r3, [sp, #28]
 800b014:	2b01      	cmp	r3, #1
 800b016:	4606      	mov	r6, r0
 800b018:	dd7a      	ble.n	800b110 <_dtoa_r+0x8d0>
 800b01a:	f04f 0800 	mov.w	r8, #0
 800b01e:	6933      	ldr	r3, [r6, #16]
 800b020:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b024:	6918      	ldr	r0, [r3, #16]
 800b026:	f000 fd97 	bl	800bb58 <__hi0bits>
 800b02a:	f1c0 0020 	rsb	r0, r0, #32
 800b02e:	9b06      	ldr	r3, [sp, #24]
 800b030:	4418      	add	r0, r3
 800b032:	f010 001f 	ands.w	r0, r0, #31
 800b036:	f000 8094 	beq.w	800b162 <_dtoa_r+0x922>
 800b03a:	f1c0 0320 	rsb	r3, r0, #32
 800b03e:	2b04      	cmp	r3, #4
 800b040:	f340 8085 	ble.w	800b14e <_dtoa_r+0x90e>
 800b044:	9b05      	ldr	r3, [sp, #20]
 800b046:	f1c0 001c 	rsb	r0, r0, #28
 800b04a:	4403      	add	r3, r0
 800b04c:	9305      	str	r3, [sp, #20]
 800b04e:	9b06      	ldr	r3, [sp, #24]
 800b050:	4403      	add	r3, r0
 800b052:	4405      	add	r5, r0
 800b054:	9306      	str	r3, [sp, #24]
 800b056:	9b05      	ldr	r3, [sp, #20]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	dd05      	ble.n	800b068 <_dtoa_r+0x828>
 800b05c:	4651      	mov	r1, sl
 800b05e:	461a      	mov	r2, r3
 800b060:	4620      	mov	r0, r4
 800b062:	f000 fee1 	bl	800be28 <__lshift>
 800b066:	4682      	mov	sl, r0
 800b068:	9b06      	ldr	r3, [sp, #24]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	dd05      	ble.n	800b07a <_dtoa_r+0x83a>
 800b06e:	4631      	mov	r1, r6
 800b070:	461a      	mov	r2, r3
 800b072:	4620      	mov	r0, r4
 800b074:	f000 fed8 	bl	800be28 <__lshift>
 800b078:	4606      	mov	r6, r0
 800b07a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d072      	beq.n	800b166 <_dtoa_r+0x926>
 800b080:	4631      	mov	r1, r6
 800b082:	4650      	mov	r0, sl
 800b084:	f000 ff3c 	bl	800bf00 <__mcmp>
 800b088:	2800      	cmp	r0, #0
 800b08a:	da6c      	bge.n	800b166 <_dtoa_r+0x926>
 800b08c:	2300      	movs	r3, #0
 800b08e:	4651      	mov	r1, sl
 800b090:	220a      	movs	r2, #10
 800b092:	4620      	mov	r0, r4
 800b094:	f000 fd1a 	bl	800bacc <__multadd>
 800b098:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b09a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800b09e:	4682      	mov	sl, r0
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	f000 81b0 	beq.w	800b406 <_dtoa_r+0xbc6>
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	4639      	mov	r1, r7
 800b0aa:	220a      	movs	r2, #10
 800b0ac:	4620      	mov	r0, r4
 800b0ae:	f000 fd0d 	bl	800bacc <__multadd>
 800b0b2:	9b01      	ldr	r3, [sp, #4]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	4607      	mov	r7, r0
 800b0b8:	f300 8096 	bgt.w	800b1e8 <_dtoa_r+0x9a8>
 800b0bc:	9b07      	ldr	r3, [sp, #28]
 800b0be:	2b02      	cmp	r3, #2
 800b0c0:	dc59      	bgt.n	800b176 <_dtoa_r+0x936>
 800b0c2:	e091      	b.n	800b1e8 <_dtoa_r+0x9a8>
 800b0c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b0c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b0ca:	e758      	b.n	800af7e <_dtoa_r+0x73e>
 800b0cc:	9b04      	ldr	r3, [sp, #16]
 800b0ce:	1e5e      	subs	r6, r3, #1
 800b0d0:	9b08      	ldr	r3, [sp, #32]
 800b0d2:	42b3      	cmp	r3, r6
 800b0d4:	bfbf      	itttt	lt
 800b0d6:	9b08      	ldrlt	r3, [sp, #32]
 800b0d8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800b0da:	9608      	strlt	r6, [sp, #32]
 800b0dc:	1af3      	sublt	r3, r6, r3
 800b0de:	bfb4      	ite	lt
 800b0e0:	18d2      	addlt	r2, r2, r3
 800b0e2:	1b9e      	subge	r6, r3, r6
 800b0e4:	9b04      	ldr	r3, [sp, #16]
 800b0e6:	bfbc      	itt	lt
 800b0e8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800b0ea:	2600      	movlt	r6, #0
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	bfb7      	itett	lt
 800b0f0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800b0f4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800b0f8:	1a9d      	sublt	r5, r3, r2
 800b0fa:	2300      	movlt	r3, #0
 800b0fc:	e741      	b.n	800af82 <_dtoa_r+0x742>
 800b0fe:	9e08      	ldr	r6, [sp, #32]
 800b100:	9d05      	ldr	r5, [sp, #20]
 800b102:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b104:	e748      	b.n	800af98 <_dtoa_r+0x758>
 800b106:	9a08      	ldr	r2, [sp, #32]
 800b108:	e770      	b.n	800afec <_dtoa_r+0x7ac>
 800b10a:	9b07      	ldr	r3, [sp, #28]
 800b10c:	2b01      	cmp	r3, #1
 800b10e:	dc19      	bgt.n	800b144 <_dtoa_r+0x904>
 800b110:	9b02      	ldr	r3, [sp, #8]
 800b112:	b9bb      	cbnz	r3, 800b144 <_dtoa_r+0x904>
 800b114:	9b03      	ldr	r3, [sp, #12]
 800b116:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b11a:	b99b      	cbnz	r3, 800b144 <_dtoa_r+0x904>
 800b11c:	9b03      	ldr	r3, [sp, #12]
 800b11e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b122:	0d1b      	lsrs	r3, r3, #20
 800b124:	051b      	lsls	r3, r3, #20
 800b126:	b183      	cbz	r3, 800b14a <_dtoa_r+0x90a>
 800b128:	9b05      	ldr	r3, [sp, #20]
 800b12a:	3301      	adds	r3, #1
 800b12c:	9305      	str	r3, [sp, #20]
 800b12e:	9b06      	ldr	r3, [sp, #24]
 800b130:	3301      	adds	r3, #1
 800b132:	9306      	str	r3, [sp, #24]
 800b134:	f04f 0801 	mov.w	r8, #1
 800b138:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	f47f af6f 	bne.w	800b01e <_dtoa_r+0x7de>
 800b140:	2001      	movs	r0, #1
 800b142:	e774      	b.n	800b02e <_dtoa_r+0x7ee>
 800b144:	f04f 0800 	mov.w	r8, #0
 800b148:	e7f6      	b.n	800b138 <_dtoa_r+0x8f8>
 800b14a:	4698      	mov	r8, r3
 800b14c:	e7f4      	b.n	800b138 <_dtoa_r+0x8f8>
 800b14e:	d082      	beq.n	800b056 <_dtoa_r+0x816>
 800b150:	9a05      	ldr	r2, [sp, #20]
 800b152:	331c      	adds	r3, #28
 800b154:	441a      	add	r2, r3
 800b156:	9205      	str	r2, [sp, #20]
 800b158:	9a06      	ldr	r2, [sp, #24]
 800b15a:	441a      	add	r2, r3
 800b15c:	441d      	add	r5, r3
 800b15e:	9206      	str	r2, [sp, #24]
 800b160:	e779      	b.n	800b056 <_dtoa_r+0x816>
 800b162:	4603      	mov	r3, r0
 800b164:	e7f4      	b.n	800b150 <_dtoa_r+0x910>
 800b166:	9b04      	ldr	r3, [sp, #16]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	dc37      	bgt.n	800b1dc <_dtoa_r+0x99c>
 800b16c:	9b07      	ldr	r3, [sp, #28]
 800b16e:	2b02      	cmp	r3, #2
 800b170:	dd34      	ble.n	800b1dc <_dtoa_r+0x99c>
 800b172:	9b04      	ldr	r3, [sp, #16]
 800b174:	9301      	str	r3, [sp, #4]
 800b176:	9b01      	ldr	r3, [sp, #4]
 800b178:	b963      	cbnz	r3, 800b194 <_dtoa_r+0x954>
 800b17a:	4631      	mov	r1, r6
 800b17c:	2205      	movs	r2, #5
 800b17e:	4620      	mov	r0, r4
 800b180:	f000 fca4 	bl	800bacc <__multadd>
 800b184:	4601      	mov	r1, r0
 800b186:	4606      	mov	r6, r0
 800b188:	4650      	mov	r0, sl
 800b18a:	f000 feb9 	bl	800bf00 <__mcmp>
 800b18e:	2800      	cmp	r0, #0
 800b190:	f73f adbb 	bgt.w	800ad0a <_dtoa_r+0x4ca>
 800b194:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b196:	9d00      	ldr	r5, [sp, #0]
 800b198:	ea6f 0b03 	mvn.w	fp, r3
 800b19c:	f04f 0800 	mov.w	r8, #0
 800b1a0:	4631      	mov	r1, r6
 800b1a2:	4620      	mov	r0, r4
 800b1a4:	f000 fc70 	bl	800ba88 <_Bfree>
 800b1a8:	2f00      	cmp	r7, #0
 800b1aa:	f43f aeab 	beq.w	800af04 <_dtoa_r+0x6c4>
 800b1ae:	f1b8 0f00 	cmp.w	r8, #0
 800b1b2:	d005      	beq.n	800b1c0 <_dtoa_r+0x980>
 800b1b4:	45b8      	cmp	r8, r7
 800b1b6:	d003      	beq.n	800b1c0 <_dtoa_r+0x980>
 800b1b8:	4641      	mov	r1, r8
 800b1ba:	4620      	mov	r0, r4
 800b1bc:	f000 fc64 	bl	800ba88 <_Bfree>
 800b1c0:	4639      	mov	r1, r7
 800b1c2:	4620      	mov	r0, r4
 800b1c4:	f000 fc60 	bl	800ba88 <_Bfree>
 800b1c8:	e69c      	b.n	800af04 <_dtoa_r+0x6c4>
 800b1ca:	2600      	movs	r6, #0
 800b1cc:	4637      	mov	r7, r6
 800b1ce:	e7e1      	b.n	800b194 <_dtoa_r+0x954>
 800b1d0:	46bb      	mov	fp, r7
 800b1d2:	4637      	mov	r7, r6
 800b1d4:	e599      	b.n	800ad0a <_dtoa_r+0x4ca>
 800b1d6:	bf00      	nop
 800b1d8:	40240000 	.word	0x40240000
 800b1dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	f000 80c8 	beq.w	800b374 <_dtoa_r+0xb34>
 800b1e4:	9b04      	ldr	r3, [sp, #16]
 800b1e6:	9301      	str	r3, [sp, #4]
 800b1e8:	2d00      	cmp	r5, #0
 800b1ea:	dd05      	ble.n	800b1f8 <_dtoa_r+0x9b8>
 800b1ec:	4639      	mov	r1, r7
 800b1ee:	462a      	mov	r2, r5
 800b1f0:	4620      	mov	r0, r4
 800b1f2:	f000 fe19 	bl	800be28 <__lshift>
 800b1f6:	4607      	mov	r7, r0
 800b1f8:	f1b8 0f00 	cmp.w	r8, #0
 800b1fc:	d05b      	beq.n	800b2b6 <_dtoa_r+0xa76>
 800b1fe:	6879      	ldr	r1, [r7, #4]
 800b200:	4620      	mov	r0, r4
 800b202:	f000 fc01 	bl	800ba08 <_Balloc>
 800b206:	4605      	mov	r5, r0
 800b208:	b928      	cbnz	r0, 800b216 <_dtoa_r+0x9d6>
 800b20a:	4b83      	ldr	r3, [pc, #524]	; (800b418 <_dtoa_r+0xbd8>)
 800b20c:	4602      	mov	r2, r0
 800b20e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b212:	f7ff bb2e 	b.w	800a872 <_dtoa_r+0x32>
 800b216:	693a      	ldr	r2, [r7, #16]
 800b218:	3202      	adds	r2, #2
 800b21a:	0092      	lsls	r2, r2, #2
 800b21c:	f107 010c 	add.w	r1, r7, #12
 800b220:	300c      	adds	r0, #12
 800b222:	f7ff fa76 	bl	800a712 <memcpy>
 800b226:	2201      	movs	r2, #1
 800b228:	4629      	mov	r1, r5
 800b22a:	4620      	mov	r0, r4
 800b22c:	f000 fdfc 	bl	800be28 <__lshift>
 800b230:	9b00      	ldr	r3, [sp, #0]
 800b232:	3301      	adds	r3, #1
 800b234:	9304      	str	r3, [sp, #16]
 800b236:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b23a:	4413      	add	r3, r2
 800b23c:	9308      	str	r3, [sp, #32]
 800b23e:	9b02      	ldr	r3, [sp, #8]
 800b240:	f003 0301 	and.w	r3, r3, #1
 800b244:	46b8      	mov	r8, r7
 800b246:	9306      	str	r3, [sp, #24]
 800b248:	4607      	mov	r7, r0
 800b24a:	9b04      	ldr	r3, [sp, #16]
 800b24c:	4631      	mov	r1, r6
 800b24e:	3b01      	subs	r3, #1
 800b250:	4650      	mov	r0, sl
 800b252:	9301      	str	r3, [sp, #4]
 800b254:	f7ff fa6b 	bl	800a72e <quorem>
 800b258:	4641      	mov	r1, r8
 800b25a:	9002      	str	r0, [sp, #8]
 800b25c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b260:	4650      	mov	r0, sl
 800b262:	f000 fe4d 	bl	800bf00 <__mcmp>
 800b266:	463a      	mov	r2, r7
 800b268:	9005      	str	r0, [sp, #20]
 800b26a:	4631      	mov	r1, r6
 800b26c:	4620      	mov	r0, r4
 800b26e:	f000 fe63 	bl	800bf38 <__mdiff>
 800b272:	68c2      	ldr	r2, [r0, #12]
 800b274:	4605      	mov	r5, r0
 800b276:	bb02      	cbnz	r2, 800b2ba <_dtoa_r+0xa7a>
 800b278:	4601      	mov	r1, r0
 800b27a:	4650      	mov	r0, sl
 800b27c:	f000 fe40 	bl	800bf00 <__mcmp>
 800b280:	4602      	mov	r2, r0
 800b282:	4629      	mov	r1, r5
 800b284:	4620      	mov	r0, r4
 800b286:	9209      	str	r2, [sp, #36]	; 0x24
 800b288:	f000 fbfe 	bl	800ba88 <_Bfree>
 800b28c:	9b07      	ldr	r3, [sp, #28]
 800b28e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b290:	9d04      	ldr	r5, [sp, #16]
 800b292:	ea43 0102 	orr.w	r1, r3, r2
 800b296:	9b06      	ldr	r3, [sp, #24]
 800b298:	4319      	orrs	r1, r3
 800b29a:	d110      	bne.n	800b2be <_dtoa_r+0xa7e>
 800b29c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b2a0:	d029      	beq.n	800b2f6 <_dtoa_r+0xab6>
 800b2a2:	9b05      	ldr	r3, [sp, #20]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	dd02      	ble.n	800b2ae <_dtoa_r+0xa6e>
 800b2a8:	9b02      	ldr	r3, [sp, #8]
 800b2aa:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800b2ae:	9b01      	ldr	r3, [sp, #4]
 800b2b0:	f883 9000 	strb.w	r9, [r3]
 800b2b4:	e774      	b.n	800b1a0 <_dtoa_r+0x960>
 800b2b6:	4638      	mov	r0, r7
 800b2b8:	e7ba      	b.n	800b230 <_dtoa_r+0x9f0>
 800b2ba:	2201      	movs	r2, #1
 800b2bc:	e7e1      	b.n	800b282 <_dtoa_r+0xa42>
 800b2be:	9b05      	ldr	r3, [sp, #20]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	db04      	blt.n	800b2ce <_dtoa_r+0xa8e>
 800b2c4:	9907      	ldr	r1, [sp, #28]
 800b2c6:	430b      	orrs	r3, r1
 800b2c8:	9906      	ldr	r1, [sp, #24]
 800b2ca:	430b      	orrs	r3, r1
 800b2cc:	d120      	bne.n	800b310 <_dtoa_r+0xad0>
 800b2ce:	2a00      	cmp	r2, #0
 800b2d0:	dded      	ble.n	800b2ae <_dtoa_r+0xa6e>
 800b2d2:	4651      	mov	r1, sl
 800b2d4:	2201      	movs	r2, #1
 800b2d6:	4620      	mov	r0, r4
 800b2d8:	f000 fda6 	bl	800be28 <__lshift>
 800b2dc:	4631      	mov	r1, r6
 800b2de:	4682      	mov	sl, r0
 800b2e0:	f000 fe0e 	bl	800bf00 <__mcmp>
 800b2e4:	2800      	cmp	r0, #0
 800b2e6:	dc03      	bgt.n	800b2f0 <_dtoa_r+0xab0>
 800b2e8:	d1e1      	bne.n	800b2ae <_dtoa_r+0xa6e>
 800b2ea:	f019 0f01 	tst.w	r9, #1
 800b2ee:	d0de      	beq.n	800b2ae <_dtoa_r+0xa6e>
 800b2f0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b2f4:	d1d8      	bne.n	800b2a8 <_dtoa_r+0xa68>
 800b2f6:	9a01      	ldr	r2, [sp, #4]
 800b2f8:	2339      	movs	r3, #57	; 0x39
 800b2fa:	7013      	strb	r3, [r2, #0]
 800b2fc:	462b      	mov	r3, r5
 800b2fe:	461d      	mov	r5, r3
 800b300:	3b01      	subs	r3, #1
 800b302:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b306:	2a39      	cmp	r2, #57	; 0x39
 800b308:	d06c      	beq.n	800b3e4 <_dtoa_r+0xba4>
 800b30a:	3201      	adds	r2, #1
 800b30c:	701a      	strb	r2, [r3, #0]
 800b30e:	e747      	b.n	800b1a0 <_dtoa_r+0x960>
 800b310:	2a00      	cmp	r2, #0
 800b312:	dd07      	ble.n	800b324 <_dtoa_r+0xae4>
 800b314:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b318:	d0ed      	beq.n	800b2f6 <_dtoa_r+0xab6>
 800b31a:	9a01      	ldr	r2, [sp, #4]
 800b31c:	f109 0301 	add.w	r3, r9, #1
 800b320:	7013      	strb	r3, [r2, #0]
 800b322:	e73d      	b.n	800b1a0 <_dtoa_r+0x960>
 800b324:	9b04      	ldr	r3, [sp, #16]
 800b326:	9a08      	ldr	r2, [sp, #32]
 800b328:	f803 9c01 	strb.w	r9, [r3, #-1]
 800b32c:	4293      	cmp	r3, r2
 800b32e:	d043      	beq.n	800b3b8 <_dtoa_r+0xb78>
 800b330:	4651      	mov	r1, sl
 800b332:	2300      	movs	r3, #0
 800b334:	220a      	movs	r2, #10
 800b336:	4620      	mov	r0, r4
 800b338:	f000 fbc8 	bl	800bacc <__multadd>
 800b33c:	45b8      	cmp	r8, r7
 800b33e:	4682      	mov	sl, r0
 800b340:	f04f 0300 	mov.w	r3, #0
 800b344:	f04f 020a 	mov.w	r2, #10
 800b348:	4641      	mov	r1, r8
 800b34a:	4620      	mov	r0, r4
 800b34c:	d107      	bne.n	800b35e <_dtoa_r+0xb1e>
 800b34e:	f000 fbbd 	bl	800bacc <__multadd>
 800b352:	4680      	mov	r8, r0
 800b354:	4607      	mov	r7, r0
 800b356:	9b04      	ldr	r3, [sp, #16]
 800b358:	3301      	adds	r3, #1
 800b35a:	9304      	str	r3, [sp, #16]
 800b35c:	e775      	b.n	800b24a <_dtoa_r+0xa0a>
 800b35e:	f000 fbb5 	bl	800bacc <__multadd>
 800b362:	4639      	mov	r1, r7
 800b364:	4680      	mov	r8, r0
 800b366:	2300      	movs	r3, #0
 800b368:	220a      	movs	r2, #10
 800b36a:	4620      	mov	r0, r4
 800b36c:	f000 fbae 	bl	800bacc <__multadd>
 800b370:	4607      	mov	r7, r0
 800b372:	e7f0      	b.n	800b356 <_dtoa_r+0xb16>
 800b374:	9b04      	ldr	r3, [sp, #16]
 800b376:	9301      	str	r3, [sp, #4]
 800b378:	9d00      	ldr	r5, [sp, #0]
 800b37a:	4631      	mov	r1, r6
 800b37c:	4650      	mov	r0, sl
 800b37e:	f7ff f9d6 	bl	800a72e <quorem>
 800b382:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b386:	9b00      	ldr	r3, [sp, #0]
 800b388:	f805 9b01 	strb.w	r9, [r5], #1
 800b38c:	1aea      	subs	r2, r5, r3
 800b38e:	9b01      	ldr	r3, [sp, #4]
 800b390:	4293      	cmp	r3, r2
 800b392:	dd07      	ble.n	800b3a4 <_dtoa_r+0xb64>
 800b394:	4651      	mov	r1, sl
 800b396:	2300      	movs	r3, #0
 800b398:	220a      	movs	r2, #10
 800b39a:	4620      	mov	r0, r4
 800b39c:	f000 fb96 	bl	800bacc <__multadd>
 800b3a0:	4682      	mov	sl, r0
 800b3a2:	e7ea      	b.n	800b37a <_dtoa_r+0xb3a>
 800b3a4:	9b01      	ldr	r3, [sp, #4]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	bfc8      	it	gt
 800b3aa:	461d      	movgt	r5, r3
 800b3ac:	9b00      	ldr	r3, [sp, #0]
 800b3ae:	bfd8      	it	le
 800b3b0:	2501      	movle	r5, #1
 800b3b2:	441d      	add	r5, r3
 800b3b4:	f04f 0800 	mov.w	r8, #0
 800b3b8:	4651      	mov	r1, sl
 800b3ba:	2201      	movs	r2, #1
 800b3bc:	4620      	mov	r0, r4
 800b3be:	f000 fd33 	bl	800be28 <__lshift>
 800b3c2:	4631      	mov	r1, r6
 800b3c4:	4682      	mov	sl, r0
 800b3c6:	f000 fd9b 	bl	800bf00 <__mcmp>
 800b3ca:	2800      	cmp	r0, #0
 800b3cc:	dc96      	bgt.n	800b2fc <_dtoa_r+0xabc>
 800b3ce:	d102      	bne.n	800b3d6 <_dtoa_r+0xb96>
 800b3d0:	f019 0f01 	tst.w	r9, #1
 800b3d4:	d192      	bne.n	800b2fc <_dtoa_r+0xabc>
 800b3d6:	462b      	mov	r3, r5
 800b3d8:	461d      	mov	r5, r3
 800b3da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b3de:	2a30      	cmp	r2, #48	; 0x30
 800b3e0:	d0fa      	beq.n	800b3d8 <_dtoa_r+0xb98>
 800b3e2:	e6dd      	b.n	800b1a0 <_dtoa_r+0x960>
 800b3e4:	9a00      	ldr	r2, [sp, #0]
 800b3e6:	429a      	cmp	r2, r3
 800b3e8:	d189      	bne.n	800b2fe <_dtoa_r+0xabe>
 800b3ea:	f10b 0b01 	add.w	fp, fp, #1
 800b3ee:	2331      	movs	r3, #49	; 0x31
 800b3f0:	e796      	b.n	800b320 <_dtoa_r+0xae0>
 800b3f2:	4b0a      	ldr	r3, [pc, #40]	; (800b41c <_dtoa_r+0xbdc>)
 800b3f4:	f7ff ba99 	b.w	800a92a <_dtoa_r+0xea>
 800b3f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	f47f aa6d 	bne.w	800a8da <_dtoa_r+0x9a>
 800b400:	4b07      	ldr	r3, [pc, #28]	; (800b420 <_dtoa_r+0xbe0>)
 800b402:	f7ff ba92 	b.w	800a92a <_dtoa_r+0xea>
 800b406:	9b01      	ldr	r3, [sp, #4]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	dcb5      	bgt.n	800b378 <_dtoa_r+0xb38>
 800b40c:	9b07      	ldr	r3, [sp, #28]
 800b40e:	2b02      	cmp	r3, #2
 800b410:	f73f aeb1 	bgt.w	800b176 <_dtoa_r+0x936>
 800b414:	e7b0      	b.n	800b378 <_dtoa_r+0xb38>
 800b416:	bf00      	nop
 800b418:	0800d250 	.word	0x0800d250
 800b41c:	0800d1b0 	.word	0x0800d1b0
 800b420:	0800d1d4 	.word	0x0800d1d4

0800b424 <_free_r>:
 800b424:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b426:	2900      	cmp	r1, #0
 800b428:	d044      	beq.n	800b4b4 <_free_r+0x90>
 800b42a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b42e:	9001      	str	r0, [sp, #4]
 800b430:	2b00      	cmp	r3, #0
 800b432:	f1a1 0404 	sub.w	r4, r1, #4
 800b436:	bfb8      	it	lt
 800b438:	18e4      	addlt	r4, r4, r3
 800b43a:	f000 fad9 	bl	800b9f0 <__malloc_lock>
 800b43e:	4a1e      	ldr	r2, [pc, #120]	; (800b4b8 <_free_r+0x94>)
 800b440:	9801      	ldr	r0, [sp, #4]
 800b442:	6813      	ldr	r3, [r2, #0]
 800b444:	b933      	cbnz	r3, 800b454 <_free_r+0x30>
 800b446:	6063      	str	r3, [r4, #4]
 800b448:	6014      	str	r4, [r2, #0]
 800b44a:	b003      	add	sp, #12
 800b44c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b450:	f000 bad4 	b.w	800b9fc <__malloc_unlock>
 800b454:	42a3      	cmp	r3, r4
 800b456:	d908      	bls.n	800b46a <_free_r+0x46>
 800b458:	6825      	ldr	r5, [r4, #0]
 800b45a:	1961      	adds	r1, r4, r5
 800b45c:	428b      	cmp	r3, r1
 800b45e:	bf01      	itttt	eq
 800b460:	6819      	ldreq	r1, [r3, #0]
 800b462:	685b      	ldreq	r3, [r3, #4]
 800b464:	1949      	addeq	r1, r1, r5
 800b466:	6021      	streq	r1, [r4, #0]
 800b468:	e7ed      	b.n	800b446 <_free_r+0x22>
 800b46a:	461a      	mov	r2, r3
 800b46c:	685b      	ldr	r3, [r3, #4]
 800b46e:	b10b      	cbz	r3, 800b474 <_free_r+0x50>
 800b470:	42a3      	cmp	r3, r4
 800b472:	d9fa      	bls.n	800b46a <_free_r+0x46>
 800b474:	6811      	ldr	r1, [r2, #0]
 800b476:	1855      	adds	r5, r2, r1
 800b478:	42a5      	cmp	r5, r4
 800b47a:	d10b      	bne.n	800b494 <_free_r+0x70>
 800b47c:	6824      	ldr	r4, [r4, #0]
 800b47e:	4421      	add	r1, r4
 800b480:	1854      	adds	r4, r2, r1
 800b482:	42a3      	cmp	r3, r4
 800b484:	6011      	str	r1, [r2, #0]
 800b486:	d1e0      	bne.n	800b44a <_free_r+0x26>
 800b488:	681c      	ldr	r4, [r3, #0]
 800b48a:	685b      	ldr	r3, [r3, #4]
 800b48c:	6053      	str	r3, [r2, #4]
 800b48e:	440c      	add	r4, r1
 800b490:	6014      	str	r4, [r2, #0]
 800b492:	e7da      	b.n	800b44a <_free_r+0x26>
 800b494:	d902      	bls.n	800b49c <_free_r+0x78>
 800b496:	230c      	movs	r3, #12
 800b498:	6003      	str	r3, [r0, #0]
 800b49a:	e7d6      	b.n	800b44a <_free_r+0x26>
 800b49c:	6825      	ldr	r5, [r4, #0]
 800b49e:	1961      	adds	r1, r4, r5
 800b4a0:	428b      	cmp	r3, r1
 800b4a2:	bf04      	itt	eq
 800b4a4:	6819      	ldreq	r1, [r3, #0]
 800b4a6:	685b      	ldreq	r3, [r3, #4]
 800b4a8:	6063      	str	r3, [r4, #4]
 800b4aa:	bf04      	itt	eq
 800b4ac:	1949      	addeq	r1, r1, r5
 800b4ae:	6021      	streq	r1, [r4, #0]
 800b4b0:	6054      	str	r4, [r2, #4]
 800b4b2:	e7ca      	b.n	800b44a <_free_r+0x26>
 800b4b4:	b003      	add	sp, #12
 800b4b6:	bd30      	pop	{r4, r5, pc}
 800b4b8:	20002764 	.word	0x20002764

0800b4bc <__sfputc_r>:
 800b4bc:	6893      	ldr	r3, [r2, #8]
 800b4be:	3b01      	subs	r3, #1
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	b410      	push	{r4}
 800b4c4:	6093      	str	r3, [r2, #8]
 800b4c6:	da08      	bge.n	800b4da <__sfputc_r+0x1e>
 800b4c8:	6994      	ldr	r4, [r2, #24]
 800b4ca:	42a3      	cmp	r3, r4
 800b4cc:	db01      	blt.n	800b4d2 <__sfputc_r+0x16>
 800b4ce:	290a      	cmp	r1, #10
 800b4d0:	d103      	bne.n	800b4da <__sfputc_r+0x1e>
 800b4d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b4d6:	f000 be56 	b.w	800c186 <__swbuf_r>
 800b4da:	6813      	ldr	r3, [r2, #0]
 800b4dc:	1c58      	adds	r0, r3, #1
 800b4de:	6010      	str	r0, [r2, #0]
 800b4e0:	7019      	strb	r1, [r3, #0]
 800b4e2:	4608      	mov	r0, r1
 800b4e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b4e8:	4770      	bx	lr

0800b4ea <__sfputs_r>:
 800b4ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4ec:	4606      	mov	r6, r0
 800b4ee:	460f      	mov	r7, r1
 800b4f0:	4614      	mov	r4, r2
 800b4f2:	18d5      	adds	r5, r2, r3
 800b4f4:	42ac      	cmp	r4, r5
 800b4f6:	d101      	bne.n	800b4fc <__sfputs_r+0x12>
 800b4f8:	2000      	movs	r0, #0
 800b4fa:	e007      	b.n	800b50c <__sfputs_r+0x22>
 800b4fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b500:	463a      	mov	r2, r7
 800b502:	4630      	mov	r0, r6
 800b504:	f7ff ffda 	bl	800b4bc <__sfputc_r>
 800b508:	1c43      	adds	r3, r0, #1
 800b50a:	d1f3      	bne.n	800b4f4 <__sfputs_r+0xa>
 800b50c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b510 <_vfiprintf_r>:
 800b510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b514:	460d      	mov	r5, r1
 800b516:	b09d      	sub	sp, #116	; 0x74
 800b518:	4614      	mov	r4, r2
 800b51a:	4698      	mov	r8, r3
 800b51c:	4606      	mov	r6, r0
 800b51e:	b118      	cbz	r0, 800b528 <_vfiprintf_r+0x18>
 800b520:	6a03      	ldr	r3, [r0, #32]
 800b522:	b90b      	cbnz	r3, 800b528 <_vfiprintf_r+0x18>
 800b524:	f7fe ffd4 	bl	800a4d0 <__sinit>
 800b528:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b52a:	07d9      	lsls	r1, r3, #31
 800b52c:	d405      	bmi.n	800b53a <_vfiprintf_r+0x2a>
 800b52e:	89ab      	ldrh	r3, [r5, #12]
 800b530:	059a      	lsls	r2, r3, #22
 800b532:	d402      	bmi.n	800b53a <_vfiprintf_r+0x2a>
 800b534:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b536:	f7ff f8ea 	bl	800a70e <__retarget_lock_acquire_recursive>
 800b53a:	89ab      	ldrh	r3, [r5, #12]
 800b53c:	071b      	lsls	r3, r3, #28
 800b53e:	d501      	bpl.n	800b544 <_vfiprintf_r+0x34>
 800b540:	692b      	ldr	r3, [r5, #16]
 800b542:	b99b      	cbnz	r3, 800b56c <_vfiprintf_r+0x5c>
 800b544:	4629      	mov	r1, r5
 800b546:	4630      	mov	r0, r6
 800b548:	f000 fe5a 	bl	800c200 <__swsetup_r>
 800b54c:	b170      	cbz	r0, 800b56c <_vfiprintf_r+0x5c>
 800b54e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b550:	07dc      	lsls	r4, r3, #31
 800b552:	d504      	bpl.n	800b55e <_vfiprintf_r+0x4e>
 800b554:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b558:	b01d      	add	sp, #116	; 0x74
 800b55a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b55e:	89ab      	ldrh	r3, [r5, #12]
 800b560:	0598      	lsls	r0, r3, #22
 800b562:	d4f7      	bmi.n	800b554 <_vfiprintf_r+0x44>
 800b564:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b566:	f7ff f8d3 	bl	800a710 <__retarget_lock_release_recursive>
 800b56a:	e7f3      	b.n	800b554 <_vfiprintf_r+0x44>
 800b56c:	2300      	movs	r3, #0
 800b56e:	9309      	str	r3, [sp, #36]	; 0x24
 800b570:	2320      	movs	r3, #32
 800b572:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b576:	f8cd 800c 	str.w	r8, [sp, #12]
 800b57a:	2330      	movs	r3, #48	; 0x30
 800b57c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b730 <_vfiprintf_r+0x220>
 800b580:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b584:	f04f 0901 	mov.w	r9, #1
 800b588:	4623      	mov	r3, r4
 800b58a:	469a      	mov	sl, r3
 800b58c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b590:	b10a      	cbz	r2, 800b596 <_vfiprintf_r+0x86>
 800b592:	2a25      	cmp	r2, #37	; 0x25
 800b594:	d1f9      	bne.n	800b58a <_vfiprintf_r+0x7a>
 800b596:	ebba 0b04 	subs.w	fp, sl, r4
 800b59a:	d00b      	beq.n	800b5b4 <_vfiprintf_r+0xa4>
 800b59c:	465b      	mov	r3, fp
 800b59e:	4622      	mov	r2, r4
 800b5a0:	4629      	mov	r1, r5
 800b5a2:	4630      	mov	r0, r6
 800b5a4:	f7ff ffa1 	bl	800b4ea <__sfputs_r>
 800b5a8:	3001      	adds	r0, #1
 800b5aa:	f000 80a9 	beq.w	800b700 <_vfiprintf_r+0x1f0>
 800b5ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b5b0:	445a      	add	r2, fp
 800b5b2:	9209      	str	r2, [sp, #36]	; 0x24
 800b5b4:	f89a 3000 	ldrb.w	r3, [sl]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	f000 80a1 	beq.w	800b700 <_vfiprintf_r+0x1f0>
 800b5be:	2300      	movs	r3, #0
 800b5c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b5c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b5c8:	f10a 0a01 	add.w	sl, sl, #1
 800b5cc:	9304      	str	r3, [sp, #16]
 800b5ce:	9307      	str	r3, [sp, #28]
 800b5d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b5d4:	931a      	str	r3, [sp, #104]	; 0x68
 800b5d6:	4654      	mov	r4, sl
 800b5d8:	2205      	movs	r2, #5
 800b5da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5de:	4854      	ldr	r0, [pc, #336]	; (800b730 <_vfiprintf_r+0x220>)
 800b5e0:	f7f4 fdf6 	bl	80001d0 <memchr>
 800b5e4:	9a04      	ldr	r2, [sp, #16]
 800b5e6:	b9d8      	cbnz	r0, 800b620 <_vfiprintf_r+0x110>
 800b5e8:	06d1      	lsls	r1, r2, #27
 800b5ea:	bf44      	itt	mi
 800b5ec:	2320      	movmi	r3, #32
 800b5ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b5f2:	0713      	lsls	r3, r2, #28
 800b5f4:	bf44      	itt	mi
 800b5f6:	232b      	movmi	r3, #43	; 0x2b
 800b5f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b5fc:	f89a 3000 	ldrb.w	r3, [sl]
 800b600:	2b2a      	cmp	r3, #42	; 0x2a
 800b602:	d015      	beq.n	800b630 <_vfiprintf_r+0x120>
 800b604:	9a07      	ldr	r2, [sp, #28]
 800b606:	4654      	mov	r4, sl
 800b608:	2000      	movs	r0, #0
 800b60a:	f04f 0c0a 	mov.w	ip, #10
 800b60e:	4621      	mov	r1, r4
 800b610:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b614:	3b30      	subs	r3, #48	; 0x30
 800b616:	2b09      	cmp	r3, #9
 800b618:	d94d      	bls.n	800b6b6 <_vfiprintf_r+0x1a6>
 800b61a:	b1b0      	cbz	r0, 800b64a <_vfiprintf_r+0x13a>
 800b61c:	9207      	str	r2, [sp, #28]
 800b61e:	e014      	b.n	800b64a <_vfiprintf_r+0x13a>
 800b620:	eba0 0308 	sub.w	r3, r0, r8
 800b624:	fa09 f303 	lsl.w	r3, r9, r3
 800b628:	4313      	orrs	r3, r2
 800b62a:	9304      	str	r3, [sp, #16]
 800b62c:	46a2      	mov	sl, r4
 800b62e:	e7d2      	b.n	800b5d6 <_vfiprintf_r+0xc6>
 800b630:	9b03      	ldr	r3, [sp, #12]
 800b632:	1d19      	adds	r1, r3, #4
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	9103      	str	r1, [sp, #12]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	bfbb      	ittet	lt
 800b63c:	425b      	neglt	r3, r3
 800b63e:	f042 0202 	orrlt.w	r2, r2, #2
 800b642:	9307      	strge	r3, [sp, #28]
 800b644:	9307      	strlt	r3, [sp, #28]
 800b646:	bfb8      	it	lt
 800b648:	9204      	strlt	r2, [sp, #16]
 800b64a:	7823      	ldrb	r3, [r4, #0]
 800b64c:	2b2e      	cmp	r3, #46	; 0x2e
 800b64e:	d10c      	bne.n	800b66a <_vfiprintf_r+0x15a>
 800b650:	7863      	ldrb	r3, [r4, #1]
 800b652:	2b2a      	cmp	r3, #42	; 0x2a
 800b654:	d134      	bne.n	800b6c0 <_vfiprintf_r+0x1b0>
 800b656:	9b03      	ldr	r3, [sp, #12]
 800b658:	1d1a      	adds	r2, r3, #4
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	9203      	str	r2, [sp, #12]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	bfb8      	it	lt
 800b662:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b666:	3402      	adds	r4, #2
 800b668:	9305      	str	r3, [sp, #20]
 800b66a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b740 <_vfiprintf_r+0x230>
 800b66e:	7821      	ldrb	r1, [r4, #0]
 800b670:	2203      	movs	r2, #3
 800b672:	4650      	mov	r0, sl
 800b674:	f7f4 fdac 	bl	80001d0 <memchr>
 800b678:	b138      	cbz	r0, 800b68a <_vfiprintf_r+0x17a>
 800b67a:	9b04      	ldr	r3, [sp, #16]
 800b67c:	eba0 000a 	sub.w	r0, r0, sl
 800b680:	2240      	movs	r2, #64	; 0x40
 800b682:	4082      	lsls	r2, r0
 800b684:	4313      	orrs	r3, r2
 800b686:	3401      	adds	r4, #1
 800b688:	9304      	str	r3, [sp, #16]
 800b68a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b68e:	4829      	ldr	r0, [pc, #164]	; (800b734 <_vfiprintf_r+0x224>)
 800b690:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b694:	2206      	movs	r2, #6
 800b696:	f7f4 fd9b 	bl	80001d0 <memchr>
 800b69a:	2800      	cmp	r0, #0
 800b69c:	d03f      	beq.n	800b71e <_vfiprintf_r+0x20e>
 800b69e:	4b26      	ldr	r3, [pc, #152]	; (800b738 <_vfiprintf_r+0x228>)
 800b6a0:	bb1b      	cbnz	r3, 800b6ea <_vfiprintf_r+0x1da>
 800b6a2:	9b03      	ldr	r3, [sp, #12]
 800b6a4:	3307      	adds	r3, #7
 800b6a6:	f023 0307 	bic.w	r3, r3, #7
 800b6aa:	3308      	adds	r3, #8
 800b6ac:	9303      	str	r3, [sp, #12]
 800b6ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6b0:	443b      	add	r3, r7
 800b6b2:	9309      	str	r3, [sp, #36]	; 0x24
 800b6b4:	e768      	b.n	800b588 <_vfiprintf_r+0x78>
 800b6b6:	fb0c 3202 	mla	r2, ip, r2, r3
 800b6ba:	460c      	mov	r4, r1
 800b6bc:	2001      	movs	r0, #1
 800b6be:	e7a6      	b.n	800b60e <_vfiprintf_r+0xfe>
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	3401      	adds	r4, #1
 800b6c4:	9305      	str	r3, [sp, #20]
 800b6c6:	4619      	mov	r1, r3
 800b6c8:	f04f 0c0a 	mov.w	ip, #10
 800b6cc:	4620      	mov	r0, r4
 800b6ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b6d2:	3a30      	subs	r2, #48	; 0x30
 800b6d4:	2a09      	cmp	r2, #9
 800b6d6:	d903      	bls.n	800b6e0 <_vfiprintf_r+0x1d0>
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d0c6      	beq.n	800b66a <_vfiprintf_r+0x15a>
 800b6dc:	9105      	str	r1, [sp, #20]
 800b6de:	e7c4      	b.n	800b66a <_vfiprintf_r+0x15a>
 800b6e0:	fb0c 2101 	mla	r1, ip, r1, r2
 800b6e4:	4604      	mov	r4, r0
 800b6e6:	2301      	movs	r3, #1
 800b6e8:	e7f0      	b.n	800b6cc <_vfiprintf_r+0x1bc>
 800b6ea:	ab03      	add	r3, sp, #12
 800b6ec:	9300      	str	r3, [sp, #0]
 800b6ee:	462a      	mov	r2, r5
 800b6f0:	4b12      	ldr	r3, [pc, #72]	; (800b73c <_vfiprintf_r+0x22c>)
 800b6f2:	a904      	add	r1, sp, #16
 800b6f4:	4630      	mov	r0, r6
 800b6f6:	f7fe fa99 	bl	8009c2c <_printf_float>
 800b6fa:	4607      	mov	r7, r0
 800b6fc:	1c78      	adds	r0, r7, #1
 800b6fe:	d1d6      	bne.n	800b6ae <_vfiprintf_r+0x19e>
 800b700:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b702:	07d9      	lsls	r1, r3, #31
 800b704:	d405      	bmi.n	800b712 <_vfiprintf_r+0x202>
 800b706:	89ab      	ldrh	r3, [r5, #12]
 800b708:	059a      	lsls	r2, r3, #22
 800b70a:	d402      	bmi.n	800b712 <_vfiprintf_r+0x202>
 800b70c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b70e:	f7fe ffff 	bl	800a710 <__retarget_lock_release_recursive>
 800b712:	89ab      	ldrh	r3, [r5, #12]
 800b714:	065b      	lsls	r3, r3, #25
 800b716:	f53f af1d 	bmi.w	800b554 <_vfiprintf_r+0x44>
 800b71a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b71c:	e71c      	b.n	800b558 <_vfiprintf_r+0x48>
 800b71e:	ab03      	add	r3, sp, #12
 800b720:	9300      	str	r3, [sp, #0]
 800b722:	462a      	mov	r2, r5
 800b724:	4b05      	ldr	r3, [pc, #20]	; (800b73c <_vfiprintf_r+0x22c>)
 800b726:	a904      	add	r1, sp, #16
 800b728:	4630      	mov	r0, r6
 800b72a:	f7fe fd23 	bl	800a174 <_printf_i>
 800b72e:	e7e4      	b.n	800b6fa <_vfiprintf_r+0x1ea>
 800b730:	0800d261 	.word	0x0800d261
 800b734:	0800d26b 	.word	0x0800d26b
 800b738:	08009c2d 	.word	0x08009c2d
 800b73c:	0800b4eb 	.word	0x0800b4eb
 800b740:	0800d267 	.word	0x0800d267

0800b744 <malloc>:
 800b744:	4b02      	ldr	r3, [pc, #8]	; (800b750 <malloc+0xc>)
 800b746:	4601      	mov	r1, r0
 800b748:	6818      	ldr	r0, [r3, #0]
 800b74a:	f000 b823 	b.w	800b794 <_malloc_r>
 800b74e:	bf00      	nop
 800b750:	20000068 	.word	0x20000068

0800b754 <sbrk_aligned>:
 800b754:	b570      	push	{r4, r5, r6, lr}
 800b756:	4e0e      	ldr	r6, [pc, #56]	; (800b790 <sbrk_aligned+0x3c>)
 800b758:	460c      	mov	r4, r1
 800b75a:	6831      	ldr	r1, [r6, #0]
 800b75c:	4605      	mov	r5, r0
 800b75e:	b911      	cbnz	r1, 800b766 <sbrk_aligned+0x12>
 800b760:	f000 fe5e 	bl	800c420 <_sbrk_r>
 800b764:	6030      	str	r0, [r6, #0]
 800b766:	4621      	mov	r1, r4
 800b768:	4628      	mov	r0, r5
 800b76a:	f000 fe59 	bl	800c420 <_sbrk_r>
 800b76e:	1c43      	adds	r3, r0, #1
 800b770:	d00a      	beq.n	800b788 <sbrk_aligned+0x34>
 800b772:	1cc4      	adds	r4, r0, #3
 800b774:	f024 0403 	bic.w	r4, r4, #3
 800b778:	42a0      	cmp	r0, r4
 800b77a:	d007      	beq.n	800b78c <sbrk_aligned+0x38>
 800b77c:	1a21      	subs	r1, r4, r0
 800b77e:	4628      	mov	r0, r5
 800b780:	f000 fe4e 	bl	800c420 <_sbrk_r>
 800b784:	3001      	adds	r0, #1
 800b786:	d101      	bne.n	800b78c <sbrk_aligned+0x38>
 800b788:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b78c:	4620      	mov	r0, r4
 800b78e:	bd70      	pop	{r4, r5, r6, pc}
 800b790:	20002768 	.word	0x20002768

0800b794 <_malloc_r>:
 800b794:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b798:	1ccd      	adds	r5, r1, #3
 800b79a:	f025 0503 	bic.w	r5, r5, #3
 800b79e:	3508      	adds	r5, #8
 800b7a0:	2d0c      	cmp	r5, #12
 800b7a2:	bf38      	it	cc
 800b7a4:	250c      	movcc	r5, #12
 800b7a6:	2d00      	cmp	r5, #0
 800b7a8:	4607      	mov	r7, r0
 800b7aa:	db01      	blt.n	800b7b0 <_malloc_r+0x1c>
 800b7ac:	42a9      	cmp	r1, r5
 800b7ae:	d905      	bls.n	800b7bc <_malloc_r+0x28>
 800b7b0:	230c      	movs	r3, #12
 800b7b2:	603b      	str	r3, [r7, #0]
 800b7b4:	2600      	movs	r6, #0
 800b7b6:	4630      	mov	r0, r6
 800b7b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7bc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b890 <_malloc_r+0xfc>
 800b7c0:	f000 f916 	bl	800b9f0 <__malloc_lock>
 800b7c4:	f8d8 3000 	ldr.w	r3, [r8]
 800b7c8:	461c      	mov	r4, r3
 800b7ca:	bb5c      	cbnz	r4, 800b824 <_malloc_r+0x90>
 800b7cc:	4629      	mov	r1, r5
 800b7ce:	4638      	mov	r0, r7
 800b7d0:	f7ff ffc0 	bl	800b754 <sbrk_aligned>
 800b7d4:	1c43      	adds	r3, r0, #1
 800b7d6:	4604      	mov	r4, r0
 800b7d8:	d155      	bne.n	800b886 <_malloc_r+0xf2>
 800b7da:	f8d8 4000 	ldr.w	r4, [r8]
 800b7de:	4626      	mov	r6, r4
 800b7e0:	2e00      	cmp	r6, #0
 800b7e2:	d145      	bne.n	800b870 <_malloc_r+0xdc>
 800b7e4:	2c00      	cmp	r4, #0
 800b7e6:	d048      	beq.n	800b87a <_malloc_r+0xe6>
 800b7e8:	6823      	ldr	r3, [r4, #0]
 800b7ea:	4631      	mov	r1, r6
 800b7ec:	4638      	mov	r0, r7
 800b7ee:	eb04 0903 	add.w	r9, r4, r3
 800b7f2:	f000 fe15 	bl	800c420 <_sbrk_r>
 800b7f6:	4581      	cmp	r9, r0
 800b7f8:	d13f      	bne.n	800b87a <_malloc_r+0xe6>
 800b7fa:	6821      	ldr	r1, [r4, #0]
 800b7fc:	1a6d      	subs	r5, r5, r1
 800b7fe:	4629      	mov	r1, r5
 800b800:	4638      	mov	r0, r7
 800b802:	f7ff ffa7 	bl	800b754 <sbrk_aligned>
 800b806:	3001      	adds	r0, #1
 800b808:	d037      	beq.n	800b87a <_malloc_r+0xe6>
 800b80a:	6823      	ldr	r3, [r4, #0]
 800b80c:	442b      	add	r3, r5
 800b80e:	6023      	str	r3, [r4, #0]
 800b810:	f8d8 3000 	ldr.w	r3, [r8]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d038      	beq.n	800b88a <_malloc_r+0xf6>
 800b818:	685a      	ldr	r2, [r3, #4]
 800b81a:	42a2      	cmp	r2, r4
 800b81c:	d12b      	bne.n	800b876 <_malloc_r+0xe2>
 800b81e:	2200      	movs	r2, #0
 800b820:	605a      	str	r2, [r3, #4]
 800b822:	e00f      	b.n	800b844 <_malloc_r+0xb0>
 800b824:	6822      	ldr	r2, [r4, #0]
 800b826:	1b52      	subs	r2, r2, r5
 800b828:	d41f      	bmi.n	800b86a <_malloc_r+0xd6>
 800b82a:	2a0b      	cmp	r2, #11
 800b82c:	d917      	bls.n	800b85e <_malloc_r+0xca>
 800b82e:	1961      	adds	r1, r4, r5
 800b830:	42a3      	cmp	r3, r4
 800b832:	6025      	str	r5, [r4, #0]
 800b834:	bf18      	it	ne
 800b836:	6059      	strne	r1, [r3, #4]
 800b838:	6863      	ldr	r3, [r4, #4]
 800b83a:	bf08      	it	eq
 800b83c:	f8c8 1000 	streq.w	r1, [r8]
 800b840:	5162      	str	r2, [r4, r5]
 800b842:	604b      	str	r3, [r1, #4]
 800b844:	4638      	mov	r0, r7
 800b846:	f104 060b 	add.w	r6, r4, #11
 800b84a:	f000 f8d7 	bl	800b9fc <__malloc_unlock>
 800b84e:	f026 0607 	bic.w	r6, r6, #7
 800b852:	1d23      	adds	r3, r4, #4
 800b854:	1af2      	subs	r2, r6, r3
 800b856:	d0ae      	beq.n	800b7b6 <_malloc_r+0x22>
 800b858:	1b9b      	subs	r3, r3, r6
 800b85a:	50a3      	str	r3, [r4, r2]
 800b85c:	e7ab      	b.n	800b7b6 <_malloc_r+0x22>
 800b85e:	42a3      	cmp	r3, r4
 800b860:	6862      	ldr	r2, [r4, #4]
 800b862:	d1dd      	bne.n	800b820 <_malloc_r+0x8c>
 800b864:	f8c8 2000 	str.w	r2, [r8]
 800b868:	e7ec      	b.n	800b844 <_malloc_r+0xb0>
 800b86a:	4623      	mov	r3, r4
 800b86c:	6864      	ldr	r4, [r4, #4]
 800b86e:	e7ac      	b.n	800b7ca <_malloc_r+0x36>
 800b870:	4634      	mov	r4, r6
 800b872:	6876      	ldr	r6, [r6, #4]
 800b874:	e7b4      	b.n	800b7e0 <_malloc_r+0x4c>
 800b876:	4613      	mov	r3, r2
 800b878:	e7cc      	b.n	800b814 <_malloc_r+0x80>
 800b87a:	230c      	movs	r3, #12
 800b87c:	603b      	str	r3, [r7, #0]
 800b87e:	4638      	mov	r0, r7
 800b880:	f000 f8bc 	bl	800b9fc <__malloc_unlock>
 800b884:	e797      	b.n	800b7b6 <_malloc_r+0x22>
 800b886:	6025      	str	r5, [r4, #0]
 800b888:	e7dc      	b.n	800b844 <_malloc_r+0xb0>
 800b88a:	605b      	str	r3, [r3, #4]
 800b88c:	deff      	udf	#255	; 0xff
 800b88e:	bf00      	nop
 800b890:	20002764 	.word	0x20002764

0800b894 <__sflush_r>:
 800b894:	898a      	ldrh	r2, [r1, #12]
 800b896:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b89a:	4605      	mov	r5, r0
 800b89c:	0710      	lsls	r0, r2, #28
 800b89e:	460c      	mov	r4, r1
 800b8a0:	d458      	bmi.n	800b954 <__sflush_r+0xc0>
 800b8a2:	684b      	ldr	r3, [r1, #4]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	dc05      	bgt.n	800b8b4 <__sflush_r+0x20>
 800b8a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	dc02      	bgt.n	800b8b4 <__sflush_r+0x20>
 800b8ae:	2000      	movs	r0, #0
 800b8b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b8b6:	2e00      	cmp	r6, #0
 800b8b8:	d0f9      	beq.n	800b8ae <__sflush_r+0x1a>
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b8c0:	682f      	ldr	r7, [r5, #0]
 800b8c2:	6a21      	ldr	r1, [r4, #32]
 800b8c4:	602b      	str	r3, [r5, #0]
 800b8c6:	d032      	beq.n	800b92e <__sflush_r+0x9a>
 800b8c8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b8ca:	89a3      	ldrh	r3, [r4, #12]
 800b8cc:	075a      	lsls	r2, r3, #29
 800b8ce:	d505      	bpl.n	800b8dc <__sflush_r+0x48>
 800b8d0:	6863      	ldr	r3, [r4, #4]
 800b8d2:	1ac0      	subs	r0, r0, r3
 800b8d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b8d6:	b10b      	cbz	r3, 800b8dc <__sflush_r+0x48>
 800b8d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b8da:	1ac0      	subs	r0, r0, r3
 800b8dc:	2300      	movs	r3, #0
 800b8de:	4602      	mov	r2, r0
 800b8e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b8e2:	6a21      	ldr	r1, [r4, #32]
 800b8e4:	4628      	mov	r0, r5
 800b8e6:	47b0      	blx	r6
 800b8e8:	1c43      	adds	r3, r0, #1
 800b8ea:	89a3      	ldrh	r3, [r4, #12]
 800b8ec:	d106      	bne.n	800b8fc <__sflush_r+0x68>
 800b8ee:	6829      	ldr	r1, [r5, #0]
 800b8f0:	291d      	cmp	r1, #29
 800b8f2:	d82b      	bhi.n	800b94c <__sflush_r+0xb8>
 800b8f4:	4a29      	ldr	r2, [pc, #164]	; (800b99c <__sflush_r+0x108>)
 800b8f6:	410a      	asrs	r2, r1
 800b8f8:	07d6      	lsls	r6, r2, #31
 800b8fa:	d427      	bmi.n	800b94c <__sflush_r+0xb8>
 800b8fc:	2200      	movs	r2, #0
 800b8fe:	6062      	str	r2, [r4, #4]
 800b900:	04d9      	lsls	r1, r3, #19
 800b902:	6922      	ldr	r2, [r4, #16]
 800b904:	6022      	str	r2, [r4, #0]
 800b906:	d504      	bpl.n	800b912 <__sflush_r+0x7e>
 800b908:	1c42      	adds	r2, r0, #1
 800b90a:	d101      	bne.n	800b910 <__sflush_r+0x7c>
 800b90c:	682b      	ldr	r3, [r5, #0]
 800b90e:	b903      	cbnz	r3, 800b912 <__sflush_r+0x7e>
 800b910:	6560      	str	r0, [r4, #84]	; 0x54
 800b912:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b914:	602f      	str	r7, [r5, #0]
 800b916:	2900      	cmp	r1, #0
 800b918:	d0c9      	beq.n	800b8ae <__sflush_r+0x1a>
 800b91a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b91e:	4299      	cmp	r1, r3
 800b920:	d002      	beq.n	800b928 <__sflush_r+0x94>
 800b922:	4628      	mov	r0, r5
 800b924:	f7ff fd7e 	bl	800b424 <_free_r>
 800b928:	2000      	movs	r0, #0
 800b92a:	6360      	str	r0, [r4, #52]	; 0x34
 800b92c:	e7c0      	b.n	800b8b0 <__sflush_r+0x1c>
 800b92e:	2301      	movs	r3, #1
 800b930:	4628      	mov	r0, r5
 800b932:	47b0      	blx	r6
 800b934:	1c41      	adds	r1, r0, #1
 800b936:	d1c8      	bne.n	800b8ca <__sflush_r+0x36>
 800b938:	682b      	ldr	r3, [r5, #0]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d0c5      	beq.n	800b8ca <__sflush_r+0x36>
 800b93e:	2b1d      	cmp	r3, #29
 800b940:	d001      	beq.n	800b946 <__sflush_r+0xb2>
 800b942:	2b16      	cmp	r3, #22
 800b944:	d101      	bne.n	800b94a <__sflush_r+0xb6>
 800b946:	602f      	str	r7, [r5, #0]
 800b948:	e7b1      	b.n	800b8ae <__sflush_r+0x1a>
 800b94a:	89a3      	ldrh	r3, [r4, #12]
 800b94c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b950:	81a3      	strh	r3, [r4, #12]
 800b952:	e7ad      	b.n	800b8b0 <__sflush_r+0x1c>
 800b954:	690f      	ldr	r7, [r1, #16]
 800b956:	2f00      	cmp	r7, #0
 800b958:	d0a9      	beq.n	800b8ae <__sflush_r+0x1a>
 800b95a:	0793      	lsls	r3, r2, #30
 800b95c:	680e      	ldr	r6, [r1, #0]
 800b95e:	bf08      	it	eq
 800b960:	694b      	ldreq	r3, [r1, #20]
 800b962:	600f      	str	r7, [r1, #0]
 800b964:	bf18      	it	ne
 800b966:	2300      	movne	r3, #0
 800b968:	eba6 0807 	sub.w	r8, r6, r7
 800b96c:	608b      	str	r3, [r1, #8]
 800b96e:	f1b8 0f00 	cmp.w	r8, #0
 800b972:	dd9c      	ble.n	800b8ae <__sflush_r+0x1a>
 800b974:	6a21      	ldr	r1, [r4, #32]
 800b976:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b978:	4643      	mov	r3, r8
 800b97a:	463a      	mov	r2, r7
 800b97c:	4628      	mov	r0, r5
 800b97e:	47b0      	blx	r6
 800b980:	2800      	cmp	r0, #0
 800b982:	dc06      	bgt.n	800b992 <__sflush_r+0xfe>
 800b984:	89a3      	ldrh	r3, [r4, #12]
 800b986:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b98a:	81a3      	strh	r3, [r4, #12]
 800b98c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b990:	e78e      	b.n	800b8b0 <__sflush_r+0x1c>
 800b992:	4407      	add	r7, r0
 800b994:	eba8 0800 	sub.w	r8, r8, r0
 800b998:	e7e9      	b.n	800b96e <__sflush_r+0xda>
 800b99a:	bf00      	nop
 800b99c:	dfbffffe 	.word	0xdfbffffe

0800b9a0 <_fflush_r>:
 800b9a0:	b538      	push	{r3, r4, r5, lr}
 800b9a2:	690b      	ldr	r3, [r1, #16]
 800b9a4:	4605      	mov	r5, r0
 800b9a6:	460c      	mov	r4, r1
 800b9a8:	b913      	cbnz	r3, 800b9b0 <_fflush_r+0x10>
 800b9aa:	2500      	movs	r5, #0
 800b9ac:	4628      	mov	r0, r5
 800b9ae:	bd38      	pop	{r3, r4, r5, pc}
 800b9b0:	b118      	cbz	r0, 800b9ba <_fflush_r+0x1a>
 800b9b2:	6a03      	ldr	r3, [r0, #32]
 800b9b4:	b90b      	cbnz	r3, 800b9ba <_fflush_r+0x1a>
 800b9b6:	f7fe fd8b 	bl	800a4d0 <__sinit>
 800b9ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d0f3      	beq.n	800b9aa <_fflush_r+0xa>
 800b9c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b9c4:	07d0      	lsls	r0, r2, #31
 800b9c6:	d404      	bmi.n	800b9d2 <_fflush_r+0x32>
 800b9c8:	0599      	lsls	r1, r3, #22
 800b9ca:	d402      	bmi.n	800b9d2 <_fflush_r+0x32>
 800b9cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b9ce:	f7fe fe9e 	bl	800a70e <__retarget_lock_acquire_recursive>
 800b9d2:	4628      	mov	r0, r5
 800b9d4:	4621      	mov	r1, r4
 800b9d6:	f7ff ff5d 	bl	800b894 <__sflush_r>
 800b9da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b9dc:	07da      	lsls	r2, r3, #31
 800b9de:	4605      	mov	r5, r0
 800b9e0:	d4e4      	bmi.n	800b9ac <_fflush_r+0xc>
 800b9e2:	89a3      	ldrh	r3, [r4, #12]
 800b9e4:	059b      	lsls	r3, r3, #22
 800b9e6:	d4e1      	bmi.n	800b9ac <_fflush_r+0xc>
 800b9e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b9ea:	f7fe fe91 	bl	800a710 <__retarget_lock_release_recursive>
 800b9ee:	e7dd      	b.n	800b9ac <_fflush_r+0xc>

0800b9f0 <__malloc_lock>:
 800b9f0:	4801      	ldr	r0, [pc, #4]	; (800b9f8 <__malloc_lock+0x8>)
 800b9f2:	f7fe be8c 	b.w	800a70e <__retarget_lock_acquire_recursive>
 800b9f6:	bf00      	nop
 800b9f8:	20002760 	.word	0x20002760

0800b9fc <__malloc_unlock>:
 800b9fc:	4801      	ldr	r0, [pc, #4]	; (800ba04 <__malloc_unlock+0x8>)
 800b9fe:	f7fe be87 	b.w	800a710 <__retarget_lock_release_recursive>
 800ba02:	bf00      	nop
 800ba04:	20002760 	.word	0x20002760

0800ba08 <_Balloc>:
 800ba08:	b570      	push	{r4, r5, r6, lr}
 800ba0a:	69c6      	ldr	r6, [r0, #28]
 800ba0c:	4604      	mov	r4, r0
 800ba0e:	460d      	mov	r5, r1
 800ba10:	b976      	cbnz	r6, 800ba30 <_Balloc+0x28>
 800ba12:	2010      	movs	r0, #16
 800ba14:	f7ff fe96 	bl	800b744 <malloc>
 800ba18:	4602      	mov	r2, r0
 800ba1a:	61e0      	str	r0, [r4, #28]
 800ba1c:	b920      	cbnz	r0, 800ba28 <_Balloc+0x20>
 800ba1e:	4b18      	ldr	r3, [pc, #96]	; (800ba80 <_Balloc+0x78>)
 800ba20:	4818      	ldr	r0, [pc, #96]	; (800ba84 <_Balloc+0x7c>)
 800ba22:	216b      	movs	r1, #107	; 0x6b
 800ba24:	f000 fd1e 	bl	800c464 <__assert_func>
 800ba28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ba2c:	6006      	str	r6, [r0, #0]
 800ba2e:	60c6      	str	r6, [r0, #12]
 800ba30:	69e6      	ldr	r6, [r4, #28]
 800ba32:	68f3      	ldr	r3, [r6, #12]
 800ba34:	b183      	cbz	r3, 800ba58 <_Balloc+0x50>
 800ba36:	69e3      	ldr	r3, [r4, #28]
 800ba38:	68db      	ldr	r3, [r3, #12]
 800ba3a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ba3e:	b9b8      	cbnz	r0, 800ba70 <_Balloc+0x68>
 800ba40:	2101      	movs	r1, #1
 800ba42:	fa01 f605 	lsl.w	r6, r1, r5
 800ba46:	1d72      	adds	r2, r6, #5
 800ba48:	0092      	lsls	r2, r2, #2
 800ba4a:	4620      	mov	r0, r4
 800ba4c:	f000 fd28 	bl	800c4a0 <_calloc_r>
 800ba50:	b160      	cbz	r0, 800ba6c <_Balloc+0x64>
 800ba52:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ba56:	e00e      	b.n	800ba76 <_Balloc+0x6e>
 800ba58:	2221      	movs	r2, #33	; 0x21
 800ba5a:	2104      	movs	r1, #4
 800ba5c:	4620      	mov	r0, r4
 800ba5e:	f000 fd1f 	bl	800c4a0 <_calloc_r>
 800ba62:	69e3      	ldr	r3, [r4, #28]
 800ba64:	60f0      	str	r0, [r6, #12]
 800ba66:	68db      	ldr	r3, [r3, #12]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d1e4      	bne.n	800ba36 <_Balloc+0x2e>
 800ba6c:	2000      	movs	r0, #0
 800ba6e:	bd70      	pop	{r4, r5, r6, pc}
 800ba70:	6802      	ldr	r2, [r0, #0]
 800ba72:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ba76:	2300      	movs	r3, #0
 800ba78:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ba7c:	e7f7      	b.n	800ba6e <_Balloc+0x66>
 800ba7e:	bf00      	nop
 800ba80:	0800d1e1 	.word	0x0800d1e1
 800ba84:	0800d272 	.word	0x0800d272

0800ba88 <_Bfree>:
 800ba88:	b570      	push	{r4, r5, r6, lr}
 800ba8a:	69c6      	ldr	r6, [r0, #28]
 800ba8c:	4605      	mov	r5, r0
 800ba8e:	460c      	mov	r4, r1
 800ba90:	b976      	cbnz	r6, 800bab0 <_Bfree+0x28>
 800ba92:	2010      	movs	r0, #16
 800ba94:	f7ff fe56 	bl	800b744 <malloc>
 800ba98:	4602      	mov	r2, r0
 800ba9a:	61e8      	str	r0, [r5, #28]
 800ba9c:	b920      	cbnz	r0, 800baa8 <_Bfree+0x20>
 800ba9e:	4b09      	ldr	r3, [pc, #36]	; (800bac4 <_Bfree+0x3c>)
 800baa0:	4809      	ldr	r0, [pc, #36]	; (800bac8 <_Bfree+0x40>)
 800baa2:	218f      	movs	r1, #143	; 0x8f
 800baa4:	f000 fcde 	bl	800c464 <__assert_func>
 800baa8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800baac:	6006      	str	r6, [r0, #0]
 800baae:	60c6      	str	r6, [r0, #12]
 800bab0:	b13c      	cbz	r4, 800bac2 <_Bfree+0x3a>
 800bab2:	69eb      	ldr	r3, [r5, #28]
 800bab4:	6862      	ldr	r2, [r4, #4]
 800bab6:	68db      	ldr	r3, [r3, #12]
 800bab8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800babc:	6021      	str	r1, [r4, #0]
 800babe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bac2:	bd70      	pop	{r4, r5, r6, pc}
 800bac4:	0800d1e1 	.word	0x0800d1e1
 800bac8:	0800d272 	.word	0x0800d272

0800bacc <__multadd>:
 800bacc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bad0:	690d      	ldr	r5, [r1, #16]
 800bad2:	4607      	mov	r7, r0
 800bad4:	460c      	mov	r4, r1
 800bad6:	461e      	mov	r6, r3
 800bad8:	f101 0c14 	add.w	ip, r1, #20
 800badc:	2000      	movs	r0, #0
 800bade:	f8dc 3000 	ldr.w	r3, [ip]
 800bae2:	b299      	uxth	r1, r3
 800bae4:	fb02 6101 	mla	r1, r2, r1, r6
 800bae8:	0c1e      	lsrs	r6, r3, #16
 800baea:	0c0b      	lsrs	r3, r1, #16
 800baec:	fb02 3306 	mla	r3, r2, r6, r3
 800baf0:	b289      	uxth	r1, r1
 800baf2:	3001      	adds	r0, #1
 800baf4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800baf8:	4285      	cmp	r5, r0
 800bafa:	f84c 1b04 	str.w	r1, [ip], #4
 800bafe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bb02:	dcec      	bgt.n	800bade <__multadd+0x12>
 800bb04:	b30e      	cbz	r6, 800bb4a <__multadd+0x7e>
 800bb06:	68a3      	ldr	r3, [r4, #8]
 800bb08:	42ab      	cmp	r3, r5
 800bb0a:	dc19      	bgt.n	800bb40 <__multadd+0x74>
 800bb0c:	6861      	ldr	r1, [r4, #4]
 800bb0e:	4638      	mov	r0, r7
 800bb10:	3101      	adds	r1, #1
 800bb12:	f7ff ff79 	bl	800ba08 <_Balloc>
 800bb16:	4680      	mov	r8, r0
 800bb18:	b928      	cbnz	r0, 800bb26 <__multadd+0x5a>
 800bb1a:	4602      	mov	r2, r0
 800bb1c:	4b0c      	ldr	r3, [pc, #48]	; (800bb50 <__multadd+0x84>)
 800bb1e:	480d      	ldr	r0, [pc, #52]	; (800bb54 <__multadd+0x88>)
 800bb20:	21ba      	movs	r1, #186	; 0xba
 800bb22:	f000 fc9f 	bl	800c464 <__assert_func>
 800bb26:	6922      	ldr	r2, [r4, #16]
 800bb28:	3202      	adds	r2, #2
 800bb2a:	f104 010c 	add.w	r1, r4, #12
 800bb2e:	0092      	lsls	r2, r2, #2
 800bb30:	300c      	adds	r0, #12
 800bb32:	f7fe fdee 	bl	800a712 <memcpy>
 800bb36:	4621      	mov	r1, r4
 800bb38:	4638      	mov	r0, r7
 800bb3a:	f7ff ffa5 	bl	800ba88 <_Bfree>
 800bb3e:	4644      	mov	r4, r8
 800bb40:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bb44:	3501      	adds	r5, #1
 800bb46:	615e      	str	r6, [r3, #20]
 800bb48:	6125      	str	r5, [r4, #16]
 800bb4a:	4620      	mov	r0, r4
 800bb4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb50:	0800d250 	.word	0x0800d250
 800bb54:	0800d272 	.word	0x0800d272

0800bb58 <__hi0bits>:
 800bb58:	0c03      	lsrs	r3, r0, #16
 800bb5a:	041b      	lsls	r3, r3, #16
 800bb5c:	b9d3      	cbnz	r3, 800bb94 <__hi0bits+0x3c>
 800bb5e:	0400      	lsls	r0, r0, #16
 800bb60:	2310      	movs	r3, #16
 800bb62:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bb66:	bf04      	itt	eq
 800bb68:	0200      	lsleq	r0, r0, #8
 800bb6a:	3308      	addeq	r3, #8
 800bb6c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bb70:	bf04      	itt	eq
 800bb72:	0100      	lsleq	r0, r0, #4
 800bb74:	3304      	addeq	r3, #4
 800bb76:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bb7a:	bf04      	itt	eq
 800bb7c:	0080      	lsleq	r0, r0, #2
 800bb7e:	3302      	addeq	r3, #2
 800bb80:	2800      	cmp	r0, #0
 800bb82:	db05      	blt.n	800bb90 <__hi0bits+0x38>
 800bb84:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bb88:	f103 0301 	add.w	r3, r3, #1
 800bb8c:	bf08      	it	eq
 800bb8e:	2320      	moveq	r3, #32
 800bb90:	4618      	mov	r0, r3
 800bb92:	4770      	bx	lr
 800bb94:	2300      	movs	r3, #0
 800bb96:	e7e4      	b.n	800bb62 <__hi0bits+0xa>

0800bb98 <__lo0bits>:
 800bb98:	6803      	ldr	r3, [r0, #0]
 800bb9a:	f013 0207 	ands.w	r2, r3, #7
 800bb9e:	d00c      	beq.n	800bbba <__lo0bits+0x22>
 800bba0:	07d9      	lsls	r1, r3, #31
 800bba2:	d422      	bmi.n	800bbea <__lo0bits+0x52>
 800bba4:	079a      	lsls	r2, r3, #30
 800bba6:	bf49      	itett	mi
 800bba8:	085b      	lsrmi	r3, r3, #1
 800bbaa:	089b      	lsrpl	r3, r3, #2
 800bbac:	6003      	strmi	r3, [r0, #0]
 800bbae:	2201      	movmi	r2, #1
 800bbb0:	bf5c      	itt	pl
 800bbb2:	6003      	strpl	r3, [r0, #0]
 800bbb4:	2202      	movpl	r2, #2
 800bbb6:	4610      	mov	r0, r2
 800bbb8:	4770      	bx	lr
 800bbba:	b299      	uxth	r1, r3
 800bbbc:	b909      	cbnz	r1, 800bbc2 <__lo0bits+0x2a>
 800bbbe:	0c1b      	lsrs	r3, r3, #16
 800bbc0:	2210      	movs	r2, #16
 800bbc2:	b2d9      	uxtb	r1, r3
 800bbc4:	b909      	cbnz	r1, 800bbca <__lo0bits+0x32>
 800bbc6:	3208      	adds	r2, #8
 800bbc8:	0a1b      	lsrs	r3, r3, #8
 800bbca:	0719      	lsls	r1, r3, #28
 800bbcc:	bf04      	itt	eq
 800bbce:	091b      	lsreq	r3, r3, #4
 800bbd0:	3204      	addeq	r2, #4
 800bbd2:	0799      	lsls	r1, r3, #30
 800bbd4:	bf04      	itt	eq
 800bbd6:	089b      	lsreq	r3, r3, #2
 800bbd8:	3202      	addeq	r2, #2
 800bbda:	07d9      	lsls	r1, r3, #31
 800bbdc:	d403      	bmi.n	800bbe6 <__lo0bits+0x4e>
 800bbde:	085b      	lsrs	r3, r3, #1
 800bbe0:	f102 0201 	add.w	r2, r2, #1
 800bbe4:	d003      	beq.n	800bbee <__lo0bits+0x56>
 800bbe6:	6003      	str	r3, [r0, #0]
 800bbe8:	e7e5      	b.n	800bbb6 <__lo0bits+0x1e>
 800bbea:	2200      	movs	r2, #0
 800bbec:	e7e3      	b.n	800bbb6 <__lo0bits+0x1e>
 800bbee:	2220      	movs	r2, #32
 800bbf0:	e7e1      	b.n	800bbb6 <__lo0bits+0x1e>
	...

0800bbf4 <__i2b>:
 800bbf4:	b510      	push	{r4, lr}
 800bbf6:	460c      	mov	r4, r1
 800bbf8:	2101      	movs	r1, #1
 800bbfa:	f7ff ff05 	bl	800ba08 <_Balloc>
 800bbfe:	4602      	mov	r2, r0
 800bc00:	b928      	cbnz	r0, 800bc0e <__i2b+0x1a>
 800bc02:	4b05      	ldr	r3, [pc, #20]	; (800bc18 <__i2b+0x24>)
 800bc04:	4805      	ldr	r0, [pc, #20]	; (800bc1c <__i2b+0x28>)
 800bc06:	f240 1145 	movw	r1, #325	; 0x145
 800bc0a:	f000 fc2b 	bl	800c464 <__assert_func>
 800bc0e:	2301      	movs	r3, #1
 800bc10:	6144      	str	r4, [r0, #20]
 800bc12:	6103      	str	r3, [r0, #16]
 800bc14:	bd10      	pop	{r4, pc}
 800bc16:	bf00      	nop
 800bc18:	0800d250 	.word	0x0800d250
 800bc1c:	0800d272 	.word	0x0800d272

0800bc20 <__multiply>:
 800bc20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc24:	4691      	mov	r9, r2
 800bc26:	690a      	ldr	r2, [r1, #16]
 800bc28:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bc2c:	429a      	cmp	r2, r3
 800bc2e:	bfb8      	it	lt
 800bc30:	460b      	movlt	r3, r1
 800bc32:	460c      	mov	r4, r1
 800bc34:	bfbc      	itt	lt
 800bc36:	464c      	movlt	r4, r9
 800bc38:	4699      	movlt	r9, r3
 800bc3a:	6927      	ldr	r7, [r4, #16]
 800bc3c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bc40:	68a3      	ldr	r3, [r4, #8]
 800bc42:	6861      	ldr	r1, [r4, #4]
 800bc44:	eb07 060a 	add.w	r6, r7, sl
 800bc48:	42b3      	cmp	r3, r6
 800bc4a:	b085      	sub	sp, #20
 800bc4c:	bfb8      	it	lt
 800bc4e:	3101      	addlt	r1, #1
 800bc50:	f7ff feda 	bl	800ba08 <_Balloc>
 800bc54:	b930      	cbnz	r0, 800bc64 <__multiply+0x44>
 800bc56:	4602      	mov	r2, r0
 800bc58:	4b44      	ldr	r3, [pc, #272]	; (800bd6c <__multiply+0x14c>)
 800bc5a:	4845      	ldr	r0, [pc, #276]	; (800bd70 <__multiply+0x150>)
 800bc5c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800bc60:	f000 fc00 	bl	800c464 <__assert_func>
 800bc64:	f100 0514 	add.w	r5, r0, #20
 800bc68:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bc6c:	462b      	mov	r3, r5
 800bc6e:	2200      	movs	r2, #0
 800bc70:	4543      	cmp	r3, r8
 800bc72:	d321      	bcc.n	800bcb8 <__multiply+0x98>
 800bc74:	f104 0314 	add.w	r3, r4, #20
 800bc78:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bc7c:	f109 0314 	add.w	r3, r9, #20
 800bc80:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bc84:	9202      	str	r2, [sp, #8]
 800bc86:	1b3a      	subs	r2, r7, r4
 800bc88:	3a15      	subs	r2, #21
 800bc8a:	f022 0203 	bic.w	r2, r2, #3
 800bc8e:	3204      	adds	r2, #4
 800bc90:	f104 0115 	add.w	r1, r4, #21
 800bc94:	428f      	cmp	r7, r1
 800bc96:	bf38      	it	cc
 800bc98:	2204      	movcc	r2, #4
 800bc9a:	9201      	str	r2, [sp, #4]
 800bc9c:	9a02      	ldr	r2, [sp, #8]
 800bc9e:	9303      	str	r3, [sp, #12]
 800bca0:	429a      	cmp	r2, r3
 800bca2:	d80c      	bhi.n	800bcbe <__multiply+0x9e>
 800bca4:	2e00      	cmp	r6, #0
 800bca6:	dd03      	ble.n	800bcb0 <__multiply+0x90>
 800bca8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d05b      	beq.n	800bd68 <__multiply+0x148>
 800bcb0:	6106      	str	r6, [r0, #16]
 800bcb2:	b005      	add	sp, #20
 800bcb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcb8:	f843 2b04 	str.w	r2, [r3], #4
 800bcbc:	e7d8      	b.n	800bc70 <__multiply+0x50>
 800bcbe:	f8b3 a000 	ldrh.w	sl, [r3]
 800bcc2:	f1ba 0f00 	cmp.w	sl, #0
 800bcc6:	d024      	beq.n	800bd12 <__multiply+0xf2>
 800bcc8:	f104 0e14 	add.w	lr, r4, #20
 800bccc:	46a9      	mov	r9, r5
 800bcce:	f04f 0c00 	mov.w	ip, #0
 800bcd2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bcd6:	f8d9 1000 	ldr.w	r1, [r9]
 800bcda:	fa1f fb82 	uxth.w	fp, r2
 800bcde:	b289      	uxth	r1, r1
 800bce0:	fb0a 110b 	mla	r1, sl, fp, r1
 800bce4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bce8:	f8d9 2000 	ldr.w	r2, [r9]
 800bcec:	4461      	add	r1, ip
 800bcee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bcf2:	fb0a c20b 	mla	r2, sl, fp, ip
 800bcf6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bcfa:	b289      	uxth	r1, r1
 800bcfc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bd00:	4577      	cmp	r7, lr
 800bd02:	f849 1b04 	str.w	r1, [r9], #4
 800bd06:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bd0a:	d8e2      	bhi.n	800bcd2 <__multiply+0xb2>
 800bd0c:	9a01      	ldr	r2, [sp, #4]
 800bd0e:	f845 c002 	str.w	ip, [r5, r2]
 800bd12:	9a03      	ldr	r2, [sp, #12]
 800bd14:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bd18:	3304      	adds	r3, #4
 800bd1a:	f1b9 0f00 	cmp.w	r9, #0
 800bd1e:	d021      	beq.n	800bd64 <__multiply+0x144>
 800bd20:	6829      	ldr	r1, [r5, #0]
 800bd22:	f104 0c14 	add.w	ip, r4, #20
 800bd26:	46ae      	mov	lr, r5
 800bd28:	f04f 0a00 	mov.w	sl, #0
 800bd2c:	f8bc b000 	ldrh.w	fp, [ip]
 800bd30:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bd34:	fb09 220b 	mla	r2, r9, fp, r2
 800bd38:	4452      	add	r2, sl
 800bd3a:	b289      	uxth	r1, r1
 800bd3c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bd40:	f84e 1b04 	str.w	r1, [lr], #4
 800bd44:	f85c 1b04 	ldr.w	r1, [ip], #4
 800bd48:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bd4c:	f8be 1000 	ldrh.w	r1, [lr]
 800bd50:	fb09 110a 	mla	r1, r9, sl, r1
 800bd54:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800bd58:	4567      	cmp	r7, ip
 800bd5a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bd5e:	d8e5      	bhi.n	800bd2c <__multiply+0x10c>
 800bd60:	9a01      	ldr	r2, [sp, #4]
 800bd62:	50a9      	str	r1, [r5, r2]
 800bd64:	3504      	adds	r5, #4
 800bd66:	e799      	b.n	800bc9c <__multiply+0x7c>
 800bd68:	3e01      	subs	r6, #1
 800bd6a:	e79b      	b.n	800bca4 <__multiply+0x84>
 800bd6c:	0800d250 	.word	0x0800d250
 800bd70:	0800d272 	.word	0x0800d272

0800bd74 <__pow5mult>:
 800bd74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd78:	4615      	mov	r5, r2
 800bd7a:	f012 0203 	ands.w	r2, r2, #3
 800bd7e:	4606      	mov	r6, r0
 800bd80:	460f      	mov	r7, r1
 800bd82:	d007      	beq.n	800bd94 <__pow5mult+0x20>
 800bd84:	4c25      	ldr	r4, [pc, #148]	; (800be1c <__pow5mult+0xa8>)
 800bd86:	3a01      	subs	r2, #1
 800bd88:	2300      	movs	r3, #0
 800bd8a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bd8e:	f7ff fe9d 	bl	800bacc <__multadd>
 800bd92:	4607      	mov	r7, r0
 800bd94:	10ad      	asrs	r5, r5, #2
 800bd96:	d03d      	beq.n	800be14 <__pow5mult+0xa0>
 800bd98:	69f4      	ldr	r4, [r6, #28]
 800bd9a:	b97c      	cbnz	r4, 800bdbc <__pow5mult+0x48>
 800bd9c:	2010      	movs	r0, #16
 800bd9e:	f7ff fcd1 	bl	800b744 <malloc>
 800bda2:	4602      	mov	r2, r0
 800bda4:	61f0      	str	r0, [r6, #28]
 800bda6:	b928      	cbnz	r0, 800bdb4 <__pow5mult+0x40>
 800bda8:	4b1d      	ldr	r3, [pc, #116]	; (800be20 <__pow5mult+0xac>)
 800bdaa:	481e      	ldr	r0, [pc, #120]	; (800be24 <__pow5mult+0xb0>)
 800bdac:	f240 11b3 	movw	r1, #435	; 0x1b3
 800bdb0:	f000 fb58 	bl	800c464 <__assert_func>
 800bdb4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bdb8:	6004      	str	r4, [r0, #0]
 800bdba:	60c4      	str	r4, [r0, #12]
 800bdbc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800bdc0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bdc4:	b94c      	cbnz	r4, 800bdda <__pow5mult+0x66>
 800bdc6:	f240 2171 	movw	r1, #625	; 0x271
 800bdca:	4630      	mov	r0, r6
 800bdcc:	f7ff ff12 	bl	800bbf4 <__i2b>
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	f8c8 0008 	str.w	r0, [r8, #8]
 800bdd6:	4604      	mov	r4, r0
 800bdd8:	6003      	str	r3, [r0, #0]
 800bdda:	f04f 0900 	mov.w	r9, #0
 800bdde:	07eb      	lsls	r3, r5, #31
 800bde0:	d50a      	bpl.n	800bdf8 <__pow5mult+0x84>
 800bde2:	4639      	mov	r1, r7
 800bde4:	4622      	mov	r2, r4
 800bde6:	4630      	mov	r0, r6
 800bde8:	f7ff ff1a 	bl	800bc20 <__multiply>
 800bdec:	4639      	mov	r1, r7
 800bdee:	4680      	mov	r8, r0
 800bdf0:	4630      	mov	r0, r6
 800bdf2:	f7ff fe49 	bl	800ba88 <_Bfree>
 800bdf6:	4647      	mov	r7, r8
 800bdf8:	106d      	asrs	r5, r5, #1
 800bdfa:	d00b      	beq.n	800be14 <__pow5mult+0xa0>
 800bdfc:	6820      	ldr	r0, [r4, #0]
 800bdfe:	b938      	cbnz	r0, 800be10 <__pow5mult+0x9c>
 800be00:	4622      	mov	r2, r4
 800be02:	4621      	mov	r1, r4
 800be04:	4630      	mov	r0, r6
 800be06:	f7ff ff0b 	bl	800bc20 <__multiply>
 800be0a:	6020      	str	r0, [r4, #0]
 800be0c:	f8c0 9000 	str.w	r9, [r0]
 800be10:	4604      	mov	r4, r0
 800be12:	e7e4      	b.n	800bdde <__pow5mult+0x6a>
 800be14:	4638      	mov	r0, r7
 800be16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be1a:	bf00      	nop
 800be1c:	0800d3c0 	.word	0x0800d3c0
 800be20:	0800d1e1 	.word	0x0800d1e1
 800be24:	0800d272 	.word	0x0800d272

0800be28 <__lshift>:
 800be28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be2c:	460c      	mov	r4, r1
 800be2e:	6849      	ldr	r1, [r1, #4]
 800be30:	6923      	ldr	r3, [r4, #16]
 800be32:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800be36:	68a3      	ldr	r3, [r4, #8]
 800be38:	4607      	mov	r7, r0
 800be3a:	4691      	mov	r9, r2
 800be3c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800be40:	f108 0601 	add.w	r6, r8, #1
 800be44:	42b3      	cmp	r3, r6
 800be46:	db0b      	blt.n	800be60 <__lshift+0x38>
 800be48:	4638      	mov	r0, r7
 800be4a:	f7ff fddd 	bl	800ba08 <_Balloc>
 800be4e:	4605      	mov	r5, r0
 800be50:	b948      	cbnz	r0, 800be66 <__lshift+0x3e>
 800be52:	4602      	mov	r2, r0
 800be54:	4b28      	ldr	r3, [pc, #160]	; (800bef8 <__lshift+0xd0>)
 800be56:	4829      	ldr	r0, [pc, #164]	; (800befc <__lshift+0xd4>)
 800be58:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800be5c:	f000 fb02 	bl	800c464 <__assert_func>
 800be60:	3101      	adds	r1, #1
 800be62:	005b      	lsls	r3, r3, #1
 800be64:	e7ee      	b.n	800be44 <__lshift+0x1c>
 800be66:	2300      	movs	r3, #0
 800be68:	f100 0114 	add.w	r1, r0, #20
 800be6c:	f100 0210 	add.w	r2, r0, #16
 800be70:	4618      	mov	r0, r3
 800be72:	4553      	cmp	r3, sl
 800be74:	db33      	blt.n	800bede <__lshift+0xb6>
 800be76:	6920      	ldr	r0, [r4, #16]
 800be78:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800be7c:	f104 0314 	add.w	r3, r4, #20
 800be80:	f019 091f 	ands.w	r9, r9, #31
 800be84:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800be88:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800be8c:	d02b      	beq.n	800bee6 <__lshift+0xbe>
 800be8e:	f1c9 0e20 	rsb	lr, r9, #32
 800be92:	468a      	mov	sl, r1
 800be94:	2200      	movs	r2, #0
 800be96:	6818      	ldr	r0, [r3, #0]
 800be98:	fa00 f009 	lsl.w	r0, r0, r9
 800be9c:	4310      	orrs	r0, r2
 800be9e:	f84a 0b04 	str.w	r0, [sl], #4
 800bea2:	f853 2b04 	ldr.w	r2, [r3], #4
 800bea6:	459c      	cmp	ip, r3
 800bea8:	fa22 f20e 	lsr.w	r2, r2, lr
 800beac:	d8f3      	bhi.n	800be96 <__lshift+0x6e>
 800beae:	ebac 0304 	sub.w	r3, ip, r4
 800beb2:	3b15      	subs	r3, #21
 800beb4:	f023 0303 	bic.w	r3, r3, #3
 800beb8:	3304      	adds	r3, #4
 800beba:	f104 0015 	add.w	r0, r4, #21
 800bebe:	4584      	cmp	ip, r0
 800bec0:	bf38      	it	cc
 800bec2:	2304      	movcc	r3, #4
 800bec4:	50ca      	str	r2, [r1, r3]
 800bec6:	b10a      	cbz	r2, 800becc <__lshift+0xa4>
 800bec8:	f108 0602 	add.w	r6, r8, #2
 800becc:	3e01      	subs	r6, #1
 800bece:	4638      	mov	r0, r7
 800bed0:	612e      	str	r6, [r5, #16]
 800bed2:	4621      	mov	r1, r4
 800bed4:	f7ff fdd8 	bl	800ba88 <_Bfree>
 800bed8:	4628      	mov	r0, r5
 800beda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bede:	f842 0f04 	str.w	r0, [r2, #4]!
 800bee2:	3301      	adds	r3, #1
 800bee4:	e7c5      	b.n	800be72 <__lshift+0x4a>
 800bee6:	3904      	subs	r1, #4
 800bee8:	f853 2b04 	ldr.w	r2, [r3], #4
 800beec:	f841 2f04 	str.w	r2, [r1, #4]!
 800bef0:	459c      	cmp	ip, r3
 800bef2:	d8f9      	bhi.n	800bee8 <__lshift+0xc0>
 800bef4:	e7ea      	b.n	800becc <__lshift+0xa4>
 800bef6:	bf00      	nop
 800bef8:	0800d250 	.word	0x0800d250
 800befc:	0800d272 	.word	0x0800d272

0800bf00 <__mcmp>:
 800bf00:	b530      	push	{r4, r5, lr}
 800bf02:	6902      	ldr	r2, [r0, #16]
 800bf04:	690c      	ldr	r4, [r1, #16]
 800bf06:	1b12      	subs	r2, r2, r4
 800bf08:	d10e      	bne.n	800bf28 <__mcmp+0x28>
 800bf0a:	f100 0314 	add.w	r3, r0, #20
 800bf0e:	3114      	adds	r1, #20
 800bf10:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bf14:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bf18:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bf1c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bf20:	42a5      	cmp	r5, r4
 800bf22:	d003      	beq.n	800bf2c <__mcmp+0x2c>
 800bf24:	d305      	bcc.n	800bf32 <__mcmp+0x32>
 800bf26:	2201      	movs	r2, #1
 800bf28:	4610      	mov	r0, r2
 800bf2a:	bd30      	pop	{r4, r5, pc}
 800bf2c:	4283      	cmp	r3, r0
 800bf2e:	d3f3      	bcc.n	800bf18 <__mcmp+0x18>
 800bf30:	e7fa      	b.n	800bf28 <__mcmp+0x28>
 800bf32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bf36:	e7f7      	b.n	800bf28 <__mcmp+0x28>

0800bf38 <__mdiff>:
 800bf38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf3c:	460c      	mov	r4, r1
 800bf3e:	4606      	mov	r6, r0
 800bf40:	4611      	mov	r1, r2
 800bf42:	4620      	mov	r0, r4
 800bf44:	4690      	mov	r8, r2
 800bf46:	f7ff ffdb 	bl	800bf00 <__mcmp>
 800bf4a:	1e05      	subs	r5, r0, #0
 800bf4c:	d110      	bne.n	800bf70 <__mdiff+0x38>
 800bf4e:	4629      	mov	r1, r5
 800bf50:	4630      	mov	r0, r6
 800bf52:	f7ff fd59 	bl	800ba08 <_Balloc>
 800bf56:	b930      	cbnz	r0, 800bf66 <__mdiff+0x2e>
 800bf58:	4b3a      	ldr	r3, [pc, #232]	; (800c044 <__mdiff+0x10c>)
 800bf5a:	4602      	mov	r2, r0
 800bf5c:	f240 2137 	movw	r1, #567	; 0x237
 800bf60:	4839      	ldr	r0, [pc, #228]	; (800c048 <__mdiff+0x110>)
 800bf62:	f000 fa7f 	bl	800c464 <__assert_func>
 800bf66:	2301      	movs	r3, #1
 800bf68:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bf6c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf70:	bfa4      	itt	ge
 800bf72:	4643      	movge	r3, r8
 800bf74:	46a0      	movge	r8, r4
 800bf76:	4630      	mov	r0, r6
 800bf78:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bf7c:	bfa6      	itte	ge
 800bf7e:	461c      	movge	r4, r3
 800bf80:	2500      	movge	r5, #0
 800bf82:	2501      	movlt	r5, #1
 800bf84:	f7ff fd40 	bl	800ba08 <_Balloc>
 800bf88:	b920      	cbnz	r0, 800bf94 <__mdiff+0x5c>
 800bf8a:	4b2e      	ldr	r3, [pc, #184]	; (800c044 <__mdiff+0x10c>)
 800bf8c:	4602      	mov	r2, r0
 800bf8e:	f240 2145 	movw	r1, #581	; 0x245
 800bf92:	e7e5      	b.n	800bf60 <__mdiff+0x28>
 800bf94:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bf98:	6926      	ldr	r6, [r4, #16]
 800bf9a:	60c5      	str	r5, [r0, #12]
 800bf9c:	f104 0914 	add.w	r9, r4, #20
 800bfa0:	f108 0514 	add.w	r5, r8, #20
 800bfa4:	f100 0e14 	add.w	lr, r0, #20
 800bfa8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bfac:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bfb0:	f108 0210 	add.w	r2, r8, #16
 800bfb4:	46f2      	mov	sl, lr
 800bfb6:	2100      	movs	r1, #0
 800bfb8:	f859 3b04 	ldr.w	r3, [r9], #4
 800bfbc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bfc0:	fa11 f88b 	uxtah	r8, r1, fp
 800bfc4:	b299      	uxth	r1, r3
 800bfc6:	0c1b      	lsrs	r3, r3, #16
 800bfc8:	eba8 0801 	sub.w	r8, r8, r1
 800bfcc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bfd0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bfd4:	fa1f f888 	uxth.w	r8, r8
 800bfd8:	1419      	asrs	r1, r3, #16
 800bfda:	454e      	cmp	r6, r9
 800bfdc:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bfe0:	f84a 3b04 	str.w	r3, [sl], #4
 800bfe4:	d8e8      	bhi.n	800bfb8 <__mdiff+0x80>
 800bfe6:	1b33      	subs	r3, r6, r4
 800bfe8:	3b15      	subs	r3, #21
 800bfea:	f023 0303 	bic.w	r3, r3, #3
 800bfee:	3304      	adds	r3, #4
 800bff0:	3415      	adds	r4, #21
 800bff2:	42a6      	cmp	r6, r4
 800bff4:	bf38      	it	cc
 800bff6:	2304      	movcc	r3, #4
 800bff8:	441d      	add	r5, r3
 800bffa:	4473      	add	r3, lr
 800bffc:	469e      	mov	lr, r3
 800bffe:	462e      	mov	r6, r5
 800c000:	4566      	cmp	r6, ip
 800c002:	d30e      	bcc.n	800c022 <__mdiff+0xea>
 800c004:	f10c 0203 	add.w	r2, ip, #3
 800c008:	1b52      	subs	r2, r2, r5
 800c00a:	f022 0203 	bic.w	r2, r2, #3
 800c00e:	3d03      	subs	r5, #3
 800c010:	45ac      	cmp	ip, r5
 800c012:	bf38      	it	cc
 800c014:	2200      	movcc	r2, #0
 800c016:	4413      	add	r3, r2
 800c018:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c01c:	b17a      	cbz	r2, 800c03e <__mdiff+0x106>
 800c01e:	6107      	str	r7, [r0, #16]
 800c020:	e7a4      	b.n	800bf6c <__mdiff+0x34>
 800c022:	f856 8b04 	ldr.w	r8, [r6], #4
 800c026:	fa11 f288 	uxtah	r2, r1, r8
 800c02a:	1414      	asrs	r4, r2, #16
 800c02c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c030:	b292      	uxth	r2, r2
 800c032:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c036:	f84e 2b04 	str.w	r2, [lr], #4
 800c03a:	1421      	asrs	r1, r4, #16
 800c03c:	e7e0      	b.n	800c000 <__mdiff+0xc8>
 800c03e:	3f01      	subs	r7, #1
 800c040:	e7ea      	b.n	800c018 <__mdiff+0xe0>
 800c042:	bf00      	nop
 800c044:	0800d250 	.word	0x0800d250
 800c048:	0800d272 	.word	0x0800d272

0800c04c <__d2b>:
 800c04c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c050:	460f      	mov	r7, r1
 800c052:	2101      	movs	r1, #1
 800c054:	ec59 8b10 	vmov	r8, r9, d0
 800c058:	4616      	mov	r6, r2
 800c05a:	f7ff fcd5 	bl	800ba08 <_Balloc>
 800c05e:	4604      	mov	r4, r0
 800c060:	b930      	cbnz	r0, 800c070 <__d2b+0x24>
 800c062:	4602      	mov	r2, r0
 800c064:	4b24      	ldr	r3, [pc, #144]	; (800c0f8 <__d2b+0xac>)
 800c066:	4825      	ldr	r0, [pc, #148]	; (800c0fc <__d2b+0xb0>)
 800c068:	f240 310f 	movw	r1, #783	; 0x30f
 800c06c:	f000 f9fa 	bl	800c464 <__assert_func>
 800c070:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c074:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c078:	bb2d      	cbnz	r5, 800c0c6 <__d2b+0x7a>
 800c07a:	9301      	str	r3, [sp, #4]
 800c07c:	f1b8 0300 	subs.w	r3, r8, #0
 800c080:	d026      	beq.n	800c0d0 <__d2b+0x84>
 800c082:	4668      	mov	r0, sp
 800c084:	9300      	str	r3, [sp, #0]
 800c086:	f7ff fd87 	bl	800bb98 <__lo0bits>
 800c08a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c08e:	b1e8      	cbz	r0, 800c0cc <__d2b+0x80>
 800c090:	f1c0 0320 	rsb	r3, r0, #32
 800c094:	fa02 f303 	lsl.w	r3, r2, r3
 800c098:	430b      	orrs	r3, r1
 800c09a:	40c2      	lsrs	r2, r0
 800c09c:	6163      	str	r3, [r4, #20]
 800c09e:	9201      	str	r2, [sp, #4]
 800c0a0:	9b01      	ldr	r3, [sp, #4]
 800c0a2:	61a3      	str	r3, [r4, #24]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	bf14      	ite	ne
 800c0a8:	2202      	movne	r2, #2
 800c0aa:	2201      	moveq	r2, #1
 800c0ac:	6122      	str	r2, [r4, #16]
 800c0ae:	b1bd      	cbz	r5, 800c0e0 <__d2b+0x94>
 800c0b0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c0b4:	4405      	add	r5, r0
 800c0b6:	603d      	str	r5, [r7, #0]
 800c0b8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c0bc:	6030      	str	r0, [r6, #0]
 800c0be:	4620      	mov	r0, r4
 800c0c0:	b003      	add	sp, #12
 800c0c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c0c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c0ca:	e7d6      	b.n	800c07a <__d2b+0x2e>
 800c0cc:	6161      	str	r1, [r4, #20]
 800c0ce:	e7e7      	b.n	800c0a0 <__d2b+0x54>
 800c0d0:	a801      	add	r0, sp, #4
 800c0d2:	f7ff fd61 	bl	800bb98 <__lo0bits>
 800c0d6:	9b01      	ldr	r3, [sp, #4]
 800c0d8:	6163      	str	r3, [r4, #20]
 800c0da:	3020      	adds	r0, #32
 800c0dc:	2201      	movs	r2, #1
 800c0de:	e7e5      	b.n	800c0ac <__d2b+0x60>
 800c0e0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c0e4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c0e8:	6038      	str	r0, [r7, #0]
 800c0ea:	6918      	ldr	r0, [r3, #16]
 800c0ec:	f7ff fd34 	bl	800bb58 <__hi0bits>
 800c0f0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c0f4:	e7e2      	b.n	800c0bc <__d2b+0x70>
 800c0f6:	bf00      	nop
 800c0f8:	0800d250 	.word	0x0800d250
 800c0fc:	0800d272 	.word	0x0800d272

0800c100 <__sread>:
 800c100:	b510      	push	{r4, lr}
 800c102:	460c      	mov	r4, r1
 800c104:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c108:	f000 f978 	bl	800c3fc <_read_r>
 800c10c:	2800      	cmp	r0, #0
 800c10e:	bfab      	itete	ge
 800c110:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c112:	89a3      	ldrhlt	r3, [r4, #12]
 800c114:	181b      	addge	r3, r3, r0
 800c116:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c11a:	bfac      	ite	ge
 800c11c:	6563      	strge	r3, [r4, #84]	; 0x54
 800c11e:	81a3      	strhlt	r3, [r4, #12]
 800c120:	bd10      	pop	{r4, pc}

0800c122 <__swrite>:
 800c122:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c126:	461f      	mov	r7, r3
 800c128:	898b      	ldrh	r3, [r1, #12]
 800c12a:	05db      	lsls	r3, r3, #23
 800c12c:	4605      	mov	r5, r0
 800c12e:	460c      	mov	r4, r1
 800c130:	4616      	mov	r6, r2
 800c132:	d505      	bpl.n	800c140 <__swrite+0x1e>
 800c134:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c138:	2302      	movs	r3, #2
 800c13a:	2200      	movs	r2, #0
 800c13c:	f000 f94c 	bl	800c3d8 <_lseek_r>
 800c140:	89a3      	ldrh	r3, [r4, #12]
 800c142:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c146:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c14a:	81a3      	strh	r3, [r4, #12]
 800c14c:	4632      	mov	r2, r6
 800c14e:	463b      	mov	r3, r7
 800c150:	4628      	mov	r0, r5
 800c152:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c156:	f000 b973 	b.w	800c440 <_write_r>

0800c15a <__sseek>:
 800c15a:	b510      	push	{r4, lr}
 800c15c:	460c      	mov	r4, r1
 800c15e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c162:	f000 f939 	bl	800c3d8 <_lseek_r>
 800c166:	1c43      	adds	r3, r0, #1
 800c168:	89a3      	ldrh	r3, [r4, #12]
 800c16a:	bf15      	itete	ne
 800c16c:	6560      	strne	r0, [r4, #84]	; 0x54
 800c16e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c172:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c176:	81a3      	strheq	r3, [r4, #12]
 800c178:	bf18      	it	ne
 800c17a:	81a3      	strhne	r3, [r4, #12]
 800c17c:	bd10      	pop	{r4, pc}

0800c17e <__sclose>:
 800c17e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c182:	f000 b8f7 	b.w	800c374 <_close_r>

0800c186 <__swbuf_r>:
 800c186:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c188:	460e      	mov	r6, r1
 800c18a:	4614      	mov	r4, r2
 800c18c:	4605      	mov	r5, r0
 800c18e:	b118      	cbz	r0, 800c198 <__swbuf_r+0x12>
 800c190:	6a03      	ldr	r3, [r0, #32]
 800c192:	b90b      	cbnz	r3, 800c198 <__swbuf_r+0x12>
 800c194:	f7fe f99c 	bl	800a4d0 <__sinit>
 800c198:	69a3      	ldr	r3, [r4, #24]
 800c19a:	60a3      	str	r3, [r4, #8]
 800c19c:	89a3      	ldrh	r3, [r4, #12]
 800c19e:	071a      	lsls	r2, r3, #28
 800c1a0:	d525      	bpl.n	800c1ee <__swbuf_r+0x68>
 800c1a2:	6923      	ldr	r3, [r4, #16]
 800c1a4:	b31b      	cbz	r3, 800c1ee <__swbuf_r+0x68>
 800c1a6:	6823      	ldr	r3, [r4, #0]
 800c1a8:	6922      	ldr	r2, [r4, #16]
 800c1aa:	1a98      	subs	r0, r3, r2
 800c1ac:	6963      	ldr	r3, [r4, #20]
 800c1ae:	b2f6      	uxtb	r6, r6
 800c1b0:	4283      	cmp	r3, r0
 800c1b2:	4637      	mov	r7, r6
 800c1b4:	dc04      	bgt.n	800c1c0 <__swbuf_r+0x3a>
 800c1b6:	4621      	mov	r1, r4
 800c1b8:	4628      	mov	r0, r5
 800c1ba:	f7ff fbf1 	bl	800b9a0 <_fflush_r>
 800c1be:	b9e0      	cbnz	r0, 800c1fa <__swbuf_r+0x74>
 800c1c0:	68a3      	ldr	r3, [r4, #8]
 800c1c2:	3b01      	subs	r3, #1
 800c1c4:	60a3      	str	r3, [r4, #8]
 800c1c6:	6823      	ldr	r3, [r4, #0]
 800c1c8:	1c5a      	adds	r2, r3, #1
 800c1ca:	6022      	str	r2, [r4, #0]
 800c1cc:	701e      	strb	r6, [r3, #0]
 800c1ce:	6962      	ldr	r2, [r4, #20]
 800c1d0:	1c43      	adds	r3, r0, #1
 800c1d2:	429a      	cmp	r2, r3
 800c1d4:	d004      	beq.n	800c1e0 <__swbuf_r+0x5a>
 800c1d6:	89a3      	ldrh	r3, [r4, #12]
 800c1d8:	07db      	lsls	r3, r3, #31
 800c1da:	d506      	bpl.n	800c1ea <__swbuf_r+0x64>
 800c1dc:	2e0a      	cmp	r6, #10
 800c1de:	d104      	bne.n	800c1ea <__swbuf_r+0x64>
 800c1e0:	4621      	mov	r1, r4
 800c1e2:	4628      	mov	r0, r5
 800c1e4:	f7ff fbdc 	bl	800b9a0 <_fflush_r>
 800c1e8:	b938      	cbnz	r0, 800c1fa <__swbuf_r+0x74>
 800c1ea:	4638      	mov	r0, r7
 800c1ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1ee:	4621      	mov	r1, r4
 800c1f0:	4628      	mov	r0, r5
 800c1f2:	f000 f805 	bl	800c200 <__swsetup_r>
 800c1f6:	2800      	cmp	r0, #0
 800c1f8:	d0d5      	beq.n	800c1a6 <__swbuf_r+0x20>
 800c1fa:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c1fe:	e7f4      	b.n	800c1ea <__swbuf_r+0x64>

0800c200 <__swsetup_r>:
 800c200:	b538      	push	{r3, r4, r5, lr}
 800c202:	4b2a      	ldr	r3, [pc, #168]	; (800c2ac <__swsetup_r+0xac>)
 800c204:	4605      	mov	r5, r0
 800c206:	6818      	ldr	r0, [r3, #0]
 800c208:	460c      	mov	r4, r1
 800c20a:	b118      	cbz	r0, 800c214 <__swsetup_r+0x14>
 800c20c:	6a03      	ldr	r3, [r0, #32]
 800c20e:	b90b      	cbnz	r3, 800c214 <__swsetup_r+0x14>
 800c210:	f7fe f95e 	bl	800a4d0 <__sinit>
 800c214:	89a3      	ldrh	r3, [r4, #12]
 800c216:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c21a:	0718      	lsls	r0, r3, #28
 800c21c:	d422      	bmi.n	800c264 <__swsetup_r+0x64>
 800c21e:	06d9      	lsls	r1, r3, #27
 800c220:	d407      	bmi.n	800c232 <__swsetup_r+0x32>
 800c222:	2309      	movs	r3, #9
 800c224:	602b      	str	r3, [r5, #0]
 800c226:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c22a:	81a3      	strh	r3, [r4, #12]
 800c22c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c230:	e034      	b.n	800c29c <__swsetup_r+0x9c>
 800c232:	0758      	lsls	r0, r3, #29
 800c234:	d512      	bpl.n	800c25c <__swsetup_r+0x5c>
 800c236:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c238:	b141      	cbz	r1, 800c24c <__swsetup_r+0x4c>
 800c23a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c23e:	4299      	cmp	r1, r3
 800c240:	d002      	beq.n	800c248 <__swsetup_r+0x48>
 800c242:	4628      	mov	r0, r5
 800c244:	f7ff f8ee 	bl	800b424 <_free_r>
 800c248:	2300      	movs	r3, #0
 800c24a:	6363      	str	r3, [r4, #52]	; 0x34
 800c24c:	89a3      	ldrh	r3, [r4, #12]
 800c24e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c252:	81a3      	strh	r3, [r4, #12]
 800c254:	2300      	movs	r3, #0
 800c256:	6063      	str	r3, [r4, #4]
 800c258:	6923      	ldr	r3, [r4, #16]
 800c25a:	6023      	str	r3, [r4, #0]
 800c25c:	89a3      	ldrh	r3, [r4, #12]
 800c25e:	f043 0308 	orr.w	r3, r3, #8
 800c262:	81a3      	strh	r3, [r4, #12]
 800c264:	6923      	ldr	r3, [r4, #16]
 800c266:	b94b      	cbnz	r3, 800c27c <__swsetup_r+0x7c>
 800c268:	89a3      	ldrh	r3, [r4, #12]
 800c26a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c26e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c272:	d003      	beq.n	800c27c <__swsetup_r+0x7c>
 800c274:	4621      	mov	r1, r4
 800c276:	4628      	mov	r0, r5
 800c278:	f000 f840 	bl	800c2fc <__smakebuf_r>
 800c27c:	89a0      	ldrh	r0, [r4, #12]
 800c27e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c282:	f010 0301 	ands.w	r3, r0, #1
 800c286:	d00a      	beq.n	800c29e <__swsetup_r+0x9e>
 800c288:	2300      	movs	r3, #0
 800c28a:	60a3      	str	r3, [r4, #8]
 800c28c:	6963      	ldr	r3, [r4, #20]
 800c28e:	425b      	negs	r3, r3
 800c290:	61a3      	str	r3, [r4, #24]
 800c292:	6923      	ldr	r3, [r4, #16]
 800c294:	b943      	cbnz	r3, 800c2a8 <__swsetup_r+0xa8>
 800c296:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c29a:	d1c4      	bne.n	800c226 <__swsetup_r+0x26>
 800c29c:	bd38      	pop	{r3, r4, r5, pc}
 800c29e:	0781      	lsls	r1, r0, #30
 800c2a0:	bf58      	it	pl
 800c2a2:	6963      	ldrpl	r3, [r4, #20]
 800c2a4:	60a3      	str	r3, [r4, #8]
 800c2a6:	e7f4      	b.n	800c292 <__swsetup_r+0x92>
 800c2a8:	2000      	movs	r0, #0
 800c2aa:	e7f7      	b.n	800c29c <__swsetup_r+0x9c>
 800c2ac:	20000068 	.word	0x20000068

0800c2b0 <__swhatbuf_r>:
 800c2b0:	b570      	push	{r4, r5, r6, lr}
 800c2b2:	460c      	mov	r4, r1
 800c2b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2b8:	2900      	cmp	r1, #0
 800c2ba:	b096      	sub	sp, #88	; 0x58
 800c2bc:	4615      	mov	r5, r2
 800c2be:	461e      	mov	r6, r3
 800c2c0:	da0d      	bge.n	800c2de <__swhatbuf_r+0x2e>
 800c2c2:	89a3      	ldrh	r3, [r4, #12]
 800c2c4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c2c8:	f04f 0100 	mov.w	r1, #0
 800c2cc:	bf0c      	ite	eq
 800c2ce:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c2d2:	2340      	movne	r3, #64	; 0x40
 800c2d4:	2000      	movs	r0, #0
 800c2d6:	6031      	str	r1, [r6, #0]
 800c2d8:	602b      	str	r3, [r5, #0]
 800c2da:	b016      	add	sp, #88	; 0x58
 800c2dc:	bd70      	pop	{r4, r5, r6, pc}
 800c2de:	466a      	mov	r2, sp
 800c2e0:	f000 f858 	bl	800c394 <_fstat_r>
 800c2e4:	2800      	cmp	r0, #0
 800c2e6:	dbec      	blt.n	800c2c2 <__swhatbuf_r+0x12>
 800c2e8:	9901      	ldr	r1, [sp, #4]
 800c2ea:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c2ee:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c2f2:	4259      	negs	r1, r3
 800c2f4:	4159      	adcs	r1, r3
 800c2f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c2fa:	e7eb      	b.n	800c2d4 <__swhatbuf_r+0x24>

0800c2fc <__smakebuf_r>:
 800c2fc:	898b      	ldrh	r3, [r1, #12]
 800c2fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c300:	079d      	lsls	r5, r3, #30
 800c302:	4606      	mov	r6, r0
 800c304:	460c      	mov	r4, r1
 800c306:	d507      	bpl.n	800c318 <__smakebuf_r+0x1c>
 800c308:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c30c:	6023      	str	r3, [r4, #0]
 800c30e:	6123      	str	r3, [r4, #16]
 800c310:	2301      	movs	r3, #1
 800c312:	6163      	str	r3, [r4, #20]
 800c314:	b002      	add	sp, #8
 800c316:	bd70      	pop	{r4, r5, r6, pc}
 800c318:	ab01      	add	r3, sp, #4
 800c31a:	466a      	mov	r2, sp
 800c31c:	f7ff ffc8 	bl	800c2b0 <__swhatbuf_r>
 800c320:	9900      	ldr	r1, [sp, #0]
 800c322:	4605      	mov	r5, r0
 800c324:	4630      	mov	r0, r6
 800c326:	f7ff fa35 	bl	800b794 <_malloc_r>
 800c32a:	b948      	cbnz	r0, 800c340 <__smakebuf_r+0x44>
 800c32c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c330:	059a      	lsls	r2, r3, #22
 800c332:	d4ef      	bmi.n	800c314 <__smakebuf_r+0x18>
 800c334:	f023 0303 	bic.w	r3, r3, #3
 800c338:	f043 0302 	orr.w	r3, r3, #2
 800c33c:	81a3      	strh	r3, [r4, #12]
 800c33e:	e7e3      	b.n	800c308 <__smakebuf_r+0xc>
 800c340:	89a3      	ldrh	r3, [r4, #12]
 800c342:	6020      	str	r0, [r4, #0]
 800c344:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c348:	81a3      	strh	r3, [r4, #12]
 800c34a:	9b00      	ldr	r3, [sp, #0]
 800c34c:	6163      	str	r3, [r4, #20]
 800c34e:	9b01      	ldr	r3, [sp, #4]
 800c350:	6120      	str	r0, [r4, #16]
 800c352:	b15b      	cbz	r3, 800c36c <__smakebuf_r+0x70>
 800c354:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c358:	4630      	mov	r0, r6
 800c35a:	f000 f82d 	bl	800c3b8 <_isatty_r>
 800c35e:	b128      	cbz	r0, 800c36c <__smakebuf_r+0x70>
 800c360:	89a3      	ldrh	r3, [r4, #12]
 800c362:	f023 0303 	bic.w	r3, r3, #3
 800c366:	f043 0301 	orr.w	r3, r3, #1
 800c36a:	81a3      	strh	r3, [r4, #12]
 800c36c:	89a3      	ldrh	r3, [r4, #12]
 800c36e:	431d      	orrs	r5, r3
 800c370:	81a5      	strh	r5, [r4, #12]
 800c372:	e7cf      	b.n	800c314 <__smakebuf_r+0x18>

0800c374 <_close_r>:
 800c374:	b538      	push	{r3, r4, r5, lr}
 800c376:	4d06      	ldr	r5, [pc, #24]	; (800c390 <_close_r+0x1c>)
 800c378:	2300      	movs	r3, #0
 800c37a:	4604      	mov	r4, r0
 800c37c:	4608      	mov	r0, r1
 800c37e:	602b      	str	r3, [r5, #0]
 800c380:	f7f5 fe7d 	bl	800207e <_close>
 800c384:	1c43      	adds	r3, r0, #1
 800c386:	d102      	bne.n	800c38e <_close_r+0x1a>
 800c388:	682b      	ldr	r3, [r5, #0]
 800c38a:	b103      	cbz	r3, 800c38e <_close_r+0x1a>
 800c38c:	6023      	str	r3, [r4, #0]
 800c38e:	bd38      	pop	{r3, r4, r5, pc}
 800c390:	2000275c 	.word	0x2000275c

0800c394 <_fstat_r>:
 800c394:	b538      	push	{r3, r4, r5, lr}
 800c396:	4d07      	ldr	r5, [pc, #28]	; (800c3b4 <_fstat_r+0x20>)
 800c398:	2300      	movs	r3, #0
 800c39a:	4604      	mov	r4, r0
 800c39c:	4608      	mov	r0, r1
 800c39e:	4611      	mov	r1, r2
 800c3a0:	602b      	str	r3, [r5, #0]
 800c3a2:	f7f5 fe78 	bl	8002096 <_fstat>
 800c3a6:	1c43      	adds	r3, r0, #1
 800c3a8:	d102      	bne.n	800c3b0 <_fstat_r+0x1c>
 800c3aa:	682b      	ldr	r3, [r5, #0]
 800c3ac:	b103      	cbz	r3, 800c3b0 <_fstat_r+0x1c>
 800c3ae:	6023      	str	r3, [r4, #0]
 800c3b0:	bd38      	pop	{r3, r4, r5, pc}
 800c3b2:	bf00      	nop
 800c3b4:	2000275c 	.word	0x2000275c

0800c3b8 <_isatty_r>:
 800c3b8:	b538      	push	{r3, r4, r5, lr}
 800c3ba:	4d06      	ldr	r5, [pc, #24]	; (800c3d4 <_isatty_r+0x1c>)
 800c3bc:	2300      	movs	r3, #0
 800c3be:	4604      	mov	r4, r0
 800c3c0:	4608      	mov	r0, r1
 800c3c2:	602b      	str	r3, [r5, #0]
 800c3c4:	f7f5 fe77 	bl	80020b6 <_isatty>
 800c3c8:	1c43      	adds	r3, r0, #1
 800c3ca:	d102      	bne.n	800c3d2 <_isatty_r+0x1a>
 800c3cc:	682b      	ldr	r3, [r5, #0]
 800c3ce:	b103      	cbz	r3, 800c3d2 <_isatty_r+0x1a>
 800c3d0:	6023      	str	r3, [r4, #0]
 800c3d2:	bd38      	pop	{r3, r4, r5, pc}
 800c3d4:	2000275c 	.word	0x2000275c

0800c3d8 <_lseek_r>:
 800c3d8:	b538      	push	{r3, r4, r5, lr}
 800c3da:	4d07      	ldr	r5, [pc, #28]	; (800c3f8 <_lseek_r+0x20>)
 800c3dc:	4604      	mov	r4, r0
 800c3de:	4608      	mov	r0, r1
 800c3e0:	4611      	mov	r1, r2
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	602a      	str	r2, [r5, #0]
 800c3e6:	461a      	mov	r2, r3
 800c3e8:	f7f5 fe70 	bl	80020cc <_lseek>
 800c3ec:	1c43      	adds	r3, r0, #1
 800c3ee:	d102      	bne.n	800c3f6 <_lseek_r+0x1e>
 800c3f0:	682b      	ldr	r3, [r5, #0]
 800c3f2:	b103      	cbz	r3, 800c3f6 <_lseek_r+0x1e>
 800c3f4:	6023      	str	r3, [r4, #0]
 800c3f6:	bd38      	pop	{r3, r4, r5, pc}
 800c3f8:	2000275c 	.word	0x2000275c

0800c3fc <_read_r>:
 800c3fc:	b538      	push	{r3, r4, r5, lr}
 800c3fe:	4d07      	ldr	r5, [pc, #28]	; (800c41c <_read_r+0x20>)
 800c400:	4604      	mov	r4, r0
 800c402:	4608      	mov	r0, r1
 800c404:	4611      	mov	r1, r2
 800c406:	2200      	movs	r2, #0
 800c408:	602a      	str	r2, [r5, #0]
 800c40a:	461a      	mov	r2, r3
 800c40c:	f7f5 fdfe 	bl	800200c <_read>
 800c410:	1c43      	adds	r3, r0, #1
 800c412:	d102      	bne.n	800c41a <_read_r+0x1e>
 800c414:	682b      	ldr	r3, [r5, #0]
 800c416:	b103      	cbz	r3, 800c41a <_read_r+0x1e>
 800c418:	6023      	str	r3, [r4, #0]
 800c41a:	bd38      	pop	{r3, r4, r5, pc}
 800c41c:	2000275c 	.word	0x2000275c

0800c420 <_sbrk_r>:
 800c420:	b538      	push	{r3, r4, r5, lr}
 800c422:	4d06      	ldr	r5, [pc, #24]	; (800c43c <_sbrk_r+0x1c>)
 800c424:	2300      	movs	r3, #0
 800c426:	4604      	mov	r4, r0
 800c428:	4608      	mov	r0, r1
 800c42a:	602b      	str	r3, [r5, #0]
 800c42c:	f7f5 fe5c 	bl	80020e8 <_sbrk>
 800c430:	1c43      	adds	r3, r0, #1
 800c432:	d102      	bne.n	800c43a <_sbrk_r+0x1a>
 800c434:	682b      	ldr	r3, [r5, #0]
 800c436:	b103      	cbz	r3, 800c43a <_sbrk_r+0x1a>
 800c438:	6023      	str	r3, [r4, #0]
 800c43a:	bd38      	pop	{r3, r4, r5, pc}
 800c43c:	2000275c 	.word	0x2000275c

0800c440 <_write_r>:
 800c440:	b538      	push	{r3, r4, r5, lr}
 800c442:	4d07      	ldr	r5, [pc, #28]	; (800c460 <_write_r+0x20>)
 800c444:	4604      	mov	r4, r0
 800c446:	4608      	mov	r0, r1
 800c448:	4611      	mov	r1, r2
 800c44a:	2200      	movs	r2, #0
 800c44c:	602a      	str	r2, [r5, #0]
 800c44e:	461a      	mov	r2, r3
 800c450:	f7f5 fdf9 	bl	8002046 <_write>
 800c454:	1c43      	adds	r3, r0, #1
 800c456:	d102      	bne.n	800c45e <_write_r+0x1e>
 800c458:	682b      	ldr	r3, [r5, #0]
 800c45a:	b103      	cbz	r3, 800c45e <_write_r+0x1e>
 800c45c:	6023      	str	r3, [r4, #0]
 800c45e:	bd38      	pop	{r3, r4, r5, pc}
 800c460:	2000275c 	.word	0x2000275c

0800c464 <__assert_func>:
 800c464:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c466:	4614      	mov	r4, r2
 800c468:	461a      	mov	r2, r3
 800c46a:	4b09      	ldr	r3, [pc, #36]	; (800c490 <__assert_func+0x2c>)
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	4605      	mov	r5, r0
 800c470:	68d8      	ldr	r0, [r3, #12]
 800c472:	b14c      	cbz	r4, 800c488 <__assert_func+0x24>
 800c474:	4b07      	ldr	r3, [pc, #28]	; (800c494 <__assert_func+0x30>)
 800c476:	9100      	str	r1, [sp, #0]
 800c478:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c47c:	4906      	ldr	r1, [pc, #24]	; (800c498 <__assert_func+0x34>)
 800c47e:	462b      	mov	r3, r5
 800c480:	f000 f836 	bl	800c4f0 <fiprintf>
 800c484:	f000 f853 	bl	800c52e <abort>
 800c488:	4b04      	ldr	r3, [pc, #16]	; (800c49c <__assert_func+0x38>)
 800c48a:	461c      	mov	r4, r3
 800c48c:	e7f3      	b.n	800c476 <__assert_func+0x12>
 800c48e:	bf00      	nop
 800c490:	20000068 	.word	0x20000068
 800c494:	0800d4d7 	.word	0x0800d4d7
 800c498:	0800d4e4 	.word	0x0800d4e4
 800c49c:	0800d512 	.word	0x0800d512

0800c4a0 <_calloc_r>:
 800c4a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c4a2:	fba1 2402 	umull	r2, r4, r1, r2
 800c4a6:	b94c      	cbnz	r4, 800c4bc <_calloc_r+0x1c>
 800c4a8:	4611      	mov	r1, r2
 800c4aa:	9201      	str	r2, [sp, #4]
 800c4ac:	f7ff f972 	bl	800b794 <_malloc_r>
 800c4b0:	9a01      	ldr	r2, [sp, #4]
 800c4b2:	4605      	mov	r5, r0
 800c4b4:	b930      	cbnz	r0, 800c4c4 <_calloc_r+0x24>
 800c4b6:	4628      	mov	r0, r5
 800c4b8:	b003      	add	sp, #12
 800c4ba:	bd30      	pop	{r4, r5, pc}
 800c4bc:	220c      	movs	r2, #12
 800c4be:	6002      	str	r2, [r0, #0]
 800c4c0:	2500      	movs	r5, #0
 800c4c2:	e7f8      	b.n	800c4b6 <_calloc_r+0x16>
 800c4c4:	4621      	mov	r1, r4
 800c4c6:	f7fe f895 	bl	800a5f4 <memset>
 800c4ca:	e7f4      	b.n	800c4b6 <_calloc_r+0x16>

0800c4cc <__ascii_mbtowc>:
 800c4cc:	b082      	sub	sp, #8
 800c4ce:	b901      	cbnz	r1, 800c4d2 <__ascii_mbtowc+0x6>
 800c4d0:	a901      	add	r1, sp, #4
 800c4d2:	b142      	cbz	r2, 800c4e6 <__ascii_mbtowc+0x1a>
 800c4d4:	b14b      	cbz	r3, 800c4ea <__ascii_mbtowc+0x1e>
 800c4d6:	7813      	ldrb	r3, [r2, #0]
 800c4d8:	600b      	str	r3, [r1, #0]
 800c4da:	7812      	ldrb	r2, [r2, #0]
 800c4dc:	1e10      	subs	r0, r2, #0
 800c4de:	bf18      	it	ne
 800c4e0:	2001      	movne	r0, #1
 800c4e2:	b002      	add	sp, #8
 800c4e4:	4770      	bx	lr
 800c4e6:	4610      	mov	r0, r2
 800c4e8:	e7fb      	b.n	800c4e2 <__ascii_mbtowc+0x16>
 800c4ea:	f06f 0001 	mvn.w	r0, #1
 800c4ee:	e7f8      	b.n	800c4e2 <__ascii_mbtowc+0x16>

0800c4f0 <fiprintf>:
 800c4f0:	b40e      	push	{r1, r2, r3}
 800c4f2:	b503      	push	{r0, r1, lr}
 800c4f4:	4601      	mov	r1, r0
 800c4f6:	ab03      	add	r3, sp, #12
 800c4f8:	4805      	ldr	r0, [pc, #20]	; (800c510 <fiprintf+0x20>)
 800c4fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4fe:	6800      	ldr	r0, [r0, #0]
 800c500:	9301      	str	r3, [sp, #4]
 800c502:	f7ff f805 	bl	800b510 <_vfiprintf_r>
 800c506:	b002      	add	sp, #8
 800c508:	f85d eb04 	ldr.w	lr, [sp], #4
 800c50c:	b003      	add	sp, #12
 800c50e:	4770      	bx	lr
 800c510:	20000068 	.word	0x20000068

0800c514 <__ascii_wctomb>:
 800c514:	b149      	cbz	r1, 800c52a <__ascii_wctomb+0x16>
 800c516:	2aff      	cmp	r2, #255	; 0xff
 800c518:	bf85      	ittet	hi
 800c51a:	238a      	movhi	r3, #138	; 0x8a
 800c51c:	6003      	strhi	r3, [r0, #0]
 800c51e:	700a      	strbls	r2, [r1, #0]
 800c520:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800c524:	bf98      	it	ls
 800c526:	2001      	movls	r0, #1
 800c528:	4770      	bx	lr
 800c52a:	4608      	mov	r0, r1
 800c52c:	4770      	bx	lr

0800c52e <abort>:
 800c52e:	b508      	push	{r3, lr}
 800c530:	2006      	movs	r0, #6
 800c532:	f000 f82b 	bl	800c58c <raise>
 800c536:	2001      	movs	r0, #1
 800c538:	f7f5 fd5e 	bl	8001ff8 <_exit>

0800c53c <_raise_r>:
 800c53c:	291f      	cmp	r1, #31
 800c53e:	b538      	push	{r3, r4, r5, lr}
 800c540:	4604      	mov	r4, r0
 800c542:	460d      	mov	r5, r1
 800c544:	d904      	bls.n	800c550 <_raise_r+0x14>
 800c546:	2316      	movs	r3, #22
 800c548:	6003      	str	r3, [r0, #0]
 800c54a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c54e:	bd38      	pop	{r3, r4, r5, pc}
 800c550:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c552:	b112      	cbz	r2, 800c55a <_raise_r+0x1e>
 800c554:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c558:	b94b      	cbnz	r3, 800c56e <_raise_r+0x32>
 800c55a:	4620      	mov	r0, r4
 800c55c:	f000 f830 	bl	800c5c0 <_getpid_r>
 800c560:	462a      	mov	r2, r5
 800c562:	4601      	mov	r1, r0
 800c564:	4620      	mov	r0, r4
 800c566:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c56a:	f000 b817 	b.w	800c59c <_kill_r>
 800c56e:	2b01      	cmp	r3, #1
 800c570:	d00a      	beq.n	800c588 <_raise_r+0x4c>
 800c572:	1c59      	adds	r1, r3, #1
 800c574:	d103      	bne.n	800c57e <_raise_r+0x42>
 800c576:	2316      	movs	r3, #22
 800c578:	6003      	str	r3, [r0, #0]
 800c57a:	2001      	movs	r0, #1
 800c57c:	e7e7      	b.n	800c54e <_raise_r+0x12>
 800c57e:	2400      	movs	r4, #0
 800c580:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c584:	4628      	mov	r0, r5
 800c586:	4798      	blx	r3
 800c588:	2000      	movs	r0, #0
 800c58a:	e7e0      	b.n	800c54e <_raise_r+0x12>

0800c58c <raise>:
 800c58c:	4b02      	ldr	r3, [pc, #8]	; (800c598 <raise+0xc>)
 800c58e:	4601      	mov	r1, r0
 800c590:	6818      	ldr	r0, [r3, #0]
 800c592:	f7ff bfd3 	b.w	800c53c <_raise_r>
 800c596:	bf00      	nop
 800c598:	20000068 	.word	0x20000068

0800c59c <_kill_r>:
 800c59c:	b538      	push	{r3, r4, r5, lr}
 800c59e:	4d07      	ldr	r5, [pc, #28]	; (800c5bc <_kill_r+0x20>)
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	4604      	mov	r4, r0
 800c5a4:	4608      	mov	r0, r1
 800c5a6:	4611      	mov	r1, r2
 800c5a8:	602b      	str	r3, [r5, #0]
 800c5aa:	f7f5 fd15 	bl	8001fd8 <_kill>
 800c5ae:	1c43      	adds	r3, r0, #1
 800c5b0:	d102      	bne.n	800c5b8 <_kill_r+0x1c>
 800c5b2:	682b      	ldr	r3, [r5, #0]
 800c5b4:	b103      	cbz	r3, 800c5b8 <_kill_r+0x1c>
 800c5b6:	6023      	str	r3, [r4, #0]
 800c5b8:	bd38      	pop	{r3, r4, r5, pc}
 800c5ba:	bf00      	nop
 800c5bc:	2000275c 	.word	0x2000275c

0800c5c0 <_getpid_r>:
 800c5c0:	f7f5 bd02 	b.w	8001fc8 <_getpid>

0800c5c4 <atan2>:
 800c5c4:	f000 b830 	b.w	800c628 <__ieee754_atan2>

0800c5c8 <fmod>:
 800c5c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5ca:	ed2d 8b02 	vpush	{d8}
 800c5ce:	ec57 6b10 	vmov	r6, r7, d0
 800c5d2:	ec55 4b11 	vmov	r4, r5, d1
 800c5d6:	f000 fb9f 	bl	800cd18 <__ieee754_fmod>
 800c5da:	4622      	mov	r2, r4
 800c5dc:	462b      	mov	r3, r5
 800c5de:	4630      	mov	r0, r6
 800c5e0:	4639      	mov	r1, r7
 800c5e2:	eeb0 8a40 	vmov.f32	s16, s0
 800c5e6:	eef0 8a60 	vmov.f32	s17, s1
 800c5ea:	f7f4 fa9f 	bl	8000b2c <__aeabi_dcmpun>
 800c5ee:	b990      	cbnz	r0, 800c616 <fmod+0x4e>
 800c5f0:	2200      	movs	r2, #0
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	4620      	mov	r0, r4
 800c5f6:	4629      	mov	r1, r5
 800c5f8:	f7f4 fa66 	bl	8000ac8 <__aeabi_dcmpeq>
 800c5fc:	b158      	cbz	r0, 800c616 <fmod+0x4e>
 800c5fe:	f7fe f85b 	bl	800a6b8 <__errno>
 800c602:	2321      	movs	r3, #33	; 0x21
 800c604:	6003      	str	r3, [r0, #0]
 800c606:	2200      	movs	r2, #0
 800c608:	2300      	movs	r3, #0
 800c60a:	4610      	mov	r0, r2
 800c60c:	4619      	mov	r1, r3
 800c60e:	f7f4 f91d 	bl	800084c <__aeabi_ddiv>
 800c612:	ec41 0b18 	vmov	d8, r0, r1
 800c616:	eeb0 0a48 	vmov.f32	s0, s16
 800c61a:	eef0 0a68 	vmov.f32	s1, s17
 800c61e:	ecbd 8b02 	vpop	{d8}
 800c622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c624:	0000      	movs	r0, r0
	...

0800c628 <__ieee754_atan2>:
 800c628:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c62c:	ec57 6b11 	vmov	r6, r7, d1
 800c630:	4273      	negs	r3, r6
 800c632:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800c7b0 <__ieee754_atan2+0x188>
 800c636:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800c63a:	4333      	orrs	r3, r6
 800c63c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800c640:	4543      	cmp	r3, r8
 800c642:	ec51 0b10 	vmov	r0, r1, d0
 800c646:	ee11 5a10 	vmov	r5, s2
 800c64a:	d80a      	bhi.n	800c662 <__ieee754_atan2+0x3a>
 800c64c:	4244      	negs	r4, r0
 800c64e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c652:	4304      	orrs	r4, r0
 800c654:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800c658:	4544      	cmp	r4, r8
 800c65a:	ee10 9a10 	vmov	r9, s0
 800c65e:	468e      	mov	lr, r1
 800c660:	d907      	bls.n	800c672 <__ieee754_atan2+0x4a>
 800c662:	4632      	mov	r2, r6
 800c664:	463b      	mov	r3, r7
 800c666:	f7f3 fe11 	bl	800028c <__adddf3>
 800c66a:	ec41 0b10 	vmov	d0, r0, r1
 800c66e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c672:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800c676:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c67a:	4334      	orrs	r4, r6
 800c67c:	d103      	bne.n	800c686 <__ieee754_atan2+0x5e>
 800c67e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c682:	f000 b8c5 	b.w	800c810 <atan>
 800c686:	17bc      	asrs	r4, r7, #30
 800c688:	f004 0402 	and.w	r4, r4, #2
 800c68c:	ea53 0909 	orrs.w	r9, r3, r9
 800c690:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800c694:	d107      	bne.n	800c6a6 <__ieee754_atan2+0x7e>
 800c696:	2c02      	cmp	r4, #2
 800c698:	d05f      	beq.n	800c75a <__ieee754_atan2+0x132>
 800c69a:	2c03      	cmp	r4, #3
 800c69c:	d1e5      	bne.n	800c66a <__ieee754_atan2+0x42>
 800c69e:	a140      	add	r1, pc, #256	; (adr r1, 800c7a0 <__ieee754_atan2+0x178>)
 800c6a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6a4:	e7e1      	b.n	800c66a <__ieee754_atan2+0x42>
 800c6a6:	4315      	orrs	r5, r2
 800c6a8:	d106      	bne.n	800c6b8 <__ieee754_atan2+0x90>
 800c6aa:	f1be 0f00 	cmp.w	lr, #0
 800c6ae:	da5f      	bge.n	800c770 <__ieee754_atan2+0x148>
 800c6b0:	a13d      	add	r1, pc, #244	; (adr r1, 800c7a8 <__ieee754_atan2+0x180>)
 800c6b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6b6:	e7d8      	b.n	800c66a <__ieee754_atan2+0x42>
 800c6b8:	4542      	cmp	r2, r8
 800c6ba:	d10f      	bne.n	800c6dc <__ieee754_atan2+0xb4>
 800c6bc:	4293      	cmp	r3, r2
 800c6be:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800c6c2:	d107      	bne.n	800c6d4 <__ieee754_atan2+0xac>
 800c6c4:	2c02      	cmp	r4, #2
 800c6c6:	d84c      	bhi.n	800c762 <__ieee754_atan2+0x13a>
 800c6c8:	4b33      	ldr	r3, [pc, #204]	; (800c798 <__ieee754_atan2+0x170>)
 800c6ca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c6ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c6d2:	e7ca      	b.n	800c66a <__ieee754_atan2+0x42>
 800c6d4:	2c02      	cmp	r4, #2
 800c6d6:	d848      	bhi.n	800c76a <__ieee754_atan2+0x142>
 800c6d8:	4b30      	ldr	r3, [pc, #192]	; (800c79c <__ieee754_atan2+0x174>)
 800c6da:	e7f6      	b.n	800c6ca <__ieee754_atan2+0xa2>
 800c6dc:	4543      	cmp	r3, r8
 800c6de:	d0e4      	beq.n	800c6aa <__ieee754_atan2+0x82>
 800c6e0:	1a9b      	subs	r3, r3, r2
 800c6e2:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800c6e6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c6ea:	da1e      	bge.n	800c72a <__ieee754_atan2+0x102>
 800c6ec:	2f00      	cmp	r7, #0
 800c6ee:	da01      	bge.n	800c6f4 <__ieee754_atan2+0xcc>
 800c6f0:	323c      	adds	r2, #60	; 0x3c
 800c6f2:	db1e      	blt.n	800c732 <__ieee754_atan2+0x10a>
 800c6f4:	4632      	mov	r2, r6
 800c6f6:	463b      	mov	r3, r7
 800c6f8:	f7f4 f8a8 	bl	800084c <__aeabi_ddiv>
 800c6fc:	ec41 0b10 	vmov	d0, r0, r1
 800c700:	f000 fa26 	bl	800cb50 <fabs>
 800c704:	f000 f884 	bl	800c810 <atan>
 800c708:	ec51 0b10 	vmov	r0, r1, d0
 800c70c:	2c01      	cmp	r4, #1
 800c70e:	d013      	beq.n	800c738 <__ieee754_atan2+0x110>
 800c710:	2c02      	cmp	r4, #2
 800c712:	d015      	beq.n	800c740 <__ieee754_atan2+0x118>
 800c714:	2c00      	cmp	r4, #0
 800c716:	d0a8      	beq.n	800c66a <__ieee754_atan2+0x42>
 800c718:	a317      	add	r3, pc, #92	; (adr r3, 800c778 <__ieee754_atan2+0x150>)
 800c71a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c71e:	f7f3 fdb3 	bl	8000288 <__aeabi_dsub>
 800c722:	a317      	add	r3, pc, #92	; (adr r3, 800c780 <__ieee754_atan2+0x158>)
 800c724:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c728:	e014      	b.n	800c754 <__ieee754_atan2+0x12c>
 800c72a:	a117      	add	r1, pc, #92	; (adr r1, 800c788 <__ieee754_atan2+0x160>)
 800c72c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c730:	e7ec      	b.n	800c70c <__ieee754_atan2+0xe4>
 800c732:	2000      	movs	r0, #0
 800c734:	2100      	movs	r1, #0
 800c736:	e7e9      	b.n	800c70c <__ieee754_atan2+0xe4>
 800c738:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c73c:	4619      	mov	r1, r3
 800c73e:	e794      	b.n	800c66a <__ieee754_atan2+0x42>
 800c740:	a30d      	add	r3, pc, #52	; (adr r3, 800c778 <__ieee754_atan2+0x150>)
 800c742:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c746:	f7f3 fd9f 	bl	8000288 <__aeabi_dsub>
 800c74a:	4602      	mov	r2, r0
 800c74c:	460b      	mov	r3, r1
 800c74e:	a10c      	add	r1, pc, #48	; (adr r1, 800c780 <__ieee754_atan2+0x158>)
 800c750:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c754:	f7f3 fd98 	bl	8000288 <__aeabi_dsub>
 800c758:	e787      	b.n	800c66a <__ieee754_atan2+0x42>
 800c75a:	a109      	add	r1, pc, #36	; (adr r1, 800c780 <__ieee754_atan2+0x158>)
 800c75c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c760:	e783      	b.n	800c66a <__ieee754_atan2+0x42>
 800c762:	a10b      	add	r1, pc, #44	; (adr r1, 800c790 <__ieee754_atan2+0x168>)
 800c764:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c768:	e77f      	b.n	800c66a <__ieee754_atan2+0x42>
 800c76a:	2000      	movs	r0, #0
 800c76c:	2100      	movs	r1, #0
 800c76e:	e77c      	b.n	800c66a <__ieee754_atan2+0x42>
 800c770:	a105      	add	r1, pc, #20	; (adr r1, 800c788 <__ieee754_atan2+0x160>)
 800c772:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c776:	e778      	b.n	800c66a <__ieee754_atan2+0x42>
 800c778:	33145c07 	.word	0x33145c07
 800c77c:	3ca1a626 	.word	0x3ca1a626
 800c780:	54442d18 	.word	0x54442d18
 800c784:	400921fb 	.word	0x400921fb
 800c788:	54442d18 	.word	0x54442d18
 800c78c:	3ff921fb 	.word	0x3ff921fb
 800c790:	54442d18 	.word	0x54442d18
 800c794:	3fe921fb 	.word	0x3fe921fb
 800c798:	0800d518 	.word	0x0800d518
 800c79c:	0800d530 	.word	0x0800d530
 800c7a0:	54442d18 	.word	0x54442d18
 800c7a4:	c00921fb 	.word	0xc00921fb
 800c7a8:	54442d18 	.word	0x54442d18
 800c7ac:	bff921fb 	.word	0xbff921fb
 800c7b0:	7ff00000 	.word	0x7ff00000

0800c7b4 <sqrt>:
 800c7b4:	b538      	push	{r3, r4, r5, lr}
 800c7b6:	ed2d 8b02 	vpush	{d8}
 800c7ba:	ec55 4b10 	vmov	r4, r5, d0
 800c7be:	f000 f9d1 	bl	800cb64 <__ieee754_sqrt>
 800c7c2:	4622      	mov	r2, r4
 800c7c4:	462b      	mov	r3, r5
 800c7c6:	4620      	mov	r0, r4
 800c7c8:	4629      	mov	r1, r5
 800c7ca:	eeb0 8a40 	vmov.f32	s16, s0
 800c7ce:	eef0 8a60 	vmov.f32	s17, s1
 800c7d2:	f7f4 f9ab 	bl	8000b2c <__aeabi_dcmpun>
 800c7d6:	b990      	cbnz	r0, 800c7fe <sqrt+0x4a>
 800c7d8:	2200      	movs	r2, #0
 800c7da:	2300      	movs	r3, #0
 800c7dc:	4620      	mov	r0, r4
 800c7de:	4629      	mov	r1, r5
 800c7e0:	f7f4 f97c 	bl	8000adc <__aeabi_dcmplt>
 800c7e4:	b158      	cbz	r0, 800c7fe <sqrt+0x4a>
 800c7e6:	f7fd ff67 	bl	800a6b8 <__errno>
 800c7ea:	2321      	movs	r3, #33	; 0x21
 800c7ec:	6003      	str	r3, [r0, #0]
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	4610      	mov	r0, r2
 800c7f4:	4619      	mov	r1, r3
 800c7f6:	f7f4 f829 	bl	800084c <__aeabi_ddiv>
 800c7fa:	ec41 0b18 	vmov	d8, r0, r1
 800c7fe:	eeb0 0a48 	vmov.f32	s0, s16
 800c802:	eef0 0a68 	vmov.f32	s1, s17
 800c806:	ecbd 8b02 	vpop	{d8}
 800c80a:	bd38      	pop	{r3, r4, r5, pc}
 800c80c:	0000      	movs	r0, r0
	...

0800c810 <atan>:
 800c810:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c814:	ec55 4b10 	vmov	r4, r5, d0
 800c818:	4bc3      	ldr	r3, [pc, #780]	; (800cb28 <atan+0x318>)
 800c81a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c81e:	429e      	cmp	r6, r3
 800c820:	46ab      	mov	fp, r5
 800c822:	dd18      	ble.n	800c856 <atan+0x46>
 800c824:	4bc1      	ldr	r3, [pc, #772]	; (800cb2c <atan+0x31c>)
 800c826:	429e      	cmp	r6, r3
 800c828:	dc01      	bgt.n	800c82e <atan+0x1e>
 800c82a:	d109      	bne.n	800c840 <atan+0x30>
 800c82c:	b144      	cbz	r4, 800c840 <atan+0x30>
 800c82e:	4622      	mov	r2, r4
 800c830:	462b      	mov	r3, r5
 800c832:	4620      	mov	r0, r4
 800c834:	4629      	mov	r1, r5
 800c836:	f7f3 fd29 	bl	800028c <__adddf3>
 800c83a:	4604      	mov	r4, r0
 800c83c:	460d      	mov	r5, r1
 800c83e:	e006      	b.n	800c84e <atan+0x3e>
 800c840:	f1bb 0f00 	cmp.w	fp, #0
 800c844:	f300 8131 	bgt.w	800caaa <atan+0x29a>
 800c848:	a59b      	add	r5, pc, #620	; (adr r5, 800cab8 <atan+0x2a8>)
 800c84a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c84e:	ec45 4b10 	vmov	d0, r4, r5
 800c852:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c856:	4bb6      	ldr	r3, [pc, #728]	; (800cb30 <atan+0x320>)
 800c858:	429e      	cmp	r6, r3
 800c85a:	dc14      	bgt.n	800c886 <atan+0x76>
 800c85c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800c860:	429e      	cmp	r6, r3
 800c862:	dc0d      	bgt.n	800c880 <atan+0x70>
 800c864:	a396      	add	r3, pc, #600	; (adr r3, 800cac0 <atan+0x2b0>)
 800c866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c86a:	ee10 0a10 	vmov	r0, s0
 800c86e:	4629      	mov	r1, r5
 800c870:	f7f3 fd0c 	bl	800028c <__adddf3>
 800c874:	4baf      	ldr	r3, [pc, #700]	; (800cb34 <atan+0x324>)
 800c876:	2200      	movs	r2, #0
 800c878:	f7f4 f94e 	bl	8000b18 <__aeabi_dcmpgt>
 800c87c:	2800      	cmp	r0, #0
 800c87e:	d1e6      	bne.n	800c84e <atan+0x3e>
 800c880:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800c884:	e02b      	b.n	800c8de <atan+0xce>
 800c886:	f000 f963 	bl	800cb50 <fabs>
 800c88a:	4bab      	ldr	r3, [pc, #684]	; (800cb38 <atan+0x328>)
 800c88c:	429e      	cmp	r6, r3
 800c88e:	ec55 4b10 	vmov	r4, r5, d0
 800c892:	f300 80bf 	bgt.w	800ca14 <atan+0x204>
 800c896:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800c89a:	429e      	cmp	r6, r3
 800c89c:	f300 80a0 	bgt.w	800c9e0 <atan+0x1d0>
 800c8a0:	ee10 2a10 	vmov	r2, s0
 800c8a4:	ee10 0a10 	vmov	r0, s0
 800c8a8:	462b      	mov	r3, r5
 800c8aa:	4629      	mov	r1, r5
 800c8ac:	f7f3 fcee 	bl	800028c <__adddf3>
 800c8b0:	4ba0      	ldr	r3, [pc, #640]	; (800cb34 <atan+0x324>)
 800c8b2:	2200      	movs	r2, #0
 800c8b4:	f7f3 fce8 	bl	8000288 <__aeabi_dsub>
 800c8b8:	2200      	movs	r2, #0
 800c8ba:	4606      	mov	r6, r0
 800c8bc:	460f      	mov	r7, r1
 800c8be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c8c2:	4620      	mov	r0, r4
 800c8c4:	4629      	mov	r1, r5
 800c8c6:	f7f3 fce1 	bl	800028c <__adddf3>
 800c8ca:	4602      	mov	r2, r0
 800c8cc:	460b      	mov	r3, r1
 800c8ce:	4630      	mov	r0, r6
 800c8d0:	4639      	mov	r1, r7
 800c8d2:	f7f3 ffbb 	bl	800084c <__aeabi_ddiv>
 800c8d6:	f04f 0a00 	mov.w	sl, #0
 800c8da:	4604      	mov	r4, r0
 800c8dc:	460d      	mov	r5, r1
 800c8de:	4622      	mov	r2, r4
 800c8e0:	462b      	mov	r3, r5
 800c8e2:	4620      	mov	r0, r4
 800c8e4:	4629      	mov	r1, r5
 800c8e6:	f7f3 fe87 	bl	80005f8 <__aeabi_dmul>
 800c8ea:	4602      	mov	r2, r0
 800c8ec:	460b      	mov	r3, r1
 800c8ee:	4680      	mov	r8, r0
 800c8f0:	4689      	mov	r9, r1
 800c8f2:	f7f3 fe81 	bl	80005f8 <__aeabi_dmul>
 800c8f6:	a374      	add	r3, pc, #464	; (adr r3, 800cac8 <atan+0x2b8>)
 800c8f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8fc:	4606      	mov	r6, r0
 800c8fe:	460f      	mov	r7, r1
 800c900:	f7f3 fe7a 	bl	80005f8 <__aeabi_dmul>
 800c904:	a372      	add	r3, pc, #456	; (adr r3, 800cad0 <atan+0x2c0>)
 800c906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c90a:	f7f3 fcbf 	bl	800028c <__adddf3>
 800c90e:	4632      	mov	r2, r6
 800c910:	463b      	mov	r3, r7
 800c912:	f7f3 fe71 	bl	80005f8 <__aeabi_dmul>
 800c916:	a370      	add	r3, pc, #448	; (adr r3, 800cad8 <atan+0x2c8>)
 800c918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c91c:	f7f3 fcb6 	bl	800028c <__adddf3>
 800c920:	4632      	mov	r2, r6
 800c922:	463b      	mov	r3, r7
 800c924:	f7f3 fe68 	bl	80005f8 <__aeabi_dmul>
 800c928:	a36d      	add	r3, pc, #436	; (adr r3, 800cae0 <atan+0x2d0>)
 800c92a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c92e:	f7f3 fcad 	bl	800028c <__adddf3>
 800c932:	4632      	mov	r2, r6
 800c934:	463b      	mov	r3, r7
 800c936:	f7f3 fe5f 	bl	80005f8 <__aeabi_dmul>
 800c93a:	a36b      	add	r3, pc, #428	; (adr r3, 800cae8 <atan+0x2d8>)
 800c93c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c940:	f7f3 fca4 	bl	800028c <__adddf3>
 800c944:	4632      	mov	r2, r6
 800c946:	463b      	mov	r3, r7
 800c948:	f7f3 fe56 	bl	80005f8 <__aeabi_dmul>
 800c94c:	a368      	add	r3, pc, #416	; (adr r3, 800caf0 <atan+0x2e0>)
 800c94e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c952:	f7f3 fc9b 	bl	800028c <__adddf3>
 800c956:	4642      	mov	r2, r8
 800c958:	464b      	mov	r3, r9
 800c95a:	f7f3 fe4d 	bl	80005f8 <__aeabi_dmul>
 800c95e:	a366      	add	r3, pc, #408	; (adr r3, 800caf8 <atan+0x2e8>)
 800c960:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c964:	4680      	mov	r8, r0
 800c966:	4689      	mov	r9, r1
 800c968:	4630      	mov	r0, r6
 800c96a:	4639      	mov	r1, r7
 800c96c:	f7f3 fe44 	bl	80005f8 <__aeabi_dmul>
 800c970:	a363      	add	r3, pc, #396	; (adr r3, 800cb00 <atan+0x2f0>)
 800c972:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c976:	f7f3 fc87 	bl	8000288 <__aeabi_dsub>
 800c97a:	4632      	mov	r2, r6
 800c97c:	463b      	mov	r3, r7
 800c97e:	f7f3 fe3b 	bl	80005f8 <__aeabi_dmul>
 800c982:	a361      	add	r3, pc, #388	; (adr r3, 800cb08 <atan+0x2f8>)
 800c984:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c988:	f7f3 fc7e 	bl	8000288 <__aeabi_dsub>
 800c98c:	4632      	mov	r2, r6
 800c98e:	463b      	mov	r3, r7
 800c990:	f7f3 fe32 	bl	80005f8 <__aeabi_dmul>
 800c994:	a35e      	add	r3, pc, #376	; (adr r3, 800cb10 <atan+0x300>)
 800c996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c99a:	f7f3 fc75 	bl	8000288 <__aeabi_dsub>
 800c99e:	4632      	mov	r2, r6
 800c9a0:	463b      	mov	r3, r7
 800c9a2:	f7f3 fe29 	bl	80005f8 <__aeabi_dmul>
 800c9a6:	a35c      	add	r3, pc, #368	; (adr r3, 800cb18 <atan+0x308>)
 800c9a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ac:	f7f3 fc6c 	bl	8000288 <__aeabi_dsub>
 800c9b0:	4632      	mov	r2, r6
 800c9b2:	463b      	mov	r3, r7
 800c9b4:	f7f3 fe20 	bl	80005f8 <__aeabi_dmul>
 800c9b8:	4602      	mov	r2, r0
 800c9ba:	460b      	mov	r3, r1
 800c9bc:	4640      	mov	r0, r8
 800c9be:	4649      	mov	r1, r9
 800c9c0:	f7f3 fc64 	bl	800028c <__adddf3>
 800c9c4:	4622      	mov	r2, r4
 800c9c6:	462b      	mov	r3, r5
 800c9c8:	f7f3 fe16 	bl	80005f8 <__aeabi_dmul>
 800c9cc:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800c9d0:	4602      	mov	r2, r0
 800c9d2:	460b      	mov	r3, r1
 800c9d4:	d14b      	bne.n	800ca6e <atan+0x25e>
 800c9d6:	4620      	mov	r0, r4
 800c9d8:	4629      	mov	r1, r5
 800c9da:	f7f3 fc55 	bl	8000288 <__aeabi_dsub>
 800c9de:	e72c      	b.n	800c83a <atan+0x2a>
 800c9e0:	ee10 0a10 	vmov	r0, s0
 800c9e4:	4b53      	ldr	r3, [pc, #332]	; (800cb34 <atan+0x324>)
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	4629      	mov	r1, r5
 800c9ea:	f7f3 fc4d 	bl	8000288 <__aeabi_dsub>
 800c9ee:	4b51      	ldr	r3, [pc, #324]	; (800cb34 <atan+0x324>)
 800c9f0:	4606      	mov	r6, r0
 800c9f2:	460f      	mov	r7, r1
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	4620      	mov	r0, r4
 800c9f8:	4629      	mov	r1, r5
 800c9fa:	f7f3 fc47 	bl	800028c <__adddf3>
 800c9fe:	4602      	mov	r2, r0
 800ca00:	460b      	mov	r3, r1
 800ca02:	4630      	mov	r0, r6
 800ca04:	4639      	mov	r1, r7
 800ca06:	f7f3 ff21 	bl	800084c <__aeabi_ddiv>
 800ca0a:	f04f 0a01 	mov.w	sl, #1
 800ca0e:	4604      	mov	r4, r0
 800ca10:	460d      	mov	r5, r1
 800ca12:	e764      	b.n	800c8de <atan+0xce>
 800ca14:	4b49      	ldr	r3, [pc, #292]	; (800cb3c <atan+0x32c>)
 800ca16:	429e      	cmp	r6, r3
 800ca18:	da1d      	bge.n	800ca56 <atan+0x246>
 800ca1a:	ee10 0a10 	vmov	r0, s0
 800ca1e:	4b48      	ldr	r3, [pc, #288]	; (800cb40 <atan+0x330>)
 800ca20:	2200      	movs	r2, #0
 800ca22:	4629      	mov	r1, r5
 800ca24:	f7f3 fc30 	bl	8000288 <__aeabi_dsub>
 800ca28:	4b45      	ldr	r3, [pc, #276]	; (800cb40 <atan+0x330>)
 800ca2a:	4606      	mov	r6, r0
 800ca2c:	460f      	mov	r7, r1
 800ca2e:	2200      	movs	r2, #0
 800ca30:	4620      	mov	r0, r4
 800ca32:	4629      	mov	r1, r5
 800ca34:	f7f3 fde0 	bl	80005f8 <__aeabi_dmul>
 800ca38:	4b3e      	ldr	r3, [pc, #248]	; (800cb34 <atan+0x324>)
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	f7f3 fc26 	bl	800028c <__adddf3>
 800ca40:	4602      	mov	r2, r0
 800ca42:	460b      	mov	r3, r1
 800ca44:	4630      	mov	r0, r6
 800ca46:	4639      	mov	r1, r7
 800ca48:	f7f3 ff00 	bl	800084c <__aeabi_ddiv>
 800ca4c:	f04f 0a02 	mov.w	sl, #2
 800ca50:	4604      	mov	r4, r0
 800ca52:	460d      	mov	r5, r1
 800ca54:	e743      	b.n	800c8de <atan+0xce>
 800ca56:	462b      	mov	r3, r5
 800ca58:	ee10 2a10 	vmov	r2, s0
 800ca5c:	4939      	ldr	r1, [pc, #228]	; (800cb44 <atan+0x334>)
 800ca5e:	2000      	movs	r0, #0
 800ca60:	f7f3 fef4 	bl	800084c <__aeabi_ddiv>
 800ca64:	f04f 0a03 	mov.w	sl, #3
 800ca68:	4604      	mov	r4, r0
 800ca6a:	460d      	mov	r5, r1
 800ca6c:	e737      	b.n	800c8de <atan+0xce>
 800ca6e:	4b36      	ldr	r3, [pc, #216]	; (800cb48 <atan+0x338>)
 800ca70:	4e36      	ldr	r6, [pc, #216]	; (800cb4c <atan+0x33c>)
 800ca72:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ca76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca7a:	f7f3 fc05 	bl	8000288 <__aeabi_dsub>
 800ca7e:	4622      	mov	r2, r4
 800ca80:	462b      	mov	r3, r5
 800ca82:	f7f3 fc01 	bl	8000288 <__aeabi_dsub>
 800ca86:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800ca8a:	4602      	mov	r2, r0
 800ca8c:	460b      	mov	r3, r1
 800ca8e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800ca92:	f7f3 fbf9 	bl	8000288 <__aeabi_dsub>
 800ca96:	f1bb 0f00 	cmp.w	fp, #0
 800ca9a:	4604      	mov	r4, r0
 800ca9c:	460d      	mov	r5, r1
 800ca9e:	f6bf aed6 	bge.w	800c84e <atan+0x3e>
 800caa2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800caa6:	461d      	mov	r5, r3
 800caa8:	e6d1      	b.n	800c84e <atan+0x3e>
 800caaa:	a51d      	add	r5, pc, #116	; (adr r5, 800cb20 <atan+0x310>)
 800caac:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cab0:	e6cd      	b.n	800c84e <atan+0x3e>
 800cab2:	bf00      	nop
 800cab4:	f3af 8000 	nop.w
 800cab8:	54442d18 	.word	0x54442d18
 800cabc:	bff921fb 	.word	0xbff921fb
 800cac0:	8800759c 	.word	0x8800759c
 800cac4:	7e37e43c 	.word	0x7e37e43c
 800cac8:	e322da11 	.word	0xe322da11
 800cacc:	3f90ad3a 	.word	0x3f90ad3a
 800cad0:	24760deb 	.word	0x24760deb
 800cad4:	3fa97b4b 	.word	0x3fa97b4b
 800cad8:	a0d03d51 	.word	0xa0d03d51
 800cadc:	3fb10d66 	.word	0x3fb10d66
 800cae0:	c54c206e 	.word	0xc54c206e
 800cae4:	3fb745cd 	.word	0x3fb745cd
 800cae8:	920083ff 	.word	0x920083ff
 800caec:	3fc24924 	.word	0x3fc24924
 800caf0:	5555550d 	.word	0x5555550d
 800caf4:	3fd55555 	.word	0x3fd55555
 800caf8:	2c6a6c2f 	.word	0x2c6a6c2f
 800cafc:	bfa2b444 	.word	0xbfa2b444
 800cb00:	52defd9a 	.word	0x52defd9a
 800cb04:	3fadde2d 	.word	0x3fadde2d
 800cb08:	af749a6d 	.word	0xaf749a6d
 800cb0c:	3fb3b0f2 	.word	0x3fb3b0f2
 800cb10:	fe231671 	.word	0xfe231671
 800cb14:	3fbc71c6 	.word	0x3fbc71c6
 800cb18:	9998ebc4 	.word	0x9998ebc4
 800cb1c:	3fc99999 	.word	0x3fc99999
 800cb20:	54442d18 	.word	0x54442d18
 800cb24:	3ff921fb 	.word	0x3ff921fb
 800cb28:	440fffff 	.word	0x440fffff
 800cb2c:	7ff00000 	.word	0x7ff00000
 800cb30:	3fdbffff 	.word	0x3fdbffff
 800cb34:	3ff00000 	.word	0x3ff00000
 800cb38:	3ff2ffff 	.word	0x3ff2ffff
 800cb3c:	40038000 	.word	0x40038000
 800cb40:	3ff80000 	.word	0x3ff80000
 800cb44:	bff00000 	.word	0xbff00000
 800cb48:	0800d568 	.word	0x0800d568
 800cb4c:	0800d548 	.word	0x0800d548

0800cb50 <fabs>:
 800cb50:	ec51 0b10 	vmov	r0, r1, d0
 800cb54:	ee10 2a10 	vmov	r2, s0
 800cb58:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cb5c:	ec43 2b10 	vmov	d0, r2, r3
 800cb60:	4770      	bx	lr
	...

0800cb64 <__ieee754_sqrt>:
 800cb64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb68:	ec55 4b10 	vmov	r4, r5, d0
 800cb6c:	4e67      	ldr	r6, [pc, #412]	; (800cd0c <__ieee754_sqrt+0x1a8>)
 800cb6e:	43ae      	bics	r6, r5
 800cb70:	ee10 0a10 	vmov	r0, s0
 800cb74:	ee10 2a10 	vmov	r2, s0
 800cb78:	4629      	mov	r1, r5
 800cb7a:	462b      	mov	r3, r5
 800cb7c:	d10d      	bne.n	800cb9a <__ieee754_sqrt+0x36>
 800cb7e:	f7f3 fd3b 	bl	80005f8 <__aeabi_dmul>
 800cb82:	4602      	mov	r2, r0
 800cb84:	460b      	mov	r3, r1
 800cb86:	4620      	mov	r0, r4
 800cb88:	4629      	mov	r1, r5
 800cb8a:	f7f3 fb7f 	bl	800028c <__adddf3>
 800cb8e:	4604      	mov	r4, r0
 800cb90:	460d      	mov	r5, r1
 800cb92:	ec45 4b10 	vmov	d0, r4, r5
 800cb96:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb9a:	2d00      	cmp	r5, #0
 800cb9c:	dc0b      	bgt.n	800cbb6 <__ieee754_sqrt+0x52>
 800cb9e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800cba2:	4326      	orrs	r6, r4
 800cba4:	d0f5      	beq.n	800cb92 <__ieee754_sqrt+0x2e>
 800cba6:	b135      	cbz	r5, 800cbb6 <__ieee754_sqrt+0x52>
 800cba8:	f7f3 fb6e 	bl	8000288 <__aeabi_dsub>
 800cbac:	4602      	mov	r2, r0
 800cbae:	460b      	mov	r3, r1
 800cbb0:	f7f3 fe4c 	bl	800084c <__aeabi_ddiv>
 800cbb4:	e7eb      	b.n	800cb8e <__ieee754_sqrt+0x2a>
 800cbb6:	1509      	asrs	r1, r1, #20
 800cbb8:	f000 808d 	beq.w	800ccd6 <__ieee754_sqrt+0x172>
 800cbbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cbc0:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800cbc4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cbc8:	07c9      	lsls	r1, r1, #31
 800cbca:	bf5c      	itt	pl
 800cbcc:	005b      	lslpl	r3, r3, #1
 800cbce:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800cbd2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cbd6:	bf58      	it	pl
 800cbd8:	0052      	lslpl	r2, r2, #1
 800cbda:	2500      	movs	r5, #0
 800cbdc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800cbe0:	1076      	asrs	r6, r6, #1
 800cbe2:	0052      	lsls	r2, r2, #1
 800cbe4:	f04f 0e16 	mov.w	lr, #22
 800cbe8:	46ac      	mov	ip, r5
 800cbea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cbee:	eb0c 0001 	add.w	r0, ip, r1
 800cbf2:	4298      	cmp	r0, r3
 800cbf4:	bfde      	ittt	le
 800cbf6:	1a1b      	suble	r3, r3, r0
 800cbf8:	eb00 0c01 	addle.w	ip, r0, r1
 800cbfc:	186d      	addle	r5, r5, r1
 800cbfe:	005b      	lsls	r3, r3, #1
 800cc00:	f1be 0e01 	subs.w	lr, lr, #1
 800cc04:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800cc08:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800cc0c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800cc10:	d1ed      	bne.n	800cbee <__ieee754_sqrt+0x8a>
 800cc12:	4674      	mov	r4, lr
 800cc14:	2720      	movs	r7, #32
 800cc16:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800cc1a:	4563      	cmp	r3, ip
 800cc1c:	eb01 000e 	add.w	r0, r1, lr
 800cc20:	dc02      	bgt.n	800cc28 <__ieee754_sqrt+0xc4>
 800cc22:	d113      	bne.n	800cc4c <__ieee754_sqrt+0xe8>
 800cc24:	4290      	cmp	r0, r2
 800cc26:	d811      	bhi.n	800cc4c <__ieee754_sqrt+0xe8>
 800cc28:	2800      	cmp	r0, #0
 800cc2a:	eb00 0e01 	add.w	lr, r0, r1
 800cc2e:	da57      	bge.n	800cce0 <__ieee754_sqrt+0x17c>
 800cc30:	f1be 0f00 	cmp.w	lr, #0
 800cc34:	db54      	blt.n	800cce0 <__ieee754_sqrt+0x17c>
 800cc36:	f10c 0801 	add.w	r8, ip, #1
 800cc3a:	eba3 030c 	sub.w	r3, r3, ip
 800cc3e:	4290      	cmp	r0, r2
 800cc40:	bf88      	it	hi
 800cc42:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 800cc46:	1a12      	subs	r2, r2, r0
 800cc48:	440c      	add	r4, r1
 800cc4a:	46c4      	mov	ip, r8
 800cc4c:	005b      	lsls	r3, r3, #1
 800cc4e:	3f01      	subs	r7, #1
 800cc50:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800cc54:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800cc58:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800cc5c:	d1dd      	bne.n	800cc1a <__ieee754_sqrt+0xb6>
 800cc5e:	4313      	orrs	r3, r2
 800cc60:	d01b      	beq.n	800cc9a <__ieee754_sqrt+0x136>
 800cc62:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800cd10 <__ieee754_sqrt+0x1ac>
 800cc66:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800cd14 <__ieee754_sqrt+0x1b0>
 800cc6a:	e9da 0100 	ldrd	r0, r1, [sl]
 800cc6e:	e9db 2300 	ldrd	r2, r3, [fp]
 800cc72:	f7f3 fb09 	bl	8000288 <__aeabi_dsub>
 800cc76:	e9da 8900 	ldrd	r8, r9, [sl]
 800cc7a:	4602      	mov	r2, r0
 800cc7c:	460b      	mov	r3, r1
 800cc7e:	4640      	mov	r0, r8
 800cc80:	4649      	mov	r1, r9
 800cc82:	f7f3 ff35 	bl	8000af0 <__aeabi_dcmple>
 800cc86:	b140      	cbz	r0, 800cc9a <__ieee754_sqrt+0x136>
 800cc88:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800cc8c:	e9da 0100 	ldrd	r0, r1, [sl]
 800cc90:	e9db 2300 	ldrd	r2, r3, [fp]
 800cc94:	d126      	bne.n	800cce4 <__ieee754_sqrt+0x180>
 800cc96:	3501      	adds	r5, #1
 800cc98:	463c      	mov	r4, r7
 800cc9a:	106a      	asrs	r2, r5, #1
 800cc9c:	0863      	lsrs	r3, r4, #1
 800cc9e:	07e9      	lsls	r1, r5, #31
 800cca0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800cca4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800cca8:	bf48      	it	mi
 800ccaa:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800ccae:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800ccb2:	461c      	mov	r4, r3
 800ccb4:	e76d      	b.n	800cb92 <__ieee754_sqrt+0x2e>
 800ccb6:	0ad3      	lsrs	r3, r2, #11
 800ccb8:	3815      	subs	r0, #21
 800ccba:	0552      	lsls	r2, r2, #21
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d0fa      	beq.n	800ccb6 <__ieee754_sqrt+0x152>
 800ccc0:	02dc      	lsls	r4, r3, #11
 800ccc2:	d50a      	bpl.n	800ccda <__ieee754_sqrt+0x176>
 800ccc4:	f1c1 0420 	rsb	r4, r1, #32
 800ccc8:	fa22 f404 	lsr.w	r4, r2, r4
 800cccc:	1e4d      	subs	r5, r1, #1
 800ccce:	408a      	lsls	r2, r1
 800ccd0:	4323      	orrs	r3, r4
 800ccd2:	1b41      	subs	r1, r0, r5
 800ccd4:	e772      	b.n	800cbbc <__ieee754_sqrt+0x58>
 800ccd6:	4608      	mov	r0, r1
 800ccd8:	e7f0      	b.n	800ccbc <__ieee754_sqrt+0x158>
 800ccda:	005b      	lsls	r3, r3, #1
 800ccdc:	3101      	adds	r1, #1
 800ccde:	e7ef      	b.n	800ccc0 <__ieee754_sqrt+0x15c>
 800cce0:	46e0      	mov	r8, ip
 800cce2:	e7aa      	b.n	800cc3a <__ieee754_sqrt+0xd6>
 800cce4:	f7f3 fad2 	bl	800028c <__adddf3>
 800cce8:	e9da 8900 	ldrd	r8, r9, [sl]
 800ccec:	4602      	mov	r2, r0
 800ccee:	460b      	mov	r3, r1
 800ccf0:	4640      	mov	r0, r8
 800ccf2:	4649      	mov	r1, r9
 800ccf4:	f7f3 fef2 	bl	8000adc <__aeabi_dcmplt>
 800ccf8:	b120      	cbz	r0, 800cd04 <__ieee754_sqrt+0x1a0>
 800ccfa:	1ca0      	adds	r0, r4, #2
 800ccfc:	bf08      	it	eq
 800ccfe:	3501      	addeq	r5, #1
 800cd00:	3402      	adds	r4, #2
 800cd02:	e7ca      	b.n	800cc9a <__ieee754_sqrt+0x136>
 800cd04:	3401      	adds	r4, #1
 800cd06:	f024 0401 	bic.w	r4, r4, #1
 800cd0a:	e7c6      	b.n	800cc9a <__ieee754_sqrt+0x136>
 800cd0c:	7ff00000 	.word	0x7ff00000
 800cd10:	200001d8 	.word	0x200001d8
 800cd14:	200001e0 	.word	0x200001e0

0800cd18 <__ieee754_fmod>:
 800cd18:	ec53 2b11 	vmov	r2, r3, d1
 800cd1c:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 800cd20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd24:	ea5c 0402 	orrs.w	r4, ip, r2
 800cd28:	ec51 0b10 	vmov	r0, r1, d0
 800cd2c:	ee11 7a10 	vmov	r7, s2
 800cd30:	ee11 ea10 	vmov	lr, s2
 800cd34:	461e      	mov	r6, r3
 800cd36:	d00c      	beq.n	800cd52 <__ieee754_fmod+0x3a>
 800cd38:	4c78      	ldr	r4, [pc, #480]	; (800cf1c <__ieee754_fmod+0x204>)
 800cd3a:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 800cd3e:	45a0      	cmp	r8, r4
 800cd40:	4689      	mov	r9, r1
 800cd42:	dc06      	bgt.n	800cd52 <__ieee754_fmod+0x3a>
 800cd44:	4254      	negs	r4, r2
 800cd46:	4d76      	ldr	r5, [pc, #472]	; (800cf20 <__ieee754_fmod+0x208>)
 800cd48:	4314      	orrs	r4, r2
 800cd4a:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 800cd4e:	42ac      	cmp	r4, r5
 800cd50:	d909      	bls.n	800cd66 <__ieee754_fmod+0x4e>
 800cd52:	f7f3 fc51 	bl	80005f8 <__aeabi_dmul>
 800cd56:	4602      	mov	r2, r0
 800cd58:	460b      	mov	r3, r1
 800cd5a:	f7f3 fd77 	bl	800084c <__aeabi_ddiv>
 800cd5e:	ec41 0b10 	vmov	d0, r0, r1
 800cd62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd66:	45e0      	cmp	r8, ip
 800cd68:	ee10 aa10 	vmov	sl, s0
 800cd6c:	ee10 4a10 	vmov	r4, s0
 800cd70:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800cd74:	dc09      	bgt.n	800cd8a <__ieee754_fmod+0x72>
 800cd76:	dbf2      	blt.n	800cd5e <__ieee754_fmod+0x46>
 800cd78:	4290      	cmp	r0, r2
 800cd7a:	d3f0      	bcc.n	800cd5e <__ieee754_fmod+0x46>
 800cd7c:	d105      	bne.n	800cd8a <__ieee754_fmod+0x72>
 800cd7e:	4b69      	ldr	r3, [pc, #420]	; (800cf24 <__ieee754_fmod+0x20c>)
 800cd80:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 800cd84:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cd88:	e7e9      	b.n	800cd5e <__ieee754_fmod+0x46>
 800cd8a:	4a65      	ldr	r2, [pc, #404]	; (800cf20 <__ieee754_fmod+0x208>)
 800cd8c:	ea19 0f02 	tst.w	r9, r2
 800cd90:	d148      	bne.n	800ce24 <__ieee754_fmod+0x10c>
 800cd92:	f1b8 0f00 	cmp.w	r8, #0
 800cd96:	d13d      	bne.n	800ce14 <__ieee754_fmod+0xfc>
 800cd98:	4963      	ldr	r1, [pc, #396]	; (800cf28 <__ieee754_fmod+0x210>)
 800cd9a:	4653      	mov	r3, sl
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	dc36      	bgt.n	800ce0e <__ieee754_fmod+0xf6>
 800cda0:	4216      	tst	r6, r2
 800cda2:	d14f      	bne.n	800ce44 <__ieee754_fmod+0x12c>
 800cda4:	f1bc 0f00 	cmp.w	ip, #0
 800cda8:	d144      	bne.n	800ce34 <__ieee754_fmod+0x11c>
 800cdaa:	4a5f      	ldr	r2, [pc, #380]	; (800cf28 <__ieee754_fmod+0x210>)
 800cdac:	463b      	mov	r3, r7
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	dc3d      	bgt.n	800ce2e <__ieee754_fmod+0x116>
 800cdb2:	485e      	ldr	r0, [pc, #376]	; (800cf2c <__ieee754_fmod+0x214>)
 800cdb4:	4281      	cmp	r1, r0
 800cdb6:	db4a      	blt.n	800ce4e <__ieee754_fmod+0x136>
 800cdb8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cdbc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cdc0:	485a      	ldr	r0, [pc, #360]	; (800cf2c <__ieee754_fmod+0x214>)
 800cdc2:	4282      	cmp	r2, r0
 800cdc4:	db57      	blt.n	800ce76 <__ieee754_fmod+0x15e>
 800cdc6:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800cdca:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 800cdce:	1a89      	subs	r1, r1, r2
 800cdd0:	1b98      	subs	r0, r3, r6
 800cdd2:	eba4 070e 	sub.w	r7, r4, lr
 800cdd6:	2900      	cmp	r1, #0
 800cdd8:	d162      	bne.n	800cea0 <__ieee754_fmod+0x188>
 800cdda:	4574      	cmp	r4, lr
 800cddc:	bf38      	it	cc
 800cdde:	f100 30ff 	addcc.w	r0, r0, #4294967295	; 0xffffffff
 800cde2:	2800      	cmp	r0, #0
 800cde4:	bfa4      	itt	ge
 800cde6:	463c      	movge	r4, r7
 800cde8:	4603      	movge	r3, r0
 800cdea:	ea53 0104 	orrs.w	r1, r3, r4
 800cdee:	d0c6      	beq.n	800cd7e <__ieee754_fmod+0x66>
 800cdf0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cdf4:	db69      	blt.n	800ceca <__ieee754_fmod+0x1b2>
 800cdf6:	494d      	ldr	r1, [pc, #308]	; (800cf2c <__ieee754_fmod+0x214>)
 800cdf8:	428a      	cmp	r2, r1
 800cdfa:	db6c      	blt.n	800ced6 <__ieee754_fmod+0x1be>
 800cdfc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ce00:	432b      	orrs	r3, r5
 800ce02:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 800ce06:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800ce0a:	4620      	mov	r0, r4
 800ce0c:	e7a7      	b.n	800cd5e <__ieee754_fmod+0x46>
 800ce0e:	3901      	subs	r1, #1
 800ce10:	005b      	lsls	r3, r3, #1
 800ce12:	e7c3      	b.n	800cd9c <__ieee754_fmod+0x84>
 800ce14:	4945      	ldr	r1, [pc, #276]	; (800cf2c <__ieee754_fmod+0x214>)
 800ce16:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	ddc0      	ble.n	800cda0 <__ieee754_fmod+0x88>
 800ce1e:	3901      	subs	r1, #1
 800ce20:	005b      	lsls	r3, r3, #1
 800ce22:	e7fa      	b.n	800ce1a <__ieee754_fmod+0x102>
 800ce24:	ea4f 5128 	mov.w	r1, r8, asr #20
 800ce28:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800ce2c:	e7b8      	b.n	800cda0 <__ieee754_fmod+0x88>
 800ce2e:	3a01      	subs	r2, #1
 800ce30:	005b      	lsls	r3, r3, #1
 800ce32:	e7bc      	b.n	800cdae <__ieee754_fmod+0x96>
 800ce34:	4a3d      	ldr	r2, [pc, #244]	; (800cf2c <__ieee754_fmod+0x214>)
 800ce36:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	ddb9      	ble.n	800cdb2 <__ieee754_fmod+0x9a>
 800ce3e:	3a01      	subs	r2, #1
 800ce40:	005b      	lsls	r3, r3, #1
 800ce42:	e7fa      	b.n	800ce3a <__ieee754_fmod+0x122>
 800ce44:	ea4f 522c 	mov.w	r2, ip, asr #20
 800ce48:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800ce4c:	e7b1      	b.n	800cdb2 <__ieee754_fmod+0x9a>
 800ce4e:	1a40      	subs	r0, r0, r1
 800ce50:	281f      	cmp	r0, #31
 800ce52:	dc0a      	bgt.n	800ce6a <__ieee754_fmod+0x152>
 800ce54:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 800ce58:	fa08 f800 	lsl.w	r8, r8, r0
 800ce5c:	fa2a f303 	lsr.w	r3, sl, r3
 800ce60:	ea43 0308 	orr.w	r3, r3, r8
 800ce64:	fa0a f400 	lsl.w	r4, sl, r0
 800ce68:	e7aa      	b.n	800cdc0 <__ieee754_fmod+0xa8>
 800ce6a:	4b31      	ldr	r3, [pc, #196]	; (800cf30 <__ieee754_fmod+0x218>)
 800ce6c:	1a5b      	subs	r3, r3, r1
 800ce6e:	fa0a f303 	lsl.w	r3, sl, r3
 800ce72:	2400      	movs	r4, #0
 800ce74:	e7a4      	b.n	800cdc0 <__ieee754_fmod+0xa8>
 800ce76:	1a80      	subs	r0, r0, r2
 800ce78:	281f      	cmp	r0, #31
 800ce7a:	dc0a      	bgt.n	800ce92 <__ieee754_fmod+0x17a>
 800ce7c:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 800ce80:	fa0c fc00 	lsl.w	ip, ip, r0
 800ce84:	fa27 f606 	lsr.w	r6, r7, r6
 800ce88:	ea46 060c 	orr.w	r6, r6, ip
 800ce8c:	fa07 fe00 	lsl.w	lr, r7, r0
 800ce90:	e79d      	b.n	800cdce <__ieee754_fmod+0xb6>
 800ce92:	4e27      	ldr	r6, [pc, #156]	; (800cf30 <__ieee754_fmod+0x218>)
 800ce94:	1ab6      	subs	r6, r6, r2
 800ce96:	fa07 f606 	lsl.w	r6, r7, r6
 800ce9a:	f04f 0e00 	mov.w	lr, #0
 800ce9e:	e796      	b.n	800cdce <__ieee754_fmod+0xb6>
 800cea0:	4574      	cmp	r4, lr
 800cea2:	bf38      	it	cc
 800cea4:	f100 30ff 	addcc.w	r0, r0, #4294967295	; 0xffffffff
 800cea8:	2800      	cmp	r0, #0
 800ceaa:	da05      	bge.n	800ceb8 <__ieee754_fmod+0x1a0>
 800ceac:	0fe0      	lsrs	r0, r4, #31
 800ceae:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800ceb2:	0064      	lsls	r4, r4, #1
 800ceb4:	3901      	subs	r1, #1
 800ceb6:	e78b      	b.n	800cdd0 <__ieee754_fmod+0xb8>
 800ceb8:	ea50 0307 	orrs.w	r3, r0, r7
 800cebc:	f43f af5f 	beq.w	800cd7e <__ieee754_fmod+0x66>
 800cec0:	0ffb      	lsrs	r3, r7, #31
 800cec2:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800cec6:	007c      	lsls	r4, r7, #1
 800cec8:	e7f4      	b.n	800ceb4 <__ieee754_fmod+0x19c>
 800ceca:	0fe1      	lsrs	r1, r4, #31
 800cecc:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800ced0:	0064      	lsls	r4, r4, #1
 800ced2:	3a01      	subs	r2, #1
 800ced4:	e78c      	b.n	800cdf0 <__ieee754_fmod+0xd8>
 800ced6:	1a89      	subs	r1, r1, r2
 800ced8:	2914      	cmp	r1, #20
 800ceda:	dc0a      	bgt.n	800cef2 <__ieee754_fmod+0x1da>
 800cedc:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800cee0:	fa03 f202 	lsl.w	r2, r3, r2
 800cee4:	40cc      	lsrs	r4, r1
 800cee6:	4322      	orrs	r2, r4
 800cee8:	410b      	asrs	r3, r1
 800ceea:	ea43 0105 	orr.w	r1, r3, r5
 800ceee:	4610      	mov	r0, r2
 800cef0:	e735      	b.n	800cd5e <__ieee754_fmod+0x46>
 800cef2:	291f      	cmp	r1, #31
 800cef4:	dc07      	bgt.n	800cf06 <__ieee754_fmod+0x1ee>
 800cef6:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800cefa:	40cc      	lsrs	r4, r1
 800cefc:	fa03 f202 	lsl.w	r2, r3, r2
 800cf00:	4322      	orrs	r2, r4
 800cf02:	462b      	mov	r3, r5
 800cf04:	e7f1      	b.n	800ceea <__ieee754_fmod+0x1d2>
 800cf06:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 800cf0a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800cf0e:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 800cf12:	32e2      	adds	r2, #226	; 0xe2
 800cf14:	fa43 f202 	asr.w	r2, r3, r2
 800cf18:	e7f3      	b.n	800cf02 <__ieee754_fmod+0x1ea>
 800cf1a:	bf00      	nop
 800cf1c:	7fefffff 	.word	0x7fefffff
 800cf20:	7ff00000 	.word	0x7ff00000
 800cf24:	0800d588 	.word	0x0800d588
 800cf28:	fffffbed 	.word	0xfffffbed
 800cf2c:	fffffc02 	.word	0xfffffc02
 800cf30:	fffffbe2 	.word	0xfffffbe2

0800cf34 <_init>:
 800cf34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf36:	bf00      	nop
 800cf38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf3a:	bc08      	pop	{r3}
 800cf3c:	469e      	mov	lr, r3
 800cf3e:	4770      	bx	lr

0800cf40 <_fini>:
 800cf40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf42:	bf00      	nop
 800cf44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf46:	bc08      	pop	{r3}
 800cf48:	469e      	mov	lr, r3
 800cf4a:	4770      	bx	lr
