
ARES-STM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d014  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000748  0800d1a8  0800d1a8  0001d1a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d8f0  0800d8f0  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d8f0  0800d8f0  0001d8f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d8f8  0800d8f8  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d8f8  0800d8f8  0001d8f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d8fc  0800d8fc  0001d8fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800d900  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002584  200001e8  0800dae8  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000276c  0800dae8  0002276c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021d6b  00000000  00000000  0002025b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004727  00000000  00000000  00041fc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c58  00000000  00000000  000466f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001609  00000000  00000000  00048348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e00f  00000000  00000000  00049951  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000212c8  00000000  00000000  00067960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b9b95  00000000  00000000  00088c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008984  00000000  00000000  001427c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0014b144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d18c 	.word	0x0800d18c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800d18c 	.word	0x0800d18c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <sendMessage>:
#include <string.h>

extern UART_HandleTypeDef huart2;


void sendMessage(SensorType sensorType, uint32_t timestamp, uint16_t sensorData) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	6039      	str	r1, [r7, #0]
 8000f4e:	71fb      	strb	r3, [r7, #7]
 8000f50:	4613      	mov	r3, r2
 8000f52:	80bb      	strh	r3, [r7, #4]
    CustomMessage message;
    message.startDelimiter = START_DELIMITER;
 8000f54:	235b      	movs	r3, #91	; 0x5b
 8000f56:	723b      	strb	r3, [r7, #8]
    message.sensorType = sensorType;
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	727b      	strb	r3, [r7, #9]
    message.timestamp = timestamp;
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	f8c7 300a 	str.w	r3, [r7, #10]
    message.sensorData = sensorData;
 8000f62:	88bb      	ldrh	r3, [r7, #4]
 8000f64:	81fb      	strh	r3, [r7, #14]
    message.checksum = START_DELIMITER + sensorType + (timestamp & 0xFF) + ((timestamp >> 8) & 0xFF) + ((timestamp >> 16) & 0xFF) + ((timestamp >> 24) & 0xFF) + (sensorData & 0xFF) + ((sensorData >> 8) & 0xFF);
 8000f66:	79fa      	ldrb	r2, [r7, #7]
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	441a      	add	r2, r3
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	0a1b      	lsrs	r3, r3, #8
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	441a      	add	r2, r3
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	0c1b      	lsrs	r3, r3, #16
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	441a      	add	r2, r3
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	0e1b      	lsrs	r3, r3, #24
 8000f82:	441a      	add	r2, r3
 8000f84:	88bb      	ldrh	r3, [r7, #4]
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	441a      	add	r2, r3
 8000f8a:	88bb      	ldrh	r3, [r7, #4]
 8000f8c:	0a1b      	lsrs	r3, r3, #8
 8000f8e:	b29b      	uxth	r3, r3
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	4413      	add	r3, r2
 8000f94:	335b      	adds	r3, #91	; 0x5b
 8000f96:	613b      	str	r3, [r7, #16]
    message.endDelimiter = END_DELIMITER;
 8000f98:	235d      	movs	r3, #93	; 0x5d
 8000f9a:	753b      	strb	r3, [r7, #20]
    HAL_UART_Transmit(&huart2, (uint8_t*)&message, CUSTOM_MESSAGE_SIZE, HAL_MAX_DELAY);
 8000f9c:	f107 0108 	add.w	r1, r7, #8
 8000fa0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fa4:	220a      	movs	r2, #10
 8000fa6:	4803      	ldr	r0, [pc, #12]	; (8000fb4 <sendMessage+0x70>)
 8000fa8:	f004 f974 	bl	8005294 <HAL_UART_Transmit>
}
 8000fac:	bf00      	nop
 8000fae:	3718      	adds	r7, #24
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	200002e0 	.word	0x200002e0

08000fb8 <sendLightSensorData>:

 void sendLightSensorData(uint16_t sensorData) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	80fb      	strh	r3, [r7, #6]
 	uint32_t curTime;
 	curTime = HAL_GetTick();
 8000fc2:	f001 fae1 	bl	8002588 <HAL_GetTick>
 8000fc6:	60f8      	str	r0, [r7, #12]
 	sendMessage(0x02, curTime, sensorData);
 8000fc8:	88fb      	ldrh	r3, [r7, #6]
 8000fca:	461a      	mov	r2, r3
 8000fcc:	68f9      	ldr	r1, [r7, #12]
 8000fce:	2002      	movs	r0, #2
 8000fd0:	f7ff ffb8 	bl	8000f44 <sendMessage>
 }
 8000fd4:	bf00      	nop
 8000fd6:	3710      	adds	r7, #16
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <LTR329_Init>:
#include "stm32l4xx_hal.h"
#include <stdint.h>

extern I2C_HandleTypeDef hi2c1;  // Assuming you are using hi2c1

void LTR329_Init() {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af04      	add	r7, sp, #16
    uint8_t data;

    // Activate the sensor
    data = LTR329_ACTIVE_MODE;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, LTR329_I2C_ADDRESS, LTR329_ALS_CONTR, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 8000fe6:	2364      	movs	r3, #100	; 0x64
 8000fe8:	9302      	str	r3, [sp, #8]
 8000fea:	2301      	movs	r3, #1
 8000fec:	9301      	str	r3, [sp, #4]
 8000fee:	1dfb      	adds	r3, r7, #7
 8000ff0:	9300      	str	r3, [sp, #0]
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	2280      	movs	r2, #128	; 0x80
 8000ff6:	2152      	movs	r1, #82	; 0x52
 8000ff8:	480a      	ldr	r0, [pc, #40]	; (8001024 <LTR329_Init+0x48>)
 8000ffa:	f002 f85b 	bl	80030b4 <HAL_I2C_Mem_Write>

    // Set measurement rate
    data = LTR329_MEAS_RATE;
 8000ffe:	2303      	movs	r3, #3
 8001000:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, LTR329_I2C_ADDRESS, LTR329_ALS_MEAS_RATE, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 8001002:	2364      	movs	r3, #100	; 0x64
 8001004:	9302      	str	r3, [sp, #8]
 8001006:	2301      	movs	r3, #1
 8001008:	9301      	str	r3, [sp, #4]
 800100a:	1dfb      	adds	r3, r7, #7
 800100c:	9300      	str	r3, [sp, #0]
 800100e:	2301      	movs	r3, #1
 8001010:	2285      	movs	r2, #133	; 0x85
 8001012:	2152      	movs	r1, #82	; 0x52
 8001014:	4803      	ldr	r0, [pc, #12]	; (8001024 <LTR329_Init+0x48>)
 8001016:	f002 f84d 	bl	80030b4 <HAL_I2C_Mem_Write>
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20000204 	.word	0x20000204

08001028 <LTR329_Read_Light>:

void LTR329_Read_Light(uint16_t *ch0, uint16_t *ch1) {
 8001028:	b580      	push	{r7, lr}
 800102a:	b088      	sub	sp, #32
 800102c:	af04      	add	r7, sp, #16
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
    uint8_t data[4];

    // Read 4 bytes of data starting from LTR329_ALS_DATA_CH1_0
    HAL_I2C_Mem_Read(&hi2c1, LTR329_I2C_ADDRESS, LTR329_ALS_DATA_CH1_0, I2C_MEMADD_SIZE_8BIT, data, 4, 100);
 8001032:	2364      	movs	r3, #100	; 0x64
 8001034:	9302      	str	r3, [sp, #8]
 8001036:	2304      	movs	r3, #4
 8001038:	9301      	str	r3, [sp, #4]
 800103a:	f107 030c 	add.w	r3, r7, #12
 800103e:	9300      	str	r3, [sp, #0]
 8001040:	2301      	movs	r3, #1
 8001042:	2288      	movs	r2, #136	; 0x88
 8001044:	2152      	movs	r1, #82	; 0x52
 8001046:	480d      	ldr	r0, [pc, #52]	; (800107c <LTR329_Read_Light+0x54>)
 8001048:	f002 f948 	bl	80032dc <HAL_I2C_Mem_Read>

    // Combine bytes to get the light data for each channel
    *ch1 = (uint16_t)(data[1] << 8) | data[0];
 800104c:	7b7b      	ldrb	r3, [r7, #13]
 800104e:	b29b      	uxth	r3, r3
 8001050:	021b      	lsls	r3, r3, #8
 8001052:	b29a      	uxth	r2, r3
 8001054:	7b3b      	ldrb	r3, [r7, #12]
 8001056:	b29b      	uxth	r3, r3
 8001058:	4313      	orrs	r3, r2
 800105a:	b29a      	uxth	r2, r3
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	801a      	strh	r2, [r3, #0]
    *ch0 = (uint16_t)(data[3] << 8) | data[2];
 8001060:	7bfb      	ldrb	r3, [r7, #15]
 8001062:	b29b      	uxth	r3, r3
 8001064:	021b      	lsls	r3, r3, #8
 8001066:	b29a      	uxth	r2, r3
 8001068:	7bbb      	ldrb	r3, [r7, #14]
 800106a:	b29b      	uxth	r3, r3
 800106c:	4313      	orrs	r3, r2
 800106e:	b29a      	uxth	r2, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	801a      	strh	r2, [r3, #0]
}
 8001074:	bf00      	nop
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	20000204 	.word	0x20000204

08001080 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE {
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 8001088:	1d39      	adds	r1, r7, #4
 800108a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800108e:	2201      	movs	r2, #1
 8001090:	4803      	ldr	r0, [pc, #12]	; (80010a0 <__io_putchar+0x20>)
 8001092:	f004 f8ff 	bl	8005294 <HAL_UART_Transmit>
	return ch;
 8001096:	687b      	ldr	r3, [r7, #4]
}
 8001098:	4618      	mov	r0, r3
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	200002e0 	.word	0x200002e0
 80010a4:	00000000 	.word	0x00000000

080010a8 <calculatePath>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t calculatePath(navigationInstruction* instructions){
 80010a8:	b5b0      	push	{r4, r5, r7, lr}
 80010aa:	b088      	sub	sp, #32
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
    uint8_t instructionCount = 0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	77fb      	strb	r3, [r7, #31]
    float deltaX = targetX - curX;
 80010b4:	4b86      	ldr	r3, [pc, #536]	; (80012d0 <calculatePath+0x228>)
 80010b6:	ed93 7a00 	vldr	s14, [r3]
 80010ba:	4b86      	ldr	r3, [pc, #536]	; (80012d4 <calculatePath+0x22c>)
 80010bc:	edd3 7a00 	vldr	s15, [r3]
 80010c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010c4:	edc7 7a05 	vstr	s15, [r7, #20]
    float deltaY = targetY - curY;
 80010c8:	4b83      	ldr	r3, [pc, #524]	; (80012d8 <calculatePath+0x230>)
 80010ca:	ed93 7a00 	vldr	s14, [r3]
 80010ce:	4b83      	ldr	r3, [pc, #524]	; (80012dc <calculatePath+0x234>)
 80010d0:	edd3 7a00 	vldr	s15, [r3]
 80010d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010d8:	edc7 7a04 	vstr	s15, [r7, #16]

    // Calculate the angle to the target point
    float targetAngle = atan2(deltaY, deltaX) * (180.0 / M_PI);
 80010dc:	6938      	ldr	r0, [r7, #16]
 80010de:	f7ff fa33 	bl	8000548 <__aeabi_f2d>
 80010e2:	4604      	mov	r4, r0
 80010e4:	460d      	mov	r5, r1
 80010e6:	6978      	ldr	r0, [r7, #20]
 80010e8:	f7ff fa2e 	bl	8000548 <__aeabi_f2d>
 80010ec:	4602      	mov	r2, r0
 80010ee:	460b      	mov	r3, r1
 80010f0:	ec43 2b11 	vmov	d1, r2, r3
 80010f4:	ec45 4b10 	vmov	d0, r4, r5
 80010f8:	f00b fb90 	bl	800c81c <atan2>
 80010fc:	ec51 0b10 	vmov	r0, r1, d0
 8001100:	a36f      	add	r3, pc, #444	; (adr r3, 80012c0 <calculatePath+0x218>)
 8001102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001106:	f7ff fa77 	bl	80005f8 <__aeabi_dmul>
 800110a:	4602      	mov	r2, r0
 800110c:	460b      	mov	r3, r1
 800110e:	4610      	mov	r0, r2
 8001110:	4619      	mov	r1, r3
 8001112:	f7ff fd49 	bl	8000ba8 <__aeabi_d2f>
 8001116:	4603      	mov	r3, r0
 8001118:	60fb      	str	r3, [r7, #12]
    targetAngle = fmod(targetAngle + 360.0, 360.0); // Ensure the angle is between 0 and 360
 800111a:	68f8      	ldr	r0, [r7, #12]
 800111c:	f7ff fa14 	bl	8000548 <__aeabi_f2d>
 8001120:	f04f 0200 	mov.w	r2, #0
 8001124:	4b6e      	ldr	r3, [pc, #440]	; (80012e0 <calculatePath+0x238>)
 8001126:	f7ff f8b1 	bl	800028c <__adddf3>
 800112a:	4602      	mov	r2, r0
 800112c:	460b      	mov	r3, r1
 800112e:	ec43 2b17 	vmov	d7, r2, r3
 8001132:	ed9f 1b65 	vldr	d1, [pc, #404]	; 80012c8 <calculatePath+0x220>
 8001136:	eeb0 0a47 	vmov.f32	s0, s14
 800113a:	eef0 0a67 	vmov.f32	s1, s15
 800113e:	f00b fb6f 	bl	800c820 <fmod>
 8001142:	ec53 2b10 	vmov	r2, r3, d0
 8001146:	4610      	mov	r0, r2
 8001148:	4619      	mov	r1, r3
 800114a:	f7ff fd2d 	bl	8000ba8 <__aeabi_d2f>
 800114e:	4603      	mov	r3, r0
 8001150:	60fb      	str	r3, [r7, #12]

    // Calculate the shortest turn to the target angle
    float turnAngle = targetAngle - curAngle;
 8001152:	4b64      	ldr	r3, [pc, #400]	; (80012e4 <calculatePath+0x23c>)
 8001154:	edd3 7a00 	vldr	s15, [r3]
 8001158:	ed97 7a03 	vldr	s14, [r7, #12]
 800115c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001160:	edc7 7a06 	vstr	s15, [r7, #24]
    if (turnAngle < -180.0) turnAngle += 360.0;
 8001164:	edd7 7a06 	vldr	s15, [r7, #24]
 8001168:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 80012e8 <calculatePath+0x240>
 800116c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001174:	d507      	bpl.n	8001186 <calculatePath+0xde>
 8001176:	edd7 7a06 	vldr	s15, [r7, #24]
 800117a:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 80012ec <calculatePath+0x244>
 800117e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001182:	edc7 7a06 	vstr	s15, [r7, #24]
    if (turnAngle > 180.0) turnAngle -= 360.0;
 8001186:	edd7 7a06 	vldr	s15, [r7, #24]
 800118a:	ed9f 7a59 	vldr	s14, [pc, #356]	; 80012f0 <calculatePath+0x248>
 800118e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001196:	dd07      	ble.n	80011a8 <calculatePath+0x100>
 8001198:	edd7 7a06 	vldr	s15, [r7, #24]
 800119c:	ed9f 7a53 	vldr	s14, [pc, #332]	; 80012ec <calculatePath+0x244>
 80011a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80011a4:	edc7 7a06 	vstr	s15, [r7, #24]

    // Turn to face the target point
    if (turnAngle != 0.0) {
 80011a8:	edd7 7a06 	vldr	s15, [r7, #24]
 80011ac:	eef5 7a40 	vcmp.f32	s15, #0.0
 80011b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011b4:	d025      	beq.n	8001202 <calculatePath+0x15a>
        instructions[instructionCount].instructionType = turnAngle > 0.0 ? CLOCKWISE : COUNTERCLOCKWISE;
 80011b6:	edd7 7a06 	vldr	s15, [r7, #24]
 80011ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011c2:	dd01      	ble.n	80011c8 <calculatePath+0x120>
 80011c4:	2104      	movs	r1, #4
 80011c6:	e000      	b.n	80011ca <calculatePath+0x122>
 80011c8:	2105      	movs	r1, #5
 80011ca:	7ffa      	ldrb	r2, [r7, #31]
 80011cc:	4613      	mov	r3, r2
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	4413      	add	r3, r2
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	4413      	add	r3, r2
 80011d6:	460a      	mov	r2, r1
 80011d8:	701a      	strb	r2, [r3, #0]
        instructions[instructionCount].instructionValue = fabs(turnAngle);
 80011da:	7ffa      	ldrb	r2, [r7, #31]
 80011dc:	4613      	mov	r3, r2
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	4413      	add	r3, r2
 80011e2:	687a      	ldr	r2, [r7, #4]
 80011e4:	4413      	add	r3, r2
 80011e6:	edd7 7a06 	vldr	s15, [r7, #24]
 80011ea:	eef0 7ae7 	vabs.f32	s15, s15
 80011ee:	3301      	adds	r3, #1
 80011f0:	ee17 2a90 	vmov	r2, s15
 80011f4:	601a      	str	r2, [r3, #0]
        instructionCount++;
 80011f6:	7ffb      	ldrb	r3, [r7, #31]
 80011f8:	3301      	adds	r3, #1
 80011fa:	77fb      	strb	r3, [r7, #31]
        plannedAngle = targetAngle;
 80011fc:	4a3d      	ldr	r2, [pc, #244]	; (80012f4 <calculatePath+0x24c>)
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	6013      	str	r3, [r2, #0]
    }

    // Move to the target point
    float distance = sqrt(deltaX * deltaX + deltaY * deltaY);
 8001202:	edd7 7a05 	vldr	s15, [r7, #20]
 8001206:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800120a:	edd7 7a04 	vldr	s15, [r7, #16]
 800120e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001212:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001216:	ee17 0a90 	vmov	r0, s15
 800121a:	f7ff f995 	bl	8000548 <__aeabi_f2d>
 800121e:	4602      	mov	r2, r0
 8001220:	460b      	mov	r3, r1
 8001222:	ec43 2b10 	vmov	d0, r2, r3
 8001226:	f00b fbf1 	bl	800ca0c <sqrt>
 800122a:	ec53 2b10 	vmov	r2, r3, d0
 800122e:	4610      	mov	r0, r2
 8001230:	4619      	mov	r1, r3
 8001232:	f7ff fcb9 	bl	8000ba8 <__aeabi_d2f>
 8001236:	4603      	mov	r3, r0
 8001238:	60bb      	str	r3, [r7, #8]
    instructions[instructionCount].instructionType = turnAngle >= -90.0 && turnAngle <= 90.0 ? FORWARD : BACKWARD;
 800123a:	edd7 7a06 	vldr	s15, [r7, #24]
 800123e:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80012f8 <calculatePath+0x250>
 8001242:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800124a:	db0a      	blt.n	8001262 <calculatePath+0x1ba>
 800124c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001250:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80012fc <calculatePath+0x254>
 8001254:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800125c:	d801      	bhi.n	8001262 <calculatePath+0x1ba>
 800125e:	2102      	movs	r1, #2
 8001260:	e000      	b.n	8001264 <calculatePath+0x1bc>
 8001262:	2103      	movs	r1, #3
 8001264:	7ffa      	ldrb	r2, [r7, #31]
 8001266:	4613      	mov	r3, r2
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	4413      	add	r3, r2
 800126c:	687a      	ldr	r2, [r7, #4]
 800126e:	4413      	add	r3, r2
 8001270:	460a      	mov	r2, r1
 8001272:	701a      	strb	r2, [r3, #0]
    instructions[instructionCount].instructionValue = distance;
 8001274:	7ffa      	ldrb	r2, [r7, #31]
 8001276:	4613      	mov	r3, r2
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	4413      	add	r3, r2
 800127c:	687a      	ldr	r2, [r7, #4]
 800127e:	4413      	add	r3, r2
 8001280:	3301      	adds	r3, #1
 8001282:	68ba      	ldr	r2, [r7, #8]
 8001284:	601a      	str	r2, [r3, #0]
    instructionCount++;
 8001286:	7ffb      	ldrb	r3, [r7, #31]
 8001288:	3301      	adds	r3, #1
 800128a:	77fb      	strb	r3, [r7, #31]

    // Add a stop instruction
    instructions[instructionCount].instructionType = STOP;
 800128c:	7ffa      	ldrb	r2, [r7, #31]
 800128e:	4613      	mov	r3, r2
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	4413      	add	r3, r2
 8001294:	687a      	ldr	r2, [r7, #4]
 8001296:	4413      	add	r3, r2
 8001298:	2206      	movs	r2, #6
 800129a:	701a      	strb	r2, [r3, #0]
    instructions[instructionCount].instructionValue = 0.0;
 800129c:	7ffa      	ldrb	r2, [r7, #31]
 800129e:	4613      	mov	r3, r2
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	4413      	add	r3, r2
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	4413      	add	r3, r2
 80012a8:	3301      	adds	r3, #1
 80012aa:	f04f 0200 	mov.w	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
    instructionCount++;
 80012b0:	7ffb      	ldrb	r3, [r7, #31]
 80012b2:	3301      	adds	r3, #1
 80012b4:	77fb      	strb	r3, [r7, #31]

    return instructionCount;
 80012b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3720      	adds	r7, #32
 80012bc:	46bd      	mov	sp, r7
 80012be:	bdb0      	pop	{r4, r5, r7, pc}
 80012c0:	1a63c1f8 	.word	0x1a63c1f8
 80012c4:	404ca5dc 	.word	0x404ca5dc
 80012c8:	00000000 	.word	0x00000000
 80012cc:	40768000 	.word	0x40768000
 80012d0:	20000440 	.word	0x20000440
 80012d4:	20000434 	.word	0x20000434
 80012d8:	20000444 	.word	0x20000444
 80012dc:	20000438 	.word	0x20000438
 80012e0:	40768000 	.word	0x40768000
 80012e4:	2000043c 	.word	0x2000043c
 80012e8:	c3340000 	.word	0xc3340000
 80012ec:	43b40000 	.word	0x43b40000
 80012f0:	43340000 	.word	0x43340000
 80012f4:	20000448 	.word	0x20000448
 80012f8:	c2b40000 	.word	0xc2b40000
 80012fc:	42b40000 	.word	0x42b40000

08001300 <transmitInstructions>:

void transmitInstructions(navigationInstruction* instructions, uint8_t instructionCnt){
 8001300:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001304:	b087      	sub	sp, #28
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
 800130a:	460b      	mov	r3, r1
 800130c:	70fb      	strb	r3, [r7, #3]
 800130e:	466b      	mov	r3, sp
 8001310:	461e      	mov	r6, r3
      Transmissions consists of a START_DELIMITER, Instruction Count, payload and END_DELIMITER
      Instruction Count is a 1 byte value
      Payload consists of the instructions which are 5 bytes each
      The data is transmitted on USART2 using HAL_UART_Transmit
    */
    uint8_t transmission[instructionCnt*sizeof(navigationInstruction) + 3];
 8001312:	78fa      	ldrb	r2, [r7, #3]
 8001314:	4613      	mov	r3, r2
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	4413      	add	r3, r2
 800131a:	1cd9      	adds	r1, r3, #3
 800131c:	460b      	mov	r3, r1
 800131e:	3b01      	subs	r3, #1
 8001320:	613b      	str	r3, [r7, #16]
 8001322:	2300      	movs	r3, #0
 8001324:	4688      	mov	r8, r1
 8001326:	4699      	mov	r9, r3
 8001328:	f04f 0200 	mov.w	r2, #0
 800132c:	f04f 0300 	mov.w	r3, #0
 8001330:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001334:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001338:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800133c:	2300      	movs	r3, #0
 800133e:	460c      	mov	r4, r1
 8001340:	461d      	mov	r5, r3
 8001342:	f04f 0200 	mov.w	r2, #0
 8001346:	f04f 0300 	mov.w	r3, #0
 800134a:	00eb      	lsls	r3, r5, #3
 800134c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001350:	00e2      	lsls	r2, r4, #3
 8001352:	1dcb      	adds	r3, r1, #7
 8001354:	08db      	lsrs	r3, r3, #3
 8001356:	00db      	lsls	r3, r3, #3
 8001358:	ebad 0d03 	sub.w	sp, sp, r3
 800135c:	466b      	mov	r3, sp
 800135e:	3300      	adds	r3, #0
 8001360:	60fb      	str	r3, [r7, #12]

    transmission[0] = START_DELIMITER;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	225b      	movs	r2, #91	; 0x5b
 8001366:	701a      	strb	r2, [r3, #0]
    transmission[1] = instructionCnt;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	78fa      	ldrb	r2, [r7, #3]
 800136c:	705a      	strb	r2, [r3, #1]
    for (int i = 0; i < instructionCnt; i++) {
 800136e:	2300      	movs	r3, #0
 8001370:	617b      	str	r3, [r7, #20]
 8001372:	e020      	b.n	80013b6 <transmitInstructions+0xb6>
        transmission[2 + i*sizeof(navigationInstruction)] = instructions[i].instructionType;
 8001374:	697a      	ldr	r2, [r7, #20]
 8001376:	4613      	mov	r3, r2
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	4413      	add	r3, r2
 800137c:	687a      	ldr	r2, [r7, #4]
 800137e:	18d1      	adds	r1, r2, r3
 8001380:	697a      	ldr	r2, [r7, #20]
 8001382:	4613      	mov	r3, r2
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	4413      	add	r3, r2
 8001388:	3302      	adds	r3, #2
 800138a:	7809      	ldrb	r1, [r1, #0]
 800138c:	68fa      	ldr	r2, [r7, #12]
 800138e:	54d1      	strb	r1, [r2, r3]
        memcpy(&transmission[3 + i*sizeof(navigationInstruction)], &instructions[i].instructionValue, 4);
 8001390:	697a      	ldr	r2, [r7, #20]
 8001392:	4613      	mov	r3, r2
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	4413      	add	r3, r2
 8001398:	3303      	adds	r3, #3
 800139a:	68fa      	ldr	r2, [r7, #12]
 800139c:	18d1      	adds	r1, r2, r3
 800139e:	697a      	ldr	r2, [r7, #20]
 80013a0:	4613      	mov	r3, r2
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	4413      	add	r3, r2
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	4413      	add	r3, r2
 80013aa:	3301      	adds	r3, #1
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	600b      	str	r3, [r1, #0]
    for (int i = 0; i < instructionCnt; i++) {
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	3301      	adds	r3, #1
 80013b4:	617b      	str	r3, [r7, #20]
 80013b6:	78fb      	ldrb	r3, [r7, #3]
 80013b8:	697a      	ldr	r2, [r7, #20]
 80013ba:	429a      	cmp	r2, r3
 80013bc:	dbda      	blt.n	8001374 <transmitInstructions+0x74>
    }
    transmission[instructionCnt*sizeof(navigationInstruction) + 2] = END_DELIMITER;
 80013be:	78fa      	ldrb	r2, [r7, #3]
 80013c0:	4613      	mov	r3, r2
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	4413      	add	r3, r2
 80013c6:	3302      	adds	r3, #2
 80013c8:	68fa      	ldr	r2, [r7, #12]
 80013ca:	215d      	movs	r1, #93	; 0x5d
 80013cc:	54d1      	strb	r1, [r2, r3]
     HAL_UART_Transmit(&huart2, transmission, instructionCnt*sizeof(navigationInstruction) + 3, HAL_MAX_DELAY);
 80013ce:	78fb      	ldrb	r3, [r7, #3]
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	461a      	mov	r2, r3
 80013d4:	0092      	lsls	r2, r2, #2
 80013d6:	4413      	add	r3, r2
 80013d8:	b29b      	uxth	r3, r3
 80013da:	3303      	adds	r3, #3
 80013dc:	b29a      	uxth	r2, r3
 80013de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013e2:	68f9      	ldr	r1, [r7, #12]
 80013e4:	480a      	ldr	r0, [pc, #40]	; (8001410 <transmitInstructions+0x110>)
 80013e6:	f003 ff55 	bl	8005294 <HAL_UART_Transmit>
    receiveInstructions(transmission, instructionCnt*sizeof(navigationInstruction) + 3);
 80013ea:	78fb      	ldrb	r3, [r7, #3]
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	461a      	mov	r2, r3
 80013f0:	0092      	lsls	r2, r2, #2
 80013f2:	4413      	add	r3, r2
 80013f4:	b29b      	uxth	r3, r3
 80013f6:	3303      	adds	r3, #3
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	4619      	mov	r1, r3
 80013fc:	68f8      	ldr	r0, [r7, #12]
 80013fe:	f000 f809 	bl	8001414 <receiveInstructions>
 8001402:	46b5      	mov	sp, r6
}
 8001404:	bf00      	nop
 8001406:	371c      	adds	r7, #28
 8001408:	46bd      	mov	sp, r7
 800140a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800140e:	bf00      	nop
 8001410:	200002e0 	.word	0x200002e0

08001414 <receiveInstructions>:

// Function to receive and decode instructions
uint8_t receiveInstructions(uint8_t* data, uint16_t dataLength) {
 8001414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001418:	b08b      	sub	sp, #44	; 0x2c
 800141a:	af00      	add	r7, sp, #0
 800141c:	6178      	str	r0, [r7, #20]
 800141e:	460b      	mov	r3, r1
 8001420:	827b      	strh	r3, [r7, #18]
 8001422:	466b      	mov	r3, sp
 8001424:	607b      	str	r3, [r7, #4]
    // Check the start and end delimiters
    if (data[0] != START_DELIMITER || data[dataLength - 1] != END_DELIMITER) {
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	2b5b      	cmp	r3, #91	; 0x5b
 800142c:	d106      	bne.n	800143c <receiveInstructions+0x28>
 800142e:	8a7b      	ldrh	r3, [r7, #18]
 8001430:	3b01      	subs	r3, #1
 8001432:	697a      	ldr	r2, [r7, #20]
 8001434:	4413      	add	r3, r2
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	2b5d      	cmp	r3, #93	; 0x5d
 800143a:	d001      	beq.n	8001440 <receiveInstructions+0x2c>
        return 0; // Invalid data
 800143c:	2300      	movs	r3, #0
 800143e:	e07e      	b.n	800153e <receiveInstructions+0x12a>
    }

    // Calculate the number of instructions
    uint16_t numInstructions = (dataLength - 2) / sizeof(navigationInstruction);
 8001440:	8a7b      	ldrh	r3, [r7, #18]
 8001442:	3b02      	subs	r3, #2
 8001444:	461a      	mov	r2, r3
 8001446:	4b41      	ldr	r3, [pc, #260]	; (800154c <receiveInstructions+0x138>)
 8001448:	fba3 2302 	umull	r2, r3, r3, r2
 800144c:	089b      	lsrs	r3, r3, #2
 800144e:	84bb      	strh	r3, [r7, #36]	; 0x24
    //check that the calculated number of instructions matches the transmitted number
    if (numInstructions != data[1]) {
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	3301      	adds	r3, #1
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	b29b      	uxth	r3, r3
 8001458:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800145a:	429a      	cmp	r2, r3
 800145c:	d001      	beq.n	8001462 <receiveInstructions+0x4e>
        return 0; // Invalid data
 800145e:	2300      	movs	r3, #0
 8001460:	e06d      	b.n	800153e <receiveInstructions+0x12a>
    }
    navigationInstruction instructions[numInstructions];
 8001462:	8cbe      	ldrh	r6, [r7, #36]	; 0x24
 8001464:	4633      	mov	r3, r6
 8001466:	3b01      	subs	r3, #1
 8001468:	623b      	str	r3, [r7, #32]
 800146a:	b2b3      	uxth	r3, r6
 800146c:	2200      	movs	r2, #0
 800146e:	60bb      	str	r3, [r7, #8]
 8001470:	60fa      	str	r2, [r7, #12]
 8001472:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001476:	f04f 0000 	mov.w	r0, #0
 800147a:	f04f 0100 	mov.w	r1, #0
 800147e:	0099      	lsls	r1, r3, #2
 8001480:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001484:	0090      	lsls	r0, r2, #2
 8001486:	4602      	mov	r2, r0
 8001488:	460b      	mov	r3, r1
 800148a:	68b9      	ldr	r1, [r7, #8]
 800148c:	eb12 0801 	adds.w	r8, r2, r1
 8001490:	68f9      	ldr	r1, [r7, #12]
 8001492:	eb43 0901 	adc.w	r9, r3, r1
 8001496:	f04f 0200 	mov.w	r2, #0
 800149a:	f04f 0300 	mov.w	r3, #0
 800149e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80014a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80014a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80014aa:	b2b3      	uxth	r3, r6
 80014ac:	2200      	movs	r2, #0
 80014ae:	469a      	mov	sl, r3
 80014b0:	4693      	mov	fp, r2
 80014b2:	4652      	mov	r2, sl
 80014b4:	465b      	mov	r3, fp
 80014b6:	f04f 0000 	mov.w	r0, #0
 80014ba:	f04f 0100 	mov.w	r1, #0
 80014be:	0099      	lsls	r1, r3, #2
 80014c0:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80014c4:	0090      	lsls	r0, r2, #2
 80014c6:	4602      	mov	r2, r0
 80014c8:	460b      	mov	r3, r1
 80014ca:	eb12 040a 	adds.w	r4, r2, sl
 80014ce:	eb43 050b 	adc.w	r5, r3, fp
 80014d2:	f04f 0200 	mov.w	r2, #0
 80014d6:	f04f 0300 	mov.w	r3, #0
 80014da:	00eb      	lsls	r3, r5, #3
 80014dc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80014e0:	00e2      	lsls	r2, r4, #3
 80014e2:	4632      	mov	r2, r6
 80014e4:	4613      	mov	r3, r2
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	4413      	add	r3, r2
 80014ea:	3307      	adds	r3, #7
 80014ec:	08db      	lsrs	r3, r3, #3
 80014ee:	00db      	lsls	r3, r3, #3
 80014f0:	ebad 0d03 	sub.w	sp, sp, r3
 80014f4:	466b      	mov	r3, sp
 80014f6:	3300      	adds	r3, #0
 80014f8:	61fb      	str	r3, [r7, #28]

    // Decode the instructions
    for (uint16_t i = 0; i < numInstructions; i++) {
 80014fa:	2300      	movs	r3, #0
 80014fc:	84fb      	strh	r3, [r7, #38]	; 0x26
 80014fe:	e013      	b.n	8001528 <receiveInstructions+0x114>
        memcpy(&instructions[i], &data[i * sizeof(navigationInstruction) + 1], sizeof(navigationInstruction));
 8001500:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001502:	4613      	mov	r3, r2
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	4413      	add	r3, r2
 8001508:	69fa      	ldr	r2, [r7, #28]
 800150a:	18d0      	adds	r0, r2, r3
 800150c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800150e:	4613      	mov	r3, r2
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	4413      	add	r3, r2
 8001514:	3301      	adds	r3, #1
 8001516:	697a      	ldr	r2, [r7, #20]
 8001518:	4413      	add	r3, r2
 800151a:	2205      	movs	r2, #5
 800151c:	4619      	mov	r1, r3
 800151e:	f009 fa22 	bl	800a966 <memcpy>
    for (uint16_t i = 0; i < numInstructions; i++) {
 8001522:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001524:	3301      	adds	r3, #1
 8001526:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001528:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800152a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800152c:	429a      	cmp	r2, r3
 800152e:	d3e7      	bcc.n	8001500 <receiveInstructions+0xec>
    }

    // Print the instructions
    printInstructions(instructions, numInstructions);
 8001530:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001532:	4619      	mov	r1, r3
 8001534:	69f8      	ldr	r0, [r7, #28]
 8001536:	f000 f80b 	bl	8001550 <printInstructions>
    return numInstructions;
 800153a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800153c:	b2db      	uxtb	r3, r3
 800153e:	f8d7 d004 	ldr.w	sp, [r7, #4]
}
 8001542:	4618      	mov	r0, r3
 8001544:	372c      	adds	r7, #44	; 0x2c
 8001546:	46bd      	mov	sp, r7
 8001548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800154c:	cccccccd 	.word	0xcccccccd

08001550 <printInstructions>:

// Function to print the instructions
void printInstructions(navigationInstruction* instructions, uint16_t numInstructions) {
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	460b      	mov	r3, r1
 800155a:	807b      	strh	r3, [r7, #2]
  for (uint16_t i = 0; i < numInstructions; i++) {
 800155c:	2300      	movs	r3, #0
 800155e:	81fb      	strh	r3, [r7, #14]
 8001560:	e08f      	b.n	8001682 <printInstructions+0x132>
    printf("Instruction %d: ", i);
 8001562:	89fb      	ldrh	r3, [r7, #14]
 8001564:	4619      	mov	r1, r3
 8001566:	484c      	ldr	r0, [pc, #304]	; (8001698 <printInstructions+0x148>)
 8001568:	f009 f900 	bl	800a76c <iprintf>
    switch (instructions[i].instructionType) {
 800156c:	89fa      	ldrh	r2, [r7, #14]
 800156e:	4613      	mov	r3, r2
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	4413      	add	r3, r2
 8001574:	687a      	ldr	r2, [r7, #4]
 8001576:	4413      	add	r3, r2
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	2b06      	cmp	r3, #6
 800157c:	d87a      	bhi.n	8001674 <printInstructions+0x124>
 800157e:	a201      	add	r2, pc, #4	; (adr r2, 8001584 <printInstructions+0x34>)
 8001580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001584:	080015c3 	.word	0x080015c3
 8001588:	080015a1 	.word	0x080015a1
 800158c:	080015e5 	.word	0x080015e5
 8001590:	08001607 	.word	0x08001607
 8001594:	08001629 	.word	0x08001629
 8001598:	0800164b 	.word	0x0800164b
 800159c:	0800166d 	.word	0x0800166d
      case LEFT:
        printf("Turn left and drive %f mm\n", instructions[i].instructionValue);
 80015a0:	89fa      	ldrh	r2, [r7, #14]
 80015a2:	4613      	mov	r3, r2
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	4413      	add	r3, r2
 80015a8:	687a      	ldr	r2, [r7, #4]
 80015aa:	4413      	add	r3, r2
 80015ac:	f8d3 3001 	ldr.w	r3, [r3, #1]
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7fe ffc9 	bl	8000548 <__aeabi_f2d>
 80015b6:	4602      	mov	r2, r0
 80015b8:	460b      	mov	r3, r1
 80015ba:	4838      	ldr	r0, [pc, #224]	; (800169c <printInstructions+0x14c>)
 80015bc:	f009 f8d6 	bl	800a76c <iprintf>
        break;
 80015c0:	e05c      	b.n	800167c <printInstructions+0x12c>
      case RIGHT:
        printf("Turn right and drive %f mm\n", instructions[i].instructionValue);
 80015c2:	89fa      	ldrh	r2, [r7, #14]
 80015c4:	4613      	mov	r3, r2
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	4413      	add	r3, r2
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	4413      	add	r3, r2
 80015ce:	f8d3 3001 	ldr.w	r3, [r3, #1]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7fe ffb8 	bl	8000548 <__aeabi_f2d>
 80015d8:	4602      	mov	r2, r0
 80015da:	460b      	mov	r3, r1
 80015dc:	4830      	ldr	r0, [pc, #192]	; (80016a0 <printInstructions+0x150>)
 80015de:	f009 f8c5 	bl	800a76c <iprintf>
        break;
 80015e2:	e04b      	b.n	800167c <printInstructions+0x12c>
      case FORWARD:
        printf("Drive %f mm forwards\n", instructions[i].instructionValue);
 80015e4:	89fa      	ldrh	r2, [r7, #14]
 80015e6:	4613      	mov	r3, r2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	4413      	add	r3, r2
 80015ec:	687a      	ldr	r2, [r7, #4]
 80015ee:	4413      	add	r3, r2
 80015f0:	f8d3 3001 	ldr.w	r3, [r3, #1]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7fe ffa7 	bl	8000548 <__aeabi_f2d>
 80015fa:	4602      	mov	r2, r0
 80015fc:	460b      	mov	r3, r1
 80015fe:	4829      	ldr	r0, [pc, #164]	; (80016a4 <printInstructions+0x154>)
 8001600:	f009 f8b4 	bl	800a76c <iprintf>
        break;
 8001604:	e03a      	b.n	800167c <printInstructions+0x12c>
      case BACKWARD:
        printf("Drive %f mm backwards\n", instructions[i].instructionValue);
 8001606:	89fa      	ldrh	r2, [r7, #14]
 8001608:	4613      	mov	r3, r2
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	4413      	add	r3, r2
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	4413      	add	r3, r2
 8001612:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8001616:	4618      	mov	r0, r3
 8001618:	f7fe ff96 	bl	8000548 <__aeabi_f2d>
 800161c:	4602      	mov	r2, r0
 800161e:	460b      	mov	r3, r1
 8001620:	4821      	ldr	r0, [pc, #132]	; (80016a8 <printInstructions+0x158>)
 8001622:	f009 f8a3 	bl	800a76c <iprintf>
        break;
 8001626:	e029      	b.n	800167c <printInstructions+0x12c>
      case CLOCKWISE:
        printf("Turn clockwise %f degrees\n", instructions[i].instructionValue);
 8001628:	89fa      	ldrh	r2, [r7, #14]
 800162a:	4613      	mov	r3, r2
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	4413      	add	r3, r2
 8001630:	687a      	ldr	r2, [r7, #4]
 8001632:	4413      	add	r3, r2
 8001634:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8001638:	4618      	mov	r0, r3
 800163a:	f7fe ff85 	bl	8000548 <__aeabi_f2d>
 800163e:	4602      	mov	r2, r0
 8001640:	460b      	mov	r3, r1
 8001642:	481a      	ldr	r0, [pc, #104]	; (80016ac <printInstructions+0x15c>)
 8001644:	f009 f892 	bl	800a76c <iprintf>
        break;
 8001648:	e018      	b.n	800167c <printInstructions+0x12c>
      case COUNTERCLOCKWISE:
        printf("Turn counterclockwise %f degrees\n", instructions[i].instructionValue);
 800164a:	89fa      	ldrh	r2, [r7, #14]
 800164c:	4613      	mov	r3, r2
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	4413      	add	r3, r2
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	4413      	add	r3, r2
 8001656:	f8d3 3001 	ldr.w	r3, [r3, #1]
 800165a:	4618      	mov	r0, r3
 800165c:	f7fe ff74 	bl	8000548 <__aeabi_f2d>
 8001660:	4602      	mov	r2, r0
 8001662:	460b      	mov	r3, r1
 8001664:	4812      	ldr	r0, [pc, #72]	; (80016b0 <printInstructions+0x160>)
 8001666:	f009 f881 	bl	800a76c <iprintf>
        break;
 800166a:	e007      	b.n	800167c <printInstructions+0x12c>
      case STOP:
        printf("Stop\n");
 800166c:	4811      	ldr	r0, [pc, #68]	; (80016b4 <printInstructions+0x164>)
 800166e:	f009 f8e3 	bl	800a838 <puts>
        break;
 8001672:	e003      	b.n	800167c <printInstructions+0x12c>
      default:
        printf("Unknown instruction type\n");
 8001674:	4810      	ldr	r0, [pc, #64]	; (80016b8 <printInstructions+0x168>)
 8001676:	f009 f8df 	bl	800a838 <puts>
        break;
 800167a:	bf00      	nop
  for (uint16_t i = 0; i < numInstructions; i++) {
 800167c:	89fb      	ldrh	r3, [r7, #14]
 800167e:	3301      	adds	r3, #1
 8001680:	81fb      	strh	r3, [r7, #14]
 8001682:	89fa      	ldrh	r2, [r7, #14]
 8001684:	887b      	ldrh	r3, [r7, #2]
 8001686:	429a      	cmp	r2, r3
 8001688:	f4ff af6b 	bcc.w	8001562 <printInstructions+0x12>
    }
  }
}
 800168c:	bf00      	nop
 800168e:	bf00      	nop
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	0800d210 	.word	0x0800d210
 800169c:	0800d224 	.word	0x0800d224
 80016a0:	0800d240 	.word	0x0800d240
 80016a4:	0800d25c 	.word	0x0800d25c
 80016a8:	0800d274 	.word	0x0800d274
 80016ac:	0800d28c 	.word	0x0800d28c
 80016b0:	0800d2a8 	.word	0x0800d2a8
 80016b4:	0800d2cc 	.word	0x0800d2cc
 80016b8:	0800d2d4 	.word	0x0800d2d4

080016bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016c0:	f000 ff35 	bl	800252e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016c4:	f000 f886 	bl	80017d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016c8:	f000 f9a0 	bl	8001a0c <MX_GPIO_Init>
  MX_DMA_Init();
 80016cc:	f000 f978 	bl	80019c0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80016d0:	f000 f946 	bl	8001960 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80016d4:	f000 f8d4 	bl	8001880 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80016d8:	f000 f912 	bl	8001900 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
//  HAL_UART_Receive_IT(&huart2, uart2_buffer, 1);
//  HAL_UART_Receive_IT(&huart1, uart1_buffer, 1);
  printf("Setup complete\n");
 80016dc:	4826      	ldr	r0, [pc, #152]	; (8001778 <main+0xbc>)
 80016de:	f009 f8ab 	bl	800a838 <puts>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80016e2:	f005 fbd9 	bl	8006e98 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of uart1Queue */
  uart1QueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &uart1Queue_attributes);
 80016e6:	4a25      	ldr	r2, [pc, #148]	; (800177c <main+0xc0>)
 80016e8:	2102      	movs	r1, #2
 80016ea:	2010      	movs	r0, #16
 80016ec:	f005 fccb 	bl	8007086 <osMessageQueueNew>
 80016f0:	4603      	mov	r3, r0
 80016f2:	4a23      	ldr	r2, [pc, #140]	; (8001780 <main+0xc4>)
 80016f4:	6013      	str	r3, [r2, #0]

  /* creation of uart2Queue */
  uart2QueueHandle = osMessageQueueNew (2, sizeof(Dash7ToSTM32Message), &uart2Queue_attributes);
 80016f6:	4a23      	ldr	r2, [pc, #140]	; (8001784 <main+0xc8>)
 80016f8:	210b      	movs	r1, #11
 80016fa:	2002      	movs	r0, #2
 80016fc:	f005 fcc3 	bl	8007086 <osMessageQueueNew>
 8001700:	4603      	mov	r3, r0
 8001702:	4a21      	ldr	r2, [pc, #132]	; (8001788 <main+0xcc>)
 8001704:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001706:	4a21      	ldr	r2, [pc, #132]	; (800178c <main+0xd0>)
 8001708:	2100      	movs	r1, #0
 800170a:	4821      	ldr	r0, [pc, #132]	; (8001790 <main+0xd4>)
 800170c:	f005 fc0e 	bl	8006f2c <osThreadNew>
 8001710:	4603      	mov	r3, r0
 8001712:	4a20      	ldr	r2, [pc, #128]	; (8001794 <main+0xd8>)
 8001714:	6013      	str	r3, [r2, #0]

  /* creation of UART2Task */
  UART2TaskHandle = osThreadNew(UART2_Task, NULL, &UART2Task_attributes);
 8001716:	4a20      	ldr	r2, [pc, #128]	; (8001798 <main+0xdc>)
 8001718:	2100      	movs	r1, #0
 800171a:	4820      	ldr	r0, [pc, #128]	; (800179c <main+0xe0>)
 800171c:	f005 fc06 	bl	8006f2c <osThreadNew>
 8001720:	4603      	mov	r3, r0
 8001722:	4a1f      	ldr	r2, [pc, #124]	; (80017a0 <main+0xe4>)
 8001724:	6013      	str	r3, [r2, #0]

  /* creation of UART1Task */
  UART1TaskHandle = osThreadNew(UART1_Task, NULL, &UART1Task_attributes);
 8001726:	4a1f      	ldr	r2, [pc, #124]	; (80017a4 <main+0xe8>)
 8001728:	2100      	movs	r1, #0
 800172a:	481f      	ldr	r0, [pc, #124]	; (80017a8 <main+0xec>)
 800172c:	f005 fbfe 	bl	8006f2c <osThreadNew>
 8001730:	4603      	mov	r3, r0
 8001732:	4a1e      	ldr	r2, [pc, #120]	; (80017ac <main+0xf0>)
 8001734:	6013      	str	r3, [r2, #0]

  /* creation of LightSensor_Tas */
  LightSensor_TasHandle = osThreadNew(LightSensorTask, NULL, &LightSensor_Tas_attributes);
 8001736:	4a1e      	ldr	r2, [pc, #120]	; (80017b0 <main+0xf4>)
 8001738:	2100      	movs	r1, #0
 800173a:	481e      	ldr	r0, [pc, #120]	; (80017b4 <main+0xf8>)
 800173c:	f005 fbf6 	bl	8006f2c <osThreadNew>
 8001740:	4603      	mov	r3, r0
 8001742:	4a1d      	ldr	r2, [pc, #116]	; (80017b8 <main+0xfc>)
 8001744:	6013      	str	r3, [r2, #0]

  /* creation of Temp_Task */
  Temp_TaskHandle = osThreadNew(TempTask, NULL, &Temp_Task_attributes);
 8001746:	4a1d      	ldr	r2, [pc, #116]	; (80017bc <main+0x100>)
 8001748:	2100      	movs	r1, #0
 800174a:	481d      	ldr	r0, [pc, #116]	; (80017c0 <main+0x104>)
 800174c:	f005 fbee 	bl	8006f2c <osThreadNew>
 8001750:	4603      	mov	r3, r0
 8001752:	4a1c      	ldr	r2, [pc, #112]	; (80017c4 <main+0x108>)
 8001754:	6013      	str	r3, [r2, #0]

  /* creation of NavigationTask */
  NavigationTaskHandle = osThreadNew(StartNavigationTask, NULL, &NavigationTask_attributes);
 8001756:	4a1c      	ldr	r2, [pc, #112]	; (80017c8 <main+0x10c>)
 8001758:	2100      	movs	r1, #0
 800175a:	481c      	ldr	r0, [pc, #112]	; (80017cc <main+0x110>)
 800175c:	f005 fbe6 	bl	8006f2c <osThreadNew>
 8001760:	4603      	mov	r3, r0
 8001762:	4a1b      	ldr	r2, [pc, #108]	; (80017d0 <main+0x114>)
 8001764:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  vTaskSuspend(NavigationTaskHandle);
 8001766:	4b1a      	ldr	r3, [pc, #104]	; (80017d0 <main+0x114>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4618      	mov	r0, r3
 800176c:	f006 fcf8 	bl	8008160 <vTaskSuspend>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001770:	f005 fbb6 	bl	8006ee0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001774:	e7fe      	b.n	8001774 <main+0xb8>
 8001776:	bf00      	nop
 8001778:	0800d2f0 	.word	0x0800d2f0
 800177c:	0800d484 	.word	0x0800d484
 8001780:	20000410 	.word	0x20000410
 8001784:	0800d49c 	.word	0x0800d49c
 8001788:	20000414 	.word	0x20000414
 800178c:	0800d3ac 	.word	0x0800d3ac
 8001790:	08001cd9 	.word	0x08001cd9
 8001794:	200003f8 	.word	0x200003f8
 8001798:	0800d3d0 	.word	0x0800d3d0
 800179c:	08001d19 	.word	0x08001d19
 80017a0:	200003fc 	.word	0x200003fc
 80017a4:	0800d3f4 	.word	0x0800d3f4
 80017a8:	08001d2b 	.word	0x08001d2b
 80017ac:	20000400 	.word	0x20000400
 80017b0:	0800d418 	.word	0x0800d418
 80017b4:	08001d3d 	.word	0x08001d3d
 80017b8:	20000404 	.word	0x20000404
 80017bc:	0800d43c 	.word	0x0800d43c
 80017c0:	08001d6d 	.word	0x08001d6d
 80017c4:	20000408 	.word	0x20000408
 80017c8:	0800d460 	.word	0x0800d460
 80017cc:	08001d7d 	.word	0x08001d7d
 80017d0:	2000040c 	.word	0x2000040c

080017d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b096      	sub	sp, #88	; 0x58
 80017d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017da:	f107 0314 	add.w	r3, r7, #20
 80017de:	2244      	movs	r2, #68	; 0x44
 80017e0:	2100      	movs	r1, #0
 80017e2:	4618      	mov	r0, r3
 80017e4:	f009 f830 	bl	800a848 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017e8:	463b      	mov	r3, r7
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	605a      	str	r2, [r3, #4]
 80017f0:	609a      	str	r2, [r3, #8]
 80017f2:	60da      	str	r2, [r3, #12]
 80017f4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80017f6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80017fa:	f002 f9f7 	bl	8003bec <HAL_PWREx_ControlVoltageScaling>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001804:	f000 fb34 	bl	8001e70 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001808:	f002 f9d2 	bl	8003bb0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800180c:	4b1b      	ldr	r3, [pc, #108]	; (800187c <SystemClock_Config+0xa8>)
 800180e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001812:	4a1a      	ldr	r2, [pc, #104]	; (800187c <SystemClock_Config+0xa8>)
 8001814:	f023 0318 	bic.w	r3, r3, #24
 8001818:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800181c:	2314      	movs	r3, #20
 800181e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001820:	2301      	movs	r3, #1
 8001822:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001824:	2301      	movs	r3, #1
 8001826:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001828:	2300      	movs	r3, #0
 800182a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 800182c:	23a0      	movs	r3, #160	; 0xa0
 800182e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001830:	2300      	movs	r3, #0
 8001832:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001834:	f107 0314 	add.w	r3, r7, #20
 8001838:	4618      	mov	r0, r3
 800183a:	f002 fa2d 	bl	8003c98 <HAL_RCC_OscConfig>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001844:	f000 fb14 	bl	8001e70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001848:	230f      	movs	r3, #15
 800184a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800184c:	2300      	movs	r3, #0
 800184e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001850:	2300      	movs	r3, #0
 8001852:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001854:	2300      	movs	r3, #0
 8001856:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001858:	2300      	movs	r3, #0
 800185a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800185c:	463b      	mov	r3, r7
 800185e:	2101      	movs	r1, #1
 8001860:	4618      	mov	r0, r3
 8001862:	f002 fe7b 	bl	800455c <HAL_RCC_ClockConfig>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800186c:	f000 fb00 	bl	8001e70 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001870:	f003 fa50 	bl	8004d14 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001874:	bf00      	nop
 8001876:	3758      	adds	r7, #88	; 0x58
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	40021000 	.word	0x40021000

08001880 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001884:	4b1b      	ldr	r3, [pc, #108]	; (80018f4 <MX_I2C1_Init+0x74>)
 8001886:	4a1c      	ldr	r2, [pc, #112]	; (80018f8 <MX_I2C1_Init+0x78>)
 8001888:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 800188a:	4b1a      	ldr	r3, [pc, #104]	; (80018f4 <MX_I2C1_Init+0x74>)
 800188c:	4a1b      	ldr	r2, [pc, #108]	; (80018fc <MX_I2C1_Init+0x7c>)
 800188e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001890:	4b18      	ldr	r3, [pc, #96]	; (80018f4 <MX_I2C1_Init+0x74>)
 8001892:	2200      	movs	r2, #0
 8001894:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001896:	4b17      	ldr	r3, [pc, #92]	; (80018f4 <MX_I2C1_Init+0x74>)
 8001898:	2201      	movs	r2, #1
 800189a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800189c:	4b15      	ldr	r3, [pc, #84]	; (80018f4 <MX_I2C1_Init+0x74>)
 800189e:	2200      	movs	r2, #0
 80018a0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80018a2:	4b14      	ldr	r3, [pc, #80]	; (80018f4 <MX_I2C1_Init+0x74>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80018a8:	4b12      	ldr	r3, [pc, #72]	; (80018f4 <MX_I2C1_Init+0x74>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018ae:	4b11      	ldr	r3, [pc, #68]	; (80018f4 <MX_I2C1_Init+0x74>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018b4:	4b0f      	ldr	r3, [pc, #60]	; (80018f4 <MX_I2C1_Init+0x74>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018ba:	480e      	ldr	r0, [pc, #56]	; (80018f4 <MX_I2C1_Init+0x74>)
 80018bc:	f001 fb5e 	bl	8002f7c <HAL_I2C_Init>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80018c6:	f000 fad3 	bl	8001e70 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80018ca:	2100      	movs	r1, #0
 80018cc:	4809      	ldr	r0, [pc, #36]	; (80018f4 <MX_I2C1_Init+0x74>)
 80018ce:	f002 f8d7 	bl	8003a80 <HAL_I2CEx_ConfigAnalogFilter>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80018d8:	f000 faca 	bl	8001e70 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80018dc:	2100      	movs	r1, #0
 80018de:	4805      	ldr	r0, [pc, #20]	; (80018f4 <MX_I2C1_Init+0x74>)
 80018e0:	f002 f919 	bl	8003b16 <HAL_I2CEx_ConfigDigitalFilter>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80018ea:	f000 fac1 	bl	8001e70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	20000204 	.word	0x20000204
 80018f8:	40005400 	.word	0x40005400
 80018fc:	00707cbb 	.word	0x00707cbb

08001900 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001904:	4b14      	ldr	r3, [pc, #80]	; (8001958 <MX_USART1_UART_Init+0x58>)
 8001906:	4a15      	ldr	r2, [pc, #84]	; (800195c <MX_USART1_UART_Init+0x5c>)
 8001908:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 800190a:	4b13      	ldr	r3, [pc, #76]	; (8001958 <MX_USART1_UART_Init+0x58>)
 800190c:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8001910:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001912:	4b11      	ldr	r3, [pc, #68]	; (8001958 <MX_USART1_UART_Init+0x58>)
 8001914:	2200      	movs	r2, #0
 8001916:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001918:	4b0f      	ldr	r3, [pc, #60]	; (8001958 <MX_USART1_UART_Init+0x58>)
 800191a:	2200      	movs	r2, #0
 800191c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800191e:	4b0e      	ldr	r3, [pc, #56]	; (8001958 <MX_USART1_UART_Init+0x58>)
 8001920:	2200      	movs	r2, #0
 8001922:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001924:	4b0c      	ldr	r3, [pc, #48]	; (8001958 <MX_USART1_UART_Init+0x58>)
 8001926:	220c      	movs	r2, #12
 8001928:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800192a:	4b0b      	ldr	r3, [pc, #44]	; (8001958 <MX_USART1_UART_Init+0x58>)
 800192c:	2200      	movs	r2, #0
 800192e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001930:	4b09      	ldr	r3, [pc, #36]	; (8001958 <MX_USART1_UART_Init+0x58>)
 8001932:	2200      	movs	r2, #0
 8001934:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001936:	4b08      	ldr	r3, [pc, #32]	; (8001958 <MX_USART1_UART_Init+0x58>)
 8001938:	2200      	movs	r2, #0
 800193a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800193c:	4b06      	ldr	r3, [pc, #24]	; (8001958 <MX_USART1_UART_Init+0x58>)
 800193e:	2200      	movs	r2, #0
 8001940:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001942:	4805      	ldr	r0, [pc, #20]	; (8001958 <MX_USART1_UART_Init+0x58>)
 8001944:	f003 fc58 	bl	80051f8 <HAL_UART_Init>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800194e:	f000 fa8f 	bl	8001e70 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	20000258 	.word	0x20000258
 800195c:	40013800 	.word	0x40013800

08001960 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001964:	4b14      	ldr	r3, [pc, #80]	; (80019b8 <MX_USART2_UART_Init+0x58>)
 8001966:	4a15      	ldr	r2, [pc, #84]	; (80019bc <MX_USART2_UART_Init+0x5c>)
 8001968:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800196a:	4b13      	ldr	r3, [pc, #76]	; (80019b8 <MX_USART2_UART_Init+0x58>)
 800196c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001970:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001972:	4b11      	ldr	r3, [pc, #68]	; (80019b8 <MX_USART2_UART_Init+0x58>)
 8001974:	2200      	movs	r2, #0
 8001976:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001978:	4b0f      	ldr	r3, [pc, #60]	; (80019b8 <MX_USART2_UART_Init+0x58>)
 800197a:	2200      	movs	r2, #0
 800197c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800197e:	4b0e      	ldr	r3, [pc, #56]	; (80019b8 <MX_USART2_UART_Init+0x58>)
 8001980:	2200      	movs	r2, #0
 8001982:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001984:	4b0c      	ldr	r3, [pc, #48]	; (80019b8 <MX_USART2_UART_Init+0x58>)
 8001986:	220c      	movs	r2, #12
 8001988:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800198a:	4b0b      	ldr	r3, [pc, #44]	; (80019b8 <MX_USART2_UART_Init+0x58>)
 800198c:	2200      	movs	r2, #0
 800198e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001990:	4b09      	ldr	r3, [pc, #36]	; (80019b8 <MX_USART2_UART_Init+0x58>)
 8001992:	2200      	movs	r2, #0
 8001994:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001996:	4b08      	ldr	r3, [pc, #32]	; (80019b8 <MX_USART2_UART_Init+0x58>)
 8001998:	2200      	movs	r2, #0
 800199a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800199c:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <MX_USART2_UART_Init+0x58>)
 800199e:	2200      	movs	r2, #0
 80019a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019a2:	4805      	ldr	r0, [pc, #20]	; (80019b8 <MX_USART2_UART_Init+0x58>)
 80019a4:	f003 fc28 	bl	80051f8 <HAL_UART_Init>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80019ae:	f000 fa5f 	bl	8001e70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	200002e0 	.word	0x200002e0
 80019bc:	40004400 	.word	0x40004400

080019c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019c6:	4b10      	ldr	r3, [pc, #64]	; (8001a08 <MX_DMA_Init+0x48>)
 80019c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019ca:	4a0f      	ldr	r2, [pc, #60]	; (8001a08 <MX_DMA_Init+0x48>)
 80019cc:	f043 0301 	orr.w	r3, r3, #1
 80019d0:	6493      	str	r3, [r2, #72]	; 0x48
 80019d2:	4b0d      	ldr	r3, [pc, #52]	; (8001a08 <MX_DMA_Init+0x48>)
 80019d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	607b      	str	r3, [r7, #4]
 80019dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 80019de:	2200      	movs	r2, #0
 80019e0:	2105      	movs	r1, #5
 80019e2:	200f      	movs	r0, #15
 80019e4:	f000 fe94 	bl	8002710 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80019e8:	200f      	movs	r0, #15
 80019ea:	f000 fead 	bl	8002748 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 80019ee:	2200      	movs	r2, #0
 80019f0:	2105      	movs	r1, #5
 80019f2:	2010      	movs	r0, #16
 80019f4:	f000 fe8c 	bl	8002710 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80019f8:	2010      	movs	r0, #16
 80019fa:	f000 fea5 	bl	8002748 <HAL_NVIC_EnableIRQ>

}
 80019fe:	bf00      	nop
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40021000 	.word	0x40021000

08001a0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b088      	sub	sp, #32
 8001a10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a12:	f107 030c 	add.w	r3, r7, #12
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
 8001a1a:	605a      	str	r2, [r3, #4]
 8001a1c:	609a      	str	r2, [r3, #8]
 8001a1e:	60da      	str	r2, [r3, #12]
 8001a20:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a22:	4b1d      	ldr	r3, [pc, #116]	; (8001a98 <MX_GPIO_Init+0x8c>)
 8001a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a26:	4a1c      	ldr	r2, [pc, #112]	; (8001a98 <MX_GPIO_Init+0x8c>)
 8001a28:	f043 0304 	orr.w	r3, r3, #4
 8001a2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a2e:	4b1a      	ldr	r3, [pc, #104]	; (8001a98 <MX_GPIO_Init+0x8c>)
 8001a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a32:	f003 0304 	and.w	r3, r3, #4
 8001a36:	60bb      	str	r3, [r7, #8]
 8001a38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a3a:	4b17      	ldr	r3, [pc, #92]	; (8001a98 <MX_GPIO_Init+0x8c>)
 8001a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a3e:	4a16      	ldr	r2, [pc, #88]	; (8001a98 <MX_GPIO_Init+0x8c>)
 8001a40:	f043 0301 	orr.w	r3, r3, #1
 8001a44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a46:	4b14      	ldr	r3, [pc, #80]	; (8001a98 <MX_GPIO_Init+0x8c>)
 8001a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	607b      	str	r3, [r7, #4]
 8001a50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a52:	4b11      	ldr	r3, [pc, #68]	; (8001a98 <MX_GPIO_Init+0x8c>)
 8001a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a56:	4a10      	ldr	r2, [pc, #64]	; (8001a98 <MX_GPIO_Init+0x8c>)
 8001a58:	f043 0302 	orr.w	r3, r3, #2
 8001a5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a5e:	4b0e      	ldr	r3, [pc, #56]	; (8001a98 <MX_GPIO_Init+0x8c>)
 8001a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	603b      	str	r3, [r7, #0]
 8001a68:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	2108      	movs	r1, #8
 8001a6e:	480b      	ldr	r0, [pc, #44]	; (8001a9c <MX_GPIO_Init+0x90>)
 8001a70:	f001 fa6c 	bl	8002f4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8001a74:	2308      	movs	r3, #8
 8001a76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a80:	2300      	movs	r3, #0
 8001a82:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001a84:	f107 030c 	add.w	r3, r7, #12
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4804      	ldr	r0, [pc, #16]	; (8001a9c <MX_GPIO_Init+0x90>)
 8001a8c:	f001 f8ec 	bl	8002c68 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a90:	bf00      	nop
 8001a92:	3720      	adds	r7, #32
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	48000400 	.word	0x48000400

08001aa0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a58      	ldr	r2, [pc, #352]	; (8001c10 <HAL_UART_RxCpltCallback+0x170>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	f040 8080 	bne.w	8001bb4 <HAL_UART_RxCpltCallback+0x114>
    {
        switch (UART1receiveState) {
 8001ab4:	4b57      	ldr	r3, [pc, #348]	; (8001c14 <HAL_UART_RxCpltCallback+0x174>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	2b03      	cmp	r3, #3
 8001aba:	f200 80a5 	bhi.w	8001c08 <HAL_UART_RxCpltCallback+0x168>
 8001abe:	a201      	add	r2, pc, #4	; (adr r2, 8001ac4 <HAL_UART_RxCpltCallback+0x24>)
 8001ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ac4:	08001ad5 	.word	0x08001ad5
 8001ac8:	08001aef 	.word	0x08001aef
 8001acc:	08001b0f 	.word	0x08001b0f
 8001ad0:	08001b63 	.word	0x08001b63
            case WAIT_FOR_START_DELIMITER:
                if (uart1_buffer[0] == START_DELIMITER) {
 8001ad4:	4b50      	ldr	r3, [pc, #320]	; (8001c18 <HAL_UART_RxCpltCallback+0x178>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	2b5b      	cmp	r3, #91	; 0x5b
 8001ada:	d102      	bne.n	8001ae2 <HAL_UART_RxCpltCallback+0x42>
                    UART1receiveState = WAIT_FOR_DATA_LENGTH_HIGH;
 8001adc:	4b4d      	ldr	r3, [pc, #308]	; (8001c14 <HAL_UART_RxCpltCallback+0x174>)
 8001ade:	2201      	movs	r2, #1
 8001ae0:	701a      	strb	r2, [r3, #0]
                }
                HAL_UART_Receive_IT(&huart1, uart1_buffer, 1);
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	494c      	ldr	r1, [pc, #304]	; (8001c18 <HAL_UART_RxCpltCallback+0x178>)
 8001ae6:	484d      	ldr	r0, [pc, #308]	; (8001c1c <HAL_UART_RxCpltCallback+0x17c>)
 8001ae8:	f003 fc5e 	bl	80053a8 <HAL_UART_Receive_IT>
                break;
 8001aec:	e08c      	b.n	8001c08 <HAL_UART_RxCpltCallback+0x168>

            case WAIT_FOR_DATA_LENGTH_HIGH:
                dataLength = uart1_buffer[0] << 8;
 8001aee:	4b4a      	ldr	r3, [pc, #296]	; (8001c18 <HAL_UART_RxCpltCallback+0x178>)
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	021b      	lsls	r3, r3, #8
 8001af6:	b29a      	uxth	r2, r3
 8001af8:	4b49      	ldr	r3, [pc, #292]	; (8001c20 <HAL_UART_RxCpltCallback+0x180>)
 8001afa:	801a      	strh	r2, [r3, #0]
                UART1receiveState = WAIT_FOR_DATA_LENGTH_LOW;
 8001afc:	4b45      	ldr	r3, [pc, #276]	; (8001c14 <HAL_UART_RxCpltCallback+0x174>)
 8001afe:	2202      	movs	r2, #2
 8001b00:	701a      	strb	r2, [r3, #0]
                HAL_UART_Receive_IT(&huart1, uart1_buffer, 1);
 8001b02:	2201      	movs	r2, #1
 8001b04:	4944      	ldr	r1, [pc, #272]	; (8001c18 <HAL_UART_RxCpltCallback+0x178>)
 8001b06:	4845      	ldr	r0, [pc, #276]	; (8001c1c <HAL_UART_RxCpltCallback+0x17c>)
 8001b08:	f003 fc4e 	bl	80053a8 <HAL_UART_Receive_IT>
                break;
 8001b0c:	e07c      	b.n	8001c08 <HAL_UART_RxCpltCallback+0x168>

            case WAIT_FOR_DATA_LENGTH_LOW:
                dataLength |= uart1_buffer[0];
 8001b0e:	4b42      	ldr	r3, [pc, #264]	; (8001c18 <HAL_UART_RxCpltCallback+0x178>)
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	b29a      	uxth	r2, r3
 8001b14:	4b42      	ldr	r3, [pc, #264]	; (8001c20 <HAL_UART_RxCpltCallback+0x180>)
 8001b16:	881b      	ldrh	r3, [r3, #0]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	b29a      	uxth	r2, r3
 8001b1c:	4b40      	ldr	r3, [pc, #256]	; (8001c20 <HAL_UART_RxCpltCallback+0x180>)
 8001b1e:	801a      	strh	r2, [r3, #0]
                UART1receiveState = WAIT_FOR_DATA;
 8001b20:	4b3c      	ldr	r3, [pc, #240]	; (8001c14 <HAL_UART_RxCpltCallback+0x174>)
 8001b22:	2203      	movs	r2, #3
 8001b24:	701a      	strb	r2, [r3, #0]
                dma_buffer = (uint8_t*)pvPortMalloc((dataLength*12 + 1) * sizeof(uint8_t)); // Allocate buffer for DMA transfer
 8001b26:	4b3e      	ldr	r3, [pc, #248]	; (8001c20 <HAL_UART_RxCpltCallback+0x180>)
 8001b28:	881b      	ldrh	r3, [r3, #0]
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	4413      	add	r3, r2
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	3301      	adds	r3, #1
 8001b36:	4618      	mov	r0, r3
 8001b38:	f007 ff06 	bl	8009948 <pvPortMalloc>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	4a39      	ldr	r2, [pc, #228]	; (8001c24 <HAL_UART_RxCpltCallback+0x184>)
 8001b40:	6013      	str	r3, [r2, #0]
                HAL_UART_Receive_DMA(&huart1, dma_buffer, dataLength*12 + 1);
 8001b42:	4b38      	ldr	r3, [pc, #224]	; (8001c24 <HAL_UART_RxCpltCallback+0x184>)
 8001b44:	6819      	ldr	r1, [r3, #0]
 8001b46:	4b36      	ldr	r3, [pc, #216]	; (8001c20 <HAL_UART_RxCpltCallback+0x180>)
 8001b48:	881b      	ldrh	r3, [r3, #0]
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	0052      	lsls	r2, r2, #1
 8001b4e:	4413      	add	r3, r2
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	3301      	adds	r3, #1
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	461a      	mov	r2, r3
 8001b5a:	4830      	ldr	r0, [pc, #192]	; (8001c1c <HAL_UART_RxCpltCallback+0x17c>)
 8001b5c:	f003 fc70 	bl	8005440 <HAL_UART_Receive_DMA>
                break;
 8001b60:	e052      	b.n	8001c08 <HAL_UART_RxCpltCallback+0x168>

            case WAIT_FOR_DATA:
                // DMA transfer is complete
                HAL_UART_DMAStop(&huart1); // Stop the DMA transfer
 8001b62:	482e      	ldr	r0, [pc, #184]	; (8001c1c <HAL_UART_RxCpltCallback+0x17c>)
 8001b64:	f003 fcb8 	bl	80054d8 <HAL_UART_DMAStop>

                // Check if the last byte is the end delimiter
                if (dma_buffer[dataLength*12] == END_DELIMITER) {
 8001b68:	4b2e      	ldr	r3, [pc, #184]	; (8001c24 <HAL_UART_RxCpltCallback+0x184>)
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	4b2c      	ldr	r3, [pc, #176]	; (8001c20 <HAL_UART_RxCpltCallback+0x180>)
 8001b6e:	881b      	ldrh	r3, [r3, #0]
 8001b70:	4619      	mov	r1, r3
 8001b72:	460b      	mov	r3, r1
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	440b      	add	r3, r1
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	4413      	add	r3, r2
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	2b5d      	cmp	r3, #93	; 0x5d
 8001b80:	d107      	bne.n	8001b92 <HAL_UART_RxCpltCallback+0xf2>
                    // Process the received data here
                    // You can send the data to a FreeRTOS task using a queue
                    xQueueSendFromISR(uart1QueueHandle, dma_buffer, NULL);
 8001b82:	4b29      	ldr	r3, [pc, #164]	; (8001c28 <HAL_UART_RxCpltCallback+0x188>)
 8001b84:	6818      	ldr	r0, [r3, #0]
 8001b86:	4b27      	ldr	r3, [pc, #156]	; (8001c24 <HAL_UART_RxCpltCallback+0x184>)
 8001b88:	6819      	ldr	r1, [r3, #0]
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f005 fe11 	bl	80077b4 <xQueueGenericSendFromISR>
                }

                // Free the DMA buffer
                vPortFree(dma_buffer);
 8001b92:	4b24      	ldr	r3, [pc, #144]	; (8001c24 <HAL_UART_RxCpltCallback+0x184>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f007 ffa2 	bl	8009ae0 <vPortFree>
                dma_buffer = NULL;
 8001b9c:	4b21      	ldr	r3, [pc, #132]	; (8001c24 <HAL_UART_RxCpltCallback+0x184>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	601a      	str	r2, [r3, #0]

                // Restart the interrupt-based reception
                UART1receiveState = WAIT_FOR_START_DELIMITER;
 8001ba2:	4b1c      	ldr	r3, [pc, #112]	; (8001c14 <HAL_UART_RxCpltCallback+0x174>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	701a      	strb	r2, [r3, #0]
                HAL_UART_Receive_IT(&huart1, uart1_buffer, 1);
 8001ba8:	2201      	movs	r2, #1
 8001baa:	491b      	ldr	r1, [pc, #108]	; (8001c18 <HAL_UART_RxCpltCallback+0x178>)
 8001bac:	481b      	ldr	r0, [pc, #108]	; (8001c1c <HAL_UART_RxCpltCallback+0x17c>)
 8001bae:	f003 fbfb 	bl	80053a8 <HAL_UART_Receive_IT>
                break;
 8001bb2:	e029      	b.n	8001c08 <HAL_UART_RxCpltCallback+0x168>
	// if (huart->Instance == USART1)
	// {
	// 	xQueueSendFromISR(uart1QueueHandle, uart1_buffer, NULL);
	// 	HAL_UART_Receive_IT(&huart1, uart1_buffer, 1);
	// }
	else if (huart->Instance == USART2)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a1c      	ldr	r2, [pc, #112]	; (8001c2c <HAL_UART_RxCpltCallback+0x18c>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d124      	bne.n	8001c08 <HAL_UART_RxCpltCallback+0x168>
	{
//		HAL_UART_Receive_IT(&huart2, uart2_buffer, 1);
      newInstruction.startDelimiter = uart2_buffer[0];
 8001bbe:	4b1c      	ldr	r3, [pc, #112]	; (8001c30 <HAL_UART_RxCpltCallback+0x190>)
 8001bc0:	781a      	ldrb	r2, [r3, #0]
 8001bc2:	4b1c      	ldr	r3, [pc, #112]	; (8001c34 <HAL_UART_RxCpltCallback+0x194>)
 8001bc4:	701a      	strb	r2, [r3, #0]
 8001bc6:	4b1a      	ldr	r3, [pc, #104]	; (8001c30 <HAL_UART_RxCpltCallback+0x190>)
 8001bc8:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8001bcc:	461a      	mov	r2, r3

      memcpy(&newInstruction.xCoord, &uart2_buffer[1], sizeof(float));
 8001bce:	4b19      	ldr	r3, [pc, #100]	; (8001c34 <HAL_UART_RxCpltCallback+0x194>)
 8001bd0:	f8c3 2001 	str.w	r2, [r3, #1]
 8001bd4:	4b16      	ldr	r3, [pc, #88]	; (8001c30 <HAL_UART_RxCpltCallback+0x190>)
 8001bd6:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8001bda:	461a      	mov	r2, r3
      memcpy(&newInstruction.yCoord, &uart2_buffer[5], sizeof(float));
 8001bdc:	4b15      	ldr	r3, [pc, #84]	; (8001c34 <HAL_UART_RxCpltCallback+0x194>)
 8001bde:	f8c3 2005 	str.w	r2, [r3, #5]

      newInstruction.sensorControl = uart2_buffer[9];
 8001be2:	4b13      	ldr	r3, [pc, #76]	; (8001c30 <HAL_UART_RxCpltCallback+0x190>)
 8001be4:	7a5a      	ldrb	r2, [r3, #9]
 8001be6:	4b13      	ldr	r3, [pc, #76]	; (8001c34 <HAL_UART_RxCpltCallback+0x194>)
 8001be8:	725a      	strb	r2, [r3, #9]
      newInstruction.endDelimiter = uart2_buffer[10];
 8001bea:	4b11      	ldr	r3, [pc, #68]	; (8001c30 <HAL_UART_RxCpltCallback+0x190>)
 8001bec:	7a9a      	ldrb	r2, [r3, #10]
 8001bee:	4b11      	ldr	r3, [pc, #68]	; (8001c34 <HAL_UART_RxCpltCallback+0x194>)
 8001bf0:	729a      	strb	r2, [r3, #10]
//		xQueueSendFromISR(uart2QueueHandle, &msg, NULL);

      // Prepare to receive the next character
      HAL_UART_Receive_DMA(&huart2, uart2_buffer, 11);
 8001bf2:	220b      	movs	r2, #11
 8001bf4:	490e      	ldr	r1, [pc, #56]	; (8001c30 <HAL_UART_RxCpltCallback+0x190>)
 8001bf6:	4810      	ldr	r0, [pc, #64]	; (8001c38 <HAL_UART_RxCpltCallback+0x198>)
 8001bf8:	f003 fc22 	bl	8005440 <HAL_UART_Receive_DMA>

      xTaskResumeFromISR(NavigationTaskHandle);
 8001bfc:	4b0f      	ldr	r3, [pc, #60]	; (8001c3c <HAL_UART_RxCpltCallback+0x19c>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f006 fb55 	bl	80082b0 <xTaskResumeFromISR>

	}
}
 8001c06:	e7ff      	b.n	8001c08 <HAL_UART_RxCpltCallback+0x168>
 8001c08:	bf00      	nop
 8001c0a:	3708      	adds	r7, #8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	40013800 	.word	0x40013800
 8001c14:	2000042c 	.word	0x2000042c
 8001c18:	20000418 	.word	0x20000418
 8001c1c:	20000258 	.word	0x20000258
 8001c20:	2000042e 	.word	0x2000042e
 8001c24:	20000430 	.word	0x20000430
 8001c28:	20000410 	.word	0x20000410
 8001c2c:	40004400 	.word	0x40004400
 8001c30:	2000041c 	.word	0x2000041c
 8001c34:	20000450 	.word	0x20000450
 8001c38:	200002e0 	.word	0x200002e0
 8001c3c:	2000040c 	.word	0x2000040c

08001c40 <printSensorMeasurements>:



void printSensorMeasurements(SensorMeasurements measurements) {
 8001c40:	b590      	push	{r4, r7, lr}
 8001c42:	b087      	sub	sp, #28
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	7138      	strb	r0, [r7, #4]
    const char* measurementStrings[] = {"?","No", "Yes", "Optional"};
 8001c48:	4b1e      	ldr	r3, [pc, #120]	; (8001cc4 <printSensorMeasurements+0x84>)
 8001c4a:	f107 0408 	add.w	r4, r7, #8
 8001c4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c50:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    printf("\nTemperature: %s\n", measurementStrings[measurements.temperature]);
 8001c54:	793b      	ldrb	r3, [r7, #4]
 8001c56:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	3318      	adds	r3, #24
 8001c60:	443b      	add	r3, r7
 8001c62:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8001c66:	4619      	mov	r1, r3
 8001c68:	4817      	ldr	r0, [pc, #92]	; (8001cc8 <printSensorMeasurements+0x88>)
 8001c6a:	f008 fd7f 	bl	800a76c <iprintf>
    printf("Humidity: %s\n", measurementStrings[measurements.humidity]);
 8001c6e:	793b      	ldrb	r3, [r7, #4]
 8001c70:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	3318      	adds	r3, #24
 8001c7a:	443b      	add	r3, r7
 8001c7c:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8001c80:	4619      	mov	r1, r3
 8001c82:	4812      	ldr	r0, [pc, #72]	; (8001ccc <printSensorMeasurements+0x8c>)
 8001c84:	f008 fd72 	bl	800a76c <iprintf>
    printf("Visible Light: %s\n", measurementStrings[measurements.visibleLight]);
 8001c88:	793b      	ldrb	r3, [r7, #4]
 8001c8a:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	3318      	adds	r3, #24
 8001c94:	443b      	add	r3, r7
 8001c96:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	480c      	ldr	r0, [pc, #48]	; (8001cd0 <printSensorMeasurements+0x90>)
 8001c9e:	f008 fd65 	bl	800a76c <iprintf>
    printf("Infrared: %s\n", measurementStrings[measurements.infrared]);
 8001ca2:	793b      	ldrb	r3, [r7, #4]
 8001ca4:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	3318      	adds	r3, #24
 8001cae:	443b      	add	r3, r7
 8001cb0:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4807      	ldr	r0, [pc, #28]	; (8001cd4 <printSensorMeasurements+0x94>)
 8001cb8:	f008 fd58 	bl	800a76c <iprintf>
}
 8001cbc:	bf00      	nop
 8001cbe:	371c      	adds	r7, #28
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd90      	pop	{r4, r7, pc}
 8001cc4:	0800d360 	.word	0x0800d360
 8001cc8:	0800d300 	.word	0x0800d300
 8001ccc:	0800d314 	.word	0x0800d314
 8001cd0:	0800d324 	.word	0x0800d324
 8001cd4:	0800d338 	.word	0x0800d338

08001cd8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
//  HAL_UART_Receive_IT(&huart2, uart2_buffer, 1);
  HAL_UART_Receive_DMA(&huart2, uart2_buffer,11);
 8001ce0:	220b      	movs	r2, #11
 8001ce2:	4908      	ldr	r1, [pc, #32]	; (8001d04 <StartDefaultTask+0x2c>)
 8001ce4:	4808      	ldr	r0, [pc, #32]	; (8001d08 <StartDefaultTask+0x30>)
 8001ce6:	f003 fbab 	bl	8005440 <HAL_UART_Receive_DMA>
  HAL_UART_Receive_IT(&huart1, uart1_buffer, 1);
 8001cea:	2201      	movs	r2, #1
 8001cec:	4907      	ldr	r1, [pc, #28]	; (8001d0c <StartDefaultTask+0x34>)
 8001cee:	4808      	ldr	r0, [pc, #32]	; (8001d10 <StartDefaultTask+0x38>)
 8001cf0:	f003 fb5a 	bl	80053a8 <HAL_UART_Receive_IT>
  printf("Setup complete\n");
 8001cf4:	4807      	ldr	r0, [pc, #28]	; (8001d14 <StartDefaultTask+0x3c>)
 8001cf6:	f008 fd9f 	bl	800a838 <puts>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001cfa:	2001      	movs	r0, #1
 8001cfc:	f005 f9a8 	bl	8007050 <osDelay>
 8001d00:	e7fb      	b.n	8001cfa <StartDefaultTask+0x22>
 8001d02:	bf00      	nop
 8001d04:	2000041c 	.word	0x2000041c
 8001d08:	200002e0 	.word	0x200002e0
 8001d0c:	20000418 	.word	0x20000418
 8001d10:	20000258 	.word	0x20000258
 8001d14:	0800d2f0 	.word	0x0800d2f0

08001d18 <UART2_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UART2_Task */
void UART2_Task(void *argument)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
//        targetMeasurements = *(SensorMeasurements*)&receivedMessage.sensorControl;
//        printSensorMeasurements(targetMeasurements);
//        printf("Received message with x: %f, y: %f\n", targetX, targetY);
//      }
//    }
	  osDelay(10000);
 8001d20:	f242 7010 	movw	r0, #10000	; 0x2710
 8001d24:	f005 f994 	bl	8007050 <osDelay>
 8001d28:	e7fa      	b.n	8001d20 <UART2_Task+0x8>

08001d2a <UART1_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UART1_Task */
void UART1_Task(void *argument)
{
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b082      	sub	sp, #8
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART1_Task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001d32:	2001      	movs	r0, #1
 8001d34:	f005 f98c 	bl	8007050 <osDelay>
 8001d38:	e7fb      	b.n	8001d32 <UART1_Task+0x8>
	...

08001d3c <LightSensorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LightSensorTask */
void LightSensorTask(void *argument)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LightSensorTask */
	LTR329_Init();
 8001d44:	f7ff f94a 	bl	8000fdc <LTR329_Init>
	/* Infinite loop */
	  for(;;)
	  {
		// Read light data
		LTR329_Read_Light(&light_ch0, &light_ch1);
 8001d48:	4906      	ldr	r1, [pc, #24]	; (8001d64 <LightSensorTask+0x28>)
 8001d4a:	4807      	ldr	r0, [pc, #28]	; (8001d68 <LightSensorTask+0x2c>)
 8001d4c:	f7ff f96c 	bl	8001028 <LTR329_Read_Light>
//		if (verbose) printf("Light Ch0: %d \n Light Ch1: %d\n________\n\n",light_ch0,light_ch1);
		sendLightSensorData(light_ch0);
 8001d50:	4b05      	ldr	r3, [pc, #20]	; (8001d68 <LightSensorTask+0x2c>)
 8001d52:	881b      	ldrh	r3, [r3, #0]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff f92f 	bl	8000fb8 <sendLightSensorData>
		osDelay(2000);
 8001d5a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001d5e:	f005 f977 	bl	8007050 <osDelay>
		LTR329_Read_Light(&light_ch0, &light_ch1);
 8001d62:	e7f1      	b.n	8001d48 <LightSensorTask+0xc>
 8001d64:	2000042a 	.word	0x2000042a
 8001d68:	20000428 	.word	0x20000428

08001d6c <TempTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TempTask */
void TempTask(void *argument)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TempTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001d74:	2001      	movs	r0, #1
 8001d76:	f005 f96b 	bl	8007050 <osDelay>
 8001d7a:	e7fb      	b.n	8001d74 <TempTask+0x8>

08001d7c <StartNavigationTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartNavigationTask */
void StartNavigationTask(void *argument)
{
 8001d7c:	b5b0      	push	{r4, r5, r7, lr}
 8001d7e:	b08c      	sub	sp, #48	; 0x30
 8001d80:	af02      	add	r7, sp, #8
 8001d82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartNavigationTask */
  /* Infinite loop */
  for(;;)
  {
	  if (newInstruction.startDelimiter == START_DELIMITER && newInstruction.endDelimiter == END_DELIMITER)
 8001d84:	4b2b      	ldr	r3, [pc, #172]	; (8001e34 <StartNavigationTask+0xb8>)
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	2b5b      	cmp	r3, #91	; 0x5b
 8001d8a:	d14f      	bne.n	8001e2c <StartNavigationTask+0xb0>
 8001d8c:	4b29      	ldr	r3, [pc, #164]	; (8001e34 <StartNavigationTask+0xb8>)
 8001d8e:	7a9b      	ldrb	r3, [r3, #10]
 8001d90:	2b5d      	cmp	r3, #93	; 0x5d
 8001d92:	d14b      	bne.n	8001e2c <StartNavigationTask+0xb0>
		{
		  targetX = newInstruction.xCoord;
 8001d94:	4b27      	ldr	r3, [pc, #156]	; (8001e34 <StartNavigationTask+0xb8>)
 8001d96:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8001d9a:	4a27      	ldr	r2, [pc, #156]	; (8001e38 <StartNavigationTask+0xbc>)
 8001d9c:	6013      	str	r3, [r2, #0]
		  targetY = newInstruction.yCoord;
 8001d9e:	4b25      	ldr	r3, [pc, #148]	; (8001e34 <StartNavigationTask+0xb8>)
 8001da0:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8001da4:	4a25      	ldr	r2, [pc, #148]	; (8001e3c <StartNavigationTask+0xc0>)
 8001da6:	6013      	str	r3, [r2, #0]
		  targetMeasurements = *(SensorMeasurements*)&newInstruction.sensorControl;
 8001da8:	4b25      	ldr	r3, [pc, #148]	; (8001e40 <StartNavigationTask+0xc4>)
 8001daa:	4a26      	ldr	r2, [pc, #152]	; (8001e44 <StartNavigationTask+0xc8>)
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	7013      	strb	r3, [r2, #0]
		  printf("Received message with x: %f, y: %f\n", targetX, targetY);
 8001db0:	4b21      	ldr	r3, [pc, #132]	; (8001e38 <StartNavigationTask+0xbc>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7fe fbc7 	bl	8000548 <__aeabi_f2d>
 8001dba:	4604      	mov	r4, r0
 8001dbc:	460d      	mov	r5, r1
 8001dbe:	4b1f      	ldr	r3, [pc, #124]	; (8001e3c <StartNavigationTask+0xc0>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7fe fbc0 	bl	8000548 <__aeabi_f2d>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	460b      	mov	r3, r1
 8001dcc:	e9cd 2300 	strd	r2, r3, [sp]
 8001dd0:	4622      	mov	r2, r4
 8001dd2:	462b      	mov	r3, r5
 8001dd4:	481c      	ldr	r0, [pc, #112]	; (8001e48 <StartNavigationTask+0xcc>)
 8001dd6:	f008 fcc9 	bl	800a76c <iprintf>
		  navigationInstruction instructions[INSTRUCTION_BUFFER_SIZE];
		  uint8_t instructionCnt = calculatePath(instructions);
 8001dda:	f107 030c 	add.w	r3, r7, #12
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff f962 	bl	80010a8 <calculatePath>
 8001de4:	4603      	mov	r3, r0
 8001de6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		  transmitInstructions(instructions, instructionCnt);
 8001dea:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001dee:	f107 030c 	add.w	r3, r7, #12
 8001df2:	4611      	mov	r1, r2
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff fa83 	bl	8001300 <transmitInstructions>
		  printSensorMeasurements(targetMeasurements);
 8001dfa:	4b12      	ldr	r3, [pc, #72]	; (8001e44 <StartNavigationTask+0xc8>)
 8001dfc:	7818      	ldrb	r0, [r3, #0]
 8001dfe:	f7ff ff1f 	bl	8001c40 <printSensorMeasurements>
		  printf("Received message with x: %f, y: %f\n", targetX, targetY);
 8001e02:	4b0d      	ldr	r3, [pc, #52]	; (8001e38 <StartNavigationTask+0xbc>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7fe fb9e 	bl	8000548 <__aeabi_f2d>
 8001e0c:	4604      	mov	r4, r0
 8001e0e:	460d      	mov	r5, r1
 8001e10:	4b0a      	ldr	r3, [pc, #40]	; (8001e3c <StartNavigationTask+0xc0>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7fe fb97 	bl	8000548 <__aeabi_f2d>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	e9cd 2300 	strd	r2, r3, [sp]
 8001e22:	4622      	mov	r2, r4
 8001e24:	462b      	mov	r3, r5
 8001e26:	4808      	ldr	r0, [pc, #32]	; (8001e48 <StartNavigationTask+0xcc>)
 8001e28:	f008 fca0 	bl	800a76c <iprintf>
		}
		vTaskSuspend(NULL);
 8001e2c:	2000      	movs	r0, #0
 8001e2e:	f006 f997 	bl	8008160 <vTaskSuspend>
	  if (newInstruction.startDelimiter == START_DELIMITER && newInstruction.endDelimiter == END_DELIMITER)
 8001e32:	e7a7      	b.n	8001d84 <StartNavigationTask+0x8>
 8001e34:	20000450 	.word	0x20000450
 8001e38:	20000440 	.word	0x20000440
 8001e3c:	20000444 	.word	0x20000444
 8001e40:	20000459 	.word	0x20000459
 8001e44:	2000044c 	.word	0x2000044c
 8001e48:	0800d370 	.word	0x0800d370

08001e4c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a04      	ldr	r2, [pc, #16]	; (8001e6c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d101      	bne.n	8001e62 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001e5e:	f000 fb7f 	bl	8002560 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001e62:	bf00      	nop
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	40001000 	.word	0x40001000

08001e70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e74:	b672      	cpsid	i
}
 8001e76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e78:	e7fe      	b.n	8001e78 <Error_Handler+0x8>
	...

08001e7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e82:	4b11      	ldr	r3, [pc, #68]	; (8001ec8 <HAL_MspInit+0x4c>)
 8001e84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e86:	4a10      	ldr	r2, [pc, #64]	; (8001ec8 <HAL_MspInit+0x4c>)
 8001e88:	f043 0301 	orr.w	r3, r3, #1
 8001e8c:	6613      	str	r3, [r2, #96]	; 0x60
 8001e8e:	4b0e      	ldr	r3, [pc, #56]	; (8001ec8 <HAL_MspInit+0x4c>)
 8001e90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	607b      	str	r3, [r7, #4]
 8001e98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e9a:	4b0b      	ldr	r3, [pc, #44]	; (8001ec8 <HAL_MspInit+0x4c>)
 8001e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e9e:	4a0a      	ldr	r2, [pc, #40]	; (8001ec8 <HAL_MspInit+0x4c>)
 8001ea0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ea4:	6593      	str	r3, [r2, #88]	; 0x58
 8001ea6:	4b08      	ldr	r3, [pc, #32]	; (8001ec8 <HAL_MspInit+0x4c>)
 8001ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eae:	603b      	str	r3, [r7, #0]
 8001eb0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	210f      	movs	r1, #15
 8001eb6:	f06f 0001 	mvn.w	r0, #1
 8001eba:	f000 fc29 	bl	8002710 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ebe:	bf00      	nop
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	40021000 	.word	0x40021000

08001ecc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b096      	sub	sp, #88	; 0x58
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]
 8001edc:	605a      	str	r2, [r3, #4]
 8001ede:	609a      	str	r2, [r3, #8]
 8001ee0:	60da      	str	r2, [r3, #12]
 8001ee2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ee4:	f107 0310 	add.w	r3, r7, #16
 8001ee8:	2234      	movs	r2, #52	; 0x34
 8001eea:	2100      	movs	r1, #0
 8001eec:	4618      	mov	r0, r3
 8001eee:	f008 fcab 	bl	800a848 <memset>
  if(hi2c->Instance==I2C1)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a1f      	ldr	r2, [pc, #124]	; (8001f74 <HAL_I2C_MspInit+0xa8>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d137      	bne.n	8001f6c <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001efc:	2340      	movs	r3, #64	; 0x40
 8001efe:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001f00:	2300      	movs	r3, #0
 8001f02:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f04:	f107 0310 	add.w	r3, r7, #16
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f002 fd7d 	bl	8004a08 <HAL_RCCEx_PeriphCLKConfig>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001f14:	f7ff ffac 	bl	8001e70 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f18:	4b17      	ldr	r3, [pc, #92]	; (8001f78 <HAL_I2C_MspInit+0xac>)
 8001f1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f1c:	4a16      	ldr	r2, [pc, #88]	; (8001f78 <HAL_I2C_MspInit+0xac>)
 8001f1e:	f043 0301 	orr.w	r3, r3, #1
 8001f22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f24:	4b14      	ldr	r3, [pc, #80]	; (8001f78 <HAL_I2C_MspInit+0xac>)
 8001f26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f28:	f003 0301 	and.w	r3, r3, #1
 8001f2c:	60fb      	str	r3, [r7, #12]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001f30:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001f34:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f36:	2312      	movs	r3, #18
 8001f38:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f42:	2304      	movs	r3, #4
 8001f44:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f46:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f50:	f000 fe8a 	bl	8002c68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f54:	4b08      	ldr	r3, [pc, #32]	; (8001f78 <HAL_I2C_MspInit+0xac>)
 8001f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f58:	4a07      	ldr	r2, [pc, #28]	; (8001f78 <HAL_I2C_MspInit+0xac>)
 8001f5a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f5e:	6593      	str	r3, [r2, #88]	; 0x58
 8001f60:	4b05      	ldr	r3, [pc, #20]	; (8001f78 <HAL_I2C_MspInit+0xac>)
 8001f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f68:	60bb      	str	r3, [r7, #8]
 8001f6a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001f6c:	bf00      	nop
 8001f6e:	3758      	adds	r7, #88	; 0x58
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	40005400 	.word	0x40005400
 8001f78:	40021000 	.word	0x40021000

08001f7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b098      	sub	sp, #96	; 0x60
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f84:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	605a      	str	r2, [r3, #4]
 8001f8e:	609a      	str	r2, [r3, #8]
 8001f90:	60da      	str	r2, [r3, #12]
 8001f92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f94:	f107 0318 	add.w	r3, r7, #24
 8001f98:	2234      	movs	r2, #52	; 0x34
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f008 fc53 	bl	800a848 <memset>
  if(huart->Instance==USART1)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a78      	ldr	r2, [pc, #480]	; (8002188 <HAL_UART_MspInit+0x20c>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d168      	bne.n	800207e <HAL_UART_MspInit+0x102>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001fac:	2301      	movs	r3, #1
 8001fae:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fb4:	f107 0318 	add.w	r3, r7, #24
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f002 fd25 	bl	8004a08 <HAL_RCCEx_PeriphCLKConfig>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001fc4:	f7ff ff54 	bl	8001e70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fc8:	4b70      	ldr	r3, [pc, #448]	; (800218c <HAL_UART_MspInit+0x210>)
 8001fca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fcc:	4a6f      	ldr	r2, [pc, #444]	; (800218c <HAL_UART_MspInit+0x210>)
 8001fce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fd2:	6613      	str	r3, [r2, #96]	; 0x60
 8001fd4:	4b6d      	ldr	r3, [pc, #436]	; (800218c <HAL_UART_MspInit+0x210>)
 8001fd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fdc:	617b      	str	r3, [r7, #20]
 8001fde:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fe0:	4b6a      	ldr	r3, [pc, #424]	; (800218c <HAL_UART_MspInit+0x210>)
 8001fe2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe4:	4a69      	ldr	r2, [pc, #420]	; (800218c <HAL_UART_MspInit+0x210>)
 8001fe6:	f043 0302 	orr.w	r3, r3, #2
 8001fea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fec:	4b67      	ldr	r3, [pc, #412]	; (800218c <HAL_UART_MspInit+0x210>)
 8001fee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ff0:	f003 0302 	and.w	r3, r3, #2
 8001ff4:	613b      	str	r3, [r7, #16]
 8001ff6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ff8:	23c0      	movs	r3, #192	; 0xc0
 8001ffa:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002000:	2300      	movs	r3, #0
 8002002:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002004:	2303      	movs	r3, #3
 8002006:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002008:	2307      	movs	r3, #7
 800200a:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800200c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002010:	4619      	mov	r1, r3
 8002012:	485f      	ldr	r0, [pc, #380]	; (8002190 <HAL_UART_MspInit+0x214>)
 8002014:	f000 fe28 	bl	8002c68 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002018:	4b5e      	ldr	r3, [pc, #376]	; (8002194 <HAL_UART_MspInit+0x218>)
 800201a:	4a5f      	ldr	r2, [pc, #380]	; (8002198 <HAL_UART_MspInit+0x21c>)
 800201c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 800201e:	4b5d      	ldr	r3, [pc, #372]	; (8002194 <HAL_UART_MspInit+0x218>)
 8002020:	2202      	movs	r2, #2
 8002022:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002024:	4b5b      	ldr	r3, [pc, #364]	; (8002194 <HAL_UART_MspInit+0x218>)
 8002026:	2200      	movs	r2, #0
 8002028:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800202a:	4b5a      	ldr	r3, [pc, #360]	; (8002194 <HAL_UART_MspInit+0x218>)
 800202c:	2200      	movs	r2, #0
 800202e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002030:	4b58      	ldr	r3, [pc, #352]	; (8002194 <HAL_UART_MspInit+0x218>)
 8002032:	2280      	movs	r2, #128	; 0x80
 8002034:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002036:	4b57      	ldr	r3, [pc, #348]	; (8002194 <HAL_UART_MspInit+0x218>)
 8002038:	2200      	movs	r2, #0
 800203a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800203c:	4b55      	ldr	r3, [pc, #340]	; (8002194 <HAL_UART_MspInit+0x218>)
 800203e:	2200      	movs	r2, #0
 8002040:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002042:	4b54      	ldr	r3, [pc, #336]	; (8002194 <HAL_UART_MspInit+0x218>)
 8002044:	2200      	movs	r2, #0
 8002046:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002048:	4b52      	ldr	r3, [pc, #328]	; (8002194 <HAL_UART_MspInit+0x218>)
 800204a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800204e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002050:	4850      	ldr	r0, [pc, #320]	; (8002194 <HAL_UART_MspInit+0x218>)
 8002052:	f000 fb87 	bl	8002764 <HAL_DMA_Init>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 800205c:	f7ff ff08 	bl	8001e70 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4a4c      	ldr	r2, [pc, #304]	; (8002194 <HAL_UART_MspInit+0x218>)
 8002064:	675a      	str	r2, [r3, #116]	; 0x74
 8002066:	4a4b      	ldr	r2, [pc, #300]	; (8002194 <HAL_UART_MspInit+0x218>)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800206c:	2200      	movs	r2, #0
 800206e:	2105      	movs	r1, #5
 8002070:	2025      	movs	r0, #37	; 0x25
 8002072:	f000 fb4d 	bl	8002710 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002076:	2025      	movs	r0, #37	; 0x25
 8002078:	f000 fb66 	bl	8002748 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800207c:	e07f      	b.n	800217e <HAL_UART_MspInit+0x202>
  else if(huart->Instance==USART2)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a46      	ldr	r2, [pc, #280]	; (800219c <HAL_UART_MspInit+0x220>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d17a      	bne.n	800217e <HAL_UART_MspInit+0x202>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002088:	2302      	movs	r3, #2
 800208a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800208c:	2300      	movs	r3, #0
 800208e:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002090:	f107 0318 	add.w	r3, r7, #24
 8002094:	4618      	mov	r0, r3
 8002096:	f002 fcb7 	bl	8004a08 <HAL_RCCEx_PeriphCLKConfig>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <HAL_UART_MspInit+0x128>
      Error_Handler();
 80020a0:	f7ff fee6 	bl	8001e70 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80020a4:	4b39      	ldr	r3, [pc, #228]	; (800218c <HAL_UART_MspInit+0x210>)
 80020a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a8:	4a38      	ldr	r2, [pc, #224]	; (800218c <HAL_UART_MspInit+0x210>)
 80020aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020ae:	6593      	str	r3, [r2, #88]	; 0x58
 80020b0:	4b36      	ldr	r3, [pc, #216]	; (800218c <HAL_UART_MspInit+0x210>)
 80020b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b8:	60fb      	str	r3, [r7, #12]
 80020ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020bc:	4b33      	ldr	r3, [pc, #204]	; (800218c <HAL_UART_MspInit+0x210>)
 80020be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020c0:	4a32      	ldr	r2, [pc, #200]	; (800218c <HAL_UART_MspInit+0x210>)
 80020c2:	f043 0301 	orr.w	r3, r3, #1
 80020c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020c8:	4b30      	ldr	r3, [pc, #192]	; (800218c <HAL_UART_MspInit+0x210>)
 80020ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020cc:	f003 0301 	and.w	r3, r3, #1
 80020d0:	60bb      	str	r3, [r7, #8]
 80020d2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80020d4:	2304      	movs	r3, #4
 80020d6:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d8:	2302      	movs	r3, #2
 80020da:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020dc:	2300      	movs	r3, #0
 80020de:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020e0:	2303      	movs	r3, #3
 80020e2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020e4:	2307      	movs	r3, #7
 80020e6:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020e8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80020ec:	4619      	mov	r1, r3
 80020ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020f2:	f000 fdb9 	bl	8002c68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80020f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020fa:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fc:	2302      	movs	r3, #2
 80020fe:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002100:	2300      	movs	r3, #0
 8002102:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002104:	2303      	movs	r3, #3
 8002106:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8002108:	2303      	movs	r3, #3
 800210a:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800210c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002110:	4619      	mov	r1, r3
 8002112:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002116:	f000 fda7 	bl	8002c68 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800211a:	4b21      	ldr	r3, [pc, #132]	; (80021a0 <HAL_UART_MspInit+0x224>)
 800211c:	4a21      	ldr	r2, [pc, #132]	; (80021a4 <HAL_UART_MspInit+0x228>)
 800211e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8002120:	4b1f      	ldr	r3, [pc, #124]	; (80021a0 <HAL_UART_MspInit+0x224>)
 8002122:	2202      	movs	r2, #2
 8002124:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002126:	4b1e      	ldr	r3, [pc, #120]	; (80021a0 <HAL_UART_MspInit+0x224>)
 8002128:	2200      	movs	r2, #0
 800212a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800212c:	4b1c      	ldr	r3, [pc, #112]	; (80021a0 <HAL_UART_MspInit+0x224>)
 800212e:	2200      	movs	r2, #0
 8002130:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002132:	4b1b      	ldr	r3, [pc, #108]	; (80021a0 <HAL_UART_MspInit+0x224>)
 8002134:	2280      	movs	r2, #128	; 0x80
 8002136:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002138:	4b19      	ldr	r3, [pc, #100]	; (80021a0 <HAL_UART_MspInit+0x224>)
 800213a:	2200      	movs	r2, #0
 800213c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800213e:	4b18      	ldr	r3, [pc, #96]	; (80021a0 <HAL_UART_MspInit+0x224>)
 8002140:	2200      	movs	r2, #0
 8002142:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002144:	4b16      	ldr	r3, [pc, #88]	; (80021a0 <HAL_UART_MspInit+0x224>)
 8002146:	2200      	movs	r2, #0
 8002148:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800214a:	4b15      	ldr	r3, [pc, #84]	; (80021a0 <HAL_UART_MspInit+0x224>)
 800214c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002150:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002152:	4813      	ldr	r0, [pc, #76]	; (80021a0 <HAL_UART_MspInit+0x224>)
 8002154:	f000 fb06 	bl	8002764 <HAL_DMA_Init>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <HAL_UART_MspInit+0x1e6>
      Error_Handler();
 800215e:	f7ff fe87 	bl	8001e70 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a0e      	ldr	r2, [pc, #56]	; (80021a0 <HAL_UART_MspInit+0x224>)
 8002166:	675a      	str	r2, [r3, #116]	; 0x74
 8002168:	4a0d      	ldr	r2, [pc, #52]	; (80021a0 <HAL_UART_MspInit+0x224>)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800216e:	2200      	movs	r2, #0
 8002170:	2105      	movs	r1, #5
 8002172:	2026      	movs	r0, #38	; 0x26
 8002174:	f000 facc 	bl	8002710 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002178:	2026      	movs	r0, #38	; 0x26
 800217a:	f000 fae5 	bl	8002748 <HAL_NVIC_EnableIRQ>
}
 800217e:	bf00      	nop
 8002180:	3760      	adds	r7, #96	; 0x60
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	40013800 	.word	0x40013800
 800218c:	40021000 	.word	0x40021000
 8002190:	48000400 	.word	0x48000400
 8002194:	20000368 	.word	0x20000368
 8002198:	40020058 	.word	0x40020058
 800219c:	40004400 	.word	0x40004400
 80021a0:	200003b0 	.word	0x200003b0
 80021a4:	4002006c 	.word	0x4002006c

080021a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b08e      	sub	sp, #56	; 0x38
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80021b0:	2300      	movs	r3, #0
 80021b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80021b6:	4b34      	ldr	r3, [pc, #208]	; (8002288 <HAL_InitTick+0xe0>)
 80021b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ba:	4a33      	ldr	r2, [pc, #204]	; (8002288 <HAL_InitTick+0xe0>)
 80021bc:	f043 0310 	orr.w	r3, r3, #16
 80021c0:	6593      	str	r3, [r2, #88]	; 0x58
 80021c2:	4b31      	ldr	r3, [pc, #196]	; (8002288 <HAL_InitTick+0xe0>)
 80021c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c6:	f003 0310 	and.w	r3, r3, #16
 80021ca:	60fb      	str	r3, [r7, #12]
 80021cc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80021ce:	f107 0210 	add.w	r2, r7, #16
 80021d2:	f107 0314 	add.w	r3, r7, #20
 80021d6:	4611      	mov	r1, r2
 80021d8:	4618      	mov	r0, r3
 80021da:	f002 fb83 	bl	80048e4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80021de:	6a3b      	ldr	r3, [r7, #32]
 80021e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80021e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d103      	bne.n	80021f0 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80021e8:	f002 fb50 	bl	800488c <HAL_RCC_GetPCLK1Freq>
 80021ec:	6378      	str	r0, [r7, #52]	; 0x34
 80021ee:	e004      	b.n	80021fa <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80021f0:	f002 fb4c 	bl	800488c <HAL_RCC_GetPCLK1Freq>
 80021f4:	4603      	mov	r3, r0
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80021fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021fc:	4a23      	ldr	r2, [pc, #140]	; (800228c <HAL_InitTick+0xe4>)
 80021fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002202:	0c9b      	lsrs	r3, r3, #18
 8002204:	3b01      	subs	r3, #1
 8002206:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002208:	4b21      	ldr	r3, [pc, #132]	; (8002290 <HAL_InitTick+0xe8>)
 800220a:	4a22      	ldr	r2, [pc, #136]	; (8002294 <HAL_InitTick+0xec>)
 800220c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800220e:	4b20      	ldr	r3, [pc, #128]	; (8002290 <HAL_InitTick+0xe8>)
 8002210:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002214:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002216:	4a1e      	ldr	r2, [pc, #120]	; (8002290 <HAL_InitTick+0xe8>)
 8002218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800221a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800221c:	4b1c      	ldr	r3, [pc, #112]	; (8002290 <HAL_InitTick+0xe8>)
 800221e:	2200      	movs	r2, #0
 8002220:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002222:	4b1b      	ldr	r3, [pc, #108]	; (8002290 <HAL_InitTick+0xe8>)
 8002224:	2200      	movs	r2, #0
 8002226:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002228:	4b19      	ldr	r3, [pc, #100]	; (8002290 <HAL_InitTick+0xe8>)
 800222a:	2200      	movs	r2, #0
 800222c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800222e:	4818      	ldr	r0, [pc, #96]	; (8002290 <HAL_InitTick+0xe8>)
 8002230:	f002 fd80 	bl	8004d34 <HAL_TIM_Base_Init>
 8002234:	4603      	mov	r3, r0
 8002236:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800223a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800223e:	2b00      	cmp	r3, #0
 8002240:	d11b      	bne.n	800227a <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002242:	4813      	ldr	r0, [pc, #76]	; (8002290 <HAL_InitTick+0xe8>)
 8002244:	f002 fdd8 	bl	8004df8 <HAL_TIM_Base_Start_IT>
 8002248:	4603      	mov	r3, r0
 800224a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800224e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002252:	2b00      	cmp	r3, #0
 8002254:	d111      	bne.n	800227a <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8002256:	2036      	movs	r0, #54	; 0x36
 8002258:	f000 fa76 	bl	8002748 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2b0f      	cmp	r3, #15
 8002260:	d808      	bhi.n	8002274 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8002262:	2200      	movs	r2, #0
 8002264:	6879      	ldr	r1, [r7, #4]
 8002266:	2036      	movs	r0, #54	; 0x36
 8002268:	f000 fa52 	bl	8002710 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800226c:	4a0a      	ldr	r2, [pc, #40]	; (8002298 <HAL_InitTick+0xf0>)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6013      	str	r3, [r2, #0]
 8002272:	e002      	b.n	800227a <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800227a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800227e:	4618      	mov	r0, r3
 8002280:	3738      	adds	r7, #56	; 0x38
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	40021000 	.word	0x40021000
 800228c:	431bde83 	.word	0x431bde83
 8002290:	2000045c 	.word	0x2000045c
 8002294:	40001000 	.word	0x40001000
 8002298:	20000004 	.word	0x20000004

0800229c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022a0:	e7fe      	b.n	80022a0 <NMI_Handler+0x4>

080022a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022a2:	b480      	push	{r7}
 80022a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022a6:	e7fe      	b.n	80022a6 <HardFault_Handler+0x4>

080022a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022ac:	e7fe      	b.n	80022ac <MemManage_Handler+0x4>

080022ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022ae:	b480      	push	{r7}
 80022b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022b2:	e7fe      	b.n	80022b2 <BusFault_Handler+0x4>

080022b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022b8:	e7fe      	b.n	80022b8 <UsageFault_Handler+0x4>

080022ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022ba:	b480      	push	{r7}
 80022bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022be:	bf00      	nop
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80022cc:	4802      	ldr	r0, [pc, #8]	; (80022d8 <DMA1_Channel5_IRQHandler+0x10>)
 80022ce:	f000 fbe0 	bl	8002a92 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80022d2:	bf00      	nop
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	20000368 	.word	0x20000368

080022dc <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80022e0:	4802      	ldr	r0, [pc, #8]	; (80022ec <DMA1_Channel6_IRQHandler+0x10>)
 80022e2:	f000 fbd6 	bl	8002a92 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80022e6:	bf00      	nop
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	200003b0 	.word	0x200003b0

080022f0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80022f4:	4802      	ldr	r0, [pc, #8]	; (8002300 <USART1_IRQHandler+0x10>)
 80022f6:	f003 f981 	bl	80055fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80022fa:	bf00      	nop
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	20000258 	.word	0x20000258

08002304 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002308:	4802      	ldr	r0, [pc, #8]	; (8002314 <USART2_IRQHandler+0x10>)
 800230a:	f003 f977 	bl	80055fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800230e:	bf00      	nop
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	200002e0 	.word	0x200002e0

08002318 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800231c:	4802      	ldr	r0, [pc, #8]	; (8002328 <TIM6_IRQHandler+0x10>)
 800231e:	f002 fdbf 	bl	8004ea0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8002322:	bf00      	nop
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	2000045c 	.word	0x2000045c

0800232c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  return 1;
 8002330:	2301      	movs	r3, #1
}
 8002332:	4618      	mov	r0, r3
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <_kill>:

int _kill(int pid, int sig)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002346:	f008 fae1 	bl	800a90c <__errno>
 800234a:	4603      	mov	r3, r0
 800234c:	2216      	movs	r2, #22
 800234e:	601a      	str	r2, [r3, #0]
  return -1;
 8002350:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002354:	4618      	mov	r0, r3
 8002356:	3708      	adds	r7, #8
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}

0800235c <_exit>:

void _exit (int status)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002364:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f7ff ffe7 	bl	800233c <_kill>
  while (1) {}    /* Make sure we hang here */
 800236e:	e7fe      	b.n	800236e <_exit+0x12>

08002370 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b086      	sub	sp, #24
 8002374:	af00      	add	r7, sp, #0
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	60b9      	str	r1, [r7, #8]
 800237a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800237c:	2300      	movs	r3, #0
 800237e:	617b      	str	r3, [r7, #20]
 8002380:	e00a      	b.n	8002398 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002382:	f3af 8000 	nop.w
 8002386:	4601      	mov	r1, r0
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	1c5a      	adds	r2, r3, #1
 800238c:	60ba      	str	r2, [r7, #8]
 800238e:	b2ca      	uxtb	r2, r1
 8002390:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	3301      	adds	r3, #1
 8002396:	617b      	str	r3, [r7, #20]
 8002398:	697a      	ldr	r2, [r7, #20]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	429a      	cmp	r2, r3
 800239e:	dbf0      	blt.n	8002382 <_read+0x12>
  }

  return len;
 80023a0:	687b      	ldr	r3, [r7, #4]
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3718      	adds	r7, #24
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b086      	sub	sp, #24
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	60f8      	str	r0, [r7, #12]
 80023b2:	60b9      	str	r1, [r7, #8]
 80023b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023b6:	2300      	movs	r3, #0
 80023b8:	617b      	str	r3, [r7, #20]
 80023ba:	e009      	b.n	80023d0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	1c5a      	adds	r2, r3, #1
 80023c0:	60ba      	str	r2, [r7, #8]
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7fe fe5b 	bl	8001080 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	3301      	adds	r3, #1
 80023ce:	617b      	str	r3, [r7, #20]
 80023d0:	697a      	ldr	r2, [r7, #20]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	dbf1      	blt.n	80023bc <_write+0x12>
  }
  return len;
 80023d8:	687b      	ldr	r3, [r7, #4]
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3718      	adds	r7, #24
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <_close>:

int _close(int file)
{
 80023e2:	b480      	push	{r7}
 80023e4:	b083      	sub	sp, #12
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80023ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	370c      	adds	r7, #12
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr

080023fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023fa:	b480      	push	{r7}
 80023fc:	b083      	sub	sp, #12
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
 8002402:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800240a:	605a      	str	r2, [r3, #4]
  return 0;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr

0800241a <_isatty>:

int _isatty(int file)
{
 800241a:	b480      	push	{r7}
 800241c:	b083      	sub	sp, #12
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002422:	2301      	movs	r3, #1
}
 8002424:	4618      	mov	r0, r3
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	3714      	adds	r7, #20
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
	...

0800244c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b086      	sub	sp, #24
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002454:	4a14      	ldr	r2, [pc, #80]	; (80024a8 <_sbrk+0x5c>)
 8002456:	4b15      	ldr	r3, [pc, #84]	; (80024ac <_sbrk+0x60>)
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002460:	4b13      	ldr	r3, [pc, #76]	; (80024b0 <_sbrk+0x64>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d102      	bne.n	800246e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002468:	4b11      	ldr	r3, [pc, #68]	; (80024b0 <_sbrk+0x64>)
 800246a:	4a12      	ldr	r2, [pc, #72]	; (80024b4 <_sbrk+0x68>)
 800246c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800246e:	4b10      	ldr	r3, [pc, #64]	; (80024b0 <_sbrk+0x64>)
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4413      	add	r3, r2
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	429a      	cmp	r2, r3
 800247a:	d207      	bcs.n	800248c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800247c:	f008 fa46 	bl	800a90c <__errno>
 8002480:	4603      	mov	r3, r0
 8002482:	220c      	movs	r2, #12
 8002484:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002486:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800248a:	e009      	b.n	80024a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800248c:	4b08      	ldr	r3, [pc, #32]	; (80024b0 <_sbrk+0x64>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002492:	4b07      	ldr	r3, [pc, #28]	; (80024b0 <_sbrk+0x64>)
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4413      	add	r3, r2
 800249a:	4a05      	ldr	r2, [pc, #20]	; (80024b0 <_sbrk+0x64>)
 800249c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800249e:	68fb      	ldr	r3, [r7, #12]
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3718      	adds	r7, #24
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	2000a000 	.word	0x2000a000
 80024ac:	00000400 	.word	0x00000400
 80024b0:	200004a8 	.word	0x200004a8
 80024b4:	20002770 	.word	0x20002770

080024b8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80024bc:	4b06      	ldr	r3, [pc, #24]	; (80024d8 <SystemInit+0x20>)
 80024be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024c2:	4a05      	ldr	r2, [pc, #20]	; (80024d8 <SystemInit+0x20>)
 80024c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80024cc:	bf00      	nop
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	e000ed00 	.word	0xe000ed00

080024dc <Reset_Handler>:
 80024dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002514 <LoopForever+0x2>
 80024e0:	f7ff ffea 	bl	80024b8 <SystemInit>
 80024e4:	480c      	ldr	r0, [pc, #48]	; (8002518 <LoopForever+0x6>)
 80024e6:	490d      	ldr	r1, [pc, #52]	; (800251c <LoopForever+0xa>)
 80024e8:	4a0d      	ldr	r2, [pc, #52]	; (8002520 <LoopForever+0xe>)
 80024ea:	2300      	movs	r3, #0
 80024ec:	e002      	b.n	80024f4 <LoopCopyDataInit>

080024ee <CopyDataInit>:
 80024ee:	58d4      	ldr	r4, [r2, r3]
 80024f0:	50c4      	str	r4, [r0, r3]
 80024f2:	3304      	adds	r3, #4

080024f4 <LoopCopyDataInit>:
 80024f4:	18c4      	adds	r4, r0, r3
 80024f6:	428c      	cmp	r4, r1
 80024f8:	d3f9      	bcc.n	80024ee <CopyDataInit>
 80024fa:	4a0a      	ldr	r2, [pc, #40]	; (8002524 <LoopForever+0x12>)
 80024fc:	4c0a      	ldr	r4, [pc, #40]	; (8002528 <LoopForever+0x16>)
 80024fe:	2300      	movs	r3, #0
 8002500:	e001      	b.n	8002506 <LoopFillZerobss>

08002502 <FillZerobss>:
 8002502:	6013      	str	r3, [r2, #0]
 8002504:	3204      	adds	r2, #4

08002506 <LoopFillZerobss>:
 8002506:	42a2      	cmp	r2, r4
 8002508:	d3fb      	bcc.n	8002502 <FillZerobss>
 800250a:	f008 fa05 	bl	800a918 <__libc_init_array>
 800250e:	f7ff f8d5 	bl	80016bc <main>

08002512 <LoopForever>:
 8002512:	e7fe      	b.n	8002512 <LoopForever>
 8002514:	2000a000 	.word	0x2000a000
 8002518:	20000000 	.word	0x20000000
 800251c:	200001e8 	.word	0x200001e8
 8002520:	0800d900 	.word	0x0800d900
 8002524:	200001e8 	.word	0x200001e8
 8002528:	2000276c 	.word	0x2000276c

0800252c <ADC1_2_IRQHandler>:
 800252c:	e7fe      	b.n	800252c <ADC1_2_IRQHandler>

0800252e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	b082      	sub	sp, #8
 8002532:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002534:	2300      	movs	r3, #0
 8002536:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002538:	2003      	movs	r0, #3
 800253a:	f000 f8de 	bl	80026fa <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800253e:	200f      	movs	r0, #15
 8002540:	f7ff fe32 	bl	80021a8 <HAL_InitTick>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d002      	beq.n	8002550 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	71fb      	strb	r3, [r7, #7]
 800254e:	e001      	b.n	8002554 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002550:	f7ff fc94 	bl	8001e7c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002554:	79fb      	ldrb	r3, [r7, #7]
}
 8002556:	4618      	mov	r0, r3
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
	...

08002560 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002564:	4b06      	ldr	r3, [pc, #24]	; (8002580 <HAL_IncTick+0x20>)
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	461a      	mov	r2, r3
 800256a:	4b06      	ldr	r3, [pc, #24]	; (8002584 <HAL_IncTick+0x24>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4413      	add	r3, r2
 8002570:	4a04      	ldr	r2, [pc, #16]	; (8002584 <HAL_IncTick+0x24>)
 8002572:	6013      	str	r3, [r2, #0]
}
 8002574:	bf00      	nop
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	20000008 	.word	0x20000008
 8002584:	200004ac 	.word	0x200004ac

08002588 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  return uwTick;
 800258c:	4b03      	ldr	r3, [pc, #12]	; (800259c <HAL_GetTick+0x14>)
 800258e:	681b      	ldr	r3, [r3, #0]
}
 8002590:	4618      	mov	r0, r3
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	200004ac 	.word	0x200004ac

080025a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b085      	sub	sp, #20
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f003 0307 	and.w	r3, r3, #7
 80025ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025b0:	4b0c      	ldr	r3, [pc, #48]	; (80025e4 <__NVIC_SetPriorityGrouping+0x44>)
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025b6:	68ba      	ldr	r2, [r7, #8]
 80025b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025bc:	4013      	ands	r3, r2
 80025be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025d2:	4a04      	ldr	r2, [pc, #16]	; (80025e4 <__NVIC_SetPriorityGrouping+0x44>)
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	60d3      	str	r3, [r2, #12]
}
 80025d8:	bf00      	nop
 80025da:	3714      	adds	r7, #20
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr
 80025e4:	e000ed00 	.word	0xe000ed00

080025e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025ec:	4b04      	ldr	r3, [pc, #16]	; (8002600 <__NVIC_GetPriorityGrouping+0x18>)
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	0a1b      	lsrs	r3, r3, #8
 80025f2:	f003 0307 	and.w	r3, r3, #7
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr
 8002600:	e000ed00 	.word	0xe000ed00

08002604 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	4603      	mov	r3, r0
 800260c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800260e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002612:	2b00      	cmp	r3, #0
 8002614:	db0b      	blt.n	800262e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002616:	79fb      	ldrb	r3, [r7, #7]
 8002618:	f003 021f 	and.w	r2, r3, #31
 800261c:	4907      	ldr	r1, [pc, #28]	; (800263c <__NVIC_EnableIRQ+0x38>)
 800261e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002622:	095b      	lsrs	r3, r3, #5
 8002624:	2001      	movs	r0, #1
 8002626:	fa00 f202 	lsl.w	r2, r0, r2
 800262a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800262e:	bf00      	nop
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	e000e100 	.word	0xe000e100

08002640 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	4603      	mov	r3, r0
 8002648:	6039      	str	r1, [r7, #0]
 800264a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800264c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002650:	2b00      	cmp	r3, #0
 8002652:	db0a      	blt.n	800266a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	b2da      	uxtb	r2, r3
 8002658:	490c      	ldr	r1, [pc, #48]	; (800268c <__NVIC_SetPriority+0x4c>)
 800265a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265e:	0112      	lsls	r2, r2, #4
 8002660:	b2d2      	uxtb	r2, r2
 8002662:	440b      	add	r3, r1
 8002664:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002668:	e00a      	b.n	8002680 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	b2da      	uxtb	r2, r3
 800266e:	4908      	ldr	r1, [pc, #32]	; (8002690 <__NVIC_SetPriority+0x50>)
 8002670:	79fb      	ldrb	r3, [r7, #7]
 8002672:	f003 030f 	and.w	r3, r3, #15
 8002676:	3b04      	subs	r3, #4
 8002678:	0112      	lsls	r2, r2, #4
 800267a:	b2d2      	uxtb	r2, r2
 800267c:	440b      	add	r3, r1
 800267e:	761a      	strb	r2, [r3, #24]
}
 8002680:	bf00      	nop
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr
 800268c:	e000e100 	.word	0xe000e100
 8002690:	e000ed00 	.word	0xe000ed00

08002694 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002694:	b480      	push	{r7}
 8002696:	b089      	sub	sp, #36	; 0x24
 8002698:	af00      	add	r7, sp, #0
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	60b9      	str	r1, [r7, #8]
 800269e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f003 0307 	and.w	r3, r3, #7
 80026a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	f1c3 0307 	rsb	r3, r3, #7
 80026ae:	2b04      	cmp	r3, #4
 80026b0:	bf28      	it	cs
 80026b2:	2304      	movcs	r3, #4
 80026b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	3304      	adds	r3, #4
 80026ba:	2b06      	cmp	r3, #6
 80026bc:	d902      	bls.n	80026c4 <NVIC_EncodePriority+0x30>
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	3b03      	subs	r3, #3
 80026c2:	e000      	b.n	80026c6 <NVIC_EncodePriority+0x32>
 80026c4:	2300      	movs	r3, #0
 80026c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	fa02 f303 	lsl.w	r3, r2, r3
 80026d2:	43da      	mvns	r2, r3
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	401a      	ands	r2, r3
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	fa01 f303 	lsl.w	r3, r1, r3
 80026e6:	43d9      	mvns	r1, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026ec:	4313      	orrs	r3, r2
         );
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3724      	adds	r7, #36	; 0x24
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr

080026fa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026fa:	b580      	push	{r7, lr}
 80026fc:	b082      	sub	sp, #8
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f7ff ff4c 	bl	80025a0 <__NVIC_SetPriorityGrouping>
}
 8002708:	bf00      	nop
 800270a:	3708      	adds	r7, #8
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b086      	sub	sp, #24
 8002714:	af00      	add	r7, sp, #0
 8002716:	4603      	mov	r3, r0
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	607a      	str	r2, [r7, #4]
 800271c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800271e:	2300      	movs	r3, #0
 8002720:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002722:	f7ff ff61 	bl	80025e8 <__NVIC_GetPriorityGrouping>
 8002726:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	68b9      	ldr	r1, [r7, #8]
 800272c:	6978      	ldr	r0, [r7, #20]
 800272e:	f7ff ffb1 	bl	8002694 <NVIC_EncodePriority>
 8002732:	4602      	mov	r2, r0
 8002734:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002738:	4611      	mov	r1, r2
 800273a:	4618      	mov	r0, r3
 800273c:	f7ff ff80 	bl	8002640 <__NVIC_SetPriority>
}
 8002740:	bf00      	nop
 8002742:	3718      	adds	r7, #24
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	4603      	mov	r3, r0
 8002750:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002756:	4618      	mov	r0, r3
 8002758:	f7ff ff54 	bl	8002604 <__NVIC_EnableIRQ>
}
 800275c:	bf00      	nop
 800275e:	3708      	adds	r7, #8
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}

08002764 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002764:	b480      	push	{r7}
 8002766:	b085      	sub	sp, #20
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d101      	bne.n	8002776 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e098      	b.n	80028a8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	461a      	mov	r2, r3
 800277c:	4b4d      	ldr	r3, [pc, #308]	; (80028b4 <HAL_DMA_Init+0x150>)
 800277e:	429a      	cmp	r2, r3
 8002780:	d80f      	bhi.n	80027a2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	461a      	mov	r2, r3
 8002788:	4b4b      	ldr	r3, [pc, #300]	; (80028b8 <HAL_DMA_Init+0x154>)
 800278a:	4413      	add	r3, r2
 800278c:	4a4b      	ldr	r2, [pc, #300]	; (80028bc <HAL_DMA_Init+0x158>)
 800278e:	fba2 2303 	umull	r2, r3, r2, r3
 8002792:	091b      	lsrs	r3, r3, #4
 8002794:	009a      	lsls	r2, r3, #2
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a48      	ldr	r2, [pc, #288]	; (80028c0 <HAL_DMA_Init+0x15c>)
 800279e:	641a      	str	r2, [r3, #64]	; 0x40
 80027a0:	e00e      	b.n	80027c0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	461a      	mov	r2, r3
 80027a8:	4b46      	ldr	r3, [pc, #280]	; (80028c4 <HAL_DMA_Init+0x160>)
 80027aa:	4413      	add	r3, r2
 80027ac:	4a43      	ldr	r2, [pc, #268]	; (80028bc <HAL_DMA_Init+0x158>)
 80027ae:	fba2 2303 	umull	r2, r3, r2, r3
 80027b2:	091b      	lsrs	r3, r3, #4
 80027b4:	009a      	lsls	r2, r3, #2
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a42      	ldr	r2, [pc, #264]	; (80028c8 <HAL_DMA_Init+0x164>)
 80027be:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2202      	movs	r2, #2
 80027c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80027d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027da:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80027e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	699b      	ldr	r3, [r3, #24]
 80027f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a1b      	ldr	r3, [r3, #32]
 8002802:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002804:	68fa      	ldr	r2, [r7, #12]
 8002806:	4313      	orrs	r3, r2
 8002808:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	68fa      	ldr	r2, [r7, #12]
 8002810:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800281a:	d039      	beq.n	8002890 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002820:	4a27      	ldr	r2, [pc, #156]	; (80028c0 <HAL_DMA_Init+0x15c>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d11a      	bne.n	800285c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002826:	4b29      	ldr	r3, [pc, #164]	; (80028cc <HAL_DMA_Init+0x168>)
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282e:	f003 031c 	and.w	r3, r3, #28
 8002832:	210f      	movs	r1, #15
 8002834:	fa01 f303 	lsl.w	r3, r1, r3
 8002838:	43db      	mvns	r3, r3
 800283a:	4924      	ldr	r1, [pc, #144]	; (80028cc <HAL_DMA_Init+0x168>)
 800283c:	4013      	ands	r3, r2
 800283e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002840:	4b22      	ldr	r3, [pc, #136]	; (80028cc <HAL_DMA_Init+0x168>)
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6859      	ldr	r1, [r3, #4]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800284c:	f003 031c 	and.w	r3, r3, #28
 8002850:	fa01 f303 	lsl.w	r3, r1, r3
 8002854:	491d      	ldr	r1, [pc, #116]	; (80028cc <HAL_DMA_Init+0x168>)
 8002856:	4313      	orrs	r3, r2
 8002858:	600b      	str	r3, [r1, #0]
 800285a:	e019      	b.n	8002890 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800285c:	4b1c      	ldr	r3, [pc, #112]	; (80028d0 <HAL_DMA_Init+0x16c>)
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002864:	f003 031c 	and.w	r3, r3, #28
 8002868:	210f      	movs	r1, #15
 800286a:	fa01 f303 	lsl.w	r3, r1, r3
 800286e:	43db      	mvns	r3, r3
 8002870:	4917      	ldr	r1, [pc, #92]	; (80028d0 <HAL_DMA_Init+0x16c>)
 8002872:	4013      	ands	r3, r2
 8002874:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002876:	4b16      	ldr	r3, [pc, #88]	; (80028d0 <HAL_DMA_Init+0x16c>)
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6859      	ldr	r1, [r3, #4]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002882:	f003 031c 	and.w	r3, r3, #28
 8002886:	fa01 f303 	lsl.w	r3, r1, r3
 800288a:	4911      	ldr	r1, [pc, #68]	; (80028d0 <HAL_DMA_Init+0x16c>)
 800288c:	4313      	orrs	r3, r2
 800288e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2201      	movs	r2, #1
 800289a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80028a6:	2300      	movs	r3, #0
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3714      	adds	r7, #20
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr
 80028b4:	40020407 	.word	0x40020407
 80028b8:	bffdfff8 	.word	0xbffdfff8
 80028bc:	cccccccd 	.word	0xcccccccd
 80028c0:	40020000 	.word	0x40020000
 80028c4:	bffdfbf8 	.word	0xbffdfbf8
 80028c8:	40020400 	.word	0x40020400
 80028cc:	400200a8 	.word	0x400200a8
 80028d0:	400204a8 	.word	0x400204a8

080028d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b086      	sub	sp, #24
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	607a      	str	r2, [r7, #4]
 80028e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028e2:	2300      	movs	r3, #0
 80028e4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d101      	bne.n	80028f4 <HAL_DMA_Start_IT+0x20>
 80028f0:	2302      	movs	r3, #2
 80028f2:	e04b      	b.n	800298c <HAL_DMA_Start_IT+0xb8>
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002902:	b2db      	uxtb	r3, r3
 8002904:	2b01      	cmp	r3, #1
 8002906:	d13a      	bne.n	800297e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2202      	movs	r2, #2
 800290c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2200      	movs	r2, #0
 8002914:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f022 0201 	bic.w	r2, r2, #1
 8002924:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	68b9      	ldr	r1, [r7, #8]
 800292c:	68f8      	ldr	r0, [r7, #12]
 800292e:	f000 f96b 	bl	8002c08 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002936:	2b00      	cmp	r3, #0
 8002938:	d008      	beq.n	800294c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f042 020e 	orr.w	r2, r2, #14
 8002948:	601a      	str	r2, [r3, #0]
 800294a:	e00f      	b.n	800296c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f022 0204 	bic.w	r2, r2, #4
 800295a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f042 020a 	orr.w	r2, r2, #10
 800296a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f042 0201 	orr.w	r2, r2, #1
 800297a:	601a      	str	r2, [r3, #0]
 800297c:	e005      	b.n	800298a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002986:	2302      	movs	r3, #2
 8002988:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800298a:	7dfb      	ldrb	r3, [r7, #23]
}
 800298c:	4618      	mov	r0, r3
 800298e:	3718      	adds	r7, #24
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800299c:	2300      	movs	r3, #0
 800299e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d008      	beq.n	80029be <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2204      	movs	r2, #4
 80029b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e022      	b.n	8002a04 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f022 020e 	bic.w	r2, r2, #14
 80029cc:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f022 0201 	bic.w	r2, r2, #1
 80029dc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e2:	f003 021c 	and.w	r2, r3, #28
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ea:	2101      	movs	r1, #1
 80029ec:	fa01 f202 	lsl.w	r2, r1, r2
 80029f0:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2201      	movs	r2, #1
 80029f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002a02:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3714      	adds	r7, #20
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d005      	beq.n	8002a34 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2204      	movs	r2, #4
 8002a2c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	73fb      	strb	r3, [r7, #15]
 8002a32:	e029      	b.n	8002a88 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f022 020e 	bic.w	r2, r2, #14
 8002a42:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f022 0201 	bic.w	r2, r2, #1
 8002a52:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a58:	f003 021c 	and.w	r2, r3, #28
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a60:	2101      	movs	r1, #1
 8002a62:	fa01 f202 	lsl.w	r2, r1, r2
 8002a66:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d003      	beq.n	8002a88 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	4798      	blx	r3
    }
  }
  return status;
 8002a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3710      	adds	r7, #16
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b084      	sub	sp, #16
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aae:	f003 031c 	and.w	r3, r3, #28
 8002ab2:	2204      	movs	r2, #4
 8002ab4:	409a      	lsls	r2, r3
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	4013      	ands	r3, r2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d026      	beq.n	8002b0c <HAL_DMA_IRQHandler+0x7a>
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	f003 0304 	and.w	r3, r3, #4
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d021      	beq.n	8002b0c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0320 	and.w	r3, r3, #32
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d107      	bne.n	8002ae6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f022 0204 	bic.w	r2, r2, #4
 8002ae4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aea:	f003 021c 	and.w	r2, r3, #28
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af2:	2104      	movs	r1, #4
 8002af4:	fa01 f202 	lsl.w	r2, r1, r2
 8002af8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d071      	beq.n	8002be6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002b0a:	e06c      	b.n	8002be6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b10:	f003 031c 	and.w	r3, r3, #28
 8002b14:	2202      	movs	r2, #2
 8002b16:	409a      	lsls	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d02e      	beq.n	8002b7e <HAL_DMA_IRQHandler+0xec>
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d029      	beq.n	8002b7e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0320 	and.w	r3, r3, #32
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d10b      	bne.n	8002b50 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f022 020a 	bic.w	r2, r2, #10
 8002b46:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b54:	f003 021c 	and.w	r2, r3, #28
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5c:	2102      	movs	r1, #2
 8002b5e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b62:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d038      	beq.n	8002be6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002b7c:	e033      	b.n	8002be6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b82:	f003 031c 	and.w	r3, r3, #28
 8002b86:	2208      	movs	r2, #8
 8002b88:	409a      	lsls	r2, r3
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d02a      	beq.n	8002be8 <HAL_DMA_IRQHandler+0x156>
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	f003 0308 	and.w	r3, r3, #8
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d025      	beq.n	8002be8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f022 020e 	bic.w	r2, r2, #14
 8002baa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb0:	f003 021c 	and.w	r2, r3, #28
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb8:	2101      	movs	r1, #1
 8002bba:	fa01 f202 	lsl.w	r2, r1, r2
 8002bbe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d004      	beq.n	8002be8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002be6:	bf00      	nop
 8002be8:	bf00      	nop
}
 8002bea:	3710      	adds	r7, #16
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b085      	sub	sp, #20
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	607a      	str	r2, [r7, #4]
 8002c14:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1a:	f003 021c 	and.w	r2, r3, #28
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c22:	2101      	movs	r1, #1
 8002c24:	fa01 f202 	lsl.w	r2, r1, r2
 8002c28:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	683a      	ldr	r2, [r7, #0]
 8002c30:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	2b10      	cmp	r3, #16
 8002c38:	d108      	bne.n	8002c4c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	68ba      	ldr	r2, [r7, #8]
 8002c48:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002c4a:	e007      	b.n	8002c5c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	68ba      	ldr	r2, [r7, #8]
 8002c52:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	60da      	str	r2, [r3, #12]
}
 8002c5c:	bf00      	nop
 8002c5e:	3714      	adds	r7, #20
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr

08002c68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b087      	sub	sp, #28
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c72:	2300      	movs	r3, #0
 8002c74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c76:	e14e      	b.n	8002f16 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	2101      	movs	r1, #1
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	fa01 f303 	lsl.w	r3, r1, r3
 8002c84:	4013      	ands	r3, r2
 8002c86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	f000 8140 	beq.w	8002f10 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f003 0303 	and.w	r3, r3, #3
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d005      	beq.n	8002ca8 <HAL_GPIO_Init+0x40>
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f003 0303 	and.w	r3, r3, #3
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d130      	bne.n	8002d0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	2203      	movs	r2, #3
 8002cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb8:	43db      	mvns	r3, r3
 8002cba:	693a      	ldr	r2, [r7, #16]
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	68da      	ldr	r2, [r3, #12]
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	005b      	lsls	r3, r3, #1
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	693a      	ldr	r2, [r7, #16]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	693a      	ldr	r2, [r7, #16]
 8002cd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002cde:	2201      	movs	r2, #1
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce6:	43db      	mvns	r3, r3
 8002ce8:	693a      	ldr	r2, [r7, #16]
 8002cea:	4013      	ands	r3, r2
 8002cec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	091b      	lsrs	r3, r3, #4
 8002cf4:	f003 0201 	and.w	r2, r3, #1
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfe:	693a      	ldr	r2, [r7, #16]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	693a      	ldr	r2, [r7, #16]
 8002d08:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f003 0303 	and.w	r3, r3, #3
 8002d12:	2b03      	cmp	r3, #3
 8002d14:	d017      	beq.n	8002d46 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	005b      	lsls	r3, r3, #1
 8002d20:	2203      	movs	r2, #3
 8002d22:	fa02 f303 	lsl.w	r3, r2, r3
 8002d26:	43db      	mvns	r3, r3
 8002d28:	693a      	ldr	r2, [r7, #16]
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	689a      	ldr	r2, [r3, #8]
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	005b      	lsls	r3, r3, #1
 8002d36:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	693a      	ldr	r2, [r7, #16]
 8002d44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f003 0303 	and.w	r3, r3, #3
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d123      	bne.n	8002d9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	08da      	lsrs	r2, r3, #3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	3208      	adds	r2, #8
 8002d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	f003 0307 	and.w	r3, r3, #7
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	220f      	movs	r2, #15
 8002d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6e:	43db      	mvns	r3, r3
 8002d70:	693a      	ldr	r2, [r7, #16]
 8002d72:	4013      	ands	r3, r2
 8002d74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	691a      	ldr	r2, [r3, #16]
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	f003 0307 	and.w	r3, r3, #7
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	fa02 f303 	lsl.w	r3, r2, r3
 8002d86:	693a      	ldr	r2, [r7, #16]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	08da      	lsrs	r2, r3, #3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	3208      	adds	r2, #8
 8002d94:	6939      	ldr	r1, [r7, #16]
 8002d96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	2203      	movs	r2, #3
 8002da6:	fa02 f303 	lsl.w	r3, r2, r3
 8002daa:	43db      	mvns	r3, r3
 8002dac:	693a      	ldr	r2, [r7, #16]
 8002dae:	4013      	ands	r3, r2
 8002db0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f003 0203 	and.w	r2, r3, #3
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	005b      	lsls	r3, r3, #1
 8002dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc2:	693a      	ldr	r2, [r7, #16]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	693a      	ldr	r2, [r7, #16]
 8002dcc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	f000 809a 	beq.w	8002f10 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ddc:	4b55      	ldr	r3, [pc, #340]	; (8002f34 <HAL_GPIO_Init+0x2cc>)
 8002dde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002de0:	4a54      	ldr	r2, [pc, #336]	; (8002f34 <HAL_GPIO_Init+0x2cc>)
 8002de2:	f043 0301 	orr.w	r3, r3, #1
 8002de6:	6613      	str	r3, [r2, #96]	; 0x60
 8002de8:	4b52      	ldr	r3, [pc, #328]	; (8002f34 <HAL_GPIO_Init+0x2cc>)
 8002dea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dec:	f003 0301 	and.w	r3, r3, #1
 8002df0:	60bb      	str	r3, [r7, #8]
 8002df2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002df4:	4a50      	ldr	r2, [pc, #320]	; (8002f38 <HAL_GPIO_Init+0x2d0>)
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	089b      	lsrs	r3, r3, #2
 8002dfa:	3302      	adds	r3, #2
 8002dfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	f003 0303 	and.w	r3, r3, #3
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	220f      	movs	r2, #15
 8002e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e10:	43db      	mvns	r3, r3
 8002e12:	693a      	ldr	r2, [r7, #16]
 8002e14:	4013      	ands	r3, r2
 8002e16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002e1e:	d013      	beq.n	8002e48 <HAL_GPIO_Init+0x1e0>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	4a46      	ldr	r2, [pc, #280]	; (8002f3c <HAL_GPIO_Init+0x2d4>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d00d      	beq.n	8002e44 <HAL_GPIO_Init+0x1dc>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4a45      	ldr	r2, [pc, #276]	; (8002f40 <HAL_GPIO_Init+0x2d8>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d007      	beq.n	8002e40 <HAL_GPIO_Init+0x1d8>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4a44      	ldr	r2, [pc, #272]	; (8002f44 <HAL_GPIO_Init+0x2dc>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d101      	bne.n	8002e3c <HAL_GPIO_Init+0x1d4>
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e006      	b.n	8002e4a <HAL_GPIO_Init+0x1e2>
 8002e3c:	2307      	movs	r3, #7
 8002e3e:	e004      	b.n	8002e4a <HAL_GPIO_Init+0x1e2>
 8002e40:	2302      	movs	r3, #2
 8002e42:	e002      	b.n	8002e4a <HAL_GPIO_Init+0x1e2>
 8002e44:	2301      	movs	r3, #1
 8002e46:	e000      	b.n	8002e4a <HAL_GPIO_Init+0x1e2>
 8002e48:	2300      	movs	r3, #0
 8002e4a:	697a      	ldr	r2, [r7, #20]
 8002e4c:	f002 0203 	and.w	r2, r2, #3
 8002e50:	0092      	lsls	r2, r2, #2
 8002e52:	4093      	lsls	r3, r2
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002e5a:	4937      	ldr	r1, [pc, #220]	; (8002f38 <HAL_GPIO_Init+0x2d0>)
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	089b      	lsrs	r3, r3, #2
 8002e60:	3302      	adds	r3, #2
 8002e62:	693a      	ldr	r2, [r7, #16]
 8002e64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e68:	4b37      	ldr	r3, [pc, #220]	; (8002f48 <HAL_GPIO_Init+0x2e0>)
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	43db      	mvns	r3, r3
 8002e72:	693a      	ldr	r2, [r7, #16]
 8002e74:	4013      	ands	r3, r2
 8002e76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d003      	beq.n	8002e8c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002e84:	693a      	ldr	r2, [r7, #16]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002e8c:	4a2e      	ldr	r2, [pc, #184]	; (8002f48 <HAL_GPIO_Init+0x2e0>)
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002e92:	4b2d      	ldr	r3, [pc, #180]	; (8002f48 <HAL_GPIO_Init+0x2e0>)
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	43db      	mvns	r3, r3
 8002e9c:	693a      	ldr	r2, [r7, #16]
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d003      	beq.n	8002eb6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002eae:	693a      	ldr	r2, [r7, #16]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002eb6:	4a24      	ldr	r2, [pc, #144]	; (8002f48 <HAL_GPIO_Init+0x2e0>)
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002ebc:	4b22      	ldr	r3, [pc, #136]	; (8002f48 <HAL_GPIO_Init+0x2e0>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	43db      	mvns	r3, r3
 8002ec6:	693a      	ldr	r2, [r7, #16]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d003      	beq.n	8002ee0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002ed8:	693a      	ldr	r2, [r7, #16]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ee0:	4a19      	ldr	r2, [pc, #100]	; (8002f48 <HAL_GPIO_Init+0x2e0>)
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002ee6:	4b18      	ldr	r3, [pc, #96]	; (8002f48 <HAL_GPIO_Init+0x2e0>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	43db      	mvns	r3, r3
 8002ef0:	693a      	ldr	r2, [r7, #16]
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d003      	beq.n	8002f0a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002f02:	693a      	ldr	r2, [r7, #16]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002f0a:	4a0f      	ldr	r2, [pc, #60]	; (8002f48 <HAL_GPIO_Init+0x2e0>)
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	3301      	adds	r3, #1
 8002f14:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	f47f aea9 	bne.w	8002c78 <HAL_GPIO_Init+0x10>
  }
}
 8002f26:	bf00      	nop
 8002f28:	bf00      	nop
 8002f2a:	371c      	adds	r7, #28
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr
 8002f34:	40021000 	.word	0x40021000
 8002f38:	40010000 	.word	0x40010000
 8002f3c:	48000400 	.word	0x48000400
 8002f40:	48000800 	.word	0x48000800
 8002f44:	48000c00 	.word	0x48000c00
 8002f48:	40010400 	.word	0x40010400

08002f4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	460b      	mov	r3, r1
 8002f56:	807b      	strh	r3, [r7, #2]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f5c:	787b      	ldrb	r3, [r7, #1]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d003      	beq.n	8002f6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f62:	887a      	ldrh	r2, [r7, #2]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f68:	e002      	b.n	8002f70 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f6a:	887a      	ldrh	r2, [r7, #2]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f70:	bf00      	nop
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d101      	bne.n	8002f8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e08d      	b.n	80030aa <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d106      	bne.n	8002fa8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f7fe ff92 	bl	8001ecc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2224      	movs	r2, #36	; 0x24
 8002fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f022 0201 	bic.w	r2, r2, #1
 8002fbe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685a      	ldr	r2, [r3, #4]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002fcc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	689a      	ldr	r2, [r3, #8]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002fdc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d107      	bne.n	8002ff6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	689a      	ldr	r2, [r3, #8]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ff2:	609a      	str	r2, [r3, #8]
 8002ff4:	e006      	b.n	8003004 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	689a      	ldr	r2, [r3, #8]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003002:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	2b02      	cmp	r3, #2
 800300a:	d108      	bne.n	800301e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	685a      	ldr	r2, [r3, #4]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800301a:	605a      	str	r2, [r3, #4]
 800301c:	e007      	b.n	800302e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	685a      	ldr	r2, [r3, #4]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800302c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	6812      	ldr	r2, [r2, #0]
 8003038:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800303c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003040:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	68da      	ldr	r2, [r3, #12]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003050:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	691a      	ldr	r2, [r3, #16]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	430a      	orrs	r2, r1
 800306a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	69d9      	ldr	r1, [r3, #28]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a1a      	ldr	r2, [r3, #32]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	430a      	orrs	r2, r1
 800307a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f042 0201 	orr.w	r2, r2, #1
 800308a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2220      	movs	r2, #32
 8003096:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3708      	adds	r7, #8
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
	...

080030b4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b088      	sub	sp, #32
 80030b8:	af02      	add	r7, sp, #8
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	4608      	mov	r0, r1
 80030be:	4611      	mov	r1, r2
 80030c0:	461a      	mov	r2, r3
 80030c2:	4603      	mov	r3, r0
 80030c4:	817b      	strh	r3, [r7, #10]
 80030c6:	460b      	mov	r3, r1
 80030c8:	813b      	strh	r3, [r7, #8]
 80030ca:	4613      	mov	r3, r2
 80030cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b20      	cmp	r3, #32
 80030d8:	f040 80f9 	bne.w	80032ce <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80030dc:	6a3b      	ldr	r3, [r7, #32]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d002      	beq.n	80030e8 <HAL_I2C_Mem_Write+0x34>
 80030e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d105      	bne.n	80030f4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030ee:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e0ed      	b.n	80032d0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d101      	bne.n	8003102 <HAL_I2C_Mem_Write+0x4e>
 80030fe:	2302      	movs	r3, #2
 8003100:	e0e6      	b.n	80032d0 <HAL_I2C_Mem_Write+0x21c>
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2201      	movs	r2, #1
 8003106:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800310a:	f7ff fa3d 	bl	8002588 <HAL_GetTick>
 800310e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	9300      	str	r3, [sp, #0]
 8003114:	2319      	movs	r3, #25
 8003116:	2201      	movs	r2, #1
 8003118:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800311c:	68f8      	ldr	r0, [r7, #12]
 800311e:	f000 fac3 	bl	80036a8 <I2C_WaitOnFlagUntilTimeout>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d001      	beq.n	800312c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e0d1      	b.n	80032d0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2221      	movs	r2, #33	; 0x21
 8003130:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2240      	movs	r2, #64	; 0x40
 8003138:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2200      	movs	r2, #0
 8003140:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6a3a      	ldr	r2, [r7, #32]
 8003146:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800314c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2200      	movs	r2, #0
 8003152:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003154:	88f8      	ldrh	r0, [r7, #6]
 8003156:	893a      	ldrh	r2, [r7, #8]
 8003158:	8979      	ldrh	r1, [r7, #10]
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	9301      	str	r3, [sp, #4]
 800315e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003160:	9300      	str	r3, [sp, #0]
 8003162:	4603      	mov	r3, r0
 8003164:	68f8      	ldr	r0, [r7, #12]
 8003166:	f000 f9d3 	bl	8003510 <I2C_RequestMemoryWrite>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d005      	beq.n	800317c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e0a9      	b.n	80032d0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003180:	b29b      	uxth	r3, r3
 8003182:	2bff      	cmp	r3, #255	; 0xff
 8003184:	d90e      	bls.n	80031a4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	22ff      	movs	r2, #255	; 0xff
 800318a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003190:	b2da      	uxtb	r2, r3
 8003192:	8979      	ldrh	r1, [r7, #10]
 8003194:	2300      	movs	r3, #0
 8003196:	9300      	str	r3, [sp, #0]
 8003198:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800319c:	68f8      	ldr	r0, [r7, #12]
 800319e:	f000 fc3d 	bl	8003a1c <I2C_TransferConfig>
 80031a2:	e00f      	b.n	80031c4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a8:	b29a      	uxth	r2, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031b2:	b2da      	uxtb	r2, r3
 80031b4:	8979      	ldrh	r1, [r7, #10]
 80031b6:	2300      	movs	r3, #0
 80031b8:	9300      	str	r3, [sp, #0]
 80031ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031be:	68f8      	ldr	r0, [r7, #12]
 80031c0:	f000 fc2c 	bl	8003a1c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031c4:	697a      	ldr	r2, [r7, #20]
 80031c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031c8:	68f8      	ldr	r0, [r7, #12]
 80031ca:	f000 fabc 	bl	8003746 <I2C_WaitOnTXISFlagUntilTimeout>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d001      	beq.n	80031d8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e07b      	b.n	80032d0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031dc:	781a      	ldrb	r2, [r3, #0]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e8:	1c5a      	adds	r2, r3, #1
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	3b01      	subs	r3, #1
 80031f6:	b29a      	uxth	r2, r3
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003200:	3b01      	subs	r3, #1
 8003202:	b29a      	uxth	r2, r3
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800320c:	b29b      	uxth	r3, r3
 800320e:	2b00      	cmp	r3, #0
 8003210:	d034      	beq.n	800327c <HAL_I2C_Mem_Write+0x1c8>
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003216:	2b00      	cmp	r3, #0
 8003218:	d130      	bne.n	800327c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	9300      	str	r3, [sp, #0]
 800321e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003220:	2200      	movs	r2, #0
 8003222:	2180      	movs	r1, #128	; 0x80
 8003224:	68f8      	ldr	r0, [r7, #12]
 8003226:	f000 fa3f 	bl	80036a8 <I2C_WaitOnFlagUntilTimeout>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d001      	beq.n	8003234 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e04d      	b.n	80032d0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003238:	b29b      	uxth	r3, r3
 800323a:	2bff      	cmp	r3, #255	; 0xff
 800323c:	d90e      	bls.n	800325c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	22ff      	movs	r2, #255	; 0xff
 8003242:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003248:	b2da      	uxtb	r2, r3
 800324a:	8979      	ldrh	r1, [r7, #10]
 800324c:	2300      	movs	r3, #0
 800324e:	9300      	str	r3, [sp, #0]
 8003250:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003254:	68f8      	ldr	r0, [r7, #12]
 8003256:	f000 fbe1 	bl	8003a1c <I2C_TransferConfig>
 800325a:	e00f      	b.n	800327c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003260:	b29a      	uxth	r2, r3
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800326a:	b2da      	uxtb	r2, r3
 800326c:	8979      	ldrh	r1, [r7, #10]
 800326e:	2300      	movs	r3, #0
 8003270:	9300      	str	r3, [sp, #0]
 8003272:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003276:	68f8      	ldr	r0, [r7, #12]
 8003278:	f000 fbd0 	bl	8003a1c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003280:	b29b      	uxth	r3, r3
 8003282:	2b00      	cmp	r3, #0
 8003284:	d19e      	bne.n	80031c4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003286:	697a      	ldr	r2, [r7, #20]
 8003288:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800328a:	68f8      	ldr	r0, [r7, #12]
 800328c:	f000 faa2 	bl	80037d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d001      	beq.n	800329a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e01a      	b.n	80032d0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2220      	movs	r2, #32
 80032a0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	6859      	ldr	r1, [r3, #4]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	4b0a      	ldr	r3, [pc, #40]	; (80032d8 <HAL_I2C_Mem_Write+0x224>)
 80032ae:	400b      	ands	r3, r1
 80032b0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2220      	movs	r2, #32
 80032b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032ca:	2300      	movs	r3, #0
 80032cc:	e000      	b.n	80032d0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80032ce:	2302      	movs	r3, #2
  }
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3718      	adds	r7, #24
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	fe00e800 	.word	0xfe00e800

080032dc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b088      	sub	sp, #32
 80032e0:	af02      	add	r7, sp, #8
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	4608      	mov	r0, r1
 80032e6:	4611      	mov	r1, r2
 80032e8:	461a      	mov	r2, r3
 80032ea:	4603      	mov	r3, r0
 80032ec:	817b      	strh	r3, [r7, #10]
 80032ee:	460b      	mov	r3, r1
 80032f0:	813b      	strh	r3, [r7, #8]
 80032f2:	4613      	mov	r3, r2
 80032f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	2b20      	cmp	r3, #32
 8003300:	f040 80fd 	bne.w	80034fe <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003304:	6a3b      	ldr	r3, [r7, #32]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d002      	beq.n	8003310 <HAL_I2C_Mem_Read+0x34>
 800330a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800330c:	2b00      	cmp	r3, #0
 800330e:	d105      	bne.n	800331c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003316:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e0f1      	b.n	8003500 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003322:	2b01      	cmp	r3, #1
 8003324:	d101      	bne.n	800332a <HAL_I2C_Mem_Read+0x4e>
 8003326:	2302      	movs	r3, #2
 8003328:	e0ea      	b.n	8003500 <HAL_I2C_Mem_Read+0x224>
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2201      	movs	r2, #1
 800332e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003332:	f7ff f929 	bl	8002588 <HAL_GetTick>
 8003336:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	9300      	str	r3, [sp, #0]
 800333c:	2319      	movs	r3, #25
 800333e:	2201      	movs	r2, #1
 8003340:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003344:	68f8      	ldr	r0, [r7, #12]
 8003346:	f000 f9af 	bl	80036a8 <I2C_WaitOnFlagUntilTimeout>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d001      	beq.n	8003354 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e0d5      	b.n	8003500 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2222      	movs	r2, #34	; 0x22
 8003358:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2240      	movs	r2, #64	; 0x40
 8003360:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2200      	movs	r2, #0
 8003368:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6a3a      	ldr	r2, [r7, #32]
 800336e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003374:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2200      	movs	r2, #0
 800337a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800337c:	88f8      	ldrh	r0, [r7, #6]
 800337e:	893a      	ldrh	r2, [r7, #8]
 8003380:	8979      	ldrh	r1, [r7, #10]
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	9301      	str	r3, [sp, #4]
 8003386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003388:	9300      	str	r3, [sp, #0]
 800338a:	4603      	mov	r3, r0
 800338c:	68f8      	ldr	r0, [r7, #12]
 800338e:	f000 f913 	bl	80035b8 <I2C_RequestMemoryRead>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d005      	beq.n	80033a4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e0ad      	b.n	8003500 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	2bff      	cmp	r3, #255	; 0xff
 80033ac:	d90e      	bls.n	80033cc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	22ff      	movs	r2, #255	; 0xff
 80033b2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033b8:	b2da      	uxtb	r2, r3
 80033ba:	8979      	ldrh	r1, [r7, #10]
 80033bc:	4b52      	ldr	r3, [pc, #328]	; (8003508 <HAL_I2C_Mem_Read+0x22c>)
 80033be:	9300      	str	r3, [sp, #0]
 80033c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033c4:	68f8      	ldr	r0, [r7, #12]
 80033c6:	f000 fb29 	bl	8003a1c <I2C_TransferConfig>
 80033ca:	e00f      	b.n	80033ec <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d0:	b29a      	uxth	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033da:	b2da      	uxtb	r2, r3
 80033dc:	8979      	ldrh	r1, [r7, #10]
 80033de:	4b4a      	ldr	r3, [pc, #296]	; (8003508 <HAL_I2C_Mem_Read+0x22c>)
 80033e0:	9300      	str	r3, [sp, #0]
 80033e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033e6:	68f8      	ldr	r0, [r7, #12]
 80033e8:	f000 fb18 	bl	8003a1c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	9300      	str	r3, [sp, #0]
 80033f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f2:	2200      	movs	r2, #0
 80033f4:	2104      	movs	r1, #4
 80033f6:	68f8      	ldr	r0, [r7, #12]
 80033f8:	f000 f956 	bl	80036a8 <I2C_WaitOnFlagUntilTimeout>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d001      	beq.n	8003406 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e07c      	b.n	8003500 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003410:	b2d2      	uxtb	r2, r2
 8003412:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003418:	1c5a      	adds	r2, r3, #1
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003422:	3b01      	subs	r3, #1
 8003424:	b29a      	uxth	r2, r3
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800342e:	b29b      	uxth	r3, r3
 8003430:	3b01      	subs	r3, #1
 8003432:	b29a      	uxth	r2, r3
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800343c:	b29b      	uxth	r3, r3
 800343e:	2b00      	cmp	r3, #0
 8003440:	d034      	beq.n	80034ac <HAL_I2C_Mem_Read+0x1d0>
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003446:	2b00      	cmp	r3, #0
 8003448:	d130      	bne.n	80034ac <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	9300      	str	r3, [sp, #0]
 800344e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003450:	2200      	movs	r2, #0
 8003452:	2180      	movs	r1, #128	; 0x80
 8003454:	68f8      	ldr	r0, [r7, #12]
 8003456:	f000 f927 	bl	80036a8 <I2C_WaitOnFlagUntilTimeout>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d001      	beq.n	8003464 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e04d      	b.n	8003500 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003468:	b29b      	uxth	r3, r3
 800346a:	2bff      	cmp	r3, #255	; 0xff
 800346c:	d90e      	bls.n	800348c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	22ff      	movs	r2, #255	; 0xff
 8003472:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003478:	b2da      	uxtb	r2, r3
 800347a:	8979      	ldrh	r1, [r7, #10]
 800347c:	2300      	movs	r3, #0
 800347e:	9300      	str	r3, [sp, #0]
 8003480:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003484:	68f8      	ldr	r0, [r7, #12]
 8003486:	f000 fac9 	bl	8003a1c <I2C_TransferConfig>
 800348a:	e00f      	b.n	80034ac <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003490:	b29a      	uxth	r2, r3
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800349a:	b2da      	uxtb	r2, r3
 800349c:	8979      	ldrh	r1, [r7, #10]
 800349e:	2300      	movs	r3, #0
 80034a0:	9300      	str	r3, [sp, #0]
 80034a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034a6:	68f8      	ldr	r0, [r7, #12]
 80034a8:	f000 fab8 	bl	8003a1c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d19a      	bne.n	80033ec <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034b6:	697a      	ldr	r2, [r7, #20]
 80034b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034ba:	68f8      	ldr	r0, [r7, #12]
 80034bc:	f000 f98a 	bl	80037d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d001      	beq.n	80034ca <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e01a      	b.n	8003500 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2220      	movs	r2, #32
 80034d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	6859      	ldr	r1, [r3, #4]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	4b0b      	ldr	r3, [pc, #44]	; (800350c <HAL_I2C_Mem_Read+0x230>)
 80034de:	400b      	ands	r3, r1
 80034e0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2220      	movs	r2, #32
 80034e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80034fa:	2300      	movs	r3, #0
 80034fc:	e000      	b.n	8003500 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80034fe:	2302      	movs	r3, #2
  }
}
 8003500:	4618      	mov	r0, r3
 8003502:	3718      	adds	r7, #24
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	80002400 	.word	0x80002400
 800350c:	fe00e800 	.word	0xfe00e800

08003510 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b086      	sub	sp, #24
 8003514:	af02      	add	r7, sp, #8
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	4608      	mov	r0, r1
 800351a:	4611      	mov	r1, r2
 800351c:	461a      	mov	r2, r3
 800351e:	4603      	mov	r3, r0
 8003520:	817b      	strh	r3, [r7, #10]
 8003522:	460b      	mov	r3, r1
 8003524:	813b      	strh	r3, [r7, #8]
 8003526:	4613      	mov	r3, r2
 8003528:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800352a:	88fb      	ldrh	r3, [r7, #6]
 800352c:	b2da      	uxtb	r2, r3
 800352e:	8979      	ldrh	r1, [r7, #10]
 8003530:	4b20      	ldr	r3, [pc, #128]	; (80035b4 <I2C_RequestMemoryWrite+0xa4>)
 8003532:	9300      	str	r3, [sp, #0]
 8003534:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003538:	68f8      	ldr	r0, [r7, #12]
 800353a:	f000 fa6f 	bl	8003a1c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800353e:	69fa      	ldr	r2, [r7, #28]
 8003540:	69b9      	ldr	r1, [r7, #24]
 8003542:	68f8      	ldr	r0, [r7, #12]
 8003544:	f000 f8ff 	bl	8003746 <I2C_WaitOnTXISFlagUntilTimeout>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d001      	beq.n	8003552 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e02c      	b.n	80035ac <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003552:	88fb      	ldrh	r3, [r7, #6]
 8003554:	2b01      	cmp	r3, #1
 8003556:	d105      	bne.n	8003564 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003558:	893b      	ldrh	r3, [r7, #8]
 800355a:	b2da      	uxtb	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	629a      	str	r2, [r3, #40]	; 0x28
 8003562:	e015      	b.n	8003590 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003564:	893b      	ldrh	r3, [r7, #8]
 8003566:	0a1b      	lsrs	r3, r3, #8
 8003568:	b29b      	uxth	r3, r3
 800356a:	b2da      	uxtb	r2, r3
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003572:	69fa      	ldr	r2, [r7, #28]
 8003574:	69b9      	ldr	r1, [r7, #24]
 8003576:	68f8      	ldr	r0, [r7, #12]
 8003578:	f000 f8e5 	bl	8003746 <I2C_WaitOnTXISFlagUntilTimeout>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d001      	beq.n	8003586 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e012      	b.n	80035ac <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003586:	893b      	ldrh	r3, [r7, #8]
 8003588:	b2da      	uxtb	r2, r3
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	9300      	str	r3, [sp, #0]
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	2200      	movs	r2, #0
 8003598:	2180      	movs	r1, #128	; 0x80
 800359a:	68f8      	ldr	r0, [r7, #12]
 800359c:	f000 f884 	bl	80036a8 <I2C_WaitOnFlagUntilTimeout>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d001      	beq.n	80035aa <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e000      	b.n	80035ac <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80035aa:	2300      	movs	r3, #0
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3710      	adds	r7, #16
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	80002000 	.word	0x80002000

080035b8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b086      	sub	sp, #24
 80035bc:	af02      	add	r7, sp, #8
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	4608      	mov	r0, r1
 80035c2:	4611      	mov	r1, r2
 80035c4:	461a      	mov	r2, r3
 80035c6:	4603      	mov	r3, r0
 80035c8:	817b      	strh	r3, [r7, #10]
 80035ca:	460b      	mov	r3, r1
 80035cc:	813b      	strh	r3, [r7, #8]
 80035ce:	4613      	mov	r3, r2
 80035d0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80035d2:	88fb      	ldrh	r3, [r7, #6]
 80035d4:	b2da      	uxtb	r2, r3
 80035d6:	8979      	ldrh	r1, [r7, #10]
 80035d8:	4b20      	ldr	r3, [pc, #128]	; (800365c <I2C_RequestMemoryRead+0xa4>)
 80035da:	9300      	str	r3, [sp, #0]
 80035dc:	2300      	movs	r3, #0
 80035de:	68f8      	ldr	r0, [r7, #12]
 80035e0:	f000 fa1c 	bl	8003a1c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035e4:	69fa      	ldr	r2, [r7, #28]
 80035e6:	69b9      	ldr	r1, [r7, #24]
 80035e8:	68f8      	ldr	r0, [r7, #12]
 80035ea:	f000 f8ac 	bl	8003746 <I2C_WaitOnTXISFlagUntilTimeout>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d001      	beq.n	80035f8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e02c      	b.n	8003652 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80035f8:	88fb      	ldrh	r3, [r7, #6]
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d105      	bne.n	800360a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80035fe:	893b      	ldrh	r3, [r7, #8]
 8003600:	b2da      	uxtb	r2, r3
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	629a      	str	r2, [r3, #40]	; 0x28
 8003608:	e015      	b.n	8003636 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800360a:	893b      	ldrh	r3, [r7, #8]
 800360c:	0a1b      	lsrs	r3, r3, #8
 800360e:	b29b      	uxth	r3, r3
 8003610:	b2da      	uxtb	r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003618:	69fa      	ldr	r2, [r7, #28]
 800361a:	69b9      	ldr	r1, [r7, #24]
 800361c:	68f8      	ldr	r0, [r7, #12]
 800361e:	f000 f892 	bl	8003746 <I2C_WaitOnTXISFlagUntilTimeout>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d001      	beq.n	800362c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e012      	b.n	8003652 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800362c:	893b      	ldrh	r3, [r7, #8]
 800362e:	b2da      	uxtb	r2, r3
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	9300      	str	r3, [sp, #0]
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	2200      	movs	r2, #0
 800363e:	2140      	movs	r1, #64	; 0x40
 8003640:	68f8      	ldr	r0, [r7, #12]
 8003642:	f000 f831 	bl	80036a8 <I2C_WaitOnFlagUntilTimeout>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d001      	beq.n	8003650 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e000      	b.n	8003652 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	3710      	adds	r7, #16
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	80002000 	.word	0x80002000

08003660 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	699b      	ldr	r3, [r3, #24]
 800366e:	f003 0302 	and.w	r3, r3, #2
 8003672:	2b02      	cmp	r3, #2
 8003674:	d103      	bne.n	800367e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2200      	movs	r2, #0
 800367c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	699b      	ldr	r3, [r3, #24]
 8003684:	f003 0301 	and.w	r3, r3, #1
 8003688:	2b01      	cmp	r3, #1
 800368a:	d007      	beq.n	800369c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	699a      	ldr	r2, [r3, #24]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f042 0201 	orr.w	r2, r2, #1
 800369a:	619a      	str	r2, [r3, #24]
  }
}
 800369c:	bf00      	nop
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	603b      	str	r3, [r7, #0]
 80036b4:	4613      	mov	r3, r2
 80036b6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036b8:	e031      	b.n	800371e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036c0:	d02d      	beq.n	800371e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036c2:	f7fe ff61 	bl	8002588 <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	683a      	ldr	r2, [r7, #0]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d302      	bcc.n	80036d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d122      	bne.n	800371e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	699a      	ldr	r2, [r3, #24]
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	4013      	ands	r3, r2
 80036e2:	68ba      	ldr	r2, [r7, #8]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	bf0c      	ite	eq
 80036e8:	2301      	moveq	r3, #1
 80036ea:	2300      	movne	r3, #0
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	461a      	mov	r2, r3
 80036f0:	79fb      	ldrb	r3, [r7, #7]
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d113      	bne.n	800371e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fa:	f043 0220 	orr.w	r2, r3, #32
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2220      	movs	r2, #32
 8003706:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e00f      	b.n	800373e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	699a      	ldr	r2, [r3, #24]
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	4013      	ands	r3, r2
 8003728:	68ba      	ldr	r2, [r7, #8]
 800372a:	429a      	cmp	r2, r3
 800372c:	bf0c      	ite	eq
 800372e:	2301      	moveq	r3, #1
 8003730:	2300      	movne	r3, #0
 8003732:	b2db      	uxtb	r3, r3
 8003734:	461a      	mov	r2, r3
 8003736:	79fb      	ldrb	r3, [r7, #7]
 8003738:	429a      	cmp	r2, r3
 800373a:	d0be      	beq.n	80036ba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3710      	adds	r7, #16
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}

08003746 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003746:	b580      	push	{r7, lr}
 8003748:	b084      	sub	sp, #16
 800374a:	af00      	add	r7, sp, #0
 800374c:	60f8      	str	r0, [r7, #12]
 800374e:	60b9      	str	r1, [r7, #8]
 8003750:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003752:	e033      	b.n	80037bc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	68b9      	ldr	r1, [r7, #8]
 8003758:	68f8      	ldr	r0, [r7, #12]
 800375a:	f000 f87f 	bl	800385c <I2C_IsErrorOccurred>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d001      	beq.n	8003768 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e031      	b.n	80037cc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800376e:	d025      	beq.n	80037bc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003770:	f7fe ff0a 	bl	8002588 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	68ba      	ldr	r2, [r7, #8]
 800377c:	429a      	cmp	r2, r3
 800377e:	d302      	bcc.n	8003786 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d11a      	bne.n	80037bc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	699b      	ldr	r3, [r3, #24]
 800378c:	f003 0302 	and.w	r3, r3, #2
 8003790:	2b02      	cmp	r3, #2
 8003792:	d013      	beq.n	80037bc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003798:	f043 0220 	orr.w	r2, r3, #32
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2220      	movs	r2, #32
 80037a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e007      	b.n	80037cc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	699b      	ldr	r3, [r3, #24]
 80037c2:	f003 0302 	and.w	r3, r3, #2
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d1c4      	bne.n	8003754 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80037ca:	2300      	movs	r3, #0
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3710      	adds	r7, #16
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037e0:	e02f      	b.n	8003842 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	68b9      	ldr	r1, [r7, #8]
 80037e6:	68f8      	ldr	r0, [r7, #12]
 80037e8:	f000 f838 	bl	800385c <I2C_IsErrorOccurred>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d001      	beq.n	80037f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e02d      	b.n	8003852 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037f6:	f7fe fec7 	bl	8002588 <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	68ba      	ldr	r2, [r7, #8]
 8003802:	429a      	cmp	r2, r3
 8003804:	d302      	bcc.n	800380c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d11a      	bne.n	8003842 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	699b      	ldr	r3, [r3, #24]
 8003812:	f003 0320 	and.w	r3, r3, #32
 8003816:	2b20      	cmp	r3, #32
 8003818:	d013      	beq.n	8003842 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800381e:	f043 0220 	orr.w	r2, r3, #32
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2220      	movs	r2, #32
 800382a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2200      	movs	r2, #0
 8003832:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e007      	b.n	8003852 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	699b      	ldr	r3, [r3, #24]
 8003848:	f003 0320 	and.w	r3, r3, #32
 800384c:	2b20      	cmp	r3, #32
 800384e:	d1c8      	bne.n	80037e2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3710      	adds	r7, #16
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
	...

0800385c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b08a      	sub	sp, #40	; 0x28
 8003860:	af00      	add	r7, sp, #0
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003868:	2300      	movs	r3, #0
 800386a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	699b      	ldr	r3, [r3, #24]
 8003874:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003876:	2300      	movs	r3, #0
 8003878:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	f003 0310 	and.w	r3, r3, #16
 8003884:	2b00      	cmp	r3, #0
 8003886:	d068      	beq.n	800395a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2210      	movs	r2, #16
 800388e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003890:	e049      	b.n	8003926 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003898:	d045      	beq.n	8003926 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800389a:	f7fe fe75 	bl	8002588 <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	68ba      	ldr	r2, [r7, #8]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d302      	bcc.n	80038b0 <I2C_IsErrorOccurred+0x54>
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d13a      	bne.n	8003926 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038ba:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80038c2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	699b      	ldr	r3, [r3, #24]
 80038ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038d2:	d121      	bne.n	8003918 <I2C_IsErrorOccurred+0xbc>
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038da:	d01d      	beq.n	8003918 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80038dc:	7cfb      	ldrb	r3, [r7, #19]
 80038de:	2b20      	cmp	r3, #32
 80038e0:	d01a      	beq.n	8003918 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	685a      	ldr	r2, [r3, #4]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038f0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80038f2:	f7fe fe49 	bl	8002588 <HAL_GetTick>
 80038f6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038f8:	e00e      	b.n	8003918 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80038fa:	f7fe fe45 	bl	8002588 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	2b19      	cmp	r3, #25
 8003906:	d907      	bls.n	8003918 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003908:	6a3b      	ldr	r3, [r7, #32]
 800390a:	f043 0320 	orr.w	r3, r3, #32
 800390e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003916:	e006      	b.n	8003926 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	699b      	ldr	r3, [r3, #24]
 800391e:	f003 0320 	and.w	r3, r3, #32
 8003922:	2b20      	cmp	r3, #32
 8003924:	d1e9      	bne.n	80038fa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	699b      	ldr	r3, [r3, #24]
 800392c:	f003 0320 	and.w	r3, r3, #32
 8003930:	2b20      	cmp	r3, #32
 8003932:	d003      	beq.n	800393c <I2C_IsErrorOccurred+0xe0>
 8003934:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003938:	2b00      	cmp	r3, #0
 800393a:	d0aa      	beq.n	8003892 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800393c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003940:	2b00      	cmp	r3, #0
 8003942:	d103      	bne.n	800394c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2220      	movs	r2, #32
 800394a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800394c:	6a3b      	ldr	r3, [r7, #32]
 800394e:	f043 0304 	orr.w	r3, r3, #4
 8003952:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	699b      	ldr	r3, [r3, #24]
 8003960:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003968:	2b00      	cmp	r3, #0
 800396a:	d00b      	beq.n	8003984 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800396c:	6a3b      	ldr	r3, [r7, #32]
 800396e:	f043 0301 	orr.w	r3, r3, #1
 8003972:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f44f 7280 	mov.w	r2, #256	; 0x100
 800397c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800398a:	2b00      	cmp	r3, #0
 800398c:	d00b      	beq.n	80039a6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800398e:	6a3b      	ldr	r3, [r7, #32]
 8003990:	f043 0308 	orr.w	r3, r3, #8
 8003994:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800399e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d00b      	beq.n	80039c8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80039b0:	6a3b      	ldr	r3, [r7, #32]
 80039b2:	f043 0302 	orr.w	r3, r3, #2
 80039b6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80039c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d01c      	beq.n	8003a0a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80039d0:	68f8      	ldr	r0, [r7, #12]
 80039d2:	f7ff fe45 	bl	8003660 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	6859      	ldr	r1, [r3, #4]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	4b0d      	ldr	r3, [pc, #52]	; (8003a18 <I2C_IsErrorOccurred+0x1bc>)
 80039e2:	400b      	ands	r3, r1
 80039e4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039ea:	6a3b      	ldr	r3, [r7, #32]
 80039ec:	431a      	orrs	r2, r3
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2220      	movs	r2, #32
 80039f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003a0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3728      	adds	r7, #40	; 0x28
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	fe00e800 	.word	0xfe00e800

08003a1c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b087      	sub	sp, #28
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	607b      	str	r3, [r7, #4]
 8003a26:	460b      	mov	r3, r1
 8003a28:	817b      	strh	r3, [r7, #10]
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a2e:	897b      	ldrh	r3, [r7, #10]
 8003a30:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003a34:	7a7b      	ldrb	r3, [r7, #9]
 8003a36:	041b      	lsls	r3, r3, #16
 8003a38:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a3c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a42:	6a3b      	ldr	r3, [r7, #32]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003a4a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	685a      	ldr	r2, [r3, #4]
 8003a52:	6a3b      	ldr	r3, [r7, #32]
 8003a54:	0d5b      	lsrs	r3, r3, #21
 8003a56:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003a5a:	4b08      	ldr	r3, [pc, #32]	; (8003a7c <I2C_TransferConfig+0x60>)
 8003a5c:	430b      	orrs	r3, r1
 8003a5e:	43db      	mvns	r3, r3
 8003a60:	ea02 0103 	and.w	r1, r2, r3
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	697a      	ldr	r2, [r7, #20]
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003a6e:	bf00      	nop
 8003a70:	371c      	adds	r7, #28
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	03ff63ff 	.word	0x03ff63ff

08003a80 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	2b20      	cmp	r3, #32
 8003a94:	d138      	bne.n	8003b08 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d101      	bne.n	8003aa4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003aa0:	2302      	movs	r3, #2
 8003aa2:	e032      	b.n	8003b0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2224      	movs	r2, #36	; 0x24
 8003ab0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f022 0201 	bic.w	r2, r2, #1
 8003ac2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003ad2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	6819      	ldr	r1, [r3, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	683a      	ldr	r2, [r7, #0]
 8003ae0:	430a      	orrs	r2, r1
 8003ae2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f042 0201 	orr.w	r2, r2, #1
 8003af2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2220      	movs	r2, #32
 8003af8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b04:	2300      	movs	r3, #0
 8003b06:	e000      	b.n	8003b0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003b08:	2302      	movs	r3, #2
  }
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	370c      	adds	r7, #12
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr

08003b16 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003b16:	b480      	push	{r7}
 8003b18:	b085      	sub	sp, #20
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
 8003b1e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	2b20      	cmp	r3, #32
 8003b2a:	d139      	bne.n	8003ba0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d101      	bne.n	8003b3a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003b36:	2302      	movs	r3, #2
 8003b38:	e033      	b.n	8003ba2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2224      	movs	r2, #36	; 0x24
 8003b46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f022 0201 	bic.w	r2, r2, #1
 8003b58:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003b68:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	021b      	lsls	r3, r3, #8
 8003b6e:	68fa      	ldr	r2, [r7, #12]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	68fa      	ldr	r2, [r7, #12]
 8003b7a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f042 0201 	orr.w	r2, r2, #1
 8003b8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2220      	movs	r2, #32
 8003b90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	e000      	b.n	8003ba2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003ba0:	2302      	movs	r3, #2
  }
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3714      	adds	r7, #20
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
	...

08003bb0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bb4:	4b05      	ldr	r3, [pc, #20]	; (8003bcc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a04      	ldr	r2, [pc, #16]	; (8003bcc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003bba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bbe:	6013      	str	r3, [r2, #0]
}
 8003bc0:	bf00      	nop
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr
 8003bca:	bf00      	nop
 8003bcc:	40007000 	.word	0x40007000

08003bd0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003bd4:	4b04      	ldr	r3, [pc, #16]	; (8003be8 <HAL_PWREx_GetVoltageRange+0x18>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop
 8003be8:	40007000 	.word	0x40007000

08003bec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b085      	sub	sp, #20
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bfa:	d130      	bne.n	8003c5e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bfc:	4b23      	ldr	r3, [pc, #140]	; (8003c8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003c04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c08:	d038      	beq.n	8003c7c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c0a:	4b20      	ldr	r3, [pc, #128]	; (8003c8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c12:	4a1e      	ldr	r2, [pc, #120]	; (8003c8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c14:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c18:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003c1a:	4b1d      	ldr	r3, [pc, #116]	; (8003c90 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2232      	movs	r2, #50	; 0x32
 8003c20:	fb02 f303 	mul.w	r3, r2, r3
 8003c24:	4a1b      	ldr	r2, [pc, #108]	; (8003c94 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003c26:	fba2 2303 	umull	r2, r3, r2, r3
 8003c2a:	0c9b      	lsrs	r3, r3, #18
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c30:	e002      	b.n	8003c38 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	3b01      	subs	r3, #1
 8003c36:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c38:	4b14      	ldr	r3, [pc, #80]	; (8003c8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c3a:	695b      	ldr	r3, [r3, #20]
 8003c3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c44:	d102      	bne.n	8003c4c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d1f2      	bne.n	8003c32 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c4c:	4b0f      	ldr	r3, [pc, #60]	; (8003c8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c4e:	695b      	ldr	r3, [r3, #20]
 8003c50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c58:	d110      	bne.n	8003c7c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e00f      	b.n	8003c7e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c5e:	4b0b      	ldr	r3, [pc, #44]	; (8003c8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003c66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c6a:	d007      	beq.n	8003c7c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003c6c:	4b07      	ldr	r3, [pc, #28]	; (8003c8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c74:	4a05      	ldr	r2, [pc, #20]	; (8003c8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c7a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003c7c:	2300      	movs	r3, #0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3714      	adds	r7, #20
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop
 8003c8c:	40007000 	.word	0x40007000
 8003c90:	20000000 	.word	0x20000000
 8003c94:	431bde83 	.word	0x431bde83

08003c98 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b08a      	sub	sp, #40	; 0x28
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d102      	bne.n	8003cac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	f000 bc4f 	b.w	800454a <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cac:	4b97      	ldr	r3, [pc, #604]	; (8003f0c <HAL_RCC_OscConfig+0x274>)
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	f003 030c 	and.w	r3, r3, #12
 8003cb4:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cb6:	4b95      	ldr	r3, [pc, #596]	; (8003f0c <HAL_RCC_OscConfig+0x274>)
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	f003 0303 	and.w	r3, r3, #3
 8003cbe:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0310 	and.w	r3, r3, #16
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	f000 80e6 	beq.w	8003e9a <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003cce:	6a3b      	ldr	r3, [r7, #32]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d007      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x4c>
 8003cd4:	6a3b      	ldr	r3, [r7, #32]
 8003cd6:	2b0c      	cmp	r3, #12
 8003cd8:	f040 808d 	bne.w	8003df6 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	f040 8089 	bne.w	8003df6 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ce4:	4b89      	ldr	r3, [pc, #548]	; (8003f0c <HAL_RCC_OscConfig+0x274>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0302 	and.w	r3, r3, #2
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d006      	beq.n	8003cfe <HAL_RCC_OscConfig+0x66>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	69db      	ldr	r3, [r3, #28]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d102      	bne.n	8003cfe <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	f000 bc26 	b.w	800454a <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d02:	4b82      	ldr	r3, [pc, #520]	; (8003f0c <HAL_RCC_OscConfig+0x274>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0308 	and.w	r3, r3, #8
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d004      	beq.n	8003d18 <HAL_RCC_OscConfig+0x80>
 8003d0e:	4b7f      	ldr	r3, [pc, #508]	; (8003f0c <HAL_RCC_OscConfig+0x274>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d16:	e005      	b.n	8003d24 <HAL_RCC_OscConfig+0x8c>
 8003d18:	4b7c      	ldr	r3, [pc, #496]	; (8003f0c <HAL_RCC_OscConfig+0x274>)
 8003d1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d1e:	091b      	lsrs	r3, r3, #4
 8003d20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d224      	bcs.n	8003d72 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f000 fe0b 	bl	8004948 <RCC_SetFlashLatencyFromMSIRange>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d002      	beq.n	8003d3e <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	f000 bc06 	b.w	800454a <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d3e:	4b73      	ldr	r3, [pc, #460]	; (8003f0c <HAL_RCC_OscConfig+0x274>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a72      	ldr	r2, [pc, #456]	; (8003f0c <HAL_RCC_OscConfig+0x274>)
 8003d44:	f043 0308 	orr.w	r3, r3, #8
 8003d48:	6013      	str	r3, [r2, #0]
 8003d4a:	4b70      	ldr	r3, [pc, #448]	; (8003f0c <HAL_RCC_OscConfig+0x274>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d56:	496d      	ldr	r1, [pc, #436]	; (8003f0c <HAL_RCC_OscConfig+0x274>)
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d5c:	4b6b      	ldr	r3, [pc, #428]	; (8003f0c <HAL_RCC_OscConfig+0x274>)
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a1b      	ldr	r3, [r3, #32]
 8003d68:	021b      	lsls	r3, r3, #8
 8003d6a:	4968      	ldr	r1, [pc, #416]	; (8003f0c <HAL_RCC_OscConfig+0x274>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	604b      	str	r3, [r1, #4]
 8003d70:	e025      	b.n	8003dbe <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d72:	4b66      	ldr	r3, [pc, #408]	; (8003f0c <HAL_RCC_OscConfig+0x274>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a65      	ldr	r2, [pc, #404]	; (8003f0c <HAL_RCC_OscConfig+0x274>)
 8003d78:	f043 0308 	orr.w	r3, r3, #8
 8003d7c:	6013      	str	r3, [r2, #0]
 8003d7e:	4b63      	ldr	r3, [pc, #396]	; (8003f0c <HAL_RCC_OscConfig+0x274>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8a:	4960      	ldr	r1, [pc, #384]	; (8003f0c <HAL_RCC_OscConfig+0x274>)
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d90:	4b5e      	ldr	r3, [pc, #376]	; (8003f0c <HAL_RCC_OscConfig+0x274>)
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a1b      	ldr	r3, [r3, #32]
 8003d9c:	021b      	lsls	r3, r3, #8
 8003d9e:	495b      	ldr	r1, [pc, #364]	; (8003f0c <HAL_RCC_OscConfig+0x274>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003da4:	6a3b      	ldr	r3, [r7, #32]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d109      	bne.n	8003dbe <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dae:	4618      	mov	r0, r3
 8003db0:	f000 fdca 	bl	8004948 <RCC_SetFlashLatencyFromMSIRange>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d001      	beq.n	8003dbe <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e3c5      	b.n	800454a <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003dbe:	f000 fccd 	bl	800475c <HAL_RCC_GetSysClockFreq>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	4b51      	ldr	r3, [pc, #324]	; (8003f0c <HAL_RCC_OscConfig+0x274>)
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	091b      	lsrs	r3, r3, #4
 8003dca:	f003 030f 	and.w	r3, r3, #15
 8003dce:	4950      	ldr	r1, [pc, #320]	; (8003f10 <HAL_RCC_OscConfig+0x278>)
 8003dd0:	5ccb      	ldrb	r3, [r1, r3]
 8003dd2:	f003 031f 	and.w	r3, r3, #31
 8003dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8003dda:	4a4e      	ldr	r2, [pc, #312]	; (8003f14 <HAL_RCC_OscConfig+0x27c>)
 8003ddc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003dde:	4b4e      	ldr	r3, [pc, #312]	; (8003f18 <HAL_RCC_OscConfig+0x280>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f7fe f9e0 	bl	80021a8 <HAL_InitTick>
 8003de8:	4603      	mov	r3, r0
 8003dea:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8003dec:	7dfb      	ldrb	r3, [r7, #23]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d052      	beq.n	8003e98 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8003df2:	7dfb      	ldrb	r3, [r7, #23]
 8003df4:	e3a9      	b.n	800454a <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	69db      	ldr	r3, [r3, #28]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d032      	beq.n	8003e64 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003dfe:	4b43      	ldr	r3, [pc, #268]	; (8003f0c <HAL_RCC_OscConfig+0x274>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a42      	ldr	r2, [pc, #264]	; (8003f0c <HAL_RCC_OscConfig+0x274>)
 8003e04:	f043 0301 	orr.w	r3, r3, #1
 8003e08:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e0a:	f7fe fbbd 	bl	8002588 <HAL_GetTick>
 8003e0e:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e10:	e008      	b.n	8003e24 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e12:	f7fe fbb9 	bl	8002588 <HAL_GetTick>
 8003e16:	4602      	mov	r2, r0
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d901      	bls.n	8003e24 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8003e20:	2303      	movs	r3, #3
 8003e22:	e392      	b.n	800454a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e24:	4b39      	ldr	r3, [pc, #228]	; (8003f0c <HAL_RCC_OscConfig+0x274>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0302 	and.w	r3, r3, #2
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d0f0      	beq.n	8003e12 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e30:	4b36      	ldr	r3, [pc, #216]	; (8003f0c <HAL_RCC_OscConfig+0x274>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a35      	ldr	r2, [pc, #212]	; (8003f0c <HAL_RCC_OscConfig+0x274>)
 8003e36:	f043 0308 	orr.w	r3, r3, #8
 8003e3a:	6013      	str	r3, [r2, #0]
 8003e3c:	4b33      	ldr	r3, [pc, #204]	; (8003f0c <HAL_RCC_OscConfig+0x274>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e48:	4930      	ldr	r1, [pc, #192]	; (8003f0c <HAL_RCC_OscConfig+0x274>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e4e:	4b2f      	ldr	r3, [pc, #188]	; (8003f0c <HAL_RCC_OscConfig+0x274>)
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a1b      	ldr	r3, [r3, #32]
 8003e5a:	021b      	lsls	r3, r3, #8
 8003e5c:	492b      	ldr	r1, [pc, #172]	; (8003f0c <HAL_RCC_OscConfig+0x274>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	604b      	str	r3, [r1, #4]
 8003e62:	e01a      	b.n	8003e9a <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003e64:	4b29      	ldr	r3, [pc, #164]	; (8003f0c <HAL_RCC_OscConfig+0x274>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a28      	ldr	r2, [pc, #160]	; (8003f0c <HAL_RCC_OscConfig+0x274>)
 8003e6a:	f023 0301 	bic.w	r3, r3, #1
 8003e6e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e70:	f7fe fb8a 	bl	8002588 <HAL_GetTick>
 8003e74:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003e76:	e008      	b.n	8003e8a <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e78:	f7fe fb86 	bl	8002588 <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d901      	bls.n	8003e8a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e35f      	b.n	800454a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003e8a:	4b20      	ldr	r3, [pc, #128]	; (8003f0c <HAL_RCC_OscConfig+0x274>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0302 	and.w	r3, r3, #2
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d1f0      	bne.n	8003e78 <HAL_RCC_OscConfig+0x1e0>
 8003e96:	e000      	b.n	8003e9a <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e98:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0301 	and.w	r3, r3, #1
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d073      	beq.n	8003f8e <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003ea6:	6a3b      	ldr	r3, [r7, #32]
 8003ea8:	2b08      	cmp	r3, #8
 8003eaa:	d005      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x220>
 8003eac:	6a3b      	ldr	r3, [r7, #32]
 8003eae:	2b0c      	cmp	r3, #12
 8003eb0:	d10e      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	2b03      	cmp	r3, #3
 8003eb6:	d10b      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eb8:	4b14      	ldr	r3, [pc, #80]	; (8003f0c <HAL_RCC_OscConfig+0x274>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d063      	beq.n	8003f8c <HAL_RCC_OscConfig+0x2f4>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d15f      	bne.n	8003f8c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e33c      	b.n	800454a <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ed8:	d106      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x250>
 8003eda:	4b0c      	ldr	r3, [pc, #48]	; (8003f0c <HAL_RCC_OscConfig+0x274>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a0b      	ldr	r2, [pc, #44]	; (8003f0c <HAL_RCC_OscConfig+0x274>)
 8003ee0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ee4:	6013      	str	r3, [r2, #0]
 8003ee6:	e025      	b.n	8003f34 <HAL_RCC_OscConfig+0x29c>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ef0:	d114      	bne.n	8003f1c <HAL_RCC_OscConfig+0x284>
 8003ef2:	4b06      	ldr	r3, [pc, #24]	; (8003f0c <HAL_RCC_OscConfig+0x274>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a05      	ldr	r2, [pc, #20]	; (8003f0c <HAL_RCC_OscConfig+0x274>)
 8003ef8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003efc:	6013      	str	r3, [r2, #0]
 8003efe:	4b03      	ldr	r3, [pc, #12]	; (8003f0c <HAL_RCC_OscConfig+0x274>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a02      	ldr	r2, [pc, #8]	; (8003f0c <HAL_RCC_OscConfig+0x274>)
 8003f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f08:	6013      	str	r3, [r2, #0]
 8003f0a:	e013      	b.n	8003f34 <HAL_RCC_OscConfig+0x29c>
 8003f0c:	40021000 	.word	0x40021000
 8003f10:	0800d4b4 	.word	0x0800d4b4
 8003f14:	20000000 	.word	0x20000000
 8003f18:	20000004 	.word	0x20000004
 8003f1c:	4b8f      	ldr	r3, [pc, #572]	; (800415c <HAL_RCC_OscConfig+0x4c4>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a8e      	ldr	r2, [pc, #568]	; (800415c <HAL_RCC_OscConfig+0x4c4>)
 8003f22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f26:	6013      	str	r3, [r2, #0]
 8003f28:	4b8c      	ldr	r3, [pc, #560]	; (800415c <HAL_RCC_OscConfig+0x4c4>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a8b      	ldr	r2, [pc, #556]	; (800415c <HAL_RCC_OscConfig+0x4c4>)
 8003f2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d013      	beq.n	8003f64 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f3c:	f7fe fb24 	bl	8002588 <HAL_GetTick>
 8003f40:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f42:	e008      	b.n	8003f56 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f44:	f7fe fb20 	bl	8002588 <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	2b64      	cmp	r3, #100	; 0x64
 8003f50:	d901      	bls.n	8003f56 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e2f9      	b.n	800454a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f56:	4b81      	ldr	r3, [pc, #516]	; (800415c <HAL_RCC_OscConfig+0x4c4>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d0f0      	beq.n	8003f44 <HAL_RCC_OscConfig+0x2ac>
 8003f62:	e014      	b.n	8003f8e <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f64:	f7fe fb10 	bl	8002588 <HAL_GetTick>
 8003f68:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f6a:	e008      	b.n	8003f7e <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f6c:	f7fe fb0c 	bl	8002588 <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	2b64      	cmp	r3, #100	; 0x64
 8003f78:	d901      	bls.n	8003f7e <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e2e5      	b.n	800454a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f7e:	4b77      	ldr	r3, [pc, #476]	; (800415c <HAL_RCC_OscConfig+0x4c4>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d1f0      	bne.n	8003f6c <HAL_RCC_OscConfig+0x2d4>
 8003f8a:	e000      	b.n	8003f8e <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0302 	and.w	r3, r3, #2
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d060      	beq.n	800405c <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003f9a:	6a3b      	ldr	r3, [r7, #32]
 8003f9c:	2b04      	cmp	r3, #4
 8003f9e:	d005      	beq.n	8003fac <HAL_RCC_OscConfig+0x314>
 8003fa0:	6a3b      	ldr	r3, [r7, #32]
 8003fa2:	2b0c      	cmp	r3, #12
 8003fa4:	d119      	bne.n	8003fda <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	d116      	bne.n	8003fda <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fac:	4b6b      	ldr	r3, [pc, #428]	; (800415c <HAL_RCC_OscConfig+0x4c4>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d005      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x32c>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d101      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e2c2      	b.n	800454a <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fc4:	4b65      	ldr	r3, [pc, #404]	; (800415c <HAL_RCC_OscConfig+0x4c4>)
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	691b      	ldr	r3, [r3, #16]
 8003fd0:	061b      	lsls	r3, r3, #24
 8003fd2:	4962      	ldr	r1, [pc, #392]	; (800415c <HAL_RCC_OscConfig+0x4c4>)
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fd8:	e040      	b.n	800405c <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d023      	beq.n	800402a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fe2:	4b5e      	ldr	r3, [pc, #376]	; (800415c <HAL_RCC_OscConfig+0x4c4>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a5d      	ldr	r2, [pc, #372]	; (800415c <HAL_RCC_OscConfig+0x4c4>)
 8003fe8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fee:	f7fe facb 	bl	8002588 <HAL_GetTick>
 8003ff2:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ff4:	e008      	b.n	8004008 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ff6:	f7fe fac7 	bl	8002588 <HAL_GetTick>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	1ad3      	subs	r3, r2, r3
 8004000:	2b02      	cmp	r3, #2
 8004002:	d901      	bls.n	8004008 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8004004:	2303      	movs	r3, #3
 8004006:	e2a0      	b.n	800454a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004008:	4b54      	ldr	r3, [pc, #336]	; (800415c <HAL_RCC_OscConfig+0x4c4>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004010:	2b00      	cmp	r3, #0
 8004012:	d0f0      	beq.n	8003ff6 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004014:	4b51      	ldr	r3, [pc, #324]	; (800415c <HAL_RCC_OscConfig+0x4c4>)
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	061b      	lsls	r3, r3, #24
 8004022:	494e      	ldr	r1, [pc, #312]	; (800415c <HAL_RCC_OscConfig+0x4c4>)
 8004024:	4313      	orrs	r3, r2
 8004026:	604b      	str	r3, [r1, #4]
 8004028:	e018      	b.n	800405c <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800402a:	4b4c      	ldr	r3, [pc, #304]	; (800415c <HAL_RCC_OscConfig+0x4c4>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a4b      	ldr	r2, [pc, #300]	; (800415c <HAL_RCC_OscConfig+0x4c4>)
 8004030:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004034:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004036:	f7fe faa7 	bl	8002588 <HAL_GetTick>
 800403a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800403c:	e008      	b.n	8004050 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800403e:	f7fe faa3 	bl	8002588 <HAL_GetTick>
 8004042:	4602      	mov	r2, r0
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	2b02      	cmp	r3, #2
 800404a:	d901      	bls.n	8004050 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	e27c      	b.n	800454a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004050:	4b42      	ldr	r3, [pc, #264]	; (800415c <HAL_RCC_OscConfig+0x4c4>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004058:	2b00      	cmp	r3, #0
 800405a:	d1f0      	bne.n	800403e <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0308 	and.w	r3, r3, #8
 8004064:	2b00      	cmp	r3, #0
 8004066:	f000 8082 	beq.w	800416e <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d05f      	beq.n	8004132 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8004072:	4b3a      	ldr	r3, [pc, #232]	; (800415c <HAL_RCC_OscConfig+0x4c4>)
 8004074:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004078:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	699a      	ldr	r2, [r3, #24]
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	f003 0310 	and.w	r3, r3, #16
 8004084:	429a      	cmp	r2, r3
 8004086:	d037      	beq.n	80040f8 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	f003 0302 	and.w	r3, r3, #2
 800408e:	2b00      	cmp	r3, #0
 8004090:	d006      	beq.n	80040a0 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004098:	2b00      	cmp	r3, #0
 800409a:	d101      	bne.n	80040a0 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e254      	b.n	800454a <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	f003 0301 	and.w	r3, r3, #1
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d01b      	beq.n	80040e2 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 80040aa:	4b2c      	ldr	r3, [pc, #176]	; (800415c <HAL_RCC_OscConfig+0x4c4>)
 80040ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040b0:	4a2a      	ldr	r2, [pc, #168]	; (800415c <HAL_RCC_OscConfig+0x4c4>)
 80040b2:	f023 0301 	bic.w	r3, r3, #1
 80040b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80040ba:	f7fe fa65 	bl	8002588 <HAL_GetTick>
 80040be:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040c0:	e008      	b.n	80040d4 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040c2:	f7fe fa61 	bl	8002588 <HAL_GetTick>
 80040c6:	4602      	mov	r2, r0
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	2b11      	cmp	r3, #17
 80040ce:	d901      	bls.n	80040d4 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 80040d0:	2303      	movs	r3, #3
 80040d2:	e23a      	b.n	800454a <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040d4:	4b21      	ldr	r3, [pc, #132]	; (800415c <HAL_RCC_OscConfig+0x4c4>)
 80040d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040da:	f003 0302 	and.w	r3, r3, #2
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d1ef      	bne.n	80040c2 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 80040e2:	4b1e      	ldr	r3, [pc, #120]	; (800415c <HAL_RCC_OscConfig+0x4c4>)
 80040e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040e8:	f023 0210 	bic.w	r2, r3, #16
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	699b      	ldr	r3, [r3, #24]
 80040f0:	491a      	ldr	r1, [pc, #104]	; (800415c <HAL_RCC_OscConfig+0x4c4>)
 80040f2:	4313      	orrs	r3, r2
 80040f4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040f8:	4b18      	ldr	r3, [pc, #96]	; (800415c <HAL_RCC_OscConfig+0x4c4>)
 80040fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040fe:	4a17      	ldr	r2, [pc, #92]	; (800415c <HAL_RCC_OscConfig+0x4c4>)
 8004100:	f043 0301 	orr.w	r3, r3, #1
 8004104:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004108:	f7fe fa3e 	bl	8002588 <HAL_GetTick>
 800410c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800410e:	e008      	b.n	8004122 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004110:	f7fe fa3a 	bl	8002588 <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	2b11      	cmp	r3, #17
 800411c:	d901      	bls.n	8004122 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e213      	b.n	800454a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004122:	4b0e      	ldr	r3, [pc, #56]	; (800415c <HAL_RCC_OscConfig+0x4c4>)
 8004124:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004128:	f003 0302 	and.w	r3, r3, #2
 800412c:	2b00      	cmp	r3, #0
 800412e:	d0ef      	beq.n	8004110 <HAL_RCC_OscConfig+0x478>
 8004130:	e01d      	b.n	800416e <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004132:	4b0a      	ldr	r3, [pc, #40]	; (800415c <HAL_RCC_OscConfig+0x4c4>)
 8004134:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004138:	4a08      	ldr	r2, [pc, #32]	; (800415c <HAL_RCC_OscConfig+0x4c4>)
 800413a:	f023 0301 	bic.w	r3, r3, #1
 800413e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004142:	f7fe fa21 	bl	8002588 <HAL_GetTick>
 8004146:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004148:	e00a      	b.n	8004160 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800414a:	f7fe fa1d 	bl	8002588 <HAL_GetTick>
 800414e:	4602      	mov	r2, r0
 8004150:	69bb      	ldr	r3, [r7, #24]
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	2b11      	cmp	r3, #17
 8004156:	d903      	bls.n	8004160 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	e1f6      	b.n	800454a <HAL_RCC_OscConfig+0x8b2>
 800415c:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004160:	4ba9      	ldr	r3, [pc, #676]	; (8004408 <HAL_RCC_OscConfig+0x770>)
 8004162:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004166:	f003 0302 	and.w	r3, r3, #2
 800416a:	2b00      	cmp	r3, #0
 800416c:	d1ed      	bne.n	800414a <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0304 	and.w	r3, r3, #4
 8004176:	2b00      	cmp	r3, #0
 8004178:	f000 80bd 	beq.w	80042f6 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800417c:	2300      	movs	r3, #0
 800417e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004182:	4ba1      	ldr	r3, [pc, #644]	; (8004408 <HAL_RCC_OscConfig+0x770>)
 8004184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d10e      	bne.n	80041ac <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800418e:	4b9e      	ldr	r3, [pc, #632]	; (8004408 <HAL_RCC_OscConfig+0x770>)
 8004190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004192:	4a9d      	ldr	r2, [pc, #628]	; (8004408 <HAL_RCC_OscConfig+0x770>)
 8004194:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004198:	6593      	str	r3, [r2, #88]	; 0x58
 800419a:	4b9b      	ldr	r3, [pc, #620]	; (8004408 <HAL_RCC_OscConfig+0x770>)
 800419c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800419e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041a2:	60fb      	str	r3, [r7, #12]
 80041a4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80041a6:	2301      	movs	r3, #1
 80041a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041ac:	4b97      	ldr	r3, [pc, #604]	; (800440c <HAL_RCC_OscConfig+0x774>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d118      	bne.n	80041ea <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041b8:	4b94      	ldr	r3, [pc, #592]	; (800440c <HAL_RCC_OscConfig+0x774>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a93      	ldr	r2, [pc, #588]	; (800440c <HAL_RCC_OscConfig+0x774>)
 80041be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041c4:	f7fe f9e0 	bl	8002588 <HAL_GetTick>
 80041c8:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041ca:	e008      	b.n	80041de <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041cc:	f7fe f9dc 	bl	8002588 <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d901      	bls.n	80041de <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e1b5      	b.n	800454a <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041de:	4b8b      	ldr	r3, [pc, #556]	; (800440c <HAL_RCC_OscConfig+0x774>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d0f0      	beq.n	80041cc <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	f003 0301 	and.w	r3, r3, #1
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d02c      	beq.n	8004250 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 80041f6:	4b84      	ldr	r3, [pc, #528]	; (8004408 <HAL_RCC_OscConfig+0x770>)
 80041f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041fc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004208:	497f      	ldr	r1, [pc, #508]	; (8004408 <HAL_RCC_OscConfig+0x770>)
 800420a:	4313      	orrs	r3, r2
 800420c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	f003 0304 	and.w	r3, r3, #4
 8004218:	2b00      	cmp	r3, #0
 800421a:	d010      	beq.n	800423e <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800421c:	4b7a      	ldr	r3, [pc, #488]	; (8004408 <HAL_RCC_OscConfig+0x770>)
 800421e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004222:	4a79      	ldr	r2, [pc, #484]	; (8004408 <HAL_RCC_OscConfig+0x770>)
 8004224:	f043 0304 	orr.w	r3, r3, #4
 8004228:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800422c:	4b76      	ldr	r3, [pc, #472]	; (8004408 <HAL_RCC_OscConfig+0x770>)
 800422e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004232:	4a75      	ldr	r2, [pc, #468]	; (8004408 <HAL_RCC_OscConfig+0x770>)
 8004234:	f043 0301 	orr.w	r3, r3, #1
 8004238:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800423c:	e018      	b.n	8004270 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800423e:	4b72      	ldr	r3, [pc, #456]	; (8004408 <HAL_RCC_OscConfig+0x770>)
 8004240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004244:	4a70      	ldr	r2, [pc, #448]	; (8004408 <HAL_RCC_OscConfig+0x770>)
 8004246:	f043 0301 	orr.w	r3, r3, #1
 800424a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800424e:	e00f      	b.n	8004270 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004250:	4b6d      	ldr	r3, [pc, #436]	; (8004408 <HAL_RCC_OscConfig+0x770>)
 8004252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004256:	4a6c      	ldr	r2, [pc, #432]	; (8004408 <HAL_RCC_OscConfig+0x770>)
 8004258:	f023 0301 	bic.w	r3, r3, #1
 800425c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004260:	4b69      	ldr	r3, [pc, #420]	; (8004408 <HAL_RCC_OscConfig+0x770>)
 8004262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004266:	4a68      	ldr	r2, [pc, #416]	; (8004408 <HAL_RCC_OscConfig+0x770>)
 8004268:	f023 0304 	bic.w	r3, r3, #4
 800426c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d016      	beq.n	80042a6 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004278:	f7fe f986 	bl	8002588 <HAL_GetTick>
 800427c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800427e:	e00a      	b.n	8004296 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004280:	f7fe f982 	bl	8002588 <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	f241 3288 	movw	r2, #5000	; 0x1388
 800428e:	4293      	cmp	r3, r2
 8004290:	d901      	bls.n	8004296 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e159      	b.n	800454a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004296:	4b5c      	ldr	r3, [pc, #368]	; (8004408 <HAL_RCC_OscConfig+0x770>)
 8004298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800429c:	f003 0302 	and.w	r3, r3, #2
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d0ed      	beq.n	8004280 <HAL_RCC_OscConfig+0x5e8>
 80042a4:	e01d      	b.n	80042e2 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042a6:	f7fe f96f 	bl	8002588 <HAL_GetTick>
 80042aa:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042ac:	e00a      	b.n	80042c4 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042ae:	f7fe f96b 	bl	8002588 <HAL_GetTick>
 80042b2:	4602      	mov	r2, r0
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80042bc:	4293      	cmp	r3, r2
 80042be:	d901      	bls.n	80042c4 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	e142      	b.n	800454a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042c4:	4b50      	ldr	r3, [pc, #320]	; (8004408 <HAL_RCC_OscConfig+0x770>)
 80042c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1ed      	bne.n	80042ae <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 80042d2:	4b4d      	ldr	r3, [pc, #308]	; (8004408 <HAL_RCC_OscConfig+0x770>)
 80042d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042d8:	4a4b      	ldr	r2, [pc, #300]	; (8004408 <HAL_RCC_OscConfig+0x770>)
 80042da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d105      	bne.n	80042f6 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042ea:	4b47      	ldr	r3, [pc, #284]	; (8004408 <HAL_RCC_OscConfig+0x770>)
 80042ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ee:	4a46      	ldr	r2, [pc, #280]	; (8004408 <HAL_RCC_OscConfig+0x770>)
 80042f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042f4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0320 	and.w	r3, r3, #32
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d03c      	beq.n	800437c <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004306:	2b00      	cmp	r3, #0
 8004308:	d01c      	beq.n	8004344 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800430a:	4b3f      	ldr	r3, [pc, #252]	; (8004408 <HAL_RCC_OscConfig+0x770>)
 800430c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004310:	4a3d      	ldr	r2, [pc, #244]	; (8004408 <HAL_RCC_OscConfig+0x770>)
 8004312:	f043 0301 	orr.w	r3, r3, #1
 8004316:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800431a:	f7fe f935 	bl	8002588 <HAL_GetTick>
 800431e:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004320:	e008      	b.n	8004334 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004322:	f7fe f931 	bl	8002588 <HAL_GetTick>
 8004326:	4602      	mov	r2, r0
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	2b02      	cmp	r3, #2
 800432e:	d901      	bls.n	8004334 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8004330:	2303      	movs	r3, #3
 8004332:	e10a      	b.n	800454a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004334:	4b34      	ldr	r3, [pc, #208]	; (8004408 <HAL_RCC_OscConfig+0x770>)
 8004336:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800433a:	f003 0302 	and.w	r3, r3, #2
 800433e:	2b00      	cmp	r3, #0
 8004340:	d0ef      	beq.n	8004322 <HAL_RCC_OscConfig+0x68a>
 8004342:	e01b      	b.n	800437c <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004344:	4b30      	ldr	r3, [pc, #192]	; (8004408 <HAL_RCC_OscConfig+0x770>)
 8004346:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800434a:	4a2f      	ldr	r2, [pc, #188]	; (8004408 <HAL_RCC_OscConfig+0x770>)
 800434c:	f023 0301 	bic.w	r3, r3, #1
 8004350:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004354:	f7fe f918 	bl	8002588 <HAL_GetTick>
 8004358:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800435a:	e008      	b.n	800436e <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800435c:	f7fe f914 	bl	8002588 <HAL_GetTick>
 8004360:	4602      	mov	r2, r0
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	2b02      	cmp	r3, #2
 8004368:	d901      	bls.n	800436e <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e0ed      	b.n	800454a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800436e:	4b26      	ldr	r3, [pc, #152]	; (8004408 <HAL_RCC_OscConfig+0x770>)
 8004370:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004374:	f003 0302 	and.w	r3, r3, #2
 8004378:	2b00      	cmp	r3, #0
 800437a:	d1ef      	bne.n	800435c <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004380:	2b00      	cmp	r3, #0
 8004382:	f000 80e1 	beq.w	8004548 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800438a:	2b02      	cmp	r3, #2
 800438c:	f040 80b5 	bne.w	80044fa <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004390:	4b1d      	ldr	r3, [pc, #116]	; (8004408 <HAL_RCC_OscConfig+0x770>)
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	f003 0203 	and.w	r2, r3, #3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d124      	bne.n	80043ee <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ae:	3b01      	subs	r3, #1
 80043b0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d11b      	bne.n	80043ee <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d113      	bne.n	80043ee <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043d0:	085b      	lsrs	r3, r3, #1
 80043d2:	3b01      	subs	r3, #1
 80043d4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d109      	bne.n	80043ee <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e4:	085b      	lsrs	r3, r3, #1
 80043e6:	3b01      	subs	r3, #1
 80043e8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d05f      	beq.n	80044ae <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80043ee:	6a3b      	ldr	r3, [r7, #32]
 80043f0:	2b0c      	cmp	r3, #12
 80043f2:	d05a      	beq.n	80044aa <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80043f4:	4b04      	ldr	r3, [pc, #16]	; (8004408 <HAL_RCC_OscConfig+0x770>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a03      	ldr	r2, [pc, #12]	; (8004408 <HAL_RCC_OscConfig+0x770>)
 80043fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043fe:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004400:	f7fe f8c2 	bl	8002588 <HAL_GetTick>
 8004404:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004406:	e00c      	b.n	8004422 <HAL_RCC_OscConfig+0x78a>
 8004408:	40021000 	.word	0x40021000
 800440c:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004410:	f7fe f8ba 	bl	8002588 <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	2b02      	cmp	r3, #2
 800441c:	d901      	bls.n	8004422 <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e093      	b.n	800454a <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004422:	4b4c      	ldr	r3, [pc, #304]	; (8004554 <HAL_RCC_OscConfig+0x8bc>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1f0      	bne.n	8004410 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800442e:	4b49      	ldr	r3, [pc, #292]	; (8004554 <HAL_RCC_OscConfig+0x8bc>)
 8004430:	68da      	ldr	r2, [r3, #12]
 8004432:	4b49      	ldr	r3, [pc, #292]	; (8004558 <HAL_RCC_OscConfig+0x8c0>)
 8004434:	4013      	ands	r3, r2
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800443e:	3a01      	subs	r2, #1
 8004440:	0112      	lsls	r2, r2, #4
 8004442:	4311      	orrs	r1, r2
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004448:	0212      	lsls	r2, r2, #8
 800444a:	4311      	orrs	r1, r2
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004450:	0852      	lsrs	r2, r2, #1
 8004452:	3a01      	subs	r2, #1
 8004454:	0552      	lsls	r2, r2, #21
 8004456:	4311      	orrs	r1, r2
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800445c:	0852      	lsrs	r2, r2, #1
 800445e:	3a01      	subs	r2, #1
 8004460:	0652      	lsls	r2, r2, #25
 8004462:	430a      	orrs	r2, r1
 8004464:	493b      	ldr	r1, [pc, #236]	; (8004554 <HAL_RCC_OscConfig+0x8bc>)
 8004466:	4313      	orrs	r3, r2
 8004468:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800446a:	4b3a      	ldr	r3, [pc, #232]	; (8004554 <HAL_RCC_OscConfig+0x8bc>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a39      	ldr	r2, [pc, #228]	; (8004554 <HAL_RCC_OscConfig+0x8bc>)
 8004470:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004474:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004476:	4b37      	ldr	r3, [pc, #220]	; (8004554 <HAL_RCC_OscConfig+0x8bc>)
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	4a36      	ldr	r2, [pc, #216]	; (8004554 <HAL_RCC_OscConfig+0x8bc>)
 800447c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004480:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004482:	f7fe f881 	bl	8002588 <HAL_GetTick>
 8004486:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004488:	e008      	b.n	800449c <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800448a:	f7fe f87d 	bl	8002588 <HAL_GetTick>
 800448e:	4602      	mov	r2, r0
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	2b02      	cmp	r3, #2
 8004496:	d901      	bls.n	800449c <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8004498:	2303      	movs	r3, #3
 800449a:	e056      	b.n	800454a <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800449c:	4b2d      	ldr	r3, [pc, #180]	; (8004554 <HAL_RCC_OscConfig+0x8bc>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d0f0      	beq.n	800448a <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80044a8:	e04e      	b.n	8004548 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e04d      	b.n	800454a <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044ae:	4b29      	ldr	r3, [pc, #164]	; (8004554 <HAL_RCC_OscConfig+0x8bc>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d146      	bne.n	8004548 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80044ba:	4b26      	ldr	r3, [pc, #152]	; (8004554 <HAL_RCC_OscConfig+0x8bc>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a25      	ldr	r2, [pc, #148]	; (8004554 <HAL_RCC_OscConfig+0x8bc>)
 80044c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044c4:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80044c6:	4b23      	ldr	r3, [pc, #140]	; (8004554 <HAL_RCC_OscConfig+0x8bc>)
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	4a22      	ldr	r2, [pc, #136]	; (8004554 <HAL_RCC_OscConfig+0x8bc>)
 80044cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044d0:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80044d2:	f7fe f859 	bl	8002588 <HAL_GetTick>
 80044d6:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044d8:	e008      	b.n	80044ec <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044da:	f7fe f855 	bl	8002588 <HAL_GetTick>
 80044de:	4602      	mov	r2, r0
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d901      	bls.n	80044ec <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 80044e8:	2303      	movs	r3, #3
 80044ea:	e02e      	b.n	800454a <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044ec:	4b19      	ldr	r3, [pc, #100]	; (8004554 <HAL_RCC_OscConfig+0x8bc>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d0f0      	beq.n	80044da <HAL_RCC_OscConfig+0x842>
 80044f8:	e026      	b.n	8004548 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80044fa:	6a3b      	ldr	r3, [r7, #32]
 80044fc:	2b0c      	cmp	r3, #12
 80044fe:	d021      	beq.n	8004544 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004500:	4b14      	ldr	r3, [pc, #80]	; (8004554 <HAL_RCC_OscConfig+0x8bc>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a13      	ldr	r2, [pc, #76]	; (8004554 <HAL_RCC_OscConfig+0x8bc>)
 8004506:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800450a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800450c:	f7fe f83c 	bl	8002588 <HAL_GetTick>
 8004510:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004512:	e008      	b.n	8004526 <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004514:	f7fe f838 	bl	8002588 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b02      	cmp	r3, #2
 8004520:	d901      	bls.n	8004526 <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e011      	b.n	800454a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004526:	4b0b      	ldr	r3, [pc, #44]	; (8004554 <HAL_RCC_OscConfig+0x8bc>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1f0      	bne.n	8004514 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8004532:	4b08      	ldr	r3, [pc, #32]	; (8004554 <HAL_RCC_OscConfig+0x8bc>)
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	4a07      	ldr	r2, [pc, #28]	; (8004554 <HAL_RCC_OscConfig+0x8bc>)
 8004538:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800453c:	f023 0303 	bic.w	r3, r3, #3
 8004540:	60d3      	str	r3, [r2, #12]
 8004542:	e001      	b.n	8004548 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e000      	b.n	800454a <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8004548:	2300      	movs	r3, #0
}
 800454a:	4618      	mov	r0, r3
 800454c:	3728      	adds	r7, #40	; 0x28
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	40021000 	.word	0x40021000
 8004558:	f99f808c 	.word	0xf99f808c

0800455c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b084      	sub	sp, #16
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d101      	bne.n	8004570 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e0e7      	b.n	8004740 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004570:	4b75      	ldr	r3, [pc, #468]	; (8004748 <HAL_RCC_ClockConfig+0x1ec>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0307 	and.w	r3, r3, #7
 8004578:	683a      	ldr	r2, [r7, #0]
 800457a:	429a      	cmp	r2, r3
 800457c:	d910      	bls.n	80045a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800457e:	4b72      	ldr	r3, [pc, #456]	; (8004748 <HAL_RCC_ClockConfig+0x1ec>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f023 0207 	bic.w	r2, r3, #7
 8004586:	4970      	ldr	r1, [pc, #448]	; (8004748 <HAL_RCC_ClockConfig+0x1ec>)
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	4313      	orrs	r3, r2
 800458c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800458e:	4b6e      	ldr	r3, [pc, #440]	; (8004748 <HAL_RCC_ClockConfig+0x1ec>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 0307 	and.w	r3, r3, #7
 8004596:	683a      	ldr	r2, [r7, #0]
 8004598:	429a      	cmp	r2, r3
 800459a:	d001      	beq.n	80045a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e0cf      	b.n	8004740 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0302 	and.w	r3, r3, #2
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d010      	beq.n	80045ce <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	689a      	ldr	r2, [r3, #8]
 80045b0:	4b66      	ldr	r3, [pc, #408]	; (800474c <HAL_RCC_ClockConfig+0x1f0>)
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d908      	bls.n	80045ce <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045bc:	4b63      	ldr	r3, [pc, #396]	; (800474c <HAL_RCC_ClockConfig+0x1f0>)
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	4960      	ldr	r1, [pc, #384]	; (800474c <HAL_RCC_ClockConfig+0x1f0>)
 80045ca:	4313      	orrs	r3, r2
 80045cc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 0301 	and.w	r3, r3, #1
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d04c      	beq.n	8004674 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	2b03      	cmp	r3, #3
 80045e0:	d107      	bne.n	80045f2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045e2:	4b5a      	ldr	r3, [pc, #360]	; (800474c <HAL_RCC_ClockConfig+0x1f0>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d121      	bne.n	8004632 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e0a6      	b.n	8004740 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d107      	bne.n	800460a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045fa:	4b54      	ldr	r3, [pc, #336]	; (800474c <HAL_RCC_ClockConfig+0x1f0>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d115      	bne.n	8004632 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e09a      	b.n	8004740 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d107      	bne.n	8004622 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004612:	4b4e      	ldr	r3, [pc, #312]	; (800474c <HAL_RCC_ClockConfig+0x1f0>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 0302 	and.w	r3, r3, #2
 800461a:	2b00      	cmp	r3, #0
 800461c:	d109      	bne.n	8004632 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e08e      	b.n	8004740 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004622:	4b4a      	ldr	r3, [pc, #296]	; (800474c <HAL_RCC_ClockConfig+0x1f0>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800462a:	2b00      	cmp	r3, #0
 800462c:	d101      	bne.n	8004632 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e086      	b.n	8004740 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004632:	4b46      	ldr	r3, [pc, #280]	; (800474c <HAL_RCC_ClockConfig+0x1f0>)
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	f023 0203 	bic.w	r2, r3, #3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	4943      	ldr	r1, [pc, #268]	; (800474c <HAL_RCC_ClockConfig+0x1f0>)
 8004640:	4313      	orrs	r3, r2
 8004642:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004644:	f7fd ffa0 	bl	8002588 <HAL_GetTick>
 8004648:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800464a:	e00a      	b.n	8004662 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800464c:	f7fd ff9c 	bl	8002588 <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	f241 3288 	movw	r2, #5000	; 0x1388
 800465a:	4293      	cmp	r3, r2
 800465c:	d901      	bls.n	8004662 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e06e      	b.n	8004740 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004662:	4b3a      	ldr	r3, [pc, #232]	; (800474c <HAL_RCC_ClockConfig+0x1f0>)
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f003 020c 	and.w	r2, r3, #12
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	429a      	cmp	r2, r3
 8004672:	d1eb      	bne.n	800464c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0302 	and.w	r3, r3, #2
 800467c:	2b00      	cmp	r3, #0
 800467e:	d010      	beq.n	80046a2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	689a      	ldr	r2, [r3, #8]
 8004684:	4b31      	ldr	r3, [pc, #196]	; (800474c <HAL_RCC_ClockConfig+0x1f0>)
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800468c:	429a      	cmp	r2, r3
 800468e:	d208      	bcs.n	80046a2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004690:	4b2e      	ldr	r3, [pc, #184]	; (800474c <HAL_RCC_ClockConfig+0x1f0>)
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	492b      	ldr	r1, [pc, #172]	; (800474c <HAL_RCC_ClockConfig+0x1f0>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046a2:	4b29      	ldr	r3, [pc, #164]	; (8004748 <HAL_RCC_ClockConfig+0x1ec>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0307 	and.w	r3, r3, #7
 80046aa:	683a      	ldr	r2, [r7, #0]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d210      	bcs.n	80046d2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046b0:	4b25      	ldr	r3, [pc, #148]	; (8004748 <HAL_RCC_ClockConfig+0x1ec>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f023 0207 	bic.w	r2, r3, #7
 80046b8:	4923      	ldr	r1, [pc, #140]	; (8004748 <HAL_RCC_ClockConfig+0x1ec>)
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	4313      	orrs	r3, r2
 80046be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046c0:	4b21      	ldr	r3, [pc, #132]	; (8004748 <HAL_RCC_ClockConfig+0x1ec>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0307 	and.w	r3, r3, #7
 80046c8:	683a      	ldr	r2, [r7, #0]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d001      	beq.n	80046d2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e036      	b.n	8004740 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0304 	and.w	r3, r3, #4
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d008      	beq.n	80046f0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046de:	4b1b      	ldr	r3, [pc, #108]	; (800474c <HAL_RCC_ClockConfig+0x1f0>)
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	4918      	ldr	r1, [pc, #96]	; (800474c <HAL_RCC_ClockConfig+0x1f0>)
 80046ec:	4313      	orrs	r3, r2
 80046ee:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0308 	and.w	r3, r3, #8
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d009      	beq.n	8004710 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046fc:	4b13      	ldr	r3, [pc, #76]	; (800474c <HAL_RCC_ClockConfig+0x1f0>)
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	691b      	ldr	r3, [r3, #16]
 8004708:	00db      	lsls	r3, r3, #3
 800470a:	4910      	ldr	r1, [pc, #64]	; (800474c <HAL_RCC_ClockConfig+0x1f0>)
 800470c:	4313      	orrs	r3, r2
 800470e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004710:	f000 f824 	bl	800475c <HAL_RCC_GetSysClockFreq>
 8004714:	4602      	mov	r2, r0
 8004716:	4b0d      	ldr	r3, [pc, #52]	; (800474c <HAL_RCC_ClockConfig+0x1f0>)
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	091b      	lsrs	r3, r3, #4
 800471c:	f003 030f 	and.w	r3, r3, #15
 8004720:	490b      	ldr	r1, [pc, #44]	; (8004750 <HAL_RCC_ClockConfig+0x1f4>)
 8004722:	5ccb      	ldrb	r3, [r1, r3]
 8004724:	f003 031f 	and.w	r3, r3, #31
 8004728:	fa22 f303 	lsr.w	r3, r2, r3
 800472c:	4a09      	ldr	r2, [pc, #36]	; (8004754 <HAL_RCC_ClockConfig+0x1f8>)
 800472e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004730:	4b09      	ldr	r3, [pc, #36]	; (8004758 <HAL_RCC_ClockConfig+0x1fc>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4618      	mov	r0, r3
 8004736:	f7fd fd37 	bl	80021a8 <HAL_InitTick>
 800473a:	4603      	mov	r3, r0
 800473c:	72fb      	strb	r3, [r7, #11]

  return status;
 800473e:	7afb      	ldrb	r3, [r7, #11]
}
 8004740:	4618      	mov	r0, r3
 8004742:	3710      	adds	r7, #16
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}
 8004748:	40022000 	.word	0x40022000
 800474c:	40021000 	.word	0x40021000
 8004750:	0800d4b4 	.word	0x0800d4b4
 8004754:	20000000 	.word	0x20000000
 8004758:	20000004 	.word	0x20000004

0800475c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800475c:	b480      	push	{r7}
 800475e:	b089      	sub	sp, #36	; 0x24
 8004760:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004762:	2300      	movs	r3, #0
 8004764:	61fb      	str	r3, [r7, #28]
 8004766:	2300      	movs	r3, #0
 8004768:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800476a:	4b3e      	ldr	r3, [pc, #248]	; (8004864 <HAL_RCC_GetSysClockFreq+0x108>)
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	f003 030c 	and.w	r3, r3, #12
 8004772:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004774:	4b3b      	ldr	r3, [pc, #236]	; (8004864 <HAL_RCC_GetSysClockFreq+0x108>)
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	f003 0303 	and.w	r3, r3, #3
 800477c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d005      	beq.n	8004790 <HAL_RCC_GetSysClockFreq+0x34>
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	2b0c      	cmp	r3, #12
 8004788:	d121      	bne.n	80047ce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2b01      	cmp	r3, #1
 800478e:	d11e      	bne.n	80047ce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004790:	4b34      	ldr	r3, [pc, #208]	; (8004864 <HAL_RCC_GetSysClockFreq+0x108>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0308 	and.w	r3, r3, #8
 8004798:	2b00      	cmp	r3, #0
 800479a:	d107      	bne.n	80047ac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800479c:	4b31      	ldr	r3, [pc, #196]	; (8004864 <HAL_RCC_GetSysClockFreq+0x108>)
 800479e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047a2:	0a1b      	lsrs	r3, r3, #8
 80047a4:	f003 030f 	and.w	r3, r3, #15
 80047a8:	61fb      	str	r3, [r7, #28]
 80047aa:	e005      	b.n	80047b8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80047ac:	4b2d      	ldr	r3, [pc, #180]	; (8004864 <HAL_RCC_GetSysClockFreq+0x108>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	091b      	lsrs	r3, r3, #4
 80047b2:	f003 030f 	and.w	r3, r3, #15
 80047b6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80047b8:	4a2b      	ldr	r2, [pc, #172]	; (8004868 <HAL_RCC_GetSysClockFreq+0x10c>)
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047c0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d10d      	bne.n	80047e4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80047cc:	e00a      	b.n	80047e4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	2b04      	cmp	r3, #4
 80047d2:	d102      	bne.n	80047da <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80047d4:	4b25      	ldr	r3, [pc, #148]	; (800486c <HAL_RCC_GetSysClockFreq+0x110>)
 80047d6:	61bb      	str	r3, [r7, #24]
 80047d8:	e004      	b.n	80047e4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	2b08      	cmp	r3, #8
 80047de:	d101      	bne.n	80047e4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80047e0:	4b23      	ldr	r3, [pc, #140]	; (8004870 <HAL_RCC_GetSysClockFreq+0x114>)
 80047e2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	2b0c      	cmp	r3, #12
 80047e8:	d134      	bne.n	8004854 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80047ea:	4b1e      	ldr	r3, [pc, #120]	; (8004864 <HAL_RCC_GetSysClockFreq+0x108>)
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	f003 0303 	and.w	r3, r3, #3
 80047f2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	2b02      	cmp	r3, #2
 80047f8:	d003      	beq.n	8004802 <HAL_RCC_GetSysClockFreq+0xa6>
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	2b03      	cmp	r3, #3
 80047fe:	d003      	beq.n	8004808 <HAL_RCC_GetSysClockFreq+0xac>
 8004800:	e005      	b.n	800480e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004802:	4b1a      	ldr	r3, [pc, #104]	; (800486c <HAL_RCC_GetSysClockFreq+0x110>)
 8004804:	617b      	str	r3, [r7, #20]
      break;
 8004806:	e005      	b.n	8004814 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004808:	4b19      	ldr	r3, [pc, #100]	; (8004870 <HAL_RCC_GetSysClockFreq+0x114>)
 800480a:	617b      	str	r3, [r7, #20]
      break;
 800480c:	e002      	b.n	8004814 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	617b      	str	r3, [r7, #20]
      break;
 8004812:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004814:	4b13      	ldr	r3, [pc, #76]	; (8004864 <HAL_RCC_GetSysClockFreq+0x108>)
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	091b      	lsrs	r3, r3, #4
 800481a:	f003 0307 	and.w	r3, r3, #7
 800481e:	3301      	adds	r3, #1
 8004820:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004822:	4b10      	ldr	r3, [pc, #64]	; (8004864 <HAL_RCC_GetSysClockFreq+0x108>)
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	0a1b      	lsrs	r3, r3, #8
 8004828:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800482c:	697a      	ldr	r2, [r7, #20]
 800482e:	fb03 f202 	mul.w	r2, r3, r2
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	fbb2 f3f3 	udiv	r3, r2, r3
 8004838:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800483a:	4b0a      	ldr	r3, [pc, #40]	; (8004864 <HAL_RCC_GetSysClockFreq+0x108>)
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	0e5b      	lsrs	r3, r3, #25
 8004840:	f003 0303 	and.w	r3, r3, #3
 8004844:	3301      	adds	r3, #1
 8004846:	005b      	lsls	r3, r3, #1
 8004848:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800484a:	697a      	ldr	r2, [r7, #20]
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004852:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004854:	69bb      	ldr	r3, [r7, #24]
}
 8004856:	4618      	mov	r0, r3
 8004858:	3724      	adds	r7, #36	; 0x24
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr
 8004862:	bf00      	nop
 8004864:	40021000 	.word	0x40021000
 8004868:	0800d4cc 	.word	0x0800d4cc
 800486c:	00f42400 	.word	0x00f42400
 8004870:	007a1200 	.word	0x007a1200

08004874 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004874:	b480      	push	{r7}
 8004876:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004878:	4b03      	ldr	r3, [pc, #12]	; (8004888 <HAL_RCC_GetHCLKFreq+0x14>)
 800487a:	681b      	ldr	r3, [r3, #0]
}
 800487c:	4618      	mov	r0, r3
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	20000000 	.word	0x20000000

0800488c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004890:	f7ff fff0 	bl	8004874 <HAL_RCC_GetHCLKFreq>
 8004894:	4602      	mov	r2, r0
 8004896:	4b06      	ldr	r3, [pc, #24]	; (80048b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	0a1b      	lsrs	r3, r3, #8
 800489c:	f003 0307 	and.w	r3, r3, #7
 80048a0:	4904      	ldr	r1, [pc, #16]	; (80048b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80048a2:	5ccb      	ldrb	r3, [r1, r3]
 80048a4:	f003 031f 	and.w	r3, r3, #31
 80048a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	40021000 	.word	0x40021000
 80048b4:	0800d4c4 	.word	0x0800d4c4

080048b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80048bc:	f7ff ffda 	bl	8004874 <HAL_RCC_GetHCLKFreq>
 80048c0:	4602      	mov	r2, r0
 80048c2:	4b06      	ldr	r3, [pc, #24]	; (80048dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	0adb      	lsrs	r3, r3, #11
 80048c8:	f003 0307 	and.w	r3, r3, #7
 80048cc:	4904      	ldr	r1, [pc, #16]	; (80048e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80048ce:	5ccb      	ldrb	r3, [r1, r3]
 80048d0:	f003 031f 	and.w	r3, r3, #31
 80048d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048d8:	4618      	mov	r0, r3
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	40021000 	.word	0x40021000
 80048e0:	0800d4c4 	.word	0x0800d4c4

080048e4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	220f      	movs	r2, #15
 80048f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80048f4:	4b12      	ldr	r3, [pc, #72]	; (8004940 <HAL_RCC_GetClockConfig+0x5c>)
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	f003 0203 	and.w	r2, r3, #3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004900:	4b0f      	ldr	r3, [pc, #60]	; (8004940 <HAL_RCC_GetClockConfig+0x5c>)
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800490c:	4b0c      	ldr	r3, [pc, #48]	; (8004940 <HAL_RCC_GetClockConfig+0x5c>)
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004918:	4b09      	ldr	r3, [pc, #36]	; (8004940 <HAL_RCC_GetClockConfig+0x5c>)
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	08db      	lsrs	r3, r3, #3
 800491e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004926:	4b07      	ldr	r3, [pc, #28]	; (8004944 <HAL_RCC_GetClockConfig+0x60>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0207 	and.w	r2, r3, #7
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	601a      	str	r2, [r3, #0]
}
 8004932:	bf00      	nop
 8004934:	370c      	adds	r7, #12
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr
 800493e:	bf00      	nop
 8004940:	40021000 	.word	0x40021000
 8004944:	40022000 	.word	0x40022000

08004948 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b086      	sub	sp, #24
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004950:	2300      	movs	r3, #0
 8004952:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004954:	4b2a      	ldr	r3, [pc, #168]	; (8004a00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004958:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800495c:	2b00      	cmp	r3, #0
 800495e:	d003      	beq.n	8004968 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004960:	f7ff f936 	bl	8003bd0 <HAL_PWREx_GetVoltageRange>
 8004964:	6178      	str	r0, [r7, #20]
 8004966:	e014      	b.n	8004992 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004968:	4b25      	ldr	r3, [pc, #148]	; (8004a00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800496a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800496c:	4a24      	ldr	r2, [pc, #144]	; (8004a00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800496e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004972:	6593      	str	r3, [r2, #88]	; 0x58
 8004974:	4b22      	ldr	r3, [pc, #136]	; (8004a00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004978:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800497c:	60fb      	str	r3, [r7, #12]
 800497e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004980:	f7ff f926 	bl	8003bd0 <HAL_PWREx_GetVoltageRange>
 8004984:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004986:	4b1e      	ldr	r3, [pc, #120]	; (8004a00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800498a:	4a1d      	ldr	r2, [pc, #116]	; (8004a00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800498c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004990:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004998:	d10b      	bne.n	80049b2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2b80      	cmp	r3, #128	; 0x80
 800499e:	d919      	bls.n	80049d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2ba0      	cmp	r3, #160	; 0xa0
 80049a4:	d902      	bls.n	80049ac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80049a6:	2302      	movs	r3, #2
 80049a8:	613b      	str	r3, [r7, #16]
 80049aa:	e013      	b.n	80049d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80049ac:	2301      	movs	r3, #1
 80049ae:	613b      	str	r3, [r7, #16]
 80049b0:	e010      	b.n	80049d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2b80      	cmp	r3, #128	; 0x80
 80049b6:	d902      	bls.n	80049be <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80049b8:	2303      	movs	r3, #3
 80049ba:	613b      	str	r3, [r7, #16]
 80049bc:	e00a      	b.n	80049d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2b80      	cmp	r3, #128	; 0x80
 80049c2:	d102      	bne.n	80049ca <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80049c4:	2302      	movs	r3, #2
 80049c6:	613b      	str	r3, [r7, #16]
 80049c8:	e004      	b.n	80049d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2b70      	cmp	r3, #112	; 0x70
 80049ce:	d101      	bne.n	80049d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80049d0:	2301      	movs	r3, #1
 80049d2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80049d4:	4b0b      	ldr	r3, [pc, #44]	; (8004a04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f023 0207 	bic.w	r2, r3, #7
 80049dc:	4909      	ldr	r1, [pc, #36]	; (8004a04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80049e4:	4b07      	ldr	r3, [pc, #28]	; (8004a04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0307 	and.w	r3, r3, #7
 80049ec:	693a      	ldr	r2, [r7, #16]
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d001      	beq.n	80049f6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e000      	b.n	80049f8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80049f6:	2300      	movs	r3, #0
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3718      	adds	r7, #24
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	40021000 	.word	0x40021000
 8004a04:	40022000 	.word	0x40022000

08004a08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b086      	sub	sp, #24
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004a10:	2300      	movs	r3, #0
 8004a12:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a14:	2300      	movs	r3, #0
 8004a16:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	f000 809e 	beq.w	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a26:	2300      	movs	r3, #0
 8004a28:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004a2a:	4b46      	ldr	r3, [pc, #280]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d101      	bne.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004a36:	2301      	movs	r3, #1
 8004a38:	e000      	b.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x34>
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d00d      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a40:	4b40      	ldr	r3, [pc, #256]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a44:	4a3f      	ldr	r2, [pc, #252]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004a46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a4a:	6593      	str	r3, [r2, #88]	; 0x58
 8004a4c:	4b3d      	ldr	r3, [pc, #244]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a54:	60bb      	str	r3, [r7, #8]
 8004a56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a5c:	4b3a      	ldr	r3, [pc, #232]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a39      	ldr	r2, [pc, #228]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8004a62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a66:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a68:	f7fd fd8e 	bl	8002588 <HAL_GetTick>
 8004a6c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004a6e:	e009      	b.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a70:	f7fd fd8a 	bl	8002588 <HAL_GetTick>
 8004a74:	4602      	mov	r2, r0
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d902      	bls.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	74fb      	strb	r3, [r7, #19]
        break;
 8004a82:	e005      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004a84:	4b30      	ldr	r3, [pc, #192]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d0ef      	beq.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8004a90:	7cfb      	ldrb	r3, [r7, #19]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d15a      	bne.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004a96:	4b2b      	ldr	r3, [pc, #172]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aa0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d01e      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aac:	697a      	ldr	r2, [r7, #20]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d019      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004ab2:	4b24      	ldr	r3, [pc, #144]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ab8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004abc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004abe:	4b21      	ldr	r3, [pc, #132]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ac4:	4a1f      	ldr	r2, [pc, #124]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004ac6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004aca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004ace:	4b1d      	ldr	r3, [pc, #116]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ad4:	4a1b      	ldr	r2, [pc, #108]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004ad6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ada:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004ade:	4a19      	ldr	r2, [pc, #100]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	f003 0301 	and.w	r3, r3, #1
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d016      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004af0:	f7fd fd4a 	bl	8002588 <HAL_GetTick>
 8004af4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004af6:	e00b      	b.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004af8:	f7fd fd46 	bl	8002588 <HAL_GetTick>
 8004afc:	4602      	mov	r2, r0
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d902      	bls.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	74fb      	strb	r3, [r7, #19]
            break;
 8004b0e:	e006      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b10:	4b0c      	ldr	r3, [pc, #48]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b16:	f003 0302 	and.w	r3, r3, #2
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d0ec      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8004b1e:	7cfb      	ldrb	r3, [r7, #19]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d10b      	bne.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b24:	4b07      	ldr	r3, [pc, #28]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b2a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b32:	4904      	ldr	r1, [pc, #16]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004b34:	4313      	orrs	r3, r2
 8004b36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004b3a:	e009      	b.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004b3c:	7cfb      	ldrb	r3, [r7, #19]
 8004b3e:	74bb      	strb	r3, [r7, #18]
 8004b40:	e006      	b.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8004b42:	bf00      	nop
 8004b44:	40021000 	.word	0x40021000
 8004b48:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b4c:	7cfb      	ldrb	r3, [r7, #19]
 8004b4e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b50:	7c7b      	ldrb	r3, [r7, #17]
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d105      	bne.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b56:	4b6e      	ldr	r3, [pc, #440]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b5a:	4a6d      	ldr	r2, [pc, #436]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004b5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b60:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 0301 	and.w	r3, r3, #1
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d00a      	beq.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b6e:	4b68      	ldr	r3, [pc, #416]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b74:	f023 0203 	bic.w	r2, r3, #3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	4964      	ldr	r1, [pc, #400]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0302 	and.w	r3, r3, #2
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d00a      	beq.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b90:	4b5f      	ldr	r3, [pc, #380]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b96:	f023 020c 	bic.w	r2, r3, #12
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	495c      	ldr	r1, [pc, #368]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0304 	and.w	r3, r3, #4
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d00a      	beq.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004bb2:	4b57      	ldr	r3, [pc, #348]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bb8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	4953      	ldr	r1, [pc, #332]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0320 	and.w	r3, r3, #32
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d00a      	beq.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004bd4:	4b4e      	ldr	r3, [pc, #312]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bda:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	494b      	ldr	r1, [pc, #300]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004be4:	4313      	orrs	r3, r2
 8004be6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d00a      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004bf6:	4b46      	ldr	r3, [pc, #280]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bfc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6a1b      	ldr	r3, [r3, #32]
 8004c04:	4942      	ldr	r1, [pc, #264]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004c06:	4313      	orrs	r3, r2
 8004c08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d00a      	beq.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004c18:	4b3d      	ldr	r3, [pc, #244]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c1e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c26:	493a      	ldr	r1, [pc, #232]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d00a      	beq.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c3a:	4b35      	ldr	r3, [pc, #212]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c40:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	695b      	ldr	r3, [r3, #20]
 8004c48:	4931      	ldr	r1, [pc, #196]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d00a      	beq.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004c5c:	4b2c      	ldr	r3, [pc, #176]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c62:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	699b      	ldr	r3, [r3, #24]
 8004c6a:	4929      	ldr	r1, [pc, #164]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d00a      	beq.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c7e:	4b24      	ldr	r3, [pc, #144]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c84:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	69db      	ldr	r3, [r3, #28]
 8004c8c:	4920      	ldr	r1, [pc, #128]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d015      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ca0:	4b1b      	ldr	r3, [pc, #108]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cae:	4918      	ldr	r1, [pc, #96]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cbe:	d105      	bne.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cc0:	4b13      	ldr	r3, [pc, #76]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	4a12      	ldr	r2, [pc, #72]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004cc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cca:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d015      	beq.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004cd8:	4b0d      	ldr	r3, [pc, #52]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cde:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce6:	490a      	ldr	r1, [pc, #40]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cf6:	d105      	bne.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cf8:	4b05      	ldr	r3, [pc, #20]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	4a04      	ldr	r2, [pc, #16]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004cfe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d02:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004d04:	7cbb      	ldrb	r3, [r7, #18]
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3718      	adds	r7, #24
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	40021000 	.word	0x40021000

08004d14 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004d14:	b480      	push	{r7}
 8004d16:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004d18:	4b05      	ldr	r3, [pc, #20]	; (8004d30 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a04      	ldr	r2, [pc, #16]	; (8004d30 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004d1e:	f043 0304 	orr.w	r3, r3, #4
 8004d22:	6013      	str	r3, [r2, #0]
}
 8004d24:	bf00      	nop
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	40021000 	.word	0x40021000

08004d34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b082      	sub	sp, #8
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d101      	bne.n	8004d46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e049      	b.n	8004dda <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d106      	bne.n	8004d60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 f841 	bl	8004de2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2202      	movs	r2, #2
 8004d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	3304      	adds	r3, #4
 8004d70:	4619      	mov	r1, r3
 8004d72:	4610      	mov	r0, r2
 8004d74:	f000 f9be 	bl	80050f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3708      	adds	r7, #8
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}

08004de2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004de2:	b480      	push	{r7}
 8004de4:	b083      	sub	sp, #12
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004dea:	bf00      	nop
 8004dec:	370c      	adds	r7, #12
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr
	...

08004df8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b085      	sub	sp, #20
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d001      	beq.n	8004e10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e03b      	b.n	8004e88 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2202      	movs	r2, #2
 8004e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	68da      	ldr	r2, [r3, #12]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f042 0201 	orr.w	r2, r2, #1
 8004e26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a19      	ldr	r2, [pc, #100]	; (8004e94 <HAL_TIM_Base_Start_IT+0x9c>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d009      	beq.n	8004e46 <HAL_TIM_Base_Start_IT+0x4e>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e3a:	d004      	beq.n	8004e46 <HAL_TIM_Base_Start_IT+0x4e>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a15      	ldr	r2, [pc, #84]	; (8004e98 <HAL_TIM_Base_Start_IT+0xa0>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d115      	bne.n	8004e72 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	689a      	ldr	r2, [r3, #8]
 8004e4c:	4b13      	ldr	r3, [pc, #76]	; (8004e9c <HAL_TIM_Base_Start_IT+0xa4>)
 8004e4e:	4013      	ands	r3, r2
 8004e50:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2b06      	cmp	r3, #6
 8004e56:	d015      	beq.n	8004e84 <HAL_TIM_Base_Start_IT+0x8c>
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e5e:	d011      	beq.n	8004e84 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f042 0201 	orr.w	r2, r2, #1
 8004e6e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e70:	e008      	b.n	8004e84 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f042 0201 	orr.w	r2, r2, #1
 8004e80:	601a      	str	r2, [r3, #0]
 8004e82:	e000      	b.n	8004e86 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e84:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004e86:	2300      	movs	r3, #0
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3714      	adds	r7, #20
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr
 8004e94:	40012c00 	.word	0x40012c00
 8004e98:	40014000 	.word	0x40014000
 8004e9c:	00010007 	.word	0x00010007

08004ea0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	f003 0302 	and.w	r3, r3, #2
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d020      	beq.n	8004f04 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	f003 0302 	and.w	r3, r3, #2
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d01b      	beq.n	8004f04 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f06f 0202 	mvn.w	r2, #2
 8004ed4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2201      	movs	r2, #1
 8004eda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	699b      	ldr	r3, [r3, #24]
 8004ee2:	f003 0303 	and.w	r3, r3, #3
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d003      	beq.n	8004ef2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f000 f8e4 	bl	80050b8 <HAL_TIM_IC_CaptureCallback>
 8004ef0:	e005      	b.n	8004efe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 f8d6 	bl	80050a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f000 f8e7 	bl	80050cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	f003 0304 	and.w	r3, r3, #4
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d020      	beq.n	8004f50 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	f003 0304 	and.w	r3, r3, #4
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d01b      	beq.n	8004f50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f06f 0204 	mvn.w	r2, #4
 8004f20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2202      	movs	r2, #2
 8004f26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	699b      	ldr	r3, [r3, #24]
 8004f2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d003      	beq.n	8004f3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f000 f8be 	bl	80050b8 <HAL_TIM_IC_CaptureCallback>
 8004f3c:	e005      	b.n	8004f4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f000 f8b0 	bl	80050a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f000 f8c1 	bl	80050cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	f003 0308 	and.w	r3, r3, #8
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d020      	beq.n	8004f9c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	f003 0308 	and.w	r3, r3, #8
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d01b      	beq.n	8004f9c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f06f 0208 	mvn.w	r2, #8
 8004f6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2204      	movs	r2, #4
 8004f72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	69db      	ldr	r3, [r3, #28]
 8004f7a:	f003 0303 	and.w	r3, r3, #3
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d003      	beq.n	8004f8a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f000 f898 	bl	80050b8 <HAL_TIM_IC_CaptureCallback>
 8004f88:	e005      	b.n	8004f96 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f000 f88a 	bl	80050a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f000 f89b 	bl	80050cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	f003 0310 	and.w	r3, r3, #16
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d020      	beq.n	8004fe8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f003 0310 	and.w	r3, r3, #16
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d01b      	beq.n	8004fe8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f06f 0210 	mvn.w	r2, #16
 8004fb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2208      	movs	r2, #8
 8004fbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	69db      	ldr	r3, [r3, #28]
 8004fc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d003      	beq.n	8004fd6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f000 f872 	bl	80050b8 <HAL_TIM_IC_CaptureCallback>
 8004fd4:	e005      	b.n	8004fe2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 f864 	bl	80050a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f000 f875 	bl	80050cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	f003 0301 	and.w	r3, r3, #1
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d00c      	beq.n	800500c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f003 0301 	and.w	r3, r3, #1
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d007      	beq.n	800500c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f06f 0201 	mvn.w	r2, #1
 8005004:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f7fc ff20 	bl	8001e4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005012:	2b00      	cmp	r3, #0
 8005014:	d00c      	beq.n	8005030 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800501c:	2b00      	cmp	r3, #0
 800501e:	d007      	beq.n	8005030 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 f8d0 	bl	80051d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005036:	2b00      	cmp	r3, #0
 8005038:	d00c      	beq.n	8005054 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005040:	2b00      	cmp	r3, #0
 8005042:	d007      	beq.n	8005054 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800504c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f000 f8c8 	bl	80051e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800505a:	2b00      	cmp	r3, #0
 800505c:	d00c      	beq.n	8005078 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005064:	2b00      	cmp	r3, #0
 8005066:	d007      	beq.n	8005078 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005070:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f000 f834 	bl	80050e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	f003 0320 	and.w	r3, r3, #32
 800507e:	2b00      	cmp	r3, #0
 8005080:	d00c      	beq.n	800509c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	f003 0320 	and.w	r3, r3, #32
 8005088:	2b00      	cmp	r3, #0
 800508a:	d007      	beq.n	800509c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f06f 0220 	mvn.w	r2, #32
 8005094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f000 f890 	bl	80051bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800509c:	bf00      	nop
 800509e:	3710      	adds	r7, #16
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}

080050a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050ac:	bf00      	nop
 80050ae:	370c      	adds	r7, #12
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr

080050b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80050c0:	bf00      	nop
 80050c2:	370c      	adds	r7, #12
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr

080050cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050d4:	bf00      	nop
 80050d6:	370c      	adds	r7, #12
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr

080050e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050e8:	bf00      	nop
 80050ea:	370c      	adds	r7, #12
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr

080050f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b085      	sub	sp, #20
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4a2a      	ldr	r2, [pc, #168]	; (80051b0 <TIM_Base_SetConfig+0xbc>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d003      	beq.n	8005114 <TIM_Base_SetConfig+0x20>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005112:	d108      	bne.n	8005126 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800511a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	68fa      	ldr	r2, [r7, #12]
 8005122:	4313      	orrs	r3, r2
 8005124:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a21      	ldr	r2, [pc, #132]	; (80051b0 <TIM_Base_SetConfig+0xbc>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d00b      	beq.n	8005146 <TIM_Base_SetConfig+0x52>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005134:	d007      	beq.n	8005146 <TIM_Base_SetConfig+0x52>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a1e      	ldr	r2, [pc, #120]	; (80051b4 <TIM_Base_SetConfig+0xc0>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d003      	beq.n	8005146 <TIM_Base_SetConfig+0x52>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a1d      	ldr	r2, [pc, #116]	; (80051b8 <TIM_Base_SetConfig+0xc4>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d108      	bne.n	8005158 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800514c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	68fa      	ldr	r2, [r7, #12]
 8005154:	4313      	orrs	r3, r2
 8005156:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	695b      	ldr	r3, [r3, #20]
 8005162:	4313      	orrs	r3, r2
 8005164:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	68fa      	ldr	r2, [r7, #12]
 800516a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	689a      	ldr	r2, [r3, #8]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4a0c      	ldr	r2, [pc, #48]	; (80051b0 <TIM_Base_SetConfig+0xbc>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d007      	beq.n	8005194 <TIM_Base_SetConfig+0xa0>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	4a0b      	ldr	r2, [pc, #44]	; (80051b4 <TIM_Base_SetConfig+0xc0>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d003      	beq.n	8005194 <TIM_Base_SetConfig+0xa0>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4a0a      	ldr	r2, [pc, #40]	; (80051b8 <TIM_Base_SetConfig+0xc4>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d103      	bne.n	800519c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	691a      	ldr	r2, [r3, #16]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	615a      	str	r2, [r3, #20]
}
 80051a2:	bf00      	nop
 80051a4:	3714      	adds	r7, #20
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr
 80051ae:	bf00      	nop
 80051b0:	40012c00 	.word	0x40012c00
 80051b4:	40014000 	.word	0x40014000
 80051b8:	40014400 	.word	0x40014400

080051bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051bc:	b480      	push	{r7}
 80051be:	b083      	sub	sp, #12
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80051c4:	bf00      	nop
 80051c6:	370c      	adds	r7, #12
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr

080051d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80051d8:	bf00      	nop
 80051da:	370c      	adds	r7, #12
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr

080051e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80051ec:	bf00      	nop
 80051ee:	370c      	adds	r7, #12
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr

080051f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b082      	sub	sp, #8
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d101      	bne.n	800520a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e040      	b.n	800528c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800520e:	2b00      	cmp	r3, #0
 8005210:	d106      	bne.n	8005220 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f7fc feae 	bl	8001f7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2224      	movs	r2, #36	; 0x24
 8005224:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f022 0201 	bic.w	r2, r2, #1
 8005234:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523a:	2b00      	cmp	r3, #0
 800523c:	d002      	beq.n	8005244 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f000 ff4a 	bl	80060d8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f000 fced 	bl	8005c24 <UART_SetConfig>
 800524a:	4603      	mov	r3, r0
 800524c:	2b01      	cmp	r3, #1
 800524e:	d101      	bne.n	8005254 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	e01b      	b.n	800528c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	685a      	ldr	r2, [r3, #4]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005262:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	689a      	ldr	r2, [r3, #8]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005272:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f042 0201 	orr.w	r2, r2, #1
 8005282:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f000 ffc9 	bl	800621c <UART_CheckIdleState>
 800528a:	4603      	mov	r3, r0
}
 800528c:	4618      	mov	r0, r3
 800528e:	3708      	adds	r7, #8
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}

08005294 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b08a      	sub	sp, #40	; 0x28
 8005298:	af02      	add	r7, sp, #8
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	60b9      	str	r1, [r7, #8]
 800529e:	603b      	str	r3, [r7, #0]
 80052a0:	4613      	mov	r3, r2
 80052a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052a8:	2b20      	cmp	r3, #32
 80052aa:	d178      	bne.n	800539e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d002      	beq.n	80052b8 <HAL_UART_Transmit+0x24>
 80052b2:	88fb      	ldrh	r3, [r7, #6]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d101      	bne.n	80052bc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	e071      	b.n	80053a0 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2200      	movs	r2, #0
 80052c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2221      	movs	r2, #33	; 0x21
 80052c8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80052ca:	f7fd f95d 	bl	8002588 <HAL_GetTick>
 80052ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	88fa      	ldrh	r2, [r7, #6]
 80052d4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	88fa      	ldrh	r2, [r7, #6]
 80052dc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052e8:	d108      	bne.n	80052fc <HAL_UART_Transmit+0x68>
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d104      	bne.n	80052fc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80052f2:	2300      	movs	r3, #0
 80052f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	61bb      	str	r3, [r7, #24]
 80052fa:	e003      	b.n	8005304 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005300:	2300      	movs	r3, #0
 8005302:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005304:	e030      	b.n	8005368 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	9300      	str	r3, [sp, #0]
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	2200      	movs	r2, #0
 800530e:	2180      	movs	r1, #128	; 0x80
 8005310:	68f8      	ldr	r0, [r7, #12]
 8005312:	f001 f82b 	bl	800636c <UART_WaitOnFlagUntilTimeout>
 8005316:	4603      	mov	r3, r0
 8005318:	2b00      	cmp	r3, #0
 800531a:	d004      	beq.n	8005326 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2220      	movs	r2, #32
 8005320:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005322:	2303      	movs	r3, #3
 8005324:	e03c      	b.n	80053a0 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d10b      	bne.n	8005344 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800532c:	69bb      	ldr	r3, [r7, #24]
 800532e:	881a      	ldrh	r2, [r3, #0]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005338:	b292      	uxth	r2, r2
 800533a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	3302      	adds	r3, #2
 8005340:	61bb      	str	r3, [r7, #24]
 8005342:	e008      	b.n	8005356 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	781a      	ldrb	r2, [r3, #0]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	b292      	uxth	r2, r2
 800534e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005350:	69fb      	ldr	r3, [r7, #28]
 8005352:	3301      	adds	r3, #1
 8005354:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800535c:	b29b      	uxth	r3, r3
 800535e:	3b01      	subs	r3, #1
 8005360:	b29a      	uxth	r2, r3
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800536e:	b29b      	uxth	r3, r3
 8005370:	2b00      	cmp	r3, #0
 8005372:	d1c8      	bne.n	8005306 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	9300      	str	r3, [sp, #0]
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	2200      	movs	r2, #0
 800537c:	2140      	movs	r1, #64	; 0x40
 800537e:	68f8      	ldr	r0, [r7, #12]
 8005380:	f000 fff4 	bl	800636c <UART_WaitOnFlagUntilTimeout>
 8005384:	4603      	mov	r3, r0
 8005386:	2b00      	cmp	r3, #0
 8005388:	d004      	beq.n	8005394 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2220      	movs	r2, #32
 800538e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8005390:	2303      	movs	r3, #3
 8005392:	e005      	b.n	80053a0 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2220      	movs	r2, #32
 8005398:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800539a:	2300      	movs	r3, #0
 800539c:	e000      	b.n	80053a0 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800539e:	2302      	movs	r3, #2
  }
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3720      	adds	r7, #32
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}

080053a8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b08a      	sub	sp, #40	; 0x28
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	60b9      	str	r1, [r7, #8]
 80053b2:	4613      	mov	r3, r2
 80053b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053bc:	2b20      	cmp	r3, #32
 80053be:	d137      	bne.n	8005430 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d002      	beq.n	80053cc <HAL_UART_Receive_IT+0x24>
 80053c6:	88fb      	ldrh	r3, [r7, #6]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d101      	bne.n	80053d0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	e030      	b.n	8005432 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2200      	movs	r2, #0
 80053d4:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a18      	ldr	r2, [pc, #96]	; (800543c <HAL_UART_Receive_IT+0x94>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d01f      	beq.n	8005420 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d018      	beq.n	8005420 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	e853 3f00 	ldrex	r3, [r3]
 80053fa:	613b      	str	r3, [r7, #16]
   return(result);
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005402:	627b      	str	r3, [r7, #36]	; 0x24
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	461a      	mov	r2, r3
 800540a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540c:	623b      	str	r3, [r7, #32]
 800540e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005410:	69f9      	ldr	r1, [r7, #28]
 8005412:	6a3a      	ldr	r2, [r7, #32]
 8005414:	e841 2300 	strex	r3, r2, [r1]
 8005418:	61bb      	str	r3, [r7, #24]
   return(result);
 800541a:	69bb      	ldr	r3, [r7, #24]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d1e6      	bne.n	80053ee <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005420:	88fb      	ldrh	r3, [r7, #6]
 8005422:	461a      	mov	r2, r3
 8005424:	68b9      	ldr	r1, [r7, #8]
 8005426:	68f8      	ldr	r0, [r7, #12]
 8005428:	f001 f808 	bl	800643c <UART_Start_Receive_IT>
 800542c:	4603      	mov	r3, r0
 800542e:	e000      	b.n	8005432 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005430:	2302      	movs	r3, #2
  }
}
 8005432:	4618      	mov	r0, r3
 8005434:	3728      	adds	r7, #40	; 0x28
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop
 800543c:	40008000 	.word	0x40008000

08005440 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b08a      	sub	sp, #40	; 0x28
 8005444:	af00      	add	r7, sp, #0
 8005446:	60f8      	str	r0, [r7, #12]
 8005448:	60b9      	str	r1, [r7, #8]
 800544a:	4613      	mov	r3, r2
 800544c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005454:	2b20      	cmp	r3, #32
 8005456:	d137      	bne.n	80054c8 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d002      	beq.n	8005464 <HAL_UART_Receive_DMA+0x24>
 800545e:	88fb      	ldrh	r3, [r7, #6]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d101      	bne.n	8005468 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	e030      	b.n	80054ca <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2200      	movs	r2, #0
 800546c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a18      	ldr	r2, [pc, #96]	; (80054d4 <HAL_UART_Receive_DMA+0x94>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d01f      	beq.n	80054b8 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005482:	2b00      	cmp	r3, #0
 8005484:	d018      	beq.n	80054b8 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	e853 3f00 	ldrex	r3, [r3]
 8005492:	613b      	str	r3, [r7, #16]
   return(result);
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800549a:	627b      	str	r3, [r7, #36]	; 0x24
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	461a      	mov	r2, r3
 80054a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a4:	623b      	str	r3, [r7, #32]
 80054a6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a8:	69f9      	ldr	r1, [r7, #28]
 80054aa:	6a3a      	ldr	r2, [r7, #32]
 80054ac:	e841 2300 	strex	r3, r2, [r1]
 80054b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d1e6      	bne.n	8005486 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80054b8:	88fb      	ldrh	r3, [r7, #6]
 80054ba:	461a      	mov	r2, r3
 80054bc:	68b9      	ldr	r1, [r7, #8]
 80054be:	68f8      	ldr	r0, [r7, #12]
 80054c0:	f001 f882 	bl	80065c8 <UART_Start_Receive_DMA>
 80054c4:	4603      	mov	r3, r0
 80054c6:	e000      	b.n	80054ca <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80054c8:	2302      	movs	r3, #2
  }
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3728      	adds	r7, #40	; 0x28
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	40008000 	.word	0x40008000

080054d8 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b090      	sub	sp, #64	; 0x40
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054ec:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054f8:	2b80      	cmp	r3, #128	; 0x80
 80054fa:	d139      	bne.n	8005570 <HAL_UART_DMAStop+0x98>
 80054fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054fe:	2b21      	cmp	r3, #33	; 0x21
 8005500:	d136      	bne.n	8005570 <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	3308      	adds	r3, #8
 8005508:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800550a:	6a3b      	ldr	r3, [r7, #32]
 800550c:	e853 3f00 	ldrex	r3, [r3]
 8005510:	61fb      	str	r3, [r7, #28]
   return(result);
 8005512:	69fb      	ldr	r3, [r7, #28]
 8005514:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005518:	637b      	str	r3, [r7, #52]	; 0x34
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	3308      	adds	r3, #8
 8005520:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005522:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005524:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005526:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005528:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800552a:	e841 2300 	strex	r3, r2, [r1]
 800552e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005532:	2b00      	cmp	r3, #0
 8005534:	d1e5      	bne.n	8005502 <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800553a:	2b00      	cmp	r3, #0
 800553c:	d015      	beq.n	800556a <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005542:	4618      	mov	r0, r3
 8005544:	f7fd fa26 	bl	8002994 <HAL_DMA_Abort>
 8005548:	4603      	mov	r3, r0
 800554a:	2b00      	cmp	r3, #0
 800554c:	d00d      	beq.n	800556a <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005552:	4618      	mov	r0, r3
 8005554:	f7fd fb4c 	bl	8002bf0 <HAL_DMA_GetError>
 8005558:	4603      	mov	r3, r0
 800555a:	2b20      	cmp	r3, #32
 800555c:	d105      	bne.n	800556a <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2210      	movs	r2, #16
 8005562:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005566:	2303      	movs	r3, #3
 8005568:	e044      	b.n	80055f4 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f001 f8cc 	bl	8006708 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800557a:	2b40      	cmp	r3, #64	; 0x40
 800557c:	d139      	bne.n	80055f2 <HAL_UART_DMAStop+0x11a>
 800557e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005580:	2b22      	cmp	r3, #34	; 0x22
 8005582:	d136      	bne.n	80055f2 <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	3308      	adds	r3, #8
 800558a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	e853 3f00 	ldrex	r3, [r3]
 8005592:	60bb      	str	r3, [r7, #8]
   return(result);
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800559a:	633b      	str	r3, [r7, #48]	; 0x30
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	3308      	adds	r3, #8
 80055a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055a4:	61ba      	str	r2, [r7, #24]
 80055a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a8:	6979      	ldr	r1, [r7, #20]
 80055aa:	69ba      	ldr	r2, [r7, #24]
 80055ac:	e841 2300 	strex	r3, r2, [r1]
 80055b0:	613b      	str	r3, [r7, #16]
   return(result);
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d1e5      	bne.n	8005584 <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d015      	beq.n	80055ec <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055c4:	4618      	mov	r0, r3
 80055c6:	f7fd f9e5 	bl	8002994 <HAL_DMA_Abort>
 80055ca:	4603      	mov	r3, r0
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d00d      	beq.n	80055ec <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055d4:	4618      	mov	r0, r3
 80055d6:	f7fd fb0b 	bl	8002bf0 <HAL_DMA_GetError>
 80055da:	4603      	mov	r3, r0
 80055dc:	2b20      	cmp	r3, #32
 80055de:	d105      	bne.n	80055ec <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2210      	movs	r2, #16
 80055e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80055e8:	2303      	movs	r3, #3
 80055ea:	e003      	b.n	80055f4 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f001 f8b1 	bl	8006754 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80055f2:	2300      	movs	r3, #0
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3740      	adds	r7, #64	; 0x40
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b0ba      	sub	sp, #232	; 0xe8
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	69db      	ldr	r3, [r3, #28]
 800560a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005622:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005626:	f640 030f 	movw	r3, #2063	; 0x80f
 800562a:	4013      	ands	r3, r2
 800562c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005630:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005634:	2b00      	cmp	r3, #0
 8005636:	d115      	bne.n	8005664 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005638:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800563c:	f003 0320 	and.w	r3, r3, #32
 8005640:	2b00      	cmp	r3, #0
 8005642:	d00f      	beq.n	8005664 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005644:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005648:	f003 0320 	and.w	r3, r3, #32
 800564c:	2b00      	cmp	r3, #0
 800564e:	d009      	beq.n	8005664 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005654:	2b00      	cmp	r3, #0
 8005656:	f000 82ae 	beq.w	8005bb6 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	4798      	blx	r3
      }
      return;
 8005662:	e2a8      	b.n	8005bb6 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005664:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005668:	2b00      	cmp	r3, #0
 800566a:	f000 8117 	beq.w	800589c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800566e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005672:	f003 0301 	and.w	r3, r3, #1
 8005676:	2b00      	cmp	r3, #0
 8005678:	d106      	bne.n	8005688 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800567a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800567e:	4b85      	ldr	r3, [pc, #532]	; (8005894 <HAL_UART_IRQHandler+0x298>)
 8005680:	4013      	ands	r3, r2
 8005682:	2b00      	cmp	r3, #0
 8005684:	f000 810a 	beq.w	800589c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005688:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800568c:	f003 0301 	and.w	r3, r3, #1
 8005690:	2b00      	cmp	r3, #0
 8005692:	d011      	beq.n	80056b8 <HAL_UART_IRQHandler+0xbc>
 8005694:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800569c:	2b00      	cmp	r3, #0
 800569e:	d00b      	beq.n	80056b8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	2201      	movs	r2, #1
 80056a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056ae:	f043 0201 	orr.w	r2, r3, #1
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80056b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056bc:	f003 0302 	and.w	r3, r3, #2
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d011      	beq.n	80056e8 <HAL_UART_IRQHandler+0xec>
 80056c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056c8:	f003 0301 	and.w	r3, r3, #1
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d00b      	beq.n	80056e8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	2202      	movs	r2, #2
 80056d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056de:	f043 0204 	orr.w	r2, r3, #4
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80056e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056ec:	f003 0304 	and.w	r3, r3, #4
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d011      	beq.n	8005718 <HAL_UART_IRQHandler+0x11c>
 80056f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056f8:	f003 0301 	and.w	r3, r3, #1
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d00b      	beq.n	8005718 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	2204      	movs	r2, #4
 8005706:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800570e:	f043 0202 	orr.w	r2, r3, #2
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005718:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800571c:	f003 0308 	and.w	r3, r3, #8
 8005720:	2b00      	cmp	r3, #0
 8005722:	d017      	beq.n	8005754 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005724:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005728:	f003 0320 	and.w	r3, r3, #32
 800572c:	2b00      	cmp	r3, #0
 800572e:	d105      	bne.n	800573c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005730:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005734:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005738:	2b00      	cmp	r3, #0
 800573a:	d00b      	beq.n	8005754 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	2208      	movs	r2, #8
 8005742:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800574a:	f043 0208 	orr.w	r2, r3, #8
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005754:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005758:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800575c:	2b00      	cmp	r3, #0
 800575e:	d012      	beq.n	8005786 <HAL_UART_IRQHandler+0x18a>
 8005760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005764:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005768:	2b00      	cmp	r3, #0
 800576a:	d00c      	beq.n	8005786 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005774:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800577c:	f043 0220 	orr.w	r2, r3, #32
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800578c:	2b00      	cmp	r3, #0
 800578e:	f000 8214 	beq.w	8005bba <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005792:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005796:	f003 0320 	and.w	r3, r3, #32
 800579a:	2b00      	cmp	r3, #0
 800579c:	d00d      	beq.n	80057ba <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800579e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057a2:	f003 0320 	and.w	r3, r3, #32
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d007      	beq.n	80057ba <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d003      	beq.n	80057ba <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057c0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ce:	2b40      	cmp	r3, #64	; 0x40
 80057d0:	d005      	beq.n	80057de <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80057d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80057d6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d04f      	beq.n	800587e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 ffb8 	bl	8006754 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ee:	2b40      	cmp	r3, #64	; 0x40
 80057f0:	d141      	bne.n	8005876 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	3308      	adds	r3, #8
 80057f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005800:	e853 3f00 	ldrex	r3, [r3]
 8005804:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005808:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800580c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005810:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	3308      	adds	r3, #8
 800581a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800581e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005822:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005826:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800582a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800582e:	e841 2300 	strex	r3, r2, [r1]
 8005832:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005836:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800583a:	2b00      	cmp	r3, #0
 800583c:	d1d9      	bne.n	80057f2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005842:	2b00      	cmp	r3, #0
 8005844:	d013      	beq.n	800586e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800584a:	4a13      	ldr	r2, [pc, #76]	; (8005898 <HAL_UART_IRQHandler+0x29c>)
 800584c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005852:	4618      	mov	r0, r3
 8005854:	f7fd f8dc 	bl	8002a10 <HAL_DMA_Abort_IT>
 8005858:	4603      	mov	r3, r0
 800585a:	2b00      	cmp	r3, #0
 800585c:	d017      	beq.n	800588e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005868:	4610      	mov	r0, r2
 800586a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800586c:	e00f      	b.n	800588e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f000 f9c2 	bl	8005bf8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005874:	e00b      	b.n	800588e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 f9be 	bl	8005bf8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800587c:	e007      	b.n	800588e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f000 f9ba 	bl	8005bf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2200      	movs	r2, #0
 8005888:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800588c:	e195      	b.n	8005bba <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800588e:	bf00      	nop
    return;
 8005890:	e193      	b.n	8005bba <HAL_UART_IRQHandler+0x5be>
 8005892:	bf00      	nop
 8005894:	04000120 	.word	0x04000120
 8005898:	08006a05 	.word	0x08006a05

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	f040 814e 	bne.w	8005b42 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80058a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058aa:	f003 0310 	and.w	r3, r3, #16
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	f000 8147 	beq.w	8005b42 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80058b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058b8:	f003 0310 	and.w	r3, r3, #16
 80058bc:	2b00      	cmp	r3, #0
 80058be:	f000 8140 	beq.w	8005b42 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	2210      	movs	r2, #16
 80058c8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058d4:	2b40      	cmp	r3, #64	; 0x40
 80058d6:	f040 80b8 	bne.w	8005a4a <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80058e6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	f000 8167 	beq.w	8005bbe <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80058f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80058fa:	429a      	cmp	r2, r3
 80058fc:	f080 815f 	bcs.w	8005bbe <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005906:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f003 0320 	and.w	r3, r3, #32
 8005916:	2b00      	cmp	r3, #0
 8005918:	f040 8086 	bne.w	8005a28 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005924:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005928:	e853 3f00 	ldrex	r3, [r3]
 800592c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005930:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005934:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005938:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	461a      	mov	r2, r3
 8005942:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005946:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800594a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800594e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005952:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005956:	e841 2300 	strex	r3, r2, [r1]
 800595a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800595e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005962:	2b00      	cmp	r3, #0
 8005964:	d1da      	bne.n	800591c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	3308      	adds	r3, #8
 800596c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800596e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005970:	e853 3f00 	ldrex	r3, [r3]
 8005974:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005976:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005978:	f023 0301 	bic.w	r3, r3, #1
 800597c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	3308      	adds	r3, #8
 8005986:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800598a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800598e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005990:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005992:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005996:	e841 2300 	strex	r3, r2, [r1]
 800599a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800599c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d1e1      	bne.n	8005966 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	3308      	adds	r3, #8
 80059a8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80059ac:	e853 3f00 	ldrex	r3, [r3]
 80059b0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80059b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	3308      	adds	r3, #8
 80059c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80059c6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80059c8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80059cc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80059ce:	e841 2300 	strex	r3, r2, [r1]
 80059d2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80059d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d1e3      	bne.n	80059a2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2220      	movs	r2, #32
 80059de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059f0:	e853 3f00 	ldrex	r3, [r3]
 80059f4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80059f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059f8:	f023 0310 	bic.w	r3, r3, #16
 80059fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	461a      	mov	r2, r3
 8005a06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a0a:	65bb      	str	r3, [r7, #88]	; 0x58
 8005a0c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a0e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005a10:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005a12:	e841 2300 	strex	r3, r2, [r1]
 8005a16:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005a18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d1e4      	bne.n	80059e8 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a22:	4618      	mov	r0, r3
 8005a24:	f7fc ffb6 	bl	8002994 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2202      	movs	r2, #2
 8005a2c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	1ad3      	subs	r3, r2, r3
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	4619      	mov	r1, r3
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 f8e2 	bl	8005c0c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005a48:	e0b9      	b.n	8005bbe <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	1ad3      	subs	r3, r2, r3
 8005a5a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	f000 80ab 	beq.w	8005bc2 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8005a6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	f000 80a6 	beq.w	8005bc2 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a7e:	e853 3f00 	ldrex	r3, [r3]
 8005a82:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a86:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a8a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	461a      	mov	r2, r3
 8005a94:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005a98:	647b      	str	r3, [r7, #68]	; 0x44
 8005a9a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a9c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005aa0:	e841 2300 	strex	r3, r2, [r1]
 8005aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005aa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d1e4      	bne.n	8005a76 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	3308      	adds	r3, #8
 8005ab2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab6:	e853 3f00 	ldrex	r3, [r3]
 8005aba:	623b      	str	r3, [r7, #32]
   return(result);
 8005abc:	6a3b      	ldr	r3, [r7, #32]
 8005abe:	f023 0301 	bic.w	r3, r3, #1
 8005ac2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	3308      	adds	r3, #8
 8005acc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005ad0:	633a      	str	r2, [r7, #48]	; 0x30
 8005ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ad6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ad8:	e841 2300 	strex	r3, r2, [r1]
 8005adc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d1e3      	bne.n	8005aac <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2220      	movs	r2, #32
 8005ae8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2200      	movs	r2, #0
 8005af0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	e853 3f00 	ldrex	r3, [r3]
 8005b04:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f023 0310 	bic.w	r3, r3, #16
 8005b0c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	461a      	mov	r2, r3
 8005b16:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005b1a:	61fb      	str	r3, [r7, #28]
 8005b1c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b1e:	69b9      	ldr	r1, [r7, #24]
 8005b20:	69fa      	ldr	r2, [r7, #28]
 8005b22:	e841 2300 	strex	r3, r2, [r1]
 8005b26:	617b      	str	r3, [r7, #20]
   return(result);
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d1e4      	bne.n	8005af8 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2202      	movs	r2, #2
 8005b32:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005b38:	4619      	mov	r1, r3
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 f866 	bl	8005c0c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005b40:	e03f      	b.n	8005bc2 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005b42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d00e      	beq.n	8005b6c <HAL_UART_IRQHandler+0x570>
 8005b4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d008      	beq.n	8005b6c <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005b62:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f001 f949 	bl	8006dfc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005b6a:	e02d      	b.n	8005bc8 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005b6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d00e      	beq.n	8005b96 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005b78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d008      	beq.n	8005b96 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d01c      	beq.n	8005bc6 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	4798      	blx	r3
    }
    return;
 8005b94:	e017      	b.n	8005bc6 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005b96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d012      	beq.n	8005bc8 <HAL_UART_IRQHandler+0x5cc>
 8005ba2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d00c      	beq.n	8005bc8 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f000 ff3e 	bl	8006a30 <UART_EndTransmit_IT>
    return;
 8005bb4:	e008      	b.n	8005bc8 <HAL_UART_IRQHandler+0x5cc>
      return;
 8005bb6:	bf00      	nop
 8005bb8:	e006      	b.n	8005bc8 <HAL_UART_IRQHandler+0x5cc>
    return;
 8005bba:	bf00      	nop
 8005bbc:	e004      	b.n	8005bc8 <HAL_UART_IRQHandler+0x5cc>
      return;
 8005bbe:	bf00      	nop
 8005bc0:	e002      	b.n	8005bc8 <HAL_UART_IRQHandler+0x5cc>
      return;
 8005bc2:	bf00      	nop
 8005bc4:	e000      	b.n	8005bc8 <HAL_UART_IRQHandler+0x5cc>
    return;
 8005bc6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005bc8:	37e8      	adds	r7, #232	; 0xe8
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
 8005bce:	bf00      	nop

08005bd0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005bd8:	bf00      	nop
 8005bda:	370c      	adds	r7, #12
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b083      	sub	sp, #12
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005bec:	bf00      	nop
 8005bee:	370c      	adds	r7, #12
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr

08005bf8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b083      	sub	sp, #12
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005c00:	bf00      	nop
 8005c02:	370c      	adds	r7, #12
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr

08005c0c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b083      	sub	sp, #12
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	460b      	mov	r3, r1
 8005c16:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c18:	bf00      	nop
 8005c1a:	370c      	adds	r7, #12
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr

08005c24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c28:	b08a      	sub	sp, #40	; 0x28
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	689a      	ldr	r2, [r3, #8]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	691b      	ldr	r3, [r3, #16]
 8005c3c:	431a      	orrs	r2, r3
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	695b      	ldr	r3, [r3, #20]
 8005c42:	431a      	orrs	r2, r3
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	69db      	ldr	r3, [r3, #28]
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	4b9e      	ldr	r3, [pc, #632]	; (8005ecc <UART_SetConfig+0x2a8>)
 8005c54:	4013      	ands	r3, r2
 8005c56:	68fa      	ldr	r2, [r7, #12]
 8005c58:	6812      	ldr	r2, [r2, #0]
 8005c5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c5c:	430b      	orrs	r3, r1
 8005c5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	68da      	ldr	r2, [r3, #12]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	430a      	orrs	r2, r1
 8005c74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	699b      	ldr	r3, [r3, #24]
 8005c7a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a93      	ldr	r2, [pc, #588]	; (8005ed0 <UART_SetConfig+0x2ac>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d004      	beq.n	8005c90 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	6a1b      	ldr	r3, [r3, #32]
 8005c8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ca0:	430a      	orrs	r2, r1
 8005ca2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a8a      	ldr	r2, [pc, #552]	; (8005ed4 <UART_SetConfig+0x2b0>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d126      	bne.n	8005cfc <UART_SetConfig+0xd8>
 8005cae:	4b8a      	ldr	r3, [pc, #552]	; (8005ed8 <UART_SetConfig+0x2b4>)
 8005cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cb4:	f003 0303 	and.w	r3, r3, #3
 8005cb8:	2b03      	cmp	r3, #3
 8005cba:	d81b      	bhi.n	8005cf4 <UART_SetConfig+0xd0>
 8005cbc:	a201      	add	r2, pc, #4	; (adr r2, 8005cc4 <UART_SetConfig+0xa0>)
 8005cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc2:	bf00      	nop
 8005cc4:	08005cd5 	.word	0x08005cd5
 8005cc8:	08005ce5 	.word	0x08005ce5
 8005ccc:	08005cdd 	.word	0x08005cdd
 8005cd0:	08005ced 	.word	0x08005ced
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cda:	e0ab      	b.n	8005e34 <UART_SetConfig+0x210>
 8005cdc:	2302      	movs	r3, #2
 8005cde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ce2:	e0a7      	b.n	8005e34 <UART_SetConfig+0x210>
 8005ce4:	2304      	movs	r3, #4
 8005ce6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cea:	e0a3      	b.n	8005e34 <UART_SetConfig+0x210>
 8005cec:	2308      	movs	r3, #8
 8005cee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cf2:	e09f      	b.n	8005e34 <UART_SetConfig+0x210>
 8005cf4:	2310      	movs	r3, #16
 8005cf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cfa:	e09b      	b.n	8005e34 <UART_SetConfig+0x210>
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a76      	ldr	r2, [pc, #472]	; (8005edc <UART_SetConfig+0x2b8>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d138      	bne.n	8005d78 <UART_SetConfig+0x154>
 8005d06:	4b74      	ldr	r3, [pc, #464]	; (8005ed8 <UART_SetConfig+0x2b4>)
 8005d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d0c:	f003 030c 	and.w	r3, r3, #12
 8005d10:	2b0c      	cmp	r3, #12
 8005d12:	d82d      	bhi.n	8005d70 <UART_SetConfig+0x14c>
 8005d14:	a201      	add	r2, pc, #4	; (adr r2, 8005d1c <UART_SetConfig+0xf8>)
 8005d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d1a:	bf00      	nop
 8005d1c:	08005d51 	.word	0x08005d51
 8005d20:	08005d71 	.word	0x08005d71
 8005d24:	08005d71 	.word	0x08005d71
 8005d28:	08005d71 	.word	0x08005d71
 8005d2c:	08005d61 	.word	0x08005d61
 8005d30:	08005d71 	.word	0x08005d71
 8005d34:	08005d71 	.word	0x08005d71
 8005d38:	08005d71 	.word	0x08005d71
 8005d3c:	08005d59 	.word	0x08005d59
 8005d40:	08005d71 	.word	0x08005d71
 8005d44:	08005d71 	.word	0x08005d71
 8005d48:	08005d71 	.word	0x08005d71
 8005d4c:	08005d69 	.word	0x08005d69
 8005d50:	2300      	movs	r3, #0
 8005d52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d56:	e06d      	b.n	8005e34 <UART_SetConfig+0x210>
 8005d58:	2302      	movs	r3, #2
 8005d5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d5e:	e069      	b.n	8005e34 <UART_SetConfig+0x210>
 8005d60:	2304      	movs	r3, #4
 8005d62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d66:	e065      	b.n	8005e34 <UART_SetConfig+0x210>
 8005d68:	2308      	movs	r3, #8
 8005d6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d6e:	e061      	b.n	8005e34 <UART_SetConfig+0x210>
 8005d70:	2310      	movs	r3, #16
 8005d72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d76:	e05d      	b.n	8005e34 <UART_SetConfig+0x210>
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a58      	ldr	r2, [pc, #352]	; (8005ee0 <UART_SetConfig+0x2bc>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d125      	bne.n	8005dce <UART_SetConfig+0x1aa>
 8005d82:	4b55      	ldr	r3, [pc, #340]	; (8005ed8 <UART_SetConfig+0x2b4>)
 8005d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d88:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005d8c:	2b30      	cmp	r3, #48	; 0x30
 8005d8e:	d016      	beq.n	8005dbe <UART_SetConfig+0x19a>
 8005d90:	2b30      	cmp	r3, #48	; 0x30
 8005d92:	d818      	bhi.n	8005dc6 <UART_SetConfig+0x1a2>
 8005d94:	2b20      	cmp	r3, #32
 8005d96:	d00a      	beq.n	8005dae <UART_SetConfig+0x18a>
 8005d98:	2b20      	cmp	r3, #32
 8005d9a:	d814      	bhi.n	8005dc6 <UART_SetConfig+0x1a2>
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d002      	beq.n	8005da6 <UART_SetConfig+0x182>
 8005da0:	2b10      	cmp	r3, #16
 8005da2:	d008      	beq.n	8005db6 <UART_SetConfig+0x192>
 8005da4:	e00f      	b.n	8005dc6 <UART_SetConfig+0x1a2>
 8005da6:	2300      	movs	r3, #0
 8005da8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dac:	e042      	b.n	8005e34 <UART_SetConfig+0x210>
 8005dae:	2302      	movs	r3, #2
 8005db0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005db4:	e03e      	b.n	8005e34 <UART_SetConfig+0x210>
 8005db6:	2304      	movs	r3, #4
 8005db8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dbc:	e03a      	b.n	8005e34 <UART_SetConfig+0x210>
 8005dbe:	2308      	movs	r3, #8
 8005dc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dc4:	e036      	b.n	8005e34 <UART_SetConfig+0x210>
 8005dc6:	2310      	movs	r3, #16
 8005dc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dcc:	e032      	b.n	8005e34 <UART_SetConfig+0x210>
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a3f      	ldr	r2, [pc, #252]	; (8005ed0 <UART_SetConfig+0x2ac>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d12a      	bne.n	8005e2e <UART_SetConfig+0x20a>
 8005dd8:	4b3f      	ldr	r3, [pc, #252]	; (8005ed8 <UART_SetConfig+0x2b4>)
 8005dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dde:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005de2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005de6:	d01a      	beq.n	8005e1e <UART_SetConfig+0x1fa>
 8005de8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005dec:	d81b      	bhi.n	8005e26 <UART_SetConfig+0x202>
 8005dee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005df2:	d00c      	beq.n	8005e0e <UART_SetConfig+0x1ea>
 8005df4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005df8:	d815      	bhi.n	8005e26 <UART_SetConfig+0x202>
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d003      	beq.n	8005e06 <UART_SetConfig+0x1e2>
 8005dfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e02:	d008      	beq.n	8005e16 <UART_SetConfig+0x1f2>
 8005e04:	e00f      	b.n	8005e26 <UART_SetConfig+0x202>
 8005e06:	2300      	movs	r3, #0
 8005e08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e0c:	e012      	b.n	8005e34 <UART_SetConfig+0x210>
 8005e0e:	2302      	movs	r3, #2
 8005e10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e14:	e00e      	b.n	8005e34 <UART_SetConfig+0x210>
 8005e16:	2304      	movs	r3, #4
 8005e18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e1c:	e00a      	b.n	8005e34 <UART_SetConfig+0x210>
 8005e1e:	2308      	movs	r3, #8
 8005e20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e24:	e006      	b.n	8005e34 <UART_SetConfig+0x210>
 8005e26:	2310      	movs	r3, #16
 8005e28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e2c:	e002      	b.n	8005e34 <UART_SetConfig+0x210>
 8005e2e:	2310      	movs	r3, #16
 8005e30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a25      	ldr	r2, [pc, #148]	; (8005ed0 <UART_SetConfig+0x2ac>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	f040 808a 	bne.w	8005f54 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005e40:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005e44:	2b08      	cmp	r3, #8
 8005e46:	d824      	bhi.n	8005e92 <UART_SetConfig+0x26e>
 8005e48:	a201      	add	r2, pc, #4	; (adr r2, 8005e50 <UART_SetConfig+0x22c>)
 8005e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e4e:	bf00      	nop
 8005e50:	08005e75 	.word	0x08005e75
 8005e54:	08005e93 	.word	0x08005e93
 8005e58:	08005e7d 	.word	0x08005e7d
 8005e5c:	08005e93 	.word	0x08005e93
 8005e60:	08005e83 	.word	0x08005e83
 8005e64:	08005e93 	.word	0x08005e93
 8005e68:	08005e93 	.word	0x08005e93
 8005e6c:	08005e93 	.word	0x08005e93
 8005e70:	08005e8b 	.word	0x08005e8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e74:	f7fe fd0a 	bl	800488c <HAL_RCC_GetPCLK1Freq>
 8005e78:	61f8      	str	r0, [r7, #28]
        break;
 8005e7a:	e010      	b.n	8005e9e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e7c:	4b19      	ldr	r3, [pc, #100]	; (8005ee4 <UART_SetConfig+0x2c0>)
 8005e7e:	61fb      	str	r3, [r7, #28]
        break;
 8005e80:	e00d      	b.n	8005e9e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e82:	f7fe fc6b 	bl	800475c <HAL_RCC_GetSysClockFreq>
 8005e86:	61f8      	str	r0, [r7, #28]
        break;
 8005e88:	e009      	b.n	8005e9e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e8e:	61fb      	str	r3, [r7, #28]
        break;
 8005e90:	e005      	b.n	8005e9e <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8005e92:	2300      	movs	r3, #0
 8005e94:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005e9c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	f000 8109 	beq.w	80060b8 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	685a      	ldr	r2, [r3, #4]
 8005eaa:	4613      	mov	r3, r2
 8005eac:	005b      	lsls	r3, r3, #1
 8005eae:	4413      	add	r3, r2
 8005eb0:	69fa      	ldr	r2, [r7, #28]
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d305      	bcc.n	8005ec2 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005ebc:	69fa      	ldr	r2, [r7, #28]
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d912      	bls.n	8005ee8 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005ec8:	e0f6      	b.n	80060b8 <UART_SetConfig+0x494>
 8005eca:	bf00      	nop
 8005ecc:	efff69f3 	.word	0xefff69f3
 8005ed0:	40008000 	.word	0x40008000
 8005ed4:	40013800 	.word	0x40013800
 8005ed8:	40021000 	.word	0x40021000
 8005edc:	40004400 	.word	0x40004400
 8005ee0:	40004800 	.word	0x40004800
 8005ee4:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005ee8:	69fb      	ldr	r3, [r7, #28]
 8005eea:	2200      	movs	r2, #0
 8005eec:	461c      	mov	r4, r3
 8005eee:	4615      	mov	r5, r2
 8005ef0:	f04f 0200 	mov.w	r2, #0
 8005ef4:	f04f 0300 	mov.w	r3, #0
 8005ef8:	022b      	lsls	r3, r5, #8
 8005efa:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005efe:	0222      	lsls	r2, r4, #8
 8005f00:	68f9      	ldr	r1, [r7, #12]
 8005f02:	6849      	ldr	r1, [r1, #4]
 8005f04:	0849      	lsrs	r1, r1, #1
 8005f06:	2000      	movs	r0, #0
 8005f08:	4688      	mov	r8, r1
 8005f0a:	4681      	mov	r9, r0
 8005f0c:	eb12 0a08 	adds.w	sl, r2, r8
 8005f10:	eb43 0b09 	adc.w	fp, r3, r9
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	603b      	str	r3, [r7, #0]
 8005f1c:	607a      	str	r2, [r7, #4]
 8005f1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f22:	4650      	mov	r0, sl
 8005f24:	4659      	mov	r1, fp
 8005f26:	f7fa fe8f 	bl	8000c48 <__aeabi_uldivmod>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	460b      	mov	r3, r1
 8005f2e:	4613      	mov	r3, r2
 8005f30:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005f32:	69bb      	ldr	r3, [r7, #24]
 8005f34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f38:	d308      	bcc.n	8005f4c <UART_SetConfig+0x328>
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f40:	d204      	bcs.n	8005f4c <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	69ba      	ldr	r2, [r7, #24]
 8005f48:	60da      	str	r2, [r3, #12]
 8005f4a:	e0b5      	b.n	80060b8 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005f52:	e0b1      	b.n	80060b8 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	69db      	ldr	r3, [r3, #28]
 8005f58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f5c:	d15d      	bne.n	800601a <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8005f5e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005f62:	2b08      	cmp	r3, #8
 8005f64:	d827      	bhi.n	8005fb6 <UART_SetConfig+0x392>
 8005f66:	a201      	add	r2, pc, #4	; (adr r2, 8005f6c <UART_SetConfig+0x348>)
 8005f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f6c:	08005f91 	.word	0x08005f91
 8005f70:	08005f99 	.word	0x08005f99
 8005f74:	08005fa1 	.word	0x08005fa1
 8005f78:	08005fb7 	.word	0x08005fb7
 8005f7c:	08005fa7 	.word	0x08005fa7
 8005f80:	08005fb7 	.word	0x08005fb7
 8005f84:	08005fb7 	.word	0x08005fb7
 8005f88:	08005fb7 	.word	0x08005fb7
 8005f8c:	08005faf 	.word	0x08005faf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f90:	f7fe fc7c 	bl	800488c <HAL_RCC_GetPCLK1Freq>
 8005f94:	61f8      	str	r0, [r7, #28]
        break;
 8005f96:	e014      	b.n	8005fc2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f98:	f7fe fc8e 	bl	80048b8 <HAL_RCC_GetPCLK2Freq>
 8005f9c:	61f8      	str	r0, [r7, #28]
        break;
 8005f9e:	e010      	b.n	8005fc2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fa0:	4b4c      	ldr	r3, [pc, #304]	; (80060d4 <UART_SetConfig+0x4b0>)
 8005fa2:	61fb      	str	r3, [r7, #28]
        break;
 8005fa4:	e00d      	b.n	8005fc2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fa6:	f7fe fbd9 	bl	800475c <HAL_RCC_GetSysClockFreq>
 8005faa:	61f8      	str	r0, [r7, #28]
        break;
 8005fac:	e009      	b.n	8005fc2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fb2:	61fb      	str	r3, [r7, #28]
        break;
 8005fb4:	e005      	b.n	8005fc2 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005fc0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d077      	beq.n	80060b8 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005fc8:	69fb      	ldr	r3, [r7, #28]
 8005fca:	005a      	lsls	r2, r3, #1
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	085b      	lsrs	r3, r3, #1
 8005fd2:	441a      	add	r2, r3
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fdc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fde:	69bb      	ldr	r3, [r7, #24]
 8005fe0:	2b0f      	cmp	r3, #15
 8005fe2:	d916      	bls.n	8006012 <UART_SetConfig+0x3ee>
 8005fe4:	69bb      	ldr	r3, [r7, #24]
 8005fe6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fea:	d212      	bcs.n	8006012 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005fec:	69bb      	ldr	r3, [r7, #24]
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	f023 030f 	bic.w	r3, r3, #15
 8005ff4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	085b      	lsrs	r3, r3, #1
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	f003 0307 	and.w	r3, r3, #7
 8006000:	b29a      	uxth	r2, r3
 8006002:	8afb      	ldrh	r3, [r7, #22]
 8006004:	4313      	orrs	r3, r2
 8006006:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	8afa      	ldrh	r2, [r7, #22]
 800600e:	60da      	str	r2, [r3, #12]
 8006010:	e052      	b.n	80060b8 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006018:	e04e      	b.n	80060b8 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 800601a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800601e:	2b08      	cmp	r3, #8
 8006020:	d827      	bhi.n	8006072 <UART_SetConfig+0x44e>
 8006022:	a201      	add	r2, pc, #4	; (adr r2, 8006028 <UART_SetConfig+0x404>)
 8006024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006028:	0800604d 	.word	0x0800604d
 800602c:	08006055 	.word	0x08006055
 8006030:	0800605d 	.word	0x0800605d
 8006034:	08006073 	.word	0x08006073
 8006038:	08006063 	.word	0x08006063
 800603c:	08006073 	.word	0x08006073
 8006040:	08006073 	.word	0x08006073
 8006044:	08006073 	.word	0x08006073
 8006048:	0800606b 	.word	0x0800606b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800604c:	f7fe fc1e 	bl	800488c <HAL_RCC_GetPCLK1Freq>
 8006050:	61f8      	str	r0, [r7, #28]
        break;
 8006052:	e014      	b.n	800607e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006054:	f7fe fc30 	bl	80048b8 <HAL_RCC_GetPCLK2Freq>
 8006058:	61f8      	str	r0, [r7, #28]
        break;
 800605a:	e010      	b.n	800607e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800605c:	4b1d      	ldr	r3, [pc, #116]	; (80060d4 <UART_SetConfig+0x4b0>)
 800605e:	61fb      	str	r3, [r7, #28]
        break;
 8006060:	e00d      	b.n	800607e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006062:	f7fe fb7b 	bl	800475c <HAL_RCC_GetSysClockFreq>
 8006066:	61f8      	str	r0, [r7, #28]
        break;
 8006068:	e009      	b.n	800607e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800606a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800606e:	61fb      	str	r3, [r7, #28]
        break;
 8006070:	e005      	b.n	800607e <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8006072:	2300      	movs	r3, #0
 8006074:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800607c:	bf00      	nop
    }

    if (pclk != 0U)
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d019      	beq.n	80060b8 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	085a      	lsrs	r2, r3, #1
 800608a:	69fb      	ldr	r3, [r7, #28]
 800608c:	441a      	add	r2, r3
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	fbb2 f3f3 	udiv	r3, r2, r3
 8006096:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	2b0f      	cmp	r3, #15
 800609c:	d909      	bls.n	80060b2 <UART_SetConfig+0x48e>
 800609e:	69bb      	ldr	r3, [r7, #24]
 80060a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060a4:	d205      	bcs.n	80060b2 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80060a6:	69bb      	ldr	r3, [r7, #24]
 80060a8:	b29a      	uxth	r2, r3
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	60da      	str	r2, [r3, #12]
 80060b0:	e002      	b.n	80060b8 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2200      	movs	r2, #0
 80060bc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2200      	movs	r2, #0
 80060c2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80060c4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3728      	adds	r7, #40	; 0x28
 80060cc:	46bd      	mov	sp, r7
 80060ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80060d2:	bf00      	nop
 80060d4:	00f42400 	.word	0x00f42400

080060d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80060d8:	b480      	push	{r7}
 80060da:	b083      	sub	sp, #12
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e4:	f003 0308 	and.w	r3, r3, #8
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d00a      	beq.n	8006102 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	430a      	orrs	r2, r1
 8006100:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006106:	f003 0301 	and.w	r3, r3, #1
 800610a:	2b00      	cmp	r3, #0
 800610c:	d00a      	beq.n	8006124 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	430a      	orrs	r2, r1
 8006122:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006128:	f003 0302 	and.w	r3, r3, #2
 800612c:	2b00      	cmp	r3, #0
 800612e:	d00a      	beq.n	8006146 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	430a      	orrs	r2, r1
 8006144:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800614a:	f003 0304 	and.w	r3, r3, #4
 800614e:	2b00      	cmp	r3, #0
 8006150:	d00a      	beq.n	8006168 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	430a      	orrs	r2, r1
 8006166:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800616c:	f003 0310 	and.w	r3, r3, #16
 8006170:	2b00      	cmp	r3, #0
 8006172:	d00a      	beq.n	800618a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	430a      	orrs	r2, r1
 8006188:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618e:	f003 0320 	and.w	r3, r3, #32
 8006192:	2b00      	cmp	r3, #0
 8006194:	d00a      	beq.n	80061ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	430a      	orrs	r2, r1
 80061aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d01a      	beq.n	80061ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	430a      	orrs	r2, r1
 80061cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061d6:	d10a      	bne.n	80061ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	430a      	orrs	r2, r1
 80061ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d00a      	beq.n	8006210 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	430a      	orrs	r2, r1
 800620e:	605a      	str	r2, [r3, #4]
  }
}
 8006210:	bf00      	nop
 8006212:	370c      	adds	r7, #12
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr

0800621c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b098      	sub	sp, #96	; 0x60
 8006220:	af02      	add	r7, sp, #8
 8006222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2200      	movs	r2, #0
 8006228:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800622c:	f7fc f9ac 	bl	8002588 <HAL_GetTick>
 8006230:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f003 0308 	and.w	r3, r3, #8
 800623c:	2b08      	cmp	r3, #8
 800623e:	d12e      	bne.n	800629e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006240:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006244:	9300      	str	r3, [sp, #0]
 8006246:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006248:	2200      	movs	r2, #0
 800624a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 f88c 	bl	800636c <UART_WaitOnFlagUntilTimeout>
 8006254:	4603      	mov	r3, r0
 8006256:	2b00      	cmp	r3, #0
 8006258:	d021      	beq.n	800629e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006262:	e853 3f00 	ldrex	r3, [r3]
 8006266:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800626a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800626e:	653b      	str	r3, [r7, #80]	; 0x50
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	461a      	mov	r2, r3
 8006276:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006278:	647b      	str	r3, [r7, #68]	; 0x44
 800627a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800627c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800627e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006280:	e841 2300 	strex	r3, r2, [r1]
 8006284:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006286:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006288:	2b00      	cmp	r3, #0
 800628a:	d1e6      	bne.n	800625a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2220      	movs	r2, #32
 8006290:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2200      	movs	r2, #0
 8006296:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800629a:	2303      	movs	r3, #3
 800629c:	e062      	b.n	8006364 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f003 0304 	and.w	r3, r3, #4
 80062a8:	2b04      	cmp	r3, #4
 80062aa:	d149      	bne.n	8006340 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062b0:	9300      	str	r3, [sp, #0]
 80062b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062b4:	2200      	movs	r2, #0
 80062b6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 f856 	bl	800636c <UART_WaitOnFlagUntilTimeout>
 80062c0:	4603      	mov	r3, r0
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d03c      	beq.n	8006340 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ce:	e853 3f00 	ldrex	r3, [r3]
 80062d2:	623b      	str	r3, [r7, #32]
   return(result);
 80062d4:	6a3b      	ldr	r3, [r7, #32]
 80062d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80062da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	461a      	mov	r2, r3
 80062e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062e4:	633b      	str	r3, [r7, #48]	; 0x30
 80062e6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80062ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062ec:	e841 2300 	strex	r3, r2, [r1]
 80062f0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80062f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d1e6      	bne.n	80062c6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	3308      	adds	r3, #8
 80062fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	e853 3f00 	ldrex	r3, [r3]
 8006306:	60fb      	str	r3, [r7, #12]
   return(result);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f023 0301 	bic.w	r3, r3, #1
 800630e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	3308      	adds	r3, #8
 8006316:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006318:	61fa      	str	r2, [r7, #28]
 800631a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800631c:	69b9      	ldr	r1, [r7, #24]
 800631e:	69fa      	ldr	r2, [r7, #28]
 8006320:	e841 2300 	strex	r3, r2, [r1]
 8006324:	617b      	str	r3, [r7, #20]
   return(result);
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d1e5      	bne.n	80062f8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2220      	movs	r2, #32
 8006330:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2200      	movs	r2, #0
 8006338:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800633c:	2303      	movs	r3, #3
 800633e:	e011      	b.n	8006364 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2220      	movs	r2, #32
 8006344:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2220      	movs	r2, #32
 800634a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2200      	movs	r2, #0
 8006358:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2200      	movs	r2, #0
 800635e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006362:	2300      	movs	r3, #0
}
 8006364:	4618      	mov	r0, r3
 8006366:	3758      	adds	r7, #88	; 0x58
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}

0800636c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b084      	sub	sp, #16
 8006370:	af00      	add	r7, sp, #0
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	60b9      	str	r1, [r7, #8]
 8006376:	603b      	str	r3, [r7, #0]
 8006378:	4613      	mov	r3, r2
 800637a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800637c:	e049      	b.n	8006412 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800637e:	69bb      	ldr	r3, [r7, #24]
 8006380:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006384:	d045      	beq.n	8006412 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006386:	f7fc f8ff 	bl	8002588 <HAL_GetTick>
 800638a:	4602      	mov	r2, r0
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	1ad3      	subs	r3, r2, r3
 8006390:	69ba      	ldr	r2, [r7, #24]
 8006392:	429a      	cmp	r2, r3
 8006394:	d302      	bcc.n	800639c <UART_WaitOnFlagUntilTimeout+0x30>
 8006396:	69bb      	ldr	r3, [r7, #24]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d101      	bne.n	80063a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800639c:	2303      	movs	r3, #3
 800639e:	e048      	b.n	8006432 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f003 0304 	and.w	r3, r3, #4
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d031      	beq.n	8006412 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	69db      	ldr	r3, [r3, #28]
 80063b4:	f003 0308 	and.w	r3, r3, #8
 80063b8:	2b08      	cmp	r3, #8
 80063ba:	d110      	bne.n	80063de <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	2208      	movs	r2, #8
 80063c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80063c4:	68f8      	ldr	r0, [r7, #12]
 80063c6:	f000 f9c5 	bl	8006754 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2208      	movs	r2, #8
 80063ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2200      	movs	r2, #0
 80063d6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	e029      	b.n	8006432 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	69db      	ldr	r3, [r3, #28]
 80063e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063ec:	d111      	bne.n	8006412 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80063f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80063f8:	68f8      	ldr	r0, [r7, #12]
 80063fa:	f000 f9ab 	bl	8006754 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2220      	movs	r2, #32
 8006402:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2200      	movs	r2, #0
 800640a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800640e:	2303      	movs	r3, #3
 8006410:	e00f      	b.n	8006432 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	69da      	ldr	r2, [r3, #28]
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	4013      	ands	r3, r2
 800641c:	68ba      	ldr	r2, [r7, #8]
 800641e:	429a      	cmp	r2, r3
 8006420:	bf0c      	ite	eq
 8006422:	2301      	moveq	r3, #1
 8006424:	2300      	movne	r3, #0
 8006426:	b2db      	uxtb	r3, r3
 8006428:	461a      	mov	r2, r3
 800642a:	79fb      	ldrb	r3, [r7, #7]
 800642c:	429a      	cmp	r2, r3
 800642e:	d0a6      	beq.n	800637e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006430:	2300      	movs	r3, #0
}
 8006432:	4618      	mov	r0, r3
 8006434:	3710      	adds	r7, #16
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}
	...

0800643c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800643c:	b480      	push	{r7}
 800643e:	b097      	sub	sp, #92	; 0x5c
 8006440:	af00      	add	r7, sp, #0
 8006442:	60f8      	str	r0, [r7, #12]
 8006444:	60b9      	str	r1, [r7, #8]
 8006446:	4613      	mov	r3, r2
 8006448:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	68ba      	ldr	r2, [r7, #8]
 800644e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	88fa      	ldrh	r2, [r7, #6]
 8006454:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	88fa      	ldrh	r2, [r7, #6]
 800645c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2200      	movs	r2, #0
 8006464:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800646e:	d10e      	bne.n	800648e <UART_Start_Receive_IT+0x52>
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	691b      	ldr	r3, [r3, #16]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d105      	bne.n	8006484 <UART_Start_Receive_IT+0x48>
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800647e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006482:	e02d      	b.n	80064e0 <UART_Start_Receive_IT+0xa4>
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	22ff      	movs	r2, #255	; 0xff
 8006488:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800648c:	e028      	b.n	80064e0 <UART_Start_Receive_IT+0xa4>
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d10d      	bne.n	80064b2 <UART_Start_Receive_IT+0x76>
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d104      	bne.n	80064a8 <UART_Start_Receive_IT+0x6c>
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	22ff      	movs	r2, #255	; 0xff
 80064a2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80064a6:	e01b      	b.n	80064e0 <UART_Start_Receive_IT+0xa4>
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	227f      	movs	r2, #127	; 0x7f
 80064ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80064b0:	e016      	b.n	80064e0 <UART_Start_Receive_IT+0xa4>
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064ba:	d10d      	bne.n	80064d8 <UART_Start_Receive_IT+0x9c>
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	691b      	ldr	r3, [r3, #16]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d104      	bne.n	80064ce <UART_Start_Receive_IT+0x92>
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	227f      	movs	r2, #127	; 0x7f
 80064c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80064cc:	e008      	b.n	80064e0 <UART_Start_Receive_IT+0xa4>
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	223f      	movs	r2, #63	; 0x3f
 80064d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80064d6:	e003      	b.n	80064e0 <UART_Start_Receive_IT+0xa4>
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2200      	movs	r2, #0
 80064dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2200      	movs	r2, #0
 80064e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2222      	movs	r2, #34	; 0x22
 80064ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	3308      	adds	r3, #8
 80064f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064fa:	e853 3f00 	ldrex	r3, [r3]
 80064fe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006502:	f043 0301 	orr.w	r3, r3, #1
 8006506:	657b      	str	r3, [r7, #84]	; 0x54
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	3308      	adds	r3, #8
 800650e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006510:	64ba      	str	r2, [r7, #72]	; 0x48
 8006512:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006514:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006516:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006518:	e841 2300 	strex	r3, r2, [r1]
 800651c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800651e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006520:	2b00      	cmp	r3, #0
 8006522:	d1e5      	bne.n	80064f0 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800652c:	d107      	bne.n	800653e <UART_Start_Receive_IT+0x102>
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	691b      	ldr	r3, [r3, #16]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d103      	bne.n	800653e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	4a21      	ldr	r2, [pc, #132]	; (80065c0 <UART_Start_Receive_IT+0x184>)
 800653a:	669a      	str	r2, [r3, #104]	; 0x68
 800653c:	e002      	b.n	8006544 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	4a20      	ldr	r2, [pc, #128]	; (80065c4 <UART_Start_Receive_IT+0x188>)
 8006542:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	691b      	ldr	r3, [r3, #16]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d019      	beq.n	8006580 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006554:	e853 3f00 	ldrex	r3, [r3]
 8006558:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800655a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006560:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	461a      	mov	r2, r3
 8006568:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800656a:	637b      	str	r3, [r7, #52]	; 0x34
 800656c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800656e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006570:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006572:	e841 2300 	strex	r3, r2, [r1]
 8006576:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800657a:	2b00      	cmp	r3, #0
 800657c:	d1e6      	bne.n	800654c <UART_Start_Receive_IT+0x110>
 800657e:	e018      	b.n	80065b2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	e853 3f00 	ldrex	r3, [r3]
 800658c:	613b      	str	r3, [r7, #16]
   return(result);
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	f043 0320 	orr.w	r3, r3, #32
 8006594:	653b      	str	r3, [r7, #80]	; 0x50
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	461a      	mov	r2, r3
 800659c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800659e:	623b      	str	r3, [r7, #32]
 80065a0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a2:	69f9      	ldr	r1, [r7, #28]
 80065a4:	6a3a      	ldr	r2, [r7, #32]
 80065a6:	e841 2300 	strex	r3, r2, [r1]
 80065aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80065ac:	69bb      	ldr	r3, [r7, #24]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d1e6      	bne.n	8006580 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80065b2:	2300      	movs	r3, #0
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	375c      	adds	r7, #92	; 0x5c
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr
 80065c0:	08006c41 	.word	0x08006c41
 80065c4:	08006a85 	.word	0x08006a85

080065c8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b096      	sub	sp, #88	; 0x58
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	60f8      	str	r0, [r7, #12]
 80065d0:	60b9      	str	r1, [r7, #8]
 80065d2:	4613      	mov	r3, r2
 80065d4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	68ba      	ldr	r2, [r7, #8]
 80065da:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	88fa      	ldrh	r2, [r7, #6]
 80065e0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2200      	movs	r2, #0
 80065e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2222      	movs	r2, #34	; 0x22
 80065f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d028      	beq.n	800664e <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006600:	4a3e      	ldr	r2, [pc, #248]	; (80066fc <UART_Start_Receive_DMA+0x134>)
 8006602:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006608:	4a3d      	ldr	r2, [pc, #244]	; (8006700 <UART_Start_Receive_DMA+0x138>)
 800660a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006610:	4a3c      	ldr	r2, [pc, #240]	; (8006704 <UART_Start_Receive_DMA+0x13c>)
 8006612:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006618:	2200      	movs	r2, #0
 800661a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	3324      	adds	r3, #36	; 0x24
 8006626:	4619      	mov	r1, r3
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800662c:	461a      	mov	r2, r3
 800662e:	88fb      	ldrh	r3, [r7, #6]
 8006630:	f7fc f950 	bl	80028d4 <HAL_DMA_Start_IT>
 8006634:	4603      	mov	r3, r0
 8006636:	2b00      	cmp	r3, #0
 8006638:	d009      	beq.n	800664e <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2210      	movs	r2, #16
 800663e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2220      	movs	r2, #32
 8006646:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	e051      	b.n	80066f2 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	691b      	ldr	r3, [r3, #16]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d018      	beq.n	8006688 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800665c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800665e:	e853 3f00 	ldrex	r3, [r3]
 8006662:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006666:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800666a:	657b      	str	r3, [r7, #84]	; 0x54
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	461a      	mov	r2, r3
 8006672:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006674:	64bb      	str	r3, [r7, #72]	; 0x48
 8006676:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006678:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800667a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800667c:	e841 2300 	strex	r3, r2, [r1]
 8006680:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006682:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006684:	2b00      	cmp	r3, #0
 8006686:	d1e6      	bne.n	8006656 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	3308      	adds	r3, #8
 800668e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006692:	e853 3f00 	ldrex	r3, [r3]
 8006696:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669a:	f043 0301 	orr.w	r3, r3, #1
 800669e:	653b      	str	r3, [r7, #80]	; 0x50
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	3308      	adds	r3, #8
 80066a6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80066a8:	637a      	str	r2, [r7, #52]	; 0x34
 80066aa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80066ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80066b0:	e841 2300 	strex	r3, r2, [r1]
 80066b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80066b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d1e5      	bne.n	8006688 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	3308      	adds	r3, #8
 80066c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	e853 3f00 	ldrex	r3, [r3]
 80066ca:	613b      	str	r3, [r7, #16]
   return(result);
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	3308      	adds	r3, #8
 80066da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80066dc:	623a      	str	r2, [r7, #32]
 80066de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e0:	69f9      	ldr	r1, [r7, #28]
 80066e2:	6a3a      	ldr	r2, [r7, #32]
 80066e4:	e841 2300 	strex	r3, r2, [r1]
 80066e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80066ea:	69bb      	ldr	r3, [r7, #24]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d1e5      	bne.n	80066bc <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 80066f0:	2300      	movs	r3, #0
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3758      	adds	r7, #88	; 0x58
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
 80066fa:	bf00      	nop
 80066fc:	0800681d 	.word	0x0800681d
 8006700:	08006949 	.word	0x08006949
 8006704:	08006987 	.word	0x08006987

08006708 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006708:	b480      	push	{r7}
 800670a:	b089      	sub	sp, #36	; 0x24
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	e853 3f00 	ldrex	r3, [r3]
 800671c:	60bb      	str	r3, [r7, #8]
   return(result);
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006724:	61fb      	str	r3, [r7, #28]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	461a      	mov	r2, r3
 800672c:	69fb      	ldr	r3, [r7, #28]
 800672e:	61bb      	str	r3, [r7, #24]
 8006730:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006732:	6979      	ldr	r1, [r7, #20]
 8006734:	69ba      	ldr	r2, [r7, #24]
 8006736:	e841 2300 	strex	r3, r2, [r1]
 800673a:	613b      	str	r3, [r7, #16]
   return(result);
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d1e6      	bne.n	8006710 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2220      	movs	r2, #32
 8006746:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8006748:	bf00      	nop
 800674a:	3724      	adds	r7, #36	; 0x24
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr

08006754 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006754:	b480      	push	{r7}
 8006756:	b095      	sub	sp, #84	; 0x54
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006764:	e853 3f00 	ldrex	r3, [r3]
 8006768:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800676a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800676c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006770:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	461a      	mov	r2, r3
 8006778:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800677a:	643b      	str	r3, [r7, #64]	; 0x40
 800677c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800677e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006780:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006782:	e841 2300 	strex	r3, r2, [r1]
 8006786:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800678a:	2b00      	cmp	r3, #0
 800678c:	d1e6      	bne.n	800675c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	3308      	adds	r3, #8
 8006794:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006796:	6a3b      	ldr	r3, [r7, #32]
 8006798:	e853 3f00 	ldrex	r3, [r3]
 800679c:	61fb      	str	r3, [r7, #28]
   return(result);
 800679e:	69fb      	ldr	r3, [r7, #28]
 80067a0:	f023 0301 	bic.w	r3, r3, #1
 80067a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	3308      	adds	r3, #8
 80067ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80067b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80067b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067b6:	e841 2300 	strex	r3, r2, [r1]
 80067ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80067bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d1e5      	bne.n	800678e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067c6:	2b01      	cmp	r3, #1
 80067c8:	d118      	bne.n	80067fc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	e853 3f00 	ldrex	r3, [r3]
 80067d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	f023 0310 	bic.w	r3, r3, #16
 80067de:	647b      	str	r3, [r7, #68]	; 0x44
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	461a      	mov	r2, r3
 80067e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067e8:	61bb      	str	r3, [r7, #24]
 80067ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ec:	6979      	ldr	r1, [r7, #20]
 80067ee:	69ba      	ldr	r2, [r7, #24]
 80067f0:	e841 2300 	strex	r3, r2, [r1]
 80067f4:	613b      	str	r3, [r7, #16]
   return(result);
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d1e6      	bne.n	80067ca <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2220      	movs	r2, #32
 8006800:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2200      	movs	r2, #0
 800680e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006810:	bf00      	nop
 8006812:	3754      	adds	r7, #84	; 0x54
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr

0800681c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b09c      	sub	sp, #112	; 0x70
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006828:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f003 0320 	and.w	r3, r3, #32
 8006834:	2b00      	cmp	r3, #0
 8006836:	d171      	bne.n	800691c <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8006838:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800683a:	2200      	movs	r2, #0
 800683c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006840:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006846:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006848:	e853 3f00 	ldrex	r3, [r3]
 800684c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800684e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006850:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006854:	66bb      	str	r3, [r7, #104]	; 0x68
 8006856:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	461a      	mov	r2, r3
 800685c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800685e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006860:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006862:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006864:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006866:	e841 2300 	strex	r3, r2, [r1]
 800686a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800686c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800686e:	2b00      	cmp	r3, #0
 8006870:	d1e6      	bne.n	8006840 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006872:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	3308      	adds	r3, #8
 8006878:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800687a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800687c:	e853 3f00 	ldrex	r3, [r3]
 8006880:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006884:	f023 0301 	bic.w	r3, r3, #1
 8006888:	667b      	str	r3, [r7, #100]	; 0x64
 800688a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	3308      	adds	r3, #8
 8006890:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006892:	647a      	str	r2, [r7, #68]	; 0x44
 8006894:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006896:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006898:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800689a:	e841 2300 	strex	r3, r2, [r1]
 800689e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80068a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d1e5      	bne.n	8006872 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	3308      	adds	r3, #8
 80068ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b0:	e853 3f00 	ldrex	r3, [r3]
 80068b4:	623b      	str	r3, [r7, #32]
   return(result);
 80068b6:	6a3b      	ldr	r3, [r7, #32]
 80068b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068bc:	663b      	str	r3, [r7, #96]	; 0x60
 80068be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	3308      	adds	r3, #8
 80068c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80068c6:	633a      	str	r2, [r7, #48]	; 0x30
 80068c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80068cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068ce:	e841 2300 	strex	r3, r2, [r1]
 80068d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80068d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d1e5      	bne.n	80068a6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80068da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068dc:	2220      	movs	r2, #32
 80068de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	d118      	bne.n	800691c <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	e853 3f00 	ldrex	r3, [r3]
 80068f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f023 0310 	bic.w	r3, r3, #16
 80068fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006900:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	461a      	mov	r2, r3
 8006906:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006908:	61fb      	str	r3, [r7, #28]
 800690a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800690c:	69b9      	ldr	r1, [r7, #24]
 800690e:	69fa      	ldr	r2, [r7, #28]
 8006910:	e841 2300 	strex	r3, r2, [r1]
 8006914:	617b      	str	r3, [r7, #20]
   return(result);
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d1e6      	bne.n	80068ea <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800691c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800691e:	2200      	movs	r2, #0
 8006920:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006922:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006924:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006926:	2b01      	cmp	r3, #1
 8006928:	d107      	bne.n	800693a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800692a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800692c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006930:	4619      	mov	r1, r3
 8006932:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006934:	f7ff f96a 	bl	8005c0c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006938:	e002      	b.n	8006940 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800693a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800693c:	f7fb f8b0 	bl	8001aa0 <HAL_UART_RxCpltCallback>
}
 8006940:	bf00      	nop
 8006942:	3770      	adds	r7, #112	; 0x70
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b084      	sub	sp, #16
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006954:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2201      	movs	r2, #1
 800695a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006960:	2b01      	cmp	r3, #1
 8006962:	d109      	bne.n	8006978 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800696a:	085b      	lsrs	r3, r3, #1
 800696c:	b29b      	uxth	r3, r3
 800696e:	4619      	mov	r1, r3
 8006970:	68f8      	ldr	r0, [r7, #12]
 8006972:	f7ff f94b 	bl	8005c0c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006976:	e002      	b.n	800697e <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8006978:	68f8      	ldr	r0, [r7, #12]
 800697a:	f7ff f933 	bl	8005be4 <HAL_UART_RxHalfCpltCallback>
}
 800697e:	bf00      	nop
 8006980:	3710      	adds	r7, #16
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}

08006986 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006986:	b580      	push	{r7, lr}
 8006988:	b086      	sub	sp, #24
 800698a:	af00      	add	r7, sp, #0
 800698c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006992:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006998:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069a0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069ac:	2b80      	cmp	r3, #128	; 0x80
 80069ae:	d109      	bne.n	80069c4 <UART_DMAError+0x3e>
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	2b21      	cmp	r3, #33	; 0x21
 80069b4:	d106      	bne.n	80069c4 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	2200      	movs	r2, #0
 80069ba:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80069be:	6978      	ldr	r0, [r7, #20]
 80069c0:	f7ff fea2 	bl	8006708 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069ce:	2b40      	cmp	r3, #64	; 0x40
 80069d0:	d109      	bne.n	80069e6 <UART_DMAError+0x60>
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2b22      	cmp	r3, #34	; 0x22
 80069d6:	d106      	bne.n	80069e6 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	2200      	movs	r2, #0
 80069dc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80069e0:	6978      	ldr	r0, [r7, #20]
 80069e2:	f7ff feb7 	bl	8006754 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069ec:	f043 0210 	orr.w	r2, r3, #16
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80069f6:	6978      	ldr	r0, [r7, #20]
 80069f8:	f7ff f8fe 	bl	8005bf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069fc:	bf00      	nop
 80069fe:	3718      	adds	r7, #24
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}

08006a04 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b084      	sub	sp, #16
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a10:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2200      	movs	r2, #0
 8006a16:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a22:	68f8      	ldr	r0, [r7, #12]
 8006a24:	f7ff f8e8 	bl	8005bf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a28:	bf00      	nop
 8006a2a:	3710      	adds	r7, #16
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}

08006a30 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b088      	sub	sp, #32
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	e853 3f00 	ldrex	r3, [r3]
 8006a44:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a4c:	61fb      	str	r3, [r7, #28]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	461a      	mov	r2, r3
 8006a54:	69fb      	ldr	r3, [r7, #28]
 8006a56:	61bb      	str	r3, [r7, #24]
 8006a58:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a5a:	6979      	ldr	r1, [r7, #20]
 8006a5c:	69ba      	ldr	r2, [r7, #24]
 8006a5e:	e841 2300 	strex	r3, r2, [r1]
 8006a62:	613b      	str	r3, [r7, #16]
   return(result);
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d1e6      	bne.n	8006a38 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2220      	movs	r2, #32
 8006a6e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2200      	movs	r2, #0
 8006a74:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f7ff f8aa 	bl	8005bd0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a7c:	bf00      	nop
 8006a7e:	3720      	adds	r7, #32
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b09c      	sub	sp, #112	; 0x70
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006a92:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a9c:	2b22      	cmp	r3, #34	; 0x22
 8006a9e:	f040 80be 	bne.w	8006c1e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006aa8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006aac:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006ab0:	b2d9      	uxtb	r1, r3
 8006ab2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006ab6:	b2da      	uxtb	r2, r3
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006abc:	400a      	ands	r2, r1
 8006abe:	b2d2      	uxtb	r2, r2
 8006ac0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ac6:	1c5a      	adds	r2, r3, #1
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006ad2:	b29b      	uxth	r3, r3
 8006ad4:	3b01      	subs	r3, #1
 8006ad6:	b29a      	uxth	r2, r3
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	f040 80a3 	bne.w	8006c32 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006af4:	e853 3f00 	ldrex	r3, [r3]
 8006af8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006afa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006afc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b00:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	461a      	mov	r2, r3
 8006b08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006b0a:	65bb      	str	r3, [r7, #88]	; 0x58
 8006b0c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b0e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006b10:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006b12:	e841 2300 	strex	r3, r2, [r1]
 8006b16:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006b18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d1e6      	bne.n	8006aec <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	3308      	adds	r3, #8
 8006b24:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b28:	e853 3f00 	ldrex	r3, [r3]
 8006b2c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b30:	f023 0301 	bic.w	r3, r3, #1
 8006b34:	667b      	str	r3, [r7, #100]	; 0x64
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	3308      	adds	r3, #8
 8006b3c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006b3e:	647a      	str	r2, [r7, #68]	; 0x44
 8006b40:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b42:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006b44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b46:	e841 2300 	strex	r3, r2, [r1]
 8006b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006b4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d1e5      	bne.n	8006b1e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2220      	movs	r2, #32
 8006b56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2200      	movs	r2, #0
 8006b64:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a34      	ldr	r2, [pc, #208]	; (8006c3c <UART_RxISR_8BIT+0x1b8>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d01f      	beq.n	8006bb0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d018      	beq.n	8006bb0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b86:	e853 3f00 	ldrex	r3, [r3]
 8006b8a:	623b      	str	r3, [r7, #32]
   return(result);
 8006b8c:	6a3b      	ldr	r3, [r7, #32]
 8006b8e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006b92:	663b      	str	r3, [r7, #96]	; 0x60
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	461a      	mov	r2, r3
 8006b9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b9c:	633b      	str	r3, [r7, #48]	; 0x30
 8006b9e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ba2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ba4:	e841 2300 	strex	r3, r2, [r1]
 8006ba8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d1e6      	bne.n	8006b7e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d12e      	bne.n	8006c16 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	e853 3f00 	ldrex	r3, [r3]
 8006bca:	60fb      	str	r3, [r7, #12]
   return(result);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f023 0310 	bic.w	r3, r3, #16
 8006bd2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	461a      	mov	r2, r3
 8006bda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006bdc:	61fb      	str	r3, [r7, #28]
 8006bde:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be0:	69b9      	ldr	r1, [r7, #24]
 8006be2:	69fa      	ldr	r2, [r7, #28]
 8006be4:	e841 2300 	strex	r3, r2, [r1]
 8006be8:	617b      	str	r3, [r7, #20]
   return(result);
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d1e6      	bne.n	8006bbe <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	69db      	ldr	r3, [r3, #28]
 8006bf6:	f003 0310 	and.w	r3, r3, #16
 8006bfa:	2b10      	cmp	r3, #16
 8006bfc:	d103      	bne.n	8006c06 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	2210      	movs	r2, #16
 8006c04:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006c0c:	4619      	mov	r1, r3
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f7fe fffc 	bl	8005c0c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006c14:	e00d      	b.n	8006c32 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f7fa ff42 	bl	8001aa0 <HAL_UART_RxCpltCallback>
}
 8006c1c:	e009      	b.n	8006c32 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	8b1b      	ldrh	r3, [r3, #24]
 8006c24:	b29a      	uxth	r2, r3
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f042 0208 	orr.w	r2, r2, #8
 8006c2e:	b292      	uxth	r2, r2
 8006c30:	831a      	strh	r2, [r3, #24]
}
 8006c32:	bf00      	nop
 8006c34:	3770      	adds	r7, #112	; 0x70
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}
 8006c3a:	bf00      	nop
 8006c3c:	40008000 	.word	0x40008000

08006c40 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b09c      	sub	sp, #112	; 0x70
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006c4e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c58:	2b22      	cmp	r3, #34	; 0x22
 8006c5a:	f040 80be 	bne.w	8006dda <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006c64:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c6c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006c6e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8006c72:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006c76:	4013      	ands	r3, r2
 8006c78:	b29a      	uxth	r2, r3
 8006c7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006c7c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c82:	1c9a      	adds	r2, r3, #2
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	3b01      	subs	r3, #1
 8006c92:	b29a      	uxth	r2, r3
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	f040 80a3 	bne.w	8006dee <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cb0:	e853 3f00 	ldrex	r3, [r3]
 8006cb4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006cb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cb8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006cbc:	667b      	str	r3, [r7, #100]	; 0x64
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006cc6:	657b      	str	r3, [r7, #84]	; 0x54
 8006cc8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006ccc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006cce:	e841 2300 	strex	r3, r2, [r1]
 8006cd2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006cd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d1e6      	bne.n	8006ca8 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	3308      	adds	r3, #8
 8006ce0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ce4:	e853 3f00 	ldrex	r3, [r3]
 8006ce8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cec:	f023 0301 	bic.w	r3, r3, #1
 8006cf0:	663b      	str	r3, [r7, #96]	; 0x60
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	3308      	adds	r3, #8
 8006cf8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006cfa:	643a      	str	r2, [r7, #64]	; 0x40
 8006cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cfe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006d00:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006d02:	e841 2300 	strex	r3, r2, [r1]
 8006d06:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d1e5      	bne.n	8006cda <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2220      	movs	r2, #32
 8006d12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a34      	ldr	r2, [pc, #208]	; (8006df8 <UART_RxISR_16BIT+0x1b8>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d01f      	beq.n	8006d6c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d018      	beq.n	8006d6c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d40:	6a3b      	ldr	r3, [r7, #32]
 8006d42:	e853 3f00 	ldrex	r3, [r3]
 8006d46:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d48:	69fb      	ldr	r3, [r7, #28]
 8006d4a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006d4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	461a      	mov	r2, r3
 8006d56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d5a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d60:	e841 2300 	strex	r3, r2, [r1]
 8006d64:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d1e6      	bne.n	8006d3a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	d12e      	bne.n	8006dd2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	e853 3f00 	ldrex	r3, [r3]
 8006d86:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	f023 0310 	bic.w	r3, r3, #16
 8006d8e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	461a      	mov	r2, r3
 8006d96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006d98:	61bb      	str	r3, [r7, #24]
 8006d9a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d9c:	6979      	ldr	r1, [r7, #20]
 8006d9e:	69ba      	ldr	r2, [r7, #24]
 8006da0:	e841 2300 	strex	r3, r2, [r1]
 8006da4:	613b      	str	r3, [r7, #16]
   return(result);
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d1e6      	bne.n	8006d7a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	69db      	ldr	r3, [r3, #28]
 8006db2:	f003 0310 	and.w	r3, r3, #16
 8006db6:	2b10      	cmp	r3, #16
 8006db8:	d103      	bne.n	8006dc2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	2210      	movs	r2, #16
 8006dc0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006dc8:	4619      	mov	r1, r3
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f7fe ff1e 	bl	8005c0c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006dd0:	e00d      	b.n	8006dee <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f7fa fe64 	bl	8001aa0 <HAL_UART_RxCpltCallback>
}
 8006dd8:	e009      	b.n	8006dee <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	8b1b      	ldrh	r3, [r3, #24]
 8006de0:	b29a      	uxth	r2, r3
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f042 0208 	orr.w	r2, r2, #8
 8006dea:	b292      	uxth	r2, r2
 8006dec:	831a      	strh	r2, [r3, #24]
}
 8006dee:	bf00      	nop
 8006df0:	3770      	adds	r7, #112	; 0x70
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	bf00      	nop
 8006df8:	40008000 	.word	0x40008000

08006dfc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b083      	sub	sp, #12
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006e04:	bf00      	nop
 8006e06:	370c      	adds	r7, #12
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr

08006e10 <__NVIC_SetPriority>:
{
 8006e10:	b480      	push	{r7}
 8006e12:	b083      	sub	sp, #12
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	4603      	mov	r3, r0
 8006e18:	6039      	str	r1, [r7, #0]
 8006e1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	db0a      	blt.n	8006e3a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	b2da      	uxtb	r2, r3
 8006e28:	490c      	ldr	r1, [pc, #48]	; (8006e5c <__NVIC_SetPriority+0x4c>)
 8006e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e2e:	0112      	lsls	r2, r2, #4
 8006e30:	b2d2      	uxtb	r2, r2
 8006e32:	440b      	add	r3, r1
 8006e34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006e38:	e00a      	b.n	8006e50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	b2da      	uxtb	r2, r3
 8006e3e:	4908      	ldr	r1, [pc, #32]	; (8006e60 <__NVIC_SetPriority+0x50>)
 8006e40:	79fb      	ldrb	r3, [r7, #7]
 8006e42:	f003 030f 	and.w	r3, r3, #15
 8006e46:	3b04      	subs	r3, #4
 8006e48:	0112      	lsls	r2, r2, #4
 8006e4a:	b2d2      	uxtb	r2, r2
 8006e4c:	440b      	add	r3, r1
 8006e4e:	761a      	strb	r2, [r3, #24]
}
 8006e50:	bf00      	nop
 8006e52:	370c      	adds	r7, #12
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr
 8006e5c:	e000e100 	.word	0xe000e100
 8006e60:	e000ed00 	.word	0xe000ed00

08006e64 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006e64:	b580      	push	{r7, lr}
 8006e66:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006e68:	4b05      	ldr	r3, [pc, #20]	; (8006e80 <SysTick_Handler+0x1c>)
 8006e6a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006e6c:	f001 feee 	bl	8008c4c <xTaskGetSchedulerState>
 8006e70:	4603      	mov	r3, r0
 8006e72:	2b01      	cmp	r3, #1
 8006e74:	d001      	beq.n	8006e7a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006e76:	f002 fcd7 	bl	8009828 <xPortSysTickHandler>
  }
}
 8006e7a:	bf00      	nop
 8006e7c:	bd80      	pop	{r7, pc}
 8006e7e:	bf00      	nop
 8006e80:	e000e010 	.word	0xe000e010

08006e84 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006e84:	b580      	push	{r7, lr}
 8006e86:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006e88:	2100      	movs	r1, #0
 8006e8a:	f06f 0004 	mvn.w	r0, #4
 8006e8e:	f7ff ffbf 	bl	8006e10 <__NVIC_SetPriority>
#endif
}
 8006e92:	bf00      	nop
 8006e94:	bd80      	pop	{r7, pc}
	...

08006e98 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006e98:	b480      	push	{r7}
 8006e9a:	b083      	sub	sp, #12
 8006e9c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e9e:	f3ef 8305 	mrs	r3, IPSR
 8006ea2:	603b      	str	r3, [r7, #0]
  return(result);
 8006ea4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d003      	beq.n	8006eb2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006eaa:	f06f 0305 	mvn.w	r3, #5
 8006eae:	607b      	str	r3, [r7, #4]
 8006eb0:	e00c      	b.n	8006ecc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006eb2:	4b0a      	ldr	r3, [pc, #40]	; (8006edc <osKernelInitialize+0x44>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d105      	bne.n	8006ec6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006eba:	4b08      	ldr	r3, [pc, #32]	; (8006edc <osKernelInitialize+0x44>)
 8006ebc:	2201      	movs	r2, #1
 8006ebe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	607b      	str	r3, [r7, #4]
 8006ec4:	e002      	b.n	8006ecc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006ec6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006eca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006ecc:	687b      	ldr	r3, [r7, #4]
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	370c      	adds	r7, #12
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed8:	4770      	bx	lr
 8006eda:	bf00      	nop
 8006edc:	200004b0 	.word	0x200004b0

08006ee0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b082      	sub	sp, #8
 8006ee4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ee6:	f3ef 8305 	mrs	r3, IPSR
 8006eea:	603b      	str	r3, [r7, #0]
  return(result);
 8006eec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d003      	beq.n	8006efa <osKernelStart+0x1a>
    stat = osErrorISR;
 8006ef2:	f06f 0305 	mvn.w	r3, #5
 8006ef6:	607b      	str	r3, [r7, #4]
 8006ef8:	e010      	b.n	8006f1c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006efa:	4b0b      	ldr	r3, [pc, #44]	; (8006f28 <osKernelStart+0x48>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d109      	bne.n	8006f16 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006f02:	f7ff ffbf 	bl	8006e84 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006f06:	4b08      	ldr	r3, [pc, #32]	; (8006f28 <osKernelStart+0x48>)
 8006f08:	2202      	movs	r2, #2
 8006f0a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006f0c:	f001 fa42 	bl	8008394 <vTaskStartScheduler>
      stat = osOK;
 8006f10:	2300      	movs	r3, #0
 8006f12:	607b      	str	r3, [r7, #4]
 8006f14:	e002      	b.n	8006f1c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006f16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006f1a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006f1c:	687b      	ldr	r3, [r7, #4]
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3708      	adds	r7, #8
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	bf00      	nop
 8006f28:	200004b0 	.word	0x200004b0

08006f2c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b08e      	sub	sp, #56	; 0x38
 8006f30:	af04      	add	r7, sp, #16
 8006f32:	60f8      	str	r0, [r7, #12]
 8006f34:	60b9      	str	r1, [r7, #8]
 8006f36:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f3c:	f3ef 8305 	mrs	r3, IPSR
 8006f40:	617b      	str	r3, [r7, #20]
  return(result);
 8006f42:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d17e      	bne.n	8007046 <osThreadNew+0x11a>
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d07b      	beq.n	8007046 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006f4e:	2380      	movs	r3, #128	; 0x80
 8006f50:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006f52:	2318      	movs	r3, #24
 8006f54:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006f56:	2300      	movs	r3, #0
 8006f58:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006f5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006f5e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d045      	beq.n	8006ff2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d002      	beq.n	8006f74 <osThreadNew+0x48>
        name = attr->name;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	699b      	ldr	r3, [r3, #24]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d002      	beq.n	8006f82 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	699b      	ldr	r3, [r3, #24]
 8006f80:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006f82:	69fb      	ldr	r3, [r7, #28]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d008      	beq.n	8006f9a <osThreadNew+0x6e>
 8006f88:	69fb      	ldr	r3, [r7, #28]
 8006f8a:	2b38      	cmp	r3, #56	; 0x38
 8006f8c:	d805      	bhi.n	8006f9a <osThreadNew+0x6e>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	f003 0301 	and.w	r3, r3, #1
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d001      	beq.n	8006f9e <osThreadNew+0x72>
        return (NULL);
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	e054      	b.n	8007048 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	695b      	ldr	r3, [r3, #20]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d003      	beq.n	8006fae <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	695b      	ldr	r3, [r3, #20]
 8006faa:	089b      	lsrs	r3, r3, #2
 8006fac:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d00e      	beq.n	8006fd4 <osThreadNew+0xa8>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	68db      	ldr	r3, [r3, #12]
 8006fba:	2ba7      	cmp	r3, #167	; 0xa7
 8006fbc:	d90a      	bls.n	8006fd4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d006      	beq.n	8006fd4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	695b      	ldr	r3, [r3, #20]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d002      	beq.n	8006fd4 <osThreadNew+0xa8>
        mem = 1;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	61bb      	str	r3, [r7, #24]
 8006fd2:	e010      	b.n	8006ff6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d10c      	bne.n	8006ff6 <osThreadNew+0xca>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	68db      	ldr	r3, [r3, #12]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d108      	bne.n	8006ff6 <osThreadNew+0xca>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	691b      	ldr	r3, [r3, #16]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d104      	bne.n	8006ff6 <osThreadNew+0xca>
          mem = 0;
 8006fec:	2300      	movs	r3, #0
 8006fee:	61bb      	str	r3, [r7, #24]
 8006ff0:	e001      	b.n	8006ff6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006ff6:	69bb      	ldr	r3, [r7, #24]
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d110      	bne.n	800701e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007000:	687a      	ldr	r2, [r7, #4]
 8007002:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007004:	9202      	str	r2, [sp, #8]
 8007006:	9301      	str	r3, [sp, #4]
 8007008:	69fb      	ldr	r3, [r7, #28]
 800700a:	9300      	str	r3, [sp, #0]
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	6a3a      	ldr	r2, [r7, #32]
 8007010:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007012:	68f8      	ldr	r0, [r7, #12]
 8007014:	f000 feb8 	bl	8007d88 <xTaskCreateStatic>
 8007018:	4603      	mov	r3, r0
 800701a:	613b      	str	r3, [r7, #16]
 800701c:	e013      	b.n	8007046 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800701e:	69bb      	ldr	r3, [r7, #24]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d110      	bne.n	8007046 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007024:	6a3b      	ldr	r3, [r7, #32]
 8007026:	b29a      	uxth	r2, r3
 8007028:	f107 0310 	add.w	r3, r7, #16
 800702c:	9301      	str	r3, [sp, #4]
 800702e:	69fb      	ldr	r3, [r7, #28]
 8007030:	9300      	str	r3, [sp, #0]
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007036:	68f8      	ldr	r0, [r7, #12]
 8007038:	f000 ff03 	bl	8007e42 <xTaskCreate>
 800703c:	4603      	mov	r3, r0
 800703e:	2b01      	cmp	r3, #1
 8007040:	d001      	beq.n	8007046 <osThreadNew+0x11a>
            hTask = NULL;
 8007042:	2300      	movs	r3, #0
 8007044:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007046:	693b      	ldr	r3, [r7, #16]
}
 8007048:	4618      	mov	r0, r3
 800704a:	3728      	adds	r7, #40	; 0x28
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}

08007050 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007050:	b580      	push	{r7, lr}
 8007052:	b084      	sub	sp, #16
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007058:	f3ef 8305 	mrs	r3, IPSR
 800705c:	60bb      	str	r3, [r7, #8]
  return(result);
 800705e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007060:	2b00      	cmp	r3, #0
 8007062:	d003      	beq.n	800706c <osDelay+0x1c>
    stat = osErrorISR;
 8007064:	f06f 0305 	mvn.w	r3, #5
 8007068:	60fb      	str	r3, [r7, #12]
 800706a:	e007      	b.n	800707c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800706c:	2300      	movs	r3, #0
 800706e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d002      	beq.n	800707c <osDelay+0x2c>
      vTaskDelay(ticks);
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f001 f83e 	bl	80080f8 <vTaskDelay>
    }
  }

  return (stat);
 800707c:	68fb      	ldr	r3, [r7, #12]
}
 800707e:	4618      	mov	r0, r3
 8007080:	3710      	adds	r7, #16
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}

08007086 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007086:	b580      	push	{r7, lr}
 8007088:	b08a      	sub	sp, #40	; 0x28
 800708a:	af02      	add	r7, sp, #8
 800708c:	60f8      	str	r0, [r7, #12]
 800708e:	60b9      	str	r1, [r7, #8]
 8007090:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8007092:	2300      	movs	r3, #0
 8007094:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007096:	f3ef 8305 	mrs	r3, IPSR
 800709a:	613b      	str	r3, [r7, #16]
  return(result);
 800709c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d15f      	bne.n	8007162 <osMessageQueueNew+0xdc>
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d05c      	beq.n	8007162 <osMessageQueueNew+0xdc>
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d059      	beq.n	8007162 <osMessageQueueNew+0xdc>
    mem = -1;
 80070ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80070b2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d029      	beq.n	800710e <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	689b      	ldr	r3, [r3, #8]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d012      	beq.n	80070e8 <osMessageQueueNew+0x62>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	68db      	ldr	r3, [r3, #12]
 80070c6:	2b4f      	cmp	r3, #79	; 0x4f
 80070c8:	d90e      	bls.n	80070e8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d00a      	beq.n	80070e8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	695a      	ldr	r2, [r3, #20]
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	68b9      	ldr	r1, [r7, #8]
 80070da:	fb01 f303 	mul.w	r3, r1, r3
 80070de:	429a      	cmp	r2, r3
 80070e0:	d302      	bcc.n	80070e8 <osMessageQueueNew+0x62>
        mem = 1;
 80070e2:	2301      	movs	r3, #1
 80070e4:	61bb      	str	r3, [r7, #24]
 80070e6:	e014      	b.n	8007112 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	689b      	ldr	r3, [r3, #8]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d110      	bne.n	8007112 <osMessageQueueNew+0x8c>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	68db      	ldr	r3, [r3, #12]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d10c      	bne.n	8007112 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d108      	bne.n	8007112 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	695b      	ldr	r3, [r3, #20]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d104      	bne.n	8007112 <osMessageQueueNew+0x8c>
          mem = 0;
 8007108:	2300      	movs	r3, #0
 800710a:	61bb      	str	r3, [r7, #24]
 800710c:	e001      	b.n	8007112 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800710e:	2300      	movs	r3, #0
 8007110:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007112:	69bb      	ldr	r3, [r7, #24]
 8007114:	2b01      	cmp	r3, #1
 8007116:	d10b      	bne.n	8007130 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	691a      	ldr	r2, [r3, #16]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	689b      	ldr	r3, [r3, #8]
 8007120:	2100      	movs	r1, #0
 8007122:	9100      	str	r1, [sp, #0]
 8007124:	68b9      	ldr	r1, [r7, #8]
 8007126:	68f8      	ldr	r0, [r7, #12]
 8007128:	f000 f970 	bl	800740c <xQueueGenericCreateStatic>
 800712c:	61f8      	str	r0, [r7, #28]
 800712e:	e008      	b.n	8007142 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8007130:	69bb      	ldr	r3, [r7, #24]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d105      	bne.n	8007142 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8007136:	2200      	movs	r2, #0
 8007138:	68b9      	ldr	r1, [r7, #8]
 800713a:	68f8      	ldr	r0, [r7, #12]
 800713c:	f000 f9de 	bl	80074fc <xQueueGenericCreate>
 8007140:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8007142:	69fb      	ldr	r3, [r7, #28]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d00c      	beq.n	8007162 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d003      	beq.n	8007156 <osMessageQueueNew+0xd0>
        name = attr->name;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	617b      	str	r3, [r7, #20]
 8007154:	e001      	b.n	800715a <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8007156:	2300      	movs	r3, #0
 8007158:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800715a:	6979      	ldr	r1, [r7, #20]
 800715c:	69f8      	ldr	r0, [r7, #28]
 800715e:	f000 fdb5 	bl	8007ccc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8007162:	69fb      	ldr	r3, [r7, #28]
}
 8007164:	4618      	mov	r0, r3
 8007166:	3720      	adds	r7, #32
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}

0800716c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800716c:	b480      	push	{r7}
 800716e:	b085      	sub	sp, #20
 8007170:	af00      	add	r7, sp, #0
 8007172:	60f8      	str	r0, [r7, #12]
 8007174:	60b9      	str	r1, [r7, #8]
 8007176:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	4a07      	ldr	r2, [pc, #28]	; (8007198 <vApplicationGetIdleTaskMemory+0x2c>)
 800717c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	4a06      	ldr	r2, [pc, #24]	; (800719c <vApplicationGetIdleTaskMemory+0x30>)
 8007182:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2280      	movs	r2, #128	; 0x80
 8007188:	601a      	str	r2, [r3, #0]
}
 800718a:	bf00      	nop
 800718c:	3714      	adds	r7, #20
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr
 8007196:	bf00      	nop
 8007198:	200004b4 	.word	0x200004b4
 800719c:	2000055c 	.word	0x2000055c

080071a0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80071a0:	b480      	push	{r7}
 80071a2:	b085      	sub	sp, #20
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	60f8      	str	r0, [r7, #12]
 80071a8:	60b9      	str	r1, [r7, #8]
 80071aa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	4a07      	ldr	r2, [pc, #28]	; (80071cc <vApplicationGetTimerTaskMemory+0x2c>)
 80071b0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	4a06      	ldr	r2, [pc, #24]	; (80071d0 <vApplicationGetTimerTaskMemory+0x30>)
 80071b6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80071be:	601a      	str	r2, [r3, #0]
}
 80071c0:	bf00      	nop
 80071c2:	3714      	adds	r7, #20
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr
 80071cc:	2000075c 	.word	0x2000075c
 80071d0:	20000804 	.word	0x20000804

080071d4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80071d4:	b480      	push	{r7}
 80071d6:	b083      	sub	sp, #12
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f103 0208 	add.w	r2, r3, #8
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80071ec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f103 0208 	add.w	r2, r3, #8
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f103 0208 	add.w	r2, r3, #8
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2200      	movs	r2, #0
 8007206:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007208:	bf00      	nop
 800720a:	370c      	adds	r7, #12
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr

08007214 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007214:	b480      	push	{r7}
 8007216:	b083      	sub	sp, #12
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007222:	bf00      	nop
 8007224:	370c      	adds	r7, #12
 8007226:	46bd      	mov	sp, r7
 8007228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722c:	4770      	bx	lr

0800722e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800722e:	b480      	push	{r7}
 8007230:	b085      	sub	sp, #20
 8007232:	af00      	add	r7, sp, #0
 8007234:	6078      	str	r0, [r7, #4]
 8007236:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	68fa      	ldr	r2, [r7, #12]
 8007242:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	689a      	ldr	r2, [r3, #8]
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	689b      	ldr	r3, [r3, #8]
 8007250:	683a      	ldr	r2, [r7, #0]
 8007252:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	683a      	ldr	r2, [r7, #0]
 8007258:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	1c5a      	adds	r2, r3, #1
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	601a      	str	r2, [r3, #0]
}
 800726a:	bf00      	nop
 800726c:	3714      	adds	r7, #20
 800726e:	46bd      	mov	sp, r7
 8007270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007274:	4770      	bx	lr

08007276 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007276:	b480      	push	{r7}
 8007278:	b085      	sub	sp, #20
 800727a:	af00      	add	r7, sp, #0
 800727c:	6078      	str	r0, [r7, #4]
 800727e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800728c:	d103      	bne.n	8007296 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	691b      	ldr	r3, [r3, #16]
 8007292:	60fb      	str	r3, [r7, #12]
 8007294:	e00c      	b.n	80072b0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	3308      	adds	r3, #8
 800729a:	60fb      	str	r3, [r7, #12]
 800729c:	e002      	b.n	80072a4 <vListInsert+0x2e>
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	60fb      	str	r3, [r7, #12]
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	68ba      	ldr	r2, [r7, #8]
 80072ac:	429a      	cmp	r2, r3
 80072ae:	d2f6      	bcs.n	800729e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	685a      	ldr	r2, [r3, #4]
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	683a      	ldr	r2, [r7, #0]
 80072be:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	68fa      	ldr	r2, [r7, #12]
 80072c4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	683a      	ldr	r2, [r7, #0]
 80072ca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	687a      	ldr	r2, [r7, #4]
 80072d0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	1c5a      	adds	r2, r3, #1
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	601a      	str	r2, [r3, #0]
}
 80072dc:	bf00      	nop
 80072de:	3714      	adds	r7, #20
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr

080072e8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80072e8:	b480      	push	{r7}
 80072ea:	b085      	sub	sp, #20
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	691b      	ldr	r3, [r3, #16]
 80072f4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	687a      	ldr	r2, [r7, #4]
 80072fc:	6892      	ldr	r2, [r2, #8]
 80072fe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	689b      	ldr	r3, [r3, #8]
 8007304:	687a      	ldr	r2, [r7, #4]
 8007306:	6852      	ldr	r2, [r2, #4]
 8007308:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	687a      	ldr	r2, [r7, #4]
 8007310:	429a      	cmp	r2, r3
 8007312:	d103      	bne.n	800731c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	689a      	ldr	r2, [r3, #8]
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2200      	movs	r2, #0
 8007320:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	1e5a      	subs	r2, r3, #1
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
}
 8007330:	4618      	mov	r0, r3
 8007332:	3714      	adds	r7, #20
 8007334:	46bd      	mov	sp, r7
 8007336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733a:	4770      	bx	lr

0800733c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b084      	sub	sp, #16
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
 8007344:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d10a      	bne.n	8007366 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007354:	f383 8811 	msr	BASEPRI, r3
 8007358:	f3bf 8f6f 	isb	sy
 800735c:	f3bf 8f4f 	dsb	sy
 8007360:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007362:	bf00      	nop
 8007364:	e7fe      	b.n	8007364 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007366:	f002 f9cd 	bl	8009704 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681a      	ldr	r2, [r3, #0]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007372:	68f9      	ldr	r1, [r7, #12]
 8007374:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007376:	fb01 f303 	mul.w	r3, r1, r3
 800737a:	441a      	add	r2, r3
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2200      	movs	r2, #0
 8007384:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681a      	ldr	r2, [r3, #0]
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007396:	3b01      	subs	r3, #1
 8007398:	68f9      	ldr	r1, [r7, #12]
 800739a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800739c:	fb01 f303 	mul.w	r3, r1, r3
 80073a0:	441a      	add	r2, r3
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	22ff      	movs	r2, #255	; 0xff
 80073aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	22ff      	movs	r2, #255	; 0xff
 80073b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d114      	bne.n	80073e6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	691b      	ldr	r3, [r3, #16]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d01a      	beq.n	80073fa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	3310      	adds	r3, #16
 80073c8:	4618      	mov	r0, r3
 80073ca:	f001 fa7d 	bl	80088c8 <xTaskRemoveFromEventList>
 80073ce:	4603      	mov	r3, r0
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d012      	beq.n	80073fa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80073d4:	4b0c      	ldr	r3, [pc, #48]	; (8007408 <xQueueGenericReset+0xcc>)
 80073d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073da:	601a      	str	r2, [r3, #0]
 80073dc:	f3bf 8f4f 	dsb	sy
 80073e0:	f3bf 8f6f 	isb	sy
 80073e4:	e009      	b.n	80073fa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	3310      	adds	r3, #16
 80073ea:	4618      	mov	r0, r3
 80073ec:	f7ff fef2 	bl	80071d4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	3324      	adds	r3, #36	; 0x24
 80073f4:	4618      	mov	r0, r3
 80073f6:	f7ff feed 	bl	80071d4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80073fa:	f002 f9b3 	bl	8009764 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80073fe:	2301      	movs	r3, #1
}
 8007400:	4618      	mov	r0, r3
 8007402:	3710      	adds	r7, #16
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}
 8007408:	e000ed04 	.word	0xe000ed04

0800740c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800740c:	b580      	push	{r7, lr}
 800740e:	b08e      	sub	sp, #56	; 0x38
 8007410:	af02      	add	r7, sp, #8
 8007412:	60f8      	str	r0, [r7, #12]
 8007414:	60b9      	str	r1, [r7, #8]
 8007416:	607a      	str	r2, [r7, #4]
 8007418:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d10a      	bne.n	8007436 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007424:	f383 8811 	msr	BASEPRI, r3
 8007428:	f3bf 8f6f 	isb	sy
 800742c:	f3bf 8f4f 	dsb	sy
 8007430:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007432:	bf00      	nop
 8007434:	e7fe      	b.n	8007434 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d10a      	bne.n	8007452 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800743c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007440:	f383 8811 	msr	BASEPRI, r3
 8007444:	f3bf 8f6f 	isb	sy
 8007448:	f3bf 8f4f 	dsb	sy
 800744c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800744e:	bf00      	nop
 8007450:	e7fe      	b.n	8007450 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d002      	beq.n	800745e <xQueueGenericCreateStatic+0x52>
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d001      	beq.n	8007462 <xQueueGenericCreateStatic+0x56>
 800745e:	2301      	movs	r3, #1
 8007460:	e000      	b.n	8007464 <xQueueGenericCreateStatic+0x58>
 8007462:	2300      	movs	r3, #0
 8007464:	2b00      	cmp	r3, #0
 8007466:	d10a      	bne.n	800747e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800746c:	f383 8811 	msr	BASEPRI, r3
 8007470:	f3bf 8f6f 	isb	sy
 8007474:	f3bf 8f4f 	dsb	sy
 8007478:	623b      	str	r3, [r7, #32]
}
 800747a:	bf00      	nop
 800747c:	e7fe      	b.n	800747c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d102      	bne.n	800748a <xQueueGenericCreateStatic+0x7e>
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d101      	bne.n	800748e <xQueueGenericCreateStatic+0x82>
 800748a:	2301      	movs	r3, #1
 800748c:	e000      	b.n	8007490 <xQueueGenericCreateStatic+0x84>
 800748e:	2300      	movs	r3, #0
 8007490:	2b00      	cmp	r3, #0
 8007492:	d10a      	bne.n	80074aa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007498:	f383 8811 	msr	BASEPRI, r3
 800749c:	f3bf 8f6f 	isb	sy
 80074a0:	f3bf 8f4f 	dsb	sy
 80074a4:	61fb      	str	r3, [r7, #28]
}
 80074a6:	bf00      	nop
 80074a8:	e7fe      	b.n	80074a8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80074aa:	2350      	movs	r3, #80	; 0x50
 80074ac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	2b50      	cmp	r3, #80	; 0x50
 80074b2:	d00a      	beq.n	80074ca <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80074b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b8:	f383 8811 	msr	BASEPRI, r3
 80074bc:	f3bf 8f6f 	isb	sy
 80074c0:	f3bf 8f4f 	dsb	sy
 80074c4:	61bb      	str	r3, [r7, #24]
}
 80074c6:	bf00      	nop
 80074c8:	e7fe      	b.n	80074c8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80074ca:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80074d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d00d      	beq.n	80074f2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80074d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074d8:	2201      	movs	r2, #1
 80074da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80074de:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80074e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e4:	9300      	str	r3, [sp, #0]
 80074e6:	4613      	mov	r3, r2
 80074e8:	687a      	ldr	r2, [r7, #4]
 80074ea:	68b9      	ldr	r1, [r7, #8]
 80074ec:	68f8      	ldr	r0, [r7, #12]
 80074ee:	f000 f83f 	bl	8007570 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80074f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3730      	adds	r7, #48	; 0x30
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}

080074fc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b08a      	sub	sp, #40	; 0x28
 8007500:	af02      	add	r7, sp, #8
 8007502:	60f8      	str	r0, [r7, #12]
 8007504:	60b9      	str	r1, [r7, #8]
 8007506:	4613      	mov	r3, r2
 8007508:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d10a      	bne.n	8007526 <xQueueGenericCreate+0x2a>
	__asm volatile
 8007510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007514:	f383 8811 	msr	BASEPRI, r3
 8007518:	f3bf 8f6f 	isb	sy
 800751c:	f3bf 8f4f 	dsb	sy
 8007520:	613b      	str	r3, [r7, #16]
}
 8007522:	bf00      	nop
 8007524:	e7fe      	b.n	8007524 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	68ba      	ldr	r2, [r7, #8]
 800752a:	fb02 f303 	mul.w	r3, r2, r3
 800752e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007530:	69fb      	ldr	r3, [r7, #28]
 8007532:	3350      	adds	r3, #80	; 0x50
 8007534:	4618      	mov	r0, r3
 8007536:	f002 fa07 	bl	8009948 <pvPortMalloc>
 800753a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800753c:	69bb      	ldr	r3, [r7, #24]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d011      	beq.n	8007566 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007542:	69bb      	ldr	r3, [r7, #24]
 8007544:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	3350      	adds	r3, #80	; 0x50
 800754a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800754c:	69bb      	ldr	r3, [r7, #24]
 800754e:	2200      	movs	r2, #0
 8007550:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007554:	79fa      	ldrb	r2, [r7, #7]
 8007556:	69bb      	ldr	r3, [r7, #24]
 8007558:	9300      	str	r3, [sp, #0]
 800755a:	4613      	mov	r3, r2
 800755c:	697a      	ldr	r2, [r7, #20]
 800755e:	68b9      	ldr	r1, [r7, #8]
 8007560:	68f8      	ldr	r0, [r7, #12]
 8007562:	f000 f805 	bl	8007570 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007566:	69bb      	ldr	r3, [r7, #24]
	}
 8007568:	4618      	mov	r0, r3
 800756a:	3720      	adds	r7, #32
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}

08007570 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b084      	sub	sp, #16
 8007574:	af00      	add	r7, sp, #0
 8007576:	60f8      	str	r0, [r7, #12]
 8007578:	60b9      	str	r1, [r7, #8]
 800757a:	607a      	str	r2, [r7, #4]
 800757c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d103      	bne.n	800758c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007584:	69bb      	ldr	r3, [r7, #24]
 8007586:	69ba      	ldr	r2, [r7, #24]
 8007588:	601a      	str	r2, [r3, #0]
 800758a:	e002      	b.n	8007592 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800758c:	69bb      	ldr	r3, [r7, #24]
 800758e:	687a      	ldr	r2, [r7, #4]
 8007590:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007592:	69bb      	ldr	r3, [r7, #24]
 8007594:	68fa      	ldr	r2, [r7, #12]
 8007596:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007598:	69bb      	ldr	r3, [r7, #24]
 800759a:	68ba      	ldr	r2, [r7, #8]
 800759c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800759e:	2101      	movs	r1, #1
 80075a0:	69b8      	ldr	r0, [r7, #24]
 80075a2:	f7ff fecb 	bl	800733c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80075a6:	69bb      	ldr	r3, [r7, #24]
 80075a8:	78fa      	ldrb	r2, [r7, #3]
 80075aa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80075ae:	bf00      	nop
 80075b0:	3710      	adds	r7, #16
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}
	...

080075b8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b08e      	sub	sp, #56	; 0x38
 80075bc:	af00      	add	r7, sp, #0
 80075be:	60f8      	str	r0, [r7, #12]
 80075c0:	60b9      	str	r1, [r7, #8]
 80075c2:	607a      	str	r2, [r7, #4]
 80075c4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80075c6:	2300      	movs	r3, #0
 80075c8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80075ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d10a      	bne.n	80075ea <xQueueGenericSend+0x32>
	__asm volatile
 80075d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075d8:	f383 8811 	msr	BASEPRI, r3
 80075dc:	f3bf 8f6f 	isb	sy
 80075e0:	f3bf 8f4f 	dsb	sy
 80075e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80075e6:	bf00      	nop
 80075e8:	e7fe      	b.n	80075e8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d103      	bne.n	80075f8 <xQueueGenericSend+0x40>
 80075f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d101      	bne.n	80075fc <xQueueGenericSend+0x44>
 80075f8:	2301      	movs	r3, #1
 80075fa:	e000      	b.n	80075fe <xQueueGenericSend+0x46>
 80075fc:	2300      	movs	r3, #0
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d10a      	bne.n	8007618 <xQueueGenericSend+0x60>
	__asm volatile
 8007602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007606:	f383 8811 	msr	BASEPRI, r3
 800760a:	f3bf 8f6f 	isb	sy
 800760e:	f3bf 8f4f 	dsb	sy
 8007612:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007614:	bf00      	nop
 8007616:	e7fe      	b.n	8007616 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	2b02      	cmp	r3, #2
 800761c:	d103      	bne.n	8007626 <xQueueGenericSend+0x6e>
 800761e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007622:	2b01      	cmp	r3, #1
 8007624:	d101      	bne.n	800762a <xQueueGenericSend+0x72>
 8007626:	2301      	movs	r3, #1
 8007628:	e000      	b.n	800762c <xQueueGenericSend+0x74>
 800762a:	2300      	movs	r3, #0
 800762c:	2b00      	cmp	r3, #0
 800762e:	d10a      	bne.n	8007646 <xQueueGenericSend+0x8e>
	__asm volatile
 8007630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007634:	f383 8811 	msr	BASEPRI, r3
 8007638:	f3bf 8f6f 	isb	sy
 800763c:	f3bf 8f4f 	dsb	sy
 8007640:	623b      	str	r3, [r7, #32]
}
 8007642:	bf00      	nop
 8007644:	e7fe      	b.n	8007644 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007646:	f001 fb01 	bl	8008c4c <xTaskGetSchedulerState>
 800764a:	4603      	mov	r3, r0
 800764c:	2b00      	cmp	r3, #0
 800764e:	d102      	bne.n	8007656 <xQueueGenericSend+0x9e>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d101      	bne.n	800765a <xQueueGenericSend+0xa2>
 8007656:	2301      	movs	r3, #1
 8007658:	e000      	b.n	800765c <xQueueGenericSend+0xa4>
 800765a:	2300      	movs	r3, #0
 800765c:	2b00      	cmp	r3, #0
 800765e:	d10a      	bne.n	8007676 <xQueueGenericSend+0xbe>
	__asm volatile
 8007660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007664:	f383 8811 	msr	BASEPRI, r3
 8007668:	f3bf 8f6f 	isb	sy
 800766c:	f3bf 8f4f 	dsb	sy
 8007670:	61fb      	str	r3, [r7, #28]
}
 8007672:	bf00      	nop
 8007674:	e7fe      	b.n	8007674 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007676:	f002 f845 	bl	8009704 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800767a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800767c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800767e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007682:	429a      	cmp	r2, r3
 8007684:	d302      	bcc.n	800768c <xQueueGenericSend+0xd4>
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	2b02      	cmp	r3, #2
 800768a:	d129      	bne.n	80076e0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800768c:	683a      	ldr	r2, [r7, #0]
 800768e:	68b9      	ldr	r1, [r7, #8]
 8007690:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007692:	f000 fa0b 	bl	8007aac <prvCopyDataToQueue>
 8007696:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800769a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800769c:	2b00      	cmp	r3, #0
 800769e:	d010      	beq.n	80076c2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80076a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a2:	3324      	adds	r3, #36	; 0x24
 80076a4:	4618      	mov	r0, r3
 80076a6:	f001 f90f 	bl	80088c8 <xTaskRemoveFromEventList>
 80076aa:	4603      	mov	r3, r0
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d013      	beq.n	80076d8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80076b0:	4b3f      	ldr	r3, [pc, #252]	; (80077b0 <xQueueGenericSend+0x1f8>)
 80076b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076b6:	601a      	str	r2, [r3, #0]
 80076b8:	f3bf 8f4f 	dsb	sy
 80076bc:	f3bf 8f6f 	isb	sy
 80076c0:	e00a      	b.n	80076d8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80076c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d007      	beq.n	80076d8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80076c8:	4b39      	ldr	r3, [pc, #228]	; (80077b0 <xQueueGenericSend+0x1f8>)
 80076ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076ce:	601a      	str	r2, [r3, #0]
 80076d0:	f3bf 8f4f 	dsb	sy
 80076d4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80076d8:	f002 f844 	bl	8009764 <vPortExitCritical>
				return pdPASS;
 80076dc:	2301      	movs	r3, #1
 80076de:	e063      	b.n	80077a8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d103      	bne.n	80076ee <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80076e6:	f002 f83d 	bl	8009764 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80076ea:	2300      	movs	r3, #0
 80076ec:	e05c      	b.n	80077a8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80076ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d106      	bne.n	8007702 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80076f4:	f107 0314 	add.w	r3, r7, #20
 80076f8:	4618      	mov	r0, r3
 80076fa:	f001 f949 	bl	8008990 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80076fe:	2301      	movs	r3, #1
 8007700:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007702:	f002 f82f 	bl	8009764 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007706:	f000 feb5 	bl	8008474 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800770a:	f001 fffb 	bl	8009704 <vPortEnterCritical>
 800770e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007710:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007714:	b25b      	sxtb	r3, r3
 8007716:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800771a:	d103      	bne.n	8007724 <xQueueGenericSend+0x16c>
 800771c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800771e:	2200      	movs	r2, #0
 8007720:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007726:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800772a:	b25b      	sxtb	r3, r3
 800772c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007730:	d103      	bne.n	800773a <xQueueGenericSend+0x182>
 8007732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007734:	2200      	movs	r2, #0
 8007736:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800773a:	f002 f813 	bl	8009764 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800773e:	1d3a      	adds	r2, r7, #4
 8007740:	f107 0314 	add.w	r3, r7, #20
 8007744:	4611      	mov	r1, r2
 8007746:	4618      	mov	r0, r3
 8007748:	f001 f938 	bl	80089bc <xTaskCheckForTimeOut>
 800774c:	4603      	mov	r3, r0
 800774e:	2b00      	cmp	r3, #0
 8007750:	d124      	bne.n	800779c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007752:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007754:	f000 faa2 	bl	8007c9c <prvIsQueueFull>
 8007758:	4603      	mov	r3, r0
 800775a:	2b00      	cmp	r3, #0
 800775c:	d018      	beq.n	8007790 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800775e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007760:	3310      	adds	r3, #16
 8007762:	687a      	ldr	r2, [r7, #4]
 8007764:	4611      	mov	r1, r2
 8007766:	4618      	mov	r0, r3
 8007768:	f001 f85e 	bl	8008828 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800776c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800776e:	f000 fa2d 	bl	8007bcc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007772:	f000 fe8d 	bl	8008490 <xTaskResumeAll>
 8007776:	4603      	mov	r3, r0
 8007778:	2b00      	cmp	r3, #0
 800777a:	f47f af7c 	bne.w	8007676 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800777e:	4b0c      	ldr	r3, [pc, #48]	; (80077b0 <xQueueGenericSend+0x1f8>)
 8007780:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007784:	601a      	str	r2, [r3, #0]
 8007786:	f3bf 8f4f 	dsb	sy
 800778a:	f3bf 8f6f 	isb	sy
 800778e:	e772      	b.n	8007676 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007790:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007792:	f000 fa1b 	bl	8007bcc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007796:	f000 fe7b 	bl	8008490 <xTaskResumeAll>
 800779a:	e76c      	b.n	8007676 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800779c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800779e:	f000 fa15 	bl	8007bcc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80077a2:	f000 fe75 	bl	8008490 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80077a6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3738      	adds	r7, #56	; 0x38
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}
 80077b0:	e000ed04 	.word	0xe000ed04

080077b4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b090      	sub	sp, #64	; 0x40
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	60f8      	str	r0, [r7, #12]
 80077bc:	60b9      	str	r1, [r7, #8]
 80077be:	607a      	str	r2, [r7, #4]
 80077c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80077c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d10a      	bne.n	80077e2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80077cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d0:	f383 8811 	msr	BASEPRI, r3
 80077d4:	f3bf 8f6f 	isb	sy
 80077d8:	f3bf 8f4f 	dsb	sy
 80077dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80077de:	bf00      	nop
 80077e0:	e7fe      	b.n	80077e0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d103      	bne.n	80077f0 <xQueueGenericSendFromISR+0x3c>
 80077e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d101      	bne.n	80077f4 <xQueueGenericSendFromISR+0x40>
 80077f0:	2301      	movs	r3, #1
 80077f2:	e000      	b.n	80077f6 <xQueueGenericSendFromISR+0x42>
 80077f4:	2300      	movs	r3, #0
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d10a      	bne.n	8007810 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80077fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077fe:	f383 8811 	msr	BASEPRI, r3
 8007802:	f3bf 8f6f 	isb	sy
 8007806:	f3bf 8f4f 	dsb	sy
 800780a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800780c:	bf00      	nop
 800780e:	e7fe      	b.n	800780e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	2b02      	cmp	r3, #2
 8007814:	d103      	bne.n	800781e <xQueueGenericSendFromISR+0x6a>
 8007816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800781a:	2b01      	cmp	r3, #1
 800781c:	d101      	bne.n	8007822 <xQueueGenericSendFromISR+0x6e>
 800781e:	2301      	movs	r3, #1
 8007820:	e000      	b.n	8007824 <xQueueGenericSendFromISR+0x70>
 8007822:	2300      	movs	r3, #0
 8007824:	2b00      	cmp	r3, #0
 8007826:	d10a      	bne.n	800783e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800782c:	f383 8811 	msr	BASEPRI, r3
 8007830:	f3bf 8f6f 	isb	sy
 8007834:	f3bf 8f4f 	dsb	sy
 8007838:	623b      	str	r3, [r7, #32]
}
 800783a:	bf00      	nop
 800783c:	e7fe      	b.n	800783c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800783e:	f002 f843 	bl	80098c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007842:	f3ef 8211 	mrs	r2, BASEPRI
 8007846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800784a:	f383 8811 	msr	BASEPRI, r3
 800784e:	f3bf 8f6f 	isb	sy
 8007852:	f3bf 8f4f 	dsb	sy
 8007856:	61fa      	str	r2, [r7, #28]
 8007858:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800785a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800785c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800785e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007860:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007866:	429a      	cmp	r2, r3
 8007868:	d302      	bcc.n	8007870 <xQueueGenericSendFromISR+0xbc>
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	2b02      	cmp	r3, #2
 800786e:	d12f      	bne.n	80078d0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007872:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007876:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800787a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800787c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800787e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007880:	683a      	ldr	r2, [r7, #0]
 8007882:	68b9      	ldr	r1, [r7, #8]
 8007884:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007886:	f000 f911 	bl	8007aac <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800788a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800788e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007892:	d112      	bne.n	80078ba <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007898:	2b00      	cmp	r3, #0
 800789a:	d016      	beq.n	80078ca <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800789c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800789e:	3324      	adds	r3, #36	; 0x24
 80078a0:	4618      	mov	r0, r3
 80078a2:	f001 f811 	bl	80088c8 <xTaskRemoveFromEventList>
 80078a6:	4603      	mov	r3, r0
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d00e      	beq.n	80078ca <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d00b      	beq.n	80078ca <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2201      	movs	r2, #1
 80078b6:	601a      	str	r2, [r3, #0]
 80078b8:	e007      	b.n	80078ca <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80078ba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80078be:	3301      	adds	r3, #1
 80078c0:	b2db      	uxtb	r3, r3
 80078c2:	b25a      	sxtb	r2, r3
 80078c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80078ca:	2301      	movs	r3, #1
 80078cc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80078ce:	e001      	b.n	80078d4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80078d0:	2300      	movs	r3, #0
 80078d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078d6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80078de:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80078e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3740      	adds	r7, #64	; 0x40
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}
	...

080078ec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b08c      	sub	sp, #48	; 0x30
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	60f8      	str	r0, [r7, #12]
 80078f4:	60b9      	str	r1, [r7, #8]
 80078f6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80078f8:	2300      	movs	r3, #0
 80078fa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007902:	2b00      	cmp	r3, #0
 8007904:	d10a      	bne.n	800791c <xQueueReceive+0x30>
	__asm volatile
 8007906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800790a:	f383 8811 	msr	BASEPRI, r3
 800790e:	f3bf 8f6f 	isb	sy
 8007912:	f3bf 8f4f 	dsb	sy
 8007916:	623b      	str	r3, [r7, #32]
}
 8007918:	bf00      	nop
 800791a:	e7fe      	b.n	800791a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d103      	bne.n	800792a <xQueueReceive+0x3e>
 8007922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007926:	2b00      	cmp	r3, #0
 8007928:	d101      	bne.n	800792e <xQueueReceive+0x42>
 800792a:	2301      	movs	r3, #1
 800792c:	e000      	b.n	8007930 <xQueueReceive+0x44>
 800792e:	2300      	movs	r3, #0
 8007930:	2b00      	cmp	r3, #0
 8007932:	d10a      	bne.n	800794a <xQueueReceive+0x5e>
	__asm volatile
 8007934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007938:	f383 8811 	msr	BASEPRI, r3
 800793c:	f3bf 8f6f 	isb	sy
 8007940:	f3bf 8f4f 	dsb	sy
 8007944:	61fb      	str	r3, [r7, #28]
}
 8007946:	bf00      	nop
 8007948:	e7fe      	b.n	8007948 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800794a:	f001 f97f 	bl	8008c4c <xTaskGetSchedulerState>
 800794e:	4603      	mov	r3, r0
 8007950:	2b00      	cmp	r3, #0
 8007952:	d102      	bne.n	800795a <xQueueReceive+0x6e>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d101      	bne.n	800795e <xQueueReceive+0x72>
 800795a:	2301      	movs	r3, #1
 800795c:	e000      	b.n	8007960 <xQueueReceive+0x74>
 800795e:	2300      	movs	r3, #0
 8007960:	2b00      	cmp	r3, #0
 8007962:	d10a      	bne.n	800797a <xQueueReceive+0x8e>
	__asm volatile
 8007964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007968:	f383 8811 	msr	BASEPRI, r3
 800796c:	f3bf 8f6f 	isb	sy
 8007970:	f3bf 8f4f 	dsb	sy
 8007974:	61bb      	str	r3, [r7, #24]
}
 8007976:	bf00      	nop
 8007978:	e7fe      	b.n	8007978 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800797a:	f001 fec3 	bl	8009704 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800797e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007982:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007986:	2b00      	cmp	r3, #0
 8007988:	d01f      	beq.n	80079ca <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800798a:	68b9      	ldr	r1, [r7, #8]
 800798c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800798e:	f000 f8f7 	bl	8007b80 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007994:	1e5a      	subs	r2, r3, #1
 8007996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007998:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800799a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800799c:	691b      	ldr	r3, [r3, #16]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d00f      	beq.n	80079c2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80079a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a4:	3310      	adds	r3, #16
 80079a6:	4618      	mov	r0, r3
 80079a8:	f000 ff8e 	bl	80088c8 <xTaskRemoveFromEventList>
 80079ac:	4603      	mov	r3, r0
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d007      	beq.n	80079c2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80079b2:	4b3d      	ldr	r3, [pc, #244]	; (8007aa8 <xQueueReceive+0x1bc>)
 80079b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079b8:	601a      	str	r2, [r3, #0]
 80079ba:	f3bf 8f4f 	dsb	sy
 80079be:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80079c2:	f001 fecf 	bl	8009764 <vPortExitCritical>
				return pdPASS;
 80079c6:	2301      	movs	r3, #1
 80079c8:	e069      	b.n	8007a9e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d103      	bne.n	80079d8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80079d0:	f001 fec8 	bl	8009764 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80079d4:	2300      	movs	r3, #0
 80079d6:	e062      	b.n	8007a9e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80079d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d106      	bne.n	80079ec <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80079de:	f107 0310 	add.w	r3, r7, #16
 80079e2:	4618      	mov	r0, r3
 80079e4:	f000 ffd4 	bl	8008990 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80079e8:	2301      	movs	r3, #1
 80079ea:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80079ec:	f001 feba 	bl	8009764 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80079f0:	f000 fd40 	bl	8008474 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80079f4:	f001 fe86 	bl	8009704 <vPortEnterCritical>
 80079f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80079fe:	b25b      	sxtb	r3, r3
 8007a00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a04:	d103      	bne.n	8007a0e <xQueueReceive+0x122>
 8007a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a08:	2200      	movs	r2, #0
 8007a0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a14:	b25b      	sxtb	r3, r3
 8007a16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a1a:	d103      	bne.n	8007a24 <xQueueReceive+0x138>
 8007a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a24:	f001 fe9e 	bl	8009764 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007a28:	1d3a      	adds	r2, r7, #4
 8007a2a:	f107 0310 	add.w	r3, r7, #16
 8007a2e:	4611      	mov	r1, r2
 8007a30:	4618      	mov	r0, r3
 8007a32:	f000 ffc3 	bl	80089bc <xTaskCheckForTimeOut>
 8007a36:	4603      	mov	r3, r0
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d123      	bne.n	8007a84 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007a3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a3e:	f000 f917 	bl	8007c70 <prvIsQueueEmpty>
 8007a42:	4603      	mov	r3, r0
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d017      	beq.n	8007a78 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a4a:	3324      	adds	r3, #36	; 0x24
 8007a4c:	687a      	ldr	r2, [r7, #4]
 8007a4e:	4611      	mov	r1, r2
 8007a50:	4618      	mov	r0, r3
 8007a52:	f000 fee9 	bl	8008828 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007a56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a58:	f000 f8b8 	bl	8007bcc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007a5c:	f000 fd18 	bl	8008490 <xTaskResumeAll>
 8007a60:	4603      	mov	r3, r0
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d189      	bne.n	800797a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007a66:	4b10      	ldr	r3, [pc, #64]	; (8007aa8 <xQueueReceive+0x1bc>)
 8007a68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a6c:	601a      	str	r2, [r3, #0]
 8007a6e:	f3bf 8f4f 	dsb	sy
 8007a72:	f3bf 8f6f 	isb	sy
 8007a76:	e780      	b.n	800797a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007a78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a7a:	f000 f8a7 	bl	8007bcc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007a7e:	f000 fd07 	bl	8008490 <xTaskResumeAll>
 8007a82:	e77a      	b.n	800797a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007a84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a86:	f000 f8a1 	bl	8007bcc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007a8a:	f000 fd01 	bl	8008490 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007a8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a90:	f000 f8ee 	bl	8007c70 <prvIsQueueEmpty>
 8007a94:	4603      	mov	r3, r0
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	f43f af6f 	beq.w	800797a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007a9c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3730      	adds	r7, #48	; 0x30
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}
 8007aa6:	bf00      	nop
 8007aa8:	e000ed04 	.word	0xe000ed04

08007aac <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b086      	sub	sp, #24
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	60f8      	str	r0, [r7, #12]
 8007ab4:	60b9      	str	r1, [r7, #8]
 8007ab6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ac0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d10d      	bne.n	8007ae6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d14d      	bne.n	8007b6e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	689b      	ldr	r3, [r3, #8]
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f001 f8d6 	bl	8008c88 <xTaskPriorityDisinherit>
 8007adc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	609a      	str	r2, [r3, #8]
 8007ae4:	e043      	b.n	8007b6e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d119      	bne.n	8007b20 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	6858      	ldr	r0, [r3, #4]
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007af4:	461a      	mov	r2, r3
 8007af6:	68b9      	ldr	r1, [r7, #8]
 8007af8:	f002 ff35 	bl	800a966 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	685a      	ldr	r2, [r3, #4]
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b04:	441a      	add	r2, r3
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	685a      	ldr	r2, [r3, #4]
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	689b      	ldr	r3, [r3, #8]
 8007b12:	429a      	cmp	r2, r3
 8007b14:	d32b      	bcc.n	8007b6e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681a      	ldr	r2, [r3, #0]
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	605a      	str	r2, [r3, #4]
 8007b1e:	e026      	b.n	8007b6e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	68d8      	ldr	r0, [r3, #12]
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b28:	461a      	mov	r2, r3
 8007b2a:	68b9      	ldr	r1, [r7, #8]
 8007b2c:	f002 ff1b 	bl	800a966 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	68da      	ldr	r2, [r3, #12]
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b38:	425b      	negs	r3, r3
 8007b3a:	441a      	add	r2, r3
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	68da      	ldr	r2, [r3, #12]
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	d207      	bcs.n	8007b5c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	689a      	ldr	r2, [r3, #8]
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b54:	425b      	negs	r3, r3
 8007b56:	441a      	add	r2, r3
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2b02      	cmp	r3, #2
 8007b60:	d105      	bne.n	8007b6e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d002      	beq.n	8007b6e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	3b01      	subs	r3, #1
 8007b6c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	1c5a      	adds	r2, r3, #1
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007b76:	697b      	ldr	r3, [r7, #20]
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3718      	adds	r7, #24
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}

08007b80 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b082      	sub	sp, #8
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d018      	beq.n	8007bc4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	68da      	ldr	r2, [r3, #12]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b9a:	441a      	add	r2, r3
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	68da      	ldr	r2, [r3, #12]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	689b      	ldr	r3, [r3, #8]
 8007ba8:	429a      	cmp	r2, r3
 8007baa:	d303      	bcc.n	8007bb4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681a      	ldr	r2, [r3, #0]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	68d9      	ldr	r1, [r3, #12]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bbc:	461a      	mov	r2, r3
 8007bbe:	6838      	ldr	r0, [r7, #0]
 8007bc0:	f002 fed1 	bl	800a966 <memcpy>
	}
}
 8007bc4:	bf00      	nop
 8007bc6:	3708      	adds	r7, #8
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}

08007bcc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b084      	sub	sp, #16
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007bd4:	f001 fd96 	bl	8009704 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007bde:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007be0:	e011      	b.n	8007c06 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d012      	beq.n	8007c10 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	3324      	adds	r3, #36	; 0x24
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f000 fe6a 	bl	80088c8 <xTaskRemoveFromEventList>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d001      	beq.n	8007bfe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007bfa:	f000 ff41 	bl	8008a80 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007bfe:	7bfb      	ldrb	r3, [r7, #15]
 8007c00:	3b01      	subs	r3, #1
 8007c02:	b2db      	uxtb	r3, r3
 8007c04:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007c06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	dce9      	bgt.n	8007be2 <prvUnlockQueue+0x16>
 8007c0e:	e000      	b.n	8007c12 <prvUnlockQueue+0x46>
					break;
 8007c10:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	22ff      	movs	r2, #255	; 0xff
 8007c16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007c1a:	f001 fda3 	bl	8009764 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007c1e:	f001 fd71 	bl	8009704 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c28:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007c2a:	e011      	b.n	8007c50 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	691b      	ldr	r3, [r3, #16]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d012      	beq.n	8007c5a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	3310      	adds	r3, #16
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f000 fe45 	bl	80088c8 <xTaskRemoveFromEventList>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d001      	beq.n	8007c48 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007c44:	f000 ff1c 	bl	8008a80 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007c48:	7bbb      	ldrb	r3, [r7, #14]
 8007c4a:	3b01      	subs	r3, #1
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007c50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	dce9      	bgt.n	8007c2c <prvUnlockQueue+0x60>
 8007c58:	e000      	b.n	8007c5c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007c5a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	22ff      	movs	r2, #255	; 0xff
 8007c60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007c64:	f001 fd7e 	bl	8009764 <vPortExitCritical>
}
 8007c68:	bf00      	nop
 8007c6a:	3710      	adds	r7, #16
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}

08007c70 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b084      	sub	sp, #16
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007c78:	f001 fd44 	bl	8009704 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d102      	bne.n	8007c8a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007c84:	2301      	movs	r3, #1
 8007c86:	60fb      	str	r3, [r7, #12]
 8007c88:	e001      	b.n	8007c8e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007c8e:	f001 fd69 	bl	8009764 <vPortExitCritical>

	return xReturn;
 8007c92:	68fb      	ldr	r3, [r7, #12]
}
 8007c94:	4618      	mov	r0, r3
 8007c96:	3710      	adds	r7, #16
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}

08007c9c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b084      	sub	sp, #16
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007ca4:	f001 fd2e 	bl	8009704 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cb0:	429a      	cmp	r2, r3
 8007cb2:	d102      	bne.n	8007cba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	60fb      	str	r3, [r7, #12]
 8007cb8:	e001      	b.n	8007cbe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007cbe:	f001 fd51 	bl	8009764 <vPortExitCritical>

	return xReturn;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3710      	adds	r7, #16
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007ccc:	b480      	push	{r7}
 8007cce:	b085      	sub	sp, #20
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
 8007cd4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	60fb      	str	r3, [r7, #12]
 8007cda:	e014      	b.n	8007d06 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007cdc:	4a0f      	ldr	r2, [pc, #60]	; (8007d1c <vQueueAddToRegistry+0x50>)
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d10b      	bne.n	8007d00 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007ce8:	490c      	ldr	r1, [pc, #48]	; (8007d1c <vQueueAddToRegistry+0x50>)
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	683a      	ldr	r2, [r7, #0]
 8007cee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007cf2:	4a0a      	ldr	r2, [pc, #40]	; (8007d1c <vQueueAddToRegistry+0x50>)
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	00db      	lsls	r3, r3, #3
 8007cf8:	4413      	add	r3, r2
 8007cfa:	687a      	ldr	r2, [r7, #4]
 8007cfc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007cfe:	e006      	b.n	8007d0e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	3301      	adds	r3, #1
 8007d04:	60fb      	str	r3, [r7, #12]
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	2b07      	cmp	r3, #7
 8007d0a:	d9e7      	bls.n	8007cdc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007d0c:	bf00      	nop
 8007d0e:	bf00      	nop
 8007d10:	3714      	adds	r7, #20
 8007d12:	46bd      	mov	sp, r7
 8007d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d18:	4770      	bx	lr
 8007d1a:	bf00      	nop
 8007d1c:	20000c04 	.word	0x20000c04

08007d20 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b086      	sub	sp, #24
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	60f8      	str	r0, [r7, #12]
 8007d28:	60b9      	str	r1, [r7, #8]
 8007d2a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007d30:	f001 fce8 	bl	8009704 <vPortEnterCritical>
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d3a:	b25b      	sxtb	r3, r3
 8007d3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d40:	d103      	bne.n	8007d4a <vQueueWaitForMessageRestricted+0x2a>
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	2200      	movs	r2, #0
 8007d46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d50:	b25b      	sxtb	r3, r3
 8007d52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d56:	d103      	bne.n	8007d60 <vQueueWaitForMessageRestricted+0x40>
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d60:	f001 fd00 	bl	8009764 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d106      	bne.n	8007d7a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	3324      	adds	r3, #36	; 0x24
 8007d70:	687a      	ldr	r2, [r7, #4]
 8007d72:	68b9      	ldr	r1, [r7, #8]
 8007d74:	4618      	mov	r0, r3
 8007d76:	f000 fd7b 	bl	8008870 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007d7a:	6978      	ldr	r0, [r7, #20]
 8007d7c:	f7ff ff26 	bl	8007bcc <prvUnlockQueue>
	}
 8007d80:	bf00      	nop
 8007d82:	3718      	adds	r7, #24
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}

08007d88 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b08e      	sub	sp, #56	; 0x38
 8007d8c:	af04      	add	r7, sp, #16
 8007d8e:	60f8      	str	r0, [r7, #12]
 8007d90:	60b9      	str	r1, [r7, #8]
 8007d92:	607a      	str	r2, [r7, #4]
 8007d94:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d10a      	bne.n	8007db2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8007d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da0:	f383 8811 	msr	BASEPRI, r3
 8007da4:	f3bf 8f6f 	isb	sy
 8007da8:	f3bf 8f4f 	dsb	sy
 8007dac:	623b      	str	r3, [r7, #32]
}
 8007dae:	bf00      	nop
 8007db0:	e7fe      	b.n	8007db0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d10a      	bne.n	8007dce <xTaskCreateStatic+0x46>
	__asm volatile
 8007db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dbc:	f383 8811 	msr	BASEPRI, r3
 8007dc0:	f3bf 8f6f 	isb	sy
 8007dc4:	f3bf 8f4f 	dsb	sy
 8007dc8:	61fb      	str	r3, [r7, #28]
}
 8007dca:	bf00      	nop
 8007dcc:	e7fe      	b.n	8007dcc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007dce:	23a8      	movs	r3, #168	; 0xa8
 8007dd0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	2ba8      	cmp	r3, #168	; 0xa8
 8007dd6:	d00a      	beq.n	8007dee <xTaskCreateStatic+0x66>
	__asm volatile
 8007dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ddc:	f383 8811 	msr	BASEPRI, r3
 8007de0:	f3bf 8f6f 	isb	sy
 8007de4:	f3bf 8f4f 	dsb	sy
 8007de8:	61bb      	str	r3, [r7, #24]
}
 8007dea:	bf00      	nop
 8007dec:	e7fe      	b.n	8007dec <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007dee:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d01e      	beq.n	8007e34 <xTaskCreateStatic+0xac>
 8007df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d01b      	beq.n	8007e34 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dfe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e04:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e08:	2202      	movs	r2, #2
 8007e0a:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007e0e:	2300      	movs	r3, #0
 8007e10:	9303      	str	r3, [sp, #12]
 8007e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e14:	9302      	str	r3, [sp, #8]
 8007e16:	f107 0314 	add.w	r3, r7, #20
 8007e1a:	9301      	str	r3, [sp, #4]
 8007e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e1e:	9300      	str	r3, [sp, #0]
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	687a      	ldr	r2, [r7, #4]
 8007e24:	68b9      	ldr	r1, [r7, #8]
 8007e26:	68f8      	ldr	r0, [r7, #12]
 8007e28:	f000 f850 	bl	8007ecc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007e2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007e2e:	f000 f8f3 	bl	8008018 <prvAddNewTaskToReadyList>
 8007e32:	e001      	b.n	8007e38 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007e34:	2300      	movs	r3, #0
 8007e36:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007e38:	697b      	ldr	r3, [r7, #20]
	}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3728      	adds	r7, #40	; 0x28
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}

08007e42 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007e42:	b580      	push	{r7, lr}
 8007e44:	b08c      	sub	sp, #48	; 0x30
 8007e46:	af04      	add	r7, sp, #16
 8007e48:	60f8      	str	r0, [r7, #12]
 8007e4a:	60b9      	str	r1, [r7, #8]
 8007e4c:	603b      	str	r3, [r7, #0]
 8007e4e:	4613      	mov	r3, r2
 8007e50:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007e52:	88fb      	ldrh	r3, [r7, #6]
 8007e54:	009b      	lsls	r3, r3, #2
 8007e56:	4618      	mov	r0, r3
 8007e58:	f001 fd76 	bl	8009948 <pvPortMalloc>
 8007e5c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d00e      	beq.n	8007e82 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007e64:	20a8      	movs	r0, #168	; 0xa8
 8007e66:	f001 fd6f 	bl	8009948 <pvPortMalloc>
 8007e6a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007e6c:	69fb      	ldr	r3, [r7, #28]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d003      	beq.n	8007e7a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007e72:	69fb      	ldr	r3, [r7, #28]
 8007e74:	697a      	ldr	r2, [r7, #20]
 8007e76:	631a      	str	r2, [r3, #48]	; 0x30
 8007e78:	e005      	b.n	8007e86 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007e7a:	6978      	ldr	r0, [r7, #20]
 8007e7c:	f001 fe30 	bl	8009ae0 <vPortFree>
 8007e80:	e001      	b.n	8007e86 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007e82:	2300      	movs	r3, #0
 8007e84:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007e86:	69fb      	ldr	r3, [r7, #28]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d017      	beq.n	8007ebc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007e8c:	69fb      	ldr	r3, [r7, #28]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007e94:	88fa      	ldrh	r2, [r7, #6]
 8007e96:	2300      	movs	r3, #0
 8007e98:	9303      	str	r3, [sp, #12]
 8007e9a:	69fb      	ldr	r3, [r7, #28]
 8007e9c:	9302      	str	r3, [sp, #8]
 8007e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ea0:	9301      	str	r3, [sp, #4]
 8007ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea4:	9300      	str	r3, [sp, #0]
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	68b9      	ldr	r1, [r7, #8]
 8007eaa:	68f8      	ldr	r0, [r7, #12]
 8007eac:	f000 f80e 	bl	8007ecc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007eb0:	69f8      	ldr	r0, [r7, #28]
 8007eb2:	f000 f8b1 	bl	8008018 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	61bb      	str	r3, [r7, #24]
 8007eba:	e002      	b.n	8007ec2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007ebc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007ec0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007ec2:	69bb      	ldr	r3, [r7, #24]
	}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3720      	adds	r7, #32
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}

08007ecc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b088      	sub	sp, #32
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	60f8      	str	r0, [r7, #12]
 8007ed4:	60b9      	str	r1, [r7, #8]
 8007ed6:	607a      	str	r2, [r7, #4]
 8007ed8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007edc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	009b      	lsls	r3, r3, #2
 8007ee2:	461a      	mov	r2, r3
 8007ee4:	21a5      	movs	r1, #165	; 0xa5
 8007ee6:	f002 fcaf 	bl	800a848 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007ef4:	3b01      	subs	r3, #1
 8007ef6:	009b      	lsls	r3, r3, #2
 8007ef8:	4413      	add	r3, r2
 8007efa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007efc:	69bb      	ldr	r3, [r7, #24]
 8007efe:	f023 0307 	bic.w	r3, r3, #7
 8007f02:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007f04:	69bb      	ldr	r3, [r7, #24]
 8007f06:	f003 0307 	and.w	r3, r3, #7
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d00a      	beq.n	8007f24 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f12:	f383 8811 	msr	BASEPRI, r3
 8007f16:	f3bf 8f6f 	isb	sy
 8007f1a:	f3bf 8f4f 	dsb	sy
 8007f1e:	617b      	str	r3, [r7, #20]
}
 8007f20:	bf00      	nop
 8007f22:	e7fe      	b.n	8007f22 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d01f      	beq.n	8007f6a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	61fb      	str	r3, [r7, #28]
 8007f2e:	e012      	b.n	8007f56 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007f30:	68ba      	ldr	r2, [r7, #8]
 8007f32:	69fb      	ldr	r3, [r7, #28]
 8007f34:	4413      	add	r3, r2
 8007f36:	7819      	ldrb	r1, [r3, #0]
 8007f38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f3a:	69fb      	ldr	r3, [r7, #28]
 8007f3c:	4413      	add	r3, r2
 8007f3e:	3334      	adds	r3, #52	; 0x34
 8007f40:	460a      	mov	r2, r1
 8007f42:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007f44:	68ba      	ldr	r2, [r7, #8]
 8007f46:	69fb      	ldr	r3, [r7, #28]
 8007f48:	4413      	add	r3, r2
 8007f4a:	781b      	ldrb	r3, [r3, #0]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d006      	beq.n	8007f5e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007f50:	69fb      	ldr	r3, [r7, #28]
 8007f52:	3301      	adds	r3, #1
 8007f54:	61fb      	str	r3, [r7, #28]
 8007f56:	69fb      	ldr	r3, [r7, #28]
 8007f58:	2b0f      	cmp	r3, #15
 8007f5a:	d9e9      	bls.n	8007f30 <prvInitialiseNewTask+0x64>
 8007f5c:	e000      	b.n	8007f60 <prvInitialiseNewTask+0x94>
			{
				break;
 8007f5e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f62:	2200      	movs	r2, #0
 8007f64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007f68:	e003      	b.n	8007f72 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f74:	2b37      	cmp	r3, #55	; 0x37
 8007f76:	d901      	bls.n	8007f7c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007f78:	2337      	movs	r3, #55	; 0x37
 8007f7a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f80:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f86:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f90:	3304      	adds	r3, #4
 8007f92:	4618      	mov	r0, r3
 8007f94:	f7ff f93e 	bl	8007214 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f9a:	3318      	adds	r3, #24
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f7ff f939 	bl	8007214 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fa6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007faa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fb6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fba:	2200      	movs	r2, #0
 8007fbc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fca:	3354      	adds	r3, #84	; 0x54
 8007fcc:	224c      	movs	r2, #76	; 0x4c
 8007fce:	2100      	movs	r1, #0
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	f002 fc39 	bl	800a848 <memset>
 8007fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd8:	4a0c      	ldr	r2, [pc, #48]	; (800800c <prvInitialiseNewTask+0x140>)
 8007fda:	659a      	str	r2, [r3, #88]	; 0x58
 8007fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fde:	4a0c      	ldr	r2, [pc, #48]	; (8008010 <prvInitialiseNewTask+0x144>)
 8007fe0:	65da      	str	r2, [r3, #92]	; 0x5c
 8007fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe4:	4a0b      	ldr	r2, [pc, #44]	; (8008014 <prvInitialiseNewTask+0x148>)
 8007fe6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007fe8:	683a      	ldr	r2, [r7, #0]
 8007fea:	68f9      	ldr	r1, [r7, #12]
 8007fec:	69b8      	ldr	r0, [r7, #24]
 8007fee:	f001 fa5b 	bl	80094a8 <pxPortInitialiseStack>
 8007ff2:	4602      	mov	r2, r0
 8007ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d002      	beq.n	8008004 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008000:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008002:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008004:	bf00      	nop
 8008006:	3720      	adds	r7, #32
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}
 800800c:	20002620 	.word	0x20002620
 8008010:	20002688 	.word	0x20002688
 8008014:	200026f0 	.word	0x200026f0

08008018 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b082      	sub	sp, #8
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008020:	f001 fb70 	bl	8009704 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008024:	4b2d      	ldr	r3, [pc, #180]	; (80080dc <prvAddNewTaskToReadyList+0xc4>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	3301      	adds	r3, #1
 800802a:	4a2c      	ldr	r2, [pc, #176]	; (80080dc <prvAddNewTaskToReadyList+0xc4>)
 800802c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800802e:	4b2c      	ldr	r3, [pc, #176]	; (80080e0 <prvAddNewTaskToReadyList+0xc8>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d109      	bne.n	800804a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008036:	4a2a      	ldr	r2, [pc, #168]	; (80080e0 <prvAddNewTaskToReadyList+0xc8>)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800803c:	4b27      	ldr	r3, [pc, #156]	; (80080dc <prvAddNewTaskToReadyList+0xc4>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	2b01      	cmp	r3, #1
 8008042:	d110      	bne.n	8008066 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008044:	f000 fd40 	bl	8008ac8 <prvInitialiseTaskLists>
 8008048:	e00d      	b.n	8008066 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800804a:	4b26      	ldr	r3, [pc, #152]	; (80080e4 <prvAddNewTaskToReadyList+0xcc>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d109      	bne.n	8008066 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008052:	4b23      	ldr	r3, [pc, #140]	; (80080e0 <prvAddNewTaskToReadyList+0xc8>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800805c:	429a      	cmp	r2, r3
 800805e:	d802      	bhi.n	8008066 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008060:	4a1f      	ldr	r2, [pc, #124]	; (80080e0 <prvAddNewTaskToReadyList+0xc8>)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008066:	4b20      	ldr	r3, [pc, #128]	; (80080e8 <prvAddNewTaskToReadyList+0xd0>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	3301      	adds	r3, #1
 800806c:	4a1e      	ldr	r2, [pc, #120]	; (80080e8 <prvAddNewTaskToReadyList+0xd0>)
 800806e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008070:	4b1d      	ldr	r3, [pc, #116]	; (80080e8 <prvAddNewTaskToReadyList+0xd0>)
 8008072:	681a      	ldr	r2, [r3, #0]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800807c:	4b1b      	ldr	r3, [pc, #108]	; (80080ec <prvAddNewTaskToReadyList+0xd4>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	429a      	cmp	r2, r3
 8008082:	d903      	bls.n	800808c <prvAddNewTaskToReadyList+0x74>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008088:	4a18      	ldr	r2, [pc, #96]	; (80080ec <prvAddNewTaskToReadyList+0xd4>)
 800808a:	6013      	str	r3, [r2, #0]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008090:	4613      	mov	r3, r2
 8008092:	009b      	lsls	r3, r3, #2
 8008094:	4413      	add	r3, r2
 8008096:	009b      	lsls	r3, r3, #2
 8008098:	4a15      	ldr	r2, [pc, #84]	; (80080f0 <prvAddNewTaskToReadyList+0xd8>)
 800809a:	441a      	add	r2, r3
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	3304      	adds	r3, #4
 80080a0:	4619      	mov	r1, r3
 80080a2:	4610      	mov	r0, r2
 80080a4:	f7ff f8c3 	bl	800722e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80080a8:	f001 fb5c 	bl	8009764 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80080ac:	4b0d      	ldr	r3, [pc, #52]	; (80080e4 <prvAddNewTaskToReadyList+0xcc>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d00e      	beq.n	80080d2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80080b4:	4b0a      	ldr	r3, [pc, #40]	; (80080e0 <prvAddNewTaskToReadyList+0xc8>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080be:	429a      	cmp	r2, r3
 80080c0:	d207      	bcs.n	80080d2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80080c2:	4b0c      	ldr	r3, [pc, #48]	; (80080f4 <prvAddNewTaskToReadyList+0xdc>)
 80080c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080c8:	601a      	str	r2, [r3, #0]
 80080ca:	f3bf 8f4f 	dsb	sy
 80080ce:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80080d2:	bf00      	nop
 80080d4:	3708      	adds	r7, #8
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}
 80080da:	bf00      	nop
 80080dc:	20001118 	.word	0x20001118
 80080e0:	20000c44 	.word	0x20000c44
 80080e4:	20001124 	.word	0x20001124
 80080e8:	20001134 	.word	0x20001134
 80080ec:	20001120 	.word	0x20001120
 80080f0:	20000c48 	.word	0x20000c48
 80080f4:	e000ed04 	.word	0xe000ed04

080080f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b084      	sub	sp, #16
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008100:	2300      	movs	r3, #0
 8008102:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d017      	beq.n	800813a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800810a:	4b13      	ldr	r3, [pc, #76]	; (8008158 <vTaskDelay+0x60>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d00a      	beq.n	8008128 <vTaskDelay+0x30>
	__asm volatile
 8008112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008116:	f383 8811 	msr	BASEPRI, r3
 800811a:	f3bf 8f6f 	isb	sy
 800811e:	f3bf 8f4f 	dsb	sy
 8008122:	60bb      	str	r3, [r7, #8]
}
 8008124:	bf00      	nop
 8008126:	e7fe      	b.n	8008126 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008128:	f000 f9a4 	bl	8008474 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800812c:	2100      	movs	r1, #0
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f000 fe18 	bl	8008d64 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008134:	f000 f9ac 	bl	8008490 <xTaskResumeAll>
 8008138:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d107      	bne.n	8008150 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008140:	4b06      	ldr	r3, [pc, #24]	; (800815c <vTaskDelay+0x64>)
 8008142:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008146:	601a      	str	r2, [r3, #0]
 8008148:	f3bf 8f4f 	dsb	sy
 800814c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008150:	bf00      	nop
 8008152:	3710      	adds	r7, #16
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}
 8008158:	20001140 	.word	0x20001140
 800815c:	e000ed04 	.word	0xe000ed04

08008160 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8008160:	b580      	push	{r7, lr}
 8008162:	b084      	sub	sp, #16
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8008168:	f001 facc 	bl	8009704 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d102      	bne.n	8008178 <vTaskSuspend+0x18>
 8008172:	4b30      	ldr	r3, [pc, #192]	; (8008234 <vTaskSuspend+0xd4>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	e000      	b.n	800817a <vTaskSuspend+0x1a>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	3304      	adds	r3, #4
 8008180:	4618      	mov	r0, r3
 8008182:	f7ff f8b1 	bl	80072e8 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800818a:	2b00      	cmp	r3, #0
 800818c:	d004      	beq.n	8008198 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	3318      	adds	r3, #24
 8008192:	4618      	mov	r0, r3
 8008194:	f7ff f8a8 	bl	80072e8 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	3304      	adds	r3, #4
 800819c:	4619      	mov	r1, r3
 800819e:	4826      	ldr	r0, [pc, #152]	; (8008238 <vTaskSuspend+0xd8>)
 80081a0:	f7ff f845 	bl	800722e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 80081aa:	b2db      	uxtb	r3, r3
 80081ac:	2b01      	cmp	r3, #1
 80081ae:	d103      	bne.n	80081b8 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	2200      	movs	r2, #0
 80081b4:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80081b8:	f001 fad4 	bl	8009764 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80081bc:	4b1f      	ldr	r3, [pc, #124]	; (800823c <vTaskSuspend+0xdc>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d005      	beq.n	80081d0 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80081c4:	f001 fa9e 	bl	8009704 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80081c8:	f000 fd20 	bl	8008c0c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80081cc:	f001 faca 	bl	8009764 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80081d0:	4b18      	ldr	r3, [pc, #96]	; (8008234 <vTaskSuspend+0xd4>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	68fa      	ldr	r2, [r7, #12]
 80081d6:	429a      	cmp	r2, r3
 80081d8:	d127      	bne.n	800822a <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 80081da:	4b18      	ldr	r3, [pc, #96]	; (800823c <vTaskSuspend+0xdc>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d017      	beq.n	8008212 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80081e2:	4b17      	ldr	r3, [pc, #92]	; (8008240 <vTaskSuspend+0xe0>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d00a      	beq.n	8008200 <vTaskSuspend+0xa0>
	__asm volatile
 80081ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ee:	f383 8811 	msr	BASEPRI, r3
 80081f2:	f3bf 8f6f 	isb	sy
 80081f6:	f3bf 8f4f 	dsb	sy
 80081fa:	60bb      	str	r3, [r7, #8]
}
 80081fc:	bf00      	nop
 80081fe:	e7fe      	b.n	80081fe <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8008200:	4b10      	ldr	r3, [pc, #64]	; (8008244 <vTaskSuspend+0xe4>)
 8008202:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008206:	601a      	str	r2, [r3, #0]
 8008208:	f3bf 8f4f 	dsb	sy
 800820c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008210:	e00b      	b.n	800822a <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8008212:	4b09      	ldr	r3, [pc, #36]	; (8008238 <vTaskSuspend+0xd8>)
 8008214:	681a      	ldr	r2, [r3, #0]
 8008216:	4b0c      	ldr	r3, [pc, #48]	; (8008248 <vTaskSuspend+0xe8>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	429a      	cmp	r2, r3
 800821c:	d103      	bne.n	8008226 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800821e:	4b05      	ldr	r3, [pc, #20]	; (8008234 <vTaskSuspend+0xd4>)
 8008220:	2200      	movs	r2, #0
 8008222:	601a      	str	r2, [r3, #0]
	}
 8008224:	e001      	b.n	800822a <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8008226:	f000 fa9b 	bl	8008760 <vTaskSwitchContext>
	}
 800822a:	bf00      	nop
 800822c:	3710      	adds	r7, #16
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}
 8008232:	bf00      	nop
 8008234:	20000c44 	.word	0x20000c44
 8008238:	20001104 	.word	0x20001104
 800823c:	20001124 	.word	0x20001124
 8008240:	20001140 	.word	0x20001140
 8008244:	e000ed04 	.word	0xe000ed04
 8008248:	20001118 	.word	0x20001118

0800824c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800824c:	b480      	push	{r7}
 800824e:	b087      	sub	sp, #28
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8008254:	2300      	movs	r3, #0
 8008256:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d10a      	bne.n	8008278 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8008262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008266:	f383 8811 	msr	BASEPRI, r3
 800826a:	f3bf 8f6f 	isb	sy
 800826e:	f3bf 8f4f 	dsb	sy
 8008272:	60fb      	str	r3, [r7, #12]
}
 8008274:	bf00      	nop
 8008276:	e7fe      	b.n	8008276 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	695b      	ldr	r3, [r3, #20]
 800827c:	4a0a      	ldr	r2, [pc, #40]	; (80082a8 <prvTaskIsTaskSuspended+0x5c>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d10a      	bne.n	8008298 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008286:	4a09      	ldr	r2, [pc, #36]	; (80082ac <prvTaskIsTaskSuspended+0x60>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d005      	beq.n	8008298 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008290:	2b00      	cmp	r3, #0
 8008292:	d101      	bne.n	8008298 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8008294:	2301      	movs	r3, #1
 8008296:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008298:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800829a:	4618      	mov	r0, r3
 800829c:	371c      	adds	r7, #28
 800829e:	46bd      	mov	sp, r7
 80082a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a4:	4770      	bx	lr
 80082a6:	bf00      	nop
 80082a8:	20001104 	.word	0x20001104
 80082ac:	200010d8 	.word	0x200010d8

080082b0 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b08a      	sub	sp, #40	; 0x28
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 80082b8:	2300      	movs	r3, #0
 80082ba:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d10a      	bne.n	80082dc <xTaskResumeFromISR+0x2c>
	__asm volatile
 80082c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ca:	f383 8811 	msr	BASEPRI, r3
 80082ce:	f3bf 8f6f 	isb	sy
 80082d2:	f3bf 8f4f 	dsb	sy
 80082d6:	61bb      	str	r3, [r7, #24]
}
 80082d8:	bf00      	nop
 80082da:	e7fe      	b.n	80082da <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80082dc:	f001 faf4 	bl	80098c8 <vPortValidateInterruptPriority>
	__asm volatile
 80082e0:	f3ef 8211 	mrs	r2, BASEPRI
 80082e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e8:	f383 8811 	msr	BASEPRI, r3
 80082ec:	f3bf 8f6f 	isb	sy
 80082f0:	f3bf 8f4f 	dsb	sy
 80082f4:	617a      	str	r2, [r7, #20]
 80082f6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80082f8:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80082fa:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80082fc:	6a38      	ldr	r0, [r7, #32]
 80082fe:	f7ff ffa5 	bl	800824c <prvTaskIsTaskSuspended>
 8008302:	4603      	mov	r3, r0
 8008304:	2b00      	cmp	r3, #0
 8008306:	d030      	beq.n	800836a <xTaskResumeFromISR+0xba>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008308:	4b1d      	ldr	r3, [pc, #116]	; (8008380 <xTaskResumeFromISR+0xd0>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d126      	bne.n	800835e <xTaskResumeFromISR+0xae>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008310:	6a3b      	ldr	r3, [r7, #32]
 8008312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008314:	4b1b      	ldr	r3, [pc, #108]	; (8008384 <xTaskResumeFromISR+0xd4>)
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800831a:	429a      	cmp	r2, r3
 800831c:	d301      	bcc.n	8008322 <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 800831e:	2301      	movs	r3, #1
 8008320:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008322:	6a3b      	ldr	r3, [r7, #32]
 8008324:	3304      	adds	r3, #4
 8008326:	4618      	mov	r0, r3
 8008328:	f7fe ffde 	bl	80072e8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800832c:	6a3b      	ldr	r3, [r7, #32]
 800832e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008330:	4b15      	ldr	r3, [pc, #84]	; (8008388 <xTaskResumeFromISR+0xd8>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	429a      	cmp	r2, r3
 8008336:	d903      	bls.n	8008340 <xTaskResumeFromISR+0x90>
 8008338:	6a3b      	ldr	r3, [r7, #32]
 800833a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800833c:	4a12      	ldr	r2, [pc, #72]	; (8008388 <xTaskResumeFromISR+0xd8>)
 800833e:	6013      	str	r3, [r2, #0]
 8008340:	6a3b      	ldr	r3, [r7, #32]
 8008342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008344:	4613      	mov	r3, r2
 8008346:	009b      	lsls	r3, r3, #2
 8008348:	4413      	add	r3, r2
 800834a:	009b      	lsls	r3, r3, #2
 800834c:	4a0f      	ldr	r2, [pc, #60]	; (800838c <xTaskResumeFromISR+0xdc>)
 800834e:	441a      	add	r2, r3
 8008350:	6a3b      	ldr	r3, [r7, #32]
 8008352:	3304      	adds	r3, #4
 8008354:	4619      	mov	r1, r3
 8008356:	4610      	mov	r0, r2
 8008358:	f7fe ff69 	bl	800722e <vListInsertEnd>
 800835c:	e005      	b.n	800836a <xTaskResumeFromISR+0xba>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800835e:	6a3b      	ldr	r3, [r7, #32]
 8008360:	3318      	adds	r3, #24
 8008362:	4619      	mov	r1, r3
 8008364:	480a      	ldr	r0, [pc, #40]	; (8008390 <xTaskResumeFromISR+0xe0>)
 8008366:	f7fe ff62 	bl	800722e <vListInsertEnd>
 800836a:	69fb      	ldr	r3, [r7, #28]
 800836c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	f383 8811 	msr	BASEPRI, r3
}
 8008374:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8008376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8008378:	4618      	mov	r0, r3
 800837a:	3728      	adds	r7, #40	; 0x28
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}
 8008380:	20001140 	.word	0x20001140
 8008384:	20000c44 	.word	0x20000c44
 8008388:	20001120 	.word	0x20001120
 800838c:	20000c48 	.word	0x20000c48
 8008390:	200010d8 	.word	0x200010d8

08008394 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b08a      	sub	sp, #40	; 0x28
 8008398:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800839a:	2300      	movs	r3, #0
 800839c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800839e:	2300      	movs	r3, #0
 80083a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80083a2:	463a      	mov	r2, r7
 80083a4:	1d39      	adds	r1, r7, #4
 80083a6:	f107 0308 	add.w	r3, r7, #8
 80083aa:	4618      	mov	r0, r3
 80083ac:	f7fe fede 	bl	800716c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80083b0:	6839      	ldr	r1, [r7, #0]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	68ba      	ldr	r2, [r7, #8]
 80083b6:	9202      	str	r2, [sp, #8]
 80083b8:	9301      	str	r3, [sp, #4]
 80083ba:	2300      	movs	r3, #0
 80083bc:	9300      	str	r3, [sp, #0]
 80083be:	2300      	movs	r3, #0
 80083c0:	460a      	mov	r2, r1
 80083c2:	4924      	ldr	r1, [pc, #144]	; (8008454 <vTaskStartScheduler+0xc0>)
 80083c4:	4824      	ldr	r0, [pc, #144]	; (8008458 <vTaskStartScheduler+0xc4>)
 80083c6:	f7ff fcdf 	bl	8007d88 <xTaskCreateStatic>
 80083ca:	4603      	mov	r3, r0
 80083cc:	4a23      	ldr	r2, [pc, #140]	; (800845c <vTaskStartScheduler+0xc8>)
 80083ce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80083d0:	4b22      	ldr	r3, [pc, #136]	; (800845c <vTaskStartScheduler+0xc8>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d002      	beq.n	80083de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80083d8:	2301      	movs	r3, #1
 80083da:	617b      	str	r3, [r7, #20]
 80083dc:	e001      	b.n	80083e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80083de:	2300      	movs	r3, #0
 80083e0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	d102      	bne.n	80083ee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80083e8:	f000 fd10 	bl	8008e0c <xTimerCreateTimerTask>
 80083ec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	2b01      	cmp	r3, #1
 80083f2:	d11b      	bne.n	800842c <vTaskStartScheduler+0x98>
	__asm volatile
 80083f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083f8:	f383 8811 	msr	BASEPRI, r3
 80083fc:	f3bf 8f6f 	isb	sy
 8008400:	f3bf 8f4f 	dsb	sy
 8008404:	613b      	str	r3, [r7, #16]
}
 8008406:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008408:	4b15      	ldr	r3, [pc, #84]	; (8008460 <vTaskStartScheduler+0xcc>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	3354      	adds	r3, #84	; 0x54
 800840e:	4a15      	ldr	r2, [pc, #84]	; (8008464 <vTaskStartScheduler+0xd0>)
 8008410:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008412:	4b15      	ldr	r3, [pc, #84]	; (8008468 <vTaskStartScheduler+0xd4>)
 8008414:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008418:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800841a:	4b14      	ldr	r3, [pc, #80]	; (800846c <vTaskStartScheduler+0xd8>)
 800841c:	2201      	movs	r2, #1
 800841e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008420:	4b13      	ldr	r3, [pc, #76]	; (8008470 <vTaskStartScheduler+0xdc>)
 8008422:	2200      	movs	r2, #0
 8008424:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008426:	f001 f8cb 	bl	80095c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800842a:	e00e      	b.n	800844a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800842c:	697b      	ldr	r3, [r7, #20]
 800842e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008432:	d10a      	bne.n	800844a <vTaskStartScheduler+0xb6>
	__asm volatile
 8008434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008438:	f383 8811 	msr	BASEPRI, r3
 800843c:	f3bf 8f6f 	isb	sy
 8008440:	f3bf 8f4f 	dsb	sy
 8008444:	60fb      	str	r3, [r7, #12]
}
 8008446:	bf00      	nop
 8008448:	e7fe      	b.n	8008448 <vTaskStartScheduler+0xb4>
}
 800844a:	bf00      	nop
 800844c:	3718      	adds	r7, #24
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}
 8008452:	bf00      	nop
 8008454:	0800d394 	.word	0x0800d394
 8008458:	08008a99 	.word	0x08008a99
 800845c:	2000113c 	.word	0x2000113c
 8008460:	20000c44 	.word	0x20000c44
 8008464:	20000068 	.word	0x20000068
 8008468:	20001138 	.word	0x20001138
 800846c:	20001124 	.word	0x20001124
 8008470:	2000111c 	.word	0x2000111c

08008474 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008474:	b480      	push	{r7}
 8008476:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008478:	4b04      	ldr	r3, [pc, #16]	; (800848c <vTaskSuspendAll+0x18>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	3301      	adds	r3, #1
 800847e:	4a03      	ldr	r2, [pc, #12]	; (800848c <vTaskSuspendAll+0x18>)
 8008480:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008482:	bf00      	nop
 8008484:	46bd      	mov	sp, r7
 8008486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848a:	4770      	bx	lr
 800848c:	20001140 	.word	0x20001140

08008490 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b084      	sub	sp, #16
 8008494:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008496:	2300      	movs	r3, #0
 8008498:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800849a:	2300      	movs	r3, #0
 800849c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800849e:	4b42      	ldr	r3, [pc, #264]	; (80085a8 <xTaskResumeAll+0x118>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d10a      	bne.n	80084bc <xTaskResumeAll+0x2c>
	__asm volatile
 80084a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084aa:	f383 8811 	msr	BASEPRI, r3
 80084ae:	f3bf 8f6f 	isb	sy
 80084b2:	f3bf 8f4f 	dsb	sy
 80084b6:	603b      	str	r3, [r7, #0]
}
 80084b8:	bf00      	nop
 80084ba:	e7fe      	b.n	80084ba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80084bc:	f001 f922 	bl	8009704 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80084c0:	4b39      	ldr	r3, [pc, #228]	; (80085a8 <xTaskResumeAll+0x118>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	3b01      	subs	r3, #1
 80084c6:	4a38      	ldr	r2, [pc, #224]	; (80085a8 <xTaskResumeAll+0x118>)
 80084c8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80084ca:	4b37      	ldr	r3, [pc, #220]	; (80085a8 <xTaskResumeAll+0x118>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d162      	bne.n	8008598 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80084d2:	4b36      	ldr	r3, [pc, #216]	; (80085ac <xTaskResumeAll+0x11c>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d05e      	beq.n	8008598 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80084da:	e02f      	b.n	800853c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084dc:	4b34      	ldr	r3, [pc, #208]	; (80085b0 <xTaskResumeAll+0x120>)
 80084de:	68db      	ldr	r3, [r3, #12]
 80084e0:	68db      	ldr	r3, [r3, #12]
 80084e2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	3318      	adds	r3, #24
 80084e8:	4618      	mov	r0, r3
 80084ea:	f7fe fefd 	bl	80072e8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	3304      	adds	r3, #4
 80084f2:	4618      	mov	r0, r3
 80084f4:	f7fe fef8 	bl	80072e8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084fc:	4b2d      	ldr	r3, [pc, #180]	; (80085b4 <xTaskResumeAll+0x124>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	429a      	cmp	r2, r3
 8008502:	d903      	bls.n	800850c <xTaskResumeAll+0x7c>
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008508:	4a2a      	ldr	r2, [pc, #168]	; (80085b4 <xTaskResumeAll+0x124>)
 800850a:	6013      	str	r3, [r2, #0]
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008510:	4613      	mov	r3, r2
 8008512:	009b      	lsls	r3, r3, #2
 8008514:	4413      	add	r3, r2
 8008516:	009b      	lsls	r3, r3, #2
 8008518:	4a27      	ldr	r2, [pc, #156]	; (80085b8 <xTaskResumeAll+0x128>)
 800851a:	441a      	add	r2, r3
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	3304      	adds	r3, #4
 8008520:	4619      	mov	r1, r3
 8008522:	4610      	mov	r0, r2
 8008524:	f7fe fe83 	bl	800722e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800852c:	4b23      	ldr	r3, [pc, #140]	; (80085bc <xTaskResumeAll+0x12c>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008532:	429a      	cmp	r2, r3
 8008534:	d302      	bcc.n	800853c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008536:	4b22      	ldr	r3, [pc, #136]	; (80085c0 <xTaskResumeAll+0x130>)
 8008538:	2201      	movs	r2, #1
 800853a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800853c:	4b1c      	ldr	r3, [pc, #112]	; (80085b0 <xTaskResumeAll+0x120>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d1cb      	bne.n	80084dc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d001      	beq.n	800854e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800854a:	f000 fb5f 	bl	8008c0c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800854e:	4b1d      	ldr	r3, [pc, #116]	; (80085c4 <xTaskResumeAll+0x134>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d010      	beq.n	800857c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800855a:	f000 f847 	bl	80085ec <xTaskIncrementTick>
 800855e:	4603      	mov	r3, r0
 8008560:	2b00      	cmp	r3, #0
 8008562:	d002      	beq.n	800856a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008564:	4b16      	ldr	r3, [pc, #88]	; (80085c0 <xTaskResumeAll+0x130>)
 8008566:	2201      	movs	r2, #1
 8008568:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	3b01      	subs	r3, #1
 800856e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d1f1      	bne.n	800855a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008576:	4b13      	ldr	r3, [pc, #76]	; (80085c4 <xTaskResumeAll+0x134>)
 8008578:	2200      	movs	r2, #0
 800857a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800857c:	4b10      	ldr	r3, [pc, #64]	; (80085c0 <xTaskResumeAll+0x130>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d009      	beq.n	8008598 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008584:	2301      	movs	r3, #1
 8008586:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008588:	4b0f      	ldr	r3, [pc, #60]	; (80085c8 <xTaskResumeAll+0x138>)
 800858a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800858e:	601a      	str	r2, [r3, #0]
 8008590:	f3bf 8f4f 	dsb	sy
 8008594:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008598:	f001 f8e4 	bl	8009764 <vPortExitCritical>

	return xAlreadyYielded;
 800859c:	68bb      	ldr	r3, [r7, #8]
}
 800859e:	4618      	mov	r0, r3
 80085a0:	3710      	adds	r7, #16
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}
 80085a6:	bf00      	nop
 80085a8:	20001140 	.word	0x20001140
 80085ac:	20001118 	.word	0x20001118
 80085b0:	200010d8 	.word	0x200010d8
 80085b4:	20001120 	.word	0x20001120
 80085b8:	20000c48 	.word	0x20000c48
 80085bc:	20000c44 	.word	0x20000c44
 80085c0:	2000112c 	.word	0x2000112c
 80085c4:	20001128 	.word	0x20001128
 80085c8:	e000ed04 	.word	0xe000ed04

080085cc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80085cc:	b480      	push	{r7}
 80085ce:	b083      	sub	sp, #12
 80085d0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80085d2:	4b05      	ldr	r3, [pc, #20]	; (80085e8 <xTaskGetTickCount+0x1c>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80085d8:	687b      	ldr	r3, [r7, #4]
}
 80085da:	4618      	mov	r0, r3
 80085dc:	370c      	adds	r7, #12
 80085de:	46bd      	mov	sp, r7
 80085e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e4:	4770      	bx	lr
 80085e6:	bf00      	nop
 80085e8:	2000111c 	.word	0x2000111c

080085ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b086      	sub	sp, #24
 80085f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80085f2:	2300      	movs	r3, #0
 80085f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085f6:	4b4f      	ldr	r3, [pc, #316]	; (8008734 <xTaskIncrementTick+0x148>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	f040 808f 	bne.w	800871e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008600:	4b4d      	ldr	r3, [pc, #308]	; (8008738 <xTaskIncrementTick+0x14c>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	3301      	adds	r3, #1
 8008606:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008608:	4a4b      	ldr	r2, [pc, #300]	; (8008738 <xTaskIncrementTick+0x14c>)
 800860a:	693b      	ldr	r3, [r7, #16]
 800860c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800860e:	693b      	ldr	r3, [r7, #16]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d120      	bne.n	8008656 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008614:	4b49      	ldr	r3, [pc, #292]	; (800873c <xTaskIncrementTick+0x150>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d00a      	beq.n	8008634 <xTaskIncrementTick+0x48>
	__asm volatile
 800861e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008622:	f383 8811 	msr	BASEPRI, r3
 8008626:	f3bf 8f6f 	isb	sy
 800862a:	f3bf 8f4f 	dsb	sy
 800862e:	603b      	str	r3, [r7, #0]
}
 8008630:	bf00      	nop
 8008632:	e7fe      	b.n	8008632 <xTaskIncrementTick+0x46>
 8008634:	4b41      	ldr	r3, [pc, #260]	; (800873c <xTaskIncrementTick+0x150>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	60fb      	str	r3, [r7, #12]
 800863a:	4b41      	ldr	r3, [pc, #260]	; (8008740 <xTaskIncrementTick+0x154>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	4a3f      	ldr	r2, [pc, #252]	; (800873c <xTaskIncrementTick+0x150>)
 8008640:	6013      	str	r3, [r2, #0]
 8008642:	4a3f      	ldr	r2, [pc, #252]	; (8008740 <xTaskIncrementTick+0x154>)
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	6013      	str	r3, [r2, #0]
 8008648:	4b3e      	ldr	r3, [pc, #248]	; (8008744 <xTaskIncrementTick+0x158>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	3301      	adds	r3, #1
 800864e:	4a3d      	ldr	r2, [pc, #244]	; (8008744 <xTaskIncrementTick+0x158>)
 8008650:	6013      	str	r3, [r2, #0]
 8008652:	f000 fadb 	bl	8008c0c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008656:	4b3c      	ldr	r3, [pc, #240]	; (8008748 <xTaskIncrementTick+0x15c>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	693a      	ldr	r2, [r7, #16]
 800865c:	429a      	cmp	r2, r3
 800865e:	d349      	bcc.n	80086f4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008660:	4b36      	ldr	r3, [pc, #216]	; (800873c <xTaskIncrementTick+0x150>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d104      	bne.n	8008674 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800866a:	4b37      	ldr	r3, [pc, #220]	; (8008748 <xTaskIncrementTick+0x15c>)
 800866c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008670:	601a      	str	r2, [r3, #0]
					break;
 8008672:	e03f      	b.n	80086f4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008674:	4b31      	ldr	r3, [pc, #196]	; (800873c <xTaskIncrementTick+0x150>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	68db      	ldr	r3, [r3, #12]
 800867a:	68db      	ldr	r3, [r3, #12]
 800867c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	685b      	ldr	r3, [r3, #4]
 8008682:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008684:	693a      	ldr	r2, [r7, #16]
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	429a      	cmp	r2, r3
 800868a:	d203      	bcs.n	8008694 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800868c:	4a2e      	ldr	r2, [pc, #184]	; (8008748 <xTaskIncrementTick+0x15c>)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008692:	e02f      	b.n	80086f4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	3304      	adds	r3, #4
 8008698:	4618      	mov	r0, r3
 800869a:	f7fe fe25 	bl	80072e8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d004      	beq.n	80086b0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	3318      	adds	r3, #24
 80086aa:	4618      	mov	r0, r3
 80086ac:	f7fe fe1c 	bl	80072e8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086b4:	4b25      	ldr	r3, [pc, #148]	; (800874c <xTaskIncrementTick+0x160>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	429a      	cmp	r2, r3
 80086ba:	d903      	bls.n	80086c4 <xTaskIncrementTick+0xd8>
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086c0:	4a22      	ldr	r2, [pc, #136]	; (800874c <xTaskIncrementTick+0x160>)
 80086c2:	6013      	str	r3, [r2, #0]
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086c8:	4613      	mov	r3, r2
 80086ca:	009b      	lsls	r3, r3, #2
 80086cc:	4413      	add	r3, r2
 80086ce:	009b      	lsls	r3, r3, #2
 80086d0:	4a1f      	ldr	r2, [pc, #124]	; (8008750 <xTaskIncrementTick+0x164>)
 80086d2:	441a      	add	r2, r3
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	3304      	adds	r3, #4
 80086d8:	4619      	mov	r1, r3
 80086da:	4610      	mov	r0, r2
 80086dc:	f7fe fda7 	bl	800722e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086e4:	4b1b      	ldr	r3, [pc, #108]	; (8008754 <xTaskIncrementTick+0x168>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ea:	429a      	cmp	r2, r3
 80086ec:	d3b8      	bcc.n	8008660 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80086ee:	2301      	movs	r3, #1
 80086f0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80086f2:	e7b5      	b.n	8008660 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80086f4:	4b17      	ldr	r3, [pc, #92]	; (8008754 <xTaskIncrementTick+0x168>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086fa:	4915      	ldr	r1, [pc, #84]	; (8008750 <xTaskIncrementTick+0x164>)
 80086fc:	4613      	mov	r3, r2
 80086fe:	009b      	lsls	r3, r3, #2
 8008700:	4413      	add	r3, r2
 8008702:	009b      	lsls	r3, r3, #2
 8008704:	440b      	add	r3, r1
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	2b01      	cmp	r3, #1
 800870a:	d901      	bls.n	8008710 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800870c:	2301      	movs	r3, #1
 800870e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008710:	4b11      	ldr	r3, [pc, #68]	; (8008758 <xTaskIncrementTick+0x16c>)
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d007      	beq.n	8008728 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008718:	2301      	movs	r3, #1
 800871a:	617b      	str	r3, [r7, #20]
 800871c:	e004      	b.n	8008728 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800871e:	4b0f      	ldr	r3, [pc, #60]	; (800875c <xTaskIncrementTick+0x170>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	3301      	adds	r3, #1
 8008724:	4a0d      	ldr	r2, [pc, #52]	; (800875c <xTaskIncrementTick+0x170>)
 8008726:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008728:	697b      	ldr	r3, [r7, #20]
}
 800872a:	4618      	mov	r0, r3
 800872c:	3718      	adds	r7, #24
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}
 8008732:	bf00      	nop
 8008734:	20001140 	.word	0x20001140
 8008738:	2000111c 	.word	0x2000111c
 800873c:	200010d0 	.word	0x200010d0
 8008740:	200010d4 	.word	0x200010d4
 8008744:	20001130 	.word	0x20001130
 8008748:	20001138 	.word	0x20001138
 800874c:	20001120 	.word	0x20001120
 8008750:	20000c48 	.word	0x20000c48
 8008754:	20000c44 	.word	0x20000c44
 8008758:	2000112c 	.word	0x2000112c
 800875c:	20001128 	.word	0x20001128

08008760 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008760:	b480      	push	{r7}
 8008762:	b085      	sub	sp, #20
 8008764:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008766:	4b2a      	ldr	r3, [pc, #168]	; (8008810 <vTaskSwitchContext+0xb0>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d003      	beq.n	8008776 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800876e:	4b29      	ldr	r3, [pc, #164]	; (8008814 <vTaskSwitchContext+0xb4>)
 8008770:	2201      	movs	r2, #1
 8008772:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008774:	e046      	b.n	8008804 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8008776:	4b27      	ldr	r3, [pc, #156]	; (8008814 <vTaskSwitchContext+0xb4>)
 8008778:	2200      	movs	r2, #0
 800877a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800877c:	4b26      	ldr	r3, [pc, #152]	; (8008818 <vTaskSwitchContext+0xb8>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	60fb      	str	r3, [r7, #12]
 8008782:	e010      	b.n	80087a6 <vTaskSwitchContext+0x46>
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d10a      	bne.n	80087a0 <vTaskSwitchContext+0x40>
	__asm volatile
 800878a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800878e:	f383 8811 	msr	BASEPRI, r3
 8008792:	f3bf 8f6f 	isb	sy
 8008796:	f3bf 8f4f 	dsb	sy
 800879a:	607b      	str	r3, [r7, #4]
}
 800879c:	bf00      	nop
 800879e:	e7fe      	b.n	800879e <vTaskSwitchContext+0x3e>
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	3b01      	subs	r3, #1
 80087a4:	60fb      	str	r3, [r7, #12]
 80087a6:	491d      	ldr	r1, [pc, #116]	; (800881c <vTaskSwitchContext+0xbc>)
 80087a8:	68fa      	ldr	r2, [r7, #12]
 80087aa:	4613      	mov	r3, r2
 80087ac:	009b      	lsls	r3, r3, #2
 80087ae:	4413      	add	r3, r2
 80087b0:	009b      	lsls	r3, r3, #2
 80087b2:	440b      	add	r3, r1
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d0e4      	beq.n	8008784 <vTaskSwitchContext+0x24>
 80087ba:	68fa      	ldr	r2, [r7, #12]
 80087bc:	4613      	mov	r3, r2
 80087be:	009b      	lsls	r3, r3, #2
 80087c0:	4413      	add	r3, r2
 80087c2:	009b      	lsls	r3, r3, #2
 80087c4:	4a15      	ldr	r2, [pc, #84]	; (800881c <vTaskSwitchContext+0xbc>)
 80087c6:	4413      	add	r3, r2
 80087c8:	60bb      	str	r3, [r7, #8]
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	685b      	ldr	r3, [r3, #4]
 80087ce:	685a      	ldr	r2, [r3, #4]
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	605a      	str	r2, [r3, #4]
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	685a      	ldr	r2, [r3, #4]
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	3308      	adds	r3, #8
 80087dc:	429a      	cmp	r2, r3
 80087de:	d104      	bne.n	80087ea <vTaskSwitchContext+0x8a>
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	685b      	ldr	r3, [r3, #4]
 80087e4:	685a      	ldr	r2, [r3, #4]
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	605a      	str	r2, [r3, #4]
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	68db      	ldr	r3, [r3, #12]
 80087f0:	4a0b      	ldr	r2, [pc, #44]	; (8008820 <vTaskSwitchContext+0xc0>)
 80087f2:	6013      	str	r3, [r2, #0]
 80087f4:	4a08      	ldr	r2, [pc, #32]	; (8008818 <vTaskSwitchContext+0xb8>)
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80087fa:	4b09      	ldr	r3, [pc, #36]	; (8008820 <vTaskSwitchContext+0xc0>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	3354      	adds	r3, #84	; 0x54
 8008800:	4a08      	ldr	r2, [pc, #32]	; (8008824 <vTaskSwitchContext+0xc4>)
 8008802:	6013      	str	r3, [r2, #0]
}
 8008804:	bf00      	nop
 8008806:	3714      	adds	r7, #20
 8008808:	46bd      	mov	sp, r7
 800880a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880e:	4770      	bx	lr
 8008810:	20001140 	.word	0x20001140
 8008814:	2000112c 	.word	0x2000112c
 8008818:	20001120 	.word	0x20001120
 800881c:	20000c48 	.word	0x20000c48
 8008820:	20000c44 	.word	0x20000c44
 8008824:	20000068 	.word	0x20000068

08008828 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b084      	sub	sp, #16
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d10a      	bne.n	800884e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800883c:	f383 8811 	msr	BASEPRI, r3
 8008840:	f3bf 8f6f 	isb	sy
 8008844:	f3bf 8f4f 	dsb	sy
 8008848:	60fb      	str	r3, [r7, #12]
}
 800884a:	bf00      	nop
 800884c:	e7fe      	b.n	800884c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800884e:	4b07      	ldr	r3, [pc, #28]	; (800886c <vTaskPlaceOnEventList+0x44>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	3318      	adds	r3, #24
 8008854:	4619      	mov	r1, r3
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f7fe fd0d 	bl	8007276 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800885c:	2101      	movs	r1, #1
 800885e:	6838      	ldr	r0, [r7, #0]
 8008860:	f000 fa80 	bl	8008d64 <prvAddCurrentTaskToDelayedList>
}
 8008864:	bf00      	nop
 8008866:	3710      	adds	r7, #16
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}
 800886c:	20000c44 	.word	0x20000c44

08008870 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008870:	b580      	push	{r7, lr}
 8008872:	b086      	sub	sp, #24
 8008874:	af00      	add	r7, sp, #0
 8008876:	60f8      	str	r0, [r7, #12]
 8008878:	60b9      	str	r1, [r7, #8]
 800887a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d10a      	bne.n	8008898 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008886:	f383 8811 	msr	BASEPRI, r3
 800888a:	f3bf 8f6f 	isb	sy
 800888e:	f3bf 8f4f 	dsb	sy
 8008892:	617b      	str	r3, [r7, #20]
}
 8008894:	bf00      	nop
 8008896:	e7fe      	b.n	8008896 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008898:	4b0a      	ldr	r3, [pc, #40]	; (80088c4 <vTaskPlaceOnEventListRestricted+0x54>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	3318      	adds	r3, #24
 800889e:	4619      	mov	r1, r3
 80088a0:	68f8      	ldr	r0, [r7, #12]
 80088a2:	f7fe fcc4 	bl	800722e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d002      	beq.n	80088b2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80088ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80088b0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80088b2:	6879      	ldr	r1, [r7, #4]
 80088b4:	68b8      	ldr	r0, [r7, #8]
 80088b6:	f000 fa55 	bl	8008d64 <prvAddCurrentTaskToDelayedList>
	}
 80088ba:	bf00      	nop
 80088bc:	3718      	adds	r7, #24
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}
 80088c2:	bf00      	nop
 80088c4:	20000c44 	.word	0x20000c44

080088c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b086      	sub	sp, #24
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	68db      	ldr	r3, [r3, #12]
 80088d4:	68db      	ldr	r3, [r3, #12]
 80088d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80088d8:	693b      	ldr	r3, [r7, #16]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d10a      	bne.n	80088f4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80088de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e2:	f383 8811 	msr	BASEPRI, r3
 80088e6:	f3bf 8f6f 	isb	sy
 80088ea:	f3bf 8f4f 	dsb	sy
 80088ee:	60fb      	str	r3, [r7, #12]
}
 80088f0:	bf00      	nop
 80088f2:	e7fe      	b.n	80088f2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	3318      	adds	r3, #24
 80088f8:	4618      	mov	r0, r3
 80088fa:	f7fe fcf5 	bl	80072e8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80088fe:	4b1e      	ldr	r3, [pc, #120]	; (8008978 <xTaskRemoveFromEventList+0xb0>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d11d      	bne.n	8008942 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	3304      	adds	r3, #4
 800890a:	4618      	mov	r0, r3
 800890c:	f7fe fcec 	bl	80072e8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008910:	693b      	ldr	r3, [r7, #16]
 8008912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008914:	4b19      	ldr	r3, [pc, #100]	; (800897c <xTaskRemoveFromEventList+0xb4>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	429a      	cmp	r2, r3
 800891a:	d903      	bls.n	8008924 <xTaskRemoveFromEventList+0x5c>
 800891c:	693b      	ldr	r3, [r7, #16]
 800891e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008920:	4a16      	ldr	r2, [pc, #88]	; (800897c <xTaskRemoveFromEventList+0xb4>)
 8008922:	6013      	str	r3, [r2, #0]
 8008924:	693b      	ldr	r3, [r7, #16]
 8008926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008928:	4613      	mov	r3, r2
 800892a:	009b      	lsls	r3, r3, #2
 800892c:	4413      	add	r3, r2
 800892e:	009b      	lsls	r3, r3, #2
 8008930:	4a13      	ldr	r2, [pc, #76]	; (8008980 <xTaskRemoveFromEventList+0xb8>)
 8008932:	441a      	add	r2, r3
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	3304      	adds	r3, #4
 8008938:	4619      	mov	r1, r3
 800893a:	4610      	mov	r0, r2
 800893c:	f7fe fc77 	bl	800722e <vListInsertEnd>
 8008940:	e005      	b.n	800894e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008942:	693b      	ldr	r3, [r7, #16]
 8008944:	3318      	adds	r3, #24
 8008946:	4619      	mov	r1, r3
 8008948:	480e      	ldr	r0, [pc, #56]	; (8008984 <xTaskRemoveFromEventList+0xbc>)
 800894a:	f7fe fc70 	bl	800722e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008952:	4b0d      	ldr	r3, [pc, #52]	; (8008988 <xTaskRemoveFromEventList+0xc0>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008958:	429a      	cmp	r2, r3
 800895a:	d905      	bls.n	8008968 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800895c:	2301      	movs	r3, #1
 800895e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008960:	4b0a      	ldr	r3, [pc, #40]	; (800898c <xTaskRemoveFromEventList+0xc4>)
 8008962:	2201      	movs	r2, #1
 8008964:	601a      	str	r2, [r3, #0]
 8008966:	e001      	b.n	800896c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008968:	2300      	movs	r3, #0
 800896a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800896c:	697b      	ldr	r3, [r7, #20]
}
 800896e:	4618      	mov	r0, r3
 8008970:	3718      	adds	r7, #24
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}
 8008976:	bf00      	nop
 8008978:	20001140 	.word	0x20001140
 800897c:	20001120 	.word	0x20001120
 8008980:	20000c48 	.word	0x20000c48
 8008984:	200010d8 	.word	0x200010d8
 8008988:	20000c44 	.word	0x20000c44
 800898c:	2000112c 	.word	0x2000112c

08008990 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008990:	b480      	push	{r7}
 8008992:	b083      	sub	sp, #12
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008998:	4b06      	ldr	r3, [pc, #24]	; (80089b4 <vTaskInternalSetTimeOutState+0x24>)
 800899a:	681a      	ldr	r2, [r3, #0]
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80089a0:	4b05      	ldr	r3, [pc, #20]	; (80089b8 <vTaskInternalSetTimeOutState+0x28>)
 80089a2:	681a      	ldr	r2, [r3, #0]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	605a      	str	r2, [r3, #4]
}
 80089a8:	bf00      	nop
 80089aa:	370c      	adds	r7, #12
 80089ac:	46bd      	mov	sp, r7
 80089ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b2:	4770      	bx	lr
 80089b4:	20001130 	.word	0x20001130
 80089b8:	2000111c 	.word	0x2000111c

080089bc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b088      	sub	sp, #32
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
 80089c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d10a      	bne.n	80089e2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80089cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089d0:	f383 8811 	msr	BASEPRI, r3
 80089d4:	f3bf 8f6f 	isb	sy
 80089d8:	f3bf 8f4f 	dsb	sy
 80089dc:	613b      	str	r3, [r7, #16]
}
 80089de:	bf00      	nop
 80089e0:	e7fe      	b.n	80089e0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d10a      	bne.n	80089fe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80089e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ec:	f383 8811 	msr	BASEPRI, r3
 80089f0:	f3bf 8f6f 	isb	sy
 80089f4:	f3bf 8f4f 	dsb	sy
 80089f8:	60fb      	str	r3, [r7, #12]
}
 80089fa:	bf00      	nop
 80089fc:	e7fe      	b.n	80089fc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80089fe:	f000 fe81 	bl	8009704 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008a02:	4b1d      	ldr	r3, [pc, #116]	; (8008a78 <xTaskCheckForTimeOut+0xbc>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	685b      	ldr	r3, [r3, #4]
 8008a0c:	69ba      	ldr	r2, [r7, #24]
 8008a0e:	1ad3      	subs	r3, r2, r3
 8008a10:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a1a:	d102      	bne.n	8008a22 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	61fb      	str	r3, [r7, #28]
 8008a20:	e023      	b.n	8008a6a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681a      	ldr	r2, [r3, #0]
 8008a26:	4b15      	ldr	r3, [pc, #84]	; (8008a7c <xTaskCheckForTimeOut+0xc0>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	429a      	cmp	r2, r3
 8008a2c:	d007      	beq.n	8008a3e <xTaskCheckForTimeOut+0x82>
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	685b      	ldr	r3, [r3, #4]
 8008a32:	69ba      	ldr	r2, [r7, #24]
 8008a34:	429a      	cmp	r2, r3
 8008a36:	d302      	bcc.n	8008a3e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008a38:	2301      	movs	r3, #1
 8008a3a:	61fb      	str	r3, [r7, #28]
 8008a3c:	e015      	b.n	8008a6a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	697a      	ldr	r2, [r7, #20]
 8008a44:	429a      	cmp	r2, r3
 8008a46:	d20b      	bcs.n	8008a60 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	681a      	ldr	r2, [r3, #0]
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	1ad2      	subs	r2, r2, r3
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f7ff ff9b 	bl	8008990 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	61fb      	str	r3, [r7, #28]
 8008a5e:	e004      	b.n	8008a6a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	2200      	movs	r2, #0
 8008a64:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008a66:	2301      	movs	r3, #1
 8008a68:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008a6a:	f000 fe7b 	bl	8009764 <vPortExitCritical>

	return xReturn;
 8008a6e:	69fb      	ldr	r3, [r7, #28]
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	3720      	adds	r7, #32
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}
 8008a78:	2000111c 	.word	0x2000111c
 8008a7c:	20001130 	.word	0x20001130

08008a80 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008a80:	b480      	push	{r7}
 8008a82:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008a84:	4b03      	ldr	r3, [pc, #12]	; (8008a94 <vTaskMissedYield+0x14>)
 8008a86:	2201      	movs	r2, #1
 8008a88:	601a      	str	r2, [r3, #0]
}
 8008a8a:	bf00      	nop
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a92:	4770      	bx	lr
 8008a94:	2000112c 	.word	0x2000112c

08008a98 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b082      	sub	sp, #8
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008aa0:	f000 f852 	bl	8008b48 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008aa4:	4b06      	ldr	r3, [pc, #24]	; (8008ac0 <prvIdleTask+0x28>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	2b01      	cmp	r3, #1
 8008aaa:	d9f9      	bls.n	8008aa0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008aac:	4b05      	ldr	r3, [pc, #20]	; (8008ac4 <prvIdleTask+0x2c>)
 8008aae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ab2:	601a      	str	r2, [r3, #0]
 8008ab4:	f3bf 8f4f 	dsb	sy
 8008ab8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008abc:	e7f0      	b.n	8008aa0 <prvIdleTask+0x8>
 8008abe:	bf00      	nop
 8008ac0:	20000c48 	.word	0x20000c48
 8008ac4:	e000ed04 	.word	0xe000ed04

08008ac8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b082      	sub	sp, #8
 8008acc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008ace:	2300      	movs	r3, #0
 8008ad0:	607b      	str	r3, [r7, #4]
 8008ad2:	e00c      	b.n	8008aee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008ad4:	687a      	ldr	r2, [r7, #4]
 8008ad6:	4613      	mov	r3, r2
 8008ad8:	009b      	lsls	r3, r3, #2
 8008ada:	4413      	add	r3, r2
 8008adc:	009b      	lsls	r3, r3, #2
 8008ade:	4a12      	ldr	r2, [pc, #72]	; (8008b28 <prvInitialiseTaskLists+0x60>)
 8008ae0:	4413      	add	r3, r2
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f7fe fb76 	bl	80071d4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	3301      	adds	r3, #1
 8008aec:	607b      	str	r3, [r7, #4]
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2b37      	cmp	r3, #55	; 0x37
 8008af2:	d9ef      	bls.n	8008ad4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008af4:	480d      	ldr	r0, [pc, #52]	; (8008b2c <prvInitialiseTaskLists+0x64>)
 8008af6:	f7fe fb6d 	bl	80071d4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008afa:	480d      	ldr	r0, [pc, #52]	; (8008b30 <prvInitialiseTaskLists+0x68>)
 8008afc:	f7fe fb6a 	bl	80071d4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008b00:	480c      	ldr	r0, [pc, #48]	; (8008b34 <prvInitialiseTaskLists+0x6c>)
 8008b02:	f7fe fb67 	bl	80071d4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008b06:	480c      	ldr	r0, [pc, #48]	; (8008b38 <prvInitialiseTaskLists+0x70>)
 8008b08:	f7fe fb64 	bl	80071d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008b0c:	480b      	ldr	r0, [pc, #44]	; (8008b3c <prvInitialiseTaskLists+0x74>)
 8008b0e:	f7fe fb61 	bl	80071d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008b12:	4b0b      	ldr	r3, [pc, #44]	; (8008b40 <prvInitialiseTaskLists+0x78>)
 8008b14:	4a05      	ldr	r2, [pc, #20]	; (8008b2c <prvInitialiseTaskLists+0x64>)
 8008b16:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008b18:	4b0a      	ldr	r3, [pc, #40]	; (8008b44 <prvInitialiseTaskLists+0x7c>)
 8008b1a:	4a05      	ldr	r2, [pc, #20]	; (8008b30 <prvInitialiseTaskLists+0x68>)
 8008b1c:	601a      	str	r2, [r3, #0]
}
 8008b1e:	bf00      	nop
 8008b20:	3708      	adds	r7, #8
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}
 8008b26:	bf00      	nop
 8008b28:	20000c48 	.word	0x20000c48
 8008b2c:	200010a8 	.word	0x200010a8
 8008b30:	200010bc 	.word	0x200010bc
 8008b34:	200010d8 	.word	0x200010d8
 8008b38:	200010ec 	.word	0x200010ec
 8008b3c:	20001104 	.word	0x20001104
 8008b40:	200010d0 	.word	0x200010d0
 8008b44:	200010d4 	.word	0x200010d4

08008b48 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b082      	sub	sp, #8
 8008b4c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008b4e:	e019      	b.n	8008b84 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008b50:	f000 fdd8 	bl	8009704 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b54:	4b10      	ldr	r3, [pc, #64]	; (8008b98 <prvCheckTasksWaitingTermination+0x50>)
 8008b56:	68db      	ldr	r3, [r3, #12]
 8008b58:	68db      	ldr	r3, [r3, #12]
 8008b5a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	3304      	adds	r3, #4
 8008b60:	4618      	mov	r0, r3
 8008b62:	f7fe fbc1 	bl	80072e8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008b66:	4b0d      	ldr	r3, [pc, #52]	; (8008b9c <prvCheckTasksWaitingTermination+0x54>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	3b01      	subs	r3, #1
 8008b6c:	4a0b      	ldr	r2, [pc, #44]	; (8008b9c <prvCheckTasksWaitingTermination+0x54>)
 8008b6e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008b70:	4b0b      	ldr	r3, [pc, #44]	; (8008ba0 <prvCheckTasksWaitingTermination+0x58>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	3b01      	subs	r3, #1
 8008b76:	4a0a      	ldr	r2, [pc, #40]	; (8008ba0 <prvCheckTasksWaitingTermination+0x58>)
 8008b78:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008b7a:	f000 fdf3 	bl	8009764 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f000 f810 	bl	8008ba4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008b84:	4b06      	ldr	r3, [pc, #24]	; (8008ba0 <prvCheckTasksWaitingTermination+0x58>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d1e1      	bne.n	8008b50 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008b8c:	bf00      	nop
 8008b8e:	bf00      	nop
 8008b90:	3708      	adds	r7, #8
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}
 8008b96:	bf00      	nop
 8008b98:	200010ec 	.word	0x200010ec
 8008b9c:	20001118 	.word	0x20001118
 8008ba0:	20001100 	.word	0x20001100

08008ba4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b084      	sub	sp, #16
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	3354      	adds	r3, #84	; 0x54
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	f001 fe55 	bl	800a860 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d108      	bne.n	8008bd2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f000 ff8b 	bl	8009ae0 <vPortFree>
				vPortFree( pxTCB );
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f000 ff88 	bl	8009ae0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008bd0:	e018      	b.n	8008c04 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008bd8:	2b01      	cmp	r3, #1
 8008bda:	d103      	bne.n	8008be4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f000 ff7f 	bl	8009ae0 <vPortFree>
	}
 8008be2:	e00f      	b.n	8008c04 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008bea:	2b02      	cmp	r3, #2
 8008bec:	d00a      	beq.n	8008c04 <prvDeleteTCB+0x60>
	__asm volatile
 8008bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bf2:	f383 8811 	msr	BASEPRI, r3
 8008bf6:	f3bf 8f6f 	isb	sy
 8008bfa:	f3bf 8f4f 	dsb	sy
 8008bfe:	60fb      	str	r3, [r7, #12]
}
 8008c00:	bf00      	nop
 8008c02:	e7fe      	b.n	8008c02 <prvDeleteTCB+0x5e>
	}
 8008c04:	bf00      	nop
 8008c06:	3710      	adds	r7, #16
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}

08008c0c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b083      	sub	sp, #12
 8008c10:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c12:	4b0c      	ldr	r3, [pc, #48]	; (8008c44 <prvResetNextTaskUnblockTime+0x38>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d104      	bne.n	8008c26 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008c1c:	4b0a      	ldr	r3, [pc, #40]	; (8008c48 <prvResetNextTaskUnblockTime+0x3c>)
 8008c1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008c22:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008c24:	e008      	b.n	8008c38 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c26:	4b07      	ldr	r3, [pc, #28]	; (8008c44 <prvResetNextTaskUnblockTime+0x38>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	68db      	ldr	r3, [r3, #12]
 8008c2c:	68db      	ldr	r3, [r3, #12]
 8008c2e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	685b      	ldr	r3, [r3, #4]
 8008c34:	4a04      	ldr	r2, [pc, #16]	; (8008c48 <prvResetNextTaskUnblockTime+0x3c>)
 8008c36:	6013      	str	r3, [r2, #0]
}
 8008c38:	bf00      	nop
 8008c3a:	370c      	adds	r7, #12
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c42:	4770      	bx	lr
 8008c44:	200010d0 	.word	0x200010d0
 8008c48:	20001138 	.word	0x20001138

08008c4c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b083      	sub	sp, #12
 8008c50:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008c52:	4b0b      	ldr	r3, [pc, #44]	; (8008c80 <xTaskGetSchedulerState+0x34>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d102      	bne.n	8008c60 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	607b      	str	r3, [r7, #4]
 8008c5e:	e008      	b.n	8008c72 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c60:	4b08      	ldr	r3, [pc, #32]	; (8008c84 <xTaskGetSchedulerState+0x38>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d102      	bne.n	8008c6e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008c68:	2302      	movs	r3, #2
 8008c6a:	607b      	str	r3, [r7, #4]
 8008c6c:	e001      	b.n	8008c72 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008c72:	687b      	ldr	r3, [r7, #4]
	}
 8008c74:	4618      	mov	r0, r3
 8008c76:	370c      	adds	r7, #12
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7e:	4770      	bx	lr
 8008c80:	20001124 	.word	0x20001124
 8008c84:	20001140 	.word	0x20001140

08008c88 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b086      	sub	sp, #24
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008c94:	2300      	movs	r3, #0
 8008c96:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d056      	beq.n	8008d4c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008c9e:	4b2e      	ldr	r3, [pc, #184]	; (8008d58 <xTaskPriorityDisinherit+0xd0>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	693a      	ldr	r2, [r7, #16]
 8008ca4:	429a      	cmp	r2, r3
 8008ca6:	d00a      	beq.n	8008cbe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cac:	f383 8811 	msr	BASEPRI, r3
 8008cb0:	f3bf 8f6f 	isb	sy
 8008cb4:	f3bf 8f4f 	dsb	sy
 8008cb8:	60fb      	str	r3, [r7, #12]
}
 8008cba:	bf00      	nop
 8008cbc:	e7fe      	b.n	8008cbc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008cbe:	693b      	ldr	r3, [r7, #16]
 8008cc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d10a      	bne.n	8008cdc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cca:	f383 8811 	msr	BASEPRI, r3
 8008cce:	f3bf 8f6f 	isb	sy
 8008cd2:	f3bf 8f4f 	dsb	sy
 8008cd6:	60bb      	str	r3, [r7, #8]
}
 8008cd8:	bf00      	nop
 8008cda:	e7fe      	b.n	8008cda <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008cdc:	693b      	ldr	r3, [r7, #16]
 8008cde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ce0:	1e5a      	subs	r2, r3, #1
 8008ce2:	693b      	ldr	r3, [r7, #16]
 8008ce4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cea:	693b      	ldr	r3, [r7, #16]
 8008cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cee:	429a      	cmp	r2, r3
 8008cf0:	d02c      	beq.n	8008d4c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008cf2:	693b      	ldr	r3, [r7, #16]
 8008cf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d128      	bne.n	8008d4c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	3304      	adds	r3, #4
 8008cfe:	4618      	mov	r0, r3
 8008d00:	f7fe faf2 	bl	80072e8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008d04:	693b      	ldr	r3, [r7, #16]
 8008d06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008d08:	693b      	ldr	r3, [r7, #16]
 8008d0a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d0c:	693b      	ldr	r3, [r7, #16]
 8008d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d10:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008d14:	693b      	ldr	r3, [r7, #16]
 8008d16:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008d18:	693b      	ldr	r3, [r7, #16]
 8008d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d1c:	4b0f      	ldr	r3, [pc, #60]	; (8008d5c <xTaskPriorityDisinherit+0xd4>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	429a      	cmp	r2, r3
 8008d22:	d903      	bls.n	8008d2c <xTaskPriorityDisinherit+0xa4>
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d28:	4a0c      	ldr	r2, [pc, #48]	; (8008d5c <xTaskPriorityDisinherit+0xd4>)
 8008d2a:	6013      	str	r3, [r2, #0]
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d30:	4613      	mov	r3, r2
 8008d32:	009b      	lsls	r3, r3, #2
 8008d34:	4413      	add	r3, r2
 8008d36:	009b      	lsls	r3, r3, #2
 8008d38:	4a09      	ldr	r2, [pc, #36]	; (8008d60 <xTaskPriorityDisinherit+0xd8>)
 8008d3a:	441a      	add	r2, r3
 8008d3c:	693b      	ldr	r3, [r7, #16]
 8008d3e:	3304      	adds	r3, #4
 8008d40:	4619      	mov	r1, r3
 8008d42:	4610      	mov	r0, r2
 8008d44:	f7fe fa73 	bl	800722e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008d48:	2301      	movs	r3, #1
 8008d4a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008d4c:	697b      	ldr	r3, [r7, #20]
	}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	3718      	adds	r7, #24
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}
 8008d56:	bf00      	nop
 8008d58:	20000c44 	.word	0x20000c44
 8008d5c:	20001120 	.word	0x20001120
 8008d60:	20000c48 	.word	0x20000c48

08008d64 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b084      	sub	sp, #16
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
 8008d6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008d6e:	4b21      	ldr	r3, [pc, #132]	; (8008df4 <prvAddCurrentTaskToDelayedList+0x90>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d74:	4b20      	ldr	r3, [pc, #128]	; (8008df8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	3304      	adds	r3, #4
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f7fe fab4 	bl	80072e8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d86:	d10a      	bne.n	8008d9e <prvAddCurrentTaskToDelayedList+0x3a>
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d007      	beq.n	8008d9e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d8e:	4b1a      	ldr	r3, [pc, #104]	; (8008df8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	3304      	adds	r3, #4
 8008d94:	4619      	mov	r1, r3
 8008d96:	4819      	ldr	r0, [pc, #100]	; (8008dfc <prvAddCurrentTaskToDelayedList+0x98>)
 8008d98:	f7fe fa49 	bl	800722e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008d9c:	e026      	b.n	8008dec <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008d9e:	68fa      	ldr	r2, [r7, #12]
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	4413      	add	r3, r2
 8008da4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008da6:	4b14      	ldr	r3, [pc, #80]	; (8008df8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	68ba      	ldr	r2, [r7, #8]
 8008dac:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008dae:	68ba      	ldr	r2, [r7, #8]
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	429a      	cmp	r2, r3
 8008db4:	d209      	bcs.n	8008dca <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008db6:	4b12      	ldr	r3, [pc, #72]	; (8008e00 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008db8:	681a      	ldr	r2, [r3, #0]
 8008dba:	4b0f      	ldr	r3, [pc, #60]	; (8008df8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	3304      	adds	r3, #4
 8008dc0:	4619      	mov	r1, r3
 8008dc2:	4610      	mov	r0, r2
 8008dc4:	f7fe fa57 	bl	8007276 <vListInsert>
}
 8008dc8:	e010      	b.n	8008dec <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008dca:	4b0e      	ldr	r3, [pc, #56]	; (8008e04 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008dcc:	681a      	ldr	r2, [r3, #0]
 8008dce:	4b0a      	ldr	r3, [pc, #40]	; (8008df8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	3304      	adds	r3, #4
 8008dd4:	4619      	mov	r1, r3
 8008dd6:	4610      	mov	r0, r2
 8008dd8:	f7fe fa4d 	bl	8007276 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008ddc:	4b0a      	ldr	r3, [pc, #40]	; (8008e08 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	68ba      	ldr	r2, [r7, #8]
 8008de2:	429a      	cmp	r2, r3
 8008de4:	d202      	bcs.n	8008dec <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008de6:	4a08      	ldr	r2, [pc, #32]	; (8008e08 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	6013      	str	r3, [r2, #0]
}
 8008dec:	bf00      	nop
 8008dee:	3710      	adds	r7, #16
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd80      	pop	{r7, pc}
 8008df4:	2000111c 	.word	0x2000111c
 8008df8:	20000c44 	.word	0x20000c44
 8008dfc:	20001104 	.word	0x20001104
 8008e00:	200010d4 	.word	0x200010d4
 8008e04:	200010d0 	.word	0x200010d0
 8008e08:	20001138 	.word	0x20001138

08008e0c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b08a      	sub	sp, #40	; 0x28
 8008e10:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008e12:	2300      	movs	r3, #0
 8008e14:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008e16:	f000 fb07 	bl	8009428 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008e1a:	4b1c      	ldr	r3, [pc, #112]	; (8008e8c <xTimerCreateTimerTask+0x80>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d021      	beq.n	8008e66 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008e22:	2300      	movs	r3, #0
 8008e24:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008e26:	2300      	movs	r3, #0
 8008e28:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008e2a:	1d3a      	adds	r2, r7, #4
 8008e2c:	f107 0108 	add.w	r1, r7, #8
 8008e30:	f107 030c 	add.w	r3, r7, #12
 8008e34:	4618      	mov	r0, r3
 8008e36:	f7fe f9b3 	bl	80071a0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008e3a:	6879      	ldr	r1, [r7, #4]
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	68fa      	ldr	r2, [r7, #12]
 8008e40:	9202      	str	r2, [sp, #8]
 8008e42:	9301      	str	r3, [sp, #4]
 8008e44:	2302      	movs	r3, #2
 8008e46:	9300      	str	r3, [sp, #0]
 8008e48:	2300      	movs	r3, #0
 8008e4a:	460a      	mov	r2, r1
 8008e4c:	4910      	ldr	r1, [pc, #64]	; (8008e90 <xTimerCreateTimerTask+0x84>)
 8008e4e:	4811      	ldr	r0, [pc, #68]	; (8008e94 <xTimerCreateTimerTask+0x88>)
 8008e50:	f7fe ff9a 	bl	8007d88 <xTaskCreateStatic>
 8008e54:	4603      	mov	r3, r0
 8008e56:	4a10      	ldr	r2, [pc, #64]	; (8008e98 <xTimerCreateTimerTask+0x8c>)
 8008e58:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008e5a:	4b0f      	ldr	r3, [pc, #60]	; (8008e98 <xTimerCreateTimerTask+0x8c>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d001      	beq.n	8008e66 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008e62:	2301      	movs	r3, #1
 8008e64:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008e66:	697b      	ldr	r3, [r7, #20]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d10a      	bne.n	8008e82 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e70:	f383 8811 	msr	BASEPRI, r3
 8008e74:	f3bf 8f6f 	isb	sy
 8008e78:	f3bf 8f4f 	dsb	sy
 8008e7c:	613b      	str	r3, [r7, #16]
}
 8008e7e:	bf00      	nop
 8008e80:	e7fe      	b.n	8008e80 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008e82:	697b      	ldr	r3, [r7, #20]
}
 8008e84:	4618      	mov	r0, r3
 8008e86:	3718      	adds	r7, #24
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}
 8008e8c:	20001174 	.word	0x20001174
 8008e90:	0800d39c 	.word	0x0800d39c
 8008e94:	08008fd1 	.word	0x08008fd1
 8008e98:	20001178 	.word	0x20001178

08008e9c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b08a      	sub	sp, #40	; 0x28
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	60f8      	str	r0, [r7, #12]
 8008ea4:	60b9      	str	r1, [r7, #8]
 8008ea6:	607a      	str	r2, [r7, #4]
 8008ea8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d10a      	bne.n	8008eca <xTimerGenericCommand+0x2e>
	__asm volatile
 8008eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eb8:	f383 8811 	msr	BASEPRI, r3
 8008ebc:	f3bf 8f6f 	isb	sy
 8008ec0:	f3bf 8f4f 	dsb	sy
 8008ec4:	623b      	str	r3, [r7, #32]
}
 8008ec6:	bf00      	nop
 8008ec8:	e7fe      	b.n	8008ec8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008eca:	4b1a      	ldr	r3, [pc, #104]	; (8008f34 <xTimerGenericCommand+0x98>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d02a      	beq.n	8008f28 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	2b05      	cmp	r3, #5
 8008ee2:	dc18      	bgt.n	8008f16 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008ee4:	f7ff feb2 	bl	8008c4c <xTaskGetSchedulerState>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	2b02      	cmp	r3, #2
 8008eec:	d109      	bne.n	8008f02 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008eee:	4b11      	ldr	r3, [pc, #68]	; (8008f34 <xTimerGenericCommand+0x98>)
 8008ef0:	6818      	ldr	r0, [r3, #0]
 8008ef2:	f107 0110 	add.w	r1, r7, #16
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008efa:	f7fe fb5d 	bl	80075b8 <xQueueGenericSend>
 8008efe:	6278      	str	r0, [r7, #36]	; 0x24
 8008f00:	e012      	b.n	8008f28 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008f02:	4b0c      	ldr	r3, [pc, #48]	; (8008f34 <xTimerGenericCommand+0x98>)
 8008f04:	6818      	ldr	r0, [r3, #0]
 8008f06:	f107 0110 	add.w	r1, r7, #16
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	f7fe fb53 	bl	80075b8 <xQueueGenericSend>
 8008f12:	6278      	str	r0, [r7, #36]	; 0x24
 8008f14:	e008      	b.n	8008f28 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008f16:	4b07      	ldr	r3, [pc, #28]	; (8008f34 <xTimerGenericCommand+0x98>)
 8008f18:	6818      	ldr	r0, [r3, #0]
 8008f1a:	f107 0110 	add.w	r1, r7, #16
 8008f1e:	2300      	movs	r3, #0
 8008f20:	683a      	ldr	r2, [r7, #0]
 8008f22:	f7fe fc47 	bl	80077b4 <xQueueGenericSendFromISR>
 8008f26:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3728      	adds	r7, #40	; 0x28
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}
 8008f32:	bf00      	nop
 8008f34:	20001174 	.word	0x20001174

08008f38 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b088      	sub	sp, #32
 8008f3c:	af02      	add	r7, sp, #8
 8008f3e:	6078      	str	r0, [r7, #4]
 8008f40:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f42:	4b22      	ldr	r3, [pc, #136]	; (8008fcc <prvProcessExpiredTimer+0x94>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	68db      	ldr	r3, [r3, #12]
 8008f48:	68db      	ldr	r3, [r3, #12]
 8008f4a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008f4c:	697b      	ldr	r3, [r7, #20]
 8008f4e:	3304      	adds	r3, #4
 8008f50:	4618      	mov	r0, r3
 8008f52:	f7fe f9c9 	bl	80072e8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f5c:	f003 0304 	and.w	r3, r3, #4
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d022      	beq.n	8008faa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008f64:	697b      	ldr	r3, [r7, #20]
 8008f66:	699a      	ldr	r2, [r3, #24]
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	18d1      	adds	r1, r2, r3
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	683a      	ldr	r2, [r7, #0]
 8008f70:	6978      	ldr	r0, [r7, #20]
 8008f72:	f000 f8d1 	bl	8009118 <prvInsertTimerInActiveList>
 8008f76:	4603      	mov	r3, r0
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d01f      	beq.n	8008fbc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	9300      	str	r3, [sp, #0]
 8008f80:	2300      	movs	r3, #0
 8008f82:	687a      	ldr	r2, [r7, #4]
 8008f84:	2100      	movs	r1, #0
 8008f86:	6978      	ldr	r0, [r7, #20]
 8008f88:	f7ff ff88 	bl	8008e9c <xTimerGenericCommand>
 8008f8c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008f8e:	693b      	ldr	r3, [r7, #16]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d113      	bne.n	8008fbc <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f98:	f383 8811 	msr	BASEPRI, r3
 8008f9c:	f3bf 8f6f 	isb	sy
 8008fa0:	f3bf 8f4f 	dsb	sy
 8008fa4:	60fb      	str	r3, [r7, #12]
}
 8008fa6:	bf00      	nop
 8008fa8:	e7fe      	b.n	8008fa8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008fb0:	f023 0301 	bic.w	r3, r3, #1
 8008fb4:	b2da      	uxtb	r2, r3
 8008fb6:	697b      	ldr	r3, [r7, #20]
 8008fb8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	6a1b      	ldr	r3, [r3, #32]
 8008fc0:	6978      	ldr	r0, [r7, #20]
 8008fc2:	4798      	blx	r3
}
 8008fc4:	bf00      	nop
 8008fc6:	3718      	adds	r7, #24
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}
 8008fcc:	2000116c 	.word	0x2000116c

08008fd0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b084      	sub	sp, #16
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008fd8:	f107 0308 	add.w	r3, r7, #8
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f000 f857 	bl	8009090 <prvGetNextExpireTime>
 8008fe2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	4619      	mov	r1, r3
 8008fe8:	68f8      	ldr	r0, [r7, #12]
 8008fea:	f000 f803 	bl	8008ff4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008fee:	f000 f8d5 	bl	800919c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008ff2:	e7f1      	b.n	8008fd8 <prvTimerTask+0x8>

08008ff4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b084      	sub	sp, #16
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
 8008ffc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008ffe:	f7ff fa39 	bl	8008474 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009002:	f107 0308 	add.w	r3, r7, #8
 8009006:	4618      	mov	r0, r3
 8009008:	f000 f866 	bl	80090d8 <prvSampleTimeNow>
 800900c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800900e:	68bb      	ldr	r3, [r7, #8]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d130      	bne.n	8009076 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d10a      	bne.n	8009030 <prvProcessTimerOrBlockTask+0x3c>
 800901a:	687a      	ldr	r2, [r7, #4]
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	429a      	cmp	r2, r3
 8009020:	d806      	bhi.n	8009030 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009022:	f7ff fa35 	bl	8008490 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009026:	68f9      	ldr	r1, [r7, #12]
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f7ff ff85 	bl	8008f38 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800902e:	e024      	b.n	800907a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d008      	beq.n	8009048 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009036:	4b13      	ldr	r3, [pc, #76]	; (8009084 <prvProcessTimerOrBlockTask+0x90>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d101      	bne.n	8009044 <prvProcessTimerOrBlockTask+0x50>
 8009040:	2301      	movs	r3, #1
 8009042:	e000      	b.n	8009046 <prvProcessTimerOrBlockTask+0x52>
 8009044:	2300      	movs	r3, #0
 8009046:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009048:	4b0f      	ldr	r3, [pc, #60]	; (8009088 <prvProcessTimerOrBlockTask+0x94>)
 800904a:	6818      	ldr	r0, [r3, #0]
 800904c:	687a      	ldr	r2, [r7, #4]
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	1ad3      	subs	r3, r2, r3
 8009052:	683a      	ldr	r2, [r7, #0]
 8009054:	4619      	mov	r1, r3
 8009056:	f7fe fe63 	bl	8007d20 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800905a:	f7ff fa19 	bl	8008490 <xTaskResumeAll>
 800905e:	4603      	mov	r3, r0
 8009060:	2b00      	cmp	r3, #0
 8009062:	d10a      	bne.n	800907a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009064:	4b09      	ldr	r3, [pc, #36]	; (800908c <prvProcessTimerOrBlockTask+0x98>)
 8009066:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800906a:	601a      	str	r2, [r3, #0]
 800906c:	f3bf 8f4f 	dsb	sy
 8009070:	f3bf 8f6f 	isb	sy
}
 8009074:	e001      	b.n	800907a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009076:	f7ff fa0b 	bl	8008490 <xTaskResumeAll>
}
 800907a:	bf00      	nop
 800907c:	3710      	adds	r7, #16
 800907e:	46bd      	mov	sp, r7
 8009080:	bd80      	pop	{r7, pc}
 8009082:	bf00      	nop
 8009084:	20001170 	.word	0x20001170
 8009088:	20001174 	.word	0x20001174
 800908c:	e000ed04 	.word	0xe000ed04

08009090 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009090:	b480      	push	{r7}
 8009092:	b085      	sub	sp, #20
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009098:	4b0e      	ldr	r3, [pc, #56]	; (80090d4 <prvGetNextExpireTime+0x44>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d101      	bne.n	80090a6 <prvGetNextExpireTime+0x16>
 80090a2:	2201      	movs	r2, #1
 80090a4:	e000      	b.n	80090a8 <prvGetNextExpireTime+0x18>
 80090a6:	2200      	movs	r2, #0
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d105      	bne.n	80090c0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80090b4:	4b07      	ldr	r3, [pc, #28]	; (80090d4 <prvGetNextExpireTime+0x44>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	68db      	ldr	r3, [r3, #12]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	60fb      	str	r3, [r7, #12]
 80090be:	e001      	b.n	80090c4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80090c0:	2300      	movs	r3, #0
 80090c2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80090c4:	68fb      	ldr	r3, [r7, #12]
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	3714      	adds	r7, #20
 80090ca:	46bd      	mov	sp, r7
 80090cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d0:	4770      	bx	lr
 80090d2:	bf00      	nop
 80090d4:	2000116c 	.word	0x2000116c

080090d8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b084      	sub	sp, #16
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80090e0:	f7ff fa74 	bl	80085cc <xTaskGetTickCount>
 80090e4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80090e6:	4b0b      	ldr	r3, [pc, #44]	; (8009114 <prvSampleTimeNow+0x3c>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	68fa      	ldr	r2, [r7, #12]
 80090ec:	429a      	cmp	r2, r3
 80090ee:	d205      	bcs.n	80090fc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80090f0:	f000 f936 	bl	8009360 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2201      	movs	r2, #1
 80090f8:	601a      	str	r2, [r3, #0]
 80090fa:	e002      	b.n	8009102 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2200      	movs	r2, #0
 8009100:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009102:	4a04      	ldr	r2, [pc, #16]	; (8009114 <prvSampleTimeNow+0x3c>)
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009108:	68fb      	ldr	r3, [r7, #12]
}
 800910a:	4618      	mov	r0, r3
 800910c:	3710      	adds	r7, #16
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}
 8009112:	bf00      	nop
 8009114:	2000117c 	.word	0x2000117c

08009118 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b086      	sub	sp, #24
 800911c:	af00      	add	r7, sp, #0
 800911e:	60f8      	str	r0, [r7, #12]
 8009120:	60b9      	str	r1, [r7, #8]
 8009122:	607a      	str	r2, [r7, #4]
 8009124:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009126:	2300      	movs	r3, #0
 8009128:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	68ba      	ldr	r2, [r7, #8]
 800912e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	68fa      	ldr	r2, [r7, #12]
 8009134:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009136:	68ba      	ldr	r2, [r7, #8]
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	429a      	cmp	r2, r3
 800913c:	d812      	bhi.n	8009164 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800913e:	687a      	ldr	r2, [r7, #4]
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	1ad2      	subs	r2, r2, r3
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	699b      	ldr	r3, [r3, #24]
 8009148:	429a      	cmp	r2, r3
 800914a:	d302      	bcc.n	8009152 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800914c:	2301      	movs	r3, #1
 800914e:	617b      	str	r3, [r7, #20]
 8009150:	e01b      	b.n	800918a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009152:	4b10      	ldr	r3, [pc, #64]	; (8009194 <prvInsertTimerInActiveList+0x7c>)
 8009154:	681a      	ldr	r2, [r3, #0]
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	3304      	adds	r3, #4
 800915a:	4619      	mov	r1, r3
 800915c:	4610      	mov	r0, r2
 800915e:	f7fe f88a 	bl	8007276 <vListInsert>
 8009162:	e012      	b.n	800918a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009164:	687a      	ldr	r2, [r7, #4]
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	429a      	cmp	r2, r3
 800916a:	d206      	bcs.n	800917a <prvInsertTimerInActiveList+0x62>
 800916c:	68ba      	ldr	r2, [r7, #8]
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	429a      	cmp	r2, r3
 8009172:	d302      	bcc.n	800917a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009174:	2301      	movs	r3, #1
 8009176:	617b      	str	r3, [r7, #20]
 8009178:	e007      	b.n	800918a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800917a:	4b07      	ldr	r3, [pc, #28]	; (8009198 <prvInsertTimerInActiveList+0x80>)
 800917c:	681a      	ldr	r2, [r3, #0]
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	3304      	adds	r3, #4
 8009182:	4619      	mov	r1, r3
 8009184:	4610      	mov	r0, r2
 8009186:	f7fe f876 	bl	8007276 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800918a:	697b      	ldr	r3, [r7, #20]
}
 800918c:	4618      	mov	r0, r3
 800918e:	3718      	adds	r7, #24
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}
 8009194:	20001170 	.word	0x20001170
 8009198:	2000116c 	.word	0x2000116c

0800919c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b08e      	sub	sp, #56	; 0x38
 80091a0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80091a2:	e0ca      	b.n	800933a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	da18      	bge.n	80091dc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80091aa:	1d3b      	adds	r3, r7, #4
 80091ac:	3304      	adds	r3, #4
 80091ae:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80091b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d10a      	bne.n	80091cc <prvProcessReceivedCommands+0x30>
	__asm volatile
 80091b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ba:	f383 8811 	msr	BASEPRI, r3
 80091be:	f3bf 8f6f 	isb	sy
 80091c2:	f3bf 8f4f 	dsb	sy
 80091c6:	61fb      	str	r3, [r7, #28]
}
 80091c8:	bf00      	nop
 80091ca:	e7fe      	b.n	80091ca <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80091cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091d2:	6850      	ldr	r0, [r2, #4]
 80091d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091d6:	6892      	ldr	r2, [r2, #8]
 80091d8:	4611      	mov	r1, r2
 80091da:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	f2c0 80ab 	blt.w	800933a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80091e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ea:	695b      	ldr	r3, [r3, #20]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d004      	beq.n	80091fa <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80091f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091f2:	3304      	adds	r3, #4
 80091f4:	4618      	mov	r0, r3
 80091f6:	f7fe f877 	bl	80072e8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80091fa:	463b      	mov	r3, r7
 80091fc:	4618      	mov	r0, r3
 80091fe:	f7ff ff6b 	bl	80090d8 <prvSampleTimeNow>
 8009202:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2b09      	cmp	r3, #9
 8009208:	f200 8096 	bhi.w	8009338 <prvProcessReceivedCommands+0x19c>
 800920c:	a201      	add	r2, pc, #4	; (adr r2, 8009214 <prvProcessReceivedCommands+0x78>)
 800920e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009212:	bf00      	nop
 8009214:	0800923d 	.word	0x0800923d
 8009218:	0800923d 	.word	0x0800923d
 800921c:	0800923d 	.word	0x0800923d
 8009220:	080092b1 	.word	0x080092b1
 8009224:	080092c5 	.word	0x080092c5
 8009228:	0800930f 	.word	0x0800930f
 800922c:	0800923d 	.word	0x0800923d
 8009230:	0800923d 	.word	0x0800923d
 8009234:	080092b1 	.word	0x080092b1
 8009238:	080092c5 	.word	0x080092c5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800923c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800923e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009242:	f043 0301 	orr.w	r3, r3, #1
 8009246:	b2da      	uxtb	r2, r3
 8009248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800924a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800924e:	68ba      	ldr	r2, [r7, #8]
 8009250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009252:	699b      	ldr	r3, [r3, #24]
 8009254:	18d1      	adds	r1, r2, r3
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800925a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800925c:	f7ff ff5c 	bl	8009118 <prvInsertTimerInActiveList>
 8009260:	4603      	mov	r3, r0
 8009262:	2b00      	cmp	r3, #0
 8009264:	d069      	beq.n	800933a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009268:	6a1b      	ldr	r3, [r3, #32]
 800926a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800926c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800926e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009270:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009274:	f003 0304 	and.w	r3, r3, #4
 8009278:	2b00      	cmp	r3, #0
 800927a:	d05e      	beq.n	800933a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800927c:	68ba      	ldr	r2, [r7, #8]
 800927e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009280:	699b      	ldr	r3, [r3, #24]
 8009282:	441a      	add	r2, r3
 8009284:	2300      	movs	r3, #0
 8009286:	9300      	str	r3, [sp, #0]
 8009288:	2300      	movs	r3, #0
 800928a:	2100      	movs	r1, #0
 800928c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800928e:	f7ff fe05 	bl	8008e9c <xTimerGenericCommand>
 8009292:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009294:	6a3b      	ldr	r3, [r7, #32]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d14f      	bne.n	800933a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800929a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800929e:	f383 8811 	msr	BASEPRI, r3
 80092a2:	f3bf 8f6f 	isb	sy
 80092a6:	f3bf 8f4f 	dsb	sy
 80092aa:	61bb      	str	r3, [r7, #24]
}
 80092ac:	bf00      	nop
 80092ae:	e7fe      	b.n	80092ae <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80092b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80092b6:	f023 0301 	bic.w	r3, r3, #1
 80092ba:	b2da      	uxtb	r2, r3
 80092bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80092c2:	e03a      	b.n	800933a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80092c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80092ca:	f043 0301 	orr.w	r3, r3, #1
 80092ce:	b2da      	uxtb	r2, r3
 80092d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80092d6:	68ba      	ldr	r2, [r7, #8]
 80092d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092da:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80092dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092de:	699b      	ldr	r3, [r3, #24]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d10a      	bne.n	80092fa <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80092e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092e8:	f383 8811 	msr	BASEPRI, r3
 80092ec:	f3bf 8f6f 	isb	sy
 80092f0:	f3bf 8f4f 	dsb	sy
 80092f4:	617b      	str	r3, [r7, #20]
}
 80092f6:	bf00      	nop
 80092f8:	e7fe      	b.n	80092f8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80092fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092fc:	699a      	ldr	r2, [r3, #24]
 80092fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009300:	18d1      	adds	r1, r2, r3
 8009302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009304:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009306:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009308:	f7ff ff06 	bl	8009118 <prvInsertTimerInActiveList>
					break;
 800930c:	e015      	b.n	800933a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800930e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009310:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009314:	f003 0302 	and.w	r3, r3, #2
 8009318:	2b00      	cmp	r3, #0
 800931a:	d103      	bne.n	8009324 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800931c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800931e:	f000 fbdf 	bl	8009ae0 <vPortFree>
 8009322:	e00a      	b.n	800933a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009326:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800932a:	f023 0301 	bic.w	r3, r3, #1
 800932e:	b2da      	uxtb	r2, r3
 8009330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009332:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009336:	e000      	b.n	800933a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8009338:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800933a:	4b08      	ldr	r3, [pc, #32]	; (800935c <prvProcessReceivedCommands+0x1c0>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	1d39      	adds	r1, r7, #4
 8009340:	2200      	movs	r2, #0
 8009342:	4618      	mov	r0, r3
 8009344:	f7fe fad2 	bl	80078ec <xQueueReceive>
 8009348:	4603      	mov	r3, r0
 800934a:	2b00      	cmp	r3, #0
 800934c:	f47f af2a 	bne.w	80091a4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009350:	bf00      	nop
 8009352:	bf00      	nop
 8009354:	3730      	adds	r7, #48	; 0x30
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}
 800935a:	bf00      	nop
 800935c:	20001174 	.word	0x20001174

08009360 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b088      	sub	sp, #32
 8009364:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009366:	e048      	b.n	80093fa <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009368:	4b2d      	ldr	r3, [pc, #180]	; (8009420 <prvSwitchTimerLists+0xc0>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	68db      	ldr	r3, [r3, #12]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009372:	4b2b      	ldr	r3, [pc, #172]	; (8009420 <prvSwitchTimerLists+0xc0>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	68db      	ldr	r3, [r3, #12]
 8009378:	68db      	ldr	r3, [r3, #12]
 800937a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	3304      	adds	r3, #4
 8009380:	4618      	mov	r0, r3
 8009382:	f7fd ffb1 	bl	80072e8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	6a1b      	ldr	r3, [r3, #32]
 800938a:	68f8      	ldr	r0, [r7, #12]
 800938c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009394:	f003 0304 	and.w	r3, r3, #4
 8009398:	2b00      	cmp	r3, #0
 800939a:	d02e      	beq.n	80093fa <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	699b      	ldr	r3, [r3, #24]
 80093a0:	693a      	ldr	r2, [r7, #16]
 80093a2:	4413      	add	r3, r2
 80093a4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80093a6:	68ba      	ldr	r2, [r7, #8]
 80093a8:	693b      	ldr	r3, [r7, #16]
 80093aa:	429a      	cmp	r2, r3
 80093ac:	d90e      	bls.n	80093cc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	68ba      	ldr	r2, [r7, #8]
 80093b2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	68fa      	ldr	r2, [r7, #12]
 80093b8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80093ba:	4b19      	ldr	r3, [pc, #100]	; (8009420 <prvSwitchTimerLists+0xc0>)
 80093bc:	681a      	ldr	r2, [r3, #0]
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	3304      	adds	r3, #4
 80093c2:	4619      	mov	r1, r3
 80093c4:	4610      	mov	r0, r2
 80093c6:	f7fd ff56 	bl	8007276 <vListInsert>
 80093ca:	e016      	b.n	80093fa <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80093cc:	2300      	movs	r3, #0
 80093ce:	9300      	str	r3, [sp, #0]
 80093d0:	2300      	movs	r3, #0
 80093d2:	693a      	ldr	r2, [r7, #16]
 80093d4:	2100      	movs	r1, #0
 80093d6:	68f8      	ldr	r0, [r7, #12]
 80093d8:	f7ff fd60 	bl	8008e9c <xTimerGenericCommand>
 80093dc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d10a      	bne.n	80093fa <prvSwitchTimerLists+0x9a>
	__asm volatile
 80093e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093e8:	f383 8811 	msr	BASEPRI, r3
 80093ec:	f3bf 8f6f 	isb	sy
 80093f0:	f3bf 8f4f 	dsb	sy
 80093f4:	603b      	str	r3, [r7, #0]
}
 80093f6:	bf00      	nop
 80093f8:	e7fe      	b.n	80093f8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80093fa:	4b09      	ldr	r3, [pc, #36]	; (8009420 <prvSwitchTimerLists+0xc0>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d1b1      	bne.n	8009368 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009404:	4b06      	ldr	r3, [pc, #24]	; (8009420 <prvSwitchTimerLists+0xc0>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800940a:	4b06      	ldr	r3, [pc, #24]	; (8009424 <prvSwitchTimerLists+0xc4>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	4a04      	ldr	r2, [pc, #16]	; (8009420 <prvSwitchTimerLists+0xc0>)
 8009410:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009412:	4a04      	ldr	r2, [pc, #16]	; (8009424 <prvSwitchTimerLists+0xc4>)
 8009414:	697b      	ldr	r3, [r7, #20]
 8009416:	6013      	str	r3, [r2, #0]
}
 8009418:	bf00      	nop
 800941a:	3718      	adds	r7, #24
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}
 8009420:	2000116c 	.word	0x2000116c
 8009424:	20001170 	.word	0x20001170

08009428 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b082      	sub	sp, #8
 800942c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800942e:	f000 f969 	bl	8009704 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009432:	4b15      	ldr	r3, [pc, #84]	; (8009488 <prvCheckForValidListAndQueue+0x60>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d120      	bne.n	800947c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800943a:	4814      	ldr	r0, [pc, #80]	; (800948c <prvCheckForValidListAndQueue+0x64>)
 800943c:	f7fd feca 	bl	80071d4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009440:	4813      	ldr	r0, [pc, #76]	; (8009490 <prvCheckForValidListAndQueue+0x68>)
 8009442:	f7fd fec7 	bl	80071d4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009446:	4b13      	ldr	r3, [pc, #76]	; (8009494 <prvCheckForValidListAndQueue+0x6c>)
 8009448:	4a10      	ldr	r2, [pc, #64]	; (800948c <prvCheckForValidListAndQueue+0x64>)
 800944a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800944c:	4b12      	ldr	r3, [pc, #72]	; (8009498 <prvCheckForValidListAndQueue+0x70>)
 800944e:	4a10      	ldr	r2, [pc, #64]	; (8009490 <prvCheckForValidListAndQueue+0x68>)
 8009450:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009452:	2300      	movs	r3, #0
 8009454:	9300      	str	r3, [sp, #0]
 8009456:	4b11      	ldr	r3, [pc, #68]	; (800949c <prvCheckForValidListAndQueue+0x74>)
 8009458:	4a11      	ldr	r2, [pc, #68]	; (80094a0 <prvCheckForValidListAndQueue+0x78>)
 800945a:	2110      	movs	r1, #16
 800945c:	200a      	movs	r0, #10
 800945e:	f7fd ffd5 	bl	800740c <xQueueGenericCreateStatic>
 8009462:	4603      	mov	r3, r0
 8009464:	4a08      	ldr	r2, [pc, #32]	; (8009488 <prvCheckForValidListAndQueue+0x60>)
 8009466:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009468:	4b07      	ldr	r3, [pc, #28]	; (8009488 <prvCheckForValidListAndQueue+0x60>)
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d005      	beq.n	800947c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009470:	4b05      	ldr	r3, [pc, #20]	; (8009488 <prvCheckForValidListAndQueue+0x60>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	490b      	ldr	r1, [pc, #44]	; (80094a4 <prvCheckForValidListAndQueue+0x7c>)
 8009476:	4618      	mov	r0, r3
 8009478:	f7fe fc28 	bl	8007ccc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800947c:	f000 f972 	bl	8009764 <vPortExitCritical>
}
 8009480:	bf00      	nop
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}
 8009486:	bf00      	nop
 8009488:	20001174 	.word	0x20001174
 800948c:	20001144 	.word	0x20001144
 8009490:	20001158 	.word	0x20001158
 8009494:	2000116c 	.word	0x2000116c
 8009498:	20001170 	.word	0x20001170
 800949c:	20001220 	.word	0x20001220
 80094a0:	20001180 	.word	0x20001180
 80094a4:	0800d3a4 	.word	0x0800d3a4

080094a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80094a8:	b480      	push	{r7}
 80094aa:	b085      	sub	sp, #20
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	60f8      	str	r0, [r7, #12]
 80094b0:	60b9      	str	r1, [r7, #8]
 80094b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	3b04      	subs	r3, #4
 80094b8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80094c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	3b04      	subs	r3, #4
 80094c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	f023 0201 	bic.w	r2, r3, #1
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	3b04      	subs	r3, #4
 80094d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80094d8:	4a0c      	ldr	r2, [pc, #48]	; (800950c <pxPortInitialiseStack+0x64>)
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	3b14      	subs	r3, #20
 80094e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80094e4:	687a      	ldr	r2, [r7, #4]
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	3b04      	subs	r3, #4
 80094ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	f06f 0202 	mvn.w	r2, #2
 80094f6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	3b20      	subs	r3, #32
 80094fc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80094fe:	68fb      	ldr	r3, [r7, #12]
}
 8009500:	4618      	mov	r0, r3
 8009502:	3714      	adds	r7, #20
 8009504:	46bd      	mov	sp, r7
 8009506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950a:	4770      	bx	lr
 800950c:	08009511 	.word	0x08009511

08009510 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009510:	b480      	push	{r7}
 8009512:	b085      	sub	sp, #20
 8009514:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009516:	2300      	movs	r3, #0
 8009518:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800951a:	4b12      	ldr	r3, [pc, #72]	; (8009564 <prvTaskExitError+0x54>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009522:	d00a      	beq.n	800953a <prvTaskExitError+0x2a>
	__asm volatile
 8009524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009528:	f383 8811 	msr	BASEPRI, r3
 800952c:	f3bf 8f6f 	isb	sy
 8009530:	f3bf 8f4f 	dsb	sy
 8009534:	60fb      	str	r3, [r7, #12]
}
 8009536:	bf00      	nop
 8009538:	e7fe      	b.n	8009538 <prvTaskExitError+0x28>
	__asm volatile
 800953a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800953e:	f383 8811 	msr	BASEPRI, r3
 8009542:	f3bf 8f6f 	isb	sy
 8009546:	f3bf 8f4f 	dsb	sy
 800954a:	60bb      	str	r3, [r7, #8]
}
 800954c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800954e:	bf00      	nop
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d0fc      	beq.n	8009550 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009556:	bf00      	nop
 8009558:	bf00      	nop
 800955a:	3714      	adds	r7, #20
 800955c:	46bd      	mov	sp, r7
 800955e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009562:	4770      	bx	lr
 8009564:	2000000c 	.word	0x2000000c
	...

08009570 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009570:	4b07      	ldr	r3, [pc, #28]	; (8009590 <pxCurrentTCBConst2>)
 8009572:	6819      	ldr	r1, [r3, #0]
 8009574:	6808      	ldr	r0, [r1, #0]
 8009576:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800957a:	f380 8809 	msr	PSP, r0
 800957e:	f3bf 8f6f 	isb	sy
 8009582:	f04f 0000 	mov.w	r0, #0
 8009586:	f380 8811 	msr	BASEPRI, r0
 800958a:	4770      	bx	lr
 800958c:	f3af 8000 	nop.w

08009590 <pxCurrentTCBConst2>:
 8009590:	20000c44 	.word	0x20000c44
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009594:	bf00      	nop
 8009596:	bf00      	nop

08009598 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009598:	4808      	ldr	r0, [pc, #32]	; (80095bc <prvPortStartFirstTask+0x24>)
 800959a:	6800      	ldr	r0, [r0, #0]
 800959c:	6800      	ldr	r0, [r0, #0]
 800959e:	f380 8808 	msr	MSP, r0
 80095a2:	f04f 0000 	mov.w	r0, #0
 80095a6:	f380 8814 	msr	CONTROL, r0
 80095aa:	b662      	cpsie	i
 80095ac:	b661      	cpsie	f
 80095ae:	f3bf 8f4f 	dsb	sy
 80095b2:	f3bf 8f6f 	isb	sy
 80095b6:	df00      	svc	0
 80095b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80095ba:	bf00      	nop
 80095bc:	e000ed08 	.word	0xe000ed08

080095c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b086      	sub	sp, #24
 80095c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80095c6:	4b46      	ldr	r3, [pc, #280]	; (80096e0 <xPortStartScheduler+0x120>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	4a46      	ldr	r2, [pc, #280]	; (80096e4 <xPortStartScheduler+0x124>)
 80095cc:	4293      	cmp	r3, r2
 80095ce:	d10a      	bne.n	80095e6 <xPortStartScheduler+0x26>
	__asm volatile
 80095d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095d4:	f383 8811 	msr	BASEPRI, r3
 80095d8:	f3bf 8f6f 	isb	sy
 80095dc:	f3bf 8f4f 	dsb	sy
 80095e0:	613b      	str	r3, [r7, #16]
}
 80095e2:	bf00      	nop
 80095e4:	e7fe      	b.n	80095e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80095e6:	4b3e      	ldr	r3, [pc, #248]	; (80096e0 <xPortStartScheduler+0x120>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	4a3f      	ldr	r2, [pc, #252]	; (80096e8 <xPortStartScheduler+0x128>)
 80095ec:	4293      	cmp	r3, r2
 80095ee:	d10a      	bne.n	8009606 <xPortStartScheduler+0x46>
	__asm volatile
 80095f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095f4:	f383 8811 	msr	BASEPRI, r3
 80095f8:	f3bf 8f6f 	isb	sy
 80095fc:	f3bf 8f4f 	dsb	sy
 8009600:	60fb      	str	r3, [r7, #12]
}
 8009602:	bf00      	nop
 8009604:	e7fe      	b.n	8009604 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009606:	4b39      	ldr	r3, [pc, #228]	; (80096ec <xPortStartScheduler+0x12c>)
 8009608:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800960a:	697b      	ldr	r3, [r7, #20]
 800960c:	781b      	ldrb	r3, [r3, #0]
 800960e:	b2db      	uxtb	r3, r3
 8009610:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	22ff      	movs	r2, #255	; 0xff
 8009616:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009618:	697b      	ldr	r3, [r7, #20]
 800961a:	781b      	ldrb	r3, [r3, #0]
 800961c:	b2db      	uxtb	r3, r3
 800961e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009620:	78fb      	ldrb	r3, [r7, #3]
 8009622:	b2db      	uxtb	r3, r3
 8009624:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009628:	b2da      	uxtb	r2, r3
 800962a:	4b31      	ldr	r3, [pc, #196]	; (80096f0 <xPortStartScheduler+0x130>)
 800962c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800962e:	4b31      	ldr	r3, [pc, #196]	; (80096f4 <xPortStartScheduler+0x134>)
 8009630:	2207      	movs	r2, #7
 8009632:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009634:	e009      	b.n	800964a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009636:	4b2f      	ldr	r3, [pc, #188]	; (80096f4 <xPortStartScheduler+0x134>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	3b01      	subs	r3, #1
 800963c:	4a2d      	ldr	r2, [pc, #180]	; (80096f4 <xPortStartScheduler+0x134>)
 800963e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009640:	78fb      	ldrb	r3, [r7, #3]
 8009642:	b2db      	uxtb	r3, r3
 8009644:	005b      	lsls	r3, r3, #1
 8009646:	b2db      	uxtb	r3, r3
 8009648:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800964a:	78fb      	ldrb	r3, [r7, #3]
 800964c:	b2db      	uxtb	r3, r3
 800964e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009652:	2b80      	cmp	r3, #128	; 0x80
 8009654:	d0ef      	beq.n	8009636 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009656:	4b27      	ldr	r3, [pc, #156]	; (80096f4 <xPortStartScheduler+0x134>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	f1c3 0307 	rsb	r3, r3, #7
 800965e:	2b04      	cmp	r3, #4
 8009660:	d00a      	beq.n	8009678 <xPortStartScheduler+0xb8>
	__asm volatile
 8009662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009666:	f383 8811 	msr	BASEPRI, r3
 800966a:	f3bf 8f6f 	isb	sy
 800966e:	f3bf 8f4f 	dsb	sy
 8009672:	60bb      	str	r3, [r7, #8]
}
 8009674:	bf00      	nop
 8009676:	e7fe      	b.n	8009676 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009678:	4b1e      	ldr	r3, [pc, #120]	; (80096f4 <xPortStartScheduler+0x134>)
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	021b      	lsls	r3, r3, #8
 800967e:	4a1d      	ldr	r2, [pc, #116]	; (80096f4 <xPortStartScheduler+0x134>)
 8009680:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009682:	4b1c      	ldr	r3, [pc, #112]	; (80096f4 <xPortStartScheduler+0x134>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800968a:	4a1a      	ldr	r2, [pc, #104]	; (80096f4 <xPortStartScheduler+0x134>)
 800968c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	b2da      	uxtb	r2, r3
 8009692:	697b      	ldr	r3, [r7, #20]
 8009694:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009696:	4b18      	ldr	r3, [pc, #96]	; (80096f8 <xPortStartScheduler+0x138>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	4a17      	ldr	r2, [pc, #92]	; (80096f8 <xPortStartScheduler+0x138>)
 800969c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80096a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80096a2:	4b15      	ldr	r3, [pc, #84]	; (80096f8 <xPortStartScheduler+0x138>)
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	4a14      	ldr	r2, [pc, #80]	; (80096f8 <xPortStartScheduler+0x138>)
 80096a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80096ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80096ae:	f000 f8dd 	bl	800986c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80096b2:	4b12      	ldr	r3, [pc, #72]	; (80096fc <xPortStartScheduler+0x13c>)
 80096b4:	2200      	movs	r2, #0
 80096b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80096b8:	f000 f8fc 	bl	80098b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80096bc:	4b10      	ldr	r3, [pc, #64]	; (8009700 <xPortStartScheduler+0x140>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	4a0f      	ldr	r2, [pc, #60]	; (8009700 <xPortStartScheduler+0x140>)
 80096c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80096c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80096c8:	f7ff ff66 	bl	8009598 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80096cc:	f7ff f848 	bl	8008760 <vTaskSwitchContext>
	prvTaskExitError();
 80096d0:	f7ff ff1e 	bl	8009510 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80096d4:	2300      	movs	r3, #0
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	3718      	adds	r7, #24
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}
 80096de:	bf00      	nop
 80096e0:	e000ed00 	.word	0xe000ed00
 80096e4:	410fc271 	.word	0x410fc271
 80096e8:	410fc270 	.word	0x410fc270
 80096ec:	e000e400 	.word	0xe000e400
 80096f0:	20001270 	.word	0x20001270
 80096f4:	20001274 	.word	0x20001274
 80096f8:	e000ed20 	.word	0xe000ed20
 80096fc:	2000000c 	.word	0x2000000c
 8009700:	e000ef34 	.word	0xe000ef34

08009704 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009704:	b480      	push	{r7}
 8009706:	b083      	sub	sp, #12
 8009708:	af00      	add	r7, sp, #0
	__asm volatile
 800970a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800970e:	f383 8811 	msr	BASEPRI, r3
 8009712:	f3bf 8f6f 	isb	sy
 8009716:	f3bf 8f4f 	dsb	sy
 800971a:	607b      	str	r3, [r7, #4]
}
 800971c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800971e:	4b0f      	ldr	r3, [pc, #60]	; (800975c <vPortEnterCritical+0x58>)
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	3301      	adds	r3, #1
 8009724:	4a0d      	ldr	r2, [pc, #52]	; (800975c <vPortEnterCritical+0x58>)
 8009726:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009728:	4b0c      	ldr	r3, [pc, #48]	; (800975c <vPortEnterCritical+0x58>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	2b01      	cmp	r3, #1
 800972e:	d10f      	bne.n	8009750 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009730:	4b0b      	ldr	r3, [pc, #44]	; (8009760 <vPortEnterCritical+0x5c>)
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	b2db      	uxtb	r3, r3
 8009736:	2b00      	cmp	r3, #0
 8009738:	d00a      	beq.n	8009750 <vPortEnterCritical+0x4c>
	__asm volatile
 800973a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800973e:	f383 8811 	msr	BASEPRI, r3
 8009742:	f3bf 8f6f 	isb	sy
 8009746:	f3bf 8f4f 	dsb	sy
 800974a:	603b      	str	r3, [r7, #0]
}
 800974c:	bf00      	nop
 800974e:	e7fe      	b.n	800974e <vPortEnterCritical+0x4a>
	}
}
 8009750:	bf00      	nop
 8009752:	370c      	adds	r7, #12
 8009754:	46bd      	mov	sp, r7
 8009756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975a:	4770      	bx	lr
 800975c:	2000000c 	.word	0x2000000c
 8009760:	e000ed04 	.word	0xe000ed04

08009764 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009764:	b480      	push	{r7}
 8009766:	b083      	sub	sp, #12
 8009768:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800976a:	4b12      	ldr	r3, [pc, #72]	; (80097b4 <vPortExitCritical+0x50>)
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d10a      	bne.n	8009788 <vPortExitCritical+0x24>
	__asm volatile
 8009772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009776:	f383 8811 	msr	BASEPRI, r3
 800977a:	f3bf 8f6f 	isb	sy
 800977e:	f3bf 8f4f 	dsb	sy
 8009782:	607b      	str	r3, [r7, #4]
}
 8009784:	bf00      	nop
 8009786:	e7fe      	b.n	8009786 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009788:	4b0a      	ldr	r3, [pc, #40]	; (80097b4 <vPortExitCritical+0x50>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	3b01      	subs	r3, #1
 800978e:	4a09      	ldr	r2, [pc, #36]	; (80097b4 <vPortExitCritical+0x50>)
 8009790:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009792:	4b08      	ldr	r3, [pc, #32]	; (80097b4 <vPortExitCritical+0x50>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d105      	bne.n	80097a6 <vPortExitCritical+0x42>
 800979a:	2300      	movs	r3, #0
 800979c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	f383 8811 	msr	BASEPRI, r3
}
 80097a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80097a6:	bf00      	nop
 80097a8:	370c      	adds	r7, #12
 80097aa:	46bd      	mov	sp, r7
 80097ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b0:	4770      	bx	lr
 80097b2:	bf00      	nop
 80097b4:	2000000c 	.word	0x2000000c
	...

080097c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80097c0:	f3ef 8009 	mrs	r0, PSP
 80097c4:	f3bf 8f6f 	isb	sy
 80097c8:	4b15      	ldr	r3, [pc, #84]	; (8009820 <pxCurrentTCBConst>)
 80097ca:	681a      	ldr	r2, [r3, #0]
 80097cc:	f01e 0f10 	tst.w	lr, #16
 80097d0:	bf08      	it	eq
 80097d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80097d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097da:	6010      	str	r0, [r2, #0]
 80097dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80097e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80097e4:	f380 8811 	msr	BASEPRI, r0
 80097e8:	f3bf 8f4f 	dsb	sy
 80097ec:	f3bf 8f6f 	isb	sy
 80097f0:	f7fe ffb6 	bl	8008760 <vTaskSwitchContext>
 80097f4:	f04f 0000 	mov.w	r0, #0
 80097f8:	f380 8811 	msr	BASEPRI, r0
 80097fc:	bc09      	pop	{r0, r3}
 80097fe:	6819      	ldr	r1, [r3, #0]
 8009800:	6808      	ldr	r0, [r1, #0]
 8009802:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009806:	f01e 0f10 	tst.w	lr, #16
 800980a:	bf08      	it	eq
 800980c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009810:	f380 8809 	msr	PSP, r0
 8009814:	f3bf 8f6f 	isb	sy
 8009818:	4770      	bx	lr
 800981a:	bf00      	nop
 800981c:	f3af 8000 	nop.w

08009820 <pxCurrentTCBConst>:
 8009820:	20000c44 	.word	0x20000c44
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009824:	bf00      	nop
 8009826:	bf00      	nop

08009828 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b082      	sub	sp, #8
 800982c:	af00      	add	r7, sp, #0
	__asm volatile
 800982e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009832:	f383 8811 	msr	BASEPRI, r3
 8009836:	f3bf 8f6f 	isb	sy
 800983a:	f3bf 8f4f 	dsb	sy
 800983e:	607b      	str	r3, [r7, #4]
}
 8009840:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009842:	f7fe fed3 	bl	80085ec <xTaskIncrementTick>
 8009846:	4603      	mov	r3, r0
 8009848:	2b00      	cmp	r3, #0
 800984a:	d003      	beq.n	8009854 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800984c:	4b06      	ldr	r3, [pc, #24]	; (8009868 <xPortSysTickHandler+0x40>)
 800984e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009852:	601a      	str	r2, [r3, #0]
 8009854:	2300      	movs	r3, #0
 8009856:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	f383 8811 	msr	BASEPRI, r3
}
 800985e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009860:	bf00      	nop
 8009862:	3708      	adds	r7, #8
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}
 8009868:	e000ed04 	.word	0xe000ed04

0800986c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800986c:	b480      	push	{r7}
 800986e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009870:	4b0b      	ldr	r3, [pc, #44]	; (80098a0 <vPortSetupTimerInterrupt+0x34>)
 8009872:	2200      	movs	r2, #0
 8009874:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009876:	4b0b      	ldr	r3, [pc, #44]	; (80098a4 <vPortSetupTimerInterrupt+0x38>)
 8009878:	2200      	movs	r2, #0
 800987a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800987c:	4b0a      	ldr	r3, [pc, #40]	; (80098a8 <vPortSetupTimerInterrupt+0x3c>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	4a0a      	ldr	r2, [pc, #40]	; (80098ac <vPortSetupTimerInterrupt+0x40>)
 8009882:	fba2 2303 	umull	r2, r3, r2, r3
 8009886:	099b      	lsrs	r3, r3, #6
 8009888:	4a09      	ldr	r2, [pc, #36]	; (80098b0 <vPortSetupTimerInterrupt+0x44>)
 800988a:	3b01      	subs	r3, #1
 800988c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800988e:	4b04      	ldr	r3, [pc, #16]	; (80098a0 <vPortSetupTimerInterrupt+0x34>)
 8009890:	2207      	movs	r2, #7
 8009892:	601a      	str	r2, [r3, #0]
}
 8009894:	bf00      	nop
 8009896:	46bd      	mov	sp, r7
 8009898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989c:	4770      	bx	lr
 800989e:	bf00      	nop
 80098a0:	e000e010 	.word	0xe000e010
 80098a4:	e000e018 	.word	0xe000e018
 80098a8:	20000000 	.word	0x20000000
 80098ac:	10624dd3 	.word	0x10624dd3
 80098b0:	e000e014 	.word	0xe000e014

080098b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80098b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80098c4 <vPortEnableVFP+0x10>
 80098b8:	6801      	ldr	r1, [r0, #0]
 80098ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80098be:	6001      	str	r1, [r0, #0]
 80098c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80098c2:	bf00      	nop
 80098c4:	e000ed88 	.word	0xe000ed88

080098c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80098c8:	b480      	push	{r7}
 80098ca:	b085      	sub	sp, #20
 80098cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80098ce:	f3ef 8305 	mrs	r3, IPSR
 80098d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	2b0f      	cmp	r3, #15
 80098d8:	d914      	bls.n	8009904 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80098da:	4a17      	ldr	r2, [pc, #92]	; (8009938 <vPortValidateInterruptPriority+0x70>)
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	4413      	add	r3, r2
 80098e0:	781b      	ldrb	r3, [r3, #0]
 80098e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80098e4:	4b15      	ldr	r3, [pc, #84]	; (800993c <vPortValidateInterruptPriority+0x74>)
 80098e6:	781b      	ldrb	r3, [r3, #0]
 80098e8:	7afa      	ldrb	r2, [r7, #11]
 80098ea:	429a      	cmp	r2, r3
 80098ec:	d20a      	bcs.n	8009904 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80098ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098f2:	f383 8811 	msr	BASEPRI, r3
 80098f6:	f3bf 8f6f 	isb	sy
 80098fa:	f3bf 8f4f 	dsb	sy
 80098fe:	607b      	str	r3, [r7, #4]
}
 8009900:	bf00      	nop
 8009902:	e7fe      	b.n	8009902 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009904:	4b0e      	ldr	r3, [pc, #56]	; (8009940 <vPortValidateInterruptPriority+0x78>)
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800990c:	4b0d      	ldr	r3, [pc, #52]	; (8009944 <vPortValidateInterruptPriority+0x7c>)
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	429a      	cmp	r2, r3
 8009912:	d90a      	bls.n	800992a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009918:	f383 8811 	msr	BASEPRI, r3
 800991c:	f3bf 8f6f 	isb	sy
 8009920:	f3bf 8f4f 	dsb	sy
 8009924:	603b      	str	r3, [r7, #0]
}
 8009926:	bf00      	nop
 8009928:	e7fe      	b.n	8009928 <vPortValidateInterruptPriority+0x60>
	}
 800992a:	bf00      	nop
 800992c:	3714      	adds	r7, #20
 800992e:	46bd      	mov	sp, r7
 8009930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009934:	4770      	bx	lr
 8009936:	bf00      	nop
 8009938:	e000e3f0 	.word	0xe000e3f0
 800993c:	20001270 	.word	0x20001270
 8009940:	e000ed0c 	.word	0xe000ed0c
 8009944:	20001274 	.word	0x20001274

08009948 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b08a      	sub	sp, #40	; 0x28
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009950:	2300      	movs	r3, #0
 8009952:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009954:	f7fe fd8e 	bl	8008474 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009958:	4b5b      	ldr	r3, [pc, #364]	; (8009ac8 <pvPortMalloc+0x180>)
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d101      	bne.n	8009964 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009960:	f000 f920 	bl	8009ba4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009964:	4b59      	ldr	r3, [pc, #356]	; (8009acc <pvPortMalloc+0x184>)
 8009966:	681a      	ldr	r2, [r3, #0]
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	4013      	ands	r3, r2
 800996c:	2b00      	cmp	r3, #0
 800996e:	f040 8093 	bne.w	8009a98 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d01d      	beq.n	80099b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009978:	2208      	movs	r2, #8
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	4413      	add	r3, r2
 800997e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f003 0307 	and.w	r3, r3, #7
 8009986:	2b00      	cmp	r3, #0
 8009988:	d014      	beq.n	80099b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	f023 0307 	bic.w	r3, r3, #7
 8009990:	3308      	adds	r3, #8
 8009992:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f003 0307 	and.w	r3, r3, #7
 800999a:	2b00      	cmp	r3, #0
 800999c:	d00a      	beq.n	80099b4 <pvPortMalloc+0x6c>
	__asm volatile
 800999e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099a2:	f383 8811 	msr	BASEPRI, r3
 80099a6:	f3bf 8f6f 	isb	sy
 80099aa:	f3bf 8f4f 	dsb	sy
 80099ae:	617b      	str	r3, [r7, #20]
}
 80099b0:	bf00      	nop
 80099b2:	e7fe      	b.n	80099b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d06e      	beq.n	8009a98 <pvPortMalloc+0x150>
 80099ba:	4b45      	ldr	r3, [pc, #276]	; (8009ad0 <pvPortMalloc+0x188>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	687a      	ldr	r2, [r7, #4]
 80099c0:	429a      	cmp	r2, r3
 80099c2:	d869      	bhi.n	8009a98 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80099c4:	4b43      	ldr	r3, [pc, #268]	; (8009ad4 <pvPortMalloc+0x18c>)
 80099c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80099c8:	4b42      	ldr	r3, [pc, #264]	; (8009ad4 <pvPortMalloc+0x18c>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80099ce:	e004      	b.n	80099da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80099d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80099d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80099da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099dc:	685b      	ldr	r3, [r3, #4]
 80099de:	687a      	ldr	r2, [r7, #4]
 80099e0:	429a      	cmp	r2, r3
 80099e2:	d903      	bls.n	80099ec <pvPortMalloc+0xa4>
 80099e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d1f1      	bne.n	80099d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80099ec:	4b36      	ldr	r3, [pc, #216]	; (8009ac8 <pvPortMalloc+0x180>)
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099f2:	429a      	cmp	r2, r3
 80099f4:	d050      	beq.n	8009a98 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80099f6:	6a3b      	ldr	r3, [r7, #32]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	2208      	movs	r2, #8
 80099fc:	4413      	add	r3, r2
 80099fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a02:	681a      	ldr	r2, [r3, #0]
 8009a04:	6a3b      	ldr	r3, [r7, #32]
 8009a06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a0a:	685a      	ldr	r2, [r3, #4]
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	1ad2      	subs	r2, r2, r3
 8009a10:	2308      	movs	r3, #8
 8009a12:	005b      	lsls	r3, r3, #1
 8009a14:	429a      	cmp	r2, r3
 8009a16:	d91f      	bls.n	8009a58 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009a18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	4413      	add	r3, r2
 8009a1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a20:	69bb      	ldr	r3, [r7, #24]
 8009a22:	f003 0307 	and.w	r3, r3, #7
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d00a      	beq.n	8009a40 <pvPortMalloc+0xf8>
	__asm volatile
 8009a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a2e:	f383 8811 	msr	BASEPRI, r3
 8009a32:	f3bf 8f6f 	isb	sy
 8009a36:	f3bf 8f4f 	dsb	sy
 8009a3a:	613b      	str	r3, [r7, #16]
}
 8009a3c:	bf00      	nop
 8009a3e:	e7fe      	b.n	8009a3e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a42:	685a      	ldr	r2, [r3, #4]
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	1ad2      	subs	r2, r2, r3
 8009a48:	69bb      	ldr	r3, [r7, #24]
 8009a4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a4e:	687a      	ldr	r2, [r7, #4]
 8009a50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009a52:	69b8      	ldr	r0, [r7, #24]
 8009a54:	f000 f908 	bl	8009c68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009a58:	4b1d      	ldr	r3, [pc, #116]	; (8009ad0 <pvPortMalloc+0x188>)
 8009a5a:	681a      	ldr	r2, [r3, #0]
 8009a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a5e:	685b      	ldr	r3, [r3, #4]
 8009a60:	1ad3      	subs	r3, r2, r3
 8009a62:	4a1b      	ldr	r2, [pc, #108]	; (8009ad0 <pvPortMalloc+0x188>)
 8009a64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009a66:	4b1a      	ldr	r3, [pc, #104]	; (8009ad0 <pvPortMalloc+0x188>)
 8009a68:	681a      	ldr	r2, [r3, #0]
 8009a6a:	4b1b      	ldr	r3, [pc, #108]	; (8009ad8 <pvPortMalloc+0x190>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	429a      	cmp	r2, r3
 8009a70:	d203      	bcs.n	8009a7a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009a72:	4b17      	ldr	r3, [pc, #92]	; (8009ad0 <pvPortMalloc+0x188>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	4a18      	ldr	r2, [pc, #96]	; (8009ad8 <pvPortMalloc+0x190>)
 8009a78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a7c:	685a      	ldr	r2, [r3, #4]
 8009a7e:	4b13      	ldr	r3, [pc, #76]	; (8009acc <pvPortMalloc+0x184>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	431a      	orrs	r2, r3
 8009a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009a8e:	4b13      	ldr	r3, [pc, #76]	; (8009adc <pvPortMalloc+0x194>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	3301      	adds	r3, #1
 8009a94:	4a11      	ldr	r2, [pc, #68]	; (8009adc <pvPortMalloc+0x194>)
 8009a96:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009a98:	f7fe fcfa 	bl	8008490 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a9c:	69fb      	ldr	r3, [r7, #28]
 8009a9e:	f003 0307 	and.w	r3, r3, #7
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d00a      	beq.n	8009abc <pvPortMalloc+0x174>
	__asm volatile
 8009aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aaa:	f383 8811 	msr	BASEPRI, r3
 8009aae:	f3bf 8f6f 	isb	sy
 8009ab2:	f3bf 8f4f 	dsb	sy
 8009ab6:	60fb      	str	r3, [r7, #12]
}
 8009ab8:	bf00      	nop
 8009aba:	e7fe      	b.n	8009aba <pvPortMalloc+0x172>
	return pvReturn;
 8009abc:	69fb      	ldr	r3, [r7, #28]
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3728      	adds	r7, #40	; 0x28
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}
 8009ac6:	bf00      	nop
 8009ac8:	20002608 	.word	0x20002608
 8009acc:	2000261c 	.word	0x2000261c
 8009ad0:	2000260c 	.word	0x2000260c
 8009ad4:	20002600 	.word	0x20002600
 8009ad8:	20002610 	.word	0x20002610
 8009adc:	20002614 	.word	0x20002614

08009ae0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b086      	sub	sp, #24
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d04d      	beq.n	8009b8e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009af2:	2308      	movs	r3, #8
 8009af4:	425b      	negs	r3, r3
 8009af6:	697a      	ldr	r2, [r7, #20]
 8009af8:	4413      	add	r3, r2
 8009afa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009afc:	697b      	ldr	r3, [r7, #20]
 8009afe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009b00:	693b      	ldr	r3, [r7, #16]
 8009b02:	685a      	ldr	r2, [r3, #4]
 8009b04:	4b24      	ldr	r3, [pc, #144]	; (8009b98 <vPortFree+0xb8>)
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	4013      	ands	r3, r2
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d10a      	bne.n	8009b24 <vPortFree+0x44>
	__asm volatile
 8009b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b12:	f383 8811 	msr	BASEPRI, r3
 8009b16:	f3bf 8f6f 	isb	sy
 8009b1a:	f3bf 8f4f 	dsb	sy
 8009b1e:	60fb      	str	r3, [r7, #12]
}
 8009b20:	bf00      	nop
 8009b22:	e7fe      	b.n	8009b22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009b24:	693b      	ldr	r3, [r7, #16]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d00a      	beq.n	8009b42 <vPortFree+0x62>
	__asm volatile
 8009b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b30:	f383 8811 	msr	BASEPRI, r3
 8009b34:	f3bf 8f6f 	isb	sy
 8009b38:	f3bf 8f4f 	dsb	sy
 8009b3c:	60bb      	str	r3, [r7, #8]
}
 8009b3e:	bf00      	nop
 8009b40:	e7fe      	b.n	8009b40 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009b42:	693b      	ldr	r3, [r7, #16]
 8009b44:	685a      	ldr	r2, [r3, #4]
 8009b46:	4b14      	ldr	r3, [pc, #80]	; (8009b98 <vPortFree+0xb8>)
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	4013      	ands	r3, r2
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d01e      	beq.n	8009b8e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009b50:	693b      	ldr	r3, [r7, #16]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d11a      	bne.n	8009b8e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009b58:	693b      	ldr	r3, [r7, #16]
 8009b5a:	685a      	ldr	r2, [r3, #4]
 8009b5c:	4b0e      	ldr	r3, [pc, #56]	; (8009b98 <vPortFree+0xb8>)
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	43db      	mvns	r3, r3
 8009b62:	401a      	ands	r2, r3
 8009b64:	693b      	ldr	r3, [r7, #16]
 8009b66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009b68:	f7fe fc84 	bl	8008474 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009b6c:	693b      	ldr	r3, [r7, #16]
 8009b6e:	685a      	ldr	r2, [r3, #4]
 8009b70:	4b0a      	ldr	r3, [pc, #40]	; (8009b9c <vPortFree+0xbc>)
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	4413      	add	r3, r2
 8009b76:	4a09      	ldr	r2, [pc, #36]	; (8009b9c <vPortFree+0xbc>)
 8009b78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009b7a:	6938      	ldr	r0, [r7, #16]
 8009b7c:	f000 f874 	bl	8009c68 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009b80:	4b07      	ldr	r3, [pc, #28]	; (8009ba0 <vPortFree+0xc0>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	3301      	adds	r3, #1
 8009b86:	4a06      	ldr	r2, [pc, #24]	; (8009ba0 <vPortFree+0xc0>)
 8009b88:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009b8a:	f7fe fc81 	bl	8008490 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009b8e:	bf00      	nop
 8009b90:	3718      	adds	r7, #24
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}
 8009b96:	bf00      	nop
 8009b98:	2000261c 	.word	0x2000261c
 8009b9c:	2000260c 	.word	0x2000260c
 8009ba0:	20002618 	.word	0x20002618

08009ba4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009ba4:	b480      	push	{r7}
 8009ba6:	b085      	sub	sp, #20
 8009ba8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009baa:	f241 3388 	movw	r3, #5000	; 0x1388
 8009bae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009bb0:	4b27      	ldr	r3, [pc, #156]	; (8009c50 <prvHeapInit+0xac>)
 8009bb2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	f003 0307 	and.w	r3, r3, #7
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d00c      	beq.n	8009bd8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	3307      	adds	r3, #7
 8009bc2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	f023 0307 	bic.w	r3, r3, #7
 8009bca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009bcc:	68ba      	ldr	r2, [r7, #8]
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	1ad3      	subs	r3, r2, r3
 8009bd2:	4a1f      	ldr	r2, [pc, #124]	; (8009c50 <prvHeapInit+0xac>)
 8009bd4:	4413      	add	r3, r2
 8009bd6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009bdc:	4a1d      	ldr	r2, [pc, #116]	; (8009c54 <prvHeapInit+0xb0>)
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009be2:	4b1c      	ldr	r3, [pc, #112]	; (8009c54 <prvHeapInit+0xb0>)
 8009be4:	2200      	movs	r2, #0
 8009be6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	68ba      	ldr	r2, [r7, #8]
 8009bec:	4413      	add	r3, r2
 8009bee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009bf0:	2208      	movs	r2, #8
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	1a9b      	subs	r3, r3, r2
 8009bf6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	f023 0307 	bic.w	r3, r3, #7
 8009bfe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	4a15      	ldr	r2, [pc, #84]	; (8009c58 <prvHeapInit+0xb4>)
 8009c04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009c06:	4b14      	ldr	r3, [pc, #80]	; (8009c58 <prvHeapInit+0xb4>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009c0e:	4b12      	ldr	r3, [pc, #72]	; (8009c58 <prvHeapInit+0xb4>)
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	2200      	movs	r2, #0
 8009c14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	68fa      	ldr	r2, [r7, #12]
 8009c1e:	1ad2      	subs	r2, r2, r3
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009c24:	4b0c      	ldr	r3, [pc, #48]	; (8009c58 <prvHeapInit+0xb4>)
 8009c26:	681a      	ldr	r2, [r3, #0]
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	685b      	ldr	r3, [r3, #4]
 8009c30:	4a0a      	ldr	r2, [pc, #40]	; (8009c5c <prvHeapInit+0xb8>)
 8009c32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	685b      	ldr	r3, [r3, #4]
 8009c38:	4a09      	ldr	r2, [pc, #36]	; (8009c60 <prvHeapInit+0xbc>)
 8009c3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009c3c:	4b09      	ldr	r3, [pc, #36]	; (8009c64 <prvHeapInit+0xc0>)
 8009c3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009c42:	601a      	str	r2, [r3, #0]
}
 8009c44:	bf00      	nop
 8009c46:	3714      	adds	r7, #20
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4e:	4770      	bx	lr
 8009c50:	20001278 	.word	0x20001278
 8009c54:	20002600 	.word	0x20002600
 8009c58:	20002608 	.word	0x20002608
 8009c5c:	20002610 	.word	0x20002610
 8009c60:	2000260c 	.word	0x2000260c
 8009c64:	2000261c 	.word	0x2000261c

08009c68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009c68:	b480      	push	{r7}
 8009c6a:	b085      	sub	sp, #20
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009c70:	4b28      	ldr	r3, [pc, #160]	; (8009d14 <prvInsertBlockIntoFreeList+0xac>)
 8009c72:	60fb      	str	r3, [r7, #12]
 8009c74:	e002      	b.n	8009c7c <prvInsertBlockIntoFreeList+0x14>
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	60fb      	str	r3, [r7, #12]
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	687a      	ldr	r2, [r7, #4]
 8009c82:	429a      	cmp	r2, r3
 8009c84:	d8f7      	bhi.n	8009c76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	685b      	ldr	r3, [r3, #4]
 8009c8e:	68ba      	ldr	r2, [r7, #8]
 8009c90:	4413      	add	r3, r2
 8009c92:	687a      	ldr	r2, [r7, #4]
 8009c94:	429a      	cmp	r2, r3
 8009c96:	d108      	bne.n	8009caa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	685a      	ldr	r2, [r3, #4]
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	685b      	ldr	r3, [r3, #4]
 8009ca0:	441a      	add	r2, r3
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	685b      	ldr	r3, [r3, #4]
 8009cb2:	68ba      	ldr	r2, [r7, #8]
 8009cb4:	441a      	add	r2, r3
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	429a      	cmp	r2, r3
 8009cbc:	d118      	bne.n	8009cf0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	681a      	ldr	r2, [r3, #0]
 8009cc2:	4b15      	ldr	r3, [pc, #84]	; (8009d18 <prvInsertBlockIntoFreeList+0xb0>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	429a      	cmp	r2, r3
 8009cc8:	d00d      	beq.n	8009ce6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	685a      	ldr	r2, [r3, #4]
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	685b      	ldr	r3, [r3, #4]
 8009cd4:	441a      	add	r2, r3
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	681a      	ldr	r2, [r3, #0]
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	601a      	str	r2, [r3, #0]
 8009ce4:	e008      	b.n	8009cf8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009ce6:	4b0c      	ldr	r3, [pc, #48]	; (8009d18 <prvInsertBlockIntoFreeList+0xb0>)
 8009ce8:	681a      	ldr	r2, [r3, #0]
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	601a      	str	r2, [r3, #0]
 8009cee:	e003      	b.n	8009cf8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	681a      	ldr	r2, [r3, #0]
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009cf8:	68fa      	ldr	r2, [r7, #12]
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	429a      	cmp	r2, r3
 8009cfe:	d002      	beq.n	8009d06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	687a      	ldr	r2, [r7, #4]
 8009d04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009d06:	bf00      	nop
 8009d08:	3714      	adds	r7, #20
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d10:	4770      	bx	lr
 8009d12:	bf00      	nop
 8009d14:	20002600 	.word	0x20002600
 8009d18:	20002608 	.word	0x20002608

08009d1c <__cvt>:
 8009d1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009d20:	ec55 4b10 	vmov	r4, r5, d0
 8009d24:	2d00      	cmp	r5, #0
 8009d26:	460e      	mov	r6, r1
 8009d28:	4619      	mov	r1, r3
 8009d2a:	462b      	mov	r3, r5
 8009d2c:	bfbb      	ittet	lt
 8009d2e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009d32:	461d      	movlt	r5, r3
 8009d34:	2300      	movge	r3, #0
 8009d36:	232d      	movlt	r3, #45	; 0x2d
 8009d38:	700b      	strb	r3, [r1, #0]
 8009d3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d3c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009d40:	4691      	mov	r9, r2
 8009d42:	f023 0820 	bic.w	r8, r3, #32
 8009d46:	bfbc      	itt	lt
 8009d48:	4622      	movlt	r2, r4
 8009d4a:	4614      	movlt	r4, r2
 8009d4c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009d50:	d005      	beq.n	8009d5e <__cvt+0x42>
 8009d52:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009d56:	d100      	bne.n	8009d5a <__cvt+0x3e>
 8009d58:	3601      	adds	r6, #1
 8009d5a:	2102      	movs	r1, #2
 8009d5c:	e000      	b.n	8009d60 <__cvt+0x44>
 8009d5e:	2103      	movs	r1, #3
 8009d60:	ab03      	add	r3, sp, #12
 8009d62:	9301      	str	r3, [sp, #4]
 8009d64:	ab02      	add	r3, sp, #8
 8009d66:	9300      	str	r3, [sp, #0]
 8009d68:	ec45 4b10 	vmov	d0, r4, r5
 8009d6c:	4653      	mov	r3, sl
 8009d6e:	4632      	mov	r2, r6
 8009d70:	f000 fe92 	bl	800aa98 <_dtoa_r>
 8009d74:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009d78:	4607      	mov	r7, r0
 8009d7a:	d102      	bne.n	8009d82 <__cvt+0x66>
 8009d7c:	f019 0f01 	tst.w	r9, #1
 8009d80:	d022      	beq.n	8009dc8 <__cvt+0xac>
 8009d82:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009d86:	eb07 0906 	add.w	r9, r7, r6
 8009d8a:	d110      	bne.n	8009dae <__cvt+0x92>
 8009d8c:	783b      	ldrb	r3, [r7, #0]
 8009d8e:	2b30      	cmp	r3, #48	; 0x30
 8009d90:	d10a      	bne.n	8009da8 <__cvt+0x8c>
 8009d92:	2200      	movs	r2, #0
 8009d94:	2300      	movs	r3, #0
 8009d96:	4620      	mov	r0, r4
 8009d98:	4629      	mov	r1, r5
 8009d9a:	f7f6 fe95 	bl	8000ac8 <__aeabi_dcmpeq>
 8009d9e:	b918      	cbnz	r0, 8009da8 <__cvt+0x8c>
 8009da0:	f1c6 0601 	rsb	r6, r6, #1
 8009da4:	f8ca 6000 	str.w	r6, [sl]
 8009da8:	f8da 3000 	ldr.w	r3, [sl]
 8009dac:	4499      	add	r9, r3
 8009dae:	2200      	movs	r2, #0
 8009db0:	2300      	movs	r3, #0
 8009db2:	4620      	mov	r0, r4
 8009db4:	4629      	mov	r1, r5
 8009db6:	f7f6 fe87 	bl	8000ac8 <__aeabi_dcmpeq>
 8009dba:	b108      	cbz	r0, 8009dc0 <__cvt+0xa4>
 8009dbc:	f8cd 900c 	str.w	r9, [sp, #12]
 8009dc0:	2230      	movs	r2, #48	; 0x30
 8009dc2:	9b03      	ldr	r3, [sp, #12]
 8009dc4:	454b      	cmp	r3, r9
 8009dc6:	d307      	bcc.n	8009dd8 <__cvt+0xbc>
 8009dc8:	9b03      	ldr	r3, [sp, #12]
 8009dca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009dcc:	1bdb      	subs	r3, r3, r7
 8009dce:	4638      	mov	r0, r7
 8009dd0:	6013      	str	r3, [r2, #0]
 8009dd2:	b004      	add	sp, #16
 8009dd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dd8:	1c59      	adds	r1, r3, #1
 8009dda:	9103      	str	r1, [sp, #12]
 8009ddc:	701a      	strb	r2, [r3, #0]
 8009dde:	e7f0      	b.n	8009dc2 <__cvt+0xa6>

08009de0 <__exponent>:
 8009de0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009de2:	4603      	mov	r3, r0
 8009de4:	2900      	cmp	r1, #0
 8009de6:	bfb8      	it	lt
 8009de8:	4249      	neglt	r1, r1
 8009dea:	f803 2b02 	strb.w	r2, [r3], #2
 8009dee:	bfb4      	ite	lt
 8009df0:	222d      	movlt	r2, #45	; 0x2d
 8009df2:	222b      	movge	r2, #43	; 0x2b
 8009df4:	2909      	cmp	r1, #9
 8009df6:	7042      	strb	r2, [r0, #1]
 8009df8:	dd2a      	ble.n	8009e50 <__exponent+0x70>
 8009dfa:	f10d 0207 	add.w	r2, sp, #7
 8009dfe:	4617      	mov	r7, r2
 8009e00:	260a      	movs	r6, #10
 8009e02:	4694      	mov	ip, r2
 8009e04:	fb91 f5f6 	sdiv	r5, r1, r6
 8009e08:	fb06 1415 	mls	r4, r6, r5, r1
 8009e0c:	3430      	adds	r4, #48	; 0x30
 8009e0e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009e12:	460c      	mov	r4, r1
 8009e14:	2c63      	cmp	r4, #99	; 0x63
 8009e16:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8009e1a:	4629      	mov	r1, r5
 8009e1c:	dcf1      	bgt.n	8009e02 <__exponent+0x22>
 8009e1e:	3130      	adds	r1, #48	; 0x30
 8009e20:	f1ac 0402 	sub.w	r4, ip, #2
 8009e24:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009e28:	1c41      	adds	r1, r0, #1
 8009e2a:	4622      	mov	r2, r4
 8009e2c:	42ba      	cmp	r2, r7
 8009e2e:	d30a      	bcc.n	8009e46 <__exponent+0x66>
 8009e30:	f10d 0209 	add.w	r2, sp, #9
 8009e34:	eba2 020c 	sub.w	r2, r2, ip
 8009e38:	42bc      	cmp	r4, r7
 8009e3a:	bf88      	it	hi
 8009e3c:	2200      	movhi	r2, #0
 8009e3e:	4413      	add	r3, r2
 8009e40:	1a18      	subs	r0, r3, r0
 8009e42:	b003      	add	sp, #12
 8009e44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e46:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009e4a:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009e4e:	e7ed      	b.n	8009e2c <__exponent+0x4c>
 8009e50:	2330      	movs	r3, #48	; 0x30
 8009e52:	3130      	adds	r1, #48	; 0x30
 8009e54:	7083      	strb	r3, [r0, #2]
 8009e56:	70c1      	strb	r1, [r0, #3]
 8009e58:	1d03      	adds	r3, r0, #4
 8009e5a:	e7f1      	b.n	8009e40 <__exponent+0x60>

08009e5c <_printf_float>:
 8009e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e60:	ed2d 8b02 	vpush	{d8}
 8009e64:	b08d      	sub	sp, #52	; 0x34
 8009e66:	460c      	mov	r4, r1
 8009e68:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009e6c:	4616      	mov	r6, r2
 8009e6e:	461f      	mov	r7, r3
 8009e70:	4605      	mov	r5, r0
 8009e72:	f000 fcf1 	bl	800a858 <_localeconv_r>
 8009e76:	f8d0 a000 	ldr.w	sl, [r0]
 8009e7a:	4650      	mov	r0, sl
 8009e7c:	f7f6 f9f8 	bl	8000270 <strlen>
 8009e80:	2300      	movs	r3, #0
 8009e82:	930a      	str	r3, [sp, #40]	; 0x28
 8009e84:	6823      	ldr	r3, [r4, #0]
 8009e86:	9305      	str	r3, [sp, #20]
 8009e88:	f8d8 3000 	ldr.w	r3, [r8]
 8009e8c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009e90:	3307      	adds	r3, #7
 8009e92:	f023 0307 	bic.w	r3, r3, #7
 8009e96:	f103 0208 	add.w	r2, r3, #8
 8009e9a:	f8c8 2000 	str.w	r2, [r8]
 8009e9e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009ea2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009ea6:	9307      	str	r3, [sp, #28]
 8009ea8:	f8cd 8018 	str.w	r8, [sp, #24]
 8009eac:	ee08 0a10 	vmov	s16, r0
 8009eb0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8009eb4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009eb8:	4b9e      	ldr	r3, [pc, #632]	; (800a134 <_printf_float+0x2d8>)
 8009eba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009ebe:	f7f6 fe35 	bl	8000b2c <__aeabi_dcmpun>
 8009ec2:	bb88      	cbnz	r0, 8009f28 <_printf_float+0xcc>
 8009ec4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009ec8:	4b9a      	ldr	r3, [pc, #616]	; (800a134 <_printf_float+0x2d8>)
 8009eca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009ece:	f7f6 fe0f 	bl	8000af0 <__aeabi_dcmple>
 8009ed2:	bb48      	cbnz	r0, 8009f28 <_printf_float+0xcc>
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	4640      	mov	r0, r8
 8009eda:	4649      	mov	r1, r9
 8009edc:	f7f6 fdfe 	bl	8000adc <__aeabi_dcmplt>
 8009ee0:	b110      	cbz	r0, 8009ee8 <_printf_float+0x8c>
 8009ee2:	232d      	movs	r3, #45	; 0x2d
 8009ee4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ee8:	4a93      	ldr	r2, [pc, #588]	; (800a138 <_printf_float+0x2dc>)
 8009eea:	4b94      	ldr	r3, [pc, #592]	; (800a13c <_printf_float+0x2e0>)
 8009eec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009ef0:	bf94      	ite	ls
 8009ef2:	4690      	movls	r8, r2
 8009ef4:	4698      	movhi	r8, r3
 8009ef6:	2303      	movs	r3, #3
 8009ef8:	6123      	str	r3, [r4, #16]
 8009efa:	9b05      	ldr	r3, [sp, #20]
 8009efc:	f023 0304 	bic.w	r3, r3, #4
 8009f00:	6023      	str	r3, [r4, #0]
 8009f02:	f04f 0900 	mov.w	r9, #0
 8009f06:	9700      	str	r7, [sp, #0]
 8009f08:	4633      	mov	r3, r6
 8009f0a:	aa0b      	add	r2, sp, #44	; 0x2c
 8009f0c:	4621      	mov	r1, r4
 8009f0e:	4628      	mov	r0, r5
 8009f10:	f000 f9da 	bl	800a2c8 <_printf_common>
 8009f14:	3001      	adds	r0, #1
 8009f16:	f040 8090 	bne.w	800a03a <_printf_float+0x1de>
 8009f1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009f1e:	b00d      	add	sp, #52	; 0x34
 8009f20:	ecbd 8b02 	vpop	{d8}
 8009f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f28:	4642      	mov	r2, r8
 8009f2a:	464b      	mov	r3, r9
 8009f2c:	4640      	mov	r0, r8
 8009f2e:	4649      	mov	r1, r9
 8009f30:	f7f6 fdfc 	bl	8000b2c <__aeabi_dcmpun>
 8009f34:	b140      	cbz	r0, 8009f48 <_printf_float+0xec>
 8009f36:	464b      	mov	r3, r9
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	bfbc      	itt	lt
 8009f3c:	232d      	movlt	r3, #45	; 0x2d
 8009f3e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009f42:	4a7f      	ldr	r2, [pc, #508]	; (800a140 <_printf_float+0x2e4>)
 8009f44:	4b7f      	ldr	r3, [pc, #508]	; (800a144 <_printf_float+0x2e8>)
 8009f46:	e7d1      	b.n	8009eec <_printf_float+0x90>
 8009f48:	6863      	ldr	r3, [r4, #4]
 8009f4a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009f4e:	9206      	str	r2, [sp, #24]
 8009f50:	1c5a      	adds	r2, r3, #1
 8009f52:	d13f      	bne.n	8009fd4 <_printf_float+0x178>
 8009f54:	2306      	movs	r3, #6
 8009f56:	6063      	str	r3, [r4, #4]
 8009f58:	9b05      	ldr	r3, [sp, #20]
 8009f5a:	6861      	ldr	r1, [r4, #4]
 8009f5c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009f60:	2300      	movs	r3, #0
 8009f62:	9303      	str	r3, [sp, #12]
 8009f64:	ab0a      	add	r3, sp, #40	; 0x28
 8009f66:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009f6a:	ab09      	add	r3, sp, #36	; 0x24
 8009f6c:	ec49 8b10 	vmov	d0, r8, r9
 8009f70:	9300      	str	r3, [sp, #0]
 8009f72:	6022      	str	r2, [r4, #0]
 8009f74:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009f78:	4628      	mov	r0, r5
 8009f7a:	f7ff fecf 	bl	8009d1c <__cvt>
 8009f7e:	9b06      	ldr	r3, [sp, #24]
 8009f80:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009f82:	2b47      	cmp	r3, #71	; 0x47
 8009f84:	4680      	mov	r8, r0
 8009f86:	d108      	bne.n	8009f9a <_printf_float+0x13e>
 8009f88:	1cc8      	adds	r0, r1, #3
 8009f8a:	db02      	blt.n	8009f92 <_printf_float+0x136>
 8009f8c:	6863      	ldr	r3, [r4, #4]
 8009f8e:	4299      	cmp	r1, r3
 8009f90:	dd41      	ble.n	800a016 <_printf_float+0x1ba>
 8009f92:	f1ab 0302 	sub.w	r3, fp, #2
 8009f96:	fa5f fb83 	uxtb.w	fp, r3
 8009f9a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009f9e:	d820      	bhi.n	8009fe2 <_printf_float+0x186>
 8009fa0:	3901      	subs	r1, #1
 8009fa2:	465a      	mov	r2, fp
 8009fa4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009fa8:	9109      	str	r1, [sp, #36]	; 0x24
 8009faa:	f7ff ff19 	bl	8009de0 <__exponent>
 8009fae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009fb0:	1813      	adds	r3, r2, r0
 8009fb2:	2a01      	cmp	r2, #1
 8009fb4:	4681      	mov	r9, r0
 8009fb6:	6123      	str	r3, [r4, #16]
 8009fb8:	dc02      	bgt.n	8009fc0 <_printf_float+0x164>
 8009fba:	6822      	ldr	r2, [r4, #0]
 8009fbc:	07d2      	lsls	r2, r2, #31
 8009fbe:	d501      	bpl.n	8009fc4 <_printf_float+0x168>
 8009fc0:	3301      	adds	r3, #1
 8009fc2:	6123      	str	r3, [r4, #16]
 8009fc4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d09c      	beq.n	8009f06 <_printf_float+0xaa>
 8009fcc:	232d      	movs	r3, #45	; 0x2d
 8009fce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009fd2:	e798      	b.n	8009f06 <_printf_float+0xaa>
 8009fd4:	9a06      	ldr	r2, [sp, #24]
 8009fd6:	2a47      	cmp	r2, #71	; 0x47
 8009fd8:	d1be      	bne.n	8009f58 <_printf_float+0xfc>
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d1bc      	bne.n	8009f58 <_printf_float+0xfc>
 8009fde:	2301      	movs	r3, #1
 8009fe0:	e7b9      	b.n	8009f56 <_printf_float+0xfa>
 8009fe2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009fe6:	d118      	bne.n	800a01a <_printf_float+0x1be>
 8009fe8:	2900      	cmp	r1, #0
 8009fea:	6863      	ldr	r3, [r4, #4]
 8009fec:	dd0b      	ble.n	800a006 <_printf_float+0x1aa>
 8009fee:	6121      	str	r1, [r4, #16]
 8009ff0:	b913      	cbnz	r3, 8009ff8 <_printf_float+0x19c>
 8009ff2:	6822      	ldr	r2, [r4, #0]
 8009ff4:	07d0      	lsls	r0, r2, #31
 8009ff6:	d502      	bpl.n	8009ffe <_printf_float+0x1a2>
 8009ff8:	3301      	adds	r3, #1
 8009ffa:	440b      	add	r3, r1
 8009ffc:	6123      	str	r3, [r4, #16]
 8009ffe:	65a1      	str	r1, [r4, #88]	; 0x58
 800a000:	f04f 0900 	mov.w	r9, #0
 800a004:	e7de      	b.n	8009fc4 <_printf_float+0x168>
 800a006:	b913      	cbnz	r3, 800a00e <_printf_float+0x1b2>
 800a008:	6822      	ldr	r2, [r4, #0]
 800a00a:	07d2      	lsls	r2, r2, #31
 800a00c:	d501      	bpl.n	800a012 <_printf_float+0x1b6>
 800a00e:	3302      	adds	r3, #2
 800a010:	e7f4      	b.n	8009ffc <_printf_float+0x1a0>
 800a012:	2301      	movs	r3, #1
 800a014:	e7f2      	b.n	8009ffc <_printf_float+0x1a0>
 800a016:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a01a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a01c:	4299      	cmp	r1, r3
 800a01e:	db05      	blt.n	800a02c <_printf_float+0x1d0>
 800a020:	6823      	ldr	r3, [r4, #0]
 800a022:	6121      	str	r1, [r4, #16]
 800a024:	07d8      	lsls	r0, r3, #31
 800a026:	d5ea      	bpl.n	8009ffe <_printf_float+0x1a2>
 800a028:	1c4b      	adds	r3, r1, #1
 800a02a:	e7e7      	b.n	8009ffc <_printf_float+0x1a0>
 800a02c:	2900      	cmp	r1, #0
 800a02e:	bfd4      	ite	le
 800a030:	f1c1 0202 	rsble	r2, r1, #2
 800a034:	2201      	movgt	r2, #1
 800a036:	4413      	add	r3, r2
 800a038:	e7e0      	b.n	8009ffc <_printf_float+0x1a0>
 800a03a:	6823      	ldr	r3, [r4, #0]
 800a03c:	055a      	lsls	r2, r3, #21
 800a03e:	d407      	bmi.n	800a050 <_printf_float+0x1f4>
 800a040:	6923      	ldr	r3, [r4, #16]
 800a042:	4642      	mov	r2, r8
 800a044:	4631      	mov	r1, r6
 800a046:	4628      	mov	r0, r5
 800a048:	47b8      	blx	r7
 800a04a:	3001      	adds	r0, #1
 800a04c:	d12c      	bne.n	800a0a8 <_printf_float+0x24c>
 800a04e:	e764      	b.n	8009f1a <_printf_float+0xbe>
 800a050:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a054:	f240 80e0 	bls.w	800a218 <_printf_float+0x3bc>
 800a058:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a05c:	2200      	movs	r2, #0
 800a05e:	2300      	movs	r3, #0
 800a060:	f7f6 fd32 	bl	8000ac8 <__aeabi_dcmpeq>
 800a064:	2800      	cmp	r0, #0
 800a066:	d034      	beq.n	800a0d2 <_printf_float+0x276>
 800a068:	4a37      	ldr	r2, [pc, #220]	; (800a148 <_printf_float+0x2ec>)
 800a06a:	2301      	movs	r3, #1
 800a06c:	4631      	mov	r1, r6
 800a06e:	4628      	mov	r0, r5
 800a070:	47b8      	blx	r7
 800a072:	3001      	adds	r0, #1
 800a074:	f43f af51 	beq.w	8009f1a <_printf_float+0xbe>
 800a078:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a07c:	429a      	cmp	r2, r3
 800a07e:	db02      	blt.n	800a086 <_printf_float+0x22a>
 800a080:	6823      	ldr	r3, [r4, #0]
 800a082:	07d8      	lsls	r0, r3, #31
 800a084:	d510      	bpl.n	800a0a8 <_printf_float+0x24c>
 800a086:	ee18 3a10 	vmov	r3, s16
 800a08a:	4652      	mov	r2, sl
 800a08c:	4631      	mov	r1, r6
 800a08e:	4628      	mov	r0, r5
 800a090:	47b8      	blx	r7
 800a092:	3001      	adds	r0, #1
 800a094:	f43f af41 	beq.w	8009f1a <_printf_float+0xbe>
 800a098:	f04f 0800 	mov.w	r8, #0
 800a09c:	f104 091a 	add.w	r9, r4, #26
 800a0a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0a2:	3b01      	subs	r3, #1
 800a0a4:	4543      	cmp	r3, r8
 800a0a6:	dc09      	bgt.n	800a0bc <_printf_float+0x260>
 800a0a8:	6823      	ldr	r3, [r4, #0]
 800a0aa:	079b      	lsls	r3, r3, #30
 800a0ac:	f100 8107 	bmi.w	800a2be <_printf_float+0x462>
 800a0b0:	68e0      	ldr	r0, [r4, #12]
 800a0b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0b4:	4298      	cmp	r0, r3
 800a0b6:	bfb8      	it	lt
 800a0b8:	4618      	movlt	r0, r3
 800a0ba:	e730      	b.n	8009f1e <_printf_float+0xc2>
 800a0bc:	2301      	movs	r3, #1
 800a0be:	464a      	mov	r2, r9
 800a0c0:	4631      	mov	r1, r6
 800a0c2:	4628      	mov	r0, r5
 800a0c4:	47b8      	blx	r7
 800a0c6:	3001      	adds	r0, #1
 800a0c8:	f43f af27 	beq.w	8009f1a <_printf_float+0xbe>
 800a0cc:	f108 0801 	add.w	r8, r8, #1
 800a0d0:	e7e6      	b.n	800a0a0 <_printf_float+0x244>
 800a0d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	dc39      	bgt.n	800a14c <_printf_float+0x2f0>
 800a0d8:	4a1b      	ldr	r2, [pc, #108]	; (800a148 <_printf_float+0x2ec>)
 800a0da:	2301      	movs	r3, #1
 800a0dc:	4631      	mov	r1, r6
 800a0de:	4628      	mov	r0, r5
 800a0e0:	47b8      	blx	r7
 800a0e2:	3001      	adds	r0, #1
 800a0e4:	f43f af19 	beq.w	8009f1a <_printf_float+0xbe>
 800a0e8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a0ec:	4313      	orrs	r3, r2
 800a0ee:	d102      	bne.n	800a0f6 <_printf_float+0x29a>
 800a0f0:	6823      	ldr	r3, [r4, #0]
 800a0f2:	07d9      	lsls	r1, r3, #31
 800a0f4:	d5d8      	bpl.n	800a0a8 <_printf_float+0x24c>
 800a0f6:	ee18 3a10 	vmov	r3, s16
 800a0fa:	4652      	mov	r2, sl
 800a0fc:	4631      	mov	r1, r6
 800a0fe:	4628      	mov	r0, r5
 800a100:	47b8      	blx	r7
 800a102:	3001      	adds	r0, #1
 800a104:	f43f af09 	beq.w	8009f1a <_printf_float+0xbe>
 800a108:	f04f 0900 	mov.w	r9, #0
 800a10c:	f104 0a1a 	add.w	sl, r4, #26
 800a110:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a112:	425b      	negs	r3, r3
 800a114:	454b      	cmp	r3, r9
 800a116:	dc01      	bgt.n	800a11c <_printf_float+0x2c0>
 800a118:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a11a:	e792      	b.n	800a042 <_printf_float+0x1e6>
 800a11c:	2301      	movs	r3, #1
 800a11e:	4652      	mov	r2, sl
 800a120:	4631      	mov	r1, r6
 800a122:	4628      	mov	r0, r5
 800a124:	47b8      	blx	r7
 800a126:	3001      	adds	r0, #1
 800a128:	f43f aef7 	beq.w	8009f1a <_printf_float+0xbe>
 800a12c:	f109 0901 	add.w	r9, r9, #1
 800a130:	e7ee      	b.n	800a110 <_printf_float+0x2b4>
 800a132:	bf00      	nop
 800a134:	7fefffff 	.word	0x7fefffff
 800a138:	0800d4fc 	.word	0x0800d4fc
 800a13c:	0800d500 	.word	0x0800d500
 800a140:	0800d504 	.word	0x0800d504
 800a144:	0800d508 	.word	0x0800d508
 800a148:	0800d50c 	.word	0x0800d50c
 800a14c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a14e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a150:	429a      	cmp	r2, r3
 800a152:	bfa8      	it	ge
 800a154:	461a      	movge	r2, r3
 800a156:	2a00      	cmp	r2, #0
 800a158:	4691      	mov	r9, r2
 800a15a:	dc37      	bgt.n	800a1cc <_printf_float+0x370>
 800a15c:	f04f 0b00 	mov.w	fp, #0
 800a160:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a164:	f104 021a 	add.w	r2, r4, #26
 800a168:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a16a:	9305      	str	r3, [sp, #20]
 800a16c:	eba3 0309 	sub.w	r3, r3, r9
 800a170:	455b      	cmp	r3, fp
 800a172:	dc33      	bgt.n	800a1dc <_printf_float+0x380>
 800a174:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a178:	429a      	cmp	r2, r3
 800a17a:	db3b      	blt.n	800a1f4 <_printf_float+0x398>
 800a17c:	6823      	ldr	r3, [r4, #0]
 800a17e:	07da      	lsls	r2, r3, #31
 800a180:	d438      	bmi.n	800a1f4 <_printf_float+0x398>
 800a182:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a186:	eba2 0903 	sub.w	r9, r2, r3
 800a18a:	9b05      	ldr	r3, [sp, #20]
 800a18c:	1ad2      	subs	r2, r2, r3
 800a18e:	4591      	cmp	r9, r2
 800a190:	bfa8      	it	ge
 800a192:	4691      	movge	r9, r2
 800a194:	f1b9 0f00 	cmp.w	r9, #0
 800a198:	dc35      	bgt.n	800a206 <_printf_float+0x3aa>
 800a19a:	f04f 0800 	mov.w	r8, #0
 800a19e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a1a2:	f104 0a1a 	add.w	sl, r4, #26
 800a1a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a1aa:	1a9b      	subs	r3, r3, r2
 800a1ac:	eba3 0309 	sub.w	r3, r3, r9
 800a1b0:	4543      	cmp	r3, r8
 800a1b2:	f77f af79 	ble.w	800a0a8 <_printf_float+0x24c>
 800a1b6:	2301      	movs	r3, #1
 800a1b8:	4652      	mov	r2, sl
 800a1ba:	4631      	mov	r1, r6
 800a1bc:	4628      	mov	r0, r5
 800a1be:	47b8      	blx	r7
 800a1c0:	3001      	adds	r0, #1
 800a1c2:	f43f aeaa 	beq.w	8009f1a <_printf_float+0xbe>
 800a1c6:	f108 0801 	add.w	r8, r8, #1
 800a1ca:	e7ec      	b.n	800a1a6 <_printf_float+0x34a>
 800a1cc:	4613      	mov	r3, r2
 800a1ce:	4631      	mov	r1, r6
 800a1d0:	4642      	mov	r2, r8
 800a1d2:	4628      	mov	r0, r5
 800a1d4:	47b8      	blx	r7
 800a1d6:	3001      	adds	r0, #1
 800a1d8:	d1c0      	bne.n	800a15c <_printf_float+0x300>
 800a1da:	e69e      	b.n	8009f1a <_printf_float+0xbe>
 800a1dc:	2301      	movs	r3, #1
 800a1de:	4631      	mov	r1, r6
 800a1e0:	4628      	mov	r0, r5
 800a1e2:	9205      	str	r2, [sp, #20]
 800a1e4:	47b8      	blx	r7
 800a1e6:	3001      	adds	r0, #1
 800a1e8:	f43f ae97 	beq.w	8009f1a <_printf_float+0xbe>
 800a1ec:	9a05      	ldr	r2, [sp, #20]
 800a1ee:	f10b 0b01 	add.w	fp, fp, #1
 800a1f2:	e7b9      	b.n	800a168 <_printf_float+0x30c>
 800a1f4:	ee18 3a10 	vmov	r3, s16
 800a1f8:	4652      	mov	r2, sl
 800a1fa:	4631      	mov	r1, r6
 800a1fc:	4628      	mov	r0, r5
 800a1fe:	47b8      	blx	r7
 800a200:	3001      	adds	r0, #1
 800a202:	d1be      	bne.n	800a182 <_printf_float+0x326>
 800a204:	e689      	b.n	8009f1a <_printf_float+0xbe>
 800a206:	9a05      	ldr	r2, [sp, #20]
 800a208:	464b      	mov	r3, r9
 800a20a:	4442      	add	r2, r8
 800a20c:	4631      	mov	r1, r6
 800a20e:	4628      	mov	r0, r5
 800a210:	47b8      	blx	r7
 800a212:	3001      	adds	r0, #1
 800a214:	d1c1      	bne.n	800a19a <_printf_float+0x33e>
 800a216:	e680      	b.n	8009f1a <_printf_float+0xbe>
 800a218:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a21a:	2a01      	cmp	r2, #1
 800a21c:	dc01      	bgt.n	800a222 <_printf_float+0x3c6>
 800a21e:	07db      	lsls	r3, r3, #31
 800a220:	d53a      	bpl.n	800a298 <_printf_float+0x43c>
 800a222:	2301      	movs	r3, #1
 800a224:	4642      	mov	r2, r8
 800a226:	4631      	mov	r1, r6
 800a228:	4628      	mov	r0, r5
 800a22a:	47b8      	blx	r7
 800a22c:	3001      	adds	r0, #1
 800a22e:	f43f ae74 	beq.w	8009f1a <_printf_float+0xbe>
 800a232:	ee18 3a10 	vmov	r3, s16
 800a236:	4652      	mov	r2, sl
 800a238:	4631      	mov	r1, r6
 800a23a:	4628      	mov	r0, r5
 800a23c:	47b8      	blx	r7
 800a23e:	3001      	adds	r0, #1
 800a240:	f43f ae6b 	beq.w	8009f1a <_printf_float+0xbe>
 800a244:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a248:	2200      	movs	r2, #0
 800a24a:	2300      	movs	r3, #0
 800a24c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800a250:	f7f6 fc3a 	bl	8000ac8 <__aeabi_dcmpeq>
 800a254:	b9d8      	cbnz	r0, 800a28e <_printf_float+0x432>
 800a256:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800a25a:	f108 0201 	add.w	r2, r8, #1
 800a25e:	4631      	mov	r1, r6
 800a260:	4628      	mov	r0, r5
 800a262:	47b8      	blx	r7
 800a264:	3001      	adds	r0, #1
 800a266:	d10e      	bne.n	800a286 <_printf_float+0x42a>
 800a268:	e657      	b.n	8009f1a <_printf_float+0xbe>
 800a26a:	2301      	movs	r3, #1
 800a26c:	4652      	mov	r2, sl
 800a26e:	4631      	mov	r1, r6
 800a270:	4628      	mov	r0, r5
 800a272:	47b8      	blx	r7
 800a274:	3001      	adds	r0, #1
 800a276:	f43f ae50 	beq.w	8009f1a <_printf_float+0xbe>
 800a27a:	f108 0801 	add.w	r8, r8, #1
 800a27e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a280:	3b01      	subs	r3, #1
 800a282:	4543      	cmp	r3, r8
 800a284:	dcf1      	bgt.n	800a26a <_printf_float+0x40e>
 800a286:	464b      	mov	r3, r9
 800a288:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a28c:	e6da      	b.n	800a044 <_printf_float+0x1e8>
 800a28e:	f04f 0800 	mov.w	r8, #0
 800a292:	f104 0a1a 	add.w	sl, r4, #26
 800a296:	e7f2      	b.n	800a27e <_printf_float+0x422>
 800a298:	2301      	movs	r3, #1
 800a29a:	4642      	mov	r2, r8
 800a29c:	e7df      	b.n	800a25e <_printf_float+0x402>
 800a29e:	2301      	movs	r3, #1
 800a2a0:	464a      	mov	r2, r9
 800a2a2:	4631      	mov	r1, r6
 800a2a4:	4628      	mov	r0, r5
 800a2a6:	47b8      	blx	r7
 800a2a8:	3001      	adds	r0, #1
 800a2aa:	f43f ae36 	beq.w	8009f1a <_printf_float+0xbe>
 800a2ae:	f108 0801 	add.w	r8, r8, #1
 800a2b2:	68e3      	ldr	r3, [r4, #12]
 800a2b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a2b6:	1a5b      	subs	r3, r3, r1
 800a2b8:	4543      	cmp	r3, r8
 800a2ba:	dcf0      	bgt.n	800a29e <_printf_float+0x442>
 800a2bc:	e6f8      	b.n	800a0b0 <_printf_float+0x254>
 800a2be:	f04f 0800 	mov.w	r8, #0
 800a2c2:	f104 0919 	add.w	r9, r4, #25
 800a2c6:	e7f4      	b.n	800a2b2 <_printf_float+0x456>

0800a2c8 <_printf_common>:
 800a2c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2cc:	4616      	mov	r6, r2
 800a2ce:	4699      	mov	r9, r3
 800a2d0:	688a      	ldr	r2, [r1, #8]
 800a2d2:	690b      	ldr	r3, [r1, #16]
 800a2d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a2d8:	4293      	cmp	r3, r2
 800a2da:	bfb8      	it	lt
 800a2dc:	4613      	movlt	r3, r2
 800a2de:	6033      	str	r3, [r6, #0]
 800a2e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a2e4:	4607      	mov	r7, r0
 800a2e6:	460c      	mov	r4, r1
 800a2e8:	b10a      	cbz	r2, 800a2ee <_printf_common+0x26>
 800a2ea:	3301      	adds	r3, #1
 800a2ec:	6033      	str	r3, [r6, #0]
 800a2ee:	6823      	ldr	r3, [r4, #0]
 800a2f0:	0699      	lsls	r1, r3, #26
 800a2f2:	bf42      	ittt	mi
 800a2f4:	6833      	ldrmi	r3, [r6, #0]
 800a2f6:	3302      	addmi	r3, #2
 800a2f8:	6033      	strmi	r3, [r6, #0]
 800a2fa:	6825      	ldr	r5, [r4, #0]
 800a2fc:	f015 0506 	ands.w	r5, r5, #6
 800a300:	d106      	bne.n	800a310 <_printf_common+0x48>
 800a302:	f104 0a19 	add.w	sl, r4, #25
 800a306:	68e3      	ldr	r3, [r4, #12]
 800a308:	6832      	ldr	r2, [r6, #0]
 800a30a:	1a9b      	subs	r3, r3, r2
 800a30c:	42ab      	cmp	r3, r5
 800a30e:	dc26      	bgt.n	800a35e <_printf_common+0x96>
 800a310:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a314:	1e13      	subs	r3, r2, #0
 800a316:	6822      	ldr	r2, [r4, #0]
 800a318:	bf18      	it	ne
 800a31a:	2301      	movne	r3, #1
 800a31c:	0692      	lsls	r2, r2, #26
 800a31e:	d42b      	bmi.n	800a378 <_printf_common+0xb0>
 800a320:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a324:	4649      	mov	r1, r9
 800a326:	4638      	mov	r0, r7
 800a328:	47c0      	blx	r8
 800a32a:	3001      	adds	r0, #1
 800a32c:	d01e      	beq.n	800a36c <_printf_common+0xa4>
 800a32e:	6823      	ldr	r3, [r4, #0]
 800a330:	6922      	ldr	r2, [r4, #16]
 800a332:	f003 0306 	and.w	r3, r3, #6
 800a336:	2b04      	cmp	r3, #4
 800a338:	bf02      	ittt	eq
 800a33a:	68e5      	ldreq	r5, [r4, #12]
 800a33c:	6833      	ldreq	r3, [r6, #0]
 800a33e:	1aed      	subeq	r5, r5, r3
 800a340:	68a3      	ldr	r3, [r4, #8]
 800a342:	bf0c      	ite	eq
 800a344:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a348:	2500      	movne	r5, #0
 800a34a:	4293      	cmp	r3, r2
 800a34c:	bfc4      	itt	gt
 800a34e:	1a9b      	subgt	r3, r3, r2
 800a350:	18ed      	addgt	r5, r5, r3
 800a352:	2600      	movs	r6, #0
 800a354:	341a      	adds	r4, #26
 800a356:	42b5      	cmp	r5, r6
 800a358:	d11a      	bne.n	800a390 <_printf_common+0xc8>
 800a35a:	2000      	movs	r0, #0
 800a35c:	e008      	b.n	800a370 <_printf_common+0xa8>
 800a35e:	2301      	movs	r3, #1
 800a360:	4652      	mov	r2, sl
 800a362:	4649      	mov	r1, r9
 800a364:	4638      	mov	r0, r7
 800a366:	47c0      	blx	r8
 800a368:	3001      	adds	r0, #1
 800a36a:	d103      	bne.n	800a374 <_printf_common+0xac>
 800a36c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a374:	3501      	adds	r5, #1
 800a376:	e7c6      	b.n	800a306 <_printf_common+0x3e>
 800a378:	18e1      	adds	r1, r4, r3
 800a37a:	1c5a      	adds	r2, r3, #1
 800a37c:	2030      	movs	r0, #48	; 0x30
 800a37e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a382:	4422      	add	r2, r4
 800a384:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a388:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a38c:	3302      	adds	r3, #2
 800a38e:	e7c7      	b.n	800a320 <_printf_common+0x58>
 800a390:	2301      	movs	r3, #1
 800a392:	4622      	mov	r2, r4
 800a394:	4649      	mov	r1, r9
 800a396:	4638      	mov	r0, r7
 800a398:	47c0      	blx	r8
 800a39a:	3001      	adds	r0, #1
 800a39c:	d0e6      	beq.n	800a36c <_printf_common+0xa4>
 800a39e:	3601      	adds	r6, #1
 800a3a0:	e7d9      	b.n	800a356 <_printf_common+0x8e>
	...

0800a3a4 <_printf_i>:
 800a3a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a3a8:	7e0f      	ldrb	r7, [r1, #24]
 800a3aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a3ac:	2f78      	cmp	r7, #120	; 0x78
 800a3ae:	4691      	mov	r9, r2
 800a3b0:	4680      	mov	r8, r0
 800a3b2:	460c      	mov	r4, r1
 800a3b4:	469a      	mov	sl, r3
 800a3b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a3ba:	d807      	bhi.n	800a3cc <_printf_i+0x28>
 800a3bc:	2f62      	cmp	r7, #98	; 0x62
 800a3be:	d80a      	bhi.n	800a3d6 <_printf_i+0x32>
 800a3c0:	2f00      	cmp	r7, #0
 800a3c2:	f000 80d4 	beq.w	800a56e <_printf_i+0x1ca>
 800a3c6:	2f58      	cmp	r7, #88	; 0x58
 800a3c8:	f000 80c0 	beq.w	800a54c <_printf_i+0x1a8>
 800a3cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a3d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a3d4:	e03a      	b.n	800a44c <_printf_i+0xa8>
 800a3d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a3da:	2b15      	cmp	r3, #21
 800a3dc:	d8f6      	bhi.n	800a3cc <_printf_i+0x28>
 800a3de:	a101      	add	r1, pc, #4	; (adr r1, 800a3e4 <_printf_i+0x40>)
 800a3e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a3e4:	0800a43d 	.word	0x0800a43d
 800a3e8:	0800a451 	.word	0x0800a451
 800a3ec:	0800a3cd 	.word	0x0800a3cd
 800a3f0:	0800a3cd 	.word	0x0800a3cd
 800a3f4:	0800a3cd 	.word	0x0800a3cd
 800a3f8:	0800a3cd 	.word	0x0800a3cd
 800a3fc:	0800a451 	.word	0x0800a451
 800a400:	0800a3cd 	.word	0x0800a3cd
 800a404:	0800a3cd 	.word	0x0800a3cd
 800a408:	0800a3cd 	.word	0x0800a3cd
 800a40c:	0800a3cd 	.word	0x0800a3cd
 800a410:	0800a555 	.word	0x0800a555
 800a414:	0800a47d 	.word	0x0800a47d
 800a418:	0800a50f 	.word	0x0800a50f
 800a41c:	0800a3cd 	.word	0x0800a3cd
 800a420:	0800a3cd 	.word	0x0800a3cd
 800a424:	0800a577 	.word	0x0800a577
 800a428:	0800a3cd 	.word	0x0800a3cd
 800a42c:	0800a47d 	.word	0x0800a47d
 800a430:	0800a3cd 	.word	0x0800a3cd
 800a434:	0800a3cd 	.word	0x0800a3cd
 800a438:	0800a517 	.word	0x0800a517
 800a43c:	682b      	ldr	r3, [r5, #0]
 800a43e:	1d1a      	adds	r2, r3, #4
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	602a      	str	r2, [r5, #0]
 800a444:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a448:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a44c:	2301      	movs	r3, #1
 800a44e:	e09f      	b.n	800a590 <_printf_i+0x1ec>
 800a450:	6820      	ldr	r0, [r4, #0]
 800a452:	682b      	ldr	r3, [r5, #0]
 800a454:	0607      	lsls	r7, r0, #24
 800a456:	f103 0104 	add.w	r1, r3, #4
 800a45a:	6029      	str	r1, [r5, #0]
 800a45c:	d501      	bpl.n	800a462 <_printf_i+0xbe>
 800a45e:	681e      	ldr	r6, [r3, #0]
 800a460:	e003      	b.n	800a46a <_printf_i+0xc6>
 800a462:	0646      	lsls	r6, r0, #25
 800a464:	d5fb      	bpl.n	800a45e <_printf_i+0xba>
 800a466:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a46a:	2e00      	cmp	r6, #0
 800a46c:	da03      	bge.n	800a476 <_printf_i+0xd2>
 800a46e:	232d      	movs	r3, #45	; 0x2d
 800a470:	4276      	negs	r6, r6
 800a472:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a476:	485a      	ldr	r0, [pc, #360]	; (800a5e0 <_printf_i+0x23c>)
 800a478:	230a      	movs	r3, #10
 800a47a:	e012      	b.n	800a4a2 <_printf_i+0xfe>
 800a47c:	682b      	ldr	r3, [r5, #0]
 800a47e:	6820      	ldr	r0, [r4, #0]
 800a480:	1d19      	adds	r1, r3, #4
 800a482:	6029      	str	r1, [r5, #0]
 800a484:	0605      	lsls	r5, r0, #24
 800a486:	d501      	bpl.n	800a48c <_printf_i+0xe8>
 800a488:	681e      	ldr	r6, [r3, #0]
 800a48a:	e002      	b.n	800a492 <_printf_i+0xee>
 800a48c:	0641      	lsls	r1, r0, #25
 800a48e:	d5fb      	bpl.n	800a488 <_printf_i+0xe4>
 800a490:	881e      	ldrh	r6, [r3, #0]
 800a492:	4853      	ldr	r0, [pc, #332]	; (800a5e0 <_printf_i+0x23c>)
 800a494:	2f6f      	cmp	r7, #111	; 0x6f
 800a496:	bf0c      	ite	eq
 800a498:	2308      	moveq	r3, #8
 800a49a:	230a      	movne	r3, #10
 800a49c:	2100      	movs	r1, #0
 800a49e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a4a2:	6865      	ldr	r5, [r4, #4]
 800a4a4:	60a5      	str	r5, [r4, #8]
 800a4a6:	2d00      	cmp	r5, #0
 800a4a8:	bfa2      	ittt	ge
 800a4aa:	6821      	ldrge	r1, [r4, #0]
 800a4ac:	f021 0104 	bicge.w	r1, r1, #4
 800a4b0:	6021      	strge	r1, [r4, #0]
 800a4b2:	b90e      	cbnz	r6, 800a4b8 <_printf_i+0x114>
 800a4b4:	2d00      	cmp	r5, #0
 800a4b6:	d04b      	beq.n	800a550 <_printf_i+0x1ac>
 800a4b8:	4615      	mov	r5, r2
 800a4ba:	fbb6 f1f3 	udiv	r1, r6, r3
 800a4be:	fb03 6711 	mls	r7, r3, r1, r6
 800a4c2:	5dc7      	ldrb	r7, [r0, r7]
 800a4c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a4c8:	4637      	mov	r7, r6
 800a4ca:	42bb      	cmp	r3, r7
 800a4cc:	460e      	mov	r6, r1
 800a4ce:	d9f4      	bls.n	800a4ba <_printf_i+0x116>
 800a4d0:	2b08      	cmp	r3, #8
 800a4d2:	d10b      	bne.n	800a4ec <_printf_i+0x148>
 800a4d4:	6823      	ldr	r3, [r4, #0]
 800a4d6:	07de      	lsls	r6, r3, #31
 800a4d8:	d508      	bpl.n	800a4ec <_printf_i+0x148>
 800a4da:	6923      	ldr	r3, [r4, #16]
 800a4dc:	6861      	ldr	r1, [r4, #4]
 800a4de:	4299      	cmp	r1, r3
 800a4e0:	bfde      	ittt	le
 800a4e2:	2330      	movle	r3, #48	; 0x30
 800a4e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a4e8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a4ec:	1b52      	subs	r2, r2, r5
 800a4ee:	6122      	str	r2, [r4, #16]
 800a4f0:	f8cd a000 	str.w	sl, [sp]
 800a4f4:	464b      	mov	r3, r9
 800a4f6:	aa03      	add	r2, sp, #12
 800a4f8:	4621      	mov	r1, r4
 800a4fa:	4640      	mov	r0, r8
 800a4fc:	f7ff fee4 	bl	800a2c8 <_printf_common>
 800a500:	3001      	adds	r0, #1
 800a502:	d14a      	bne.n	800a59a <_printf_i+0x1f6>
 800a504:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a508:	b004      	add	sp, #16
 800a50a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a50e:	6823      	ldr	r3, [r4, #0]
 800a510:	f043 0320 	orr.w	r3, r3, #32
 800a514:	6023      	str	r3, [r4, #0]
 800a516:	4833      	ldr	r0, [pc, #204]	; (800a5e4 <_printf_i+0x240>)
 800a518:	2778      	movs	r7, #120	; 0x78
 800a51a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a51e:	6823      	ldr	r3, [r4, #0]
 800a520:	6829      	ldr	r1, [r5, #0]
 800a522:	061f      	lsls	r7, r3, #24
 800a524:	f851 6b04 	ldr.w	r6, [r1], #4
 800a528:	d402      	bmi.n	800a530 <_printf_i+0x18c>
 800a52a:	065f      	lsls	r7, r3, #25
 800a52c:	bf48      	it	mi
 800a52e:	b2b6      	uxthmi	r6, r6
 800a530:	07df      	lsls	r7, r3, #31
 800a532:	bf48      	it	mi
 800a534:	f043 0320 	orrmi.w	r3, r3, #32
 800a538:	6029      	str	r1, [r5, #0]
 800a53a:	bf48      	it	mi
 800a53c:	6023      	strmi	r3, [r4, #0]
 800a53e:	b91e      	cbnz	r6, 800a548 <_printf_i+0x1a4>
 800a540:	6823      	ldr	r3, [r4, #0]
 800a542:	f023 0320 	bic.w	r3, r3, #32
 800a546:	6023      	str	r3, [r4, #0]
 800a548:	2310      	movs	r3, #16
 800a54a:	e7a7      	b.n	800a49c <_printf_i+0xf8>
 800a54c:	4824      	ldr	r0, [pc, #144]	; (800a5e0 <_printf_i+0x23c>)
 800a54e:	e7e4      	b.n	800a51a <_printf_i+0x176>
 800a550:	4615      	mov	r5, r2
 800a552:	e7bd      	b.n	800a4d0 <_printf_i+0x12c>
 800a554:	682b      	ldr	r3, [r5, #0]
 800a556:	6826      	ldr	r6, [r4, #0]
 800a558:	6961      	ldr	r1, [r4, #20]
 800a55a:	1d18      	adds	r0, r3, #4
 800a55c:	6028      	str	r0, [r5, #0]
 800a55e:	0635      	lsls	r5, r6, #24
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	d501      	bpl.n	800a568 <_printf_i+0x1c4>
 800a564:	6019      	str	r1, [r3, #0]
 800a566:	e002      	b.n	800a56e <_printf_i+0x1ca>
 800a568:	0670      	lsls	r0, r6, #25
 800a56a:	d5fb      	bpl.n	800a564 <_printf_i+0x1c0>
 800a56c:	8019      	strh	r1, [r3, #0]
 800a56e:	2300      	movs	r3, #0
 800a570:	6123      	str	r3, [r4, #16]
 800a572:	4615      	mov	r5, r2
 800a574:	e7bc      	b.n	800a4f0 <_printf_i+0x14c>
 800a576:	682b      	ldr	r3, [r5, #0]
 800a578:	1d1a      	adds	r2, r3, #4
 800a57a:	602a      	str	r2, [r5, #0]
 800a57c:	681d      	ldr	r5, [r3, #0]
 800a57e:	6862      	ldr	r2, [r4, #4]
 800a580:	2100      	movs	r1, #0
 800a582:	4628      	mov	r0, r5
 800a584:	f7f5 fe24 	bl	80001d0 <memchr>
 800a588:	b108      	cbz	r0, 800a58e <_printf_i+0x1ea>
 800a58a:	1b40      	subs	r0, r0, r5
 800a58c:	6060      	str	r0, [r4, #4]
 800a58e:	6863      	ldr	r3, [r4, #4]
 800a590:	6123      	str	r3, [r4, #16]
 800a592:	2300      	movs	r3, #0
 800a594:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a598:	e7aa      	b.n	800a4f0 <_printf_i+0x14c>
 800a59a:	6923      	ldr	r3, [r4, #16]
 800a59c:	462a      	mov	r2, r5
 800a59e:	4649      	mov	r1, r9
 800a5a0:	4640      	mov	r0, r8
 800a5a2:	47d0      	blx	sl
 800a5a4:	3001      	adds	r0, #1
 800a5a6:	d0ad      	beq.n	800a504 <_printf_i+0x160>
 800a5a8:	6823      	ldr	r3, [r4, #0]
 800a5aa:	079b      	lsls	r3, r3, #30
 800a5ac:	d413      	bmi.n	800a5d6 <_printf_i+0x232>
 800a5ae:	68e0      	ldr	r0, [r4, #12]
 800a5b0:	9b03      	ldr	r3, [sp, #12]
 800a5b2:	4298      	cmp	r0, r3
 800a5b4:	bfb8      	it	lt
 800a5b6:	4618      	movlt	r0, r3
 800a5b8:	e7a6      	b.n	800a508 <_printf_i+0x164>
 800a5ba:	2301      	movs	r3, #1
 800a5bc:	4632      	mov	r2, r6
 800a5be:	4649      	mov	r1, r9
 800a5c0:	4640      	mov	r0, r8
 800a5c2:	47d0      	blx	sl
 800a5c4:	3001      	adds	r0, #1
 800a5c6:	d09d      	beq.n	800a504 <_printf_i+0x160>
 800a5c8:	3501      	adds	r5, #1
 800a5ca:	68e3      	ldr	r3, [r4, #12]
 800a5cc:	9903      	ldr	r1, [sp, #12]
 800a5ce:	1a5b      	subs	r3, r3, r1
 800a5d0:	42ab      	cmp	r3, r5
 800a5d2:	dcf2      	bgt.n	800a5ba <_printf_i+0x216>
 800a5d4:	e7eb      	b.n	800a5ae <_printf_i+0x20a>
 800a5d6:	2500      	movs	r5, #0
 800a5d8:	f104 0619 	add.w	r6, r4, #25
 800a5dc:	e7f5      	b.n	800a5ca <_printf_i+0x226>
 800a5de:	bf00      	nop
 800a5e0:	0800d50e 	.word	0x0800d50e
 800a5e4:	0800d51f 	.word	0x0800d51f

0800a5e8 <std>:
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	b510      	push	{r4, lr}
 800a5ec:	4604      	mov	r4, r0
 800a5ee:	e9c0 3300 	strd	r3, r3, [r0]
 800a5f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a5f6:	6083      	str	r3, [r0, #8]
 800a5f8:	8181      	strh	r1, [r0, #12]
 800a5fa:	6643      	str	r3, [r0, #100]	; 0x64
 800a5fc:	81c2      	strh	r2, [r0, #14]
 800a5fe:	6183      	str	r3, [r0, #24]
 800a600:	4619      	mov	r1, r3
 800a602:	2208      	movs	r2, #8
 800a604:	305c      	adds	r0, #92	; 0x5c
 800a606:	f000 f91f 	bl	800a848 <memset>
 800a60a:	4b0d      	ldr	r3, [pc, #52]	; (800a640 <std+0x58>)
 800a60c:	6263      	str	r3, [r4, #36]	; 0x24
 800a60e:	4b0d      	ldr	r3, [pc, #52]	; (800a644 <std+0x5c>)
 800a610:	62a3      	str	r3, [r4, #40]	; 0x28
 800a612:	4b0d      	ldr	r3, [pc, #52]	; (800a648 <std+0x60>)
 800a614:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a616:	4b0d      	ldr	r3, [pc, #52]	; (800a64c <std+0x64>)
 800a618:	6323      	str	r3, [r4, #48]	; 0x30
 800a61a:	4b0d      	ldr	r3, [pc, #52]	; (800a650 <std+0x68>)
 800a61c:	6224      	str	r4, [r4, #32]
 800a61e:	429c      	cmp	r4, r3
 800a620:	d006      	beq.n	800a630 <std+0x48>
 800a622:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a626:	4294      	cmp	r4, r2
 800a628:	d002      	beq.n	800a630 <std+0x48>
 800a62a:	33d0      	adds	r3, #208	; 0xd0
 800a62c:	429c      	cmp	r4, r3
 800a62e:	d105      	bne.n	800a63c <std+0x54>
 800a630:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a638:	f000 b992 	b.w	800a960 <__retarget_lock_init_recursive>
 800a63c:	bd10      	pop	{r4, pc}
 800a63e:	bf00      	nop
 800a640:	0800c359 	.word	0x0800c359
 800a644:	0800c37b 	.word	0x0800c37b
 800a648:	0800c3b3 	.word	0x0800c3b3
 800a64c:	0800c3d7 	.word	0x0800c3d7
 800a650:	20002620 	.word	0x20002620

0800a654 <stdio_exit_handler>:
 800a654:	4a02      	ldr	r2, [pc, #8]	; (800a660 <stdio_exit_handler+0xc>)
 800a656:	4903      	ldr	r1, [pc, #12]	; (800a664 <stdio_exit_handler+0x10>)
 800a658:	4803      	ldr	r0, [pc, #12]	; (800a668 <stdio_exit_handler+0x14>)
 800a65a:	f000 b869 	b.w	800a730 <_fwalk_sglue>
 800a65e:	bf00      	nop
 800a660:	20000010 	.word	0x20000010
 800a664:	0800bbf9 	.word	0x0800bbf9
 800a668:	2000001c 	.word	0x2000001c

0800a66c <cleanup_stdio>:
 800a66c:	6841      	ldr	r1, [r0, #4]
 800a66e:	4b0c      	ldr	r3, [pc, #48]	; (800a6a0 <cleanup_stdio+0x34>)
 800a670:	4299      	cmp	r1, r3
 800a672:	b510      	push	{r4, lr}
 800a674:	4604      	mov	r4, r0
 800a676:	d001      	beq.n	800a67c <cleanup_stdio+0x10>
 800a678:	f001 fabe 	bl	800bbf8 <_fflush_r>
 800a67c:	68a1      	ldr	r1, [r4, #8]
 800a67e:	4b09      	ldr	r3, [pc, #36]	; (800a6a4 <cleanup_stdio+0x38>)
 800a680:	4299      	cmp	r1, r3
 800a682:	d002      	beq.n	800a68a <cleanup_stdio+0x1e>
 800a684:	4620      	mov	r0, r4
 800a686:	f001 fab7 	bl	800bbf8 <_fflush_r>
 800a68a:	68e1      	ldr	r1, [r4, #12]
 800a68c:	4b06      	ldr	r3, [pc, #24]	; (800a6a8 <cleanup_stdio+0x3c>)
 800a68e:	4299      	cmp	r1, r3
 800a690:	d004      	beq.n	800a69c <cleanup_stdio+0x30>
 800a692:	4620      	mov	r0, r4
 800a694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a698:	f001 baae 	b.w	800bbf8 <_fflush_r>
 800a69c:	bd10      	pop	{r4, pc}
 800a69e:	bf00      	nop
 800a6a0:	20002620 	.word	0x20002620
 800a6a4:	20002688 	.word	0x20002688
 800a6a8:	200026f0 	.word	0x200026f0

0800a6ac <global_stdio_init.part.0>:
 800a6ac:	b510      	push	{r4, lr}
 800a6ae:	4b0b      	ldr	r3, [pc, #44]	; (800a6dc <global_stdio_init.part.0+0x30>)
 800a6b0:	4c0b      	ldr	r4, [pc, #44]	; (800a6e0 <global_stdio_init.part.0+0x34>)
 800a6b2:	4a0c      	ldr	r2, [pc, #48]	; (800a6e4 <global_stdio_init.part.0+0x38>)
 800a6b4:	601a      	str	r2, [r3, #0]
 800a6b6:	4620      	mov	r0, r4
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	2104      	movs	r1, #4
 800a6bc:	f7ff ff94 	bl	800a5e8 <std>
 800a6c0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a6c4:	2201      	movs	r2, #1
 800a6c6:	2109      	movs	r1, #9
 800a6c8:	f7ff ff8e 	bl	800a5e8 <std>
 800a6cc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a6d0:	2202      	movs	r2, #2
 800a6d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6d6:	2112      	movs	r1, #18
 800a6d8:	f7ff bf86 	b.w	800a5e8 <std>
 800a6dc:	20002758 	.word	0x20002758
 800a6e0:	20002620 	.word	0x20002620
 800a6e4:	0800a655 	.word	0x0800a655

0800a6e8 <__sfp_lock_acquire>:
 800a6e8:	4801      	ldr	r0, [pc, #4]	; (800a6f0 <__sfp_lock_acquire+0x8>)
 800a6ea:	f000 b93a 	b.w	800a962 <__retarget_lock_acquire_recursive>
 800a6ee:	bf00      	nop
 800a6f0:	20002761 	.word	0x20002761

0800a6f4 <__sfp_lock_release>:
 800a6f4:	4801      	ldr	r0, [pc, #4]	; (800a6fc <__sfp_lock_release+0x8>)
 800a6f6:	f000 b935 	b.w	800a964 <__retarget_lock_release_recursive>
 800a6fa:	bf00      	nop
 800a6fc:	20002761 	.word	0x20002761

0800a700 <__sinit>:
 800a700:	b510      	push	{r4, lr}
 800a702:	4604      	mov	r4, r0
 800a704:	f7ff fff0 	bl	800a6e8 <__sfp_lock_acquire>
 800a708:	6a23      	ldr	r3, [r4, #32]
 800a70a:	b11b      	cbz	r3, 800a714 <__sinit+0x14>
 800a70c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a710:	f7ff bff0 	b.w	800a6f4 <__sfp_lock_release>
 800a714:	4b04      	ldr	r3, [pc, #16]	; (800a728 <__sinit+0x28>)
 800a716:	6223      	str	r3, [r4, #32]
 800a718:	4b04      	ldr	r3, [pc, #16]	; (800a72c <__sinit+0x2c>)
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d1f5      	bne.n	800a70c <__sinit+0xc>
 800a720:	f7ff ffc4 	bl	800a6ac <global_stdio_init.part.0>
 800a724:	e7f2      	b.n	800a70c <__sinit+0xc>
 800a726:	bf00      	nop
 800a728:	0800a66d 	.word	0x0800a66d
 800a72c:	20002758 	.word	0x20002758

0800a730 <_fwalk_sglue>:
 800a730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a734:	4607      	mov	r7, r0
 800a736:	4688      	mov	r8, r1
 800a738:	4614      	mov	r4, r2
 800a73a:	2600      	movs	r6, #0
 800a73c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a740:	f1b9 0901 	subs.w	r9, r9, #1
 800a744:	d505      	bpl.n	800a752 <_fwalk_sglue+0x22>
 800a746:	6824      	ldr	r4, [r4, #0]
 800a748:	2c00      	cmp	r4, #0
 800a74a:	d1f7      	bne.n	800a73c <_fwalk_sglue+0xc>
 800a74c:	4630      	mov	r0, r6
 800a74e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a752:	89ab      	ldrh	r3, [r5, #12]
 800a754:	2b01      	cmp	r3, #1
 800a756:	d907      	bls.n	800a768 <_fwalk_sglue+0x38>
 800a758:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a75c:	3301      	adds	r3, #1
 800a75e:	d003      	beq.n	800a768 <_fwalk_sglue+0x38>
 800a760:	4629      	mov	r1, r5
 800a762:	4638      	mov	r0, r7
 800a764:	47c0      	blx	r8
 800a766:	4306      	orrs	r6, r0
 800a768:	3568      	adds	r5, #104	; 0x68
 800a76a:	e7e9      	b.n	800a740 <_fwalk_sglue+0x10>

0800a76c <iprintf>:
 800a76c:	b40f      	push	{r0, r1, r2, r3}
 800a76e:	b507      	push	{r0, r1, r2, lr}
 800a770:	4906      	ldr	r1, [pc, #24]	; (800a78c <iprintf+0x20>)
 800a772:	ab04      	add	r3, sp, #16
 800a774:	6808      	ldr	r0, [r1, #0]
 800a776:	f853 2b04 	ldr.w	r2, [r3], #4
 800a77a:	6881      	ldr	r1, [r0, #8]
 800a77c:	9301      	str	r3, [sp, #4]
 800a77e:	f000 fff3 	bl	800b768 <_vfiprintf_r>
 800a782:	b003      	add	sp, #12
 800a784:	f85d eb04 	ldr.w	lr, [sp], #4
 800a788:	b004      	add	sp, #16
 800a78a:	4770      	bx	lr
 800a78c:	20000068 	.word	0x20000068

0800a790 <_puts_r>:
 800a790:	6a03      	ldr	r3, [r0, #32]
 800a792:	b570      	push	{r4, r5, r6, lr}
 800a794:	6884      	ldr	r4, [r0, #8]
 800a796:	4605      	mov	r5, r0
 800a798:	460e      	mov	r6, r1
 800a79a:	b90b      	cbnz	r3, 800a7a0 <_puts_r+0x10>
 800a79c:	f7ff ffb0 	bl	800a700 <__sinit>
 800a7a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a7a2:	07db      	lsls	r3, r3, #31
 800a7a4:	d405      	bmi.n	800a7b2 <_puts_r+0x22>
 800a7a6:	89a3      	ldrh	r3, [r4, #12]
 800a7a8:	0598      	lsls	r0, r3, #22
 800a7aa:	d402      	bmi.n	800a7b2 <_puts_r+0x22>
 800a7ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a7ae:	f000 f8d8 	bl	800a962 <__retarget_lock_acquire_recursive>
 800a7b2:	89a3      	ldrh	r3, [r4, #12]
 800a7b4:	0719      	lsls	r1, r3, #28
 800a7b6:	d513      	bpl.n	800a7e0 <_puts_r+0x50>
 800a7b8:	6923      	ldr	r3, [r4, #16]
 800a7ba:	b18b      	cbz	r3, 800a7e0 <_puts_r+0x50>
 800a7bc:	3e01      	subs	r6, #1
 800a7be:	68a3      	ldr	r3, [r4, #8]
 800a7c0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a7c4:	3b01      	subs	r3, #1
 800a7c6:	60a3      	str	r3, [r4, #8]
 800a7c8:	b9e9      	cbnz	r1, 800a806 <_puts_r+0x76>
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	da2e      	bge.n	800a82c <_puts_r+0x9c>
 800a7ce:	4622      	mov	r2, r4
 800a7d0:	210a      	movs	r1, #10
 800a7d2:	4628      	mov	r0, r5
 800a7d4:	f001 fe03 	bl	800c3de <__swbuf_r>
 800a7d8:	3001      	adds	r0, #1
 800a7da:	d007      	beq.n	800a7ec <_puts_r+0x5c>
 800a7dc:	250a      	movs	r5, #10
 800a7de:	e007      	b.n	800a7f0 <_puts_r+0x60>
 800a7e0:	4621      	mov	r1, r4
 800a7e2:	4628      	mov	r0, r5
 800a7e4:	f001 fe38 	bl	800c458 <__swsetup_r>
 800a7e8:	2800      	cmp	r0, #0
 800a7ea:	d0e7      	beq.n	800a7bc <_puts_r+0x2c>
 800a7ec:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800a7f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a7f2:	07da      	lsls	r2, r3, #31
 800a7f4:	d405      	bmi.n	800a802 <_puts_r+0x72>
 800a7f6:	89a3      	ldrh	r3, [r4, #12]
 800a7f8:	059b      	lsls	r3, r3, #22
 800a7fa:	d402      	bmi.n	800a802 <_puts_r+0x72>
 800a7fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a7fe:	f000 f8b1 	bl	800a964 <__retarget_lock_release_recursive>
 800a802:	4628      	mov	r0, r5
 800a804:	bd70      	pop	{r4, r5, r6, pc}
 800a806:	2b00      	cmp	r3, #0
 800a808:	da04      	bge.n	800a814 <_puts_r+0x84>
 800a80a:	69a2      	ldr	r2, [r4, #24]
 800a80c:	429a      	cmp	r2, r3
 800a80e:	dc06      	bgt.n	800a81e <_puts_r+0x8e>
 800a810:	290a      	cmp	r1, #10
 800a812:	d004      	beq.n	800a81e <_puts_r+0x8e>
 800a814:	6823      	ldr	r3, [r4, #0]
 800a816:	1c5a      	adds	r2, r3, #1
 800a818:	6022      	str	r2, [r4, #0]
 800a81a:	7019      	strb	r1, [r3, #0]
 800a81c:	e7cf      	b.n	800a7be <_puts_r+0x2e>
 800a81e:	4622      	mov	r2, r4
 800a820:	4628      	mov	r0, r5
 800a822:	f001 fddc 	bl	800c3de <__swbuf_r>
 800a826:	3001      	adds	r0, #1
 800a828:	d1c9      	bne.n	800a7be <_puts_r+0x2e>
 800a82a:	e7df      	b.n	800a7ec <_puts_r+0x5c>
 800a82c:	6823      	ldr	r3, [r4, #0]
 800a82e:	250a      	movs	r5, #10
 800a830:	1c5a      	adds	r2, r3, #1
 800a832:	6022      	str	r2, [r4, #0]
 800a834:	701d      	strb	r5, [r3, #0]
 800a836:	e7db      	b.n	800a7f0 <_puts_r+0x60>

0800a838 <puts>:
 800a838:	4b02      	ldr	r3, [pc, #8]	; (800a844 <puts+0xc>)
 800a83a:	4601      	mov	r1, r0
 800a83c:	6818      	ldr	r0, [r3, #0]
 800a83e:	f7ff bfa7 	b.w	800a790 <_puts_r>
 800a842:	bf00      	nop
 800a844:	20000068 	.word	0x20000068

0800a848 <memset>:
 800a848:	4402      	add	r2, r0
 800a84a:	4603      	mov	r3, r0
 800a84c:	4293      	cmp	r3, r2
 800a84e:	d100      	bne.n	800a852 <memset+0xa>
 800a850:	4770      	bx	lr
 800a852:	f803 1b01 	strb.w	r1, [r3], #1
 800a856:	e7f9      	b.n	800a84c <memset+0x4>

0800a858 <_localeconv_r>:
 800a858:	4800      	ldr	r0, [pc, #0]	; (800a85c <_localeconv_r+0x4>)
 800a85a:	4770      	bx	lr
 800a85c:	2000015c 	.word	0x2000015c

0800a860 <_reclaim_reent>:
 800a860:	4b29      	ldr	r3, [pc, #164]	; (800a908 <_reclaim_reent+0xa8>)
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	4283      	cmp	r3, r0
 800a866:	b570      	push	{r4, r5, r6, lr}
 800a868:	4604      	mov	r4, r0
 800a86a:	d04b      	beq.n	800a904 <_reclaim_reent+0xa4>
 800a86c:	69c3      	ldr	r3, [r0, #28]
 800a86e:	b143      	cbz	r3, 800a882 <_reclaim_reent+0x22>
 800a870:	68db      	ldr	r3, [r3, #12]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d144      	bne.n	800a900 <_reclaim_reent+0xa0>
 800a876:	69e3      	ldr	r3, [r4, #28]
 800a878:	6819      	ldr	r1, [r3, #0]
 800a87a:	b111      	cbz	r1, 800a882 <_reclaim_reent+0x22>
 800a87c:	4620      	mov	r0, r4
 800a87e:	f000 fefd 	bl	800b67c <_free_r>
 800a882:	6961      	ldr	r1, [r4, #20]
 800a884:	b111      	cbz	r1, 800a88c <_reclaim_reent+0x2c>
 800a886:	4620      	mov	r0, r4
 800a888:	f000 fef8 	bl	800b67c <_free_r>
 800a88c:	69e1      	ldr	r1, [r4, #28]
 800a88e:	b111      	cbz	r1, 800a896 <_reclaim_reent+0x36>
 800a890:	4620      	mov	r0, r4
 800a892:	f000 fef3 	bl	800b67c <_free_r>
 800a896:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a898:	b111      	cbz	r1, 800a8a0 <_reclaim_reent+0x40>
 800a89a:	4620      	mov	r0, r4
 800a89c:	f000 feee 	bl	800b67c <_free_r>
 800a8a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a8a2:	b111      	cbz	r1, 800a8aa <_reclaim_reent+0x4a>
 800a8a4:	4620      	mov	r0, r4
 800a8a6:	f000 fee9 	bl	800b67c <_free_r>
 800a8aa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a8ac:	b111      	cbz	r1, 800a8b4 <_reclaim_reent+0x54>
 800a8ae:	4620      	mov	r0, r4
 800a8b0:	f000 fee4 	bl	800b67c <_free_r>
 800a8b4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a8b6:	b111      	cbz	r1, 800a8be <_reclaim_reent+0x5e>
 800a8b8:	4620      	mov	r0, r4
 800a8ba:	f000 fedf 	bl	800b67c <_free_r>
 800a8be:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a8c0:	b111      	cbz	r1, 800a8c8 <_reclaim_reent+0x68>
 800a8c2:	4620      	mov	r0, r4
 800a8c4:	f000 feda 	bl	800b67c <_free_r>
 800a8c8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800a8ca:	b111      	cbz	r1, 800a8d2 <_reclaim_reent+0x72>
 800a8cc:	4620      	mov	r0, r4
 800a8ce:	f000 fed5 	bl	800b67c <_free_r>
 800a8d2:	6a23      	ldr	r3, [r4, #32]
 800a8d4:	b1b3      	cbz	r3, 800a904 <_reclaim_reent+0xa4>
 800a8d6:	4620      	mov	r0, r4
 800a8d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a8dc:	4718      	bx	r3
 800a8de:	5949      	ldr	r1, [r1, r5]
 800a8e0:	b941      	cbnz	r1, 800a8f4 <_reclaim_reent+0x94>
 800a8e2:	3504      	adds	r5, #4
 800a8e4:	69e3      	ldr	r3, [r4, #28]
 800a8e6:	2d80      	cmp	r5, #128	; 0x80
 800a8e8:	68d9      	ldr	r1, [r3, #12]
 800a8ea:	d1f8      	bne.n	800a8de <_reclaim_reent+0x7e>
 800a8ec:	4620      	mov	r0, r4
 800a8ee:	f000 fec5 	bl	800b67c <_free_r>
 800a8f2:	e7c0      	b.n	800a876 <_reclaim_reent+0x16>
 800a8f4:	680e      	ldr	r6, [r1, #0]
 800a8f6:	4620      	mov	r0, r4
 800a8f8:	f000 fec0 	bl	800b67c <_free_r>
 800a8fc:	4631      	mov	r1, r6
 800a8fe:	e7ef      	b.n	800a8e0 <_reclaim_reent+0x80>
 800a900:	2500      	movs	r5, #0
 800a902:	e7ef      	b.n	800a8e4 <_reclaim_reent+0x84>
 800a904:	bd70      	pop	{r4, r5, r6, pc}
 800a906:	bf00      	nop
 800a908:	20000068 	.word	0x20000068

0800a90c <__errno>:
 800a90c:	4b01      	ldr	r3, [pc, #4]	; (800a914 <__errno+0x8>)
 800a90e:	6818      	ldr	r0, [r3, #0]
 800a910:	4770      	bx	lr
 800a912:	bf00      	nop
 800a914:	20000068 	.word	0x20000068

0800a918 <__libc_init_array>:
 800a918:	b570      	push	{r4, r5, r6, lr}
 800a91a:	4d0d      	ldr	r5, [pc, #52]	; (800a950 <__libc_init_array+0x38>)
 800a91c:	4c0d      	ldr	r4, [pc, #52]	; (800a954 <__libc_init_array+0x3c>)
 800a91e:	1b64      	subs	r4, r4, r5
 800a920:	10a4      	asrs	r4, r4, #2
 800a922:	2600      	movs	r6, #0
 800a924:	42a6      	cmp	r6, r4
 800a926:	d109      	bne.n	800a93c <__libc_init_array+0x24>
 800a928:	4d0b      	ldr	r5, [pc, #44]	; (800a958 <__libc_init_array+0x40>)
 800a92a:	4c0c      	ldr	r4, [pc, #48]	; (800a95c <__libc_init_array+0x44>)
 800a92c:	f002 fc2e 	bl	800d18c <_init>
 800a930:	1b64      	subs	r4, r4, r5
 800a932:	10a4      	asrs	r4, r4, #2
 800a934:	2600      	movs	r6, #0
 800a936:	42a6      	cmp	r6, r4
 800a938:	d105      	bne.n	800a946 <__libc_init_array+0x2e>
 800a93a:	bd70      	pop	{r4, r5, r6, pc}
 800a93c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a940:	4798      	blx	r3
 800a942:	3601      	adds	r6, #1
 800a944:	e7ee      	b.n	800a924 <__libc_init_array+0xc>
 800a946:	f855 3b04 	ldr.w	r3, [r5], #4
 800a94a:	4798      	blx	r3
 800a94c:	3601      	adds	r6, #1
 800a94e:	e7f2      	b.n	800a936 <__libc_init_array+0x1e>
 800a950:	0800d8f8 	.word	0x0800d8f8
 800a954:	0800d8f8 	.word	0x0800d8f8
 800a958:	0800d8f8 	.word	0x0800d8f8
 800a95c:	0800d8fc 	.word	0x0800d8fc

0800a960 <__retarget_lock_init_recursive>:
 800a960:	4770      	bx	lr

0800a962 <__retarget_lock_acquire_recursive>:
 800a962:	4770      	bx	lr

0800a964 <__retarget_lock_release_recursive>:
 800a964:	4770      	bx	lr

0800a966 <memcpy>:
 800a966:	440a      	add	r2, r1
 800a968:	4291      	cmp	r1, r2
 800a96a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a96e:	d100      	bne.n	800a972 <memcpy+0xc>
 800a970:	4770      	bx	lr
 800a972:	b510      	push	{r4, lr}
 800a974:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a978:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a97c:	4291      	cmp	r1, r2
 800a97e:	d1f9      	bne.n	800a974 <memcpy+0xe>
 800a980:	bd10      	pop	{r4, pc}

0800a982 <quorem>:
 800a982:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a986:	6903      	ldr	r3, [r0, #16]
 800a988:	690c      	ldr	r4, [r1, #16]
 800a98a:	42a3      	cmp	r3, r4
 800a98c:	4607      	mov	r7, r0
 800a98e:	db7e      	blt.n	800aa8e <quorem+0x10c>
 800a990:	3c01      	subs	r4, #1
 800a992:	f101 0814 	add.w	r8, r1, #20
 800a996:	f100 0514 	add.w	r5, r0, #20
 800a99a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a99e:	9301      	str	r3, [sp, #4]
 800a9a0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a9a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a9a8:	3301      	adds	r3, #1
 800a9aa:	429a      	cmp	r2, r3
 800a9ac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a9b0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a9b4:	fbb2 f6f3 	udiv	r6, r2, r3
 800a9b8:	d331      	bcc.n	800aa1e <quorem+0x9c>
 800a9ba:	f04f 0e00 	mov.w	lr, #0
 800a9be:	4640      	mov	r0, r8
 800a9c0:	46ac      	mov	ip, r5
 800a9c2:	46f2      	mov	sl, lr
 800a9c4:	f850 2b04 	ldr.w	r2, [r0], #4
 800a9c8:	b293      	uxth	r3, r2
 800a9ca:	fb06 e303 	mla	r3, r6, r3, lr
 800a9ce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a9d2:	0c1a      	lsrs	r2, r3, #16
 800a9d4:	b29b      	uxth	r3, r3
 800a9d6:	ebaa 0303 	sub.w	r3, sl, r3
 800a9da:	f8dc a000 	ldr.w	sl, [ip]
 800a9de:	fa13 f38a 	uxtah	r3, r3, sl
 800a9e2:	fb06 220e 	mla	r2, r6, lr, r2
 800a9e6:	9300      	str	r3, [sp, #0]
 800a9e8:	9b00      	ldr	r3, [sp, #0]
 800a9ea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a9ee:	b292      	uxth	r2, r2
 800a9f0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a9f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a9f8:	f8bd 3000 	ldrh.w	r3, [sp]
 800a9fc:	4581      	cmp	r9, r0
 800a9fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aa02:	f84c 3b04 	str.w	r3, [ip], #4
 800aa06:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800aa0a:	d2db      	bcs.n	800a9c4 <quorem+0x42>
 800aa0c:	f855 300b 	ldr.w	r3, [r5, fp]
 800aa10:	b92b      	cbnz	r3, 800aa1e <quorem+0x9c>
 800aa12:	9b01      	ldr	r3, [sp, #4]
 800aa14:	3b04      	subs	r3, #4
 800aa16:	429d      	cmp	r5, r3
 800aa18:	461a      	mov	r2, r3
 800aa1a:	d32c      	bcc.n	800aa76 <quorem+0xf4>
 800aa1c:	613c      	str	r4, [r7, #16]
 800aa1e:	4638      	mov	r0, r7
 800aa20:	f001 fb9a 	bl	800c158 <__mcmp>
 800aa24:	2800      	cmp	r0, #0
 800aa26:	db22      	blt.n	800aa6e <quorem+0xec>
 800aa28:	3601      	adds	r6, #1
 800aa2a:	4629      	mov	r1, r5
 800aa2c:	2000      	movs	r0, #0
 800aa2e:	f858 2b04 	ldr.w	r2, [r8], #4
 800aa32:	f8d1 c000 	ldr.w	ip, [r1]
 800aa36:	b293      	uxth	r3, r2
 800aa38:	1ac3      	subs	r3, r0, r3
 800aa3a:	0c12      	lsrs	r2, r2, #16
 800aa3c:	fa13 f38c 	uxtah	r3, r3, ip
 800aa40:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800aa44:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800aa48:	b29b      	uxth	r3, r3
 800aa4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aa4e:	45c1      	cmp	r9, r8
 800aa50:	f841 3b04 	str.w	r3, [r1], #4
 800aa54:	ea4f 4022 	mov.w	r0, r2, asr #16
 800aa58:	d2e9      	bcs.n	800aa2e <quorem+0xac>
 800aa5a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aa5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aa62:	b922      	cbnz	r2, 800aa6e <quorem+0xec>
 800aa64:	3b04      	subs	r3, #4
 800aa66:	429d      	cmp	r5, r3
 800aa68:	461a      	mov	r2, r3
 800aa6a:	d30a      	bcc.n	800aa82 <quorem+0x100>
 800aa6c:	613c      	str	r4, [r7, #16]
 800aa6e:	4630      	mov	r0, r6
 800aa70:	b003      	add	sp, #12
 800aa72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa76:	6812      	ldr	r2, [r2, #0]
 800aa78:	3b04      	subs	r3, #4
 800aa7a:	2a00      	cmp	r2, #0
 800aa7c:	d1ce      	bne.n	800aa1c <quorem+0x9a>
 800aa7e:	3c01      	subs	r4, #1
 800aa80:	e7c9      	b.n	800aa16 <quorem+0x94>
 800aa82:	6812      	ldr	r2, [r2, #0]
 800aa84:	3b04      	subs	r3, #4
 800aa86:	2a00      	cmp	r2, #0
 800aa88:	d1f0      	bne.n	800aa6c <quorem+0xea>
 800aa8a:	3c01      	subs	r4, #1
 800aa8c:	e7eb      	b.n	800aa66 <quorem+0xe4>
 800aa8e:	2000      	movs	r0, #0
 800aa90:	e7ee      	b.n	800aa70 <quorem+0xee>
 800aa92:	0000      	movs	r0, r0
 800aa94:	0000      	movs	r0, r0
	...

0800aa98 <_dtoa_r>:
 800aa98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa9c:	ed2d 8b04 	vpush	{d8-d9}
 800aaa0:	69c5      	ldr	r5, [r0, #28]
 800aaa2:	b093      	sub	sp, #76	; 0x4c
 800aaa4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800aaa8:	ec57 6b10 	vmov	r6, r7, d0
 800aaac:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800aab0:	9107      	str	r1, [sp, #28]
 800aab2:	4604      	mov	r4, r0
 800aab4:	920a      	str	r2, [sp, #40]	; 0x28
 800aab6:	930d      	str	r3, [sp, #52]	; 0x34
 800aab8:	b975      	cbnz	r5, 800aad8 <_dtoa_r+0x40>
 800aaba:	2010      	movs	r0, #16
 800aabc:	f000 ff6e 	bl	800b99c <malloc>
 800aac0:	4602      	mov	r2, r0
 800aac2:	61e0      	str	r0, [r4, #28]
 800aac4:	b920      	cbnz	r0, 800aad0 <_dtoa_r+0x38>
 800aac6:	4bae      	ldr	r3, [pc, #696]	; (800ad80 <_dtoa_r+0x2e8>)
 800aac8:	21ef      	movs	r1, #239	; 0xef
 800aaca:	48ae      	ldr	r0, [pc, #696]	; (800ad84 <_dtoa_r+0x2ec>)
 800aacc:	f001 fdf6 	bl	800c6bc <__assert_func>
 800aad0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800aad4:	6005      	str	r5, [r0, #0]
 800aad6:	60c5      	str	r5, [r0, #12]
 800aad8:	69e3      	ldr	r3, [r4, #28]
 800aada:	6819      	ldr	r1, [r3, #0]
 800aadc:	b151      	cbz	r1, 800aaf4 <_dtoa_r+0x5c>
 800aade:	685a      	ldr	r2, [r3, #4]
 800aae0:	604a      	str	r2, [r1, #4]
 800aae2:	2301      	movs	r3, #1
 800aae4:	4093      	lsls	r3, r2
 800aae6:	608b      	str	r3, [r1, #8]
 800aae8:	4620      	mov	r0, r4
 800aaea:	f001 f8f9 	bl	800bce0 <_Bfree>
 800aaee:	69e3      	ldr	r3, [r4, #28]
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	601a      	str	r2, [r3, #0]
 800aaf4:	1e3b      	subs	r3, r7, #0
 800aaf6:	bfbb      	ittet	lt
 800aaf8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800aafc:	9303      	strlt	r3, [sp, #12]
 800aafe:	2300      	movge	r3, #0
 800ab00:	2201      	movlt	r2, #1
 800ab02:	bfac      	ite	ge
 800ab04:	f8c8 3000 	strge.w	r3, [r8]
 800ab08:	f8c8 2000 	strlt.w	r2, [r8]
 800ab0c:	4b9e      	ldr	r3, [pc, #632]	; (800ad88 <_dtoa_r+0x2f0>)
 800ab0e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800ab12:	ea33 0308 	bics.w	r3, r3, r8
 800ab16:	d11b      	bne.n	800ab50 <_dtoa_r+0xb8>
 800ab18:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ab1a:	f242 730f 	movw	r3, #9999	; 0x270f
 800ab1e:	6013      	str	r3, [r2, #0]
 800ab20:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800ab24:	4333      	orrs	r3, r6
 800ab26:	f000 8593 	beq.w	800b650 <_dtoa_r+0xbb8>
 800ab2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ab2c:	b963      	cbnz	r3, 800ab48 <_dtoa_r+0xb0>
 800ab2e:	4b97      	ldr	r3, [pc, #604]	; (800ad8c <_dtoa_r+0x2f4>)
 800ab30:	e027      	b.n	800ab82 <_dtoa_r+0xea>
 800ab32:	4b97      	ldr	r3, [pc, #604]	; (800ad90 <_dtoa_r+0x2f8>)
 800ab34:	9300      	str	r3, [sp, #0]
 800ab36:	3308      	adds	r3, #8
 800ab38:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ab3a:	6013      	str	r3, [r2, #0]
 800ab3c:	9800      	ldr	r0, [sp, #0]
 800ab3e:	b013      	add	sp, #76	; 0x4c
 800ab40:	ecbd 8b04 	vpop	{d8-d9}
 800ab44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab48:	4b90      	ldr	r3, [pc, #576]	; (800ad8c <_dtoa_r+0x2f4>)
 800ab4a:	9300      	str	r3, [sp, #0]
 800ab4c:	3303      	adds	r3, #3
 800ab4e:	e7f3      	b.n	800ab38 <_dtoa_r+0xa0>
 800ab50:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ab54:	2200      	movs	r2, #0
 800ab56:	ec51 0b17 	vmov	r0, r1, d7
 800ab5a:	eeb0 8a47 	vmov.f32	s16, s14
 800ab5e:	eef0 8a67 	vmov.f32	s17, s15
 800ab62:	2300      	movs	r3, #0
 800ab64:	f7f5 ffb0 	bl	8000ac8 <__aeabi_dcmpeq>
 800ab68:	4681      	mov	r9, r0
 800ab6a:	b160      	cbz	r0, 800ab86 <_dtoa_r+0xee>
 800ab6c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ab6e:	2301      	movs	r3, #1
 800ab70:	6013      	str	r3, [r2, #0]
 800ab72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	f000 8568 	beq.w	800b64a <_dtoa_r+0xbb2>
 800ab7a:	4b86      	ldr	r3, [pc, #536]	; (800ad94 <_dtoa_r+0x2fc>)
 800ab7c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ab7e:	6013      	str	r3, [r2, #0]
 800ab80:	3b01      	subs	r3, #1
 800ab82:	9300      	str	r3, [sp, #0]
 800ab84:	e7da      	b.n	800ab3c <_dtoa_r+0xa4>
 800ab86:	aa10      	add	r2, sp, #64	; 0x40
 800ab88:	a911      	add	r1, sp, #68	; 0x44
 800ab8a:	4620      	mov	r0, r4
 800ab8c:	eeb0 0a48 	vmov.f32	s0, s16
 800ab90:	eef0 0a68 	vmov.f32	s1, s17
 800ab94:	f001 fb86 	bl	800c2a4 <__d2b>
 800ab98:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800ab9c:	4682      	mov	sl, r0
 800ab9e:	2d00      	cmp	r5, #0
 800aba0:	d07f      	beq.n	800aca2 <_dtoa_r+0x20a>
 800aba2:	ee18 3a90 	vmov	r3, s17
 800aba6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800abaa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800abae:	ec51 0b18 	vmov	r0, r1, d8
 800abb2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800abb6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800abba:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800abbe:	4619      	mov	r1, r3
 800abc0:	2200      	movs	r2, #0
 800abc2:	4b75      	ldr	r3, [pc, #468]	; (800ad98 <_dtoa_r+0x300>)
 800abc4:	f7f5 fb60 	bl	8000288 <__aeabi_dsub>
 800abc8:	a367      	add	r3, pc, #412	; (adr r3, 800ad68 <_dtoa_r+0x2d0>)
 800abca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abce:	f7f5 fd13 	bl	80005f8 <__aeabi_dmul>
 800abd2:	a367      	add	r3, pc, #412	; (adr r3, 800ad70 <_dtoa_r+0x2d8>)
 800abd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abd8:	f7f5 fb58 	bl	800028c <__adddf3>
 800abdc:	4606      	mov	r6, r0
 800abde:	4628      	mov	r0, r5
 800abe0:	460f      	mov	r7, r1
 800abe2:	f7f5 fc9f 	bl	8000524 <__aeabi_i2d>
 800abe6:	a364      	add	r3, pc, #400	; (adr r3, 800ad78 <_dtoa_r+0x2e0>)
 800abe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abec:	f7f5 fd04 	bl	80005f8 <__aeabi_dmul>
 800abf0:	4602      	mov	r2, r0
 800abf2:	460b      	mov	r3, r1
 800abf4:	4630      	mov	r0, r6
 800abf6:	4639      	mov	r1, r7
 800abf8:	f7f5 fb48 	bl	800028c <__adddf3>
 800abfc:	4606      	mov	r6, r0
 800abfe:	460f      	mov	r7, r1
 800ac00:	f7f5 ffaa 	bl	8000b58 <__aeabi_d2iz>
 800ac04:	2200      	movs	r2, #0
 800ac06:	4683      	mov	fp, r0
 800ac08:	2300      	movs	r3, #0
 800ac0a:	4630      	mov	r0, r6
 800ac0c:	4639      	mov	r1, r7
 800ac0e:	f7f5 ff65 	bl	8000adc <__aeabi_dcmplt>
 800ac12:	b148      	cbz	r0, 800ac28 <_dtoa_r+0x190>
 800ac14:	4658      	mov	r0, fp
 800ac16:	f7f5 fc85 	bl	8000524 <__aeabi_i2d>
 800ac1a:	4632      	mov	r2, r6
 800ac1c:	463b      	mov	r3, r7
 800ac1e:	f7f5 ff53 	bl	8000ac8 <__aeabi_dcmpeq>
 800ac22:	b908      	cbnz	r0, 800ac28 <_dtoa_r+0x190>
 800ac24:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800ac28:	f1bb 0f16 	cmp.w	fp, #22
 800ac2c:	d857      	bhi.n	800acde <_dtoa_r+0x246>
 800ac2e:	4b5b      	ldr	r3, [pc, #364]	; (800ad9c <_dtoa_r+0x304>)
 800ac30:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ac34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac38:	ec51 0b18 	vmov	r0, r1, d8
 800ac3c:	f7f5 ff4e 	bl	8000adc <__aeabi_dcmplt>
 800ac40:	2800      	cmp	r0, #0
 800ac42:	d04e      	beq.n	800ace2 <_dtoa_r+0x24a>
 800ac44:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800ac48:	2300      	movs	r3, #0
 800ac4a:	930c      	str	r3, [sp, #48]	; 0x30
 800ac4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ac4e:	1b5b      	subs	r3, r3, r5
 800ac50:	1e5a      	subs	r2, r3, #1
 800ac52:	bf45      	ittet	mi
 800ac54:	f1c3 0301 	rsbmi	r3, r3, #1
 800ac58:	9305      	strmi	r3, [sp, #20]
 800ac5a:	2300      	movpl	r3, #0
 800ac5c:	2300      	movmi	r3, #0
 800ac5e:	9206      	str	r2, [sp, #24]
 800ac60:	bf54      	ite	pl
 800ac62:	9305      	strpl	r3, [sp, #20]
 800ac64:	9306      	strmi	r3, [sp, #24]
 800ac66:	f1bb 0f00 	cmp.w	fp, #0
 800ac6a:	db3c      	blt.n	800ace6 <_dtoa_r+0x24e>
 800ac6c:	9b06      	ldr	r3, [sp, #24]
 800ac6e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800ac72:	445b      	add	r3, fp
 800ac74:	9306      	str	r3, [sp, #24]
 800ac76:	2300      	movs	r3, #0
 800ac78:	9308      	str	r3, [sp, #32]
 800ac7a:	9b07      	ldr	r3, [sp, #28]
 800ac7c:	2b09      	cmp	r3, #9
 800ac7e:	d868      	bhi.n	800ad52 <_dtoa_r+0x2ba>
 800ac80:	2b05      	cmp	r3, #5
 800ac82:	bfc4      	itt	gt
 800ac84:	3b04      	subgt	r3, #4
 800ac86:	9307      	strgt	r3, [sp, #28]
 800ac88:	9b07      	ldr	r3, [sp, #28]
 800ac8a:	f1a3 0302 	sub.w	r3, r3, #2
 800ac8e:	bfcc      	ite	gt
 800ac90:	2500      	movgt	r5, #0
 800ac92:	2501      	movle	r5, #1
 800ac94:	2b03      	cmp	r3, #3
 800ac96:	f200 8085 	bhi.w	800ada4 <_dtoa_r+0x30c>
 800ac9a:	e8df f003 	tbb	[pc, r3]
 800ac9e:	3b2e      	.short	0x3b2e
 800aca0:	5839      	.short	0x5839
 800aca2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800aca6:	441d      	add	r5, r3
 800aca8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800acac:	2b20      	cmp	r3, #32
 800acae:	bfc1      	itttt	gt
 800acb0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800acb4:	fa08 f803 	lslgt.w	r8, r8, r3
 800acb8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800acbc:	fa26 f303 	lsrgt.w	r3, r6, r3
 800acc0:	bfd6      	itet	le
 800acc2:	f1c3 0320 	rsble	r3, r3, #32
 800acc6:	ea48 0003 	orrgt.w	r0, r8, r3
 800acca:	fa06 f003 	lslle.w	r0, r6, r3
 800acce:	f7f5 fc19 	bl	8000504 <__aeabi_ui2d>
 800acd2:	2201      	movs	r2, #1
 800acd4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800acd8:	3d01      	subs	r5, #1
 800acda:	920e      	str	r2, [sp, #56]	; 0x38
 800acdc:	e76f      	b.n	800abbe <_dtoa_r+0x126>
 800acde:	2301      	movs	r3, #1
 800ace0:	e7b3      	b.n	800ac4a <_dtoa_r+0x1b2>
 800ace2:	900c      	str	r0, [sp, #48]	; 0x30
 800ace4:	e7b2      	b.n	800ac4c <_dtoa_r+0x1b4>
 800ace6:	9b05      	ldr	r3, [sp, #20]
 800ace8:	eba3 030b 	sub.w	r3, r3, fp
 800acec:	9305      	str	r3, [sp, #20]
 800acee:	f1cb 0300 	rsb	r3, fp, #0
 800acf2:	9308      	str	r3, [sp, #32]
 800acf4:	2300      	movs	r3, #0
 800acf6:	930b      	str	r3, [sp, #44]	; 0x2c
 800acf8:	e7bf      	b.n	800ac7a <_dtoa_r+0x1e2>
 800acfa:	2300      	movs	r3, #0
 800acfc:	9309      	str	r3, [sp, #36]	; 0x24
 800acfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	dc52      	bgt.n	800adaa <_dtoa_r+0x312>
 800ad04:	2301      	movs	r3, #1
 800ad06:	9301      	str	r3, [sp, #4]
 800ad08:	9304      	str	r3, [sp, #16]
 800ad0a:	461a      	mov	r2, r3
 800ad0c:	920a      	str	r2, [sp, #40]	; 0x28
 800ad0e:	e00b      	b.n	800ad28 <_dtoa_r+0x290>
 800ad10:	2301      	movs	r3, #1
 800ad12:	e7f3      	b.n	800acfc <_dtoa_r+0x264>
 800ad14:	2300      	movs	r3, #0
 800ad16:	9309      	str	r3, [sp, #36]	; 0x24
 800ad18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad1a:	445b      	add	r3, fp
 800ad1c:	9301      	str	r3, [sp, #4]
 800ad1e:	3301      	adds	r3, #1
 800ad20:	2b01      	cmp	r3, #1
 800ad22:	9304      	str	r3, [sp, #16]
 800ad24:	bfb8      	it	lt
 800ad26:	2301      	movlt	r3, #1
 800ad28:	69e0      	ldr	r0, [r4, #28]
 800ad2a:	2100      	movs	r1, #0
 800ad2c:	2204      	movs	r2, #4
 800ad2e:	f102 0614 	add.w	r6, r2, #20
 800ad32:	429e      	cmp	r6, r3
 800ad34:	d93d      	bls.n	800adb2 <_dtoa_r+0x31a>
 800ad36:	6041      	str	r1, [r0, #4]
 800ad38:	4620      	mov	r0, r4
 800ad3a:	f000 ff91 	bl	800bc60 <_Balloc>
 800ad3e:	9000      	str	r0, [sp, #0]
 800ad40:	2800      	cmp	r0, #0
 800ad42:	d139      	bne.n	800adb8 <_dtoa_r+0x320>
 800ad44:	4b16      	ldr	r3, [pc, #88]	; (800ada0 <_dtoa_r+0x308>)
 800ad46:	4602      	mov	r2, r0
 800ad48:	f240 11af 	movw	r1, #431	; 0x1af
 800ad4c:	e6bd      	b.n	800aaca <_dtoa_r+0x32>
 800ad4e:	2301      	movs	r3, #1
 800ad50:	e7e1      	b.n	800ad16 <_dtoa_r+0x27e>
 800ad52:	2501      	movs	r5, #1
 800ad54:	2300      	movs	r3, #0
 800ad56:	9307      	str	r3, [sp, #28]
 800ad58:	9509      	str	r5, [sp, #36]	; 0x24
 800ad5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ad5e:	9301      	str	r3, [sp, #4]
 800ad60:	9304      	str	r3, [sp, #16]
 800ad62:	2200      	movs	r2, #0
 800ad64:	2312      	movs	r3, #18
 800ad66:	e7d1      	b.n	800ad0c <_dtoa_r+0x274>
 800ad68:	636f4361 	.word	0x636f4361
 800ad6c:	3fd287a7 	.word	0x3fd287a7
 800ad70:	8b60c8b3 	.word	0x8b60c8b3
 800ad74:	3fc68a28 	.word	0x3fc68a28
 800ad78:	509f79fb 	.word	0x509f79fb
 800ad7c:	3fd34413 	.word	0x3fd34413
 800ad80:	0800d53d 	.word	0x0800d53d
 800ad84:	0800d554 	.word	0x0800d554
 800ad88:	7ff00000 	.word	0x7ff00000
 800ad8c:	0800d539 	.word	0x0800d539
 800ad90:	0800d530 	.word	0x0800d530
 800ad94:	0800d50d 	.word	0x0800d50d
 800ad98:	3ff80000 	.word	0x3ff80000
 800ad9c:	0800d650 	.word	0x0800d650
 800ada0:	0800d5ac 	.word	0x0800d5ac
 800ada4:	2301      	movs	r3, #1
 800ada6:	9309      	str	r3, [sp, #36]	; 0x24
 800ada8:	e7d7      	b.n	800ad5a <_dtoa_r+0x2c2>
 800adaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800adac:	9301      	str	r3, [sp, #4]
 800adae:	9304      	str	r3, [sp, #16]
 800adb0:	e7ba      	b.n	800ad28 <_dtoa_r+0x290>
 800adb2:	3101      	adds	r1, #1
 800adb4:	0052      	lsls	r2, r2, #1
 800adb6:	e7ba      	b.n	800ad2e <_dtoa_r+0x296>
 800adb8:	69e3      	ldr	r3, [r4, #28]
 800adba:	9a00      	ldr	r2, [sp, #0]
 800adbc:	601a      	str	r2, [r3, #0]
 800adbe:	9b04      	ldr	r3, [sp, #16]
 800adc0:	2b0e      	cmp	r3, #14
 800adc2:	f200 80a8 	bhi.w	800af16 <_dtoa_r+0x47e>
 800adc6:	2d00      	cmp	r5, #0
 800adc8:	f000 80a5 	beq.w	800af16 <_dtoa_r+0x47e>
 800adcc:	f1bb 0f00 	cmp.w	fp, #0
 800add0:	dd38      	ble.n	800ae44 <_dtoa_r+0x3ac>
 800add2:	4bc0      	ldr	r3, [pc, #768]	; (800b0d4 <_dtoa_r+0x63c>)
 800add4:	f00b 020f 	and.w	r2, fp, #15
 800add8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800addc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800ade0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800ade4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800ade8:	d019      	beq.n	800ae1e <_dtoa_r+0x386>
 800adea:	4bbb      	ldr	r3, [pc, #748]	; (800b0d8 <_dtoa_r+0x640>)
 800adec:	ec51 0b18 	vmov	r0, r1, d8
 800adf0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800adf4:	f7f5 fd2a 	bl	800084c <__aeabi_ddiv>
 800adf8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800adfc:	f008 080f 	and.w	r8, r8, #15
 800ae00:	2503      	movs	r5, #3
 800ae02:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800b0d8 <_dtoa_r+0x640>
 800ae06:	f1b8 0f00 	cmp.w	r8, #0
 800ae0a:	d10a      	bne.n	800ae22 <_dtoa_r+0x38a>
 800ae0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae10:	4632      	mov	r2, r6
 800ae12:	463b      	mov	r3, r7
 800ae14:	f7f5 fd1a 	bl	800084c <__aeabi_ddiv>
 800ae18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ae1c:	e02b      	b.n	800ae76 <_dtoa_r+0x3de>
 800ae1e:	2502      	movs	r5, #2
 800ae20:	e7ef      	b.n	800ae02 <_dtoa_r+0x36a>
 800ae22:	f018 0f01 	tst.w	r8, #1
 800ae26:	d008      	beq.n	800ae3a <_dtoa_r+0x3a2>
 800ae28:	4630      	mov	r0, r6
 800ae2a:	4639      	mov	r1, r7
 800ae2c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ae30:	f7f5 fbe2 	bl	80005f8 <__aeabi_dmul>
 800ae34:	3501      	adds	r5, #1
 800ae36:	4606      	mov	r6, r0
 800ae38:	460f      	mov	r7, r1
 800ae3a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ae3e:	f109 0908 	add.w	r9, r9, #8
 800ae42:	e7e0      	b.n	800ae06 <_dtoa_r+0x36e>
 800ae44:	f000 809f 	beq.w	800af86 <_dtoa_r+0x4ee>
 800ae48:	f1cb 0600 	rsb	r6, fp, #0
 800ae4c:	4ba1      	ldr	r3, [pc, #644]	; (800b0d4 <_dtoa_r+0x63c>)
 800ae4e:	4fa2      	ldr	r7, [pc, #648]	; (800b0d8 <_dtoa_r+0x640>)
 800ae50:	f006 020f 	and.w	r2, r6, #15
 800ae54:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ae58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae5c:	ec51 0b18 	vmov	r0, r1, d8
 800ae60:	f7f5 fbca 	bl	80005f8 <__aeabi_dmul>
 800ae64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ae68:	1136      	asrs	r6, r6, #4
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	2502      	movs	r5, #2
 800ae6e:	2e00      	cmp	r6, #0
 800ae70:	d17e      	bne.n	800af70 <_dtoa_r+0x4d8>
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d1d0      	bne.n	800ae18 <_dtoa_r+0x380>
 800ae76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ae78:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	f000 8084 	beq.w	800af8a <_dtoa_r+0x4f2>
 800ae82:	4b96      	ldr	r3, [pc, #600]	; (800b0dc <_dtoa_r+0x644>)
 800ae84:	2200      	movs	r2, #0
 800ae86:	4640      	mov	r0, r8
 800ae88:	4649      	mov	r1, r9
 800ae8a:	f7f5 fe27 	bl	8000adc <__aeabi_dcmplt>
 800ae8e:	2800      	cmp	r0, #0
 800ae90:	d07b      	beq.n	800af8a <_dtoa_r+0x4f2>
 800ae92:	9b04      	ldr	r3, [sp, #16]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d078      	beq.n	800af8a <_dtoa_r+0x4f2>
 800ae98:	9b01      	ldr	r3, [sp, #4]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	dd39      	ble.n	800af12 <_dtoa_r+0x47a>
 800ae9e:	4b90      	ldr	r3, [pc, #576]	; (800b0e0 <_dtoa_r+0x648>)
 800aea0:	2200      	movs	r2, #0
 800aea2:	4640      	mov	r0, r8
 800aea4:	4649      	mov	r1, r9
 800aea6:	f7f5 fba7 	bl	80005f8 <__aeabi_dmul>
 800aeaa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aeae:	9e01      	ldr	r6, [sp, #4]
 800aeb0:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800aeb4:	3501      	adds	r5, #1
 800aeb6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800aeba:	4628      	mov	r0, r5
 800aebc:	f7f5 fb32 	bl	8000524 <__aeabi_i2d>
 800aec0:	4642      	mov	r2, r8
 800aec2:	464b      	mov	r3, r9
 800aec4:	f7f5 fb98 	bl	80005f8 <__aeabi_dmul>
 800aec8:	4b86      	ldr	r3, [pc, #536]	; (800b0e4 <_dtoa_r+0x64c>)
 800aeca:	2200      	movs	r2, #0
 800aecc:	f7f5 f9de 	bl	800028c <__adddf3>
 800aed0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800aed4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aed8:	9303      	str	r3, [sp, #12]
 800aeda:	2e00      	cmp	r6, #0
 800aedc:	d158      	bne.n	800af90 <_dtoa_r+0x4f8>
 800aede:	4b82      	ldr	r3, [pc, #520]	; (800b0e8 <_dtoa_r+0x650>)
 800aee0:	2200      	movs	r2, #0
 800aee2:	4640      	mov	r0, r8
 800aee4:	4649      	mov	r1, r9
 800aee6:	f7f5 f9cf 	bl	8000288 <__aeabi_dsub>
 800aeea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aeee:	4680      	mov	r8, r0
 800aef0:	4689      	mov	r9, r1
 800aef2:	f7f5 fe11 	bl	8000b18 <__aeabi_dcmpgt>
 800aef6:	2800      	cmp	r0, #0
 800aef8:	f040 8296 	bne.w	800b428 <_dtoa_r+0x990>
 800aefc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800af00:	4640      	mov	r0, r8
 800af02:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800af06:	4649      	mov	r1, r9
 800af08:	f7f5 fde8 	bl	8000adc <__aeabi_dcmplt>
 800af0c:	2800      	cmp	r0, #0
 800af0e:	f040 8289 	bne.w	800b424 <_dtoa_r+0x98c>
 800af12:	ed8d 8b02 	vstr	d8, [sp, #8]
 800af16:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800af18:	2b00      	cmp	r3, #0
 800af1a:	f2c0 814e 	blt.w	800b1ba <_dtoa_r+0x722>
 800af1e:	f1bb 0f0e 	cmp.w	fp, #14
 800af22:	f300 814a 	bgt.w	800b1ba <_dtoa_r+0x722>
 800af26:	4b6b      	ldr	r3, [pc, #428]	; (800b0d4 <_dtoa_r+0x63c>)
 800af28:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800af2c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800af30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af32:	2b00      	cmp	r3, #0
 800af34:	f280 80dc 	bge.w	800b0f0 <_dtoa_r+0x658>
 800af38:	9b04      	ldr	r3, [sp, #16]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	f300 80d8 	bgt.w	800b0f0 <_dtoa_r+0x658>
 800af40:	f040 826f 	bne.w	800b422 <_dtoa_r+0x98a>
 800af44:	4b68      	ldr	r3, [pc, #416]	; (800b0e8 <_dtoa_r+0x650>)
 800af46:	2200      	movs	r2, #0
 800af48:	4640      	mov	r0, r8
 800af4a:	4649      	mov	r1, r9
 800af4c:	f7f5 fb54 	bl	80005f8 <__aeabi_dmul>
 800af50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800af54:	f7f5 fdd6 	bl	8000b04 <__aeabi_dcmpge>
 800af58:	9e04      	ldr	r6, [sp, #16]
 800af5a:	4637      	mov	r7, r6
 800af5c:	2800      	cmp	r0, #0
 800af5e:	f040 8245 	bne.w	800b3ec <_dtoa_r+0x954>
 800af62:	9d00      	ldr	r5, [sp, #0]
 800af64:	2331      	movs	r3, #49	; 0x31
 800af66:	f805 3b01 	strb.w	r3, [r5], #1
 800af6a:	f10b 0b01 	add.w	fp, fp, #1
 800af6e:	e241      	b.n	800b3f4 <_dtoa_r+0x95c>
 800af70:	07f2      	lsls	r2, r6, #31
 800af72:	d505      	bpl.n	800af80 <_dtoa_r+0x4e8>
 800af74:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af78:	f7f5 fb3e 	bl	80005f8 <__aeabi_dmul>
 800af7c:	3501      	adds	r5, #1
 800af7e:	2301      	movs	r3, #1
 800af80:	1076      	asrs	r6, r6, #1
 800af82:	3708      	adds	r7, #8
 800af84:	e773      	b.n	800ae6e <_dtoa_r+0x3d6>
 800af86:	2502      	movs	r5, #2
 800af88:	e775      	b.n	800ae76 <_dtoa_r+0x3de>
 800af8a:	9e04      	ldr	r6, [sp, #16]
 800af8c:	465f      	mov	r7, fp
 800af8e:	e792      	b.n	800aeb6 <_dtoa_r+0x41e>
 800af90:	9900      	ldr	r1, [sp, #0]
 800af92:	4b50      	ldr	r3, [pc, #320]	; (800b0d4 <_dtoa_r+0x63c>)
 800af94:	ed9d 7b02 	vldr	d7, [sp, #8]
 800af98:	4431      	add	r1, r6
 800af9a:	9102      	str	r1, [sp, #8]
 800af9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800af9e:	eeb0 9a47 	vmov.f32	s18, s14
 800afa2:	eef0 9a67 	vmov.f32	s19, s15
 800afa6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800afaa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800afae:	2900      	cmp	r1, #0
 800afb0:	d044      	beq.n	800b03c <_dtoa_r+0x5a4>
 800afb2:	494e      	ldr	r1, [pc, #312]	; (800b0ec <_dtoa_r+0x654>)
 800afb4:	2000      	movs	r0, #0
 800afb6:	f7f5 fc49 	bl	800084c <__aeabi_ddiv>
 800afba:	ec53 2b19 	vmov	r2, r3, d9
 800afbe:	f7f5 f963 	bl	8000288 <__aeabi_dsub>
 800afc2:	9d00      	ldr	r5, [sp, #0]
 800afc4:	ec41 0b19 	vmov	d9, r0, r1
 800afc8:	4649      	mov	r1, r9
 800afca:	4640      	mov	r0, r8
 800afcc:	f7f5 fdc4 	bl	8000b58 <__aeabi_d2iz>
 800afd0:	4606      	mov	r6, r0
 800afd2:	f7f5 faa7 	bl	8000524 <__aeabi_i2d>
 800afd6:	4602      	mov	r2, r0
 800afd8:	460b      	mov	r3, r1
 800afda:	4640      	mov	r0, r8
 800afdc:	4649      	mov	r1, r9
 800afde:	f7f5 f953 	bl	8000288 <__aeabi_dsub>
 800afe2:	3630      	adds	r6, #48	; 0x30
 800afe4:	f805 6b01 	strb.w	r6, [r5], #1
 800afe8:	ec53 2b19 	vmov	r2, r3, d9
 800afec:	4680      	mov	r8, r0
 800afee:	4689      	mov	r9, r1
 800aff0:	f7f5 fd74 	bl	8000adc <__aeabi_dcmplt>
 800aff4:	2800      	cmp	r0, #0
 800aff6:	d164      	bne.n	800b0c2 <_dtoa_r+0x62a>
 800aff8:	4642      	mov	r2, r8
 800affa:	464b      	mov	r3, r9
 800affc:	4937      	ldr	r1, [pc, #220]	; (800b0dc <_dtoa_r+0x644>)
 800affe:	2000      	movs	r0, #0
 800b000:	f7f5 f942 	bl	8000288 <__aeabi_dsub>
 800b004:	ec53 2b19 	vmov	r2, r3, d9
 800b008:	f7f5 fd68 	bl	8000adc <__aeabi_dcmplt>
 800b00c:	2800      	cmp	r0, #0
 800b00e:	f040 80b6 	bne.w	800b17e <_dtoa_r+0x6e6>
 800b012:	9b02      	ldr	r3, [sp, #8]
 800b014:	429d      	cmp	r5, r3
 800b016:	f43f af7c 	beq.w	800af12 <_dtoa_r+0x47a>
 800b01a:	4b31      	ldr	r3, [pc, #196]	; (800b0e0 <_dtoa_r+0x648>)
 800b01c:	ec51 0b19 	vmov	r0, r1, d9
 800b020:	2200      	movs	r2, #0
 800b022:	f7f5 fae9 	bl	80005f8 <__aeabi_dmul>
 800b026:	4b2e      	ldr	r3, [pc, #184]	; (800b0e0 <_dtoa_r+0x648>)
 800b028:	ec41 0b19 	vmov	d9, r0, r1
 800b02c:	2200      	movs	r2, #0
 800b02e:	4640      	mov	r0, r8
 800b030:	4649      	mov	r1, r9
 800b032:	f7f5 fae1 	bl	80005f8 <__aeabi_dmul>
 800b036:	4680      	mov	r8, r0
 800b038:	4689      	mov	r9, r1
 800b03a:	e7c5      	b.n	800afc8 <_dtoa_r+0x530>
 800b03c:	ec51 0b17 	vmov	r0, r1, d7
 800b040:	f7f5 fada 	bl	80005f8 <__aeabi_dmul>
 800b044:	9b02      	ldr	r3, [sp, #8]
 800b046:	9d00      	ldr	r5, [sp, #0]
 800b048:	930f      	str	r3, [sp, #60]	; 0x3c
 800b04a:	ec41 0b19 	vmov	d9, r0, r1
 800b04e:	4649      	mov	r1, r9
 800b050:	4640      	mov	r0, r8
 800b052:	f7f5 fd81 	bl	8000b58 <__aeabi_d2iz>
 800b056:	4606      	mov	r6, r0
 800b058:	f7f5 fa64 	bl	8000524 <__aeabi_i2d>
 800b05c:	3630      	adds	r6, #48	; 0x30
 800b05e:	4602      	mov	r2, r0
 800b060:	460b      	mov	r3, r1
 800b062:	4640      	mov	r0, r8
 800b064:	4649      	mov	r1, r9
 800b066:	f7f5 f90f 	bl	8000288 <__aeabi_dsub>
 800b06a:	f805 6b01 	strb.w	r6, [r5], #1
 800b06e:	9b02      	ldr	r3, [sp, #8]
 800b070:	429d      	cmp	r5, r3
 800b072:	4680      	mov	r8, r0
 800b074:	4689      	mov	r9, r1
 800b076:	f04f 0200 	mov.w	r2, #0
 800b07a:	d124      	bne.n	800b0c6 <_dtoa_r+0x62e>
 800b07c:	4b1b      	ldr	r3, [pc, #108]	; (800b0ec <_dtoa_r+0x654>)
 800b07e:	ec51 0b19 	vmov	r0, r1, d9
 800b082:	f7f5 f903 	bl	800028c <__adddf3>
 800b086:	4602      	mov	r2, r0
 800b088:	460b      	mov	r3, r1
 800b08a:	4640      	mov	r0, r8
 800b08c:	4649      	mov	r1, r9
 800b08e:	f7f5 fd43 	bl	8000b18 <__aeabi_dcmpgt>
 800b092:	2800      	cmp	r0, #0
 800b094:	d173      	bne.n	800b17e <_dtoa_r+0x6e6>
 800b096:	ec53 2b19 	vmov	r2, r3, d9
 800b09a:	4914      	ldr	r1, [pc, #80]	; (800b0ec <_dtoa_r+0x654>)
 800b09c:	2000      	movs	r0, #0
 800b09e:	f7f5 f8f3 	bl	8000288 <__aeabi_dsub>
 800b0a2:	4602      	mov	r2, r0
 800b0a4:	460b      	mov	r3, r1
 800b0a6:	4640      	mov	r0, r8
 800b0a8:	4649      	mov	r1, r9
 800b0aa:	f7f5 fd17 	bl	8000adc <__aeabi_dcmplt>
 800b0ae:	2800      	cmp	r0, #0
 800b0b0:	f43f af2f 	beq.w	800af12 <_dtoa_r+0x47a>
 800b0b4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b0b6:	1e6b      	subs	r3, r5, #1
 800b0b8:	930f      	str	r3, [sp, #60]	; 0x3c
 800b0ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b0be:	2b30      	cmp	r3, #48	; 0x30
 800b0c0:	d0f8      	beq.n	800b0b4 <_dtoa_r+0x61c>
 800b0c2:	46bb      	mov	fp, r7
 800b0c4:	e04a      	b.n	800b15c <_dtoa_r+0x6c4>
 800b0c6:	4b06      	ldr	r3, [pc, #24]	; (800b0e0 <_dtoa_r+0x648>)
 800b0c8:	f7f5 fa96 	bl	80005f8 <__aeabi_dmul>
 800b0cc:	4680      	mov	r8, r0
 800b0ce:	4689      	mov	r9, r1
 800b0d0:	e7bd      	b.n	800b04e <_dtoa_r+0x5b6>
 800b0d2:	bf00      	nop
 800b0d4:	0800d650 	.word	0x0800d650
 800b0d8:	0800d628 	.word	0x0800d628
 800b0dc:	3ff00000 	.word	0x3ff00000
 800b0e0:	40240000 	.word	0x40240000
 800b0e4:	401c0000 	.word	0x401c0000
 800b0e8:	40140000 	.word	0x40140000
 800b0ec:	3fe00000 	.word	0x3fe00000
 800b0f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b0f4:	9d00      	ldr	r5, [sp, #0]
 800b0f6:	4642      	mov	r2, r8
 800b0f8:	464b      	mov	r3, r9
 800b0fa:	4630      	mov	r0, r6
 800b0fc:	4639      	mov	r1, r7
 800b0fe:	f7f5 fba5 	bl	800084c <__aeabi_ddiv>
 800b102:	f7f5 fd29 	bl	8000b58 <__aeabi_d2iz>
 800b106:	9001      	str	r0, [sp, #4]
 800b108:	f7f5 fa0c 	bl	8000524 <__aeabi_i2d>
 800b10c:	4642      	mov	r2, r8
 800b10e:	464b      	mov	r3, r9
 800b110:	f7f5 fa72 	bl	80005f8 <__aeabi_dmul>
 800b114:	4602      	mov	r2, r0
 800b116:	460b      	mov	r3, r1
 800b118:	4630      	mov	r0, r6
 800b11a:	4639      	mov	r1, r7
 800b11c:	f7f5 f8b4 	bl	8000288 <__aeabi_dsub>
 800b120:	9e01      	ldr	r6, [sp, #4]
 800b122:	9f04      	ldr	r7, [sp, #16]
 800b124:	3630      	adds	r6, #48	; 0x30
 800b126:	f805 6b01 	strb.w	r6, [r5], #1
 800b12a:	9e00      	ldr	r6, [sp, #0]
 800b12c:	1bae      	subs	r6, r5, r6
 800b12e:	42b7      	cmp	r7, r6
 800b130:	4602      	mov	r2, r0
 800b132:	460b      	mov	r3, r1
 800b134:	d134      	bne.n	800b1a0 <_dtoa_r+0x708>
 800b136:	f7f5 f8a9 	bl	800028c <__adddf3>
 800b13a:	4642      	mov	r2, r8
 800b13c:	464b      	mov	r3, r9
 800b13e:	4606      	mov	r6, r0
 800b140:	460f      	mov	r7, r1
 800b142:	f7f5 fce9 	bl	8000b18 <__aeabi_dcmpgt>
 800b146:	b9c8      	cbnz	r0, 800b17c <_dtoa_r+0x6e4>
 800b148:	4642      	mov	r2, r8
 800b14a:	464b      	mov	r3, r9
 800b14c:	4630      	mov	r0, r6
 800b14e:	4639      	mov	r1, r7
 800b150:	f7f5 fcba 	bl	8000ac8 <__aeabi_dcmpeq>
 800b154:	b110      	cbz	r0, 800b15c <_dtoa_r+0x6c4>
 800b156:	9b01      	ldr	r3, [sp, #4]
 800b158:	07db      	lsls	r3, r3, #31
 800b15a:	d40f      	bmi.n	800b17c <_dtoa_r+0x6e4>
 800b15c:	4651      	mov	r1, sl
 800b15e:	4620      	mov	r0, r4
 800b160:	f000 fdbe 	bl	800bce0 <_Bfree>
 800b164:	2300      	movs	r3, #0
 800b166:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b168:	702b      	strb	r3, [r5, #0]
 800b16a:	f10b 0301 	add.w	r3, fp, #1
 800b16e:	6013      	str	r3, [r2, #0]
 800b170:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b172:	2b00      	cmp	r3, #0
 800b174:	f43f ace2 	beq.w	800ab3c <_dtoa_r+0xa4>
 800b178:	601d      	str	r5, [r3, #0]
 800b17a:	e4df      	b.n	800ab3c <_dtoa_r+0xa4>
 800b17c:	465f      	mov	r7, fp
 800b17e:	462b      	mov	r3, r5
 800b180:	461d      	mov	r5, r3
 800b182:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b186:	2a39      	cmp	r2, #57	; 0x39
 800b188:	d106      	bne.n	800b198 <_dtoa_r+0x700>
 800b18a:	9a00      	ldr	r2, [sp, #0]
 800b18c:	429a      	cmp	r2, r3
 800b18e:	d1f7      	bne.n	800b180 <_dtoa_r+0x6e8>
 800b190:	9900      	ldr	r1, [sp, #0]
 800b192:	2230      	movs	r2, #48	; 0x30
 800b194:	3701      	adds	r7, #1
 800b196:	700a      	strb	r2, [r1, #0]
 800b198:	781a      	ldrb	r2, [r3, #0]
 800b19a:	3201      	adds	r2, #1
 800b19c:	701a      	strb	r2, [r3, #0]
 800b19e:	e790      	b.n	800b0c2 <_dtoa_r+0x62a>
 800b1a0:	4ba3      	ldr	r3, [pc, #652]	; (800b430 <_dtoa_r+0x998>)
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	f7f5 fa28 	bl	80005f8 <__aeabi_dmul>
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	4606      	mov	r6, r0
 800b1ae:	460f      	mov	r7, r1
 800b1b0:	f7f5 fc8a 	bl	8000ac8 <__aeabi_dcmpeq>
 800b1b4:	2800      	cmp	r0, #0
 800b1b6:	d09e      	beq.n	800b0f6 <_dtoa_r+0x65e>
 800b1b8:	e7d0      	b.n	800b15c <_dtoa_r+0x6c4>
 800b1ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b1bc:	2a00      	cmp	r2, #0
 800b1be:	f000 80ca 	beq.w	800b356 <_dtoa_r+0x8be>
 800b1c2:	9a07      	ldr	r2, [sp, #28]
 800b1c4:	2a01      	cmp	r2, #1
 800b1c6:	f300 80ad 	bgt.w	800b324 <_dtoa_r+0x88c>
 800b1ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b1cc:	2a00      	cmp	r2, #0
 800b1ce:	f000 80a5 	beq.w	800b31c <_dtoa_r+0x884>
 800b1d2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b1d6:	9e08      	ldr	r6, [sp, #32]
 800b1d8:	9d05      	ldr	r5, [sp, #20]
 800b1da:	9a05      	ldr	r2, [sp, #20]
 800b1dc:	441a      	add	r2, r3
 800b1de:	9205      	str	r2, [sp, #20]
 800b1e0:	9a06      	ldr	r2, [sp, #24]
 800b1e2:	2101      	movs	r1, #1
 800b1e4:	441a      	add	r2, r3
 800b1e6:	4620      	mov	r0, r4
 800b1e8:	9206      	str	r2, [sp, #24]
 800b1ea:	f000 fe2f 	bl	800be4c <__i2b>
 800b1ee:	4607      	mov	r7, r0
 800b1f0:	b165      	cbz	r5, 800b20c <_dtoa_r+0x774>
 800b1f2:	9b06      	ldr	r3, [sp, #24]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	dd09      	ble.n	800b20c <_dtoa_r+0x774>
 800b1f8:	42ab      	cmp	r3, r5
 800b1fa:	9a05      	ldr	r2, [sp, #20]
 800b1fc:	bfa8      	it	ge
 800b1fe:	462b      	movge	r3, r5
 800b200:	1ad2      	subs	r2, r2, r3
 800b202:	9205      	str	r2, [sp, #20]
 800b204:	9a06      	ldr	r2, [sp, #24]
 800b206:	1aed      	subs	r5, r5, r3
 800b208:	1ad3      	subs	r3, r2, r3
 800b20a:	9306      	str	r3, [sp, #24]
 800b20c:	9b08      	ldr	r3, [sp, #32]
 800b20e:	b1f3      	cbz	r3, 800b24e <_dtoa_r+0x7b6>
 800b210:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b212:	2b00      	cmp	r3, #0
 800b214:	f000 80a3 	beq.w	800b35e <_dtoa_r+0x8c6>
 800b218:	2e00      	cmp	r6, #0
 800b21a:	dd10      	ble.n	800b23e <_dtoa_r+0x7a6>
 800b21c:	4639      	mov	r1, r7
 800b21e:	4632      	mov	r2, r6
 800b220:	4620      	mov	r0, r4
 800b222:	f000 fed3 	bl	800bfcc <__pow5mult>
 800b226:	4652      	mov	r2, sl
 800b228:	4601      	mov	r1, r0
 800b22a:	4607      	mov	r7, r0
 800b22c:	4620      	mov	r0, r4
 800b22e:	f000 fe23 	bl	800be78 <__multiply>
 800b232:	4651      	mov	r1, sl
 800b234:	4680      	mov	r8, r0
 800b236:	4620      	mov	r0, r4
 800b238:	f000 fd52 	bl	800bce0 <_Bfree>
 800b23c:	46c2      	mov	sl, r8
 800b23e:	9b08      	ldr	r3, [sp, #32]
 800b240:	1b9a      	subs	r2, r3, r6
 800b242:	d004      	beq.n	800b24e <_dtoa_r+0x7b6>
 800b244:	4651      	mov	r1, sl
 800b246:	4620      	mov	r0, r4
 800b248:	f000 fec0 	bl	800bfcc <__pow5mult>
 800b24c:	4682      	mov	sl, r0
 800b24e:	2101      	movs	r1, #1
 800b250:	4620      	mov	r0, r4
 800b252:	f000 fdfb 	bl	800be4c <__i2b>
 800b256:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b258:	2b00      	cmp	r3, #0
 800b25a:	4606      	mov	r6, r0
 800b25c:	f340 8081 	ble.w	800b362 <_dtoa_r+0x8ca>
 800b260:	461a      	mov	r2, r3
 800b262:	4601      	mov	r1, r0
 800b264:	4620      	mov	r0, r4
 800b266:	f000 feb1 	bl	800bfcc <__pow5mult>
 800b26a:	9b07      	ldr	r3, [sp, #28]
 800b26c:	2b01      	cmp	r3, #1
 800b26e:	4606      	mov	r6, r0
 800b270:	dd7a      	ble.n	800b368 <_dtoa_r+0x8d0>
 800b272:	f04f 0800 	mov.w	r8, #0
 800b276:	6933      	ldr	r3, [r6, #16]
 800b278:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b27c:	6918      	ldr	r0, [r3, #16]
 800b27e:	f000 fd97 	bl	800bdb0 <__hi0bits>
 800b282:	f1c0 0020 	rsb	r0, r0, #32
 800b286:	9b06      	ldr	r3, [sp, #24]
 800b288:	4418      	add	r0, r3
 800b28a:	f010 001f 	ands.w	r0, r0, #31
 800b28e:	f000 8094 	beq.w	800b3ba <_dtoa_r+0x922>
 800b292:	f1c0 0320 	rsb	r3, r0, #32
 800b296:	2b04      	cmp	r3, #4
 800b298:	f340 8085 	ble.w	800b3a6 <_dtoa_r+0x90e>
 800b29c:	9b05      	ldr	r3, [sp, #20]
 800b29e:	f1c0 001c 	rsb	r0, r0, #28
 800b2a2:	4403      	add	r3, r0
 800b2a4:	9305      	str	r3, [sp, #20]
 800b2a6:	9b06      	ldr	r3, [sp, #24]
 800b2a8:	4403      	add	r3, r0
 800b2aa:	4405      	add	r5, r0
 800b2ac:	9306      	str	r3, [sp, #24]
 800b2ae:	9b05      	ldr	r3, [sp, #20]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	dd05      	ble.n	800b2c0 <_dtoa_r+0x828>
 800b2b4:	4651      	mov	r1, sl
 800b2b6:	461a      	mov	r2, r3
 800b2b8:	4620      	mov	r0, r4
 800b2ba:	f000 fee1 	bl	800c080 <__lshift>
 800b2be:	4682      	mov	sl, r0
 800b2c0:	9b06      	ldr	r3, [sp, #24]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	dd05      	ble.n	800b2d2 <_dtoa_r+0x83a>
 800b2c6:	4631      	mov	r1, r6
 800b2c8:	461a      	mov	r2, r3
 800b2ca:	4620      	mov	r0, r4
 800b2cc:	f000 fed8 	bl	800c080 <__lshift>
 800b2d0:	4606      	mov	r6, r0
 800b2d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d072      	beq.n	800b3be <_dtoa_r+0x926>
 800b2d8:	4631      	mov	r1, r6
 800b2da:	4650      	mov	r0, sl
 800b2dc:	f000 ff3c 	bl	800c158 <__mcmp>
 800b2e0:	2800      	cmp	r0, #0
 800b2e2:	da6c      	bge.n	800b3be <_dtoa_r+0x926>
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	4651      	mov	r1, sl
 800b2e8:	220a      	movs	r2, #10
 800b2ea:	4620      	mov	r0, r4
 800b2ec:	f000 fd1a 	bl	800bd24 <__multadd>
 800b2f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2f2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800b2f6:	4682      	mov	sl, r0
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	f000 81b0 	beq.w	800b65e <_dtoa_r+0xbc6>
 800b2fe:	2300      	movs	r3, #0
 800b300:	4639      	mov	r1, r7
 800b302:	220a      	movs	r2, #10
 800b304:	4620      	mov	r0, r4
 800b306:	f000 fd0d 	bl	800bd24 <__multadd>
 800b30a:	9b01      	ldr	r3, [sp, #4]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	4607      	mov	r7, r0
 800b310:	f300 8096 	bgt.w	800b440 <_dtoa_r+0x9a8>
 800b314:	9b07      	ldr	r3, [sp, #28]
 800b316:	2b02      	cmp	r3, #2
 800b318:	dc59      	bgt.n	800b3ce <_dtoa_r+0x936>
 800b31a:	e091      	b.n	800b440 <_dtoa_r+0x9a8>
 800b31c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b31e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b322:	e758      	b.n	800b1d6 <_dtoa_r+0x73e>
 800b324:	9b04      	ldr	r3, [sp, #16]
 800b326:	1e5e      	subs	r6, r3, #1
 800b328:	9b08      	ldr	r3, [sp, #32]
 800b32a:	42b3      	cmp	r3, r6
 800b32c:	bfbf      	itttt	lt
 800b32e:	9b08      	ldrlt	r3, [sp, #32]
 800b330:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800b332:	9608      	strlt	r6, [sp, #32]
 800b334:	1af3      	sublt	r3, r6, r3
 800b336:	bfb4      	ite	lt
 800b338:	18d2      	addlt	r2, r2, r3
 800b33a:	1b9e      	subge	r6, r3, r6
 800b33c:	9b04      	ldr	r3, [sp, #16]
 800b33e:	bfbc      	itt	lt
 800b340:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800b342:	2600      	movlt	r6, #0
 800b344:	2b00      	cmp	r3, #0
 800b346:	bfb7      	itett	lt
 800b348:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800b34c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800b350:	1a9d      	sublt	r5, r3, r2
 800b352:	2300      	movlt	r3, #0
 800b354:	e741      	b.n	800b1da <_dtoa_r+0x742>
 800b356:	9e08      	ldr	r6, [sp, #32]
 800b358:	9d05      	ldr	r5, [sp, #20]
 800b35a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b35c:	e748      	b.n	800b1f0 <_dtoa_r+0x758>
 800b35e:	9a08      	ldr	r2, [sp, #32]
 800b360:	e770      	b.n	800b244 <_dtoa_r+0x7ac>
 800b362:	9b07      	ldr	r3, [sp, #28]
 800b364:	2b01      	cmp	r3, #1
 800b366:	dc19      	bgt.n	800b39c <_dtoa_r+0x904>
 800b368:	9b02      	ldr	r3, [sp, #8]
 800b36a:	b9bb      	cbnz	r3, 800b39c <_dtoa_r+0x904>
 800b36c:	9b03      	ldr	r3, [sp, #12]
 800b36e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b372:	b99b      	cbnz	r3, 800b39c <_dtoa_r+0x904>
 800b374:	9b03      	ldr	r3, [sp, #12]
 800b376:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b37a:	0d1b      	lsrs	r3, r3, #20
 800b37c:	051b      	lsls	r3, r3, #20
 800b37e:	b183      	cbz	r3, 800b3a2 <_dtoa_r+0x90a>
 800b380:	9b05      	ldr	r3, [sp, #20]
 800b382:	3301      	adds	r3, #1
 800b384:	9305      	str	r3, [sp, #20]
 800b386:	9b06      	ldr	r3, [sp, #24]
 800b388:	3301      	adds	r3, #1
 800b38a:	9306      	str	r3, [sp, #24]
 800b38c:	f04f 0801 	mov.w	r8, #1
 800b390:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b392:	2b00      	cmp	r3, #0
 800b394:	f47f af6f 	bne.w	800b276 <_dtoa_r+0x7de>
 800b398:	2001      	movs	r0, #1
 800b39a:	e774      	b.n	800b286 <_dtoa_r+0x7ee>
 800b39c:	f04f 0800 	mov.w	r8, #0
 800b3a0:	e7f6      	b.n	800b390 <_dtoa_r+0x8f8>
 800b3a2:	4698      	mov	r8, r3
 800b3a4:	e7f4      	b.n	800b390 <_dtoa_r+0x8f8>
 800b3a6:	d082      	beq.n	800b2ae <_dtoa_r+0x816>
 800b3a8:	9a05      	ldr	r2, [sp, #20]
 800b3aa:	331c      	adds	r3, #28
 800b3ac:	441a      	add	r2, r3
 800b3ae:	9205      	str	r2, [sp, #20]
 800b3b0:	9a06      	ldr	r2, [sp, #24]
 800b3b2:	441a      	add	r2, r3
 800b3b4:	441d      	add	r5, r3
 800b3b6:	9206      	str	r2, [sp, #24]
 800b3b8:	e779      	b.n	800b2ae <_dtoa_r+0x816>
 800b3ba:	4603      	mov	r3, r0
 800b3bc:	e7f4      	b.n	800b3a8 <_dtoa_r+0x910>
 800b3be:	9b04      	ldr	r3, [sp, #16]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	dc37      	bgt.n	800b434 <_dtoa_r+0x99c>
 800b3c4:	9b07      	ldr	r3, [sp, #28]
 800b3c6:	2b02      	cmp	r3, #2
 800b3c8:	dd34      	ble.n	800b434 <_dtoa_r+0x99c>
 800b3ca:	9b04      	ldr	r3, [sp, #16]
 800b3cc:	9301      	str	r3, [sp, #4]
 800b3ce:	9b01      	ldr	r3, [sp, #4]
 800b3d0:	b963      	cbnz	r3, 800b3ec <_dtoa_r+0x954>
 800b3d2:	4631      	mov	r1, r6
 800b3d4:	2205      	movs	r2, #5
 800b3d6:	4620      	mov	r0, r4
 800b3d8:	f000 fca4 	bl	800bd24 <__multadd>
 800b3dc:	4601      	mov	r1, r0
 800b3de:	4606      	mov	r6, r0
 800b3e0:	4650      	mov	r0, sl
 800b3e2:	f000 feb9 	bl	800c158 <__mcmp>
 800b3e6:	2800      	cmp	r0, #0
 800b3e8:	f73f adbb 	bgt.w	800af62 <_dtoa_r+0x4ca>
 800b3ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3ee:	9d00      	ldr	r5, [sp, #0]
 800b3f0:	ea6f 0b03 	mvn.w	fp, r3
 800b3f4:	f04f 0800 	mov.w	r8, #0
 800b3f8:	4631      	mov	r1, r6
 800b3fa:	4620      	mov	r0, r4
 800b3fc:	f000 fc70 	bl	800bce0 <_Bfree>
 800b400:	2f00      	cmp	r7, #0
 800b402:	f43f aeab 	beq.w	800b15c <_dtoa_r+0x6c4>
 800b406:	f1b8 0f00 	cmp.w	r8, #0
 800b40a:	d005      	beq.n	800b418 <_dtoa_r+0x980>
 800b40c:	45b8      	cmp	r8, r7
 800b40e:	d003      	beq.n	800b418 <_dtoa_r+0x980>
 800b410:	4641      	mov	r1, r8
 800b412:	4620      	mov	r0, r4
 800b414:	f000 fc64 	bl	800bce0 <_Bfree>
 800b418:	4639      	mov	r1, r7
 800b41a:	4620      	mov	r0, r4
 800b41c:	f000 fc60 	bl	800bce0 <_Bfree>
 800b420:	e69c      	b.n	800b15c <_dtoa_r+0x6c4>
 800b422:	2600      	movs	r6, #0
 800b424:	4637      	mov	r7, r6
 800b426:	e7e1      	b.n	800b3ec <_dtoa_r+0x954>
 800b428:	46bb      	mov	fp, r7
 800b42a:	4637      	mov	r7, r6
 800b42c:	e599      	b.n	800af62 <_dtoa_r+0x4ca>
 800b42e:	bf00      	nop
 800b430:	40240000 	.word	0x40240000
 800b434:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b436:	2b00      	cmp	r3, #0
 800b438:	f000 80c8 	beq.w	800b5cc <_dtoa_r+0xb34>
 800b43c:	9b04      	ldr	r3, [sp, #16]
 800b43e:	9301      	str	r3, [sp, #4]
 800b440:	2d00      	cmp	r5, #0
 800b442:	dd05      	ble.n	800b450 <_dtoa_r+0x9b8>
 800b444:	4639      	mov	r1, r7
 800b446:	462a      	mov	r2, r5
 800b448:	4620      	mov	r0, r4
 800b44a:	f000 fe19 	bl	800c080 <__lshift>
 800b44e:	4607      	mov	r7, r0
 800b450:	f1b8 0f00 	cmp.w	r8, #0
 800b454:	d05b      	beq.n	800b50e <_dtoa_r+0xa76>
 800b456:	6879      	ldr	r1, [r7, #4]
 800b458:	4620      	mov	r0, r4
 800b45a:	f000 fc01 	bl	800bc60 <_Balloc>
 800b45e:	4605      	mov	r5, r0
 800b460:	b928      	cbnz	r0, 800b46e <_dtoa_r+0x9d6>
 800b462:	4b83      	ldr	r3, [pc, #524]	; (800b670 <_dtoa_r+0xbd8>)
 800b464:	4602      	mov	r2, r0
 800b466:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b46a:	f7ff bb2e 	b.w	800aaca <_dtoa_r+0x32>
 800b46e:	693a      	ldr	r2, [r7, #16]
 800b470:	3202      	adds	r2, #2
 800b472:	0092      	lsls	r2, r2, #2
 800b474:	f107 010c 	add.w	r1, r7, #12
 800b478:	300c      	adds	r0, #12
 800b47a:	f7ff fa74 	bl	800a966 <memcpy>
 800b47e:	2201      	movs	r2, #1
 800b480:	4629      	mov	r1, r5
 800b482:	4620      	mov	r0, r4
 800b484:	f000 fdfc 	bl	800c080 <__lshift>
 800b488:	9b00      	ldr	r3, [sp, #0]
 800b48a:	3301      	adds	r3, #1
 800b48c:	9304      	str	r3, [sp, #16]
 800b48e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b492:	4413      	add	r3, r2
 800b494:	9308      	str	r3, [sp, #32]
 800b496:	9b02      	ldr	r3, [sp, #8]
 800b498:	f003 0301 	and.w	r3, r3, #1
 800b49c:	46b8      	mov	r8, r7
 800b49e:	9306      	str	r3, [sp, #24]
 800b4a0:	4607      	mov	r7, r0
 800b4a2:	9b04      	ldr	r3, [sp, #16]
 800b4a4:	4631      	mov	r1, r6
 800b4a6:	3b01      	subs	r3, #1
 800b4a8:	4650      	mov	r0, sl
 800b4aa:	9301      	str	r3, [sp, #4]
 800b4ac:	f7ff fa69 	bl	800a982 <quorem>
 800b4b0:	4641      	mov	r1, r8
 800b4b2:	9002      	str	r0, [sp, #8]
 800b4b4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b4b8:	4650      	mov	r0, sl
 800b4ba:	f000 fe4d 	bl	800c158 <__mcmp>
 800b4be:	463a      	mov	r2, r7
 800b4c0:	9005      	str	r0, [sp, #20]
 800b4c2:	4631      	mov	r1, r6
 800b4c4:	4620      	mov	r0, r4
 800b4c6:	f000 fe63 	bl	800c190 <__mdiff>
 800b4ca:	68c2      	ldr	r2, [r0, #12]
 800b4cc:	4605      	mov	r5, r0
 800b4ce:	bb02      	cbnz	r2, 800b512 <_dtoa_r+0xa7a>
 800b4d0:	4601      	mov	r1, r0
 800b4d2:	4650      	mov	r0, sl
 800b4d4:	f000 fe40 	bl	800c158 <__mcmp>
 800b4d8:	4602      	mov	r2, r0
 800b4da:	4629      	mov	r1, r5
 800b4dc:	4620      	mov	r0, r4
 800b4de:	9209      	str	r2, [sp, #36]	; 0x24
 800b4e0:	f000 fbfe 	bl	800bce0 <_Bfree>
 800b4e4:	9b07      	ldr	r3, [sp, #28]
 800b4e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b4e8:	9d04      	ldr	r5, [sp, #16]
 800b4ea:	ea43 0102 	orr.w	r1, r3, r2
 800b4ee:	9b06      	ldr	r3, [sp, #24]
 800b4f0:	4319      	orrs	r1, r3
 800b4f2:	d110      	bne.n	800b516 <_dtoa_r+0xa7e>
 800b4f4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b4f8:	d029      	beq.n	800b54e <_dtoa_r+0xab6>
 800b4fa:	9b05      	ldr	r3, [sp, #20]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	dd02      	ble.n	800b506 <_dtoa_r+0xa6e>
 800b500:	9b02      	ldr	r3, [sp, #8]
 800b502:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800b506:	9b01      	ldr	r3, [sp, #4]
 800b508:	f883 9000 	strb.w	r9, [r3]
 800b50c:	e774      	b.n	800b3f8 <_dtoa_r+0x960>
 800b50e:	4638      	mov	r0, r7
 800b510:	e7ba      	b.n	800b488 <_dtoa_r+0x9f0>
 800b512:	2201      	movs	r2, #1
 800b514:	e7e1      	b.n	800b4da <_dtoa_r+0xa42>
 800b516:	9b05      	ldr	r3, [sp, #20]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	db04      	blt.n	800b526 <_dtoa_r+0xa8e>
 800b51c:	9907      	ldr	r1, [sp, #28]
 800b51e:	430b      	orrs	r3, r1
 800b520:	9906      	ldr	r1, [sp, #24]
 800b522:	430b      	orrs	r3, r1
 800b524:	d120      	bne.n	800b568 <_dtoa_r+0xad0>
 800b526:	2a00      	cmp	r2, #0
 800b528:	dded      	ble.n	800b506 <_dtoa_r+0xa6e>
 800b52a:	4651      	mov	r1, sl
 800b52c:	2201      	movs	r2, #1
 800b52e:	4620      	mov	r0, r4
 800b530:	f000 fda6 	bl	800c080 <__lshift>
 800b534:	4631      	mov	r1, r6
 800b536:	4682      	mov	sl, r0
 800b538:	f000 fe0e 	bl	800c158 <__mcmp>
 800b53c:	2800      	cmp	r0, #0
 800b53e:	dc03      	bgt.n	800b548 <_dtoa_r+0xab0>
 800b540:	d1e1      	bne.n	800b506 <_dtoa_r+0xa6e>
 800b542:	f019 0f01 	tst.w	r9, #1
 800b546:	d0de      	beq.n	800b506 <_dtoa_r+0xa6e>
 800b548:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b54c:	d1d8      	bne.n	800b500 <_dtoa_r+0xa68>
 800b54e:	9a01      	ldr	r2, [sp, #4]
 800b550:	2339      	movs	r3, #57	; 0x39
 800b552:	7013      	strb	r3, [r2, #0]
 800b554:	462b      	mov	r3, r5
 800b556:	461d      	mov	r5, r3
 800b558:	3b01      	subs	r3, #1
 800b55a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b55e:	2a39      	cmp	r2, #57	; 0x39
 800b560:	d06c      	beq.n	800b63c <_dtoa_r+0xba4>
 800b562:	3201      	adds	r2, #1
 800b564:	701a      	strb	r2, [r3, #0]
 800b566:	e747      	b.n	800b3f8 <_dtoa_r+0x960>
 800b568:	2a00      	cmp	r2, #0
 800b56a:	dd07      	ble.n	800b57c <_dtoa_r+0xae4>
 800b56c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b570:	d0ed      	beq.n	800b54e <_dtoa_r+0xab6>
 800b572:	9a01      	ldr	r2, [sp, #4]
 800b574:	f109 0301 	add.w	r3, r9, #1
 800b578:	7013      	strb	r3, [r2, #0]
 800b57a:	e73d      	b.n	800b3f8 <_dtoa_r+0x960>
 800b57c:	9b04      	ldr	r3, [sp, #16]
 800b57e:	9a08      	ldr	r2, [sp, #32]
 800b580:	f803 9c01 	strb.w	r9, [r3, #-1]
 800b584:	4293      	cmp	r3, r2
 800b586:	d043      	beq.n	800b610 <_dtoa_r+0xb78>
 800b588:	4651      	mov	r1, sl
 800b58a:	2300      	movs	r3, #0
 800b58c:	220a      	movs	r2, #10
 800b58e:	4620      	mov	r0, r4
 800b590:	f000 fbc8 	bl	800bd24 <__multadd>
 800b594:	45b8      	cmp	r8, r7
 800b596:	4682      	mov	sl, r0
 800b598:	f04f 0300 	mov.w	r3, #0
 800b59c:	f04f 020a 	mov.w	r2, #10
 800b5a0:	4641      	mov	r1, r8
 800b5a2:	4620      	mov	r0, r4
 800b5a4:	d107      	bne.n	800b5b6 <_dtoa_r+0xb1e>
 800b5a6:	f000 fbbd 	bl	800bd24 <__multadd>
 800b5aa:	4680      	mov	r8, r0
 800b5ac:	4607      	mov	r7, r0
 800b5ae:	9b04      	ldr	r3, [sp, #16]
 800b5b0:	3301      	adds	r3, #1
 800b5b2:	9304      	str	r3, [sp, #16]
 800b5b4:	e775      	b.n	800b4a2 <_dtoa_r+0xa0a>
 800b5b6:	f000 fbb5 	bl	800bd24 <__multadd>
 800b5ba:	4639      	mov	r1, r7
 800b5bc:	4680      	mov	r8, r0
 800b5be:	2300      	movs	r3, #0
 800b5c0:	220a      	movs	r2, #10
 800b5c2:	4620      	mov	r0, r4
 800b5c4:	f000 fbae 	bl	800bd24 <__multadd>
 800b5c8:	4607      	mov	r7, r0
 800b5ca:	e7f0      	b.n	800b5ae <_dtoa_r+0xb16>
 800b5cc:	9b04      	ldr	r3, [sp, #16]
 800b5ce:	9301      	str	r3, [sp, #4]
 800b5d0:	9d00      	ldr	r5, [sp, #0]
 800b5d2:	4631      	mov	r1, r6
 800b5d4:	4650      	mov	r0, sl
 800b5d6:	f7ff f9d4 	bl	800a982 <quorem>
 800b5da:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b5de:	9b00      	ldr	r3, [sp, #0]
 800b5e0:	f805 9b01 	strb.w	r9, [r5], #1
 800b5e4:	1aea      	subs	r2, r5, r3
 800b5e6:	9b01      	ldr	r3, [sp, #4]
 800b5e8:	4293      	cmp	r3, r2
 800b5ea:	dd07      	ble.n	800b5fc <_dtoa_r+0xb64>
 800b5ec:	4651      	mov	r1, sl
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	220a      	movs	r2, #10
 800b5f2:	4620      	mov	r0, r4
 800b5f4:	f000 fb96 	bl	800bd24 <__multadd>
 800b5f8:	4682      	mov	sl, r0
 800b5fa:	e7ea      	b.n	800b5d2 <_dtoa_r+0xb3a>
 800b5fc:	9b01      	ldr	r3, [sp, #4]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	bfc8      	it	gt
 800b602:	461d      	movgt	r5, r3
 800b604:	9b00      	ldr	r3, [sp, #0]
 800b606:	bfd8      	it	le
 800b608:	2501      	movle	r5, #1
 800b60a:	441d      	add	r5, r3
 800b60c:	f04f 0800 	mov.w	r8, #0
 800b610:	4651      	mov	r1, sl
 800b612:	2201      	movs	r2, #1
 800b614:	4620      	mov	r0, r4
 800b616:	f000 fd33 	bl	800c080 <__lshift>
 800b61a:	4631      	mov	r1, r6
 800b61c:	4682      	mov	sl, r0
 800b61e:	f000 fd9b 	bl	800c158 <__mcmp>
 800b622:	2800      	cmp	r0, #0
 800b624:	dc96      	bgt.n	800b554 <_dtoa_r+0xabc>
 800b626:	d102      	bne.n	800b62e <_dtoa_r+0xb96>
 800b628:	f019 0f01 	tst.w	r9, #1
 800b62c:	d192      	bne.n	800b554 <_dtoa_r+0xabc>
 800b62e:	462b      	mov	r3, r5
 800b630:	461d      	mov	r5, r3
 800b632:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b636:	2a30      	cmp	r2, #48	; 0x30
 800b638:	d0fa      	beq.n	800b630 <_dtoa_r+0xb98>
 800b63a:	e6dd      	b.n	800b3f8 <_dtoa_r+0x960>
 800b63c:	9a00      	ldr	r2, [sp, #0]
 800b63e:	429a      	cmp	r2, r3
 800b640:	d189      	bne.n	800b556 <_dtoa_r+0xabe>
 800b642:	f10b 0b01 	add.w	fp, fp, #1
 800b646:	2331      	movs	r3, #49	; 0x31
 800b648:	e796      	b.n	800b578 <_dtoa_r+0xae0>
 800b64a:	4b0a      	ldr	r3, [pc, #40]	; (800b674 <_dtoa_r+0xbdc>)
 800b64c:	f7ff ba99 	b.w	800ab82 <_dtoa_r+0xea>
 800b650:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b652:	2b00      	cmp	r3, #0
 800b654:	f47f aa6d 	bne.w	800ab32 <_dtoa_r+0x9a>
 800b658:	4b07      	ldr	r3, [pc, #28]	; (800b678 <_dtoa_r+0xbe0>)
 800b65a:	f7ff ba92 	b.w	800ab82 <_dtoa_r+0xea>
 800b65e:	9b01      	ldr	r3, [sp, #4]
 800b660:	2b00      	cmp	r3, #0
 800b662:	dcb5      	bgt.n	800b5d0 <_dtoa_r+0xb38>
 800b664:	9b07      	ldr	r3, [sp, #28]
 800b666:	2b02      	cmp	r3, #2
 800b668:	f73f aeb1 	bgt.w	800b3ce <_dtoa_r+0x936>
 800b66c:	e7b0      	b.n	800b5d0 <_dtoa_r+0xb38>
 800b66e:	bf00      	nop
 800b670:	0800d5ac 	.word	0x0800d5ac
 800b674:	0800d50c 	.word	0x0800d50c
 800b678:	0800d530 	.word	0x0800d530

0800b67c <_free_r>:
 800b67c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b67e:	2900      	cmp	r1, #0
 800b680:	d044      	beq.n	800b70c <_free_r+0x90>
 800b682:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b686:	9001      	str	r0, [sp, #4]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	f1a1 0404 	sub.w	r4, r1, #4
 800b68e:	bfb8      	it	lt
 800b690:	18e4      	addlt	r4, r4, r3
 800b692:	f000 fad9 	bl	800bc48 <__malloc_lock>
 800b696:	4a1e      	ldr	r2, [pc, #120]	; (800b710 <_free_r+0x94>)
 800b698:	9801      	ldr	r0, [sp, #4]
 800b69a:	6813      	ldr	r3, [r2, #0]
 800b69c:	b933      	cbnz	r3, 800b6ac <_free_r+0x30>
 800b69e:	6063      	str	r3, [r4, #4]
 800b6a0:	6014      	str	r4, [r2, #0]
 800b6a2:	b003      	add	sp, #12
 800b6a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b6a8:	f000 bad4 	b.w	800bc54 <__malloc_unlock>
 800b6ac:	42a3      	cmp	r3, r4
 800b6ae:	d908      	bls.n	800b6c2 <_free_r+0x46>
 800b6b0:	6825      	ldr	r5, [r4, #0]
 800b6b2:	1961      	adds	r1, r4, r5
 800b6b4:	428b      	cmp	r3, r1
 800b6b6:	bf01      	itttt	eq
 800b6b8:	6819      	ldreq	r1, [r3, #0]
 800b6ba:	685b      	ldreq	r3, [r3, #4]
 800b6bc:	1949      	addeq	r1, r1, r5
 800b6be:	6021      	streq	r1, [r4, #0]
 800b6c0:	e7ed      	b.n	800b69e <_free_r+0x22>
 800b6c2:	461a      	mov	r2, r3
 800b6c4:	685b      	ldr	r3, [r3, #4]
 800b6c6:	b10b      	cbz	r3, 800b6cc <_free_r+0x50>
 800b6c8:	42a3      	cmp	r3, r4
 800b6ca:	d9fa      	bls.n	800b6c2 <_free_r+0x46>
 800b6cc:	6811      	ldr	r1, [r2, #0]
 800b6ce:	1855      	adds	r5, r2, r1
 800b6d0:	42a5      	cmp	r5, r4
 800b6d2:	d10b      	bne.n	800b6ec <_free_r+0x70>
 800b6d4:	6824      	ldr	r4, [r4, #0]
 800b6d6:	4421      	add	r1, r4
 800b6d8:	1854      	adds	r4, r2, r1
 800b6da:	42a3      	cmp	r3, r4
 800b6dc:	6011      	str	r1, [r2, #0]
 800b6de:	d1e0      	bne.n	800b6a2 <_free_r+0x26>
 800b6e0:	681c      	ldr	r4, [r3, #0]
 800b6e2:	685b      	ldr	r3, [r3, #4]
 800b6e4:	6053      	str	r3, [r2, #4]
 800b6e6:	440c      	add	r4, r1
 800b6e8:	6014      	str	r4, [r2, #0]
 800b6ea:	e7da      	b.n	800b6a2 <_free_r+0x26>
 800b6ec:	d902      	bls.n	800b6f4 <_free_r+0x78>
 800b6ee:	230c      	movs	r3, #12
 800b6f0:	6003      	str	r3, [r0, #0]
 800b6f2:	e7d6      	b.n	800b6a2 <_free_r+0x26>
 800b6f4:	6825      	ldr	r5, [r4, #0]
 800b6f6:	1961      	adds	r1, r4, r5
 800b6f8:	428b      	cmp	r3, r1
 800b6fa:	bf04      	itt	eq
 800b6fc:	6819      	ldreq	r1, [r3, #0]
 800b6fe:	685b      	ldreq	r3, [r3, #4]
 800b700:	6063      	str	r3, [r4, #4]
 800b702:	bf04      	itt	eq
 800b704:	1949      	addeq	r1, r1, r5
 800b706:	6021      	streq	r1, [r4, #0]
 800b708:	6054      	str	r4, [r2, #4]
 800b70a:	e7ca      	b.n	800b6a2 <_free_r+0x26>
 800b70c:	b003      	add	sp, #12
 800b70e:	bd30      	pop	{r4, r5, pc}
 800b710:	20002764 	.word	0x20002764

0800b714 <__sfputc_r>:
 800b714:	6893      	ldr	r3, [r2, #8]
 800b716:	3b01      	subs	r3, #1
 800b718:	2b00      	cmp	r3, #0
 800b71a:	b410      	push	{r4}
 800b71c:	6093      	str	r3, [r2, #8]
 800b71e:	da08      	bge.n	800b732 <__sfputc_r+0x1e>
 800b720:	6994      	ldr	r4, [r2, #24]
 800b722:	42a3      	cmp	r3, r4
 800b724:	db01      	blt.n	800b72a <__sfputc_r+0x16>
 800b726:	290a      	cmp	r1, #10
 800b728:	d103      	bne.n	800b732 <__sfputc_r+0x1e>
 800b72a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b72e:	f000 be56 	b.w	800c3de <__swbuf_r>
 800b732:	6813      	ldr	r3, [r2, #0]
 800b734:	1c58      	adds	r0, r3, #1
 800b736:	6010      	str	r0, [r2, #0]
 800b738:	7019      	strb	r1, [r3, #0]
 800b73a:	4608      	mov	r0, r1
 800b73c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b740:	4770      	bx	lr

0800b742 <__sfputs_r>:
 800b742:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b744:	4606      	mov	r6, r0
 800b746:	460f      	mov	r7, r1
 800b748:	4614      	mov	r4, r2
 800b74a:	18d5      	adds	r5, r2, r3
 800b74c:	42ac      	cmp	r4, r5
 800b74e:	d101      	bne.n	800b754 <__sfputs_r+0x12>
 800b750:	2000      	movs	r0, #0
 800b752:	e007      	b.n	800b764 <__sfputs_r+0x22>
 800b754:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b758:	463a      	mov	r2, r7
 800b75a:	4630      	mov	r0, r6
 800b75c:	f7ff ffda 	bl	800b714 <__sfputc_r>
 800b760:	1c43      	adds	r3, r0, #1
 800b762:	d1f3      	bne.n	800b74c <__sfputs_r+0xa>
 800b764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b768 <_vfiprintf_r>:
 800b768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b76c:	460d      	mov	r5, r1
 800b76e:	b09d      	sub	sp, #116	; 0x74
 800b770:	4614      	mov	r4, r2
 800b772:	4698      	mov	r8, r3
 800b774:	4606      	mov	r6, r0
 800b776:	b118      	cbz	r0, 800b780 <_vfiprintf_r+0x18>
 800b778:	6a03      	ldr	r3, [r0, #32]
 800b77a:	b90b      	cbnz	r3, 800b780 <_vfiprintf_r+0x18>
 800b77c:	f7fe ffc0 	bl	800a700 <__sinit>
 800b780:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b782:	07d9      	lsls	r1, r3, #31
 800b784:	d405      	bmi.n	800b792 <_vfiprintf_r+0x2a>
 800b786:	89ab      	ldrh	r3, [r5, #12]
 800b788:	059a      	lsls	r2, r3, #22
 800b78a:	d402      	bmi.n	800b792 <_vfiprintf_r+0x2a>
 800b78c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b78e:	f7ff f8e8 	bl	800a962 <__retarget_lock_acquire_recursive>
 800b792:	89ab      	ldrh	r3, [r5, #12]
 800b794:	071b      	lsls	r3, r3, #28
 800b796:	d501      	bpl.n	800b79c <_vfiprintf_r+0x34>
 800b798:	692b      	ldr	r3, [r5, #16]
 800b79a:	b99b      	cbnz	r3, 800b7c4 <_vfiprintf_r+0x5c>
 800b79c:	4629      	mov	r1, r5
 800b79e:	4630      	mov	r0, r6
 800b7a0:	f000 fe5a 	bl	800c458 <__swsetup_r>
 800b7a4:	b170      	cbz	r0, 800b7c4 <_vfiprintf_r+0x5c>
 800b7a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b7a8:	07dc      	lsls	r4, r3, #31
 800b7aa:	d504      	bpl.n	800b7b6 <_vfiprintf_r+0x4e>
 800b7ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b7b0:	b01d      	add	sp, #116	; 0x74
 800b7b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7b6:	89ab      	ldrh	r3, [r5, #12]
 800b7b8:	0598      	lsls	r0, r3, #22
 800b7ba:	d4f7      	bmi.n	800b7ac <_vfiprintf_r+0x44>
 800b7bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b7be:	f7ff f8d1 	bl	800a964 <__retarget_lock_release_recursive>
 800b7c2:	e7f3      	b.n	800b7ac <_vfiprintf_r+0x44>
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	9309      	str	r3, [sp, #36]	; 0x24
 800b7c8:	2320      	movs	r3, #32
 800b7ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b7ce:	f8cd 800c 	str.w	r8, [sp, #12]
 800b7d2:	2330      	movs	r3, #48	; 0x30
 800b7d4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b988 <_vfiprintf_r+0x220>
 800b7d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b7dc:	f04f 0901 	mov.w	r9, #1
 800b7e0:	4623      	mov	r3, r4
 800b7e2:	469a      	mov	sl, r3
 800b7e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b7e8:	b10a      	cbz	r2, 800b7ee <_vfiprintf_r+0x86>
 800b7ea:	2a25      	cmp	r2, #37	; 0x25
 800b7ec:	d1f9      	bne.n	800b7e2 <_vfiprintf_r+0x7a>
 800b7ee:	ebba 0b04 	subs.w	fp, sl, r4
 800b7f2:	d00b      	beq.n	800b80c <_vfiprintf_r+0xa4>
 800b7f4:	465b      	mov	r3, fp
 800b7f6:	4622      	mov	r2, r4
 800b7f8:	4629      	mov	r1, r5
 800b7fa:	4630      	mov	r0, r6
 800b7fc:	f7ff ffa1 	bl	800b742 <__sfputs_r>
 800b800:	3001      	adds	r0, #1
 800b802:	f000 80a9 	beq.w	800b958 <_vfiprintf_r+0x1f0>
 800b806:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b808:	445a      	add	r2, fp
 800b80a:	9209      	str	r2, [sp, #36]	; 0x24
 800b80c:	f89a 3000 	ldrb.w	r3, [sl]
 800b810:	2b00      	cmp	r3, #0
 800b812:	f000 80a1 	beq.w	800b958 <_vfiprintf_r+0x1f0>
 800b816:	2300      	movs	r3, #0
 800b818:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b81c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b820:	f10a 0a01 	add.w	sl, sl, #1
 800b824:	9304      	str	r3, [sp, #16]
 800b826:	9307      	str	r3, [sp, #28]
 800b828:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b82c:	931a      	str	r3, [sp, #104]	; 0x68
 800b82e:	4654      	mov	r4, sl
 800b830:	2205      	movs	r2, #5
 800b832:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b836:	4854      	ldr	r0, [pc, #336]	; (800b988 <_vfiprintf_r+0x220>)
 800b838:	f7f4 fcca 	bl	80001d0 <memchr>
 800b83c:	9a04      	ldr	r2, [sp, #16]
 800b83e:	b9d8      	cbnz	r0, 800b878 <_vfiprintf_r+0x110>
 800b840:	06d1      	lsls	r1, r2, #27
 800b842:	bf44      	itt	mi
 800b844:	2320      	movmi	r3, #32
 800b846:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b84a:	0713      	lsls	r3, r2, #28
 800b84c:	bf44      	itt	mi
 800b84e:	232b      	movmi	r3, #43	; 0x2b
 800b850:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b854:	f89a 3000 	ldrb.w	r3, [sl]
 800b858:	2b2a      	cmp	r3, #42	; 0x2a
 800b85a:	d015      	beq.n	800b888 <_vfiprintf_r+0x120>
 800b85c:	9a07      	ldr	r2, [sp, #28]
 800b85e:	4654      	mov	r4, sl
 800b860:	2000      	movs	r0, #0
 800b862:	f04f 0c0a 	mov.w	ip, #10
 800b866:	4621      	mov	r1, r4
 800b868:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b86c:	3b30      	subs	r3, #48	; 0x30
 800b86e:	2b09      	cmp	r3, #9
 800b870:	d94d      	bls.n	800b90e <_vfiprintf_r+0x1a6>
 800b872:	b1b0      	cbz	r0, 800b8a2 <_vfiprintf_r+0x13a>
 800b874:	9207      	str	r2, [sp, #28]
 800b876:	e014      	b.n	800b8a2 <_vfiprintf_r+0x13a>
 800b878:	eba0 0308 	sub.w	r3, r0, r8
 800b87c:	fa09 f303 	lsl.w	r3, r9, r3
 800b880:	4313      	orrs	r3, r2
 800b882:	9304      	str	r3, [sp, #16]
 800b884:	46a2      	mov	sl, r4
 800b886:	e7d2      	b.n	800b82e <_vfiprintf_r+0xc6>
 800b888:	9b03      	ldr	r3, [sp, #12]
 800b88a:	1d19      	adds	r1, r3, #4
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	9103      	str	r1, [sp, #12]
 800b890:	2b00      	cmp	r3, #0
 800b892:	bfbb      	ittet	lt
 800b894:	425b      	neglt	r3, r3
 800b896:	f042 0202 	orrlt.w	r2, r2, #2
 800b89a:	9307      	strge	r3, [sp, #28]
 800b89c:	9307      	strlt	r3, [sp, #28]
 800b89e:	bfb8      	it	lt
 800b8a0:	9204      	strlt	r2, [sp, #16]
 800b8a2:	7823      	ldrb	r3, [r4, #0]
 800b8a4:	2b2e      	cmp	r3, #46	; 0x2e
 800b8a6:	d10c      	bne.n	800b8c2 <_vfiprintf_r+0x15a>
 800b8a8:	7863      	ldrb	r3, [r4, #1]
 800b8aa:	2b2a      	cmp	r3, #42	; 0x2a
 800b8ac:	d134      	bne.n	800b918 <_vfiprintf_r+0x1b0>
 800b8ae:	9b03      	ldr	r3, [sp, #12]
 800b8b0:	1d1a      	adds	r2, r3, #4
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	9203      	str	r2, [sp, #12]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	bfb8      	it	lt
 800b8ba:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b8be:	3402      	adds	r4, #2
 800b8c0:	9305      	str	r3, [sp, #20]
 800b8c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b998 <_vfiprintf_r+0x230>
 800b8c6:	7821      	ldrb	r1, [r4, #0]
 800b8c8:	2203      	movs	r2, #3
 800b8ca:	4650      	mov	r0, sl
 800b8cc:	f7f4 fc80 	bl	80001d0 <memchr>
 800b8d0:	b138      	cbz	r0, 800b8e2 <_vfiprintf_r+0x17a>
 800b8d2:	9b04      	ldr	r3, [sp, #16]
 800b8d4:	eba0 000a 	sub.w	r0, r0, sl
 800b8d8:	2240      	movs	r2, #64	; 0x40
 800b8da:	4082      	lsls	r2, r0
 800b8dc:	4313      	orrs	r3, r2
 800b8de:	3401      	adds	r4, #1
 800b8e0:	9304      	str	r3, [sp, #16]
 800b8e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8e6:	4829      	ldr	r0, [pc, #164]	; (800b98c <_vfiprintf_r+0x224>)
 800b8e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b8ec:	2206      	movs	r2, #6
 800b8ee:	f7f4 fc6f 	bl	80001d0 <memchr>
 800b8f2:	2800      	cmp	r0, #0
 800b8f4:	d03f      	beq.n	800b976 <_vfiprintf_r+0x20e>
 800b8f6:	4b26      	ldr	r3, [pc, #152]	; (800b990 <_vfiprintf_r+0x228>)
 800b8f8:	bb1b      	cbnz	r3, 800b942 <_vfiprintf_r+0x1da>
 800b8fa:	9b03      	ldr	r3, [sp, #12]
 800b8fc:	3307      	adds	r3, #7
 800b8fe:	f023 0307 	bic.w	r3, r3, #7
 800b902:	3308      	adds	r3, #8
 800b904:	9303      	str	r3, [sp, #12]
 800b906:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b908:	443b      	add	r3, r7
 800b90a:	9309      	str	r3, [sp, #36]	; 0x24
 800b90c:	e768      	b.n	800b7e0 <_vfiprintf_r+0x78>
 800b90e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b912:	460c      	mov	r4, r1
 800b914:	2001      	movs	r0, #1
 800b916:	e7a6      	b.n	800b866 <_vfiprintf_r+0xfe>
 800b918:	2300      	movs	r3, #0
 800b91a:	3401      	adds	r4, #1
 800b91c:	9305      	str	r3, [sp, #20]
 800b91e:	4619      	mov	r1, r3
 800b920:	f04f 0c0a 	mov.w	ip, #10
 800b924:	4620      	mov	r0, r4
 800b926:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b92a:	3a30      	subs	r2, #48	; 0x30
 800b92c:	2a09      	cmp	r2, #9
 800b92e:	d903      	bls.n	800b938 <_vfiprintf_r+0x1d0>
 800b930:	2b00      	cmp	r3, #0
 800b932:	d0c6      	beq.n	800b8c2 <_vfiprintf_r+0x15a>
 800b934:	9105      	str	r1, [sp, #20]
 800b936:	e7c4      	b.n	800b8c2 <_vfiprintf_r+0x15a>
 800b938:	fb0c 2101 	mla	r1, ip, r1, r2
 800b93c:	4604      	mov	r4, r0
 800b93e:	2301      	movs	r3, #1
 800b940:	e7f0      	b.n	800b924 <_vfiprintf_r+0x1bc>
 800b942:	ab03      	add	r3, sp, #12
 800b944:	9300      	str	r3, [sp, #0]
 800b946:	462a      	mov	r2, r5
 800b948:	4b12      	ldr	r3, [pc, #72]	; (800b994 <_vfiprintf_r+0x22c>)
 800b94a:	a904      	add	r1, sp, #16
 800b94c:	4630      	mov	r0, r6
 800b94e:	f7fe fa85 	bl	8009e5c <_printf_float>
 800b952:	4607      	mov	r7, r0
 800b954:	1c78      	adds	r0, r7, #1
 800b956:	d1d6      	bne.n	800b906 <_vfiprintf_r+0x19e>
 800b958:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b95a:	07d9      	lsls	r1, r3, #31
 800b95c:	d405      	bmi.n	800b96a <_vfiprintf_r+0x202>
 800b95e:	89ab      	ldrh	r3, [r5, #12]
 800b960:	059a      	lsls	r2, r3, #22
 800b962:	d402      	bmi.n	800b96a <_vfiprintf_r+0x202>
 800b964:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b966:	f7fe fffd 	bl	800a964 <__retarget_lock_release_recursive>
 800b96a:	89ab      	ldrh	r3, [r5, #12]
 800b96c:	065b      	lsls	r3, r3, #25
 800b96e:	f53f af1d 	bmi.w	800b7ac <_vfiprintf_r+0x44>
 800b972:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b974:	e71c      	b.n	800b7b0 <_vfiprintf_r+0x48>
 800b976:	ab03      	add	r3, sp, #12
 800b978:	9300      	str	r3, [sp, #0]
 800b97a:	462a      	mov	r2, r5
 800b97c:	4b05      	ldr	r3, [pc, #20]	; (800b994 <_vfiprintf_r+0x22c>)
 800b97e:	a904      	add	r1, sp, #16
 800b980:	4630      	mov	r0, r6
 800b982:	f7fe fd0f 	bl	800a3a4 <_printf_i>
 800b986:	e7e4      	b.n	800b952 <_vfiprintf_r+0x1ea>
 800b988:	0800d5bd 	.word	0x0800d5bd
 800b98c:	0800d5c7 	.word	0x0800d5c7
 800b990:	08009e5d 	.word	0x08009e5d
 800b994:	0800b743 	.word	0x0800b743
 800b998:	0800d5c3 	.word	0x0800d5c3

0800b99c <malloc>:
 800b99c:	4b02      	ldr	r3, [pc, #8]	; (800b9a8 <malloc+0xc>)
 800b99e:	4601      	mov	r1, r0
 800b9a0:	6818      	ldr	r0, [r3, #0]
 800b9a2:	f000 b823 	b.w	800b9ec <_malloc_r>
 800b9a6:	bf00      	nop
 800b9a8:	20000068 	.word	0x20000068

0800b9ac <sbrk_aligned>:
 800b9ac:	b570      	push	{r4, r5, r6, lr}
 800b9ae:	4e0e      	ldr	r6, [pc, #56]	; (800b9e8 <sbrk_aligned+0x3c>)
 800b9b0:	460c      	mov	r4, r1
 800b9b2:	6831      	ldr	r1, [r6, #0]
 800b9b4:	4605      	mov	r5, r0
 800b9b6:	b911      	cbnz	r1, 800b9be <sbrk_aligned+0x12>
 800b9b8:	f000 fe5e 	bl	800c678 <_sbrk_r>
 800b9bc:	6030      	str	r0, [r6, #0]
 800b9be:	4621      	mov	r1, r4
 800b9c0:	4628      	mov	r0, r5
 800b9c2:	f000 fe59 	bl	800c678 <_sbrk_r>
 800b9c6:	1c43      	adds	r3, r0, #1
 800b9c8:	d00a      	beq.n	800b9e0 <sbrk_aligned+0x34>
 800b9ca:	1cc4      	adds	r4, r0, #3
 800b9cc:	f024 0403 	bic.w	r4, r4, #3
 800b9d0:	42a0      	cmp	r0, r4
 800b9d2:	d007      	beq.n	800b9e4 <sbrk_aligned+0x38>
 800b9d4:	1a21      	subs	r1, r4, r0
 800b9d6:	4628      	mov	r0, r5
 800b9d8:	f000 fe4e 	bl	800c678 <_sbrk_r>
 800b9dc:	3001      	adds	r0, #1
 800b9de:	d101      	bne.n	800b9e4 <sbrk_aligned+0x38>
 800b9e0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b9e4:	4620      	mov	r0, r4
 800b9e6:	bd70      	pop	{r4, r5, r6, pc}
 800b9e8:	20002768 	.word	0x20002768

0800b9ec <_malloc_r>:
 800b9ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9f0:	1ccd      	adds	r5, r1, #3
 800b9f2:	f025 0503 	bic.w	r5, r5, #3
 800b9f6:	3508      	adds	r5, #8
 800b9f8:	2d0c      	cmp	r5, #12
 800b9fa:	bf38      	it	cc
 800b9fc:	250c      	movcc	r5, #12
 800b9fe:	2d00      	cmp	r5, #0
 800ba00:	4607      	mov	r7, r0
 800ba02:	db01      	blt.n	800ba08 <_malloc_r+0x1c>
 800ba04:	42a9      	cmp	r1, r5
 800ba06:	d905      	bls.n	800ba14 <_malloc_r+0x28>
 800ba08:	230c      	movs	r3, #12
 800ba0a:	603b      	str	r3, [r7, #0]
 800ba0c:	2600      	movs	r6, #0
 800ba0e:	4630      	mov	r0, r6
 800ba10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba14:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800bae8 <_malloc_r+0xfc>
 800ba18:	f000 f916 	bl	800bc48 <__malloc_lock>
 800ba1c:	f8d8 3000 	ldr.w	r3, [r8]
 800ba20:	461c      	mov	r4, r3
 800ba22:	bb5c      	cbnz	r4, 800ba7c <_malloc_r+0x90>
 800ba24:	4629      	mov	r1, r5
 800ba26:	4638      	mov	r0, r7
 800ba28:	f7ff ffc0 	bl	800b9ac <sbrk_aligned>
 800ba2c:	1c43      	adds	r3, r0, #1
 800ba2e:	4604      	mov	r4, r0
 800ba30:	d155      	bne.n	800bade <_malloc_r+0xf2>
 800ba32:	f8d8 4000 	ldr.w	r4, [r8]
 800ba36:	4626      	mov	r6, r4
 800ba38:	2e00      	cmp	r6, #0
 800ba3a:	d145      	bne.n	800bac8 <_malloc_r+0xdc>
 800ba3c:	2c00      	cmp	r4, #0
 800ba3e:	d048      	beq.n	800bad2 <_malloc_r+0xe6>
 800ba40:	6823      	ldr	r3, [r4, #0]
 800ba42:	4631      	mov	r1, r6
 800ba44:	4638      	mov	r0, r7
 800ba46:	eb04 0903 	add.w	r9, r4, r3
 800ba4a:	f000 fe15 	bl	800c678 <_sbrk_r>
 800ba4e:	4581      	cmp	r9, r0
 800ba50:	d13f      	bne.n	800bad2 <_malloc_r+0xe6>
 800ba52:	6821      	ldr	r1, [r4, #0]
 800ba54:	1a6d      	subs	r5, r5, r1
 800ba56:	4629      	mov	r1, r5
 800ba58:	4638      	mov	r0, r7
 800ba5a:	f7ff ffa7 	bl	800b9ac <sbrk_aligned>
 800ba5e:	3001      	adds	r0, #1
 800ba60:	d037      	beq.n	800bad2 <_malloc_r+0xe6>
 800ba62:	6823      	ldr	r3, [r4, #0]
 800ba64:	442b      	add	r3, r5
 800ba66:	6023      	str	r3, [r4, #0]
 800ba68:	f8d8 3000 	ldr.w	r3, [r8]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d038      	beq.n	800bae2 <_malloc_r+0xf6>
 800ba70:	685a      	ldr	r2, [r3, #4]
 800ba72:	42a2      	cmp	r2, r4
 800ba74:	d12b      	bne.n	800bace <_malloc_r+0xe2>
 800ba76:	2200      	movs	r2, #0
 800ba78:	605a      	str	r2, [r3, #4]
 800ba7a:	e00f      	b.n	800ba9c <_malloc_r+0xb0>
 800ba7c:	6822      	ldr	r2, [r4, #0]
 800ba7e:	1b52      	subs	r2, r2, r5
 800ba80:	d41f      	bmi.n	800bac2 <_malloc_r+0xd6>
 800ba82:	2a0b      	cmp	r2, #11
 800ba84:	d917      	bls.n	800bab6 <_malloc_r+0xca>
 800ba86:	1961      	adds	r1, r4, r5
 800ba88:	42a3      	cmp	r3, r4
 800ba8a:	6025      	str	r5, [r4, #0]
 800ba8c:	bf18      	it	ne
 800ba8e:	6059      	strne	r1, [r3, #4]
 800ba90:	6863      	ldr	r3, [r4, #4]
 800ba92:	bf08      	it	eq
 800ba94:	f8c8 1000 	streq.w	r1, [r8]
 800ba98:	5162      	str	r2, [r4, r5]
 800ba9a:	604b      	str	r3, [r1, #4]
 800ba9c:	4638      	mov	r0, r7
 800ba9e:	f104 060b 	add.w	r6, r4, #11
 800baa2:	f000 f8d7 	bl	800bc54 <__malloc_unlock>
 800baa6:	f026 0607 	bic.w	r6, r6, #7
 800baaa:	1d23      	adds	r3, r4, #4
 800baac:	1af2      	subs	r2, r6, r3
 800baae:	d0ae      	beq.n	800ba0e <_malloc_r+0x22>
 800bab0:	1b9b      	subs	r3, r3, r6
 800bab2:	50a3      	str	r3, [r4, r2]
 800bab4:	e7ab      	b.n	800ba0e <_malloc_r+0x22>
 800bab6:	42a3      	cmp	r3, r4
 800bab8:	6862      	ldr	r2, [r4, #4]
 800baba:	d1dd      	bne.n	800ba78 <_malloc_r+0x8c>
 800babc:	f8c8 2000 	str.w	r2, [r8]
 800bac0:	e7ec      	b.n	800ba9c <_malloc_r+0xb0>
 800bac2:	4623      	mov	r3, r4
 800bac4:	6864      	ldr	r4, [r4, #4]
 800bac6:	e7ac      	b.n	800ba22 <_malloc_r+0x36>
 800bac8:	4634      	mov	r4, r6
 800baca:	6876      	ldr	r6, [r6, #4]
 800bacc:	e7b4      	b.n	800ba38 <_malloc_r+0x4c>
 800bace:	4613      	mov	r3, r2
 800bad0:	e7cc      	b.n	800ba6c <_malloc_r+0x80>
 800bad2:	230c      	movs	r3, #12
 800bad4:	603b      	str	r3, [r7, #0]
 800bad6:	4638      	mov	r0, r7
 800bad8:	f000 f8bc 	bl	800bc54 <__malloc_unlock>
 800badc:	e797      	b.n	800ba0e <_malloc_r+0x22>
 800bade:	6025      	str	r5, [r4, #0]
 800bae0:	e7dc      	b.n	800ba9c <_malloc_r+0xb0>
 800bae2:	605b      	str	r3, [r3, #4]
 800bae4:	deff      	udf	#255	; 0xff
 800bae6:	bf00      	nop
 800bae8:	20002764 	.word	0x20002764

0800baec <__sflush_r>:
 800baec:	898a      	ldrh	r2, [r1, #12]
 800baee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800baf2:	4605      	mov	r5, r0
 800baf4:	0710      	lsls	r0, r2, #28
 800baf6:	460c      	mov	r4, r1
 800baf8:	d458      	bmi.n	800bbac <__sflush_r+0xc0>
 800bafa:	684b      	ldr	r3, [r1, #4]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	dc05      	bgt.n	800bb0c <__sflush_r+0x20>
 800bb00:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	dc02      	bgt.n	800bb0c <__sflush_r+0x20>
 800bb06:	2000      	movs	r0, #0
 800bb08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bb0e:	2e00      	cmp	r6, #0
 800bb10:	d0f9      	beq.n	800bb06 <__sflush_r+0x1a>
 800bb12:	2300      	movs	r3, #0
 800bb14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bb18:	682f      	ldr	r7, [r5, #0]
 800bb1a:	6a21      	ldr	r1, [r4, #32]
 800bb1c:	602b      	str	r3, [r5, #0]
 800bb1e:	d032      	beq.n	800bb86 <__sflush_r+0x9a>
 800bb20:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bb22:	89a3      	ldrh	r3, [r4, #12]
 800bb24:	075a      	lsls	r2, r3, #29
 800bb26:	d505      	bpl.n	800bb34 <__sflush_r+0x48>
 800bb28:	6863      	ldr	r3, [r4, #4]
 800bb2a:	1ac0      	subs	r0, r0, r3
 800bb2c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bb2e:	b10b      	cbz	r3, 800bb34 <__sflush_r+0x48>
 800bb30:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bb32:	1ac0      	subs	r0, r0, r3
 800bb34:	2300      	movs	r3, #0
 800bb36:	4602      	mov	r2, r0
 800bb38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bb3a:	6a21      	ldr	r1, [r4, #32]
 800bb3c:	4628      	mov	r0, r5
 800bb3e:	47b0      	blx	r6
 800bb40:	1c43      	adds	r3, r0, #1
 800bb42:	89a3      	ldrh	r3, [r4, #12]
 800bb44:	d106      	bne.n	800bb54 <__sflush_r+0x68>
 800bb46:	6829      	ldr	r1, [r5, #0]
 800bb48:	291d      	cmp	r1, #29
 800bb4a:	d82b      	bhi.n	800bba4 <__sflush_r+0xb8>
 800bb4c:	4a29      	ldr	r2, [pc, #164]	; (800bbf4 <__sflush_r+0x108>)
 800bb4e:	410a      	asrs	r2, r1
 800bb50:	07d6      	lsls	r6, r2, #31
 800bb52:	d427      	bmi.n	800bba4 <__sflush_r+0xb8>
 800bb54:	2200      	movs	r2, #0
 800bb56:	6062      	str	r2, [r4, #4]
 800bb58:	04d9      	lsls	r1, r3, #19
 800bb5a:	6922      	ldr	r2, [r4, #16]
 800bb5c:	6022      	str	r2, [r4, #0]
 800bb5e:	d504      	bpl.n	800bb6a <__sflush_r+0x7e>
 800bb60:	1c42      	adds	r2, r0, #1
 800bb62:	d101      	bne.n	800bb68 <__sflush_r+0x7c>
 800bb64:	682b      	ldr	r3, [r5, #0]
 800bb66:	b903      	cbnz	r3, 800bb6a <__sflush_r+0x7e>
 800bb68:	6560      	str	r0, [r4, #84]	; 0x54
 800bb6a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bb6c:	602f      	str	r7, [r5, #0]
 800bb6e:	2900      	cmp	r1, #0
 800bb70:	d0c9      	beq.n	800bb06 <__sflush_r+0x1a>
 800bb72:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bb76:	4299      	cmp	r1, r3
 800bb78:	d002      	beq.n	800bb80 <__sflush_r+0x94>
 800bb7a:	4628      	mov	r0, r5
 800bb7c:	f7ff fd7e 	bl	800b67c <_free_r>
 800bb80:	2000      	movs	r0, #0
 800bb82:	6360      	str	r0, [r4, #52]	; 0x34
 800bb84:	e7c0      	b.n	800bb08 <__sflush_r+0x1c>
 800bb86:	2301      	movs	r3, #1
 800bb88:	4628      	mov	r0, r5
 800bb8a:	47b0      	blx	r6
 800bb8c:	1c41      	adds	r1, r0, #1
 800bb8e:	d1c8      	bne.n	800bb22 <__sflush_r+0x36>
 800bb90:	682b      	ldr	r3, [r5, #0]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d0c5      	beq.n	800bb22 <__sflush_r+0x36>
 800bb96:	2b1d      	cmp	r3, #29
 800bb98:	d001      	beq.n	800bb9e <__sflush_r+0xb2>
 800bb9a:	2b16      	cmp	r3, #22
 800bb9c:	d101      	bne.n	800bba2 <__sflush_r+0xb6>
 800bb9e:	602f      	str	r7, [r5, #0]
 800bba0:	e7b1      	b.n	800bb06 <__sflush_r+0x1a>
 800bba2:	89a3      	ldrh	r3, [r4, #12]
 800bba4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bba8:	81a3      	strh	r3, [r4, #12]
 800bbaa:	e7ad      	b.n	800bb08 <__sflush_r+0x1c>
 800bbac:	690f      	ldr	r7, [r1, #16]
 800bbae:	2f00      	cmp	r7, #0
 800bbb0:	d0a9      	beq.n	800bb06 <__sflush_r+0x1a>
 800bbb2:	0793      	lsls	r3, r2, #30
 800bbb4:	680e      	ldr	r6, [r1, #0]
 800bbb6:	bf08      	it	eq
 800bbb8:	694b      	ldreq	r3, [r1, #20]
 800bbba:	600f      	str	r7, [r1, #0]
 800bbbc:	bf18      	it	ne
 800bbbe:	2300      	movne	r3, #0
 800bbc0:	eba6 0807 	sub.w	r8, r6, r7
 800bbc4:	608b      	str	r3, [r1, #8]
 800bbc6:	f1b8 0f00 	cmp.w	r8, #0
 800bbca:	dd9c      	ble.n	800bb06 <__sflush_r+0x1a>
 800bbcc:	6a21      	ldr	r1, [r4, #32]
 800bbce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bbd0:	4643      	mov	r3, r8
 800bbd2:	463a      	mov	r2, r7
 800bbd4:	4628      	mov	r0, r5
 800bbd6:	47b0      	blx	r6
 800bbd8:	2800      	cmp	r0, #0
 800bbda:	dc06      	bgt.n	800bbea <__sflush_r+0xfe>
 800bbdc:	89a3      	ldrh	r3, [r4, #12]
 800bbde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bbe2:	81a3      	strh	r3, [r4, #12]
 800bbe4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bbe8:	e78e      	b.n	800bb08 <__sflush_r+0x1c>
 800bbea:	4407      	add	r7, r0
 800bbec:	eba8 0800 	sub.w	r8, r8, r0
 800bbf0:	e7e9      	b.n	800bbc6 <__sflush_r+0xda>
 800bbf2:	bf00      	nop
 800bbf4:	dfbffffe 	.word	0xdfbffffe

0800bbf8 <_fflush_r>:
 800bbf8:	b538      	push	{r3, r4, r5, lr}
 800bbfa:	690b      	ldr	r3, [r1, #16]
 800bbfc:	4605      	mov	r5, r0
 800bbfe:	460c      	mov	r4, r1
 800bc00:	b913      	cbnz	r3, 800bc08 <_fflush_r+0x10>
 800bc02:	2500      	movs	r5, #0
 800bc04:	4628      	mov	r0, r5
 800bc06:	bd38      	pop	{r3, r4, r5, pc}
 800bc08:	b118      	cbz	r0, 800bc12 <_fflush_r+0x1a>
 800bc0a:	6a03      	ldr	r3, [r0, #32]
 800bc0c:	b90b      	cbnz	r3, 800bc12 <_fflush_r+0x1a>
 800bc0e:	f7fe fd77 	bl	800a700 <__sinit>
 800bc12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d0f3      	beq.n	800bc02 <_fflush_r+0xa>
 800bc1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bc1c:	07d0      	lsls	r0, r2, #31
 800bc1e:	d404      	bmi.n	800bc2a <_fflush_r+0x32>
 800bc20:	0599      	lsls	r1, r3, #22
 800bc22:	d402      	bmi.n	800bc2a <_fflush_r+0x32>
 800bc24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bc26:	f7fe fe9c 	bl	800a962 <__retarget_lock_acquire_recursive>
 800bc2a:	4628      	mov	r0, r5
 800bc2c:	4621      	mov	r1, r4
 800bc2e:	f7ff ff5d 	bl	800baec <__sflush_r>
 800bc32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bc34:	07da      	lsls	r2, r3, #31
 800bc36:	4605      	mov	r5, r0
 800bc38:	d4e4      	bmi.n	800bc04 <_fflush_r+0xc>
 800bc3a:	89a3      	ldrh	r3, [r4, #12]
 800bc3c:	059b      	lsls	r3, r3, #22
 800bc3e:	d4e1      	bmi.n	800bc04 <_fflush_r+0xc>
 800bc40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bc42:	f7fe fe8f 	bl	800a964 <__retarget_lock_release_recursive>
 800bc46:	e7dd      	b.n	800bc04 <_fflush_r+0xc>

0800bc48 <__malloc_lock>:
 800bc48:	4801      	ldr	r0, [pc, #4]	; (800bc50 <__malloc_lock+0x8>)
 800bc4a:	f7fe be8a 	b.w	800a962 <__retarget_lock_acquire_recursive>
 800bc4e:	bf00      	nop
 800bc50:	20002760 	.word	0x20002760

0800bc54 <__malloc_unlock>:
 800bc54:	4801      	ldr	r0, [pc, #4]	; (800bc5c <__malloc_unlock+0x8>)
 800bc56:	f7fe be85 	b.w	800a964 <__retarget_lock_release_recursive>
 800bc5a:	bf00      	nop
 800bc5c:	20002760 	.word	0x20002760

0800bc60 <_Balloc>:
 800bc60:	b570      	push	{r4, r5, r6, lr}
 800bc62:	69c6      	ldr	r6, [r0, #28]
 800bc64:	4604      	mov	r4, r0
 800bc66:	460d      	mov	r5, r1
 800bc68:	b976      	cbnz	r6, 800bc88 <_Balloc+0x28>
 800bc6a:	2010      	movs	r0, #16
 800bc6c:	f7ff fe96 	bl	800b99c <malloc>
 800bc70:	4602      	mov	r2, r0
 800bc72:	61e0      	str	r0, [r4, #28]
 800bc74:	b920      	cbnz	r0, 800bc80 <_Balloc+0x20>
 800bc76:	4b18      	ldr	r3, [pc, #96]	; (800bcd8 <_Balloc+0x78>)
 800bc78:	4818      	ldr	r0, [pc, #96]	; (800bcdc <_Balloc+0x7c>)
 800bc7a:	216b      	movs	r1, #107	; 0x6b
 800bc7c:	f000 fd1e 	bl	800c6bc <__assert_func>
 800bc80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bc84:	6006      	str	r6, [r0, #0]
 800bc86:	60c6      	str	r6, [r0, #12]
 800bc88:	69e6      	ldr	r6, [r4, #28]
 800bc8a:	68f3      	ldr	r3, [r6, #12]
 800bc8c:	b183      	cbz	r3, 800bcb0 <_Balloc+0x50>
 800bc8e:	69e3      	ldr	r3, [r4, #28]
 800bc90:	68db      	ldr	r3, [r3, #12]
 800bc92:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bc96:	b9b8      	cbnz	r0, 800bcc8 <_Balloc+0x68>
 800bc98:	2101      	movs	r1, #1
 800bc9a:	fa01 f605 	lsl.w	r6, r1, r5
 800bc9e:	1d72      	adds	r2, r6, #5
 800bca0:	0092      	lsls	r2, r2, #2
 800bca2:	4620      	mov	r0, r4
 800bca4:	f000 fd28 	bl	800c6f8 <_calloc_r>
 800bca8:	b160      	cbz	r0, 800bcc4 <_Balloc+0x64>
 800bcaa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bcae:	e00e      	b.n	800bcce <_Balloc+0x6e>
 800bcb0:	2221      	movs	r2, #33	; 0x21
 800bcb2:	2104      	movs	r1, #4
 800bcb4:	4620      	mov	r0, r4
 800bcb6:	f000 fd1f 	bl	800c6f8 <_calloc_r>
 800bcba:	69e3      	ldr	r3, [r4, #28]
 800bcbc:	60f0      	str	r0, [r6, #12]
 800bcbe:	68db      	ldr	r3, [r3, #12]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d1e4      	bne.n	800bc8e <_Balloc+0x2e>
 800bcc4:	2000      	movs	r0, #0
 800bcc6:	bd70      	pop	{r4, r5, r6, pc}
 800bcc8:	6802      	ldr	r2, [r0, #0]
 800bcca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bcce:	2300      	movs	r3, #0
 800bcd0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bcd4:	e7f7      	b.n	800bcc6 <_Balloc+0x66>
 800bcd6:	bf00      	nop
 800bcd8:	0800d53d 	.word	0x0800d53d
 800bcdc:	0800d5ce 	.word	0x0800d5ce

0800bce0 <_Bfree>:
 800bce0:	b570      	push	{r4, r5, r6, lr}
 800bce2:	69c6      	ldr	r6, [r0, #28]
 800bce4:	4605      	mov	r5, r0
 800bce6:	460c      	mov	r4, r1
 800bce8:	b976      	cbnz	r6, 800bd08 <_Bfree+0x28>
 800bcea:	2010      	movs	r0, #16
 800bcec:	f7ff fe56 	bl	800b99c <malloc>
 800bcf0:	4602      	mov	r2, r0
 800bcf2:	61e8      	str	r0, [r5, #28]
 800bcf4:	b920      	cbnz	r0, 800bd00 <_Bfree+0x20>
 800bcf6:	4b09      	ldr	r3, [pc, #36]	; (800bd1c <_Bfree+0x3c>)
 800bcf8:	4809      	ldr	r0, [pc, #36]	; (800bd20 <_Bfree+0x40>)
 800bcfa:	218f      	movs	r1, #143	; 0x8f
 800bcfc:	f000 fcde 	bl	800c6bc <__assert_func>
 800bd00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bd04:	6006      	str	r6, [r0, #0]
 800bd06:	60c6      	str	r6, [r0, #12]
 800bd08:	b13c      	cbz	r4, 800bd1a <_Bfree+0x3a>
 800bd0a:	69eb      	ldr	r3, [r5, #28]
 800bd0c:	6862      	ldr	r2, [r4, #4]
 800bd0e:	68db      	ldr	r3, [r3, #12]
 800bd10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bd14:	6021      	str	r1, [r4, #0]
 800bd16:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bd1a:	bd70      	pop	{r4, r5, r6, pc}
 800bd1c:	0800d53d 	.word	0x0800d53d
 800bd20:	0800d5ce 	.word	0x0800d5ce

0800bd24 <__multadd>:
 800bd24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd28:	690d      	ldr	r5, [r1, #16]
 800bd2a:	4607      	mov	r7, r0
 800bd2c:	460c      	mov	r4, r1
 800bd2e:	461e      	mov	r6, r3
 800bd30:	f101 0c14 	add.w	ip, r1, #20
 800bd34:	2000      	movs	r0, #0
 800bd36:	f8dc 3000 	ldr.w	r3, [ip]
 800bd3a:	b299      	uxth	r1, r3
 800bd3c:	fb02 6101 	mla	r1, r2, r1, r6
 800bd40:	0c1e      	lsrs	r6, r3, #16
 800bd42:	0c0b      	lsrs	r3, r1, #16
 800bd44:	fb02 3306 	mla	r3, r2, r6, r3
 800bd48:	b289      	uxth	r1, r1
 800bd4a:	3001      	adds	r0, #1
 800bd4c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bd50:	4285      	cmp	r5, r0
 800bd52:	f84c 1b04 	str.w	r1, [ip], #4
 800bd56:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bd5a:	dcec      	bgt.n	800bd36 <__multadd+0x12>
 800bd5c:	b30e      	cbz	r6, 800bda2 <__multadd+0x7e>
 800bd5e:	68a3      	ldr	r3, [r4, #8]
 800bd60:	42ab      	cmp	r3, r5
 800bd62:	dc19      	bgt.n	800bd98 <__multadd+0x74>
 800bd64:	6861      	ldr	r1, [r4, #4]
 800bd66:	4638      	mov	r0, r7
 800bd68:	3101      	adds	r1, #1
 800bd6a:	f7ff ff79 	bl	800bc60 <_Balloc>
 800bd6e:	4680      	mov	r8, r0
 800bd70:	b928      	cbnz	r0, 800bd7e <__multadd+0x5a>
 800bd72:	4602      	mov	r2, r0
 800bd74:	4b0c      	ldr	r3, [pc, #48]	; (800bda8 <__multadd+0x84>)
 800bd76:	480d      	ldr	r0, [pc, #52]	; (800bdac <__multadd+0x88>)
 800bd78:	21ba      	movs	r1, #186	; 0xba
 800bd7a:	f000 fc9f 	bl	800c6bc <__assert_func>
 800bd7e:	6922      	ldr	r2, [r4, #16]
 800bd80:	3202      	adds	r2, #2
 800bd82:	f104 010c 	add.w	r1, r4, #12
 800bd86:	0092      	lsls	r2, r2, #2
 800bd88:	300c      	adds	r0, #12
 800bd8a:	f7fe fdec 	bl	800a966 <memcpy>
 800bd8e:	4621      	mov	r1, r4
 800bd90:	4638      	mov	r0, r7
 800bd92:	f7ff ffa5 	bl	800bce0 <_Bfree>
 800bd96:	4644      	mov	r4, r8
 800bd98:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bd9c:	3501      	adds	r5, #1
 800bd9e:	615e      	str	r6, [r3, #20]
 800bda0:	6125      	str	r5, [r4, #16]
 800bda2:	4620      	mov	r0, r4
 800bda4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bda8:	0800d5ac 	.word	0x0800d5ac
 800bdac:	0800d5ce 	.word	0x0800d5ce

0800bdb0 <__hi0bits>:
 800bdb0:	0c03      	lsrs	r3, r0, #16
 800bdb2:	041b      	lsls	r3, r3, #16
 800bdb4:	b9d3      	cbnz	r3, 800bdec <__hi0bits+0x3c>
 800bdb6:	0400      	lsls	r0, r0, #16
 800bdb8:	2310      	movs	r3, #16
 800bdba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bdbe:	bf04      	itt	eq
 800bdc0:	0200      	lsleq	r0, r0, #8
 800bdc2:	3308      	addeq	r3, #8
 800bdc4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bdc8:	bf04      	itt	eq
 800bdca:	0100      	lsleq	r0, r0, #4
 800bdcc:	3304      	addeq	r3, #4
 800bdce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bdd2:	bf04      	itt	eq
 800bdd4:	0080      	lsleq	r0, r0, #2
 800bdd6:	3302      	addeq	r3, #2
 800bdd8:	2800      	cmp	r0, #0
 800bdda:	db05      	blt.n	800bde8 <__hi0bits+0x38>
 800bddc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bde0:	f103 0301 	add.w	r3, r3, #1
 800bde4:	bf08      	it	eq
 800bde6:	2320      	moveq	r3, #32
 800bde8:	4618      	mov	r0, r3
 800bdea:	4770      	bx	lr
 800bdec:	2300      	movs	r3, #0
 800bdee:	e7e4      	b.n	800bdba <__hi0bits+0xa>

0800bdf0 <__lo0bits>:
 800bdf0:	6803      	ldr	r3, [r0, #0]
 800bdf2:	f013 0207 	ands.w	r2, r3, #7
 800bdf6:	d00c      	beq.n	800be12 <__lo0bits+0x22>
 800bdf8:	07d9      	lsls	r1, r3, #31
 800bdfa:	d422      	bmi.n	800be42 <__lo0bits+0x52>
 800bdfc:	079a      	lsls	r2, r3, #30
 800bdfe:	bf49      	itett	mi
 800be00:	085b      	lsrmi	r3, r3, #1
 800be02:	089b      	lsrpl	r3, r3, #2
 800be04:	6003      	strmi	r3, [r0, #0]
 800be06:	2201      	movmi	r2, #1
 800be08:	bf5c      	itt	pl
 800be0a:	6003      	strpl	r3, [r0, #0]
 800be0c:	2202      	movpl	r2, #2
 800be0e:	4610      	mov	r0, r2
 800be10:	4770      	bx	lr
 800be12:	b299      	uxth	r1, r3
 800be14:	b909      	cbnz	r1, 800be1a <__lo0bits+0x2a>
 800be16:	0c1b      	lsrs	r3, r3, #16
 800be18:	2210      	movs	r2, #16
 800be1a:	b2d9      	uxtb	r1, r3
 800be1c:	b909      	cbnz	r1, 800be22 <__lo0bits+0x32>
 800be1e:	3208      	adds	r2, #8
 800be20:	0a1b      	lsrs	r3, r3, #8
 800be22:	0719      	lsls	r1, r3, #28
 800be24:	bf04      	itt	eq
 800be26:	091b      	lsreq	r3, r3, #4
 800be28:	3204      	addeq	r2, #4
 800be2a:	0799      	lsls	r1, r3, #30
 800be2c:	bf04      	itt	eq
 800be2e:	089b      	lsreq	r3, r3, #2
 800be30:	3202      	addeq	r2, #2
 800be32:	07d9      	lsls	r1, r3, #31
 800be34:	d403      	bmi.n	800be3e <__lo0bits+0x4e>
 800be36:	085b      	lsrs	r3, r3, #1
 800be38:	f102 0201 	add.w	r2, r2, #1
 800be3c:	d003      	beq.n	800be46 <__lo0bits+0x56>
 800be3e:	6003      	str	r3, [r0, #0]
 800be40:	e7e5      	b.n	800be0e <__lo0bits+0x1e>
 800be42:	2200      	movs	r2, #0
 800be44:	e7e3      	b.n	800be0e <__lo0bits+0x1e>
 800be46:	2220      	movs	r2, #32
 800be48:	e7e1      	b.n	800be0e <__lo0bits+0x1e>
	...

0800be4c <__i2b>:
 800be4c:	b510      	push	{r4, lr}
 800be4e:	460c      	mov	r4, r1
 800be50:	2101      	movs	r1, #1
 800be52:	f7ff ff05 	bl	800bc60 <_Balloc>
 800be56:	4602      	mov	r2, r0
 800be58:	b928      	cbnz	r0, 800be66 <__i2b+0x1a>
 800be5a:	4b05      	ldr	r3, [pc, #20]	; (800be70 <__i2b+0x24>)
 800be5c:	4805      	ldr	r0, [pc, #20]	; (800be74 <__i2b+0x28>)
 800be5e:	f240 1145 	movw	r1, #325	; 0x145
 800be62:	f000 fc2b 	bl	800c6bc <__assert_func>
 800be66:	2301      	movs	r3, #1
 800be68:	6144      	str	r4, [r0, #20]
 800be6a:	6103      	str	r3, [r0, #16]
 800be6c:	bd10      	pop	{r4, pc}
 800be6e:	bf00      	nop
 800be70:	0800d5ac 	.word	0x0800d5ac
 800be74:	0800d5ce 	.word	0x0800d5ce

0800be78 <__multiply>:
 800be78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be7c:	4691      	mov	r9, r2
 800be7e:	690a      	ldr	r2, [r1, #16]
 800be80:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800be84:	429a      	cmp	r2, r3
 800be86:	bfb8      	it	lt
 800be88:	460b      	movlt	r3, r1
 800be8a:	460c      	mov	r4, r1
 800be8c:	bfbc      	itt	lt
 800be8e:	464c      	movlt	r4, r9
 800be90:	4699      	movlt	r9, r3
 800be92:	6927      	ldr	r7, [r4, #16]
 800be94:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800be98:	68a3      	ldr	r3, [r4, #8]
 800be9a:	6861      	ldr	r1, [r4, #4]
 800be9c:	eb07 060a 	add.w	r6, r7, sl
 800bea0:	42b3      	cmp	r3, r6
 800bea2:	b085      	sub	sp, #20
 800bea4:	bfb8      	it	lt
 800bea6:	3101      	addlt	r1, #1
 800bea8:	f7ff feda 	bl	800bc60 <_Balloc>
 800beac:	b930      	cbnz	r0, 800bebc <__multiply+0x44>
 800beae:	4602      	mov	r2, r0
 800beb0:	4b44      	ldr	r3, [pc, #272]	; (800bfc4 <__multiply+0x14c>)
 800beb2:	4845      	ldr	r0, [pc, #276]	; (800bfc8 <__multiply+0x150>)
 800beb4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800beb8:	f000 fc00 	bl	800c6bc <__assert_func>
 800bebc:	f100 0514 	add.w	r5, r0, #20
 800bec0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bec4:	462b      	mov	r3, r5
 800bec6:	2200      	movs	r2, #0
 800bec8:	4543      	cmp	r3, r8
 800beca:	d321      	bcc.n	800bf10 <__multiply+0x98>
 800becc:	f104 0314 	add.w	r3, r4, #20
 800bed0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bed4:	f109 0314 	add.w	r3, r9, #20
 800bed8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bedc:	9202      	str	r2, [sp, #8]
 800bede:	1b3a      	subs	r2, r7, r4
 800bee0:	3a15      	subs	r2, #21
 800bee2:	f022 0203 	bic.w	r2, r2, #3
 800bee6:	3204      	adds	r2, #4
 800bee8:	f104 0115 	add.w	r1, r4, #21
 800beec:	428f      	cmp	r7, r1
 800beee:	bf38      	it	cc
 800bef0:	2204      	movcc	r2, #4
 800bef2:	9201      	str	r2, [sp, #4]
 800bef4:	9a02      	ldr	r2, [sp, #8]
 800bef6:	9303      	str	r3, [sp, #12]
 800bef8:	429a      	cmp	r2, r3
 800befa:	d80c      	bhi.n	800bf16 <__multiply+0x9e>
 800befc:	2e00      	cmp	r6, #0
 800befe:	dd03      	ble.n	800bf08 <__multiply+0x90>
 800bf00:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d05b      	beq.n	800bfc0 <__multiply+0x148>
 800bf08:	6106      	str	r6, [r0, #16]
 800bf0a:	b005      	add	sp, #20
 800bf0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf10:	f843 2b04 	str.w	r2, [r3], #4
 800bf14:	e7d8      	b.n	800bec8 <__multiply+0x50>
 800bf16:	f8b3 a000 	ldrh.w	sl, [r3]
 800bf1a:	f1ba 0f00 	cmp.w	sl, #0
 800bf1e:	d024      	beq.n	800bf6a <__multiply+0xf2>
 800bf20:	f104 0e14 	add.w	lr, r4, #20
 800bf24:	46a9      	mov	r9, r5
 800bf26:	f04f 0c00 	mov.w	ip, #0
 800bf2a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bf2e:	f8d9 1000 	ldr.w	r1, [r9]
 800bf32:	fa1f fb82 	uxth.w	fp, r2
 800bf36:	b289      	uxth	r1, r1
 800bf38:	fb0a 110b 	mla	r1, sl, fp, r1
 800bf3c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bf40:	f8d9 2000 	ldr.w	r2, [r9]
 800bf44:	4461      	add	r1, ip
 800bf46:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bf4a:	fb0a c20b 	mla	r2, sl, fp, ip
 800bf4e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bf52:	b289      	uxth	r1, r1
 800bf54:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bf58:	4577      	cmp	r7, lr
 800bf5a:	f849 1b04 	str.w	r1, [r9], #4
 800bf5e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bf62:	d8e2      	bhi.n	800bf2a <__multiply+0xb2>
 800bf64:	9a01      	ldr	r2, [sp, #4]
 800bf66:	f845 c002 	str.w	ip, [r5, r2]
 800bf6a:	9a03      	ldr	r2, [sp, #12]
 800bf6c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bf70:	3304      	adds	r3, #4
 800bf72:	f1b9 0f00 	cmp.w	r9, #0
 800bf76:	d021      	beq.n	800bfbc <__multiply+0x144>
 800bf78:	6829      	ldr	r1, [r5, #0]
 800bf7a:	f104 0c14 	add.w	ip, r4, #20
 800bf7e:	46ae      	mov	lr, r5
 800bf80:	f04f 0a00 	mov.w	sl, #0
 800bf84:	f8bc b000 	ldrh.w	fp, [ip]
 800bf88:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bf8c:	fb09 220b 	mla	r2, r9, fp, r2
 800bf90:	4452      	add	r2, sl
 800bf92:	b289      	uxth	r1, r1
 800bf94:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bf98:	f84e 1b04 	str.w	r1, [lr], #4
 800bf9c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800bfa0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bfa4:	f8be 1000 	ldrh.w	r1, [lr]
 800bfa8:	fb09 110a 	mla	r1, r9, sl, r1
 800bfac:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800bfb0:	4567      	cmp	r7, ip
 800bfb2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bfb6:	d8e5      	bhi.n	800bf84 <__multiply+0x10c>
 800bfb8:	9a01      	ldr	r2, [sp, #4]
 800bfba:	50a9      	str	r1, [r5, r2]
 800bfbc:	3504      	adds	r5, #4
 800bfbe:	e799      	b.n	800bef4 <__multiply+0x7c>
 800bfc0:	3e01      	subs	r6, #1
 800bfc2:	e79b      	b.n	800befc <__multiply+0x84>
 800bfc4:	0800d5ac 	.word	0x0800d5ac
 800bfc8:	0800d5ce 	.word	0x0800d5ce

0800bfcc <__pow5mult>:
 800bfcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfd0:	4615      	mov	r5, r2
 800bfd2:	f012 0203 	ands.w	r2, r2, #3
 800bfd6:	4606      	mov	r6, r0
 800bfd8:	460f      	mov	r7, r1
 800bfda:	d007      	beq.n	800bfec <__pow5mult+0x20>
 800bfdc:	4c25      	ldr	r4, [pc, #148]	; (800c074 <__pow5mult+0xa8>)
 800bfde:	3a01      	subs	r2, #1
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bfe6:	f7ff fe9d 	bl	800bd24 <__multadd>
 800bfea:	4607      	mov	r7, r0
 800bfec:	10ad      	asrs	r5, r5, #2
 800bfee:	d03d      	beq.n	800c06c <__pow5mult+0xa0>
 800bff0:	69f4      	ldr	r4, [r6, #28]
 800bff2:	b97c      	cbnz	r4, 800c014 <__pow5mult+0x48>
 800bff4:	2010      	movs	r0, #16
 800bff6:	f7ff fcd1 	bl	800b99c <malloc>
 800bffa:	4602      	mov	r2, r0
 800bffc:	61f0      	str	r0, [r6, #28]
 800bffe:	b928      	cbnz	r0, 800c00c <__pow5mult+0x40>
 800c000:	4b1d      	ldr	r3, [pc, #116]	; (800c078 <__pow5mult+0xac>)
 800c002:	481e      	ldr	r0, [pc, #120]	; (800c07c <__pow5mult+0xb0>)
 800c004:	f240 11b3 	movw	r1, #435	; 0x1b3
 800c008:	f000 fb58 	bl	800c6bc <__assert_func>
 800c00c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c010:	6004      	str	r4, [r0, #0]
 800c012:	60c4      	str	r4, [r0, #12]
 800c014:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800c018:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c01c:	b94c      	cbnz	r4, 800c032 <__pow5mult+0x66>
 800c01e:	f240 2171 	movw	r1, #625	; 0x271
 800c022:	4630      	mov	r0, r6
 800c024:	f7ff ff12 	bl	800be4c <__i2b>
 800c028:	2300      	movs	r3, #0
 800c02a:	f8c8 0008 	str.w	r0, [r8, #8]
 800c02e:	4604      	mov	r4, r0
 800c030:	6003      	str	r3, [r0, #0]
 800c032:	f04f 0900 	mov.w	r9, #0
 800c036:	07eb      	lsls	r3, r5, #31
 800c038:	d50a      	bpl.n	800c050 <__pow5mult+0x84>
 800c03a:	4639      	mov	r1, r7
 800c03c:	4622      	mov	r2, r4
 800c03e:	4630      	mov	r0, r6
 800c040:	f7ff ff1a 	bl	800be78 <__multiply>
 800c044:	4639      	mov	r1, r7
 800c046:	4680      	mov	r8, r0
 800c048:	4630      	mov	r0, r6
 800c04a:	f7ff fe49 	bl	800bce0 <_Bfree>
 800c04e:	4647      	mov	r7, r8
 800c050:	106d      	asrs	r5, r5, #1
 800c052:	d00b      	beq.n	800c06c <__pow5mult+0xa0>
 800c054:	6820      	ldr	r0, [r4, #0]
 800c056:	b938      	cbnz	r0, 800c068 <__pow5mult+0x9c>
 800c058:	4622      	mov	r2, r4
 800c05a:	4621      	mov	r1, r4
 800c05c:	4630      	mov	r0, r6
 800c05e:	f7ff ff0b 	bl	800be78 <__multiply>
 800c062:	6020      	str	r0, [r4, #0]
 800c064:	f8c0 9000 	str.w	r9, [r0]
 800c068:	4604      	mov	r4, r0
 800c06a:	e7e4      	b.n	800c036 <__pow5mult+0x6a>
 800c06c:	4638      	mov	r0, r7
 800c06e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c072:	bf00      	nop
 800c074:	0800d718 	.word	0x0800d718
 800c078:	0800d53d 	.word	0x0800d53d
 800c07c:	0800d5ce 	.word	0x0800d5ce

0800c080 <__lshift>:
 800c080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c084:	460c      	mov	r4, r1
 800c086:	6849      	ldr	r1, [r1, #4]
 800c088:	6923      	ldr	r3, [r4, #16]
 800c08a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c08e:	68a3      	ldr	r3, [r4, #8]
 800c090:	4607      	mov	r7, r0
 800c092:	4691      	mov	r9, r2
 800c094:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c098:	f108 0601 	add.w	r6, r8, #1
 800c09c:	42b3      	cmp	r3, r6
 800c09e:	db0b      	blt.n	800c0b8 <__lshift+0x38>
 800c0a0:	4638      	mov	r0, r7
 800c0a2:	f7ff fddd 	bl	800bc60 <_Balloc>
 800c0a6:	4605      	mov	r5, r0
 800c0a8:	b948      	cbnz	r0, 800c0be <__lshift+0x3e>
 800c0aa:	4602      	mov	r2, r0
 800c0ac:	4b28      	ldr	r3, [pc, #160]	; (800c150 <__lshift+0xd0>)
 800c0ae:	4829      	ldr	r0, [pc, #164]	; (800c154 <__lshift+0xd4>)
 800c0b0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800c0b4:	f000 fb02 	bl	800c6bc <__assert_func>
 800c0b8:	3101      	adds	r1, #1
 800c0ba:	005b      	lsls	r3, r3, #1
 800c0bc:	e7ee      	b.n	800c09c <__lshift+0x1c>
 800c0be:	2300      	movs	r3, #0
 800c0c0:	f100 0114 	add.w	r1, r0, #20
 800c0c4:	f100 0210 	add.w	r2, r0, #16
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	4553      	cmp	r3, sl
 800c0cc:	db33      	blt.n	800c136 <__lshift+0xb6>
 800c0ce:	6920      	ldr	r0, [r4, #16]
 800c0d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c0d4:	f104 0314 	add.w	r3, r4, #20
 800c0d8:	f019 091f 	ands.w	r9, r9, #31
 800c0dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c0e0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c0e4:	d02b      	beq.n	800c13e <__lshift+0xbe>
 800c0e6:	f1c9 0e20 	rsb	lr, r9, #32
 800c0ea:	468a      	mov	sl, r1
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	6818      	ldr	r0, [r3, #0]
 800c0f0:	fa00 f009 	lsl.w	r0, r0, r9
 800c0f4:	4310      	orrs	r0, r2
 800c0f6:	f84a 0b04 	str.w	r0, [sl], #4
 800c0fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0fe:	459c      	cmp	ip, r3
 800c100:	fa22 f20e 	lsr.w	r2, r2, lr
 800c104:	d8f3      	bhi.n	800c0ee <__lshift+0x6e>
 800c106:	ebac 0304 	sub.w	r3, ip, r4
 800c10a:	3b15      	subs	r3, #21
 800c10c:	f023 0303 	bic.w	r3, r3, #3
 800c110:	3304      	adds	r3, #4
 800c112:	f104 0015 	add.w	r0, r4, #21
 800c116:	4584      	cmp	ip, r0
 800c118:	bf38      	it	cc
 800c11a:	2304      	movcc	r3, #4
 800c11c:	50ca      	str	r2, [r1, r3]
 800c11e:	b10a      	cbz	r2, 800c124 <__lshift+0xa4>
 800c120:	f108 0602 	add.w	r6, r8, #2
 800c124:	3e01      	subs	r6, #1
 800c126:	4638      	mov	r0, r7
 800c128:	612e      	str	r6, [r5, #16]
 800c12a:	4621      	mov	r1, r4
 800c12c:	f7ff fdd8 	bl	800bce0 <_Bfree>
 800c130:	4628      	mov	r0, r5
 800c132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c136:	f842 0f04 	str.w	r0, [r2, #4]!
 800c13a:	3301      	adds	r3, #1
 800c13c:	e7c5      	b.n	800c0ca <__lshift+0x4a>
 800c13e:	3904      	subs	r1, #4
 800c140:	f853 2b04 	ldr.w	r2, [r3], #4
 800c144:	f841 2f04 	str.w	r2, [r1, #4]!
 800c148:	459c      	cmp	ip, r3
 800c14a:	d8f9      	bhi.n	800c140 <__lshift+0xc0>
 800c14c:	e7ea      	b.n	800c124 <__lshift+0xa4>
 800c14e:	bf00      	nop
 800c150:	0800d5ac 	.word	0x0800d5ac
 800c154:	0800d5ce 	.word	0x0800d5ce

0800c158 <__mcmp>:
 800c158:	b530      	push	{r4, r5, lr}
 800c15a:	6902      	ldr	r2, [r0, #16]
 800c15c:	690c      	ldr	r4, [r1, #16]
 800c15e:	1b12      	subs	r2, r2, r4
 800c160:	d10e      	bne.n	800c180 <__mcmp+0x28>
 800c162:	f100 0314 	add.w	r3, r0, #20
 800c166:	3114      	adds	r1, #20
 800c168:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c16c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c170:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c174:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c178:	42a5      	cmp	r5, r4
 800c17a:	d003      	beq.n	800c184 <__mcmp+0x2c>
 800c17c:	d305      	bcc.n	800c18a <__mcmp+0x32>
 800c17e:	2201      	movs	r2, #1
 800c180:	4610      	mov	r0, r2
 800c182:	bd30      	pop	{r4, r5, pc}
 800c184:	4283      	cmp	r3, r0
 800c186:	d3f3      	bcc.n	800c170 <__mcmp+0x18>
 800c188:	e7fa      	b.n	800c180 <__mcmp+0x28>
 800c18a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c18e:	e7f7      	b.n	800c180 <__mcmp+0x28>

0800c190 <__mdiff>:
 800c190:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c194:	460c      	mov	r4, r1
 800c196:	4606      	mov	r6, r0
 800c198:	4611      	mov	r1, r2
 800c19a:	4620      	mov	r0, r4
 800c19c:	4690      	mov	r8, r2
 800c19e:	f7ff ffdb 	bl	800c158 <__mcmp>
 800c1a2:	1e05      	subs	r5, r0, #0
 800c1a4:	d110      	bne.n	800c1c8 <__mdiff+0x38>
 800c1a6:	4629      	mov	r1, r5
 800c1a8:	4630      	mov	r0, r6
 800c1aa:	f7ff fd59 	bl	800bc60 <_Balloc>
 800c1ae:	b930      	cbnz	r0, 800c1be <__mdiff+0x2e>
 800c1b0:	4b3a      	ldr	r3, [pc, #232]	; (800c29c <__mdiff+0x10c>)
 800c1b2:	4602      	mov	r2, r0
 800c1b4:	f240 2137 	movw	r1, #567	; 0x237
 800c1b8:	4839      	ldr	r0, [pc, #228]	; (800c2a0 <__mdiff+0x110>)
 800c1ba:	f000 fa7f 	bl	800c6bc <__assert_func>
 800c1be:	2301      	movs	r3, #1
 800c1c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c1c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1c8:	bfa4      	itt	ge
 800c1ca:	4643      	movge	r3, r8
 800c1cc:	46a0      	movge	r8, r4
 800c1ce:	4630      	mov	r0, r6
 800c1d0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c1d4:	bfa6      	itte	ge
 800c1d6:	461c      	movge	r4, r3
 800c1d8:	2500      	movge	r5, #0
 800c1da:	2501      	movlt	r5, #1
 800c1dc:	f7ff fd40 	bl	800bc60 <_Balloc>
 800c1e0:	b920      	cbnz	r0, 800c1ec <__mdiff+0x5c>
 800c1e2:	4b2e      	ldr	r3, [pc, #184]	; (800c29c <__mdiff+0x10c>)
 800c1e4:	4602      	mov	r2, r0
 800c1e6:	f240 2145 	movw	r1, #581	; 0x245
 800c1ea:	e7e5      	b.n	800c1b8 <__mdiff+0x28>
 800c1ec:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c1f0:	6926      	ldr	r6, [r4, #16]
 800c1f2:	60c5      	str	r5, [r0, #12]
 800c1f4:	f104 0914 	add.w	r9, r4, #20
 800c1f8:	f108 0514 	add.w	r5, r8, #20
 800c1fc:	f100 0e14 	add.w	lr, r0, #20
 800c200:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c204:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c208:	f108 0210 	add.w	r2, r8, #16
 800c20c:	46f2      	mov	sl, lr
 800c20e:	2100      	movs	r1, #0
 800c210:	f859 3b04 	ldr.w	r3, [r9], #4
 800c214:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c218:	fa11 f88b 	uxtah	r8, r1, fp
 800c21c:	b299      	uxth	r1, r3
 800c21e:	0c1b      	lsrs	r3, r3, #16
 800c220:	eba8 0801 	sub.w	r8, r8, r1
 800c224:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c228:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c22c:	fa1f f888 	uxth.w	r8, r8
 800c230:	1419      	asrs	r1, r3, #16
 800c232:	454e      	cmp	r6, r9
 800c234:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c238:	f84a 3b04 	str.w	r3, [sl], #4
 800c23c:	d8e8      	bhi.n	800c210 <__mdiff+0x80>
 800c23e:	1b33      	subs	r3, r6, r4
 800c240:	3b15      	subs	r3, #21
 800c242:	f023 0303 	bic.w	r3, r3, #3
 800c246:	3304      	adds	r3, #4
 800c248:	3415      	adds	r4, #21
 800c24a:	42a6      	cmp	r6, r4
 800c24c:	bf38      	it	cc
 800c24e:	2304      	movcc	r3, #4
 800c250:	441d      	add	r5, r3
 800c252:	4473      	add	r3, lr
 800c254:	469e      	mov	lr, r3
 800c256:	462e      	mov	r6, r5
 800c258:	4566      	cmp	r6, ip
 800c25a:	d30e      	bcc.n	800c27a <__mdiff+0xea>
 800c25c:	f10c 0203 	add.w	r2, ip, #3
 800c260:	1b52      	subs	r2, r2, r5
 800c262:	f022 0203 	bic.w	r2, r2, #3
 800c266:	3d03      	subs	r5, #3
 800c268:	45ac      	cmp	ip, r5
 800c26a:	bf38      	it	cc
 800c26c:	2200      	movcc	r2, #0
 800c26e:	4413      	add	r3, r2
 800c270:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c274:	b17a      	cbz	r2, 800c296 <__mdiff+0x106>
 800c276:	6107      	str	r7, [r0, #16]
 800c278:	e7a4      	b.n	800c1c4 <__mdiff+0x34>
 800c27a:	f856 8b04 	ldr.w	r8, [r6], #4
 800c27e:	fa11 f288 	uxtah	r2, r1, r8
 800c282:	1414      	asrs	r4, r2, #16
 800c284:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c288:	b292      	uxth	r2, r2
 800c28a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c28e:	f84e 2b04 	str.w	r2, [lr], #4
 800c292:	1421      	asrs	r1, r4, #16
 800c294:	e7e0      	b.n	800c258 <__mdiff+0xc8>
 800c296:	3f01      	subs	r7, #1
 800c298:	e7ea      	b.n	800c270 <__mdiff+0xe0>
 800c29a:	bf00      	nop
 800c29c:	0800d5ac 	.word	0x0800d5ac
 800c2a0:	0800d5ce 	.word	0x0800d5ce

0800c2a4 <__d2b>:
 800c2a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c2a8:	460f      	mov	r7, r1
 800c2aa:	2101      	movs	r1, #1
 800c2ac:	ec59 8b10 	vmov	r8, r9, d0
 800c2b0:	4616      	mov	r6, r2
 800c2b2:	f7ff fcd5 	bl	800bc60 <_Balloc>
 800c2b6:	4604      	mov	r4, r0
 800c2b8:	b930      	cbnz	r0, 800c2c8 <__d2b+0x24>
 800c2ba:	4602      	mov	r2, r0
 800c2bc:	4b24      	ldr	r3, [pc, #144]	; (800c350 <__d2b+0xac>)
 800c2be:	4825      	ldr	r0, [pc, #148]	; (800c354 <__d2b+0xb0>)
 800c2c0:	f240 310f 	movw	r1, #783	; 0x30f
 800c2c4:	f000 f9fa 	bl	800c6bc <__assert_func>
 800c2c8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c2cc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c2d0:	bb2d      	cbnz	r5, 800c31e <__d2b+0x7a>
 800c2d2:	9301      	str	r3, [sp, #4]
 800c2d4:	f1b8 0300 	subs.w	r3, r8, #0
 800c2d8:	d026      	beq.n	800c328 <__d2b+0x84>
 800c2da:	4668      	mov	r0, sp
 800c2dc:	9300      	str	r3, [sp, #0]
 800c2de:	f7ff fd87 	bl	800bdf0 <__lo0bits>
 800c2e2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c2e6:	b1e8      	cbz	r0, 800c324 <__d2b+0x80>
 800c2e8:	f1c0 0320 	rsb	r3, r0, #32
 800c2ec:	fa02 f303 	lsl.w	r3, r2, r3
 800c2f0:	430b      	orrs	r3, r1
 800c2f2:	40c2      	lsrs	r2, r0
 800c2f4:	6163      	str	r3, [r4, #20]
 800c2f6:	9201      	str	r2, [sp, #4]
 800c2f8:	9b01      	ldr	r3, [sp, #4]
 800c2fa:	61a3      	str	r3, [r4, #24]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	bf14      	ite	ne
 800c300:	2202      	movne	r2, #2
 800c302:	2201      	moveq	r2, #1
 800c304:	6122      	str	r2, [r4, #16]
 800c306:	b1bd      	cbz	r5, 800c338 <__d2b+0x94>
 800c308:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c30c:	4405      	add	r5, r0
 800c30e:	603d      	str	r5, [r7, #0]
 800c310:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c314:	6030      	str	r0, [r6, #0]
 800c316:	4620      	mov	r0, r4
 800c318:	b003      	add	sp, #12
 800c31a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c31e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c322:	e7d6      	b.n	800c2d2 <__d2b+0x2e>
 800c324:	6161      	str	r1, [r4, #20]
 800c326:	e7e7      	b.n	800c2f8 <__d2b+0x54>
 800c328:	a801      	add	r0, sp, #4
 800c32a:	f7ff fd61 	bl	800bdf0 <__lo0bits>
 800c32e:	9b01      	ldr	r3, [sp, #4]
 800c330:	6163      	str	r3, [r4, #20]
 800c332:	3020      	adds	r0, #32
 800c334:	2201      	movs	r2, #1
 800c336:	e7e5      	b.n	800c304 <__d2b+0x60>
 800c338:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c33c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c340:	6038      	str	r0, [r7, #0]
 800c342:	6918      	ldr	r0, [r3, #16]
 800c344:	f7ff fd34 	bl	800bdb0 <__hi0bits>
 800c348:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c34c:	e7e2      	b.n	800c314 <__d2b+0x70>
 800c34e:	bf00      	nop
 800c350:	0800d5ac 	.word	0x0800d5ac
 800c354:	0800d5ce 	.word	0x0800d5ce

0800c358 <__sread>:
 800c358:	b510      	push	{r4, lr}
 800c35a:	460c      	mov	r4, r1
 800c35c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c360:	f000 f978 	bl	800c654 <_read_r>
 800c364:	2800      	cmp	r0, #0
 800c366:	bfab      	itete	ge
 800c368:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c36a:	89a3      	ldrhlt	r3, [r4, #12]
 800c36c:	181b      	addge	r3, r3, r0
 800c36e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c372:	bfac      	ite	ge
 800c374:	6563      	strge	r3, [r4, #84]	; 0x54
 800c376:	81a3      	strhlt	r3, [r4, #12]
 800c378:	bd10      	pop	{r4, pc}

0800c37a <__swrite>:
 800c37a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c37e:	461f      	mov	r7, r3
 800c380:	898b      	ldrh	r3, [r1, #12]
 800c382:	05db      	lsls	r3, r3, #23
 800c384:	4605      	mov	r5, r0
 800c386:	460c      	mov	r4, r1
 800c388:	4616      	mov	r6, r2
 800c38a:	d505      	bpl.n	800c398 <__swrite+0x1e>
 800c38c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c390:	2302      	movs	r3, #2
 800c392:	2200      	movs	r2, #0
 800c394:	f000 f94c 	bl	800c630 <_lseek_r>
 800c398:	89a3      	ldrh	r3, [r4, #12]
 800c39a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c39e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c3a2:	81a3      	strh	r3, [r4, #12]
 800c3a4:	4632      	mov	r2, r6
 800c3a6:	463b      	mov	r3, r7
 800c3a8:	4628      	mov	r0, r5
 800c3aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c3ae:	f000 b973 	b.w	800c698 <_write_r>

0800c3b2 <__sseek>:
 800c3b2:	b510      	push	{r4, lr}
 800c3b4:	460c      	mov	r4, r1
 800c3b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3ba:	f000 f939 	bl	800c630 <_lseek_r>
 800c3be:	1c43      	adds	r3, r0, #1
 800c3c0:	89a3      	ldrh	r3, [r4, #12]
 800c3c2:	bf15      	itete	ne
 800c3c4:	6560      	strne	r0, [r4, #84]	; 0x54
 800c3c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c3ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c3ce:	81a3      	strheq	r3, [r4, #12]
 800c3d0:	bf18      	it	ne
 800c3d2:	81a3      	strhne	r3, [r4, #12]
 800c3d4:	bd10      	pop	{r4, pc}

0800c3d6 <__sclose>:
 800c3d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3da:	f000 b8f7 	b.w	800c5cc <_close_r>

0800c3de <__swbuf_r>:
 800c3de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3e0:	460e      	mov	r6, r1
 800c3e2:	4614      	mov	r4, r2
 800c3e4:	4605      	mov	r5, r0
 800c3e6:	b118      	cbz	r0, 800c3f0 <__swbuf_r+0x12>
 800c3e8:	6a03      	ldr	r3, [r0, #32]
 800c3ea:	b90b      	cbnz	r3, 800c3f0 <__swbuf_r+0x12>
 800c3ec:	f7fe f988 	bl	800a700 <__sinit>
 800c3f0:	69a3      	ldr	r3, [r4, #24]
 800c3f2:	60a3      	str	r3, [r4, #8]
 800c3f4:	89a3      	ldrh	r3, [r4, #12]
 800c3f6:	071a      	lsls	r2, r3, #28
 800c3f8:	d525      	bpl.n	800c446 <__swbuf_r+0x68>
 800c3fa:	6923      	ldr	r3, [r4, #16]
 800c3fc:	b31b      	cbz	r3, 800c446 <__swbuf_r+0x68>
 800c3fe:	6823      	ldr	r3, [r4, #0]
 800c400:	6922      	ldr	r2, [r4, #16]
 800c402:	1a98      	subs	r0, r3, r2
 800c404:	6963      	ldr	r3, [r4, #20]
 800c406:	b2f6      	uxtb	r6, r6
 800c408:	4283      	cmp	r3, r0
 800c40a:	4637      	mov	r7, r6
 800c40c:	dc04      	bgt.n	800c418 <__swbuf_r+0x3a>
 800c40e:	4621      	mov	r1, r4
 800c410:	4628      	mov	r0, r5
 800c412:	f7ff fbf1 	bl	800bbf8 <_fflush_r>
 800c416:	b9e0      	cbnz	r0, 800c452 <__swbuf_r+0x74>
 800c418:	68a3      	ldr	r3, [r4, #8]
 800c41a:	3b01      	subs	r3, #1
 800c41c:	60a3      	str	r3, [r4, #8]
 800c41e:	6823      	ldr	r3, [r4, #0]
 800c420:	1c5a      	adds	r2, r3, #1
 800c422:	6022      	str	r2, [r4, #0]
 800c424:	701e      	strb	r6, [r3, #0]
 800c426:	6962      	ldr	r2, [r4, #20]
 800c428:	1c43      	adds	r3, r0, #1
 800c42a:	429a      	cmp	r2, r3
 800c42c:	d004      	beq.n	800c438 <__swbuf_r+0x5a>
 800c42e:	89a3      	ldrh	r3, [r4, #12]
 800c430:	07db      	lsls	r3, r3, #31
 800c432:	d506      	bpl.n	800c442 <__swbuf_r+0x64>
 800c434:	2e0a      	cmp	r6, #10
 800c436:	d104      	bne.n	800c442 <__swbuf_r+0x64>
 800c438:	4621      	mov	r1, r4
 800c43a:	4628      	mov	r0, r5
 800c43c:	f7ff fbdc 	bl	800bbf8 <_fflush_r>
 800c440:	b938      	cbnz	r0, 800c452 <__swbuf_r+0x74>
 800c442:	4638      	mov	r0, r7
 800c444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c446:	4621      	mov	r1, r4
 800c448:	4628      	mov	r0, r5
 800c44a:	f000 f805 	bl	800c458 <__swsetup_r>
 800c44e:	2800      	cmp	r0, #0
 800c450:	d0d5      	beq.n	800c3fe <__swbuf_r+0x20>
 800c452:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c456:	e7f4      	b.n	800c442 <__swbuf_r+0x64>

0800c458 <__swsetup_r>:
 800c458:	b538      	push	{r3, r4, r5, lr}
 800c45a:	4b2a      	ldr	r3, [pc, #168]	; (800c504 <__swsetup_r+0xac>)
 800c45c:	4605      	mov	r5, r0
 800c45e:	6818      	ldr	r0, [r3, #0]
 800c460:	460c      	mov	r4, r1
 800c462:	b118      	cbz	r0, 800c46c <__swsetup_r+0x14>
 800c464:	6a03      	ldr	r3, [r0, #32]
 800c466:	b90b      	cbnz	r3, 800c46c <__swsetup_r+0x14>
 800c468:	f7fe f94a 	bl	800a700 <__sinit>
 800c46c:	89a3      	ldrh	r3, [r4, #12]
 800c46e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c472:	0718      	lsls	r0, r3, #28
 800c474:	d422      	bmi.n	800c4bc <__swsetup_r+0x64>
 800c476:	06d9      	lsls	r1, r3, #27
 800c478:	d407      	bmi.n	800c48a <__swsetup_r+0x32>
 800c47a:	2309      	movs	r3, #9
 800c47c:	602b      	str	r3, [r5, #0]
 800c47e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c482:	81a3      	strh	r3, [r4, #12]
 800c484:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c488:	e034      	b.n	800c4f4 <__swsetup_r+0x9c>
 800c48a:	0758      	lsls	r0, r3, #29
 800c48c:	d512      	bpl.n	800c4b4 <__swsetup_r+0x5c>
 800c48e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c490:	b141      	cbz	r1, 800c4a4 <__swsetup_r+0x4c>
 800c492:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c496:	4299      	cmp	r1, r3
 800c498:	d002      	beq.n	800c4a0 <__swsetup_r+0x48>
 800c49a:	4628      	mov	r0, r5
 800c49c:	f7ff f8ee 	bl	800b67c <_free_r>
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	6363      	str	r3, [r4, #52]	; 0x34
 800c4a4:	89a3      	ldrh	r3, [r4, #12]
 800c4a6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c4aa:	81a3      	strh	r3, [r4, #12]
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	6063      	str	r3, [r4, #4]
 800c4b0:	6923      	ldr	r3, [r4, #16]
 800c4b2:	6023      	str	r3, [r4, #0]
 800c4b4:	89a3      	ldrh	r3, [r4, #12]
 800c4b6:	f043 0308 	orr.w	r3, r3, #8
 800c4ba:	81a3      	strh	r3, [r4, #12]
 800c4bc:	6923      	ldr	r3, [r4, #16]
 800c4be:	b94b      	cbnz	r3, 800c4d4 <__swsetup_r+0x7c>
 800c4c0:	89a3      	ldrh	r3, [r4, #12]
 800c4c2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c4c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c4ca:	d003      	beq.n	800c4d4 <__swsetup_r+0x7c>
 800c4cc:	4621      	mov	r1, r4
 800c4ce:	4628      	mov	r0, r5
 800c4d0:	f000 f840 	bl	800c554 <__smakebuf_r>
 800c4d4:	89a0      	ldrh	r0, [r4, #12]
 800c4d6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c4da:	f010 0301 	ands.w	r3, r0, #1
 800c4de:	d00a      	beq.n	800c4f6 <__swsetup_r+0x9e>
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	60a3      	str	r3, [r4, #8]
 800c4e4:	6963      	ldr	r3, [r4, #20]
 800c4e6:	425b      	negs	r3, r3
 800c4e8:	61a3      	str	r3, [r4, #24]
 800c4ea:	6923      	ldr	r3, [r4, #16]
 800c4ec:	b943      	cbnz	r3, 800c500 <__swsetup_r+0xa8>
 800c4ee:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c4f2:	d1c4      	bne.n	800c47e <__swsetup_r+0x26>
 800c4f4:	bd38      	pop	{r3, r4, r5, pc}
 800c4f6:	0781      	lsls	r1, r0, #30
 800c4f8:	bf58      	it	pl
 800c4fa:	6963      	ldrpl	r3, [r4, #20]
 800c4fc:	60a3      	str	r3, [r4, #8]
 800c4fe:	e7f4      	b.n	800c4ea <__swsetup_r+0x92>
 800c500:	2000      	movs	r0, #0
 800c502:	e7f7      	b.n	800c4f4 <__swsetup_r+0x9c>
 800c504:	20000068 	.word	0x20000068

0800c508 <__swhatbuf_r>:
 800c508:	b570      	push	{r4, r5, r6, lr}
 800c50a:	460c      	mov	r4, r1
 800c50c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c510:	2900      	cmp	r1, #0
 800c512:	b096      	sub	sp, #88	; 0x58
 800c514:	4615      	mov	r5, r2
 800c516:	461e      	mov	r6, r3
 800c518:	da0d      	bge.n	800c536 <__swhatbuf_r+0x2e>
 800c51a:	89a3      	ldrh	r3, [r4, #12]
 800c51c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c520:	f04f 0100 	mov.w	r1, #0
 800c524:	bf0c      	ite	eq
 800c526:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c52a:	2340      	movne	r3, #64	; 0x40
 800c52c:	2000      	movs	r0, #0
 800c52e:	6031      	str	r1, [r6, #0]
 800c530:	602b      	str	r3, [r5, #0]
 800c532:	b016      	add	sp, #88	; 0x58
 800c534:	bd70      	pop	{r4, r5, r6, pc}
 800c536:	466a      	mov	r2, sp
 800c538:	f000 f858 	bl	800c5ec <_fstat_r>
 800c53c:	2800      	cmp	r0, #0
 800c53e:	dbec      	blt.n	800c51a <__swhatbuf_r+0x12>
 800c540:	9901      	ldr	r1, [sp, #4]
 800c542:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c546:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c54a:	4259      	negs	r1, r3
 800c54c:	4159      	adcs	r1, r3
 800c54e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c552:	e7eb      	b.n	800c52c <__swhatbuf_r+0x24>

0800c554 <__smakebuf_r>:
 800c554:	898b      	ldrh	r3, [r1, #12]
 800c556:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c558:	079d      	lsls	r5, r3, #30
 800c55a:	4606      	mov	r6, r0
 800c55c:	460c      	mov	r4, r1
 800c55e:	d507      	bpl.n	800c570 <__smakebuf_r+0x1c>
 800c560:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c564:	6023      	str	r3, [r4, #0]
 800c566:	6123      	str	r3, [r4, #16]
 800c568:	2301      	movs	r3, #1
 800c56a:	6163      	str	r3, [r4, #20]
 800c56c:	b002      	add	sp, #8
 800c56e:	bd70      	pop	{r4, r5, r6, pc}
 800c570:	ab01      	add	r3, sp, #4
 800c572:	466a      	mov	r2, sp
 800c574:	f7ff ffc8 	bl	800c508 <__swhatbuf_r>
 800c578:	9900      	ldr	r1, [sp, #0]
 800c57a:	4605      	mov	r5, r0
 800c57c:	4630      	mov	r0, r6
 800c57e:	f7ff fa35 	bl	800b9ec <_malloc_r>
 800c582:	b948      	cbnz	r0, 800c598 <__smakebuf_r+0x44>
 800c584:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c588:	059a      	lsls	r2, r3, #22
 800c58a:	d4ef      	bmi.n	800c56c <__smakebuf_r+0x18>
 800c58c:	f023 0303 	bic.w	r3, r3, #3
 800c590:	f043 0302 	orr.w	r3, r3, #2
 800c594:	81a3      	strh	r3, [r4, #12]
 800c596:	e7e3      	b.n	800c560 <__smakebuf_r+0xc>
 800c598:	89a3      	ldrh	r3, [r4, #12]
 800c59a:	6020      	str	r0, [r4, #0]
 800c59c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c5a0:	81a3      	strh	r3, [r4, #12]
 800c5a2:	9b00      	ldr	r3, [sp, #0]
 800c5a4:	6163      	str	r3, [r4, #20]
 800c5a6:	9b01      	ldr	r3, [sp, #4]
 800c5a8:	6120      	str	r0, [r4, #16]
 800c5aa:	b15b      	cbz	r3, 800c5c4 <__smakebuf_r+0x70>
 800c5ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c5b0:	4630      	mov	r0, r6
 800c5b2:	f000 f82d 	bl	800c610 <_isatty_r>
 800c5b6:	b128      	cbz	r0, 800c5c4 <__smakebuf_r+0x70>
 800c5b8:	89a3      	ldrh	r3, [r4, #12]
 800c5ba:	f023 0303 	bic.w	r3, r3, #3
 800c5be:	f043 0301 	orr.w	r3, r3, #1
 800c5c2:	81a3      	strh	r3, [r4, #12]
 800c5c4:	89a3      	ldrh	r3, [r4, #12]
 800c5c6:	431d      	orrs	r5, r3
 800c5c8:	81a5      	strh	r5, [r4, #12]
 800c5ca:	e7cf      	b.n	800c56c <__smakebuf_r+0x18>

0800c5cc <_close_r>:
 800c5cc:	b538      	push	{r3, r4, r5, lr}
 800c5ce:	4d06      	ldr	r5, [pc, #24]	; (800c5e8 <_close_r+0x1c>)
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	4604      	mov	r4, r0
 800c5d4:	4608      	mov	r0, r1
 800c5d6:	602b      	str	r3, [r5, #0]
 800c5d8:	f7f5 ff03 	bl	80023e2 <_close>
 800c5dc:	1c43      	adds	r3, r0, #1
 800c5de:	d102      	bne.n	800c5e6 <_close_r+0x1a>
 800c5e0:	682b      	ldr	r3, [r5, #0]
 800c5e2:	b103      	cbz	r3, 800c5e6 <_close_r+0x1a>
 800c5e4:	6023      	str	r3, [r4, #0]
 800c5e6:	bd38      	pop	{r3, r4, r5, pc}
 800c5e8:	2000275c 	.word	0x2000275c

0800c5ec <_fstat_r>:
 800c5ec:	b538      	push	{r3, r4, r5, lr}
 800c5ee:	4d07      	ldr	r5, [pc, #28]	; (800c60c <_fstat_r+0x20>)
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	4604      	mov	r4, r0
 800c5f4:	4608      	mov	r0, r1
 800c5f6:	4611      	mov	r1, r2
 800c5f8:	602b      	str	r3, [r5, #0]
 800c5fa:	f7f5 fefe 	bl	80023fa <_fstat>
 800c5fe:	1c43      	adds	r3, r0, #1
 800c600:	d102      	bne.n	800c608 <_fstat_r+0x1c>
 800c602:	682b      	ldr	r3, [r5, #0]
 800c604:	b103      	cbz	r3, 800c608 <_fstat_r+0x1c>
 800c606:	6023      	str	r3, [r4, #0]
 800c608:	bd38      	pop	{r3, r4, r5, pc}
 800c60a:	bf00      	nop
 800c60c:	2000275c 	.word	0x2000275c

0800c610 <_isatty_r>:
 800c610:	b538      	push	{r3, r4, r5, lr}
 800c612:	4d06      	ldr	r5, [pc, #24]	; (800c62c <_isatty_r+0x1c>)
 800c614:	2300      	movs	r3, #0
 800c616:	4604      	mov	r4, r0
 800c618:	4608      	mov	r0, r1
 800c61a:	602b      	str	r3, [r5, #0]
 800c61c:	f7f5 fefd 	bl	800241a <_isatty>
 800c620:	1c43      	adds	r3, r0, #1
 800c622:	d102      	bne.n	800c62a <_isatty_r+0x1a>
 800c624:	682b      	ldr	r3, [r5, #0]
 800c626:	b103      	cbz	r3, 800c62a <_isatty_r+0x1a>
 800c628:	6023      	str	r3, [r4, #0]
 800c62a:	bd38      	pop	{r3, r4, r5, pc}
 800c62c:	2000275c 	.word	0x2000275c

0800c630 <_lseek_r>:
 800c630:	b538      	push	{r3, r4, r5, lr}
 800c632:	4d07      	ldr	r5, [pc, #28]	; (800c650 <_lseek_r+0x20>)
 800c634:	4604      	mov	r4, r0
 800c636:	4608      	mov	r0, r1
 800c638:	4611      	mov	r1, r2
 800c63a:	2200      	movs	r2, #0
 800c63c:	602a      	str	r2, [r5, #0]
 800c63e:	461a      	mov	r2, r3
 800c640:	f7f5 fef6 	bl	8002430 <_lseek>
 800c644:	1c43      	adds	r3, r0, #1
 800c646:	d102      	bne.n	800c64e <_lseek_r+0x1e>
 800c648:	682b      	ldr	r3, [r5, #0]
 800c64a:	b103      	cbz	r3, 800c64e <_lseek_r+0x1e>
 800c64c:	6023      	str	r3, [r4, #0]
 800c64e:	bd38      	pop	{r3, r4, r5, pc}
 800c650:	2000275c 	.word	0x2000275c

0800c654 <_read_r>:
 800c654:	b538      	push	{r3, r4, r5, lr}
 800c656:	4d07      	ldr	r5, [pc, #28]	; (800c674 <_read_r+0x20>)
 800c658:	4604      	mov	r4, r0
 800c65a:	4608      	mov	r0, r1
 800c65c:	4611      	mov	r1, r2
 800c65e:	2200      	movs	r2, #0
 800c660:	602a      	str	r2, [r5, #0]
 800c662:	461a      	mov	r2, r3
 800c664:	f7f5 fe84 	bl	8002370 <_read>
 800c668:	1c43      	adds	r3, r0, #1
 800c66a:	d102      	bne.n	800c672 <_read_r+0x1e>
 800c66c:	682b      	ldr	r3, [r5, #0]
 800c66e:	b103      	cbz	r3, 800c672 <_read_r+0x1e>
 800c670:	6023      	str	r3, [r4, #0]
 800c672:	bd38      	pop	{r3, r4, r5, pc}
 800c674:	2000275c 	.word	0x2000275c

0800c678 <_sbrk_r>:
 800c678:	b538      	push	{r3, r4, r5, lr}
 800c67a:	4d06      	ldr	r5, [pc, #24]	; (800c694 <_sbrk_r+0x1c>)
 800c67c:	2300      	movs	r3, #0
 800c67e:	4604      	mov	r4, r0
 800c680:	4608      	mov	r0, r1
 800c682:	602b      	str	r3, [r5, #0]
 800c684:	f7f5 fee2 	bl	800244c <_sbrk>
 800c688:	1c43      	adds	r3, r0, #1
 800c68a:	d102      	bne.n	800c692 <_sbrk_r+0x1a>
 800c68c:	682b      	ldr	r3, [r5, #0]
 800c68e:	b103      	cbz	r3, 800c692 <_sbrk_r+0x1a>
 800c690:	6023      	str	r3, [r4, #0]
 800c692:	bd38      	pop	{r3, r4, r5, pc}
 800c694:	2000275c 	.word	0x2000275c

0800c698 <_write_r>:
 800c698:	b538      	push	{r3, r4, r5, lr}
 800c69a:	4d07      	ldr	r5, [pc, #28]	; (800c6b8 <_write_r+0x20>)
 800c69c:	4604      	mov	r4, r0
 800c69e:	4608      	mov	r0, r1
 800c6a0:	4611      	mov	r1, r2
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	602a      	str	r2, [r5, #0]
 800c6a6:	461a      	mov	r2, r3
 800c6a8:	f7f5 fe7f 	bl	80023aa <_write>
 800c6ac:	1c43      	adds	r3, r0, #1
 800c6ae:	d102      	bne.n	800c6b6 <_write_r+0x1e>
 800c6b0:	682b      	ldr	r3, [r5, #0]
 800c6b2:	b103      	cbz	r3, 800c6b6 <_write_r+0x1e>
 800c6b4:	6023      	str	r3, [r4, #0]
 800c6b6:	bd38      	pop	{r3, r4, r5, pc}
 800c6b8:	2000275c 	.word	0x2000275c

0800c6bc <__assert_func>:
 800c6bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c6be:	4614      	mov	r4, r2
 800c6c0:	461a      	mov	r2, r3
 800c6c2:	4b09      	ldr	r3, [pc, #36]	; (800c6e8 <__assert_func+0x2c>)
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	4605      	mov	r5, r0
 800c6c8:	68d8      	ldr	r0, [r3, #12]
 800c6ca:	b14c      	cbz	r4, 800c6e0 <__assert_func+0x24>
 800c6cc:	4b07      	ldr	r3, [pc, #28]	; (800c6ec <__assert_func+0x30>)
 800c6ce:	9100      	str	r1, [sp, #0]
 800c6d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c6d4:	4906      	ldr	r1, [pc, #24]	; (800c6f0 <__assert_func+0x34>)
 800c6d6:	462b      	mov	r3, r5
 800c6d8:	f000 f836 	bl	800c748 <fiprintf>
 800c6dc:	f000 f853 	bl	800c786 <abort>
 800c6e0:	4b04      	ldr	r3, [pc, #16]	; (800c6f4 <__assert_func+0x38>)
 800c6e2:	461c      	mov	r4, r3
 800c6e4:	e7f3      	b.n	800c6ce <__assert_func+0x12>
 800c6e6:	bf00      	nop
 800c6e8:	20000068 	.word	0x20000068
 800c6ec:	0800d82f 	.word	0x0800d82f
 800c6f0:	0800d83c 	.word	0x0800d83c
 800c6f4:	0800d86a 	.word	0x0800d86a

0800c6f8 <_calloc_r>:
 800c6f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c6fa:	fba1 2402 	umull	r2, r4, r1, r2
 800c6fe:	b94c      	cbnz	r4, 800c714 <_calloc_r+0x1c>
 800c700:	4611      	mov	r1, r2
 800c702:	9201      	str	r2, [sp, #4]
 800c704:	f7ff f972 	bl	800b9ec <_malloc_r>
 800c708:	9a01      	ldr	r2, [sp, #4]
 800c70a:	4605      	mov	r5, r0
 800c70c:	b930      	cbnz	r0, 800c71c <_calloc_r+0x24>
 800c70e:	4628      	mov	r0, r5
 800c710:	b003      	add	sp, #12
 800c712:	bd30      	pop	{r4, r5, pc}
 800c714:	220c      	movs	r2, #12
 800c716:	6002      	str	r2, [r0, #0]
 800c718:	2500      	movs	r5, #0
 800c71a:	e7f8      	b.n	800c70e <_calloc_r+0x16>
 800c71c:	4621      	mov	r1, r4
 800c71e:	f7fe f893 	bl	800a848 <memset>
 800c722:	e7f4      	b.n	800c70e <_calloc_r+0x16>

0800c724 <__ascii_mbtowc>:
 800c724:	b082      	sub	sp, #8
 800c726:	b901      	cbnz	r1, 800c72a <__ascii_mbtowc+0x6>
 800c728:	a901      	add	r1, sp, #4
 800c72a:	b142      	cbz	r2, 800c73e <__ascii_mbtowc+0x1a>
 800c72c:	b14b      	cbz	r3, 800c742 <__ascii_mbtowc+0x1e>
 800c72e:	7813      	ldrb	r3, [r2, #0]
 800c730:	600b      	str	r3, [r1, #0]
 800c732:	7812      	ldrb	r2, [r2, #0]
 800c734:	1e10      	subs	r0, r2, #0
 800c736:	bf18      	it	ne
 800c738:	2001      	movne	r0, #1
 800c73a:	b002      	add	sp, #8
 800c73c:	4770      	bx	lr
 800c73e:	4610      	mov	r0, r2
 800c740:	e7fb      	b.n	800c73a <__ascii_mbtowc+0x16>
 800c742:	f06f 0001 	mvn.w	r0, #1
 800c746:	e7f8      	b.n	800c73a <__ascii_mbtowc+0x16>

0800c748 <fiprintf>:
 800c748:	b40e      	push	{r1, r2, r3}
 800c74a:	b503      	push	{r0, r1, lr}
 800c74c:	4601      	mov	r1, r0
 800c74e:	ab03      	add	r3, sp, #12
 800c750:	4805      	ldr	r0, [pc, #20]	; (800c768 <fiprintf+0x20>)
 800c752:	f853 2b04 	ldr.w	r2, [r3], #4
 800c756:	6800      	ldr	r0, [r0, #0]
 800c758:	9301      	str	r3, [sp, #4]
 800c75a:	f7ff f805 	bl	800b768 <_vfiprintf_r>
 800c75e:	b002      	add	sp, #8
 800c760:	f85d eb04 	ldr.w	lr, [sp], #4
 800c764:	b003      	add	sp, #12
 800c766:	4770      	bx	lr
 800c768:	20000068 	.word	0x20000068

0800c76c <__ascii_wctomb>:
 800c76c:	b149      	cbz	r1, 800c782 <__ascii_wctomb+0x16>
 800c76e:	2aff      	cmp	r2, #255	; 0xff
 800c770:	bf85      	ittet	hi
 800c772:	238a      	movhi	r3, #138	; 0x8a
 800c774:	6003      	strhi	r3, [r0, #0]
 800c776:	700a      	strbls	r2, [r1, #0]
 800c778:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800c77c:	bf98      	it	ls
 800c77e:	2001      	movls	r0, #1
 800c780:	4770      	bx	lr
 800c782:	4608      	mov	r0, r1
 800c784:	4770      	bx	lr

0800c786 <abort>:
 800c786:	b508      	push	{r3, lr}
 800c788:	2006      	movs	r0, #6
 800c78a:	f000 f82b 	bl	800c7e4 <raise>
 800c78e:	2001      	movs	r0, #1
 800c790:	f7f5 fde4 	bl	800235c <_exit>

0800c794 <_raise_r>:
 800c794:	291f      	cmp	r1, #31
 800c796:	b538      	push	{r3, r4, r5, lr}
 800c798:	4604      	mov	r4, r0
 800c79a:	460d      	mov	r5, r1
 800c79c:	d904      	bls.n	800c7a8 <_raise_r+0x14>
 800c79e:	2316      	movs	r3, #22
 800c7a0:	6003      	str	r3, [r0, #0]
 800c7a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c7a6:	bd38      	pop	{r3, r4, r5, pc}
 800c7a8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c7aa:	b112      	cbz	r2, 800c7b2 <_raise_r+0x1e>
 800c7ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c7b0:	b94b      	cbnz	r3, 800c7c6 <_raise_r+0x32>
 800c7b2:	4620      	mov	r0, r4
 800c7b4:	f000 f830 	bl	800c818 <_getpid_r>
 800c7b8:	462a      	mov	r2, r5
 800c7ba:	4601      	mov	r1, r0
 800c7bc:	4620      	mov	r0, r4
 800c7be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c7c2:	f000 b817 	b.w	800c7f4 <_kill_r>
 800c7c6:	2b01      	cmp	r3, #1
 800c7c8:	d00a      	beq.n	800c7e0 <_raise_r+0x4c>
 800c7ca:	1c59      	adds	r1, r3, #1
 800c7cc:	d103      	bne.n	800c7d6 <_raise_r+0x42>
 800c7ce:	2316      	movs	r3, #22
 800c7d0:	6003      	str	r3, [r0, #0]
 800c7d2:	2001      	movs	r0, #1
 800c7d4:	e7e7      	b.n	800c7a6 <_raise_r+0x12>
 800c7d6:	2400      	movs	r4, #0
 800c7d8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c7dc:	4628      	mov	r0, r5
 800c7de:	4798      	blx	r3
 800c7e0:	2000      	movs	r0, #0
 800c7e2:	e7e0      	b.n	800c7a6 <_raise_r+0x12>

0800c7e4 <raise>:
 800c7e4:	4b02      	ldr	r3, [pc, #8]	; (800c7f0 <raise+0xc>)
 800c7e6:	4601      	mov	r1, r0
 800c7e8:	6818      	ldr	r0, [r3, #0]
 800c7ea:	f7ff bfd3 	b.w	800c794 <_raise_r>
 800c7ee:	bf00      	nop
 800c7f0:	20000068 	.word	0x20000068

0800c7f4 <_kill_r>:
 800c7f4:	b538      	push	{r3, r4, r5, lr}
 800c7f6:	4d07      	ldr	r5, [pc, #28]	; (800c814 <_kill_r+0x20>)
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	4604      	mov	r4, r0
 800c7fc:	4608      	mov	r0, r1
 800c7fe:	4611      	mov	r1, r2
 800c800:	602b      	str	r3, [r5, #0]
 800c802:	f7f5 fd9b 	bl	800233c <_kill>
 800c806:	1c43      	adds	r3, r0, #1
 800c808:	d102      	bne.n	800c810 <_kill_r+0x1c>
 800c80a:	682b      	ldr	r3, [r5, #0]
 800c80c:	b103      	cbz	r3, 800c810 <_kill_r+0x1c>
 800c80e:	6023      	str	r3, [r4, #0]
 800c810:	bd38      	pop	{r3, r4, r5, pc}
 800c812:	bf00      	nop
 800c814:	2000275c 	.word	0x2000275c

0800c818 <_getpid_r>:
 800c818:	f7f5 bd88 	b.w	800232c <_getpid>

0800c81c <atan2>:
 800c81c:	f000 b830 	b.w	800c880 <__ieee754_atan2>

0800c820 <fmod>:
 800c820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c822:	ed2d 8b02 	vpush	{d8}
 800c826:	ec57 6b10 	vmov	r6, r7, d0
 800c82a:	ec55 4b11 	vmov	r4, r5, d1
 800c82e:	f000 fb9f 	bl	800cf70 <__ieee754_fmod>
 800c832:	4622      	mov	r2, r4
 800c834:	462b      	mov	r3, r5
 800c836:	4630      	mov	r0, r6
 800c838:	4639      	mov	r1, r7
 800c83a:	eeb0 8a40 	vmov.f32	s16, s0
 800c83e:	eef0 8a60 	vmov.f32	s17, s1
 800c842:	f7f4 f973 	bl	8000b2c <__aeabi_dcmpun>
 800c846:	b990      	cbnz	r0, 800c86e <fmod+0x4e>
 800c848:	2200      	movs	r2, #0
 800c84a:	2300      	movs	r3, #0
 800c84c:	4620      	mov	r0, r4
 800c84e:	4629      	mov	r1, r5
 800c850:	f7f4 f93a 	bl	8000ac8 <__aeabi_dcmpeq>
 800c854:	b158      	cbz	r0, 800c86e <fmod+0x4e>
 800c856:	f7fe f859 	bl	800a90c <__errno>
 800c85a:	2321      	movs	r3, #33	; 0x21
 800c85c:	6003      	str	r3, [r0, #0]
 800c85e:	2200      	movs	r2, #0
 800c860:	2300      	movs	r3, #0
 800c862:	4610      	mov	r0, r2
 800c864:	4619      	mov	r1, r3
 800c866:	f7f3 fff1 	bl	800084c <__aeabi_ddiv>
 800c86a:	ec41 0b18 	vmov	d8, r0, r1
 800c86e:	eeb0 0a48 	vmov.f32	s0, s16
 800c872:	eef0 0a68 	vmov.f32	s1, s17
 800c876:	ecbd 8b02 	vpop	{d8}
 800c87a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c87c:	0000      	movs	r0, r0
	...

0800c880 <__ieee754_atan2>:
 800c880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c884:	ec57 6b11 	vmov	r6, r7, d1
 800c888:	4273      	negs	r3, r6
 800c88a:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800ca08 <__ieee754_atan2+0x188>
 800c88e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800c892:	4333      	orrs	r3, r6
 800c894:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800c898:	4543      	cmp	r3, r8
 800c89a:	ec51 0b10 	vmov	r0, r1, d0
 800c89e:	ee11 5a10 	vmov	r5, s2
 800c8a2:	d80a      	bhi.n	800c8ba <__ieee754_atan2+0x3a>
 800c8a4:	4244      	negs	r4, r0
 800c8a6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c8aa:	4304      	orrs	r4, r0
 800c8ac:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800c8b0:	4544      	cmp	r4, r8
 800c8b2:	ee10 9a10 	vmov	r9, s0
 800c8b6:	468e      	mov	lr, r1
 800c8b8:	d907      	bls.n	800c8ca <__ieee754_atan2+0x4a>
 800c8ba:	4632      	mov	r2, r6
 800c8bc:	463b      	mov	r3, r7
 800c8be:	f7f3 fce5 	bl	800028c <__adddf3>
 800c8c2:	ec41 0b10 	vmov	d0, r0, r1
 800c8c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8ca:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800c8ce:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c8d2:	4334      	orrs	r4, r6
 800c8d4:	d103      	bne.n	800c8de <__ieee754_atan2+0x5e>
 800c8d6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c8da:	f000 b8c5 	b.w	800ca68 <atan>
 800c8de:	17bc      	asrs	r4, r7, #30
 800c8e0:	f004 0402 	and.w	r4, r4, #2
 800c8e4:	ea53 0909 	orrs.w	r9, r3, r9
 800c8e8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800c8ec:	d107      	bne.n	800c8fe <__ieee754_atan2+0x7e>
 800c8ee:	2c02      	cmp	r4, #2
 800c8f0:	d05f      	beq.n	800c9b2 <__ieee754_atan2+0x132>
 800c8f2:	2c03      	cmp	r4, #3
 800c8f4:	d1e5      	bne.n	800c8c2 <__ieee754_atan2+0x42>
 800c8f6:	a140      	add	r1, pc, #256	; (adr r1, 800c9f8 <__ieee754_atan2+0x178>)
 800c8f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c8fc:	e7e1      	b.n	800c8c2 <__ieee754_atan2+0x42>
 800c8fe:	4315      	orrs	r5, r2
 800c900:	d106      	bne.n	800c910 <__ieee754_atan2+0x90>
 800c902:	f1be 0f00 	cmp.w	lr, #0
 800c906:	da5f      	bge.n	800c9c8 <__ieee754_atan2+0x148>
 800c908:	a13d      	add	r1, pc, #244	; (adr r1, 800ca00 <__ieee754_atan2+0x180>)
 800c90a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c90e:	e7d8      	b.n	800c8c2 <__ieee754_atan2+0x42>
 800c910:	4542      	cmp	r2, r8
 800c912:	d10f      	bne.n	800c934 <__ieee754_atan2+0xb4>
 800c914:	4293      	cmp	r3, r2
 800c916:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800c91a:	d107      	bne.n	800c92c <__ieee754_atan2+0xac>
 800c91c:	2c02      	cmp	r4, #2
 800c91e:	d84c      	bhi.n	800c9ba <__ieee754_atan2+0x13a>
 800c920:	4b33      	ldr	r3, [pc, #204]	; (800c9f0 <__ieee754_atan2+0x170>)
 800c922:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c926:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c92a:	e7ca      	b.n	800c8c2 <__ieee754_atan2+0x42>
 800c92c:	2c02      	cmp	r4, #2
 800c92e:	d848      	bhi.n	800c9c2 <__ieee754_atan2+0x142>
 800c930:	4b30      	ldr	r3, [pc, #192]	; (800c9f4 <__ieee754_atan2+0x174>)
 800c932:	e7f6      	b.n	800c922 <__ieee754_atan2+0xa2>
 800c934:	4543      	cmp	r3, r8
 800c936:	d0e4      	beq.n	800c902 <__ieee754_atan2+0x82>
 800c938:	1a9b      	subs	r3, r3, r2
 800c93a:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800c93e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c942:	da1e      	bge.n	800c982 <__ieee754_atan2+0x102>
 800c944:	2f00      	cmp	r7, #0
 800c946:	da01      	bge.n	800c94c <__ieee754_atan2+0xcc>
 800c948:	323c      	adds	r2, #60	; 0x3c
 800c94a:	db1e      	blt.n	800c98a <__ieee754_atan2+0x10a>
 800c94c:	4632      	mov	r2, r6
 800c94e:	463b      	mov	r3, r7
 800c950:	f7f3 ff7c 	bl	800084c <__aeabi_ddiv>
 800c954:	ec41 0b10 	vmov	d0, r0, r1
 800c958:	f000 fa26 	bl	800cda8 <fabs>
 800c95c:	f000 f884 	bl	800ca68 <atan>
 800c960:	ec51 0b10 	vmov	r0, r1, d0
 800c964:	2c01      	cmp	r4, #1
 800c966:	d013      	beq.n	800c990 <__ieee754_atan2+0x110>
 800c968:	2c02      	cmp	r4, #2
 800c96a:	d015      	beq.n	800c998 <__ieee754_atan2+0x118>
 800c96c:	2c00      	cmp	r4, #0
 800c96e:	d0a8      	beq.n	800c8c2 <__ieee754_atan2+0x42>
 800c970:	a317      	add	r3, pc, #92	; (adr r3, 800c9d0 <__ieee754_atan2+0x150>)
 800c972:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c976:	f7f3 fc87 	bl	8000288 <__aeabi_dsub>
 800c97a:	a317      	add	r3, pc, #92	; (adr r3, 800c9d8 <__ieee754_atan2+0x158>)
 800c97c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c980:	e014      	b.n	800c9ac <__ieee754_atan2+0x12c>
 800c982:	a117      	add	r1, pc, #92	; (adr r1, 800c9e0 <__ieee754_atan2+0x160>)
 800c984:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c988:	e7ec      	b.n	800c964 <__ieee754_atan2+0xe4>
 800c98a:	2000      	movs	r0, #0
 800c98c:	2100      	movs	r1, #0
 800c98e:	e7e9      	b.n	800c964 <__ieee754_atan2+0xe4>
 800c990:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c994:	4619      	mov	r1, r3
 800c996:	e794      	b.n	800c8c2 <__ieee754_atan2+0x42>
 800c998:	a30d      	add	r3, pc, #52	; (adr r3, 800c9d0 <__ieee754_atan2+0x150>)
 800c99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c99e:	f7f3 fc73 	bl	8000288 <__aeabi_dsub>
 800c9a2:	4602      	mov	r2, r0
 800c9a4:	460b      	mov	r3, r1
 800c9a6:	a10c      	add	r1, pc, #48	; (adr r1, 800c9d8 <__ieee754_atan2+0x158>)
 800c9a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c9ac:	f7f3 fc6c 	bl	8000288 <__aeabi_dsub>
 800c9b0:	e787      	b.n	800c8c2 <__ieee754_atan2+0x42>
 800c9b2:	a109      	add	r1, pc, #36	; (adr r1, 800c9d8 <__ieee754_atan2+0x158>)
 800c9b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c9b8:	e783      	b.n	800c8c2 <__ieee754_atan2+0x42>
 800c9ba:	a10b      	add	r1, pc, #44	; (adr r1, 800c9e8 <__ieee754_atan2+0x168>)
 800c9bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c9c0:	e77f      	b.n	800c8c2 <__ieee754_atan2+0x42>
 800c9c2:	2000      	movs	r0, #0
 800c9c4:	2100      	movs	r1, #0
 800c9c6:	e77c      	b.n	800c8c2 <__ieee754_atan2+0x42>
 800c9c8:	a105      	add	r1, pc, #20	; (adr r1, 800c9e0 <__ieee754_atan2+0x160>)
 800c9ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c9ce:	e778      	b.n	800c8c2 <__ieee754_atan2+0x42>
 800c9d0:	33145c07 	.word	0x33145c07
 800c9d4:	3ca1a626 	.word	0x3ca1a626
 800c9d8:	54442d18 	.word	0x54442d18
 800c9dc:	400921fb 	.word	0x400921fb
 800c9e0:	54442d18 	.word	0x54442d18
 800c9e4:	3ff921fb 	.word	0x3ff921fb
 800c9e8:	54442d18 	.word	0x54442d18
 800c9ec:	3fe921fb 	.word	0x3fe921fb
 800c9f0:	0800d870 	.word	0x0800d870
 800c9f4:	0800d888 	.word	0x0800d888
 800c9f8:	54442d18 	.word	0x54442d18
 800c9fc:	c00921fb 	.word	0xc00921fb
 800ca00:	54442d18 	.word	0x54442d18
 800ca04:	bff921fb 	.word	0xbff921fb
 800ca08:	7ff00000 	.word	0x7ff00000

0800ca0c <sqrt>:
 800ca0c:	b538      	push	{r3, r4, r5, lr}
 800ca0e:	ed2d 8b02 	vpush	{d8}
 800ca12:	ec55 4b10 	vmov	r4, r5, d0
 800ca16:	f000 f9d1 	bl	800cdbc <__ieee754_sqrt>
 800ca1a:	4622      	mov	r2, r4
 800ca1c:	462b      	mov	r3, r5
 800ca1e:	4620      	mov	r0, r4
 800ca20:	4629      	mov	r1, r5
 800ca22:	eeb0 8a40 	vmov.f32	s16, s0
 800ca26:	eef0 8a60 	vmov.f32	s17, s1
 800ca2a:	f7f4 f87f 	bl	8000b2c <__aeabi_dcmpun>
 800ca2e:	b990      	cbnz	r0, 800ca56 <sqrt+0x4a>
 800ca30:	2200      	movs	r2, #0
 800ca32:	2300      	movs	r3, #0
 800ca34:	4620      	mov	r0, r4
 800ca36:	4629      	mov	r1, r5
 800ca38:	f7f4 f850 	bl	8000adc <__aeabi_dcmplt>
 800ca3c:	b158      	cbz	r0, 800ca56 <sqrt+0x4a>
 800ca3e:	f7fd ff65 	bl	800a90c <__errno>
 800ca42:	2321      	movs	r3, #33	; 0x21
 800ca44:	6003      	str	r3, [r0, #0]
 800ca46:	2200      	movs	r2, #0
 800ca48:	2300      	movs	r3, #0
 800ca4a:	4610      	mov	r0, r2
 800ca4c:	4619      	mov	r1, r3
 800ca4e:	f7f3 fefd 	bl	800084c <__aeabi_ddiv>
 800ca52:	ec41 0b18 	vmov	d8, r0, r1
 800ca56:	eeb0 0a48 	vmov.f32	s0, s16
 800ca5a:	eef0 0a68 	vmov.f32	s1, s17
 800ca5e:	ecbd 8b02 	vpop	{d8}
 800ca62:	bd38      	pop	{r3, r4, r5, pc}
 800ca64:	0000      	movs	r0, r0
	...

0800ca68 <atan>:
 800ca68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca6c:	ec55 4b10 	vmov	r4, r5, d0
 800ca70:	4bc3      	ldr	r3, [pc, #780]	; (800cd80 <atan+0x318>)
 800ca72:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ca76:	429e      	cmp	r6, r3
 800ca78:	46ab      	mov	fp, r5
 800ca7a:	dd18      	ble.n	800caae <atan+0x46>
 800ca7c:	4bc1      	ldr	r3, [pc, #772]	; (800cd84 <atan+0x31c>)
 800ca7e:	429e      	cmp	r6, r3
 800ca80:	dc01      	bgt.n	800ca86 <atan+0x1e>
 800ca82:	d109      	bne.n	800ca98 <atan+0x30>
 800ca84:	b144      	cbz	r4, 800ca98 <atan+0x30>
 800ca86:	4622      	mov	r2, r4
 800ca88:	462b      	mov	r3, r5
 800ca8a:	4620      	mov	r0, r4
 800ca8c:	4629      	mov	r1, r5
 800ca8e:	f7f3 fbfd 	bl	800028c <__adddf3>
 800ca92:	4604      	mov	r4, r0
 800ca94:	460d      	mov	r5, r1
 800ca96:	e006      	b.n	800caa6 <atan+0x3e>
 800ca98:	f1bb 0f00 	cmp.w	fp, #0
 800ca9c:	f300 8131 	bgt.w	800cd02 <atan+0x29a>
 800caa0:	a59b      	add	r5, pc, #620	; (adr r5, 800cd10 <atan+0x2a8>)
 800caa2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800caa6:	ec45 4b10 	vmov	d0, r4, r5
 800caaa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800caae:	4bb6      	ldr	r3, [pc, #728]	; (800cd88 <atan+0x320>)
 800cab0:	429e      	cmp	r6, r3
 800cab2:	dc14      	bgt.n	800cade <atan+0x76>
 800cab4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800cab8:	429e      	cmp	r6, r3
 800caba:	dc0d      	bgt.n	800cad8 <atan+0x70>
 800cabc:	a396      	add	r3, pc, #600	; (adr r3, 800cd18 <atan+0x2b0>)
 800cabe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cac2:	ee10 0a10 	vmov	r0, s0
 800cac6:	4629      	mov	r1, r5
 800cac8:	f7f3 fbe0 	bl	800028c <__adddf3>
 800cacc:	4baf      	ldr	r3, [pc, #700]	; (800cd8c <atan+0x324>)
 800cace:	2200      	movs	r2, #0
 800cad0:	f7f4 f822 	bl	8000b18 <__aeabi_dcmpgt>
 800cad4:	2800      	cmp	r0, #0
 800cad6:	d1e6      	bne.n	800caa6 <atan+0x3e>
 800cad8:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800cadc:	e02b      	b.n	800cb36 <atan+0xce>
 800cade:	f000 f963 	bl	800cda8 <fabs>
 800cae2:	4bab      	ldr	r3, [pc, #684]	; (800cd90 <atan+0x328>)
 800cae4:	429e      	cmp	r6, r3
 800cae6:	ec55 4b10 	vmov	r4, r5, d0
 800caea:	f300 80bf 	bgt.w	800cc6c <atan+0x204>
 800caee:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800caf2:	429e      	cmp	r6, r3
 800caf4:	f300 80a0 	bgt.w	800cc38 <atan+0x1d0>
 800caf8:	ee10 2a10 	vmov	r2, s0
 800cafc:	ee10 0a10 	vmov	r0, s0
 800cb00:	462b      	mov	r3, r5
 800cb02:	4629      	mov	r1, r5
 800cb04:	f7f3 fbc2 	bl	800028c <__adddf3>
 800cb08:	4ba0      	ldr	r3, [pc, #640]	; (800cd8c <atan+0x324>)
 800cb0a:	2200      	movs	r2, #0
 800cb0c:	f7f3 fbbc 	bl	8000288 <__aeabi_dsub>
 800cb10:	2200      	movs	r2, #0
 800cb12:	4606      	mov	r6, r0
 800cb14:	460f      	mov	r7, r1
 800cb16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cb1a:	4620      	mov	r0, r4
 800cb1c:	4629      	mov	r1, r5
 800cb1e:	f7f3 fbb5 	bl	800028c <__adddf3>
 800cb22:	4602      	mov	r2, r0
 800cb24:	460b      	mov	r3, r1
 800cb26:	4630      	mov	r0, r6
 800cb28:	4639      	mov	r1, r7
 800cb2a:	f7f3 fe8f 	bl	800084c <__aeabi_ddiv>
 800cb2e:	f04f 0a00 	mov.w	sl, #0
 800cb32:	4604      	mov	r4, r0
 800cb34:	460d      	mov	r5, r1
 800cb36:	4622      	mov	r2, r4
 800cb38:	462b      	mov	r3, r5
 800cb3a:	4620      	mov	r0, r4
 800cb3c:	4629      	mov	r1, r5
 800cb3e:	f7f3 fd5b 	bl	80005f8 <__aeabi_dmul>
 800cb42:	4602      	mov	r2, r0
 800cb44:	460b      	mov	r3, r1
 800cb46:	4680      	mov	r8, r0
 800cb48:	4689      	mov	r9, r1
 800cb4a:	f7f3 fd55 	bl	80005f8 <__aeabi_dmul>
 800cb4e:	a374      	add	r3, pc, #464	; (adr r3, 800cd20 <atan+0x2b8>)
 800cb50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb54:	4606      	mov	r6, r0
 800cb56:	460f      	mov	r7, r1
 800cb58:	f7f3 fd4e 	bl	80005f8 <__aeabi_dmul>
 800cb5c:	a372      	add	r3, pc, #456	; (adr r3, 800cd28 <atan+0x2c0>)
 800cb5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb62:	f7f3 fb93 	bl	800028c <__adddf3>
 800cb66:	4632      	mov	r2, r6
 800cb68:	463b      	mov	r3, r7
 800cb6a:	f7f3 fd45 	bl	80005f8 <__aeabi_dmul>
 800cb6e:	a370      	add	r3, pc, #448	; (adr r3, 800cd30 <atan+0x2c8>)
 800cb70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb74:	f7f3 fb8a 	bl	800028c <__adddf3>
 800cb78:	4632      	mov	r2, r6
 800cb7a:	463b      	mov	r3, r7
 800cb7c:	f7f3 fd3c 	bl	80005f8 <__aeabi_dmul>
 800cb80:	a36d      	add	r3, pc, #436	; (adr r3, 800cd38 <atan+0x2d0>)
 800cb82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb86:	f7f3 fb81 	bl	800028c <__adddf3>
 800cb8a:	4632      	mov	r2, r6
 800cb8c:	463b      	mov	r3, r7
 800cb8e:	f7f3 fd33 	bl	80005f8 <__aeabi_dmul>
 800cb92:	a36b      	add	r3, pc, #428	; (adr r3, 800cd40 <atan+0x2d8>)
 800cb94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb98:	f7f3 fb78 	bl	800028c <__adddf3>
 800cb9c:	4632      	mov	r2, r6
 800cb9e:	463b      	mov	r3, r7
 800cba0:	f7f3 fd2a 	bl	80005f8 <__aeabi_dmul>
 800cba4:	a368      	add	r3, pc, #416	; (adr r3, 800cd48 <atan+0x2e0>)
 800cba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbaa:	f7f3 fb6f 	bl	800028c <__adddf3>
 800cbae:	4642      	mov	r2, r8
 800cbb0:	464b      	mov	r3, r9
 800cbb2:	f7f3 fd21 	bl	80005f8 <__aeabi_dmul>
 800cbb6:	a366      	add	r3, pc, #408	; (adr r3, 800cd50 <atan+0x2e8>)
 800cbb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbbc:	4680      	mov	r8, r0
 800cbbe:	4689      	mov	r9, r1
 800cbc0:	4630      	mov	r0, r6
 800cbc2:	4639      	mov	r1, r7
 800cbc4:	f7f3 fd18 	bl	80005f8 <__aeabi_dmul>
 800cbc8:	a363      	add	r3, pc, #396	; (adr r3, 800cd58 <atan+0x2f0>)
 800cbca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbce:	f7f3 fb5b 	bl	8000288 <__aeabi_dsub>
 800cbd2:	4632      	mov	r2, r6
 800cbd4:	463b      	mov	r3, r7
 800cbd6:	f7f3 fd0f 	bl	80005f8 <__aeabi_dmul>
 800cbda:	a361      	add	r3, pc, #388	; (adr r3, 800cd60 <atan+0x2f8>)
 800cbdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbe0:	f7f3 fb52 	bl	8000288 <__aeabi_dsub>
 800cbe4:	4632      	mov	r2, r6
 800cbe6:	463b      	mov	r3, r7
 800cbe8:	f7f3 fd06 	bl	80005f8 <__aeabi_dmul>
 800cbec:	a35e      	add	r3, pc, #376	; (adr r3, 800cd68 <atan+0x300>)
 800cbee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbf2:	f7f3 fb49 	bl	8000288 <__aeabi_dsub>
 800cbf6:	4632      	mov	r2, r6
 800cbf8:	463b      	mov	r3, r7
 800cbfa:	f7f3 fcfd 	bl	80005f8 <__aeabi_dmul>
 800cbfe:	a35c      	add	r3, pc, #368	; (adr r3, 800cd70 <atan+0x308>)
 800cc00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc04:	f7f3 fb40 	bl	8000288 <__aeabi_dsub>
 800cc08:	4632      	mov	r2, r6
 800cc0a:	463b      	mov	r3, r7
 800cc0c:	f7f3 fcf4 	bl	80005f8 <__aeabi_dmul>
 800cc10:	4602      	mov	r2, r0
 800cc12:	460b      	mov	r3, r1
 800cc14:	4640      	mov	r0, r8
 800cc16:	4649      	mov	r1, r9
 800cc18:	f7f3 fb38 	bl	800028c <__adddf3>
 800cc1c:	4622      	mov	r2, r4
 800cc1e:	462b      	mov	r3, r5
 800cc20:	f7f3 fcea 	bl	80005f8 <__aeabi_dmul>
 800cc24:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800cc28:	4602      	mov	r2, r0
 800cc2a:	460b      	mov	r3, r1
 800cc2c:	d14b      	bne.n	800ccc6 <atan+0x25e>
 800cc2e:	4620      	mov	r0, r4
 800cc30:	4629      	mov	r1, r5
 800cc32:	f7f3 fb29 	bl	8000288 <__aeabi_dsub>
 800cc36:	e72c      	b.n	800ca92 <atan+0x2a>
 800cc38:	ee10 0a10 	vmov	r0, s0
 800cc3c:	4b53      	ldr	r3, [pc, #332]	; (800cd8c <atan+0x324>)
 800cc3e:	2200      	movs	r2, #0
 800cc40:	4629      	mov	r1, r5
 800cc42:	f7f3 fb21 	bl	8000288 <__aeabi_dsub>
 800cc46:	4b51      	ldr	r3, [pc, #324]	; (800cd8c <atan+0x324>)
 800cc48:	4606      	mov	r6, r0
 800cc4a:	460f      	mov	r7, r1
 800cc4c:	2200      	movs	r2, #0
 800cc4e:	4620      	mov	r0, r4
 800cc50:	4629      	mov	r1, r5
 800cc52:	f7f3 fb1b 	bl	800028c <__adddf3>
 800cc56:	4602      	mov	r2, r0
 800cc58:	460b      	mov	r3, r1
 800cc5a:	4630      	mov	r0, r6
 800cc5c:	4639      	mov	r1, r7
 800cc5e:	f7f3 fdf5 	bl	800084c <__aeabi_ddiv>
 800cc62:	f04f 0a01 	mov.w	sl, #1
 800cc66:	4604      	mov	r4, r0
 800cc68:	460d      	mov	r5, r1
 800cc6a:	e764      	b.n	800cb36 <atan+0xce>
 800cc6c:	4b49      	ldr	r3, [pc, #292]	; (800cd94 <atan+0x32c>)
 800cc6e:	429e      	cmp	r6, r3
 800cc70:	da1d      	bge.n	800ccae <atan+0x246>
 800cc72:	ee10 0a10 	vmov	r0, s0
 800cc76:	4b48      	ldr	r3, [pc, #288]	; (800cd98 <atan+0x330>)
 800cc78:	2200      	movs	r2, #0
 800cc7a:	4629      	mov	r1, r5
 800cc7c:	f7f3 fb04 	bl	8000288 <__aeabi_dsub>
 800cc80:	4b45      	ldr	r3, [pc, #276]	; (800cd98 <atan+0x330>)
 800cc82:	4606      	mov	r6, r0
 800cc84:	460f      	mov	r7, r1
 800cc86:	2200      	movs	r2, #0
 800cc88:	4620      	mov	r0, r4
 800cc8a:	4629      	mov	r1, r5
 800cc8c:	f7f3 fcb4 	bl	80005f8 <__aeabi_dmul>
 800cc90:	4b3e      	ldr	r3, [pc, #248]	; (800cd8c <atan+0x324>)
 800cc92:	2200      	movs	r2, #0
 800cc94:	f7f3 fafa 	bl	800028c <__adddf3>
 800cc98:	4602      	mov	r2, r0
 800cc9a:	460b      	mov	r3, r1
 800cc9c:	4630      	mov	r0, r6
 800cc9e:	4639      	mov	r1, r7
 800cca0:	f7f3 fdd4 	bl	800084c <__aeabi_ddiv>
 800cca4:	f04f 0a02 	mov.w	sl, #2
 800cca8:	4604      	mov	r4, r0
 800ccaa:	460d      	mov	r5, r1
 800ccac:	e743      	b.n	800cb36 <atan+0xce>
 800ccae:	462b      	mov	r3, r5
 800ccb0:	ee10 2a10 	vmov	r2, s0
 800ccb4:	4939      	ldr	r1, [pc, #228]	; (800cd9c <atan+0x334>)
 800ccb6:	2000      	movs	r0, #0
 800ccb8:	f7f3 fdc8 	bl	800084c <__aeabi_ddiv>
 800ccbc:	f04f 0a03 	mov.w	sl, #3
 800ccc0:	4604      	mov	r4, r0
 800ccc2:	460d      	mov	r5, r1
 800ccc4:	e737      	b.n	800cb36 <atan+0xce>
 800ccc6:	4b36      	ldr	r3, [pc, #216]	; (800cda0 <atan+0x338>)
 800ccc8:	4e36      	ldr	r6, [pc, #216]	; (800cda4 <atan+0x33c>)
 800ccca:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ccce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccd2:	f7f3 fad9 	bl	8000288 <__aeabi_dsub>
 800ccd6:	4622      	mov	r2, r4
 800ccd8:	462b      	mov	r3, r5
 800ccda:	f7f3 fad5 	bl	8000288 <__aeabi_dsub>
 800ccde:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800cce2:	4602      	mov	r2, r0
 800cce4:	460b      	mov	r3, r1
 800cce6:	e9d6 0100 	ldrd	r0, r1, [r6]
 800ccea:	f7f3 facd 	bl	8000288 <__aeabi_dsub>
 800ccee:	f1bb 0f00 	cmp.w	fp, #0
 800ccf2:	4604      	mov	r4, r0
 800ccf4:	460d      	mov	r5, r1
 800ccf6:	f6bf aed6 	bge.w	800caa6 <atan+0x3e>
 800ccfa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ccfe:	461d      	mov	r5, r3
 800cd00:	e6d1      	b.n	800caa6 <atan+0x3e>
 800cd02:	a51d      	add	r5, pc, #116	; (adr r5, 800cd78 <atan+0x310>)
 800cd04:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cd08:	e6cd      	b.n	800caa6 <atan+0x3e>
 800cd0a:	bf00      	nop
 800cd0c:	f3af 8000 	nop.w
 800cd10:	54442d18 	.word	0x54442d18
 800cd14:	bff921fb 	.word	0xbff921fb
 800cd18:	8800759c 	.word	0x8800759c
 800cd1c:	7e37e43c 	.word	0x7e37e43c
 800cd20:	e322da11 	.word	0xe322da11
 800cd24:	3f90ad3a 	.word	0x3f90ad3a
 800cd28:	24760deb 	.word	0x24760deb
 800cd2c:	3fa97b4b 	.word	0x3fa97b4b
 800cd30:	a0d03d51 	.word	0xa0d03d51
 800cd34:	3fb10d66 	.word	0x3fb10d66
 800cd38:	c54c206e 	.word	0xc54c206e
 800cd3c:	3fb745cd 	.word	0x3fb745cd
 800cd40:	920083ff 	.word	0x920083ff
 800cd44:	3fc24924 	.word	0x3fc24924
 800cd48:	5555550d 	.word	0x5555550d
 800cd4c:	3fd55555 	.word	0x3fd55555
 800cd50:	2c6a6c2f 	.word	0x2c6a6c2f
 800cd54:	bfa2b444 	.word	0xbfa2b444
 800cd58:	52defd9a 	.word	0x52defd9a
 800cd5c:	3fadde2d 	.word	0x3fadde2d
 800cd60:	af749a6d 	.word	0xaf749a6d
 800cd64:	3fb3b0f2 	.word	0x3fb3b0f2
 800cd68:	fe231671 	.word	0xfe231671
 800cd6c:	3fbc71c6 	.word	0x3fbc71c6
 800cd70:	9998ebc4 	.word	0x9998ebc4
 800cd74:	3fc99999 	.word	0x3fc99999
 800cd78:	54442d18 	.word	0x54442d18
 800cd7c:	3ff921fb 	.word	0x3ff921fb
 800cd80:	440fffff 	.word	0x440fffff
 800cd84:	7ff00000 	.word	0x7ff00000
 800cd88:	3fdbffff 	.word	0x3fdbffff
 800cd8c:	3ff00000 	.word	0x3ff00000
 800cd90:	3ff2ffff 	.word	0x3ff2ffff
 800cd94:	40038000 	.word	0x40038000
 800cd98:	3ff80000 	.word	0x3ff80000
 800cd9c:	bff00000 	.word	0xbff00000
 800cda0:	0800d8c0 	.word	0x0800d8c0
 800cda4:	0800d8a0 	.word	0x0800d8a0

0800cda8 <fabs>:
 800cda8:	ec51 0b10 	vmov	r0, r1, d0
 800cdac:	ee10 2a10 	vmov	r2, s0
 800cdb0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cdb4:	ec43 2b10 	vmov	d0, r2, r3
 800cdb8:	4770      	bx	lr
	...

0800cdbc <__ieee754_sqrt>:
 800cdbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdc0:	ec55 4b10 	vmov	r4, r5, d0
 800cdc4:	4e67      	ldr	r6, [pc, #412]	; (800cf64 <__ieee754_sqrt+0x1a8>)
 800cdc6:	43ae      	bics	r6, r5
 800cdc8:	ee10 0a10 	vmov	r0, s0
 800cdcc:	ee10 2a10 	vmov	r2, s0
 800cdd0:	4629      	mov	r1, r5
 800cdd2:	462b      	mov	r3, r5
 800cdd4:	d10d      	bne.n	800cdf2 <__ieee754_sqrt+0x36>
 800cdd6:	f7f3 fc0f 	bl	80005f8 <__aeabi_dmul>
 800cdda:	4602      	mov	r2, r0
 800cddc:	460b      	mov	r3, r1
 800cdde:	4620      	mov	r0, r4
 800cde0:	4629      	mov	r1, r5
 800cde2:	f7f3 fa53 	bl	800028c <__adddf3>
 800cde6:	4604      	mov	r4, r0
 800cde8:	460d      	mov	r5, r1
 800cdea:	ec45 4b10 	vmov	d0, r4, r5
 800cdee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdf2:	2d00      	cmp	r5, #0
 800cdf4:	dc0b      	bgt.n	800ce0e <__ieee754_sqrt+0x52>
 800cdf6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800cdfa:	4326      	orrs	r6, r4
 800cdfc:	d0f5      	beq.n	800cdea <__ieee754_sqrt+0x2e>
 800cdfe:	b135      	cbz	r5, 800ce0e <__ieee754_sqrt+0x52>
 800ce00:	f7f3 fa42 	bl	8000288 <__aeabi_dsub>
 800ce04:	4602      	mov	r2, r0
 800ce06:	460b      	mov	r3, r1
 800ce08:	f7f3 fd20 	bl	800084c <__aeabi_ddiv>
 800ce0c:	e7eb      	b.n	800cde6 <__ieee754_sqrt+0x2a>
 800ce0e:	1509      	asrs	r1, r1, #20
 800ce10:	f000 808d 	beq.w	800cf2e <__ieee754_sqrt+0x172>
 800ce14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ce18:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800ce1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ce20:	07c9      	lsls	r1, r1, #31
 800ce22:	bf5c      	itt	pl
 800ce24:	005b      	lslpl	r3, r3, #1
 800ce26:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800ce2a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ce2e:	bf58      	it	pl
 800ce30:	0052      	lslpl	r2, r2, #1
 800ce32:	2500      	movs	r5, #0
 800ce34:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800ce38:	1076      	asrs	r6, r6, #1
 800ce3a:	0052      	lsls	r2, r2, #1
 800ce3c:	f04f 0e16 	mov.w	lr, #22
 800ce40:	46ac      	mov	ip, r5
 800ce42:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ce46:	eb0c 0001 	add.w	r0, ip, r1
 800ce4a:	4298      	cmp	r0, r3
 800ce4c:	bfde      	ittt	le
 800ce4e:	1a1b      	suble	r3, r3, r0
 800ce50:	eb00 0c01 	addle.w	ip, r0, r1
 800ce54:	186d      	addle	r5, r5, r1
 800ce56:	005b      	lsls	r3, r3, #1
 800ce58:	f1be 0e01 	subs.w	lr, lr, #1
 800ce5c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800ce60:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800ce64:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800ce68:	d1ed      	bne.n	800ce46 <__ieee754_sqrt+0x8a>
 800ce6a:	4674      	mov	r4, lr
 800ce6c:	2720      	movs	r7, #32
 800ce6e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800ce72:	4563      	cmp	r3, ip
 800ce74:	eb01 000e 	add.w	r0, r1, lr
 800ce78:	dc02      	bgt.n	800ce80 <__ieee754_sqrt+0xc4>
 800ce7a:	d113      	bne.n	800cea4 <__ieee754_sqrt+0xe8>
 800ce7c:	4290      	cmp	r0, r2
 800ce7e:	d811      	bhi.n	800cea4 <__ieee754_sqrt+0xe8>
 800ce80:	2800      	cmp	r0, #0
 800ce82:	eb00 0e01 	add.w	lr, r0, r1
 800ce86:	da57      	bge.n	800cf38 <__ieee754_sqrt+0x17c>
 800ce88:	f1be 0f00 	cmp.w	lr, #0
 800ce8c:	db54      	blt.n	800cf38 <__ieee754_sqrt+0x17c>
 800ce8e:	f10c 0801 	add.w	r8, ip, #1
 800ce92:	eba3 030c 	sub.w	r3, r3, ip
 800ce96:	4290      	cmp	r0, r2
 800ce98:	bf88      	it	hi
 800ce9a:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 800ce9e:	1a12      	subs	r2, r2, r0
 800cea0:	440c      	add	r4, r1
 800cea2:	46c4      	mov	ip, r8
 800cea4:	005b      	lsls	r3, r3, #1
 800cea6:	3f01      	subs	r7, #1
 800cea8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800ceac:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800ceb0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800ceb4:	d1dd      	bne.n	800ce72 <__ieee754_sqrt+0xb6>
 800ceb6:	4313      	orrs	r3, r2
 800ceb8:	d01b      	beq.n	800cef2 <__ieee754_sqrt+0x136>
 800ceba:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800cf68 <__ieee754_sqrt+0x1ac>
 800cebe:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800cf6c <__ieee754_sqrt+0x1b0>
 800cec2:	e9da 0100 	ldrd	r0, r1, [sl]
 800cec6:	e9db 2300 	ldrd	r2, r3, [fp]
 800ceca:	f7f3 f9dd 	bl	8000288 <__aeabi_dsub>
 800cece:	e9da 8900 	ldrd	r8, r9, [sl]
 800ced2:	4602      	mov	r2, r0
 800ced4:	460b      	mov	r3, r1
 800ced6:	4640      	mov	r0, r8
 800ced8:	4649      	mov	r1, r9
 800ceda:	f7f3 fe09 	bl	8000af0 <__aeabi_dcmple>
 800cede:	b140      	cbz	r0, 800cef2 <__ieee754_sqrt+0x136>
 800cee0:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800cee4:	e9da 0100 	ldrd	r0, r1, [sl]
 800cee8:	e9db 2300 	ldrd	r2, r3, [fp]
 800ceec:	d126      	bne.n	800cf3c <__ieee754_sqrt+0x180>
 800ceee:	3501      	adds	r5, #1
 800cef0:	463c      	mov	r4, r7
 800cef2:	106a      	asrs	r2, r5, #1
 800cef4:	0863      	lsrs	r3, r4, #1
 800cef6:	07e9      	lsls	r1, r5, #31
 800cef8:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800cefc:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800cf00:	bf48      	it	mi
 800cf02:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800cf06:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800cf0a:	461c      	mov	r4, r3
 800cf0c:	e76d      	b.n	800cdea <__ieee754_sqrt+0x2e>
 800cf0e:	0ad3      	lsrs	r3, r2, #11
 800cf10:	3815      	subs	r0, #21
 800cf12:	0552      	lsls	r2, r2, #21
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d0fa      	beq.n	800cf0e <__ieee754_sqrt+0x152>
 800cf18:	02dc      	lsls	r4, r3, #11
 800cf1a:	d50a      	bpl.n	800cf32 <__ieee754_sqrt+0x176>
 800cf1c:	f1c1 0420 	rsb	r4, r1, #32
 800cf20:	fa22 f404 	lsr.w	r4, r2, r4
 800cf24:	1e4d      	subs	r5, r1, #1
 800cf26:	408a      	lsls	r2, r1
 800cf28:	4323      	orrs	r3, r4
 800cf2a:	1b41      	subs	r1, r0, r5
 800cf2c:	e772      	b.n	800ce14 <__ieee754_sqrt+0x58>
 800cf2e:	4608      	mov	r0, r1
 800cf30:	e7f0      	b.n	800cf14 <__ieee754_sqrt+0x158>
 800cf32:	005b      	lsls	r3, r3, #1
 800cf34:	3101      	adds	r1, #1
 800cf36:	e7ef      	b.n	800cf18 <__ieee754_sqrt+0x15c>
 800cf38:	46e0      	mov	r8, ip
 800cf3a:	e7aa      	b.n	800ce92 <__ieee754_sqrt+0xd6>
 800cf3c:	f7f3 f9a6 	bl	800028c <__adddf3>
 800cf40:	e9da 8900 	ldrd	r8, r9, [sl]
 800cf44:	4602      	mov	r2, r0
 800cf46:	460b      	mov	r3, r1
 800cf48:	4640      	mov	r0, r8
 800cf4a:	4649      	mov	r1, r9
 800cf4c:	f7f3 fdc6 	bl	8000adc <__aeabi_dcmplt>
 800cf50:	b120      	cbz	r0, 800cf5c <__ieee754_sqrt+0x1a0>
 800cf52:	1ca0      	adds	r0, r4, #2
 800cf54:	bf08      	it	eq
 800cf56:	3501      	addeq	r5, #1
 800cf58:	3402      	adds	r4, #2
 800cf5a:	e7ca      	b.n	800cef2 <__ieee754_sqrt+0x136>
 800cf5c:	3401      	adds	r4, #1
 800cf5e:	f024 0401 	bic.w	r4, r4, #1
 800cf62:	e7c6      	b.n	800cef2 <__ieee754_sqrt+0x136>
 800cf64:	7ff00000 	.word	0x7ff00000
 800cf68:	200001d8 	.word	0x200001d8
 800cf6c:	200001e0 	.word	0x200001e0

0800cf70 <__ieee754_fmod>:
 800cf70:	ec53 2b11 	vmov	r2, r3, d1
 800cf74:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 800cf78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf7c:	ea5c 0402 	orrs.w	r4, ip, r2
 800cf80:	ec51 0b10 	vmov	r0, r1, d0
 800cf84:	ee11 7a10 	vmov	r7, s2
 800cf88:	ee11 ea10 	vmov	lr, s2
 800cf8c:	461e      	mov	r6, r3
 800cf8e:	d00c      	beq.n	800cfaa <__ieee754_fmod+0x3a>
 800cf90:	4c78      	ldr	r4, [pc, #480]	; (800d174 <__ieee754_fmod+0x204>)
 800cf92:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 800cf96:	45a0      	cmp	r8, r4
 800cf98:	4689      	mov	r9, r1
 800cf9a:	dc06      	bgt.n	800cfaa <__ieee754_fmod+0x3a>
 800cf9c:	4254      	negs	r4, r2
 800cf9e:	4d76      	ldr	r5, [pc, #472]	; (800d178 <__ieee754_fmod+0x208>)
 800cfa0:	4314      	orrs	r4, r2
 800cfa2:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 800cfa6:	42ac      	cmp	r4, r5
 800cfa8:	d909      	bls.n	800cfbe <__ieee754_fmod+0x4e>
 800cfaa:	f7f3 fb25 	bl	80005f8 <__aeabi_dmul>
 800cfae:	4602      	mov	r2, r0
 800cfb0:	460b      	mov	r3, r1
 800cfb2:	f7f3 fc4b 	bl	800084c <__aeabi_ddiv>
 800cfb6:	ec41 0b10 	vmov	d0, r0, r1
 800cfba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfbe:	45e0      	cmp	r8, ip
 800cfc0:	ee10 aa10 	vmov	sl, s0
 800cfc4:	ee10 4a10 	vmov	r4, s0
 800cfc8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800cfcc:	dc09      	bgt.n	800cfe2 <__ieee754_fmod+0x72>
 800cfce:	dbf2      	blt.n	800cfb6 <__ieee754_fmod+0x46>
 800cfd0:	4290      	cmp	r0, r2
 800cfd2:	d3f0      	bcc.n	800cfb6 <__ieee754_fmod+0x46>
 800cfd4:	d105      	bne.n	800cfe2 <__ieee754_fmod+0x72>
 800cfd6:	4b69      	ldr	r3, [pc, #420]	; (800d17c <__ieee754_fmod+0x20c>)
 800cfd8:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 800cfdc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cfe0:	e7e9      	b.n	800cfb6 <__ieee754_fmod+0x46>
 800cfe2:	4a65      	ldr	r2, [pc, #404]	; (800d178 <__ieee754_fmod+0x208>)
 800cfe4:	ea19 0f02 	tst.w	r9, r2
 800cfe8:	d148      	bne.n	800d07c <__ieee754_fmod+0x10c>
 800cfea:	f1b8 0f00 	cmp.w	r8, #0
 800cfee:	d13d      	bne.n	800d06c <__ieee754_fmod+0xfc>
 800cff0:	4963      	ldr	r1, [pc, #396]	; (800d180 <__ieee754_fmod+0x210>)
 800cff2:	4653      	mov	r3, sl
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	dc36      	bgt.n	800d066 <__ieee754_fmod+0xf6>
 800cff8:	4216      	tst	r6, r2
 800cffa:	d14f      	bne.n	800d09c <__ieee754_fmod+0x12c>
 800cffc:	f1bc 0f00 	cmp.w	ip, #0
 800d000:	d144      	bne.n	800d08c <__ieee754_fmod+0x11c>
 800d002:	4a5f      	ldr	r2, [pc, #380]	; (800d180 <__ieee754_fmod+0x210>)
 800d004:	463b      	mov	r3, r7
 800d006:	2b00      	cmp	r3, #0
 800d008:	dc3d      	bgt.n	800d086 <__ieee754_fmod+0x116>
 800d00a:	485e      	ldr	r0, [pc, #376]	; (800d184 <__ieee754_fmod+0x214>)
 800d00c:	4281      	cmp	r1, r0
 800d00e:	db4a      	blt.n	800d0a6 <__ieee754_fmod+0x136>
 800d010:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d014:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d018:	485a      	ldr	r0, [pc, #360]	; (800d184 <__ieee754_fmod+0x214>)
 800d01a:	4282      	cmp	r2, r0
 800d01c:	db57      	blt.n	800d0ce <__ieee754_fmod+0x15e>
 800d01e:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800d022:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 800d026:	1a89      	subs	r1, r1, r2
 800d028:	1b98      	subs	r0, r3, r6
 800d02a:	eba4 070e 	sub.w	r7, r4, lr
 800d02e:	2900      	cmp	r1, #0
 800d030:	d162      	bne.n	800d0f8 <__ieee754_fmod+0x188>
 800d032:	4574      	cmp	r4, lr
 800d034:	bf38      	it	cc
 800d036:	f100 30ff 	addcc.w	r0, r0, #4294967295	; 0xffffffff
 800d03a:	2800      	cmp	r0, #0
 800d03c:	bfa4      	itt	ge
 800d03e:	463c      	movge	r4, r7
 800d040:	4603      	movge	r3, r0
 800d042:	ea53 0104 	orrs.w	r1, r3, r4
 800d046:	d0c6      	beq.n	800cfd6 <__ieee754_fmod+0x66>
 800d048:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d04c:	db69      	blt.n	800d122 <__ieee754_fmod+0x1b2>
 800d04e:	494d      	ldr	r1, [pc, #308]	; (800d184 <__ieee754_fmod+0x214>)
 800d050:	428a      	cmp	r2, r1
 800d052:	db6c      	blt.n	800d12e <__ieee754_fmod+0x1be>
 800d054:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d058:	432b      	orrs	r3, r5
 800d05a:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 800d05e:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800d062:	4620      	mov	r0, r4
 800d064:	e7a7      	b.n	800cfb6 <__ieee754_fmod+0x46>
 800d066:	3901      	subs	r1, #1
 800d068:	005b      	lsls	r3, r3, #1
 800d06a:	e7c3      	b.n	800cff4 <__ieee754_fmod+0x84>
 800d06c:	4945      	ldr	r1, [pc, #276]	; (800d184 <__ieee754_fmod+0x214>)
 800d06e:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800d072:	2b00      	cmp	r3, #0
 800d074:	ddc0      	ble.n	800cff8 <__ieee754_fmod+0x88>
 800d076:	3901      	subs	r1, #1
 800d078:	005b      	lsls	r3, r3, #1
 800d07a:	e7fa      	b.n	800d072 <__ieee754_fmod+0x102>
 800d07c:	ea4f 5128 	mov.w	r1, r8, asr #20
 800d080:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800d084:	e7b8      	b.n	800cff8 <__ieee754_fmod+0x88>
 800d086:	3a01      	subs	r2, #1
 800d088:	005b      	lsls	r3, r3, #1
 800d08a:	e7bc      	b.n	800d006 <__ieee754_fmod+0x96>
 800d08c:	4a3d      	ldr	r2, [pc, #244]	; (800d184 <__ieee754_fmod+0x214>)
 800d08e:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 800d092:	2b00      	cmp	r3, #0
 800d094:	ddb9      	ble.n	800d00a <__ieee754_fmod+0x9a>
 800d096:	3a01      	subs	r2, #1
 800d098:	005b      	lsls	r3, r3, #1
 800d09a:	e7fa      	b.n	800d092 <__ieee754_fmod+0x122>
 800d09c:	ea4f 522c 	mov.w	r2, ip, asr #20
 800d0a0:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800d0a4:	e7b1      	b.n	800d00a <__ieee754_fmod+0x9a>
 800d0a6:	1a40      	subs	r0, r0, r1
 800d0a8:	281f      	cmp	r0, #31
 800d0aa:	dc0a      	bgt.n	800d0c2 <__ieee754_fmod+0x152>
 800d0ac:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 800d0b0:	fa08 f800 	lsl.w	r8, r8, r0
 800d0b4:	fa2a f303 	lsr.w	r3, sl, r3
 800d0b8:	ea43 0308 	orr.w	r3, r3, r8
 800d0bc:	fa0a f400 	lsl.w	r4, sl, r0
 800d0c0:	e7aa      	b.n	800d018 <__ieee754_fmod+0xa8>
 800d0c2:	4b31      	ldr	r3, [pc, #196]	; (800d188 <__ieee754_fmod+0x218>)
 800d0c4:	1a5b      	subs	r3, r3, r1
 800d0c6:	fa0a f303 	lsl.w	r3, sl, r3
 800d0ca:	2400      	movs	r4, #0
 800d0cc:	e7a4      	b.n	800d018 <__ieee754_fmod+0xa8>
 800d0ce:	1a80      	subs	r0, r0, r2
 800d0d0:	281f      	cmp	r0, #31
 800d0d2:	dc0a      	bgt.n	800d0ea <__ieee754_fmod+0x17a>
 800d0d4:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 800d0d8:	fa0c fc00 	lsl.w	ip, ip, r0
 800d0dc:	fa27 f606 	lsr.w	r6, r7, r6
 800d0e0:	ea46 060c 	orr.w	r6, r6, ip
 800d0e4:	fa07 fe00 	lsl.w	lr, r7, r0
 800d0e8:	e79d      	b.n	800d026 <__ieee754_fmod+0xb6>
 800d0ea:	4e27      	ldr	r6, [pc, #156]	; (800d188 <__ieee754_fmod+0x218>)
 800d0ec:	1ab6      	subs	r6, r6, r2
 800d0ee:	fa07 f606 	lsl.w	r6, r7, r6
 800d0f2:	f04f 0e00 	mov.w	lr, #0
 800d0f6:	e796      	b.n	800d026 <__ieee754_fmod+0xb6>
 800d0f8:	4574      	cmp	r4, lr
 800d0fa:	bf38      	it	cc
 800d0fc:	f100 30ff 	addcc.w	r0, r0, #4294967295	; 0xffffffff
 800d100:	2800      	cmp	r0, #0
 800d102:	da05      	bge.n	800d110 <__ieee754_fmod+0x1a0>
 800d104:	0fe0      	lsrs	r0, r4, #31
 800d106:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800d10a:	0064      	lsls	r4, r4, #1
 800d10c:	3901      	subs	r1, #1
 800d10e:	e78b      	b.n	800d028 <__ieee754_fmod+0xb8>
 800d110:	ea50 0307 	orrs.w	r3, r0, r7
 800d114:	f43f af5f 	beq.w	800cfd6 <__ieee754_fmod+0x66>
 800d118:	0ffb      	lsrs	r3, r7, #31
 800d11a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800d11e:	007c      	lsls	r4, r7, #1
 800d120:	e7f4      	b.n	800d10c <__ieee754_fmod+0x19c>
 800d122:	0fe1      	lsrs	r1, r4, #31
 800d124:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800d128:	0064      	lsls	r4, r4, #1
 800d12a:	3a01      	subs	r2, #1
 800d12c:	e78c      	b.n	800d048 <__ieee754_fmod+0xd8>
 800d12e:	1a89      	subs	r1, r1, r2
 800d130:	2914      	cmp	r1, #20
 800d132:	dc0a      	bgt.n	800d14a <__ieee754_fmod+0x1da>
 800d134:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800d138:	fa03 f202 	lsl.w	r2, r3, r2
 800d13c:	40cc      	lsrs	r4, r1
 800d13e:	4322      	orrs	r2, r4
 800d140:	410b      	asrs	r3, r1
 800d142:	ea43 0105 	orr.w	r1, r3, r5
 800d146:	4610      	mov	r0, r2
 800d148:	e735      	b.n	800cfb6 <__ieee754_fmod+0x46>
 800d14a:	291f      	cmp	r1, #31
 800d14c:	dc07      	bgt.n	800d15e <__ieee754_fmod+0x1ee>
 800d14e:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800d152:	40cc      	lsrs	r4, r1
 800d154:	fa03 f202 	lsl.w	r2, r3, r2
 800d158:	4322      	orrs	r2, r4
 800d15a:	462b      	mov	r3, r5
 800d15c:	e7f1      	b.n	800d142 <__ieee754_fmod+0x1d2>
 800d15e:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 800d162:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d166:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 800d16a:	32e2      	adds	r2, #226	; 0xe2
 800d16c:	fa43 f202 	asr.w	r2, r3, r2
 800d170:	e7f3      	b.n	800d15a <__ieee754_fmod+0x1ea>
 800d172:	bf00      	nop
 800d174:	7fefffff 	.word	0x7fefffff
 800d178:	7ff00000 	.word	0x7ff00000
 800d17c:	0800d8e0 	.word	0x0800d8e0
 800d180:	fffffbed 	.word	0xfffffbed
 800d184:	fffffc02 	.word	0xfffffc02
 800d188:	fffffbe2 	.word	0xfffffbe2

0800d18c <_init>:
 800d18c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d18e:	bf00      	nop
 800d190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d192:	bc08      	pop	{r3}
 800d194:	469e      	mov	lr, r3
 800d196:	4770      	bx	lr

0800d198 <_fini>:
 800d198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d19a:	bf00      	nop
 800d19c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d19e:	bc08      	pop	{r3}
 800d1a0:	469e      	mov	lr, r3
 800d1a2:	4770      	bx	lr
