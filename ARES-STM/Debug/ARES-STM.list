
ARES-STM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< Updated upstream
  1 .text         00008c80  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  08008e10  08008e10  00018e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008fc4  08008fc4  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08008fc4  08008fc4  00018fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008fcc  08008fcc  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008fcc  08008fcc  00018fcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008fd0  08008fd0  00018fd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08008fd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000025b8  2000006c  08009040  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002624  08009040  00022624  2**0
=======
  1 .text         00009eb0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002cc  0800a040  0800a040  0001a040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a30c  0800a30c  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a30c  0800a30c  0001a30c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a314  0800a314  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a314  0800a314  0001a314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a318  0800a318  0001a318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800a31c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002510  2000006c  0800a388  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000257c  0800a388  0002257c  2**0
>>>>>>> Stashed changes
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
<<<<<<< Updated upstream
 13 .debug_info   00021172  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004653  00000000  00000000  00041251  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c00  00000000  00000000  000458a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000015c0  00000000  00000000  000474a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e059  00000000  00000000  00048a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020de1  00000000  00000000  00066ac1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b8e2c  00000000  00000000  000878a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007d54  00000000  00000000  001406d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00148424  2**0
=======
 13 .debug_info   000221e6  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000489e  00000000  00000000  000422c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c58  00000000  00000000  00046b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001600  00000000  00000000  000487c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f05c  00000000  00000000  00049dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021a0c  00000000  00000000  00068e1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b9b9e  00000000  00000000  0008a828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007e74  00000000  00000000  001443c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0014c23c  2**0
>>>>>>> Stashed changes
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
<<<<<<< Updated upstream
 80001b0:	08008df8 	.word	0x08008df8
=======
 80001b0:	0800a028 	.word	0x0800a028
>>>>>>> Stashed changes

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
<<<<<<< Updated upstream
 80001cc:	08008df8 	.word	0x08008df8
=======
 80001cc:	0800a028 	.word	0x0800a028
>>>>>>> Stashed changes

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <sendMessage>:
#include <string.h>

extern UART_HandleTypeDef huart2;


 void sendMessage(SensorType sensorType, uint32_t timestamp, uint16_t sensorData) {
 800056c:	b580      	push	{r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af00      	add	r7, sp, #0
 8000572:	4603      	mov	r3, r0
 8000574:	6039      	str	r1, [r7, #0]
 8000576:	71fb      	strb	r3, [r7, #7]
 8000578:	4613      	mov	r3, r2
 800057a:	80bb      	strh	r3, [r7, #4]
<<<<<<< Updated upstream
    CustomMessage message;
    message.startDelimiter = START_DELIMITER;
 800057c:	23aa      	movs	r3, #170	; 0xaa
 800057e:	723b      	strb	r3, [r7, #8]
    message.sensorType = sensorType;
 8000580:	79fb      	ldrb	r3, [r7, #7]
 8000582:	727b      	strb	r3, [r7, #9]
    message.timestamp = timestamp;
 8000584:	683b      	ldr	r3, [r7, #0]
 8000586:	f8c7 300a 	str.w	r3, [r7, #10]
    message.sensorData = sensorData;
 800058a:	88bb      	ldrh	r3, [r7, #4]
 800058c:	81fb      	strh	r3, [r7, #14]
    message.checksum = START_DELIMITER + sensorType + (timestamp & 0xFF) + ((timestamp >> 8) & 0xFF) + ((timestamp >> 16) & 0xFF) + ((timestamp >> 24) & 0xFF) + (sensorData & 0xFF) + ((sensorData >> 8) & 0xFF);
 800058e:	683b      	ldr	r3, [r7, #0]
 8000590:	b2da      	uxtb	r2, r3
 8000592:	79fb      	ldrb	r3, [r7, #7]
 8000594:	4413      	add	r3, r2
 8000596:	b2da      	uxtb	r2, r3
 8000598:	683b      	ldr	r3, [r7, #0]
 800059a:	0a1b      	lsrs	r3, r3, #8
 800059c:	b2db      	uxtb	r3, r3
 800059e:	4413      	add	r3, r2
 80005a0:	b2da      	uxtb	r2, r3
 80005a2:	683b      	ldr	r3, [r7, #0]
 80005a4:	0c1b      	lsrs	r3, r3, #16
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	4413      	add	r3, r2
 80005aa:	b2da      	uxtb	r2, r3
 80005ac:	683b      	ldr	r3, [r7, #0]
 80005ae:	0e1b      	lsrs	r3, r3, #24
 80005b0:	b2db      	uxtb	r3, r3
 80005b2:	4413      	add	r3, r2
 80005b4:	b2da      	uxtb	r2, r3
 80005b6:	88bb      	ldrh	r3, [r7, #4]
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	4413      	add	r3, r2
 80005bc:	b2da      	uxtb	r2, r3
 80005be:	88bb      	ldrh	r3, [r7, #4]
 80005c0:	0a1b      	lsrs	r3, r3, #8
 80005c2:	b29b      	uxth	r3, r3
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	4413      	add	r3, r2
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	3b56      	subs	r3, #86	; 0x56
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	743b      	strb	r3, [r7, #16]
    message.endDelimiter = END_DELIMITER;
 80005d0:	2355      	movs	r3, #85	; 0x55
 80005d2:	747b      	strb	r3, [r7, #17]
    HAL_UART_Transmit(&huart2, (uint8_t*)&message, CUSTOM_MESSAGE_SIZE, HAL_MAX_DELAY);
 80005d4:	f107 0108 	add.w	r1, r7, #8
 80005d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005dc:	220a      	movs	r2, #10
 80005de:	4804      	ldr	r0, [pc, #16]	; (80005f0 <sendMessage+0x84>)
 80005e0:	f003 fa90 	bl	8003b04 <HAL_UART_Transmit>
    int i=1;
 80005e4:	2301      	movs	r3, #1
 80005e6:	617b      	str	r3, [r7, #20]
}
 80005e8:	bf00      	nop
 80005ea:	3718      	adds	r7, #24
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	20000164 	.word	0x20000164

080005f4 <sendLightSensorData>:

void sendLightSensorData(uint16_t sensorData) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	80fb      	strh	r3, [r7, #6]
	uint32_t curTime;
	curTime = HAL_GetTick();
 80005fe:	f000 fdfd 	bl	80011fc <HAL_GetTick>
 8000602:	60f8      	str	r0, [r7, #12]
	sendMessage(0x02, curTime, sensorData);
 8000604:	88fb      	ldrh	r3, [r7, #6]
 8000606:	461a      	mov	r2, r3
 8000608:	68f9      	ldr	r1, [r7, #12]
 800060a:	2002      	movs	r0, #2
 800060c:	f7ff ffae 	bl	800056c <sendMessage>
}
 8000610:	bf00      	nop
 8000612:	3710      	adds	r7, #16
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}

08000618 <LTR329_Init>:
=======
     CustomMessage message;
     message.startDelimiter = START_DELIMITER;
 800057c:	235b      	movs	r3, #91	; 0x5b
 800057e:	723b      	strb	r3, [r7, #8]
     message.sensorType = sensorType;
 8000580:	79fb      	ldrb	r3, [r7, #7]
 8000582:	727b      	strb	r3, [r7, #9]
     message.timestamp = timestamp;
 8000584:	683b      	ldr	r3, [r7, #0]
 8000586:	f8c7 300a 	str.w	r3, [r7, #10]
     message.sensorData = sensorData;
 800058a:	88bb      	ldrh	r3, [r7, #4]
 800058c:	81fb      	strh	r3, [r7, #14]
     message.checksum = START_DELIMITER + sensorType + (timestamp & 0xFF) + ((timestamp >> 8) & 0xFF) + ((timestamp >> 16) & 0xFF) + ((timestamp >> 24) & 0xFF) + (sensorData & 0xFF) + ((sensorData >> 8) & 0xFF);
 800058e:	79fa      	ldrb	r2, [r7, #7]
 8000590:	683b      	ldr	r3, [r7, #0]
 8000592:	b2db      	uxtb	r3, r3
 8000594:	441a      	add	r2, r3
 8000596:	683b      	ldr	r3, [r7, #0]
 8000598:	0a1b      	lsrs	r3, r3, #8
 800059a:	b2db      	uxtb	r3, r3
 800059c:	441a      	add	r2, r3
 800059e:	683b      	ldr	r3, [r7, #0]
 80005a0:	0c1b      	lsrs	r3, r3, #16
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	441a      	add	r2, r3
 80005a6:	683b      	ldr	r3, [r7, #0]
 80005a8:	0e1b      	lsrs	r3, r3, #24
 80005aa:	441a      	add	r2, r3
 80005ac:	88bb      	ldrh	r3, [r7, #4]
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	441a      	add	r2, r3
 80005b2:	88bb      	ldrh	r3, [r7, #4]
 80005b4:	0a1b      	lsrs	r3, r3, #8
 80005b6:	b29b      	uxth	r3, r3
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	4413      	add	r3, r2
 80005bc:	335b      	adds	r3, #91	; 0x5b
 80005be:	613b      	str	r3, [r7, #16]
     message.endDelimiter = END_DELIMITER;
 80005c0:	235d      	movs	r3, #93	; 0x5d
 80005c2:	753b      	strb	r3, [r7, #20]
     HAL_UART_Transmit(&huart2, (uint8_t*)&message, CUSTOM_MESSAGE_SIZE, HAL_MAX_DELAY);
 80005c4:	f107 0108 	add.w	r1, r7, #8
 80005c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005cc:	220a      	movs	r2, #10
 80005ce:	4803      	ldr	r0, [pc, #12]	; (80005dc <sendMessage+0x70>)
 80005d0:	f004 f908 	bl	80047e4 <HAL_UART_Transmit>
 }
 80005d4:	bf00      	nop
 80005d6:	3718      	adds	r7, #24
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	20000164 	.word	0x20000164

080005e0 <sendLightSensorData>:

 void sendLightSensorData(uint16_t sensorData) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	80fb      	strh	r3, [r7, #6]
 	uint32_t curTime;
 	curTime = HAL_GetTick();
 80005ea:	f000 ffc1 	bl	8001570 <HAL_GetTick>
 80005ee:	60f8      	str	r0, [r7, #12]
 	sendMessage(0x02, curTime, sensorData);
 80005f0:	88fb      	ldrh	r3, [r7, #6]
 80005f2:	461a      	mov	r2, r3
 80005f4:	68f9      	ldr	r1, [r7, #12]
 80005f6:	2002      	movs	r0, #2
 80005f8:	f7ff ffb8 	bl	800056c <sendMessage>
 }
 80005fc:	bf00      	nop
 80005fe:	3710      	adds	r7, #16
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}

08000604 <LTR329_Init>:
>>>>>>> Stashed changes
#include "stm32l4xx_hal.h"
#include <stdint.h>

extern I2C_HandleTypeDef hi2c1;  // Assuming you are using hi2c1

void LTR329_Init() {
<<<<<<< Updated upstream
 8000618:	b580      	push	{r7, lr}
 800061a:	b086      	sub	sp, #24
 800061c:	af04      	add	r7, sp, #16
=======
 8000604:	b580      	push	{r7, lr}
 8000606:	b086      	sub	sp, #24
 8000608:	af04      	add	r7, sp, #16
>>>>>>> Stashed changes
    uint8_t data;

    // Activate the sensor
    data = LTR329_ACTIVE_MODE;
<<<<<<< Updated upstream
 800061e:	2301      	movs	r3, #1
 8000620:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, LTR329_I2C_ADDRESS, LTR329_ALS_CONTR, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 8000622:	2364      	movs	r3, #100	; 0x64
 8000624:	9302      	str	r3, [sp, #8]
 8000626:	2301      	movs	r3, #1
 8000628:	9301      	str	r3, [sp, #4]
 800062a:	1dfb      	adds	r3, r7, #7
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	2301      	movs	r3, #1
 8000630:	2280      	movs	r2, #128	; 0x80
 8000632:	2152      	movs	r1, #82	; 0x52
 8000634:	480a      	ldr	r0, [pc, #40]	; (8000660 <LTR329_Init+0x48>)
 8000636:	f001 f975 	bl	8001924 <HAL_I2C_Mem_Write>

    // Set measurement rate
    data = LTR329_MEAS_RATE;
 800063a:	2303      	movs	r3, #3
 800063c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, LTR329_I2C_ADDRESS, LTR329_ALS_MEAS_RATE, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 800063e:	2364      	movs	r3, #100	; 0x64
 8000640:	9302      	str	r3, [sp, #8]
 8000642:	2301      	movs	r3, #1
 8000644:	9301      	str	r3, [sp, #4]
 8000646:	1dfb      	adds	r3, r7, #7
 8000648:	9300      	str	r3, [sp, #0]
 800064a:	2301      	movs	r3, #1
 800064c:	2285      	movs	r2, #133	; 0x85
 800064e:	2152      	movs	r1, #82	; 0x52
 8000650:	4803      	ldr	r0, [pc, #12]	; (8000660 <LTR329_Init+0x48>)
 8000652:	f001 f967 	bl	8001924 <HAL_I2C_Mem_Write>
}
 8000656:	bf00      	nop
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	20000088 	.word	0x20000088

08000664 <LTR329_Read_Light>:

void LTR329_Read_Light(uint16_t *ch0, uint16_t *ch1) {
 8000664:	b580      	push	{r7, lr}
 8000666:	b088      	sub	sp, #32
 8000668:	af04      	add	r7, sp, #16
 800066a:	6078      	str	r0, [r7, #4]
 800066c:	6039      	str	r1, [r7, #0]
=======
 800060a:	2301      	movs	r3, #1
 800060c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, LTR329_I2C_ADDRESS, LTR329_ALS_CONTR, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 800060e:	2364      	movs	r3, #100	; 0x64
 8000610:	9302      	str	r3, [sp, #8]
 8000612:	2301      	movs	r3, #1
 8000614:	9301      	str	r3, [sp, #4]
 8000616:	1dfb      	adds	r3, r7, #7
 8000618:	9300      	str	r3, [sp, #0]
 800061a:	2301      	movs	r3, #1
 800061c:	2280      	movs	r2, #128	; 0x80
 800061e:	2152      	movs	r1, #82	; 0x52
 8000620:	480a      	ldr	r0, [pc, #40]	; (800064c <LTR329_Init+0x48>)
 8000622:	f001 ff6d 	bl	8002500 <HAL_I2C_Mem_Write>

    // Set measurement rate
    data = LTR329_MEAS_RATE;
 8000626:	2303      	movs	r3, #3
 8000628:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, LTR329_I2C_ADDRESS, LTR329_ALS_MEAS_RATE, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 800062a:	2364      	movs	r3, #100	; 0x64
 800062c:	9302      	str	r3, [sp, #8]
 800062e:	2301      	movs	r3, #1
 8000630:	9301      	str	r3, [sp, #4]
 8000632:	1dfb      	adds	r3, r7, #7
 8000634:	9300      	str	r3, [sp, #0]
 8000636:	2301      	movs	r3, #1
 8000638:	2285      	movs	r2, #133	; 0x85
 800063a:	2152      	movs	r1, #82	; 0x52
 800063c:	4803      	ldr	r0, [pc, #12]	; (800064c <LTR329_Init+0x48>)
 800063e:	f001 ff5f 	bl	8002500 <HAL_I2C_Mem_Write>
}
 8000642:	bf00      	nop
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	20000088 	.word	0x20000088

08000650 <LTR329_Read_Light>:

void LTR329_Read_Light(uint16_t *ch0, uint16_t *ch1) {
 8000650:	b580      	push	{r7, lr}
 8000652:	b088      	sub	sp, #32
 8000654:	af04      	add	r7, sp, #16
 8000656:	6078      	str	r0, [r7, #4]
 8000658:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
    uint8_t data[4];

    // Read 4 bytes of data starting from LTR329_ALS_DATA_CH1_0
    HAL_I2C_Mem_Read(&hi2c1, LTR329_I2C_ADDRESS, LTR329_ALS_DATA_CH1_0, I2C_MEMADD_SIZE_8BIT, data, 4, 100);
<<<<<<< Updated upstream
 800066e:	2364      	movs	r3, #100	; 0x64
 8000670:	9302      	str	r3, [sp, #8]
 8000672:	2304      	movs	r3, #4
 8000674:	9301      	str	r3, [sp, #4]
 8000676:	f107 030c 	add.w	r3, r7, #12
 800067a:	9300      	str	r3, [sp, #0]
 800067c:	2301      	movs	r3, #1
 800067e:	2288      	movs	r2, #136	; 0x88
 8000680:	2152      	movs	r1, #82	; 0x52
 8000682:	480d      	ldr	r0, [pc, #52]	; (80006b8 <LTR329_Read_Light+0x54>)
 8000684:	f001 fa62 	bl	8001b4c <HAL_I2C_Mem_Read>

    // Combine bytes to get the light data for each channel
    *ch1 = (uint16_t)(data[1] << 8) | data[0];
 8000688:	7b7b      	ldrb	r3, [r7, #13]
 800068a:	b29b      	uxth	r3, r3
 800068c:	021b      	lsls	r3, r3, #8
 800068e:	b29a      	uxth	r2, r3
 8000690:	7b3b      	ldrb	r3, [r7, #12]
 8000692:	b29b      	uxth	r3, r3
 8000694:	4313      	orrs	r3, r2
 8000696:	b29a      	uxth	r2, r3
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	801a      	strh	r2, [r3, #0]
    *ch0 = (uint16_t)(data[3] << 8) | data[2];
 800069c:	7bfb      	ldrb	r3, [r7, #15]
 800069e:	b29b      	uxth	r3, r3
 80006a0:	021b      	lsls	r3, r3, #8
 80006a2:	b29a      	uxth	r2, r3
 80006a4:	7bbb      	ldrb	r3, [r7, #14]
 80006a6:	b29b      	uxth	r3, r3
 80006a8:	4313      	orrs	r3, r2
 80006aa:	b29a      	uxth	r2, r3
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	801a      	strh	r2, [r3, #0]
}
 80006b0:	bf00      	nop
 80006b2:	3710      	adds	r7, #16
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	20000088 	.word	0x20000088

080006bc <__io_putchar>:
=======
 800065a:	2364      	movs	r3, #100	; 0x64
 800065c:	9302      	str	r3, [sp, #8]
 800065e:	2304      	movs	r3, #4
 8000660:	9301      	str	r3, [sp, #4]
 8000662:	f107 030c 	add.w	r3, r7, #12
 8000666:	9300      	str	r3, [sp, #0]
 8000668:	2301      	movs	r3, #1
 800066a:	2288      	movs	r2, #136	; 0x88
 800066c:	2152      	movs	r1, #82	; 0x52
 800066e:	480d      	ldr	r0, [pc, #52]	; (80006a4 <LTR329_Read_Light+0x54>)
 8000670:	f002 f85a 	bl	8002728 <HAL_I2C_Mem_Read>

    // Combine bytes to get the light data for each channel
    *ch1 = (uint16_t)(data[1] << 8) | data[0];
 8000674:	7b7b      	ldrb	r3, [r7, #13]
 8000676:	b29b      	uxth	r3, r3
 8000678:	021b      	lsls	r3, r3, #8
 800067a:	b29a      	uxth	r2, r3
 800067c:	7b3b      	ldrb	r3, [r7, #12]
 800067e:	b29b      	uxth	r3, r3
 8000680:	4313      	orrs	r3, r2
 8000682:	b29a      	uxth	r2, r3
 8000684:	683b      	ldr	r3, [r7, #0]
 8000686:	801a      	strh	r2, [r3, #0]
    *ch0 = (uint16_t)(data[3] << 8) | data[2];
 8000688:	7bfb      	ldrb	r3, [r7, #15]
 800068a:	b29b      	uxth	r3, r3
 800068c:	021b      	lsls	r3, r3, #8
 800068e:	b29a      	uxth	r2, r3
 8000690:	7bbb      	ldrb	r3, [r7, #14]
 8000692:	b29b      	uxth	r3, r3
 8000694:	4313      	orrs	r3, r2
 8000696:	b29a      	uxth	r2, r3
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	801a      	strh	r2, [r3, #0]
}
 800069c:	bf00      	nop
 800069e:	3710      	adds	r7, #16
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20000088 	.word	0x20000088

080006a8 <SHT40_SoftReset>:


extern I2C_HandleTypeDef hi2c1;  // Assuming you are using hi2c1

// Soft reset the SHT40 sensor
void SHT40_SoftReset() {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af02      	add	r7, sp, #8
    uint8_t command = SHT40_CMD_SOFT_RESET;
 80006ae:	2394      	movs	r3, #148	; 0x94
 80006b0:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Master_Transmit(&hi2c1, SHT40_I2C_ADDRESS, &command, 1, 100);
 80006b2:	1dfa      	adds	r2, r7, #7
 80006b4:	2364      	movs	r3, #100	; 0x64
 80006b6:	9300      	str	r3, [sp, #0]
 80006b8:	2301      	movs	r3, #1
 80006ba:	2188      	movs	r1, #136	; 0x88
 80006bc:	4804      	ldr	r0, [pc, #16]	; (80006d0 <SHT40_SoftReset+0x28>)
 80006be:	f001 fd11 	bl	80020e4 <HAL_I2C_Master_Transmit>
    HAL_Delay(5); // Delay to ensure soft reset command is processed
 80006c2:	2005      	movs	r0, #5
 80006c4:	f000 ff60 	bl	8001588 <HAL_Delay>
}
 80006c8:	bf00      	nop
 80006ca:	3708      	adds	r7, #8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	20000088 	.word	0x20000088

080006d4 <SHT40_Init>:


// Initializes the SHT40 sensor
void SHT40_Init() {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
	// Perform a soft reset to ensure the sensor is in a known state
	SHT40_SoftReset();
 80006d8:	f7ff ffe6 	bl	80006a8 <SHT40_SoftReset>
}
 80006dc:	bf00      	nop
 80006de:	bd80      	pop	{r7, pc}

080006e0 <SHT40_Read_Temp_Hum>:

// Reads temperature and humidity from the SHT40 sensor
void SHT40_Read_Temp_Hum(uint16_t *temperature, uint16_t *humidity) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b088      	sub	sp, #32
 80006e4:	af02      	add	r7, sp, #8
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	6039      	str	r1, [r7, #0]
    uint8_t data[6];  // Data buffer for temperature and humidity
    uint8_t command = SHT40_CMD_MEASURE_MEDIUM_PRECISION;
 80006ea:	23f6      	movs	r3, #246	; 0xf6
 80006ec:	72fb      	strb	r3, [r7, #11]

    // Send the command to measure temperature and humidity with highest precision
    HAL_I2C_Master_Transmit(&hi2c1, SHT40_I2C_ADDRESS, &command, 1, 100);
 80006ee:	f107 020b 	add.w	r2, r7, #11
 80006f2:	2364      	movs	r3, #100	; 0x64
 80006f4:	9300      	str	r3, [sp, #0]
 80006f6:	2301      	movs	r3, #1
 80006f8:	2188      	movs	r1, #136	; 0x88
 80006fa:	4814      	ldr	r0, [pc, #80]	; (800074c <SHT40_Read_Temp_Hum+0x6c>)
 80006fc:	f001 fcf2 	bl	80020e4 <HAL_I2C_Master_Transmit>

    // Delay to ensure the measurement is complete
    osDelay(pdMS_TO_TICKS(SHT40_MEDIUM_PRECISION_DELAY_MS));
 8000700:	2005      	movs	r0, #5
 8000702:	f005 ff4d 	bl	80065a0 <osDelay>

    // Read 6 bytes of data (2 bytes temp, 1 byte CRC, 2 bytes humidity, 1 byte CRC)
    HAL_I2C_Master_Receive(&hi2c1, SHT40_I2C_ADDRESS, data, 6, 100);
 8000706:	f107 020c 	add.w	r2, r7, #12
 800070a:	2364      	movs	r3, #100	; 0x64
 800070c:	9300      	str	r3, [sp, #0]
 800070e:	2306      	movs	r3, #6
 8000710:	2188      	movs	r1, #136	; 0x88
 8000712:	480e      	ldr	r0, [pc, #56]	; (800074c <SHT40_Read_Temp_Hum+0x6c>)
 8000714:	f001 fdfe 	bl	8002314 <HAL_I2C_Master_Receive>

    // Convert the raw values to temperature and humidity
    uint16_t rawTemp = ((uint16_t)data[0] << 8) | data[1];
 8000718:	7b3b      	ldrb	r3, [r7, #12]
 800071a:	021b      	lsls	r3, r3, #8
 800071c:	b21a      	sxth	r2, r3
 800071e:	7b7b      	ldrb	r3, [r7, #13]
 8000720:	b21b      	sxth	r3, r3
 8000722:	4313      	orrs	r3, r2
 8000724:	b21b      	sxth	r3, r3
 8000726:	82fb      	strh	r3, [r7, #22]
    uint16_t rawHumidity = ((uint16_t)data[3] << 8) | data[4];
 8000728:	7bfb      	ldrb	r3, [r7, #15]
 800072a:	021b      	lsls	r3, r3, #8
 800072c:	b21a      	sxth	r2, r3
 800072e:	7c3b      	ldrb	r3, [r7, #16]
 8000730:	b21b      	sxth	r3, r3
 8000732:	4313      	orrs	r3, r2
 8000734:	b21b      	sxth	r3, r3
 8000736:	82bb      	strh	r3, [r7, #20]

    // Calculate the temperature and humidity values according to the datasheet
    *temperature = rawTemp;  // Convert to degrees Celsius
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	8afa      	ldrh	r2, [r7, #22]
 800073c:	801a      	strh	r2, [r3, #0]
    *humidity = rawHumidity;          // Convert to %RH
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	8aba      	ldrh	r2, [r7, #20]
 8000742:	801a      	strh	r2, [r3, #0]
}
 8000744:	bf00      	nop
 8000746:	3718      	adds	r7, #24
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000088 	.word	0x20000088

08000750 <__io_putchar>:
>>>>>>> Stashed changes
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE {
<<<<<<< Updated upstream
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 80006c4:	1d39      	adds	r1, r7, #4
 80006c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006ca:	2201      	movs	r2, #1
 80006cc:	4803      	ldr	r0, [pc, #12]	; (80006dc <__io_putchar+0x20>)
 80006ce:	f003 fa19 	bl	8003b04 <HAL_UART_Transmit>
	return ch;
 80006d2:	687b      	ldr	r3, [r7, #4]
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	20000164 	.word	0x20000164

080006e0 <main>:
=======
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 8000758:	1d39      	adds	r1, r7, #4
 800075a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800075e:	2201      	movs	r2, #1
 8000760:	4803      	ldr	r0, [pc, #12]	; (8000770 <__io_putchar+0x20>)
 8000762:	f004 f83f 	bl	80047e4 <HAL_UART_Transmit>
	return ch;
 8000766:	687b      	ldr	r3, [r7, #4]
}
 8000768:	4618      	mov	r0, r3
 800076a:	3708      	adds	r7, #8
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20000164 	.word	0x20000164

08000774 <main>:
>>>>>>> Stashed changes
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
<<<<<<< Updated upstream
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
=======
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
<<<<<<< Updated upstream
 80006e4:	f000 fd5d 	bl	80011a2 <HAL_Init>
=======
 8000778:	f000 fecd 	bl	8001516 <HAL_Init>
>>>>>>> Stashed changes
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
<<<<<<< Updated upstream
 80006e8:	f000 f874 	bl	80007d4 <SystemClock_Config>
=======
 800077c:	f000 f872 	bl	8000864 <SystemClock_Config>
>>>>>>> Stashed changes
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
<<<<<<< Updated upstream
 80006ec:	f000 f968 	bl	80009c0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006f0:	f000 f936 	bl	8000960 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80006f4:	f000 f8c4 	bl	8000880 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80006f8:	f000 f902 	bl	8000900 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, uart2_buffer, 1);
 80006fc:	2201      	movs	r2, #1
 80006fe:	4920      	ldr	r1, [pc, #128]	; (8000780 <main+0xa0>)
 8000700:	4820      	ldr	r0, [pc, #128]	; (8000784 <main+0xa4>)
 8000702:	f003 fa89 	bl	8003c18 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart1, uart1_buffer, 1);
 8000706:	2201      	movs	r2, #1
 8000708:	491f      	ldr	r1, [pc, #124]	; (8000788 <main+0xa8>)
 800070a:	4820      	ldr	r0, [pc, #128]	; (800078c <main+0xac>)
 800070c:	f003 fa84 	bl	8003c18 <HAL_UART_Receive_IT>
  printf("Setup complete\n");
 8000710:	481f      	ldr	r0, [pc, #124]	; (8000790 <main+0xb0>)
 8000712:	f007 fca3 	bl	800805c <puts>
=======
 8000780:	f000 f984 	bl	8000a8c <MX_GPIO_Init>
  MX_DMA_Init();
 8000784:	f000 f964 	bl	8000a50 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000788:	f000 f932 	bl	80009f0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800078c:	f000 f8c0 	bl	8000910 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000790:	f000 f8fe 	bl	8000990 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  LTR329_Init();
 8000794:	f7ff ff36 	bl	8000604 <LTR329_Init>
  SHT40_Init();
 8000798:	f7ff ff9c 	bl	80006d4 <SHT40_Init>
>>>>>>> Stashed changes

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
<<<<<<< Updated upstream
 8000716:	f004 fd55 	bl	80051c4 <osKernelInitialize>
=======
 800079c:	f005 fe24 	bl	80063e8 <osKernelInitialize>
>>>>>>> Stashed changes
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of uart1Queue */
  uart1QueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &uart1Queue_attributes);
<<<<<<< Updated upstream
 800071a:	4a1e      	ldr	r2, [pc, #120]	; (8000794 <main+0xb4>)
 800071c:	2102      	movs	r1, #2
 800071e:	2010      	movs	r0, #16
 8000720:	f004 fe47 	bl	80053b2 <osMessageQueueNew>
 8000724:	4603      	mov	r3, r0
 8000726:	4a1c      	ldr	r2, [pc, #112]	; (8000798 <main+0xb8>)
 8000728:	6013      	str	r3, [r2, #0]

  /* creation of uart2Queue */
  uart2QueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &uart2Queue_attributes);
 800072a:	4a1c      	ldr	r2, [pc, #112]	; (800079c <main+0xbc>)
 800072c:	2102      	movs	r1, #2
 800072e:	2010      	movs	r0, #16
 8000730:	f004 fe3f 	bl	80053b2 <osMessageQueueNew>
 8000734:	4603      	mov	r3, r0
 8000736:	4a1a      	ldr	r2, [pc, #104]	; (80007a0 <main+0xc0>)
 8000738:	6013      	str	r3, [r2, #0]
=======
 80007a0:	4a1d      	ldr	r2, [pc, #116]	; (8000818 <main+0xa4>)
 80007a2:	2102      	movs	r1, #2
 80007a4:	2010      	movs	r0, #16
 80007a6:	f005 ff16 	bl	80065d6 <osMessageQueueNew>
 80007aa:	4603      	mov	r3, r0
 80007ac:	4a1b      	ldr	r2, [pc, #108]	; (800081c <main+0xa8>)
 80007ae:	6013      	str	r3, [r2, #0]

  /* creation of uart2Queue */
  uart2QueueHandle = osMessageQueueNew (2, sizeof(Dash7ToSTM32Message), &uart2Queue_attributes);
 80007b0:	4a1b      	ldr	r2, [pc, #108]	; (8000820 <main+0xac>)
 80007b2:	2107      	movs	r1, #7
 80007b4:	2002      	movs	r0, #2
 80007b6:	f005 ff0e 	bl	80065d6 <osMessageQueueNew>
 80007ba:	4603      	mov	r3, r0
 80007bc:	4a19      	ldr	r2, [pc, #100]	; (8000824 <main+0xb0>)
 80007be:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
<<<<<<< Updated upstream
 800073a:	4a1a      	ldr	r2, [pc, #104]	; (80007a4 <main+0xc4>)
 800073c:	2100      	movs	r1, #0
 800073e:	481a      	ldr	r0, [pc, #104]	; (80007a8 <main+0xc8>)
 8000740:	f004 fd8a 	bl	8005258 <osThreadNew>
 8000744:	4603      	mov	r3, r0
 8000746:	4a19      	ldr	r2, [pc, #100]	; (80007ac <main+0xcc>)
 8000748:	6013      	str	r3, [r2, #0]

  /* creation of UART2Task */
  UART2TaskHandle = osThreadNew(UART2_Task, NULL, &UART2Task_attributes);
 800074a:	4a19      	ldr	r2, [pc, #100]	; (80007b0 <main+0xd0>)
 800074c:	2100      	movs	r1, #0
 800074e:	4819      	ldr	r0, [pc, #100]	; (80007b4 <main+0xd4>)
 8000750:	f004 fd82 	bl	8005258 <osThreadNew>
 8000754:	4603      	mov	r3, r0
 8000756:	4a18      	ldr	r2, [pc, #96]	; (80007b8 <main+0xd8>)
 8000758:	6013      	str	r3, [r2, #0]

  /* creation of UART1Task */
  UART1TaskHandle = osThreadNew(UART1_Task, NULL, &UART1Task_attributes);
 800075a:	4a18      	ldr	r2, [pc, #96]	; (80007bc <main+0xdc>)
 800075c:	2100      	movs	r1, #0
 800075e:	4818      	ldr	r0, [pc, #96]	; (80007c0 <main+0xe0>)
 8000760:	f004 fd7a 	bl	8005258 <osThreadNew>
 8000764:	4603      	mov	r3, r0
 8000766:	4a17      	ldr	r2, [pc, #92]	; (80007c4 <main+0xe4>)
 8000768:	6013      	str	r3, [r2, #0]

  /* creation of LightSensor_Tas */
  LightSensor_TasHandle = osThreadNew(LightSensorTask, NULL, &LightSensor_Tas_attributes);
 800076a:	4a17      	ldr	r2, [pc, #92]	; (80007c8 <main+0xe8>)
 800076c:	2100      	movs	r1, #0
 800076e:	4817      	ldr	r0, [pc, #92]	; (80007cc <main+0xec>)
 8000770:	f004 fd72 	bl	8005258 <osThreadNew>
 8000774:	4603      	mov	r3, r0
 8000776:	4a16      	ldr	r2, [pc, #88]	; (80007d0 <main+0xf0>)
 8000778:	6013      	str	r3, [r2, #0]
=======
 80007c0:	4a19      	ldr	r2, [pc, #100]	; (8000828 <main+0xb4>)
 80007c2:	2100      	movs	r1, #0
 80007c4:	4819      	ldr	r0, [pc, #100]	; (800082c <main+0xb8>)
 80007c6:	f005 fe59 	bl	800647c <osThreadNew>
 80007ca:	4603      	mov	r3, r0
 80007cc:	4a18      	ldr	r2, [pc, #96]	; (8000830 <main+0xbc>)
 80007ce:	6013      	str	r3, [r2, #0]

  /* creation of UART2Task */
  UART2TaskHandle = osThreadNew(UART2_Task, NULL, &UART2Task_attributes);
 80007d0:	4a18      	ldr	r2, [pc, #96]	; (8000834 <main+0xc0>)
 80007d2:	2100      	movs	r1, #0
 80007d4:	4818      	ldr	r0, [pc, #96]	; (8000838 <main+0xc4>)
 80007d6:	f005 fe51 	bl	800647c <osThreadNew>
 80007da:	4603      	mov	r3, r0
 80007dc:	4a17      	ldr	r2, [pc, #92]	; (800083c <main+0xc8>)
 80007de:	6013      	str	r3, [r2, #0]

  /* creation of UART1Task */
  UART1TaskHandle = osThreadNew(UART1_Task, NULL, &UART1Task_attributes);
 80007e0:	4a17      	ldr	r2, [pc, #92]	; (8000840 <main+0xcc>)
 80007e2:	2100      	movs	r1, #0
 80007e4:	4817      	ldr	r0, [pc, #92]	; (8000844 <main+0xd0>)
 80007e6:	f005 fe49 	bl	800647c <osThreadNew>
 80007ea:	4603      	mov	r3, r0
 80007ec:	4a16      	ldr	r2, [pc, #88]	; (8000848 <main+0xd4>)
 80007ee:	6013      	str	r3, [r2, #0]

  /* creation of LightSensor_Tas */
  LightSensor_TasHandle = osThreadNew(LightSensorTask, NULL, &LightSensor_Tas_attributes);
 80007f0:	4a16      	ldr	r2, [pc, #88]	; (800084c <main+0xd8>)
 80007f2:	2100      	movs	r1, #0
 80007f4:	4816      	ldr	r0, [pc, #88]	; (8000850 <main+0xdc>)
 80007f6:	f005 fe41 	bl	800647c <osThreadNew>
 80007fa:	4603      	mov	r3, r0
 80007fc:	4a15      	ldr	r2, [pc, #84]	; (8000854 <main+0xe0>)
 80007fe:	6013      	str	r3, [r2, #0]

  /* creation of Temp_Task */
  Temp_TaskHandle = osThreadNew(TempTask, NULL, &Temp_Task_attributes);
 8000800:	4a15      	ldr	r2, [pc, #84]	; (8000858 <main+0xe4>)
 8000802:	2100      	movs	r1, #0
 8000804:	4815      	ldr	r0, [pc, #84]	; (800085c <main+0xe8>)
 8000806:	f005 fe39 	bl	800647c <osThreadNew>
 800080a:	4603      	mov	r3, r0
 800080c:	4a14      	ldr	r2, [pc, #80]	; (8000860 <main+0xec>)
 800080e:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
<<<<<<< Updated upstream
 800077a:	f004 fd47 	bl	800520c <osKernelStart>
=======
 8000810:	f005 fe0e 	bl	8006430 <osKernelStart>
>>>>>>> Stashed changes

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
<<<<<<< Updated upstream
 800077e:	e7fe      	b.n	800077e <main+0x9e>
 8000780:	20000208 	.word	0x20000208
 8000784:	20000164 	.word	0x20000164
 8000788:	20000204 	.word	0x20000204
 800078c:	200000dc 	.word	0x200000dc
 8000790:	08008e5c 	.word	0x08008e5c
 8000794:	08008f18 	.word	0x08008f18
 8000798:	200001fc 	.word	0x200001fc
 800079c:	08008f30 	.word	0x08008f30
 80007a0:	20000200 	.word	0x20000200
 80007a4:	08008e88 	.word	0x08008e88
 80007a8:	08000acd 	.word	0x08000acd
 80007ac:	200001ec 	.word	0x200001ec
 80007b0:	08008eac 	.word	0x08008eac
 80007b4:	08000add 	.word	0x08000add
 80007b8:	200001f0 	.word	0x200001f0
 80007bc:	08008ed0 	.word	0x08008ed0
 80007c0:	08000b61 	.word	0x08000b61
 80007c4:	200001f4 	.word	0x200001f4
 80007c8:	08008ef4 	.word	0x08008ef4
 80007cc:	08000bd9 	.word	0x08000bd9
 80007d0:	200001f8 	.word	0x200001f8

080007d4 <SystemClock_Config>:
=======
 8000814:	e7fe      	b.n	8000814 <main+0xa0>
 8000816:	bf00      	nop
 8000818:	0800a260 	.word	0x0800a260
 800081c:	20000248 	.word	0x20000248
 8000820:	0800a278 	.word	0x0800a278
 8000824:	2000024c 	.word	0x2000024c
 8000828:	0800a1ac 	.word	0x0800a1ac
 800082c:	08000d25 	.word	0x08000d25
 8000830:	20000234 	.word	0x20000234
 8000834:	0800a1d0 	.word	0x0800a1d0
 8000838:	08000d65 	.word	0x08000d65
 800083c:	20000238 	.word	0x20000238
 8000840:	0800a1f4 	.word	0x0800a1f4
 8000844:	08000ded 	.word	0x08000ded
 8000848:	2000023c 	.word	0x2000023c
 800084c:	0800a218 	.word	0x0800a218
 8000850:	08000dfd 	.word	0x08000dfd
 8000854:	20000240 	.word	0x20000240
 8000858:	0800a23c 	.word	0x0800a23c
 800085c:	08000e49 	.word	0x08000e49
 8000860:	20000244 	.word	0x20000244

08000864 <SystemClock_Config>:
>>>>>>> Stashed changes
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
<<<<<<< Updated upstream
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b096      	sub	sp, #88	; 0x58
 80007d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007da:	f107 0314 	add.w	r3, r7, #20
 80007de:	2244      	movs	r2, #68	; 0x44
 80007e0:	2100      	movs	r1, #0
 80007e2:	4618      	mov	r0, r3
 80007e4:	f007 fc42 	bl	800806c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e8:	463b      	mov	r3, r7
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]
 80007f2:	60da      	str	r2, [r3, #12]
 80007f4:	611a      	str	r2, [r3, #16]
=======
 8000864:	b580      	push	{r7, lr}
 8000866:	b096      	sub	sp, #88	; 0x58
 8000868:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800086a:	f107 0314 	add.w	r3, r7, #20
 800086e:	2244      	movs	r2, #68	; 0x44
 8000870:	2100      	movs	r1, #0
 8000872:	4618      	mov	r0, r3
 8000874:	f008 fd12 	bl	800929c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000878:	463b      	mov	r3, r7
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]
 8000882:	60da      	str	r2, [r3, #12]
 8000884:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
<<<<<<< Updated upstream
 80007f6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007fa:	f001 fe2f 	bl	800245c <HAL_PWREx_ControlVoltageScaling>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000804:	f000 fa12 	bl	8000c2c <Error_Handler>
=======
 8000886:	f44f 7000 	mov.w	r0, #512	; 0x200
 800088a:	f002 fc57 	bl	800313c <HAL_PWREx_ControlVoltageScaling>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000894:	f000 fb4c 	bl	8000f30 <Error_Handler>
>>>>>>> Stashed changes
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
<<<<<<< Updated upstream
 8000808:	f001 fe0a 	bl	8002420 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800080c:	4b1b      	ldr	r3, [pc, #108]	; (800087c <SystemClock_Config+0xa8>)
 800080e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000812:	4a1a      	ldr	r2, [pc, #104]	; (800087c <SystemClock_Config+0xa8>)
 8000814:	f023 0318 	bic.w	r3, r3, #24
 8000818:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
=======
 8000898:	f002 fc32 	bl	8003100 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800089c:	4b1b      	ldr	r3, [pc, #108]	; (800090c <SystemClock_Config+0xa8>)
 800089e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80008a2:	4a1a      	ldr	r2, [pc, #104]	; (800090c <SystemClock_Config+0xa8>)
 80008a4:	f023 0318 	bic.w	r3, r3, #24
 80008a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
>>>>>>> Stashed changes

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
<<<<<<< Updated upstream
 800081c:	2314      	movs	r3, #20
 800081e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000820:	2301      	movs	r3, #1
 8000822:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000824:	2301      	movs	r3, #1
 8000826:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000828:	2300      	movs	r3, #0
 800082a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 800082c:	23a0      	movs	r3, #160	; 0xa0
 800082e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000830:	2300      	movs	r3, #0
 8000832:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000834:	f107 0314 	add.w	r3, r7, #20
 8000838:	4618      	mov	r0, r3
 800083a:	f001 fe65 	bl	8002508 <HAL_RCC_OscConfig>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000844:	f000 f9f2 	bl	8000c2c <Error_Handler>
=======
 80008ac:	2314      	movs	r3, #20
 80008ae:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80008b0:	2301      	movs	r3, #1
 80008b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80008b4:	2301      	movs	r3, #1
 80008b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80008b8:	2300      	movs	r3, #0
 80008ba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 80008bc:	23a0      	movs	r3, #160	; 0xa0
 80008be:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008c0:	2300      	movs	r3, #0
 80008c2:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c4:	f107 0314 	add.w	r3, r7, #20
 80008c8:	4618      	mov	r0, r3
 80008ca:	f002 fc8d 	bl	80031e8 <HAL_RCC_OscConfig>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80008d4:	f000 fb2c 	bl	8000f30 <Error_Handler>
>>>>>>> Stashed changes
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
<<<<<<< Updated upstream
 8000848:	230f      	movs	r3, #15
 800084a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800084c:	2300      	movs	r3, #0
 800084e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000850:	2300      	movs	r3, #0
 8000852:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000854:	2300      	movs	r3, #0
 8000856:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000858:	2300      	movs	r3, #0
 800085a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800085c:	463b      	mov	r3, r7
 800085e:	2101      	movs	r1, #1
 8000860:	4618      	mov	r0, r3
 8000862:	f002 fab3 	bl	8002dcc <HAL_RCC_ClockConfig>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800086c:	f000 f9de 	bl	8000c2c <Error_Handler>
=======
 80008d8:	230f      	movs	r3, #15
 80008da:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80008dc:	2300      	movs	r3, #0
 80008de:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008e0:	2300      	movs	r3, #0
 80008e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008e4:	2300      	movs	r3, #0
 80008e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008e8:	2300      	movs	r3, #0
 80008ea:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008ec:	463b      	mov	r3, r7
 80008ee:	2101      	movs	r1, #1
 80008f0:	4618      	mov	r0, r3
 80008f2:	f003 f8db 	bl	8003aac <HAL_RCC_ClockConfig>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80008fc:	f000 fb18 	bl	8000f30 <Error_Handler>
>>>>>>> Stashed changes
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
<<<<<<< Updated upstream
 8000870:	f002 fe88 	bl	8003584 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000874:	bf00      	nop
 8000876:	3758      	adds	r7, #88	; 0x58
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	40021000 	.word	0x40021000

08000880 <MX_I2C1_Init>:
=======
 8000900:	f003 fcb0 	bl	8004264 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000904:	bf00      	nop
 8000906:	3758      	adds	r7, #88	; 0x58
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	40021000 	.word	0x40021000

08000910 <MX_I2C1_Init>:
>>>>>>> Stashed changes
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
<<<<<<< Updated upstream
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
=======
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
<<<<<<< Updated upstream
 8000884:	4b1b      	ldr	r3, [pc, #108]	; (80008f4 <MX_I2C1_Init+0x74>)
 8000886:	4a1c      	ldr	r2, [pc, #112]	; (80008f8 <MX_I2C1_Init+0x78>)
 8000888:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 800088a:	4b1a      	ldr	r3, [pc, #104]	; (80008f4 <MX_I2C1_Init+0x74>)
 800088c:	4a1b      	ldr	r2, [pc, #108]	; (80008fc <MX_I2C1_Init+0x7c>)
 800088e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000890:	4b18      	ldr	r3, [pc, #96]	; (80008f4 <MX_I2C1_Init+0x74>)
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000896:	4b17      	ldr	r3, [pc, #92]	; (80008f4 <MX_I2C1_Init+0x74>)
 8000898:	2201      	movs	r2, #1
 800089a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800089c:	4b15      	ldr	r3, [pc, #84]	; (80008f4 <MX_I2C1_Init+0x74>)
 800089e:	2200      	movs	r2, #0
 80008a0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008a2:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <MX_I2C1_Init+0x74>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008a8:	4b12      	ldr	r3, [pc, #72]	; (80008f4 <MX_I2C1_Init+0x74>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008ae:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <MX_I2C1_Init+0x74>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008b4:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <MX_I2C1_Init+0x74>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008ba:	480e      	ldr	r0, [pc, #56]	; (80008f4 <MX_I2C1_Init+0x74>)
 80008bc:	f000 ff96 	bl	80017ec <HAL_I2C_Init>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008c6:	f000 f9b1 	bl	8000c2c <Error_Handler>
=======
 8000914:	4b1b      	ldr	r3, [pc, #108]	; (8000984 <MX_I2C1_Init+0x74>)
 8000916:	4a1c      	ldr	r2, [pc, #112]	; (8000988 <MX_I2C1_Init+0x78>)
 8000918:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 800091a:	4b1a      	ldr	r3, [pc, #104]	; (8000984 <MX_I2C1_Init+0x74>)
 800091c:	4a1b      	ldr	r2, [pc, #108]	; (800098c <MX_I2C1_Init+0x7c>)
 800091e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000920:	4b18      	ldr	r3, [pc, #96]	; (8000984 <MX_I2C1_Init+0x74>)
 8000922:	2200      	movs	r2, #0
 8000924:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000926:	4b17      	ldr	r3, [pc, #92]	; (8000984 <MX_I2C1_Init+0x74>)
 8000928:	2201      	movs	r2, #1
 800092a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800092c:	4b15      	ldr	r3, [pc, #84]	; (8000984 <MX_I2C1_Init+0x74>)
 800092e:	2200      	movs	r2, #0
 8000930:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000932:	4b14      	ldr	r3, [pc, #80]	; (8000984 <MX_I2C1_Init+0x74>)
 8000934:	2200      	movs	r2, #0
 8000936:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000938:	4b12      	ldr	r3, [pc, #72]	; (8000984 <MX_I2C1_Init+0x74>)
 800093a:	2200      	movs	r2, #0
 800093c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800093e:	4b11      	ldr	r3, [pc, #68]	; (8000984 <MX_I2C1_Init+0x74>)
 8000940:	2200      	movs	r2, #0
 8000942:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000944:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <MX_I2C1_Init+0x74>)
 8000946:	2200      	movs	r2, #0
 8000948:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800094a:	480e      	ldr	r0, [pc, #56]	; (8000984 <MX_I2C1_Init+0x74>)
 800094c:	f001 fb2e 	bl	8001fac <HAL_I2C_Init>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000956:	f000 faeb 	bl	8000f30 <Error_Handler>
>>>>>>> Stashed changes
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
<<<<<<< Updated upstream
 80008ca:	2100      	movs	r1, #0
 80008cc:	4809      	ldr	r0, [pc, #36]	; (80008f4 <MX_I2C1_Init+0x74>)
 80008ce:	f001 fd0f 	bl	80022f0 <HAL_I2CEx_ConfigAnalogFilter>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008d8:	f000 f9a8 	bl	8000c2c <Error_Handler>
=======
 800095a:	2100      	movs	r1, #0
 800095c:	4809      	ldr	r0, [pc, #36]	; (8000984 <MX_I2C1_Init+0x74>)
 800095e:	f002 fb37 	bl	8002fd0 <HAL_I2CEx_ConfigAnalogFilter>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000968:	f000 fae2 	bl	8000f30 <Error_Handler>
>>>>>>> Stashed changes
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
<<<<<<< Updated upstream
 80008dc:	2100      	movs	r1, #0
 80008de:	4805      	ldr	r0, [pc, #20]	; (80008f4 <MX_I2C1_Init+0x74>)
 80008e0:	f001 fd51 	bl	8002386 <HAL_I2CEx_ConfigDigitalFilter>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008ea:	f000 f99f 	bl	8000c2c <Error_Handler>
=======
 800096c:	2100      	movs	r1, #0
 800096e:	4805      	ldr	r0, [pc, #20]	; (8000984 <MX_I2C1_Init+0x74>)
 8000970:	f002 fb79 	bl	8003066 <HAL_I2CEx_ConfigDigitalFilter>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800097a:	f000 fad9 	bl	8000f30 <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
<<<<<<< Updated upstream
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	20000088 	.word	0x20000088
 80008f8:	40005400 	.word	0x40005400
 80008fc:	00707cbb 	.word	0x00707cbb

08000900 <MX_USART1_UART_Init>:
=======
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	20000088 	.word	0x20000088
 8000988:	40005400 	.word	0x40005400
 800098c:	00707cbb 	.word	0x00707cbb

08000990 <MX_USART1_UART_Init>:
>>>>>>> Stashed changes
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
<<<<<<< Updated upstream
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
=======
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
<<<<<<< Updated upstream
 8000904:	4b14      	ldr	r3, [pc, #80]	; (8000958 <MX_USART1_UART_Init+0x58>)
 8000906:	4a15      	ldr	r2, [pc, #84]	; (800095c <MX_USART1_UART_Init+0x5c>)
 8000908:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 800090a:	4b13      	ldr	r3, [pc, #76]	; (8000958 <MX_USART1_UART_Init+0x58>)
 800090c:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8000910:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000912:	4b11      	ldr	r3, [pc, #68]	; (8000958 <MX_USART1_UART_Init+0x58>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000918:	4b0f      	ldr	r3, [pc, #60]	; (8000958 <MX_USART1_UART_Init+0x58>)
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800091e:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <MX_USART1_UART_Init+0x58>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000924:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <MX_USART1_UART_Init+0x58>)
 8000926:	220c      	movs	r2, #12
 8000928:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800092a:	4b0b      	ldr	r3, [pc, #44]	; (8000958 <MX_USART1_UART_Init+0x58>)
 800092c:	2200      	movs	r2, #0
 800092e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000930:	4b09      	ldr	r3, [pc, #36]	; (8000958 <MX_USART1_UART_Init+0x58>)
 8000932:	2200      	movs	r2, #0
 8000934:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000936:	4b08      	ldr	r3, [pc, #32]	; (8000958 <MX_USART1_UART_Init+0x58>)
 8000938:	2200      	movs	r2, #0
 800093a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800093c:	4b06      	ldr	r3, [pc, #24]	; (8000958 <MX_USART1_UART_Init+0x58>)
 800093e:	2200      	movs	r2, #0
 8000940:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000942:	4805      	ldr	r0, [pc, #20]	; (8000958 <MX_USART1_UART_Init+0x58>)
 8000944:	f003 f890 	bl	8003a68 <HAL_UART_Init>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800094e:	f000 f96d 	bl	8000c2c <Error_Handler>
=======
 8000994:	4b14      	ldr	r3, [pc, #80]	; (80009e8 <MX_USART1_UART_Init+0x58>)
 8000996:	4a15      	ldr	r2, [pc, #84]	; (80009ec <MX_USART1_UART_Init+0x5c>)
 8000998:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 800099a:	4b13      	ldr	r3, [pc, #76]	; (80009e8 <MX_USART1_UART_Init+0x58>)
 800099c:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 80009a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009a2:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <MX_USART1_UART_Init+0x58>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009a8:	4b0f      	ldr	r3, [pc, #60]	; (80009e8 <MX_USART1_UART_Init+0x58>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009ae:	4b0e      	ldr	r3, [pc, #56]	; (80009e8 <MX_USART1_UART_Init+0x58>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009b4:	4b0c      	ldr	r3, [pc, #48]	; (80009e8 <MX_USART1_UART_Init+0x58>)
 80009b6:	220c      	movs	r2, #12
 80009b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ba:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <MX_USART1_UART_Init+0x58>)
 80009bc:	2200      	movs	r2, #0
 80009be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c0:	4b09      	ldr	r3, [pc, #36]	; (80009e8 <MX_USART1_UART_Init+0x58>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009c6:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <MX_USART1_UART_Init+0x58>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009cc:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <MX_USART1_UART_Init+0x58>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009d2:	4805      	ldr	r0, [pc, #20]	; (80009e8 <MX_USART1_UART_Init+0x58>)
 80009d4:	f003 feb8 	bl	8004748 <HAL_UART_Init>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80009de:	f000 faa7 	bl	8000f30 <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
<<<<<<< Updated upstream
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	200000dc 	.word	0x200000dc
 800095c:	40013800 	.word	0x40013800

08000960 <MX_USART2_UART_Init>:
=======
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	200000dc 	.word	0x200000dc
 80009ec:	40013800 	.word	0x40013800

080009f0 <MX_USART2_UART_Init>:
>>>>>>> Stashed changes
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
<<<<<<< Updated upstream
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
=======
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
<<<<<<< Updated upstream
 8000964:	4b14      	ldr	r3, [pc, #80]	; (80009b8 <MX_USART2_UART_Init+0x58>)
 8000966:	4a15      	ldr	r2, [pc, #84]	; (80009bc <MX_USART2_UART_Init+0x5c>)
 8000968:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800096a:	4b13      	ldr	r3, [pc, #76]	; (80009b8 <MX_USART2_UART_Init+0x58>)
 800096c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000970:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000972:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <MX_USART2_UART_Init+0x58>)
 8000974:	2200      	movs	r2, #0
 8000976:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000978:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <MX_USART2_UART_Init+0x58>)
 800097a:	2200      	movs	r2, #0
 800097c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800097e:	4b0e      	ldr	r3, [pc, #56]	; (80009b8 <MX_USART2_UART_Init+0x58>)
 8000980:	2200      	movs	r2, #0
 8000982:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000984:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <MX_USART2_UART_Init+0x58>)
 8000986:	220c      	movs	r2, #12
 8000988:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800098a:	4b0b      	ldr	r3, [pc, #44]	; (80009b8 <MX_USART2_UART_Init+0x58>)
 800098c:	2200      	movs	r2, #0
 800098e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000990:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <MX_USART2_UART_Init+0x58>)
 8000992:	2200      	movs	r2, #0
 8000994:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000996:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <MX_USART2_UART_Init+0x58>)
 8000998:	2200      	movs	r2, #0
 800099a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800099c:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <MX_USART2_UART_Init+0x58>)
 800099e:	2200      	movs	r2, #0
 80009a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009a2:	4805      	ldr	r0, [pc, #20]	; (80009b8 <MX_USART2_UART_Init+0x58>)
 80009a4:	f003 f860 	bl	8003a68 <HAL_UART_Init>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009ae:	f000 f93d 	bl	8000c2c <Error_Handler>
=======
 80009f4:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <MX_USART2_UART_Init+0x58>)
 80009f6:	4a15      	ldr	r2, [pc, #84]	; (8000a4c <MX_USART2_UART_Init+0x5c>)
 80009f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009fa:	4b13      	ldr	r3, [pc, #76]	; (8000a48 <MX_USART2_UART_Init+0x58>)
 80009fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a02:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <MX_USART2_UART_Init+0x58>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a08:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <MX_USART2_UART_Init+0x58>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	; (8000a48 <MX_USART2_UART_Init+0x58>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a14:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <MX_USART2_UART_Init+0x58>)
 8000a16:	220c      	movs	r2, #12
 8000a18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a1a:	4b0b      	ldr	r3, [pc, #44]	; (8000a48 <MX_USART2_UART_Init+0x58>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a20:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <MX_USART2_UART_Init+0x58>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a26:	4b08      	ldr	r3, [pc, #32]	; (8000a48 <MX_USART2_UART_Init+0x58>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a2c:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <MX_USART2_UART_Init+0x58>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a32:	4805      	ldr	r0, [pc, #20]	; (8000a48 <MX_USART2_UART_Init+0x58>)
 8000a34:	f003 fe88 	bl	8004748 <HAL_UART_Init>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a3e:	f000 fa77 	bl	8000f30 <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
<<<<<<< Updated upstream
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	20000164 	.word	0x20000164
 80009bc:	40004400 	.word	0x40004400

080009c0 <MX_GPIO_Init>:
=======
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	20000164 	.word	0x20000164
 8000a4c:	40004400 	.word	0x40004400

08000a50 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a56:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <MX_DMA_Init+0x38>)
 8000a58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a5a:	4a0b      	ldr	r2, [pc, #44]	; (8000a88 <MX_DMA_Init+0x38>)
 8000a5c:	f043 0301 	orr.w	r3, r3, #1
 8000a60:	6493      	str	r3, [r2, #72]	; 0x48
 8000a62:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <MX_DMA_Init+0x38>)
 8000a64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	607b      	str	r3, [r7, #4]
 8000a6c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	2105      	movs	r1, #5
 8000a72:	200f      	movs	r0, #15
 8000a74:	f000 fe64 	bl	8001740 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000a78:	200f      	movs	r0, #15
 8000a7a:	f000 fe7d 	bl	8001778 <HAL_NVIC_EnableIRQ>

}
 8000a7e:	bf00      	nop
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40021000 	.word	0x40021000

08000a8c <MX_GPIO_Init>:
>>>>>>> Stashed changes
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
<<<<<<< Updated upstream
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b088      	sub	sp, #32
 80009c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c6:	f107 030c 	add.w	r3, r7, #12
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	605a      	str	r2, [r3, #4]
 80009d0:	609a      	str	r2, [r3, #8]
 80009d2:	60da      	str	r2, [r3, #12]
 80009d4:	611a      	str	r2, [r3, #16]
=======
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b088      	sub	sp, #32
 8000a90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a92:	f107 030c 	add.w	r3, r7, #12
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	605a      	str	r2, [r3, #4]
 8000a9c:	609a      	str	r2, [r3, #8]
 8000a9e:	60da      	str	r2, [r3, #12]
 8000aa0:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
<<<<<<< Updated upstream
 80009d6:	4b1d      	ldr	r3, [pc, #116]	; (8000a4c <MX_GPIO_Init+0x8c>)
 80009d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009da:	4a1c      	ldr	r2, [pc, #112]	; (8000a4c <MX_GPIO_Init+0x8c>)
 80009dc:	f043 0304 	orr.w	r3, r3, #4
 80009e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009e2:	4b1a      	ldr	r3, [pc, #104]	; (8000a4c <MX_GPIO_Init+0x8c>)
 80009e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e6:	f003 0304 	and.w	r3, r3, #4
 80009ea:	60bb      	str	r3, [r7, #8]
 80009ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ee:	4b17      	ldr	r3, [pc, #92]	; (8000a4c <MX_GPIO_Init+0x8c>)
 80009f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f2:	4a16      	ldr	r2, [pc, #88]	; (8000a4c <MX_GPIO_Init+0x8c>)
 80009f4:	f043 0301 	orr.w	r3, r3, #1
 80009f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009fa:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <MX_GPIO_Init+0x8c>)
 80009fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009fe:	f003 0301 	and.w	r3, r3, #1
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a06:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <MX_GPIO_Init+0x8c>)
 8000a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0a:	4a10      	ldr	r2, [pc, #64]	; (8000a4c <MX_GPIO_Init+0x8c>)
 8000a0c:	f043 0302 	orr.w	r3, r3, #2
 8000a10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a12:	4b0e      	ldr	r3, [pc, #56]	; (8000a4c <MX_GPIO_Init+0x8c>)
 8000a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a16:	f003 0302 	and.w	r3, r3, #2
 8000a1a:	603b      	str	r3, [r7, #0]
 8000a1c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2108      	movs	r1, #8
 8000a22:	480b      	ldr	r0, [pc, #44]	; (8000a50 <MX_GPIO_Init+0x90>)
 8000a24:	f000 feca 	bl	80017bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000a28:	2308      	movs	r3, #8
 8000a2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a34:	2300      	movs	r3, #0
 8000a36:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000a38:	f107 030c 	add.w	r3, r7, #12
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4804      	ldr	r0, [pc, #16]	; (8000a50 <MX_GPIO_Init+0x90>)
 8000a40:	f000 fd4a 	bl	80014d8 <HAL_GPIO_Init>
=======
 8000aa2:	4b1d      	ldr	r3, [pc, #116]	; (8000b18 <MX_GPIO_Init+0x8c>)
 8000aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa6:	4a1c      	ldr	r2, [pc, #112]	; (8000b18 <MX_GPIO_Init+0x8c>)
 8000aa8:	f043 0304 	orr.w	r3, r3, #4
 8000aac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aae:	4b1a      	ldr	r3, [pc, #104]	; (8000b18 <MX_GPIO_Init+0x8c>)
 8000ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab2:	f003 0304 	and.w	r3, r3, #4
 8000ab6:	60bb      	str	r3, [r7, #8]
 8000ab8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aba:	4b17      	ldr	r3, [pc, #92]	; (8000b18 <MX_GPIO_Init+0x8c>)
 8000abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000abe:	4a16      	ldr	r2, [pc, #88]	; (8000b18 <MX_GPIO_Init+0x8c>)
 8000ac0:	f043 0301 	orr.w	r3, r3, #1
 8000ac4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ac6:	4b14      	ldr	r3, [pc, #80]	; (8000b18 <MX_GPIO_Init+0x8c>)
 8000ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aca:	f003 0301 	and.w	r3, r3, #1
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad2:	4b11      	ldr	r3, [pc, #68]	; (8000b18 <MX_GPIO_Init+0x8c>)
 8000ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad6:	4a10      	ldr	r2, [pc, #64]	; (8000b18 <MX_GPIO_Init+0x8c>)
 8000ad8:	f043 0302 	orr.w	r3, r3, #2
 8000adc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ade:	4b0e      	ldr	r3, [pc, #56]	; (8000b18 <MX_GPIO_Init+0x8c>)
 8000ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae2:	f003 0302 	and.w	r3, r3, #2
 8000ae6:	603b      	str	r3, [r7, #0]
 8000ae8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000aea:	2200      	movs	r2, #0
 8000aec:	2108      	movs	r1, #8
 8000aee:	480b      	ldr	r0, [pc, #44]	; (8000b1c <MX_GPIO_Init+0x90>)
 8000af0:	f001 fa44 	bl	8001f7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000af4:	2308      	movs	r3, #8
 8000af6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af8:	2301      	movs	r3, #1
 8000afa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b00:	2300      	movs	r3, #0
 8000b02:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000b04:	f107 030c 	add.w	r3, r7, #12
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4804      	ldr	r0, [pc, #16]	; (8000b1c <MX_GPIO_Init+0x90>)
 8000b0c:	f001 f8c4 	bl	8001c98 <HAL_GPIO_Init>
>>>>>>> Stashed changes

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
<<<<<<< Updated upstream
 8000a44:	bf00      	nop
 8000a46:	3720      	adds	r7, #32
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	40021000 	.word	0x40021000
 8000a50:	48000400 	.word	0x48000400

08000a54 <HAL_UART_RxCpltCallback>:
=======
 8000b10:	bf00      	nop
 8000b12:	3720      	adds	r7, #32
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40021000 	.word	0x40021000
 8000b1c:	48000400 	.word	0x48000400

08000b20 <HAL_UART_RxCpltCallback>:
>>>>>>> Stashed changes

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]

	if (huart->Instance == USART1)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a12      	ldr	r2, [pc, #72]	; (8000aac <HAL_UART_RxCpltCallback+0x58>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d10c      	bne.n	8000a80 <HAL_UART_RxCpltCallback+0x2c>
	{
		xQueueSendFromISR(uart1QueueHandle, uart1_buffer, NULL);
 8000a66:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <HAL_UART_RxCpltCallback+0x5c>)
 8000a68:	6818      	ldr	r0, [r3, #0]
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	4911      	ldr	r1, [pc, #68]	; (8000ab4 <HAL_UART_RxCpltCallback+0x60>)
 8000a70:	f005 f836 	bl	8005ae0 <xQueueGenericSendFromISR>
		HAL_UART_Receive_IT(&huart1, uart1_buffer, 1);
 8000a74:	2201      	movs	r2, #1
 8000a76:	490f      	ldr	r1, [pc, #60]	; (8000ab4 <HAL_UART_RxCpltCallback+0x60>)
 8000a78:	480f      	ldr	r0, [pc, #60]	; (8000ab8 <HAL_UART_RxCpltCallback+0x64>)
 8000a7a:	f003 f8cd 	bl	8003c18 <HAL_UART_Receive_IT>
=======
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a4c      	ldr	r2, [pc, #304]	; (8000c60 <HAL_UART_RxCpltCallback+0x140>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	f040 8080 	bne.w	8000c34 <HAL_UART_RxCpltCallback+0x114>
    {
        switch (UART1receiveState) {
 8000b34:	4b4b      	ldr	r3, [pc, #300]	; (8000c64 <HAL_UART_RxCpltCallback+0x144>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	2b03      	cmp	r3, #3
 8000b3a:	f200 808d 	bhi.w	8000c58 <HAL_UART_RxCpltCallback+0x138>
 8000b3e:	a201      	add	r2, pc, #4	; (adr r2, 8000b44 <HAL_UART_RxCpltCallback+0x24>)
 8000b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b44:	08000b55 	.word	0x08000b55
 8000b48:	08000b6f 	.word	0x08000b6f
 8000b4c:	08000b8f 	.word	0x08000b8f
 8000b50:	08000be3 	.word	0x08000be3
            case WAIT_FOR_START_DELIMITER:
                if (uart1_buffer[0] == START_DELIMITER) {
 8000b54:	4b44      	ldr	r3, [pc, #272]	; (8000c68 <HAL_UART_RxCpltCallback+0x148>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	2b5b      	cmp	r3, #91	; 0x5b
 8000b5a:	d102      	bne.n	8000b62 <HAL_UART_RxCpltCallback+0x42>
                    UART1receiveState = WAIT_FOR_DATA_LENGTH_HIGH;
 8000b5c:	4b41      	ldr	r3, [pc, #260]	; (8000c64 <HAL_UART_RxCpltCallback+0x144>)
 8000b5e:	2201      	movs	r2, #1
 8000b60:	701a      	strb	r2, [r3, #0]
                }
                HAL_UART_Receive_IT(&huart1, uart1_buffer, 1);
 8000b62:	2201      	movs	r2, #1
 8000b64:	4940      	ldr	r1, [pc, #256]	; (8000c68 <HAL_UART_RxCpltCallback+0x148>)
 8000b66:	4841      	ldr	r0, [pc, #260]	; (8000c6c <HAL_UART_RxCpltCallback+0x14c>)
 8000b68:	f003 fec6 	bl	80048f8 <HAL_UART_Receive_IT>
                break;
 8000b6c:	e074      	b.n	8000c58 <HAL_UART_RxCpltCallback+0x138>

            case WAIT_FOR_DATA_LENGTH_HIGH:
                dataLength = uart1_buffer[0] << 8;
 8000b6e:	4b3e      	ldr	r3, [pc, #248]	; (8000c68 <HAL_UART_RxCpltCallback+0x148>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	b29b      	uxth	r3, r3
 8000b74:	021b      	lsls	r3, r3, #8
 8000b76:	b29a      	uxth	r2, r3
 8000b78:	4b3d      	ldr	r3, [pc, #244]	; (8000c70 <HAL_UART_RxCpltCallback+0x150>)
 8000b7a:	801a      	strh	r2, [r3, #0]
                UART1receiveState = WAIT_FOR_DATA_LENGTH_LOW;
 8000b7c:	4b39      	ldr	r3, [pc, #228]	; (8000c64 <HAL_UART_RxCpltCallback+0x144>)
 8000b7e:	2202      	movs	r2, #2
 8000b80:	701a      	strb	r2, [r3, #0]
                HAL_UART_Receive_IT(&huart1, uart1_buffer, 1);
 8000b82:	2201      	movs	r2, #1
 8000b84:	4938      	ldr	r1, [pc, #224]	; (8000c68 <HAL_UART_RxCpltCallback+0x148>)
 8000b86:	4839      	ldr	r0, [pc, #228]	; (8000c6c <HAL_UART_RxCpltCallback+0x14c>)
 8000b88:	f003 feb6 	bl	80048f8 <HAL_UART_Receive_IT>
                break;
 8000b8c:	e064      	b.n	8000c58 <HAL_UART_RxCpltCallback+0x138>

            case WAIT_FOR_DATA_LENGTH_LOW:
                dataLength |= uart1_buffer[0];
 8000b8e:	4b36      	ldr	r3, [pc, #216]	; (8000c68 <HAL_UART_RxCpltCallback+0x148>)
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	b29a      	uxth	r2, r3
 8000b94:	4b36      	ldr	r3, [pc, #216]	; (8000c70 <HAL_UART_RxCpltCallback+0x150>)
 8000b96:	881b      	ldrh	r3, [r3, #0]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	b29a      	uxth	r2, r3
 8000b9c:	4b34      	ldr	r3, [pc, #208]	; (8000c70 <HAL_UART_RxCpltCallback+0x150>)
 8000b9e:	801a      	strh	r2, [r3, #0]
                UART1receiveState = WAIT_FOR_DATA;
 8000ba0:	4b30      	ldr	r3, [pc, #192]	; (8000c64 <HAL_UART_RxCpltCallback+0x144>)
 8000ba2:	2203      	movs	r2, #3
 8000ba4:	701a      	strb	r2, [r3, #0]
                dma_buffer = (uint8_t*)pvPortMalloc((dataLength*12 + 1) * sizeof(uint8_t)); // Allocate buffer for DMA transfer
 8000ba6:	4b32      	ldr	r3, [pc, #200]	; (8000c70 <HAL_UART_RxCpltCallback+0x150>)
 8000ba8:	881b      	ldrh	r3, [r3, #0]
 8000baa:	461a      	mov	r2, r3
 8000bac:	4613      	mov	r3, r2
 8000bae:	005b      	lsls	r3, r3, #1
 8000bb0:	4413      	add	r3, r2
 8000bb2:	009b      	lsls	r3, r3, #2
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f008 f856 	bl	8008c68 <pvPortMalloc>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	4a2d      	ldr	r2, [pc, #180]	; (8000c74 <HAL_UART_RxCpltCallback+0x154>)
 8000bc0:	6013      	str	r3, [r2, #0]
                HAL_UART_Receive_DMA(&huart1, dma_buffer, dataLength*12 + 1);
 8000bc2:	4b2c      	ldr	r3, [pc, #176]	; (8000c74 <HAL_UART_RxCpltCallback+0x154>)
 8000bc4:	6819      	ldr	r1, [r3, #0]
 8000bc6:	4b2a      	ldr	r3, [pc, #168]	; (8000c70 <HAL_UART_RxCpltCallback+0x150>)
 8000bc8:	881b      	ldrh	r3, [r3, #0]
 8000bca:	461a      	mov	r2, r3
 8000bcc:	0052      	lsls	r2, r2, #1
 8000bce:	4413      	add	r3, r2
 8000bd0:	009b      	lsls	r3, r3, #2
 8000bd2:	b29b      	uxth	r3, r3
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	b29b      	uxth	r3, r3
 8000bd8:	461a      	mov	r2, r3
 8000bda:	4824      	ldr	r0, [pc, #144]	; (8000c6c <HAL_UART_RxCpltCallback+0x14c>)
 8000bdc:	f003 fed8 	bl	8004990 <HAL_UART_Receive_DMA>
                break;
 8000be0:	e03a      	b.n	8000c58 <HAL_UART_RxCpltCallback+0x138>

            case WAIT_FOR_DATA:
                // DMA transfer is complete
                HAL_UART_DMAStop(&huart1); // Stop the DMA transfer
 8000be2:	4822      	ldr	r0, [pc, #136]	; (8000c6c <HAL_UART_RxCpltCallback+0x14c>)
 8000be4:	f003 ff20 	bl	8004a28 <HAL_UART_DMAStop>

                // Check if the last byte is the end delimiter
                if (dma_buffer[dataLength*12] == END_DELIMITER) {
 8000be8:	4b22      	ldr	r3, [pc, #136]	; (8000c74 <HAL_UART_RxCpltCallback+0x154>)
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	4b20      	ldr	r3, [pc, #128]	; (8000c70 <HAL_UART_RxCpltCallback+0x150>)
 8000bee:	881b      	ldrh	r3, [r3, #0]
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	460b      	mov	r3, r1
 8000bf4:	005b      	lsls	r3, r3, #1
 8000bf6:	440b      	add	r3, r1
 8000bf8:	009b      	lsls	r3, r3, #2
 8000bfa:	4413      	add	r3, r2
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	2b5d      	cmp	r3, #93	; 0x5d
 8000c00:	d107      	bne.n	8000c12 <HAL_UART_RxCpltCallback+0xf2>
                    // Process the received data here
                    // You can send the data to a FreeRTOS task using a queue
                    xQueueSendFromISR(uart1QueueHandle, dma_buffer, NULL);
 8000c02:	4b1d      	ldr	r3, [pc, #116]	; (8000c78 <HAL_UART_RxCpltCallback+0x158>)
 8000c04:	6818      	ldr	r0, [r3, #0]
 8000c06:	4b1b      	ldr	r3, [pc, #108]	; (8000c74 <HAL_UART_RxCpltCallback+0x154>)
 8000c08:	6819      	ldr	r1, [r3, #0]
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	f006 f879 	bl	8006d04 <xQueueGenericSendFromISR>
                }

                // Free the DMA buffer
                vPortFree(dma_buffer);
 8000c12:	4b18      	ldr	r3, [pc, #96]	; (8000c74 <HAL_UART_RxCpltCallback+0x154>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4618      	mov	r0, r3
 8000c18:	f008 f8f2 	bl	8008e00 <vPortFree>
                dma_buffer = NULL;
 8000c1c:	4b15      	ldr	r3, [pc, #84]	; (8000c74 <HAL_UART_RxCpltCallback+0x154>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]

                // Restart the interrupt-based reception
                UART1receiveState = WAIT_FOR_START_DELIMITER;
 8000c22:	4b10      	ldr	r3, [pc, #64]	; (8000c64 <HAL_UART_RxCpltCallback+0x144>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	701a      	strb	r2, [r3, #0]
                HAL_UART_Receive_IT(&huart1, uart1_buffer, 1);
 8000c28:	2201      	movs	r2, #1
 8000c2a:	490f      	ldr	r1, [pc, #60]	; (8000c68 <HAL_UART_RxCpltCallback+0x148>)
 8000c2c:	480f      	ldr	r0, [pc, #60]	; (8000c6c <HAL_UART_RxCpltCallback+0x14c>)
 8000c2e:	f003 fe63 	bl	80048f8 <HAL_UART_Receive_IT>
                break;
 8000c32:	e011      	b.n	8000c58 <HAL_UART_RxCpltCallback+0x138>
	// if (huart->Instance == USART1)
	// {
	// 	xQueueSendFromISR(uart1QueueHandle, uart1_buffer, NULL);
	// 	HAL_UART_Receive_IT(&huart1, uart1_buffer, 1);
	// }
	else if (huart->Instance == USART2)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a10      	ldr	r2, [pc, #64]	; (8000c7c <HAL_UART_RxCpltCallback+0x15c>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d10c      	bne.n	8000c58 <HAL_UART_RxCpltCallback+0x138>
	{
		HAL_UART_Receive_IT(&huart2, uart2_buffer, 1);
 8000c3e:	2201      	movs	r2, #1
 8000c40:	490f      	ldr	r1, [pc, #60]	; (8000c80 <HAL_UART_RxCpltCallback+0x160>)
 8000c42:	4810      	ldr	r0, [pc, #64]	; (8000c84 <HAL_UART_RxCpltCallback+0x164>)
 8000c44:	f003 fe58 	bl	80048f8 <HAL_UART_Receive_IT>
		xQueueSendFromISR(uart2QueueHandle, uart2_buffer, NULL);
 8000c48:	4b0f      	ldr	r3, [pc, #60]	; (8000c88 <HAL_UART_RxCpltCallback+0x168>)
 8000c4a:	6818      	ldr	r0, [r3, #0]
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	2200      	movs	r2, #0
 8000c50:	490b      	ldr	r1, [pc, #44]	; (8000c80 <HAL_UART_RxCpltCallback+0x160>)
 8000c52:	f006 f857 	bl	8006d04 <xQueueGenericSendFromISR>
>>>>>>> Stashed changes

		// Prepare to receive the next character
//		HAL_UART_Receive_DMA(&huart2, uart2_buffer, sizeof(uart2_buffer));

	}
}
<<<<<<< Updated upstream
 8000a7e:	e010      	b.n	8000aa2 <HAL_UART_RxCpltCallback+0x4e>
	else if (huart->Instance == USART2)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a0d      	ldr	r2, [pc, #52]	; (8000abc <HAL_UART_RxCpltCallback+0x68>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d10b      	bne.n	8000aa2 <HAL_UART_RxCpltCallback+0x4e>
		xQueueSendFromISR(uart2QueueHandle, uart2_buffer, NULL);
 8000a8a:	4b0d      	ldr	r3, [pc, #52]	; (8000ac0 <HAL_UART_RxCpltCallback+0x6c>)
 8000a8c:	6818      	ldr	r0, [r3, #0]
 8000a8e:	2300      	movs	r3, #0
 8000a90:	2200      	movs	r2, #0
 8000a92:	490c      	ldr	r1, [pc, #48]	; (8000ac4 <HAL_UART_RxCpltCallback+0x70>)
 8000a94:	f005 f824 	bl	8005ae0 <xQueueGenericSendFromISR>
		HAL_UART_Receive_IT(&huart2, uart2_buffer, 1);
 8000a98:	2201      	movs	r2, #1
 8000a9a:	490a      	ldr	r1, [pc, #40]	; (8000ac4 <HAL_UART_RxCpltCallback+0x70>)
 8000a9c:	480a      	ldr	r0, [pc, #40]	; (8000ac8 <HAL_UART_RxCpltCallback+0x74>)
 8000a9e:	f003 f8bb 	bl	8003c18 <HAL_UART_Receive_IT>
}
 8000aa2:	bf00      	nop
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40013800 	.word	0x40013800
 8000ab0:	200001fc 	.word	0x200001fc
 8000ab4:	20000204 	.word	0x20000204
 8000ab8:	200000dc 	.word	0x200000dc
 8000abc:	40004400 	.word	0x40004400
 8000ac0:	20000200 	.word	0x20000200
 8000ac4:	20000208 	.word	0x20000208
 8000ac8:	20000164 	.word	0x20000164

08000acc <StartDefaultTask>:
=======
 8000c56:	e7ff      	b.n	8000c58 <HAL_UART_RxCpltCallback+0x138>
 8000c58:	bf00      	nop
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	40013800 	.word	0x40013800
 8000c64:	2000025a 	.word	0x2000025a
 8000c68:	20000250 	.word	0x20000250
 8000c6c:	200000dc 	.word	0x200000dc
 8000c70:	2000025c 	.word	0x2000025c
 8000c74:	20000260 	.word	0x20000260
 8000c78:	20000248 	.word	0x20000248
 8000c7c:	40004400 	.word	0x40004400
 8000c80:	20000254 	.word	0x20000254
 8000c84:	20000164 	.word	0x20000164
 8000c88:	2000024c 	.word	0x2000024c

08000c8c <printSensorMeasurements>:


void printSensorMeasurements(SensorMeasurements measurements) {
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b086      	sub	sp, #24
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	7138      	strb	r0, [r7, #4]
    const char* measurementStrings[] = {"No", "Yes", "Optional"};
 8000c94:	4a1e      	ldr	r2, [pc, #120]	; (8000d10 <printSensorMeasurements+0x84>)
 8000c96:	f107 030c 	add.w	r3, r7, #12
 8000c9a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c9c:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    printf("Temperature: %s\n", measurementStrings[measurements.temperature]);
 8000ca0:	793b      	ldrb	r3, [r7, #4]
 8000ca2:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	3318      	adds	r3, #24
 8000cac:	443b      	add	r3, r7
 8000cae:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4817      	ldr	r0, [pc, #92]	; (8000d14 <printSensorMeasurements+0x88>)
 8000cb6:	f008 fa83 	bl	80091c0 <iprintf>
    printf("Humidity: %s\n", measurementStrings[measurements.humidity]);
 8000cba:	793b      	ldrb	r3, [r7, #4]
 8000cbc:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	3318      	adds	r3, #24
 8000cc6:	443b      	add	r3, r7
 8000cc8:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4812      	ldr	r0, [pc, #72]	; (8000d18 <printSensorMeasurements+0x8c>)
 8000cd0:	f008 fa76 	bl	80091c0 <iprintf>
    printf("Visible Light: %s\n", measurementStrings[measurements.visibleLight]);
 8000cd4:	793b      	ldrb	r3, [r7, #4]
 8000cd6:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	009b      	lsls	r3, r3, #2
 8000cde:	3318      	adds	r3, #24
 8000ce0:	443b      	add	r3, r7
 8000ce2:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	480c      	ldr	r0, [pc, #48]	; (8000d1c <printSensorMeasurements+0x90>)
 8000cea:	f008 fa69 	bl	80091c0 <iprintf>
    printf("Infrared: %s\n", measurementStrings[measurements.infrared]);
 8000cee:	793b      	ldrb	r3, [r7, #4]
 8000cf0:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	3318      	adds	r3, #24
 8000cfa:	443b      	add	r3, r7
 8000cfc:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 8000d00:	4619      	mov	r1, r3
 8000d02:	4807      	ldr	r0, [pc, #28]	; (8000d20 <printSensorMeasurements+0x94>)
 8000d04:	f008 fa5c 	bl	80091c0 <iprintf>
}
 8000d08:	bf00      	nop
 8000d0a:	3718      	adds	r7, #24
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	0800a0f4 	.word	0x0800a0f4
 8000d14:	0800a098 	.word	0x0800a098
 8000d18:	0800a0ac 	.word	0x0800a0ac
 8000d1c:	0800a0bc 	.word	0x0800a0bc
 8000d20:	0800a0d0 	.word	0x0800a0d0

08000d24 <StartDefaultTask>:
>>>>>>> Stashed changes
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
<<<<<<< Updated upstream
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ad4:	2001      	movs	r0, #1
 8000ad6:	f004 fc51 	bl	800537c <osDelay>
 8000ada:	e7fb      	b.n	8000ad4 <StartDefaultTask+0x8>

08000adc <UART2_Task>:
=======
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
   HAL_UART_Receive_IT(&huart2, uart2_buffer, 1);
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	4908      	ldr	r1, [pc, #32]	; (8000d50 <StartDefaultTask+0x2c>)
 8000d30:	4808      	ldr	r0, [pc, #32]	; (8000d54 <StartDefaultTask+0x30>)
 8000d32:	f003 fde1 	bl	80048f8 <HAL_UART_Receive_IT>
//  HAL_UART_Receive_DMA(&huart2, uart2_buffer, sizeof(uart2_buffer));
  HAL_UART_Receive_IT(&huart1, uart1_buffer, 1);
 8000d36:	2201      	movs	r2, #1
 8000d38:	4907      	ldr	r1, [pc, #28]	; (8000d58 <StartDefaultTask+0x34>)
 8000d3a:	4808      	ldr	r0, [pc, #32]	; (8000d5c <StartDefaultTask+0x38>)
 8000d3c:	f003 fddc 	bl	80048f8 <HAL_UART_Receive_IT>
  printf("Setup complete\n");
 8000d40:	4807      	ldr	r0, [pc, #28]	; (8000d60 <StartDefaultTask+0x3c>)
 8000d42:	f008 faa3 	bl	800928c <puts>
  /* Infinite loop */
  for(;;)
  {
    osDelay(10000);
 8000d46:	f242 7010 	movw	r0, #10000	; 0x2710
 8000d4a:	f005 fc29 	bl	80065a0 <osDelay>
 8000d4e:	e7fa      	b.n	8000d46 <StartDefaultTask+0x22>
 8000d50:	20000254 	.word	0x20000254
 8000d54:	20000164 	.word	0x20000164
 8000d58:	20000250 	.word	0x20000250
 8000d5c:	200000dc 	.word	0x200000dc
 8000d60:	0800a100 	.word	0x0800a100

08000d64 <UART2_Task>:
>>>>>>> Stashed changes
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UART2_Task */
void UART2_Task(void *argument)
{
<<<<<<< Updated upstream
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART2_Task */
	char receivedChar;
	  /* Infinite loop */
	  for(;;)
	  {
	    if (xQueueReceive(uart2QueueHandle, &receivedChar, portMAX_DELAY) == pdPASS)
 8000ae4:	4b1a      	ldr	r3, [pc, #104]	; (8000b50 <UART2_Task+0x74>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f107 010f 	add.w	r1, r7, #15
 8000aec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000af0:	4618      	mov	r0, r3
 8000af2:	f005 f891 	bl	8005c18 <xQueueReceive>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b01      	cmp	r3, #1
 8000afa:	d1f3      	bne.n	8000ae4 <UART2_Task+0x8>
	    {

	      // Check if the end of transmission is reached
	      if (receivedChar == '\n' || receivedChar == '\r')
 8000afc:	7bfb      	ldrb	r3, [r7, #15]
 8000afe:	2b0a      	cmp	r3, #10
 8000b00:	d002      	beq.n	8000b08 <UART2_Task+0x2c>
 8000b02:	7bfb      	ldrb	r3, [r7, #15]
 8000b04:	2b0d      	cmp	r3, #13
 8000b06:	d110      	bne.n	8000b2a <UART2_Task+0x4e>
	      {
	        // Null-terminate the string
	        uart2_accumulate_buffer[uart2_accumulate_pos] = '\0';
 8000b08:	4b12      	ldr	r3, [pc, #72]	; (8000b54 <UART2_Task+0x78>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	4b12      	ldr	r3, [pc, #72]	; (8000b58 <UART2_Task+0x7c>)
 8000b10:	2100      	movs	r1, #0
 8000b12:	5499      	strb	r1, [r3, r2]

	        // Process the complete message here
//	        printf("%s\n", uart2_accumulate_buffer);
	        HAL_UART_Transmit(&huart1, uart2_accumulate_buffer,UART_BUFFER_SIZE , HAL_MAX_DELAY);
 8000b14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b18:	2280      	movs	r2, #128	; 0x80
 8000b1a:	490f      	ldr	r1, [pc, #60]	; (8000b58 <UART2_Task+0x7c>)
 8000b1c:	480f      	ldr	r0, [pc, #60]	; (8000b5c <UART2_Task+0x80>)
 8000b1e:	f002 fff1 	bl	8003b04 <HAL_UART_Transmit>

	        // Reset the accumulate buffer position
	        uart2_accumulate_pos = 0;
 8000b22:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <UART2_Task+0x78>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	701a      	strb	r2, [r3, #0]
 8000b28:	e009      	b.n	8000b3e <UART2_Task+0x62>
	      } else {
		      // Accumulate the received characters
		      uart2_accumulate_buffer[uart2_accumulate_pos++] = receivedChar;
 8000b2a:	4b0a      	ldr	r3, [pc, #40]	; (8000b54 <UART2_Task+0x78>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	1c5a      	adds	r2, r3, #1
 8000b30:	b2d1      	uxtb	r1, r2
 8000b32:	4a08      	ldr	r2, [pc, #32]	; (8000b54 <UART2_Task+0x78>)
 8000b34:	7011      	strb	r1, [r2, #0]
 8000b36:	461a      	mov	r2, r3
 8000b38:	7bf9      	ldrb	r1, [r7, #15]
 8000b3a:	4b07      	ldr	r3, [pc, #28]	; (8000b58 <UART2_Task+0x7c>)
 8000b3c:	5499      	strb	r1, [r3, r2]
	      }

	      // Make sure we don't overflow the buffer
	      if (uart2_accumulate_pos >= UART_BUFFER_SIZE)
 8000b3e:	4b05      	ldr	r3, [pc, #20]	; (8000b54 <UART2_Task+0x78>)
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	b25b      	sxtb	r3, r3
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	dacd      	bge.n	8000ae4 <UART2_Task+0x8>
	      {
	        uart2_accumulate_pos = 0;
 8000b48:	4b02      	ldr	r3, [pc, #8]	; (8000b54 <UART2_Task+0x78>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	701a      	strb	r2, [r3, #0]
	    if (xQueueReceive(uart2QueueHandle, &receivedChar, portMAX_DELAY) == pdPASS)
 8000b4e:	e7c9      	b.n	8000ae4 <UART2_Task+0x8>
 8000b50:	20000200 	.word	0x20000200
 8000b54:	2000030d 	.word	0x2000030d
 8000b58:	2000028c 	.word	0x2000028c
 8000b5c:	200000dc 	.word	0x200000dc

08000b60 <UART1_Task>:
=======
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART2_Task */
	Dash7ToSTM32Message receivedMessage;
  /* Infinite loop */
  for(;;)
  {
    if (xQueueReceive(uart2QueueHandle, &receivedMessage, portMAX_DELAY) == pdPASS)
 8000d6c:	4b1a      	ldr	r3, [pc, #104]	; (8000dd8 <UART2_Task+0x74>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f107 0108 	add.w	r1, r7, #8
 8000d74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f006 f85f 	bl	8006e3c <xQueueReceive>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d1f3      	bne.n	8000d6c <UART2_Task+0x8>
    {
      //Check for message structure
      if (receivedMessage.startDelimiter != START_DELIMITER || receivedMessage.endDelimiter != END_DELIMITER)
 8000d84:	7a3b      	ldrb	r3, [r7, #8]
 8000d86:	2b5b      	cmp	r3, #91	; 0x5b
 8000d88:	d124      	bne.n	8000dd4 <UART2_Task+0x70>
 8000d8a:	7bbb      	ldrb	r3, [r7, #14]
 8000d8c:	2b5d      	cmp	r3, #93	; 0x5d
 8000d8e:	d121      	bne.n	8000dd4 <UART2_Task+0x70>
      {
        // Invalid message structure
        continue;
      } else {
        targetX = receivedMessage.xCoord;
 8000d90:	f8b7 3009 	ldrh.w	r3, [r7, #9]
 8000d94:	b29b      	uxth	r3, r3
 8000d96:	b21a      	sxth	r2, r3
 8000d98:	4b10      	ldr	r3, [pc, #64]	; (8000ddc <UART2_Task+0x78>)
 8000d9a:	801a      	strh	r2, [r3, #0]
        targetY = receivedMessage.yCoord;
 8000d9c:	f8b7 300b 	ldrh.w	r3, [r7, #11]
 8000da0:	b29b      	uxth	r3, r3
 8000da2:	b21a      	sxth	r2, r3
 8000da4:	4b0e      	ldr	r3, [pc, #56]	; (8000de0 <UART2_Task+0x7c>)
 8000da6:	801a      	strh	r2, [r3, #0]
        targetMeasurements = *(SensorMeasurements*)&receivedMessage.sensorControl;
 8000da8:	f107 0308 	add.w	r3, r7, #8
 8000dac:	3305      	adds	r3, #5
 8000dae:	4a0d      	ldr	r2, [pc, #52]	; (8000de4 <UART2_Task+0x80>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	7013      	strb	r3, [r2, #0]
        printSensorMeasurements(targetMeasurements);
 8000db4:	4b0b      	ldr	r3, [pc, #44]	; (8000de4 <UART2_Task+0x80>)
 8000db6:	7818      	ldrb	r0, [r3, #0]
 8000db8:	f7ff ff68 	bl	8000c8c <printSensorMeasurements>
        printf("Received message with x: %d, y: %d\n", targetX, targetY);
 8000dbc:	4b07      	ldr	r3, [pc, #28]	; (8000ddc <UART2_Task+0x78>)
 8000dbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <UART2_Task+0x7c>)
 8000dc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dca:	461a      	mov	r2, r3
 8000dcc:	4806      	ldr	r0, [pc, #24]	; (8000de8 <UART2_Task+0x84>)
 8000dce:	f008 f9f7 	bl	80091c0 <iprintf>
 8000dd2:	e7cb      	b.n	8000d6c <UART2_Task+0x8>
        continue;
 8000dd4:	bf00      	nop
    if (xQueueReceive(uart2QueueHandle, &receivedMessage, portMAX_DELAY) == pdPASS)
 8000dd6:	e7c9      	b.n	8000d6c <UART2_Task+0x8>
 8000dd8:	2000024c 	.word	0x2000024c
 8000ddc:	20000264 	.word	0x20000264
 8000de0:	20000266 	.word	0x20000266
 8000de4:	20000268 	.word	0x20000268
 8000de8:	0800a110 	.word	0x0800a110

08000dec <UART1_Task>:
>>>>>>> Stashed changes
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UART1_Task */
void UART1_Task(void *argument)
{
<<<<<<< Updated upstream
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART1_Task */
	char receivedChar;
	/* Infinite loop */
	for(;;)
	{
		if (xQueueReceive(uart1QueueHandle, &receivedChar, portMAX_DELAY) == pdPASS)
 8000b68:	4b17      	ldr	r3, [pc, #92]	; (8000bc8 <UART1_Task+0x68>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f107 010f 	add.w	r1, r7, #15
 8000b70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b74:	4618      	mov	r0, r3
 8000b76:	f005 f84f 	bl	8005c18 <xQueueReceive>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	d1f3      	bne.n	8000b68 <UART1_Task+0x8>
		{

		  // Check if the end of transmission is reached
		  if ( receivedChar == '\r')
 8000b80:	7bfb      	ldrb	r3, [r7, #15]
 8000b82:	2b0d      	cmp	r3, #13
 8000b84:	d10d      	bne.n	8000ba2 <UART1_Task+0x42>
		  {
			// Null-terminate the string
			uart1_accumulate_buffer[uart1_accumulate_pos] = '\0';
 8000b86:	4b11      	ldr	r3, [pc, #68]	; (8000bcc <UART1_Task+0x6c>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	4b10      	ldr	r3, [pc, #64]	; (8000bd0 <UART1_Task+0x70>)
 8000b8e:	2100      	movs	r1, #0
 8000b90:	5499      	strb	r1, [r3, r2]

			// Process the complete message here
			printf("%s\r", uart1_accumulate_buffer);
 8000b92:	490f      	ldr	r1, [pc, #60]	; (8000bd0 <UART1_Task+0x70>)
 8000b94:	480f      	ldr	r0, [pc, #60]	; (8000bd4 <UART1_Task+0x74>)
 8000b96:	f007 f9fb 	bl	8007f90 <iprintf>

			// Reset the accumulate buffer position
			uart1_accumulate_pos = 0;
 8000b9a:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <UART1_Task+0x6c>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	701a      	strb	r2, [r3, #0]
 8000ba0:	e009      	b.n	8000bb6 <UART1_Task+0x56>
		  } else {
			  // Accumulate the received characters
			  uart1_accumulate_buffer[uart1_accumulate_pos++] = receivedChar;
 8000ba2:	4b0a      	ldr	r3, [pc, #40]	; (8000bcc <UART1_Task+0x6c>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	1c5a      	adds	r2, r3, #1
 8000ba8:	b2d1      	uxtb	r1, r2
 8000baa:	4a08      	ldr	r2, [pc, #32]	; (8000bcc <UART1_Task+0x6c>)
 8000bac:	7011      	strb	r1, [r2, #0]
 8000bae:	461a      	mov	r2, r3
 8000bb0:	7bf9      	ldrb	r1, [r7, #15]
 8000bb2:	4b07      	ldr	r3, [pc, #28]	; (8000bd0 <UART1_Task+0x70>)
 8000bb4:	5499      	strb	r1, [r3, r2]
		  }

		  // Make sure we don't overflow the buffer
		  if (uart1_accumulate_pos >= UART_BUFFER_SIZE)
 8000bb6:	4b05      	ldr	r3, [pc, #20]	; (8000bcc <UART1_Task+0x6c>)
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	b25b      	sxtb	r3, r3
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	dad3      	bge.n	8000b68 <UART1_Task+0x8>
		  {
			uart1_accumulate_pos = 0;
 8000bc0:	4b02      	ldr	r3, [pc, #8]	; (8000bcc <UART1_Task+0x6c>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	701a      	strb	r2, [r3, #0]
		if (xQueueReceive(uart1QueueHandle, &receivedChar, portMAX_DELAY) == pdPASS)
 8000bc6:	e7cf      	b.n	8000b68 <UART1_Task+0x8>
 8000bc8:	200001fc 	.word	0x200001fc
 8000bcc:	2000030c 	.word	0x2000030c
 8000bd0:	2000020c 	.word	0x2000020c
 8000bd4:	08008e6c 	.word	0x08008e6c

08000bd8 <LightSensorTask>:
=======
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART1_Task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000df4:	2001      	movs	r0, #1
 8000df6:	f005 fbd3 	bl	80065a0 <osDelay>
 8000dfa:	e7fb      	b.n	8000df4 <UART1_Task+0x8>

08000dfc <LightSensorTask>:
>>>>>>> Stashed changes
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LightSensorTask */
void LightSensorTask(void *argument)
{
<<<<<<< Updated upstream
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
=======
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* USER CODE BEGIN LightSensorTask */
	LTR329_Init();
 8000be0:	f7ff fd1a 	bl	8000618 <LTR329_Init>
	/* Infinite loop */
	  for(;;)
	  {
		// Read light data
		LTR329_Read_Light(&light_ch0, &light_ch1);
<<<<<<< Updated upstream
 8000be4:	4906      	ldr	r1, [pc, #24]	; (8000c00 <LightSensorTask+0x28>)
 8000be6:	4807      	ldr	r0, [pc, #28]	; (8000c04 <LightSensorTask+0x2c>)
 8000be8:	f7ff fd3c 	bl	8000664 <LTR329_Read_Light>
//		if (verbose) printf("Light Ch0: %d \n Light Ch1: %d\n________\n\n",light_ch0,light_ch1);
		sendLightSensorData(light_ch0);
 8000bec:	4b05      	ldr	r3, [pc, #20]	; (8000c04 <LightSensorTask+0x2c>)
 8000bee:	881b      	ldrh	r3, [r3, #0]
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff fcff 	bl	80005f4 <sendLightSensorData>
		osDelay(2000);
 8000bf6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000bfa:	f004 fbbf 	bl	800537c <osDelay>
		LTR329_Read_Light(&light_ch0, &light_ch1);
 8000bfe:	e7f1      	b.n	8000be4 <LightSensorTask+0xc>
 8000c00:	20000310 	.word	0x20000310
 8000c04:	2000030e 	.word	0x2000030e

08000c08 <HAL_TIM_PeriodElapsedCallback>:
=======
 8000e04:	490d      	ldr	r1, [pc, #52]	; (8000e3c <LightSensorTask+0x40>)
 8000e06:	480e      	ldr	r0, [pc, #56]	; (8000e40 <LightSensorTask+0x44>)
 8000e08:	f7ff fc22 	bl	8000650 <LTR329_Read_Light>
		if (verbose) {
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d009      	beq.n	8000e26 <LightSensorTask+0x2a>
			printf("Light Ch0: %d \n Light Ch1: %d\n________\n",light_ch0,light_ch1);
 8000e12:	4b0b      	ldr	r3, [pc, #44]	; (8000e40 <LightSensorTask+0x44>)
 8000e14:	881b      	ldrh	r3, [r3, #0]
 8000e16:	4619      	mov	r1, r3
 8000e18:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <LightSensorTask+0x40>)
 8000e1a:	881b      	ldrh	r3, [r3, #0]
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	4809      	ldr	r0, [pc, #36]	; (8000e44 <LightSensorTask+0x48>)
 8000e20:	f008 f9ce 	bl	80091c0 <iprintf>
 8000e24:	e004      	b.n	8000e30 <LightSensorTask+0x34>
		}
		else sendLightSensorData(light_ch0);
 8000e26:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <LightSensorTask+0x44>)
 8000e28:	881b      	ldrh	r3, [r3, #0]
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f7ff fbd8 	bl	80005e0 <sendLightSensorData>
		osDelay(2000);
 8000e30:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000e34:	f005 fbb4 	bl	80065a0 <osDelay>
		LTR329_Read_Light(&light_ch0, &light_ch1);
 8000e38:	e7e4      	b.n	8000e04 <LightSensorTask+0x8>
 8000e3a:	bf00      	nop
 8000e3c:	20000258 	.word	0x20000258
 8000e40:	20000256 	.word	0x20000256
 8000e44:	0800a134 	.word	0x0800a134

08000e48 <TempTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TempTask */
void TempTask(void *argument)
{
 8000e48:	b5b0      	push	{r4, r5, r7, lr}
 8000e4a:	b088      	sub	sp, #32
 8000e4c:	af02      	add	r7, sp, #8
 8000e4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TempTask */
  /* Infinite loop */
  for(;;)
  {
	  uint16_t rawTemperature = 404;
 8000e50:	f44f 73ca 	mov.w	r3, #404	; 0x194
 8000e54:	81fb      	strh	r3, [r7, #14]
	  uint16_t rawHumidity = 404;
 8000e56:	f44f 73ca 	mov.w	r3, #404	; 0x194
 8000e5a:	81bb      	strh	r3, [r7, #12]

	  // Read temperature and humidity from the SHT40 sensor
	  SHT40_Read_Temp_Hum(&rawTemperature, &rawHumidity);
 8000e5c:	f107 020c 	add.w	r2, r7, #12
 8000e60:	f107 030e 	add.w	r3, r7, #14
 8000e64:	4611      	mov	r1, r2
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff fc3a 	bl	80006e0 <SHT40_Read_Temp_Hum>
	  if (verbose) {
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d040      	beq.n	8000ef4 <TempTask+0xac>
		  // Scale and convert the raw temperature to an integer
		  int temp_scaled = (-45 * TEMPERATURE_SCALE_FACTOR) +
						   (175 * TEMPERATURE_SCALE_FACTOR * rawTemperature) / RAW_VALUE_MAX;
 8000e72:	89fb      	ldrh	r3, [r7, #14]
 8000e74:	461a      	mov	r2, r3
 8000e76:	23af      	movs	r3, #175	; 0xaf
 8000e78:	fb03 f202 	mul.w	r2, r3, r2
		  int temp_scaled = (-45 * TEMPERATURE_SCALE_FACTOR) +
 8000e7c:	4b20      	ldr	r3, [pc, #128]	; (8000f00 <TempTask+0xb8>)
 8000e7e:	4413      	add	r3, r2
 8000e80:	617b      	str	r3, [r7, #20]

		  // Scale and convert the raw humidity to an integer
		  int hum_scaled = (100 * TEMPERATURE_SCALE_FACTOR * rawHumidity) / RAW_VALUE_MAX;
 8000e82:	89bb      	ldrh	r3, [r7, #12]
 8000e84:	461a      	mov	r2, r3
 8000e86:	2364      	movs	r3, #100	; 0x64
 8000e88:	fb02 f303 	mul.w	r3, r2, r3
 8000e8c:	613b      	str	r3, [r7, #16]

		  // Print the scaled temperature and humidity as integers
		  printf("Temperature: %d.%03dC, Humidity: %d.%03d%%RH\n________\n",
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	4a1c      	ldr	r2, [pc, #112]	; (8000f04 <TempTask+0xbc>)
 8000e92:	fb82 1203 	smull	r1, r2, r2, r3
 8000e96:	441a      	add	r2, r3
 8000e98:	13d2      	asrs	r2, r2, #15
 8000e9a:	17db      	asrs	r3, r3, #31
 8000e9c:	1ad0      	subs	r0, r2, r3
				 temp_scaled / TEMPERATURE_SCALE_FACTOR, abs(temp_scaled % TEMPERATURE_SCALE_FACTOR),
 8000e9e:	697a      	ldr	r2, [r7, #20]
 8000ea0:	4b18      	ldr	r3, [pc, #96]	; (8000f04 <TempTask+0xbc>)
 8000ea2:	fb83 1302 	smull	r1, r3, r3, r2
 8000ea6:	4413      	add	r3, r2
 8000ea8:	13d9      	asrs	r1, r3, #15
 8000eaa:	17d3      	asrs	r3, r2, #31
 8000eac:	1ac9      	subs	r1, r1, r3
 8000eae:	460b      	mov	r3, r1
 8000eb0:	041b      	lsls	r3, r3, #16
 8000eb2:	1a5b      	subs	r3, r3, r1
 8000eb4:	1ad1      	subs	r1, r2, r3
		  printf("Temperature: %d.%03dC, Humidity: %d.%03d%%RH\n________\n",
 8000eb6:	ea81 74e1 	eor.w	r4, r1, r1, asr #31
 8000eba:	eba4 74e1 	sub.w	r4, r4, r1, asr #31
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	4a10      	ldr	r2, [pc, #64]	; (8000f04 <TempTask+0xbc>)
 8000ec2:	fb82 1203 	smull	r1, r2, r2, r3
 8000ec6:	441a      	add	r2, r3
 8000ec8:	13d2      	asrs	r2, r2, #15
 8000eca:	17db      	asrs	r3, r3, #31
 8000ecc:	1ad5      	subs	r5, r2, r3
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <TempTask+0xbc>)
 8000ed2:	fb83 1302 	smull	r1, r3, r3, r2
 8000ed6:	4413      	add	r3, r2
 8000ed8:	13d9      	asrs	r1, r3, #15
 8000eda:	17d3      	asrs	r3, r2, #31
 8000edc:	1ac9      	subs	r1, r1, r3
 8000ede:	460b      	mov	r3, r1
 8000ee0:	041b      	lsls	r3, r3, #16
 8000ee2:	1a5b      	subs	r3, r3, r1
 8000ee4:	1ad1      	subs	r1, r2, r3
 8000ee6:	9100      	str	r1, [sp, #0]
 8000ee8:	462b      	mov	r3, r5
 8000eea:	4622      	mov	r2, r4
 8000eec:	4601      	mov	r1, r0
 8000eee:	4806      	ldr	r0, [pc, #24]	; (8000f08 <TempTask+0xc0>)
 8000ef0:	f008 f966 	bl	80091c0 <iprintf>
				 hum_scaled / TEMPERATURE_SCALE_FACTOR, hum_scaled % TEMPERATURE_SCALE_FACTOR);
	  }

	  // Delay for a while before reading again
	  osDelay(pdMS_TO_TICKS(1000));  // 1 second delay
 8000ef4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ef8:	f005 fb52 	bl	80065a0 <osDelay>
  {
 8000efc:	e7a8      	b.n	8000e50 <TempTask+0x8>
 8000efe:	bf00      	nop
 8000f00:	ffd3002d 	.word	0xffd3002d
 8000f04:	80008001 	.word	0x80008001
 8000f08:	0800a15c 	.word	0x0800a15c

08000f0c <HAL_TIM_PeriodElapsedCallback>:
>>>>>>> Stashed changes
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
=======
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
<<<<<<< Updated upstream
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a04      	ldr	r2, [pc, #16]	; (8000c28 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d101      	bne.n	8000c1e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c1a:	f000 fadb 	bl	80011d4 <HAL_IncTick>
=======
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a04      	ldr	r2, [pc, #16]	; (8000f2c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d101      	bne.n	8000f22 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f1e:	f000 fb13 	bl	8001548 <HAL_IncTick>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
<<<<<<< Updated upstream
 8000c1e:	bf00      	nop
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40001000 	.word	0x40001000

08000c2c <Error_Handler>:
=======
 8000f22:	bf00      	nop
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40001000 	.word	0x40001000

08000f30 <Error_Handler>:
>>>>>>> Stashed changes
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
<<<<<<< Updated upstream
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
=======
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
<<<<<<< Updated upstream
 8000c30:	b672      	cpsid	i
}
 8000c32:	bf00      	nop
=======
 8000f34:	b672      	cpsid	i
}
 8000f36:	bf00      	nop
>>>>>>> Stashed changes
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
<<<<<<< Updated upstream
 8000c34:	e7fe      	b.n	8000c34 <Error_Handler+0x8>
	...

08000c38 <HAL_MspInit>:
=======
 8000f38:	e7fe      	b.n	8000f38 <Error_Handler+0x8>
	...

08000f3c <HAL_MspInit>:
>>>>>>> Stashed changes
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< Updated upstream
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
=======
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
<<<<<<< Updated upstream
 8000c3e:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <HAL_MspInit+0x4c>)
 8000c40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c42:	4a10      	ldr	r2, [pc, #64]	; (8000c84 <HAL_MspInit+0x4c>)
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	6613      	str	r3, [r2, #96]	; 0x60
 8000c4a:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <HAL_MspInit+0x4c>)
 8000c4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c4e:	f003 0301 	and.w	r3, r3, #1
 8000c52:	607b      	str	r3, [r7, #4]
 8000c54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c56:	4b0b      	ldr	r3, [pc, #44]	; (8000c84 <HAL_MspInit+0x4c>)
 8000c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c5a:	4a0a      	ldr	r2, [pc, #40]	; (8000c84 <HAL_MspInit+0x4c>)
 8000c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c60:	6593      	str	r3, [r2, #88]	; 0x58
 8000c62:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <HAL_MspInit+0x4c>)
 8000c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c6a:	603b      	str	r3, [r7, #0]
 8000c6c:	683b      	ldr	r3, [r7, #0]
=======
 8000f42:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <HAL_MspInit+0x4c>)
 8000f44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f46:	4a10      	ldr	r2, [pc, #64]	; (8000f88 <HAL_MspInit+0x4c>)
 8000f48:	f043 0301 	orr.w	r3, r3, #1
 8000f4c:	6613      	str	r3, [r2, #96]	; 0x60
 8000f4e:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <HAL_MspInit+0x4c>)
 8000f50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	607b      	str	r3, [r7, #4]
 8000f58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f5a:	4b0b      	ldr	r3, [pc, #44]	; (8000f88 <HAL_MspInit+0x4c>)
 8000f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f5e:	4a0a      	ldr	r2, [pc, #40]	; (8000f88 <HAL_MspInit+0x4c>)
 8000f60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f64:	6593      	str	r3, [r2, #88]	; 0x58
 8000f66:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <HAL_MspInit+0x4c>)
 8000f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f6e:	603b      	str	r3, [r7, #0]
 8000f70:	683b      	ldr	r3, [r7, #0]
>>>>>>> Stashed changes

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
<<<<<<< Updated upstream
 8000c6e:	2200      	movs	r2, #0
 8000c70:	210f      	movs	r1, #15
 8000c72:	f06f 0001 	mvn.w	r0, #1
 8000c76:	f000 fb85 	bl	8001384 <HAL_NVIC_SetPriority>
=======
 8000f72:	2200      	movs	r2, #0
 8000f74:	210f      	movs	r1, #15
 8000f76:	f06f 0001 	mvn.w	r0, #1
 8000f7a:	f000 fbe1 	bl	8001740 <HAL_NVIC_SetPriority>
>>>>>>> Stashed changes

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< Updated upstream
 8000c7a:	bf00      	nop
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40021000 	.word	0x40021000

08000c88 <HAL_I2C_MspInit>:
=======
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40021000 	.word	0x40021000

08000f8c <HAL_I2C_MspInit>:
>>>>>>> Stashed changes
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
<<<<<<< Updated upstream
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b096      	sub	sp, #88	; 0x58
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c90:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	60da      	str	r2, [r3, #12]
 8000c9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ca0:	f107 0310 	add.w	r3, r7, #16
 8000ca4:	2234      	movs	r2, #52	; 0x34
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f007 f9df 	bl	800806c <memset>
  if(hi2c->Instance==I2C1)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4a1f      	ldr	r2, [pc, #124]	; (8000d30 <HAL_I2C_MspInit+0xa8>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d137      	bne.n	8000d28 <HAL_I2C_MspInit+0xa0>
=======
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b096      	sub	sp, #88	; 0x58
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f94:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
 8000fa2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fa4:	f107 0310 	add.w	r3, r7, #16
 8000fa8:	2234      	movs	r2, #52	; 0x34
 8000faa:	2100      	movs	r1, #0
 8000fac:	4618      	mov	r0, r3
 8000fae:	f008 f975 	bl	800929c <memset>
  if(hi2c->Instance==I2C1)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a1f      	ldr	r2, [pc, #124]	; (8001034 <HAL_I2C_MspInit+0xa8>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d137      	bne.n	800102c <HAL_I2C_MspInit+0xa0>
>>>>>>> Stashed changes

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
<<<<<<< Updated upstream
 8000cb8:	2340      	movs	r3, #64	; 0x40
 8000cba:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cc0:	f107 0310 	add.w	r3, r7, #16
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f002 fad7 	bl	8003278 <HAL_RCCEx_PeriphCLKConfig>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000cd0:	f7ff ffac 	bl	8000c2c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd4:	4b17      	ldr	r3, [pc, #92]	; (8000d34 <HAL_I2C_MspInit+0xac>)
 8000cd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd8:	4a16      	ldr	r2, [pc, #88]	; (8000d34 <HAL_I2C_MspInit+0xac>)
 8000cda:	f043 0301 	orr.w	r3, r3, #1
 8000cde:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ce0:	4b14      	ldr	r3, [pc, #80]	; (8000d34 <HAL_I2C_MspInit+0xac>)
 8000ce2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce4:	f003 0301 	and.w	r3, r3, #1
 8000ce8:	60fb      	str	r3, [r7, #12]
 8000cea:	68fb      	ldr	r3, [r7, #12]
=======
 8000fbc:	2340      	movs	r3, #64	; 0x40
 8000fbe:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fc4:	f107 0310 	add.w	r3, r7, #16
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f002 ffc5 	bl	8003f58 <HAL_RCCEx_PeriphCLKConfig>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000fd4:	f7ff ffac 	bl	8000f30 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd8:	4b17      	ldr	r3, [pc, #92]	; (8001038 <HAL_I2C_MspInit+0xac>)
 8000fda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fdc:	4a16      	ldr	r2, [pc, #88]	; (8001038 <HAL_I2C_MspInit+0xac>)
 8000fde:	f043 0301 	orr.w	r3, r3, #1
 8000fe2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fe4:	4b14      	ldr	r3, [pc, #80]	; (8001038 <HAL_I2C_MspInit+0xac>)
 8000fe6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe8:	f003 0301 	and.w	r3, r3, #1
 8000fec:	60fb      	str	r3, [r7, #12]
 8000fee:	68fb      	ldr	r3, [r7, #12]
>>>>>>> Stashed changes
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
<<<<<<< Updated upstream
 8000cec:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000cf0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cf2:	2312      	movs	r3, #18
 8000cf4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfa:	2303      	movs	r3, #3
 8000cfc:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cfe:	2304      	movs	r3, #4
 8000d00:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d02:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000d06:	4619      	mov	r1, r3
 8000d08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d0c:	f000 fbe4 	bl	80014d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d10:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <HAL_I2C_MspInit+0xac>)
 8000d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d14:	4a07      	ldr	r2, [pc, #28]	; (8000d34 <HAL_I2C_MspInit+0xac>)
 8000d16:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d1a:	6593      	str	r3, [r2, #88]	; 0x58
 8000d1c:	4b05      	ldr	r3, [pc, #20]	; (8000d34 <HAL_I2C_MspInit+0xac>)
 8000d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d24:	60bb      	str	r3, [r7, #8]
 8000d26:	68bb      	ldr	r3, [r7, #8]
=======
 8000ff0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000ff4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ff6:	2312      	movs	r3, #18
 8000ff8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ffe:	2303      	movs	r3, #3
 8001000:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001002:	2304      	movs	r3, #4
 8001004:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001006:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800100a:	4619      	mov	r1, r3
 800100c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001010:	f000 fe42 	bl	8001c98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001014:	4b08      	ldr	r3, [pc, #32]	; (8001038 <HAL_I2C_MspInit+0xac>)
 8001016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001018:	4a07      	ldr	r2, [pc, #28]	; (8001038 <HAL_I2C_MspInit+0xac>)
 800101a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800101e:	6593      	str	r3, [r2, #88]	; 0x58
 8001020:	4b05      	ldr	r3, [pc, #20]	; (8001038 <HAL_I2C_MspInit+0xac>)
 8001022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001024:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001028:	60bb      	str	r3, [r7, #8]
 800102a:	68bb      	ldr	r3, [r7, #8]
>>>>>>> Stashed changes
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
<<<<<<< Updated upstream
 8000d28:	bf00      	nop
 8000d2a:	3758      	adds	r7, #88	; 0x58
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	40005400 	.word	0x40005400
 8000d34:	40021000 	.word	0x40021000

08000d38 <HAL_UART_MspInit>:
=======
 800102c:	bf00      	nop
 800102e:	3758      	adds	r7, #88	; 0x58
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40005400 	.word	0x40005400
 8001038:	40021000 	.word	0x40021000

0800103c <HAL_UART_MspInit>:
>>>>>>> Stashed changes
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
<<<<<<< Updated upstream
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b098      	sub	sp, #96	; 0x60
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d40:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
 8000d4c:	60da      	str	r2, [r3, #12]
 8000d4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d50:	f107 0318 	add.w	r3, r7, #24
 8000d54:	2234      	movs	r2, #52	; 0x34
 8000d56:	2100      	movs	r1, #0
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f007 f987 	bl	800806c <memset>
  if(huart->Instance==USART1)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a45      	ldr	r2, [pc, #276]	; (8000e78 <HAL_UART_MspInit+0x140>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d13e      	bne.n	8000de6 <HAL_UART_MspInit+0xae>
=======
 800103c:	b580      	push	{r7, lr}
 800103e:	b098      	sub	sp, #96	; 0x60
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001044:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
 8001052:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001054:	f107 0318 	add.w	r3, r7, #24
 8001058:	2234      	movs	r2, #52	; 0x34
 800105a:	2100      	movs	r1, #0
 800105c:	4618      	mov	r0, r3
 800105e:	f008 f91d 	bl	800929c <memset>
  if(huart->Instance==USART1)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a5a      	ldr	r2, [pc, #360]	; (80011d0 <HAL_UART_MspInit+0x194>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d168      	bne.n	800113e <HAL_UART_MspInit+0x102>
>>>>>>> Stashed changes

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
<<<<<<< Updated upstream
 8000d68:	2301      	movs	r3, #1
 8000d6a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d70:	f107 0318 	add.w	r3, r7, #24
 8000d74:	4618      	mov	r0, r3
 8000d76:	f002 fa7f 	bl	8003278 <HAL_RCCEx_PeriphCLKConfig>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d80:	f7ff ff54 	bl	8000c2c <Error_Handler>
=======
 800106c:	2301      	movs	r3, #1
 800106e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001070:	2300      	movs	r3, #0
 8001072:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001074:	f107 0318 	add.w	r3, r7, #24
 8001078:	4618      	mov	r0, r3
 800107a:	f002 ff6d 	bl	8003f58 <HAL_RCCEx_PeriphCLKConfig>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001084:	f7ff ff54 	bl	8000f30 <Error_Handler>
>>>>>>> Stashed changes
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
<<<<<<< Updated upstream
 8000d84:	4b3d      	ldr	r3, [pc, #244]	; (8000e7c <HAL_UART_MspInit+0x144>)
 8000d86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d88:	4a3c      	ldr	r2, [pc, #240]	; (8000e7c <HAL_UART_MspInit+0x144>)
 8000d8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d8e:	6613      	str	r3, [r2, #96]	; 0x60
 8000d90:	4b3a      	ldr	r3, [pc, #232]	; (8000e7c <HAL_UART_MspInit+0x144>)
 8000d92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d98:	617b      	str	r3, [r7, #20]
 8000d9a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9c:	4b37      	ldr	r3, [pc, #220]	; (8000e7c <HAL_UART_MspInit+0x144>)
 8000d9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da0:	4a36      	ldr	r2, [pc, #216]	; (8000e7c <HAL_UART_MspInit+0x144>)
 8000da2:	f043 0302 	orr.w	r3, r3, #2
 8000da6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000da8:	4b34      	ldr	r3, [pc, #208]	; (8000e7c <HAL_UART_MspInit+0x144>)
 8000daa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dac:	f003 0302 	and.w	r3, r3, #2
 8000db0:	613b      	str	r3, [r7, #16]
 8000db2:	693b      	ldr	r3, [r7, #16]
=======
 8001088:	4b52      	ldr	r3, [pc, #328]	; (80011d4 <HAL_UART_MspInit+0x198>)
 800108a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800108c:	4a51      	ldr	r2, [pc, #324]	; (80011d4 <HAL_UART_MspInit+0x198>)
 800108e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001092:	6613      	str	r3, [r2, #96]	; 0x60
 8001094:	4b4f      	ldr	r3, [pc, #316]	; (80011d4 <HAL_UART_MspInit+0x198>)
 8001096:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001098:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800109c:	617b      	str	r3, [r7, #20]
 800109e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a0:	4b4c      	ldr	r3, [pc, #304]	; (80011d4 <HAL_UART_MspInit+0x198>)
 80010a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a4:	4a4b      	ldr	r2, [pc, #300]	; (80011d4 <HAL_UART_MspInit+0x198>)
 80010a6:	f043 0302 	orr.w	r3, r3, #2
 80010aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ac:	4b49      	ldr	r3, [pc, #292]	; (80011d4 <HAL_UART_MspInit+0x198>)
 80010ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b0:	f003 0302 	and.w	r3, r3, #2
 80010b4:	613b      	str	r3, [r7, #16]
 80010b6:	693b      	ldr	r3, [r7, #16]
>>>>>>> Stashed changes
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
<<<<<<< Updated upstream
 8000db4:	23c0      	movs	r3, #192	; 0xc0
 8000db6:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db8:	2302      	movs	r3, #2
 8000dba:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000dc4:	2307      	movs	r3, #7
 8000dc6:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000dcc:	4619      	mov	r1, r3
 8000dce:	482c      	ldr	r0, [pc, #176]	; (8000e80 <HAL_UART_MspInit+0x148>)
 8000dd0:	f000 fb82 	bl	80014d8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	2105      	movs	r1, #5
 8000dd8:	2025      	movs	r0, #37	; 0x25
 8000dda:	f000 fad3 	bl	8001384 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000dde:	2025      	movs	r0, #37	; 0x25
 8000de0:	f000 faec 	bl	80013bc <HAL_NVIC_EnableIRQ>
=======
 80010b8:	23c0      	movs	r3, #192	; 0xc0
 80010ba:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010bc:	2302      	movs	r3, #2
 80010be:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c4:	2303      	movs	r3, #3
 80010c6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010c8:	2307      	movs	r3, #7
 80010ca:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010cc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010d0:	4619      	mov	r1, r3
 80010d2:	4841      	ldr	r0, [pc, #260]	; (80011d8 <HAL_UART_MspInit+0x19c>)
 80010d4:	f000 fde0 	bl	8001c98 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80010d8:	4b40      	ldr	r3, [pc, #256]	; (80011dc <HAL_UART_MspInit+0x1a0>)
 80010da:	4a41      	ldr	r2, [pc, #260]	; (80011e0 <HAL_UART_MspInit+0x1a4>)
 80010dc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 80010de:	4b3f      	ldr	r3, [pc, #252]	; (80011dc <HAL_UART_MspInit+0x1a0>)
 80010e0:	2202      	movs	r2, #2
 80010e2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010e4:	4b3d      	ldr	r3, [pc, #244]	; (80011dc <HAL_UART_MspInit+0x1a0>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010ea:	4b3c      	ldr	r3, [pc, #240]	; (80011dc <HAL_UART_MspInit+0x1a0>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010f0:	4b3a      	ldr	r3, [pc, #232]	; (80011dc <HAL_UART_MspInit+0x1a0>)
 80010f2:	2280      	movs	r2, #128	; 0x80
 80010f4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010f6:	4b39      	ldr	r3, [pc, #228]	; (80011dc <HAL_UART_MspInit+0x1a0>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010fc:	4b37      	ldr	r3, [pc, #220]	; (80011dc <HAL_UART_MspInit+0x1a0>)
 80010fe:	2200      	movs	r2, #0
 8001100:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001102:	4b36      	ldr	r3, [pc, #216]	; (80011dc <HAL_UART_MspInit+0x1a0>)
 8001104:	2200      	movs	r2, #0
 8001106:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001108:	4b34      	ldr	r3, [pc, #208]	; (80011dc <HAL_UART_MspInit+0x1a0>)
 800110a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800110e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001110:	4832      	ldr	r0, [pc, #200]	; (80011dc <HAL_UART_MspInit+0x1a0>)
 8001112:	f000 fb3f 	bl	8001794 <HAL_DMA_Init>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 800111c:	f7ff ff08 	bl	8000f30 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4a2e      	ldr	r2, [pc, #184]	; (80011dc <HAL_UART_MspInit+0x1a0>)
 8001124:	675a      	str	r2, [r3, #116]	; 0x74
 8001126:	4a2d      	ldr	r2, [pc, #180]	; (80011dc <HAL_UART_MspInit+0x1a0>)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800112c:	2200      	movs	r2, #0
 800112e:	2105      	movs	r1, #5
 8001130:	2025      	movs	r0, #37	; 0x25
 8001132:	f000 fb05 	bl	8001740 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001136:	2025      	movs	r0, #37	; 0x25
 8001138:	f000 fb1e 	bl	8001778 <HAL_NVIC_EnableIRQ>
>>>>>>> Stashed changes
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
<<<<<<< Updated upstream
 8000de4:	e043      	b.n	8000e6e <HAL_UART_MspInit+0x136>
  else if(huart->Instance==USART2)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a26      	ldr	r2, [pc, #152]	; (8000e84 <HAL_UART_MspInit+0x14c>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d13e      	bne.n	8000e6e <HAL_UART_MspInit+0x136>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000df0:	2302      	movs	r3, #2
 8000df2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000df4:	2300      	movs	r3, #0
 8000df6:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000df8:	f107 0318 	add.w	r3, r7, #24
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f002 fa3b 	bl	8003278 <HAL_RCCEx_PeriphCLKConfig>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8000e08:	f7ff ff10 	bl	8000c2c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e0c:	4b1b      	ldr	r3, [pc, #108]	; (8000e7c <HAL_UART_MspInit+0x144>)
 8000e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e10:	4a1a      	ldr	r2, [pc, #104]	; (8000e7c <HAL_UART_MspInit+0x144>)
 8000e12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e16:	6593      	str	r3, [r2, #88]	; 0x58
 8000e18:	4b18      	ldr	r3, [pc, #96]	; (8000e7c <HAL_UART_MspInit+0x144>)
 8000e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e20:	60fb      	str	r3, [r7, #12]
 8000e22:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e24:	4b15      	ldr	r3, [pc, #84]	; (8000e7c <HAL_UART_MspInit+0x144>)
 8000e26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e28:	4a14      	ldr	r2, [pc, #80]	; (8000e7c <HAL_UART_MspInit+0x144>)
 8000e2a:	f043 0301 	orr.w	r3, r3, #1
 8000e2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e30:	4b12      	ldr	r3, [pc, #72]	; (8000e7c <HAL_UART_MspInit+0x144>)
 8000e32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e34:	f003 0301 	and.w	r3, r3, #1
 8000e38:	60bb      	str	r3, [r7, #8]
 8000e3a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000e3c:	230c      	movs	r3, #12
 8000e3e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e40:	2302      	movs	r3, #2
 8000e42:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e48:	2303      	movs	r3, #3
 8000e4a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e4c:	2307      	movs	r3, #7
 8000e4e:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e50:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e54:	4619      	mov	r1, r3
 8000e56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e5a:	f000 fb3d 	bl	80014d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	2105      	movs	r1, #5
 8000e62:	2026      	movs	r0, #38	; 0x26
 8000e64:	f000 fa8e 	bl	8001384 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e68:	2026      	movs	r0, #38	; 0x26
 8000e6a:	f000 faa7 	bl	80013bc <HAL_NVIC_EnableIRQ>
}
 8000e6e:	bf00      	nop
 8000e70:	3760      	adds	r7, #96	; 0x60
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40013800 	.word	0x40013800
 8000e7c:	40021000 	.word	0x40021000
 8000e80:	48000400 	.word	0x48000400
 8000e84:	40004400 	.word	0x40004400

08000e88 <HAL_InitTick>:
=======
 800113c:	e043      	b.n	80011c6 <HAL_UART_MspInit+0x18a>
  else if(huart->Instance==USART2)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a28      	ldr	r2, [pc, #160]	; (80011e4 <HAL_UART_MspInit+0x1a8>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d13e      	bne.n	80011c6 <HAL_UART_MspInit+0x18a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001148:	2302      	movs	r3, #2
 800114a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800114c:	2300      	movs	r3, #0
 800114e:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001150:	f107 0318 	add.w	r3, r7, #24
 8001154:	4618      	mov	r0, r3
 8001156:	f002 feff 	bl	8003f58 <HAL_RCCEx_PeriphCLKConfig>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <HAL_UART_MspInit+0x128>
      Error_Handler();
 8001160:	f7ff fee6 	bl	8000f30 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001164:	4b1b      	ldr	r3, [pc, #108]	; (80011d4 <HAL_UART_MspInit+0x198>)
 8001166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001168:	4a1a      	ldr	r2, [pc, #104]	; (80011d4 <HAL_UART_MspInit+0x198>)
 800116a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800116e:	6593      	str	r3, [r2, #88]	; 0x58
 8001170:	4b18      	ldr	r3, [pc, #96]	; (80011d4 <HAL_UART_MspInit+0x198>)
 8001172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800117c:	4b15      	ldr	r3, [pc, #84]	; (80011d4 <HAL_UART_MspInit+0x198>)
 800117e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001180:	4a14      	ldr	r2, [pc, #80]	; (80011d4 <HAL_UART_MspInit+0x198>)
 8001182:	f043 0301 	orr.w	r3, r3, #1
 8001186:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001188:	4b12      	ldr	r3, [pc, #72]	; (80011d4 <HAL_UART_MspInit+0x198>)
 800118a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118c:	f003 0301 	and.w	r3, r3, #1
 8001190:	60bb      	str	r3, [r7, #8]
 8001192:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001194:	230c      	movs	r3, #12
 8001196:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001198:	2302      	movs	r3, #2
 800119a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a0:	2303      	movs	r3, #3
 80011a2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011a4:	2307      	movs	r3, #7
 80011a6:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80011ac:	4619      	mov	r1, r3
 80011ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011b2:	f000 fd71 	bl	8001c98 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80011b6:	2200      	movs	r2, #0
 80011b8:	2105      	movs	r1, #5
 80011ba:	2026      	movs	r0, #38	; 0x26
 80011bc:	f000 fac0 	bl	8001740 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80011c0:	2026      	movs	r0, #38	; 0x26
 80011c2:	f000 fad9 	bl	8001778 <HAL_NVIC_EnableIRQ>
}
 80011c6:	bf00      	nop
 80011c8:	3760      	adds	r7, #96	; 0x60
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40013800 	.word	0x40013800
 80011d4:	40021000 	.word	0x40021000
 80011d8:	48000400 	.word	0x48000400
 80011dc:	200001ec 	.word	0x200001ec
 80011e0:	40020058 	.word	0x40020058
 80011e4:	40004400 	.word	0x40004400

080011e8 <HAL_InitTick>:
>>>>>>> Stashed changes
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
<<<<<<< Updated upstream
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08e      	sub	sp, #56	; 0x38
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
=======
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08e      	sub	sp, #56	; 0x38
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
<<<<<<< Updated upstream
 8000e90:	2300      	movs	r3, #0
 8000e92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e96:	4b34      	ldr	r3, [pc, #208]	; (8000f68 <HAL_InitTick+0xe0>)
 8000e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e9a:	4a33      	ldr	r2, [pc, #204]	; (8000f68 <HAL_InitTick+0xe0>)
 8000e9c:	f043 0310 	orr.w	r3, r3, #16
 8000ea0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ea2:	4b31      	ldr	r3, [pc, #196]	; (8000f68 <HAL_InitTick+0xe0>)
 8000ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ea6:	f003 0310 	and.w	r3, r3, #16
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000eae:	f107 0210 	add.w	r2, r7, #16
 8000eb2:	f107 0314 	add.w	r3, r7, #20
 8000eb6:	4611      	mov	r1, r2
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f002 f94b 	bl	8003154 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ebe:	6a3b      	ldr	r3, [r7, #32]
 8000ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d103      	bne.n	8000ed0 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ec8:	f002 f918 	bl	80030fc <HAL_RCC_GetPCLK1Freq>
 8000ecc:	6378      	str	r0, [r7, #52]	; 0x34
 8000ece:	e004      	b.n	8000eda <HAL_InitTick+0x52>
=======
 80011f0:	2300      	movs	r3, #0
 80011f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80011f6:	4b34      	ldr	r3, [pc, #208]	; (80012c8 <HAL_InitTick+0xe0>)
 80011f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011fa:	4a33      	ldr	r2, [pc, #204]	; (80012c8 <HAL_InitTick+0xe0>)
 80011fc:	f043 0310 	orr.w	r3, r3, #16
 8001200:	6593      	str	r3, [r2, #88]	; 0x58
 8001202:	4b31      	ldr	r3, [pc, #196]	; (80012c8 <HAL_InitTick+0xe0>)
 8001204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001206:	f003 0310 	and.w	r3, r3, #16
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800120e:	f107 0210 	add.w	r2, r7, #16
 8001212:	f107 0314 	add.w	r3, r7, #20
 8001216:	4611      	mov	r1, r2
 8001218:	4618      	mov	r0, r3
 800121a:	f002 fe0b 	bl	8003e34 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800121e:	6a3b      	ldr	r3, [r7, #32]
 8001220:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001224:	2b00      	cmp	r3, #0
 8001226:	d103      	bne.n	8001230 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001228:	f002 fdd8 	bl	8003ddc <HAL_RCC_GetPCLK1Freq>
 800122c:	6378      	str	r0, [r7, #52]	; 0x34
 800122e:	e004      	b.n	800123a <HAL_InitTick+0x52>
>>>>>>> Stashed changes
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
<<<<<<< Updated upstream
 8000ed0:	f002 f914 	bl	80030fc <HAL_RCC_GetPCLK1Freq>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	637b      	str	r3, [r7, #52]	; 0x34
=======
 8001230:	f002 fdd4 	bl	8003ddc <HAL_RCC_GetPCLK1Freq>
 8001234:	4603      	mov	r3, r0
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	637b      	str	r3, [r7, #52]	; 0x34
>>>>>>> Stashed changes
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
<<<<<<< Updated upstream
 8000eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000edc:	4a23      	ldr	r2, [pc, #140]	; (8000f6c <HAL_InitTick+0xe4>)
 8000ede:	fba2 2303 	umull	r2, r3, r2, r3
 8000ee2:	0c9b      	lsrs	r3, r3, #18
 8000ee4:	3b01      	subs	r3, #1
 8000ee6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000ee8:	4b21      	ldr	r3, [pc, #132]	; (8000f70 <HAL_InitTick+0xe8>)
 8000eea:	4a22      	ldr	r2, [pc, #136]	; (8000f74 <HAL_InitTick+0xec>)
 8000eec:	601a      	str	r2, [r3, #0]
=======
 800123a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800123c:	4a23      	ldr	r2, [pc, #140]	; (80012cc <HAL_InitTick+0xe4>)
 800123e:	fba2 2303 	umull	r2, r3, r2, r3
 8001242:	0c9b      	lsrs	r3, r3, #18
 8001244:	3b01      	subs	r3, #1
 8001246:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001248:	4b21      	ldr	r3, [pc, #132]	; (80012d0 <HAL_InitTick+0xe8>)
 800124a:	4a22      	ldr	r2, [pc, #136]	; (80012d4 <HAL_InitTick+0xec>)
 800124c:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
<<<<<<< Updated upstream
 8000eee:	4b20      	ldr	r3, [pc, #128]	; (8000f70 <HAL_InitTick+0xe8>)
 8000ef0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ef4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ef6:	4a1e      	ldr	r2, [pc, #120]	; (8000f70 <HAL_InitTick+0xe8>)
 8000ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000efa:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000efc:	4b1c      	ldr	r3, [pc, #112]	; (8000f70 <HAL_InitTick+0xe8>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f02:	4b1b      	ldr	r3, [pc, #108]	; (8000f70 <HAL_InitTick+0xe8>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f08:	4b19      	ldr	r3, [pc, #100]	; (8000f70 <HAL_InitTick+0xe8>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000f0e:	4818      	ldr	r0, [pc, #96]	; (8000f70 <HAL_InitTick+0xe8>)
 8000f10:	f002 fb48 	bl	80035a4 <HAL_TIM_Base_Init>
 8000f14:	4603      	mov	r3, r0
 8000f16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000f1a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d11b      	bne.n	8000f5a <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000f22:	4813      	ldr	r0, [pc, #76]	; (8000f70 <HAL_InitTick+0xe8>)
 8000f24:	f002 fba0 	bl	8003668 <HAL_TIM_Base_Start_IT>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000f2e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d111      	bne.n	8000f5a <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000f36:	2036      	movs	r0, #54	; 0x36
 8000f38:	f000 fa40 	bl	80013bc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2b0f      	cmp	r3, #15
 8000f40:	d808      	bhi.n	8000f54 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8000f42:	2200      	movs	r2, #0
 8000f44:	6879      	ldr	r1, [r7, #4]
 8000f46:	2036      	movs	r0, #54	; 0x36
 8000f48:	f000 fa1c 	bl	8001384 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f4c:	4a0a      	ldr	r2, [pc, #40]	; (8000f78 <HAL_InitTick+0xf0>)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6013      	str	r3, [r2, #0]
 8000f52:	e002      	b.n	8000f5a <HAL_InitTick+0xd2>
=======
 800124e:	4b20      	ldr	r3, [pc, #128]	; (80012d0 <HAL_InitTick+0xe8>)
 8001250:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001254:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001256:	4a1e      	ldr	r2, [pc, #120]	; (80012d0 <HAL_InitTick+0xe8>)
 8001258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800125a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800125c:	4b1c      	ldr	r3, [pc, #112]	; (80012d0 <HAL_InitTick+0xe8>)
 800125e:	2200      	movs	r2, #0
 8001260:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001262:	4b1b      	ldr	r3, [pc, #108]	; (80012d0 <HAL_InitTick+0xe8>)
 8001264:	2200      	movs	r2, #0
 8001266:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001268:	4b19      	ldr	r3, [pc, #100]	; (80012d0 <HAL_InitTick+0xe8>)
 800126a:	2200      	movs	r2, #0
 800126c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800126e:	4818      	ldr	r0, [pc, #96]	; (80012d0 <HAL_InitTick+0xe8>)
 8001270:	f003 f808 	bl	8004284 <HAL_TIM_Base_Init>
 8001274:	4603      	mov	r3, r0
 8001276:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800127a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800127e:	2b00      	cmp	r3, #0
 8001280:	d11b      	bne.n	80012ba <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001282:	4813      	ldr	r0, [pc, #76]	; (80012d0 <HAL_InitTick+0xe8>)
 8001284:	f003 f860 	bl	8004348 <HAL_TIM_Base_Start_IT>
 8001288:	4603      	mov	r3, r0
 800128a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800128e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001292:	2b00      	cmp	r3, #0
 8001294:	d111      	bne.n	80012ba <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8001296:	2036      	movs	r0, #54	; 0x36
 8001298:	f000 fa6e 	bl	8001778 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2b0f      	cmp	r3, #15
 80012a0:	d808      	bhi.n	80012b4 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 80012a2:	2200      	movs	r2, #0
 80012a4:	6879      	ldr	r1, [r7, #4]
 80012a6:	2036      	movs	r0, #54	; 0x36
 80012a8:	f000 fa4a 	bl	8001740 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012ac:	4a0a      	ldr	r2, [pc, #40]	; (80012d8 <HAL_InitTick+0xf0>)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6013      	str	r3, [r2, #0]
 80012b2:	e002      	b.n	80012ba <HAL_InitTick+0xd2>
>>>>>>> Stashed changes
      }
      else
      {
        status = HAL_ERROR;
<<<<<<< Updated upstream
 8000f54:	2301      	movs	r3, #1
 8000f56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
=======
 80012b4:	2301      	movs	r3, #1
 80012b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
>>>>>>> Stashed changes
      }
    }
  }

 /* Return function status */
  return status;
<<<<<<< Updated upstream
 8000f5a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3738      	adds	r7, #56	; 0x38
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40021000 	.word	0x40021000
 8000f6c:	431bde83 	.word	0x431bde83
 8000f70:	20000314 	.word	0x20000314
 8000f74:	40001000 	.word	0x40001000
 8000f78:	20000004 	.word	0x20000004

08000f7c <NMI_Handler>:
=======
 80012ba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3738      	adds	r7, #56	; 0x38
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40021000 	.word	0x40021000
 80012cc:	431bde83 	.word	0x431bde83
 80012d0:	2000026c 	.word	0x2000026c
 80012d4:	40001000 	.word	0x40001000
 80012d8:	20000004 	.word	0x20000004

080012dc <NMI_Handler>:
>>>>>>> Stashed changes
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< Updated upstream
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
=======
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
<<<<<<< Updated upstream
 8000f80:	e7fe      	b.n	8000f80 <NMI_Handler+0x4>

08000f82 <HardFault_Handler>:
=======
 80012e0:	e7fe      	b.n	80012e0 <NMI_Handler+0x4>

080012e2 <HardFault_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< Updated upstream
 8000f82:	b480      	push	{r7}
 8000f84:	af00      	add	r7, sp, #0
=======
 80012e2:	b480      	push	{r7}
 80012e4:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 8000f86:	e7fe      	b.n	8000f86 <HardFault_Handler+0x4>

08000f88 <MemManage_Handler>:
=======
 80012e6:	e7fe      	b.n	80012e6 <HardFault_Handler+0x4>

080012e8 <MemManage_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
<<<<<<< Updated upstream
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
=======
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 8000f8c:	e7fe      	b.n	8000f8c <MemManage_Handler+0x4>

08000f8e <BusFault_Handler>:
=======
 80012ec:	e7fe      	b.n	80012ec <MemManage_Handler+0x4>

080012ee <BusFault_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
<<<<<<< Updated upstream
 8000f8e:	b480      	push	{r7}
 8000f90:	af00      	add	r7, sp, #0
=======
 80012ee:	b480      	push	{r7}
 80012f0:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 8000f92:	e7fe      	b.n	8000f92 <BusFault_Handler+0x4>

08000f94 <UsageFault_Handler>:
=======
 80012f2:	e7fe      	b.n	80012f2 <BusFault_Handler+0x4>

080012f4 <UsageFault_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
<<<<<<< Updated upstream
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
=======
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 8000f98:	e7fe      	b.n	8000f98 <UsageFault_Handler+0x4>

08000f9a <DebugMon_Handler>:
=======
 80012f8:	e7fe      	b.n	80012f8 <UsageFault_Handler+0x4>

080012fa <DebugMon_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
<<<<<<< Updated upstream
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0
=======
 80012fa:	b480      	push	{r7}
 80012fc:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< Updated upstream
 8000f9e:	bf00      	nop
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <USART1_IRQHandler>:
=======
 80012fe:	bf00      	nop
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800130c:	4802      	ldr	r0, [pc, #8]	; (8001318 <DMA1_Channel5_IRQHandler+0x10>)
 800130e:	f000 fbd8 	bl	8001ac2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	200001ec 	.word	0x200001ec

0800131c <USART1_IRQHandler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
<<<<<<< Updated upstream
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
=======
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
<<<<<<< Updated upstream
 8000fac:	4802      	ldr	r0, [pc, #8]	; (8000fb8 <USART1_IRQHandler+0x10>)
 8000fae:	f002 fe7f 	bl	8003cb0 <HAL_UART_IRQHandler>
=======
 8001320:	4802      	ldr	r0, [pc, #8]	; (800132c <USART1_IRQHandler+0x10>)
 8001322:	f003 fc13 	bl	8004b4c <HAL_UART_IRQHandler>
>>>>>>> Stashed changes
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
<<<<<<< Updated upstream
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	200000dc 	.word	0x200000dc

08000fbc <USART2_IRQHandler>:
=======
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	200000dc 	.word	0x200000dc

08001330 <USART2_IRQHandler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
<<<<<<< Updated upstream
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
=======
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
<<<<<<< Updated upstream
 8000fc0:	4802      	ldr	r0, [pc, #8]	; (8000fcc <USART2_IRQHandler+0x10>)
 8000fc2:	f002 fe75 	bl	8003cb0 <HAL_UART_IRQHandler>
=======
 8001334:	4802      	ldr	r0, [pc, #8]	; (8001340 <USART2_IRQHandler+0x10>)
 8001336:	f003 fc09 	bl	8004b4c <HAL_UART_IRQHandler>
>>>>>>> Stashed changes
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
<<<<<<< Updated upstream
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20000164 	.word	0x20000164

08000fd0 <TIM6_IRQHandler>:
=======
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20000164 	.word	0x20000164

08001344 <TIM6_IRQHandler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
<<<<<<< Updated upstream
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
=======
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
<<<<<<< Updated upstream
 8000fd4:	4802      	ldr	r0, [pc, #8]	; (8000fe0 <TIM6_IRQHandler+0x10>)
 8000fd6:	f002 fb9b 	bl	8003710 <HAL_TIM_IRQHandler>
=======
 8001348:	4802      	ldr	r0, [pc, #8]	; (8001354 <TIM6_IRQHandler+0x10>)
 800134a:	f003 f851 	bl	80043f0 <HAL_TIM_IRQHandler>
>>>>>>> Stashed changes
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
<<<<<<< Updated upstream
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000314 	.word	0x20000314

08000fe4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	617b      	str	r3, [r7, #20]
 8000ff4:	e00a      	b.n	800100c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ff6:	f3af 8000 	nop.w
 8000ffa:	4601      	mov	r1, r0
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	1c5a      	adds	r2, r3, #1
 8001000:	60ba      	str	r2, [r7, #8]
 8001002:	b2ca      	uxtb	r2, r1
 8001004:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	3301      	adds	r3, #1
 800100a:	617b      	str	r3, [r7, #20]
 800100c:	697a      	ldr	r2, [r7, #20]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	429a      	cmp	r2, r3
 8001012:	dbf0      	blt.n	8000ff6 <_read+0x12>
  }

  return len;
 8001014:	687b      	ldr	r3, [r7, #4]
}
 8001016:	4618      	mov	r0, r3
 8001018:	3718      	adds	r7, #24
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b086      	sub	sp, #24
 8001022:	af00      	add	r7, sp, #0
 8001024:	60f8      	str	r0, [r7, #12]
 8001026:	60b9      	str	r1, [r7, #8]
 8001028:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800102a:	2300      	movs	r3, #0
 800102c:	617b      	str	r3, [r7, #20]
 800102e:	e009      	b.n	8001044 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	1c5a      	adds	r2, r3, #1
 8001034:	60ba      	str	r2, [r7, #8]
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff fb3f 	bl	80006bc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	3301      	adds	r3, #1
 8001042:	617b      	str	r3, [r7, #20]
 8001044:	697a      	ldr	r2, [r7, #20]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	429a      	cmp	r2, r3
 800104a:	dbf1      	blt.n	8001030 <_write+0x12>
  }
  return len;
 800104c:	687b      	ldr	r3, [r7, #4]
}
 800104e:	4618      	mov	r0, r3
 8001050:	3718      	adds	r7, #24
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <_close>:

int _close(int file)
{
 8001056:	b480      	push	{r7}
 8001058:	b083      	sub	sp, #12
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800105e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001062:	4618      	mov	r0, r3
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr

0800106e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800106e:	b480      	push	{r7}
 8001070:	b083      	sub	sp, #12
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
 8001076:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800107e:	605a      	str	r2, [r3, #4]
  return 0;
 8001080:	2300      	movs	r3, #0
}
 8001082:	4618      	mov	r0, r3
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr

0800108e <_isatty>:

int _isatty(int file)
{
 800108e:	b480      	push	{r7}
 8001090:	b083      	sub	sp, #12
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001096:	2301      	movs	r3, #1
}
 8001098:	4618      	mov	r0, r3
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b085      	sub	sp, #20
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	60b9      	str	r1, [r7, #8]
 80010ae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3714      	adds	r7, #20
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
	...

080010c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010c8:	4a14      	ldr	r2, [pc, #80]	; (800111c <_sbrk+0x5c>)
 80010ca:	4b15      	ldr	r3, [pc, #84]	; (8001120 <_sbrk+0x60>)
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010d4:	4b13      	ldr	r3, [pc, #76]	; (8001124 <_sbrk+0x64>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d102      	bne.n	80010e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010dc:	4b11      	ldr	r3, [pc, #68]	; (8001124 <_sbrk+0x64>)
 80010de:	4a12      	ldr	r2, [pc, #72]	; (8001128 <_sbrk+0x68>)
 80010e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010e2:	4b10      	ldr	r3, [pc, #64]	; (8001124 <_sbrk+0x64>)
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4413      	add	r3, r2
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d207      	bcs.n	8001100 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010f0:	f007 f81a 	bl	8008128 <__errno>
 80010f4:	4603      	mov	r3, r0
 80010f6:	220c      	movs	r2, #12
 80010f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010fe:	e009      	b.n	8001114 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001100:	4b08      	ldr	r3, [pc, #32]	; (8001124 <_sbrk+0x64>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001106:	4b07      	ldr	r3, [pc, #28]	; (8001124 <_sbrk+0x64>)
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4413      	add	r3, r2
 800110e:	4a05      	ldr	r2, [pc, #20]	; (8001124 <_sbrk+0x64>)
 8001110:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001112:	68fb      	ldr	r3, [r7, #12]
}
 8001114:	4618      	mov	r0, r3
 8001116:	3718      	adds	r7, #24
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	2000a000 	.word	0x2000a000
 8001120:	00000400 	.word	0x00000400
 8001124:	20000360 	.word	0x20000360
 8001128:	20002628 	.word	0x20002628

0800112c <SystemInit>:
=======
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	2000026c 	.word	0x2000026c

08001358 <_read>:
 8001358:	b580      	push	{r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	607a      	str	r2, [r7, #4]
 8001364:	2300      	movs	r3, #0
 8001366:	617b      	str	r3, [r7, #20]
 8001368:	e00a      	b.n	8001380 <_read+0x28>
 800136a:	f3af 8000 	nop.w
 800136e:	4601      	mov	r1, r0
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	1c5a      	adds	r2, r3, #1
 8001374:	60ba      	str	r2, [r7, #8]
 8001376:	b2ca      	uxtb	r2, r1
 8001378:	701a      	strb	r2, [r3, #0]
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	3301      	adds	r3, #1
 800137e:	617b      	str	r3, [r7, #20]
 8001380:	697a      	ldr	r2, [r7, #20]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	429a      	cmp	r2, r3
 8001386:	dbf0      	blt.n	800136a <_read+0x12>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	4618      	mov	r0, r3
 800138c:	3718      	adds	r7, #24
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <_write>:
 8001392:	b580      	push	{r7, lr}
 8001394:	b086      	sub	sp, #24
 8001396:	af00      	add	r7, sp, #0
 8001398:	60f8      	str	r0, [r7, #12]
 800139a:	60b9      	str	r1, [r7, #8]
 800139c:	607a      	str	r2, [r7, #4]
 800139e:	2300      	movs	r3, #0
 80013a0:	617b      	str	r3, [r7, #20]
 80013a2:	e009      	b.n	80013b8 <_write+0x26>
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	1c5a      	adds	r2, r3, #1
 80013a8:	60ba      	str	r2, [r7, #8]
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff f9cf 	bl	8000750 <__io_putchar>
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	3301      	adds	r3, #1
 80013b6:	617b      	str	r3, [r7, #20]
 80013b8:	697a      	ldr	r2, [r7, #20]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	429a      	cmp	r2, r3
 80013be:	dbf1      	blt.n	80013a4 <_write+0x12>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	4618      	mov	r0, r3
 80013c4:	3718      	adds	r7, #24
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <_close>:
 80013ca:	b480      	push	{r7}
 80013cc:	b083      	sub	sp, #12
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
 80013d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013d6:	4618      	mov	r0, r3
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr

080013e2 <_fstat>:
 80013e2:	b480      	push	{r7}
 80013e4:	b083      	sub	sp, #12
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
 80013ea:	6039      	str	r1, [r7, #0]
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013f2:	605a      	str	r2, [r3, #4]
 80013f4:	2300      	movs	r3, #0
 80013f6:	4618      	mov	r0, r3
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr

08001402 <_isatty>:
 8001402:	b480      	push	{r7}
 8001404:	b083      	sub	sp, #12
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
 800140a:	2301      	movs	r3, #1
 800140c:	4618      	mov	r0, r3
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <_lseek>:
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	60b9      	str	r1, [r7, #8]
 8001422:	607a      	str	r2, [r7, #4]
 8001424:	2300      	movs	r3, #0
 8001426:	4618      	mov	r0, r3
 8001428:	3714      	adds	r7, #20
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
	...

08001434 <_sbrk>:
 8001434:	b580      	push	{r7, lr}
 8001436:	b086      	sub	sp, #24
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	4a14      	ldr	r2, [pc, #80]	; (8001490 <_sbrk+0x5c>)
 800143e:	4b15      	ldr	r3, [pc, #84]	; (8001494 <_sbrk+0x60>)
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	617b      	str	r3, [r7, #20]
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	613b      	str	r3, [r7, #16]
 8001448:	4b13      	ldr	r3, [pc, #76]	; (8001498 <_sbrk+0x64>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d102      	bne.n	8001456 <_sbrk+0x22>
 8001450:	4b11      	ldr	r3, [pc, #68]	; (8001498 <_sbrk+0x64>)
 8001452:	4a12      	ldr	r2, [pc, #72]	; (800149c <_sbrk+0x68>)
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	4b10      	ldr	r3, [pc, #64]	; (8001498 <_sbrk+0x64>)
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4413      	add	r3, r2
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	429a      	cmp	r2, r3
 8001462:	d207      	bcs.n	8001474 <_sbrk+0x40>
 8001464:	f007 ff78 	bl	8009358 <__errno>
 8001468:	4603      	mov	r3, r0
 800146a:	220c      	movs	r2, #12
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001472:	e009      	b.n	8001488 <_sbrk+0x54>
 8001474:	4b08      	ldr	r3, [pc, #32]	; (8001498 <_sbrk+0x64>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	60fb      	str	r3, [r7, #12]
 800147a:	4b07      	ldr	r3, [pc, #28]	; (8001498 <_sbrk+0x64>)
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4413      	add	r3, r2
 8001482:	4a05      	ldr	r2, [pc, #20]	; (8001498 <_sbrk+0x64>)
 8001484:	6013      	str	r3, [r2, #0]
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	4618      	mov	r0, r3
 800148a:	3718      	adds	r7, #24
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	2000a000 	.word	0x2000a000
 8001494:	00000400 	.word	0x00000400
 8001498:	200002b8 	.word	0x200002b8
 800149c:	20002580 	.word	0x20002580

080014a0 <SystemInit>:
>>>>>>> Stashed changes
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
<<<<<<< Updated upstream
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
=======
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
<<<<<<< Updated upstream
 8001130:	4b06      	ldr	r3, [pc, #24]	; (800114c <SystemInit+0x20>)
 8001132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001136:	4a05      	ldr	r2, [pc, #20]	; (800114c <SystemInit+0x20>)
 8001138:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800113c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	e000ed00 	.word	0xe000ed00

08001150 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001150:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001188 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001154:	f7ff ffea 	bl	800112c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001158:	480c      	ldr	r0, [pc, #48]	; (800118c <LoopForever+0x6>)
  ldr r1, =_edata
 800115a:	490d      	ldr	r1, [pc, #52]	; (8001190 <LoopForever+0xa>)
  ldr r2, =_sidata
 800115c:	4a0d      	ldr	r2, [pc, #52]	; (8001194 <LoopForever+0xe>)
  movs r3, #0
 800115e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001160:	e002      	b.n	8001168 <LoopCopyDataInit>

08001162 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001162:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001164:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001166:	3304      	adds	r3, #4

08001168 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001168:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800116a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800116c:	d3f9      	bcc.n	8001162 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800116e:	4a0a      	ldr	r2, [pc, #40]	; (8001198 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001170:	4c0a      	ldr	r4, [pc, #40]	; (800119c <LoopForever+0x16>)
  movs r3, #0
 8001172:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001174:	e001      	b.n	800117a <LoopFillZerobss>

08001176 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001176:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001178:	3204      	adds	r2, #4

0800117a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800117a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800117c:	d3fb      	bcc.n	8001176 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800117e:	f006 ffd9 	bl	8008134 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001182:	f7ff faad 	bl	80006e0 <main>

08001186 <LoopForever>:

LoopForever:
    b LoopForever
 8001186:	e7fe      	b.n	8001186 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001188:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800118c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001190:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001194:	08008fd4 	.word	0x08008fd4
  ldr r2, =_sbss
 8001198:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800119c:	20002624 	.word	0x20002624

080011a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011a0:	e7fe      	b.n	80011a0 <ADC1_2_IRQHandler>

080011a2 <HAL_Init>:
=======
 80014a4:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <SystemInit+0x20>)
 80014a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014aa:	4a05      	ldr	r2, [pc, #20]	; (80014c0 <SystemInit+0x20>)
 80014ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80014b4:	bf00      	nop
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	e000ed00 	.word	0xe000ed00

080014c4 <Reset_Handler>:
 80014c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014fc <LoopForever+0x2>
 80014c8:	f7ff ffea 	bl	80014a0 <SystemInit>
 80014cc:	480c      	ldr	r0, [pc, #48]	; (8001500 <LoopForever+0x6>)
 80014ce:	490d      	ldr	r1, [pc, #52]	; (8001504 <LoopForever+0xa>)
 80014d0:	4a0d      	ldr	r2, [pc, #52]	; (8001508 <LoopForever+0xe>)
 80014d2:	2300      	movs	r3, #0
 80014d4:	e002      	b.n	80014dc <LoopCopyDataInit>

080014d6 <CopyDataInit>:
 80014d6:	58d4      	ldr	r4, [r2, r3]
 80014d8:	50c4      	str	r4, [r0, r3]
 80014da:	3304      	adds	r3, #4

080014dc <LoopCopyDataInit>:
 80014dc:	18c4      	adds	r4, r0, r3
 80014de:	428c      	cmp	r4, r1
 80014e0:	d3f9      	bcc.n	80014d6 <CopyDataInit>
 80014e2:	4a0a      	ldr	r2, [pc, #40]	; (800150c <LoopForever+0x12>)
 80014e4:	4c0a      	ldr	r4, [pc, #40]	; (8001510 <LoopForever+0x16>)
 80014e6:	2300      	movs	r3, #0
 80014e8:	e001      	b.n	80014ee <LoopFillZerobss>

080014ea <FillZerobss>:
 80014ea:	6013      	str	r3, [r2, #0]
 80014ec:	3204      	adds	r2, #4

080014ee <LoopFillZerobss>:
 80014ee:	42a2      	cmp	r2, r4
 80014f0:	d3fb      	bcc.n	80014ea <FillZerobss>
 80014f2:	f007 ff37 	bl	8009364 <__libc_init_array>
 80014f6:	f7ff f93d 	bl	8000774 <main>

080014fa <LoopForever>:
 80014fa:	e7fe      	b.n	80014fa <LoopForever>
 80014fc:	2000a000 	.word	0x2000a000
 8001500:	20000000 	.word	0x20000000
 8001504:	2000006c 	.word	0x2000006c
 8001508:	0800a31c 	.word	0x0800a31c
 800150c:	2000006c 	.word	0x2000006c
 8001510:	2000257c 	.word	0x2000257c

08001514 <ADC1_2_IRQHandler>:
 8001514:	e7fe      	b.n	8001514 <ADC1_2_IRQHandler>

08001516 <HAL_Init>:
>>>>>>> Stashed changes
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< Updated upstream
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b082      	sub	sp, #8
 80011a6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011a8:	2300      	movs	r3, #0
 80011aa:	71fb      	strb	r3, [r7, #7]
=======
 8001516:	b580      	push	{r7, lr}
 8001518:	b082      	sub	sp, #8
 800151a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800151c:	2300      	movs	r3, #0
 800151e:	71fb      	strb	r3, [r7, #7]
>>>>>>> Stashed changes
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< Updated upstream
 80011ac:	2003      	movs	r0, #3
 80011ae:	f000 f8de 	bl	800136e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011b2:	200f      	movs	r0, #15
 80011b4:	f7ff fe68 	bl	8000e88 <HAL_InitTick>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d002      	beq.n	80011c4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	71fb      	strb	r3, [r7, #7]
 80011c2:	e001      	b.n	80011c8 <HAL_Init+0x26>
=======
 8001520:	2003      	movs	r0, #3
 8001522:	f000 f902 	bl	800172a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001526:	200f      	movs	r0, #15
 8001528:	f7ff fe5e 	bl	80011e8 <HAL_InitTick>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d002      	beq.n	8001538 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	71fb      	strb	r3, [r7, #7]
 8001536:	e001      	b.n	800153c <HAL_Init+0x26>
>>>>>>> Stashed changes
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
<<<<<<< Updated upstream
 80011c4:	f7ff fd38 	bl	8000c38 <HAL_MspInit>
=======
 8001538:	f7ff fd00 	bl	8000f3c <HAL_MspInit>
>>>>>>> Stashed changes
  }

  /* Return function status */
  return status;
<<<<<<< Updated upstream
 80011c8:	79fb      	ldrb	r3, [r7, #7]
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
	...

080011d4 <HAL_IncTick>:
=======
 800153c:	79fb      	ldrb	r3, [r7, #7]
}
 800153e:	4618      	mov	r0, r3
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
	...

08001548 <HAL_IncTick>:
>>>>>>> Stashed changes
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< Updated upstream
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011d8:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <HAL_IncTick+0x20>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	461a      	mov	r2, r3
 80011de:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <HAL_IncTick+0x24>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4413      	add	r3, r2
 80011e4:	4a04      	ldr	r2, [pc, #16]	; (80011f8 <HAL_IncTick+0x24>)
 80011e6:	6013      	str	r3, [r2, #0]
}
 80011e8:	bf00      	nop
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	20000008 	.word	0x20000008
 80011f8:	20000364 	.word	0x20000364

080011fc <HAL_GetTick>:
=======
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800154c:	4b06      	ldr	r3, [pc, #24]	; (8001568 <HAL_IncTick+0x20>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	461a      	mov	r2, r3
 8001552:	4b06      	ldr	r3, [pc, #24]	; (800156c <HAL_IncTick+0x24>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4413      	add	r3, r2
 8001558:	4a04      	ldr	r2, [pc, #16]	; (800156c <HAL_IncTick+0x24>)
 800155a:	6013      	str	r3, [r2, #0]
}
 800155c:	bf00      	nop
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	20000008 	.word	0x20000008
 800156c:	200002bc 	.word	0x200002bc

08001570 <HAL_GetTick>:
>>>>>>> Stashed changes
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< Updated upstream
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001200:	4b03      	ldr	r3, [pc, #12]	; (8001210 <HAL_GetTick+0x14>)
 8001202:	681b      	ldr	r3, [r3, #0]
}
 8001204:	4618      	mov	r0, r3
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	20000364 	.word	0x20000364

08001214 <__NVIC_SetPriorityGrouping>:
=======
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  return uwTick;
 8001574:	4b03      	ldr	r3, [pc, #12]	; (8001584 <HAL_GetTick+0x14>)
 8001576:	681b      	ldr	r3, [r3, #0]
}
 8001578:	4618      	mov	r0, r3
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	200002bc 	.word	0x200002bc

08001588 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001590:	f7ff ffee 	bl	8001570 <HAL_GetTick>
 8001594:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015a0:	d005      	beq.n	80015ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80015a2:	4b0a      	ldr	r3, [pc, #40]	; (80015cc <HAL_Delay+0x44>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	461a      	mov	r2, r3
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	4413      	add	r3, r2
 80015ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015ae:	bf00      	nop
 80015b0:	f7ff ffde 	bl	8001570 <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	68fa      	ldr	r2, [r7, #12]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d8f7      	bhi.n	80015b0 <HAL_Delay+0x28>
  {
  }
}
 80015c0:	bf00      	nop
 80015c2:	bf00      	nop
 80015c4:	3710      	adds	r7, #16
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	20000008 	.word	0x20000008

080015d0 <__NVIC_SetPriorityGrouping>:
>>>>>>> Stashed changes
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< Updated upstream
 8001214:	b480      	push	{r7}
 8001216:	b085      	sub	sp, #20
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f003 0307 	and.w	r3, r3, #7
 8001222:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001224:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <__NVIC_SetPriorityGrouping+0x44>)
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800122a:	68ba      	ldr	r2, [r7, #8]
 800122c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001230:	4013      	ands	r3, r2
 8001232:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800123c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001240:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001244:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001246:	4a04      	ldr	r2, [pc, #16]	; (8001258 <__NVIC_SetPriorityGrouping+0x44>)
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	60d3      	str	r3, [r2, #12]
}
 800124c:	bf00      	nop
 800124e:	3714      	adds	r7, #20
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	e000ed00 	.word	0xe000ed00

0800125c <__NVIC_GetPriorityGrouping>:
=======
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f003 0307 	and.w	r3, r3, #7
 80015de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015e0:	4b0c      	ldr	r3, [pc, #48]	; (8001614 <__NVIC_SetPriorityGrouping+0x44>)
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015e6:	68ba      	ldr	r2, [r7, #8]
 80015e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015ec:	4013      	ands	r3, r2
 80015ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001600:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001602:	4a04      	ldr	r2, [pc, #16]	; (8001614 <__NVIC_SetPriorityGrouping+0x44>)
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	60d3      	str	r3, [r2, #12]
}
 8001608:	bf00      	nop
 800160a:	3714      	adds	r7, #20
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	e000ed00 	.word	0xe000ed00

08001618 <__NVIC_GetPriorityGrouping>:
>>>>>>> Stashed changes
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
<<<<<<< Updated upstream
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001260:	4b04      	ldr	r3, [pc, #16]	; (8001274 <__NVIC_GetPriorityGrouping+0x18>)
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	0a1b      	lsrs	r3, r3, #8
 8001266:	f003 0307 	and.w	r3, r3, #7
}
 800126a:	4618      	mov	r0, r3
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr
 8001274:	e000ed00 	.word	0xe000ed00

08001278 <__NVIC_EnableIRQ>:
=======
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800161c:	4b04      	ldr	r3, [pc, #16]	; (8001630 <__NVIC_GetPriorityGrouping+0x18>)
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	0a1b      	lsrs	r3, r3, #8
 8001622:	f003 0307 	and.w	r3, r3, #7
}
 8001626:	4618      	mov	r0, r3
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	e000ed00 	.word	0xe000ed00

08001634 <__NVIC_EnableIRQ>:
>>>>>>> Stashed changes
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< Updated upstream
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001286:	2b00      	cmp	r3, #0
 8001288:	db0b      	blt.n	80012a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	f003 021f 	and.w	r2, r3, #31
 8001290:	4907      	ldr	r1, [pc, #28]	; (80012b0 <__NVIC_EnableIRQ+0x38>)
 8001292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001296:	095b      	lsrs	r3, r3, #5
 8001298:	2001      	movs	r0, #1
 800129a:	fa00 f202 	lsl.w	r2, r0, r2
 800129e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012a2:	bf00      	nop
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	e000e100 	.word	0xe000e100

080012b4 <__NVIC_SetPriority>:
=======
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800163e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001642:	2b00      	cmp	r3, #0
 8001644:	db0b      	blt.n	800165e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001646:	79fb      	ldrb	r3, [r7, #7]
 8001648:	f003 021f 	and.w	r2, r3, #31
 800164c:	4907      	ldr	r1, [pc, #28]	; (800166c <__NVIC_EnableIRQ+0x38>)
 800164e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001652:	095b      	lsrs	r3, r3, #5
 8001654:	2001      	movs	r0, #1
 8001656:	fa00 f202 	lsl.w	r2, r0, r2
 800165a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800165e:	bf00      	nop
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	e000e100 	.word	0xe000e100

08001670 <__NVIC_SetPriority>:
>>>>>>> Stashed changes
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< Updated upstream
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	6039      	str	r1, [r7, #0]
 80012be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	db0a      	blt.n	80012de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	b2da      	uxtb	r2, r3
 80012cc:	490c      	ldr	r1, [pc, #48]	; (8001300 <__NVIC_SetPriority+0x4c>)
 80012ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d2:	0112      	lsls	r2, r2, #4
 80012d4:	b2d2      	uxtb	r2, r2
 80012d6:	440b      	add	r3, r1
 80012d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
=======
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	6039      	str	r1, [r7, #0]
 800167a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800167c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001680:	2b00      	cmp	r3, #0
 8001682:	db0a      	blt.n	800169a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	b2da      	uxtb	r2, r3
 8001688:	490c      	ldr	r1, [pc, #48]	; (80016bc <__NVIC_SetPriority+0x4c>)
 800168a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168e:	0112      	lsls	r2, r2, #4
 8001690:	b2d2      	uxtb	r2, r2
 8001692:	440b      	add	r3, r1
 8001694:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
>>>>>>> Stashed changes
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
<<<<<<< Updated upstream
 80012dc:	e00a      	b.n	80012f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	b2da      	uxtb	r2, r3
 80012e2:	4908      	ldr	r1, [pc, #32]	; (8001304 <__NVIC_SetPriority+0x50>)
 80012e4:	79fb      	ldrb	r3, [r7, #7]
 80012e6:	f003 030f 	and.w	r3, r3, #15
 80012ea:	3b04      	subs	r3, #4
 80012ec:	0112      	lsls	r2, r2, #4
 80012ee:	b2d2      	uxtb	r2, r2
 80012f0:	440b      	add	r3, r1
 80012f2:	761a      	strb	r2, [r3, #24]
}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	e000e100 	.word	0xe000e100
 8001304:	e000ed00 	.word	0xe000ed00

08001308 <NVIC_EncodePriority>:
=======
 8001698:	e00a      	b.n	80016b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	b2da      	uxtb	r2, r3
 800169e:	4908      	ldr	r1, [pc, #32]	; (80016c0 <__NVIC_SetPriority+0x50>)
 80016a0:	79fb      	ldrb	r3, [r7, #7]
 80016a2:	f003 030f 	and.w	r3, r3, #15
 80016a6:	3b04      	subs	r3, #4
 80016a8:	0112      	lsls	r2, r2, #4
 80016aa:	b2d2      	uxtb	r2, r2
 80016ac:	440b      	add	r3, r1
 80016ae:	761a      	strb	r2, [r3, #24]
}
 80016b0:	bf00      	nop
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	e000e100 	.word	0xe000e100
 80016c0:	e000ed00 	.word	0xe000ed00

080016c4 <NVIC_EncodePriority>:
>>>>>>> Stashed changes
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< Updated upstream
 8001308:	b480      	push	{r7}
 800130a:	b089      	sub	sp, #36	; 0x24
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	f003 0307 	and.w	r3, r3, #7
 800131a:	61fb      	str	r3, [r7, #28]
=======
 80016c4:	b480      	push	{r7}
 80016c6:	b089      	sub	sp, #36	; 0x24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f003 0307 	and.w	r3, r3, #7
 80016d6:	61fb      	str	r3, [r7, #28]
>>>>>>> Stashed changes
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< Updated upstream
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	f1c3 0307 	rsb	r3, r3, #7
 8001322:	2b04      	cmp	r3, #4
 8001324:	bf28      	it	cs
 8001326:	2304      	movcs	r3, #4
 8001328:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	3304      	adds	r3, #4
 800132e:	2b06      	cmp	r3, #6
 8001330:	d902      	bls.n	8001338 <NVIC_EncodePriority+0x30>
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	3b03      	subs	r3, #3
 8001336:	e000      	b.n	800133a <NVIC_EncodePriority+0x32>
 8001338:	2300      	movs	r3, #0
 800133a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800133c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	43da      	mvns	r2, r3
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	401a      	ands	r2, r3
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001350:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	fa01 f303 	lsl.w	r3, r1, r3
 800135a:	43d9      	mvns	r1, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001360:	4313      	orrs	r3, r2
         );
}
 8001362:	4618      	mov	r0, r3
 8001364:	3724      	adds	r7, #36	; 0x24
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr

0800136e <HAL_NVIC_SetPriorityGrouping>:
=======
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	f1c3 0307 	rsb	r3, r3, #7
 80016de:	2b04      	cmp	r3, #4
 80016e0:	bf28      	it	cs
 80016e2:	2304      	movcs	r3, #4
 80016e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	3304      	adds	r3, #4
 80016ea:	2b06      	cmp	r3, #6
 80016ec:	d902      	bls.n	80016f4 <NVIC_EncodePriority+0x30>
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	3b03      	subs	r3, #3
 80016f2:	e000      	b.n	80016f6 <NVIC_EncodePriority+0x32>
 80016f4:	2300      	movs	r3, #0
 80016f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001702:	43da      	mvns	r2, r3
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	401a      	ands	r2, r3
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800170c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	fa01 f303 	lsl.w	r3, r1, r3
 8001716:	43d9      	mvns	r1, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800171c:	4313      	orrs	r3, r2
         );
}
 800171e:	4618      	mov	r0, r3
 8001720:	3724      	adds	r7, #36	; 0x24
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr

0800172a <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> Stashed changes
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< Updated upstream
 800136e:	b580      	push	{r7, lr}
 8001370:	b082      	sub	sp, #8
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
=======
 800172a:	b580      	push	{r7, lr}
 800172c:	b082      	sub	sp, #8
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< Updated upstream
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f7ff ff4c 	bl	8001214 <__NVIC_SetPriorityGrouping>
}
 800137c:	bf00      	nop
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <HAL_NVIC_SetPriority>:
=======
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f7ff ff4c 	bl	80015d0 <__NVIC_SetPriorityGrouping>
}
 8001738:	bf00      	nop
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <HAL_NVIC_SetPriority>:
>>>>>>> Stashed changes
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< Updated upstream
 8001384:	b580      	push	{r7, lr}
 8001386:	b086      	sub	sp, #24
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	607a      	str	r2, [r7, #4]
 8001390:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001392:	2300      	movs	r3, #0
 8001394:	617b      	str	r3, [r7, #20]
=======
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	607a      	str	r2, [r7, #4]
 800174c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800174e:	2300      	movs	r3, #0
 8001750:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< Updated upstream
 8001396:	f7ff ff61 	bl	800125c <__NVIC_GetPriorityGrouping>
 800139a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	68b9      	ldr	r1, [r7, #8]
 80013a0:	6978      	ldr	r0, [r7, #20]
 80013a2:	f7ff ffb1 	bl	8001308 <NVIC_EncodePriority>
 80013a6:	4602      	mov	r2, r0
 80013a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ac:	4611      	mov	r1, r2
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff ff80 	bl	80012b4 <__NVIC_SetPriority>
}
 80013b4:	bf00      	nop
 80013b6:	3718      	adds	r7, #24
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}

080013bc <HAL_NVIC_EnableIRQ>:
=======
 8001752:	f7ff ff61 	bl	8001618 <__NVIC_GetPriorityGrouping>
 8001756:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	68b9      	ldr	r1, [r7, #8]
 800175c:	6978      	ldr	r0, [r7, #20]
 800175e:	f7ff ffb1 	bl	80016c4 <NVIC_EncodePriority>
 8001762:	4602      	mov	r2, r0
 8001764:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001768:	4611      	mov	r1, r2
 800176a:	4618      	mov	r0, r3
 800176c:	f7ff ff80 	bl	8001670 <__NVIC_SetPriority>
}
 8001770:	bf00      	nop
 8001772:	3718      	adds	r7, #24
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}

08001778 <HAL_NVIC_EnableIRQ>:
>>>>>>> Stashed changes
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< Updated upstream
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4603      	mov	r3, r0
 80013c4:	71fb      	strb	r3, [r7, #7]
=======
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	4603      	mov	r3, r0
 8001780:	71fb      	strb	r3, [r7, #7]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
<<<<<<< Updated upstream
 80013c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff ff54 	bl	8001278 <__NVIC_EnableIRQ>
}
 80013d0:	bf00      	nop
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <HAL_DMA_Abort>:
=======
 8001782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff ff54 	bl	8001634 <__NVIC_EnableIRQ>
}
 800178c:	bf00      	nop
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}

08001794 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d101      	bne.n	80017a6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e098      	b.n	80018d8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	461a      	mov	r2, r3
 80017ac:	4b4d      	ldr	r3, [pc, #308]	; (80018e4 <HAL_DMA_Init+0x150>)
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d80f      	bhi.n	80017d2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	461a      	mov	r2, r3
 80017b8:	4b4b      	ldr	r3, [pc, #300]	; (80018e8 <HAL_DMA_Init+0x154>)
 80017ba:	4413      	add	r3, r2
 80017bc:	4a4b      	ldr	r2, [pc, #300]	; (80018ec <HAL_DMA_Init+0x158>)
 80017be:	fba2 2303 	umull	r2, r3, r2, r3
 80017c2:	091b      	lsrs	r3, r3, #4
 80017c4:	009a      	lsls	r2, r3, #2
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a48      	ldr	r2, [pc, #288]	; (80018f0 <HAL_DMA_Init+0x15c>)
 80017ce:	641a      	str	r2, [r3, #64]	; 0x40
 80017d0:	e00e      	b.n	80017f0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	461a      	mov	r2, r3
 80017d8:	4b46      	ldr	r3, [pc, #280]	; (80018f4 <HAL_DMA_Init+0x160>)
 80017da:	4413      	add	r3, r2
 80017dc:	4a43      	ldr	r2, [pc, #268]	; (80018ec <HAL_DMA_Init+0x158>)
 80017de:	fba2 2303 	umull	r2, r3, r2, r3
 80017e2:	091b      	lsrs	r3, r3, #4
 80017e4:	009a      	lsls	r2, r3, #2
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a42      	ldr	r2, [pc, #264]	; (80018f8 <HAL_DMA_Init+0x164>)
 80017ee:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2202      	movs	r2, #2
 80017f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800180a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001814:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	691b      	ldr	r3, [r3, #16]
 800181a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001820:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	699b      	ldr	r3, [r3, #24]
 8001826:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800182c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6a1b      	ldr	r3, [r3, #32]
 8001832:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001834:	68fa      	ldr	r2, [r7, #12]
 8001836:	4313      	orrs	r3, r2
 8001838:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	68fa      	ldr	r2, [r7, #12]
 8001840:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800184a:	d039      	beq.n	80018c0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001850:	4a27      	ldr	r2, [pc, #156]	; (80018f0 <HAL_DMA_Init+0x15c>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d11a      	bne.n	800188c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001856:	4b29      	ldr	r3, [pc, #164]	; (80018fc <HAL_DMA_Init+0x168>)
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185e:	f003 031c 	and.w	r3, r3, #28
 8001862:	210f      	movs	r1, #15
 8001864:	fa01 f303 	lsl.w	r3, r1, r3
 8001868:	43db      	mvns	r3, r3
 800186a:	4924      	ldr	r1, [pc, #144]	; (80018fc <HAL_DMA_Init+0x168>)
 800186c:	4013      	ands	r3, r2
 800186e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001870:	4b22      	ldr	r3, [pc, #136]	; (80018fc <HAL_DMA_Init+0x168>)
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6859      	ldr	r1, [r3, #4]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187c:	f003 031c 	and.w	r3, r3, #28
 8001880:	fa01 f303 	lsl.w	r3, r1, r3
 8001884:	491d      	ldr	r1, [pc, #116]	; (80018fc <HAL_DMA_Init+0x168>)
 8001886:	4313      	orrs	r3, r2
 8001888:	600b      	str	r3, [r1, #0]
 800188a:	e019      	b.n	80018c0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800188c:	4b1c      	ldr	r3, [pc, #112]	; (8001900 <HAL_DMA_Init+0x16c>)
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001894:	f003 031c 	and.w	r3, r3, #28
 8001898:	210f      	movs	r1, #15
 800189a:	fa01 f303 	lsl.w	r3, r1, r3
 800189e:	43db      	mvns	r3, r3
 80018a0:	4917      	ldr	r1, [pc, #92]	; (8001900 <HAL_DMA_Init+0x16c>)
 80018a2:	4013      	ands	r3, r2
 80018a4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80018a6:	4b16      	ldr	r3, [pc, #88]	; (8001900 <HAL_DMA_Init+0x16c>)
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6859      	ldr	r1, [r3, #4]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b2:	f003 031c 	and.w	r3, r3, #28
 80018b6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ba:	4911      	ldr	r1, [pc, #68]	; (8001900 <HAL_DMA_Init+0x16c>)
 80018bc:	4313      	orrs	r3, r2
 80018be:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2200      	movs	r2, #0
 80018c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2201      	movs	r2, #1
 80018ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2200      	movs	r2, #0
 80018d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80018d6:	2300      	movs	r3, #0
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3714      	adds	r7, #20
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr
 80018e4:	40020407 	.word	0x40020407
 80018e8:	bffdfff8 	.word	0xbffdfff8
 80018ec:	cccccccd 	.word	0xcccccccd
 80018f0:	40020000 	.word	0x40020000
 80018f4:	bffdfbf8 	.word	0xbffdfbf8
 80018f8:	40020400 	.word	0x40020400
 80018fc:	400200a8 	.word	0x400200a8
 8001900:	400204a8 	.word	0x400204a8

08001904 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b086      	sub	sp, #24
 8001908:	af00      	add	r7, sp, #0
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	607a      	str	r2, [r7, #4]
 8001910:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001912:	2300      	movs	r3, #0
 8001914:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800191c:	2b01      	cmp	r3, #1
 800191e:	d101      	bne.n	8001924 <HAL_DMA_Start_IT+0x20>
 8001920:	2302      	movs	r3, #2
 8001922:	e04b      	b.n	80019bc <HAL_DMA_Start_IT+0xb8>
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2201      	movs	r2, #1
 8001928:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001932:	b2db      	uxtb	r3, r3
 8001934:	2b01      	cmp	r3, #1
 8001936:	d13a      	bne.n	80019ae <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2202      	movs	r2, #2
 800193c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	2200      	movs	r2, #0
 8001944:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f022 0201 	bic.w	r2, r2, #1
 8001954:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	68b9      	ldr	r1, [r7, #8]
 800195c:	68f8      	ldr	r0, [r7, #12]
 800195e:	f000 f96b 	bl	8001c38 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	2b00      	cmp	r3, #0
 8001968:	d008      	beq.n	800197c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f042 020e 	orr.w	r2, r2, #14
 8001978:	601a      	str	r2, [r3, #0]
 800197a:	e00f      	b.n	800199c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f022 0204 	bic.w	r2, r2, #4
 800198a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f042 020a 	orr.w	r2, r2, #10
 800199a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f042 0201 	orr.w	r2, r2, #1
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	e005      	b.n	80019ba <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	2200      	movs	r2, #0
 80019b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80019b6:	2302      	movs	r3, #2
 80019b8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80019ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3718      	adds	r7, #24
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <HAL_DMA_Abort>:
>>>>>>> Stashed changes
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 80013d8:	b480      	push	{r7}
 80013da:	b085      	sub	sp, #20
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013e0:	2300      	movs	r3, #0
 80013e2:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d008      	beq.n	8001402 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2204      	movs	r2, #4
 80013f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2200      	movs	r2, #0
 80013fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e022      	b.n	8001448 <HAL_DMA_Abort+0x70>
=======
 80019c4:	b480      	push	{r7}
 80019c6:	b085      	sub	sp, #20
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019cc:	2300      	movs	r3, #0
 80019ce:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d008      	beq.n	80019ee <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2204      	movs	r2, #4
 80019e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e022      	b.n	8001a34 <HAL_DMA_Abort+0x70>
>>>>>>> Stashed changes
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
<<<<<<< Updated upstream
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f022 020e 	bic.w	r2, r2, #14
 8001410:	601a      	str	r2, [r3, #0]
=======
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f022 020e 	bic.w	r2, r2, #14
 80019fc:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
<<<<<<< Updated upstream
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f022 0201 	bic.w	r2, r2, #1
 8001420:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001426:	f003 021c 	and.w	r2, r3, #28
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142e:	2101      	movs	r1, #1
 8001430:	fa01 f202 	lsl.w	r2, r1, r2
 8001434:	605a      	str	r2, [r3, #4]
=======
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f022 0201 	bic.w	r2, r2, #1
 8001a0c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a12:	f003 021c 	and.w	r2, r3, #28
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1a:	2101      	movs	r1, #1
 8001a1c:	fa01 f202 	lsl.w	r2, r1, r2
 8001a20:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
<<<<<<< Updated upstream
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2201      	movs	r2, #1
 800143a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2200      	movs	r2, #0
 8001442:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001446:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001448:	4618      	mov	r0, r3
 800144a:	3714      	adds	r7, #20
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <HAL_DMA_Abort_IT>:
=======
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2201      	movs	r2, #1
 8001a26:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001a32:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3714      	adds	r7, #20
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <HAL_DMA_Abort_IT>:
>>>>>>> Stashed changes
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800145c:	2300      	movs	r3, #0
 800145e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001466:	b2db      	uxtb	r3, r3
 8001468:	2b02      	cmp	r3, #2
 800146a:	d005      	beq.n	8001478 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2204      	movs	r2, #4
 8001470:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	73fb      	strb	r3, [r7, #15]
 8001476:	e029      	b.n	80014cc <HAL_DMA_Abort_IT+0x78>
=======
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d005      	beq.n	8001a64 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2204      	movs	r2, #4
 8001a5c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	73fb      	strb	r3, [r7, #15]
 8001a62:	e029      	b.n	8001ab8 <HAL_DMA_Abort_IT+0x78>
>>>>>>> Stashed changes
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
<<<<<<< Updated upstream
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f022 020e 	bic.w	r2, r2, #14
 8001486:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f022 0201 	bic.w	r2, r2, #1
 8001496:	601a      	str	r2, [r3, #0]
=======
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f022 020e 	bic.w	r2, r2, #14
 8001a72:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f022 0201 	bic.w	r2, r2, #1
 8001a82:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
<<<<<<< Updated upstream
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149c:	f003 021c 	and.w	r2, r3, #28
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a4:	2101      	movs	r1, #1
 80014a6:	fa01 f202 	lsl.w	r2, r1, r2
 80014aa:	605a      	str	r2, [r3, #4]
=======
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a88:	f003 021c 	and.w	r2, r3, #28
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a90:	2101      	movs	r1, #1
 8001a92:	fa01 f202 	lsl.w	r2, r1, r2
 8001a96:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
<<<<<<< Updated upstream
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2201      	movs	r2, #1
 80014b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2200      	movs	r2, #0
 80014b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d003      	beq.n	80014cc <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	4798      	blx	r3
    }
  }
  return status;
 80014cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3710      	adds	r7, #16
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
	...

080014d8 <HAL_GPIO_Init>:
=======
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d003      	beq.n	8001ab8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	4798      	blx	r3
    }
  }
  return status;
 8001ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3710      	adds	r7, #16
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b084      	sub	sp, #16
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ade:	f003 031c 	and.w	r3, r3, #28
 8001ae2:	2204      	movs	r2, #4
 8001ae4:	409a      	lsls	r2, r3
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d026      	beq.n	8001b3c <HAL_DMA_IRQHandler+0x7a>
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	f003 0304 	and.w	r3, r3, #4
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d021      	beq.n	8001b3c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0320 	and.w	r3, r3, #32
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d107      	bne.n	8001b16 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f022 0204 	bic.w	r2, r2, #4
 8001b14:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1a:	f003 021c 	and.w	r2, r3, #28
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b22:	2104      	movs	r1, #4
 8001b24:	fa01 f202 	lsl.w	r2, r1, r2
 8001b28:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d071      	beq.n	8001c16 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001b3a:	e06c      	b.n	8001c16 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b40:	f003 031c 	and.w	r3, r3, #28
 8001b44:	2202      	movs	r2, #2
 8001b46:	409a      	lsls	r2, r3
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d02e      	beq.n	8001bae <HAL_DMA_IRQHandler+0xec>
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d029      	beq.n	8001bae <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0320 	and.w	r3, r3, #32
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d10b      	bne.n	8001b80 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f022 020a 	bic.w	r2, r2, #10
 8001b76:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b84:	f003 021c 	and.w	r2, r3, #28
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8c:	2102      	movs	r1, #2
 8001b8e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b92:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2200      	movs	r2, #0
 8001b98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d038      	beq.n	8001c16 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001bac:	e033      	b.n	8001c16 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb2:	f003 031c 	and.w	r3, r3, #28
 8001bb6:	2208      	movs	r2, #8
 8001bb8:	409a      	lsls	r2, r3
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d02a      	beq.n	8001c18 <HAL_DMA_IRQHandler+0x156>
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	f003 0308 	and.w	r3, r3, #8
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d025      	beq.n	8001c18 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f022 020e 	bic.w	r2, r2, #14
 8001bda:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be0:	f003 021c 	and.w	r2, r3, #28
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be8:	2101      	movs	r1, #1
 8001bea:	fa01 f202 	lsl.w	r2, r1, r2
 8001bee:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d004      	beq.n	8001c18 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001c16:	bf00      	nop
 8001c18:	bf00      	nop
}
 8001c1a:	3710      	adds	r7, #16
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	607a      	str	r2, [r7, #4]
 8001c44:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4a:	f003 021c 	and.w	r2, r3, #28
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c52:	2101      	movs	r1, #1
 8001c54:	fa01 f202 	lsl.w	r2, r1, r2
 8001c58:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	683a      	ldr	r2, [r7, #0]
 8001c60:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	2b10      	cmp	r3, #16
 8001c68:	d108      	bne.n	8001c7c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	68ba      	ldr	r2, [r7, #8]
 8001c78:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001c7a:	e007      	b.n	8001c8c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	68ba      	ldr	r2, [r7, #8]
 8001c82:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	60da      	str	r2, [r3, #12]
}
 8001c8c:	bf00      	nop
 8001c8e:	3714      	adds	r7, #20
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <HAL_GPIO_Init>:
>>>>>>> Stashed changes
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< Updated upstream
 80014d8:	b480      	push	{r7}
 80014da:	b087      	sub	sp, #28
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014e2:	2300      	movs	r3, #0
 80014e4:	617b      	str	r3, [r7, #20]
=======
 8001c98:	b480      	push	{r7}
 8001c9a:	b087      	sub	sp, #28
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
<<<<<<< Updated upstream
 80014e6:	e14e      	b.n	8001786 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	2101      	movs	r1, #1
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	fa01 f303 	lsl.w	r3, r1, r3
 80014f4:	4013      	ands	r3, r2
 80014f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	f000 8140 	beq.w	8001780 <HAL_GPIO_Init+0x2a8>
=======
 8001ca6:	e14e      	b.n	8001f46 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	2101      	movs	r1, #1
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	f000 8140 	beq.w	8001f40 <HAL_GPIO_Init+0x2a8>
>>>>>>> Stashed changes
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
<<<<<<< Updated upstream
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f003 0303 	and.w	r3, r3, #3
 8001508:	2b01      	cmp	r3, #1
 800150a:	d005      	beq.n	8001518 <HAL_GPIO_Init+0x40>
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f003 0303 	and.w	r3, r3, #3
 8001514:	2b02      	cmp	r3, #2
 8001516:	d130      	bne.n	800157a <HAL_GPIO_Init+0xa2>
=======
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f003 0303 	and.w	r3, r3, #3
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d005      	beq.n	8001cd8 <HAL_GPIO_Init+0x40>
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f003 0303 	and.w	r3, r3, #3
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d130      	bne.n	8001d3a <HAL_GPIO_Init+0xa2>
>>>>>>> Stashed changes
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
<<<<<<< Updated upstream
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	2203      	movs	r2, #3
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	43db      	mvns	r3, r3
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	4013      	ands	r3, r2
 800152e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	68da      	ldr	r2, [r3, #12]
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	4313      	orrs	r3, r2
 8001540:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	693a      	ldr	r2, [r7, #16]
 8001546:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800154e:	2201      	movs	r2, #1
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	43db      	mvns	r3, r3
 8001558:	693a      	ldr	r2, [r7, #16]
 800155a:	4013      	ands	r3, r2
 800155c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	091b      	lsrs	r3, r3, #4
 8001564:	f003 0201 	and.w	r2, r3, #1
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	fa02 f303 	lsl.w	r3, r2, r3
 800156e:	693a      	ldr	r2, [r7, #16]
 8001570:	4313      	orrs	r3, r2
 8001572:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	605a      	str	r2, [r3, #4]
=======
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	2203      	movs	r2, #3
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	693a      	ldr	r2, [r7, #16]
 8001cec:	4013      	ands	r3, r2
 8001cee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	68da      	ldr	r2, [r3, #12]
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	693a      	ldr	r2, [r7, #16]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	693a      	ldr	r2, [r7, #16]
 8001d06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d0e:	2201      	movs	r2, #1
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	fa02 f303 	lsl.w	r3, r2, r3
 8001d16:	43db      	mvns	r3, r3
 8001d18:	693a      	ldr	r2, [r7, #16]
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	091b      	lsrs	r3, r3, #4
 8001d24:	f003 0201 	and.w	r2, r3, #1
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2e:	693a      	ldr	r2, [r7, #16]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
<<<<<<< Updated upstream
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f003 0303 	and.w	r3, r3, #3
 8001582:	2b03      	cmp	r3, #3
 8001584:	d017      	beq.n	80015b6 <HAL_GPIO_Init+0xde>
=======
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f003 0303 	and.w	r3, r3, #3
 8001d42:	2b03      	cmp	r3, #3
 8001d44:	d017      	beq.n	8001d76 <HAL_GPIO_Init+0xde>
>>>>>>> Stashed changes
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
<<<<<<< Updated upstream
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	2203      	movs	r2, #3
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	43db      	mvns	r3, r3
 8001598:	693a      	ldr	r2, [r7, #16]
 800159a:	4013      	ands	r3, r2
 800159c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	689a      	ldr	r2, [r3, #8]
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	60da      	str	r2, [r3, #12]
=======
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	2203      	movs	r2, #3
 8001d52:	fa02 f303 	lsl.w	r3, r2, r3
 8001d56:	43db      	mvns	r3, r3
 8001d58:	693a      	ldr	r2, [r7, #16]
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	689a      	ldr	r2, [r3, #8]
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	693a      	ldr	r2, [r7, #16]
 8001d74:	60da      	str	r2, [r3, #12]
>>>>>>> Stashed changes
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
<<<<<<< Updated upstream
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f003 0303 	and.w	r3, r3, #3
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d123      	bne.n	800160a <HAL_GPIO_Init+0x132>
=======
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f003 0303 	and.w	r3, r3, #3
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d123      	bne.n	8001dca <HAL_GPIO_Init+0x132>
>>>>>>> Stashed changes
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
<<<<<<< Updated upstream
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	08da      	lsrs	r2, r3, #3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	3208      	adds	r2, #8
 80015ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	f003 0307 	and.w	r3, r3, #7
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	220f      	movs	r2, #15
 80015da:	fa02 f303 	lsl.w	r3, r2, r3
 80015de:	43db      	mvns	r3, r3
 80015e0:	693a      	ldr	r2, [r7, #16]
 80015e2:	4013      	ands	r3, r2
 80015e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	691a      	ldr	r2, [r3, #16]
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	f003 0307 	and.w	r3, r3, #7
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	08da      	lsrs	r2, r3, #3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	3208      	adds	r2, #8
 8001604:	6939      	ldr	r1, [r7, #16]
 8001606:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
=======
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	08da      	lsrs	r2, r3, #3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	3208      	adds	r2, #8
 8001d8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	f003 0307 	and.w	r3, r3, #7
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	220f      	movs	r2, #15
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	43db      	mvns	r3, r3
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	4013      	ands	r3, r2
 8001da4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	691a      	ldr	r2, [r3, #16]
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	f003 0307 	and.w	r3, r3, #7
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	fa02 f303 	lsl.w	r3, r2, r3
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	08da      	lsrs	r2, r3, #3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	3208      	adds	r2, #8
 8001dc4:	6939      	ldr	r1, [r7, #16]
 8001dc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
>>>>>>> Stashed changes
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
<<<<<<< Updated upstream
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	2203      	movs	r2, #3
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	43db      	mvns	r3, r3
 800161c:	693a      	ldr	r2, [r7, #16]
 800161e:	4013      	ands	r3, r2
 8001620:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f003 0203 	and.w	r2, r3, #3
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	fa02 f303 	lsl.w	r3, r2, r3
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	4313      	orrs	r3, r2
 8001636:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	601a      	str	r2, [r3, #0]
=======
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	2203      	movs	r2, #3
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	43db      	mvns	r3, r3
 8001ddc:	693a      	ldr	r2, [r7, #16]
 8001dde:	4013      	ands	r3, r2
 8001de0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f003 0203 	and.w	r2, r3, #3
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	fa02 f303 	lsl.w	r3, r2, r3
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
<<<<<<< Updated upstream
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001646:	2b00      	cmp	r3, #0
 8001648:	f000 809a 	beq.w	8001780 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800164c:	4b55      	ldr	r3, [pc, #340]	; (80017a4 <HAL_GPIO_Init+0x2cc>)
 800164e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001650:	4a54      	ldr	r2, [pc, #336]	; (80017a4 <HAL_GPIO_Init+0x2cc>)
 8001652:	f043 0301 	orr.w	r3, r3, #1
 8001656:	6613      	str	r3, [r2, #96]	; 0x60
 8001658:	4b52      	ldr	r3, [pc, #328]	; (80017a4 <HAL_GPIO_Init+0x2cc>)
 800165a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800165c:	f003 0301 	and.w	r3, r3, #1
 8001660:	60bb      	str	r3, [r7, #8]
 8001662:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001664:	4a50      	ldr	r2, [pc, #320]	; (80017a8 <HAL_GPIO_Init+0x2d0>)
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	089b      	lsrs	r3, r3, #2
 800166a:	3302      	adds	r3, #2
 800166c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001670:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	f003 0303 	and.w	r3, r3, #3
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	220f      	movs	r2, #15
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	43db      	mvns	r3, r3
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	4013      	ands	r3, r2
 8001686:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800168e:	d013      	beq.n	80016b8 <HAL_GPIO_Init+0x1e0>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	4a46      	ldr	r2, [pc, #280]	; (80017ac <HAL_GPIO_Init+0x2d4>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d00d      	beq.n	80016b4 <HAL_GPIO_Init+0x1dc>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	4a45      	ldr	r2, [pc, #276]	; (80017b0 <HAL_GPIO_Init+0x2d8>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d007      	beq.n	80016b0 <HAL_GPIO_Init+0x1d8>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	4a44      	ldr	r2, [pc, #272]	; (80017b4 <HAL_GPIO_Init+0x2dc>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d101      	bne.n	80016ac <HAL_GPIO_Init+0x1d4>
 80016a8:	2303      	movs	r3, #3
 80016aa:	e006      	b.n	80016ba <HAL_GPIO_Init+0x1e2>
 80016ac:	2307      	movs	r3, #7
 80016ae:	e004      	b.n	80016ba <HAL_GPIO_Init+0x1e2>
 80016b0:	2302      	movs	r3, #2
 80016b2:	e002      	b.n	80016ba <HAL_GPIO_Init+0x1e2>
 80016b4:	2301      	movs	r3, #1
 80016b6:	e000      	b.n	80016ba <HAL_GPIO_Init+0x1e2>
 80016b8:	2300      	movs	r3, #0
 80016ba:	697a      	ldr	r2, [r7, #20]
 80016bc:	f002 0203 	and.w	r2, r2, #3
 80016c0:	0092      	lsls	r2, r2, #2
 80016c2:	4093      	lsls	r3, r2
 80016c4:	693a      	ldr	r2, [r7, #16]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80016ca:	4937      	ldr	r1, [pc, #220]	; (80017a8 <HAL_GPIO_Init+0x2d0>)
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	089b      	lsrs	r3, r3, #2
 80016d0:	3302      	adds	r3, #2
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016d8:	4b37      	ldr	r3, [pc, #220]	; (80017b8 <HAL_GPIO_Init+0x2e0>)
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	43db      	mvns	r3, r3
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	4013      	ands	r3, r2
 80016e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d003      	beq.n	80016fc <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80016f4:	693a      	ldr	r2, [r7, #16]
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016fc:	4a2e      	ldr	r2, [pc, #184]	; (80017b8 <HAL_GPIO_Init+0x2e0>)
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001702:	4b2d      	ldr	r3, [pc, #180]	; (80017b8 <HAL_GPIO_Init+0x2e0>)
 8001704:	68db      	ldr	r3, [r3, #12]
 8001706:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	43db      	mvns	r3, r3
 800170c:	693a      	ldr	r2, [r7, #16]
 800170e:	4013      	ands	r3, r2
 8001710:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d003      	beq.n	8001726 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	4313      	orrs	r3, r2
 8001724:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001726:	4a24      	ldr	r2, [pc, #144]	; (80017b8 <HAL_GPIO_Init+0x2e0>)
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800172c:	4b22      	ldr	r3, [pc, #136]	; (80017b8 <HAL_GPIO_Init+0x2e0>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	43db      	mvns	r3, r3
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	4013      	ands	r3, r2
 800173a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d003      	beq.n	8001750 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	4313      	orrs	r3, r2
 800174e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001750:	4a19      	ldr	r2, [pc, #100]	; (80017b8 <HAL_GPIO_Init+0x2e0>)
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001756:	4b18      	ldr	r3, [pc, #96]	; (80017b8 <HAL_GPIO_Init+0x2e0>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	43db      	mvns	r3, r3
 8001760:	693a      	ldr	r2, [r7, #16]
 8001762:	4013      	ands	r3, r2
 8001764:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d003      	beq.n	800177a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	4313      	orrs	r3, r2
 8001778:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800177a:	4a0f      	ldr	r2, [pc, #60]	; (80017b8 <HAL_GPIO_Init+0x2e0>)
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	6013      	str	r3, [r2, #0]
=======
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	f000 809a 	beq.w	8001f40 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e0c:	4b55      	ldr	r3, [pc, #340]	; (8001f64 <HAL_GPIO_Init+0x2cc>)
 8001e0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e10:	4a54      	ldr	r2, [pc, #336]	; (8001f64 <HAL_GPIO_Init+0x2cc>)
 8001e12:	f043 0301 	orr.w	r3, r3, #1
 8001e16:	6613      	str	r3, [r2, #96]	; 0x60
 8001e18:	4b52      	ldr	r3, [pc, #328]	; (8001f64 <HAL_GPIO_Init+0x2cc>)
 8001e1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e1c:	f003 0301 	and.w	r3, r3, #1
 8001e20:	60bb      	str	r3, [r7, #8]
 8001e22:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e24:	4a50      	ldr	r2, [pc, #320]	; (8001f68 <HAL_GPIO_Init+0x2d0>)
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	089b      	lsrs	r3, r3, #2
 8001e2a:	3302      	adds	r3, #2
 8001e2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e30:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	f003 0303 	and.w	r3, r3, #3
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	220f      	movs	r2, #15
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	43db      	mvns	r3, r3
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	4013      	ands	r3, r2
 8001e46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e4e:	d013      	beq.n	8001e78 <HAL_GPIO_Init+0x1e0>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	4a46      	ldr	r2, [pc, #280]	; (8001f6c <HAL_GPIO_Init+0x2d4>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d00d      	beq.n	8001e74 <HAL_GPIO_Init+0x1dc>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	4a45      	ldr	r2, [pc, #276]	; (8001f70 <HAL_GPIO_Init+0x2d8>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d007      	beq.n	8001e70 <HAL_GPIO_Init+0x1d8>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	4a44      	ldr	r2, [pc, #272]	; (8001f74 <HAL_GPIO_Init+0x2dc>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d101      	bne.n	8001e6c <HAL_GPIO_Init+0x1d4>
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e006      	b.n	8001e7a <HAL_GPIO_Init+0x1e2>
 8001e6c:	2307      	movs	r3, #7
 8001e6e:	e004      	b.n	8001e7a <HAL_GPIO_Init+0x1e2>
 8001e70:	2302      	movs	r3, #2
 8001e72:	e002      	b.n	8001e7a <HAL_GPIO_Init+0x1e2>
 8001e74:	2301      	movs	r3, #1
 8001e76:	e000      	b.n	8001e7a <HAL_GPIO_Init+0x1e2>
 8001e78:	2300      	movs	r3, #0
 8001e7a:	697a      	ldr	r2, [r7, #20]
 8001e7c:	f002 0203 	and.w	r2, r2, #3
 8001e80:	0092      	lsls	r2, r2, #2
 8001e82:	4093      	lsls	r3, r2
 8001e84:	693a      	ldr	r2, [r7, #16]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e8a:	4937      	ldr	r1, [pc, #220]	; (8001f68 <HAL_GPIO_Init+0x2d0>)
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	089b      	lsrs	r3, r3, #2
 8001e90:	3302      	adds	r3, #2
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e98:	4b37      	ldr	r3, [pc, #220]	; (8001f78 <HAL_GPIO_Init+0x2e0>)
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	693a      	ldr	r2, [r7, #16]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d003      	beq.n	8001ebc <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001eb4:	693a      	ldr	r2, [r7, #16]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ebc:	4a2e      	ldr	r2, [pc, #184]	; (8001f78 <HAL_GPIO_Init+0x2e0>)
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ec2:	4b2d      	ldr	r3, [pc, #180]	; (8001f78 <HAL_GPIO_Init+0x2e0>)
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	43db      	mvns	r3, r3
 8001ecc:	693a      	ldr	r2, [r7, #16]
 8001ece:	4013      	ands	r3, r2
 8001ed0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d003      	beq.n	8001ee6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001ede:	693a      	ldr	r2, [r7, #16]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ee6:	4a24      	ldr	r2, [pc, #144]	; (8001f78 <HAL_GPIO_Init+0x2e0>)
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001eec:	4b22      	ldr	r3, [pc, #136]	; (8001f78 <HAL_GPIO_Init+0x2e0>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	693a      	ldr	r2, [r7, #16]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d003      	beq.n	8001f10 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001f08:	693a      	ldr	r2, [r7, #16]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f10:	4a19      	ldr	r2, [pc, #100]	; (8001f78 <HAL_GPIO_Init+0x2e0>)
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001f16:	4b18      	ldr	r3, [pc, #96]	; (8001f78 <HAL_GPIO_Init+0x2e0>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	43db      	mvns	r3, r3
 8001f20:	693a      	ldr	r2, [r7, #16]
 8001f22:	4013      	ands	r3, r2
 8001f24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d003      	beq.n	8001f3a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f3a:	4a0f      	ldr	r2, [pc, #60]	; (8001f78 <HAL_GPIO_Init+0x2e0>)
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
      }
    }

    position++;
<<<<<<< Updated upstream
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	3301      	adds	r3, #1
 8001784:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	fa22 f303 	lsr.w	r3, r2, r3
 8001790:	2b00      	cmp	r3, #0
 8001792:	f47f aea9 	bne.w	80014e8 <HAL_GPIO_Init+0x10>
  }
}
 8001796:	bf00      	nop
 8001798:	bf00      	nop
 800179a:	371c      	adds	r7, #28
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	40021000 	.word	0x40021000
 80017a8:	40010000 	.word	0x40010000
 80017ac:	48000400 	.word	0x48000400
 80017b0:	48000800 	.word	0x48000800
 80017b4:	48000c00 	.word	0x48000c00
 80017b8:	40010400 	.word	0x40010400

080017bc <HAL_GPIO_WritePin>:
=======
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	3301      	adds	r3, #1
 8001f44:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	f47f aea9 	bne.w	8001ca8 <HAL_GPIO_Init+0x10>
  }
}
 8001f56:	bf00      	nop
 8001f58:	bf00      	nop
 8001f5a:	371c      	adds	r7, #28
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	40021000 	.word	0x40021000
 8001f68:	40010000 	.word	0x40010000
 8001f6c:	48000400 	.word	0x48000400
 8001f70:	48000800 	.word	0x48000800
 8001f74:	48000c00 	.word	0x48000c00
 8001f78:	40010400 	.word	0x40010400

08001f7c <HAL_GPIO_WritePin>:
>>>>>>> Stashed changes
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< Updated upstream
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	460b      	mov	r3, r1
 80017c6:	807b      	strh	r3, [r7, #2]
 80017c8:	4613      	mov	r3, r2
 80017ca:	707b      	strb	r3, [r7, #1]
=======
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	460b      	mov	r3, r1
 8001f86:	807b      	strh	r3, [r7, #2]
 8001f88:	4613      	mov	r3, r2
 8001f8a:	707b      	strb	r3, [r7, #1]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
<<<<<<< Updated upstream
 80017cc:	787b      	ldrb	r3, [r7, #1]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d003      	beq.n	80017da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017d2:	887a      	ldrh	r2, [r7, #2]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	619a      	str	r2, [r3, #24]
=======
 8001f8c:	787b      	ldrb	r3, [r7, #1]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d003      	beq.n	8001f9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f92:	887a      	ldrh	r2, [r7, #2]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	619a      	str	r2, [r3, #24]
>>>>>>> Stashed changes
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
<<<<<<< Updated upstream
 80017d8:	e002      	b.n	80017e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017da:	887a      	ldrh	r2, [r7, #2]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <HAL_I2C_Init>:
=======
 8001f98:	e002      	b.n	8001fa0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f9a:	887a      	ldrh	r2, [r7, #2]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <HAL_I2C_Init>:
>>>>>>> Stashed changes
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
<<<<<<< Updated upstream
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d101      	bne.n	80017fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e08d      	b.n	800191a <HAL_I2C_Init+0x12e>
=======
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d101      	bne.n	8001fbe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e08d      	b.n	80020da <HAL_I2C_Init+0x12e>
>>>>>>> Stashed changes
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
<<<<<<< Updated upstream
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001804:	b2db      	uxtb	r3, r3
 8001806:	2b00      	cmp	r3, #0
 8001808:	d106      	bne.n	8001818 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2200      	movs	r2, #0
 800180e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
=======
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d106      	bne.n	8001fd8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
>>>>>>> Stashed changes

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
<<<<<<< Updated upstream
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f7ff fa38 	bl	8000c88 <HAL_I2C_MspInit>
=======
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f7fe ffda 	bl	8000f8c <HAL_I2C_MspInit>
>>>>>>> Stashed changes
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
<<<<<<< Updated upstream
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2224      	movs	r2, #36	; 0x24
 800181c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f022 0201 	bic.w	r2, r2, #1
 800182e:	601a      	str	r2, [r3, #0]
=======
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2224      	movs	r2, #36	; 0x24
 8001fdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f022 0201 	bic.w	r2, r2, #1
 8001fee:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
<<<<<<< Updated upstream
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685a      	ldr	r2, [r3, #4]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800183c:	611a      	str	r2, [r3, #16]
=======
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685a      	ldr	r2, [r3, #4]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ffc:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
<<<<<<< Updated upstream
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	689a      	ldr	r2, [r3, #8]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800184c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	2b01      	cmp	r3, #1
 8001854:	d107      	bne.n	8001866 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	689a      	ldr	r2, [r3, #8]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001862:	609a      	str	r2, [r3, #8]
 8001864:	e006      	b.n	8001874 <HAL_I2C_Init+0x88>
=======
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	689a      	ldr	r2, [r3, #8]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800200c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	2b01      	cmp	r3, #1
 8002014:	d107      	bne.n	8002026 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	689a      	ldr	r2, [r3, #8]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002022:	609a      	str	r2, [r3, #8]
 8002024:	e006      	b.n	8002034 <HAL_I2C_Init+0x88>
>>>>>>> Stashed changes
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
<<<<<<< Updated upstream
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	689a      	ldr	r2, [r3, #8]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001872:	609a      	str	r2, [r3, #8]
=======
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	689a      	ldr	r2, [r3, #8]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002032:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
<<<<<<< Updated upstream
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	2b02      	cmp	r3, #2
 800187a:	d108      	bne.n	800188e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	685a      	ldr	r2, [r3, #4]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800188a:	605a      	str	r2, [r3, #4]
 800188c:	e007      	b.n	800189e <HAL_I2C_Init+0xb2>
=======
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	2b02      	cmp	r3, #2
 800203a:	d108      	bne.n	800204e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	685a      	ldr	r2, [r3, #4]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800204a:	605a      	str	r2, [r3, #4]
 800204c:	e007      	b.n	800205e <HAL_I2C_Init+0xb2>
>>>>>>> Stashed changes
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
<<<<<<< Updated upstream
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	685a      	ldr	r2, [r3, #4]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800189c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	6812      	ldr	r2, [r2, #0]
 80018a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018b0:	6053      	str	r3, [r2, #4]
=======
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	685a      	ldr	r2, [r3, #4]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800205c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	6812      	ldr	r2, [r2, #0]
 8002068:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800206c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002070:	6053      	str	r3, [r2, #4]
>>>>>>> Stashed changes

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
<<<<<<< Updated upstream
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	68da      	ldr	r2, [r3, #12]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80018c0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	691a      	ldr	r2, [r3, #16]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	695b      	ldr	r3, [r3, #20]
 80018ca:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	699b      	ldr	r3, [r3, #24]
 80018d2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	430a      	orrs	r2, r1
 80018da:	60da      	str	r2, [r3, #12]
=======
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	68da      	ldr	r2, [r3, #12]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002080:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	691a      	ldr	r2, [r3, #16]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	695b      	ldr	r3, [r3, #20]
 800208a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	430a      	orrs	r2, r1
 800209a:	60da      	str	r2, [r3, #12]
>>>>>>> Stashed changes

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
<<<<<<< Updated upstream
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	69d9      	ldr	r1, [r3, #28]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a1a      	ldr	r2, [r3, #32]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	430a      	orrs	r2, r1
 80018ea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f042 0201 	orr.w	r2, r2, #1
 80018fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2200      	movs	r2, #0
 8001900:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2220      	movs	r2, #32
 8001906:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2200      	movs	r2, #0
 800190e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2200      	movs	r2, #0
 8001914:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
	...

08001924 <HAL_I2C_Mem_Write>:
=======
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	69d9      	ldr	r1, [r3, #28]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6a1a      	ldr	r2, [r3, #32]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	430a      	orrs	r2, r1
 80020aa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f042 0201 	orr.w	r2, r2, #1
 80020ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2220      	movs	r2, #32
 80020c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
	...

080020e4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b088      	sub	sp, #32
 80020e8:	af02      	add	r7, sp, #8
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	607a      	str	r2, [r7, #4]
 80020ee:	461a      	mov	r2, r3
 80020f0:	460b      	mov	r3, r1
 80020f2:	817b      	strh	r3, [r7, #10]
 80020f4:	4613      	mov	r3, r2
 80020f6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	2b20      	cmp	r3, #32
 8002102:	f040 80fd 	bne.w	8002300 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800210c:	2b01      	cmp	r3, #1
 800210e:	d101      	bne.n	8002114 <HAL_I2C_Master_Transmit+0x30>
 8002110:	2302      	movs	r3, #2
 8002112:	e0f6      	b.n	8002302 <HAL_I2C_Master_Transmit+0x21e>
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800211c:	f7ff fa28 	bl	8001570 <HAL_GetTick>
 8002120:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	9300      	str	r3, [sp, #0]
 8002126:	2319      	movs	r3, #25
 8002128:	2201      	movs	r2, #1
 800212a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800212e:	68f8      	ldr	r0, [r7, #12]
 8002130:	f000 fce0 	bl	8002af4 <I2C_WaitOnFlagUntilTimeout>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e0e1      	b.n	8002302 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2221      	movs	r2, #33	; 0x21
 8002142:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2210      	movs	r2, #16
 800214a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2200      	movs	r2, #0
 8002152:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	893a      	ldrh	r2, [r7, #8]
 800215e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2200      	movs	r2, #0
 8002164:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800216a:	b29b      	uxth	r3, r3
 800216c:	2bff      	cmp	r3, #255	; 0xff
 800216e:	d906      	bls.n	800217e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	22ff      	movs	r2, #255	; 0xff
 8002174:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8002176:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800217a:	617b      	str	r3, [r7, #20]
 800217c:	e007      	b.n	800218e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002182:	b29a      	uxth	r2, r3
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002188:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800218c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002192:	2b00      	cmp	r3, #0
 8002194:	d024      	beq.n	80021e0 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219a:	781a      	ldrb	r2, [r3, #0]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a6:	1c5a      	adds	r2, r3, #1
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	3b01      	subs	r3, #1
 80021b4:	b29a      	uxth	r2, r3
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021be:	3b01      	subs	r3, #1
 80021c0:	b29a      	uxth	r2, r3
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	3301      	adds	r3, #1
 80021ce:	b2da      	uxtb	r2, r3
 80021d0:	8979      	ldrh	r1, [r7, #10]
 80021d2:	4b4e      	ldr	r3, [pc, #312]	; (800230c <HAL_I2C_Master_Transmit+0x228>)
 80021d4:	9300      	str	r3, [sp, #0]
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	68f8      	ldr	r0, [r7, #12]
 80021da:	f000 fec7 	bl	8002f6c <I2C_TransferConfig>
 80021de:	e066      	b.n	80022ae <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021e4:	b2da      	uxtb	r2, r3
 80021e6:	8979      	ldrh	r1, [r7, #10]
 80021e8:	4b48      	ldr	r3, [pc, #288]	; (800230c <HAL_I2C_Master_Transmit+0x228>)
 80021ea:	9300      	str	r3, [sp, #0]
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	68f8      	ldr	r0, [r7, #12]
 80021f0:	f000 febc 	bl	8002f6c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80021f4:	e05b      	b.n	80022ae <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021f6:	693a      	ldr	r2, [r7, #16]
 80021f8:	6a39      	ldr	r1, [r7, #32]
 80021fa:	68f8      	ldr	r0, [r7, #12]
 80021fc:	f000 fcc9 	bl	8002b92 <I2C_WaitOnTXISFlagUntilTimeout>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e07b      	b.n	8002302 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220e:	781a      	ldrb	r2, [r3, #0]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221a:	1c5a      	adds	r2, r3, #1
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002224:	b29b      	uxth	r3, r3
 8002226:	3b01      	subs	r3, #1
 8002228:	b29a      	uxth	r2, r3
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002232:	3b01      	subs	r3, #1
 8002234:	b29a      	uxth	r2, r3
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800223e:	b29b      	uxth	r3, r3
 8002240:	2b00      	cmp	r3, #0
 8002242:	d034      	beq.n	80022ae <HAL_I2C_Master_Transmit+0x1ca>
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002248:	2b00      	cmp	r3, #0
 800224a:	d130      	bne.n	80022ae <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	9300      	str	r3, [sp, #0]
 8002250:	6a3b      	ldr	r3, [r7, #32]
 8002252:	2200      	movs	r2, #0
 8002254:	2180      	movs	r1, #128	; 0x80
 8002256:	68f8      	ldr	r0, [r7, #12]
 8002258:	f000 fc4c 	bl	8002af4 <I2C_WaitOnFlagUntilTimeout>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e04d      	b.n	8002302 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800226a:	b29b      	uxth	r3, r3
 800226c:	2bff      	cmp	r3, #255	; 0xff
 800226e:	d90e      	bls.n	800228e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	22ff      	movs	r2, #255	; 0xff
 8002274:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800227a:	b2da      	uxtb	r2, r3
 800227c:	8979      	ldrh	r1, [r7, #10]
 800227e:	2300      	movs	r3, #0
 8002280:	9300      	str	r3, [sp, #0]
 8002282:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002286:	68f8      	ldr	r0, [r7, #12]
 8002288:	f000 fe70 	bl	8002f6c <I2C_TransferConfig>
 800228c:	e00f      	b.n	80022ae <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002292:	b29a      	uxth	r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800229c:	b2da      	uxtb	r2, r3
 800229e:	8979      	ldrh	r1, [r7, #10]
 80022a0:	2300      	movs	r3, #0
 80022a2:	9300      	str	r3, [sp, #0]
 80022a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022a8:	68f8      	ldr	r0, [r7, #12]
 80022aa:	f000 fe5f 	bl	8002f6c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d19e      	bne.n	80021f6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	6a39      	ldr	r1, [r7, #32]
 80022bc:	68f8      	ldr	r0, [r7, #12]
 80022be:	f000 fcaf 	bl	8002c20 <I2C_WaitOnSTOPFlagUntilTimeout>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d001      	beq.n	80022cc <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e01a      	b.n	8002302 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2220      	movs	r2, #32
 80022d2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	6859      	ldr	r1, [r3, #4]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	4b0c      	ldr	r3, [pc, #48]	; (8002310 <HAL_I2C_Master_Transmit+0x22c>)
 80022e0:	400b      	ands	r3, r1
 80022e2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2220      	movs	r2, #32
 80022e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2200      	movs	r2, #0
 80022f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80022fc:	2300      	movs	r3, #0
 80022fe:	e000      	b.n	8002302 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002300:	2302      	movs	r3, #2
  }
}
 8002302:	4618      	mov	r0, r3
 8002304:	3718      	adds	r7, #24
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	80002000 	.word	0x80002000
 8002310:	fe00e800 	.word	0xfe00e800

08002314 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b088      	sub	sp, #32
 8002318:	af02      	add	r7, sp, #8
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	607a      	str	r2, [r7, #4]
 800231e:	461a      	mov	r2, r3
 8002320:	460b      	mov	r3, r1
 8002322:	817b      	strh	r3, [r7, #10]
 8002324:	4613      	mov	r3, r2
 8002326:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800232e:	b2db      	uxtb	r3, r3
 8002330:	2b20      	cmp	r3, #32
 8002332:	f040 80db 	bne.w	80024ec <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800233c:	2b01      	cmp	r3, #1
 800233e:	d101      	bne.n	8002344 <HAL_I2C_Master_Receive+0x30>
 8002340:	2302      	movs	r3, #2
 8002342:	e0d4      	b.n	80024ee <HAL_I2C_Master_Receive+0x1da>
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800234c:	f7ff f910 	bl	8001570 <HAL_GetTick>
 8002350:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	9300      	str	r3, [sp, #0]
 8002356:	2319      	movs	r3, #25
 8002358:	2201      	movs	r2, #1
 800235a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800235e:	68f8      	ldr	r0, [r7, #12]
 8002360:	f000 fbc8 	bl	8002af4 <I2C_WaitOnFlagUntilTimeout>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e0bf      	b.n	80024ee <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2222      	movs	r2, #34	; 0x22
 8002372:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2210      	movs	r2, #16
 800237a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2200      	movs	r2, #0
 8002382:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	893a      	ldrh	r2, [r7, #8]
 800238e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2200      	movs	r2, #0
 8002394:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800239a:	b29b      	uxth	r3, r3
 800239c:	2bff      	cmp	r3, #255	; 0xff
 800239e:	d90e      	bls.n	80023be <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	22ff      	movs	r2, #255	; 0xff
 80023a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023aa:	b2da      	uxtb	r2, r3
 80023ac:	8979      	ldrh	r1, [r7, #10]
 80023ae:	4b52      	ldr	r3, [pc, #328]	; (80024f8 <HAL_I2C_Master_Receive+0x1e4>)
 80023b0:	9300      	str	r3, [sp, #0]
 80023b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023b6:	68f8      	ldr	r0, [r7, #12]
 80023b8:	f000 fdd8 	bl	8002f6c <I2C_TransferConfig>
 80023bc:	e06d      	b.n	800249a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023c2:	b29a      	uxth	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023cc:	b2da      	uxtb	r2, r3
 80023ce:	8979      	ldrh	r1, [r7, #10]
 80023d0:	4b49      	ldr	r3, [pc, #292]	; (80024f8 <HAL_I2C_Master_Receive+0x1e4>)
 80023d2:	9300      	str	r3, [sp, #0]
 80023d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023d8:	68f8      	ldr	r0, [r7, #12]
 80023da:	f000 fdc7 	bl	8002f6c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80023de:	e05c      	b.n	800249a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023e0:	697a      	ldr	r2, [r7, #20]
 80023e2:	6a39      	ldr	r1, [r7, #32]
 80023e4:	68f8      	ldr	r0, [r7, #12]
 80023e6:	f000 fc5f 	bl	8002ca8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e07c      	b.n	80024ee <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fe:	b2d2      	uxtb	r2, r2
 8002400:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002406:	1c5a      	adds	r2, r3, #1
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002410:	3b01      	subs	r3, #1
 8002412:	b29a      	uxth	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800241c:	b29b      	uxth	r3, r3
 800241e:	3b01      	subs	r3, #1
 8002420:	b29a      	uxth	r2, r3
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800242a:	b29b      	uxth	r3, r3
 800242c:	2b00      	cmp	r3, #0
 800242e:	d034      	beq.n	800249a <HAL_I2C_Master_Receive+0x186>
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002434:	2b00      	cmp	r3, #0
 8002436:	d130      	bne.n	800249a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	9300      	str	r3, [sp, #0]
 800243c:	6a3b      	ldr	r3, [r7, #32]
 800243e:	2200      	movs	r2, #0
 8002440:	2180      	movs	r1, #128	; 0x80
 8002442:	68f8      	ldr	r0, [r7, #12]
 8002444:	f000 fb56 	bl	8002af4 <I2C_WaitOnFlagUntilTimeout>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e04d      	b.n	80024ee <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002456:	b29b      	uxth	r3, r3
 8002458:	2bff      	cmp	r3, #255	; 0xff
 800245a:	d90e      	bls.n	800247a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	22ff      	movs	r2, #255	; 0xff
 8002460:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002466:	b2da      	uxtb	r2, r3
 8002468:	8979      	ldrh	r1, [r7, #10]
 800246a:	2300      	movs	r3, #0
 800246c:	9300      	str	r3, [sp, #0]
 800246e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002472:	68f8      	ldr	r0, [r7, #12]
 8002474:	f000 fd7a 	bl	8002f6c <I2C_TransferConfig>
 8002478:	e00f      	b.n	800249a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800247e:	b29a      	uxth	r2, r3
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002488:	b2da      	uxtb	r2, r3
 800248a:	8979      	ldrh	r1, [r7, #10]
 800248c:	2300      	movs	r3, #0
 800248e:	9300      	str	r3, [sp, #0]
 8002490:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002494:	68f8      	ldr	r0, [r7, #12]
 8002496:	f000 fd69 	bl	8002f6c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800249e:	b29b      	uxth	r3, r3
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d19d      	bne.n	80023e0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024a4:	697a      	ldr	r2, [r7, #20]
 80024a6:	6a39      	ldr	r1, [r7, #32]
 80024a8:	68f8      	ldr	r0, [r7, #12]
 80024aa:	f000 fbb9 	bl	8002c20 <I2C_WaitOnSTOPFlagUntilTimeout>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d001      	beq.n	80024b8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e01a      	b.n	80024ee <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2220      	movs	r2, #32
 80024be:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	6859      	ldr	r1, [r3, #4]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	4b0c      	ldr	r3, [pc, #48]	; (80024fc <HAL_I2C_Master_Receive+0x1e8>)
 80024cc:	400b      	ands	r3, r1
 80024ce:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2220      	movs	r2, #32
 80024d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2200      	movs	r2, #0
 80024dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2200      	movs	r2, #0
 80024e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80024e8:	2300      	movs	r3, #0
 80024ea:	e000      	b.n	80024ee <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80024ec:	2302      	movs	r3, #2
  }
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3718      	adds	r7, #24
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	80002400 	.word	0x80002400
 80024fc:	fe00e800 	.word	0xfe00e800

08002500 <HAL_I2C_Mem_Write>:
>>>>>>> Stashed changes
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< Updated upstream
 8001924:	b580      	push	{r7, lr}
 8001926:	b088      	sub	sp, #32
 8001928:	af02      	add	r7, sp, #8
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	4608      	mov	r0, r1
 800192e:	4611      	mov	r1, r2
 8001930:	461a      	mov	r2, r3
 8001932:	4603      	mov	r3, r0
 8001934:	817b      	strh	r3, [r7, #10]
 8001936:	460b      	mov	r3, r1
 8001938:	813b      	strh	r3, [r7, #8]
 800193a:	4613      	mov	r3, r2
 800193c:	80fb      	strh	r3, [r7, #6]
=======
 8002500:	b580      	push	{r7, lr}
 8002502:	b088      	sub	sp, #32
 8002504:	af02      	add	r7, sp, #8
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	4608      	mov	r0, r1
 800250a:	4611      	mov	r1, r2
 800250c:	461a      	mov	r2, r3
 800250e:	4603      	mov	r3, r0
 8002510:	817b      	strh	r3, [r7, #10]
 8002512:	460b      	mov	r3, r1
 8002514:	813b      	strh	r3, [r7, #8]
 8002516:	4613      	mov	r3, r2
 8002518:	80fb      	strh	r3, [r7, #6]
>>>>>>> Stashed changes
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
<<<<<<< Updated upstream
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001944:	b2db      	uxtb	r3, r3
 8001946:	2b20      	cmp	r3, #32
 8001948:	f040 80f9 	bne.w	8001b3e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800194c:	6a3b      	ldr	r3, [r7, #32]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d002      	beq.n	8001958 <HAL_I2C_Mem_Write+0x34>
 8001952:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001954:	2b00      	cmp	r3, #0
 8001956:	d105      	bne.n	8001964 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800195e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e0ed      	b.n	8001b40 <HAL_I2C_Mem_Write+0x21c>
=======
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002520:	b2db      	uxtb	r3, r3
 8002522:	2b20      	cmp	r3, #32
 8002524:	f040 80f9 	bne.w	800271a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002528:	6a3b      	ldr	r3, [r7, #32]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d002      	beq.n	8002534 <HAL_I2C_Mem_Write+0x34>
 800252e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002530:	2b00      	cmp	r3, #0
 8002532:	d105      	bne.n	8002540 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f44f 7200 	mov.w	r2, #512	; 0x200
 800253a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e0ed      	b.n	800271c <HAL_I2C_Mem_Write+0x21c>
>>>>>>> Stashed changes
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
<<<<<<< Updated upstream
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800196a:	2b01      	cmp	r3, #1
 800196c:	d101      	bne.n	8001972 <HAL_I2C_Mem_Write+0x4e>
 800196e:	2302      	movs	r3, #2
 8001970:	e0e6      	b.n	8001b40 <HAL_I2C_Mem_Write+0x21c>
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2201      	movs	r2, #1
 8001976:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800197a:	f7ff fc3f 	bl	80011fc <HAL_GetTick>
 800197e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	9300      	str	r3, [sp, #0]
 8001984:	2319      	movs	r3, #25
 8001986:	2201      	movs	r2, #1
 8001988:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800198c:	68f8      	ldr	r0, [r7, #12]
 800198e:	f000 fac3 	bl	8001f18 <I2C_WaitOnFlagUntilTimeout>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e0d1      	b.n	8001b40 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2221      	movs	r2, #33	; 0x21
 80019a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2240      	movs	r2, #64	; 0x40
 80019a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2200      	movs	r2, #0
 80019b0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	6a3a      	ldr	r2, [r7, #32]
 80019b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80019bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2200      	movs	r2, #0
 80019c2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80019c4:	88f8      	ldrh	r0, [r7, #6]
 80019c6:	893a      	ldrh	r2, [r7, #8]
 80019c8:	8979      	ldrh	r1, [r7, #10]
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	9301      	str	r3, [sp, #4]
 80019ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019d0:	9300      	str	r3, [sp, #0]
 80019d2:	4603      	mov	r3, r0
 80019d4:	68f8      	ldr	r0, [r7, #12]
 80019d6:	f000 f9d3 	bl	8001d80 <I2C_RequestMemoryWrite>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d005      	beq.n	80019ec <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2200      	movs	r2, #0
 80019e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e0a9      	b.n	8001b40 <HAL_I2C_Mem_Write+0x21c>
=======
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002546:	2b01      	cmp	r3, #1
 8002548:	d101      	bne.n	800254e <HAL_I2C_Mem_Write+0x4e>
 800254a:	2302      	movs	r3, #2
 800254c:	e0e6      	b.n	800271c <HAL_I2C_Mem_Write+0x21c>
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2201      	movs	r2, #1
 8002552:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002556:	f7ff f80b 	bl	8001570 <HAL_GetTick>
 800255a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	9300      	str	r3, [sp, #0]
 8002560:	2319      	movs	r3, #25
 8002562:	2201      	movs	r2, #1
 8002564:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002568:	68f8      	ldr	r0, [r7, #12]
 800256a:	f000 fac3 	bl	8002af4 <I2C_WaitOnFlagUntilTimeout>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d001      	beq.n	8002578 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e0d1      	b.n	800271c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2221      	movs	r2, #33	; 0x21
 800257c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2240      	movs	r2, #64	; 0x40
 8002584:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2200      	movs	r2, #0
 800258c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6a3a      	ldr	r2, [r7, #32]
 8002592:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002598:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2200      	movs	r2, #0
 800259e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80025a0:	88f8      	ldrh	r0, [r7, #6]
 80025a2:	893a      	ldrh	r2, [r7, #8]
 80025a4:	8979      	ldrh	r1, [r7, #10]
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	9301      	str	r3, [sp, #4]
 80025aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ac:	9300      	str	r3, [sp, #0]
 80025ae:	4603      	mov	r3, r0
 80025b0:	68f8      	ldr	r0, [r7, #12]
 80025b2:	f000 f9d3 	bl	800295c <I2C_RequestMemoryWrite>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d005      	beq.n	80025c8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e0a9      	b.n	800271c <HAL_I2C_Mem_Write+0x21c>
>>>>>>> Stashed changes
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
<<<<<<< Updated upstream
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	2bff      	cmp	r3, #255	; 0xff
 80019f4:	d90e      	bls.n	8001a14 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	22ff      	movs	r2, #255	; 0xff
 80019fa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a00:	b2da      	uxtb	r2, r3
 8001a02:	8979      	ldrh	r1, [r7, #10]
 8001a04:	2300      	movs	r3, #0
 8001a06:	9300      	str	r3, [sp, #0]
 8001a08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a0c:	68f8      	ldr	r0, [r7, #12]
 8001a0e:	f000 fc3d 	bl	800228c <I2C_TransferConfig>
 8001a12:	e00f      	b.n	8001a34 <HAL_I2C_Mem_Write+0x110>
=======
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	2bff      	cmp	r3, #255	; 0xff
 80025d0:	d90e      	bls.n	80025f0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	22ff      	movs	r2, #255	; 0xff
 80025d6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025dc:	b2da      	uxtb	r2, r3
 80025de:	8979      	ldrh	r1, [r7, #10]
 80025e0:	2300      	movs	r3, #0
 80025e2:	9300      	str	r3, [sp, #0]
 80025e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025e8:	68f8      	ldr	r0, [r7, #12]
 80025ea:	f000 fcbf 	bl	8002f6c <I2C_TransferConfig>
 80025ee:	e00f      	b.n	8002610 <HAL_I2C_Mem_Write+0x110>
>>>>>>> Stashed changes
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
<<<<<<< Updated upstream
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a18:	b29a      	uxth	r2, r3
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a22:	b2da      	uxtb	r2, r3
 8001a24:	8979      	ldrh	r1, [r7, #10]
 8001a26:	2300      	movs	r3, #0
 8001a28:	9300      	str	r3, [sp, #0]
 8001a2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a2e:	68f8      	ldr	r0, [r7, #12]
 8001a30:	f000 fc2c 	bl	800228c <I2C_TransferConfig>
=======
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f4:	b29a      	uxth	r2, r3
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025fe:	b2da      	uxtb	r2, r3
 8002600:	8979      	ldrh	r1, [r7, #10]
 8002602:	2300      	movs	r3, #0
 8002604:	9300      	str	r3, [sp, #0]
 8002606:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800260a:	68f8      	ldr	r0, [r7, #12]
 800260c:	f000 fcae 	bl	8002f6c <I2C_TransferConfig>
>>>>>>> Stashed changes
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
<<<<<<< Updated upstream
 8001a34:	697a      	ldr	r2, [r7, #20]
 8001a36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a38:	68f8      	ldr	r0, [r7, #12]
 8001a3a:	f000 fabc 	bl	8001fb6 <I2C_WaitOnTXISFlagUntilTimeout>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e07b      	b.n	8001b40 <HAL_I2C_Mem_Write+0x21c>
=======
 8002610:	697a      	ldr	r2, [r7, #20]
 8002612:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002614:	68f8      	ldr	r0, [r7, #12]
 8002616:	f000 fabc 	bl	8002b92 <I2C_WaitOnTXISFlagUntilTimeout>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e07b      	b.n	800271c <HAL_I2C_Mem_Write+0x21c>
>>>>>>> Stashed changes
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
<<<<<<< Updated upstream
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4c:	781a      	ldrb	r2, [r3, #0]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a58:	1c5a      	adds	r2, r3, #1
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	3b01      	subs	r3, #1
 8001a66:	b29a      	uxth	r2, r3
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a70:	3b01      	subs	r3, #1
 8001a72:	b29a      	uxth	r2, r3
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d034      	beq.n	8001aec <HAL_I2C_Mem_Write+0x1c8>
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d130      	bne.n	8001aec <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	9300      	str	r3, [sp, #0]
 8001a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a90:	2200      	movs	r2, #0
 8001a92:	2180      	movs	r1, #128	; 0x80
 8001a94:	68f8      	ldr	r0, [r7, #12]
 8001a96:	f000 fa3f 	bl	8001f18 <I2C_WaitOnFlagUntilTimeout>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e04d      	b.n	8001b40 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	2bff      	cmp	r3, #255	; 0xff
 8001aac:	d90e      	bls.n	8001acc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	22ff      	movs	r2, #255	; 0xff
 8001ab2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ab8:	b2da      	uxtb	r2, r3
 8001aba:	8979      	ldrh	r1, [r7, #10]
 8001abc:	2300      	movs	r3, #0
 8001abe:	9300      	str	r3, [sp, #0]
 8001ac0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ac4:	68f8      	ldr	r0, [r7, #12]
 8001ac6:	f000 fbe1 	bl	800228c <I2C_TransferConfig>
 8001aca:	e00f      	b.n	8001aec <HAL_I2C_Mem_Write+0x1c8>
=======
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002628:	781a      	ldrb	r2, [r3, #0]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002634:	1c5a      	adds	r2, r3, #1
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800263e:	b29b      	uxth	r3, r3
 8002640:	3b01      	subs	r3, #1
 8002642:	b29a      	uxth	r2, r3
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800264c:	3b01      	subs	r3, #1
 800264e:	b29a      	uxth	r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002658:	b29b      	uxth	r3, r3
 800265a:	2b00      	cmp	r3, #0
 800265c:	d034      	beq.n	80026c8 <HAL_I2C_Mem_Write+0x1c8>
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002662:	2b00      	cmp	r3, #0
 8002664:	d130      	bne.n	80026c8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	9300      	str	r3, [sp, #0]
 800266a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800266c:	2200      	movs	r2, #0
 800266e:	2180      	movs	r1, #128	; 0x80
 8002670:	68f8      	ldr	r0, [r7, #12]
 8002672:	f000 fa3f 	bl	8002af4 <I2C_WaitOnFlagUntilTimeout>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d001      	beq.n	8002680 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e04d      	b.n	800271c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002684:	b29b      	uxth	r3, r3
 8002686:	2bff      	cmp	r3, #255	; 0xff
 8002688:	d90e      	bls.n	80026a8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	22ff      	movs	r2, #255	; 0xff
 800268e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002694:	b2da      	uxtb	r2, r3
 8002696:	8979      	ldrh	r1, [r7, #10]
 8002698:	2300      	movs	r3, #0
 800269a:	9300      	str	r3, [sp, #0]
 800269c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026a0:	68f8      	ldr	r0, [r7, #12]
 80026a2:	f000 fc63 	bl	8002f6c <I2C_TransferConfig>
 80026a6:	e00f      	b.n	80026c8 <HAL_I2C_Mem_Write+0x1c8>
>>>>>>> Stashed changes
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
<<<<<<< Updated upstream
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ad0:	b29a      	uxth	r2, r3
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ada:	b2da      	uxtb	r2, r3
 8001adc:	8979      	ldrh	r1, [r7, #10]
 8001ade:	2300      	movs	r3, #0
 8001ae0:	9300      	str	r3, [sp, #0]
 8001ae2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ae6:	68f8      	ldr	r0, [r7, #12]
 8001ae8:	f000 fbd0 	bl	800228c <I2C_TransferConfig>
=======
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026b6:	b2da      	uxtb	r2, r3
 80026b8:	8979      	ldrh	r1, [r7, #10]
 80026ba:	2300      	movs	r3, #0
 80026bc:	9300      	str	r3, [sp, #0]
 80026be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026c2:	68f8      	ldr	r0, [r7, #12]
 80026c4:	f000 fc52 	bl	8002f6c <I2C_TransferConfig>
>>>>>>> Stashed changes
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
<<<<<<< Updated upstream
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d19e      	bne.n	8001a34 <HAL_I2C_Mem_Write+0x110>
=======
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d19e      	bne.n	8002610 <HAL_I2C_Mem_Write+0x110>
>>>>>>> Stashed changes

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
<<<<<<< Updated upstream
 8001af6:	697a      	ldr	r2, [r7, #20]
 8001af8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001afa:	68f8      	ldr	r0, [r7, #12]
 8001afc:	f000 faa2 	bl	8002044 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e01a      	b.n	8001b40 <HAL_I2C_Mem_Write+0x21c>
=======
 80026d2:	697a      	ldr	r2, [r7, #20]
 80026d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80026d6:	68f8      	ldr	r0, [r7, #12]
 80026d8:	f000 faa2 	bl	8002c20 <I2C_WaitOnSTOPFlagUntilTimeout>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e01a      	b.n	800271c <HAL_I2C_Mem_Write+0x21c>
>>>>>>> Stashed changes
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
<<<<<<< Updated upstream
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2220      	movs	r2, #32
 8001b10:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	6859      	ldr	r1, [r3, #4]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	4b0a      	ldr	r3, [pc, #40]	; (8001b48 <HAL_I2C_Mem_Write+0x224>)
 8001b1e:	400b      	ands	r3, r1
 8001b20:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2220      	movs	r2, #32
 8001b26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	e000      	b.n	8001b40 <HAL_I2C_Mem_Write+0x21c>
=======
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2220      	movs	r2, #32
 80026ec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	6859      	ldr	r1, [r3, #4]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	4b0a      	ldr	r3, [pc, #40]	; (8002724 <HAL_I2C_Mem_Write+0x224>)
 80026fa:	400b      	ands	r3, r1
 80026fc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2220      	movs	r2, #32
 8002702:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2200      	movs	r2, #0
 8002712:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002716:	2300      	movs	r3, #0
 8002718:	e000      	b.n	800271c <HAL_I2C_Mem_Write+0x21c>
>>>>>>> Stashed changes
  }
  else
  {
    return HAL_BUSY;
<<<<<<< Updated upstream
 8001b3e:	2302      	movs	r3, #2
  }
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3718      	adds	r7, #24
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	fe00e800 	.word	0xfe00e800

08001b4c <HAL_I2C_Mem_Read>:
=======
 800271a:	2302      	movs	r3, #2
  }
}
 800271c:	4618      	mov	r0, r3
 800271e:	3718      	adds	r7, #24
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	fe00e800 	.word	0xfe00e800

08002728 <HAL_I2C_Mem_Read>:
>>>>>>> Stashed changes
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< Updated upstream
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b088      	sub	sp, #32
 8001b50:	af02      	add	r7, sp, #8
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	4608      	mov	r0, r1
 8001b56:	4611      	mov	r1, r2
 8001b58:	461a      	mov	r2, r3
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	817b      	strh	r3, [r7, #10]
 8001b5e:	460b      	mov	r3, r1
 8001b60:	813b      	strh	r3, [r7, #8]
 8001b62:	4613      	mov	r3, r2
 8001b64:	80fb      	strh	r3, [r7, #6]
=======
 8002728:	b580      	push	{r7, lr}
 800272a:	b088      	sub	sp, #32
 800272c:	af02      	add	r7, sp, #8
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	4608      	mov	r0, r1
 8002732:	4611      	mov	r1, r2
 8002734:	461a      	mov	r2, r3
 8002736:	4603      	mov	r3, r0
 8002738:	817b      	strh	r3, [r7, #10]
 800273a:	460b      	mov	r3, r1
 800273c:	813b      	strh	r3, [r7, #8]
 800273e:	4613      	mov	r3, r2
 8002740:	80fb      	strh	r3, [r7, #6]
>>>>>>> Stashed changes
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
<<<<<<< Updated upstream
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	2b20      	cmp	r3, #32
 8001b70:	f040 80fd 	bne.w	8001d6e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b74:	6a3b      	ldr	r3, [r7, #32]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d002      	beq.n	8001b80 <HAL_I2C_Mem_Read+0x34>
 8001b7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d105      	bne.n	8001b8c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b86:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e0f1      	b.n	8001d70 <HAL_I2C_Mem_Read+0x224>
=======
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b20      	cmp	r3, #32
 800274c:	f040 80fd 	bne.w	800294a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002750:	6a3b      	ldr	r3, [r7, #32]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d002      	beq.n	800275c <HAL_I2C_Mem_Read+0x34>
 8002756:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002758:	2b00      	cmp	r3, #0
 800275a:	d105      	bne.n	8002768 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002762:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e0f1      	b.n	800294c <HAL_I2C_Mem_Read+0x224>
>>>>>>> Stashed changes
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
<<<<<<< Updated upstream
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d101      	bne.n	8001b9a <HAL_I2C_Mem_Read+0x4e>
 8001b96:	2302      	movs	r3, #2
 8001b98:	e0ea      	b.n	8001d70 <HAL_I2C_Mem_Read+0x224>
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001ba2:	f7ff fb2b 	bl	80011fc <HAL_GetTick>
 8001ba6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	9300      	str	r3, [sp, #0]
 8001bac:	2319      	movs	r3, #25
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bb4:	68f8      	ldr	r0, [r7, #12]
 8001bb6:	f000 f9af 	bl	8001f18 <I2C_WaitOnFlagUntilTimeout>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e0d5      	b.n	8001d70 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2222      	movs	r2, #34	; 0x22
 8001bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2240      	movs	r2, #64	; 0x40
 8001bd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	6a3a      	ldr	r2, [r7, #32]
 8001bde:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001be4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2200      	movs	r2, #0
 8001bea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001bec:	88f8      	ldrh	r0, [r7, #6]
 8001bee:	893a      	ldrh	r2, [r7, #8]
 8001bf0:	8979      	ldrh	r1, [r7, #10]
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	9301      	str	r3, [sp, #4]
 8001bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bf8:	9300      	str	r3, [sp, #0]
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	68f8      	ldr	r0, [r7, #12]
 8001bfe:	f000 f913 	bl	8001e28 <I2C_RequestMemoryRead>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d005      	beq.n	8001c14 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e0ad      	b.n	8001d70 <HAL_I2C_Mem_Read+0x224>
=======
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800276e:	2b01      	cmp	r3, #1
 8002770:	d101      	bne.n	8002776 <HAL_I2C_Mem_Read+0x4e>
 8002772:	2302      	movs	r3, #2
 8002774:	e0ea      	b.n	800294c <HAL_I2C_Mem_Read+0x224>
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2201      	movs	r2, #1
 800277a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800277e:	f7fe fef7 	bl	8001570 <HAL_GetTick>
 8002782:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	9300      	str	r3, [sp, #0]
 8002788:	2319      	movs	r3, #25
 800278a:	2201      	movs	r2, #1
 800278c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002790:	68f8      	ldr	r0, [r7, #12]
 8002792:	f000 f9af 	bl	8002af4 <I2C_WaitOnFlagUntilTimeout>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e0d5      	b.n	800294c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2222      	movs	r2, #34	; 0x22
 80027a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2240      	movs	r2, #64	; 0x40
 80027ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2200      	movs	r2, #0
 80027b4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6a3a      	ldr	r2, [r7, #32]
 80027ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80027c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2200      	movs	r2, #0
 80027c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80027c8:	88f8      	ldrh	r0, [r7, #6]
 80027ca:	893a      	ldrh	r2, [r7, #8]
 80027cc:	8979      	ldrh	r1, [r7, #10]
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	9301      	str	r3, [sp, #4]
 80027d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027d4:	9300      	str	r3, [sp, #0]
 80027d6:	4603      	mov	r3, r0
 80027d8:	68f8      	ldr	r0, [r7, #12]
 80027da:	f000 f913 	bl	8002a04 <I2C_RequestMemoryRead>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d005      	beq.n	80027f0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e0ad      	b.n	800294c <HAL_I2C_Mem_Read+0x224>
>>>>>>> Stashed changes
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
<<<<<<< Updated upstream
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	2bff      	cmp	r3, #255	; 0xff
 8001c1c:	d90e      	bls.n	8001c3c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	22ff      	movs	r2, #255	; 0xff
 8001c22:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c28:	b2da      	uxtb	r2, r3
 8001c2a:	8979      	ldrh	r1, [r7, #10]
 8001c2c:	4b52      	ldr	r3, [pc, #328]	; (8001d78 <HAL_I2C_Mem_Read+0x22c>)
 8001c2e:	9300      	str	r3, [sp, #0]
 8001c30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c34:	68f8      	ldr	r0, [r7, #12]
 8001c36:	f000 fb29 	bl	800228c <I2C_TransferConfig>
 8001c3a:	e00f      	b.n	8001c5c <HAL_I2C_Mem_Read+0x110>
=======
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	2bff      	cmp	r3, #255	; 0xff
 80027f8:	d90e      	bls.n	8002818 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	22ff      	movs	r2, #255	; 0xff
 80027fe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002804:	b2da      	uxtb	r2, r3
 8002806:	8979      	ldrh	r1, [r7, #10]
 8002808:	4b52      	ldr	r3, [pc, #328]	; (8002954 <HAL_I2C_Mem_Read+0x22c>)
 800280a:	9300      	str	r3, [sp, #0]
 800280c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002810:	68f8      	ldr	r0, [r7, #12]
 8002812:	f000 fbab 	bl	8002f6c <I2C_TransferConfig>
 8002816:	e00f      	b.n	8002838 <HAL_I2C_Mem_Read+0x110>
>>>>>>> Stashed changes
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
<<<<<<< Updated upstream
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c40:	b29a      	uxth	r2, r3
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c4a:	b2da      	uxtb	r2, r3
 8001c4c:	8979      	ldrh	r1, [r7, #10]
 8001c4e:	4b4a      	ldr	r3, [pc, #296]	; (8001d78 <HAL_I2C_Mem_Read+0x22c>)
 8001c50:	9300      	str	r3, [sp, #0]
 8001c52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c56:	68f8      	ldr	r0, [r7, #12]
 8001c58:	f000 fb18 	bl	800228c <I2C_TransferConfig>
=======
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800281c:	b29a      	uxth	r2, r3
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002826:	b2da      	uxtb	r2, r3
 8002828:	8979      	ldrh	r1, [r7, #10]
 800282a:	4b4a      	ldr	r3, [pc, #296]	; (8002954 <HAL_I2C_Mem_Read+0x22c>)
 800282c:	9300      	str	r3, [sp, #0]
 800282e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002832:	68f8      	ldr	r0, [r7, #12]
 8002834:	f000 fb9a 	bl	8002f6c <I2C_TransferConfig>
>>>>>>> Stashed changes
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
<<<<<<< Updated upstream
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	9300      	str	r3, [sp, #0]
 8001c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c62:	2200      	movs	r2, #0
 8001c64:	2104      	movs	r1, #4
 8001c66:	68f8      	ldr	r0, [r7, #12]
 8001c68:	f000 f956 	bl	8001f18 <I2C_WaitOnFlagUntilTimeout>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e07c      	b.n	8001d70 <HAL_I2C_Mem_Read+0x224>
=======
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	9300      	str	r3, [sp, #0]
 800283c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800283e:	2200      	movs	r2, #0
 8002840:	2104      	movs	r1, #4
 8002842:	68f8      	ldr	r0, [r7, #12]
 8002844:	f000 f956 	bl	8002af4 <I2C_WaitOnFlagUntilTimeout>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e07c      	b.n	800294c <HAL_I2C_Mem_Read+0x224>
>>>>>>> Stashed changes
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
<<<<<<< Updated upstream
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c80:	b2d2      	uxtb	r2, r2
 8001c82:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c88:	1c5a      	adds	r2, r3, #1
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c92:	3b01      	subs	r3, #1
 8001c94:	b29a      	uxth	r2, r3
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	3b01      	subs	r3, #1
 8001ca2:	b29a      	uxth	r2, r3
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d034      	beq.n	8001d1c <HAL_I2C_Mem_Read+0x1d0>
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d130      	bne.n	8001d1c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	9300      	str	r3, [sp, #0]
 8001cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	2180      	movs	r1, #128	; 0x80
 8001cc4:	68f8      	ldr	r0, [r7, #12]
 8001cc6:	f000 f927 	bl	8001f18 <I2C_WaitOnFlagUntilTimeout>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e04d      	b.n	8001d70 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	2bff      	cmp	r3, #255	; 0xff
 8001cdc:	d90e      	bls.n	8001cfc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	22ff      	movs	r2, #255	; 0xff
 8001ce2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ce8:	b2da      	uxtb	r2, r3
 8001cea:	8979      	ldrh	r1, [r7, #10]
 8001cec:	2300      	movs	r3, #0
 8001cee:	9300      	str	r3, [sp, #0]
 8001cf0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001cf4:	68f8      	ldr	r0, [r7, #12]
 8001cf6:	f000 fac9 	bl	800228c <I2C_TransferConfig>
 8001cfa:	e00f      	b.n	8001d1c <HAL_I2C_Mem_Read+0x1d0>
=======
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285c:	b2d2      	uxtb	r2, r2
 800285e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002864:	1c5a      	adds	r2, r3, #1
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800286e:	3b01      	subs	r3, #1
 8002870:	b29a      	uxth	r2, r3
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800287a:	b29b      	uxth	r3, r3
 800287c:	3b01      	subs	r3, #1
 800287e:	b29a      	uxth	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002888:	b29b      	uxth	r3, r3
 800288a:	2b00      	cmp	r3, #0
 800288c:	d034      	beq.n	80028f8 <HAL_I2C_Mem_Read+0x1d0>
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002892:	2b00      	cmp	r3, #0
 8002894:	d130      	bne.n	80028f8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	9300      	str	r3, [sp, #0]
 800289a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800289c:	2200      	movs	r2, #0
 800289e:	2180      	movs	r1, #128	; 0x80
 80028a0:	68f8      	ldr	r0, [r7, #12]
 80028a2:	f000 f927 	bl	8002af4 <I2C_WaitOnFlagUntilTimeout>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e04d      	b.n	800294c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	2bff      	cmp	r3, #255	; 0xff
 80028b8:	d90e      	bls.n	80028d8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	22ff      	movs	r2, #255	; 0xff
 80028be:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028c4:	b2da      	uxtb	r2, r3
 80028c6:	8979      	ldrh	r1, [r7, #10]
 80028c8:	2300      	movs	r3, #0
 80028ca:	9300      	str	r3, [sp, #0]
 80028cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028d0:	68f8      	ldr	r0, [r7, #12]
 80028d2:	f000 fb4b 	bl	8002f6c <I2C_TransferConfig>
 80028d6:	e00f      	b.n	80028f8 <HAL_I2C_Mem_Read+0x1d0>
>>>>>>> Stashed changes
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
<<<<<<< Updated upstream
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d00:	b29a      	uxth	r2, r3
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d0a:	b2da      	uxtb	r2, r3
 8001d0c:	8979      	ldrh	r1, [r7, #10]
 8001d0e:	2300      	movs	r3, #0
 8001d10:	9300      	str	r3, [sp, #0]
 8001d12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d16:	68f8      	ldr	r0, [r7, #12]
 8001d18:	f000 fab8 	bl	800228c <I2C_TransferConfig>
=======
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028dc:	b29a      	uxth	r2, r3
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e6:	b2da      	uxtb	r2, r3
 80028e8:	8979      	ldrh	r1, [r7, #10]
 80028ea:	2300      	movs	r3, #0
 80028ec:	9300      	str	r3, [sp, #0]
 80028ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028f2:	68f8      	ldr	r0, [r7, #12]
 80028f4:	f000 fb3a 	bl	8002f6c <I2C_TransferConfig>
>>>>>>> Stashed changes
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
<<<<<<< Updated upstream
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d19a      	bne.n	8001c5c <HAL_I2C_Mem_Read+0x110>
=======
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d19a      	bne.n	8002838 <HAL_I2C_Mem_Read+0x110>
>>>>>>> Stashed changes

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
<<<<<<< Updated upstream
 8001d26:	697a      	ldr	r2, [r7, #20]
 8001d28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d2a:	68f8      	ldr	r0, [r7, #12]
 8001d2c:	f000 f98a 	bl	8002044 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e01a      	b.n	8001d70 <HAL_I2C_Mem_Read+0x224>
=======
 8002902:	697a      	ldr	r2, [r7, #20]
 8002904:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002906:	68f8      	ldr	r0, [r7, #12]
 8002908:	f000 f98a 	bl	8002c20 <I2C_WaitOnSTOPFlagUntilTimeout>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d001      	beq.n	8002916 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e01a      	b.n	800294c <HAL_I2C_Mem_Read+0x224>
>>>>>>> Stashed changes
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
<<<<<<< Updated upstream
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2220      	movs	r2, #32
 8001d40:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	6859      	ldr	r1, [r3, #4]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	4b0b      	ldr	r3, [pc, #44]	; (8001d7c <HAL_I2C_Mem_Read+0x230>)
 8001d4e:	400b      	ands	r3, r1
 8001d50:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2220      	movs	r2, #32
 8001d56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	e000      	b.n	8001d70 <HAL_I2C_Mem_Read+0x224>
=======
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2220      	movs	r2, #32
 800291c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	6859      	ldr	r1, [r3, #4]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	4b0b      	ldr	r3, [pc, #44]	; (8002958 <HAL_I2C_Mem_Read+0x230>)
 800292a:	400b      	ands	r3, r1
 800292c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2220      	movs	r2, #32
 8002932:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002946:	2300      	movs	r3, #0
 8002948:	e000      	b.n	800294c <HAL_I2C_Mem_Read+0x224>
>>>>>>> Stashed changes
  }
  else
  {
    return HAL_BUSY;
<<<<<<< Updated upstream
 8001d6e:	2302      	movs	r3, #2
  }
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3718      	adds	r7, #24
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	80002400 	.word	0x80002400
 8001d7c:	fe00e800 	.word	0xfe00e800

08001d80 <I2C_RequestMemoryWrite>:
=======
 800294a:	2302      	movs	r3, #2
  }
}
 800294c:	4618      	mov	r0, r3
 800294e:	3718      	adds	r7, #24
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	80002400 	.word	0x80002400
 8002958:	fe00e800 	.word	0xfe00e800

0800295c <I2C_RequestMemoryWrite>:
>>>>>>> Stashed changes
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
<<<<<<< Updated upstream
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b086      	sub	sp, #24
 8001d84:	af02      	add	r7, sp, #8
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	4608      	mov	r0, r1
 8001d8a:	4611      	mov	r1, r2
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	4603      	mov	r3, r0
 8001d90:	817b      	strh	r3, [r7, #10]
 8001d92:	460b      	mov	r3, r1
 8001d94:	813b      	strh	r3, [r7, #8]
 8001d96:	4613      	mov	r3, r2
 8001d98:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001d9a:	88fb      	ldrh	r3, [r7, #6]
 8001d9c:	b2da      	uxtb	r2, r3
 8001d9e:	8979      	ldrh	r1, [r7, #10]
 8001da0:	4b20      	ldr	r3, [pc, #128]	; (8001e24 <I2C_RequestMemoryWrite+0xa4>)
 8001da2:	9300      	str	r3, [sp, #0]
 8001da4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001da8:	68f8      	ldr	r0, [r7, #12]
 8001daa:	f000 fa6f 	bl	800228c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001dae:	69fa      	ldr	r2, [r7, #28]
 8001db0:	69b9      	ldr	r1, [r7, #24]
 8001db2:	68f8      	ldr	r0, [r7, #12]
 8001db4:	f000 f8ff 	bl	8001fb6 <I2C_WaitOnTXISFlagUntilTimeout>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e02c      	b.n	8001e1c <I2C_RequestMemoryWrite+0x9c>
=======
 800295c:	b580      	push	{r7, lr}
 800295e:	b086      	sub	sp, #24
 8002960:	af02      	add	r7, sp, #8
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	4608      	mov	r0, r1
 8002966:	4611      	mov	r1, r2
 8002968:	461a      	mov	r2, r3
 800296a:	4603      	mov	r3, r0
 800296c:	817b      	strh	r3, [r7, #10]
 800296e:	460b      	mov	r3, r1
 8002970:	813b      	strh	r3, [r7, #8]
 8002972:	4613      	mov	r3, r2
 8002974:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002976:	88fb      	ldrh	r3, [r7, #6]
 8002978:	b2da      	uxtb	r2, r3
 800297a:	8979      	ldrh	r1, [r7, #10]
 800297c:	4b20      	ldr	r3, [pc, #128]	; (8002a00 <I2C_RequestMemoryWrite+0xa4>)
 800297e:	9300      	str	r3, [sp, #0]
 8002980:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002984:	68f8      	ldr	r0, [r7, #12]
 8002986:	f000 faf1 	bl	8002f6c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800298a:	69fa      	ldr	r2, [r7, #28]
 800298c:	69b9      	ldr	r1, [r7, #24]
 800298e:	68f8      	ldr	r0, [r7, #12]
 8002990:	f000 f8ff 	bl	8002b92 <I2C_WaitOnTXISFlagUntilTimeout>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e02c      	b.n	80029f8 <I2C_RequestMemoryWrite+0x9c>
>>>>>>> Stashed changes
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
<<<<<<< Updated upstream
 8001dc2:	88fb      	ldrh	r3, [r7, #6]
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d105      	bne.n	8001dd4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001dc8:	893b      	ldrh	r3, [r7, #8]
 8001dca:	b2da      	uxtb	r2, r3
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	629a      	str	r2, [r3, #40]	; 0x28
 8001dd2:	e015      	b.n	8001e00 <I2C_RequestMemoryWrite+0x80>
=======
 800299e:	88fb      	ldrh	r3, [r7, #6]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d105      	bne.n	80029b0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80029a4:	893b      	ldrh	r3, [r7, #8]
 80029a6:	b2da      	uxtb	r2, r3
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	629a      	str	r2, [r3, #40]	; 0x28
 80029ae:	e015      	b.n	80029dc <I2C_RequestMemoryWrite+0x80>
>>>>>>> Stashed changes
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
<<<<<<< Updated upstream
 8001dd4:	893b      	ldrh	r3, [r7, #8]
 8001dd6:	0a1b      	lsrs	r3, r3, #8
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	b2da      	uxtb	r2, r3
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001de2:	69fa      	ldr	r2, [r7, #28]
 8001de4:	69b9      	ldr	r1, [r7, #24]
 8001de6:	68f8      	ldr	r0, [r7, #12]
 8001de8:	f000 f8e5 	bl	8001fb6 <I2C_WaitOnTXISFlagUntilTimeout>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e012      	b.n	8001e1c <I2C_RequestMemoryWrite+0x9c>
=======
 80029b0:	893b      	ldrh	r3, [r7, #8]
 80029b2:	0a1b      	lsrs	r3, r3, #8
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	b2da      	uxtb	r2, r3
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029be:	69fa      	ldr	r2, [r7, #28]
 80029c0:	69b9      	ldr	r1, [r7, #24]
 80029c2:	68f8      	ldr	r0, [r7, #12]
 80029c4:	f000 f8e5 	bl	8002b92 <I2C_WaitOnTXISFlagUntilTimeout>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e012      	b.n	80029f8 <I2C_RequestMemoryWrite+0x9c>
>>>>>>> Stashed changes
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
<<<<<<< Updated upstream
 8001df6:	893b      	ldrh	r3, [r7, #8]
 8001df8:	b2da      	uxtb	r2, r3
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	629a      	str	r2, [r3, #40]	; 0x28
=======
 80029d2:	893b      	ldrh	r3, [r7, #8]
 80029d4:	b2da      	uxtb	r2, r3
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	629a      	str	r2, [r3, #40]	; 0x28
>>>>>>> Stashed changes
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
<<<<<<< Updated upstream
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	9300      	str	r3, [sp, #0]
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	2200      	movs	r2, #0
 8001e08:	2180      	movs	r1, #128	; 0x80
 8001e0a:	68f8      	ldr	r0, [r7, #12]
 8001e0c:	f000 f884 	bl	8001f18 <I2C_WaitOnFlagUntilTimeout>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e000      	b.n	8001e1c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3710      	adds	r7, #16
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	80002000 	.word	0x80002000

08001e28 <I2C_RequestMemoryRead>:
=======
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	9300      	str	r3, [sp, #0]
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	2200      	movs	r2, #0
 80029e4:	2180      	movs	r1, #128	; 0x80
 80029e6:	68f8      	ldr	r0, [r7, #12]
 80029e8:	f000 f884 	bl	8002af4 <I2C_WaitOnFlagUntilTimeout>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d001      	beq.n	80029f6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e000      	b.n	80029f8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80029f6:	2300      	movs	r3, #0
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3710      	adds	r7, #16
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	80002000 	.word	0x80002000

08002a04 <I2C_RequestMemoryRead>:
>>>>>>> Stashed changes
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
<<<<<<< Updated upstream
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b086      	sub	sp, #24
 8001e2c:	af02      	add	r7, sp, #8
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	4608      	mov	r0, r1
 8001e32:	4611      	mov	r1, r2
 8001e34:	461a      	mov	r2, r3
 8001e36:	4603      	mov	r3, r0
 8001e38:	817b      	strh	r3, [r7, #10]
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	813b      	strh	r3, [r7, #8]
 8001e3e:	4613      	mov	r3, r2
 8001e40:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001e42:	88fb      	ldrh	r3, [r7, #6]
 8001e44:	b2da      	uxtb	r2, r3
 8001e46:	8979      	ldrh	r1, [r7, #10]
 8001e48:	4b20      	ldr	r3, [pc, #128]	; (8001ecc <I2C_RequestMemoryRead+0xa4>)
 8001e4a:	9300      	str	r3, [sp, #0]
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	68f8      	ldr	r0, [r7, #12]
 8001e50:	f000 fa1c 	bl	800228c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e54:	69fa      	ldr	r2, [r7, #28]
 8001e56:	69b9      	ldr	r1, [r7, #24]
 8001e58:	68f8      	ldr	r0, [r7, #12]
 8001e5a:	f000 f8ac 	bl	8001fb6 <I2C_WaitOnTXISFlagUntilTimeout>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e02c      	b.n	8001ec2 <I2C_RequestMemoryRead+0x9a>
=======
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b086      	sub	sp, #24
 8002a08:	af02      	add	r7, sp, #8
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	4608      	mov	r0, r1
 8002a0e:	4611      	mov	r1, r2
 8002a10:	461a      	mov	r2, r3
 8002a12:	4603      	mov	r3, r0
 8002a14:	817b      	strh	r3, [r7, #10]
 8002a16:	460b      	mov	r3, r1
 8002a18:	813b      	strh	r3, [r7, #8]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002a1e:	88fb      	ldrh	r3, [r7, #6]
 8002a20:	b2da      	uxtb	r2, r3
 8002a22:	8979      	ldrh	r1, [r7, #10]
 8002a24:	4b20      	ldr	r3, [pc, #128]	; (8002aa8 <I2C_RequestMemoryRead+0xa4>)
 8002a26:	9300      	str	r3, [sp, #0]
 8002a28:	2300      	movs	r3, #0
 8002a2a:	68f8      	ldr	r0, [r7, #12]
 8002a2c:	f000 fa9e 	bl	8002f6c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a30:	69fa      	ldr	r2, [r7, #28]
 8002a32:	69b9      	ldr	r1, [r7, #24]
 8002a34:	68f8      	ldr	r0, [r7, #12]
 8002a36:	f000 f8ac 	bl	8002b92 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d001      	beq.n	8002a44 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e02c      	b.n	8002a9e <I2C_RequestMemoryRead+0x9a>
>>>>>>> Stashed changes
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
<<<<<<< Updated upstream
 8001e68:	88fb      	ldrh	r3, [r7, #6]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d105      	bne.n	8001e7a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001e6e:	893b      	ldrh	r3, [r7, #8]
 8001e70:	b2da      	uxtb	r2, r3
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	629a      	str	r2, [r3, #40]	; 0x28
 8001e78:	e015      	b.n	8001ea6 <I2C_RequestMemoryRead+0x7e>
=======
 8002a44:	88fb      	ldrh	r3, [r7, #6]
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d105      	bne.n	8002a56 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a4a:	893b      	ldrh	r3, [r7, #8]
 8002a4c:	b2da      	uxtb	r2, r3
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	629a      	str	r2, [r3, #40]	; 0x28
 8002a54:	e015      	b.n	8002a82 <I2C_RequestMemoryRead+0x7e>
>>>>>>> Stashed changes
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
<<<<<<< Updated upstream
 8001e7a:	893b      	ldrh	r3, [r7, #8]
 8001e7c:	0a1b      	lsrs	r3, r3, #8
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	b2da      	uxtb	r2, r3
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e88:	69fa      	ldr	r2, [r7, #28]
 8001e8a:	69b9      	ldr	r1, [r7, #24]
 8001e8c:	68f8      	ldr	r0, [r7, #12]
 8001e8e:	f000 f892 	bl	8001fb6 <I2C_WaitOnTXISFlagUntilTimeout>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e012      	b.n	8001ec2 <I2C_RequestMemoryRead+0x9a>
=======
 8002a56:	893b      	ldrh	r3, [r7, #8]
 8002a58:	0a1b      	lsrs	r3, r3, #8
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	b2da      	uxtb	r2, r3
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a64:	69fa      	ldr	r2, [r7, #28]
 8002a66:	69b9      	ldr	r1, [r7, #24]
 8002a68:	68f8      	ldr	r0, [r7, #12]
 8002a6a:	f000 f892 	bl	8002b92 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d001      	beq.n	8002a78 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e012      	b.n	8002a9e <I2C_RequestMemoryRead+0x9a>
>>>>>>> Stashed changes
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
<<<<<<< Updated upstream
 8001e9c:	893b      	ldrh	r3, [r7, #8]
 8001e9e:	b2da      	uxtb	r2, r3
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	629a      	str	r2, [r3, #40]	; 0x28
=======
 8002a78:	893b      	ldrh	r3, [r7, #8]
 8002a7a:	b2da      	uxtb	r2, r3
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	629a      	str	r2, [r3, #40]	; 0x28
>>>>>>> Stashed changes
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
<<<<<<< Updated upstream
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	9300      	str	r3, [sp, #0]
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	2200      	movs	r2, #0
 8001eae:	2140      	movs	r1, #64	; 0x40
 8001eb0:	68f8      	ldr	r0, [r7, #12]
 8001eb2:	f000 f831 	bl	8001f18 <I2C_WaitOnFlagUntilTimeout>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d001      	beq.n	8001ec0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e000      	b.n	8001ec2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3710      	adds	r7, #16
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	80002000 	.word	0x80002000

08001ed0 <I2C_Flush_TXDR>:
=======
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	9300      	str	r3, [sp, #0]
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	2140      	movs	r1, #64	; 0x40
 8002a8c:	68f8      	ldr	r0, [r7, #12]
 8002a8e:	f000 f831 	bl	8002af4 <I2C_WaitOnFlagUntilTimeout>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d001      	beq.n	8002a9c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e000      	b.n	8002a9e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3710      	adds	r7, #16
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	80002000 	.word	0x80002000

08002aac <I2C_Flush_TXDR>:
>>>>>>> Stashed changes
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
<<<<<<< Updated upstream
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	699b      	ldr	r3, [r3, #24]
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d103      	bne.n	8001eee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2200      	movs	r2, #0
 8001eec:	629a      	str	r2, [r3, #40]	; 0x28
=======
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	699b      	ldr	r3, [r3, #24]
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d103      	bne.n	8002aca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	629a      	str	r2, [r3, #40]	; 0x28
>>>>>>> Stashed changes
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
<<<<<<< Updated upstream
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	f003 0301 	and.w	r3, r3, #1
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d007      	beq.n	8001f0c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	699a      	ldr	r2, [r3, #24]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f042 0201 	orr.w	r2, r2, #1
 8001f0a:	619a      	str	r2, [r3, #24]
  }
}
 8001f0c:	bf00      	nop
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <I2C_WaitOnFlagUntilTimeout>:
=======
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	699b      	ldr	r3, [r3, #24]
 8002ad0:	f003 0301 	and.w	r3, r3, #1
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d007      	beq.n	8002ae8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	699a      	ldr	r2, [r3, #24]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f042 0201 	orr.w	r2, r2, #1
 8002ae6:	619a      	str	r2, [r3, #24]
  }
}
 8002ae8:	bf00      	nop
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr

08002af4 <I2C_WaitOnFlagUntilTimeout>:
>>>>>>> Stashed changes
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< Updated upstream
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	603b      	str	r3, [r7, #0]
 8001f24:	4613      	mov	r3, r2
 8001f26:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f28:	e031      	b.n	8001f8e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f30:	d02d      	beq.n	8001f8e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f32:	f7ff f963 	bl	80011fc <HAL_GetTick>
 8001f36:	4602      	mov	r2, r0
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	683a      	ldr	r2, [r7, #0]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d302      	bcc.n	8001f48 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d122      	bne.n	8001f8e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	699a      	ldr	r2, [r3, #24]
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	4013      	ands	r3, r2
 8001f52:	68ba      	ldr	r2, [r7, #8]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	bf0c      	ite	eq
 8001f58:	2301      	moveq	r3, #1
 8001f5a:	2300      	movne	r3, #0
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	461a      	mov	r2, r3
 8001f60:	79fb      	ldrb	r3, [r7, #7]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d113      	bne.n	8001f8e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6a:	f043 0220 	orr.w	r2, r3, #32
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2220      	movs	r2, #32
 8001f76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2200      	movs	r2, #0
 8001f86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e00f      	b.n	8001fae <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	699a      	ldr	r2, [r3, #24]
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	4013      	ands	r3, r2
 8001f98:	68ba      	ldr	r2, [r7, #8]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	bf0c      	ite	eq
 8001f9e:	2301      	moveq	r3, #1
 8001fa0:	2300      	movne	r3, #0
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	79fb      	ldrb	r3, [r7, #7]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d0be      	beq.n	8001f2a <I2C_WaitOnFlagUntilTimeout+0x12>
=======
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	603b      	str	r3, [r7, #0]
 8002b00:	4613      	mov	r3, r2
 8002b02:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b04:	e031      	b.n	8002b6a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b0c:	d02d      	beq.n	8002b6a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b0e:	f7fe fd2f 	bl	8001570 <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	683a      	ldr	r2, [r7, #0]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d302      	bcc.n	8002b24 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d122      	bne.n	8002b6a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	699a      	ldr	r2, [r3, #24]
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	68ba      	ldr	r2, [r7, #8]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	bf0c      	ite	eq
 8002b34:	2301      	moveq	r3, #1
 8002b36:	2300      	movne	r3, #0
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	79fb      	ldrb	r3, [r7, #7]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d113      	bne.n	8002b6a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b46:	f043 0220 	orr.w	r2, r3, #32
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2220      	movs	r2, #32
 8002b52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e00f      	b.n	8002b8a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	699a      	ldr	r2, [r3, #24]
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	4013      	ands	r3, r2
 8002b74:	68ba      	ldr	r2, [r7, #8]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	bf0c      	ite	eq
 8002b7a:	2301      	moveq	r3, #1
 8002b7c:	2300      	movne	r3, #0
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	461a      	mov	r2, r3
 8002b82:	79fb      	ldrb	r3, [r7, #7]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d0be      	beq.n	8002b06 <I2C_WaitOnFlagUntilTimeout+0x12>
>>>>>>> Stashed changes
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< Updated upstream
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <I2C_WaitOnTXISFlagUntilTimeout>:
=======
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3710      	adds	r7, #16
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <I2C_WaitOnTXISFlagUntilTimeout>:
>>>>>>> Stashed changes
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
<<<<<<< Updated upstream
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b084      	sub	sp, #16
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	60f8      	str	r0, [r7, #12]
 8001fbe:	60b9      	str	r1, [r7, #8]
 8001fc0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001fc2:	e033      	b.n	800202c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	68b9      	ldr	r1, [r7, #8]
 8001fc8:	68f8      	ldr	r0, [r7, #12]
 8001fca:	f000 f87f 	bl	80020cc <I2C_IsErrorOccurred>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e031      	b.n	800203c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
=======
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b084      	sub	sp, #16
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	60f8      	str	r0, [r7, #12]
 8002b9a:	60b9      	str	r1, [r7, #8]
 8002b9c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b9e:	e033      	b.n	8002c08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	68b9      	ldr	r1, [r7, #8]
 8002ba4:	68f8      	ldr	r0, [r7, #12]
 8002ba6:	f000 f901 	bl	8002dac <I2C_IsErrorOccurred>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d001      	beq.n	8002bb4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e031      	b.n	8002c18 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
>>>>>>> Stashed changes
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
<<<<<<< Updated upstream
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001fde:	d025      	beq.n	800202c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fe0:	f7ff f90c 	bl	80011fc <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	68ba      	ldr	r2, [r7, #8]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d302      	bcc.n	8001ff6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d11a      	bne.n	800202c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	699b      	ldr	r3, [r3, #24]
 8001ffc:	f003 0302 	and.w	r3, r3, #2
 8002000:	2b02      	cmp	r3, #2
 8002002:	d013      	beq.n	800202c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002008:	f043 0220 	orr.w	r2, r3, #32
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2220      	movs	r2, #32
 8002014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2200      	movs	r2, #0
 800201c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2200      	movs	r2, #0
 8002024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e007      	b.n	800203c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	2b02      	cmp	r3, #2
 8002038:	d1c4      	bne.n	8001fc4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
=======
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bba:	d025      	beq.n	8002c08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bbc:	f7fe fcd8 	bl	8001570 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	68ba      	ldr	r2, [r7, #8]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d302      	bcc.n	8002bd2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d11a      	bne.n	8002c08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	699b      	ldr	r3, [r3, #24]
 8002bd8:	f003 0302 	and.w	r3, r3, #2
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d013      	beq.n	8002c08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be4:	f043 0220 	orr.w	r2, r3, #32
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2220      	movs	r2, #32
 8002bf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e007      	b.n	8002c18 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	699b      	ldr	r3, [r3, #24]
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d1c4      	bne.n	8002ba0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
>>>>>>> Stashed changes
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< Updated upstream
 800203a:	2300      	movs	r3, #0
}
 800203c:	4618      	mov	r0, r3
 800203e:	3710      	adds	r7, #16
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <I2C_WaitOnSTOPFlagUntilTimeout>:
=======
 8002c16:	2300      	movs	r3, #0
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3710      	adds	r7, #16
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <I2C_WaitOnSTOPFlagUntilTimeout>:
>>>>>>> Stashed changes
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
<<<<<<< Updated upstream
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002050:	e02f      	b.n	80020b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	68b9      	ldr	r1, [r7, #8]
 8002056:	68f8      	ldr	r0, [r7, #12]
 8002058:	f000 f838 	bl	80020cc <I2C_IsErrorOccurred>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e02d      	b.n	80020c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
=======
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c2c:	e02f      	b.n	8002c8e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	68b9      	ldr	r1, [r7, #8]
 8002c32:	68f8      	ldr	r0, [r7, #12]
 8002c34:	f000 f8ba 	bl	8002dac <I2C_IsErrorOccurred>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d001      	beq.n	8002c42 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e02d      	b.n	8002c9e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
>>>>>>> Stashed changes
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
<<<<<<< Updated upstream
 8002066:	f7ff f8c9 	bl	80011fc <HAL_GetTick>
 800206a:	4602      	mov	r2, r0
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	68ba      	ldr	r2, [r7, #8]
 8002072:	429a      	cmp	r2, r3
 8002074:	d302      	bcc.n	800207c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d11a      	bne.n	80020b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	699b      	ldr	r3, [r3, #24]
 8002082:	f003 0320 	and.w	r3, r3, #32
 8002086:	2b20      	cmp	r3, #32
 8002088:	d013      	beq.n	80020b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208e:	f043 0220 	orr.w	r2, r3, #32
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2220      	movs	r2, #32
 800209a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2200      	movs	r2, #0
 80020a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e007      	b.n	80020c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	f003 0320 	and.w	r3, r3, #32
 80020bc:	2b20      	cmp	r3, #32
 80020be:	d1c8      	bne.n	8002052 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
=======
 8002c42:	f7fe fc95 	bl	8001570 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	68ba      	ldr	r2, [r7, #8]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d302      	bcc.n	8002c58 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d11a      	bne.n	8002c8e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	699b      	ldr	r3, [r3, #24]
 8002c5e:	f003 0320 	and.w	r3, r3, #32
 8002c62:	2b20      	cmp	r3, #32
 8002c64:	d013      	beq.n	8002c8e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c6a:	f043 0220 	orr.w	r2, r3, #32
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2220      	movs	r2, #32
 8002c76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e007      	b.n	8002c9e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	f003 0320 	and.w	r3, r3, #32
 8002c98:	2b20      	cmp	r3, #32
 8002c9a:	d1c8      	bne.n	8002c2e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
>>>>>>> Stashed changes
      }
    }
  }
  return HAL_OK;
<<<<<<< Updated upstream
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
	...

080020cc <I2C_IsErrorOccurred>:
=======
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3710      	adds	r7, #16
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
	...

08002ca8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002cb4:	e06b      	b.n	8002d8e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	68b9      	ldr	r1, [r7, #8]
 8002cba:	68f8      	ldr	r0, [r7, #12]
 8002cbc:	f000 f876 	bl	8002dac <I2C_IsErrorOccurred>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e069      	b.n	8002d9e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	699b      	ldr	r3, [r3, #24]
 8002cd0:	f003 0320 	and.w	r3, r3, #32
 8002cd4:	2b20      	cmp	r3, #32
 8002cd6:	d138      	bne.n	8002d4a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	f003 0304 	and.w	r3, r3, #4
 8002ce2:	2b04      	cmp	r3, #4
 8002ce4:	d105      	bne.n	8002cf2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d001      	beq.n	8002cf2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	e055      	b.n	8002d9e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	699b      	ldr	r3, [r3, #24]
 8002cf8:	f003 0310 	and.w	r3, r3, #16
 8002cfc:	2b10      	cmp	r3, #16
 8002cfe:	d107      	bne.n	8002d10 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2210      	movs	r2, #16
 8002d06:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2204      	movs	r2, #4
 8002d0c:	645a      	str	r2, [r3, #68]	; 0x44
 8002d0e:	e002      	b.n	8002d16 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2200      	movs	r2, #0
 8002d14:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2220      	movs	r2, #32
 8002d1c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	6859      	ldr	r1, [r3, #4]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	4b1f      	ldr	r3, [pc, #124]	; (8002da8 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8002d2a:	400b      	ands	r3, r1
 8002d2c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2220      	movs	r2, #32
 8002d32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e029      	b.n	8002d9e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d4a:	f7fe fc11 	bl	8001570 <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	68ba      	ldr	r2, [r7, #8]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d302      	bcc.n	8002d60 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d116      	bne.n	8002d8e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	699b      	ldr	r3, [r3, #24]
 8002d66:	f003 0304 	and.w	r3, r3, #4
 8002d6a:	2b04      	cmp	r3, #4
 8002d6c:	d00f      	beq.n	8002d8e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d72:	f043 0220 	orr.w	r2, r3, #32
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2220      	movs	r2, #32
 8002d7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e007      	b.n	8002d9e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	699b      	ldr	r3, [r3, #24]
 8002d94:	f003 0304 	and.w	r3, r3, #4
 8002d98:	2b04      	cmp	r3, #4
 8002d9a:	d18c      	bne.n	8002cb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	fe00e800 	.word	0xfe00e800

08002dac <I2C_IsErrorOccurred>:
>>>>>>> Stashed changes
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< Updated upstream
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b08a      	sub	sp, #40	; 0x28
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020d8:	2300      	movs	r3, #0
 80020da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80020e6:	2300      	movs	r3, #0
 80020e8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	61fb      	str	r3, [r7, #28]
=======
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b08a      	sub	sp, #40	; 0x28
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002db8:	2300      	movs	r3, #0
 8002dba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	61fb      	str	r3, [r7, #28]
>>>>>>> Stashed changes
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
<<<<<<< Updated upstream
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	f003 0310 	and.w	r3, r3, #16
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d068      	beq.n	80021ca <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2210      	movs	r2, #16
 80020fe:	61da      	str	r2, [r3, #28]
=======
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	f003 0310 	and.w	r3, r3, #16
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d068      	beq.n	8002eaa <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2210      	movs	r2, #16
 8002dde:	61da      	str	r2, [r3, #28]
>>>>>>> Stashed changes

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
<<<<<<< Updated upstream
 8002100:	e049      	b.n	8002196 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002108:	d045      	beq.n	8002196 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800210a:	f7ff f877 	bl	80011fc <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	68ba      	ldr	r2, [r7, #8]
 8002116:	429a      	cmp	r2, r3
 8002118:	d302      	bcc.n	8002120 <I2C_IsErrorOccurred+0x54>
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d13a      	bne.n	8002196 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800212a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002132:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	699b      	ldr	r3, [r3, #24]
 800213a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800213e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002142:	d121      	bne.n	8002188 <I2C_IsErrorOccurred+0xbc>
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800214a:	d01d      	beq.n	8002188 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800214c:	7cfb      	ldrb	r3, [r7, #19]
 800214e:	2b20      	cmp	r3, #32
 8002150:	d01a      	beq.n	8002188 <I2C_IsErrorOccurred+0xbc>
=======
 8002de0:	e049      	b.n	8002e76 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002de8:	d045      	beq.n	8002e76 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002dea:	f7fe fbc1 	bl	8001570 <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	68ba      	ldr	r2, [r7, #8]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d302      	bcc.n	8002e00 <I2C_IsErrorOccurred+0x54>
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d13a      	bne.n	8002e76 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e0a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002e12:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	699b      	ldr	r3, [r3, #24]
 8002e1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e22:	d121      	bne.n	8002e68 <I2C_IsErrorOccurred+0xbc>
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e2a:	d01d      	beq.n	8002e68 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002e2c:	7cfb      	ldrb	r3, [r7, #19]
 8002e2e:	2b20      	cmp	r3, #32
 8002e30:	d01a      	beq.n	8002e68 <I2C_IsErrorOccurred+0xbc>
>>>>>>> Stashed changes
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
<<<<<<< Updated upstream
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	685a      	ldr	r2, [r3, #4]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002160:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002162:	f7ff f84b 	bl	80011fc <HAL_GetTick>
 8002166:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002168:	e00e      	b.n	8002188 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800216a:	f7ff f847 	bl	80011fc <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	2b19      	cmp	r3, #25
 8002176:	d907      	bls.n	8002188 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002178:	6a3b      	ldr	r3, [r7, #32]
 800217a:	f043 0320 	orr.w	r3, r3, #32
 800217e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002186:	e006      	b.n	8002196 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	f003 0320 	and.w	r3, r3, #32
 8002192:	2b20      	cmp	r3, #32
 8002194:	d1e9      	bne.n	800216a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	f003 0320 	and.w	r3, r3, #32
 80021a0:	2b20      	cmp	r3, #32
 80021a2:	d003      	beq.n	80021ac <I2C_IsErrorOccurred+0xe0>
 80021a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d0aa      	beq.n	8002102 <I2C_IsErrorOccurred+0x36>
=======
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	685a      	ldr	r2, [r3, #4]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e40:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002e42:	f7fe fb95 	bl	8001570 <HAL_GetTick>
 8002e46:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e48:	e00e      	b.n	8002e68 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002e4a:	f7fe fb91 	bl	8001570 <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	2b19      	cmp	r3, #25
 8002e56:	d907      	bls.n	8002e68 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002e58:	6a3b      	ldr	r3, [r7, #32]
 8002e5a:	f043 0320 	orr.w	r3, r3, #32
 8002e5e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002e66:	e006      	b.n	8002e76 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	699b      	ldr	r3, [r3, #24]
 8002e6e:	f003 0320 	and.w	r3, r3, #32
 8002e72:	2b20      	cmp	r3, #32
 8002e74:	d1e9      	bne.n	8002e4a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	f003 0320 	and.w	r3, r3, #32
 8002e80:	2b20      	cmp	r3, #32
 8002e82:	d003      	beq.n	8002e8c <I2C_IsErrorOccurred+0xe0>
 8002e84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d0aa      	beq.n	8002de2 <I2C_IsErrorOccurred+0x36>
>>>>>>> Stashed changes
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
<<<<<<< Updated upstream
 80021ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d103      	bne.n	80021bc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2220      	movs	r2, #32
 80021ba:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80021bc:	6a3b      	ldr	r3, [r7, #32]
 80021be:	f043 0304 	orr.w	r3, r3, #4
 80021c2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
=======
 8002e8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d103      	bne.n	8002e9c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2220      	movs	r2, #32
 8002e9a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002e9c:	6a3b      	ldr	r3, [r7, #32]
 8002e9e:	f043 0304 	orr.w	r3, r3, #4
 8002ea2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
>>>>>>> Stashed changes
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
<<<<<<< Updated upstream
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	699b      	ldr	r3, [r3, #24]
 80021d0:	61bb      	str	r3, [r7, #24]
=======
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	699b      	ldr	r3, [r3, #24]
 8002eb0:	61bb      	str	r3, [r7, #24]
>>>>>>> Stashed changes

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
<<<<<<< Updated upstream
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d00b      	beq.n	80021f4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80021dc:	6a3b      	ldr	r3, [r7, #32]
 80021de:	f043 0301 	orr.w	r3, r3, #1
 80021e2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021ec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
=======
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d00b      	beq.n	8002ed4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002ebc:	6a3b      	ldr	r3, [r7, #32]
 8002ebe:	f043 0301 	orr.w	r3, r3, #1
 8002ec2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ecc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
>>>>>>> Stashed changes
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
<<<<<<< Updated upstream
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d00b      	beq.n	8002216 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80021fe:	6a3b      	ldr	r3, [r7, #32]
 8002200:	f043 0308 	orr.w	r3, r3, #8
 8002204:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800220e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
=======
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00b      	beq.n	8002ef6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002ede:	6a3b      	ldr	r3, [r7, #32]
 8002ee0:	f043 0308 	orr.w	r3, r3, #8
 8002ee4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002eee:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
>>>>>>> Stashed changes
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
<<<<<<< Updated upstream
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800221c:	2b00      	cmp	r3, #0
 800221e:	d00b      	beq.n	8002238 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002220:	6a3b      	ldr	r3, [r7, #32]
 8002222:	f043 0302 	orr.w	r3, r3, #2
 8002226:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002230:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002238:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800223c:	2b00      	cmp	r3, #0
 800223e:	d01c      	beq.n	800227a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002240:	68f8      	ldr	r0, [r7, #12]
 8002242:	f7ff fe45 	bl	8001ed0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	6859      	ldr	r1, [r3, #4]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	4b0d      	ldr	r3, [pc, #52]	; (8002288 <I2C_IsErrorOccurred+0x1bc>)
 8002252:	400b      	ands	r3, r1
 8002254:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800225a:	6a3b      	ldr	r3, [r7, #32]
 800225c:	431a      	orrs	r2, r3
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2220      	movs	r2, #32
 8002266:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2200      	movs	r2, #0
 800226e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2200      	movs	r2, #0
 8002276:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800227a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800227e:	4618      	mov	r0, r3
 8002280:	3728      	adds	r7, #40	; 0x28
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	fe00e800 	.word	0xfe00e800

0800228c <I2C_TransferConfig>:
=======
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d00b      	beq.n	8002f18 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002f00:	6a3b      	ldr	r3, [r7, #32]
 8002f02:	f043 0302 	orr.w	r3, r3, #2
 8002f06:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f10:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002f18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d01c      	beq.n	8002f5a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002f20:	68f8      	ldr	r0, [r7, #12]
 8002f22:	f7ff fdc3 	bl	8002aac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	6859      	ldr	r1, [r3, #4]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	4b0d      	ldr	r3, [pc, #52]	; (8002f68 <I2C_IsErrorOccurred+0x1bc>)
 8002f32:	400b      	ands	r3, r1
 8002f34:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f3a:	6a3b      	ldr	r3, [r7, #32]
 8002f3c:	431a      	orrs	r2, r3
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2220      	movs	r2, #32
 8002f46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002f5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3728      	adds	r7, #40	; 0x28
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	fe00e800 	.word	0xfe00e800

08002f6c <I2C_TransferConfig>:
>>>>>>> Stashed changes
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
<<<<<<< Updated upstream
 800228c:	b480      	push	{r7}
 800228e:	b087      	sub	sp, #28
 8002290:	af00      	add	r7, sp, #0
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	607b      	str	r3, [r7, #4]
 8002296:	460b      	mov	r3, r1
 8002298:	817b      	strh	r3, [r7, #10]
 800229a:	4613      	mov	r3, r2
 800229c:	727b      	strb	r3, [r7, #9]
=======
 8002f6c:	b480      	push	{r7}
 8002f6e:	b087      	sub	sp, #28
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	607b      	str	r3, [r7, #4]
 8002f76:	460b      	mov	r3, r1
 8002f78:	817b      	strh	r3, [r7, #10]
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	727b      	strb	r3, [r7, #9]
>>>>>>> Stashed changes
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
<<<<<<< Updated upstream
 800229e:	897b      	ldrh	r3, [r7, #10]
 80022a0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80022a4:	7a7b      	ldrb	r3, [r7, #9]
 80022a6:	041b      	lsls	r3, r3, #16
 80022a8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80022ac:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80022b2:	6a3b      	ldr	r3, [r7, #32]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80022ba:	617b      	str	r3, [r7, #20]
=======
 8002f7e:	897b      	ldrh	r3, [r7, #10]
 8002f80:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002f84:	7a7b      	ldrb	r3, [r7, #9]
 8002f86:	041b      	lsls	r3, r3, #16
 8002f88:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f8c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f92:	6a3b      	ldr	r3, [r7, #32]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002f9a:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
<<<<<<< Updated upstream
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	685a      	ldr	r2, [r3, #4]
 80022c2:	6a3b      	ldr	r3, [r7, #32]
 80022c4:	0d5b      	lsrs	r3, r3, #21
 80022c6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80022ca:	4b08      	ldr	r3, [pc, #32]	; (80022ec <I2C_TransferConfig+0x60>)
 80022cc:	430b      	orrs	r3, r1
 80022ce:	43db      	mvns	r3, r3
 80022d0:	ea02 0103 	and.w	r1, r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	697a      	ldr	r2, [r7, #20]
 80022da:	430a      	orrs	r2, r1
 80022dc:	605a      	str	r2, [r3, #4]
=======
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	685a      	ldr	r2, [r3, #4]
 8002fa2:	6a3b      	ldr	r3, [r7, #32]
 8002fa4:	0d5b      	lsrs	r3, r3, #21
 8002fa6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002faa:	4b08      	ldr	r3, [pc, #32]	; (8002fcc <I2C_TransferConfig+0x60>)
 8002fac:	430b      	orrs	r3, r1
 8002fae:	43db      	mvns	r3, r3
 8002fb0:	ea02 0103 	and.w	r1, r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	697a      	ldr	r2, [r7, #20]
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
<<<<<<< Updated upstream
 80022de:	bf00      	nop
 80022e0:	371c      	adds	r7, #28
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	03ff63ff 	.word	0x03ff63ff

080022f0 <HAL_I2CEx_ConfigAnalogFilter>:
=======
 8002fbe:	bf00      	nop
 8002fc0:	371c      	adds	r7, #28
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	03ff63ff 	.word	0x03ff63ff

08002fd0 <HAL_I2CEx_ConfigAnalogFilter>:
>>>>>>> Stashed changes
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
<<<<<<< Updated upstream
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
=======
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
<<<<<<< Updated upstream
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2b20      	cmp	r3, #32
 8002304:	d138      	bne.n	8002378 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800230c:	2b01      	cmp	r3, #1
 800230e:	d101      	bne.n	8002314 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002310:	2302      	movs	r3, #2
 8002312:	e032      	b.n	800237a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2224      	movs	r2, #36	; 0x24
 8002320:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f022 0201 	bic.w	r2, r2, #1
 8002332:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002342:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	6819      	ldr	r1, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	683a      	ldr	r2, [r7, #0]
 8002350:	430a      	orrs	r2, r1
 8002352:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f042 0201 	orr.w	r2, r2, #1
 8002362:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2220      	movs	r2, #32
 8002368:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002374:	2300      	movs	r3, #0
 8002376:	e000      	b.n	800237a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
=======
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	2b20      	cmp	r3, #32
 8002fe4:	d138      	bne.n	8003058 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d101      	bne.n	8002ff4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002ff0:	2302      	movs	r3, #2
 8002ff2:	e032      	b.n	800305a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2224      	movs	r2, #36	; 0x24
 8003000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f022 0201 	bic.w	r2, r2, #1
 8003012:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003022:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	6819      	ldr	r1, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	683a      	ldr	r2, [r7, #0]
 8003030:	430a      	orrs	r2, r1
 8003032:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f042 0201 	orr.w	r2, r2, #1
 8003042:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2220      	movs	r2, #32
 8003048:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003054:	2300      	movs	r3, #0
 8003056:	e000      	b.n	800305a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
>>>>>>> Stashed changes
  }
  else
  {
    return HAL_BUSY;
<<<<<<< Updated upstream
 8002378:	2302      	movs	r3, #2
  }
}
 800237a:	4618      	mov	r0, r3
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr

08002386 <HAL_I2CEx_ConfigDigitalFilter>:
=======
 8003058:	2302      	movs	r3, #2
  }
}
 800305a:	4618      	mov	r0, r3
 800305c:	370c      	adds	r7, #12
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr

08003066 <HAL_I2CEx_ConfigDigitalFilter>:
>>>>>>> Stashed changes
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
<<<<<<< Updated upstream
 8002386:	b480      	push	{r7}
 8002388:	b085      	sub	sp, #20
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
 800238e:	6039      	str	r1, [r7, #0]
=======
 8003066:	b480      	push	{r7}
 8003068:	b085      	sub	sp, #20
 800306a:	af00      	add	r7, sp, #0
 800306c:	6078      	str	r0, [r7, #4]
 800306e:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
<<<<<<< Updated upstream
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002396:	b2db      	uxtb	r3, r3
 8002398:	2b20      	cmp	r3, #32
 800239a:	d139      	bne.n	8002410 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d101      	bne.n	80023aa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80023a6:	2302      	movs	r3, #2
 80023a8:	e033      	b.n	8002412 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2201      	movs	r2, #1
 80023ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2224      	movs	r2, #36	; 0x24
 80023b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f022 0201 	bic.w	r2, r2, #1
 80023c8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80023d8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	021b      	lsls	r3, r3, #8
 80023de:	68fa      	ldr	r2, [r7, #12]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f042 0201 	orr.w	r2, r2, #1
 80023fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2220      	movs	r2, #32
 8002400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800240c:	2300      	movs	r3, #0
 800240e:	e000      	b.n	8002412 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
=======
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003076:	b2db      	uxtb	r3, r3
 8003078:	2b20      	cmp	r3, #32
 800307a:	d139      	bne.n	80030f0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003082:	2b01      	cmp	r3, #1
 8003084:	d101      	bne.n	800308a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003086:	2302      	movs	r3, #2
 8003088:	e033      	b.n	80030f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2201      	movs	r2, #1
 800308e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2224      	movs	r2, #36	; 0x24
 8003096:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f022 0201 	bic.w	r2, r2, #1
 80030a8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80030b8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	021b      	lsls	r3, r3, #8
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	68fa      	ldr	r2, [r7, #12]
 80030ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f042 0201 	orr.w	r2, r2, #1
 80030da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2220      	movs	r2, #32
 80030e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80030ec:	2300      	movs	r3, #0
 80030ee:	e000      	b.n	80030f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
>>>>>>> Stashed changes
  }
  else
  {
    return HAL_BUSY;
<<<<<<< Updated upstream
 8002410:	2302      	movs	r3, #2
  }
}
 8002412:	4618      	mov	r0, r3
 8002414:	3714      	adds	r7, #20
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
	...

08002420 <HAL_PWR_EnableBkUpAccess>:
=======
 80030f0:	2302      	movs	r3, #2
  }
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3714      	adds	r7, #20
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
	...

08003100 <HAL_PWR_EnableBkUpAccess>:
>>>>>>> Stashed changes
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
<<<<<<< Updated upstream
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002424:	4b05      	ldr	r3, [pc, #20]	; (800243c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a04      	ldr	r2, [pc, #16]	; (800243c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800242a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800242e:	6013      	str	r3, [r2, #0]
}
 8002430:	bf00      	nop
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	40007000 	.word	0x40007000

08002440 <HAL_PWREx_GetVoltageRange>:
=======
 8003100:	b480      	push	{r7}
 8003102:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003104:	4b05      	ldr	r3, [pc, #20]	; (800311c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a04      	ldr	r2, [pc, #16]	; (800311c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800310a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800310e:	6013      	str	r3, [r2, #0]
}
 8003110:	bf00      	nop
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	40007000 	.word	0x40007000

08003120 <HAL_PWREx_GetVoltageRange>:
>>>>>>> Stashed changes
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
<<<<<<< Updated upstream
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
=======
 8003120:	b480      	push	{r7}
 8003122:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
<<<<<<< Updated upstream
 8002444:	4b04      	ldr	r3, [pc, #16]	; (8002458 <HAL_PWREx_GetVoltageRange+0x18>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800244c:	4618      	mov	r0, r3
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	40007000 	.word	0x40007000

0800245c <HAL_PWREx_ControlVoltageScaling>:
=======
 8003124:	4b04      	ldr	r3, [pc, #16]	; (8003138 <HAL_PWREx_GetVoltageRange+0x18>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800312c:	4618      	mov	r0, r3
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	40007000 	.word	0x40007000

0800313c <HAL_PWREx_ControlVoltageScaling>:
>>>>>>> Stashed changes
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
<<<<<<< Updated upstream
 800245c:	b480      	push	{r7}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
=======
 800313c:	b480      	push	{r7}
 800313e:	b085      	sub	sp, #20
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
<<<<<<< Updated upstream
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800246a:	d130      	bne.n	80024ce <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800246c:	4b23      	ldr	r3, [pc, #140]	; (80024fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002474:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002478:	d038      	beq.n	80024ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800247a:	4b20      	ldr	r3, [pc, #128]	; (80024fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002482:	4a1e      	ldr	r2, [pc, #120]	; (80024fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002484:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002488:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800248a:	4b1d      	ldr	r3, [pc, #116]	; (8002500 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2232      	movs	r2, #50	; 0x32
 8002490:	fb02 f303 	mul.w	r3, r2, r3
 8002494:	4a1b      	ldr	r2, [pc, #108]	; (8002504 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002496:	fba2 2303 	umull	r2, r3, r2, r3
 800249a:	0c9b      	lsrs	r3, r3, #18
 800249c:	3301      	adds	r3, #1
 800249e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024a0:	e002      	b.n	80024a8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	3b01      	subs	r3, #1
 80024a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024a8:	4b14      	ldr	r3, [pc, #80]	; (80024fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024aa:	695b      	ldr	r3, [r3, #20]
 80024ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024b4:	d102      	bne.n	80024bc <HAL_PWREx_ControlVoltageScaling+0x60>
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d1f2      	bne.n	80024a2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80024bc:	4b0f      	ldr	r3, [pc, #60]	; (80024fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024be:	695b      	ldr	r3, [r3, #20]
 80024c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024c8:	d110      	bne.n	80024ec <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e00f      	b.n	80024ee <HAL_PWREx_ControlVoltageScaling+0x92>
=======
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800314a:	d130      	bne.n	80031ae <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800314c:	4b23      	ldr	r3, [pc, #140]	; (80031dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003154:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003158:	d038      	beq.n	80031cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800315a:	4b20      	ldr	r3, [pc, #128]	; (80031dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003162:	4a1e      	ldr	r2, [pc, #120]	; (80031dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003164:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003168:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800316a:	4b1d      	ldr	r3, [pc, #116]	; (80031e0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2232      	movs	r2, #50	; 0x32
 8003170:	fb02 f303 	mul.w	r3, r2, r3
 8003174:	4a1b      	ldr	r2, [pc, #108]	; (80031e4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003176:	fba2 2303 	umull	r2, r3, r2, r3
 800317a:	0c9b      	lsrs	r3, r3, #18
 800317c:	3301      	adds	r3, #1
 800317e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003180:	e002      	b.n	8003188 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	3b01      	subs	r3, #1
 8003186:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003188:	4b14      	ldr	r3, [pc, #80]	; (80031dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800318a:	695b      	ldr	r3, [r3, #20]
 800318c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003190:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003194:	d102      	bne.n	800319c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d1f2      	bne.n	8003182 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800319c:	4b0f      	ldr	r3, [pc, #60]	; (80031dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800319e:	695b      	ldr	r3, [r3, #20]
 80031a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031a8:	d110      	bne.n	80031cc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e00f      	b.n	80031ce <HAL_PWREx_ControlVoltageScaling+0x92>
>>>>>>> Stashed changes
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
<<<<<<< Updated upstream
 80024ce:	4b0b      	ldr	r3, [pc, #44]	; (80024fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80024d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024da:	d007      	beq.n	80024ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80024dc:	4b07      	ldr	r3, [pc, #28]	; (80024fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80024e4:	4a05      	ldr	r2, [pc, #20]	; (80024fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024ea:	6013      	str	r3, [r2, #0]
=======
 80031ae:	4b0b      	ldr	r3, [pc, #44]	; (80031dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80031b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031ba:	d007      	beq.n	80031cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80031bc:	4b07      	ldr	r3, [pc, #28]	; (80031dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80031c4:	4a05      	ldr	r2, [pc, #20]	; (80031dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031ca:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
<<<<<<< Updated upstream
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3714      	adds	r7, #20
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	40007000 	.word	0x40007000
 8002500:	20000000 	.word	0x20000000
 8002504:	431bde83 	.word	0x431bde83

08002508 <HAL_RCC_OscConfig>:
=======
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3714      	adds	r7, #20
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop
 80031dc:	40007000 	.word	0x40007000
 80031e0:	20000000 	.word	0x20000000
 80031e4:	431bde83 	.word	0x431bde83

080031e8 <HAL_RCC_OscConfig>:
>>>>>>> Stashed changes
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< Updated upstream
 8002508:	b580      	push	{r7, lr}
 800250a:	b08a      	sub	sp, #40	; 0x28
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
=======
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b08a      	sub	sp, #40	; 0x28
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
<<<<<<< Updated upstream
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d102      	bne.n	800251c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	f000 bc4f 	b.w	8002dba <HAL_RCC_OscConfig+0x8b2>
=======
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d102      	bne.n	80031fc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	f000 bc4f 	b.w	8003a9a <HAL_RCC_OscConfig+0x8b2>
>>>>>>> Stashed changes
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
<<<<<<< Updated upstream
 800251c:	4b97      	ldr	r3, [pc, #604]	; (800277c <HAL_RCC_OscConfig+0x274>)
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f003 030c 	and.w	r3, r3, #12
 8002524:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002526:	4b95      	ldr	r3, [pc, #596]	; (800277c <HAL_RCC_OscConfig+0x274>)
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	f003 0303 	and.w	r3, r3, #3
 800252e:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0310 	and.w	r3, r3, #16
 8002538:	2b00      	cmp	r3, #0
 800253a:	f000 80e6 	beq.w	800270a <HAL_RCC_OscConfig+0x202>
=======
 80031fc:	4b97      	ldr	r3, [pc, #604]	; (800345c <HAL_RCC_OscConfig+0x274>)
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	f003 030c 	and.w	r3, r3, #12
 8003204:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003206:	4b95      	ldr	r3, [pc, #596]	; (800345c <HAL_RCC_OscConfig+0x274>)
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	f003 0303 	and.w	r3, r3, #3
 800320e:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0310 	and.w	r3, r3, #16
 8003218:	2b00      	cmp	r3, #0
 800321a:	f000 80e6 	beq.w	80033ea <HAL_RCC_OscConfig+0x202>
>>>>>>> Stashed changes
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
<<<<<<< Updated upstream
 800253e:	6a3b      	ldr	r3, [r7, #32]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d007      	beq.n	8002554 <HAL_RCC_OscConfig+0x4c>
 8002544:	6a3b      	ldr	r3, [r7, #32]
 8002546:	2b0c      	cmp	r3, #12
 8002548:	f040 808d 	bne.w	8002666 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	2b01      	cmp	r3, #1
 8002550:	f040 8089 	bne.w	8002666 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002554:	4b89      	ldr	r3, [pc, #548]	; (800277c <HAL_RCC_OscConfig+0x274>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0302 	and.w	r3, r3, #2
 800255c:	2b00      	cmp	r3, #0
 800255e:	d006      	beq.n	800256e <HAL_RCC_OscConfig+0x66>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	69db      	ldr	r3, [r3, #28]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d102      	bne.n	800256e <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	f000 bc26 	b.w	8002dba <HAL_RCC_OscConfig+0x8b2>
=======
 800321e:	6a3b      	ldr	r3, [r7, #32]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d007      	beq.n	8003234 <HAL_RCC_OscConfig+0x4c>
 8003224:	6a3b      	ldr	r3, [r7, #32]
 8003226:	2b0c      	cmp	r3, #12
 8003228:	f040 808d 	bne.w	8003346 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	2b01      	cmp	r3, #1
 8003230:	f040 8089 	bne.w	8003346 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003234:	4b89      	ldr	r3, [pc, #548]	; (800345c <HAL_RCC_OscConfig+0x274>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0302 	and.w	r3, r3, #2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d006      	beq.n	800324e <HAL_RCC_OscConfig+0x66>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	69db      	ldr	r3, [r3, #28]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d102      	bne.n	800324e <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	f000 bc26 	b.w	8003a9a <HAL_RCC_OscConfig+0x8b2>
>>>>>>> Stashed changes
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
<<<<<<< Updated upstream
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002572:	4b82      	ldr	r3, [pc, #520]	; (800277c <HAL_RCC_OscConfig+0x274>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0308 	and.w	r3, r3, #8
 800257a:	2b00      	cmp	r3, #0
 800257c:	d004      	beq.n	8002588 <HAL_RCC_OscConfig+0x80>
 800257e:	4b7f      	ldr	r3, [pc, #508]	; (800277c <HAL_RCC_OscConfig+0x274>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002586:	e005      	b.n	8002594 <HAL_RCC_OscConfig+0x8c>
 8002588:	4b7c      	ldr	r3, [pc, #496]	; (800277c <HAL_RCC_OscConfig+0x274>)
 800258a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800258e:	091b      	lsrs	r3, r3, #4
 8002590:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002594:	4293      	cmp	r3, r2
 8002596:	d224      	bcs.n	80025e2 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259c:	4618      	mov	r0, r3
 800259e:	f000 fe0b 	bl	80031b8 <RCC_SetFlashLatencyFromMSIRange>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d002      	beq.n	80025ae <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	f000 bc06 	b.w	8002dba <HAL_RCC_OscConfig+0x8b2>
=======
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003252:	4b82      	ldr	r3, [pc, #520]	; (800345c <HAL_RCC_OscConfig+0x274>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0308 	and.w	r3, r3, #8
 800325a:	2b00      	cmp	r3, #0
 800325c:	d004      	beq.n	8003268 <HAL_RCC_OscConfig+0x80>
 800325e:	4b7f      	ldr	r3, [pc, #508]	; (800345c <HAL_RCC_OscConfig+0x274>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003266:	e005      	b.n	8003274 <HAL_RCC_OscConfig+0x8c>
 8003268:	4b7c      	ldr	r3, [pc, #496]	; (800345c <HAL_RCC_OscConfig+0x274>)
 800326a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800326e:	091b      	lsrs	r3, r3, #4
 8003270:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003274:	4293      	cmp	r3, r2
 8003276:	d224      	bcs.n	80032c2 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327c:	4618      	mov	r0, r3
 800327e:	f000 fe0b 	bl	8003e98 <RCC_SetFlashLatencyFromMSIRange>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d002      	beq.n	800328e <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	f000 bc06 	b.w	8003a9a <HAL_RCC_OscConfig+0x8b2>
>>>>>>> Stashed changes
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
<<<<<<< Updated upstream
 80025ae:	4b73      	ldr	r3, [pc, #460]	; (800277c <HAL_RCC_OscConfig+0x274>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a72      	ldr	r2, [pc, #456]	; (800277c <HAL_RCC_OscConfig+0x274>)
 80025b4:	f043 0308 	orr.w	r3, r3, #8
 80025b8:	6013      	str	r3, [r2, #0]
 80025ba:	4b70      	ldr	r3, [pc, #448]	; (800277c <HAL_RCC_OscConfig+0x274>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c6:	496d      	ldr	r1, [pc, #436]	; (800277c <HAL_RCC_OscConfig+0x274>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025cc:	4b6b      	ldr	r3, [pc, #428]	; (800277c <HAL_RCC_OscConfig+0x274>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a1b      	ldr	r3, [r3, #32]
 80025d8:	021b      	lsls	r3, r3, #8
 80025da:	4968      	ldr	r1, [pc, #416]	; (800277c <HAL_RCC_OscConfig+0x274>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	604b      	str	r3, [r1, #4]
 80025e0:	e025      	b.n	800262e <HAL_RCC_OscConfig+0x126>
=======
 800328e:	4b73      	ldr	r3, [pc, #460]	; (800345c <HAL_RCC_OscConfig+0x274>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a72      	ldr	r2, [pc, #456]	; (800345c <HAL_RCC_OscConfig+0x274>)
 8003294:	f043 0308 	orr.w	r3, r3, #8
 8003298:	6013      	str	r3, [r2, #0]
 800329a:	4b70      	ldr	r3, [pc, #448]	; (800345c <HAL_RCC_OscConfig+0x274>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a6:	496d      	ldr	r1, [pc, #436]	; (800345c <HAL_RCC_OscConfig+0x274>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032ac:	4b6b      	ldr	r3, [pc, #428]	; (800345c <HAL_RCC_OscConfig+0x274>)
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a1b      	ldr	r3, [r3, #32]
 80032b8:	021b      	lsls	r3, r3, #8
 80032ba:	4968      	ldr	r1, [pc, #416]	; (800345c <HAL_RCC_OscConfig+0x274>)
 80032bc:	4313      	orrs	r3, r2
 80032be:	604b      	str	r3, [r1, #4]
 80032c0:	e025      	b.n	800330e <HAL_RCC_OscConfig+0x126>
>>>>>>> Stashed changes
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
<<<<<<< Updated upstream
 80025e2:	4b66      	ldr	r3, [pc, #408]	; (800277c <HAL_RCC_OscConfig+0x274>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a65      	ldr	r2, [pc, #404]	; (800277c <HAL_RCC_OscConfig+0x274>)
 80025e8:	f043 0308 	orr.w	r3, r3, #8
 80025ec:	6013      	str	r3, [r2, #0]
 80025ee:	4b63      	ldr	r3, [pc, #396]	; (800277c <HAL_RCC_OscConfig+0x274>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fa:	4960      	ldr	r1, [pc, #384]	; (800277c <HAL_RCC_OscConfig+0x274>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002600:	4b5e      	ldr	r3, [pc, #376]	; (800277c <HAL_RCC_OscConfig+0x274>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a1b      	ldr	r3, [r3, #32]
 800260c:	021b      	lsls	r3, r3, #8
 800260e:	495b      	ldr	r1, [pc, #364]	; (800277c <HAL_RCC_OscConfig+0x274>)
 8002610:	4313      	orrs	r3, r2
 8002612:	604b      	str	r3, [r1, #4]
=======
 80032c2:	4b66      	ldr	r3, [pc, #408]	; (800345c <HAL_RCC_OscConfig+0x274>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a65      	ldr	r2, [pc, #404]	; (800345c <HAL_RCC_OscConfig+0x274>)
 80032c8:	f043 0308 	orr.w	r3, r3, #8
 80032cc:	6013      	str	r3, [r2, #0]
 80032ce:	4b63      	ldr	r3, [pc, #396]	; (800345c <HAL_RCC_OscConfig+0x274>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032da:	4960      	ldr	r1, [pc, #384]	; (800345c <HAL_RCC_OscConfig+0x274>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032e0:	4b5e      	ldr	r3, [pc, #376]	; (800345c <HAL_RCC_OscConfig+0x274>)
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a1b      	ldr	r3, [r3, #32]
 80032ec:	021b      	lsls	r3, r3, #8
 80032ee:	495b      	ldr	r1, [pc, #364]	; (800345c <HAL_RCC_OscConfig+0x274>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	604b      	str	r3, [r1, #4]
>>>>>>> Stashed changes

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
<<<<<<< Updated upstream
 8002614:	6a3b      	ldr	r3, [r7, #32]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d109      	bne.n	800262e <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261e:	4618      	mov	r0, r3
 8002620:	f000 fdca 	bl	80031b8 <RCC_SetFlashLatencyFromMSIRange>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e3c5      	b.n	8002dba <HAL_RCC_OscConfig+0x8b2>
=======
 80032f4:	6a3b      	ldr	r3, [r7, #32]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d109      	bne.n	800330e <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fe:	4618      	mov	r0, r3
 8003300:	f000 fdca 	bl	8003e98 <RCC_SetFlashLatencyFromMSIRange>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e3c5      	b.n	8003a9a <HAL_RCC_OscConfig+0x8b2>
>>>>>>> Stashed changes
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
<<<<<<< Updated upstream
 800262e:	f000 fccd 	bl	8002fcc <HAL_RCC_GetSysClockFreq>
 8002632:	4602      	mov	r2, r0
 8002634:	4b51      	ldr	r3, [pc, #324]	; (800277c <HAL_RCC_OscConfig+0x274>)
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	091b      	lsrs	r3, r3, #4
 800263a:	f003 030f 	and.w	r3, r3, #15
 800263e:	4950      	ldr	r1, [pc, #320]	; (8002780 <HAL_RCC_OscConfig+0x278>)
 8002640:	5ccb      	ldrb	r3, [r1, r3]
 8002642:	f003 031f 	and.w	r3, r3, #31
 8002646:	fa22 f303 	lsr.w	r3, r2, r3
 800264a:	4a4e      	ldr	r2, [pc, #312]	; (8002784 <HAL_RCC_OscConfig+0x27c>)
 800264c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800264e:	4b4e      	ldr	r3, [pc, #312]	; (8002788 <HAL_RCC_OscConfig+0x280>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4618      	mov	r0, r3
 8002654:	f7fe fc18 	bl	8000e88 <HAL_InitTick>
 8002658:	4603      	mov	r3, r0
 800265a:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 800265c:	7dfb      	ldrb	r3, [r7, #23]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d052      	beq.n	8002708 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8002662:	7dfb      	ldrb	r3, [r7, #23]
 8002664:	e3a9      	b.n	8002dba <HAL_RCC_OscConfig+0x8b2>
=======
 800330e:	f000 fccd 	bl	8003cac <HAL_RCC_GetSysClockFreq>
 8003312:	4602      	mov	r2, r0
 8003314:	4b51      	ldr	r3, [pc, #324]	; (800345c <HAL_RCC_OscConfig+0x274>)
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	091b      	lsrs	r3, r3, #4
 800331a:	f003 030f 	and.w	r3, r3, #15
 800331e:	4950      	ldr	r1, [pc, #320]	; (8003460 <HAL_RCC_OscConfig+0x278>)
 8003320:	5ccb      	ldrb	r3, [r1, r3]
 8003322:	f003 031f 	and.w	r3, r3, #31
 8003326:	fa22 f303 	lsr.w	r3, r2, r3
 800332a:	4a4e      	ldr	r2, [pc, #312]	; (8003464 <HAL_RCC_OscConfig+0x27c>)
 800332c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800332e:	4b4e      	ldr	r3, [pc, #312]	; (8003468 <HAL_RCC_OscConfig+0x280>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4618      	mov	r0, r3
 8003334:	f7fd ff58 	bl	80011e8 <HAL_InitTick>
 8003338:	4603      	mov	r3, r0
 800333a:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 800333c:	7dfb      	ldrb	r3, [r7, #23]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d052      	beq.n	80033e8 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8003342:	7dfb      	ldrb	r3, [r7, #23]
 8003344:	e3a9      	b.n	8003a9a <HAL_RCC_OscConfig+0x8b2>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
<<<<<<< Updated upstream
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	69db      	ldr	r3, [r3, #28]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d032      	beq.n	80026d4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800266e:	4b43      	ldr	r3, [pc, #268]	; (800277c <HAL_RCC_OscConfig+0x274>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a42      	ldr	r2, [pc, #264]	; (800277c <HAL_RCC_OscConfig+0x274>)
 8002674:	f043 0301 	orr.w	r3, r3, #1
 8002678:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800267a:	f7fe fdbf 	bl	80011fc <HAL_GetTick>
 800267e:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002680:	e008      	b.n	8002694 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002682:	f7fe fdbb 	bl	80011fc <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	2b02      	cmp	r3, #2
 800268e:	d901      	bls.n	8002694 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e392      	b.n	8002dba <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002694:	4b39      	ldr	r3, [pc, #228]	; (800277c <HAL_RCC_OscConfig+0x274>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0302 	and.w	r3, r3, #2
 800269c:	2b00      	cmp	r3, #0
 800269e:	d0f0      	beq.n	8002682 <HAL_RCC_OscConfig+0x17a>
=======
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	69db      	ldr	r3, [r3, #28]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d032      	beq.n	80033b4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800334e:	4b43      	ldr	r3, [pc, #268]	; (800345c <HAL_RCC_OscConfig+0x274>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a42      	ldr	r2, [pc, #264]	; (800345c <HAL_RCC_OscConfig+0x274>)
 8003354:	f043 0301 	orr.w	r3, r3, #1
 8003358:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800335a:	f7fe f909 	bl	8001570 <HAL_GetTick>
 800335e:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003360:	e008      	b.n	8003374 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003362:	f7fe f905 	bl	8001570 <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	2b02      	cmp	r3, #2
 800336e:	d901      	bls.n	8003374 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	e392      	b.n	8003a9a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003374:	4b39      	ldr	r3, [pc, #228]	; (800345c <HAL_RCC_OscConfig+0x274>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0302 	and.w	r3, r3, #2
 800337c:	2b00      	cmp	r3, #0
 800337e:	d0f0      	beq.n	8003362 <HAL_RCC_OscConfig+0x17a>
>>>>>>> Stashed changes
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
<<<<<<< Updated upstream
 80026a0:	4b36      	ldr	r3, [pc, #216]	; (800277c <HAL_RCC_OscConfig+0x274>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a35      	ldr	r2, [pc, #212]	; (800277c <HAL_RCC_OscConfig+0x274>)
 80026a6:	f043 0308 	orr.w	r3, r3, #8
 80026aa:	6013      	str	r3, [r2, #0]
 80026ac:	4b33      	ldr	r3, [pc, #204]	; (800277c <HAL_RCC_OscConfig+0x274>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b8:	4930      	ldr	r1, [pc, #192]	; (800277c <HAL_RCC_OscConfig+0x274>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026be:	4b2f      	ldr	r3, [pc, #188]	; (800277c <HAL_RCC_OscConfig+0x274>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a1b      	ldr	r3, [r3, #32]
 80026ca:	021b      	lsls	r3, r3, #8
 80026cc:	492b      	ldr	r1, [pc, #172]	; (800277c <HAL_RCC_OscConfig+0x274>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	604b      	str	r3, [r1, #4]
 80026d2:	e01a      	b.n	800270a <HAL_RCC_OscConfig+0x202>
=======
 8003380:	4b36      	ldr	r3, [pc, #216]	; (800345c <HAL_RCC_OscConfig+0x274>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a35      	ldr	r2, [pc, #212]	; (800345c <HAL_RCC_OscConfig+0x274>)
 8003386:	f043 0308 	orr.w	r3, r3, #8
 800338a:	6013      	str	r3, [r2, #0]
 800338c:	4b33      	ldr	r3, [pc, #204]	; (800345c <HAL_RCC_OscConfig+0x274>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003398:	4930      	ldr	r1, [pc, #192]	; (800345c <HAL_RCC_OscConfig+0x274>)
 800339a:	4313      	orrs	r3, r2
 800339c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800339e:	4b2f      	ldr	r3, [pc, #188]	; (800345c <HAL_RCC_OscConfig+0x274>)
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a1b      	ldr	r3, [r3, #32]
 80033aa:	021b      	lsls	r3, r3, #8
 80033ac:	492b      	ldr	r1, [pc, #172]	; (800345c <HAL_RCC_OscConfig+0x274>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	604b      	str	r3, [r1, #4]
 80033b2:	e01a      	b.n	80033ea <HAL_RCC_OscConfig+0x202>
>>>>>>> Stashed changes

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
<<<<<<< Updated upstream
 80026d4:	4b29      	ldr	r3, [pc, #164]	; (800277c <HAL_RCC_OscConfig+0x274>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a28      	ldr	r2, [pc, #160]	; (800277c <HAL_RCC_OscConfig+0x274>)
 80026da:	f023 0301 	bic.w	r3, r3, #1
 80026de:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026e0:	f7fe fd8c 	bl	80011fc <HAL_GetTick>
 80026e4:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026e6:	e008      	b.n	80026fa <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026e8:	f7fe fd88 	bl	80011fc <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e35f      	b.n	8002dba <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026fa:	4b20      	ldr	r3, [pc, #128]	; (800277c <HAL_RCC_OscConfig+0x274>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d1f0      	bne.n	80026e8 <HAL_RCC_OscConfig+0x1e0>
 8002706:	e000      	b.n	800270a <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002708:	bf00      	nop
=======
 80033b4:	4b29      	ldr	r3, [pc, #164]	; (800345c <HAL_RCC_OscConfig+0x274>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a28      	ldr	r2, [pc, #160]	; (800345c <HAL_RCC_OscConfig+0x274>)
 80033ba:	f023 0301 	bic.w	r3, r3, #1
 80033be:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80033c0:	f7fe f8d6 	bl	8001570 <HAL_GetTick>
 80033c4:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80033c6:	e008      	b.n	80033da <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80033c8:	f7fe f8d2 	bl	8001570 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d901      	bls.n	80033da <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e35f      	b.n	8003a9a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80033da:	4b20      	ldr	r3, [pc, #128]	; (800345c <HAL_RCC_OscConfig+0x274>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1f0      	bne.n	80033c8 <HAL_RCC_OscConfig+0x1e0>
 80033e6:	e000      	b.n	80033ea <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80033e8:	bf00      	nop
>>>>>>> Stashed changes
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
<<<<<<< Updated upstream
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0301 	and.w	r3, r3, #1
 8002712:	2b00      	cmp	r3, #0
 8002714:	d073      	beq.n	80027fe <HAL_RCC_OscConfig+0x2f6>
=======
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d073      	beq.n	80034de <HAL_RCC_OscConfig+0x2f6>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
<<<<<<< Updated upstream
 8002716:	6a3b      	ldr	r3, [r7, #32]
 8002718:	2b08      	cmp	r3, #8
 800271a:	d005      	beq.n	8002728 <HAL_RCC_OscConfig+0x220>
 800271c:	6a3b      	ldr	r3, [r7, #32]
 800271e:	2b0c      	cmp	r3, #12
 8002720:	d10e      	bne.n	8002740 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	2b03      	cmp	r3, #3
 8002726:	d10b      	bne.n	8002740 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002728:	4b14      	ldr	r3, [pc, #80]	; (800277c <HAL_RCC_OscConfig+0x274>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d063      	beq.n	80027fc <HAL_RCC_OscConfig+0x2f4>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d15f      	bne.n	80027fc <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e33c      	b.n	8002dba <HAL_RCC_OscConfig+0x8b2>
=======
 80033f6:	6a3b      	ldr	r3, [r7, #32]
 80033f8:	2b08      	cmp	r3, #8
 80033fa:	d005      	beq.n	8003408 <HAL_RCC_OscConfig+0x220>
 80033fc:	6a3b      	ldr	r3, [r7, #32]
 80033fe:	2b0c      	cmp	r3, #12
 8003400:	d10e      	bne.n	8003420 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	2b03      	cmp	r3, #3
 8003406:	d10b      	bne.n	8003420 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003408:	4b14      	ldr	r3, [pc, #80]	; (800345c <HAL_RCC_OscConfig+0x274>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d063      	beq.n	80034dc <HAL_RCC_OscConfig+0x2f4>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d15f      	bne.n	80034dc <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e33c      	b.n	8003a9a <HAL_RCC_OscConfig+0x8b2>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< Updated upstream
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002748:	d106      	bne.n	8002758 <HAL_RCC_OscConfig+0x250>
 800274a:	4b0c      	ldr	r3, [pc, #48]	; (800277c <HAL_RCC_OscConfig+0x274>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a0b      	ldr	r2, [pc, #44]	; (800277c <HAL_RCC_OscConfig+0x274>)
 8002750:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002754:	6013      	str	r3, [r2, #0]
 8002756:	e025      	b.n	80027a4 <HAL_RCC_OscConfig+0x29c>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002760:	d114      	bne.n	800278c <HAL_RCC_OscConfig+0x284>
 8002762:	4b06      	ldr	r3, [pc, #24]	; (800277c <HAL_RCC_OscConfig+0x274>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a05      	ldr	r2, [pc, #20]	; (800277c <HAL_RCC_OscConfig+0x274>)
 8002768:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800276c:	6013      	str	r3, [r2, #0]
 800276e:	4b03      	ldr	r3, [pc, #12]	; (800277c <HAL_RCC_OscConfig+0x274>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a02      	ldr	r2, [pc, #8]	; (800277c <HAL_RCC_OscConfig+0x274>)
 8002774:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002778:	6013      	str	r3, [r2, #0]
 800277a:	e013      	b.n	80027a4 <HAL_RCC_OscConfig+0x29c>
 800277c:	40021000 	.word	0x40021000
 8002780:	08008f48 	.word	0x08008f48
 8002784:	20000000 	.word	0x20000000
 8002788:	20000004 	.word	0x20000004
 800278c:	4b8f      	ldr	r3, [pc, #572]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a8e      	ldr	r2, [pc, #568]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 8002792:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002796:	6013      	str	r3, [r2, #0]
 8002798:	4b8c      	ldr	r3, [pc, #560]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a8b      	ldr	r2, [pc, #556]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 800279e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d013      	beq.n	80027d4 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ac:	f7fe fd26 	bl	80011fc <HAL_GetTick>
 80027b0:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027b2:	e008      	b.n	80027c6 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027b4:	f7fe fd22 	bl	80011fc <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	2b64      	cmp	r3, #100	; 0x64
 80027c0:	d901      	bls.n	80027c6 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e2f9      	b.n	8002dba <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027c6:	4b81      	ldr	r3, [pc, #516]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d0f0      	beq.n	80027b4 <HAL_RCC_OscConfig+0x2ac>
 80027d2:	e014      	b.n	80027fe <HAL_RCC_OscConfig+0x2f6>
=======
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003428:	d106      	bne.n	8003438 <HAL_RCC_OscConfig+0x250>
 800342a:	4b0c      	ldr	r3, [pc, #48]	; (800345c <HAL_RCC_OscConfig+0x274>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a0b      	ldr	r2, [pc, #44]	; (800345c <HAL_RCC_OscConfig+0x274>)
 8003430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003434:	6013      	str	r3, [r2, #0]
 8003436:	e025      	b.n	8003484 <HAL_RCC_OscConfig+0x29c>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003440:	d114      	bne.n	800346c <HAL_RCC_OscConfig+0x284>
 8003442:	4b06      	ldr	r3, [pc, #24]	; (800345c <HAL_RCC_OscConfig+0x274>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a05      	ldr	r2, [pc, #20]	; (800345c <HAL_RCC_OscConfig+0x274>)
 8003448:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800344c:	6013      	str	r3, [r2, #0]
 800344e:	4b03      	ldr	r3, [pc, #12]	; (800345c <HAL_RCC_OscConfig+0x274>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a02      	ldr	r2, [pc, #8]	; (800345c <HAL_RCC_OscConfig+0x274>)
 8003454:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003458:	6013      	str	r3, [r2, #0]
 800345a:	e013      	b.n	8003484 <HAL_RCC_OscConfig+0x29c>
 800345c:	40021000 	.word	0x40021000
 8003460:	0800a290 	.word	0x0800a290
 8003464:	20000000 	.word	0x20000000
 8003468:	20000004 	.word	0x20000004
 800346c:	4b8f      	ldr	r3, [pc, #572]	; (80036ac <HAL_RCC_OscConfig+0x4c4>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a8e      	ldr	r2, [pc, #568]	; (80036ac <HAL_RCC_OscConfig+0x4c4>)
 8003472:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003476:	6013      	str	r3, [r2, #0]
 8003478:	4b8c      	ldr	r3, [pc, #560]	; (80036ac <HAL_RCC_OscConfig+0x4c4>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a8b      	ldr	r2, [pc, #556]	; (80036ac <HAL_RCC_OscConfig+0x4c4>)
 800347e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003482:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d013      	beq.n	80034b4 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800348c:	f7fe f870 	bl	8001570 <HAL_GetTick>
 8003490:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003492:	e008      	b.n	80034a6 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003494:	f7fe f86c 	bl	8001570 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b64      	cmp	r3, #100	; 0x64
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e2f9      	b.n	8003a9a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034a6:	4b81      	ldr	r3, [pc, #516]	; (80036ac <HAL_RCC_OscConfig+0x4c4>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d0f0      	beq.n	8003494 <HAL_RCC_OscConfig+0x2ac>
 80034b2:	e014      	b.n	80034de <HAL_RCC_OscConfig+0x2f6>
>>>>>>> Stashed changes
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
<<<<<<< Updated upstream
 80027d4:	f7fe fd12 	bl	80011fc <HAL_GetTick>
 80027d8:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027da:	e008      	b.n	80027ee <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027dc:	f7fe fd0e 	bl	80011fc <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b64      	cmp	r3, #100	; 0x64
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e2e5      	b.n	8002dba <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027ee:	4b77      	ldr	r3, [pc, #476]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d1f0      	bne.n	80027dc <HAL_RCC_OscConfig+0x2d4>
 80027fa:	e000      	b.n	80027fe <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027fc:	bf00      	nop
=======
 80034b4:	f7fe f85c 	bl	8001570 <HAL_GetTick>
 80034b8:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80034ba:	e008      	b.n	80034ce <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034bc:	f7fe f858 	bl	8001570 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	2b64      	cmp	r3, #100	; 0x64
 80034c8:	d901      	bls.n	80034ce <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e2e5      	b.n	8003a9a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80034ce:	4b77      	ldr	r3, [pc, #476]	; (80036ac <HAL_RCC_OscConfig+0x4c4>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d1f0      	bne.n	80034bc <HAL_RCC_OscConfig+0x2d4>
 80034da:	e000      	b.n	80034de <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034dc:	bf00      	nop
>>>>>>> Stashed changes
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< Updated upstream
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d060      	beq.n	80028cc <HAL_RCC_OscConfig+0x3c4>
=======
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0302 	and.w	r3, r3, #2
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d060      	beq.n	80035ac <HAL_RCC_OscConfig+0x3c4>
>>>>>>> Stashed changes
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
<<<<<<< Updated upstream
 800280a:	6a3b      	ldr	r3, [r7, #32]
 800280c:	2b04      	cmp	r3, #4
 800280e:	d005      	beq.n	800281c <HAL_RCC_OscConfig+0x314>
 8002810:	6a3b      	ldr	r3, [r7, #32]
 8002812:	2b0c      	cmp	r3, #12
 8002814:	d119      	bne.n	800284a <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	2b02      	cmp	r3, #2
 800281a:	d116      	bne.n	800284a <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800281c:	4b6b      	ldr	r3, [pc, #428]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002824:	2b00      	cmp	r3, #0
 8002826:	d005      	beq.n	8002834 <HAL_RCC_OscConfig+0x32c>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d101      	bne.n	8002834 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e2c2      	b.n	8002dba <HAL_RCC_OscConfig+0x8b2>
=======
 80034ea:	6a3b      	ldr	r3, [r7, #32]
 80034ec:	2b04      	cmp	r3, #4
 80034ee:	d005      	beq.n	80034fc <HAL_RCC_OscConfig+0x314>
 80034f0:	6a3b      	ldr	r3, [r7, #32]
 80034f2:	2b0c      	cmp	r3, #12
 80034f4:	d119      	bne.n	800352a <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d116      	bne.n	800352a <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034fc:	4b6b      	ldr	r3, [pc, #428]	; (80036ac <HAL_RCC_OscConfig+0x4c4>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003504:	2b00      	cmp	r3, #0
 8003506:	d005      	beq.n	8003514 <HAL_RCC_OscConfig+0x32c>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d101      	bne.n	8003514 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e2c2      	b.n	8003a9a <HAL_RCC_OscConfig+0x8b2>
>>>>>>> Stashed changes
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< Updated upstream
 8002834:	4b65      	ldr	r3, [pc, #404]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	691b      	ldr	r3, [r3, #16]
 8002840:	061b      	lsls	r3, r3, #24
 8002842:	4962      	ldr	r1, [pc, #392]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 8002844:	4313      	orrs	r3, r2
 8002846:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002848:	e040      	b.n	80028cc <HAL_RCC_OscConfig+0x3c4>
=======
 8003514:	4b65      	ldr	r3, [pc, #404]	; (80036ac <HAL_RCC_OscConfig+0x4c4>)
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	691b      	ldr	r3, [r3, #16]
 8003520:	061b      	lsls	r3, r3, #24
 8003522:	4962      	ldr	r1, [pc, #392]	; (80036ac <HAL_RCC_OscConfig+0x4c4>)
 8003524:	4313      	orrs	r3, r2
 8003526:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003528:	e040      	b.n	80035ac <HAL_RCC_OscConfig+0x3c4>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
<<<<<<< Updated upstream
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d023      	beq.n	800289a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002852:	4b5e      	ldr	r3, [pc, #376]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a5d      	ldr	r2, [pc, #372]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 8002858:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800285c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800285e:	f7fe fccd 	bl	80011fc <HAL_GetTick>
 8002862:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002864:	e008      	b.n	8002878 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002866:	f7fe fcc9 	bl	80011fc <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	2b02      	cmp	r3, #2
 8002872:	d901      	bls.n	8002878 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	e2a0      	b.n	8002dba <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002878:	4b54      	ldr	r3, [pc, #336]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002880:	2b00      	cmp	r3, #0
 8002882:	d0f0      	beq.n	8002866 <HAL_RCC_OscConfig+0x35e>
=======
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d023      	beq.n	800357a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003532:	4b5e      	ldr	r3, [pc, #376]	; (80036ac <HAL_RCC_OscConfig+0x4c4>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a5d      	ldr	r2, [pc, #372]	; (80036ac <HAL_RCC_OscConfig+0x4c4>)
 8003538:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800353c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800353e:	f7fe f817 	bl	8001570 <HAL_GetTick>
 8003542:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003544:	e008      	b.n	8003558 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003546:	f7fe f813 	bl	8001570 <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	2b02      	cmp	r3, #2
 8003552:	d901      	bls.n	8003558 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	e2a0      	b.n	8003a9a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003558:	4b54      	ldr	r3, [pc, #336]	; (80036ac <HAL_RCC_OscConfig+0x4c4>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003560:	2b00      	cmp	r3, #0
 8003562:	d0f0      	beq.n	8003546 <HAL_RCC_OscConfig+0x35e>
>>>>>>> Stashed changes
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< Updated upstream
 8002884:	4b51      	ldr	r3, [pc, #324]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	691b      	ldr	r3, [r3, #16]
 8002890:	061b      	lsls	r3, r3, #24
 8002892:	494e      	ldr	r1, [pc, #312]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 8002894:	4313      	orrs	r3, r2
 8002896:	604b      	str	r3, [r1, #4]
 8002898:	e018      	b.n	80028cc <HAL_RCC_OscConfig+0x3c4>
=======
 8003564:	4b51      	ldr	r3, [pc, #324]	; (80036ac <HAL_RCC_OscConfig+0x4c4>)
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	691b      	ldr	r3, [r3, #16]
 8003570:	061b      	lsls	r3, r3, #24
 8003572:	494e      	ldr	r1, [pc, #312]	; (80036ac <HAL_RCC_OscConfig+0x4c4>)
 8003574:	4313      	orrs	r3, r2
 8003576:	604b      	str	r3, [r1, #4]
 8003578:	e018      	b.n	80035ac <HAL_RCC_OscConfig+0x3c4>
>>>>>>> Stashed changes
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< Updated upstream
 800289a:	4b4c      	ldr	r3, [pc, #304]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a4b      	ldr	r2, [pc, #300]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 80028a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a6:	f7fe fca9 	bl	80011fc <HAL_GetTick>
 80028aa:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028ac:	e008      	b.n	80028c0 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028ae:	f7fe fca5 	bl	80011fc <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d901      	bls.n	80028c0 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e27c      	b.n	8002dba <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028c0:	4b42      	ldr	r3, [pc, #264]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d1f0      	bne.n	80028ae <HAL_RCC_OscConfig+0x3a6>
=======
 800357a:	4b4c      	ldr	r3, [pc, #304]	; (80036ac <HAL_RCC_OscConfig+0x4c4>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a4b      	ldr	r2, [pc, #300]	; (80036ac <HAL_RCC_OscConfig+0x4c4>)
 8003580:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003584:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003586:	f7fd fff3 	bl	8001570 <HAL_GetTick>
 800358a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800358c:	e008      	b.n	80035a0 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800358e:	f7fd ffef 	bl	8001570 <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	2b02      	cmp	r3, #2
 800359a:	d901      	bls.n	80035a0 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e27c      	b.n	8003a9a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80035a0:	4b42      	ldr	r3, [pc, #264]	; (80036ac <HAL_RCC_OscConfig+0x4c4>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d1f0      	bne.n	800358e <HAL_RCC_OscConfig+0x3a6>
>>>>>>> Stashed changes
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
<<<<<<< Updated upstream
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0308 	and.w	r3, r3, #8
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f000 8082 	beq.w	80029de <HAL_RCC_OscConfig+0x4d6>
=======
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0308 	and.w	r3, r3, #8
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	f000 8082 	beq.w	80036be <HAL_RCC_OscConfig+0x4d6>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
<<<<<<< Updated upstream
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	695b      	ldr	r3, [r3, #20]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d05f      	beq.n	80029a2 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80028e2:	4b3a      	ldr	r3, [pc, #232]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 80028e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028e8:	613b      	str	r3, [r7, #16]
=======
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d05f      	beq.n	8003682 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80035c2:	4b3a      	ldr	r3, [pc, #232]	; (80036ac <HAL_RCC_OscConfig+0x4c4>)
 80035c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035c8:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
<<<<<<< Updated upstream
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	699a      	ldr	r2, [r3, #24]
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	f003 0310 	and.w	r3, r3, #16
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d037      	beq.n	8002968 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d006      	beq.n	8002910 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002908:	2b00      	cmp	r3, #0
 800290a:	d101      	bne.n	8002910 <HAL_RCC_OscConfig+0x408>
=======
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	699a      	ldr	r2, [r3, #24]
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	f003 0310 	and.w	r3, r3, #16
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d037      	beq.n	8003648 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d006      	beq.n	80035f0 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d101      	bne.n	80035f0 <HAL_RCC_OscConfig+0x408>
>>>>>>> Stashed changes
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
<<<<<<< Updated upstream
 800290c:	2301      	movs	r3, #1
 800290e:	e254      	b.n	8002dba <HAL_RCC_OscConfig+0x8b2>
=======
 80035ec:	2301      	movs	r3, #1
 80035ee:	e254      	b.n	8003a9a <HAL_RCC_OscConfig+0x8b2>
>>>>>>> Stashed changes
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
<<<<<<< Updated upstream
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	2b00      	cmp	r3, #0
 8002918:	d01b      	beq.n	8002952 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 800291a:	4b2c      	ldr	r3, [pc, #176]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 800291c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002920:	4a2a      	ldr	r2, [pc, #168]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 8002922:	f023 0301 	bic.w	r3, r3, #1
 8002926:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800292a:	f7fe fc67 	bl	80011fc <HAL_GetTick>
 800292e:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002930:	e008      	b.n	8002944 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002932:	f7fe fc63 	bl	80011fc <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	2b11      	cmp	r3, #17
 800293e:	d901      	bls.n	8002944 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e23a      	b.n	8002dba <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002944:	4b21      	ldr	r3, [pc, #132]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 8002946:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1ef      	bne.n	8002932 <HAL_RCC_OscConfig+0x42a>
=======
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d01b      	beq.n	8003632 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 80035fa:	4b2c      	ldr	r3, [pc, #176]	; (80036ac <HAL_RCC_OscConfig+0x4c4>)
 80035fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003600:	4a2a      	ldr	r2, [pc, #168]	; (80036ac <HAL_RCC_OscConfig+0x4c4>)
 8003602:	f023 0301 	bic.w	r3, r3, #1
 8003606:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800360a:	f7fd ffb1 	bl	8001570 <HAL_GetTick>
 800360e:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003610:	e008      	b.n	8003624 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003612:	f7fd ffad 	bl	8001570 <HAL_GetTick>
 8003616:	4602      	mov	r2, r0
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	2b11      	cmp	r3, #17
 800361e:	d901      	bls.n	8003624 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e23a      	b.n	8003a9a <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003624:	4b21      	ldr	r3, [pc, #132]	; (80036ac <HAL_RCC_OscConfig+0x4c4>)
 8003626:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800362a:	f003 0302 	and.w	r3, r3, #2
 800362e:	2b00      	cmp	r3, #0
 8003630:	d1ef      	bne.n	8003612 <HAL_RCC_OscConfig+0x42a>
>>>>>>> Stashed changes
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
<<<<<<< Updated upstream
 8002952:	4b1e      	ldr	r3, [pc, #120]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 8002954:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002958:	f023 0210 	bic.w	r2, r3, #16
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	699b      	ldr	r3, [r3, #24]
 8002960:	491a      	ldr	r1, [pc, #104]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 8002962:	4313      	orrs	r3, r2
 8002964:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
=======
 8003632:	4b1e      	ldr	r3, [pc, #120]	; (80036ac <HAL_RCC_OscConfig+0x4c4>)
 8003634:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003638:	f023 0210 	bic.w	r2, r3, #16
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	699b      	ldr	r3, [r3, #24]
 8003640:	491a      	ldr	r1, [pc, #104]	; (80036ac <HAL_RCC_OscConfig+0x4c4>)
 8003642:	4313      	orrs	r3, r2
 8003644:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
>>>>>>> Stashed changes
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
<<<<<<< Updated upstream
 8002968:	4b18      	ldr	r3, [pc, #96]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 800296a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800296e:	4a17      	ldr	r2, [pc, #92]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 8002970:	f043 0301 	orr.w	r3, r3, #1
 8002974:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002978:	f7fe fc40 	bl	80011fc <HAL_GetTick>
 800297c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800297e:	e008      	b.n	8002992 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002980:	f7fe fc3c 	bl	80011fc <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b11      	cmp	r3, #17
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e213      	b.n	8002dba <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002992:	4b0e      	ldr	r3, [pc, #56]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 8002994:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002998:	f003 0302 	and.w	r3, r3, #2
 800299c:	2b00      	cmp	r3, #0
 800299e:	d0ef      	beq.n	8002980 <HAL_RCC_OscConfig+0x478>
 80029a0:	e01d      	b.n	80029de <HAL_RCC_OscConfig+0x4d6>
=======
 8003648:	4b18      	ldr	r3, [pc, #96]	; (80036ac <HAL_RCC_OscConfig+0x4c4>)
 800364a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800364e:	4a17      	ldr	r2, [pc, #92]	; (80036ac <HAL_RCC_OscConfig+0x4c4>)
 8003650:	f043 0301 	orr.w	r3, r3, #1
 8003654:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003658:	f7fd ff8a 	bl	8001570 <HAL_GetTick>
 800365c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800365e:	e008      	b.n	8003672 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003660:	f7fd ff86 	bl	8001570 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	2b11      	cmp	r3, #17
 800366c:	d901      	bls.n	8003672 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e213      	b.n	8003a9a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003672:	4b0e      	ldr	r3, [pc, #56]	; (80036ac <HAL_RCC_OscConfig+0x4c4>)
 8003674:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003678:	f003 0302 	and.w	r3, r3, #2
 800367c:	2b00      	cmp	r3, #0
 800367e:	d0ef      	beq.n	8003660 <HAL_RCC_OscConfig+0x478>
 8003680:	e01d      	b.n	80036be <HAL_RCC_OscConfig+0x4d6>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
<<<<<<< Updated upstream
 80029a2:	4b0a      	ldr	r3, [pc, #40]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 80029a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029a8:	4a08      	ldr	r2, [pc, #32]	; (80029cc <HAL_RCC_OscConfig+0x4c4>)
 80029aa:	f023 0301 	bic.w	r3, r3, #1
 80029ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b2:	f7fe fc23 	bl	80011fc <HAL_GetTick>
 80029b6:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029b8:	e00a      	b.n	80029d0 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029ba:	f7fe fc1f 	bl	80011fc <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	2b11      	cmp	r3, #17
 80029c6:	d903      	bls.n	80029d0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e1f6      	b.n	8002dba <HAL_RCC_OscConfig+0x8b2>
 80029cc:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029d0:	4ba9      	ldr	r3, [pc, #676]	; (8002c78 <HAL_RCC_OscConfig+0x770>)
 80029d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1ed      	bne.n	80029ba <HAL_RCC_OscConfig+0x4b2>
=======
 8003682:	4b0a      	ldr	r3, [pc, #40]	; (80036ac <HAL_RCC_OscConfig+0x4c4>)
 8003684:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003688:	4a08      	ldr	r2, [pc, #32]	; (80036ac <HAL_RCC_OscConfig+0x4c4>)
 800368a:	f023 0301 	bic.w	r3, r3, #1
 800368e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003692:	f7fd ff6d 	bl	8001570 <HAL_GetTick>
 8003696:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003698:	e00a      	b.n	80036b0 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800369a:	f7fd ff69 	bl	8001570 <HAL_GetTick>
 800369e:	4602      	mov	r2, r0
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	2b11      	cmp	r3, #17
 80036a6:	d903      	bls.n	80036b0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e1f6      	b.n	8003a9a <HAL_RCC_OscConfig+0x8b2>
 80036ac:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036b0:	4ba9      	ldr	r3, [pc, #676]	; (8003958 <HAL_RCC_OscConfig+0x770>)
 80036b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036b6:	f003 0302 	and.w	r3, r3, #2
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d1ed      	bne.n	800369a <HAL_RCC_OscConfig+0x4b2>
>>>>>>> Stashed changes
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< Updated upstream
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0304 	and.w	r3, r3, #4
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	f000 80bd 	beq.w	8002b66 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029ec:	2300      	movs	r3, #0
 80029ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
=======
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0304 	and.w	r3, r3, #4
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	f000 80bd 	beq.w	8003846 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036cc:	2300      	movs	r3, #0
 80036ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
>>>>>>> Stashed changes
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
<<<<<<< Updated upstream
 80029f2:	4ba1      	ldr	r3, [pc, #644]	; (8002c78 <HAL_RCC_OscConfig+0x770>)
 80029f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d10e      	bne.n	8002a1c <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029fe:	4b9e      	ldr	r3, [pc, #632]	; (8002c78 <HAL_RCC_OscConfig+0x770>)
 8002a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a02:	4a9d      	ldr	r2, [pc, #628]	; (8002c78 <HAL_RCC_OscConfig+0x770>)
 8002a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a08:	6593      	str	r3, [r2, #88]	; 0x58
 8002a0a:	4b9b      	ldr	r3, [pc, #620]	; (8002c78 <HAL_RCC_OscConfig+0x770>)
 8002a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a12:	60fb      	str	r3, [r7, #12]
 8002a14:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002a16:	2301      	movs	r3, #1
 8002a18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a1c:	4b97      	ldr	r3, [pc, #604]	; (8002c7c <HAL_RCC_OscConfig+0x774>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d118      	bne.n	8002a5a <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a28:	4b94      	ldr	r3, [pc, #592]	; (8002c7c <HAL_RCC_OscConfig+0x774>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a93      	ldr	r2, [pc, #588]	; (8002c7c <HAL_RCC_OscConfig+0x774>)
 8002a2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a32:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a34:	f7fe fbe2 	bl	80011fc <HAL_GetTick>
 8002a38:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a3c:	f7fe fbde 	bl	80011fc <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e1b5      	b.n	8002dba <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a4e:	4b8b      	ldr	r3, [pc, #556]	; (8002c7c <HAL_RCC_OscConfig+0x774>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d0f0      	beq.n	8002a3c <HAL_RCC_OscConfig+0x534>
=======
 80036d2:	4ba1      	ldr	r3, [pc, #644]	; (8003958 <HAL_RCC_OscConfig+0x770>)
 80036d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d10e      	bne.n	80036fc <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036de:	4b9e      	ldr	r3, [pc, #632]	; (8003958 <HAL_RCC_OscConfig+0x770>)
 80036e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e2:	4a9d      	ldr	r2, [pc, #628]	; (8003958 <HAL_RCC_OscConfig+0x770>)
 80036e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036e8:	6593      	str	r3, [r2, #88]	; 0x58
 80036ea:	4b9b      	ldr	r3, [pc, #620]	; (8003958 <HAL_RCC_OscConfig+0x770>)
 80036ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036f2:	60fb      	str	r3, [r7, #12]
 80036f4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80036f6:	2301      	movs	r3, #1
 80036f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036fc:	4b97      	ldr	r3, [pc, #604]	; (800395c <HAL_RCC_OscConfig+0x774>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003704:	2b00      	cmp	r3, #0
 8003706:	d118      	bne.n	800373a <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003708:	4b94      	ldr	r3, [pc, #592]	; (800395c <HAL_RCC_OscConfig+0x774>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a93      	ldr	r2, [pc, #588]	; (800395c <HAL_RCC_OscConfig+0x774>)
 800370e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003712:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003714:	f7fd ff2c 	bl	8001570 <HAL_GetTick>
 8003718:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800371a:	e008      	b.n	800372e <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800371c:	f7fd ff28 	bl	8001570 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b02      	cmp	r3, #2
 8003728:	d901      	bls.n	800372e <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e1b5      	b.n	8003a9a <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800372e:	4b8b      	ldr	r3, [pc, #556]	; (800395c <HAL_RCC_OscConfig+0x774>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003736:	2b00      	cmp	r3, #0
 8003738:	d0f0      	beq.n	800371c <HAL_RCC_OscConfig+0x534>
>>>>>>> Stashed changes
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
<<<<<<< Updated upstream
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d02c      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8002a66:	4b84      	ldr	r3, [pc, #528]	; (8002c78 <HAL_RCC_OscConfig+0x770>)
 8002a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a6c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a78:	497f      	ldr	r1, [pc, #508]	; (8002c78 <HAL_RCC_OscConfig+0x770>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f003 0304 	and.w	r3, r3, #4
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d010      	beq.n	8002aae <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002a8c:	4b7a      	ldr	r3, [pc, #488]	; (8002c78 <HAL_RCC_OscConfig+0x770>)
 8002a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a92:	4a79      	ldr	r2, [pc, #484]	; (8002c78 <HAL_RCC_OscConfig+0x770>)
 8002a94:	f043 0304 	orr.w	r3, r3, #4
 8002a98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002a9c:	4b76      	ldr	r3, [pc, #472]	; (8002c78 <HAL_RCC_OscConfig+0x770>)
 8002a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aa2:	4a75      	ldr	r2, [pc, #468]	; (8002c78 <HAL_RCC_OscConfig+0x770>)
 8002aa4:	f043 0301 	orr.w	r3, r3, #1
 8002aa8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002aac:	e018      	b.n	8002ae0 <HAL_RCC_OscConfig+0x5d8>
=======
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	f003 0301 	and.w	r3, r3, #1
 8003742:	2b00      	cmp	r3, #0
 8003744:	d02c      	beq.n	80037a0 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8003746:	4b84      	ldr	r3, [pc, #528]	; (8003958 <HAL_RCC_OscConfig+0x770>)
 8003748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800374c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003758:	497f      	ldr	r1, [pc, #508]	; (8003958 <HAL_RCC_OscConfig+0x770>)
 800375a:	4313      	orrs	r3, r2
 800375c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f003 0304 	and.w	r3, r3, #4
 8003768:	2b00      	cmp	r3, #0
 800376a:	d010      	beq.n	800378e <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800376c:	4b7a      	ldr	r3, [pc, #488]	; (8003958 <HAL_RCC_OscConfig+0x770>)
 800376e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003772:	4a79      	ldr	r2, [pc, #484]	; (8003958 <HAL_RCC_OscConfig+0x770>)
 8003774:	f043 0304 	orr.w	r3, r3, #4
 8003778:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800377c:	4b76      	ldr	r3, [pc, #472]	; (8003958 <HAL_RCC_OscConfig+0x770>)
 800377e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003782:	4a75      	ldr	r2, [pc, #468]	; (8003958 <HAL_RCC_OscConfig+0x770>)
 8003784:	f043 0301 	orr.w	r3, r3, #1
 8003788:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800378c:	e018      	b.n	80037c0 <HAL_RCC_OscConfig+0x5d8>
>>>>>>> Stashed changes
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
<<<<<<< Updated upstream
 8002aae:	4b72      	ldr	r3, [pc, #456]	; (8002c78 <HAL_RCC_OscConfig+0x770>)
 8002ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab4:	4a70      	ldr	r2, [pc, #448]	; (8002c78 <HAL_RCC_OscConfig+0x770>)
 8002ab6:	f043 0301 	orr.w	r3, r3, #1
 8002aba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002abe:	e00f      	b.n	8002ae0 <HAL_RCC_OscConfig+0x5d8>
=======
 800378e:	4b72      	ldr	r3, [pc, #456]	; (8003958 <HAL_RCC_OscConfig+0x770>)
 8003790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003794:	4a70      	ldr	r2, [pc, #448]	; (8003958 <HAL_RCC_OscConfig+0x770>)
 8003796:	f043 0301 	orr.w	r3, r3, #1
 800379a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800379e:	e00f      	b.n	80037c0 <HAL_RCC_OscConfig+0x5d8>
>>>>>>> Stashed changes
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
<<<<<<< Updated upstream
 8002ac0:	4b6d      	ldr	r3, [pc, #436]	; (8002c78 <HAL_RCC_OscConfig+0x770>)
 8002ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ac6:	4a6c      	ldr	r2, [pc, #432]	; (8002c78 <HAL_RCC_OscConfig+0x770>)
 8002ac8:	f023 0301 	bic.w	r3, r3, #1
 8002acc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002ad0:	4b69      	ldr	r3, [pc, #420]	; (8002c78 <HAL_RCC_OscConfig+0x770>)
 8002ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad6:	4a68      	ldr	r2, [pc, #416]	; (8002c78 <HAL_RCC_OscConfig+0x770>)
 8002ad8:	f023 0304 	bic.w	r3, r3, #4
 8002adc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
=======
 80037a0:	4b6d      	ldr	r3, [pc, #436]	; (8003958 <HAL_RCC_OscConfig+0x770>)
 80037a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037a6:	4a6c      	ldr	r2, [pc, #432]	; (8003958 <HAL_RCC_OscConfig+0x770>)
 80037a8:	f023 0301 	bic.w	r3, r3, #1
 80037ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80037b0:	4b69      	ldr	r3, [pc, #420]	; (8003958 <HAL_RCC_OscConfig+0x770>)
 80037b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b6:	4a68      	ldr	r2, [pc, #416]	; (8003958 <HAL_RCC_OscConfig+0x770>)
 80037b8:	f023 0304 	bic.w	r3, r3, #4
 80037bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
>>>>>>> Stashed changes
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
<<<<<<< Updated upstream
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d016      	beq.n	8002b16 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ae8:	f7fe fb88 	bl	80011fc <HAL_GetTick>
 8002aec:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002aee:	e00a      	b.n	8002b06 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002af0:	f7fe fb84 	bl	80011fc <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e159      	b.n	8002dba <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b06:	4b5c      	ldr	r3, [pc, #368]	; (8002c78 <HAL_RCC_OscConfig+0x770>)
 8002b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d0ed      	beq.n	8002af0 <HAL_RCC_OscConfig+0x5e8>
 8002b14:	e01d      	b.n	8002b52 <HAL_RCC_OscConfig+0x64a>
=======
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d016      	beq.n	80037f6 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037c8:	f7fd fed2 	bl	8001570 <HAL_GetTick>
 80037cc:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037ce:	e00a      	b.n	80037e6 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037d0:	f7fd fece 	bl	8001570 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	f241 3288 	movw	r2, #5000	; 0x1388
 80037de:	4293      	cmp	r3, r2
 80037e0:	d901      	bls.n	80037e6 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e159      	b.n	8003a9a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037e6:	4b5c      	ldr	r3, [pc, #368]	; (8003958 <HAL_RCC_OscConfig+0x770>)
 80037e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ec:	f003 0302 	and.w	r3, r3, #2
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d0ed      	beq.n	80037d0 <HAL_RCC_OscConfig+0x5e8>
 80037f4:	e01d      	b.n	8003832 <HAL_RCC_OscConfig+0x64a>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
<<<<<<< Updated upstream
 8002b16:	f7fe fb71 	bl	80011fc <HAL_GetTick>
 8002b1a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b1c:	e00a      	b.n	8002b34 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b1e:	f7fe fb6d 	bl	80011fc <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d901      	bls.n	8002b34 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e142      	b.n	8002dba <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b34:	4b50      	ldr	r3, [pc, #320]	; (8002c78 <HAL_RCC_OscConfig+0x770>)
 8002b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d1ed      	bne.n	8002b1e <HAL_RCC_OscConfig+0x616>
=======
 80037f6:	f7fd febb 	bl	8001570 <HAL_GetTick>
 80037fa:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037fc:	e00a      	b.n	8003814 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037fe:	f7fd feb7 	bl	8001570 <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	f241 3288 	movw	r2, #5000	; 0x1388
 800380c:	4293      	cmp	r3, r2
 800380e:	d901      	bls.n	8003814 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	e142      	b.n	8003a9a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003814:	4b50      	ldr	r3, [pc, #320]	; (8003958 <HAL_RCC_OscConfig+0x770>)
 8003816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b00      	cmp	r3, #0
 8003820:	d1ed      	bne.n	80037fe <HAL_RCC_OscConfig+0x616>
>>>>>>> Stashed changes
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
<<<<<<< Updated upstream
 8002b42:	4b4d      	ldr	r3, [pc, #308]	; (8002c78 <HAL_RCC_OscConfig+0x770>)
 8002b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b48:	4a4b      	ldr	r2, [pc, #300]	; (8002c78 <HAL_RCC_OscConfig+0x770>)
 8002b4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
=======
 8003822:	4b4d      	ldr	r3, [pc, #308]	; (8003958 <HAL_RCC_OscConfig+0x770>)
 8003824:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003828:	4a4b      	ldr	r2, [pc, #300]	; (8003958 <HAL_RCC_OscConfig+0x770>)
 800382a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800382e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
>>>>>>> Stashed changes
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
<<<<<<< Updated upstream
 8002b52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d105      	bne.n	8002b66 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b5a:	4b47      	ldr	r3, [pc, #284]	; (8002c78 <HAL_RCC_OscConfig+0x770>)
 8002b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b5e:	4a46      	ldr	r2, [pc, #280]	; (8002c78 <HAL_RCC_OscConfig+0x770>)
 8002b60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b64:	6593      	str	r3, [r2, #88]	; 0x58
=======
 8003832:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003836:	2b01      	cmp	r3, #1
 8003838:	d105      	bne.n	8003846 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800383a:	4b47      	ldr	r3, [pc, #284]	; (8003958 <HAL_RCC_OscConfig+0x770>)
 800383c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800383e:	4a46      	ldr	r2, [pc, #280]	; (8003958 <HAL_RCC_OscConfig+0x770>)
 8003840:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003844:	6593      	str	r3, [r2, #88]	; 0x58
>>>>>>> Stashed changes
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
<<<<<<< Updated upstream
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0320 	and.w	r3, r3, #32
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d03c      	beq.n	8002bec <HAL_RCC_OscConfig+0x6e4>
=======
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0320 	and.w	r3, r3, #32
 800384e:	2b00      	cmp	r3, #0
 8003850:	d03c      	beq.n	80038cc <HAL_RCC_OscConfig+0x6e4>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
<<<<<<< Updated upstream
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d01c      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002b7a:	4b3f      	ldr	r3, [pc, #252]	; (8002c78 <HAL_RCC_OscConfig+0x770>)
 8002b7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b80:	4a3d      	ldr	r2, [pc, #244]	; (8002c78 <HAL_RCC_OscConfig+0x770>)
 8002b82:	f043 0301 	orr.w	r3, r3, #1
 8002b86:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b8a:	f7fe fb37 	bl	80011fc <HAL_GetTick>
 8002b8e:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002b90:	e008      	b.n	8002ba4 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b92:	f7fe fb33 	bl	80011fc <HAL_GetTick>
 8002b96:	4602      	mov	r2, r0
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d901      	bls.n	8002ba4 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e10a      	b.n	8002dba <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002ba4:	4b34      	ldr	r3, [pc, #208]	; (8002c78 <HAL_RCC_OscConfig+0x770>)
 8002ba6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d0ef      	beq.n	8002b92 <HAL_RCC_OscConfig+0x68a>
 8002bb2:	e01b      	b.n	8002bec <HAL_RCC_OscConfig+0x6e4>
=======
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003856:	2b00      	cmp	r3, #0
 8003858:	d01c      	beq.n	8003894 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800385a:	4b3f      	ldr	r3, [pc, #252]	; (8003958 <HAL_RCC_OscConfig+0x770>)
 800385c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003860:	4a3d      	ldr	r2, [pc, #244]	; (8003958 <HAL_RCC_OscConfig+0x770>)
 8003862:	f043 0301 	orr.w	r3, r3, #1
 8003866:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800386a:	f7fd fe81 	bl	8001570 <HAL_GetTick>
 800386e:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003870:	e008      	b.n	8003884 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003872:	f7fd fe7d 	bl	8001570 <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	2b02      	cmp	r3, #2
 800387e:	d901      	bls.n	8003884 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e10a      	b.n	8003a9a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003884:	4b34      	ldr	r3, [pc, #208]	; (8003958 <HAL_RCC_OscConfig+0x770>)
 8003886:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800388a:	f003 0302 	and.w	r3, r3, #2
 800388e:	2b00      	cmp	r3, #0
 8003890:	d0ef      	beq.n	8003872 <HAL_RCC_OscConfig+0x68a>
 8003892:	e01b      	b.n	80038cc <HAL_RCC_OscConfig+0x6e4>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
<<<<<<< Updated upstream
 8002bb4:	4b30      	ldr	r3, [pc, #192]	; (8002c78 <HAL_RCC_OscConfig+0x770>)
 8002bb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002bba:	4a2f      	ldr	r2, [pc, #188]	; (8002c78 <HAL_RCC_OscConfig+0x770>)
 8002bbc:	f023 0301 	bic.w	r3, r3, #1
 8002bc0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc4:	f7fe fb1a 	bl	80011fc <HAL_GetTick>
 8002bc8:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002bca:	e008      	b.n	8002bde <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002bcc:	f7fe fb16 	bl	80011fc <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e0ed      	b.n	8002dba <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002bde:	4b26      	ldr	r3, [pc, #152]	; (8002c78 <HAL_RCC_OscConfig+0x770>)
 8002be0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002be4:	f003 0302 	and.w	r3, r3, #2
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d1ef      	bne.n	8002bcc <HAL_RCC_OscConfig+0x6c4>
=======
 8003894:	4b30      	ldr	r3, [pc, #192]	; (8003958 <HAL_RCC_OscConfig+0x770>)
 8003896:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800389a:	4a2f      	ldr	r2, [pc, #188]	; (8003958 <HAL_RCC_OscConfig+0x770>)
 800389c:	f023 0301 	bic.w	r3, r3, #1
 80038a0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038a4:	f7fd fe64 	bl	8001570 <HAL_GetTick>
 80038a8:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80038aa:	e008      	b.n	80038be <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80038ac:	f7fd fe60 	bl	8001570 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d901      	bls.n	80038be <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e0ed      	b.n	8003a9a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80038be:	4b26      	ldr	r3, [pc, #152]	; (8003958 <HAL_RCC_OscConfig+0x770>)
 80038c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038c4:	f003 0302 	and.w	r3, r3, #2
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d1ef      	bne.n	80038ac <HAL_RCC_OscConfig+0x6c4>
>>>>>>> Stashed changes
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
<<<<<<< Updated upstream
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	f000 80e1 	beq.w	8002db8 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	f040 80b5 	bne.w	8002d6a <HAL_RCC_OscConfig+0x862>
=======
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	f000 80e1 	beq.w	8003a98 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038da:	2b02      	cmp	r3, #2
 80038dc:	f040 80b5 	bne.w	8003a4a <HAL_RCC_OscConfig+0x862>
>>>>>>> Stashed changes
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
<<<<<<< Updated upstream
 8002c00:	4b1d      	ldr	r3, [pc, #116]	; (8002c78 <HAL_RCC_OscConfig+0x770>)
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	f003 0203 	and.w	r2, r3, #3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d124      	bne.n	8002c5e <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d11b      	bne.n	8002c5e <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c30:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d113      	bne.n	8002c5e <HAL_RCC_OscConfig+0x756>
=======
 80038e0:	4b1d      	ldr	r3, [pc, #116]	; (8003958 <HAL_RCC_OscConfig+0x770>)
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	f003 0203 	and.w	r2, r3, #3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d124      	bne.n	800393e <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038fe:	3b01      	subs	r3, #1
 8003900:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003902:	429a      	cmp	r2, r3
 8003904:	d11b      	bne.n	800393e <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003910:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003912:	429a      	cmp	r2, r3
 8003914:	d113      	bne.n	800393e <HAL_RCC_OscConfig+0x756>
>>>>>>> Stashed changes
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
<<<<<<< Updated upstream
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c40:	085b      	lsrs	r3, r3, #1
 8002c42:	3b01      	subs	r3, #1
 8002c44:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d109      	bne.n	8002c5e <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c54:	085b      	lsrs	r3, r3, #1
 8002c56:	3b01      	subs	r3, #1
 8002c58:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d05f      	beq.n	8002d1e <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c5e:	6a3b      	ldr	r3, [r7, #32]
 8002c60:	2b0c      	cmp	r3, #12
 8002c62:	d05a      	beq.n	8002d1a <HAL_RCC_OscConfig+0x812>
=======
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003920:	085b      	lsrs	r3, r3, #1
 8003922:	3b01      	subs	r3, #1
 8003924:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003926:	429a      	cmp	r2, r3
 8003928:	d109      	bne.n	800393e <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003934:	085b      	lsrs	r3, r3, #1
 8003936:	3b01      	subs	r3, #1
 8003938:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800393a:	429a      	cmp	r2, r3
 800393c:	d05f      	beq.n	80039fe <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800393e:	6a3b      	ldr	r3, [r7, #32]
 8003940:	2b0c      	cmp	r3, #12
 8003942:	d05a      	beq.n	80039fa <HAL_RCC_OscConfig+0x812>
>>>>>>> Stashed changes
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
<<<<<<< Updated upstream
 8002c64:	4b04      	ldr	r3, [pc, #16]	; (8002c78 <HAL_RCC_OscConfig+0x770>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a03      	ldr	r2, [pc, #12]	; (8002c78 <HAL_RCC_OscConfig+0x770>)
 8002c6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c6e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c70:	f7fe fac4 	bl	80011fc <HAL_GetTick>
 8002c74:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c76:	e00c      	b.n	8002c92 <HAL_RCC_OscConfig+0x78a>
 8002c78:	40021000 	.word	0x40021000
 8002c7c:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c80:	f7fe fabc 	bl	80011fc <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e093      	b.n	8002dba <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c92:	4b4c      	ldr	r3, [pc, #304]	; (8002dc4 <HAL_RCC_OscConfig+0x8bc>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1f0      	bne.n	8002c80 <HAL_RCC_OscConfig+0x778>
=======
 8003944:	4b04      	ldr	r3, [pc, #16]	; (8003958 <HAL_RCC_OscConfig+0x770>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a03      	ldr	r2, [pc, #12]	; (8003958 <HAL_RCC_OscConfig+0x770>)
 800394a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800394e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003950:	f7fd fe0e 	bl	8001570 <HAL_GetTick>
 8003954:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003956:	e00c      	b.n	8003972 <HAL_RCC_OscConfig+0x78a>
 8003958:	40021000 	.word	0x40021000
 800395c:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003960:	f7fd fe06 	bl	8001570 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	2b02      	cmp	r3, #2
 800396c:	d901      	bls.n	8003972 <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e093      	b.n	8003a9a <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003972:	4b4c      	ldr	r3, [pc, #304]	; (8003aa4 <HAL_RCC_OscConfig+0x8bc>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d1f0      	bne.n	8003960 <HAL_RCC_OscConfig+0x778>
>>>>>>> Stashed changes
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
<<<<<<< Updated upstream
 8002c9e:	4b49      	ldr	r3, [pc, #292]	; (8002dc4 <HAL_RCC_OscConfig+0x8bc>)
 8002ca0:	68da      	ldr	r2, [r3, #12]
 8002ca2:	4b49      	ldr	r3, [pc, #292]	; (8002dc8 <HAL_RCC_OscConfig+0x8c0>)
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002cae:	3a01      	subs	r2, #1
 8002cb0:	0112      	lsls	r2, r2, #4
 8002cb2:	4311      	orrs	r1, r2
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002cb8:	0212      	lsls	r2, r2, #8
 8002cba:	4311      	orrs	r1, r2
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002cc0:	0852      	lsrs	r2, r2, #1
 8002cc2:	3a01      	subs	r2, #1
 8002cc4:	0552      	lsls	r2, r2, #21
 8002cc6:	4311      	orrs	r1, r2
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002ccc:	0852      	lsrs	r2, r2, #1
 8002cce:	3a01      	subs	r2, #1
 8002cd0:	0652      	lsls	r2, r2, #25
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	493b      	ldr	r1, [pc, #236]	; (8002dc4 <HAL_RCC_OscConfig+0x8bc>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	60cb      	str	r3, [r1, #12]
=======
 800397e:	4b49      	ldr	r3, [pc, #292]	; (8003aa4 <HAL_RCC_OscConfig+0x8bc>)
 8003980:	68da      	ldr	r2, [r3, #12]
 8003982:	4b49      	ldr	r3, [pc, #292]	; (8003aa8 <HAL_RCC_OscConfig+0x8c0>)
 8003984:	4013      	ands	r3, r2
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800398e:	3a01      	subs	r2, #1
 8003990:	0112      	lsls	r2, r2, #4
 8003992:	4311      	orrs	r1, r2
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003998:	0212      	lsls	r2, r2, #8
 800399a:	4311      	orrs	r1, r2
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80039a0:	0852      	lsrs	r2, r2, #1
 80039a2:	3a01      	subs	r2, #1
 80039a4:	0552      	lsls	r2, r2, #21
 80039a6:	4311      	orrs	r1, r2
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80039ac:	0852      	lsrs	r2, r2, #1
 80039ae:	3a01      	subs	r2, #1
 80039b0:	0652      	lsls	r2, r2, #25
 80039b2:	430a      	orrs	r2, r1
 80039b4:	493b      	ldr	r1, [pc, #236]	; (8003aa4 <HAL_RCC_OscConfig+0x8bc>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	60cb      	str	r3, [r1, #12]
>>>>>>> Stashed changes
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
<<<<<<< Updated upstream
 8002cda:	4b3a      	ldr	r3, [pc, #232]	; (8002dc4 <HAL_RCC_OscConfig+0x8bc>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a39      	ldr	r2, [pc, #228]	; (8002dc4 <HAL_RCC_OscConfig+0x8bc>)
 8002ce0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ce4:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ce6:	4b37      	ldr	r3, [pc, #220]	; (8002dc4 <HAL_RCC_OscConfig+0x8bc>)
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	4a36      	ldr	r2, [pc, #216]	; (8002dc4 <HAL_RCC_OscConfig+0x8bc>)
 8002cec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cf0:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002cf2:	f7fe fa83 	bl	80011fc <HAL_GetTick>
 8002cf6:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cf8:	e008      	b.n	8002d0c <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cfa:	f7fe fa7f 	bl	80011fc <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d901      	bls.n	8002d0c <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e056      	b.n	8002dba <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d0c:	4b2d      	ldr	r3, [pc, #180]	; (8002dc4 <HAL_RCC_OscConfig+0x8bc>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d0f0      	beq.n	8002cfa <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d18:	e04e      	b.n	8002db8 <HAL_RCC_OscConfig+0x8b0>
=======
 80039ba:	4b3a      	ldr	r3, [pc, #232]	; (8003aa4 <HAL_RCC_OscConfig+0x8bc>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a39      	ldr	r2, [pc, #228]	; (8003aa4 <HAL_RCC_OscConfig+0x8bc>)
 80039c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039c4:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80039c6:	4b37      	ldr	r3, [pc, #220]	; (8003aa4 <HAL_RCC_OscConfig+0x8bc>)
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	4a36      	ldr	r2, [pc, #216]	; (8003aa4 <HAL_RCC_OscConfig+0x8bc>)
 80039cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039d0:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80039d2:	f7fd fdcd 	bl	8001570 <HAL_GetTick>
 80039d6:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039d8:	e008      	b.n	80039ec <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039da:	f7fd fdc9 	bl	8001570 <HAL_GetTick>
 80039de:	4602      	mov	r2, r0
 80039e0:	69bb      	ldr	r3, [r7, #24]
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d901      	bls.n	80039ec <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	e056      	b.n	8003a9a <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039ec:	4b2d      	ldr	r3, [pc, #180]	; (8003aa4 <HAL_RCC_OscConfig+0x8bc>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d0f0      	beq.n	80039da <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80039f8:	e04e      	b.n	8003a98 <HAL_RCC_OscConfig+0x8b0>
>>>>>>> Stashed changes
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
<<<<<<< Updated upstream
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e04d      	b.n	8002dba <HAL_RCC_OscConfig+0x8b2>
=======
 80039fa:	2301      	movs	r3, #1
 80039fc:	e04d      	b.n	8003a9a <HAL_RCC_OscConfig+0x8b2>
>>>>>>> Stashed changes
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
<<<<<<< Updated upstream
 8002d1e:	4b29      	ldr	r3, [pc, #164]	; (8002dc4 <HAL_RCC_OscConfig+0x8bc>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d146      	bne.n	8002db8 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002d2a:	4b26      	ldr	r3, [pc, #152]	; (8002dc4 <HAL_RCC_OscConfig+0x8bc>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a25      	ldr	r2, [pc, #148]	; (8002dc4 <HAL_RCC_OscConfig+0x8bc>)
 8002d30:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d34:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d36:	4b23      	ldr	r3, [pc, #140]	; (8002dc4 <HAL_RCC_OscConfig+0x8bc>)
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	4a22      	ldr	r2, [pc, #136]	; (8002dc4 <HAL_RCC_OscConfig+0x8bc>)
 8002d3c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d40:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d42:	f7fe fa5b 	bl	80011fc <HAL_GetTick>
 8002d46:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d48:	e008      	b.n	8002d5c <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d4a:	f7fe fa57 	bl	80011fc <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d901      	bls.n	8002d5c <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e02e      	b.n	8002dba <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d5c:	4b19      	ldr	r3, [pc, #100]	; (8002dc4 <HAL_RCC_OscConfig+0x8bc>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d0f0      	beq.n	8002d4a <HAL_RCC_OscConfig+0x842>
 8002d68:	e026      	b.n	8002db8 <HAL_RCC_OscConfig+0x8b0>
=======
 80039fe:	4b29      	ldr	r3, [pc, #164]	; (8003aa4 <HAL_RCC_OscConfig+0x8bc>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d146      	bne.n	8003a98 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003a0a:	4b26      	ldr	r3, [pc, #152]	; (8003aa4 <HAL_RCC_OscConfig+0x8bc>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a25      	ldr	r2, [pc, #148]	; (8003aa4 <HAL_RCC_OscConfig+0x8bc>)
 8003a10:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a14:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a16:	4b23      	ldr	r3, [pc, #140]	; (8003aa4 <HAL_RCC_OscConfig+0x8bc>)
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	4a22      	ldr	r2, [pc, #136]	; (8003aa4 <HAL_RCC_OscConfig+0x8bc>)
 8003a1c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a20:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003a22:	f7fd fda5 	bl	8001570 <HAL_GetTick>
 8003a26:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a28:	e008      	b.n	8003a3c <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a2a:	f7fd fda1 	bl	8001570 <HAL_GetTick>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d901      	bls.n	8003a3c <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	e02e      	b.n	8003a9a <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a3c:	4b19      	ldr	r3, [pc, #100]	; (8003aa4 <HAL_RCC_OscConfig+0x8bc>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d0f0      	beq.n	8003a2a <HAL_RCC_OscConfig+0x842>
 8003a48:	e026      	b.n	8003a98 <HAL_RCC_OscConfig+0x8b0>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
<<<<<<< Updated upstream
 8002d6a:	6a3b      	ldr	r3, [r7, #32]
 8002d6c:	2b0c      	cmp	r3, #12
 8002d6e:	d021      	beq.n	8002db4 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d70:	4b14      	ldr	r3, [pc, #80]	; (8002dc4 <HAL_RCC_OscConfig+0x8bc>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a13      	ldr	r2, [pc, #76]	; (8002dc4 <HAL_RCC_OscConfig+0x8bc>)
 8002d76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d7c:	f7fe fa3e 	bl	80011fc <HAL_GetTick>
 8002d80:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d82:	e008      	b.n	8002d96 <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d84:	f7fe fa3a 	bl	80011fc <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e011      	b.n	8002dba <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d96:	4b0b      	ldr	r3, [pc, #44]	; (8002dc4 <HAL_RCC_OscConfig+0x8bc>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d1f0      	bne.n	8002d84 <HAL_RCC_OscConfig+0x87c>
=======
 8003a4a:	6a3b      	ldr	r3, [r7, #32]
 8003a4c:	2b0c      	cmp	r3, #12
 8003a4e:	d021      	beq.n	8003a94 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a50:	4b14      	ldr	r3, [pc, #80]	; (8003aa4 <HAL_RCC_OscConfig+0x8bc>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a13      	ldr	r2, [pc, #76]	; (8003aa4 <HAL_RCC_OscConfig+0x8bc>)
 8003a56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a5c:	f7fd fd88 	bl	8001570 <HAL_GetTick>
 8003a60:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a62:	e008      	b.n	8003a76 <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a64:	f7fd fd84 	bl	8001570 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e011      	b.n	8003a9a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a76:	4b0b      	ldr	r3, [pc, #44]	; (8003aa4 <HAL_RCC_OscConfig+0x8bc>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d1f0      	bne.n	8003a64 <HAL_RCC_OscConfig+0x87c>
>>>>>>> Stashed changes
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
<<<<<<< Updated upstream
 8002da2:	4b08      	ldr	r3, [pc, #32]	; (8002dc4 <HAL_RCC_OscConfig+0x8bc>)
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	4a07      	ldr	r2, [pc, #28]	; (8002dc4 <HAL_RCC_OscConfig+0x8bc>)
 8002da8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002dac:	f023 0303 	bic.w	r3, r3, #3
 8002db0:	60d3      	str	r3, [r2, #12]
 8002db2:	e001      	b.n	8002db8 <HAL_RCC_OscConfig+0x8b0>
=======
 8003a82:	4b08      	ldr	r3, [pc, #32]	; (8003aa4 <HAL_RCC_OscConfig+0x8bc>)
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	4a07      	ldr	r2, [pc, #28]	; (8003aa4 <HAL_RCC_OscConfig+0x8bc>)
 8003a88:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003a8c:	f023 0303 	bic.w	r3, r3, #3
 8003a90:	60d3      	str	r3, [r2, #12]
 8003a92:	e001      	b.n	8003a98 <HAL_RCC_OscConfig+0x8b0>
>>>>>>> Stashed changes
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
<<<<<<< Updated upstream
 8002db4:	2301      	movs	r3, #1
 8002db6:	e000      	b.n	8002dba <HAL_RCC_OscConfig+0x8b2>
=======
 8003a94:	2301      	movs	r3, #1
 8003a96:	e000      	b.n	8003a9a <HAL_RCC_OscConfig+0x8b2>
>>>>>>> Stashed changes
      }
    }
  }
  return HAL_OK;
<<<<<<< Updated upstream
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3728      	adds	r7, #40	; 0x28
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	40021000 	.word	0x40021000
 8002dc8:	f99f808c 	.word	0xf99f808c

08002dcc <HAL_RCC_ClockConfig>:
=======
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3728      	adds	r7, #40	; 0x28
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	40021000 	.word	0x40021000
 8003aa8:	f99f808c 	.word	0xf99f808c

08003aac <HAL_RCC_ClockConfig>:
>>>>>>> Stashed changes
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< Updated upstream
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
=======
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
<<<<<<< Updated upstream
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d101      	bne.n	8002de0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e0e7      	b.n	8002fb0 <HAL_RCC_ClockConfig+0x1e4>
=======
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d101      	bne.n	8003ac0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e0e7      	b.n	8003c90 <HAL_RCC_ClockConfig+0x1e4>
>>>>>>> Stashed changes
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
<<<<<<< Updated upstream
 8002de0:	4b75      	ldr	r3, [pc, #468]	; (8002fb8 <HAL_RCC_ClockConfig+0x1ec>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0307 	and.w	r3, r3, #7
 8002de8:	683a      	ldr	r2, [r7, #0]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d910      	bls.n	8002e10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dee:	4b72      	ldr	r3, [pc, #456]	; (8002fb8 <HAL_RCC_ClockConfig+0x1ec>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f023 0207 	bic.w	r2, r3, #7
 8002df6:	4970      	ldr	r1, [pc, #448]	; (8002fb8 <HAL_RCC_ClockConfig+0x1ec>)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	600b      	str	r3, [r1, #0]
=======
 8003ac0:	4b75      	ldr	r3, [pc, #468]	; (8003c98 <HAL_RCC_ClockConfig+0x1ec>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0307 	and.w	r3, r3, #7
 8003ac8:	683a      	ldr	r2, [r7, #0]
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d910      	bls.n	8003af0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ace:	4b72      	ldr	r3, [pc, #456]	; (8003c98 <HAL_RCC_ClockConfig+0x1ec>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f023 0207 	bic.w	r2, r3, #7
 8003ad6:	4970      	ldr	r1, [pc, #448]	; (8003c98 <HAL_RCC_ClockConfig+0x1ec>)
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	600b      	str	r3, [r1, #0]
>>>>>>> Stashed changes

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< Updated upstream
 8002dfe:	4b6e      	ldr	r3, [pc, #440]	; (8002fb8 <HAL_RCC_ClockConfig+0x1ec>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0307 	and.w	r3, r3, #7
 8002e06:	683a      	ldr	r2, [r7, #0]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d001      	beq.n	8002e10 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e0cf      	b.n	8002fb0 <HAL_RCC_ClockConfig+0x1e4>
=======
 8003ade:	4b6e      	ldr	r3, [pc, #440]	; (8003c98 <HAL_RCC_ClockConfig+0x1ec>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0307 	and.w	r3, r3, #7
 8003ae6:	683a      	ldr	r2, [r7, #0]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d001      	beq.n	8003af0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e0cf      	b.n	8003c90 <HAL_RCC_ClockConfig+0x1e4>
>>>>>>> Stashed changes
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< Updated upstream
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d010      	beq.n	8002e3e <HAL_RCC_ClockConfig+0x72>
=======
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0302 	and.w	r3, r3, #2
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d010      	beq.n	8003b1e <HAL_RCC_ClockConfig+0x72>
>>>>>>> Stashed changes
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
<<<<<<< Updated upstream
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	689a      	ldr	r2, [r3, #8]
 8002e20:	4b66      	ldr	r3, [pc, #408]	; (8002fbc <HAL_RCC_ClockConfig+0x1f0>)
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d908      	bls.n	8002e3e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e2c:	4b63      	ldr	r3, [pc, #396]	; (8002fbc <HAL_RCC_ClockConfig+0x1f0>)
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	4960      	ldr	r1, [pc, #384]	; (8002fbc <HAL_RCC_ClockConfig+0x1f0>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	608b      	str	r3, [r1, #8]
=======
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	689a      	ldr	r2, [r3, #8]
 8003b00:	4b66      	ldr	r3, [pc, #408]	; (8003c9c <HAL_RCC_ClockConfig+0x1f0>)
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d908      	bls.n	8003b1e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b0c:	4b63      	ldr	r3, [pc, #396]	; (8003c9c <HAL_RCC_ClockConfig+0x1f0>)
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	4960      	ldr	r1, [pc, #384]	; (8003c9c <HAL_RCC_ClockConfig+0x1f0>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	608b      	str	r3, [r1, #8]
>>>>>>> Stashed changes
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
<<<<<<< Updated upstream
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0301 	and.w	r3, r3, #1
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d04c      	beq.n	8002ee4 <HAL_RCC_ClockConfig+0x118>
=======
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d04c      	beq.n	8003bc4 <HAL_RCC_ClockConfig+0x118>
>>>>>>> Stashed changes
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
<<<<<<< Updated upstream
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	2b03      	cmp	r3, #3
 8002e50:	d107      	bne.n	8002e62 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e52:	4b5a      	ldr	r3, [pc, #360]	; (8002fbc <HAL_RCC_ClockConfig+0x1f0>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d121      	bne.n	8002ea2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e0a6      	b.n	8002fb0 <HAL_RCC_ClockConfig+0x1e4>
=======
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	2b03      	cmp	r3, #3
 8003b30:	d107      	bne.n	8003b42 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b32:	4b5a      	ldr	r3, [pc, #360]	; (8003c9c <HAL_RCC_ClockConfig+0x1f0>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d121      	bne.n	8003b82 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e0a6      	b.n	8003c90 <HAL_RCC_ClockConfig+0x1e4>
>>>>>>> Stashed changes
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
<<<<<<< Updated upstream
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d107      	bne.n	8002e7a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e6a:	4b54      	ldr	r3, [pc, #336]	; (8002fbc <HAL_RCC_ClockConfig+0x1f0>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d115      	bne.n	8002ea2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e09a      	b.n	8002fb0 <HAL_RCC_ClockConfig+0x1e4>
=======
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d107      	bne.n	8003b5a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b4a:	4b54      	ldr	r3, [pc, #336]	; (8003c9c <HAL_RCC_ClockConfig+0x1f0>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d115      	bne.n	8003b82 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e09a      	b.n	8003c90 <HAL_RCC_ClockConfig+0x1e4>
>>>>>>> Stashed changes
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
<<<<<<< Updated upstream
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d107      	bne.n	8002e92 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e82:	4b4e      	ldr	r3, [pc, #312]	; (8002fbc <HAL_RCC_ClockConfig+0x1f0>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d109      	bne.n	8002ea2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e08e      	b.n	8002fb0 <HAL_RCC_ClockConfig+0x1e4>
=======
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d107      	bne.n	8003b72 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b62:	4b4e      	ldr	r3, [pc, #312]	; (8003c9c <HAL_RCC_ClockConfig+0x1f0>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0302 	and.w	r3, r3, #2
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d109      	bne.n	8003b82 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e08e      	b.n	8003c90 <HAL_RCC_ClockConfig+0x1e4>
>>>>>>> Stashed changes
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
<<<<<<< Updated upstream
 8002e92:	4b4a      	ldr	r3, [pc, #296]	; (8002fbc <HAL_RCC_ClockConfig+0x1f0>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d101      	bne.n	8002ea2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e086      	b.n	8002fb0 <HAL_RCC_ClockConfig+0x1e4>
=======
 8003b72:	4b4a      	ldr	r3, [pc, #296]	; (8003c9c <HAL_RCC_ClockConfig+0x1f0>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d101      	bne.n	8003b82 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e086      	b.n	8003c90 <HAL_RCC_ClockConfig+0x1e4>
>>>>>>> Stashed changes
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
<<<<<<< Updated upstream
 8002ea2:	4b46      	ldr	r3, [pc, #280]	; (8002fbc <HAL_RCC_ClockConfig+0x1f0>)
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f023 0203 	bic.w	r2, r3, #3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	4943      	ldr	r1, [pc, #268]	; (8002fbc <HAL_RCC_ClockConfig+0x1f0>)
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002eb4:	f7fe f9a2 	bl	80011fc <HAL_GetTick>
 8002eb8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eba:	e00a      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ebc:	f7fe f99e 	bl	80011fc <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e06e      	b.n	8002fb0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ed2:	4b3a      	ldr	r3, [pc, #232]	; (8002fbc <HAL_RCC_ClockConfig+0x1f0>)
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f003 020c 	and.w	r2, r3, #12
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d1eb      	bne.n	8002ebc <HAL_RCC_ClockConfig+0xf0>
=======
 8003b82:	4b46      	ldr	r3, [pc, #280]	; (8003c9c <HAL_RCC_ClockConfig+0x1f0>)
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	f023 0203 	bic.w	r2, r3, #3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	4943      	ldr	r1, [pc, #268]	; (8003c9c <HAL_RCC_ClockConfig+0x1f0>)
 8003b90:	4313      	orrs	r3, r2
 8003b92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b94:	f7fd fcec 	bl	8001570 <HAL_GetTick>
 8003b98:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b9a:	e00a      	b.n	8003bb2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b9c:	f7fd fce8 	bl	8001570 <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d901      	bls.n	8003bb2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e06e      	b.n	8003c90 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bb2:	4b3a      	ldr	r3, [pc, #232]	; (8003c9c <HAL_RCC_ClockConfig+0x1f0>)
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	f003 020c 	and.w	r2, r3, #12
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d1eb      	bne.n	8003b9c <HAL_RCC_ClockConfig+0xf0>
>>>>>>> Stashed changes
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< Updated upstream
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0302 	and.w	r3, r3, #2
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d010      	beq.n	8002f12 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689a      	ldr	r2, [r3, #8]
 8002ef4:	4b31      	ldr	r3, [pc, #196]	; (8002fbc <HAL_RCC_ClockConfig+0x1f0>)
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d208      	bcs.n	8002f12 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f00:	4b2e      	ldr	r3, [pc, #184]	; (8002fbc <HAL_RCC_ClockConfig+0x1f0>)
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	492b      	ldr	r1, [pc, #172]	; (8002fbc <HAL_RCC_ClockConfig+0x1f0>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	608b      	str	r3, [r1, #8]
=======
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0302 	and.w	r3, r3, #2
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d010      	beq.n	8003bf2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	689a      	ldr	r2, [r3, #8]
 8003bd4:	4b31      	ldr	r3, [pc, #196]	; (8003c9c <HAL_RCC_ClockConfig+0x1f0>)
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d208      	bcs.n	8003bf2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003be0:	4b2e      	ldr	r3, [pc, #184]	; (8003c9c <HAL_RCC_ClockConfig+0x1f0>)
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	492b      	ldr	r1, [pc, #172]	; (8003c9c <HAL_RCC_ClockConfig+0x1f0>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	608b      	str	r3, [r1, #8]
>>>>>>> Stashed changes
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
<<<<<<< Updated upstream
 8002f12:	4b29      	ldr	r3, [pc, #164]	; (8002fb8 <HAL_RCC_ClockConfig+0x1ec>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0307 	and.w	r3, r3, #7
 8002f1a:	683a      	ldr	r2, [r7, #0]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d210      	bcs.n	8002f42 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f20:	4b25      	ldr	r3, [pc, #148]	; (8002fb8 <HAL_RCC_ClockConfig+0x1ec>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f023 0207 	bic.w	r2, r3, #7
 8002f28:	4923      	ldr	r1, [pc, #140]	; (8002fb8 <HAL_RCC_ClockConfig+0x1ec>)
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	600b      	str	r3, [r1, #0]
=======
 8003bf2:	4b29      	ldr	r3, [pc, #164]	; (8003c98 <HAL_RCC_ClockConfig+0x1ec>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0307 	and.w	r3, r3, #7
 8003bfa:	683a      	ldr	r2, [r7, #0]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d210      	bcs.n	8003c22 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c00:	4b25      	ldr	r3, [pc, #148]	; (8003c98 <HAL_RCC_ClockConfig+0x1ec>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f023 0207 	bic.w	r2, r3, #7
 8003c08:	4923      	ldr	r1, [pc, #140]	; (8003c98 <HAL_RCC_ClockConfig+0x1ec>)
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	600b      	str	r3, [r1, #0]
>>>>>>> Stashed changes

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< Updated upstream
 8002f30:	4b21      	ldr	r3, [pc, #132]	; (8002fb8 <HAL_RCC_ClockConfig+0x1ec>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0307 	and.w	r3, r3, #7
 8002f38:	683a      	ldr	r2, [r7, #0]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d001      	beq.n	8002f42 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e036      	b.n	8002fb0 <HAL_RCC_ClockConfig+0x1e4>
=======
 8003c10:	4b21      	ldr	r3, [pc, #132]	; (8003c98 <HAL_RCC_ClockConfig+0x1ec>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0307 	and.w	r3, r3, #7
 8003c18:	683a      	ldr	r2, [r7, #0]
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d001      	beq.n	8003c22 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e036      	b.n	8003c90 <HAL_RCC_ClockConfig+0x1e4>
>>>>>>> Stashed changes
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< Updated upstream
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0304 	and.w	r3, r3, #4
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d008      	beq.n	8002f60 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f4e:	4b1b      	ldr	r3, [pc, #108]	; (8002fbc <HAL_RCC_ClockConfig+0x1f0>)
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	4918      	ldr	r1, [pc, #96]	; (8002fbc <HAL_RCC_ClockConfig+0x1f0>)
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	608b      	str	r3, [r1, #8]
=======
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0304 	and.w	r3, r3, #4
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d008      	beq.n	8003c40 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c2e:	4b1b      	ldr	r3, [pc, #108]	; (8003c9c <HAL_RCC_ClockConfig+0x1f0>)
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	4918      	ldr	r1, [pc, #96]	; (8003c9c <HAL_RCC_ClockConfig+0x1f0>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	608b      	str	r3, [r1, #8]
>>>>>>> Stashed changes
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< Updated upstream
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0308 	and.w	r3, r3, #8
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d009      	beq.n	8002f80 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f6c:	4b13      	ldr	r3, [pc, #76]	; (8002fbc <HAL_RCC_ClockConfig+0x1f0>)
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	00db      	lsls	r3, r3, #3
 8002f7a:	4910      	ldr	r1, [pc, #64]	; (8002fbc <HAL_RCC_ClockConfig+0x1f0>)
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	608b      	str	r3, [r1, #8]
=======
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0308 	and.w	r3, r3, #8
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d009      	beq.n	8003c60 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c4c:	4b13      	ldr	r3, [pc, #76]	; (8003c9c <HAL_RCC_ClockConfig+0x1f0>)
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	691b      	ldr	r3, [r3, #16]
 8003c58:	00db      	lsls	r3, r3, #3
 8003c5a:	4910      	ldr	r1, [pc, #64]	; (8003c9c <HAL_RCC_ClockConfig+0x1f0>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	608b      	str	r3, [r1, #8]
>>>>>>> Stashed changes
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
<<<<<<< Updated upstream
 8002f80:	f000 f824 	bl	8002fcc <HAL_RCC_GetSysClockFreq>
 8002f84:	4602      	mov	r2, r0
 8002f86:	4b0d      	ldr	r3, [pc, #52]	; (8002fbc <HAL_RCC_ClockConfig+0x1f0>)
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	091b      	lsrs	r3, r3, #4
 8002f8c:	f003 030f 	and.w	r3, r3, #15
 8002f90:	490b      	ldr	r1, [pc, #44]	; (8002fc0 <HAL_RCC_ClockConfig+0x1f4>)
 8002f92:	5ccb      	ldrb	r3, [r1, r3]
 8002f94:	f003 031f 	and.w	r3, r3, #31
 8002f98:	fa22 f303 	lsr.w	r3, r2, r3
 8002f9c:	4a09      	ldr	r2, [pc, #36]	; (8002fc4 <HAL_RCC_ClockConfig+0x1f8>)
 8002f9e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002fa0:	4b09      	ldr	r3, [pc, #36]	; (8002fc8 <HAL_RCC_ClockConfig+0x1fc>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7fd ff6f 	bl	8000e88 <HAL_InitTick>
 8002faa:	4603      	mov	r3, r0
 8002fac:	72fb      	strb	r3, [r7, #11]

  return status;
 8002fae:	7afb      	ldrb	r3, [r7, #11]
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3710      	adds	r7, #16
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	40022000 	.word	0x40022000
 8002fbc:	40021000 	.word	0x40021000
 8002fc0:	08008f48 	.word	0x08008f48
 8002fc4:	20000000 	.word	0x20000000
 8002fc8:	20000004 	.word	0x20000004

08002fcc <HAL_RCC_GetSysClockFreq>:
=======
 8003c60:	f000 f824 	bl	8003cac <HAL_RCC_GetSysClockFreq>
 8003c64:	4602      	mov	r2, r0
 8003c66:	4b0d      	ldr	r3, [pc, #52]	; (8003c9c <HAL_RCC_ClockConfig+0x1f0>)
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	091b      	lsrs	r3, r3, #4
 8003c6c:	f003 030f 	and.w	r3, r3, #15
 8003c70:	490b      	ldr	r1, [pc, #44]	; (8003ca0 <HAL_RCC_ClockConfig+0x1f4>)
 8003c72:	5ccb      	ldrb	r3, [r1, r3]
 8003c74:	f003 031f 	and.w	r3, r3, #31
 8003c78:	fa22 f303 	lsr.w	r3, r2, r3
 8003c7c:	4a09      	ldr	r2, [pc, #36]	; (8003ca4 <HAL_RCC_ClockConfig+0x1f8>)
 8003c7e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003c80:	4b09      	ldr	r3, [pc, #36]	; (8003ca8 <HAL_RCC_ClockConfig+0x1fc>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4618      	mov	r0, r3
 8003c86:	f7fd faaf 	bl	80011e8 <HAL_InitTick>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	72fb      	strb	r3, [r7, #11]

  return status;
 8003c8e:	7afb      	ldrb	r3, [r7, #11]
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3710      	adds	r7, #16
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	40022000 	.word	0x40022000
 8003c9c:	40021000 	.word	0x40021000
 8003ca0:	0800a290 	.word	0x0800a290
 8003ca4:	20000000 	.word	0x20000000
 8003ca8:	20000004 	.word	0x20000004

08003cac <HAL_RCC_GetSysClockFreq>:
>>>>>>> Stashed changes
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< Updated upstream
 8002fcc:	b480      	push	{r7}
 8002fce:	b089      	sub	sp, #36	; 0x24
 8002fd0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	61fb      	str	r3, [r7, #28]
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	61bb      	str	r3, [r7, #24]
=======
 8003cac:	b480      	push	{r7}
 8003cae:	b089      	sub	sp, #36	; 0x24
 8003cb0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	61fb      	str	r3, [r7, #28]
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	61bb      	str	r3, [r7, #24]
>>>>>>> Stashed changes
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
<<<<<<< Updated upstream
 8002fda:	4b3e      	ldr	r3, [pc, #248]	; (80030d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f003 030c 	and.w	r3, r3, #12
 8002fe2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fe4:	4b3b      	ldr	r3, [pc, #236]	; (80030d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	f003 0303 	and.w	r3, r3, #3
 8002fec:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d005      	beq.n	8003000 <HAL_RCC_GetSysClockFreq+0x34>
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	2b0c      	cmp	r3, #12
 8002ff8:	d121      	bne.n	800303e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d11e      	bne.n	800303e <HAL_RCC_GetSysClockFreq+0x72>
=======
 8003cba:	4b3e      	ldr	r3, [pc, #248]	; (8003db4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	f003 030c 	and.w	r3, r3, #12
 8003cc2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cc4:	4b3b      	ldr	r3, [pc, #236]	; (8003db4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	f003 0303 	and.w	r3, r3, #3
 8003ccc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d005      	beq.n	8003ce0 <HAL_RCC_GetSysClockFreq+0x34>
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	2b0c      	cmp	r3, #12
 8003cd8:	d121      	bne.n	8003d1e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d11e      	bne.n	8003d1e <HAL_RCC_GetSysClockFreq+0x72>
>>>>>>> Stashed changes
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
<<<<<<< Updated upstream
 8003000:	4b34      	ldr	r3, [pc, #208]	; (80030d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0308 	and.w	r3, r3, #8
 8003008:	2b00      	cmp	r3, #0
 800300a:	d107      	bne.n	800301c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800300c:	4b31      	ldr	r3, [pc, #196]	; (80030d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800300e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003012:	0a1b      	lsrs	r3, r3, #8
 8003014:	f003 030f 	and.w	r3, r3, #15
 8003018:	61fb      	str	r3, [r7, #28]
 800301a:	e005      	b.n	8003028 <HAL_RCC_GetSysClockFreq+0x5c>
=======
 8003ce0:	4b34      	ldr	r3, [pc, #208]	; (8003db4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0308 	and.w	r3, r3, #8
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d107      	bne.n	8003cfc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003cec:	4b31      	ldr	r3, [pc, #196]	; (8003db4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cf2:	0a1b      	lsrs	r3, r3, #8
 8003cf4:	f003 030f 	and.w	r3, r3, #15
 8003cf8:	61fb      	str	r3, [r7, #28]
 8003cfa:	e005      	b.n	8003d08 <HAL_RCC_GetSysClockFreq+0x5c>
>>>>>>> Stashed changes
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
<<<<<<< Updated upstream
 800301c:	4b2d      	ldr	r3, [pc, #180]	; (80030d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	091b      	lsrs	r3, r3, #4
 8003022:	f003 030f 	and.w	r3, r3, #15
 8003026:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003028:	4a2b      	ldr	r2, [pc, #172]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003030:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d10d      	bne.n	8003054 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800303c:	e00a      	b.n	8003054 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	2b04      	cmp	r3, #4
 8003042:	d102      	bne.n	800304a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003044:	4b25      	ldr	r3, [pc, #148]	; (80030dc <HAL_RCC_GetSysClockFreq+0x110>)
 8003046:	61bb      	str	r3, [r7, #24]
 8003048:	e004      	b.n	8003054 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	2b08      	cmp	r3, #8
 800304e:	d101      	bne.n	8003054 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003050:	4b23      	ldr	r3, [pc, #140]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003052:	61bb      	str	r3, [r7, #24]
=======
 8003cfc:	4b2d      	ldr	r3, [pc, #180]	; (8003db4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	091b      	lsrs	r3, r3, #4
 8003d02:	f003 030f 	and.w	r3, r3, #15
 8003d06:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003d08:	4a2b      	ldr	r2, [pc, #172]	; (8003db8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d10:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d10d      	bne.n	8003d34 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d1c:	e00a      	b.n	8003d34 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	2b04      	cmp	r3, #4
 8003d22:	d102      	bne.n	8003d2a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d24:	4b25      	ldr	r3, [pc, #148]	; (8003dbc <HAL_RCC_GetSysClockFreq+0x110>)
 8003d26:	61bb      	str	r3, [r7, #24]
 8003d28:	e004      	b.n	8003d34 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	2b08      	cmp	r3, #8
 8003d2e:	d101      	bne.n	8003d34 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d30:	4b23      	ldr	r3, [pc, #140]	; (8003dc0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003d32:	61bb      	str	r3, [r7, #24]
>>>>>>> Stashed changes
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
<<<<<<< Updated upstream
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	2b0c      	cmp	r3, #12
 8003058:	d134      	bne.n	80030c4 <HAL_RCC_GetSysClockFreq+0xf8>
=======
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	2b0c      	cmp	r3, #12
 8003d38:	d134      	bne.n	8003da4 <HAL_RCC_GetSysClockFreq+0xf8>
>>>>>>> Stashed changes
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
<<<<<<< Updated upstream
 800305a:	4b1e      	ldr	r3, [pc, #120]	; (80030d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	f003 0303 	and.w	r3, r3, #3
 8003062:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	2b02      	cmp	r3, #2
 8003068:	d003      	beq.n	8003072 <HAL_RCC_GetSysClockFreq+0xa6>
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	2b03      	cmp	r3, #3
 800306e:	d003      	beq.n	8003078 <HAL_RCC_GetSysClockFreq+0xac>
 8003070:	e005      	b.n	800307e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003072:	4b1a      	ldr	r3, [pc, #104]	; (80030dc <HAL_RCC_GetSysClockFreq+0x110>)
 8003074:	617b      	str	r3, [r7, #20]
      break;
 8003076:	e005      	b.n	8003084 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003078:	4b19      	ldr	r3, [pc, #100]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x114>)
 800307a:	617b      	str	r3, [r7, #20]
      break;
 800307c:	e002      	b.n	8003084 <HAL_RCC_GetSysClockFreq+0xb8>
=======
 8003d3a:	4b1e      	ldr	r3, [pc, #120]	; (8003db4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	f003 0303 	and.w	r3, r3, #3
 8003d42:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d003      	beq.n	8003d52 <HAL_RCC_GetSysClockFreq+0xa6>
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	2b03      	cmp	r3, #3
 8003d4e:	d003      	beq.n	8003d58 <HAL_RCC_GetSysClockFreq+0xac>
 8003d50:	e005      	b.n	8003d5e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003d52:	4b1a      	ldr	r3, [pc, #104]	; (8003dbc <HAL_RCC_GetSysClockFreq+0x110>)
 8003d54:	617b      	str	r3, [r7, #20]
      break;
 8003d56:	e005      	b.n	8003d64 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003d58:	4b19      	ldr	r3, [pc, #100]	; (8003dc0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003d5a:	617b      	str	r3, [r7, #20]
      break;
 8003d5c:	e002      	b.n	8003d64 <HAL_RCC_GetSysClockFreq+0xb8>
>>>>>>> Stashed changes

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
<<<<<<< Updated upstream
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	617b      	str	r3, [r7, #20]
      break;
 8003082:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003084:	4b13      	ldr	r3, [pc, #76]	; (80030d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	091b      	lsrs	r3, r3, #4
 800308a:	f003 0307 	and.w	r3, r3, #7
 800308e:	3301      	adds	r3, #1
 8003090:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003092:	4b10      	ldr	r3, [pc, #64]	; (80030d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	0a1b      	lsrs	r3, r3, #8
 8003098:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800309c:	697a      	ldr	r2, [r7, #20]
 800309e:	fb03 f202 	mul.w	r2, r3, r2
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80030aa:	4b0a      	ldr	r3, [pc, #40]	; (80030d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	0e5b      	lsrs	r3, r3, #25
 80030b0:	f003 0303 	and.w	r3, r3, #3
 80030b4:	3301      	adds	r3, #1
 80030b6:	005b      	lsls	r3, r3, #1
 80030b8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80030ba:	697a      	ldr	r2, [r7, #20]
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	fbb2 f3f3 	udiv	r3, r2, r3
 80030c2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80030c4:	69bb      	ldr	r3, [r7, #24]
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3724      	adds	r7, #36	; 0x24
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	40021000 	.word	0x40021000
 80030d8:	08008f60 	.word	0x08008f60
 80030dc:	00f42400 	.word	0x00f42400
 80030e0:	007a1200 	.word	0x007a1200

080030e4 <HAL_RCC_GetHCLKFreq>:
=======
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	617b      	str	r3, [r7, #20]
      break;
 8003d62:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d64:	4b13      	ldr	r3, [pc, #76]	; (8003db4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	091b      	lsrs	r3, r3, #4
 8003d6a:	f003 0307 	and.w	r3, r3, #7
 8003d6e:	3301      	adds	r3, #1
 8003d70:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003d72:	4b10      	ldr	r3, [pc, #64]	; (8003db4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	0a1b      	lsrs	r3, r3, #8
 8003d78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d7c:	697a      	ldr	r2, [r7, #20]
 8003d7e:	fb03 f202 	mul.w	r2, r3, r2
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d88:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d8a:	4b0a      	ldr	r3, [pc, #40]	; (8003db4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	0e5b      	lsrs	r3, r3, #25
 8003d90:	f003 0303 	and.w	r3, r3, #3
 8003d94:	3301      	adds	r3, #1
 8003d96:	005b      	lsls	r3, r3, #1
 8003d98:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003d9a:	697a      	ldr	r2, [r7, #20]
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003da2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003da4:	69bb      	ldr	r3, [r7, #24]
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3724      	adds	r7, #36	; 0x24
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	40021000 	.word	0x40021000
 8003db8:	0800a2a8 	.word	0x0800a2a8
 8003dbc:	00f42400 	.word	0x00f42400
 8003dc0:	007a1200 	.word	0x007a1200

08003dc4 <HAL_RCC_GetHCLKFreq>:
>>>>>>> Stashed changes
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
<<<<<<< Updated upstream
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030e8:	4b03      	ldr	r3, [pc, #12]	; (80030f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80030ea:	681b      	ldr	r3, [r3, #0]
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop
 80030f8:	20000000 	.word	0x20000000

080030fc <HAL_RCC_GetPCLK1Freq>:
=======
 8003dc4:	b480      	push	{r7}
 8003dc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dc8:	4b03      	ldr	r3, [pc, #12]	; (8003dd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003dca:	681b      	ldr	r3, [r3, #0]
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop
 8003dd8:	20000000 	.word	0x20000000

08003ddc <HAL_RCC_GetPCLK1Freq>:
>>>>>>> Stashed changes
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
<<<<<<< Updated upstream
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003100:	f7ff fff0 	bl	80030e4 <HAL_RCC_GetHCLKFreq>
 8003104:	4602      	mov	r2, r0
 8003106:	4b06      	ldr	r3, [pc, #24]	; (8003120 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	0a1b      	lsrs	r3, r3, #8
 800310c:	f003 0307 	and.w	r3, r3, #7
 8003110:	4904      	ldr	r1, [pc, #16]	; (8003124 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003112:	5ccb      	ldrb	r3, [r1, r3]
 8003114:	f003 031f 	and.w	r3, r3, #31
 8003118:	fa22 f303 	lsr.w	r3, r2, r3
}
 800311c:	4618      	mov	r0, r3
 800311e:	bd80      	pop	{r7, pc}
 8003120:	40021000 	.word	0x40021000
 8003124:	08008f58 	.word	0x08008f58

08003128 <HAL_RCC_GetPCLK2Freq>:
=======
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003de0:	f7ff fff0 	bl	8003dc4 <HAL_RCC_GetHCLKFreq>
 8003de4:	4602      	mov	r2, r0
 8003de6:	4b06      	ldr	r3, [pc, #24]	; (8003e00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	0a1b      	lsrs	r3, r3, #8
 8003dec:	f003 0307 	and.w	r3, r3, #7
 8003df0:	4904      	ldr	r1, [pc, #16]	; (8003e04 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003df2:	5ccb      	ldrb	r3, [r1, r3]
 8003df4:	f003 031f 	and.w	r3, r3, #31
 8003df8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	40021000 	.word	0x40021000
 8003e04:	0800a2a0 	.word	0x0800a2a0

08003e08 <HAL_RCC_GetPCLK2Freq>:
>>>>>>> Stashed changes
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
<<<<<<< Updated upstream
 8003128:	b580      	push	{r7, lr}
 800312a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800312c:	f7ff ffda 	bl	80030e4 <HAL_RCC_GetHCLKFreq>
 8003130:	4602      	mov	r2, r0
 8003132:	4b06      	ldr	r3, [pc, #24]	; (800314c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	0adb      	lsrs	r3, r3, #11
 8003138:	f003 0307 	and.w	r3, r3, #7
 800313c:	4904      	ldr	r1, [pc, #16]	; (8003150 <HAL_RCC_GetPCLK2Freq+0x28>)
 800313e:	5ccb      	ldrb	r3, [r1, r3]
 8003140:	f003 031f 	and.w	r3, r3, #31
 8003144:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003148:	4618      	mov	r0, r3
 800314a:	bd80      	pop	{r7, pc}
 800314c:	40021000 	.word	0x40021000
 8003150:	08008f58 	.word	0x08008f58

08003154 <HAL_RCC_GetClockConfig>:
=======
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003e0c:	f7ff ffda 	bl	8003dc4 <HAL_RCC_GetHCLKFreq>
 8003e10:	4602      	mov	r2, r0
 8003e12:	4b06      	ldr	r3, [pc, #24]	; (8003e2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	0adb      	lsrs	r3, r3, #11
 8003e18:	f003 0307 	and.w	r3, r3, #7
 8003e1c:	4904      	ldr	r1, [pc, #16]	; (8003e30 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003e1e:	5ccb      	ldrb	r3, [r1, r3]
 8003e20:	f003 031f 	and.w	r3, r3, #31
 8003e24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	40021000 	.word	0x40021000
 8003e30:	0800a2a0 	.word	0x0800a2a0

08003e34 <HAL_RCC_GetClockConfig>:
>>>>>>> Stashed changes
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
<<<<<<< Updated upstream
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
=======
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
<<<<<<< Updated upstream
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	220f      	movs	r2, #15
 8003162:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003164:	4b12      	ldr	r3, [pc, #72]	; (80031b0 <HAL_RCC_GetClockConfig+0x5c>)
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f003 0203 	and.w	r2, r3, #3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003170:	4b0f      	ldr	r3, [pc, #60]	; (80031b0 <HAL_RCC_GetClockConfig+0x5c>)
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800317c:	4b0c      	ldr	r3, [pc, #48]	; (80031b0 <HAL_RCC_GetClockConfig+0x5c>)
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003188:	4b09      	ldr	r3, [pc, #36]	; (80031b0 <HAL_RCC_GetClockConfig+0x5c>)
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	08db      	lsrs	r3, r3, #3
 800318e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003196:	4b07      	ldr	r3, [pc, #28]	; (80031b4 <HAL_RCC_GetClockConfig+0x60>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0207 	and.w	r2, r3, #7
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	601a      	str	r2, [r3, #0]
}
 80031a2:	bf00      	nop
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	40021000 	.word	0x40021000
 80031b4:	40022000 	.word	0x40022000

080031b8 <RCC_SetFlashLatencyFromMSIRange>:
=======
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	220f      	movs	r2, #15
 8003e42:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003e44:	4b12      	ldr	r3, [pc, #72]	; (8003e90 <HAL_RCC_GetClockConfig+0x5c>)
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f003 0203 	and.w	r2, r3, #3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003e50:	4b0f      	ldr	r3, [pc, #60]	; (8003e90 <HAL_RCC_GetClockConfig+0x5c>)
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003e5c:	4b0c      	ldr	r3, [pc, #48]	; (8003e90 <HAL_RCC_GetClockConfig+0x5c>)
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003e68:	4b09      	ldr	r3, [pc, #36]	; (8003e90 <HAL_RCC_GetClockConfig+0x5c>)
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	08db      	lsrs	r3, r3, #3
 8003e6e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003e76:	4b07      	ldr	r3, [pc, #28]	; (8003e94 <HAL_RCC_GetClockConfig+0x60>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0207 	and.w	r2, r3, #7
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	601a      	str	r2, [r3, #0]
}
 8003e82:	bf00      	nop
 8003e84:	370c      	adds	r7, #12
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop
 8003e90:	40021000 	.word	0x40021000
 8003e94:	40022000 	.word	0x40022000

08003e98 <RCC_SetFlashLatencyFromMSIRange>:
>>>>>>> Stashed changes
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
<<<<<<< Updated upstream
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b086      	sub	sp, #24
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80031c0:	2300      	movs	r3, #0
 80031c2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80031c4:	4b2a      	ldr	r3, [pc, #168]	; (8003270 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d003      	beq.n	80031d8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80031d0:	f7ff f936 	bl	8002440 <HAL_PWREx_GetVoltageRange>
 80031d4:	6178      	str	r0, [r7, #20]
 80031d6:	e014      	b.n	8003202 <RCC_SetFlashLatencyFromMSIRange+0x4a>
=======
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b086      	sub	sp, #24
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003ea4:	4b2a      	ldr	r3, [pc, #168]	; (8003f50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d003      	beq.n	8003eb8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003eb0:	f7ff f936 	bl	8003120 <HAL_PWREx_GetVoltageRange>
 8003eb4:	6178      	str	r0, [r7, #20]
 8003eb6:	e014      	b.n	8003ee2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
>>>>>>> Stashed changes
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
<<<<<<< Updated upstream
 80031d8:	4b25      	ldr	r3, [pc, #148]	; (8003270 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031dc:	4a24      	ldr	r2, [pc, #144]	; (8003270 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031e2:	6593      	str	r3, [r2, #88]	; 0x58
 80031e4:	4b22      	ldr	r3, [pc, #136]	; (8003270 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ec:	60fb      	str	r3, [r7, #12]
 80031ee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80031f0:	f7ff f926 	bl	8002440 <HAL_PWREx_GetVoltageRange>
 80031f4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80031f6:	4b1e      	ldr	r3, [pc, #120]	; (8003270 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031fa:	4a1d      	ldr	r2, [pc, #116]	; (8003270 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003200:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003208:	d10b      	bne.n	8003222 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2b80      	cmp	r3, #128	; 0x80
 800320e:	d919      	bls.n	8003244 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2ba0      	cmp	r3, #160	; 0xa0
 8003214:	d902      	bls.n	800321c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003216:	2302      	movs	r3, #2
 8003218:	613b      	str	r3, [r7, #16]
 800321a:	e013      	b.n	8003244 <RCC_SetFlashLatencyFromMSIRange+0x8c>
=======
 8003eb8:	4b25      	ldr	r3, [pc, #148]	; (8003f50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ebc:	4a24      	ldr	r2, [pc, #144]	; (8003f50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ebe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ec2:	6593      	str	r3, [r2, #88]	; 0x58
 8003ec4:	4b22      	ldr	r3, [pc, #136]	; (8003f50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ecc:	60fb      	str	r3, [r7, #12]
 8003ece:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003ed0:	f7ff f926 	bl	8003120 <HAL_PWREx_GetVoltageRange>
 8003ed4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003ed6:	4b1e      	ldr	r3, [pc, #120]	; (8003f50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eda:	4a1d      	ldr	r2, [pc, #116]	; (8003f50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003edc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ee0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ee8:	d10b      	bne.n	8003f02 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2b80      	cmp	r3, #128	; 0x80
 8003eee:	d919      	bls.n	8003f24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2ba0      	cmp	r3, #160	; 0xa0
 8003ef4:	d902      	bls.n	8003efc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ef6:	2302      	movs	r3, #2
 8003ef8:	613b      	str	r3, [r7, #16]
 8003efa:	e013      	b.n	8003f24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
>>>>>>> Stashed changes
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
<<<<<<< Updated upstream
 800321c:	2301      	movs	r3, #1
 800321e:	613b      	str	r3, [r7, #16]
 8003220:	e010      	b.n	8003244 <RCC_SetFlashLatencyFromMSIRange+0x8c>
=======
 8003efc:	2301      	movs	r3, #1
 8003efe:	613b      	str	r3, [r7, #16]
 8003f00:	e010      	b.n	8003f24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
>>>>>>> Stashed changes
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
<<<<<<< Updated upstream
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2b80      	cmp	r3, #128	; 0x80
 8003226:	d902      	bls.n	800322e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003228:	2303      	movs	r3, #3
 800322a:	613b      	str	r3, [r7, #16]
 800322c:	e00a      	b.n	8003244 <RCC_SetFlashLatencyFromMSIRange+0x8c>
=======
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2b80      	cmp	r3, #128	; 0x80
 8003f06:	d902      	bls.n	8003f0e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003f08:	2303      	movs	r3, #3
 8003f0a:	613b      	str	r3, [r7, #16]
 8003f0c:	e00a      	b.n	8003f24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
>>>>>>> Stashed changes
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
<<<<<<< Updated upstream
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2b80      	cmp	r3, #128	; 0x80
 8003232:	d102      	bne.n	800323a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003234:	2302      	movs	r3, #2
 8003236:	613b      	str	r3, [r7, #16]
 8003238:	e004      	b.n	8003244 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2b70      	cmp	r3, #112	; 0x70
 800323e:	d101      	bne.n	8003244 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003240:	2301      	movs	r3, #1
 8003242:	613b      	str	r3, [r7, #16]
=======
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2b80      	cmp	r3, #128	; 0x80
 8003f12:	d102      	bne.n	8003f1a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f14:	2302      	movs	r3, #2
 8003f16:	613b      	str	r3, [r7, #16]
 8003f18:	e004      	b.n	8003f24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2b70      	cmp	r3, #112	; 0x70
 8003f1e:	d101      	bne.n	8003f24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003f20:	2301      	movs	r3, #1
 8003f22:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
<<<<<<< Updated upstream
 8003244:	4b0b      	ldr	r3, [pc, #44]	; (8003274 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f023 0207 	bic.w	r2, r3, #7
 800324c:	4909      	ldr	r1, [pc, #36]	; (8003274 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	4313      	orrs	r3, r2
 8003252:	600b      	str	r3, [r1, #0]
=======
 8003f24:	4b0b      	ldr	r3, [pc, #44]	; (8003f54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f023 0207 	bic.w	r2, r3, #7
 8003f2c:	4909      	ldr	r1, [pc, #36]	; (8003f54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	600b      	str	r3, [r1, #0]
>>>>>>> Stashed changes

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
<<<<<<< Updated upstream
 8003254:	4b07      	ldr	r3, [pc, #28]	; (8003274 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0307 	and.w	r3, r3, #7
 800325c:	693a      	ldr	r2, [r7, #16]
 800325e:	429a      	cmp	r2, r3
 8003260:	d001      	beq.n	8003266 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e000      	b.n	8003268 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003266:	2300      	movs	r3, #0
}
 8003268:	4618      	mov	r0, r3
 800326a:	3718      	adds	r7, #24
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	40021000 	.word	0x40021000
 8003274:	40022000 	.word	0x40022000

08003278 <HAL_RCCEx_PeriphCLKConfig>:
=======
 8003f34:	4b07      	ldr	r3, [pc, #28]	; (8003f54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0307 	and.w	r3, r3, #7
 8003f3c:	693a      	ldr	r2, [r7, #16]
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d001      	beq.n	8003f46 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e000      	b.n	8003f48 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003f46:	2300      	movs	r3, #0
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3718      	adds	r7, #24
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	40021000 	.word	0x40021000
 8003f54:	40022000 	.word	0x40022000

08003f58 <HAL_RCCEx_PeriphCLKConfig>:
>>>>>>> Stashed changes
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
<<<<<<< Updated upstream
 8003278:	b580      	push	{r7, lr}
 800327a:	b086      	sub	sp, #24
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003280:	2300      	movs	r3, #0
 8003282:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003284:	2300      	movs	r3, #0
 8003286:	74bb      	strb	r3, [r7, #18]
=======
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b086      	sub	sp, #24
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f60:	2300      	movs	r3, #0
 8003f62:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f64:	2300      	movs	r3, #0
 8003f66:	74bb      	strb	r3, [r7, #18]
>>>>>>> Stashed changes
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
<<<<<<< Updated upstream
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003290:	2b00      	cmp	r3, #0
 8003292:	f000 809e 	beq.w	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003296:	2300      	movs	r3, #0
 8003298:	747b      	strb	r3, [r7, #17]
=======
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	f000 809e 	beq.w	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f76:	2300      	movs	r3, #0
 8003f78:	747b      	strb	r3, [r7, #17]
>>>>>>> Stashed changes

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
<<<<<<< Updated upstream
 800329a:	4b46      	ldr	r3, [pc, #280]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800329c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800329e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d101      	bne.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x32>
 80032a6:	2301      	movs	r3, #1
 80032a8:	e000      	b.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x34>
 80032aa:	2300      	movs	r3, #0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d00d      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032b0:	4b40      	ldr	r3, [pc, #256]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80032b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032b4:	4a3f      	ldr	r2, [pc, #252]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80032b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032ba:	6593      	str	r3, [r2, #88]	; 0x58
 80032bc:	4b3d      	ldr	r3, [pc, #244]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80032be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032c4:	60bb      	str	r3, [r7, #8]
 80032c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032c8:	2301      	movs	r3, #1
 80032ca:	747b      	strb	r3, [r7, #17]
=======
 8003f7a:	4b46      	ldr	r3, [pc, #280]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d101      	bne.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003f86:	2301      	movs	r3, #1
 8003f88:	e000      	b.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x34>
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d00d      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f90:	4b40      	ldr	r3, [pc, #256]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f94:	4a3f      	ldr	r2, [pc, #252]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003f96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f9a:	6593      	str	r3, [r2, #88]	; 0x58
 8003f9c:	4b3d      	ldr	r3, [pc, #244]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fa4:	60bb      	str	r3, [r7, #8]
 8003fa6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	747b      	strb	r3, [r7, #17]
>>>>>>> Stashed changes
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
<<<<<<< Updated upstream
 80032cc:	4b3a      	ldr	r3, [pc, #232]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a39      	ldr	r2, [pc, #228]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80032d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80032d8:	f7fd ff90 	bl	80011fc <HAL_GetTick>
 80032dc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80032de:	e009      	b.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032e0:	f7fd ff8c 	bl	80011fc <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d902      	bls.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	74fb      	strb	r3, [r7, #19]
        break;
 80032f2:	e005      	b.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80032f4:	4b30      	ldr	r3, [pc, #192]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d0ef      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x68>
=======
 8003fac:	4b3a      	ldr	r3, [pc, #232]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a39      	ldr	r2, [pc, #228]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003fb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fb6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003fb8:	f7fd fada 	bl	8001570 <HAL_GetTick>
 8003fbc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003fbe:	e009      	b.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fc0:	f7fd fad6 	bl	8001570 <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d902      	bls.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	74fb      	strb	r3, [r7, #19]
        break;
 8003fd2:	e005      	b.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003fd4:	4b30      	ldr	r3, [pc, #192]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d0ef      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x68>
>>>>>>> Stashed changes
      }
    }

    if(ret == HAL_OK)
<<<<<<< Updated upstream
 8003300:	7cfb      	ldrb	r3, [r7, #19]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d15a      	bne.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003306:	4b2b      	ldr	r3, [pc, #172]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800330c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003310:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d01e      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331c:	697a      	ldr	r2, [r7, #20]
 800331e:	429a      	cmp	r2, r3
 8003320:	d019      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003322:	4b24      	ldr	r3, [pc, #144]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003324:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003328:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800332c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800332e:	4b21      	ldr	r3, [pc, #132]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003330:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003334:	4a1f      	ldr	r2, [pc, #124]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003336:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800333a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800333e:	4b1d      	ldr	r3, [pc, #116]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003344:	4a1b      	ldr	r2, [pc, #108]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003346:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800334a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800334e:	4a19      	ldr	r2, [pc, #100]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
=======
 8003fe0:	7cfb      	ldrb	r3, [r7, #19]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d15a      	bne.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003fe6:	4b2b      	ldr	r3, [pc, #172]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ff0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d01e      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ffc:	697a      	ldr	r2, [r7, #20]
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d019      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004002:	4b24      	ldr	r3, [pc, #144]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004004:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004008:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800400c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800400e:	4b21      	ldr	r3, [pc, #132]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004010:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004014:	4a1f      	ldr	r2, [pc, #124]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004016:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800401a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800401e:	4b1d      	ldr	r3, [pc, #116]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004020:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004024:	4a1b      	ldr	r2, [pc, #108]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004026:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800402a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800402e:	4a19      	ldr	r2, [pc, #100]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
>>>>>>> Stashed changes
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
<<<<<<< Updated upstream
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	f003 0301 	and.w	r3, r3, #1
 800335c:	2b00      	cmp	r3, #0
 800335e:	d016      	beq.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003360:	f7fd ff4c 	bl	80011fc <HAL_GetTick>
 8003364:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003366:	e00b      	b.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003368:	f7fd ff48 	bl	80011fc <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	f241 3288 	movw	r2, #5000	; 0x1388
 8003376:	4293      	cmp	r3, r2
 8003378:	d902      	bls.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	74fb      	strb	r3, [r7, #19]
            break;
 800337e:	e006      	b.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003380:	4b0c      	ldr	r3, [pc, #48]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003386:	f003 0302 	and.w	r3, r3, #2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d0ec      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0xf0>
=======
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	f003 0301 	and.w	r3, r3, #1
 800403c:	2b00      	cmp	r3, #0
 800403e:	d016      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004040:	f7fd fa96 	bl	8001570 <HAL_GetTick>
 8004044:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004046:	e00b      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004048:	f7fd fa92 	bl	8001570 <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	f241 3288 	movw	r2, #5000	; 0x1388
 8004056:	4293      	cmp	r3, r2
 8004058:	d902      	bls.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	74fb      	strb	r3, [r7, #19]
            break;
 800405e:	e006      	b.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004060:	4b0c      	ldr	r3, [pc, #48]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004066:	f003 0302 	and.w	r3, r3, #2
 800406a:	2b00      	cmp	r3, #0
 800406c:	d0ec      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0xf0>
>>>>>>> Stashed changes
          }
        }
      }

      if(ret == HAL_OK)
<<<<<<< Updated upstream
 800338e:	7cfb      	ldrb	r3, [r7, #19]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d10b      	bne.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003394:	4b07      	ldr	r3, [pc, #28]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800339a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a2:	4904      	ldr	r1, [pc, #16]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80033a4:	4313      	orrs	r3, r2
 80033a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80033aa:	e009      	b.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x148>
=======
 800406e:	7cfb      	ldrb	r3, [r7, #19]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d10b      	bne.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004074:	4b07      	ldr	r3, [pc, #28]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800407a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004082:	4904      	ldr	r1, [pc, #16]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004084:	4313      	orrs	r3, r2
 8004086:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800408a:	e009      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x148>
>>>>>>> Stashed changes
      }
      else
      {
        /* set overall return value */
        status = ret;
<<<<<<< Updated upstream
 80033ac:	7cfb      	ldrb	r3, [r7, #19]
 80033ae:	74bb      	strb	r3, [r7, #18]
 80033b0:	e006      	b.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x148>
 80033b2:	bf00      	nop
 80033b4:	40021000 	.word	0x40021000
 80033b8:	40007000 	.word	0x40007000
=======
 800408c:	7cfb      	ldrb	r3, [r7, #19]
 800408e:	74bb      	strb	r3, [r7, #18]
 8004090:	e006      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8004092:	bf00      	nop
 8004094:	40021000 	.word	0x40021000
 8004098:	40007000 	.word	0x40007000
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< Updated upstream
 80033bc:	7cfb      	ldrb	r3, [r7, #19]
 80033be:	74bb      	strb	r3, [r7, #18]
=======
 800409c:	7cfb      	ldrb	r3, [r7, #19]
 800409e:	74bb      	strb	r3, [r7, #18]
>>>>>>> Stashed changes
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
<<<<<<< Updated upstream
 80033c0:	7c7b      	ldrb	r3, [r7, #17]
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d105      	bne.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033c6:	4b6e      	ldr	r3, [pc, #440]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80033c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ca:	4a6d      	ldr	r2, [pc, #436]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80033cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033d0:	6593      	str	r3, [r2, #88]	; 0x58
=======
 80040a0:	7c7b      	ldrb	r3, [r7, #17]
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d105      	bne.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040a6:	4b6e      	ldr	r3, [pc, #440]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80040a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040aa:	4a6d      	ldr	r2, [pc, #436]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80040ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040b0:	6593      	str	r3, [r2, #88]	; 0x58
>>>>>>> Stashed changes
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
<<<<<<< Updated upstream
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0301 	and.w	r3, r3, #1
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d00a      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
=======
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0301 	and.w	r3, r3, #1
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d00a      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
<<<<<<< Updated upstream
 80033de:	4b68      	ldr	r3, [pc, #416]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80033e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e4:	f023 0203 	bic.w	r2, r3, #3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	4964      	ldr	r1, [pc, #400]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
=======
 80040be:	4b68      	ldr	r3, [pc, #416]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80040c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040c4:	f023 0203 	bic.w	r2, r3, #3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	4964      	ldr	r1, [pc, #400]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
>>>>>>> Stashed changes
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
<<<<<<< Updated upstream
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0302 	and.w	r3, r3, #2
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00a      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x19e>
=======
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0302 	and.w	r3, r3, #2
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d00a      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
<<<<<<< Updated upstream
 8003400:	4b5f      	ldr	r3, [pc, #380]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003406:	f023 020c 	bic.w	r2, r3, #12
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	495c      	ldr	r1, [pc, #368]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003410:	4313      	orrs	r3, r2
 8003412:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
=======
 80040e0:	4b5f      	ldr	r3, [pc, #380]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80040e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040e6:	f023 020c 	bic.w	r2, r3, #12
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	495c      	ldr	r1, [pc, #368]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80040f0:	4313      	orrs	r3, r2
 80040f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
>>>>>>> Stashed changes
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
<<<<<<< Updated upstream
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0304 	and.w	r3, r3, #4
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00a      	beq.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
=======
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0304 	and.w	r3, r3, #4
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d00a      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
<<<<<<< Updated upstream
 8003422:	4b57      	ldr	r3, [pc, #348]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003428:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	4953      	ldr	r1, [pc, #332]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003432:	4313      	orrs	r3, r2
 8003434:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
=======
 8004102:	4b57      	ldr	r3, [pc, #348]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004104:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004108:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	4953      	ldr	r1, [pc, #332]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004112:	4313      	orrs	r3, r2
 8004114:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
>>>>>>> Stashed changes
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
<<<<<<< Updated upstream
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0320 	and.w	r3, r3, #32
 8003440:	2b00      	cmp	r3, #0
 8003442:	d00a      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
=======
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0320 	and.w	r3, r3, #32
 8004120:	2b00      	cmp	r3, #0
 8004122:	d00a      	beq.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
<<<<<<< Updated upstream
 8003444:	4b4e      	ldr	r3, [pc, #312]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800344a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	494b      	ldr	r1, [pc, #300]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003454:	4313      	orrs	r3, r2
 8003456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
=======
 8004124:	4b4e      	ldr	r3, [pc, #312]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800412a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	494b      	ldr	r1, [pc, #300]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004134:	4313      	orrs	r3, r2
 8004136:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
>>>>>>> Stashed changes
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
<<<<<<< Updated upstream
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00a      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003466:	4b46      	ldr	r3, [pc, #280]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800346c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a1b      	ldr	r3, [r3, #32]
 8003474:	4942      	ldr	r1, [pc, #264]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003476:	4313      	orrs	r3, r2
 8003478:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
=======
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004142:	2b00      	cmp	r3, #0
 8004144:	d00a      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004146:	4b46      	ldr	r3, [pc, #280]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004148:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800414c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a1b      	ldr	r3, [r3, #32]
 8004154:	4942      	ldr	r1, [pc, #264]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004156:	4313      	orrs	r3, r2
 8004158:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
>>>>>>> Stashed changes
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
<<<<<<< Updated upstream
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003484:	2b00      	cmp	r3, #0
 8003486:	d00a      	beq.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003488:	4b3d      	ldr	r3, [pc, #244]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800348a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800348e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003496:	493a      	ldr	r1, [pc, #232]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003498:	4313      	orrs	r3, r2
 800349a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
=======
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004164:	2b00      	cmp	r3, #0
 8004166:	d00a      	beq.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004168:	4b3d      	ldr	r3, [pc, #244]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800416a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800416e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004176:	493a      	ldr	r1, [pc, #232]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004178:	4313      	orrs	r3, r2
 800417a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
>>>>>>> Stashed changes
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
<<<<<<< Updated upstream
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00a      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x248>
=======
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004186:	2b00      	cmp	r3, #0
 8004188:	d00a      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x248>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
<<<<<<< Updated upstream
 80034aa:	4b35      	ldr	r3, [pc, #212]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80034ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	695b      	ldr	r3, [r3, #20]
 80034b8:	4931      	ldr	r1, [pc, #196]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
=======
 800418a:	4b35      	ldr	r3, [pc, #212]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800418c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004190:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	695b      	ldr	r3, [r3, #20]
 8004198:	4931      	ldr	r1, [pc, #196]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800419a:	4313      	orrs	r3, r2
 800419c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
>>>>>>> Stashed changes
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
<<<<<<< Updated upstream
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d00a      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
=======
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d00a      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
<<<<<<< Updated upstream
 80034cc:	4b2c      	ldr	r3, [pc, #176]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80034ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	699b      	ldr	r3, [r3, #24]
 80034da:	4929      	ldr	r1, [pc, #164]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80034dc:	4313      	orrs	r3, r2
 80034de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
=======
 80041ac:	4b2c      	ldr	r3, [pc, #176]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80041ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041b2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	4929      	ldr	r1, [pc, #164]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
>>>>>>> Stashed changes
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
<<<<<<< Updated upstream
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d00a      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x28c>
=======
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d00a      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
<<<<<<< Updated upstream
 80034ee:	4b24      	ldr	r3, [pc, #144]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80034f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	69db      	ldr	r3, [r3, #28]
 80034fc:	4920      	ldr	r1, [pc, #128]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
=======
 80041ce:	4b24      	ldr	r3, [pc, #144]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80041d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	69db      	ldr	r3, [r3, #28]
 80041dc:	4920      	ldr	r1, [pc, #128]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
>>>>>>> Stashed changes
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
<<<<<<< Updated upstream
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d015      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003510:	4b1b      	ldr	r3, [pc, #108]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003516:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800351e:	4918      	ldr	r1, [pc, #96]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003520:	4313      	orrs	r3, r2
 8003522:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800352a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800352e:	d105      	bne.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003530:	4b13      	ldr	r3, [pc, #76]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	4a12      	ldr	r2, [pc, #72]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003536:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800353a:	60d3      	str	r3, [r2, #12]
=======
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d015      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041f0:	4b1b      	ldr	r3, [pc, #108]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80041f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041fe:	4918      	ldr	r1, [pc, #96]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004200:	4313      	orrs	r3, r2
 8004202:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800420a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800420e:	d105      	bne.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004210:	4b13      	ldr	r3, [pc, #76]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	4a12      	ldr	r2, [pc, #72]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004216:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800421a:	60d3      	str	r3, [r2, #12]
>>>>>>> Stashed changes
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
<<<<<<< Updated upstream
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d015      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003548:	4b0d      	ldr	r3, [pc, #52]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800354a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800354e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003556:	490a      	ldr	r1, [pc, #40]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003558:	4313      	orrs	r3, r2
 800355a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003562:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003566:	d105      	bne.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003568:	4b05      	ldr	r3, [pc, #20]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	4a04      	ldr	r2, [pc, #16]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800356e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003572:	60d3      	str	r3, [r2, #12]
=======
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d015      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004228:	4b0d      	ldr	r3, [pc, #52]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800422a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800422e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004236:	490a      	ldr	r1, [pc, #40]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004238:	4313      	orrs	r3, r2
 800423a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004242:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004246:	d105      	bne.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004248:	4b05      	ldr	r3, [pc, #20]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	4a04      	ldr	r2, [pc, #16]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800424e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004252:	60d3      	str	r3, [r2, #12]
>>>>>>> Stashed changes
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
<<<<<<< Updated upstream
 8003574:	7cbb      	ldrb	r3, [r7, #18]
}
 8003576:	4618      	mov	r0, r3
 8003578:	3718      	adds	r7, #24
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	40021000 	.word	0x40021000

08003584 <HAL_RCCEx_EnableMSIPLLMode>:
=======
 8004254:	7cbb      	ldrb	r3, [r7, #18]
}
 8004256:	4618      	mov	r0, r3
 8004258:	3718      	adds	r7, #24
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	40021000 	.word	0x40021000

08004264 <HAL_RCCEx_EnableMSIPLLMode>:
>>>>>>> Stashed changes
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
<<<<<<< Updated upstream
 8003584:	b480      	push	{r7}
 8003586:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003588:	4b05      	ldr	r3, [pc, #20]	; (80035a0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a04      	ldr	r2, [pc, #16]	; (80035a0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800358e:	f043 0304 	orr.w	r3, r3, #4
 8003592:	6013      	str	r3, [r2, #0]
}
 8003594:	bf00      	nop
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop
 80035a0:	40021000 	.word	0x40021000

080035a4 <HAL_TIM_Base_Init>:
=======
 8004264:	b480      	push	{r7}
 8004266:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004268:	4b05      	ldr	r3, [pc, #20]	; (8004280 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a04      	ldr	r2, [pc, #16]	; (8004280 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800426e:	f043 0304 	orr.w	r3, r3, #4
 8004272:	6013      	str	r3, [r2, #0]
}
 8004274:	bf00      	nop
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr
 800427e:	bf00      	nop
 8004280:	40021000 	.word	0x40021000

08004284 <HAL_TIM_Base_Init>:
>>>>>>> Stashed changes
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d101      	bne.n	80035b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e049      	b.n	800364a <HAL_TIM_Base_Init+0xa6>
=======
 8004284:	b580      	push	{r7, lr}
 8004286:	b082      	sub	sp, #8
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d101      	bne.n	8004296 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e049      	b.n	800432a <HAL_TIM_Base_Init+0xa6>
>>>>>>> Stashed changes
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< Updated upstream
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d106      	bne.n	80035d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d106      	bne.n	80042b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> Stashed changes
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
<<<<<<< Updated upstream
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 f841 	bl	8003652 <HAL_TIM_Base_MspInit>
=======
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 f841 	bl	8004332 <HAL_TIM_Base_MspInit>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< Updated upstream
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2202      	movs	r2, #2
 80035d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	3304      	adds	r3, #4
 80035e0:	4619      	mov	r1, r3
 80035e2:	4610      	mov	r0, r2
 80035e4:	f000 f9be 	bl	8003964 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2201      	movs	r2, #1
 8003634:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	3708      	adds	r7, #8
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}

08003652 <HAL_TIM_Base_MspInit>:
=======
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2202      	movs	r2, #2
 80042b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	3304      	adds	r3, #4
 80042c0:	4619      	mov	r1, r3
 80042c2:	4610      	mov	r0, r2
 80042c4:	f000 f9be 	bl	8004644 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3708      	adds	r7, #8
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}

08004332 <HAL_TIM_Base_MspInit>:
>>>>>>> Stashed changes
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8003652:	b480      	push	{r7}
 8003654:	b083      	sub	sp, #12
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
=======
 8004332:	b480      	push	{r7}
 8004334:	b083      	sub	sp, #12
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 800365a:	bf00      	nop
 800365c:	370c      	adds	r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
	...

08003668 <HAL_TIM_Base_Start_IT>:
=======
 800433a:	bf00      	nop
 800433c:	370c      	adds	r7, #12
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr
	...

08004348 <HAL_TIM_Base_Start_IT>:
>>>>>>> Stashed changes
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8003668:	b480      	push	{r7}
 800366a:	b085      	sub	sp, #20
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
=======
 8004348:	b480      	push	{r7}
 800434a:	b085      	sub	sp, #20
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
<<<<<<< Updated upstream
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003676:	b2db      	uxtb	r3, r3
 8003678:	2b01      	cmp	r3, #1
 800367a:	d001      	beq.n	8003680 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e03b      	b.n	80036f8 <HAL_TIM_Base_Start_IT+0x90>
=======
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004356:	b2db      	uxtb	r3, r3
 8004358:	2b01      	cmp	r3, #1
 800435a:	d001      	beq.n	8004360 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e03b      	b.n	80043d8 <HAL_TIM_Base_Start_IT+0x90>
>>>>>>> Stashed changes
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< Updated upstream
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2202      	movs	r2, #2
 8003684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	68da      	ldr	r2, [r3, #12]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f042 0201 	orr.w	r2, r2, #1
 8003696:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a19      	ldr	r2, [pc, #100]	; (8003704 <HAL_TIM_Base_Start_IT+0x9c>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d009      	beq.n	80036b6 <HAL_TIM_Base_Start_IT+0x4e>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036aa:	d004      	beq.n	80036b6 <HAL_TIM_Base_Start_IT+0x4e>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a15      	ldr	r2, [pc, #84]	; (8003708 <HAL_TIM_Base_Start_IT+0xa0>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d115      	bne.n	80036e2 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	689a      	ldr	r2, [r3, #8]
 80036bc:	4b13      	ldr	r3, [pc, #76]	; (800370c <HAL_TIM_Base_Start_IT+0xa4>)
 80036be:	4013      	ands	r3, r2
 80036c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2b06      	cmp	r3, #6
 80036c6:	d015      	beq.n	80036f4 <HAL_TIM_Base_Start_IT+0x8c>
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036ce:	d011      	beq.n	80036f4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f042 0201 	orr.w	r2, r2, #1
 80036de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036e0:	e008      	b.n	80036f4 <HAL_TIM_Base_Start_IT+0x8c>
=======
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2202      	movs	r2, #2
 8004364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	68da      	ldr	r2, [r3, #12]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f042 0201 	orr.w	r2, r2, #1
 8004376:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a19      	ldr	r2, [pc, #100]	; (80043e4 <HAL_TIM_Base_Start_IT+0x9c>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d009      	beq.n	8004396 <HAL_TIM_Base_Start_IT+0x4e>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800438a:	d004      	beq.n	8004396 <HAL_TIM_Base_Start_IT+0x4e>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a15      	ldr	r2, [pc, #84]	; (80043e8 <HAL_TIM_Base_Start_IT+0xa0>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d115      	bne.n	80043c2 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	689a      	ldr	r2, [r3, #8]
 800439c:	4b13      	ldr	r3, [pc, #76]	; (80043ec <HAL_TIM_Base_Start_IT+0xa4>)
 800439e:	4013      	ands	r3, r2
 80043a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2b06      	cmp	r3, #6
 80043a6:	d015      	beq.n	80043d4 <HAL_TIM_Base_Start_IT+0x8c>
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043ae:	d011      	beq.n	80043d4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f042 0201 	orr.w	r2, r2, #1
 80043be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043c0:	e008      	b.n	80043d4 <HAL_TIM_Base_Start_IT+0x8c>
>>>>>>> Stashed changes
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
<<<<<<< Updated upstream
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f042 0201 	orr.w	r2, r2, #1
 80036f0:	601a      	str	r2, [r3, #0]
 80036f2:	e000      	b.n	80036f6 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036f4:	bf00      	nop
=======
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f042 0201 	orr.w	r2, r2, #1
 80043d0:	601a      	str	r2, [r3, #0]
 80043d2:	e000      	b.n	80043d6 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043d4:	bf00      	nop
>>>>>>> Stashed changes
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< Updated upstream
 80036f6:	2300      	movs	r3, #0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3714      	adds	r7, #20
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr
 8003704:	40012c00 	.word	0x40012c00
 8003708:	40014000 	.word	0x40014000
 800370c:	00010007 	.word	0x00010007

08003710 <HAL_TIM_IRQHandler>:
=======
 80043d6:	2300      	movs	r3, #0
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3714      	adds	r7, #20
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr
 80043e4:	40012c00 	.word	0x40012c00
 80043e8:	40014000 	.word	0x40014000
 80043ec:	00010007 	.word	0x00010007

080043f0 <HAL_TIM_IRQHandler>:
>>>>>>> Stashed changes
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d020      	beq.n	8003774 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f003 0302 	and.w	r3, r3, #2
 8003738:	2b00      	cmp	r3, #0
 800373a:	d01b      	beq.n	8003774 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f06f 0202 	mvn.w	r2, #2
 8003744:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2201      	movs	r2, #1
 800374a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	699b      	ldr	r3, [r3, #24]
 8003752:	f003 0303 	and.w	r3, r3, #3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d003      	beq.n	8003762 <HAL_TIM_IRQHandler+0x52>
=======
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	f003 0302 	and.w	r3, r3, #2
 800440e:	2b00      	cmp	r3, #0
 8004410:	d020      	beq.n	8004454 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f003 0302 	and.w	r3, r3, #2
 8004418:	2b00      	cmp	r3, #0
 800441a:	d01b      	beq.n	8004454 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f06f 0202 	mvn.w	r2, #2
 8004424:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2201      	movs	r2, #1
 800442a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	f003 0303 	and.w	r3, r3, #3
 8004436:	2b00      	cmp	r3, #0
 8004438:	d003      	beq.n	8004442 <HAL_TIM_IRQHandler+0x52>
>>>>>>> Stashed changes
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< Updated upstream
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f000 f8e4 	bl	8003928 <HAL_TIM_IC_CaptureCallback>
 8003760:	e005      	b.n	800376e <HAL_TIM_IRQHandler+0x5e>
=======
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f000 f8e4 	bl	8004608 <HAL_TIM_IC_CaptureCallback>
 8004440:	e005      	b.n	800444e <HAL_TIM_IRQHandler+0x5e>
>>>>>>> Stashed changes
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< Updated upstream
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 f8d6 	bl	8003914 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f000 f8e7 	bl	800393c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	771a      	strb	r2, [r3, #28]
=======
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 f8d6 	bl	80045f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f000 f8e7 	bl	800461c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	771a      	strb	r2, [r3, #28]
>>>>>>> Stashed changes
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
<<<<<<< Updated upstream
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	f003 0304 	and.w	r3, r3, #4
 800377a:	2b00      	cmp	r3, #0
 800377c:	d020      	beq.n	80037c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f003 0304 	and.w	r3, r3, #4
 8003784:	2b00      	cmp	r3, #0
 8003786:	d01b      	beq.n	80037c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f06f 0204 	mvn.w	r2, #4
 8003790:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2202      	movs	r2, #2
 8003796:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d003      	beq.n	80037ae <HAL_TIM_IRQHandler+0x9e>
=======
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	f003 0304 	and.w	r3, r3, #4
 800445a:	2b00      	cmp	r3, #0
 800445c:	d020      	beq.n	80044a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f003 0304 	and.w	r3, r3, #4
 8004464:	2b00      	cmp	r3, #0
 8004466:	d01b      	beq.n	80044a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f06f 0204 	mvn.w	r2, #4
 8004470:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2202      	movs	r2, #2
 8004476:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	699b      	ldr	r3, [r3, #24]
 800447e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004482:	2b00      	cmp	r3, #0
 8004484:	d003      	beq.n	800448e <HAL_TIM_IRQHandler+0x9e>
>>>>>>> Stashed changes
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< Updated upstream
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 f8be 	bl	8003928 <HAL_TIM_IC_CaptureCallback>
 80037ac:	e005      	b.n	80037ba <HAL_TIM_IRQHandler+0xaa>
=======
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 f8be 	bl	8004608 <HAL_TIM_IC_CaptureCallback>
 800448c:	e005      	b.n	800449a <HAL_TIM_IRQHandler+0xaa>
>>>>>>> Stashed changes
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< Updated upstream
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 f8b0 	bl	8003914 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f000 f8c1 	bl	800393c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	771a      	strb	r2, [r3, #28]
=======
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 f8b0 	bl	80045f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f000 f8c1 	bl	800461c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	771a      	strb	r2, [r3, #28]
>>>>>>> Stashed changes
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
<<<<<<< Updated upstream
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	f003 0308 	and.w	r3, r3, #8
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d020      	beq.n	800380c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f003 0308 	and.w	r3, r3, #8
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d01b      	beq.n	800380c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f06f 0208 	mvn.w	r2, #8
 80037dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2204      	movs	r2, #4
 80037e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	69db      	ldr	r3, [r3, #28]
 80037ea:	f003 0303 	and.w	r3, r3, #3
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d003      	beq.n	80037fa <HAL_TIM_IRQHandler+0xea>
=======
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	f003 0308 	and.w	r3, r3, #8
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d020      	beq.n	80044ec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f003 0308 	and.w	r3, r3, #8
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d01b      	beq.n	80044ec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f06f 0208 	mvn.w	r2, #8
 80044bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2204      	movs	r2, #4
 80044c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	69db      	ldr	r3, [r3, #28]
 80044ca:	f003 0303 	and.w	r3, r3, #3
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d003      	beq.n	80044da <HAL_TIM_IRQHandler+0xea>
>>>>>>> Stashed changes
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< Updated upstream
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 f898 	bl	8003928 <HAL_TIM_IC_CaptureCallback>
 80037f8:	e005      	b.n	8003806 <HAL_TIM_IRQHandler+0xf6>
=======
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 f898 	bl	8004608 <HAL_TIM_IC_CaptureCallback>
 80044d8:	e005      	b.n	80044e6 <HAL_TIM_IRQHandler+0xf6>
>>>>>>> Stashed changes
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< Updated upstream
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 f88a 	bl	8003914 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f000 f89b 	bl	800393c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	771a      	strb	r2, [r3, #28]
=======
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 f88a 	bl	80045f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f000 f89b 	bl	800461c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	771a      	strb	r2, [r3, #28]
>>>>>>> Stashed changes
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
<<<<<<< Updated upstream
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	f003 0310 	and.w	r3, r3, #16
 8003812:	2b00      	cmp	r3, #0
 8003814:	d020      	beq.n	8003858 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f003 0310 	and.w	r3, r3, #16
 800381c:	2b00      	cmp	r3, #0
 800381e:	d01b      	beq.n	8003858 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f06f 0210 	mvn.w	r2, #16
 8003828:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2208      	movs	r2, #8
 800382e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	69db      	ldr	r3, [r3, #28]
 8003836:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800383a:	2b00      	cmp	r3, #0
 800383c:	d003      	beq.n	8003846 <HAL_TIM_IRQHandler+0x136>
=======
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	f003 0310 	and.w	r3, r3, #16
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d020      	beq.n	8004538 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f003 0310 	and.w	r3, r3, #16
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d01b      	beq.n	8004538 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f06f 0210 	mvn.w	r2, #16
 8004508:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2208      	movs	r2, #8
 800450e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	69db      	ldr	r3, [r3, #28]
 8004516:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800451a:	2b00      	cmp	r3, #0
 800451c:	d003      	beq.n	8004526 <HAL_TIM_IRQHandler+0x136>
>>>>>>> Stashed changes
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< Updated upstream
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 f872 	bl	8003928 <HAL_TIM_IC_CaptureCallback>
 8003844:	e005      	b.n	8003852 <HAL_TIM_IRQHandler+0x142>
=======
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f000 f872 	bl	8004608 <HAL_TIM_IC_CaptureCallback>
 8004524:	e005      	b.n	8004532 <HAL_TIM_IRQHandler+0x142>
>>>>>>> Stashed changes
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< Updated upstream
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 f864 	bl	8003914 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f000 f875 	bl	800393c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	771a      	strb	r2, [r3, #28]
=======
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f000 f864 	bl	80045f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f000 f875 	bl	800461c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	771a      	strb	r2, [r3, #28]
>>>>>>> Stashed changes
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
<<<<<<< Updated upstream
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	f003 0301 	and.w	r3, r3, #1
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00c      	beq.n	800387c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f003 0301 	and.w	r3, r3, #1
 8003868:	2b00      	cmp	r3, #0
 800386a:	d007      	beq.n	800387c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f06f 0201 	mvn.w	r2, #1
 8003874:	611a      	str	r2, [r3, #16]
=======
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	f003 0301 	and.w	r3, r3, #1
 800453e:	2b00      	cmp	r3, #0
 8004540:	d00c      	beq.n	800455c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f003 0301 	and.w	r3, r3, #1
 8004548:	2b00      	cmp	r3, #0
 800454a:	d007      	beq.n	800455c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f06f 0201 	mvn.w	r2, #1
 8004554:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
<<<<<<< Updated upstream
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f7fd f9c6 	bl	8000c08 <HAL_TIM_PeriodElapsedCallback>
=======
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f7fc fcd8 	bl	8000f0c <HAL_TIM_PeriodElapsedCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
<<<<<<< Updated upstream
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003882:	2b00      	cmp	r3, #0
 8003884:	d00c      	beq.n	80038a0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800388c:	2b00      	cmp	r3, #0
 800388e:	d007      	beq.n	80038a0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003898:	611a      	str	r2, [r3, #16]
=======
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004562:	2b00      	cmp	r3, #0
 8004564:	d00c      	beq.n	8004580 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800456c:	2b00      	cmp	r3, #0
 800456e:	d007      	beq.n	8004580 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004578:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
<<<<<<< Updated upstream
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 f8d0 	bl	8003a40 <HAL_TIMEx_BreakCallback>
=======
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f000 f8d0 	bl	8004720 <HAL_TIMEx_BreakCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
<<<<<<< Updated upstream
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00c      	beq.n	80038c4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d007      	beq.n	80038c4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80038bc:	611a      	str	r2, [r3, #16]
=======
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004586:	2b00      	cmp	r3, #0
 8004588:	d00c      	beq.n	80045a4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004590:	2b00      	cmp	r3, #0
 8004592:	d007      	beq.n	80045a4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800459c:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
<<<<<<< Updated upstream
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 f8c8 	bl	8003a54 <HAL_TIMEx_Break2Callback>
=======
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f000 f8c8 	bl	8004734 <HAL_TIMEx_Break2Callback>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
<<<<<<< Updated upstream
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00c      	beq.n	80038e8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d007      	beq.n	80038e8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80038e0:	611a      	str	r2, [r3, #16]
=======
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d00c      	beq.n	80045c8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d007      	beq.n	80045c8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80045c0:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
<<<<<<< Updated upstream
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 f834 	bl	8003950 <HAL_TIM_TriggerCallback>
=======
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 f834 	bl	8004630 <HAL_TIM_TriggerCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
<<<<<<< Updated upstream
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	f003 0320 	and.w	r3, r3, #32
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00c      	beq.n	800390c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f003 0320 	and.w	r3, r3, #32
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d007      	beq.n	800390c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f06f 0220 	mvn.w	r2, #32
 8003904:	611a      	str	r2, [r3, #16]
=======
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	f003 0320 	and.w	r3, r3, #32
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d00c      	beq.n	80045ec <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f003 0320 	and.w	r3, r3, #32
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d007      	beq.n	80045ec <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f06f 0220 	mvn.w	r2, #32
 80045e4:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
<<<<<<< Updated upstream
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 f890 	bl	8003a2c <HAL_TIMEx_CommutCallback>
=======
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f000 f890 	bl	800470c <HAL_TIMEx_CommutCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
<<<<<<< Updated upstream
 800390c:	bf00      	nop
 800390e:	3710      	adds	r7, #16
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <HAL_TIM_OC_DelayElapsedCallback>:
=======
 80045ec:	bf00      	nop
 80045ee:	3710      	adds	r7, #16
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <HAL_TIM_OC_DelayElapsedCallback>:
>>>>>>> Stashed changes
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
=======
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 800391c:	bf00      	nop
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <HAL_TIM_IC_CaptureCallback>:
=======
 80045fc:	bf00      	nop
 80045fe:	370c      	adds	r7, #12
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <HAL_TIM_IC_CaptureCallback>:
>>>>>>> Stashed changes
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
=======
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8003930:	bf00      	nop
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <HAL_TIM_PWM_PulseFinishedCallback>:
=======
 8004610:	bf00      	nop
 8004612:	370c      	adds	r7, #12
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <HAL_TIM_PWM_PulseFinishedCallback>:
>>>>>>> Stashed changes
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
=======
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8003944:	bf00      	nop
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <HAL_TIM_TriggerCallback>:
=======
 8004624:	bf00      	nop
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <HAL_TIM_TriggerCallback>:
>>>>>>> Stashed changes
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
=======
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8003958:	bf00      	nop
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <TIM_Base_SetConfig>:
=======
 8004638:	bf00      	nop
 800463a:	370c      	adds	r7, #12
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr

08004644 <TIM_Base_SetConfig>:
>>>>>>> Stashed changes
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
<<<<<<< Updated upstream
 8003964:	b480      	push	{r7}
 8003966:	b085      	sub	sp, #20
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	4a2a      	ldr	r2, [pc, #168]	; (8003a20 <TIM_Base_SetConfig+0xbc>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d003      	beq.n	8003984 <TIM_Base_SetConfig+0x20>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003982:	d108      	bne.n	8003996 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800398a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	68fa      	ldr	r2, [r7, #12]
 8003992:	4313      	orrs	r3, r2
 8003994:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a21      	ldr	r2, [pc, #132]	; (8003a20 <TIM_Base_SetConfig+0xbc>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d00b      	beq.n	80039b6 <TIM_Base_SetConfig+0x52>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039a4:	d007      	beq.n	80039b6 <TIM_Base_SetConfig+0x52>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a1e      	ldr	r2, [pc, #120]	; (8003a24 <TIM_Base_SetConfig+0xc0>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d003      	beq.n	80039b6 <TIM_Base_SetConfig+0x52>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a1d      	ldr	r2, [pc, #116]	; (8003a28 <TIM_Base_SetConfig+0xc4>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d108      	bne.n	80039c8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	68fa      	ldr	r2, [r7, #12]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	60fb      	str	r3, [r7, #12]
=======
 8004644:	b480      	push	{r7}
 8004646:	b085      	sub	sp, #20
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	4a2a      	ldr	r2, [pc, #168]	; (8004700 <TIM_Base_SetConfig+0xbc>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d003      	beq.n	8004664 <TIM_Base_SetConfig+0x20>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004662:	d108      	bne.n	8004676 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800466a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	68fa      	ldr	r2, [r7, #12]
 8004672:	4313      	orrs	r3, r2
 8004674:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a21      	ldr	r2, [pc, #132]	; (8004700 <TIM_Base_SetConfig+0xbc>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d00b      	beq.n	8004696 <TIM_Base_SetConfig+0x52>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004684:	d007      	beq.n	8004696 <TIM_Base_SetConfig+0x52>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a1e      	ldr	r2, [pc, #120]	; (8004704 <TIM_Base_SetConfig+0xc0>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d003      	beq.n	8004696 <TIM_Base_SetConfig+0x52>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a1d      	ldr	r2, [pc, #116]	; (8004708 <TIM_Base_SetConfig+0xc4>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d108      	bne.n	80046a8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800469c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	68fa      	ldr	r2, [r7, #12]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
<<<<<<< Updated upstream
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	695b      	ldr	r3, [r3, #20]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	68fa      	ldr	r2, [r7, #12]
 80039da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	689a      	ldr	r2, [r3, #8]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4a0c      	ldr	r2, [pc, #48]	; (8003a20 <TIM_Base_SetConfig+0xbc>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d007      	beq.n	8003a04 <TIM_Base_SetConfig+0xa0>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	4a0b      	ldr	r2, [pc, #44]	; (8003a24 <TIM_Base_SetConfig+0xc0>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d003      	beq.n	8003a04 <TIM_Base_SetConfig+0xa0>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	4a0a      	ldr	r2, [pc, #40]	; (8003a28 <TIM_Base_SetConfig+0xc4>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d103      	bne.n	8003a0c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	691a      	ldr	r2, [r3, #16]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	631a      	str	r2, [r3, #48]	; 0x30
=======
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	695b      	ldr	r3, [r3, #20]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	68fa      	ldr	r2, [r7, #12]
 80046ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	689a      	ldr	r2, [r3, #8]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	4a0c      	ldr	r2, [pc, #48]	; (8004700 <TIM_Base_SetConfig+0xbc>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d007      	beq.n	80046e4 <TIM_Base_SetConfig+0xa0>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	4a0b      	ldr	r2, [pc, #44]	; (8004704 <TIM_Base_SetConfig+0xc0>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d003      	beq.n	80046e4 <TIM_Base_SetConfig+0xa0>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4a0a      	ldr	r2, [pc, #40]	; (8004708 <TIM_Base_SetConfig+0xc4>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d103      	bne.n	80046ec <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	691a      	ldr	r2, [r3, #16]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	631a      	str	r2, [r3, #48]	; 0x30
>>>>>>> Stashed changes
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
<<<<<<< Updated upstream
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	615a      	str	r2, [r3, #20]
}
 8003a12:	bf00      	nop
 8003a14:	3714      	adds	r7, #20
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	40012c00 	.word	0x40012c00
 8003a24:	40014000 	.word	0x40014000
 8003a28:	40014400 	.word	0x40014400

08003a2c <HAL_TIMEx_CommutCallback>:
=======
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	615a      	str	r2, [r3, #20]
}
 80046f2:	bf00      	nop
 80046f4:	3714      	adds	r7, #20
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr
 80046fe:	bf00      	nop
 8004700:	40012c00 	.word	0x40012c00
 8004704:	40014000 	.word	0x40014000
 8004708:	40014400 	.word	0x40014400

0800470c <HAL_TIMEx_CommutCallback>:
>>>>>>> Stashed changes
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
=======
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8003a34:	bf00      	nop
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <HAL_TIMEx_BreakCallback>:
=======
 8004714:	bf00      	nop
 8004716:	370c      	adds	r7, #12
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <HAL_TIMEx_BreakCallback>:
>>>>>>> Stashed changes
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
=======
 8004720:	b480      	push	{r7}
 8004722:	b083      	sub	sp, #12
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8003a48:	bf00      	nop
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <HAL_TIMEx_Break2Callback>:
=======
 8004728:	bf00      	nop
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <HAL_TIMEx_Break2Callback>:
>>>>>>> Stashed changes
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
=======
 8004734:	b480      	push	{r7}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8003a5c:	bf00      	nop
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <HAL_UART_Init>:
=======
 800473c:	bf00      	nop
 800473e:	370c      	adds	r7, #12
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr

08004748 <HAL_UART_Init>:
>>>>>>> Stashed changes
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d101      	bne.n	8003a7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e040      	b.n	8003afc <HAL_UART_Init+0x94>
=======
 8004748:	b580      	push	{r7, lr}
 800474a:	b082      	sub	sp, #8
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d101      	bne.n	800475a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e040      	b.n	80047dc <HAL_UART_Init+0x94>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
<<<<<<< Updated upstream
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d106      	bne.n	8003a90 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
=======
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800475e:	2b00      	cmp	r3, #0
 8004760:	d106      	bne.n	8004770 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
>>>>>>> Stashed changes

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
<<<<<<< Updated upstream
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f7fd f954 	bl	8000d38 <HAL_UART_MspInit>
=======
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f7fc fc66 	bl	800103c <HAL_UART_MspInit>
>>>>>>> Stashed changes
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
<<<<<<< Updated upstream
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2224      	movs	r2, #36	; 0x24
 8003a94:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f022 0201 	bic.w	r2, r2, #1
 8003aa4:	601a      	str	r2, [r3, #0]
=======
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2224      	movs	r2, #36	; 0x24
 8004774:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f022 0201 	bic.w	r2, r2, #1
 8004784:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
<<<<<<< Updated upstream
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d002      	beq.n	8003ab4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 fe62 	bl	8004778 <UART_AdvFeatureConfig>
=======
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478a:	2b00      	cmp	r3, #0
 800478c:	d002      	beq.n	8004794 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 ff4a 	bl	8005628 <UART_AdvFeatureConfig>
>>>>>>> Stashed changes
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
<<<<<<< Updated upstream
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f000 fc05 	bl	80042c4 <UART_SetConfig>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d101      	bne.n	8003ac4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e01b      	b.n	8003afc <HAL_UART_Init+0x94>
=======
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f000 fced 	bl	8005174 <UART_SetConfig>
 800479a:	4603      	mov	r3, r0
 800479c:	2b01      	cmp	r3, #1
 800479e:	d101      	bne.n	80047a4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e01b      	b.n	80047dc <HAL_UART_Init+0x94>
>>>>>>> Stashed changes
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
<<<<<<< Updated upstream
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	685a      	ldr	r2, [r3, #4]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ad2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	689a      	ldr	r2, [r3, #8]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ae2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f042 0201 	orr.w	r2, r2, #1
 8003af2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f000 fee1 	bl	80048bc <UART_CheckIdleState>
 8003afa:	4603      	mov	r3, r0
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3708      	adds	r7, #8
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <HAL_UART_Transmit>:
=======
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	685a      	ldr	r2, [r3, #4]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	689a      	ldr	r2, [r3, #8]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f042 0201 	orr.w	r2, r2, #1
 80047d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f000 ffc9 	bl	800576c <UART_CheckIdleState>
 80047da:	4603      	mov	r3, r0
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3708      	adds	r7, #8
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}

080047e4 <HAL_UART_Transmit>:
>>>>>>> Stashed changes
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< Updated upstream
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b08a      	sub	sp, #40	; 0x28
 8003b08:	af02      	add	r7, sp, #8
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	603b      	str	r3, [r7, #0]
 8003b10:	4613      	mov	r3, r2
 8003b12:	80fb      	strh	r3, [r7, #6]
=======
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b08a      	sub	sp, #40	; 0x28
 80047e8:	af02      	add	r7, sp, #8
 80047ea:	60f8      	str	r0, [r7, #12]
 80047ec:	60b9      	str	r1, [r7, #8]
 80047ee:	603b      	str	r3, [r7, #0]
 80047f0:	4613      	mov	r3, r2
 80047f2:	80fb      	strh	r3, [r7, #6]
>>>>>>> Stashed changes
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
<<<<<<< Updated upstream
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b18:	2b20      	cmp	r3, #32
 8003b1a:	d178      	bne.n	8003c0e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d002      	beq.n	8003b28 <HAL_UART_Transmit+0x24>
 8003b22:	88fb      	ldrh	r3, [r7, #6]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d101      	bne.n	8003b2c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e071      	b.n	8003c10 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2221      	movs	r2, #33	; 0x21
 8003b38:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b3a:	f7fd fb5f 	bl	80011fc <HAL_GetTick>
 8003b3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	88fa      	ldrh	r2, [r7, #6]
 8003b44:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	88fa      	ldrh	r2, [r7, #6]
 8003b4c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b58:	d108      	bne.n	8003b6c <HAL_UART_Transmit+0x68>
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	691b      	ldr	r3, [r3, #16]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d104      	bne.n	8003b6c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003b62:	2300      	movs	r3, #0
 8003b64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	61bb      	str	r3, [r7, #24]
 8003b6a:	e003      	b.n	8003b74 <HAL_UART_Transmit+0x70>
=======
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047f8:	2b20      	cmp	r3, #32
 80047fa:	d178      	bne.n	80048ee <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d002      	beq.n	8004808 <HAL_UART_Transmit+0x24>
 8004802:	88fb      	ldrh	r3, [r7, #6]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d101      	bne.n	800480c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e071      	b.n	80048f0 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2200      	movs	r2, #0
 8004810:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2221      	movs	r2, #33	; 0x21
 8004818:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800481a:	f7fc fea9 	bl	8001570 <HAL_GetTick>
 800481e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	88fa      	ldrh	r2, [r7, #6]
 8004824:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	88fa      	ldrh	r2, [r7, #6]
 800482c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004838:	d108      	bne.n	800484c <HAL_UART_Transmit+0x68>
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d104      	bne.n	800484c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004842:	2300      	movs	r3, #0
 8004844:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	61bb      	str	r3, [r7, #24]
 800484a:	e003      	b.n	8004854 <HAL_UART_Transmit+0x70>
>>>>>>> Stashed changes
    }
    else
    {
      pdata8bits  = pData;
<<<<<<< Updated upstream
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b70:	2300      	movs	r3, #0
 8003b72:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b74:	e030      	b.n	8003bd8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	9300      	str	r3, [sp, #0]
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	2180      	movs	r1, #128	; 0x80
 8003b80:	68f8      	ldr	r0, [r7, #12]
 8003b82:	f000 ff43 	bl	8004a0c <UART_WaitOnFlagUntilTimeout>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d004      	beq.n	8003b96 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2220      	movs	r2, #32
 8003b90:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e03c      	b.n	8003c10 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d10b      	bne.n	8003bb4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	881a      	ldrh	r2, [r3, #0]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ba8:	b292      	uxth	r2, r2
 8003baa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	3302      	adds	r3, #2
 8003bb0:	61bb      	str	r3, [r7, #24]
 8003bb2:	e008      	b.n	8003bc6 <HAL_UART_Transmit+0xc2>
=======
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004850:	2300      	movs	r3, #0
 8004852:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004854:	e030      	b.n	80048b8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	9300      	str	r3, [sp, #0]
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	2200      	movs	r2, #0
 800485e:	2180      	movs	r1, #128	; 0x80
 8004860:	68f8      	ldr	r0, [r7, #12]
 8004862:	f001 f82b 	bl	80058bc <UART_WaitOnFlagUntilTimeout>
 8004866:	4603      	mov	r3, r0
 8004868:	2b00      	cmp	r3, #0
 800486a:	d004      	beq.n	8004876 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2220      	movs	r2, #32
 8004870:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e03c      	b.n	80048f0 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d10b      	bne.n	8004894 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	881a      	ldrh	r2, [r3, #0]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004888:	b292      	uxth	r2, r2
 800488a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800488c:	69bb      	ldr	r3, [r7, #24]
 800488e:	3302      	adds	r3, #2
 8004890:	61bb      	str	r3, [r7, #24]
 8004892:	e008      	b.n	80048a6 <HAL_UART_Transmit+0xc2>
>>>>>>> Stashed changes
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
<<<<<<< Updated upstream
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	781a      	ldrb	r2, [r3, #0]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	b292      	uxth	r2, r2
 8003bbe:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	b29a      	uxth	r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d1c8      	bne.n	8003b76 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	9300      	str	r3, [sp, #0]
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	2200      	movs	r2, #0
 8003bec:	2140      	movs	r1, #64	; 0x40
 8003bee:	68f8      	ldr	r0, [r7, #12]
 8003bf0:	f000 ff0c 	bl	8004a0c <UART_WaitOnFlagUntilTimeout>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d004      	beq.n	8003c04 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2220      	movs	r2, #32
 8003bfe:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003c00:	2303      	movs	r3, #3
 8003c02:	e005      	b.n	8003c10 <HAL_UART_Transmit+0x10c>
=======
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	781a      	ldrb	r2, [r3, #0]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	b292      	uxth	r2, r2
 800489e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	3301      	adds	r3, #1
 80048a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	3b01      	subs	r3, #1
 80048b0:	b29a      	uxth	r2, r3
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80048be:	b29b      	uxth	r3, r3
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d1c8      	bne.n	8004856 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	9300      	str	r3, [sp, #0]
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	2200      	movs	r2, #0
 80048cc:	2140      	movs	r1, #64	; 0x40
 80048ce:	68f8      	ldr	r0, [r7, #12]
 80048d0:	f000 fff4 	bl	80058bc <UART_WaitOnFlagUntilTimeout>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d004      	beq.n	80048e4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2220      	movs	r2, #32
 80048de:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	e005      	b.n	80048f0 <HAL_UART_Transmit+0x10c>
>>>>>>> Stashed changes
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
<<<<<<< Updated upstream
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2220      	movs	r2, #32
 8003c08:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	e000      	b.n	8003c10 <HAL_UART_Transmit+0x10c>
=======
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2220      	movs	r2, #32
 80048e8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80048ea:	2300      	movs	r3, #0
 80048ec:	e000      	b.n	80048f0 <HAL_UART_Transmit+0x10c>
>>>>>>> Stashed changes
  }
  else
  {
    return HAL_BUSY;
<<<<<<< Updated upstream
 8003c0e:	2302      	movs	r3, #2
  }
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3720      	adds	r7, #32
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <HAL_UART_Receive_IT>:
=======
 80048ee:	2302      	movs	r3, #2
  }
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3720      	adds	r7, #32
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <HAL_UART_Receive_IT>:
>>>>>>> Stashed changes
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
<<<<<<< Updated upstream
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b08a      	sub	sp, #40	; 0x28
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	4613      	mov	r3, r2
 8003c24:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c2c:	2b20      	cmp	r3, #32
 8003c2e:	d137      	bne.n	8003ca0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d002      	beq.n	8003c3c <HAL_UART_Receive_IT+0x24>
 8003c36:	88fb      	ldrh	r3, [r7, #6]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d101      	bne.n	8003c40 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e030      	b.n	8003ca2 <HAL_UART_Receive_IT+0x8a>
=======
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b08a      	sub	sp, #40	; 0x28
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	60b9      	str	r1, [r7, #8]
 8004902:	4613      	mov	r3, r2
 8004904:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800490c:	2b20      	cmp	r3, #32
 800490e:	d137      	bne.n	8004980 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d002      	beq.n	800491c <HAL_UART_Receive_IT+0x24>
 8004916:	88fb      	ldrh	r3, [r7, #6]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d101      	bne.n	8004920 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e030      	b.n	8004982 <HAL_UART_Receive_IT+0x8a>
>>>>>>> Stashed changes
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
<<<<<<< Updated upstream
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2200      	movs	r2, #0
 8003c44:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a18      	ldr	r2, [pc, #96]	; (8003cac <HAL_UART_Receive_IT+0x94>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d01f      	beq.n	8003c90 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d018      	beq.n	8003c90 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	617b      	str	r3, [r7, #20]
=======
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2200      	movs	r2, #0
 8004924:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a18      	ldr	r2, [pc, #96]	; (800498c <HAL_UART_Receive_IT+0x94>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d01f      	beq.n	8004970 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d018      	beq.n	8004970 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
<<<<<<< Updated upstream
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	e853 3f00 	ldrex	r3, [r3]
 8003c6a:	613b      	str	r3, [r7, #16]
   return(result);
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c72:	627b      	str	r3, [r7, #36]	; 0x24
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	461a      	mov	r2, r3
 8003c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7c:	623b      	str	r3, [r7, #32]
 8003c7e:	61fa      	str	r2, [r7, #28]
=======
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	e853 3f00 	ldrex	r3, [r3]
 800494a:	613b      	str	r3, [r7, #16]
   return(result);
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004952:	627b      	str	r3, [r7, #36]	; 0x24
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	461a      	mov	r2, r3
 800495a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495c:	623b      	str	r3, [r7, #32]
 800495e:	61fa      	str	r2, [r7, #28]
>>>>>>> Stashed changes
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
<<<<<<< Updated upstream
 8003c80:	69f9      	ldr	r1, [r7, #28]
 8003c82:	6a3a      	ldr	r2, [r7, #32]
 8003c84:	e841 2300 	strex	r3, r2, [r1]
 8003c88:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d1e6      	bne.n	8003c5e <HAL_UART_Receive_IT+0x46>
=======
 8004960:	69f9      	ldr	r1, [r7, #28]
 8004962:	6a3a      	ldr	r2, [r7, #32]
 8004964:	e841 2300 	strex	r3, r2, [r1]
 8004968:	61bb      	str	r3, [r7, #24]
   return(result);
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d1e6      	bne.n	800493e <HAL_UART_Receive_IT+0x46>
>>>>>>> Stashed changes
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
<<<<<<< Updated upstream
 8003c90:	88fb      	ldrh	r3, [r7, #6]
 8003c92:	461a      	mov	r2, r3
 8003c94:	68b9      	ldr	r1, [r7, #8]
 8003c96:	68f8      	ldr	r0, [r7, #12]
 8003c98:	f000 ff20 	bl	8004adc <UART_Start_Receive_IT>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	e000      	b.n	8003ca2 <HAL_UART_Receive_IT+0x8a>
=======
 8004970:	88fb      	ldrh	r3, [r7, #6]
 8004972:	461a      	mov	r2, r3
 8004974:	68b9      	ldr	r1, [r7, #8]
 8004976:	68f8      	ldr	r0, [r7, #12]
 8004978:	f001 f808 	bl	800598c <UART_Start_Receive_IT>
 800497c:	4603      	mov	r3, r0
 800497e:	e000      	b.n	8004982 <HAL_UART_Receive_IT+0x8a>
>>>>>>> Stashed changes
  }
  else
  {
    return HAL_BUSY;
<<<<<<< Updated upstream
 8003ca0:	2302      	movs	r3, #2
  }
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3728      	adds	r7, #40	; 0x28
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	40008000 	.word	0x40008000

08003cb0 <HAL_UART_IRQHandler>:
=======
 8004980:	2302      	movs	r3, #2
  }
}
 8004982:	4618      	mov	r0, r3
 8004984:	3728      	adds	r7, #40	; 0x28
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	40008000 	.word	0x40008000

08004990 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b08a      	sub	sp, #40	; 0x28
 8004994:	af00      	add	r7, sp, #0
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	60b9      	str	r1, [r7, #8]
 800499a:	4613      	mov	r3, r2
 800499c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049a4:	2b20      	cmp	r3, #32
 80049a6:	d137      	bne.n	8004a18 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d002      	beq.n	80049b4 <HAL_UART_Receive_DMA+0x24>
 80049ae:	88fb      	ldrh	r3, [r7, #6]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d101      	bne.n	80049b8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e030      	b.n	8004a1a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2200      	movs	r2, #0
 80049bc:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a18      	ldr	r2, [pc, #96]	; (8004a24 <HAL_UART_Receive_DMA+0x94>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d01f      	beq.n	8004a08 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d018      	beq.n	8004a08 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	e853 3f00 	ldrex	r3, [r3]
 80049e2:	613b      	str	r3, [r7, #16]
   return(result);
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80049ea:	627b      	str	r3, [r7, #36]	; 0x24
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	461a      	mov	r2, r3
 80049f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f4:	623b      	str	r3, [r7, #32]
 80049f6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f8:	69f9      	ldr	r1, [r7, #28]
 80049fa:	6a3a      	ldr	r2, [r7, #32]
 80049fc:	e841 2300 	strex	r3, r2, [r1]
 8004a00:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d1e6      	bne.n	80049d6 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004a08:	88fb      	ldrh	r3, [r7, #6]
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	68b9      	ldr	r1, [r7, #8]
 8004a0e:	68f8      	ldr	r0, [r7, #12]
 8004a10:	f001 f882 	bl	8005b18 <UART_Start_Receive_DMA>
 8004a14:	4603      	mov	r3, r0
 8004a16:	e000      	b.n	8004a1a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004a18:	2302      	movs	r3, #2
  }
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3728      	adds	r7, #40	; 0x28
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	40008000 	.word	0x40008000

08004a28 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b090      	sub	sp, #64	; 0x40
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a34:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a3c:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a48:	2b80      	cmp	r3, #128	; 0x80
 8004a4a:	d139      	bne.n	8004ac0 <HAL_UART_DMAStop+0x98>
 8004a4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a4e:	2b21      	cmp	r3, #33	; 0x21
 8004a50:	d136      	bne.n	8004ac0 <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	3308      	adds	r3, #8
 8004a58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a5a:	6a3b      	ldr	r3, [r7, #32]
 8004a5c:	e853 3f00 	ldrex	r3, [r3]
 8004a60:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a68:	637b      	str	r3, [r7, #52]	; 0x34
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	3308      	adds	r3, #8
 8004a70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a72:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a74:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a7a:	e841 2300 	strex	r3, r2, [r1]
 8004a7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d1e5      	bne.n	8004a52 <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d015      	beq.n	8004aba <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a92:	4618      	mov	r0, r3
 8004a94:	f7fc ff96 	bl	80019c4 <HAL_DMA_Abort>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00d      	beq.n	8004aba <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f7fd f8bc 	bl	8001c20 <HAL_DMA_GetError>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b20      	cmp	r3, #32
 8004aac:	d105      	bne.n	8004aba <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2210      	movs	r2, #16
 8004ab2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e044      	b.n	8004b44 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f001 f8cc 	bl	8005c58 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aca:	2b40      	cmp	r3, #64	; 0x40
 8004acc:	d139      	bne.n	8004b42 <HAL_UART_DMAStop+0x11a>
 8004ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ad0:	2b22      	cmp	r3, #34	; 0x22
 8004ad2:	d136      	bne.n	8004b42 <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	3308      	adds	r3, #8
 8004ada:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	e853 3f00 	ldrex	r3, [r3]
 8004ae2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004aea:	633b      	str	r3, [r7, #48]	; 0x30
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	3308      	adds	r3, #8
 8004af2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004af4:	61ba      	str	r2, [r7, #24]
 8004af6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af8:	6979      	ldr	r1, [r7, #20]
 8004afa:	69ba      	ldr	r2, [r7, #24]
 8004afc:	e841 2300 	strex	r3, r2, [r1]
 8004b00:	613b      	str	r3, [r7, #16]
   return(result);
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d1e5      	bne.n	8004ad4 <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d015      	beq.n	8004b3c <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b14:	4618      	mov	r0, r3
 8004b16:	f7fc ff55 	bl	80019c4 <HAL_DMA_Abort>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d00d      	beq.n	8004b3c <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b24:	4618      	mov	r0, r3
 8004b26:	f7fd f87b 	bl	8001c20 <HAL_DMA_GetError>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2b20      	cmp	r3, #32
 8004b2e:	d105      	bne.n	8004b3c <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2210      	movs	r2, #16
 8004b34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	e003      	b.n	8004b44 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f001 f8b1 	bl	8005ca4 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8004b42:	2300      	movs	r3, #0
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3740      	adds	r7, #64	; 0x40
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <HAL_UART_IRQHandler>:
>>>>>>> Stashed changes
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b0ba      	sub	sp, #232	; 0xe8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	69db      	ldr	r3, [r3, #28]
 8003cbe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
=======
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b0ba      	sub	sp, #232	; 0xe8
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	69db      	ldr	r3, [r3, #28]
 8004b5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
>>>>>>> Stashed changes

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
<<<<<<< Updated upstream
 8003cd6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003cda:	f640 030f 	movw	r3, #2063	; 0x80f
 8003cde:	4013      	ands	r3, r2
 8003ce0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003ce4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d115      	bne.n	8003d18 <HAL_UART_IRQHandler+0x68>
=======
 8004b72:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004b76:	f640 030f 	movw	r3, #2063	; 0x80f
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004b80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d115      	bne.n	8004bb4 <HAL_UART_IRQHandler+0x68>
>>>>>>> Stashed changes
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
<<<<<<< Updated upstream
 8003cec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cf0:	f003 0320 	and.w	r3, r3, #32
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00f      	beq.n	8003d18 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003cf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cfc:	f003 0320 	and.w	r3, r3, #32
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d009      	beq.n	8003d18 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	f000 82ae 	beq.w	800426a <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	4798      	blx	r3
      }
      return;
 8003d16:	e2a8      	b.n	800426a <HAL_UART_IRQHandler+0x5ba>
=======
 8004b88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b8c:	f003 0320 	and.w	r3, r3, #32
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d00f      	beq.n	8004bb4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004b94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b98:	f003 0320 	and.w	r3, r3, #32
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d009      	beq.n	8004bb4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	f000 82ae 	beq.w	8005106 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	4798      	blx	r3
      }
      return;
 8004bb2:	e2a8      	b.n	8005106 <HAL_UART_IRQHandler+0x5ba>
>>>>>>> Stashed changes
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
<<<<<<< Updated upstream
 8003d18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	f000 8117 	beq.w	8003f50 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003d22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d106      	bne.n	8003d3c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003d2e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003d32:	4b85      	ldr	r3, [pc, #532]	; (8003f48 <HAL_UART_IRQHandler+0x298>)
 8003d34:	4013      	ands	r3, r2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	f000 810a 	beq.w	8003f50 <HAL_UART_IRQHandler+0x2a0>
=======
 8004bb4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	f000 8117 	beq.w	8004dec <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004bbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004bc2:	f003 0301 	and.w	r3, r3, #1
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d106      	bne.n	8004bd8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004bca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004bce:	4b85      	ldr	r3, [pc, #532]	; (8004de4 <HAL_UART_IRQHandler+0x298>)
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	f000 810a 	beq.w	8004dec <HAL_UART_IRQHandler+0x2a0>
>>>>>>> Stashed changes
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
<<<<<<< Updated upstream
 8003d3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d40:	f003 0301 	and.w	r3, r3, #1
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d011      	beq.n	8003d6c <HAL_UART_IRQHandler+0xbc>
 8003d48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d00b      	beq.n	8003d6c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d62:	f043 0201 	orr.w	r2, r3, #1
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
=======
 8004bd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bdc:	f003 0301 	and.w	r3, r3, #1
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d011      	beq.n	8004c08 <HAL_UART_IRQHandler+0xbc>
 8004be4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d00b      	beq.n	8004c08 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bfe:	f043 0201 	orr.w	r2, r3, #1
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
>>>>>>> Stashed changes
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
<<<<<<< Updated upstream
 8003d6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d70:	f003 0302 	and.w	r3, r3, #2
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d011      	beq.n	8003d9c <HAL_UART_IRQHandler+0xec>
 8003d78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d7c:	f003 0301 	and.w	r3, r3, #1
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d00b      	beq.n	8003d9c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2202      	movs	r2, #2
 8003d8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d92:	f043 0204 	orr.w	r2, r3, #4
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
=======
 8004c08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c0c:	f003 0302 	and.w	r3, r3, #2
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d011      	beq.n	8004c38 <HAL_UART_IRQHandler+0xec>
 8004c14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c18:	f003 0301 	and.w	r3, r3, #1
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d00b      	beq.n	8004c38 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2202      	movs	r2, #2
 8004c26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c2e:	f043 0204 	orr.w	r2, r3, #4
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
>>>>>>> Stashed changes
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
<<<<<<< Updated upstream
 8003d9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003da0:	f003 0304 	and.w	r3, r3, #4
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d011      	beq.n	8003dcc <HAL_UART_IRQHandler+0x11c>
 8003da8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003dac:	f003 0301 	and.w	r3, r3, #1
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d00b      	beq.n	8003dcc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2204      	movs	r2, #4
 8003dba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dc2:	f043 0202 	orr.w	r2, r3, #2
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
=======
 8004c38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c3c:	f003 0304 	and.w	r3, r3, #4
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d011      	beq.n	8004c68 <HAL_UART_IRQHandler+0x11c>
 8004c44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c48:	f003 0301 	and.w	r3, r3, #1
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d00b      	beq.n	8004c68 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2204      	movs	r2, #4
 8004c56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c5e:	f043 0202 	orr.w	r2, r3, #2
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
>>>>>>> Stashed changes
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
<<<<<<< Updated upstream
 8003dcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dd0:	f003 0308 	and.w	r3, r3, #8
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d017      	beq.n	8003e08 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003dd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ddc:	f003 0320 	and.w	r3, r3, #32
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d105      	bne.n	8003df0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003de4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003de8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d00b      	beq.n	8003e08 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2208      	movs	r2, #8
 8003df6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dfe:	f043 0208 	orr.w	r2, r3, #8
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
=======
 8004c68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c6c:	f003 0308 	and.w	r3, r3, #8
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d017      	beq.n	8004ca4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004c74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c78:	f003 0320 	and.w	r3, r3, #32
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d105      	bne.n	8004c8c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004c80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c84:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d00b      	beq.n	8004ca4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2208      	movs	r2, #8
 8004c92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c9a:	f043 0208 	orr.w	r2, r3, #8
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
>>>>>>> Stashed changes
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
<<<<<<< Updated upstream
 8003e08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d012      	beq.n	8003e3a <HAL_UART_IRQHandler+0x18a>
 8003e14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e18:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d00c      	beq.n	8003e3a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e28:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e30:	f043 0220 	orr.w	r2, r3, #32
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
=======
 8004ca4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ca8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d012      	beq.n	8004cd6 <HAL_UART_IRQHandler+0x18a>
 8004cb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cb4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d00c      	beq.n	8004cd6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004cc4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ccc:	f043 0220 	orr.w	r2, r3, #32
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
>>>>>>> Stashed changes
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
<<<<<<< Updated upstream
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	f000 8214 	beq.w	800426e <HAL_UART_IRQHandler+0x5be>
=======
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	f000 8214 	beq.w	800510a <HAL_UART_IRQHandler+0x5be>
>>>>>>> Stashed changes
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
<<<<<<< Updated upstream
 8003e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e4a:	f003 0320 	and.w	r3, r3, #32
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00d      	beq.n	8003e6e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003e52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e56:	f003 0320 	and.w	r3, r3, #32
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d007      	beq.n	8003e6e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d003      	beq.n	8003e6e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	4798      	blx	r3
=======
 8004ce2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ce6:	f003 0320 	and.w	r3, r3, #32
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d00d      	beq.n	8004d0a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004cee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cf2:	f003 0320 	and.w	r3, r3, #32
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d007      	beq.n	8004d0a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d003      	beq.n	8004d0a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	4798      	blx	r3
>>>>>>> Stashed changes
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
<<<<<<< Updated upstream
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e74:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e82:	2b40      	cmp	r3, #64	; 0x40
 8003e84:	d005      	beq.n	8003e92 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003e86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003e8a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d04f      	beq.n	8003f32 <HAL_UART_IRQHandler+0x282>
=======
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d10:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d1e:	2b40      	cmp	r3, #64	; 0x40
 8004d20:	d005      	beq.n	8004d2e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004d22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d26:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d04f      	beq.n	8004dce <HAL_UART_IRQHandler+0x282>
>>>>>>> Stashed changes
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
<<<<<<< Updated upstream
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 fee8 	bl	8004c68 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ea2:	2b40      	cmp	r3, #64	; 0x40
 8003ea4:	d141      	bne.n	8003f2a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	3308      	adds	r3, #8
 8003eac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003eb4:	e853 3f00 	ldrex	r3, [r3]
 8003eb8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003ebc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003ec0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ec4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	3308      	adds	r3, #8
 8003ece:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003ed2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003ed6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eda:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003ede:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003ee2:	e841 2300 	strex	r3, r2, [r1]
 8003ee6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003eea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d1d9      	bne.n	8003ea6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d013      	beq.n	8003f22 <HAL_UART_IRQHandler+0x272>
=======
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 ffb8 	bl	8005ca4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d3e:	2b40      	cmp	r3, #64	; 0x40
 8004d40:	d141      	bne.n	8004dc6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	3308      	adds	r3, #8
 8004d48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d50:	e853 3f00 	ldrex	r3, [r3]
 8004d54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004d58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	3308      	adds	r3, #8
 8004d6a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004d6e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004d72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d76:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004d7a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004d7e:	e841 2300 	strex	r3, r2, [r1]
 8004d82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004d86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d1d9      	bne.n	8004d42 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d013      	beq.n	8004dbe <HAL_UART_IRQHandler+0x272>
>>>>>>> Stashed changes
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
<<<<<<< Updated upstream
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003efe:	4a13      	ldr	r2, [pc, #76]	; (8003f4c <HAL_UART_IRQHandler+0x29c>)
 8003f00:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f06:	4618      	mov	r0, r3
 8003f08:	f7fd faa4 	bl	8001454 <HAL_DMA_Abort_IT>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d017      	beq.n	8003f42 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003f1c:	4610      	mov	r0, r2
 8003f1e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f20:	e00f      	b.n	8003f42 <HAL_UART_IRQHandler+0x292>
=======
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d9a:	4a13      	ldr	r2, [pc, #76]	; (8004de8 <HAL_UART_IRQHandler+0x29c>)
 8004d9c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004da2:	4618      	mov	r0, r3
 8004da4:	f7fc fe4c 	bl	8001a40 <HAL_DMA_Abort_IT>
 8004da8:	4603      	mov	r3, r0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d017      	beq.n	8004dde <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004db8:	4610      	mov	r0, r2
 8004dba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dbc:	e00f      	b.n	8004dde <HAL_UART_IRQHandler+0x292>
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
<<<<<<< Updated upstream
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f000 f9b8 	bl	8004298 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f28:	e00b      	b.n	8003f42 <HAL_UART_IRQHandler+0x292>
=======
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 f9c2 	bl	8005148 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dc4:	e00b      	b.n	8004dde <HAL_UART_IRQHandler+0x292>
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
<<<<<<< Updated upstream
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f000 f9b4 	bl	8004298 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f30:	e007      	b.n	8003f42 <HAL_UART_IRQHandler+0x292>
=======
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 f9be 	bl	8005148 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dcc:	e007      	b.n	8004dde <HAL_UART_IRQHandler+0x292>
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
<<<<<<< Updated upstream
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 f9b0 	bl	8004298 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003f40:	e195      	b.n	800426e <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f42:	bf00      	nop
    return;
 8003f44:	e193      	b.n	800426e <HAL_UART_IRQHandler+0x5be>
 8003f46:	bf00      	nop
 8003f48:	04000120 	.word	0x04000120
 8003f4c:	08004d31 	.word	0x08004d31
=======
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f000 f9ba 	bl	8005148 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004ddc:	e195      	b.n	800510a <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dde:	bf00      	nop
    return;
 8004de0:	e193      	b.n	800510a <HAL_UART_IRQHandler+0x5be>
 8004de2:	bf00      	nop
 8004de4:	04000120 	.word	0x04000120
 8004de8:	08005f55 	.word	0x08005f55
>>>>>>> Stashed changes

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< Updated upstream
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	f040 814e 	bne.w	80041f6 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003f5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f5e:	f003 0310 	and.w	r3, r3, #16
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	f000 8147 	beq.w	80041f6 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003f68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f6c:	f003 0310 	and.w	r3, r3, #16
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	f000 8140 	beq.w	80041f6 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2210      	movs	r2, #16
 8003f7c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f88:	2b40      	cmp	r3, #64	; 0x40
 8003f8a:	f040 80b8 	bne.w	80040fe <HAL_UART_IRQHandler+0x44e>
=======
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	f040 814e 	bne.w	8005092 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dfa:	f003 0310 	and.w	r3, r3, #16
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	f000 8147 	beq.w	8005092 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004e04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e08:	f003 0310 	and.w	r3, r3, #16
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	f000 8140 	beq.w	8005092 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	2210      	movs	r2, #16
 8004e18:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e24:	2b40      	cmp	r3, #64	; 0x40
 8004e26:	f040 80b8 	bne.w	8004f9a <HAL_UART_IRQHandler+0x44e>
>>>>>>> Stashed changes
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
<<<<<<< Updated upstream
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003f9a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	f000 8167 	beq.w	8004272 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003faa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	f080 815f 	bcs.w	8004272 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003fba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0320 	and.w	r3, r3, #32
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	f040 8086 	bne.w	80040dc <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003fdc:	e853 3f00 	ldrex	r3, [r3]
 8003fe0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003fe4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003fe8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003ffa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003ffe:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004002:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004006:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800400a:	e841 2300 	strex	r3, r2, [r1]
 800400e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004012:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004016:	2b00      	cmp	r3, #0
 8004018:	d1da      	bne.n	8003fd0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	3308      	adds	r3, #8
 8004020:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004022:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004024:	e853 3f00 	ldrex	r3, [r3]
 8004028:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800402a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800402c:	f023 0301 	bic.w	r3, r3, #1
 8004030:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	3308      	adds	r3, #8
 800403a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800403e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004042:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004044:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004046:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800404a:	e841 2300 	strex	r3, r2, [r1]
 800404e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004050:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004052:	2b00      	cmp	r3, #0
 8004054:	d1e1      	bne.n	800401a <HAL_UART_IRQHandler+0x36a>
=======
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004e36:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	f000 8167 	beq.w	800510e <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004e46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	f080 815f 	bcs.w	800510e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004e56:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 0320 	and.w	r3, r3, #32
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	f040 8086 	bne.w	8004f78 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e74:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e78:	e853 3f00 	ldrex	r3, [r3]
 8004e7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004e80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	461a      	mov	r2, r3
 8004e92:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004e96:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004e9a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e9e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004ea2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004ea6:	e841 2300 	strex	r3, r2, [r1]
 8004eaa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004eae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d1da      	bne.n	8004e6c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	3308      	adds	r3, #8
 8004ebc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ebe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ec0:	e853 3f00 	ldrex	r3, [r3]
 8004ec4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004ec6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ec8:	f023 0301 	bic.w	r3, r3, #1
 8004ecc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	3308      	adds	r3, #8
 8004ed6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004eda:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004ede:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004ee2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004ee6:	e841 2300 	strex	r3, r2, [r1]
 8004eea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004eec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d1e1      	bne.n	8004eb6 <HAL_UART_IRQHandler+0x36a>
>>>>>>> Stashed changes

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
<<<<<<< Updated upstream
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	3308      	adds	r3, #8
 800405c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800405e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004060:	e853 3f00 	ldrex	r3, [r3]
 8004064:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004066:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004068:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800406c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	3308      	adds	r3, #8
 8004076:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800407a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800407c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800407e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004080:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004082:	e841 2300 	strex	r3, r2, [r1]
 8004086:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004088:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800408a:	2b00      	cmp	r3, #0
 800408c:	d1e3      	bne.n	8004056 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2220      	movs	r2, #32
 8004092:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040a4:	e853 3f00 	ldrex	r3, [r3]
 80040a8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80040aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040ac:	f023 0310 	bic.w	r3, r3, #16
 80040b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	461a      	mov	r2, r3
 80040ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80040be:	65bb      	str	r3, [r7, #88]	; 0x58
 80040c0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80040c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80040c6:	e841 2300 	strex	r3, r2, [r1]
 80040ca:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80040cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d1e4      	bne.n	800409c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040d6:	4618      	mov	r0, r3
 80040d8:	f7fd f97e 	bl	80013d8 <HAL_DMA_Abort>
=======
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	3308      	adds	r3, #8
 8004ef8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004efa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004efc:	e853 3f00 	ldrex	r3, [r3]
 8004f00:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004f02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	3308      	adds	r3, #8
 8004f12:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004f16:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004f18:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f1a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004f1c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004f1e:	e841 2300 	strex	r3, r2, [r1]
 8004f22:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004f24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d1e3      	bne.n	8004ef2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2220      	movs	r2, #32
 8004f2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f40:	e853 3f00 	ldrex	r3, [r3]
 8004f44:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004f46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f48:	f023 0310 	bic.w	r3, r3, #16
 8004f4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	461a      	mov	r2, r3
 8004f56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004f5a:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f5c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f5e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004f60:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004f62:	e841 2300 	strex	r3, r2, [r1]
 8004f66:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004f68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d1e4      	bne.n	8004f38 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f72:	4618      	mov	r0, r3
 8004f74:	f7fc fd26 	bl	80019c4 <HAL_DMA_Abort>
>>>>>>> Stashed changes
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
<<<<<<< Updated upstream
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2202      	movs	r2, #2
 80040e0:	665a      	str	r2, [r3, #100]	; 0x64
=======
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2202      	movs	r2, #2
 8004f7c:	665a      	str	r2, [r3, #100]	; 0x64
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
<<<<<<< Updated upstream
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	4619      	mov	r1, r3
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 f8d8 	bl	80042ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80040fc:	e0b9      	b.n	8004272 <HAL_UART_IRQHandler+0x5c2>
=======
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	4619      	mov	r1, r3
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f000 f8e2 	bl	800515c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004f98:	e0b9      	b.n	800510e <HAL_UART_IRQHandler+0x5c2>
>>>>>>> Stashed changes
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
<<<<<<< Updated upstream
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800410a:	b29b      	uxth	r3, r3
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004118:	b29b      	uxth	r3, r3
 800411a:	2b00      	cmp	r3, #0
 800411c:	f000 80ab 	beq.w	8004276 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8004120:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004124:	2b00      	cmp	r3, #0
 8004126:	f000 80a6 	beq.w	8004276 <HAL_UART_IRQHandler+0x5c6>
=======
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	f000 80ab 	beq.w	8005112 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8004fbc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	f000 80a6 	beq.w	8005112 <HAL_UART_IRQHandler+0x5c6>
>>>>>>> Stashed changes

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
<<<<<<< Updated upstream
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004132:	e853 3f00 	ldrex	r3, [r3]
 8004136:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800413a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800413e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	461a      	mov	r2, r3
 8004148:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800414c:	647b      	str	r3, [r7, #68]	; 0x44
 800414e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004150:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004152:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004154:	e841 2300 	strex	r3, r2, [r1]
 8004158:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800415a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800415c:	2b00      	cmp	r3, #0
 800415e:	d1e4      	bne.n	800412a <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	3308      	adds	r3, #8
 8004166:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416a:	e853 3f00 	ldrex	r3, [r3]
 800416e:	623b      	str	r3, [r7, #32]
   return(result);
 8004170:	6a3b      	ldr	r3, [r7, #32]
 8004172:	f023 0301 	bic.w	r3, r3, #1
 8004176:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	3308      	adds	r3, #8
 8004180:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004184:	633a      	str	r2, [r7, #48]	; 0x30
 8004186:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004188:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800418a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800418c:	e841 2300 	strex	r3, r2, [r1]
 8004190:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004194:	2b00      	cmp	r3, #0
 8004196:	d1e3      	bne.n	8004160 <HAL_UART_IRQHandler+0x4b0>
=======
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fce:	e853 3f00 	ldrex	r3, [r3]
 8004fd2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fd6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004fda:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004fe8:	647b      	str	r3, [r7, #68]	; 0x44
 8004fea:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004fee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ff0:	e841 2300 	strex	r3, r2, [r1]
 8004ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004ff6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d1e4      	bne.n	8004fc6 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	3308      	adds	r3, #8
 8005002:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005006:	e853 3f00 	ldrex	r3, [r3]
 800500a:	623b      	str	r3, [r7, #32]
   return(result);
 800500c:	6a3b      	ldr	r3, [r7, #32]
 800500e:	f023 0301 	bic.w	r3, r3, #1
 8005012:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	3308      	adds	r3, #8
 800501c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005020:	633a      	str	r2, [r7, #48]	; 0x30
 8005022:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005024:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005026:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005028:	e841 2300 	strex	r3, r2, [r1]
 800502c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800502e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005030:	2b00      	cmp	r3, #0
 8005032:	d1e3      	bne.n	8004ffc <HAL_UART_IRQHandler+0x4b0>
>>>>>>> Stashed changes
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
<<<<<<< Updated upstream
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2220      	movs	r2, #32
 800419c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	e853 3f00 	ldrex	r3, [r3]
 80041b8:	60fb      	str	r3, [r7, #12]
   return(result);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f023 0310 	bic.w	r3, r3, #16
 80041c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	461a      	mov	r2, r3
 80041ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80041ce:	61fb      	str	r3, [r7, #28]
 80041d0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d2:	69b9      	ldr	r1, [r7, #24]
 80041d4:	69fa      	ldr	r2, [r7, #28]
 80041d6:	e841 2300 	strex	r3, r2, [r1]
 80041da:	617b      	str	r3, [r7, #20]
   return(result);
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d1e4      	bne.n	80041ac <HAL_UART_IRQHandler+0x4fc>
=======
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2220      	movs	r2, #32
 8005038:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	e853 3f00 	ldrex	r3, [r3]
 8005054:	60fb      	str	r3, [r7, #12]
   return(result);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	f023 0310 	bic.w	r3, r3, #16
 800505c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	461a      	mov	r2, r3
 8005066:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800506a:	61fb      	str	r3, [r7, #28]
 800506c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800506e:	69b9      	ldr	r1, [r7, #24]
 8005070:	69fa      	ldr	r2, [r7, #28]
 8005072:	e841 2300 	strex	r3, r2, [r1]
 8005076:	617b      	str	r3, [r7, #20]
   return(result);
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d1e4      	bne.n	8005048 <HAL_UART_IRQHandler+0x4fc>
>>>>>>> Stashed changes

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
<<<<<<< Updated upstream
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2202      	movs	r2, #2
 80041e6:	665a      	str	r2, [r3, #100]	; 0x64
=======
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2202      	movs	r2, #2
 8005082:	665a      	str	r2, [r3, #100]	; 0x64
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
<<<<<<< Updated upstream
 80041e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80041ec:	4619      	mov	r1, r3
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 f85c 	bl	80042ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80041f4:	e03f      	b.n	8004276 <HAL_UART_IRQHandler+0x5c6>
=======
 8005084:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005088:	4619      	mov	r1, r3
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f000 f866 	bl	800515c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005090:	e03f      	b.n	8005112 <HAL_UART_IRQHandler+0x5c6>
>>>>>>> Stashed changes
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
<<<<<<< Updated upstream
 80041f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d00e      	beq.n	8004220 <HAL_UART_IRQHandler+0x570>
 8004202:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004206:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d008      	beq.n	8004220 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004216:	621a      	str	r2, [r3, #32]
=======
 8005092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005096:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00e      	beq.n	80050bc <HAL_UART_IRQHandler+0x570>
 800509e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d008      	beq.n	80050bc <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80050b2:	621a      	str	r2, [r3, #32]
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
<<<<<<< Updated upstream
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f000 ff85 	bl	8005128 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800421e:	e02d      	b.n	800427c <HAL_UART_IRQHandler+0x5cc>
=======
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f001 f949 	bl	800634c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80050ba:	e02d      	b.n	8005118 <HAL_UART_IRQHandler+0x5cc>
>>>>>>> Stashed changes
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
<<<<<<< Updated upstream
 8004220:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004224:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004228:	2b00      	cmp	r3, #0
 800422a:	d00e      	beq.n	800424a <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800422c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004230:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004234:	2b00      	cmp	r3, #0
 8004236:	d008      	beq.n	800424a <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800423c:	2b00      	cmp	r3, #0
 800423e:	d01c      	beq.n	800427a <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	4798      	blx	r3
    }
    return;
 8004248:	e017      	b.n	800427a <HAL_UART_IRQHandler+0x5ca>
=======
 80050bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d00e      	beq.n	80050e6 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80050c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d008      	beq.n	80050e6 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d01c      	beq.n	8005116 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	4798      	blx	r3
    }
    return;
 80050e4:	e017      	b.n	8005116 <HAL_UART_IRQHandler+0x5ca>
>>>>>>> Stashed changes
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
<<<<<<< Updated upstream
 800424a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800424e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004252:	2b00      	cmp	r3, #0
 8004254:	d012      	beq.n	800427c <HAL_UART_IRQHandler+0x5cc>
 8004256:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800425a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800425e:	2b00      	cmp	r3, #0
 8004260:	d00c      	beq.n	800427c <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 fd7a 	bl	8004d5c <UART_EndTransmit_IT>
    return;
 8004268:	e008      	b.n	800427c <HAL_UART_IRQHandler+0x5cc>
      return;
 800426a:	bf00      	nop
 800426c:	e006      	b.n	800427c <HAL_UART_IRQHandler+0x5cc>
    return;
 800426e:	bf00      	nop
 8004270:	e004      	b.n	800427c <HAL_UART_IRQHandler+0x5cc>
      return;
 8004272:	bf00      	nop
 8004274:	e002      	b.n	800427c <HAL_UART_IRQHandler+0x5cc>
      return;
 8004276:	bf00      	nop
 8004278:	e000      	b.n	800427c <HAL_UART_IRQHandler+0x5cc>
    return;
 800427a:	bf00      	nop
=======
 80050e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d012      	beq.n	8005118 <HAL_UART_IRQHandler+0x5cc>
 80050f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d00c      	beq.n	8005118 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f000 ff3e 	bl	8005f80 <UART_EndTransmit_IT>
    return;
 8005104:	e008      	b.n	8005118 <HAL_UART_IRQHandler+0x5cc>
      return;
 8005106:	bf00      	nop
 8005108:	e006      	b.n	8005118 <HAL_UART_IRQHandler+0x5cc>
    return;
 800510a:	bf00      	nop
 800510c:	e004      	b.n	8005118 <HAL_UART_IRQHandler+0x5cc>
      return;
 800510e:	bf00      	nop
 8005110:	e002      	b.n	8005118 <HAL_UART_IRQHandler+0x5cc>
      return;
 8005112:	bf00      	nop
 8005114:	e000      	b.n	8005118 <HAL_UART_IRQHandler+0x5cc>
    return;
 8005116:	bf00      	nop
>>>>>>> Stashed changes
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
<<<<<<< Updated upstream
 800427c:	37e8      	adds	r7, #232	; 0xe8
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop

08004284 <HAL_UART_TxCpltCallback>:
=======
 8005118:	37e8      	adds	r7, #232	; 0xe8
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
 800511e:	bf00      	nop

08005120 <HAL_UART_TxCpltCallback>:
>>>>>>> Stashed changes
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
=======
 8005120:	b480      	push	{r7}
 8005122:	b083      	sub	sp, #12
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
<<<<<<< Updated upstream
 800428c:	bf00      	nop
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <HAL_UART_ErrorCallback>:
=======
 8005128:	bf00      	nop
 800512a:	370c      	adds	r7, #12
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800513c:	bf00      	nop
 800513e:	370c      	adds	r7, #12
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr

08005148 <HAL_UART_ErrorCallback>:
>>>>>>> Stashed changes
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
=======
 8005148:	b480      	push	{r7}
 800514a:	b083      	sub	sp, #12
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
<<<<<<< Updated upstream
 80042a0:	bf00      	nop
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <HAL_UARTEx_RxEventCallback>:
=======
 8005150:	bf00      	nop
 8005152:	370c      	adds	r7, #12
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr

0800515c <HAL_UARTEx_RxEventCallback>:
>>>>>>> Stashed changes
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
<<<<<<< Updated upstream
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	460b      	mov	r3, r1
 80042b6:	807b      	strh	r3, [r7, #2]
=======
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	460b      	mov	r3, r1
 8005166:	807b      	strh	r3, [r7, #2]
>>>>>>> Stashed changes
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
<<<<<<< Updated upstream
 80042b8:	bf00      	nop
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <UART_SetConfig>:
=======
 8005168:	bf00      	nop
 800516a:	370c      	adds	r7, #12
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <UART_SetConfig>:
>>>>>>> Stashed changes
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 80042c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042c8:	b08a      	sub	sp, #40	; 0x28
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	60f8      	str	r0, [r7, #12]
=======
 8005174:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005178:	b08a      	sub	sp, #40	; 0x28
 800517a:	af00      	add	r7, sp, #0
 800517c:	60f8      	str	r0, [r7, #12]
>>>>>>> Stashed changes
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
<<<<<<< Updated upstream
 80042ce:	2300      	movs	r3, #0
 80042d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
=======
 800517e:	2300      	movs	r3, #0
 8005180:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
>>>>>>> Stashed changes
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
<<<<<<< Updated upstream
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	689a      	ldr	r2, [r3, #8]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	691b      	ldr	r3, [r3, #16]
 80042dc:	431a      	orrs	r2, r3
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	695b      	ldr	r3, [r3, #20]
 80042e2:	431a      	orrs	r2, r3
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	69db      	ldr	r3, [r3, #28]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	4b9e      	ldr	r3, [pc, #632]	; (800456c <UART_SetConfig+0x2a8>)
 80042f4:	4013      	ands	r3, r2
 80042f6:	68fa      	ldr	r2, [r7, #12]
 80042f8:	6812      	ldr	r2, [r2, #0]
 80042fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80042fc:	430b      	orrs	r3, r1
 80042fe:	6013      	str	r3, [r2, #0]
=======
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	689a      	ldr	r2, [r3, #8]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	691b      	ldr	r3, [r3, #16]
 800518c:	431a      	orrs	r2, r3
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	695b      	ldr	r3, [r3, #20]
 8005192:	431a      	orrs	r2, r3
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	69db      	ldr	r3, [r3, #28]
 8005198:	4313      	orrs	r3, r2
 800519a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	4b9e      	ldr	r3, [pc, #632]	; (800541c <UART_SetConfig+0x2a8>)
 80051a4:	4013      	ands	r3, r2
 80051a6:	68fa      	ldr	r2, [r7, #12]
 80051a8:	6812      	ldr	r2, [r2, #0]
 80051aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80051ac:	430b      	orrs	r3, r1
 80051ae:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
<<<<<<< Updated upstream
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	68da      	ldr	r2, [r3, #12]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	430a      	orrs	r2, r1
 8004314:	605a      	str	r2, [r3, #4]
=======
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	68da      	ldr	r2, [r3, #12]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	430a      	orrs	r2, r1
 80051c4:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
<<<<<<< Updated upstream
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a93      	ldr	r2, [pc, #588]	; (8004570 <UART_SetConfig+0x2ac>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d004      	beq.n	8004330 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6a1b      	ldr	r3, [r3, #32]
 800432a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800432c:	4313      	orrs	r3, r2
 800432e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004340:	430a      	orrs	r2, r1
 8004342:	609a      	str	r2, [r3, #8]
=======
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	699b      	ldr	r3, [r3, #24]
 80051ca:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a93      	ldr	r2, [pc, #588]	; (8005420 <UART_SetConfig+0x2ac>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d004      	beq.n	80051e0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6a1b      	ldr	r3, [r3, #32]
 80051da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051dc:	4313      	orrs	r3, r2
 80051de:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051f0:	430a      	orrs	r2, r1
 80051f2:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
<<<<<<< Updated upstream
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a8a      	ldr	r2, [pc, #552]	; (8004574 <UART_SetConfig+0x2b0>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d126      	bne.n	800439c <UART_SetConfig+0xd8>
 800434e:	4b8a      	ldr	r3, [pc, #552]	; (8004578 <UART_SetConfig+0x2b4>)
 8004350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004354:	f003 0303 	and.w	r3, r3, #3
 8004358:	2b03      	cmp	r3, #3
 800435a:	d81b      	bhi.n	8004394 <UART_SetConfig+0xd0>
 800435c:	a201      	add	r2, pc, #4	; (adr r2, 8004364 <UART_SetConfig+0xa0>)
 800435e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004362:	bf00      	nop
 8004364:	08004375 	.word	0x08004375
 8004368:	08004385 	.word	0x08004385
 800436c:	0800437d 	.word	0x0800437d
 8004370:	0800438d 	.word	0x0800438d
 8004374:	2301      	movs	r3, #1
 8004376:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800437a:	e0ab      	b.n	80044d4 <UART_SetConfig+0x210>
 800437c:	2302      	movs	r3, #2
 800437e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004382:	e0a7      	b.n	80044d4 <UART_SetConfig+0x210>
 8004384:	2304      	movs	r3, #4
 8004386:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800438a:	e0a3      	b.n	80044d4 <UART_SetConfig+0x210>
 800438c:	2308      	movs	r3, #8
 800438e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004392:	e09f      	b.n	80044d4 <UART_SetConfig+0x210>
 8004394:	2310      	movs	r3, #16
 8004396:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800439a:	e09b      	b.n	80044d4 <UART_SetConfig+0x210>
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a76      	ldr	r2, [pc, #472]	; (800457c <UART_SetConfig+0x2b8>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d138      	bne.n	8004418 <UART_SetConfig+0x154>
 80043a6:	4b74      	ldr	r3, [pc, #464]	; (8004578 <UART_SetConfig+0x2b4>)
 80043a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ac:	f003 030c 	and.w	r3, r3, #12
 80043b0:	2b0c      	cmp	r3, #12
 80043b2:	d82d      	bhi.n	8004410 <UART_SetConfig+0x14c>
 80043b4:	a201      	add	r2, pc, #4	; (adr r2, 80043bc <UART_SetConfig+0xf8>)
 80043b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ba:	bf00      	nop
 80043bc:	080043f1 	.word	0x080043f1
 80043c0:	08004411 	.word	0x08004411
 80043c4:	08004411 	.word	0x08004411
 80043c8:	08004411 	.word	0x08004411
 80043cc:	08004401 	.word	0x08004401
 80043d0:	08004411 	.word	0x08004411
 80043d4:	08004411 	.word	0x08004411
 80043d8:	08004411 	.word	0x08004411
 80043dc:	080043f9 	.word	0x080043f9
 80043e0:	08004411 	.word	0x08004411
 80043e4:	08004411 	.word	0x08004411
 80043e8:	08004411 	.word	0x08004411
 80043ec:	08004409 	.word	0x08004409
 80043f0:	2300      	movs	r3, #0
 80043f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043f6:	e06d      	b.n	80044d4 <UART_SetConfig+0x210>
 80043f8:	2302      	movs	r3, #2
 80043fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043fe:	e069      	b.n	80044d4 <UART_SetConfig+0x210>
 8004400:	2304      	movs	r3, #4
 8004402:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004406:	e065      	b.n	80044d4 <UART_SetConfig+0x210>
 8004408:	2308      	movs	r3, #8
 800440a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800440e:	e061      	b.n	80044d4 <UART_SetConfig+0x210>
 8004410:	2310      	movs	r3, #16
 8004412:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004416:	e05d      	b.n	80044d4 <UART_SetConfig+0x210>
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a58      	ldr	r2, [pc, #352]	; (8004580 <UART_SetConfig+0x2bc>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d125      	bne.n	800446e <UART_SetConfig+0x1aa>
 8004422:	4b55      	ldr	r3, [pc, #340]	; (8004578 <UART_SetConfig+0x2b4>)
 8004424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004428:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800442c:	2b30      	cmp	r3, #48	; 0x30
 800442e:	d016      	beq.n	800445e <UART_SetConfig+0x19a>
 8004430:	2b30      	cmp	r3, #48	; 0x30
 8004432:	d818      	bhi.n	8004466 <UART_SetConfig+0x1a2>
 8004434:	2b20      	cmp	r3, #32
 8004436:	d00a      	beq.n	800444e <UART_SetConfig+0x18a>
 8004438:	2b20      	cmp	r3, #32
 800443a:	d814      	bhi.n	8004466 <UART_SetConfig+0x1a2>
 800443c:	2b00      	cmp	r3, #0
 800443e:	d002      	beq.n	8004446 <UART_SetConfig+0x182>
 8004440:	2b10      	cmp	r3, #16
 8004442:	d008      	beq.n	8004456 <UART_SetConfig+0x192>
 8004444:	e00f      	b.n	8004466 <UART_SetConfig+0x1a2>
 8004446:	2300      	movs	r3, #0
 8004448:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800444c:	e042      	b.n	80044d4 <UART_SetConfig+0x210>
 800444e:	2302      	movs	r3, #2
 8004450:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004454:	e03e      	b.n	80044d4 <UART_SetConfig+0x210>
 8004456:	2304      	movs	r3, #4
 8004458:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800445c:	e03a      	b.n	80044d4 <UART_SetConfig+0x210>
 800445e:	2308      	movs	r3, #8
 8004460:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004464:	e036      	b.n	80044d4 <UART_SetConfig+0x210>
 8004466:	2310      	movs	r3, #16
 8004468:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800446c:	e032      	b.n	80044d4 <UART_SetConfig+0x210>
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a3f      	ldr	r2, [pc, #252]	; (8004570 <UART_SetConfig+0x2ac>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d12a      	bne.n	80044ce <UART_SetConfig+0x20a>
 8004478:	4b3f      	ldr	r3, [pc, #252]	; (8004578 <UART_SetConfig+0x2b4>)
 800447a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800447e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004482:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004486:	d01a      	beq.n	80044be <UART_SetConfig+0x1fa>
 8004488:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800448c:	d81b      	bhi.n	80044c6 <UART_SetConfig+0x202>
 800448e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004492:	d00c      	beq.n	80044ae <UART_SetConfig+0x1ea>
 8004494:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004498:	d815      	bhi.n	80044c6 <UART_SetConfig+0x202>
 800449a:	2b00      	cmp	r3, #0
 800449c:	d003      	beq.n	80044a6 <UART_SetConfig+0x1e2>
 800449e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044a2:	d008      	beq.n	80044b6 <UART_SetConfig+0x1f2>
 80044a4:	e00f      	b.n	80044c6 <UART_SetConfig+0x202>
 80044a6:	2300      	movs	r3, #0
 80044a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044ac:	e012      	b.n	80044d4 <UART_SetConfig+0x210>
 80044ae:	2302      	movs	r3, #2
 80044b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044b4:	e00e      	b.n	80044d4 <UART_SetConfig+0x210>
 80044b6:	2304      	movs	r3, #4
 80044b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044bc:	e00a      	b.n	80044d4 <UART_SetConfig+0x210>
 80044be:	2308      	movs	r3, #8
 80044c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044c4:	e006      	b.n	80044d4 <UART_SetConfig+0x210>
 80044c6:	2310      	movs	r3, #16
 80044c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044cc:	e002      	b.n	80044d4 <UART_SetConfig+0x210>
 80044ce:	2310      	movs	r3, #16
 80044d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a25      	ldr	r2, [pc, #148]	; (8004570 <UART_SetConfig+0x2ac>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	f040 808a 	bne.w	80045f4 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80044e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80044e4:	2b08      	cmp	r3, #8
 80044e6:	d824      	bhi.n	8004532 <UART_SetConfig+0x26e>
 80044e8:	a201      	add	r2, pc, #4	; (adr r2, 80044f0 <UART_SetConfig+0x22c>)
 80044ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ee:	bf00      	nop
 80044f0:	08004515 	.word	0x08004515
 80044f4:	08004533 	.word	0x08004533
 80044f8:	0800451d 	.word	0x0800451d
 80044fc:	08004533 	.word	0x08004533
 8004500:	08004523 	.word	0x08004523
 8004504:	08004533 	.word	0x08004533
 8004508:	08004533 	.word	0x08004533
 800450c:	08004533 	.word	0x08004533
 8004510:	0800452b 	.word	0x0800452b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004514:	f7fe fdf2 	bl	80030fc <HAL_RCC_GetPCLK1Freq>
 8004518:	61f8      	str	r0, [r7, #28]
        break;
 800451a:	e010      	b.n	800453e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800451c:	4b19      	ldr	r3, [pc, #100]	; (8004584 <UART_SetConfig+0x2c0>)
 800451e:	61fb      	str	r3, [r7, #28]
        break;
 8004520:	e00d      	b.n	800453e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004522:	f7fe fd53 	bl	8002fcc <HAL_RCC_GetSysClockFreq>
 8004526:	61f8      	str	r0, [r7, #28]
        break;
 8004528:	e009      	b.n	800453e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800452a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800452e:	61fb      	str	r3, [r7, #28]
        break;
 8004530:	e005      	b.n	800453e <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8004532:	2300      	movs	r3, #0
 8004534:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800453c:	bf00      	nop
=======
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a8a      	ldr	r2, [pc, #552]	; (8005424 <UART_SetConfig+0x2b0>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d126      	bne.n	800524c <UART_SetConfig+0xd8>
 80051fe:	4b8a      	ldr	r3, [pc, #552]	; (8005428 <UART_SetConfig+0x2b4>)
 8005200:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005204:	f003 0303 	and.w	r3, r3, #3
 8005208:	2b03      	cmp	r3, #3
 800520a:	d81b      	bhi.n	8005244 <UART_SetConfig+0xd0>
 800520c:	a201      	add	r2, pc, #4	; (adr r2, 8005214 <UART_SetConfig+0xa0>)
 800520e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005212:	bf00      	nop
 8005214:	08005225 	.word	0x08005225
 8005218:	08005235 	.word	0x08005235
 800521c:	0800522d 	.word	0x0800522d
 8005220:	0800523d 	.word	0x0800523d
 8005224:	2301      	movs	r3, #1
 8005226:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800522a:	e0ab      	b.n	8005384 <UART_SetConfig+0x210>
 800522c:	2302      	movs	r3, #2
 800522e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005232:	e0a7      	b.n	8005384 <UART_SetConfig+0x210>
 8005234:	2304      	movs	r3, #4
 8005236:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800523a:	e0a3      	b.n	8005384 <UART_SetConfig+0x210>
 800523c:	2308      	movs	r3, #8
 800523e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005242:	e09f      	b.n	8005384 <UART_SetConfig+0x210>
 8005244:	2310      	movs	r3, #16
 8005246:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800524a:	e09b      	b.n	8005384 <UART_SetConfig+0x210>
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a76      	ldr	r2, [pc, #472]	; (800542c <UART_SetConfig+0x2b8>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d138      	bne.n	80052c8 <UART_SetConfig+0x154>
 8005256:	4b74      	ldr	r3, [pc, #464]	; (8005428 <UART_SetConfig+0x2b4>)
 8005258:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800525c:	f003 030c 	and.w	r3, r3, #12
 8005260:	2b0c      	cmp	r3, #12
 8005262:	d82d      	bhi.n	80052c0 <UART_SetConfig+0x14c>
 8005264:	a201      	add	r2, pc, #4	; (adr r2, 800526c <UART_SetConfig+0xf8>)
 8005266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800526a:	bf00      	nop
 800526c:	080052a1 	.word	0x080052a1
 8005270:	080052c1 	.word	0x080052c1
 8005274:	080052c1 	.word	0x080052c1
 8005278:	080052c1 	.word	0x080052c1
 800527c:	080052b1 	.word	0x080052b1
 8005280:	080052c1 	.word	0x080052c1
 8005284:	080052c1 	.word	0x080052c1
 8005288:	080052c1 	.word	0x080052c1
 800528c:	080052a9 	.word	0x080052a9
 8005290:	080052c1 	.word	0x080052c1
 8005294:	080052c1 	.word	0x080052c1
 8005298:	080052c1 	.word	0x080052c1
 800529c:	080052b9 	.word	0x080052b9
 80052a0:	2300      	movs	r3, #0
 80052a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052a6:	e06d      	b.n	8005384 <UART_SetConfig+0x210>
 80052a8:	2302      	movs	r3, #2
 80052aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052ae:	e069      	b.n	8005384 <UART_SetConfig+0x210>
 80052b0:	2304      	movs	r3, #4
 80052b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052b6:	e065      	b.n	8005384 <UART_SetConfig+0x210>
 80052b8:	2308      	movs	r3, #8
 80052ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052be:	e061      	b.n	8005384 <UART_SetConfig+0x210>
 80052c0:	2310      	movs	r3, #16
 80052c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052c6:	e05d      	b.n	8005384 <UART_SetConfig+0x210>
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a58      	ldr	r2, [pc, #352]	; (8005430 <UART_SetConfig+0x2bc>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d125      	bne.n	800531e <UART_SetConfig+0x1aa>
 80052d2:	4b55      	ldr	r3, [pc, #340]	; (8005428 <UART_SetConfig+0x2b4>)
 80052d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052d8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80052dc:	2b30      	cmp	r3, #48	; 0x30
 80052de:	d016      	beq.n	800530e <UART_SetConfig+0x19a>
 80052e0:	2b30      	cmp	r3, #48	; 0x30
 80052e2:	d818      	bhi.n	8005316 <UART_SetConfig+0x1a2>
 80052e4:	2b20      	cmp	r3, #32
 80052e6:	d00a      	beq.n	80052fe <UART_SetConfig+0x18a>
 80052e8:	2b20      	cmp	r3, #32
 80052ea:	d814      	bhi.n	8005316 <UART_SetConfig+0x1a2>
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d002      	beq.n	80052f6 <UART_SetConfig+0x182>
 80052f0:	2b10      	cmp	r3, #16
 80052f2:	d008      	beq.n	8005306 <UART_SetConfig+0x192>
 80052f4:	e00f      	b.n	8005316 <UART_SetConfig+0x1a2>
 80052f6:	2300      	movs	r3, #0
 80052f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052fc:	e042      	b.n	8005384 <UART_SetConfig+0x210>
 80052fe:	2302      	movs	r3, #2
 8005300:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005304:	e03e      	b.n	8005384 <UART_SetConfig+0x210>
 8005306:	2304      	movs	r3, #4
 8005308:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800530c:	e03a      	b.n	8005384 <UART_SetConfig+0x210>
 800530e:	2308      	movs	r3, #8
 8005310:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005314:	e036      	b.n	8005384 <UART_SetConfig+0x210>
 8005316:	2310      	movs	r3, #16
 8005318:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800531c:	e032      	b.n	8005384 <UART_SetConfig+0x210>
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a3f      	ldr	r2, [pc, #252]	; (8005420 <UART_SetConfig+0x2ac>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d12a      	bne.n	800537e <UART_SetConfig+0x20a>
 8005328:	4b3f      	ldr	r3, [pc, #252]	; (8005428 <UART_SetConfig+0x2b4>)
 800532a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800532e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005332:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005336:	d01a      	beq.n	800536e <UART_SetConfig+0x1fa>
 8005338:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800533c:	d81b      	bhi.n	8005376 <UART_SetConfig+0x202>
 800533e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005342:	d00c      	beq.n	800535e <UART_SetConfig+0x1ea>
 8005344:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005348:	d815      	bhi.n	8005376 <UART_SetConfig+0x202>
 800534a:	2b00      	cmp	r3, #0
 800534c:	d003      	beq.n	8005356 <UART_SetConfig+0x1e2>
 800534e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005352:	d008      	beq.n	8005366 <UART_SetConfig+0x1f2>
 8005354:	e00f      	b.n	8005376 <UART_SetConfig+0x202>
 8005356:	2300      	movs	r3, #0
 8005358:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800535c:	e012      	b.n	8005384 <UART_SetConfig+0x210>
 800535e:	2302      	movs	r3, #2
 8005360:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005364:	e00e      	b.n	8005384 <UART_SetConfig+0x210>
 8005366:	2304      	movs	r3, #4
 8005368:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800536c:	e00a      	b.n	8005384 <UART_SetConfig+0x210>
 800536e:	2308      	movs	r3, #8
 8005370:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005374:	e006      	b.n	8005384 <UART_SetConfig+0x210>
 8005376:	2310      	movs	r3, #16
 8005378:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800537c:	e002      	b.n	8005384 <UART_SetConfig+0x210>
 800537e:	2310      	movs	r3, #16
 8005380:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a25      	ldr	r2, [pc, #148]	; (8005420 <UART_SetConfig+0x2ac>)
 800538a:	4293      	cmp	r3, r2
 800538c:	f040 808a 	bne.w	80054a4 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005390:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005394:	2b08      	cmp	r3, #8
 8005396:	d824      	bhi.n	80053e2 <UART_SetConfig+0x26e>
 8005398:	a201      	add	r2, pc, #4	; (adr r2, 80053a0 <UART_SetConfig+0x22c>)
 800539a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800539e:	bf00      	nop
 80053a0:	080053c5 	.word	0x080053c5
 80053a4:	080053e3 	.word	0x080053e3
 80053a8:	080053cd 	.word	0x080053cd
 80053ac:	080053e3 	.word	0x080053e3
 80053b0:	080053d3 	.word	0x080053d3
 80053b4:	080053e3 	.word	0x080053e3
 80053b8:	080053e3 	.word	0x080053e3
 80053bc:	080053e3 	.word	0x080053e3
 80053c0:	080053db 	.word	0x080053db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053c4:	f7fe fd0a 	bl	8003ddc <HAL_RCC_GetPCLK1Freq>
 80053c8:	61f8      	str	r0, [r7, #28]
        break;
 80053ca:	e010      	b.n	80053ee <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053cc:	4b19      	ldr	r3, [pc, #100]	; (8005434 <UART_SetConfig+0x2c0>)
 80053ce:	61fb      	str	r3, [r7, #28]
        break;
 80053d0:	e00d      	b.n	80053ee <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053d2:	f7fe fc6b 	bl	8003cac <HAL_RCC_GetSysClockFreq>
 80053d6:	61f8      	str	r0, [r7, #28]
        break;
 80053d8:	e009      	b.n	80053ee <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053de:	61fb      	str	r3, [r7, #28]
        break;
 80053e0:	e005      	b.n	80053ee <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 80053e2:	2300      	movs	r3, #0
 80053e4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80053ec:	bf00      	nop
>>>>>>> Stashed changes
    }

    /* If proper clock source reported */
    if (pclk != 0U)
<<<<<<< Updated upstream
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	2b00      	cmp	r3, #0
 8004542:	f000 8109 	beq.w	8004758 <UART_SetConfig+0x494>
=======
 80053ee:	69fb      	ldr	r3, [r7, #28]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	f000 8109 	beq.w	8005608 <UART_SetConfig+0x494>
>>>>>>> Stashed changes
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
<<<<<<< Updated upstream
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	685a      	ldr	r2, [r3, #4]
 800454a:	4613      	mov	r3, r2
 800454c:	005b      	lsls	r3, r3, #1
 800454e:	4413      	add	r3, r2
 8004550:	69fa      	ldr	r2, [r7, #28]
 8004552:	429a      	cmp	r2, r3
 8004554:	d305      	bcc.n	8004562 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800455c:	69fa      	ldr	r2, [r7, #28]
 800455e:	429a      	cmp	r2, r3
 8004560:	d912      	bls.n	8004588 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004568:	e0f6      	b.n	8004758 <UART_SetConfig+0x494>
 800456a:	bf00      	nop
 800456c:	efff69f3 	.word	0xefff69f3
 8004570:	40008000 	.word	0x40008000
 8004574:	40013800 	.word	0x40013800
 8004578:	40021000 	.word	0x40021000
 800457c:	40004400 	.word	0x40004400
 8004580:	40004800 	.word	0x40004800
 8004584:	00f42400 	.word	0x00f42400
=======
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	685a      	ldr	r2, [r3, #4]
 80053fa:	4613      	mov	r3, r2
 80053fc:	005b      	lsls	r3, r3, #1
 80053fe:	4413      	add	r3, r2
 8005400:	69fa      	ldr	r2, [r7, #28]
 8005402:	429a      	cmp	r2, r3
 8005404:	d305      	bcc.n	8005412 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800540c:	69fa      	ldr	r2, [r7, #28]
 800540e:	429a      	cmp	r2, r3
 8005410:	d912      	bls.n	8005438 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005418:	e0f6      	b.n	8005608 <UART_SetConfig+0x494>
 800541a:	bf00      	nop
 800541c:	efff69f3 	.word	0xefff69f3
 8005420:	40008000 	.word	0x40008000
 8005424:	40013800 	.word	0x40013800
 8005428:	40021000 	.word	0x40021000
 800542c:	40004400 	.word	0x40004400
 8005430:	40004800 	.word	0x40004800
 8005434:	00f42400 	.word	0x00f42400
>>>>>>> Stashed changes
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
<<<<<<< Updated upstream
 8004588:	69fb      	ldr	r3, [r7, #28]
 800458a:	2200      	movs	r2, #0
 800458c:	461c      	mov	r4, r3
 800458e:	4615      	mov	r5, r2
 8004590:	f04f 0200 	mov.w	r2, #0
 8004594:	f04f 0300 	mov.w	r3, #0
 8004598:	022b      	lsls	r3, r5, #8
 800459a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800459e:	0222      	lsls	r2, r4, #8
 80045a0:	68f9      	ldr	r1, [r7, #12]
 80045a2:	6849      	ldr	r1, [r1, #4]
 80045a4:	0849      	lsrs	r1, r1, #1
 80045a6:	2000      	movs	r0, #0
 80045a8:	4688      	mov	r8, r1
 80045aa:	4681      	mov	r9, r0
 80045ac:	eb12 0a08 	adds.w	sl, r2, r8
 80045b0:	eb43 0b09 	adc.w	fp, r3, r9
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	603b      	str	r3, [r7, #0]
 80045bc:	607a      	str	r2, [r7, #4]
 80045be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045c2:	4650      	mov	r0, sl
 80045c4:	4659      	mov	r1, fp
 80045c6:	f7fb fe53 	bl	8000270 <__aeabi_uldivmod>
 80045ca:	4602      	mov	r2, r0
 80045cc:	460b      	mov	r3, r1
 80045ce:	4613      	mov	r3, r2
 80045d0:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045d8:	d308      	bcc.n	80045ec <UART_SetConfig+0x328>
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045e0:	d204      	bcs.n	80045ec <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	69ba      	ldr	r2, [r7, #24]
 80045e8:	60da      	str	r2, [r3, #12]
 80045ea:	e0b5      	b.n	8004758 <UART_SetConfig+0x494>
=======
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	2200      	movs	r2, #0
 800543c:	461c      	mov	r4, r3
 800543e:	4615      	mov	r5, r2
 8005440:	f04f 0200 	mov.w	r2, #0
 8005444:	f04f 0300 	mov.w	r3, #0
 8005448:	022b      	lsls	r3, r5, #8
 800544a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800544e:	0222      	lsls	r2, r4, #8
 8005450:	68f9      	ldr	r1, [r7, #12]
 8005452:	6849      	ldr	r1, [r1, #4]
 8005454:	0849      	lsrs	r1, r1, #1
 8005456:	2000      	movs	r0, #0
 8005458:	4688      	mov	r8, r1
 800545a:	4681      	mov	r9, r0
 800545c:	eb12 0a08 	adds.w	sl, r2, r8
 8005460:	eb43 0b09 	adc.w	fp, r3, r9
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	603b      	str	r3, [r7, #0]
 800546c:	607a      	str	r2, [r7, #4]
 800546e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005472:	4650      	mov	r0, sl
 8005474:	4659      	mov	r1, fp
 8005476:	f7fa fefb 	bl	8000270 <__aeabi_uldivmod>
 800547a:	4602      	mov	r2, r0
 800547c:	460b      	mov	r3, r1
 800547e:	4613      	mov	r3, r2
 8005480:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005488:	d308      	bcc.n	800549c <UART_SetConfig+0x328>
 800548a:	69bb      	ldr	r3, [r7, #24]
 800548c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005490:	d204      	bcs.n	800549c <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	69ba      	ldr	r2, [r7, #24]
 8005498:	60da      	str	r2, [r3, #12]
 800549a:	e0b5      	b.n	8005608 <UART_SetConfig+0x494>
>>>>>>> Stashed changes
        }
        else
        {
          ret = HAL_ERROR;
<<<<<<< Updated upstream
 80045ec:	2301      	movs	r3, #1
 80045ee:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80045f2:	e0b1      	b.n	8004758 <UART_SetConfig+0x494>
=======
 800549c:	2301      	movs	r3, #1
 800549e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80054a2:	e0b1      	b.n	8005608 <UART_SetConfig+0x494>
>>>>>>> Stashed changes
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
<<<<<<< Updated upstream
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	69db      	ldr	r3, [r3, #28]
 80045f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045fc:	d15d      	bne.n	80046ba <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 80045fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004602:	2b08      	cmp	r3, #8
 8004604:	d827      	bhi.n	8004656 <UART_SetConfig+0x392>
 8004606:	a201      	add	r2, pc, #4	; (adr r2, 800460c <UART_SetConfig+0x348>)
 8004608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800460c:	08004631 	.word	0x08004631
 8004610:	08004639 	.word	0x08004639
 8004614:	08004641 	.word	0x08004641
 8004618:	08004657 	.word	0x08004657
 800461c:	08004647 	.word	0x08004647
 8004620:	08004657 	.word	0x08004657
 8004624:	08004657 	.word	0x08004657
 8004628:	08004657 	.word	0x08004657
 800462c:	0800464f 	.word	0x0800464f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004630:	f7fe fd64 	bl	80030fc <HAL_RCC_GetPCLK1Freq>
 8004634:	61f8      	str	r0, [r7, #28]
        break;
 8004636:	e014      	b.n	8004662 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004638:	f7fe fd76 	bl	8003128 <HAL_RCC_GetPCLK2Freq>
 800463c:	61f8      	str	r0, [r7, #28]
        break;
 800463e:	e010      	b.n	8004662 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004640:	4b4c      	ldr	r3, [pc, #304]	; (8004774 <UART_SetConfig+0x4b0>)
 8004642:	61fb      	str	r3, [r7, #28]
        break;
 8004644:	e00d      	b.n	8004662 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004646:	f7fe fcc1 	bl	8002fcc <HAL_RCC_GetSysClockFreq>
 800464a:	61f8      	str	r0, [r7, #28]
        break;
 800464c:	e009      	b.n	8004662 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800464e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004652:	61fb      	str	r3, [r7, #28]
        break;
 8004654:	e005      	b.n	8004662 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8004656:	2300      	movs	r3, #0
 8004658:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004660:	bf00      	nop
=======
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	69db      	ldr	r3, [r3, #28]
 80054a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054ac:	d15d      	bne.n	800556a <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 80054ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80054b2:	2b08      	cmp	r3, #8
 80054b4:	d827      	bhi.n	8005506 <UART_SetConfig+0x392>
 80054b6:	a201      	add	r2, pc, #4	; (adr r2, 80054bc <UART_SetConfig+0x348>)
 80054b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054bc:	080054e1 	.word	0x080054e1
 80054c0:	080054e9 	.word	0x080054e9
 80054c4:	080054f1 	.word	0x080054f1
 80054c8:	08005507 	.word	0x08005507
 80054cc:	080054f7 	.word	0x080054f7
 80054d0:	08005507 	.word	0x08005507
 80054d4:	08005507 	.word	0x08005507
 80054d8:	08005507 	.word	0x08005507
 80054dc:	080054ff 	.word	0x080054ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054e0:	f7fe fc7c 	bl	8003ddc <HAL_RCC_GetPCLK1Freq>
 80054e4:	61f8      	str	r0, [r7, #28]
        break;
 80054e6:	e014      	b.n	8005512 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054e8:	f7fe fc8e 	bl	8003e08 <HAL_RCC_GetPCLK2Freq>
 80054ec:	61f8      	str	r0, [r7, #28]
        break;
 80054ee:	e010      	b.n	8005512 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054f0:	4b4c      	ldr	r3, [pc, #304]	; (8005624 <UART_SetConfig+0x4b0>)
 80054f2:	61fb      	str	r3, [r7, #28]
        break;
 80054f4:	e00d      	b.n	8005512 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054f6:	f7fe fbd9 	bl	8003cac <HAL_RCC_GetSysClockFreq>
 80054fa:	61f8      	str	r0, [r7, #28]
        break;
 80054fc:	e009      	b.n	8005512 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005502:	61fb      	str	r3, [r7, #28]
        break;
 8005504:	e005      	b.n	8005512 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8005506:	2300      	movs	r3, #0
 8005508:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005510:	bf00      	nop
>>>>>>> Stashed changes
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
<<<<<<< Updated upstream
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d077      	beq.n	8004758 <UART_SetConfig+0x494>
=======
 8005512:	69fb      	ldr	r3, [r7, #28]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d077      	beq.n	8005608 <UART_SetConfig+0x494>
>>>>>>> Stashed changes
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
<<<<<<< Updated upstream
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	005a      	lsls	r2, r3, #1
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	085b      	lsrs	r3, r3, #1
 8004672:	441a      	add	r2, r3
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	fbb2 f3f3 	udiv	r3, r2, r3
 800467c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	2b0f      	cmp	r3, #15
 8004682:	d916      	bls.n	80046b2 <UART_SetConfig+0x3ee>
 8004684:	69bb      	ldr	r3, [r7, #24]
 8004686:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800468a:	d212      	bcs.n	80046b2 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	b29b      	uxth	r3, r3
 8004690:	f023 030f 	bic.w	r3, r3, #15
 8004694:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	085b      	lsrs	r3, r3, #1
 800469a:	b29b      	uxth	r3, r3
 800469c:	f003 0307 	and.w	r3, r3, #7
 80046a0:	b29a      	uxth	r2, r3
 80046a2:	8afb      	ldrh	r3, [r7, #22]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	8afa      	ldrh	r2, [r7, #22]
 80046ae:	60da      	str	r2, [r3, #12]
 80046b0:	e052      	b.n	8004758 <UART_SetConfig+0x494>
=======
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	005a      	lsls	r2, r3, #1
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	085b      	lsrs	r3, r3, #1
 8005522:	441a      	add	r2, r3
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	fbb2 f3f3 	udiv	r3, r2, r3
 800552c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800552e:	69bb      	ldr	r3, [r7, #24]
 8005530:	2b0f      	cmp	r3, #15
 8005532:	d916      	bls.n	8005562 <UART_SetConfig+0x3ee>
 8005534:	69bb      	ldr	r3, [r7, #24]
 8005536:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800553a:	d212      	bcs.n	8005562 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800553c:	69bb      	ldr	r3, [r7, #24]
 800553e:	b29b      	uxth	r3, r3
 8005540:	f023 030f 	bic.w	r3, r3, #15
 8005544:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	085b      	lsrs	r3, r3, #1
 800554a:	b29b      	uxth	r3, r3
 800554c:	f003 0307 	and.w	r3, r3, #7
 8005550:	b29a      	uxth	r2, r3
 8005552:	8afb      	ldrh	r3, [r7, #22]
 8005554:	4313      	orrs	r3, r2
 8005556:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	8afa      	ldrh	r2, [r7, #22]
 800555e:	60da      	str	r2, [r3, #12]
 8005560:	e052      	b.n	8005608 <UART_SetConfig+0x494>
>>>>>>> Stashed changes
      }
      else
      {
        ret = HAL_ERROR;
<<<<<<< Updated upstream
 80046b2:	2301      	movs	r3, #1
 80046b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80046b8:	e04e      	b.n	8004758 <UART_SetConfig+0x494>
=======
 8005562:	2301      	movs	r3, #1
 8005564:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005568:	e04e      	b.n	8005608 <UART_SetConfig+0x494>
>>>>>>> Stashed changes
      }
    }
  }
  else
  {
    switch (clocksource)
<<<<<<< Updated upstream
 80046ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80046be:	2b08      	cmp	r3, #8
 80046c0:	d827      	bhi.n	8004712 <UART_SetConfig+0x44e>
 80046c2:	a201      	add	r2, pc, #4	; (adr r2, 80046c8 <UART_SetConfig+0x404>)
 80046c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046c8:	080046ed 	.word	0x080046ed
 80046cc:	080046f5 	.word	0x080046f5
 80046d0:	080046fd 	.word	0x080046fd
 80046d4:	08004713 	.word	0x08004713
 80046d8:	08004703 	.word	0x08004703
 80046dc:	08004713 	.word	0x08004713
 80046e0:	08004713 	.word	0x08004713
 80046e4:	08004713 	.word	0x08004713
 80046e8:	0800470b 	.word	0x0800470b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046ec:	f7fe fd06 	bl	80030fc <HAL_RCC_GetPCLK1Freq>
 80046f0:	61f8      	str	r0, [r7, #28]
        break;
 80046f2:	e014      	b.n	800471e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046f4:	f7fe fd18 	bl	8003128 <HAL_RCC_GetPCLK2Freq>
 80046f8:	61f8      	str	r0, [r7, #28]
        break;
 80046fa:	e010      	b.n	800471e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046fc:	4b1d      	ldr	r3, [pc, #116]	; (8004774 <UART_SetConfig+0x4b0>)
 80046fe:	61fb      	str	r3, [r7, #28]
        break;
 8004700:	e00d      	b.n	800471e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004702:	f7fe fc63 	bl	8002fcc <HAL_RCC_GetSysClockFreq>
 8004706:	61f8      	str	r0, [r7, #28]
        break;
 8004708:	e009      	b.n	800471e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800470a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800470e:	61fb      	str	r3, [r7, #28]
        break;
 8004710:	e005      	b.n	800471e <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8004712:	2300      	movs	r3, #0
 8004714:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800471c:	bf00      	nop
    }

    if (pclk != 0U)
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d019      	beq.n	8004758 <UART_SetConfig+0x494>
=======
 800556a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800556e:	2b08      	cmp	r3, #8
 8005570:	d827      	bhi.n	80055c2 <UART_SetConfig+0x44e>
 8005572:	a201      	add	r2, pc, #4	; (adr r2, 8005578 <UART_SetConfig+0x404>)
 8005574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005578:	0800559d 	.word	0x0800559d
 800557c:	080055a5 	.word	0x080055a5
 8005580:	080055ad 	.word	0x080055ad
 8005584:	080055c3 	.word	0x080055c3
 8005588:	080055b3 	.word	0x080055b3
 800558c:	080055c3 	.word	0x080055c3
 8005590:	080055c3 	.word	0x080055c3
 8005594:	080055c3 	.word	0x080055c3
 8005598:	080055bb 	.word	0x080055bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800559c:	f7fe fc1e 	bl	8003ddc <HAL_RCC_GetPCLK1Freq>
 80055a0:	61f8      	str	r0, [r7, #28]
        break;
 80055a2:	e014      	b.n	80055ce <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055a4:	f7fe fc30 	bl	8003e08 <HAL_RCC_GetPCLK2Freq>
 80055a8:	61f8      	str	r0, [r7, #28]
        break;
 80055aa:	e010      	b.n	80055ce <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055ac:	4b1d      	ldr	r3, [pc, #116]	; (8005624 <UART_SetConfig+0x4b0>)
 80055ae:	61fb      	str	r3, [r7, #28]
        break;
 80055b0:	e00d      	b.n	80055ce <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055b2:	f7fe fb7b 	bl	8003cac <HAL_RCC_GetSysClockFreq>
 80055b6:	61f8      	str	r0, [r7, #28]
        break;
 80055b8:	e009      	b.n	80055ce <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055be:	61fb      	str	r3, [r7, #28]
        break;
 80055c0:	e005      	b.n	80055ce <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 80055c2:	2300      	movs	r3, #0
 80055c4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80055cc:	bf00      	nop
    }

    if (pclk != 0U)
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d019      	beq.n	8005608 <UART_SetConfig+0x494>
>>>>>>> Stashed changes
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
<<<<<<< Updated upstream
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	085a      	lsrs	r2, r3, #1
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	441a      	add	r2, r3
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	fbb2 f3f3 	udiv	r3, r2, r3
 8004736:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	2b0f      	cmp	r3, #15
 800473c:	d909      	bls.n	8004752 <UART_SetConfig+0x48e>
 800473e:	69bb      	ldr	r3, [r7, #24]
 8004740:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004744:	d205      	bcs.n	8004752 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004746:	69bb      	ldr	r3, [r7, #24]
 8004748:	b29a      	uxth	r2, r3
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	60da      	str	r2, [r3, #12]
 8004750:	e002      	b.n	8004758 <UART_SetConfig+0x494>
=======
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	085a      	lsrs	r2, r3, #1
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	441a      	add	r2, r3
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80055e6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	2b0f      	cmp	r3, #15
 80055ec:	d909      	bls.n	8005602 <UART_SetConfig+0x48e>
 80055ee:	69bb      	ldr	r3, [r7, #24]
 80055f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055f4:	d205      	bcs.n	8005602 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80055f6:	69bb      	ldr	r3, [r7, #24]
 80055f8:	b29a      	uxth	r2, r3
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	60da      	str	r2, [r3, #12]
 8005600:	e002      	b.n	8005608 <UART_SetConfig+0x494>
>>>>>>> Stashed changes
      }
      else
      {
        ret = HAL_ERROR;
<<<<<<< Updated upstream
 8004752:	2301      	movs	r3, #1
 8004754:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
=======
 8005602:	2301      	movs	r3, #1
 8005604:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
>>>>>>> Stashed changes
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
<<<<<<< Updated upstream
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2200      	movs	r2, #0
 800475c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2200      	movs	r2, #0
 8004762:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004764:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004768:	4618      	mov	r0, r3
 800476a:	3728      	adds	r7, #40	; 0x28
 800476c:	46bd      	mov	sp, r7
 800476e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004772:	bf00      	nop
 8004774:	00f42400 	.word	0x00f42400

08004778 <UART_AdvFeatureConfig>:
=======
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2200      	movs	r2, #0
 800560c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2200      	movs	r2, #0
 8005612:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005614:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005618:	4618      	mov	r0, r3
 800561a:	3728      	adds	r7, #40	; 0x28
 800561c:	46bd      	mov	sp, r7
 800561e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005622:	bf00      	nop
 8005624:	00f42400 	.word	0x00f42400

08005628 <UART_AdvFeatureConfig>:
>>>>>>> Stashed changes
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
=======
 8005628:	b480      	push	{r7}
 800562a:	b083      	sub	sp, #12
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
<<<<<<< Updated upstream
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004784:	f003 0308 	and.w	r3, r3, #8
 8004788:	2b00      	cmp	r3, #0
 800478a:	d00a      	beq.n	80047a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	430a      	orrs	r2, r1
 80047a0:	605a      	str	r2, [r3, #4]
=======
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005634:	f003 0308 	and.w	r3, r3, #8
 8005638:	2b00      	cmp	r3, #0
 800563a:	d00a      	beq.n	8005652 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	430a      	orrs	r2, r1
 8005650:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
<<<<<<< Updated upstream
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a6:	f003 0301 	and.w	r3, r3, #1
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d00a      	beq.n	80047c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	430a      	orrs	r2, r1
 80047c2:	605a      	str	r2, [r3, #4]
=======
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005656:	f003 0301 	and.w	r3, r3, #1
 800565a:	2b00      	cmp	r3, #0
 800565c:	d00a      	beq.n	8005674 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	430a      	orrs	r2, r1
 8005672:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
<<<<<<< Updated upstream
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c8:	f003 0302 	and.w	r3, r3, #2
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d00a      	beq.n	80047e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	430a      	orrs	r2, r1
 80047e4:	605a      	str	r2, [r3, #4]
=======
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005678:	f003 0302 	and.w	r3, r3, #2
 800567c:	2b00      	cmp	r3, #0
 800567e:	d00a      	beq.n	8005696 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	430a      	orrs	r2, r1
 8005694:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
<<<<<<< Updated upstream
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ea:	f003 0304 	and.w	r3, r3, #4
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d00a      	beq.n	8004808 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	430a      	orrs	r2, r1
 8004806:	605a      	str	r2, [r3, #4]
=======
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569a:	f003 0304 	and.w	r3, r3, #4
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d00a      	beq.n	80056b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	430a      	orrs	r2, r1
 80056b6:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
<<<<<<< Updated upstream
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480c:	f003 0310 	and.w	r3, r3, #16
 8004810:	2b00      	cmp	r3, #0
 8004812:	d00a      	beq.n	800482a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	430a      	orrs	r2, r1
 8004828:	609a      	str	r2, [r3, #8]
=======
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056bc:	f003 0310 	and.w	r3, r3, #16
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d00a      	beq.n	80056da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	430a      	orrs	r2, r1
 80056d8:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
<<<<<<< Updated upstream
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482e:	f003 0320 	and.w	r3, r3, #32
 8004832:	2b00      	cmp	r3, #0
 8004834:	d00a      	beq.n	800484c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	430a      	orrs	r2, r1
 800484a:	609a      	str	r2, [r3, #8]
=======
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056de:	f003 0320 	and.w	r3, r3, #32
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d00a      	beq.n	80056fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	430a      	orrs	r2, r1
 80056fa:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
<<<<<<< Updated upstream
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004854:	2b00      	cmp	r3, #0
 8004856:	d01a      	beq.n	800488e <UART_AdvFeatureConfig+0x116>
=======
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005704:	2b00      	cmp	r3, #0
 8005706:	d01a      	beq.n	800573e <UART_AdvFeatureConfig+0x116>
>>>>>>> Stashed changes
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
<<<<<<< Updated upstream
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	430a      	orrs	r2, r1
 800486c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004872:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004876:	d10a      	bne.n	800488e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	430a      	orrs	r2, r1
 800488c:	605a      	str	r2, [r3, #4]
=======
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	430a      	orrs	r2, r1
 800571c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005722:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005726:	d10a      	bne.n	800573e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	430a      	orrs	r2, r1
 800573c:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
<<<<<<< Updated upstream
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004896:	2b00      	cmp	r3, #0
 8004898:	d00a      	beq.n	80048b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	430a      	orrs	r2, r1
 80048ae:	605a      	str	r2, [r3, #4]
  }
}
 80048b0:	bf00      	nop
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <UART_CheckIdleState>:
=======
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005746:	2b00      	cmp	r3, #0
 8005748:	d00a      	beq.n	8005760 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	430a      	orrs	r2, r1
 800575e:	605a      	str	r2, [r3, #4]
  }
}
 8005760:	bf00      	nop
 8005762:	370c      	adds	r7, #12
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr

0800576c <UART_CheckIdleState>:
>>>>>>> Stashed changes
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 80048bc:	b580      	push	{r7, lr}
 80048be:	b098      	sub	sp, #96	; 0x60
 80048c0:	af02      	add	r7, sp, #8
 80048c2:	6078      	str	r0, [r7, #4]
=======
 800576c:	b580      	push	{r7, lr}
 800576e:	b098      	sub	sp, #96	; 0x60
 8005770:	af02      	add	r7, sp, #8
 8005772:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
<<<<<<< Updated upstream
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80048cc:	f7fc fc96 	bl	80011fc <HAL_GetTick>
 80048d0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0308 	and.w	r3, r3, #8
 80048dc:	2b08      	cmp	r3, #8
 80048de:	d12e      	bne.n	800493e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80048e4:	9300      	str	r3, [sp, #0]
 80048e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048e8:	2200      	movs	r2, #0
 80048ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 f88c 	bl	8004a0c <UART_WaitOnFlagUntilTimeout>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d021      	beq.n	800493e <UART_CheckIdleState+0x82>
=======
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800577c:	f7fb fef8 	bl	8001570 <HAL_GetTick>
 8005780:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 0308 	and.w	r3, r3, #8
 800578c:	2b08      	cmp	r3, #8
 800578e:	d12e      	bne.n	80057ee <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005790:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005794:	9300      	str	r3, [sp, #0]
 8005796:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005798:	2200      	movs	r2, #0
 800579a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 f88c 	bl	80058bc <UART_WaitOnFlagUntilTimeout>
 80057a4:	4603      	mov	r3, r0
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d021      	beq.n	80057ee <UART_CheckIdleState+0x82>
>>>>>>> Stashed changes
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
<<<<<<< Updated upstream
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004902:	e853 3f00 	ldrex	r3, [r3]
 8004906:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800490a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800490e:	653b      	str	r3, [r7, #80]	; 0x50
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	461a      	mov	r2, r3
 8004916:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004918:	647b      	str	r3, [r7, #68]	; 0x44
 800491a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800491c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800491e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004920:	e841 2300 	strex	r3, r2, [r1]
 8004924:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004926:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004928:	2b00      	cmp	r3, #0
 800492a:	d1e6      	bne.n	80048fa <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2220      	movs	r2, #32
 8004930:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e062      	b.n	8004a04 <UART_CheckIdleState+0x148>
=======
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b2:	e853 3f00 	ldrex	r3, [r3]
 80057b6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80057b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057be:	653b      	str	r3, [r7, #80]	; 0x50
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	461a      	mov	r2, r3
 80057c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057c8:	647b      	str	r3, [r7, #68]	; 0x44
 80057ca:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80057ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80057d0:	e841 2300 	strex	r3, r2, [r1]
 80057d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80057d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d1e6      	bne.n	80057aa <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2220      	movs	r2, #32
 80057e0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057ea:	2303      	movs	r3, #3
 80057ec:	e062      	b.n	80058b4 <UART_CheckIdleState+0x148>
>>>>>>> Stashed changes
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
<<<<<<< Updated upstream
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0304 	and.w	r3, r3, #4
 8004948:	2b04      	cmp	r3, #4
 800494a:	d149      	bne.n	80049e0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800494c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004950:	9300      	str	r3, [sp, #0]
 8004952:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004954:	2200      	movs	r2, #0
 8004956:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 f856 	bl	8004a0c <UART_WaitOnFlagUntilTimeout>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d03c      	beq.n	80049e0 <UART_CheckIdleState+0x124>
=======
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f003 0304 	and.w	r3, r3, #4
 80057f8:	2b04      	cmp	r3, #4
 80057fa:	d149      	bne.n	8005890 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005800:	9300      	str	r3, [sp, #0]
 8005802:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005804:	2200      	movs	r2, #0
 8005806:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 f856 	bl	80058bc <UART_WaitOnFlagUntilTimeout>
 8005810:	4603      	mov	r3, r0
 8005812:	2b00      	cmp	r3, #0
 8005814:	d03c      	beq.n	8005890 <UART_CheckIdleState+0x124>
>>>>>>> Stashed changes
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
<<<<<<< Updated upstream
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800496c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496e:	e853 3f00 	ldrex	r3, [r3]
 8004972:	623b      	str	r3, [r7, #32]
   return(result);
 8004974:	6a3b      	ldr	r3, [r7, #32]
 8004976:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800497a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	461a      	mov	r2, r3
 8004982:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004984:	633b      	str	r3, [r7, #48]	; 0x30
 8004986:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004988:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800498a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800498c:	e841 2300 	strex	r3, r2, [r1]
 8004990:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004994:	2b00      	cmp	r3, #0
 8004996:	d1e6      	bne.n	8004966 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	3308      	adds	r3, #8
 800499e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	e853 3f00 	ldrex	r3, [r3]
 80049a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f023 0301 	bic.w	r3, r3, #1
 80049ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	3308      	adds	r3, #8
 80049b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049b8:	61fa      	str	r2, [r7, #28]
 80049ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049bc:	69b9      	ldr	r1, [r7, #24]
 80049be:	69fa      	ldr	r2, [r7, #28]
 80049c0:	e841 2300 	strex	r3, r2, [r1]
 80049c4:	617b      	str	r3, [r7, #20]
   return(result);
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d1e5      	bne.n	8004998 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2220      	movs	r2, #32
 80049d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049dc:	2303      	movs	r3, #3
 80049de:	e011      	b.n	8004a04 <UART_CheckIdleState+0x148>
=======
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800581c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581e:	e853 3f00 	ldrex	r3, [r3]
 8005822:	623b      	str	r3, [r7, #32]
   return(result);
 8005824:	6a3b      	ldr	r3, [r7, #32]
 8005826:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800582a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	461a      	mov	r2, r3
 8005832:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005834:	633b      	str	r3, [r7, #48]	; 0x30
 8005836:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005838:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800583a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800583c:	e841 2300 	strex	r3, r2, [r1]
 8005840:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005844:	2b00      	cmp	r3, #0
 8005846:	d1e6      	bne.n	8005816 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	3308      	adds	r3, #8
 800584e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	e853 3f00 	ldrex	r3, [r3]
 8005856:	60fb      	str	r3, [r7, #12]
   return(result);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f023 0301 	bic.w	r3, r3, #1
 800585e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	3308      	adds	r3, #8
 8005866:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005868:	61fa      	str	r2, [r7, #28]
 800586a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800586c:	69b9      	ldr	r1, [r7, #24]
 800586e:	69fa      	ldr	r2, [r7, #28]
 8005870:	e841 2300 	strex	r3, r2, [r1]
 8005874:	617b      	str	r3, [r7, #20]
   return(result);
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d1e5      	bne.n	8005848 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2220      	movs	r2, #32
 8005880:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2200      	movs	r2, #0
 8005888:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800588c:	2303      	movs	r3, #3
 800588e:	e011      	b.n	80058b4 <UART_CheckIdleState+0x148>
>>>>>>> Stashed changes
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
<<<<<<< Updated upstream
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2220      	movs	r2, #32
 80049e4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2220      	movs	r2, #32
 80049ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004a02:	2300      	movs	r3, #0
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3758      	adds	r7, #88	; 0x58
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <UART_WaitOnFlagUntilTimeout>:
=======
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2220      	movs	r2, #32
 8005894:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2220      	movs	r2, #32
 800589a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80058b2:	2300      	movs	r3, #0
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3758      	adds	r7, #88	; 0x58
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <UART_WaitOnFlagUntilTimeout>:
>>>>>>> Stashed changes
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
<<<<<<< Updated upstream
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	603b      	str	r3, [r7, #0]
 8004a18:	4613      	mov	r3, r2
 8004a1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a1c:	e049      	b.n	8004ab2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a24:	d045      	beq.n	8004ab2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a26:	f7fc fbe9 	bl	80011fc <HAL_GetTick>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	69ba      	ldr	r2, [r7, #24]
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d302      	bcc.n	8004a3c <UART_WaitOnFlagUntilTimeout+0x30>
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d101      	bne.n	8004a40 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004a3c:	2303      	movs	r3, #3
 8004a3e:	e048      	b.n	8004ad2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 0304 	and.w	r3, r3, #4
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d031      	beq.n	8004ab2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	69db      	ldr	r3, [r3, #28]
 8004a54:	f003 0308 	and.w	r3, r3, #8
 8004a58:	2b08      	cmp	r3, #8
 8004a5a:	d110      	bne.n	8004a7e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2208      	movs	r2, #8
 8004a62:	621a      	str	r2, [r3, #32]
=======
 80058bc:	b580      	push	{r7, lr}
 80058be:	b084      	sub	sp, #16
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	60b9      	str	r1, [r7, #8]
 80058c6:	603b      	str	r3, [r7, #0]
 80058c8:	4613      	mov	r3, r2
 80058ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058cc:	e049      	b.n	8005962 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058ce:	69bb      	ldr	r3, [r7, #24]
 80058d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058d4:	d045      	beq.n	8005962 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058d6:	f7fb fe4b 	bl	8001570 <HAL_GetTick>
 80058da:	4602      	mov	r2, r0
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	1ad3      	subs	r3, r2, r3
 80058e0:	69ba      	ldr	r2, [r7, #24]
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d302      	bcc.n	80058ec <UART_WaitOnFlagUntilTimeout+0x30>
 80058e6:	69bb      	ldr	r3, [r7, #24]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d101      	bne.n	80058f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80058ec:	2303      	movs	r3, #3
 80058ee:	e048      	b.n	8005982 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 0304 	and.w	r3, r3, #4
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d031      	beq.n	8005962 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	69db      	ldr	r3, [r3, #28]
 8005904:	f003 0308 	and.w	r3, r3, #8
 8005908:	2b08      	cmp	r3, #8
 800590a:	d110      	bne.n	800592e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2208      	movs	r2, #8
 8005912:	621a      	str	r2, [r3, #32]
>>>>>>> Stashed changes

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
<<<<<<< Updated upstream
 8004a64:	68f8      	ldr	r0, [r7, #12]
 8004a66:	f000 f8ff 	bl	8004c68 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2208      	movs	r2, #8
 8004a6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e029      	b.n	8004ad2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	69db      	ldr	r3, [r3, #28]
 8004a84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a8c:	d111      	bne.n	8004ab2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a96:	621a      	str	r2, [r3, #32]
=======
 8005914:	68f8      	ldr	r0, [r7, #12]
 8005916:	f000 f9c5 	bl	8005ca4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2208      	movs	r2, #8
 800591e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2200      	movs	r2, #0
 8005926:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	e029      	b.n	8005982 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	69db      	ldr	r3, [r3, #28]
 8005934:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005938:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800593c:	d111      	bne.n	8005962 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005946:	621a      	str	r2, [r3, #32]
>>>>>>> Stashed changes

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
<<<<<<< Updated upstream
 8004a98:	68f8      	ldr	r0, [r7, #12]
 8004a9a:	f000 f8e5 	bl	8004c68 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2220      	movs	r2, #32
 8004aa2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e00f      	b.n	8004ad2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	69da      	ldr	r2, [r3, #28]
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	4013      	ands	r3, r2
 8004abc:	68ba      	ldr	r2, [r7, #8]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	bf0c      	ite	eq
 8004ac2:	2301      	moveq	r3, #1
 8004ac4:	2300      	movne	r3, #0
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	461a      	mov	r2, r3
 8004aca:	79fb      	ldrb	r3, [r7, #7]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d0a6      	beq.n	8004a1e <UART_WaitOnFlagUntilTimeout+0x12>
=======
 8005948:	68f8      	ldr	r0, [r7, #12]
 800594a:	f000 f9ab 	bl	8005ca4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2220      	movs	r2, #32
 8005952:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2200      	movs	r2, #0
 800595a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800595e:	2303      	movs	r3, #3
 8005960:	e00f      	b.n	8005982 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	69da      	ldr	r2, [r3, #28]
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	4013      	ands	r3, r2
 800596c:	68ba      	ldr	r2, [r7, #8]
 800596e:	429a      	cmp	r2, r3
 8005970:	bf0c      	ite	eq
 8005972:	2301      	moveq	r3, #1
 8005974:	2300      	movne	r3, #0
 8005976:	b2db      	uxtb	r3, r3
 8005978:	461a      	mov	r2, r3
 800597a:	79fb      	ldrb	r3, [r7, #7]
 800597c:	429a      	cmp	r2, r3
 800597e:	d0a6      	beq.n	80058ce <UART_WaitOnFlagUntilTimeout+0x12>
>>>>>>> Stashed changes
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< Updated upstream
 8004ad0:	2300      	movs	r3, #0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3710      	adds	r7, #16
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
	...

08004adc <UART_Start_Receive_IT>:
=======
 8005980:	2300      	movs	r3, #0
}
 8005982:	4618      	mov	r0, r3
 8005984:	3710      	adds	r7, #16
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
	...

0800598c <UART_Start_Receive_IT>:
>>>>>>> Stashed changes
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
<<<<<<< Updated upstream
 8004adc:	b480      	push	{r7}
 8004ade:	b097      	sub	sp, #92	; 0x5c
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	60b9      	str	r1, [r7, #8]
 8004ae6:	4613      	mov	r3, r2
 8004ae8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	68ba      	ldr	r2, [r7, #8]
 8004aee:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	88fa      	ldrh	r2, [r7, #6]
 8004af4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	88fa      	ldrh	r2, [r7, #6]
 8004afc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b0e:	d10e      	bne.n	8004b2e <UART_Start_Receive_IT+0x52>
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	691b      	ldr	r3, [r3, #16]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d105      	bne.n	8004b24 <UART_Start_Receive_IT+0x48>
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004b1e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b22:	e02d      	b.n	8004b80 <UART_Start_Receive_IT+0xa4>
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	22ff      	movs	r2, #255	; 0xff
 8004b28:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b2c:	e028      	b.n	8004b80 <UART_Start_Receive_IT+0xa4>
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d10d      	bne.n	8004b52 <UART_Start_Receive_IT+0x76>
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d104      	bne.n	8004b48 <UART_Start_Receive_IT+0x6c>
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	22ff      	movs	r2, #255	; 0xff
 8004b42:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b46:	e01b      	b.n	8004b80 <UART_Start_Receive_IT+0xa4>
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	227f      	movs	r2, #127	; 0x7f
 8004b4c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b50:	e016      	b.n	8004b80 <UART_Start_Receive_IT+0xa4>
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b5a:	d10d      	bne.n	8004b78 <UART_Start_Receive_IT+0x9c>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	691b      	ldr	r3, [r3, #16]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d104      	bne.n	8004b6e <UART_Start_Receive_IT+0x92>
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	227f      	movs	r2, #127	; 0x7f
 8004b68:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b6c:	e008      	b.n	8004b80 <UART_Start_Receive_IT+0xa4>
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	223f      	movs	r2, #63	; 0x3f
 8004b72:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b76:	e003      	b.n	8004b80 <UART_Start_Receive_IT+0xa4>
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2200      	movs	r2, #0
 8004b84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2222      	movs	r2, #34	; 0x22
 8004b8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	3308      	adds	r3, #8
 8004b96:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b9a:	e853 3f00 	ldrex	r3, [r3]
 8004b9e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ba2:	f043 0301 	orr.w	r3, r3, #1
 8004ba6:	657b      	str	r3, [r7, #84]	; 0x54
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	3308      	adds	r3, #8
 8004bae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004bb0:	64ba      	str	r2, [r7, #72]	; 0x48
 8004bb2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004bb6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004bb8:	e841 2300 	strex	r3, r2, [r1]
 8004bbc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004bbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d1e5      	bne.n	8004b90 <UART_Start_Receive_IT+0xb4>
=======
 800598c:	b480      	push	{r7}
 800598e:	b097      	sub	sp, #92	; 0x5c
 8005990:	af00      	add	r7, sp, #0
 8005992:	60f8      	str	r0, [r7, #12]
 8005994:	60b9      	str	r1, [r7, #8]
 8005996:	4613      	mov	r3, r2
 8005998:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	68ba      	ldr	r2, [r7, #8]
 800599e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	88fa      	ldrh	r2, [r7, #6]
 80059a4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	88fa      	ldrh	r2, [r7, #6]
 80059ac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2200      	movs	r2, #0
 80059b4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059be:	d10e      	bne.n	80059de <UART_Start_Receive_IT+0x52>
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	691b      	ldr	r3, [r3, #16]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d105      	bne.n	80059d4 <UART_Start_Receive_IT+0x48>
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f240 12ff 	movw	r2, #511	; 0x1ff
 80059ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80059d2:	e02d      	b.n	8005a30 <UART_Start_Receive_IT+0xa4>
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	22ff      	movs	r2, #255	; 0xff
 80059d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80059dc:	e028      	b.n	8005a30 <UART_Start_Receive_IT+0xa4>
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d10d      	bne.n	8005a02 <UART_Start_Receive_IT+0x76>
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	691b      	ldr	r3, [r3, #16]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d104      	bne.n	80059f8 <UART_Start_Receive_IT+0x6c>
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	22ff      	movs	r2, #255	; 0xff
 80059f2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80059f6:	e01b      	b.n	8005a30 <UART_Start_Receive_IT+0xa4>
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	227f      	movs	r2, #127	; 0x7f
 80059fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a00:	e016      	b.n	8005a30 <UART_Start_Receive_IT+0xa4>
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a0a:	d10d      	bne.n	8005a28 <UART_Start_Receive_IT+0x9c>
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	691b      	ldr	r3, [r3, #16]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d104      	bne.n	8005a1e <UART_Start_Receive_IT+0x92>
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	227f      	movs	r2, #127	; 0x7f
 8005a18:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a1c:	e008      	b.n	8005a30 <UART_Start_Receive_IT+0xa4>
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	223f      	movs	r2, #63	; 0x3f
 8005a22:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a26:	e003      	b.n	8005a30 <UART_Start_Receive_IT+0xa4>
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2200      	movs	r2, #0
 8005a34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2222      	movs	r2, #34	; 0x22
 8005a3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	3308      	adds	r3, #8
 8005a46:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a4a:	e853 3f00 	ldrex	r3, [r3]
 8005a4e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a52:	f043 0301 	orr.w	r3, r3, #1
 8005a56:	657b      	str	r3, [r7, #84]	; 0x54
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	3308      	adds	r3, #8
 8005a5e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005a60:	64ba      	str	r2, [r7, #72]	; 0x48
 8005a62:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a64:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005a66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a68:	e841 2300 	strex	r3, r2, [r1]
 8005a6c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005a6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d1e5      	bne.n	8005a40 <UART_Start_Receive_IT+0xb4>
>>>>>>> Stashed changes
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
<<<<<<< Updated upstream
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bcc:	d107      	bne.n	8004bde <UART_Start_Receive_IT+0x102>
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d103      	bne.n	8004bde <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	4a21      	ldr	r2, [pc, #132]	; (8004c60 <UART_Start_Receive_IT+0x184>)
 8004bda:	669a      	str	r2, [r3, #104]	; 0x68
 8004bdc:	e002      	b.n	8004be4 <UART_Start_Receive_IT+0x108>
=======
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a7c:	d107      	bne.n	8005a8e <UART_Start_Receive_IT+0x102>
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	691b      	ldr	r3, [r3, #16]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d103      	bne.n	8005a8e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	4a21      	ldr	r2, [pc, #132]	; (8005b10 <UART_Start_Receive_IT+0x184>)
 8005a8a:	669a      	str	r2, [r3, #104]	; 0x68
 8005a8c:	e002      	b.n	8005a94 <UART_Start_Receive_IT+0x108>
>>>>>>> Stashed changes
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
<<<<<<< Updated upstream
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	4a20      	ldr	r2, [pc, #128]	; (8004c64 <UART_Start_Receive_IT+0x188>)
 8004be2:	669a      	str	r2, [r3, #104]	; 0x68
=======
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	4a20      	ldr	r2, [pc, #128]	; (8005b14 <UART_Start_Receive_IT+0x188>)
 8005a92:	669a      	str	r2, [r3, #104]	; 0x68
>>>>>>> Stashed changes
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
<<<<<<< Updated upstream
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d019      	beq.n	8004c20 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf4:	e853 3f00 	ldrex	r3, [r3]
 8004bf8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfc:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004c00:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	461a      	mov	r2, r3
 8004c08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c0a:	637b      	str	r3, [r7, #52]	; 0x34
 8004c0c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c0e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c12:	e841 2300 	strex	r3, r2, [r1]
 8004c16:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d1e6      	bne.n	8004bec <UART_Start_Receive_IT+0x110>
 8004c1e:	e018      	b.n	8004c52 <UART_Start_Receive_IT+0x176>
=======
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	691b      	ldr	r3, [r3, #16]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d019      	beq.n	8005ad0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa4:	e853 3f00 	ldrex	r3, [r3]
 8005aa8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aac:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005ab0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005aba:	637b      	str	r3, [r7, #52]	; 0x34
 8005abc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005abe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005ac0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ac2:	e841 2300 	strex	r3, r2, [r1]
 8005ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d1e6      	bne.n	8005a9c <UART_Start_Receive_IT+0x110>
 8005ace:	e018      	b.n	8005b02 <UART_Start_Receive_IT+0x176>
>>>>>>> Stashed changes
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
<<<<<<< Updated upstream
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	e853 3f00 	ldrex	r3, [r3]
 8004c2c:	613b      	str	r3, [r7, #16]
   return(result);
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	f043 0320 	orr.w	r3, r3, #32
 8004c34:	653b      	str	r3, [r7, #80]	; 0x50
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c3e:	623b      	str	r3, [r7, #32]
 8004c40:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c42:	69f9      	ldr	r1, [r7, #28]
 8004c44:	6a3a      	ldr	r2, [r7, #32]
 8004c46:	e841 2300 	strex	r3, r2, [r1]
 8004c4a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d1e6      	bne.n	8004c20 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004c52:	2300      	movs	r3, #0
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	375c      	adds	r7, #92	; 0x5c
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr
 8004c60:	08004f6d 	.word	0x08004f6d
 8004c64:	08004db1 	.word	0x08004db1

08004c68 <UART_EndRxTransfer>:
=======
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	e853 3f00 	ldrex	r3, [r3]
 8005adc:	613b      	str	r3, [r7, #16]
   return(result);
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	f043 0320 	orr.w	r3, r3, #32
 8005ae4:	653b      	str	r3, [r7, #80]	; 0x50
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	461a      	mov	r2, r3
 8005aec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005aee:	623b      	str	r3, [r7, #32]
 8005af0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af2:	69f9      	ldr	r1, [r7, #28]
 8005af4:	6a3a      	ldr	r2, [r7, #32]
 8005af6:	e841 2300 	strex	r3, r2, [r1]
 8005afa:	61bb      	str	r3, [r7, #24]
   return(result);
 8005afc:	69bb      	ldr	r3, [r7, #24]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d1e6      	bne.n	8005ad0 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8005b02:	2300      	movs	r3, #0
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	375c      	adds	r7, #92	; 0x5c
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr
 8005b10:	08006191 	.word	0x08006191
 8005b14:	08005fd5 	.word	0x08005fd5

08005b18 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b096      	sub	sp, #88	; 0x58
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	60b9      	str	r1, [r7, #8]
 8005b22:	4613      	mov	r3, r2
 8005b24:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	68ba      	ldr	r2, [r7, #8]
 8005b2a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	88fa      	ldrh	r2, [r7, #6]
 8005b30:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2222      	movs	r2, #34	; 0x22
 8005b40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d028      	beq.n	8005b9e <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b50:	4a3e      	ldr	r2, [pc, #248]	; (8005c4c <UART_Start_Receive_DMA+0x134>)
 8005b52:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b58:	4a3d      	ldr	r2, [pc, #244]	; (8005c50 <UART_Start_Receive_DMA+0x138>)
 8005b5a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b60:	4a3c      	ldr	r2, [pc, #240]	; (8005c54 <UART_Start_Receive_DMA+0x13c>)
 8005b62:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b68:	2200      	movs	r2, #0
 8005b6a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	3324      	adds	r3, #36	; 0x24
 8005b76:	4619      	mov	r1, r3
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	88fb      	ldrh	r3, [r7, #6]
 8005b80:	f7fb fec0 	bl	8001904 <HAL_DMA_Start_IT>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d009      	beq.n	8005b9e <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2210      	movs	r2, #16
 8005b8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2220      	movs	r2, #32
 8005b96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e051      	b.n	8005c42 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	691b      	ldr	r3, [r3, #16]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d018      	beq.n	8005bd8 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bae:	e853 3f00 	ldrex	r3, [r3]
 8005bb2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bba:	657b      	str	r3, [r7, #84]	; 0x54
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bc4:	64bb      	str	r3, [r7, #72]	; 0x48
 8005bc6:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005bca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005bcc:	e841 2300 	strex	r3, r2, [r1]
 8005bd0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005bd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d1e6      	bne.n	8005ba6 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	3308      	adds	r3, #8
 8005bde:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be2:	e853 3f00 	ldrex	r3, [r3]
 8005be6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bea:	f043 0301 	orr.w	r3, r3, #1
 8005bee:	653b      	str	r3, [r7, #80]	; 0x50
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	3308      	adds	r3, #8
 8005bf6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005bf8:	637a      	str	r2, [r7, #52]	; 0x34
 8005bfa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bfc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005bfe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c00:	e841 2300 	strex	r3, r2, [r1]
 8005c04:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d1e5      	bne.n	8005bd8 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	3308      	adds	r3, #8
 8005c12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	e853 3f00 	ldrex	r3, [r3]
 8005c1a:	613b      	str	r3, [r7, #16]
   return(result);
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	3308      	adds	r3, #8
 8005c2a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c2c:	623a      	str	r2, [r7, #32]
 8005c2e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c30:	69f9      	ldr	r1, [r7, #28]
 8005c32:	6a3a      	ldr	r2, [r7, #32]
 8005c34:	e841 2300 	strex	r3, r2, [r1]
 8005c38:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d1e5      	bne.n	8005c0c <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8005c40:	2300      	movs	r3, #0
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3758      	adds	r7, #88	; 0x58
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
 8005c4a:	bf00      	nop
 8005c4c:	08005d6d 	.word	0x08005d6d
 8005c50:	08005e99 	.word	0x08005e99
 8005c54:	08005ed7 	.word	0x08005ed7

08005c58 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b089      	sub	sp, #36	; 0x24
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	e853 3f00 	ldrex	r3, [r3]
 8005c6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005c74:	61fb      	str	r3, [r7, #28]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	61bb      	str	r3, [r7, #24]
 8005c80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c82:	6979      	ldr	r1, [r7, #20]
 8005c84:	69ba      	ldr	r2, [r7, #24]
 8005c86:	e841 2300 	strex	r3, r2, [r1]
 8005c8a:	613b      	str	r3, [r7, #16]
   return(result);
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d1e6      	bne.n	8005c60 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2220      	movs	r2, #32
 8005c96:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8005c98:	bf00      	nop
 8005c9a:	3724      	adds	r7, #36	; 0x24
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr

08005ca4 <UART_EndRxTransfer>:
>>>>>>> Stashed changes
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8004c68:	b480      	push	{r7}
 8004c6a:	b095      	sub	sp, #84	; 0x54
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
=======
 8005ca4:	b480      	push	{r7}
 8005ca6:	b095      	sub	sp, #84	; 0x54
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
<<<<<<< Updated upstream
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c78:	e853 3f00 	ldrex	r3, [r3]
 8004c7c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c84:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c8e:	643b      	str	r3, [r7, #64]	; 0x40
 8004c90:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c92:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004c94:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c96:	e841 2300 	strex	r3, r2, [r1]
 8004c9a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d1e6      	bne.n	8004c70 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	3308      	adds	r3, #8
 8004ca8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004caa:	6a3b      	ldr	r3, [r7, #32]
 8004cac:	e853 3f00 	ldrex	r3, [r3]
 8004cb0:	61fb      	str	r3, [r7, #28]
   return(result);
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	f023 0301 	bic.w	r3, r3, #1
 8004cb8:	64bb      	str	r3, [r7, #72]	; 0x48
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	3308      	adds	r3, #8
 8004cc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004cc2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004cc4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004cc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cca:	e841 2300 	strex	r3, r2, [r1]
 8004cce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d1e5      	bne.n	8004ca2 <UART_EndRxTransfer+0x3a>
=======
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cb4:	e853 3f00 	ldrex	r3, [r3]
 8005cb8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cbc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005cc0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cca:	643b      	str	r3, [r7, #64]	; 0x40
 8005ccc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005cd0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005cd2:	e841 2300 	strex	r3, r2, [r1]
 8005cd6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d1e6      	bne.n	8005cac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	3308      	adds	r3, #8
 8005ce4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce6:	6a3b      	ldr	r3, [r7, #32]
 8005ce8:	e853 3f00 	ldrex	r3, [r3]
 8005cec:	61fb      	str	r3, [r7, #28]
   return(result);
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	f023 0301 	bic.w	r3, r3, #1
 8005cf4:	64bb      	str	r3, [r7, #72]	; 0x48
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	3308      	adds	r3, #8
 8005cfc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005cfe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d00:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d06:	e841 2300 	strex	r3, r2, [r1]
 8005d0a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d1e5      	bne.n	8005cde <UART_EndRxTransfer+0x3a>
>>>>>>> Stashed changes
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< Updated upstream
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d118      	bne.n	8004d10 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	e853 3f00 	ldrex	r3, [r3]
 8004cea:	60bb      	str	r3, [r7, #8]
   return(result);
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	f023 0310 	bic.w	r3, r3, #16
 8004cf2:	647b      	str	r3, [r7, #68]	; 0x44
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cfc:	61bb      	str	r3, [r7, #24]
 8004cfe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d00:	6979      	ldr	r1, [r7, #20]
 8004d02:	69ba      	ldr	r2, [r7, #24]
 8004d04:	e841 2300 	strex	r3, r2, [r1]
 8004d08:	613b      	str	r3, [r7, #16]
   return(result);
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d1e6      	bne.n	8004cde <UART_EndRxTransfer+0x76>
=======
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d118      	bne.n	8005d4c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	e853 3f00 	ldrex	r3, [r3]
 8005d26:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	f023 0310 	bic.w	r3, r3, #16
 8005d2e:	647b      	str	r3, [r7, #68]	; 0x44
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	461a      	mov	r2, r3
 8005d36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d38:	61bb      	str	r3, [r7, #24]
 8005d3a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d3c:	6979      	ldr	r1, [r7, #20]
 8005d3e:	69ba      	ldr	r2, [r7, #24]
 8005d40:	e841 2300 	strex	r3, r2, [r1]
 8005d44:	613b      	str	r3, [r7, #16]
   return(result);
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d1e6      	bne.n	8005d1a <UART_EndRxTransfer+0x76>
>>>>>>> Stashed changes
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
<<<<<<< Updated upstream
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2220      	movs	r2, #32
 8004d14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004d24:	bf00      	nop
 8004d26:	3754      	adds	r7, #84	; 0x54
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr

08004d30 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
=======
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2220      	movs	r2, #32
 8005d50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005d60:	bf00      	nop
 8005d62:	3754      	adds	r7, #84	; 0x54
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr

08005d6c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
>>>>>>> Stashed changes
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d3c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2200      	movs	r2, #0
 8004d42:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
=======
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b09c      	sub	sp, #112	; 0x70
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d78:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f003 0320 	and.w	r3, r3, #32
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d171      	bne.n	8005e6c <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8005d88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d98:	e853 3f00 	ldrex	r3, [r3]
 8005d9c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005d9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005da0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005da4:	66bb      	str	r3, [r7, #104]	; 0x68
 8005da6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	461a      	mov	r2, r3
 8005dac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005dae:	65bb      	str	r3, [r7, #88]	; 0x58
 8005db0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005db4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005db6:	e841 2300 	strex	r3, r2, [r1]
 8005dba:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005dbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d1e6      	bne.n	8005d90 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	3308      	adds	r3, #8
 8005dc8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dcc:	e853 3f00 	ldrex	r3, [r3]
 8005dd0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dd4:	f023 0301 	bic.w	r3, r3, #1
 8005dd8:	667b      	str	r3, [r7, #100]	; 0x64
 8005dda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	3308      	adds	r3, #8
 8005de0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005de2:	647a      	str	r2, [r7, #68]	; 0x44
 8005de4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005de8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005dea:	e841 2300 	strex	r3, r2, [r1]
 8005dee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005df0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d1e5      	bne.n	8005dc2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005df6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	3308      	adds	r3, #8
 8005dfc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e00:	e853 3f00 	ldrex	r3, [r3]
 8005e04:	623b      	str	r3, [r7, #32]
   return(result);
 8005e06:	6a3b      	ldr	r3, [r7, #32]
 8005e08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e0c:	663b      	str	r3, [r7, #96]	; 0x60
 8005e0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	3308      	adds	r3, #8
 8005e14:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005e16:	633a      	str	r2, [r7, #48]	; 0x30
 8005e18:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e1e:	e841 2300 	strex	r3, r2, [r1]
 8005e22:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d1e5      	bne.n	8005df6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005e2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e2c:	2220      	movs	r2, #32
 8005e2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d118      	bne.n	8005e6c <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	e853 3f00 	ldrex	r3, [r3]
 8005e46:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f023 0310 	bic.w	r3, r3, #16
 8005e4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	461a      	mov	r2, r3
 8005e56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e58:	61fb      	str	r3, [r7, #28]
 8005e5a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e5c:	69b9      	ldr	r1, [r7, #24]
 8005e5e:	69fa      	ldr	r2, [r7, #28]
 8005e60:	e841 2300 	strex	r3, r2, [r1]
 8005e64:	617b      	str	r3, [r7, #20]
   return(result);
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d1e6      	bne.n	8005e3a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e6e:	2200      	movs	r2, #0
 8005e70:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d107      	bne.n	8005e8a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e7c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005e80:	4619      	mov	r1, r3
 8005e82:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005e84:	f7ff f96a 	bl	800515c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005e88:	e002      	b.n	8005e90 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005e8a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005e8c:	f7fa fe48 	bl	8000b20 <HAL_UART_RxCpltCallback>
}
 8005e90:	bf00      	nop
 8005e92:	3770      	adds	r7, #112	; 0x70
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}

08005e98 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b084      	sub	sp, #16
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ea4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d109      	bne.n	8005ec8 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005eba:	085b      	lsrs	r3, r3, #1
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	4619      	mov	r1, r3
 8005ec0:	68f8      	ldr	r0, [r7, #12]
 8005ec2:	f7ff f94b 	bl	800515c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005ec6:	e002      	b.n	8005ece <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8005ec8:	68f8      	ldr	r0, [r7, #12]
 8005eca:	f7ff f933 	bl	8005134 <HAL_UART_RxHalfCpltCallback>
}
 8005ece:	bf00      	nop
 8005ed0:	3710      	adds	r7, #16
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}

08005ed6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005ed6:	b580      	push	{r7, lr}
 8005ed8:	b086      	sub	sp, #24
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ee2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ee8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ef0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005efc:	2b80      	cmp	r3, #128	; 0x80
 8005efe:	d109      	bne.n	8005f14 <UART_DMAError+0x3e>
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	2b21      	cmp	r3, #33	; 0x21
 8005f04:	d106      	bne.n	8005f14 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8005f0e:	6978      	ldr	r0, [r7, #20]
 8005f10:	f7ff fea2 	bl	8005c58 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f1e:	2b40      	cmp	r3, #64	; 0x40
 8005f20:	d109      	bne.n	8005f36 <UART_DMAError+0x60>
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2b22      	cmp	r3, #34	; 0x22
 8005f26:	d106      	bne.n	8005f36 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8005f30:	6978      	ldr	r0, [r7, #20]
 8005f32:	f7ff feb7 	bl	8005ca4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f3c:	f043 0210 	orr.w	r2, r3, #16
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
<<<<<<< Updated upstream
 8004d4e:	68f8      	ldr	r0, [r7, #12]
 8004d50:	f7ff faa2 	bl	8004298 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d54:	bf00      	nop
 8004d56:	3710      	adds	r7, #16
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <UART_EndTransmit_IT>:
=======
 8005f46:	6978      	ldr	r0, [r7, #20]
 8005f48:	f7ff f8fe 	bl	8005148 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f4c:	bf00      	nop
 8005f4e:	3718      	adds	r7, #24
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}

08005f54 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b084      	sub	sp, #16
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f60:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2200      	movs	r2, #0
 8005f66:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f72:	68f8      	ldr	r0, [r7, #12]
 8005f74:	f7ff f8e8 	bl	8005148 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f78:	bf00      	nop
 8005f7a:	3710      	adds	r7, #16
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <UART_EndTransmit_IT>:
>>>>>>> Stashed changes
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b088      	sub	sp, #32
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	e853 3f00 	ldrex	r3, [r3]
 8004d70:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d78:	61fb      	str	r3, [r7, #28]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	461a      	mov	r2, r3
 8004d80:	69fb      	ldr	r3, [r7, #28]
 8004d82:	61bb      	str	r3, [r7, #24]
 8004d84:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d86:	6979      	ldr	r1, [r7, #20]
 8004d88:	69ba      	ldr	r2, [r7, #24]
 8004d8a:	e841 2300 	strex	r3, r2, [r1]
 8004d8e:	613b      	str	r3, [r7, #16]
   return(result);
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d1e6      	bne.n	8004d64 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2220      	movs	r2, #32
 8004d9a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	66da      	str	r2, [r3, #108]	; 0x6c
=======
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b088      	sub	sp, #32
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	e853 3f00 	ldrex	r3, [r3]
 8005f94:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f9c:	61fb      	str	r3, [r7, #28]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	61bb      	str	r3, [r7, #24]
 8005fa8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005faa:	6979      	ldr	r1, [r7, #20]
 8005fac:	69ba      	ldr	r2, [r7, #24]
 8005fae:	e841 2300 	strex	r3, r2, [r1]
 8005fb2:	613b      	str	r3, [r7, #16]
   return(result);
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d1e6      	bne.n	8005f88 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2220      	movs	r2, #32
 8005fbe:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	66da      	str	r2, [r3, #108]	; 0x6c
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
<<<<<<< Updated upstream
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f7ff fa6e 	bl	8004284 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004da8:	bf00      	nop
 8004daa:	3720      	adds	r7, #32
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}

08004db0 <UART_RxISR_8BIT>:
=======
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f7ff f8aa 	bl	8005120 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005fcc:	bf00      	nop
 8005fce:	3720      	adds	r7, #32
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <UART_RxISR_8BIT>:
>>>>>>> Stashed changes
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b09c      	sub	sp, #112	; 0x70
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004dbe:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
=======
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b09c      	sub	sp, #112	; 0x70
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005fe2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
>>>>>>> Stashed changes
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
<<<<<<< Updated upstream
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004dc8:	2b22      	cmp	r3, #34	; 0x22
 8004dca:	f040 80be 	bne.w	8004f4a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004dd4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004dd8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004ddc:	b2d9      	uxtb	r1, r3
 8004dde:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004de2:	b2da      	uxtb	r2, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004de8:	400a      	ands	r2, r1
 8004dea:	b2d2      	uxtb	r2, r2
 8004dec:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004df2:	1c5a      	adds	r2, r3, #1
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	3b01      	subs	r3, #1
 8004e02:	b29a      	uxth	r2, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	f040 80a3 	bne.w	8004f5e <UART_RxISR_8BIT+0x1ae>
=======
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fec:	2b22      	cmp	r3, #34	; 0x22
 8005fee:	f040 80be 	bne.w	800616e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005ff8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005ffc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006000:	b2d9      	uxtb	r1, r3
 8006002:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006006:	b2da      	uxtb	r2, r3
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800600c:	400a      	ands	r2, r1
 800600e:	b2d2      	uxtb	r2, r2
 8006010:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006016:	1c5a      	adds	r2, r3, #1
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006022:	b29b      	uxth	r3, r3
 8006024:	3b01      	subs	r3, #1
 8006026:	b29a      	uxth	r2, r3
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006034:	b29b      	uxth	r3, r3
 8006036:	2b00      	cmp	r3, #0
 8006038:	f040 80a3 	bne.w	8006182 <UART_RxISR_8BIT+0x1ae>
>>>>>>> Stashed changes
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
<<<<<<< Updated upstream
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e20:	e853 3f00 	ldrex	r3, [r3]
 8004e24:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004e26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e28:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e2c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	461a      	mov	r2, r3
 8004e34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e36:	65bb      	str	r3, [r7, #88]	; 0x58
 8004e38:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e3a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004e3c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004e3e:	e841 2300 	strex	r3, r2, [r1]
 8004e42:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004e44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d1e6      	bne.n	8004e18 <UART_RxISR_8BIT+0x68>
=======
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006042:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006044:	e853 3f00 	ldrex	r3, [r3]
 8006048:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800604a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800604c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006050:	66bb      	str	r3, [r7, #104]	; 0x68
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	461a      	mov	r2, r3
 8006058:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800605a:	65bb      	str	r3, [r7, #88]	; 0x58
 800605c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800605e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006060:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006062:	e841 2300 	strex	r3, r2, [r1]
 8006066:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006068:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800606a:	2b00      	cmp	r3, #0
 800606c:	d1e6      	bne.n	800603c <UART_RxISR_8BIT+0x68>
>>>>>>> Stashed changes
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
<<<<<<< Updated upstream
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	3308      	adds	r3, #8
 8004e50:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e54:	e853 3f00 	ldrex	r3, [r3]
 8004e58:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e5c:	f023 0301 	bic.w	r3, r3, #1
 8004e60:	667b      	str	r3, [r7, #100]	; 0x64
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	3308      	adds	r3, #8
 8004e68:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004e6a:	647a      	str	r2, [r7, #68]	; 0x44
 8004e6c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e6e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e72:	e841 2300 	strex	r3, r2, [r1]
 8004e76:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d1e5      	bne.n	8004e4a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2220      	movs	r2, #32
 8004e82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a34      	ldr	r2, [pc, #208]	; (8004f68 <UART_RxISR_8BIT+0x1b8>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d01f      	beq.n	8004edc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d018      	beq.n	8004edc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb2:	e853 3f00 	ldrex	r3, [r3]
 8004eb6:	623b      	str	r3, [r7, #32]
   return(result);
 8004eb8:	6a3b      	ldr	r3, [r7, #32]
 8004eba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004ebe:	663b      	str	r3, [r7, #96]	; 0x60
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ec8:	633b      	str	r3, [r7, #48]	; 0x30
 8004eca:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ecc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ece:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ed0:	e841 2300 	strex	r3, r2, [r1]
 8004ed4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d1e6      	bne.n	8004eaa <UART_RxISR_8BIT+0xfa>
=======
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	3308      	adds	r3, #8
 8006074:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006078:	e853 3f00 	ldrex	r3, [r3]
 800607c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800607e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006080:	f023 0301 	bic.w	r3, r3, #1
 8006084:	667b      	str	r3, [r7, #100]	; 0x64
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	3308      	adds	r3, #8
 800608c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800608e:	647a      	str	r2, [r7, #68]	; 0x44
 8006090:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006092:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006094:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006096:	e841 2300 	strex	r3, r2, [r1]
 800609a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800609c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d1e5      	bne.n	800606e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2220      	movs	r2, #32
 80060a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a34      	ldr	r2, [pc, #208]	; (800618c <UART_RxISR_8BIT+0x1b8>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d01f      	beq.n	8006100 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d018      	beq.n	8006100 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d6:	e853 3f00 	ldrex	r3, [r3]
 80060da:	623b      	str	r3, [r7, #32]
   return(result);
 80060dc:	6a3b      	ldr	r3, [r7, #32]
 80060de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80060e2:	663b      	str	r3, [r7, #96]	; 0x60
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	461a      	mov	r2, r3
 80060ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80060ec:	633b      	str	r3, [r7, #48]	; 0x30
 80060ee:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80060f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060f4:	e841 2300 	strex	r3, r2, [r1]
 80060f8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80060fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d1e6      	bne.n	80060ce <UART_RxISR_8BIT+0xfa>
>>>>>>> Stashed changes
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< Updated upstream
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d12e      	bne.n	8004f42 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	e853 3f00 	ldrex	r3, [r3]
 8004ef6:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f023 0310 	bic.w	r3, r3, #16
 8004efe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	461a      	mov	r2, r3
 8004f06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f08:	61fb      	str	r3, [r7, #28]
 8004f0a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f0c:	69b9      	ldr	r1, [r7, #24]
 8004f0e:	69fa      	ldr	r2, [r7, #28]
 8004f10:	e841 2300 	strex	r3, r2, [r1]
 8004f14:	617b      	str	r3, [r7, #20]
   return(result);
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d1e6      	bne.n	8004eea <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	69db      	ldr	r3, [r3, #28]
 8004f22:	f003 0310 	and.w	r3, r3, #16
 8004f26:	2b10      	cmp	r3, #16
 8004f28:	d103      	bne.n	8004f32 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	2210      	movs	r2, #16
 8004f30:	621a      	str	r2, [r3, #32]
=======
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006104:	2b01      	cmp	r3, #1
 8006106:	d12e      	bne.n	8006166 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2200      	movs	r2, #0
 800610c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	e853 3f00 	ldrex	r3, [r3]
 800611a:	60fb      	str	r3, [r7, #12]
   return(result);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f023 0310 	bic.w	r3, r3, #16
 8006122:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	461a      	mov	r2, r3
 800612a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800612c:	61fb      	str	r3, [r7, #28]
 800612e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006130:	69b9      	ldr	r1, [r7, #24]
 8006132:	69fa      	ldr	r2, [r7, #28]
 8006134:	e841 2300 	strex	r3, r2, [r1]
 8006138:	617b      	str	r3, [r7, #20]
   return(result);
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d1e6      	bne.n	800610e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	69db      	ldr	r3, [r3, #28]
 8006146:	f003 0310 	and.w	r3, r3, #16
 800614a:	2b10      	cmp	r3, #16
 800614c:	d103      	bne.n	8006156 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	2210      	movs	r2, #16
 8006154:	621a      	str	r2, [r3, #32]
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
<<<<<<< Updated upstream
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004f38:	4619      	mov	r1, r3
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f7ff f9b6 	bl	80042ac <HAL_UARTEx_RxEventCallback>
=======
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800615c:	4619      	mov	r1, r3
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f7fe fffc 	bl	800515c <HAL_UARTEx_RxEventCallback>
>>>>>>> Stashed changes
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
<<<<<<< Updated upstream
 8004f40:	e00d      	b.n	8004f5e <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f7fb fd86 	bl	8000a54 <HAL_UART_RxCpltCallback>
}
 8004f48:	e009      	b.n	8004f5e <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	8b1b      	ldrh	r3, [r3, #24]
 8004f50:	b29a      	uxth	r2, r3
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f042 0208 	orr.w	r2, r2, #8
 8004f5a:	b292      	uxth	r2, r2
 8004f5c:	831a      	strh	r2, [r3, #24]
}
 8004f5e:	bf00      	nop
 8004f60:	3770      	adds	r7, #112	; 0x70
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	40008000 	.word	0x40008000

08004f6c <UART_RxISR_16BIT>:
=======
 8006164:	e00d      	b.n	8006182 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f7fa fcda 	bl	8000b20 <HAL_UART_RxCpltCallback>
}
 800616c:	e009      	b.n	8006182 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	8b1b      	ldrh	r3, [r3, #24]
 8006174:	b29a      	uxth	r2, r3
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f042 0208 	orr.w	r2, r2, #8
 800617e:	b292      	uxth	r2, r2
 8006180:	831a      	strh	r2, [r3, #24]
}
 8006182:	bf00      	nop
 8006184:	3770      	adds	r7, #112	; 0x70
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}
 800618a:	bf00      	nop
 800618c:	40008000 	.word	0x40008000

08006190 <UART_RxISR_16BIT>:
>>>>>>> Stashed changes
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b09c      	sub	sp, #112	; 0x70
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004f7a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
=======
 8006190:	b580      	push	{r7, lr}
 8006192:	b09c      	sub	sp, #112	; 0x70
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800619e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
>>>>>>> Stashed changes
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
<<<<<<< Updated upstream
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f84:	2b22      	cmp	r3, #34	; 0x22
 8004f86:	f040 80be 	bne.w	8005106 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004f90:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f98:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004f9a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8004f9e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	b29a      	uxth	r2, r3
 8004fa6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fa8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fae:	1c9a      	adds	r2, r3, #2
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	3b01      	subs	r3, #1
 8004fbe:	b29a      	uxth	r2, r3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	f040 80a3 	bne.w	800511a <UART_RxISR_16BIT+0x1ae>
=======
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061a8:	2b22      	cmp	r3, #34	; 0x22
 80061aa:	f040 80be 	bne.w	800632a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80061b4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061bc:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80061be:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80061c2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80061c6:	4013      	ands	r3, r2
 80061c8:	b29a      	uxth	r2, r3
 80061ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80061cc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061d2:	1c9a      	adds	r2, r3, #2
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80061de:	b29b      	uxth	r3, r3
 80061e0:	3b01      	subs	r3, #1
 80061e2:	b29a      	uxth	r2, r3
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	f040 80a3 	bne.w	800633e <UART_RxISR_16BIT+0x1ae>
>>>>>>> Stashed changes
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
<<<<<<< Updated upstream
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fdc:	e853 3f00 	ldrex	r3, [r3]
 8004fe0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004fe2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fe4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004fe8:	667b      	str	r3, [r7, #100]	; 0x64
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	461a      	mov	r2, r3
 8004ff0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ff2:	657b      	str	r3, [r7, #84]	; 0x54
 8004ff4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004ff8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004ffa:	e841 2300 	strex	r3, r2, [r1]
 8004ffe:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005000:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005002:	2b00      	cmp	r3, #0
 8005004:	d1e6      	bne.n	8004fd4 <UART_RxISR_16BIT+0x68>
=======
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006200:	e853 3f00 	ldrex	r3, [r3]
 8006204:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006206:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006208:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800620c:	667b      	str	r3, [r7, #100]	; 0x64
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	461a      	mov	r2, r3
 8006214:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006216:	657b      	str	r3, [r7, #84]	; 0x54
 8006218:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800621a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800621c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800621e:	e841 2300 	strex	r3, r2, [r1]
 8006222:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006224:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006226:	2b00      	cmp	r3, #0
 8006228:	d1e6      	bne.n	80061f8 <UART_RxISR_16BIT+0x68>
>>>>>>> Stashed changes
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
<<<<<<< Updated upstream
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	3308      	adds	r3, #8
 800500c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800500e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005010:	e853 3f00 	ldrex	r3, [r3]
 8005014:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005018:	f023 0301 	bic.w	r3, r3, #1
 800501c:	663b      	str	r3, [r7, #96]	; 0x60
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	3308      	adds	r3, #8
 8005024:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005026:	643a      	str	r2, [r7, #64]	; 0x40
 8005028:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800502a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800502c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800502e:	e841 2300 	strex	r3, r2, [r1]
 8005032:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005036:	2b00      	cmp	r3, #0
 8005038:	d1e5      	bne.n	8005006 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2220      	movs	r2, #32
 800503e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a34      	ldr	r2, [pc, #208]	; (8005124 <UART_RxISR_16BIT+0x1b8>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d01f      	beq.n	8005098 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d018      	beq.n	8005098 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800506c:	6a3b      	ldr	r3, [r7, #32]
 800506e:	e853 3f00 	ldrex	r3, [r3]
 8005072:	61fb      	str	r3, [r7, #28]
   return(result);
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800507a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	461a      	mov	r2, r3
 8005082:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005084:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005086:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005088:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800508a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800508c:	e841 2300 	strex	r3, r2, [r1]
 8005090:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005094:	2b00      	cmp	r3, #0
 8005096:	d1e6      	bne.n	8005066 <UART_RxISR_16BIT+0xfa>
=======
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	3308      	adds	r3, #8
 8006230:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006234:	e853 3f00 	ldrex	r3, [r3]
 8006238:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800623a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800623c:	f023 0301 	bic.w	r3, r3, #1
 8006240:	663b      	str	r3, [r7, #96]	; 0x60
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	3308      	adds	r3, #8
 8006248:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800624a:	643a      	str	r2, [r7, #64]	; 0x40
 800624c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800624e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006250:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006252:	e841 2300 	strex	r3, r2, [r1]
 8006256:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800625a:	2b00      	cmp	r3, #0
 800625c:	d1e5      	bne.n	800622a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2220      	movs	r2, #32
 8006262:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2200      	movs	r2, #0
 800626a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2200      	movs	r2, #0
 8006270:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a34      	ldr	r2, [pc, #208]	; (8006348 <UART_RxISR_16BIT+0x1b8>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d01f      	beq.n	80062bc <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006286:	2b00      	cmp	r3, #0
 8006288:	d018      	beq.n	80062bc <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006290:	6a3b      	ldr	r3, [r7, #32]
 8006292:	e853 3f00 	ldrex	r3, [r3]
 8006296:	61fb      	str	r3, [r7, #28]
   return(result);
 8006298:	69fb      	ldr	r3, [r7, #28]
 800629a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800629e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	461a      	mov	r2, r3
 80062a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062aa:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80062ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062b0:	e841 2300 	strex	r3, r2, [r1]
 80062b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80062b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d1e6      	bne.n	800628a <UART_RxISR_16BIT+0xfa>
>>>>>>> Stashed changes
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< Updated upstream
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800509c:	2b01      	cmp	r3, #1
 800509e:	d12e      	bne.n	80050fe <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	e853 3f00 	ldrex	r3, [r3]
 80050b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	f023 0310 	bic.w	r3, r3, #16
 80050ba:	65bb      	str	r3, [r7, #88]	; 0x58
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	461a      	mov	r2, r3
 80050c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80050c4:	61bb      	str	r3, [r7, #24]
 80050c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c8:	6979      	ldr	r1, [r7, #20]
 80050ca:	69ba      	ldr	r2, [r7, #24]
 80050cc:	e841 2300 	strex	r3, r2, [r1]
 80050d0:	613b      	str	r3, [r7, #16]
   return(result);
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d1e6      	bne.n	80050a6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	69db      	ldr	r3, [r3, #28]
 80050de:	f003 0310 	and.w	r3, r3, #16
 80050e2:	2b10      	cmp	r3, #16
 80050e4:	d103      	bne.n	80050ee <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	2210      	movs	r2, #16
 80050ec:	621a      	str	r2, [r3, #32]
=======
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d12e      	bne.n	8006322 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	e853 3f00 	ldrex	r3, [r3]
 80062d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	f023 0310 	bic.w	r3, r3, #16
 80062de:	65bb      	str	r3, [r7, #88]	; 0x58
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	461a      	mov	r2, r3
 80062e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80062e8:	61bb      	str	r3, [r7, #24]
 80062ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ec:	6979      	ldr	r1, [r7, #20]
 80062ee:	69ba      	ldr	r2, [r7, #24]
 80062f0:	e841 2300 	strex	r3, r2, [r1]
 80062f4:	613b      	str	r3, [r7, #16]
   return(result);
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d1e6      	bne.n	80062ca <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	69db      	ldr	r3, [r3, #28]
 8006302:	f003 0310 	and.w	r3, r3, #16
 8006306:	2b10      	cmp	r3, #16
 8006308:	d103      	bne.n	8006312 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	2210      	movs	r2, #16
 8006310:	621a      	str	r2, [r3, #32]
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
<<<<<<< Updated upstream
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80050f4:	4619      	mov	r1, r3
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f7ff f8d8 	bl	80042ac <HAL_UARTEx_RxEventCallback>
=======
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006318:	4619      	mov	r1, r3
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f7fe ff1e 	bl	800515c <HAL_UARTEx_RxEventCallback>
>>>>>>> Stashed changes
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
<<<<<<< Updated upstream
 80050fc:	e00d      	b.n	800511a <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f7fb fca8 	bl	8000a54 <HAL_UART_RxCpltCallback>
}
 8005104:	e009      	b.n	800511a <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	8b1b      	ldrh	r3, [r3, #24]
 800510c:	b29a      	uxth	r2, r3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f042 0208 	orr.w	r2, r2, #8
 8005116:	b292      	uxth	r2, r2
 8005118:	831a      	strh	r2, [r3, #24]
}
 800511a:	bf00      	nop
 800511c:	3770      	adds	r7, #112	; 0x70
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop
 8005124:	40008000 	.word	0x40008000

08005128 <HAL_UARTEx_WakeupCallback>:
=======
 8006320:	e00d      	b.n	800633e <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f7fa fbfc 	bl	8000b20 <HAL_UART_RxCpltCallback>
}
 8006328:	e009      	b.n	800633e <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	8b1b      	ldrh	r3, [r3, #24]
 8006330:	b29a      	uxth	r2, r3
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f042 0208 	orr.w	r2, r2, #8
 800633a:	b292      	uxth	r2, r2
 800633c:	831a      	strh	r2, [r3, #24]
}
 800633e:	bf00      	nop
 8006340:	3770      	adds	r7, #112	; 0x70
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
 8006346:	bf00      	nop
 8006348:	40008000 	.word	0x40008000

0800634c <HAL_UARTEx_WakeupCallback>:
>>>>>>> Stashed changes
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8005128:	b480      	push	{r7}
 800512a:	b083      	sub	sp, #12
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
=======
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
<<<<<<< Updated upstream
 8005130:	bf00      	nop
 8005132:	370c      	adds	r7, #12
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr

0800513c <__NVIC_SetPriority>:
{
 800513c:	b480      	push	{r7}
 800513e:	b083      	sub	sp, #12
 8005140:	af00      	add	r7, sp, #0
 8005142:	4603      	mov	r3, r0
 8005144:	6039      	str	r1, [r7, #0]
 8005146:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005148:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800514c:	2b00      	cmp	r3, #0
 800514e:	db0a      	blt.n	8005166 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	b2da      	uxtb	r2, r3
 8005154:	490c      	ldr	r1, [pc, #48]	; (8005188 <__NVIC_SetPriority+0x4c>)
 8005156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800515a:	0112      	lsls	r2, r2, #4
 800515c:	b2d2      	uxtb	r2, r2
 800515e:	440b      	add	r3, r1
 8005160:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005164:	e00a      	b.n	800517c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	b2da      	uxtb	r2, r3
 800516a:	4908      	ldr	r1, [pc, #32]	; (800518c <__NVIC_SetPriority+0x50>)
 800516c:	79fb      	ldrb	r3, [r7, #7]
 800516e:	f003 030f 	and.w	r3, r3, #15
 8005172:	3b04      	subs	r3, #4
 8005174:	0112      	lsls	r2, r2, #4
 8005176:	b2d2      	uxtb	r2, r2
 8005178:	440b      	add	r3, r1
 800517a:	761a      	strb	r2, [r3, #24]
}
 800517c:	bf00      	nop
 800517e:	370c      	adds	r7, #12
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr
 8005188:	e000e100 	.word	0xe000e100
 800518c:	e000ed00 	.word	0xe000ed00

08005190 <SysTick_Handler>:
=======
 8006354:	bf00      	nop
 8006356:	370c      	adds	r7, #12
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr

08006360 <__NVIC_SetPriority>:
{
 8006360:	b480      	push	{r7}
 8006362:	b083      	sub	sp, #12
 8006364:	af00      	add	r7, sp, #0
 8006366:	4603      	mov	r3, r0
 8006368:	6039      	str	r1, [r7, #0]
 800636a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800636c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006370:	2b00      	cmp	r3, #0
 8006372:	db0a      	blt.n	800638a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	b2da      	uxtb	r2, r3
 8006378:	490c      	ldr	r1, [pc, #48]	; (80063ac <__NVIC_SetPriority+0x4c>)
 800637a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800637e:	0112      	lsls	r2, r2, #4
 8006380:	b2d2      	uxtb	r2, r2
 8006382:	440b      	add	r3, r1
 8006384:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006388:	e00a      	b.n	80063a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	b2da      	uxtb	r2, r3
 800638e:	4908      	ldr	r1, [pc, #32]	; (80063b0 <__NVIC_SetPriority+0x50>)
 8006390:	79fb      	ldrb	r3, [r7, #7]
 8006392:	f003 030f 	and.w	r3, r3, #15
 8006396:	3b04      	subs	r3, #4
 8006398:	0112      	lsls	r2, r2, #4
 800639a:	b2d2      	uxtb	r2, r2
 800639c:	440b      	add	r3, r1
 800639e:	761a      	strb	r2, [r3, #24]
}
 80063a0:	bf00      	nop
 80063a2:	370c      	adds	r7, #12
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr
 80063ac:	e000e100 	.word	0xe000e100
 80063b0:	e000ed00 	.word	0xe000ed00

080063b4 <SysTick_Handler>:
>>>>>>> Stashed changes

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
<<<<<<< Updated upstream
 8005190:	b580      	push	{r7, lr}
 8005192:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005194:	4b05      	ldr	r3, [pc, #20]	; (80051ac <SysTick_Handler+0x1c>)
 8005196:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005198:	f001 fdd4 	bl	8006d44 <xTaskGetSchedulerState>
 800519c:	4603      	mov	r3, r0
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d001      	beq.n	80051a6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80051a2:	f002 fbb9 	bl	8007918 <xPortSysTickHandler>
  }
}
 80051a6:	bf00      	nop
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop
 80051ac:	e000e010 	.word	0xe000e010

080051b0 <SVC_Setup>:
=======
 80063b4:	b580      	push	{r7, lr}
 80063b6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80063b8:	4b05      	ldr	r3, [pc, #20]	; (80063d0 <SysTick_Handler+0x1c>)
 80063ba:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80063bc:	f001 fdd4 	bl	8007f68 <xTaskGetSchedulerState>
 80063c0:	4603      	mov	r3, r0
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d001      	beq.n	80063ca <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80063c6:	f002 fbbf 	bl	8008b48 <xPortSysTickHandler>
  }
}
 80063ca:	bf00      	nop
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	e000e010 	.word	0xe000e010

080063d4 <SVC_Setup>:
>>>>>>> Stashed changes
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
<<<<<<< Updated upstream
 80051b0:	b580      	push	{r7, lr}
 80051b2:	af00      	add	r7, sp, #0
=======
 80063d4:	b580      	push	{r7, lr}
 80063d6:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
<<<<<<< Updated upstream
 80051b4:	2100      	movs	r1, #0
 80051b6:	f06f 0004 	mvn.w	r0, #4
 80051ba:	f7ff ffbf 	bl	800513c <__NVIC_SetPriority>
#endif
}
 80051be:	bf00      	nop
 80051c0:	bd80      	pop	{r7, pc}
	...

080051c4 <osKernelInitialize>:
=======
 80063d8:	2100      	movs	r1, #0
 80063da:	f06f 0004 	mvn.w	r0, #4
 80063de:	f7ff ffbf 	bl	8006360 <__NVIC_SetPriority>
#endif
}
 80063e2:	bf00      	nop
 80063e4:	bd80      	pop	{r7, pc}
	...

080063e8 <osKernelInitialize>:
>>>>>>> Stashed changes
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
<<<<<<< Updated upstream
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051ca:	f3ef 8305 	mrs	r3, IPSR
 80051ce:	603b      	str	r3, [r7, #0]
  return(result);
 80051d0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d003      	beq.n	80051de <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80051d6:	f06f 0305 	mvn.w	r3, #5
 80051da:	607b      	str	r3, [r7, #4]
 80051dc:	e00c      	b.n	80051f8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80051de:	4b0a      	ldr	r3, [pc, #40]	; (8005208 <osKernelInitialize+0x44>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d105      	bne.n	80051f2 <osKernelInitialize+0x2e>
=======
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063ee:	f3ef 8305 	mrs	r3, IPSR
 80063f2:	603b      	str	r3, [r7, #0]
  return(result);
 80063f4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d003      	beq.n	8006402 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80063fa:	f06f 0305 	mvn.w	r3, #5
 80063fe:	607b      	str	r3, [r7, #4]
 8006400:	e00c      	b.n	800641c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006402:	4b0a      	ldr	r3, [pc, #40]	; (800642c <osKernelInitialize+0x44>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d105      	bne.n	8006416 <osKernelInitialize+0x2e>
>>>>>>> Stashed changes
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
<<<<<<< Updated upstream
 80051e6:	4b08      	ldr	r3, [pc, #32]	; (8005208 <osKernelInitialize+0x44>)
 80051e8:	2201      	movs	r2, #1
 80051ea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80051ec:	2300      	movs	r3, #0
 80051ee:	607b      	str	r3, [r7, #4]
 80051f0:	e002      	b.n	80051f8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80051f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80051f6:	607b      	str	r3, [r7, #4]
=======
 800640a:	4b08      	ldr	r3, [pc, #32]	; (800642c <osKernelInitialize+0x44>)
 800640c:	2201      	movs	r2, #1
 800640e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006410:	2300      	movs	r3, #0
 8006412:	607b      	str	r3, [r7, #4]
 8006414:	e002      	b.n	800641c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006416:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800641a:	607b      	str	r3, [r7, #4]
>>>>>>> Stashed changes
    }
  }

  return (stat);
<<<<<<< Updated upstream
 80051f8:	687b      	ldr	r3, [r7, #4]
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	370c      	adds	r7, #12
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr
 8005206:	bf00      	nop
 8005208:	20000368 	.word	0x20000368

0800520c <osKernelStart>:
=======
 800641c:	687b      	ldr	r3, [r7, #4]
}
 800641e:	4618      	mov	r0, r3
 8006420:	370c      	adds	r7, #12
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr
 800642a:	bf00      	nop
 800642c:	200002c0 	.word	0x200002c0

08006430 <osKernelStart>:
>>>>>>> Stashed changes
  }

  return (state);
}

osStatus_t osKernelStart (void) {
<<<<<<< Updated upstream
 800520c:	b580      	push	{r7, lr}
 800520e:	b082      	sub	sp, #8
 8005210:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005212:	f3ef 8305 	mrs	r3, IPSR
 8005216:	603b      	str	r3, [r7, #0]
  return(result);
 8005218:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800521a:	2b00      	cmp	r3, #0
 800521c:	d003      	beq.n	8005226 <osKernelStart+0x1a>
    stat = osErrorISR;
 800521e:	f06f 0305 	mvn.w	r3, #5
 8005222:	607b      	str	r3, [r7, #4]
 8005224:	e010      	b.n	8005248 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005226:	4b0b      	ldr	r3, [pc, #44]	; (8005254 <osKernelStart+0x48>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	2b01      	cmp	r3, #1
 800522c:	d109      	bne.n	8005242 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800522e:	f7ff ffbf 	bl	80051b0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005232:	4b08      	ldr	r3, [pc, #32]	; (8005254 <osKernelStart+0x48>)
 8005234:	2202      	movs	r2, #2
 8005236:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005238:	f001 f928 	bl	800648c <vTaskStartScheduler>
      stat = osOK;
 800523c:	2300      	movs	r3, #0
 800523e:	607b      	str	r3, [r7, #4]
 8005240:	e002      	b.n	8005248 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005242:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005246:	607b      	str	r3, [r7, #4]
=======
 8006430:	b580      	push	{r7, lr}
 8006432:	b082      	sub	sp, #8
 8006434:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006436:	f3ef 8305 	mrs	r3, IPSR
 800643a:	603b      	str	r3, [r7, #0]
  return(result);
 800643c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800643e:	2b00      	cmp	r3, #0
 8006440:	d003      	beq.n	800644a <osKernelStart+0x1a>
    stat = osErrorISR;
 8006442:	f06f 0305 	mvn.w	r3, #5
 8006446:	607b      	str	r3, [r7, #4]
 8006448:	e010      	b.n	800646c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800644a:	4b0b      	ldr	r3, [pc, #44]	; (8006478 <osKernelStart+0x48>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	2b01      	cmp	r3, #1
 8006450:	d109      	bne.n	8006466 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006452:	f7ff ffbf 	bl	80063d4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006456:	4b08      	ldr	r3, [pc, #32]	; (8006478 <osKernelStart+0x48>)
 8006458:	2202      	movs	r2, #2
 800645a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800645c:	f001 f928 	bl	80076b0 <vTaskStartScheduler>
      stat = osOK;
 8006460:	2300      	movs	r3, #0
 8006462:	607b      	str	r3, [r7, #4]
 8006464:	e002      	b.n	800646c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006466:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800646a:	607b      	str	r3, [r7, #4]
>>>>>>> Stashed changes
    }
  }

  return (stat);
<<<<<<< Updated upstream
 8005248:	687b      	ldr	r3, [r7, #4]
}
 800524a:	4618      	mov	r0, r3
 800524c:	3708      	adds	r7, #8
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	20000368 	.word	0x20000368

08005258 <osThreadNew>:
=======
 800646c:	687b      	ldr	r3, [r7, #4]
}
 800646e:	4618      	mov	r0, r3
 8006470:	3708      	adds	r7, #8
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}
 8006476:	bf00      	nop
 8006478:	200002c0 	.word	0x200002c0

0800647c <osThreadNew>:
>>>>>>> Stashed changes
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
<<<<<<< Updated upstream
 8005258:	b580      	push	{r7, lr}
 800525a:	b08e      	sub	sp, #56	; 0x38
 800525c:	af04      	add	r7, sp, #16
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	607a      	str	r2, [r7, #4]
=======
 800647c:	b580      	push	{r7, lr}
 800647e:	b08e      	sub	sp, #56	; 0x38
 8006480:	af04      	add	r7, sp, #16
 8006482:	60f8      	str	r0, [r7, #12]
 8006484:	60b9      	str	r1, [r7, #8]
 8006486:	607a      	str	r2, [r7, #4]
>>>>>>> Stashed changes
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
<<<<<<< Updated upstream
 8005264:	2300      	movs	r3, #0
 8005266:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005268:	f3ef 8305 	mrs	r3, IPSR
 800526c:	617b      	str	r3, [r7, #20]
  return(result);
 800526e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005270:	2b00      	cmp	r3, #0
 8005272:	d17e      	bne.n	8005372 <osThreadNew+0x11a>
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d07b      	beq.n	8005372 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800527a:	2380      	movs	r3, #128	; 0x80
 800527c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800527e:	2318      	movs	r3, #24
 8005280:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005282:	2300      	movs	r3, #0
 8005284:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005286:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800528a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d045      	beq.n	800531e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d002      	beq.n	80052a0 <osThreadNew+0x48>
        name = attr->name;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	699b      	ldr	r3, [r3, #24]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d002      	beq.n	80052ae <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	699b      	ldr	r3, [r3, #24]
 80052ac:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80052ae:	69fb      	ldr	r3, [r7, #28]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d008      	beq.n	80052c6 <osThreadNew+0x6e>
 80052b4:	69fb      	ldr	r3, [r7, #28]
 80052b6:	2b38      	cmp	r3, #56	; 0x38
 80052b8:	d805      	bhi.n	80052c6 <osThreadNew+0x6e>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	f003 0301 	and.w	r3, r3, #1
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d001      	beq.n	80052ca <osThreadNew+0x72>
        return (NULL);
 80052c6:	2300      	movs	r3, #0
 80052c8:	e054      	b.n	8005374 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	695b      	ldr	r3, [r3, #20]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d003      	beq.n	80052da <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	695b      	ldr	r3, [r3, #20]
 80052d6:	089b      	lsrs	r3, r3, #2
 80052d8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d00e      	beq.n	8005300 <osThreadNew+0xa8>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	2ba7      	cmp	r3, #167	; 0xa7
 80052e8:	d90a      	bls.n	8005300 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d006      	beq.n	8005300 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	695b      	ldr	r3, [r3, #20]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d002      	beq.n	8005300 <osThreadNew+0xa8>
        mem = 1;
 80052fa:	2301      	movs	r3, #1
 80052fc:	61bb      	str	r3, [r7, #24]
 80052fe:	e010      	b.n	8005322 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d10c      	bne.n	8005322 <osThreadNew+0xca>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d108      	bne.n	8005322 <osThreadNew+0xca>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	691b      	ldr	r3, [r3, #16]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d104      	bne.n	8005322 <osThreadNew+0xca>
          mem = 0;
 8005318:	2300      	movs	r3, #0
 800531a:	61bb      	str	r3, [r7, #24]
 800531c:	e001      	b.n	8005322 <osThreadNew+0xca>
=======
 8006488:	2300      	movs	r3, #0
 800648a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800648c:	f3ef 8305 	mrs	r3, IPSR
 8006490:	617b      	str	r3, [r7, #20]
  return(result);
 8006492:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006494:	2b00      	cmp	r3, #0
 8006496:	d17e      	bne.n	8006596 <osThreadNew+0x11a>
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d07b      	beq.n	8006596 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800649e:	2380      	movs	r3, #128	; 0x80
 80064a0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80064a2:	2318      	movs	r3, #24
 80064a4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80064a6:	2300      	movs	r3, #0
 80064a8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80064aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80064ae:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d045      	beq.n	8006542 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d002      	beq.n	80064c4 <osThreadNew+0x48>
        name = attr->name;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	699b      	ldr	r3, [r3, #24]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d002      	beq.n	80064d2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	699b      	ldr	r3, [r3, #24]
 80064d0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80064d2:	69fb      	ldr	r3, [r7, #28]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d008      	beq.n	80064ea <osThreadNew+0x6e>
 80064d8:	69fb      	ldr	r3, [r7, #28]
 80064da:	2b38      	cmp	r3, #56	; 0x38
 80064dc:	d805      	bhi.n	80064ea <osThreadNew+0x6e>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	f003 0301 	and.w	r3, r3, #1
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d001      	beq.n	80064ee <osThreadNew+0x72>
        return (NULL);
 80064ea:	2300      	movs	r3, #0
 80064ec:	e054      	b.n	8006598 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	695b      	ldr	r3, [r3, #20]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d003      	beq.n	80064fe <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	695b      	ldr	r3, [r3, #20]
 80064fa:	089b      	lsrs	r3, r3, #2
 80064fc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d00e      	beq.n	8006524 <osThreadNew+0xa8>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	68db      	ldr	r3, [r3, #12]
 800650a:	2ba7      	cmp	r3, #167	; 0xa7
 800650c:	d90a      	bls.n	8006524 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006512:	2b00      	cmp	r3, #0
 8006514:	d006      	beq.n	8006524 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	695b      	ldr	r3, [r3, #20]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d002      	beq.n	8006524 <osThreadNew+0xa8>
        mem = 1;
 800651e:	2301      	movs	r3, #1
 8006520:	61bb      	str	r3, [r7, #24]
 8006522:	e010      	b.n	8006546 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d10c      	bne.n	8006546 <osThreadNew+0xca>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	68db      	ldr	r3, [r3, #12]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d108      	bne.n	8006546 <osThreadNew+0xca>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	691b      	ldr	r3, [r3, #16]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d104      	bne.n	8006546 <osThreadNew+0xca>
          mem = 0;
 800653c:	2300      	movs	r3, #0
 800653e:	61bb      	str	r3, [r7, #24]
 8006540:	e001      	b.n	8006546 <osThreadNew+0xca>
>>>>>>> Stashed changes
        }
      }
    }
    else {
      mem = 0;
<<<<<<< Updated upstream
 800531e:	2300      	movs	r3, #0
 8005320:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005322:	69bb      	ldr	r3, [r7, #24]
 8005324:	2b01      	cmp	r3, #1
 8005326:	d110      	bne.n	800534a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005330:	9202      	str	r2, [sp, #8]
 8005332:	9301      	str	r3, [sp, #4]
 8005334:	69fb      	ldr	r3, [r7, #28]
 8005336:	9300      	str	r3, [sp, #0]
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	6a3a      	ldr	r2, [r7, #32]
 800533c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800533e:	68f8      	ldr	r0, [r7, #12]
 8005340:	f000 feb8 	bl	80060b4 <xTaskCreateStatic>
 8005344:	4603      	mov	r3, r0
 8005346:	613b      	str	r3, [r7, #16]
 8005348:	e013      	b.n	8005372 <osThreadNew+0x11a>
=======
 8006542:	2300      	movs	r3, #0
 8006544:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006546:	69bb      	ldr	r3, [r7, #24]
 8006548:	2b01      	cmp	r3, #1
 800654a:	d110      	bne.n	800656e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006554:	9202      	str	r2, [sp, #8]
 8006556:	9301      	str	r3, [sp, #4]
 8006558:	69fb      	ldr	r3, [r7, #28]
 800655a:	9300      	str	r3, [sp, #0]
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	6a3a      	ldr	r2, [r7, #32]
 8006560:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006562:	68f8      	ldr	r0, [r7, #12]
 8006564:	f000 feb8 	bl	80072d8 <xTaskCreateStatic>
 8006568:	4603      	mov	r3, r0
 800656a:	613b      	str	r3, [r7, #16]
 800656c:	e013      	b.n	8006596 <osThreadNew+0x11a>
>>>>>>> Stashed changes
      #endif
    }
    else {
      if (mem == 0) {
<<<<<<< Updated upstream
 800534a:	69bb      	ldr	r3, [r7, #24]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d110      	bne.n	8005372 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005350:	6a3b      	ldr	r3, [r7, #32]
 8005352:	b29a      	uxth	r2, r3
 8005354:	f107 0310 	add.w	r3, r7, #16
 8005358:	9301      	str	r3, [sp, #4]
 800535a:	69fb      	ldr	r3, [r7, #28]
 800535c:	9300      	str	r3, [sp, #0]
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005362:	68f8      	ldr	r0, [r7, #12]
 8005364:	f000 ff03 	bl	800616e <xTaskCreate>
 8005368:	4603      	mov	r3, r0
 800536a:	2b01      	cmp	r3, #1
 800536c:	d001      	beq.n	8005372 <osThreadNew+0x11a>
            hTask = NULL;
 800536e:	2300      	movs	r3, #0
 8005370:	613b      	str	r3, [r7, #16]
=======
 800656e:	69bb      	ldr	r3, [r7, #24]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d110      	bne.n	8006596 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006574:	6a3b      	ldr	r3, [r7, #32]
 8006576:	b29a      	uxth	r2, r3
 8006578:	f107 0310 	add.w	r3, r7, #16
 800657c:	9301      	str	r3, [sp, #4]
 800657e:	69fb      	ldr	r3, [r7, #28]
 8006580:	9300      	str	r3, [sp, #0]
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006586:	68f8      	ldr	r0, [r7, #12]
 8006588:	f000 ff03 	bl	8007392 <xTaskCreate>
 800658c:	4603      	mov	r3, r0
 800658e:	2b01      	cmp	r3, #1
 8006590:	d001      	beq.n	8006596 <osThreadNew+0x11a>
            hTask = NULL;
 8006592:	2300      	movs	r3, #0
 8006594:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
<<<<<<< Updated upstream
 8005372:	693b      	ldr	r3, [r7, #16]
}
 8005374:	4618      	mov	r0, r3
 8005376:	3728      	adds	r7, #40	; 0x28
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}

0800537c <osDelay>:
=======
 8006596:	693b      	ldr	r3, [r7, #16]
}
 8006598:	4618      	mov	r0, r3
 800659a:	3728      	adds	r7, #40	; 0x28
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}

080065a0 <osDelay>:
>>>>>>> Stashed changes
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
<<<<<<< Updated upstream
 800537c:	b580      	push	{r7, lr}
 800537e:	b084      	sub	sp, #16
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005384:	f3ef 8305 	mrs	r3, IPSR
 8005388:	60bb      	str	r3, [r7, #8]
  return(result);
 800538a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800538c:	2b00      	cmp	r3, #0
 800538e:	d003      	beq.n	8005398 <osDelay+0x1c>
    stat = osErrorISR;
 8005390:	f06f 0305 	mvn.w	r3, #5
 8005394:	60fb      	str	r3, [r7, #12]
 8005396:	e007      	b.n	80053a8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005398:	2300      	movs	r3, #0
 800539a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d002      	beq.n	80053a8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f001 f83e 	bl	8006424 <vTaskDelay>
=======
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b084      	sub	sp, #16
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065a8:	f3ef 8305 	mrs	r3, IPSR
 80065ac:	60bb      	str	r3, [r7, #8]
  return(result);
 80065ae:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d003      	beq.n	80065bc <osDelay+0x1c>
    stat = osErrorISR;
 80065b4:	f06f 0305 	mvn.w	r3, #5
 80065b8:	60fb      	str	r3, [r7, #12]
 80065ba:	e007      	b.n	80065cc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80065bc:	2300      	movs	r3, #0
 80065be:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d002      	beq.n	80065cc <osDelay+0x2c>
      vTaskDelay(ticks);
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f001 f83e 	bl	8007648 <vTaskDelay>
>>>>>>> Stashed changes
    }
  }

  return (stat);
<<<<<<< Updated upstream
 80053a8:	68fb      	ldr	r3, [r7, #12]
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3710      	adds	r7, #16
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}

080053b2 <osMessageQueueNew>:
=======
 80065cc:	68fb      	ldr	r3, [r7, #12]
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3710      	adds	r7, #16
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}

080065d6 <osMessageQueueNew>:
>>>>>>> Stashed changes
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
<<<<<<< Updated upstream
 80053b2:	b580      	push	{r7, lr}
 80053b4:	b08a      	sub	sp, #40	; 0x28
 80053b6:	af02      	add	r7, sp, #8
 80053b8:	60f8      	str	r0, [r7, #12]
 80053ba:	60b9      	str	r1, [r7, #8]
 80053bc:	607a      	str	r2, [r7, #4]
=======
 80065d6:	b580      	push	{r7, lr}
 80065d8:	b08a      	sub	sp, #40	; 0x28
 80065da:	af02      	add	r7, sp, #8
 80065dc:	60f8      	str	r0, [r7, #12]
 80065de:	60b9      	str	r1, [r7, #8]
 80065e0:	607a      	str	r2, [r7, #4]
>>>>>>> Stashed changes
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
<<<<<<< Updated upstream
 80053be:	2300      	movs	r3, #0
 80053c0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053c2:	f3ef 8305 	mrs	r3, IPSR
 80053c6:	613b      	str	r3, [r7, #16]
  return(result);
 80053c8:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d15f      	bne.n	800548e <osMessageQueueNew+0xdc>
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d05c      	beq.n	800548e <osMessageQueueNew+0xdc>
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d059      	beq.n	800548e <osMessageQueueNew+0xdc>
    mem = -1;
 80053da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053de:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d029      	beq.n	800543a <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d012      	beq.n	8005414 <osMessageQueueNew+0x62>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	2b4f      	cmp	r3, #79	; 0x4f
 80053f4:	d90e      	bls.n	8005414 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00a      	beq.n	8005414 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	695a      	ldr	r2, [r3, #20]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	68b9      	ldr	r1, [r7, #8]
 8005406:	fb01 f303 	mul.w	r3, r1, r3
 800540a:	429a      	cmp	r2, r3
 800540c:	d302      	bcc.n	8005414 <osMessageQueueNew+0x62>
        mem = 1;
 800540e:	2301      	movs	r3, #1
 8005410:	61bb      	str	r3, [r7, #24]
 8005412:	e014      	b.n	800543e <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d110      	bne.n	800543e <osMessageQueueNew+0x8c>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d10c      	bne.n	800543e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005428:	2b00      	cmp	r3, #0
 800542a:	d108      	bne.n	800543e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	695b      	ldr	r3, [r3, #20]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d104      	bne.n	800543e <osMessageQueueNew+0x8c>
          mem = 0;
 8005434:	2300      	movs	r3, #0
 8005436:	61bb      	str	r3, [r7, #24]
 8005438:	e001      	b.n	800543e <osMessageQueueNew+0x8c>
=======
 80065e2:	2300      	movs	r3, #0
 80065e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065e6:	f3ef 8305 	mrs	r3, IPSR
 80065ea:	613b      	str	r3, [r7, #16]
  return(result);
 80065ec:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d15f      	bne.n	80066b2 <osMessageQueueNew+0xdc>
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d05c      	beq.n	80066b2 <osMessageQueueNew+0xdc>
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d059      	beq.n	80066b2 <osMessageQueueNew+0xdc>
    mem = -1;
 80065fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006602:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d029      	beq.n	800665e <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d012      	beq.n	8006638 <osMessageQueueNew+0x62>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	68db      	ldr	r3, [r3, #12]
 8006616:	2b4f      	cmp	r3, #79	; 0x4f
 8006618:	d90e      	bls.n	8006638 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800661e:	2b00      	cmp	r3, #0
 8006620:	d00a      	beq.n	8006638 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	695a      	ldr	r2, [r3, #20]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	68b9      	ldr	r1, [r7, #8]
 800662a:	fb01 f303 	mul.w	r3, r1, r3
 800662e:	429a      	cmp	r2, r3
 8006630:	d302      	bcc.n	8006638 <osMessageQueueNew+0x62>
        mem = 1;
 8006632:	2301      	movs	r3, #1
 8006634:	61bb      	str	r3, [r7, #24]
 8006636:	e014      	b.n	8006662 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d110      	bne.n	8006662 <osMessageQueueNew+0x8c>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	68db      	ldr	r3, [r3, #12]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d10c      	bne.n	8006662 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800664c:	2b00      	cmp	r3, #0
 800664e:	d108      	bne.n	8006662 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	695b      	ldr	r3, [r3, #20]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d104      	bne.n	8006662 <osMessageQueueNew+0x8c>
          mem = 0;
 8006658:	2300      	movs	r3, #0
 800665a:	61bb      	str	r3, [r7, #24]
 800665c:	e001      	b.n	8006662 <osMessageQueueNew+0x8c>
>>>>>>> Stashed changes
        }
      }
    }
    else {
      mem = 0;
<<<<<<< Updated upstream
 800543a:	2300      	movs	r3, #0
 800543c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800543e:	69bb      	ldr	r3, [r7, #24]
 8005440:	2b01      	cmp	r3, #1
 8005442:	d10b      	bne.n	800545c <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	691a      	ldr	r2, [r3, #16]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	2100      	movs	r1, #0
 800544e:	9100      	str	r1, [sp, #0]
 8005450:	68b9      	ldr	r1, [r7, #8]
 8005452:	68f8      	ldr	r0, [r7, #12]
 8005454:	f000 f970 	bl	8005738 <xQueueGenericCreateStatic>
 8005458:	61f8      	str	r0, [r7, #28]
 800545a:	e008      	b.n	800546e <osMessageQueueNew+0xbc>
=======
 800665e:	2300      	movs	r3, #0
 8006660:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006662:	69bb      	ldr	r3, [r7, #24]
 8006664:	2b01      	cmp	r3, #1
 8006666:	d10b      	bne.n	8006680 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	691a      	ldr	r2, [r3, #16]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	689b      	ldr	r3, [r3, #8]
 8006670:	2100      	movs	r1, #0
 8006672:	9100      	str	r1, [sp, #0]
 8006674:	68b9      	ldr	r1, [r7, #8]
 8006676:	68f8      	ldr	r0, [r7, #12]
 8006678:	f000 f970 	bl	800695c <xQueueGenericCreateStatic>
 800667c:	61f8      	str	r0, [r7, #28]
 800667e:	e008      	b.n	8006692 <osMessageQueueNew+0xbc>
>>>>>>> Stashed changes
      #endif
    }
    else {
      if (mem == 0) {
<<<<<<< Updated upstream
 800545c:	69bb      	ldr	r3, [r7, #24]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d105      	bne.n	800546e <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005462:	2200      	movs	r2, #0
 8005464:	68b9      	ldr	r1, [r7, #8]
 8005466:	68f8      	ldr	r0, [r7, #12]
 8005468:	f000 f9de 	bl	8005828 <xQueueGenericCreate>
 800546c:	61f8      	str	r0, [r7, #28]
=======
 8006680:	69bb      	ldr	r3, [r7, #24]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d105      	bne.n	8006692 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8006686:	2200      	movs	r2, #0
 8006688:	68b9      	ldr	r1, [r7, #8]
 800668a:	68f8      	ldr	r0, [r7, #12]
 800668c:	f000 f9de 	bl	8006a4c <xQueueGenericCreate>
 8006690:	61f8      	str	r0, [r7, #28]
>>>>>>> Stashed changes
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
<<<<<<< Updated upstream
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d00c      	beq.n	800548e <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d003      	beq.n	8005482 <osMessageQueueNew+0xd0>
        name = attr->name;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	617b      	str	r3, [r7, #20]
 8005480:	e001      	b.n	8005486 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8005482:	2300      	movs	r3, #0
 8005484:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8005486:	6979      	ldr	r1, [r7, #20]
 8005488:	69f8      	ldr	r0, [r7, #28]
 800548a:	f000 fdb5 	bl	8005ff8 <vQueueAddToRegistry>
=======
 8006692:	69fb      	ldr	r3, [r7, #28]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d00c      	beq.n	80066b2 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d003      	beq.n	80066a6 <osMessageQueueNew+0xd0>
        name = attr->name;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	617b      	str	r3, [r7, #20]
 80066a4:	e001      	b.n	80066aa <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80066a6:	2300      	movs	r3, #0
 80066a8:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80066aa:	6979      	ldr	r1, [r7, #20]
 80066ac:	69f8      	ldr	r0, [r7, #28]
 80066ae:	f000 fdb5 	bl	800721c <vQueueAddToRegistry>
>>>>>>> Stashed changes
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
<<<<<<< Updated upstream
 800548e:	69fb      	ldr	r3, [r7, #28]
}
 8005490:	4618      	mov	r0, r3
 8005492:	3720      	adds	r7, #32
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}

08005498 <vApplicationGetIdleTaskMemory>:
=======
 80066b2:	69fb      	ldr	r3, [r7, #28]
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3720      	adds	r7, #32
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}

080066bc <vApplicationGetIdleTaskMemory>:
>>>>>>> Stashed changes

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
<<<<<<< Updated upstream
 8005498:	b480      	push	{r7}
 800549a:	b085      	sub	sp, #20
 800549c:	af00      	add	r7, sp, #0
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	60b9      	str	r1, [r7, #8]
 80054a2:	607a      	str	r2, [r7, #4]
=======
 80066bc:	b480      	push	{r7}
 80066be:	b085      	sub	sp, #20
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	60f8      	str	r0, [r7, #12]
 80066c4:	60b9      	str	r1, [r7, #8]
 80066c6:	607a      	str	r2, [r7, #4]
>>>>>>> Stashed changes
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
<<<<<<< Updated upstream
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	4a07      	ldr	r2, [pc, #28]	; (80054c4 <vApplicationGetIdleTaskMemory+0x2c>)
 80054a8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	4a06      	ldr	r2, [pc, #24]	; (80054c8 <vApplicationGetIdleTaskMemory+0x30>)
 80054ae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2280      	movs	r2, #128	; 0x80
 80054b4:	601a      	str	r2, [r3, #0]
}
 80054b6:	bf00      	nop
 80054b8:	3714      	adds	r7, #20
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr
 80054c2:	bf00      	nop
 80054c4:	2000036c 	.word	0x2000036c
 80054c8:	20000414 	.word	0x20000414

080054cc <vApplicationGetTimerTaskMemory>:
=======
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	4a07      	ldr	r2, [pc, #28]	; (80066e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80066cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	4a06      	ldr	r2, [pc, #24]	; (80066ec <vApplicationGetIdleTaskMemory+0x30>)
 80066d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2280      	movs	r2, #128	; 0x80
 80066d8:	601a      	str	r2, [r3, #0]
}
 80066da:	bf00      	nop
 80066dc:	3714      	adds	r7, #20
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr
 80066e6:	bf00      	nop
 80066e8:	200002c4 	.word	0x200002c4
 80066ec:	2000036c 	.word	0x2000036c

080066f0 <vApplicationGetTimerTaskMemory>:
>>>>>>> Stashed changes

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
<<<<<<< Updated upstream
 80054cc:	b480      	push	{r7}
 80054ce:	b085      	sub	sp, #20
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	60b9      	str	r1, [r7, #8]
 80054d6:	607a      	str	r2, [r7, #4]
=======
 80066f0:	b480      	push	{r7}
 80066f2:	b085      	sub	sp, #20
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	60f8      	str	r0, [r7, #12]
 80066f8:	60b9      	str	r1, [r7, #8]
 80066fa:	607a      	str	r2, [r7, #4]
>>>>>>> Stashed changes
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
<<<<<<< Updated upstream
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	4a07      	ldr	r2, [pc, #28]	; (80054f8 <vApplicationGetTimerTaskMemory+0x2c>)
 80054dc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	4a06      	ldr	r2, [pc, #24]	; (80054fc <vApplicationGetTimerTaskMemory+0x30>)
 80054e2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80054ea:	601a      	str	r2, [r3, #0]
}
 80054ec:	bf00      	nop
 80054ee:	3714      	adds	r7, #20
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr
 80054f8:	20000614 	.word	0x20000614
 80054fc:	200006bc 	.word	0x200006bc

08005500 <vListInitialise>:
=======
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	4a07      	ldr	r2, [pc, #28]	; (800671c <vApplicationGetTimerTaskMemory+0x2c>)
 8006700:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	4a06      	ldr	r2, [pc, #24]	; (8006720 <vApplicationGetTimerTaskMemory+0x30>)
 8006706:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800670e:	601a      	str	r2, [r3, #0]
}
 8006710:	bf00      	nop
 8006712:	3714      	adds	r7, #20
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr
 800671c:	2000056c 	.word	0x2000056c
 8006720:	20000614 	.word	0x20000614

08006724 <vListInitialise>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
<<<<<<< Updated upstream
 8005500:	b480      	push	{r7}
 8005502:	b083      	sub	sp, #12
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
=======
 8006724:	b480      	push	{r7}
 8006726:	b083      	sub	sp, #12
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
<<<<<<< Updated upstream
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f103 0208 	add.w	r2, r3, #8
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	605a      	str	r2, [r3, #4]
=======
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f103 0208 	add.w	r2, r3, #8
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
<<<<<<< Updated upstream
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005518:	609a      	str	r2, [r3, #8]
=======
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800673c:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
<<<<<<< Updated upstream
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f103 0208 	add.w	r2, r3, #8
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f103 0208 	add.w	r2, r3, #8
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	601a      	str	r2, [r3, #0]
=======
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f103 0208 	add.w	r2, r3, #8
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f103 0208 	add.w	r2, r3, #8
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
<<<<<<< Updated upstream
 8005534:	bf00      	nop
 8005536:	370c      	adds	r7, #12
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr

08005540 <vListInitialiseItem>:
=======
 8006758:	bf00      	nop
 800675a:	370c      	adds	r7, #12
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr

08006764 <vListInitialiseItem>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
<<<<<<< Updated upstream
 8005540:	b480      	push	{r7}
 8005542:	b083      	sub	sp, #12
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	611a      	str	r2, [r3, #16]
=======
 8006764:	b480      	push	{r7}
 8006766:	b083      	sub	sp, #12
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2200      	movs	r2, #0
 8006770:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
<<<<<<< Updated upstream
 800554e:	bf00      	nop
 8005550:	370c      	adds	r7, #12
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr

0800555a <vListInsertEnd>:
=======
 8006772:	bf00      	nop
 8006774:	370c      	adds	r7, #12
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr

0800677e <vListInsertEnd>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
<<<<<<< Updated upstream
 800555a:	b480      	push	{r7}
 800555c:	b085      	sub	sp, #20
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]
 8005562:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	60fb      	str	r3, [r7, #12]
=======
 800677e:	b480      	push	{r7}
 8006780:	b085      	sub	sp, #20
 8006782:	af00      	add	r7, sp, #0
 8006784:	6078      	str	r0, [r7, #4]
 8006786:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
<<<<<<< Updated upstream
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	68fa      	ldr	r2, [r7, #12]
 800556e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	689a      	ldr	r2, [r3, #8]
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	609a      	str	r2, [r3, #8]
=======
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	68fa      	ldr	r2, [r7, #12]
 8006792:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	689a      	ldr	r2, [r3, #8]
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
<<<<<<< Updated upstream
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	683a      	ldr	r2, [r7, #0]
 800557e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	683a      	ldr	r2, [r7, #0]
 8005584:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	1c5a      	adds	r2, r3, #1
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	601a      	str	r2, [r3, #0]
}
 8005596:	bf00      	nop
 8005598:	3714      	adds	r7, #20
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr

080055a2 <vListInsert>:
=======
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	683a      	ldr	r2, [r7, #0]
 80067a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	683a      	ldr	r2, [r7, #0]
 80067a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	1c5a      	adds	r2, r3, #1
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	601a      	str	r2, [r3, #0]
}
 80067ba:	bf00      	nop
 80067bc:	3714      	adds	r7, #20
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr

080067c6 <vListInsert>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
<<<<<<< Updated upstream
 80055a2:	b480      	push	{r7}
 80055a4:	b085      	sub	sp, #20
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
 80055aa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	60bb      	str	r3, [r7, #8]
=======
 80067c6:	b480      	push	{r7}
 80067c8:	b085      	sub	sp, #20
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	6078      	str	r0, [r7, #4]
 80067ce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	60bb      	str	r3, [r7, #8]
>>>>>>> Stashed changes
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
<<<<<<< Updated upstream
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055b8:	d103      	bne.n	80055c2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	60fb      	str	r3, [r7, #12]
 80055c0:	e00c      	b.n	80055dc <vListInsert+0x3a>
=======
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067dc:	d103      	bne.n	80067e6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	691b      	ldr	r3, [r3, #16]
 80067e2:	60fb      	str	r3, [r7, #12]
 80067e4:	e00c      	b.n	8006800 <vListInsert+0x3a>
>>>>>>> Stashed changes
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
<<<<<<< Updated upstream
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	3308      	adds	r3, #8
 80055c6:	60fb      	str	r3, [r7, #12]
 80055c8:	e002      	b.n	80055d0 <vListInsert+0x2e>
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	60fb      	str	r3, [r7, #12]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	68ba      	ldr	r2, [r7, #8]
 80055d8:	429a      	cmp	r2, r3
 80055da:	d2f6      	bcs.n	80055ca <vListInsert+0x28>
=======
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	3308      	adds	r3, #8
 80067ea:	60fb      	str	r3, [r7, #12]
 80067ec:	e002      	b.n	80067f4 <vListInsert+0x2e>
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	60fb      	str	r3, [r7, #12]
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	68ba      	ldr	r2, [r7, #8]
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d2f6      	bcs.n	80067ee <vListInsert+0x28>
>>>>>>> Stashed changes
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
<<<<<<< Updated upstream
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	685a      	ldr	r2, [r3, #4]
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	683a      	ldr	r2, [r7, #0]
 80055ea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	68fa      	ldr	r2, [r7, #12]
 80055f0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	683a      	ldr	r2, [r7, #0]
 80055f6:	605a      	str	r2, [r3, #4]
=======
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	685a      	ldr	r2, [r3, #4]
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	683a      	ldr	r2, [r7, #0]
 800680e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	68fa      	ldr	r2, [r7, #12]
 8006814:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	683a      	ldr	r2, [r7, #0]
 800681a:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
<<<<<<< Updated upstream
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	1c5a      	adds	r2, r3, #1
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	601a      	str	r2, [r3, #0]
}
 8005608:	bf00      	nop
 800560a:	3714      	adds	r7, #20
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <uxListRemove>:
=======
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	1c5a      	adds	r2, r3, #1
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	601a      	str	r2, [r3, #0]
}
 800682c:	bf00      	nop
 800682e:	3714      	adds	r7, #20
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr

08006838 <uxListRemove>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
<<<<<<< Updated upstream
 8005614:	b480      	push	{r7}
 8005616:	b085      	sub	sp, #20
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	691b      	ldr	r3, [r3, #16]
 8005620:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	6892      	ldr	r2, [r2, #8]
 800562a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	6852      	ldr	r2, [r2, #4]
 8005634:	605a      	str	r2, [r3, #4]
=======
 8006838:	b480      	push	{r7}
 800683a:	b085      	sub	sp, #20
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	691b      	ldr	r3, [r3, #16]
 8006844:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	687a      	ldr	r2, [r7, #4]
 800684c:	6892      	ldr	r2, [r2, #8]
 800684e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	6852      	ldr	r2, [r2, #4]
 8006858:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
<<<<<<< Updated upstream
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	429a      	cmp	r2, r3
 800563e:	d103      	bne.n	8005648 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	689a      	ldr	r2, [r3, #8]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	605a      	str	r2, [r3, #4]
=======
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	687a      	ldr	r2, [r7, #4]
 8006860:	429a      	cmp	r2, r3
 8006862:	d103      	bne.n	800686c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	689a      	ldr	r2, [r3, #8]
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
<<<<<<< Updated upstream
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	1e5a      	subs	r2, r3, #1
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
}
 800565c:	4618      	mov	r0, r3
 800565e:	3714      	adds	r7, #20
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr

08005668 <xQueueGenericReset>:
=======
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2200      	movs	r2, #0
 8006870:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	1e5a      	subs	r2, r3, #1
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
}
 8006880:	4618      	mov	r0, r3
 8006882:	3714      	adds	r7, #20
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr

0800688c <xQueueGenericReset>:
>>>>>>> Stashed changes
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
<<<<<<< Updated upstream
 8005668:	b580      	push	{r7, lr}
 800566a:	b084      	sub	sp, #16
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d10a      	bne.n	8005692 <xQueueGenericReset+0x2a>
=======
 800688c:	b580      	push	{r7, lr}
 800688e:	b084      	sub	sp, #16
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d10a      	bne.n	80068b6 <xQueueGenericReset+0x2a>
>>>>>>> Stashed changes

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
<<<<<<< Updated upstream
 800567c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005680:	f383 8811 	msr	BASEPRI, r3
 8005684:	f3bf 8f6f 	isb	sy
 8005688:	f3bf 8f4f 	dsb	sy
 800568c:	60bb      	str	r3, [r7, #8]
=======
 80068a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a4:	f383 8811 	msr	BASEPRI, r3
 80068a8:	f3bf 8f6f 	isb	sy
 80068ac:	f3bf 8f4f 	dsb	sy
 80068b0:	60bb      	str	r3, [r7, #8]
>>>>>>> Stashed changes
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
<<<<<<< Updated upstream
 800568e:	bf00      	nop
 8005690:	e7fe      	b.n	8005690 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005692:	f002 f8af 	bl	80077f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800569e:	68f9      	ldr	r1, [r7, #12]
 80056a0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80056a2:	fb01 f303 	mul.w	r3, r1, r3
 80056a6:	441a      	add	r2, r3
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2200      	movs	r2, #0
 80056b0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056c2:	3b01      	subs	r3, #1
 80056c4:	68f9      	ldr	r1, [r7, #12]
 80056c6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80056c8:	fb01 f303 	mul.w	r3, r1, r3
 80056cc:	441a      	add	r2, r3
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	22ff      	movs	r2, #255	; 0xff
 80056d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	22ff      	movs	r2, #255	; 0xff
 80056de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d114      	bne.n	8005712 <xQueueGenericReset+0xaa>
=======
 80068b2:	bf00      	nop
 80068b4:	e7fe      	b.n	80068b4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80068b6:	f002 f8b5 	bl	8008a24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681a      	ldr	r2, [r3, #0]
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068c2:	68f9      	ldr	r1, [r7, #12]
 80068c4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80068c6:	fb01 f303 	mul.w	r3, r1, r3
 80068ca:	441a      	add	r2, r3
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2200      	movs	r2, #0
 80068d4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068e6:	3b01      	subs	r3, #1
 80068e8:	68f9      	ldr	r1, [r7, #12]
 80068ea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80068ec:	fb01 f303 	mul.w	r3, r1, r3
 80068f0:	441a      	add	r2, r3
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	22ff      	movs	r2, #255	; 0xff
 80068fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	22ff      	movs	r2, #255	; 0xff
 8006902:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d114      	bne.n	8006936 <xQueueGenericReset+0xaa>
>>>>>>> Stashed changes
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
<<<<<<< Updated upstream
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	691b      	ldr	r3, [r3, #16]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d01a      	beq.n	8005726 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	3310      	adds	r3, #16
 80056f4:	4618      	mov	r0, r3
 80056f6:	f001 f963 	bl	80069c0 <xTaskRemoveFromEventList>
 80056fa:	4603      	mov	r3, r0
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d012      	beq.n	8005726 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005700:	4b0c      	ldr	r3, [pc, #48]	; (8005734 <xQueueGenericReset+0xcc>)
 8005702:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005706:	601a      	str	r2, [r3, #0]
 8005708:	f3bf 8f4f 	dsb	sy
 800570c:	f3bf 8f6f 	isb	sy
 8005710:	e009      	b.n	8005726 <xQueueGenericReset+0xbe>
=======
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	691b      	ldr	r3, [r3, #16]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d01a      	beq.n	800694a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	3310      	adds	r3, #16
 8006918:	4618      	mov	r0, r3
 800691a:	f001 f963 	bl	8007be4 <xTaskRemoveFromEventList>
 800691e:	4603      	mov	r3, r0
 8006920:	2b00      	cmp	r3, #0
 8006922:	d012      	beq.n	800694a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006924:	4b0c      	ldr	r3, [pc, #48]	; (8006958 <xQueueGenericReset+0xcc>)
 8006926:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800692a:	601a      	str	r2, [r3, #0]
 800692c:	f3bf 8f4f 	dsb	sy
 8006930:	f3bf 8f6f 	isb	sy
 8006934:	e009      	b.n	800694a <xQueueGenericReset+0xbe>
>>>>>>> Stashed changes
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
<<<<<<< Updated upstream
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	3310      	adds	r3, #16
 8005716:	4618      	mov	r0, r3
 8005718:	f7ff fef2 	bl	8005500 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	3324      	adds	r3, #36	; 0x24
 8005720:	4618      	mov	r0, r3
 8005722:	f7ff feed 	bl	8005500 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005726:	f002 f895 	bl	8007854 <vPortExitCritical>
=======
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	3310      	adds	r3, #16
 800693a:	4618      	mov	r0, r3
 800693c:	f7ff fef2 	bl	8006724 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	3324      	adds	r3, #36	; 0x24
 8006944:	4618      	mov	r0, r3
 8006946:	f7ff feed 	bl	8006724 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800694a:	f002 f89b 	bl	8008a84 <vPortExitCritical>
>>>>>>> Stashed changes

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
<<<<<<< Updated upstream
 800572a:	2301      	movs	r3, #1
}
 800572c:	4618      	mov	r0, r3
 800572e:	3710      	adds	r7, #16
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}
 8005734:	e000ed04 	.word	0xe000ed04

08005738 <xQueueGenericCreateStatic>:
=======
 800694e:	2301      	movs	r3, #1
}
 8006950:	4618      	mov	r0, r3
 8006952:	3710      	adds	r7, #16
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}
 8006958:	e000ed04 	.word	0xe000ed04

0800695c <xQueueGenericCreateStatic>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
<<<<<<< Updated upstream
 8005738:	b580      	push	{r7, lr}
 800573a:	b08e      	sub	sp, #56	; 0x38
 800573c:	af02      	add	r7, sp, #8
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	607a      	str	r2, [r7, #4]
 8005744:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d10a      	bne.n	8005762 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800574c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005750:	f383 8811 	msr	BASEPRI, r3
 8005754:	f3bf 8f6f 	isb	sy
 8005758:	f3bf 8f4f 	dsb	sy
 800575c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800575e:	bf00      	nop
 8005760:	e7fe      	b.n	8005760 <xQueueGenericCreateStatic+0x28>
=======
 800695c:	b580      	push	{r7, lr}
 800695e:	b08e      	sub	sp, #56	; 0x38
 8006960:	af02      	add	r7, sp, #8
 8006962:	60f8      	str	r0, [r7, #12]
 8006964:	60b9      	str	r1, [r7, #8]
 8006966:	607a      	str	r2, [r7, #4]
 8006968:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d10a      	bne.n	8006986 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006974:	f383 8811 	msr	BASEPRI, r3
 8006978:	f3bf 8f6f 	isb	sy
 800697c:	f3bf 8f4f 	dsb	sy
 8006980:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006982:	bf00      	nop
 8006984:	e7fe      	b.n	8006984 <xQueueGenericCreateStatic+0x28>
>>>>>>> Stashed changes

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
<<<<<<< Updated upstream
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d10a      	bne.n	800577e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800576c:	f383 8811 	msr	BASEPRI, r3
 8005770:	f3bf 8f6f 	isb	sy
 8005774:	f3bf 8f4f 	dsb	sy
 8005778:	627b      	str	r3, [r7, #36]	; 0x24
}
 800577a:	bf00      	nop
 800577c:	e7fe      	b.n	800577c <xQueueGenericCreateStatic+0x44>
=======
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d10a      	bne.n	80069a2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800698c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006990:	f383 8811 	msr	BASEPRI, r3
 8006994:	f3bf 8f6f 	isb	sy
 8006998:	f3bf 8f4f 	dsb	sy
 800699c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800699e:	bf00      	nop
 80069a0:	e7fe      	b.n	80069a0 <xQueueGenericCreateStatic+0x44>
>>>>>>> Stashed changes

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
<<<<<<< Updated upstream
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d002      	beq.n	800578a <xQueueGenericCreateStatic+0x52>
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d001      	beq.n	800578e <xQueueGenericCreateStatic+0x56>
 800578a:	2301      	movs	r3, #1
 800578c:	e000      	b.n	8005790 <xQueueGenericCreateStatic+0x58>
 800578e:	2300      	movs	r3, #0
 8005790:	2b00      	cmp	r3, #0
 8005792:	d10a      	bne.n	80057aa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005798:	f383 8811 	msr	BASEPRI, r3
 800579c:	f3bf 8f6f 	isb	sy
 80057a0:	f3bf 8f4f 	dsb	sy
 80057a4:	623b      	str	r3, [r7, #32]
}
 80057a6:	bf00      	nop
 80057a8:	e7fe      	b.n	80057a8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d102      	bne.n	80057b6 <xQueueGenericCreateStatic+0x7e>
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d101      	bne.n	80057ba <xQueueGenericCreateStatic+0x82>
 80057b6:	2301      	movs	r3, #1
 80057b8:	e000      	b.n	80057bc <xQueueGenericCreateStatic+0x84>
 80057ba:	2300      	movs	r3, #0
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d10a      	bne.n	80057d6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80057c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c4:	f383 8811 	msr	BASEPRI, r3
 80057c8:	f3bf 8f6f 	isb	sy
 80057cc:	f3bf 8f4f 	dsb	sy
 80057d0:	61fb      	str	r3, [r7, #28]
}
 80057d2:	bf00      	nop
 80057d4:	e7fe      	b.n	80057d4 <xQueueGenericCreateStatic+0x9c>
=======
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d002      	beq.n	80069ae <xQueueGenericCreateStatic+0x52>
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d001      	beq.n	80069b2 <xQueueGenericCreateStatic+0x56>
 80069ae:	2301      	movs	r3, #1
 80069b0:	e000      	b.n	80069b4 <xQueueGenericCreateStatic+0x58>
 80069b2:	2300      	movs	r3, #0
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d10a      	bne.n	80069ce <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80069b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069bc:	f383 8811 	msr	BASEPRI, r3
 80069c0:	f3bf 8f6f 	isb	sy
 80069c4:	f3bf 8f4f 	dsb	sy
 80069c8:	623b      	str	r3, [r7, #32]
}
 80069ca:	bf00      	nop
 80069cc:	e7fe      	b.n	80069cc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d102      	bne.n	80069da <xQueueGenericCreateStatic+0x7e>
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d101      	bne.n	80069de <xQueueGenericCreateStatic+0x82>
 80069da:	2301      	movs	r3, #1
 80069dc:	e000      	b.n	80069e0 <xQueueGenericCreateStatic+0x84>
 80069de:	2300      	movs	r3, #0
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d10a      	bne.n	80069fa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80069e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e8:	f383 8811 	msr	BASEPRI, r3
 80069ec:	f3bf 8f6f 	isb	sy
 80069f0:	f3bf 8f4f 	dsb	sy
 80069f4:	61fb      	str	r3, [r7, #28]
}
 80069f6:	bf00      	nop
 80069f8:	e7fe      	b.n	80069f8 <xQueueGenericCreateStatic+0x9c>
>>>>>>> Stashed changes
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
<<<<<<< Updated upstream
 80057d6:	2350      	movs	r3, #80	; 0x50
 80057d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	2b50      	cmp	r3, #80	; 0x50
 80057de:	d00a      	beq.n	80057f6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80057e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e4:	f383 8811 	msr	BASEPRI, r3
 80057e8:	f3bf 8f6f 	isb	sy
 80057ec:	f3bf 8f4f 	dsb	sy
 80057f0:	61bb      	str	r3, [r7, #24]
}
 80057f2:	bf00      	nop
 80057f4:	e7fe      	b.n	80057f4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80057f6:	697b      	ldr	r3, [r7, #20]
=======
 80069fa:	2350      	movs	r3, #80	; 0x50
 80069fc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	2b50      	cmp	r3, #80	; 0x50
 8006a02:	d00a      	beq.n	8006a1a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a08:	f383 8811 	msr	BASEPRI, r3
 8006a0c:	f3bf 8f6f 	isb	sy
 8006a10:	f3bf 8f4f 	dsb	sy
 8006a14:	61bb      	str	r3, [r7, #24]
}
 8006a16:	bf00      	nop
 8006a18:	e7fe      	b.n	8006a18 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006a1a:	697b      	ldr	r3, [r7, #20]
>>>>>>> Stashed changes
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
<<<<<<< Updated upstream
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80057fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d00d      	beq.n	800581e <xQueueGenericCreateStatic+0xe6>
=======
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d00d      	beq.n	8006a42 <xQueueGenericCreateStatic+0xe6>
>>>>>>> Stashed changes
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
<<<<<<< Updated upstream
 8005802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005804:	2201      	movs	r2, #1
 8005806:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
=======
 8006a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a28:	2201      	movs	r2, #1
 8006a2a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
>>>>>>> Stashed changes
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
<<<<<<< Updated upstream
 800580a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800580e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005810:	9300      	str	r3, [sp, #0]
 8005812:	4613      	mov	r3, r2
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	68b9      	ldr	r1, [r7, #8]
 8005818:	68f8      	ldr	r0, [r7, #12]
 800581a:	f000 f83f 	bl	800589c <prvInitialiseNewQueue>
=======
 8006a2e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a34:	9300      	str	r3, [sp, #0]
 8006a36:	4613      	mov	r3, r2
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	68b9      	ldr	r1, [r7, #8]
 8006a3c:	68f8      	ldr	r0, [r7, #12]
 8006a3e:	f000 f83f 	bl	8006ac0 <prvInitialiseNewQueue>
>>>>>>> Stashed changes
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
<<<<<<< Updated upstream
 800581e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005820:	4618      	mov	r0, r3
 8005822:	3730      	adds	r7, #48	; 0x30
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}

08005828 <xQueueGenericCreate>:
=======
 8006a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3730      	adds	r7, #48	; 0x30
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}

08006a4c <xQueueGenericCreate>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
<<<<<<< Updated upstream
 8005828:	b580      	push	{r7, lr}
 800582a:	b08a      	sub	sp, #40	; 0x28
 800582c:	af02      	add	r7, sp, #8
 800582e:	60f8      	str	r0, [r7, #12]
 8005830:	60b9      	str	r1, [r7, #8]
 8005832:	4613      	mov	r3, r2
 8005834:	71fb      	strb	r3, [r7, #7]
=======
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b08a      	sub	sp, #40	; 0x28
 8006a50:	af02      	add	r7, sp, #8
 8006a52:	60f8      	str	r0, [r7, #12]
 8006a54:	60b9      	str	r1, [r7, #8]
 8006a56:	4613      	mov	r3, r2
 8006a58:	71fb      	strb	r3, [r7, #7]
>>>>>>> Stashed changes
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
<<<<<<< Updated upstream
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d10a      	bne.n	8005852 <xQueueGenericCreate+0x2a>
	__asm volatile
 800583c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005840:	f383 8811 	msr	BASEPRI, r3
 8005844:	f3bf 8f6f 	isb	sy
 8005848:	f3bf 8f4f 	dsb	sy
 800584c:	613b      	str	r3, [r7, #16]
}
 800584e:	bf00      	nop
 8005850:	e7fe      	b.n	8005850 <xQueueGenericCreate+0x28>
=======
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d10a      	bne.n	8006a76 <xQueueGenericCreate+0x2a>
	__asm volatile
 8006a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a64:	f383 8811 	msr	BASEPRI, r3
 8006a68:	f3bf 8f6f 	isb	sy
 8006a6c:	f3bf 8f4f 	dsb	sy
 8006a70:	613b      	str	r3, [r7, #16]
}
 8006a72:	bf00      	nop
 8006a74:	e7fe      	b.n	8006a74 <xQueueGenericCreate+0x28>
>>>>>>> Stashed changes

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
<<<<<<< Updated upstream
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	68ba      	ldr	r2, [r7, #8]
 8005856:	fb02 f303 	mul.w	r3, r2, r3
 800585a:	61fb      	str	r3, [r7, #28]
=======
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	68ba      	ldr	r2, [r7, #8]
 8006a7a:	fb02 f303 	mul.w	r3, r2, r3
 8006a7e:	61fb      	str	r3, [r7, #28]
>>>>>>> Stashed changes
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
<<<<<<< Updated upstream
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	3350      	adds	r3, #80	; 0x50
 8005860:	4618      	mov	r0, r3
 8005862:	f002 f8e9 	bl	8007a38 <pvPortMalloc>
 8005866:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005868:	69bb      	ldr	r3, [r7, #24]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d011      	beq.n	8005892 <xQueueGenericCreate+0x6a>
=======
 8006a80:	69fb      	ldr	r3, [r7, #28]
 8006a82:	3350      	adds	r3, #80	; 0x50
 8006a84:	4618      	mov	r0, r3
 8006a86:	f002 f8ef 	bl	8008c68 <pvPortMalloc>
 8006a8a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006a8c:	69bb      	ldr	r3, [r7, #24]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d011      	beq.n	8006ab6 <xQueueGenericCreate+0x6a>
>>>>>>> Stashed changes
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
<<<<<<< Updated upstream
 800586e:	69bb      	ldr	r3, [r7, #24]
 8005870:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	3350      	adds	r3, #80	; 0x50
 8005876:	617b      	str	r3, [r7, #20]
=======
 8006a92:	69bb      	ldr	r3, [r7, #24]
 8006a94:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	3350      	adds	r3, #80	; 0x50
 8006a9a:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
<<<<<<< Updated upstream
 8005878:	69bb      	ldr	r3, [r7, #24]
 800587a:	2200      	movs	r2, #0
 800587c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
=======
 8006a9c:	69bb      	ldr	r3, [r7, #24]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
>>>>>>> Stashed changes
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
<<<<<<< Updated upstream
 8005880:	79fa      	ldrb	r2, [r7, #7]
 8005882:	69bb      	ldr	r3, [r7, #24]
 8005884:	9300      	str	r3, [sp, #0]
 8005886:	4613      	mov	r3, r2
 8005888:	697a      	ldr	r2, [r7, #20]
 800588a:	68b9      	ldr	r1, [r7, #8]
 800588c:	68f8      	ldr	r0, [r7, #12]
 800588e:	f000 f805 	bl	800589c <prvInitialiseNewQueue>
=======
 8006aa4:	79fa      	ldrb	r2, [r7, #7]
 8006aa6:	69bb      	ldr	r3, [r7, #24]
 8006aa8:	9300      	str	r3, [sp, #0]
 8006aaa:	4613      	mov	r3, r2
 8006aac:	697a      	ldr	r2, [r7, #20]
 8006aae:	68b9      	ldr	r1, [r7, #8]
 8006ab0:	68f8      	ldr	r0, [r7, #12]
 8006ab2:	f000 f805 	bl	8006ac0 <prvInitialiseNewQueue>
>>>>>>> Stashed changes
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
<<<<<<< Updated upstream
 8005892:	69bb      	ldr	r3, [r7, #24]
	}
 8005894:	4618      	mov	r0, r3
 8005896:	3720      	adds	r7, #32
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}

0800589c <prvInitialiseNewQueue>:
=======
 8006ab6:	69bb      	ldr	r3, [r7, #24]
	}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3720      	adds	r7, #32
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}

08006ac0 <prvInitialiseNewQueue>:
>>>>>>> Stashed changes

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
<<<<<<< Updated upstream
 800589c:	b580      	push	{r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	60f8      	str	r0, [r7, #12]
 80058a4:	60b9      	str	r1, [r7, #8]
 80058a6:	607a      	str	r2, [r7, #4]
 80058a8:	70fb      	strb	r3, [r7, #3]
=======
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b084      	sub	sp, #16
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	60f8      	str	r0, [r7, #12]
 8006ac8:	60b9      	str	r1, [r7, #8]
 8006aca:	607a      	str	r2, [r7, #4]
 8006acc:	70fb      	strb	r3, [r7, #3]
>>>>>>> Stashed changes
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
<<<<<<< Updated upstream
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d103      	bne.n	80058b8 <prvInitialiseNewQueue+0x1c>
=======
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d103      	bne.n	8006adc <prvInitialiseNewQueue+0x1c>
>>>>>>> Stashed changes
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
<<<<<<< Updated upstream
 80058b0:	69bb      	ldr	r3, [r7, #24]
 80058b2:	69ba      	ldr	r2, [r7, #24]
 80058b4:	601a      	str	r2, [r3, #0]
 80058b6:	e002      	b.n	80058be <prvInitialiseNewQueue+0x22>
=======
 8006ad4:	69bb      	ldr	r3, [r7, #24]
 8006ad6:	69ba      	ldr	r2, [r7, #24]
 8006ad8:	601a      	str	r2, [r3, #0]
 8006ada:	e002      	b.n	8006ae2 <prvInitialiseNewQueue+0x22>
>>>>>>> Stashed changes
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
<<<<<<< Updated upstream
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	601a      	str	r2, [r3, #0]
=======
 8006adc:	69bb      	ldr	r3, [r7, #24]
 8006ade:	687a      	ldr	r2, [r7, #4]
 8006ae0:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
<<<<<<< Updated upstream
 80058be:	69bb      	ldr	r3, [r7, #24]
 80058c0:	68fa      	ldr	r2, [r7, #12]
 80058c2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	68ba      	ldr	r2, [r7, #8]
 80058c8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80058ca:	2101      	movs	r1, #1
 80058cc:	69b8      	ldr	r0, [r7, #24]
 80058ce:	f7ff fecb 	bl	8005668 <xQueueGenericReset>
=======
 8006ae2:	69bb      	ldr	r3, [r7, #24]
 8006ae4:	68fa      	ldr	r2, [r7, #12]
 8006ae6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006ae8:	69bb      	ldr	r3, [r7, #24]
 8006aea:	68ba      	ldr	r2, [r7, #8]
 8006aec:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006aee:	2101      	movs	r1, #1
 8006af0:	69b8      	ldr	r0, [r7, #24]
 8006af2:	f7ff fecb 	bl	800688c <xQueueGenericReset>
>>>>>>> Stashed changes

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
<<<<<<< Updated upstream
 80058d2:	69bb      	ldr	r3, [r7, #24]
 80058d4:	78fa      	ldrb	r2, [r7, #3]
 80058d6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
=======
 8006af6:	69bb      	ldr	r3, [r7, #24]
 8006af8:	78fa      	ldrb	r2, [r7, #3]
 8006afa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
>>>>>>> Stashed changes
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
<<<<<<< Updated upstream
 80058da:	bf00      	nop
 80058dc:	3710      	adds	r7, #16
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
	...

080058e4 <xQueueGenericSend>:
=======
 8006afe:	bf00      	nop
 8006b00:	3710      	adds	r7, #16
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
	...

08006b08 <xQueueGenericSend>:
>>>>>>> Stashed changes

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
<<<<<<< Updated upstream
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b08e      	sub	sp, #56	; 0x38
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	60b9      	str	r1, [r7, #8]
 80058ee:	607a      	str	r2, [r7, #4]
 80058f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80058f2:	2300      	movs	r3, #0
 80058f4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80058fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d10a      	bne.n	8005916 <xQueueGenericSend+0x32>
	__asm volatile
 8005900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005904:	f383 8811 	msr	BASEPRI, r3
 8005908:	f3bf 8f6f 	isb	sy
 800590c:	f3bf 8f4f 	dsb	sy
 8005910:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005912:	bf00      	nop
 8005914:	e7fe      	b.n	8005914 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d103      	bne.n	8005924 <xQueueGenericSend+0x40>
 800591c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800591e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005920:	2b00      	cmp	r3, #0
 8005922:	d101      	bne.n	8005928 <xQueueGenericSend+0x44>
 8005924:	2301      	movs	r3, #1
 8005926:	e000      	b.n	800592a <xQueueGenericSend+0x46>
 8005928:	2300      	movs	r3, #0
 800592a:	2b00      	cmp	r3, #0
 800592c:	d10a      	bne.n	8005944 <xQueueGenericSend+0x60>
	__asm volatile
 800592e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005932:	f383 8811 	msr	BASEPRI, r3
 8005936:	f3bf 8f6f 	isb	sy
 800593a:	f3bf 8f4f 	dsb	sy
 800593e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005940:	bf00      	nop
 8005942:	e7fe      	b.n	8005942 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	2b02      	cmp	r3, #2
 8005948:	d103      	bne.n	8005952 <xQueueGenericSend+0x6e>
 800594a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800594c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800594e:	2b01      	cmp	r3, #1
 8005950:	d101      	bne.n	8005956 <xQueueGenericSend+0x72>
 8005952:	2301      	movs	r3, #1
 8005954:	e000      	b.n	8005958 <xQueueGenericSend+0x74>
 8005956:	2300      	movs	r3, #0
 8005958:	2b00      	cmp	r3, #0
 800595a:	d10a      	bne.n	8005972 <xQueueGenericSend+0x8e>
	__asm volatile
 800595c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005960:	f383 8811 	msr	BASEPRI, r3
 8005964:	f3bf 8f6f 	isb	sy
 8005968:	f3bf 8f4f 	dsb	sy
 800596c:	623b      	str	r3, [r7, #32]
}
 800596e:	bf00      	nop
 8005970:	e7fe      	b.n	8005970 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005972:	f001 f9e7 	bl	8006d44 <xTaskGetSchedulerState>
 8005976:	4603      	mov	r3, r0
 8005978:	2b00      	cmp	r3, #0
 800597a:	d102      	bne.n	8005982 <xQueueGenericSend+0x9e>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d101      	bne.n	8005986 <xQueueGenericSend+0xa2>
 8005982:	2301      	movs	r3, #1
 8005984:	e000      	b.n	8005988 <xQueueGenericSend+0xa4>
 8005986:	2300      	movs	r3, #0
 8005988:	2b00      	cmp	r3, #0
 800598a:	d10a      	bne.n	80059a2 <xQueueGenericSend+0xbe>
	__asm volatile
 800598c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005990:	f383 8811 	msr	BASEPRI, r3
 8005994:	f3bf 8f6f 	isb	sy
 8005998:	f3bf 8f4f 	dsb	sy
 800599c:	61fb      	str	r3, [r7, #28]
}
 800599e:	bf00      	nop
 80059a0:	e7fe      	b.n	80059a0 <xQueueGenericSend+0xbc>
=======
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b08e      	sub	sp, #56	; 0x38
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	60f8      	str	r0, [r7, #12]
 8006b10:	60b9      	str	r1, [r7, #8]
 8006b12:	607a      	str	r2, [r7, #4]
 8006b14:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006b16:	2300      	movs	r3, #0
 8006b18:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d10a      	bne.n	8006b3a <xQueueGenericSend+0x32>
	__asm volatile
 8006b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b28:	f383 8811 	msr	BASEPRI, r3
 8006b2c:	f3bf 8f6f 	isb	sy
 8006b30:	f3bf 8f4f 	dsb	sy
 8006b34:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006b36:	bf00      	nop
 8006b38:	e7fe      	b.n	8006b38 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d103      	bne.n	8006b48 <xQueueGenericSend+0x40>
 8006b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d101      	bne.n	8006b4c <xQueueGenericSend+0x44>
 8006b48:	2301      	movs	r3, #1
 8006b4a:	e000      	b.n	8006b4e <xQueueGenericSend+0x46>
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d10a      	bne.n	8006b68 <xQueueGenericSend+0x60>
	__asm volatile
 8006b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b56:	f383 8811 	msr	BASEPRI, r3
 8006b5a:	f3bf 8f6f 	isb	sy
 8006b5e:	f3bf 8f4f 	dsb	sy
 8006b62:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006b64:	bf00      	nop
 8006b66:	e7fe      	b.n	8006b66 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	2b02      	cmp	r3, #2
 8006b6c:	d103      	bne.n	8006b76 <xQueueGenericSend+0x6e>
 8006b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b72:	2b01      	cmp	r3, #1
 8006b74:	d101      	bne.n	8006b7a <xQueueGenericSend+0x72>
 8006b76:	2301      	movs	r3, #1
 8006b78:	e000      	b.n	8006b7c <xQueueGenericSend+0x74>
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d10a      	bne.n	8006b96 <xQueueGenericSend+0x8e>
	__asm volatile
 8006b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b84:	f383 8811 	msr	BASEPRI, r3
 8006b88:	f3bf 8f6f 	isb	sy
 8006b8c:	f3bf 8f4f 	dsb	sy
 8006b90:	623b      	str	r3, [r7, #32]
}
 8006b92:	bf00      	nop
 8006b94:	e7fe      	b.n	8006b94 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b96:	f001 f9e7 	bl	8007f68 <xTaskGetSchedulerState>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d102      	bne.n	8006ba6 <xQueueGenericSend+0x9e>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d101      	bne.n	8006baa <xQueueGenericSend+0xa2>
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	e000      	b.n	8006bac <xQueueGenericSend+0xa4>
 8006baa:	2300      	movs	r3, #0
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d10a      	bne.n	8006bc6 <xQueueGenericSend+0xbe>
	__asm volatile
 8006bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bb4:	f383 8811 	msr	BASEPRI, r3
 8006bb8:	f3bf 8f6f 	isb	sy
 8006bbc:	f3bf 8f4f 	dsb	sy
 8006bc0:	61fb      	str	r3, [r7, #28]
}
 8006bc2:	bf00      	nop
 8006bc4:	e7fe      	b.n	8006bc4 <xQueueGenericSend+0xbc>
>>>>>>> Stashed changes
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
<<<<<<< Updated upstream
 80059a2:	f001 ff27 	bl	80077f4 <vPortEnterCritical>
=======
 8006bc6:	f001 ff2d 	bl	8008a24 <vPortEnterCritical>
>>>>>>> Stashed changes
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
<<<<<<< Updated upstream
 80059a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d302      	bcc.n	80059b8 <xQueueGenericSend+0xd4>
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	2b02      	cmp	r3, #2
 80059b6:	d129      	bne.n	8005a0c <xQueueGenericSend+0x128>
=======
 8006bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	d302      	bcc.n	8006bdc <xQueueGenericSend+0xd4>
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	2b02      	cmp	r3, #2
 8006bda:	d129      	bne.n	8006c30 <xQueueGenericSend+0x128>
>>>>>>> Stashed changes
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
<<<<<<< Updated upstream
 80059b8:	683a      	ldr	r2, [r7, #0]
 80059ba:	68b9      	ldr	r1, [r7, #8]
 80059bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059be:	f000 fa0b 	bl	8005dd8 <prvCopyDataToQueue>
 80059c2:	62f8      	str	r0, [r7, #44]	; 0x2c
=======
 8006bdc:	683a      	ldr	r2, [r7, #0]
 8006bde:	68b9      	ldr	r1, [r7, #8]
 8006be0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006be2:	f000 fa0b 	bl	8006ffc <prvCopyDataToQueue>
 8006be6:	62f8      	str	r0, [r7, #44]	; 0x2c
>>>>>>> Stashed changes

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
<<<<<<< Updated upstream
 80059c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d010      	beq.n	80059ee <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ce:	3324      	adds	r3, #36	; 0x24
 80059d0:	4618      	mov	r0, r3
 80059d2:	f000 fff5 	bl	80069c0 <xTaskRemoveFromEventList>
 80059d6:	4603      	mov	r3, r0
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d013      	beq.n	8005a04 <xQueueGenericSend+0x120>
=======
 8006be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d010      	beq.n	8006c12 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf2:	3324      	adds	r3, #36	; 0x24
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f000 fff5 	bl	8007be4 <xTaskRemoveFromEventList>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d013      	beq.n	8006c28 <xQueueGenericSend+0x120>
>>>>>>> Stashed changes
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
<<<<<<< Updated upstream
 80059dc:	4b3f      	ldr	r3, [pc, #252]	; (8005adc <xQueueGenericSend+0x1f8>)
 80059de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059e2:	601a      	str	r2, [r3, #0]
 80059e4:	f3bf 8f4f 	dsb	sy
 80059e8:	f3bf 8f6f 	isb	sy
 80059ec:	e00a      	b.n	8005a04 <xQueueGenericSend+0x120>
=======
 8006c00:	4b3f      	ldr	r3, [pc, #252]	; (8006d00 <xQueueGenericSend+0x1f8>)
 8006c02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c06:	601a      	str	r2, [r3, #0]
 8006c08:	f3bf 8f4f 	dsb	sy
 8006c0c:	f3bf 8f6f 	isb	sy
 8006c10:	e00a      	b.n	8006c28 <xQueueGenericSend+0x120>
>>>>>>> Stashed changes
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
<<<<<<< Updated upstream
 80059ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d007      	beq.n	8005a04 <xQueueGenericSend+0x120>
=======
 8006c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d007      	beq.n	8006c28 <xQueueGenericSend+0x120>
>>>>>>> Stashed changes
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
<<<<<<< Updated upstream
 80059f4:	4b39      	ldr	r3, [pc, #228]	; (8005adc <xQueueGenericSend+0x1f8>)
 80059f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059fa:	601a      	str	r2, [r3, #0]
 80059fc:	f3bf 8f4f 	dsb	sy
 8005a00:	f3bf 8f6f 	isb	sy
=======
 8006c18:	4b39      	ldr	r3, [pc, #228]	; (8006d00 <xQueueGenericSend+0x1f8>)
 8006c1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c1e:	601a      	str	r2, [r3, #0]
 8006c20:	f3bf 8f4f 	dsb	sy
 8006c24:	f3bf 8f6f 	isb	sy
>>>>>>> Stashed changes
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
<<<<<<< Updated upstream
 8005a04:	f001 ff26 	bl	8007854 <vPortExitCritical>
				return pdPASS;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	e063      	b.n	8005ad4 <xQueueGenericSend+0x1f0>
=======
 8006c28:	f001 ff2c 	bl	8008a84 <vPortExitCritical>
				return pdPASS;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	e063      	b.n	8006cf8 <xQueueGenericSend+0x1f0>
>>>>>>> Stashed changes
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
<<<<<<< Updated upstream
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d103      	bne.n	8005a1a <xQueueGenericSend+0x136>
=======
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d103      	bne.n	8006c3e <xQueueGenericSend+0x136>
>>>>>>> Stashed changes
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
<<<<<<< Updated upstream
 8005a12:	f001 ff1f 	bl	8007854 <vPortExitCritical>
=======
 8006c36:	f001 ff25 	bl	8008a84 <vPortExitCritical>
>>>>>>> Stashed changes

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
<<<<<<< Updated upstream
 8005a16:	2300      	movs	r3, #0
 8005a18:	e05c      	b.n	8005ad4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d106      	bne.n	8005a2e <xQueueGenericSend+0x14a>
=======
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	e05c      	b.n	8006cf8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006c3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d106      	bne.n	8006c52 <xQueueGenericSend+0x14a>
>>>>>>> Stashed changes
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
<<<<<<< Updated upstream
 8005a20:	f107 0314 	add.w	r3, r7, #20
 8005a24:	4618      	mov	r0, r3
 8005a26:	f001 f82f 	bl	8006a88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	637b      	str	r3, [r7, #52]	; 0x34
=======
 8006c44:	f107 0314 	add.w	r3, r7, #20
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f001 f82f 	bl	8007cac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	637b      	str	r3, [r7, #52]	; 0x34
>>>>>>> Stashed changes
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
<<<<<<< Updated upstream
 8005a2e:	f001 ff11 	bl	8007854 <vPortExitCritical>
=======
 8006c52:	f001 ff17 	bl	8008a84 <vPortExitCritical>
>>>>>>> Stashed changes

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
<<<<<<< Updated upstream
 8005a32:	f000 fd9b 	bl	800656c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a36:	f001 fedd 	bl	80077f4 <vPortEnterCritical>
 8005a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a40:	b25b      	sxtb	r3, r3
 8005a42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a46:	d103      	bne.n	8005a50 <xQueueGenericSend+0x16c>
 8005a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a56:	b25b      	sxtb	r3, r3
 8005a58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a5c:	d103      	bne.n	8005a66 <xQueueGenericSend+0x182>
 8005a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a60:	2200      	movs	r2, #0
 8005a62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a66:	f001 fef5 	bl	8007854 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a6a:	1d3a      	adds	r2, r7, #4
 8005a6c:	f107 0314 	add.w	r3, r7, #20
 8005a70:	4611      	mov	r1, r2
 8005a72:	4618      	mov	r0, r3
 8005a74:	f001 f81e 	bl	8006ab4 <xTaskCheckForTimeOut>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d124      	bne.n	8005ac8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005a7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a80:	f000 faa2 	bl	8005fc8 <prvIsQueueFull>
 8005a84:	4603      	mov	r3, r0
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d018      	beq.n	8005abc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a8c:	3310      	adds	r3, #16
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	4611      	mov	r1, r2
 8005a92:	4618      	mov	r0, r3
 8005a94:	f000 ff44 	bl	8006920 <vTaskPlaceOnEventList>
=======
 8006c56:	f000 fd9b 	bl	8007790 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c5a:	f001 fee3 	bl	8008a24 <vPortEnterCritical>
 8006c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c64:	b25b      	sxtb	r3, r3
 8006c66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c6a:	d103      	bne.n	8006c74 <xQueueGenericSend+0x16c>
 8006c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c7a:	b25b      	sxtb	r3, r3
 8006c7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c80:	d103      	bne.n	8006c8a <xQueueGenericSend+0x182>
 8006c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c84:	2200      	movs	r2, #0
 8006c86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c8a:	f001 fefb 	bl	8008a84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c8e:	1d3a      	adds	r2, r7, #4
 8006c90:	f107 0314 	add.w	r3, r7, #20
 8006c94:	4611      	mov	r1, r2
 8006c96:	4618      	mov	r0, r3
 8006c98:	f001 f81e 	bl	8007cd8 <xTaskCheckForTimeOut>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d124      	bne.n	8006cec <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006ca2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ca4:	f000 faa2 	bl	80071ec <prvIsQueueFull>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d018      	beq.n	8006ce0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb0:	3310      	adds	r3, #16
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	4611      	mov	r1, r2
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f000 ff44 	bl	8007b44 <vTaskPlaceOnEventList>
>>>>>>> Stashed changes
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
<<<<<<< Updated upstream
 8005a98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a9a:	f000 fa2d 	bl	8005ef8 <prvUnlockQueue>
=======
 8006cbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006cbe:	f000 fa2d 	bl	800711c <prvUnlockQueue>
>>>>>>> Stashed changes
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
<<<<<<< Updated upstream
 8005a9e:	f000 fd73 	bl	8006588 <xTaskResumeAll>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	f47f af7c 	bne.w	80059a2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005aaa:	4b0c      	ldr	r3, [pc, #48]	; (8005adc <xQueueGenericSend+0x1f8>)
 8005aac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ab0:	601a      	str	r2, [r3, #0]
 8005ab2:	f3bf 8f4f 	dsb	sy
 8005ab6:	f3bf 8f6f 	isb	sy
 8005aba:	e772      	b.n	80059a2 <xQueueGenericSend+0xbe>
=======
 8006cc2:	f000 fd73 	bl	80077ac <xTaskResumeAll>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	f47f af7c 	bne.w	8006bc6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006cce:	4b0c      	ldr	r3, [pc, #48]	; (8006d00 <xQueueGenericSend+0x1f8>)
 8006cd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cd4:	601a      	str	r2, [r3, #0]
 8006cd6:	f3bf 8f4f 	dsb	sy
 8006cda:	f3bf 8f6f 	isb	sy
 8006cde:	e772      	b.n	8006bc6 <xQueueGenericSend+0xbe>
>>>>>>> Stashed changes
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
<<<<<<< Updated upstream
 8005abc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005abe:	f000 fa1b 	bl	8005ef8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ac2:	f000 fd61 	bl	8006588 <xTaskResumeAll>
 8005ac6:	e76c      	b.n	80059a2 <xQueueGenericSend+0xbe>
=======
 8006ce0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ce2:	f000 fa1b 	bl	800711c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ce6:	f000 fd61 	bl	80077ac <xTaskResumeAll>
 8006cea:	e76c      	b.n	8006bc6 <xQueueGenericSend+0xbe>
>>>>>>> Stashed changes
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
<<<<<<< Updated upstream
 8005ac8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005aca:	f000 fa15 	bl	8005ef8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005ace:	f000 fd5b 	bl	8006588 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005ad2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3738      	adds	r7, #56	; 0x38
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}
 8005adc:	e000ed04 	.word	0xe000ed04

08005ae0 <xQueueGenericSendFromISR>:
=======
 8006cec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006cee:	f000 fa15 	bl	800711c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006cf2:	f000 fd5b 	bl	80077ac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006cf6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3738      	adds	r7, #56	; 0x38
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}
 8006d00:	e000ed04 	.word	0xe000ed04

08006d04 <xQueueGenericSendFromISR>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
<<<<<<< Updated upstream
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b090      	sub	sp, #64	; 0x40
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	60f8      	str	r0, [r7, #12]
 8005ae8:	60b9      	str	r1, [r7, #8]
 8005aea:	607a      	str	r2, [r7, #4]
 8005aec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d10a      	bne.n	8005b0e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005afc:	f383 8811 	msr	BASEPRI, r3
 8005b00:	f3bf 8f6f 	isb	sy
 8005b04:	f3bf 8f4f 	dsb	sy
 8005b08:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005b0a:	bf00      	nop
 8005b0c:	e7fe      	b.n	8005b0c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d103      	bne.n	8005b1c <xQueueGenericSendFromISR+0x3c>
 8005b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d101      	bne.n	8005b20 <xQueueGenericSendFromISR+0x40>
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e000      	b.n	8005b22 <xQueueGenericSendFromISR+0x42>
 8005b20:	2300      	movs	r3, #0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d10a      	bne.n	8005b3c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b2a:	f383 8811 	msr	BASEPRI, r3
 8005b2e:	f3bf 8f6f 	isb	sy
 8005b32:	f3bf 8f4f 	dsb	sy
 8005b36:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005b38:	bf00      	nop
 8005b3a:	e7fe      	b.n	8005b3a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	2b02      	cmp	r3, #2
 8005b40:	d103      	bne.n	8005b4a <xQueueGenericSendFromISR+0x6a>
 8005b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	d101      	bne.n	8005b4e <xQueueGenericSendFromISR+0x6e>
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e000      	b.n	8005b50 <xQueueGenericSendFromISR+0x70>
 8005b4e:	2300      	movs	r3, #0
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d10a      	bne.n	8005b6a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b58:	f383 8811 	msr	BASEPRI, r3
 8005b5c:	f3bf 8f6f 	isb	sy
 8005b60:	f3bf 8f4f 	dsb	sy
 8005b64:	623b      	str	r3, [r7, #32]
}
 8005b66:	bf00      	nop
 8005b68:	e7fe      	b.n	8005b68 <xQueueGenericSendFromISR+0x88>
=======
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b090      	sub	sp, #64	; 0x40
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	60f8      	str	r0, [r7, #12]
 8006d0c:	60b9      	str	r1, [r7, #8]
 8006d0e:	607a      	str	r2, [r7, #4]
 8006d10:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d10a      	bne.n	8006d32 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d20:	f383 8811 	msr	BASEPRI, r3
 8006d24:	f3bf 8f6f 	isb	sy
 8006d28:	f3bf 8f4f 	dsb	sy
 8006d2c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006d2e:	bf00      	nop
 8006d30:	e7fe      	b.n	8006d30 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d103      	bne.n	8006d40 <xQueueGenericSendFromISR+0x3c>
 8006d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d101      	bne.n	8006d44 <xQueueGenericSendFromISR+0x40>
 8006d40:	2301      	movs	r3, #1
 8006d42:	e000      	b.n	8006d46 <xQueueGenericSendFromISR+0x42>
 8006d44:	2300      	movs	r3, #0
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d10a      	bne.n	8006d60 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d4e:	f383 8811 	msr	BASEPRI, r3
 8006d52:	f3bf 8f6f 	isb	sy
 8006d56:	f3bf 8f4f 	dsb	sy
 8006d5a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006d5c:	bf00      	nop
 8006d5e:	e7fe      	b.n	8006d5e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	2b02      	cmp	r3, #2
 8006d64:	d103      	bne.n	8006d6e <xQueueGenericSendFromISR+0x6a>
 8006d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d6a:	2b01      	cmp	r3, #1
 8006d6c:	d101      	bne.n	8006d72 <xQueueGenericSendFromISR+0x6e>
 8006d6e:	2301      	movs	r3, #1
 8006d70:	e000      	b.n	8006d74 <xQueueGenericSendFromISR+0x70>
 8006d72:	2300      	movs	r3, #0
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d10a      	bne.n	8006d8e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d7c:	f383 8811 	msr	BASEPRI, r3
 8006d80:	f3bf 8f6f 	isb	sy
 8006d84:	f3bf 8f4f 	dsb	sy
 8006d88:	623b      	str	r3, [r7, #32]
}
 8006d8a:	bf00      	nop
 8006d8c:	e7fe      	b.n	8006d8c <xQueueGenericSendFromISR+0x88>
>>>>>>> Stashed changes
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
<<<<<<< Updated upstream
 8005b6a:	f001 ff25 	bl	80079b8 <vPortValidateInterruptPriority>
=======
 8006d8e:	f001 ff2b 	bl	8008be8 <vPortValidateInterruptPriority>
>>>>>>> Stashed changes

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
<<<<<<< Updated upstream
 8005b6e:	f3ef 8211 	mrs	r2, BASEPRI
 8005b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b76:	f383 8811 	msr	BASEPRI, r3
 8005b7a:	f3bf 8f6f 	isb	sy
 8005b7e:	f3bf 8f4f 	dsb	sy
 8005b82:	61fa      	str	r2, [r7, #28]
 8005b84:	61bb      	str	r3, [r7, #24]
=======
 8006d92:	f3ef 8211 	mrs	r2, BASEPRI
 8006d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d9a:	f383 8811 	msr	BASEPRI, r3
 8006d9e:	f3bf 8f6f 	isb	sy
 8006da2:	f3bf 8f4f 	dsb	sy
 8006da6:	61fa      	str	r2, [r7, #28]
 8006da8:	61bb      	str	r3, [r7, #24]
>>>>>>> Stashed changes
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
<<<<<<< Updated upstream
 8005b86:	69fb      	ldr	r3, [r7, #28]
=======
 8006daa:	69fb      	ldr	r3, [r7, #28]
>>>>>>> Stashed changes
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
<<<<<<< Updated upstream
 8005b88:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d302      	bcc.n	8005b9c <xQueueGenericSendFromISR+0xbc>
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	2b02      	cmp	r3, #2
 8005b9a:	d12f      	bne.n	8005bfc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ba2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005baa:	62fb      	str	r3, [r7, #44]	; 0x2c
=======
 8006dac:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006db0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006db6:	429a      	cmp	r2, r3
 8006db8:	d302      	bcc.n	8006dc0 <xQueueGenericSendFromISR+0xbc>
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	2b02      	cmp	r3, #2
 8006dbe:	d12f      	bne.n	8006e20 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006dc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dce:	62fb      	str	r3, [r7, #44]	; 0x2c
>>>>>>> Stashed changes
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
<<<<<<< Updated upstream
 8005bac:	683a      	ldr	r2, [r7, #0]
 8005bae:	68b9      	ldr	r1, [r7, #8]
 8005bb0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005bb2:	f000 f911 	bl	8005dd8 <prvCopyDataToQueue>
=======
 8006dd0:	683a      	ldr	r2, [r7, #0]
 8006dd2:	68b9      	ldr	r1, [r7, #8]
 8006dd4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006dd6:	f000 f911 	bl	8006ffc <prvCopyDataToQueue>
>>>>>>> Stashed changes

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
<<<<<<< Updated upstream
 8005bb6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005bba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005bbe:	d112      	bne.n	8005be6 <xQueueGenericSendFromISR+0x106>
=======
 8006dda:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006dde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006de2:	d112      	bne.n	8006e0a <xQueueGenericSendFromISR+0x106>
>>>>>>> Stashed changes
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
<<<<<<< Updated upstream
 8005bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d016      	beq.n	8005bf6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bca:	3324      	adds	r3, #36	; 0x24
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f000 fef7 	bl	80069c0 <xTaskRemoveFromEventList>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d00e      	beq.n	8005bf6 <xQueueGenericSendFromISR+0x116>
=======
 8006de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d016      	beq.n	8006e1a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dee:	3324      	adds	r3, #36	; 0x24
 8006df0:	4618      	mov	r0, r3
 8006df2:	f000 fef7 	bl	8007be4 <xTaskRemoveFromEventList>
 8006df6:	4603      	mov	r3, r0
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d00e      	beq.n	8006e1a <xQueueGenericSendFromISR+0x116>
>>>>>>> Stashed changes
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
<<<<<<< Updated upstream
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d00b      	beq.n	8005bf6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2201      	movs	r2, #1
 8005be2:	601a      	str	r2, [r3, #0]
 8005be4:	e007      	b.n	8005bf6 <xQueueGenericSendFromISR+0x116>
=======
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d00b      	beq.n	8006e1a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2201      	movs	r2, #1
 8006e06:	601a      	str	r2, [r3, #0]
 8006e08:	e007      	b.n	8006e1a <xQueueGenericSendFromISR+0x116>
>>>>>>> Stashed changes
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
<<<<<<< Updated upstream
 8005be6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005bea:	3301      	adds	r3, #1
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	b25a      	sxtb	r2, r3
 8005bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bf2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005bfa:	e001      	b.n	8005c00 <xQueueGenericSendFromISR+0x120>
=======
 8006e0a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006e0e:	3301      	adds	r3, #1
 8006e10:	b2db      	uxtb	r3, r3
 8006e12:	b25a      	sxtb	r2, r3
 8006e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006e1e:	e001      	b.n	8006e24 <xQueueGenericSendFromISR+0x120>
>>>>>>> Stashed changes
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
<<<<<<< Updated upstream
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c02:	617b      	str	r3, [r7, #20]
=======
 8006e20:	2300      	movs	r3, #0
 8006e22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e26:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
<<<<<<< Updated upstream
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	f383 8811 	msr	BASEPRI, r3
=======
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	f383 8811 	msr	BASEPRI, r3
>>>>>>> Stashed changes
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
<<<<<<< Updated upstream
 8005c0a:	bf00      	nop
=======
 8006e2e:	bf00      	nop
>>>>>>> Stashed changes
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
<<<<<<< Updated upstream
 8005c0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3740      	adds	r7, #64	; 0x40
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
	...

08005c18 <xQueueReceive>:
=======
 8006e30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3740      	adds	r7, #64	; 0x40
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}
	...

08006e3c <xQueueReceive>:
>>>>>>> Stashed changes
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
<<<<<<< Updated upstream
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b08c      	sub	sp, #48	; 0x30
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	60b9      	str	r1, [r7, #8]
 8005c22:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005c24:	2300      	movs	r3, #0
 8005c26:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d10a      	bne.n	8005c48 <xQueueReceive+0x30>
	__asm volatile
 8005c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c36:	f383 8811 	msr	BASEPRI, r3
 8005c3a:	f3bf 8f6f 	isb	sy
 8005c3e:	f3bf 8f4f 	dsb	sy
 8005c42:	623b      	str	r3, [r7, #32]
}
 8005c44:	bf00      	nop
 8005c46:	e7fe      	b.n	8005c46 <xQueueReceive+0x2e>
=======
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b08c      	sub	sp, #48	; 0x30
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	60f8      	str	r0, [r7, #12]
 8006e44:	60b9      	str	r1, [r7, #8]
 8006e46:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d10a      	bne.n	8006e6c <xQueueReceive+0x30>
	__asm volatile
 8006e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e5a:	f383 8811 	msr	BASEPRI, r3
 8006e5e:	f3bf 8f6f 	isb	sy
 8006e62:	f3bf 8f4f 	dsb	sy
 8006e66:	623b      	str	r3, [r7, #32]
}
 8006e68:	bf00      	nop
 8006e6a:	e7fe      	b.n	8006e6a <xQueueReceive+0x2e>
>>>>>>> Stashed changes

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
<<<<<<< Updated upstream
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d103      	bne.n	8005c56 <xQueueReceive+0x3e>
 8005c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d101      	bne.n	8005c5a <xQueueReceive+0x42>
 8005c56:	2301      	movs	r3, #1
 8005c58:	e000      	b.n	8005c5c <xQueueReceive+0x44>
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d10a      	bne.n	8005c76 <xQueueReceive+0x5e>
	__asm volatile
 8005c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c64:	f383 8811 	msr	BASEPRI, r3
 8005c68:	f3bf 8f6f 	isb	sy
 8005c6c:	f3bf 8f4f 	dsb	sy
 8005c70:	61fb      	str	r3, [r7, #28]
}
 8005c72:	bf00      	nop
 8005c74:	e7fe      	b.n	8005c74 <xQueueReceive+0x5c>
=======
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d103      	bne.n	8006e7a <xQueueReceive+0x3e>
 8006e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d101      	bne.n	8006e7e <xQueueReceive+0x42>
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	e000      	b.n	8006e80 <xQueueReceive+0x44>
 8006e7e:	2300      	movs	r3, #0
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d10a      	bne.n	8006e9a <xQueueReceive+0x5e>
	__asm volatile
 8006e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e88:	f383 8811 	msr	BASEPRI, r3
 8006e8c:	f3bf 8f6f 	isb	sy
 8006e90:	f3bf 8f4f 	dsb	sy
 8006e94:	61fb      	str	r3, [r7, #28]
}
 8006e96:	bf00      	nop
 8006e98:	e7fe      	b.n	8006e98 <xQueueReceive+0x5c>
>>>>>>> Stashed changes

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
<<<<<<< Updated upstream
 8005c76:	f001 f865 	bl	8006d44 <xTaskGetSchedulerState>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d102      	bne.n	8005c86 <xQueueReceive+0x6e>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d101      	bne.n	8005c8a <xQueueReceive+0x72>
 8005c86:	2301      	movs	r3, #1
 8005c88:	e000      	b.n	8005c8c <xQueueReceive+0x74>
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d10a      	bne.n	8005ca6 <xQueueReceive+0x8e>
	__asm volatile
 8005c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c94:	f383 8811 	msr	BASEPRI, r3
 8005c98:	f3bf 8f6f 	isb	sy
 8005c9c:	f3bf 8f4f 	dsb	sy
 8005ca0:	61bb      	str	r3, [r7, #24]
}
 8005ca2:	bf00      	nop
 8005ca4:	e7fe      	b.n	8005ca4 <xQueueReceive+0x8c>
=======
 8006e9a:	f001 f865 	bl	8007f68 <xTaskGetSchedulerState>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d102      	bne.n	8006eaa <xQueueReceive+0x6e>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d101      	bne.n	8006eae <xQueueReceive+0x72>
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e000      	b.n	8006eb0 <xQueueReceive+0x74>
 8006eae:	2300      	movs	r3, #0
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d10a      	bne.n	8006eca <xQueueReceive+0x8e>
	__asm volatile
 8006eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eb8:	f383 8811 	msr	BASEPRI, r3
 8006ebc:	f3bf 8f6f 	isb	sy
 8006ec0:	f3bf 8f4f 	dsb	sy
 8006ec4:	61bb      	str	r3, [r7, #24]
}
 8006ec6:	bf00      	nop
 8006ec8:	e7fe      	b.n	8006ec8 <xQueueReceive+0x8c>
>>>>>>> Stashed changes
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
<<<<<<< Updated upstream
 8005ca6:	f001 fda5 	bl	80077f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cae:	627b      	str	r3, [r7, #36]	; 0x24
=======
 8006eca:	f001 fdab 	bl	8008a24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed2:	627b      	str	r3, [r7, #36]	; 0x24
>>>>>>> Stashed changes

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
<<<<<<< Updated upstream
 8005cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d01f      	beq.n	8005cf6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005cb6:	68b9      	ldr	r1, [r7, #8]
 8005cb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cba:	f000 f8f7 	bl	8005eac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc0:	1e5a      	subs	r2, r3, #1
 8005cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc4:	639a      	str	r2, [r3, #56]	; 0x38
=======
 8006ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d01f      	beq.n	8006f1a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006eda:	68b9      	ldr	r1, [r7, #8]
 8006edc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ede:	f000 f8f7 	bl	80070d0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee4:	1e5a      	subs	r2, r3, #1
 8006ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ee8:	639a      	str	r2, [r3, #56]	; 0x38
>>>>>>> Stashed changes

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
<<<<<<< Updated upstream
 8005cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc8:	691b      	ldr	r3, [r3, #16]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d00f      	beq.n	8005cee <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd0:	3310      	adds	r3, #16
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f000 fe74 	bl	80069c0 <xTaskRemoveFromEventList>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d007      	beq.n	8005cee <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005cde:	4b3d      	ldr	r3, [pc, #244]	; (8005dd4 <xQueueReceive+0x1bc>)
 8005ce0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ce4:	601a      	str	r2, [r3, #0]
 8005ce6:	f3bf 8f4f 	dsb	sy
 8005cea:	f3bf 8f6f 	isb	sy
=======
 8006eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eec:	691b      	ldr	r3, [r3, #16]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d00f      	beq.n	8006f12 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ef4:	3310      	adds	r3, #16
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f000 fe74 	bl	8007be4 <xTaskRemoveFromEventList>
 8006efc:	4603      	mov	r3, r0
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d007      	beq.n	8006f12 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006f02:	4b3d      	ldr	r3, [pc, #244]	; (8006ff8 <xQueueReceive+0x1bc>)
 8006f04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f08:	601a      	str	r2, [r3, #0]
 8006f0a:	f3bf 8f4f 	dsb	sy
 8006f0e:	f3bf 8f6f 	isb	sy
>>>>>>> Stashed changes
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
<<<<<<< Updated upstream
 8005cee:	f001 fdb1 	bl	8007854 <vPortExitCritical>
				return pdPASS;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e069      	b.n	8005dca <xQueueReceive+0x1b2>
=======
 8006f12:	f001 fdb7 	bl	8008a84 <vPortExitCritical>
				return pdPASS;
 8006f16:	2301      	movs	r3, #1
 8006f18:	e069      	b.n	8006fee <xQueueReceive+0x1b2>
>>>>>>> Stashed changes
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
<<<<<<< Updated upstream
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d103      	bne.n	8005d04 <xQueueReceive+0xec>
=======
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d103      	bne.n	8006f28 <xQueueReceive+0xec>
>>>>>>> Stashed changes
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
<<<<<<< Updated upstream
 8005cfc:	f001 fdaa 	bl	8007854 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005d00:	2300      	movs	r3, #0
 8005d02:	e062      	b.n	8005dca <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d106      	bne.n	8005d18 <xQueueReceive+0x100>
=======
 8006f20:	f001 fdb0 	bl	8008a84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006f24:	2300      	movs	r3, #0
 8006f26:	e062      	b.n	8006fee <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d106      	bne.n	8006f3c <xQueueReceive+0x100>
>>>>>>> Stashed changes
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
<<<<<<< Updated upstream
 8005d0a:	f107 0310 	add.w	r3, r7, #16
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f000 feba 	bl	8006a88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d14:	2301      	movs	r3, #1
 8005d16:	62fb      	str	r3, [r7, #44]	; 0x2c
=======
 8006f2e:	f107 0310 	add.w	r3, r7, #16
 8006f32:	4618      	mov	r0, r3
 8006f34:	f000 feba 	bl	8007cac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
>>>>>>> Stashed changes
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
<<<<<<< Updated upstream
 8005d18:	f001 fd9c 	bl	8007854 <vPortExitCritical>
=======
 8006f3c:	f001 fda2 	bl	8008a84 <vPortExitCritical>
>>>>>>> Stashed changes

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
<<<<<<< Updated upstream
 8005d1c:	f000 fc26 	bl	800656c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d20:	f001 fd68 	bl	80077f4 <vPortEnterCritical>
 8005d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d2a:	b25b      	sxtb	r3, r3
 8005d2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d30:	d103      	bne.n	8005d3a <xQueueReceive+0x122>
 8005d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d34:	2200      	movs	r2, #0
 8005d36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d40:	b25b      	sxtb	r3, r3
 8005d42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d46:	d103      	bne.n	8005d50 <xQueueReceive+0x138>
 8005d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d50:	f001 fd80 	bl	8007854 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005d54:	1d3a      	adds	r2, r7, #4
 8005d56:	f107 0310 	add.w	r3, r7, #16
 8005d5a:	4611      	mov	r1, r2
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f000 fea9 	bl	8006ab4 <xTaskCheckForTimeOut>
 8005d62:	4603      	mov	r3, r0
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d123      	bne.n	8005db0 <xQueueReceive+0x198>
=======
 8006f40:	f000 fc26 	bl	8007790 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006f44:	f001 fd6e 	bl	8008a24 <vPortEnterCritical>
 8006f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f4e:	b25b      	sxtb	r3, r3
 8006f50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f54:	d103      	bne.n	8006f5e <xQueueReceive+0x122>
 8006f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f58:	2200      	movs	r2, #0
 8006f5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f64:	b25b      	sxtb	r3, r3
 8006f66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f6a:	d103      	bne.n	8006f74 <xQueueReceive+0x138>
 8006f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f6e:	2200      	movs	r2, #0
 8006f70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f74:	f001 fd86 	bl	8008a84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006f78:	1d3a      	adds	r2, r7, #4
 8006f7a:	f107 0310 	add.w	r3, r7, #16
 8006f7e:	4611      	mov	r1, r2
 8006f80:	4618      	mov	r0, r3
 8006f82:	f000 fea9 	bl	8007cd8 <xTaskCheckForTimeOut>
 8006f86:	4603      	mov	r3, r0
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d123      	bne.n	8006fd4 <xQueueReceive+0x198>
>>>>>>> Stashed changes
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
<<<<<<< Updated upstream
 8005d68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d6a:	f000 f917 	bl	8005f9c <prvIsQueueEmpty>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d017      	beq.n	8005da4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d76:	3324      	adds	r3, #36	; 0x24
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	4611      	mov	r1, r2
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f000 fdcf 	bl	8006920 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005d82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d84:	f000 f8b8 	bl	8005ef8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005d88:	f000 fbfe 	bl	8006588 <xTaskResumeAll>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d189      	bne.n	8005ca6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005d92:	4b10      	ldr	r3, [pc, #64]	; (8005dd4 <xQueueReceive+0x1bc>)
 8005d94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d98:	601a      	str	r2, [r3, #0]
 8005d9a:	f3bf 8f4f 	dsb	sy
 8005d9e:	f3bf 8f6f 	isb	sy
 8005da2:	e780      	b.n	8005ca6 <xQueueReceive+0x8e>
=======
 8006f8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f8e:	f000 f917 	bl	80071c0 <prvIsQueueEmpty>
 8006f92:	4603      	mov	r3, r0
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d017      	beq.n	8006fc8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f9a:	3324      	adds	r3, #36	; 0x24
 8006f9c:	687a      	ldr	r2, [r7, #4]
 8006f9e:	4611      	mov	r1, r2
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f000 fdcf 	bl	8007b44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006fa6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fa8:	f000 f8b8 	bl	800711c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006fac:	f000 fbfe 	bl	80077ac <xTaskResumeAll>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d189      	bne.n	8006eca <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006fb6:	4b10      	ldr	r3, [pc, #64]	; (8006ff8 <xQueueReceive+0x1bc>)
 8006fb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fbc:	601a      	str	r2, [r3, #0]
 8006fbe:	f3bf 8f4f 	dsb	sy
 8006fc2:	f3bf 8f6f 	isb	sy
 8006fc6:	e780      	b.n	8006eca <xQueueReceive+0x8e>
>>>>>>> Stashed changes
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
<<<<<<< Updated upstream
 8005da4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005da6:	f000 f8a7 	bl	8005ef8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005daa:	f000 fbed 	bl	8006588 <xTaskResumeAll>
 8005dae:	e77a      	b.n	8005ca6 <xQueueReceive+0x8e>
=======
 8006fc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fca:	f000 f8a7 	bl	800711c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006fce:	f000 fbed 	bl	80077ac <xTaskResumeAll>
 8006fd2:	e77a      	b.n	8006eca <xQueueReceive+0x8e>
>>>>>>> Stashed changes
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
<<<<<<< Updated upstream
 8005db0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005db2:	f000 f8a1 	bl	8005ef8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005db6:	f000 fbe7 	bl	8006588 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005dba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005dbc:	f000 f8ee 	bl	8005f9c <prvIsQueueEmpty>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	f43f af6f 	beq.w	8005ca6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005dc8:	2300      	movs	r3, #0
=======
 8006fd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fd6:	f000 f8a1 	bl	800711c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006fda:	f000 fbe7 	bl	80077ac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006fde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fe0:	f000 f8ee 	bl	80071c0 <prvIsQueueEmpty>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	f43f af6f 	beq.w	8006eca <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006fec:	2300      	movs	r3, #0
>>>>>>> Stashed changes
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
<<<<<<< Updated upstream
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3730      	adds	r7, #48	; 0x30
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	bf00      	nop
 8005dd4:	e000ed04 	.word	0xe000ed04

08005dd8 <prvCopyDataToQueue>:
=======
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3730      	adds	r7, #48	; 0x30
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
 8006ff6:	bf00      	nop
 8006ff8:	e000ed04 	.word	0xe000ed04

08006ffc <prvCopyDataToQueue>:
>>>>>>> Stashed changes

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
<<<<<<< Updated upstream
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b086      	sub	sp, #24
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	60f8      	str	r0, [r7, #12]
 8005de0:	60b9      	str	r1, [r7, #8]
 8005de2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005de4:	2300      	movs	r3, #0
 8005de6:	617b      	str	r3, [r7, #20]
=======
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b086      	sub	sp, #24
 8007000:	af00      	add	r7, sp, #0
 8007002:	60f8      	str	r0, [r7, #12]
 8007004:	60b9      	str	r1, [r7, #8]
 8007006:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007008:	2300      	movs	r3, #0
 800700a:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
<<<<<<< Updated upstream
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d10d      	bne.n	8005e12 <prvCopyDataToQueue+0x3a>
=======
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007010:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007016:	2b00      	cmp	r3, #0
 8007018:	d10d      	bne.n	8007036 <prvCopyDataToQueue+0x3a>
>>>>>>> Stashed changes
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
<<<<<<< Updated upstream
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d14d      	bne.n	8005e9a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	4618      	mov	r0, r3
 8005e04:	f000 ffbc 	bl	8006d80 <xTaskPriorityDisinherit>
 8005e08:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	609a      	str	r2, [r3, #8]
 8005e10:	e043      	b.n	8005e9a <prvCopyDataToQueue+0xc2>
=======
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d14d      	bne.n	80070be <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	4618      	mov	r0, r3
 8007028:	f000 ffbc 	bl	8007fa4 <xTaskPriorityDisinherit>
 800702c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2200      	movs	r2, #0
 8007032:	609a      	str	r2, [r3, #8]
 8007034:	e043      	b.n	80070be <prvCopyDataToQueue+0xc2>
>>>>>>> Stashed changes
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
<<<<<<< Updated upstream
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d119      	bne.n	8005e4c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	6858      	ldr	r0, [r3, #4]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e20:	461a      	mov	r2, r3
 8005e22:	68b9      	ldr	r1, [r7, #8]
 8005e24:	f002 f9ad 	bl	8008182 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	685a      	ldr	r2, [r3, #4]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e30:	441a      	add	r2, r3
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	685a      	ldr	r2, [r3, #4]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d32b      	bcc.n	8005e9a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	605a      	str	r2, [r3, #4]
 8005e4a:	e026      	b.n	8005e9a <prvCopyDataToQueue+0xc2>
=======
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d119      	bne.n	8007070 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	6858      	ldr	r0, [r3, #4]
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007044:	461a      	mov	r2, r3
 8007046:	68b9      	ldr	r1, [r7, #8]
 8007048:	f002 f9b3 	bl	80093b2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	685a      	ldr	r2, [r3, #4]
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007054:	441a      	add	r2, r3
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	685a      	ldr	r2, [r3, #4]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	429a      	cmp	r2, r3
 8007064:	d32b      	bcc.n	80070be <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681a      	ldr	r2, [r3, #0]
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	605a      	str	r2, [r3, #4]
 800706e:	e026      	b.n	80070be <prvCopyDataToQueue+0xc2>
>>>>>>> Stashed changes
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
<<<<<<< Updated upstream
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	68d8      	ldr	r0, [r3, #12]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e54:	461a      	mov	r2, r3
 8005e56:	68b9      	ldr	r1, [r7, #8]
 8005e58:	f002 f993 	bl	8008182 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	68da      	ldr	r2, [r3, #12]
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e64:	425b      	negs	r3, r3
 8005e66:	441a      	add	r2, r3
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	68da      	ldr	r2, [r3, #12]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d207      	bcs.n	8005e88 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	689a      	ldr	r2, [r3, #8]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e80:	425b      	negs	r3, r3
 8005e82:	441a      	add	r2, r3
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	60da      	str	r2, [r3, #12]
=======
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	68d8      	ldr	r0, [r3, #12]
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007078:	461a      	mov	r2, r3
 800707a:	68b9      	ldr	r1, [r7, #8]
 800707c:	f002 f999 	bl	80093b2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	68da      	ldr	r2, [r3, #12]
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007088:	425b      	negs	r3, r3
 800708a:	441a      	add	r2, r3
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	68da      	ldr	r2, [r3, #12]
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	429a      	cmp	r2, r3
 800709a:	d207      	bcs.n	80070ac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	689a      	ldr	r2, [r3, #8]
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a4:	425b      	negs	r3, r3
 80070a6:	441a      	add	r2, r3
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	60da      	str	r2, [r3, #12]
>>>>>>> Stashed changes
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
<<<<<<< Updated upstream
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2b02      	cmp	r3, #2
 8005e8c:	d105      	bne.n	8005e9a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d002      	beq.n	8005e9a <prvCopyDataToQueue+0xc2>
=======
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2b02      	cmp	r3, #2
 80070b0:	d105      	bne.n	80070be <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d002      	beq.n	80070be <prvCopyDataToQueue+0xc2>
>>>>>>> Stashed changes
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
<<<<<<< Updated upstream
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	3b01      	subs	r3, #1
 8005e98:	613b      	str	r3, [r7, #16]
=======
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	3b01      	subs	r3, #1
 80070bc:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
<<<<<<< Updated upstream
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	1c5a      	adds	r2, r3, #1
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005ea2:	697b      	ldr	r3, [r7, #20]
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3718      	adds	r7, #24
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}

08005eac <prvCopyDataFromQueue>:
=======
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	1c5a      	adds	r2, r3, #1
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80070c6:	697b      	ldr	r3, [r7, #20]
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3718      	adds	r7, #24
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}

080070d0 <prvCopyDataFromQueue>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
<<<<<<< Updated upstream
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b082      	sub	sp, #8
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d018      	beq.n	8005ef0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	68da      	ldr	r2, [r3, #12]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec6:	441a      	add	r2, r3
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	68da      	ldr	r2, [r3, #12]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d303      	bcc.n	8005ee0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	60da      	str	r2, [r3, #12]
=======
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b082      	sub	sp, #8
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d018      	beq.n	8007114 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	68da      	ldr	r2, [r3, #12]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ea:	441a      	add	r2, r3
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	68da      	ldr	r2, [r3, #12]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	429a      	cmp	r2, r3
 80070fa:	d303      	bcc.n	8007104 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681a      	ldr	r2, [r3, #0]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	60da      	str	r2, [r3, #12]
>>>>>>> Stashed changes
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
<<<<<<< Updated upstream
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	68d9      	ldr	r1, [r3, #12]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee8:	461a      	mov	r2, r3
 8005eea:	6838      	ldr	r0, [r7, #0]
 8005eec:	f002 f949 	bl	8008182 <memcpy>
	}
}
 8005ef0:	bf00      	nop
 8005ef2:	3708      	adds	r7, #8
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}

08005ef8 <prvUnlockQueue>:
=======
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	68d9      	ldr	r1, [r3, #12]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800710c:	461a      	mov	r2, r3
 800710e:	6838      	ldr	r0, [r7, #0]
 8007110:	f002 f94f 	bl	80093b2 <memcpy>
	}
}
 8007114:	bf00      	nop
 8007116:	3708      	adds	r7, #8
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}

0800711c <prvUnlockQueue>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
<<<<<<< Updated upstream
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b084      	sub	sp, #16
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
=======
 800711c:	b580      	push	{r7, lr}
 800711e:	b084      	sub	sp, #16
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
<<<<<<< Updated upstream
 8005f00:	f001 fc78 	bl	80077f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f0a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f0c:	e011      	b.n	8005f32 <prvUnlockQueue+0x3a>
=======
 8007124:	f001 fc7e 	bl	8008a24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800712e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007130:	e011      	b.n	8007156 <prvUnlockQueue+0x3a>
>>>>>>> Stashed changes
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
<<<<<<< Updated upstream
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d012      	beq.n	8005f3c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	3324      	adds	r3, #36	; 0x24
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f000 fd50 	bl	80069c0 <xTaskRemoveFromEventList>
 8005f20:	4603      	mov	r3, r0
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d001      	beq.n	8005f2a <prvUnlockQueue+0x32>
=======
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007136:	2b00      	cmp	r3, #0
 8007138:	d012      	beq.n	8007160 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	3324      	adds	r3, #36	; 0x24
 800713e:	4618      	mov	r0, r3
 8007140:	f000 fd50 	bl	8007be4 <xTaskRemoveFromEventList>
 8007144:	4603      	mov	r3, r0
 8007146:	2b00      	cmp	r3, #0
 8007148:	d001      	beq.n	800714e <prvUnlockQueue+0x32>
>>>>>>> Stashed changes
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
<<<<<<< Updated upstream
 8005f26:	f000 fe27 	bl	8006b78 <vTaskMissedYield>
=======
 800714a:	f000 fe27 	bl	8007d9c <vTaskMissedYield>
>>>>>>> Stashed changes
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
<<<<<<< Updated upstream
 8005f2a:	7bfb      	ldrb	r3, [r7, #15]
 8005f2c:	3b01      	subs	r3, #1
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	dce9      	bgt.n	8005f0e <prvUnlockQueue+0x16>
 8005f3a:	e000      	b.n	8005f3e <prvUnlockQueue+0x46>
					break;
 8005f3c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	22ff      	movs	r2, #255	; 0xff
 8005f42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005f46:	f001 fc85 	bl	8007854 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005f4a:	f001 fc53 	bl	80077f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f54:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f56:	e011      	b.n	8005f7c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	691b      	ldr	r3, [r3, #16]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d012      	beq.n	8005f86 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	3310      	adds	r3, #16
 8005f64:	4618      	mov	r0, r3
 8005f66:	f000 fd2b 	bl	80069c0 <xTaskRemoveFromEventList>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d001      	beq.n	8005f74 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005f70:	f000 fe02 	bl	8006b78 <vTaskMissedYield>
=======
 800714e:	7bfb      	ldrb	r3, [r7, #15]
 8007150:	3b01      	subs	r3, #1
 8007152:	b2db      	uxtb	r3, r3
 8007154:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007156:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800715a:	2b00      	cmp	r3, #0
 800715c:	dce9      	bgt.n	8007132 <prvUnlockQueue+0x16>
 800715e:	e000      	b.n	8007162 <prvUnlockQueue+0x46>
					break;
 8007160:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	22ff      	movs	r2, #255	; 0xff
 8007166:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800716a:	f001 fc8b 	bl	8008a84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800716e:	f001 fc59 	bl	8008a24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007178:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800717a:	e011      	b.n	80071a0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	691b      	ldr	r3, [r3, #16]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d012      	beq.n	80071aa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	3310      	adds	r3, #16
 8007188:	4618      	mov	r0, r3
 800718a:	f000 fd2b 	bl	8007be4 <xTaskRemoveFromEventList>
 800718e:	4603      	mov	r3, r0
 8007190:	2b00      	cmp	r3, #0
 8007192:	d001      	beq.n	8007198 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007194:	f000 fe02 	bl	8007d9c <vTaskMissedYield>
>>>>>>> Stashed changes
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
<<<<<<< Updated upstream
 8005f74:	7bbb      	ldrb	r3, [r7, #14]
 8005f76:	3b01      	subs	r3, #1
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	dce9      	bgt.n	8005f58 <prvUnlockQueue+0x60>
 8005f84:	e000      	b.n	8005f88 <prvUnlockQueue+0x90>
=======
 8007198:	7bbb      	ldrb	r3, [r7, #14]
 800719a:	3b01      	subs	r3, #1
 800719c:	b2db      	uxtb	r3, r3
 800719e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80071a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	dce9      	bgt.n	800717c <prvUnlockQueue+0x60>
 80071a8:	e000      	b.n	80071ac <prvUnlockQueue+0x90>
>>>>>>> Stashed changes
			}
			else
			{
				break;
<<<<<<< Updated upstream
 8005f86:	bf00      	nop
=======
 80071aa:	bf00      	nop
>>>>>>> Stashed changes
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
<<<<<<< Updated upstream
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	22ff      	movs	r2, #255	; 0xff
 8005f8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005f90:	f001 fc60 	bl	8007854 <vPortExitCritical>
}
 8005f94:	bf00      	nop
 8005f96:	3710      	adds	r7, #16
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <prvIsQueueEmpty>:
=======
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	22ff      	movs	r2, #255	; 0xff
 80071b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80071b4:	f001 fc66 	bl	8008a84 <vPortExitCritical>
}
 80071b8:	bf00      	nop
 80071ba:	3710      	adds	r7, #16
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}

080071c0 <prvIsQueueEmpty>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
<<<<<<< Updated upstream
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b084      	sub	sp, #16
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005fa4:	f001 fc26 	bl	80077f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d102      	bne.n	8005fb6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	60fb      	str	r3, [r7, #12]
 8005fb4:	e001      	b.n	8005fba <prvIsQueueEmpty+0x1e>
=======
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b084      	sub	sp, #16
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80071c8:	f001 fc2c 	bl	8008a24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d102      	bne.n	80071da <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80071d4:	2301      	movs	r3, #1
 80071d6:	60fb      	str	r3, [r7, #12]
 80071d8:	e001      	b.n	80071de <prvIsQueueEmpty+0x1e>
>>>>>>> Stashed changes
		}
		else
		{
			xReturn = pdFALSE;
<<<<<<< Updated upstream
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005fba:	f001 fc4b 	bl	8007854 <vPortExitCritical>

	return xReturn;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3710      	adds	r7, #16
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}

08005fc8 <prvIsQueueFull>:
=======
 80071da:	2300      	movs	r3, #0
 80071dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80071de:	f001 fc51 	bl	8008a84 <vPortExitCritical>

	return xReturn;
 80071e2:	68fb      	ldr	r3, [r7, #12]
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3710      	adds	r7, #16
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}

080071ec <prvIsQueueFull>:
>>>>>>> Stashed changes
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
<<<<<<< Updated upstream
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b084      	sub	sp, #16
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005fd0:	f001 fc10 	bl	80077f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d102      	bne.n	8005fe6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	60fb      	str	r3, [r7, #12]
 8005fe4:	e001      	b.n	8005fea <prvIsQueueFull+0x22>
=======
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b084      	sub	sp, #16
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80071f4:	f001 fc16 	bl	8008a24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007200:	429a      	cmp	r2, r3
 8007202:	d102      	bne.n	800720a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007204:	2301      	movs	r3, #1
 8007206:	60fb      	str	r3, [r7, #12]
 8007208:	e001      	b.n	800720e <prvIsQueueFull+0x22>
>>>>>>> Stashed changes
		}
		else
		{
			xReturn = pdFALSE;
<<<<<<< Updated upstream
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005fea:	f001 fc33 	bl	8007854 <vPortExitCritical>

	return xReturn;
 8005fee:	68fb      	ldr	r3, [r7, #12]
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3710      	adds	r7, #16
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <vQueueAddToRegistry>:
=======
 800720a:	2300      	movs	r3, #0
 800720c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800720e:	f001 fc39 	bl	8008a84 <vPortExitCritical>

	return xReturn;
 8007212:	68fb      	ldr	r3, [r7, #12]
}
 8007214:	4618      	mov	r0, r3
 8007216:	3710      	adds	r7, #16
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}

0800721c <vQueueAddToRegistry>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
<<<<<<< Updated upstream
 8005ff8:	b480      	push	{r7}
 8005ffa:	b085      	sub	sp, #20
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	6039      	str	r1, [r7, #0]
=======
 800721c:	b480      	push	{r7}
 800721e:	b085      	sub	sp, #20
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
<<<<<<< Updated upstream
 8006002:	2300      	movs	r3, #0
 8006004:	60fb      	str	r3, [r7, #12]
 8006006:	e014      	b.n	8006032 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006008:	4a0f      	ldr	r2, [pc, #60]	; (8006048 <vQueueAddToRegistry+0x50>)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d10b      	bne.n	800602c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006014:	490c      	ldr	r1, [pc, #48]	; (8006048 <vQueueAddToRegistry+0x50>)
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	683a      	ldr	r2, [r7, #0]
 800601a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800601e:	4a0a      	ldr	r2, [pc, #40]	; (8006048 <vQueueAddToRegistry+0x50>)
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	00db      	lsls	r3, r3, #3
 8006024:	4413      	add	r3, r2
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800602a:	e006      	b.n	800603a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	3301      	adds	r3, #1
 8006030:	60fb      	str	r3, [r7, #12]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2b07      	cmp	r3, #7
 8006036:	d9e7      	bls.n	8006008 <vQueueAddToRegistry+0x10>
=======
 8007226:	2300      	movs	r3, #0
 8007228:	60fb      	str	r3, [r7, #12]
 800722a:	e014      	b.n	8007256 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800722c:	4a0f      	ldr	r2, [pc, #60]	; (800726c <vQueueAddToRegistry+0x50>)
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d10b      	bne.n	8007250 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007238:	490c      	ldr	r1, [pc, #48]	; (800726c <vQueueAddToRegistry+0x50>)
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	683a      	ldr	r2, [r7, #0]
 800723e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007242:	4a0a      	ldr	r2, [pc, #40]	; (800726c <vQueueAddToRegistry+0x50>)
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	00db      	lsls	r3, r3, #3
 8007248:	4413      	add	r3, r2
 800724a:	687a      	ldr	r2, [r7, #4]
 800724c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800724e:	e006      	b.n	800725e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	3301      	adds	r3, #1
 8007254:	60fb      	str	r3, [r7, #12]
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2b07      	cmp	r3, #7
 800725a:	d9e7      	bls.n	800722c <vQueueAddToRegistry+0x10>
>>>>>>> Stashed changes
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
<<<<<<< Updated upstream
 8006038:	bf00      	nop
 800603a:	bf00      	nop
 800603c:	3714      	adds	r7, #20
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr
 8006046:	bf00      	nop
 8006048:	20000abc 	.word	0x20000abc

0800604c <vQueueWaitForMessageRestricted>:
=======
 800725c:	bf00      	nop
 800725e:	bf00      	nop
 8007260:	3714      	adds	r7, #20
 8007262:	46bd      	mov	sp, r7
 8007264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007268:	4770      	bx	lr
 800726a:	bf00      	nop
 800726c:	20000a14 	.word	0x20000a14

08007270 <vQueueWaitForMessageRestricted>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
<<<<<<< Updated upstream
 800604c:	b580      	push	{r7, lr}
 800604e:	b086      	sub	sp, #24
 8006050:	af00      	add	r7, sp, #0
 8006052:	60f8      	str	r0, [r7, #12]
 8006054:	60b9      	str	r1, [r7, #8]
 8006056:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	617b      	str	r3, [r7, #20]
=======
 8007270:	b580      	push	{r7, lr}
 8007272:	b086      	sub	sp, #24
 8007274:	af00      	add	r7, sp, #0
 8007276:	60f8      	str	r0, [r7, #12]
 8007278:	60b9      	str	r1, [r7, #8]
 800727a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
<<<<<<< Updated upstream
 800605c:	f001 fbca 	bl	80077f4 <vPortEnterCritical>
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006066:	b25b      	sxtb	r3, r3
 8006068:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800606c:	d103      	bne.n	8006076 <vQueueWaitForMessageRestricted+0x2a>
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	2200      	movs	r2, #0
 8006072:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800607c:	b25b      	sxtb	r3, r3
 800607e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006082:	d103      	bne.n	800608c <vQueueWaitForMessageRestricted+0x40>
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	2200      	movs	r2, #0
 8006088:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800608c:	f001 fbe2 	bl	8007854 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006094:	2b00      	cmp	r3, #0
 8006096:	d106      	bne.n	80060a6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	3324      	adds	r3, #36	; 0x24
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	68b9      	ldr	r1, [r7, #8]
 80060a0:	4618      	mov	r0, r3
 80060a2:	f000 fc61 	bl	8006968 <vTaskPlaceOnEventListRestricted>
=======
 8007280:	f001 fbd0 	bl	8008a24 <vPortEnterCritical>
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800728a:	b25b      	sxtb	r3, r3
 800728c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007290:	d103      	bne.n	800729a <vQueueWaitForMessageRestricted+0x2a>
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	2200      	movs	r2, #0
 8007296:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80072a0:	b25b      	sxtb	r3, r3
 80072a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80072a6:	d103      	bne.n	80072b0 <vQueueWaitForMessageRestricted+0x40>
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	2200      	movs	r2, #0
 80072ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80072b0:	f001 fbe8 	bl	8008a84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d106      	bne.n	80072ca <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	3324      	adds	r3, #36	; 0x24
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	68b9      	ldr	r1, [r7, #8]
 80072c4:	4618      	mov	r0, r3
 80072c6:	f000 fc61 	bl	8007b8c <vTaskPlaceOnEventListRestricted>
>>>>>>> Stashed changes
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
<<<<<<< Updated upstream
 80060a6:	6978      	ldr	r0, [r7, #20]
 80060a8:	f7ff ff26 	bl	8005ef8 <prvUnlockQueue>
	}
 80060ac:	bf00      	nop
 80060ae:	3718      	adds	r7, #24
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <xTaskCreateStatic>:
=======
 80072ca:	6978      	ldr	r0, [r7, #20]
 80072cc:	f7ff ff26 	bl	800711c <prvUnlockQueue>
	}
 80072d0:	bf00      	nop
 80072d2:	3718      	adds	r7, #24
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}

080072d8 <xTaskCreateStatic>:
>>>>>>> Stashed changes
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
<<<<<<< Updated upstream
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b08e      	sub	sp, #56	; 0x38
 80060b8:	af04      	add	r7, sp, #16
 80060ba:	60f8      	str	r0, [r7, #12]
 80060bc:	60b9      	str	r1, [r7, #8]
 80060be:	607a      	str	r2, [r7, #4]
 80060c0:	603b      	str	r3, [r7, #0]
=======
 80072d8:	b580      	push	{r7, lr}
 80072da:	b08e      	sub	sp, #56	; 0x38
 80072dc:	af04      	add	r7, sp, #16
 80072de:	60f8      	str	r0, [r7, #12]
 80072e0:	60b9      	str	r1, [r7, #8]
 80072e2:	607a      	str	r2, [r7, #4]
 80072e4:	603b      	str	r3, [r7, #0]
>>>>>>> Stashed changes
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
<<<<<<< Updated upstream
 80060c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d10a      	bne.n	80060de <xTaskCreateStatic+0x2a>
	__asm volatile
 80060c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060cc:	f383 8811 	msr	BASEPRI, r3
 80060d0:	f3bf 8f6f 	isb	sy
 80060d4:	f3bf 8f4f 	dsb	sy
 80060d8:	623b      	str	r3, [r7, #32]
}
 80060da:	bf00      	nop
 80060dc:	e7fe      	b.n	80060dc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80060de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d10a      	bne.n	80060fa <xTaskCreateStatic+0x46>
	__asm volatile
 80060e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e8:	f383 8811 	msr	BASEPRI, r3
 80060ec:	f3bf 8f6f 	isb	sy
 80060f0:	f3bf 8f4f 	dsb	sy
 80060f4:	61fb      	str	r3, [r7, #28]
}
 80060f6:	bf00      	nop
 80060f8:	e7fe      	b.n	80060f8 <xTaskCreateStatic+0x44>
=======
 80072e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d10a      	bne.n	8007302 <xTaskCreateStatic+0x2a>
	__asm volatile
 80072ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f0:	f383 8811 	msr	BASEPRI, r3
 80072f4:	f3bf 8f6f 	isb	sy
 80072f8:	f3bf 8f4f 	dsb	sy
 80072fc:	623b      	str	r3, [r7, #32]
}
 80072fe:	bf00      	nop
 8007300:	e7fe      	b.n	8007300 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007304:	2b00      	cmp	r3, #0
 8007306:	d10a      	bne.n	800731e <xTaskCreateStatic+0x46>
	__asm volatile
 8007308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800730c:	f383 8811 	msr	BASEPRI, r3
 8007310:	f3bf 8f6f 	isb	sy
 8007314:	f3bf 8f4f 	dsb	sy
 8007318:	61fb      	str	r3, [r7, #28]
}
 800731a:	bf00      	nop
 800731c:	e7fe      	b.n	800731c <xTaskCreateStatic+0x44>
>>>>>>> Stashed changes
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
<<<<<<< Updated upstream
 80060fa:	23a8      	movs	r3, #168	; 0xa8
 80060fc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	2ba8      	cmp	r3, #168	; 0xa8
 8006102:	d00a      	beq.n	800611a <xTaskCreateStatic+0x66>
	__asm volatile
 8006104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006108:	f383 8811 	msr	BASEPRI, r3
 800610c:	f3bf 8f6f 	isb	sy
 8006110:	f3bf 8f4f 	dsb	sy
 8006114:	61bb      	str	r3, [r7, #24]
}
 8006116:	bf00      	nop
 8006118:	e7fe      	b.n	8006118 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800611a:	693b      	ldr	r3, [r7, #16]
=======
 800731e:	23a8      	movs	r3, #168	; 0xa8
 8007320:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	2ba8      	cmp	r3, #168	; 0xa8
 8007326:	d00a      	beq.n	800733e <xTaskCreateStatic+0x66>
	__asm volatile
 8007328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800732c:	f383 8811 	msr	BASEPRI, r3
 8007330:	f3bf 8f6f 	isb	sy
 8007334:	f3bf 8f4f 	dsb	sy
 8007338:	61bb      	str	r3, [r7, #24]
}
 800733a:	bf00      	nop
 800733c:	e7fe      	b.n	800733c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800733e:	693b      	ldr	r3, [r7, #16]
>>>>>>> Stashed changes
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
<<<<<<< Updated upstream
 800611c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800611e:	2b00      	cmp	r3, #0
 8006120:	d01e      	beq.n	8006160 <xTaskCreateStatic+0xac>
 8006122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006124:	2b00      	cmp	r3, #0
 8006126:	d01b      	beq.n	8006160 <xTaskCreateStatic+0xac>
=======
 8007340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007342:	2b00      	cmp	r3, #0
 8007344:	d01e      	beq.n	8007384 <xTaskCreateStatic+0xac>
 8007346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007348:	2b00      	cmp	r3, #0
 800734a:	d01b      	beq.n	8007384 <xTaskCreateStatic+0xac>
>>>>>>> Stashed changes
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
<<<<<<< Updated upstream
 8006128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800612a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800612c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006130:	631a      	str	r2, [r3, #48]	; 0x30
=======
 800734c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800734e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007352:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007354:	631a      	str	r2, [r3, #48]	; 0x30
>>>>>>> Stashed changes

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
<<<<<<< Updated upstream
 8006132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006134:	2202      	movs	r2, #2
 8006136:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
=======
 8007356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007358:	2202      	movs	r2, #2
 800735a:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
>>>>>>> Stashed changes
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
<<<<<<< Updated upstream
 800613a:	2300      	movs	r3, #0
 800613c:	9303      	str	r3, [sp, #12]
 800613e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006140:	9302      	str	r3, [sp, #8]
 8006142:	f107 0314 	add.w	r3, r7, #20
 8006146:	9301      	str	r3, [sp, #4]
 8006148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800614a:	9300      	str	r3, [sp, #0]
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	68b9      	ldr	r1, [r7, #8]
 8006152:	68f8      	ldr	r0, [r7, #12]
 8006154:	f000 f850 	bl	80061f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006158:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800615a:	f000 f8f3 	bl	8006344 <prvAddNewTaskToReadyList>
 800615e:	e001      	b.n	8006164 <xTaskCreateStatic+0xb0>
=======
 800735e:	2300      	movs	r3, #0
 8007360:	9303      	str	r3, [sp, #12]
 8007362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007364:	9302      	str	r3, [sp, #8]
 8007366:	f107 0314 	add.w	r3, r7, #20
 800736a:	9301      	str	r3, [sp, #4]
 800736c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800736e:	9300      	str	r3, [sp, #0]
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	687a      	ldr	r2, [r7, #4]
 8007374:	68b9      	ldr	r1, [r7, #8]
 8007376:	68f8      	ldr	r0, [r7, #12]
 8007378:	f000 f850 	bl	800741c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800737c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800737e:	f000 f8f3 	bl	8007568 <prvAddNewTaskToReadyList>
 8007382:	e001      	b.n	8007388 <xTaskCreateStatic+0xb0>
>>>>>>> Stashed changes
		}
		else
		{
			xReturn = NULL;
<<<<<<< Updated upstream
 8006160:	2300      	movs	r3, #0
 8006162:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006164:	697b      	ldr	r3, [r7, #20]
	}
 8006166:	4618      	mov	r0, r3
 8006168:	3728      	adds	r7, #40	; 0x28
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}

0800616e <xTaskCreate>:
=======
 8007384:	2300      	movs	r3, #0
 8007386:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007388:	697b      	ldr	r3, [r7, #20]
	}
 800738a:	4618      	mov	r0, r3
 800738c:	3728      	adds	r7, #40	; 0x28
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}

08007392 <xTaskCreate>:
>>>>>>> Stashed changes
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
<<<<<<< Updated upstream
 800616e:	b580      	push	{r7, lr}
 8006170:	b08c      	sub	sp, #48	; 0x30
 8006172:	af04      	add	r7, sp, #16
 8006174:	60f8      	str	r0, [r7, #12]
 8006176:	60b9      	str	r1, [r7, #8]
 8006178:	603b      	str	r3, [r7, #0]
 800617a:	4613      	mov	r3, r2
 800617c:	80fb      	strh	r3, [r7, #6]
=======
 8007392:	b580      	push	{r7, lr}
 8007394:	b08c      	sub	sp, #48	; 0x30
 8007396:	af04      	add	r7, sp, #16
 8007398:	60f8      	str	r0, [r7, #12]
 800739a:	60b9      	str	r1, [r7, #8]
 800739c:	603b      	str	r3, [r7, #0]
 800739e:	4613      	mov	r3, r2
 80073a0:	80fb      	strh	r3, [r7, #6]
>>>>>>> Stashed changes
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
<<<<<<< Updated upstream
 800617e:	88fb      	ldrh	r3, [r7, #6]
 8006180:	009b      	lsls	r3, r3, #2
 8006182:	4618      	mov	r0, r3
 8006184:	f001 fc58 	bl	8007a38 <pvPortMalloc>
 8006188:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d00e      	beq.n	80061ae <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006190:	20a8      	movs	r0, #168	; 0xa8
 8006192:	f001 fc51 	bl	8007a38 <pvPortMalloc>
 8006196:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006198:	69fb      	ldr	r3, [r7, #28]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d003      	beq.n	80061a6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800619e:	69fb      	ldr	r3, [r7, #28]
 80061a0:	697a      	ldr	r2, [r7, #20]
 80061a2:	631a      	str	r2, [r3, #48]	; 0x30
 80061a4:	e005      	b.n	80061b2 <xTaskCreate+0x44>
=======
 80073a2:	88fb      	ldrh	r3, [r7, #6]
 80073a4:	009b      	lsls	r3, r3, #2
 80073a6:	4618      	mov	r0, r3
 80073a8:	f001 fc5e 	bl	8008c68 <pvPortMalloc>
 80073ac:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d00e      	beq.n	80073d2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80073b4:	20a8      	movs	r0, #168	; 0xa8
 80073b6:	f001 fc57 	bl	8008c68 <pvPortMalloc>
 80073ba:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80073bc:	69fb      	ldr	r3, [r7, #28]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d003      	beq.n	80073ca <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80073c2:	69fb      	ldr	r3, [r7, #28]
 80073c4:	697a      	ldr	r2, [r7, #20]
 80073c6:	631a      	str	r2, [r3, #48]	; 0x30
 80073c8:	e005      	b.n	80073d6 <xTaskCreate+0x44>
>>>>>>> Stashed changes
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
<<<<<<< Updated upstream
 80061a6:	6978      	ldr	r0, [r7, #20]
 80061a8:	f001 fd12 	bl	8007bd0 <vPortFree>
 80061ac:	e001      	b.n	80061b2 <xTaskCreate+0x44>
=======
 80073ca:	6978      	ldr	r0, [r7, #20]
 80073cc:	f001 fd18 	bl	8008e00 <vPortFree>
 80073d0:	e001      	b.n	80073d6 <xTaskCreate+0x44>
>>>>>>> Stashed changes
				}
			}
			else
			{
				pxNewTCB = NULL;
<<<<<<< Updated upstream
 80061ae:	2300      	movs	r3, #0
 80061b0:	61fb      	str	r3, [r7, #28]
=======
 80073d2:	2300      	movs	r3, #0
 80073d4:	61fb      	str	r3, [r7, #28]
>>>>>>> Stashed changes
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
<<<<<<< Updated upstream
 80061b2:	69fb      	ldr	r3, [r7, #28]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d017      	beq.n	80061e8 <xTaskCreate+0x7a>
=======
 80073d6:	69fb      	ldr	r3, [r7, #28]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d017      	beq.n	800740c <xTaskCreate+0x7a>
>>>>>>> Stashed changes
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
<<<<<<< Updated upstream
 80061b8:	69fb      	ldr	r3, [r7, #28]
 80061ba:	2200      	movs	r2, #0
 80061bc:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
=======
 80073dc:	69fb      	ldr	r3, [r7, #28]
 80073de:	2200      	movs	r2, #0
 80073e0:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
>>>>>>> Stashed changes
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
<<<<<<< Updated upstream
 80061c0:	88fa      	ldrh	r2, [r7, #6]
 80061c2:	2300      	movs	r3, #0
 80061c4:	9303      	str	r3, [sp, #12]
 80061c6:	69fb      	ldr	r3, [r7, #28]
 80061c8:	9302      	str	r3, [sp, #8]
 80061ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061cc:	9301      	str	r3, [sp, #4]
 80061ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d0:	9300      	str	r3, [sp, #0]
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	68b9      	ldr	r1, [r7, #8]
 80061d6:	68f8      	ldr	r0, [r7, #12]
 80061d8:	f000 f80e 	bl	80061f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80061dc:	69f8      	ldr	r0, [r7, #28]
 80061de:	f000 f8b1 	bl	8006344 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80061e2:	2301      	movs	r3, #1
 80061e4:	61bb      	str	r3, [r7, #24]
 80061e6:	e002      	b.n	80061ee <xTaskCreate+0x80>
=======
 80073e4:	88fa      	ldrh	r2, [r7, #6]
 80073e6:	2300      	movs	r3, #0
 80073e8:	9303      	str	r3, [sp, #12]
 80073ea:	69fb      	ldr	r3, [r7, #28]
 80073ec:	9302      	str	r3, [sp, #8]
 80073ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073f0:	9301      	str	r3, [sp, #4]
 80073f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f4:	9300      	str	r3, [sp, #0]
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	68b9      	ldr	r1, [r7, #8]
 80073fa:	68f8      	ldr	r0, [r7, #12]
 80073fc:	f000 f80e 	bl	800741c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007400:	69f8      	ldr	r0, [r7, #28]
 8007402:	f000 f8b1 	bl	8007568 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007406:	2301      	movs	r3, #1
 8007408:	61bb      	str	r3, [r7, #24]
 800740a:	e002      	b.n	8007412 <xTaskCreate+0x80>
>>>>>>> Stashed changes
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
<<<<<<< Updated upstream
 80061e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80061ec:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80061ee:	69bb      	ldr	r3, [r7, #24]
	}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3720      	adds	r7, #32
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}

080061f8 <prvInitialiseNewTask>:
=======
 800740c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007410:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007412:	69bb      	ldr	r3, [r7, #24]
	}
 8007414:	4618      	mov	r0, r3
 8007416:	3720      	adds	r7, #32
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}

0800741c <prvInitialiseNewTask>:
>>>>>>> Stashed changes
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
<<<<<<< Updated upstream
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b088      	sub	sp, #32
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	60f8      	str	r0, [r7, #12]
 8006200:	60b9      	str	r1, [r7, #8]
 8006202:	607a      	str	r2, [r7, #4]
 8006204:	603b      	str	r3, [r7, #0]
=======
 800741c:	b580      	push	{r7, lr}
 800741e:	b088      	sub	sp, #32
 8007420:	af00      	add	r7, sp, #0
 8007422:	60f8      	str	r0, [r7, #12]
 8007424:	60b9      	str	r1, [r7, #8]
 8007426:	607a      	str	r2, [r7, #4]
 8007428:	603b      	str	r3, [r7, #0]
>>>>>>> Stashed changes

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
<<<<<<< Updated upstream
 8006206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006208:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	009b      	lsls	r3, r3, #2
 800620e:	461a      	mov	r2, r3
 8006210:	21a5      	movs	r1, #165	; 0xa5
 8006212:	f001 ff2b 	bl	800806c <memset>
=======
 800742a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800742c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	009b      	lsls	r3, r3, #2
 8007432:	461a      	mov	r2, r3
 8007434:	21a5      	movs	r1, #165	; 0xa5
 8007436:	f001 ff31 	bl	800929c <memset>
>>>>>>> Stashed changes
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
<<<<<<< Updated upstream
 8006216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006218:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006220:	3b01      	subs	r3, #1
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	4413      	add	r3, r2
 8006226:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006228:	69bb      	ldr	r3, [r7, #24]
 800622a:	f023 0307 	bic.w	r3, r3, #7
 800622e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006230:	69bb      	ldr	r3, [r7, #24]
 8006232:	f003 0307 	and.w	r3, r3, #7
 8006236:	2b00      	cmp	r3, #0
 8006238:	d00a      	beq.n	8006250 <prvInitialiseNewTask+0x58>
	__asm volatile
 800623a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800623e:	f383 8811 	msr	BASEPRI, r3
 8006242:	f3bf 8f6f 	isb	sy
 8006246:	f3bf 8f4f 	dsb	sy
 800624a:	617b      	str	r3, [r7, #20]
}
 800624c:	bf00      	nop
 800624e:	e7fe      	b.n	800624e <prvInitialiseNewTask+0x56>
=======
 800743a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800743c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007444:	3b01      	subs	r3, #1
 8007446:	009b      	lsls	r3, r3, #2
 8007448:	4413      	add	r3, r2
 800744a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800744c:	69bb      	ldr	r3, [r7, #24]
 800744e:	f023 0307 	bic.w	r3, r3, #7
 8007452:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007454:	69bb      	ldr	r3, [r7, #24]
 8007456:	f003 0307 	and.w	r3, r3, #7
 800745a:	2b00      	cmp	r3, #0
 800745c:	d00a      	beq.n	8007474 <prvInitialiseNewTask+0x58>
	__asm volatile
 800745e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007462:	f383 8811 	msr	BASEPRI, r3
 8007466:	f3bf 8f6f 	isb	sy
 800746a:	f3bf 8f4f 	dsb	sy
 800746e:	617b      	str	r3, [r7, #20]
}
 8007470:	bf00      	nop
 8007472:	e7fe      	b.n	8007472 <prvInitialiseNewTask+0x56>
>>>>>>> Stashed changes
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
<<<<<<< Updated upstream
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d01f      	beq.n	8006296 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006256:	2300      	movs	r3, #0
 8006258:	61fb      	str	r3, [r7, #28]
 800625a:	e012      	b.n	8006282 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800625c:	68ba      	ldr	r2, [r7, #8]
 800625e:	69fb      	ldr	r3, [r7, #28]
 8006260:	4413      	add	r3, r2
 8006262:	7819      	ldrb	r1, [r3, #0]
 8006264:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006266:	69fb      	ldr	r3, [r7, #28]
 8006268:	4413      	add	r3, r2
 800626a:	3334      	adds	r3, #52	; 0x34
 800626c:	460a      	mov	r2, r1
 800626e:	701a      	strb	r2, [r3, #0]
=======
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d01f      	beq.n	80074ba <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800747a:	2300      	movs	r3, #0
 800747c:	61fb      	str	r3, [r7, #28]
 800747e:	e012      	b.n	80074a6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007480:	68ba      	ldr	r2, [r7, #8]
 8007482:	69fb      	ldr	r3, [r7, #28]
 8007484:	4413      	add	r3, r2
 8007486:	7819      	ldrb	r1, [r3, #0]
 8007488:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800748a:	69fb      	ldr	r3, [r7, #28]
 800748c:	4413      	add	r3, r2
 800748e:	3334      	adds	r3, #52	; 0x34
 8007490:	460a      	mov	r2, r1
 8007492:	701a      	strb	r2, [r3, #0]
>>>>>>> Stashed changes

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
<<<<<<< Updated upstream
 8006270:	68ba      	ldr	r2, [r7, #8]
 8006272:	69fb      	ldr	r3, [r7, #28]
 8006274:	4413      	add	r3, r2
 8006276:	781b      	ldrb	r3, [r3, #0]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d006      	beq.n	800628a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800627c:	69fb      	ldr	r3, [r7, #28]
 800627e:	3301      	adds	r3, #1
 8006280:	61fb      	str	r3, [r7, #28]
 8006282:	69fb      	ldr	r3, [r7, #28]
 8006284:	2b0f      	cmp	r3, #15
 8006286:	d9e9      	bls.n	800625c <prvInitialiseNewTask+0x64>
 8006288:	e000      	b.n	800628c <prvInitialiseNewTask+0x94>
			{
				break;
 800628a:	bf00      	nop
=======
 8007494:	68ba      	ldr	r2, [r7, #8]
 8007496:	69fb      	ldr	r3, [r7, #28]
 8007498:	4413      	add	r3, r2
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d006      	beq.n	80074ae <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80074a0:	69fb      	ldr	r3, [r7, #28]
 80074a2:	3301      	adds	r3, #1
 80074a4:	61fb      	str	r3, [r7, #28]
 80074a6:	69fb      	ldr	r3, [r7, #28]
 80074a8:	2b0f      	cmp	r3, #15
 80074aa:	d9e9      	bls.n	8007480 <prvInitialiseNewTask+0x64>
 80074ac:	e000      	b.n	80074b0 <prvInitialiseNewTask+0x94>
			{
				break;
 80074ae:	bf00      	nop
>>>>>>> Stashed changes
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
<<<<<<< Updated upstream
 800628c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800628e:	2200      	movs	r2, #0
 8006290:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006294:	e003      	b.n	800629e <prvInitialiseNewTask+0xa6>
=======
 80074b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b2:	2200      	movs	r2, #0
 80074b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80074b8:	e003      	b.n	80074c2 <prvInitialiseNewTask+0xa6>
>>>>>>> Stashed changes
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
<<<<<<< Updated upstream
 8006296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006298:	2200      	movs	r2, #0
 800629a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
=======
 80074ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074bc:	2200      	movs	r2, #0
 80074be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
>>>>>>> Stashed changes
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
<<<<<<< Updated upstream
 800629e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a0:	2b37      	cmp	r3, #55	; 0x37
 80062a2:	d901      	bls.n	80062a8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80062a4:	2337      	movs	r3, #55	; 0x37
 80062a6:	62bb      	str	r3, [r7, #40]	; 0x28
=======
 80074c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c4:	2b37      	cmp	r3, #55	; 0x37
 80074c6:	d901      	bls.n	80074cc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80074c8:	2337      	movs	r3, #55	; 0x37
 80074ca:	62bb      	str	r3, [r7, #40]	; 0x28
>>>>>>> Stashed changes
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
<<<<<<< Updated upstream
 80062a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062ac:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80062ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062b2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80062b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b6:	2200      	movs	r2, #0
 80062b8:	651a      	str	r2, [r3, #80]	; 0x50
=======
 80074cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074d0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80074d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074d6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80074d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074da:	2200      	movs	r2, #0
 80074dc:	651a      	str	r2, [r3, #80]	; 0x50
>>>>>>> Stashed changes
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
<<<<<<< Updated upstream
 80062ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062bc:	3304      	adds	r3, #4
 80062be:	4618      	mov	r0, r3
 80062c0:	f7ff f93e 	bl	8005540 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80062c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c6:	3318      	adds	r3, #24
 80062c8:	4618      	mov	r0, r3
 80062ca:	f7ff f939 	bl	8005540 <vListInitialiseItem>
=======
 80074de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e0:	3304      	adds	r3, #4
 80074e2:	4618      	mov	r0, r3
 80074e4:	f7ff f93e 	bl	8006764 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80074e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ea:	3318      	adds	r3, #24
 80074ec:	4618      	mov	r0, r3
 80074ee:	f7ff f939 	bl	8006764 <vListInitialiseItem>
>>>>>>> Stashed changes

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
<<<<<<< Updated upstream
 80062ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062d2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80062da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062dc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80062de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062e2:	625a      	str	r2, [r3, #36]	; 0x24
=======
 80074f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074f6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074fa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80074fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007500:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007504:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007506:	625a      	str	r2, [r3, #36]	; 0x24
>>>>>>> Stashed changes
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
<<<<<<< Updated upstream
 80062e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e6:	2200      	movs	r2, #0
 80062e8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80062ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ee:	2200      	movs	r2, #0
 80062f0:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
=======
 8007508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800750a:	2200      	movs	r2, #0
 800750c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007512:	2200      	movs	r2, #0
 8007514:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
>>>>>>> Stashed changes
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
<<<<<<< Updated upstream
 80062f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f6:	3354      	adds	r3, #84	; 0x54
 80062f8:	224c      	movs	r2, #76	; 0x4c
 80062fa:	2100      	movs	r1, #0
 80062fc:	4618      	mov	r0, r3
 80062fe:	f001 feb5 	bl	800806c <memset>
 8006302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006304:	4a0c      	ldr	r2, [pc, #48]	; (8006338 <prvInitialiseNewTask+0x140>)
 8006306:	659a      	str	r2, [r3, #88]	; 0x58
 8006308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800630a:	4a0c      	ldr	r2, [pc, #48]	; (800633c <prvInitialiseNewTask+0x144>)
 800630c:	65da      	str	r2, [r3, #92]	; 0x5c
 800630e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006310:	4a0b      	ldr	r2, [pc, #44]	; (8006340 <prvInitialiseNewTask+0x148>)
 8006312:	661a      	str	r2, [r3, #96]	; 0x60
=======
 8007518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800751a:	3354      	adds	r3, #84	; 0x54
 800751c:	224c      	movs	r2, #76	; 0x4c
 800751e:	2100      	movs	r1, #0
 8007520:	4618      	mov	r0, r3
 8007522:	f001 febb 	bl	800929c <memset>
 8007526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007528:	4a0c      	ldr	r2, [pc, #48]	; (800755c <prvInitialiseNewTask+0x140>)
 800752a:	659a      	str	r2, [r3, #88]	; 0x58
 800752c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800752e:	4a0c      	ldr	r2, [pc, #48]	; (8007560 <prvInitialiseNewTask+0x144>)
 8007530:	65da      	str	r2, [r3, #92]	; 0x5c
 8007532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007534:	4a0b      	ldr	r2, [pc, #44]	; (8007564 <prvInitialiseNewTask+0x148>)
 8007536:	661a      	str	r2, [r3, #96]	; 0x60
>>>>>>> Stashed changes
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
<<<<<<< Updated upstream
 8006314:	683a      	ldr	r2, [r7, #0]
 8006316:	68f9      	ldr	r1, [r7, #12]
 8006318:	69b8      	ldr	r0, [r7, #24]
 800631a:	f001 f941 	bl	80075a0 <pxPortInitialiseStack>
 800631e:	4602      	mov	r2, r0
 8006320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006322:	601a      	str	r2, [r3, #0]
=======
 8007538:	683a      	ldr	r2, [r7, #0]
 800753a:	68f9      	ldr	r1, [r7, #12]
 800753c:	69b8      	ldr	r0, [r7, #24]
 800753e:	f001 f941 	bl	80087c4 <pxPortInitialiseStack>
 8007542:	4602      	mov	r2, r0
 8007544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007546:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
<<<<<<< Updated upstream
 8006324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006326:	2b00      	cmp	r3, #0
 8006328:	d002      	beq.n	8006330 <prvInitialiseNewTask+0x138>
=======
 8007548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800754a:	2b00      	cmp	r3, #0
 800754c:	d002      	beq.n	8007554 <prvInitialiseNewTask+0x138>
>>>>>>> Stashed changes
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
<<<<<<< Updated upstream
 800632a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800632c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800632e:	601a      	str	r2, [r3, #0]
=======
 800754e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007550:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007552:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
<<<<<<< Updated upstream
 8006330:	bf00      	nop
 8006332:	3720      	adds	r7, #32
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}
 8006338:	200024d8 	.word	0x200024d8
 800633c:	20002540 	.word	0x20002540
 8006340:	200025a8 	.word	0x200025a8

08006344 <prvAddNewTaskToReadyList>:
=======
 8007554:	bf00      	nop
 8007556:	3720      	adds	r7, #32
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}
 800755c:	20002430 	.word	0x20002430
 8007560:	20002498 	.word	0x20002498
 8007564:	20002500 	.word	0x20002500

08007568 <prvAddNewTaskToReadyList>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
<<<<<<< Updated upstream
 8006344:	b580      	push	{r7, lr}
 8006346:	b082      	sub	sp, #8
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800634c:	f001 fa52 	bl	80077f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006350:	4b2d      	ldr	r3, [pc, #180]	; (8006408 <prvAddNewTaskToReadyList+0xc4>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	3301      	adds	r3, #1
 8006356:	4a2c      	ldr	r2, [pc, #176]	; (8006408 <prvAddNewTaskToReadyList+0xc4>)
 8006358:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800635a:	4b2c      	ldr	r3, [pc, #176]	; (800640c <prvAddNewTaskToReadyList+0xc8>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d109      	bne.n	8006376 <prvAddNewTaskToReadyList+0x32>
=======
 8007568:	b580      	push	{r7, lr}
 800756a:	b082      	sub	sp, #8
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007570:	f001 fa58 	bl	8008a24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007574:	4b2d      	ldr	r3, [pc, #180]	; (800762c <prvAddNewTaskToReadyList+0xc4>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	3301      	adds	r3, #1
 800757a:	4a2c      	ldr	r2, [pc, #176]	; (800762c <prvAddNewTaskToReadyList+0xc4>)
 800757c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800757e:	4b2c      	ldr	r3, [pc, #176]	; (8007630 <prvAddNewTaskToReadyList+0xc8>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d109      	bne.n	800759a <prvAddNewTaskToReadyList+0x32>
>>>>>>> Stashed changes
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
<<<<<<< Updated upstream
 8006362:	4a2a      	ldr	r2, [pc, #168]	; (800640c <prvAddNewTaskToReadyList+0xc8>)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006368:	4b27      	ldr	r3, [pc, #156]	; (8006408 <prvAddNewTaskToReadyList+0xc4>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	2b01      	cmp	r3, #1
 800636e:	d110      	bne.n	8006392 <prvAddNewTaskToReadyList+0x4e>
=======
 8007586:	4a2a      	ldr	r2, [pc, #168]	; (8007630 <prvAddNewTaskToReadyList+0xc8>)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800758c:	4b27      	ldr	r3, [pc, #156]	; (800762c <prvAddNewTaskToReadyList+0xc4>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	2b01      	cmp	r3, #1
 8007592:	d110      	bne.n	80075b6 <prvAddNewTaskToReadyList+0x4e>
>>>>>>> Stashed changes
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
<<<<<<< Updated upstream
 8006370:	f000 fc26 	bl	8006bc0 <prvInitialiseTaskLists>
 8006374:	e00d      	b.n	8006392 <prvAddNewTaskToReadyList+0x4e>
=======
 8007594:	f000 fc26 	bl	8007de4 <prvInitialiseTaskLists>
 8007598:	e00d      	b.n	80075b6 <prvAddNewTaskToReadyList+0x4e>
>>>>>>> Stashed changes
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
<<<<<<< Updated upstream
 8006376:	4b26      	ldr	r3, [pc, #152]	; (8006410 <prvAddNewTaskToReadyList+0xcc>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d109      	bne.n	8006392 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800637e:	4b23      	ldr	r3, [pc, #140]	; (800640c <prvAddNewTaskToReadyList+0xc8>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006388:	429a      	cmp	r2, r3
 800638a:	d802      	bhi.n	8006392 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800638c:	4a1f      	ldr	r2, [pc, #124]	; (800640c <prvAddNewTaskToReadyList+0xc8>)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6013      	str	r3, [r2, #0]
=======
 800759a:	4b26      	ldr	r3, [pc, #152]	; (8007634 <prvAddNewTaskToReadyList+0xcc>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d109      	bne.n	80075b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80075a2:	4b23      	ldr	r3, [pc, #140]	; (8007630 <prvAddNewTaskToReadyList+0xc8>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ac:	429a      	cmp	r2, r3
 80075ae:	d802      	bhi.n	80075b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80075b0:	4a1f      	ldr	r2, [pc, #124]	; (8007630 <prvAddNewTaskToReadyList+0xc8>)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
<<<<<<< Updated upstream
 8006392:	4b20      	ldr	r3, [pc, #128]	; (8006414 <prvAddNewTaskToReadyList+0xd0>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	3301      	adds	r3, #1
 8006398:	4a1e      	ldr	r2, [pc, #120]	; (8006414 <prvAddNewTaskToReadyList+0xd0>)
 800639a:	6013      	str	r3, [r2, #0]
=======
 80075b6:	4b20      	ldr	r3, [pc, #128]	; (8007638 <prvAddNewTaskToReadyList+0xd0>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	3301      	adds	r3, #1
 80075bc:	4a1e      	ldr	r2, [pc, #120]	; (8007638 <prvAddNewTaskToReadyList+0xd0>)
 80075be:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
<<<<<<< Updated upstream
 800639c:	4b1d      	ldr	r3, [pc, #116]	; (8006414 <prvAddNewTaskToReadyList+0xd0>)
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	645a      	str	r2, [r3, #68]	; 0x44
=======
 80075c0:	4b1d      	ldr	r3, [pc, #116]	; (8007638 <prvAddNewTaskToReadyList+0xd0>)
 80075c2:	681a      	ldr	r2, [r3, #0]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> Stashed changes
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
<<<<<<< Updated upstream
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063a8:	4b1b      	ldr	r3, [pc, #108]	; (8006418 <prvAddNewTaskToReadyList+0xd4>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d903      	bls.n	80063b8 <prvAddNewTaskToReadyList+0x74>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b4:	4a18      	ldr	r2, [pc, #96]	; (8006418 <prvAddNewTaskToReadyList+0xd4>)
 80063b6:	6013      	str	r3, [r2, #0]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063bc:	4613      	mov	r3, r2
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	4413      	add	r3, r2
 80063c2:	009b      	lsls	r3, r3, #2
 80063c4:	4a15      	ldr	r2, [pc, #84]	; (800641c <prvAddNewTaskToReadyList+0xd8>)
 80063c6:	441a      	add	r2, r3
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	3304      	adds	r3, #4
 80063cc:	4619      	mov	r1, r3
 80063ce:	4610      	mov	r0, r2
 80063d0:	f7ff f8c3 	bl	800555a <vListInsertEnd>
=======
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075cc:	4b1b      	ldr	r3, [pc, #108]	; (800763c <prvAddNewTaskToReadyList+0xd4>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	429a      	cmp	r2, r3
 80075d2:	d903      	bls.n	80075dc <prvAddNewTaskToReadyList+0x74>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075d8:	4a18      	ldr	r2, [pc, #96]	; (800763c <prvAddNewTaskToReadyList+0xd4>)
 80075da:	6013      	str	r3, [r2, #0]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075e0:	4613      	mov	r3, r2
 80075e2:	009b      	lsls	r3, r3, #2
 80075e4:	4413      	add	r3, r2
 80075e6:	009b      	lsls	r3, r3, #2
 80075e8:	4a15      	ldr	r2, [pc, #84]	; (8007640 <prvAddNewTaskToReadyList+0xd8>)
 80075ea:	441a      	add	r2, r3
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	3304      	adds	r3, #4
 80075f0:	4619      	mov	r1, r3
 80075f2:	4610      	mov	r0, r2
 80075f4:	f7ff f8c3 	bl	800677e <vListInsertEnd>
>>>>>>> Stashed changes

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
<<<<<<< Updated upstream
 80063d4:	f001 fa3e 	bl	8007854 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80063d8:	4b0d      	ldr	r3, [pc, #52]	; (8006410 <prvAddNewTaskToReadyList+0xcc>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d00e      	beq.n	80063fe <prvAddNewTaskToReadyList+0xba>
=======
 80075f8:	f001 fa44 	bl	8008a84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80075fc:	4b0d      	ldr	r3, [pc, #52]	; (8007634 <prvAddNewTaskToReadyList+0xcc>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d00e      	beq.n	8007622 <prvAddNewTaskToReadyList+0xba>
>>>>>>> Stashed changes
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
<<<<<<< Updated upstream
 80063e0:	4b0a      	ldr	r3, [pc, #40]	; (800640c <prvAddNewTaskToReadyList+0xc8>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d207      	bcs.n	80063fe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80063ee:	4b0c      	ldr	r3, [pc, #48]	; (8006420 <prvAddNewTaskToReadyList+0xdc>)
 80063f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063f4:	601a      	str	r2, [r3, #0]
 80063f6:	f3bf 8f4f 	dsb	sy
 80063fa:	f3bf 8f6f 	isb	sy
=======
 8007604:	4b0a      	ldr	r3, [pc, #40]	; (8007630 <prvAddNewTaskToReadyList+0xc8>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800760e:	429a      	cmp	r2, r3
 8007610:	d207      	bcs.n	8007622 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007612:	4b0c      	ldr	r3, [pc, #48]	; (8007644 <prvAddNewTaskToReadyList+0xdc>)
 8007614:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007618:	601a      	str	r2, [r3, #0]
 800761a:	f3bf 8f4f 	dsb	sy
 800761e:	f3bf 8f6f 	isb	sy
>>>>>>> Stashed changes
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
<<<<<<< Updated upstream
 80063fe:	bf00      	nop
 8006400:	3708      	adds	r7, #8
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
 8006406:	bf00      	nop
 8006408:	20000fd0 	.word	0x20000fd0
 800640c:	20000afc 	.word	0x20000afc
 8006410:	20000fdc 	.word	0x20000fdc
 8006414:	20000fec 	.word	0x20000fec
 8006418:	20000fd8 	.word	0x20000fd8
 800641c:	20000b00 	.word	0x20000b00
 8006420:	e000ed04 	.word	0xe000ed04

08006424 <vTaskDelay>:
=======
 8007622:	bf00      	nop
 8007624:	3708      	adds	r7, #8
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}
 800762a:	bf00      	nop
 800762c:	20000f28 	.word	0x20000f28
 8007630:	20000a54 	.word	0x20000a54
 8007634:	20000f34 	.word	0x20000f34
 8007638:	20000f44 	.word	0x20000f44
 800763c:	20000f30 	.word	0x20000f30
 8007640:	20000a58 	.word	0x20000a58
 8007644:	e000ed04 	.word	0xe000ed04

08007648 <vTaskDelay>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
<<<<<<< Updated upstream
 8006424:	b580      	push	{r7, lr}
 8006426:	b084      	sub	sp, #16
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800642c:	2300      	movs	r3, #0
 800642e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d017      	beq.n	8006466 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006436:	4b13      	ldr	r3, [pc, #76]	; (8006484 <vTaskDelay+0x60>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d00a      	beq.n	8006454 <vTaskDelay+0x30>
	__asm volatile
 800643e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006442:	f383 8811 	msr	BASEPRI, r3
 8006446:	f3bf 8f6f 	isb	sy
 800644a:	f3bf 8f4f 	dsb	sy
 800644e:	60bb      	str	r3, [r7, #8]
}
 8006450:	bf00      	nop
 8006452:	e7fe      	b.n	8006452 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006454:	f000 f88a 	bl	800656c <vTaskSuspendAll>
=======
 8007648:	b580      	push	{r7, lr}
 800764a:	b084      	sub	sp, #16
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007650:	2300      	movs	r3, #0
 8007652:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d017      	beq.n	800768a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800765a:	4b13      	ldr	r3, [pc, #76]	; (80076a8 <vTaskDelay+0x60>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d00a      	beq.n	8007678 <vTaskDelay+0x30>
	__asm volatile
 8007662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007666:	f383 8811 	msr	BASEPRI, r3
 800766a:	f3bf 8f6f 	isb	sy
 800766e:	f3bf 8f4f 	dsb	sy
 8007672:	60bb      	str	r3, [r7, #8]
}
 8007674:	bf00      	nop
 8007676:	e7fe      	b.n	8007676 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007678:	f000 f88a 	bl	8007790 <vTaskSuspendAll>
>>>>>>> Stashed changes
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
<<<<<<< Updated upstream
 8006458:	2100      	movs	r1, #0
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 fcfe 	bl	8006e5c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006460:	f000 f892 	bl	8006588 <xTaskResumeAll>
 8006464:	60f8      	str	r0, [r7, #12]
=======
 800767c:	2100      	movs	r1, #0
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f000 fcfe 	bl	8008080 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007684:	f000 f892 	bl	80077ac <xTaskResumeAll>
 8007688:	60f8      	str	r0, [r7, #12]
>>>>>>> Stashed changes
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
<<<<<<< Updated upstream
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d107      	bne.n	800647c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800646c:	4b06      	ldr	r3, [pc, #24]	; (8006488 <vTaskDelay+0x64>)
 800646e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006472:	601a      	str	r2, [r3, #0]
 8006474:	f3bf 8f4f 	dsb	sy
 8006478:	f3bf 8f6f 	isb	sy
=======
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d107      	bne.n	80076a0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007690:	4b06      	ldr	r3, [pc, #24]	; (80076ac <vTaskDelay+0x64>)
 8007692:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007696:	601a      	str	r2, [r3, #0]
 8007698:	f3bf 8f4f 	dsb	sy
 800769c:	f3bf 8f6f 	isb	sy
>>>>>>> Stashed changes
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
<<<<<<< Updated upstream
 800647c:	bf00      	nop
 800647e:	3710      	adds	r7, #16
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}
 8006484:	20000ff8 	.word	0x20000ff8
 8006488:	e000ed04 	.word	0xe000ed04

0800648c <vTaskStartScheduler>:
=======
 80076a0:	bf00      	nop
 80076a2:	3710      	adds	r7, #16
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}
 80076a8:	20000f50 	.word	0x20000f50
 80076ac:	e000ed04 	.word	0xe000ed04

080076b0 <vTaskStartScheduler>:
>>>>>>> Stashed changes

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
<<<<<<< Updated upstream
 800648c:	b580      	push	{r7, lr}
 800648e:	b08a      	sub	sp, #40	; 0x28
 8006490:	af04      	add	r7, sp, #16
=======
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b08a      	sub	sp, #40	; 0x28
 80076b4:	af04      	add	r7, sp, #16
>>>>>>> Stashed changes
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
<<<<<<< Updated upstream
 8006492:	2300      	movs	r3, #0
 8006494:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006496:	2300      	movs	r3, #0
 8006498:	607b      	str	r3, [r7, #4]
=======
 80076b6:	2300      	movs	r3, #0
 80076b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80076ba:	2300      	movs	r3, #0
 80076bc:	607b      	str	r3, [r7, #4]
>>>>>>> Stashed changes
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
<<<<<<< Updated upstream
 800649a:	463a      	mov	r2, r7
 800649c:	1d39      	adds	r1, r7, #4
 800649e:	f107 0308 	add.w	r3, r7, #8
 80064a2:	4618      	mov	r0, r3
 80064a4:	f7fe fff8 	bl	8005498 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80064a8:	6839      	ldr	r1, [r7, #0]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	68ba      	ldr	r2, [r7, #8]
 80064ae:	9202      	str	r2, [sp, #8]
 80064b0:	9301      	str	r3, [sp, #4]
 80064b2:	2300      	movs	r3, #0
 80064b4:	9300      	str	r3, [sp, #0]
 80064b6:	2300      	movs	r3, #0
 80064b8:	460a      	mov	r2, r1
 80064ba:	4924      	ldr	r1, [pc, #144]	; (800654c <vTaskStartScheduler+0xc0>)
 80064bc:	4824      	ldr	r0, [pc, #144]	; (8006550 <vTaskStartScheduler+0xc4>)
 80064be:	f7ff fdf9 	bl	80060b4 <xTaskCreateStatic>
 80064c2:	4603      	mov	r3, r0
 80064c4:	4a23      	ldr	r2, [pc, #140]	; (8006554 <vTaskStartScheduler+0xc8>)
 80064c6:	6013      	str	r3, [r2, #0]
=======
 80076be:	463a      	mov	r2, r7
 80076c0:	1d39      	adds	r1, r7, #4
 80076c2:	f107 0308 	add.w	r3, r7, #8
 80076c6:	4618      	mov	r0, r3
 80076c8:	f7fe fff8 	bl	80066bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80076cc:	6839      	ldr	r1, [r7, #0]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	68ba      	ldr	r2, [r7, #8]
 80076d2:	9202      	str	r2, [sp, #8]
 80076d4:	9301      	str	r3, [sp, #4]
 80076d6:	2300      	movs	r3, #0
 80076d8:	9300      	str	r3, [sp, #0]
 80076da:	2300      	movs	r3, #0
 80076dc:	460a      	mov	r2, r1
 80076de:	4924      	ldr	r1, [pc, #144]	; (8007770 <vTaskStartScheduler+0xc0>)
 80076e0:	4824      	ldr	r0, [pc, #144]	; (8007774 <vTaskStartScheduler+0xc4>)
 80076e2:	f7ff fdf9 	bl	80072d8 <xTaskCreateStatic>
 80076e6:	4603      	mov	r3, r0
 80076e8:	4a23      	ldr	r2, [pc, #140]	; (8007778 <vTaskStartScheduler+0xc8>)
 80076ea:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
<<<<<<< Updated upstream
 80064c8:	4b22      	ldr	r3, [pc, #136]	; (8006554 <vTaskStartScheduler+0xc8>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d002      	beq.n	80064d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80064d0:	2301      	movs	r3, #1
 80064d2:	617b      	str	r3, [r7, #20]
 80064d4:	e001      	b.n	80064da <vTaskStartScheduler+0x4e>
=======
 80076ec:	4b22      	ldr	r3, [pc, #136]	; (8007778 <vTaskStartScheduler+0xc8>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d002      	beq.n	80076fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80076f4:	2301      	movs	r3, #1
 80076f6:	617b      	str	r3, [r7, #20]
 80076f8:	e001      	b.n	80076fe <vTaskStartScheduler+0x4e>
>>>>>>> Stashed changes
		}
		else
		{
			xReturn = pdFAIL;
<<<<<<< Updated upstream
 80064d6:	2300      	movs	r3, #0
 80064d8:	617b      	str	r3, [r7, #20]
=======
 80076fa:	2300      	movs	r3, #0
 80076fc:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
<<<<<<< Updated upstream
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d102      	bne.n	80064e6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80064e0:	f000 fd10 	bl	8006f04 <xTimerCreateTimerTask>
 80064e4:	6178      	str	r0, [r7, #20]
=======
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	2b01      	cmp	r3, #1
 8007702:	d102      	bne.n	800770a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007704:	f000 fd10 	bl	8008128 <xTimerCreateTimerTask>
 8007708:	6178      	str	r0, [r7, #20]
>>>>>>> Stashed changes
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
<<<<<<< Updated upstream
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d11b      	bne.n	8006524 <vTaskStartScheduler+0x98>
	__asm volatile
 80064ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f0:	f383 8811 	msr	BASEPRI, r3
 80064f4:	f3bf 8f6f 	isb	sy
 80064f8:	f3bf 8f4f 	dsb	sy
 80064fc:	613b      	str	r3, [r7, #16]
}
 80064fe:	bf00      	nop
=======
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	2b01      	cmp	r3, #1
 800770e:	d11b      	bne.n	8007748 <vTaskStartScheduler+0x98>
	__asm volatile
 8007710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007714:	f383 8811 	msr	BASEPRI, r3
 8007718:	f3bf 8f6f 	isb	sy
 800771c:	f3bf 8f4f 	dsb	sy
 8007720:	613b      	str	r3, [r7, #16]
}
 8007722:	bf00      	nop
>>>>>>> Stashed changes
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
<<<<<<< Updated upstream
 8006500:	4b15      	ldr	r3, [pc, #84]	; (8006558 <vTaskStartScheduler+0xcc>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	3354      	adds	r3, #84	; 0x54
 8006506:	4a15      	ldr	r2, [pc, #84]	; (800655c <vTaskStartScheduler+0xd0>)
 8006508:	6013      	str	r3, [r2, #0]
=======
 8007724:	4b15      	ldr	r3, [pc, #84]	; (800777c <vTaskStartScheduler+0xcc>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	3354      	adds	r3, #84	; 0x54
 800772a:	4a15      	ldr	r2, [pc, #84]	; (8007780 <vTaskStartScheduler+0xd0>)
 800772c:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
<<<<<<< Updated upstream
 800650a:	4b15      	ldr	r3, [pc, #84]	; (8006560 <vTaskStartScheduler+0xd4>)
 800650c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006510:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006512:	4b14      	ldr	r3, [pc, #80]	; (8006564 <vTaskStartScheduler+0xd8>)
 8006514:	2201      	movs	r2, #1
 8006516:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006518:	4b13      	ldr	r3, [pc, #76]	; (8006568 <vTaskStartScheduler+0xdc>)
 800651a:	2200      	movs	r2, #0
 800651c:	601a      	str	r2, [r3, #0]
=======
 800772e:	4b15      	ldr	r3, [pc, #84]	; (8007784 <vTaskStartScheduler+0xd4>)
 8007730:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007734:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007736:	4b14      	ldr	r3, [pc, #80]	; (8007788 <vTaskStartScheduler+0xd8>)
 8007738:	2201      	movs	r2, #1
 800773a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800773c:	4b13      	ldr	r3, [pc, #76]	; (800778c <vTaskStartScheduler+0xdc>)
 800773e:	2200      	movs	r2, #0
 8007740:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
<<<<<<< Updated upstream
 800651e:	f001 f8c7 	bl	80076b0 <xPortStartScheduler>
=======
 8007742:	f001 f8cd 	bl	80088e0 <xPortStartScheduler>
>>>>>>> Stashed changes
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
<<<<<<< Updated upstream
 8006522:	e00e      	b.n	8006542 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800652a:	d10a      	bne.n	8006542 <vTaskStartScheduler+0xb6>
	__asm volatile
 800652c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006530:	f383 8811 	msr	BASEPRI, r3
 8006534:	f3bf 8f6f 	isb	sy
 8006538:	f3bf 8f4f 	dsb	sy
 800653c:	60fb      	str	r3, [r7, #12]
}
 800653e:	bf00      	nop
 8006540:	e7fe      	b.n	8006540 <vTaskStartScheduler+0xb4>
}
 8006542:	bf00      	nop
 8006544:	3718      	adds	r7, #24
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
 800654a:	bf00      	nop
 800654c:	08008e70 	.word	0x08008e70
 8006550:	08006b91 	.word	0x08006b91
 8006554:	20000ff4 	.word	0x20000ff4
 8006558:	20000afc 	.word	0x20000afc
 800655c:	20000068 	.word	0x20000068
 8006560:	20000ff0 	.word	0x20000ff0
 8006564:	20000fdc 	.word	0x20000fdc
 8006568:	20000fd4 	.word	0x20000fd4

0800656c <vTaskSuspendAll>:
=======
 8007746:	e00e      	b.n	8007766 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800774e:	d10a      	bne.n	8007766 <vTaskStartScheduler+0xb6>
	__asm volatile
 8007750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007754:	f383 8811 	msr	BASEPRI, r3
 8007758:	f3bf 8f6f 	isb	sy
 800775c:	f3bf 8f4f 	dsb	sy
 8007760:	60fb      	str	r3, [r7, #12]
}
 8007762:	bf00      	nop
 8007764:	e7fe      	b.n	8007764 <vTaskStartScheduler+0xb4>
}
 8007766:	bf00      	nop
 8007768:	3718      	adds	r7, #24
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}
 800776e:	bf00      	nop
 8007770:	0800a194 	.word	0x0800a194
 8007774:	08007db5 	.word	0x08007db5
 8007778:	20000f4c 	.word	0x20000f4c
 800777c:	20000a54 	.word	0x20000a54
 8007780:	20000068 	.word	0x20000068
 8007784:	20000f48 	.word	0x20000f48
 8007788:	20000f34 	.word	0x20000f34
 800778c:	20000f2c 	.word	0x20000f2c

08007790 <vTaskSuspendAll>:
>>>>>>> Stashed changes
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
<<<<<<< Updated upstream
 800656c:	b480      	push	{r7}
 800656e:	af00      	add	r7, sp, #0
=======
 8007790:	b480      	push	{r7}
 8007792:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
<<<<<<< Updated upstream
 8006570:	4b04      	ldr	r3, [pc, #16]	; (8006584 <vTaskSuspendAll+0x18>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	3301      	adds	r3, #1
 8006576:	4a03      	ldr	r2, [pc, #12]	; (8006584 <vTaskSuspendAll+0x18>)
 8006578:	6013      	str	r3, [r2, #0]
=======
 8007794:	4b04      	ldr	r3, [pc, #16]	; (80077a8 <vTaskSuspendAll+0x18>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	3301      	adds	r3, #1
 800779a:	4a03      	ldr	r2, [pc, #12]	; (80077a8 <vTaskSuspendAll+0x18>)
 800779c:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
<<<<<<< Updated upstream
 800657a:	bf00      	nop
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr
 8006584:	20000ff8 	.word	0x20000ff8

08006588 <xTaskResumeAll>:
=======
 800779e:	bf00      	nop
 80077a0:	46bd      	mov	sp, r7
 80077a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a6:	4770      	bx	lr
 80077a8:	20000f50 	.word	0x20000f50

080077ac <xTaskResumeAll>:
>>>>>>> Stashed changes

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
<<<<<<< Updated upstream
 8006588:	b580      	push	{r7, lr}
 800658a:	b084      	sub	sp, #16
 800658c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800658e:	2300      	movs	r3, #0
 8006590:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006592:	2300      	movs	r3, #0
 8006594:	60bb      	str	r3, [r7, #8]
=======
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b084      	sub	sp, #16
 80077b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80077b2:	2300      	movs	r3, #0
 80077b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80077b6:	2300      	movs	r3, #0
 80077b8:	60bb      	str	r3, [r7, #8]
>>>>>>> Stashed changes

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
<<<<<<< Updated upstream
 8006596:	4b42      	ldr	r3, [pc, #264]	; (80066a0 <xTaskResumeAll+0x118>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d10a      	bne.n	80065b4 <xTaskResumeAll+0x2c>
	__asm volatile
 800659e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a2:	f383 8811 	msr	BASEPRI, r3
 80065a6:	f3bf 8f6f 	isb	sy
 80065aa:	f3bf 8f4f 	dsb	sy
 80065ae:	603b      	str	r3, [r7, #0]
}
 80065b0:	bf00      	nop
 80065b2:	e7fe      	b.n	80065b2 <xTaskResumeAll+0x2a>
=======
 80077ba:	4b42      	ldr	r3, [pc, #264]	; (80078c4 <xTaskResumeAll+0x118>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d10a      	bne.n	80077d8 <xTaskResumeAll+0x2c>
	__asm volatile
 80077c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c6:	f383 8811 	msr	BASEPRI, r3
 80077ca:	f3bf 8f6f 	isb	sy
 80077ce:	f3bf 8f4f 	dsb	sy
 80077d2:	603b      	str	r3, [r7, #0]
}
 80077d4:	bf00      	nop
 80077d6:	e7fe      	b.n	80077d6 <xTaskResumeAll+0x2a>
>>>>>>> Stashed changes
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
<<<<<<< Updated upstream
 80065b4:	f001 f91e 	bl	80077f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80065b8:	4b39      	ldr	r3, [pc, #228]	; (80066a0 <xTaskResumeAll+0x118>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	3b01      	subs	r3, #1
 80065be:	4a38      	ldr	r2, [pc, #224]	; (80066a0 <xTaskResumeAll+0x118>)
 80065c0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065c2:	4b37      	ldr	r3, [pc, #220]	; (80066a0 <xTaskResumeAll+0x118>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d162      	bne.n	8006690 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80065ca:	4b36      	ldr	r3, [pc, #216]	; (80066a4 <xTaskResumeAll+0x11c>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d05e      	beq.n	8006690 <xTaskResumeAll+0x108>
=======
 80077d8:	f001 f924 	bl	8008a24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80077dc:	4b39      	ldr	r3, [pc, #228]	; (80078c4 <xTaskResumeAll+0x118>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	3b01      	subs	r3, #1
 80077e2:	4a38      	ldr	r2, [pc, #224]	; (80078c4 <xTaskResumeAll+0x118>)
 80077e4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80077e6:	4b37      	ldr	r3, [pc, #220]	; (80078c4 <xTaskResumeAll+0x118>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d162      	bne.n	80078b4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80077ee:	4b36      	ldr	r3, [pc, #216]	; (80078c8 <xTaskResumeAll+0x11c>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d05e      	beq.n	80078b4 <xTaskResumeAll+0x108>
>>>>>>> Stashed changes
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
<<<<<<< Updated upstream
 80065d2:	e02f      	b.n	8006634 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065d4:	4b34      	ldr	r3, [pc, #208]	; (80066a8 <xTaskResumeAll+0x120>)
 80065d6:	68db      	ldr	r3, [r3, #12]
 80065d8:	68db      	ldr	r3, [r3, #12]
 80065da:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	3318      	adds	r3, #24
 80065e0:	4618      	mov	r0, r3
 80065e2:	f7ff f817 	bl	8005614 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	3304      	adds	r3, #4
 80065ea:	4618      	mov	r0, r3
 80065ec:	f7ff f812 	bl	8005614 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065f4:	4b2d      	ldr	r3, [pc, #180]	; (80066ac <xTaskResumeAll+0x124>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d903      	bls.n	8006604 <xTaskResumeAll+0x7c>
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006600:	4a2a      	ldr	r2, [pc, #168]	; (80066ac <xTaskResumeAll+0x124>)
 8006602:	6013      	str	r3, [r2, #0]
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006608:	4613      	mov	r3, r2
 800660a:	009b      	lsls	r3, r3, #2
 800660c:	4413      	add	r3, r2
 800660e:	009b      	lsls	r3, r3, #2
 8006610:	4a27      	ldr	r2, [pc, #156]	; (80066b0 <xTaskResumeAll+0x128>)
 8006612:	441a      	add	r2, r3
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	3304      	adds	r3, #4
 8006618:	4619      	mov	r1, r3
 800661a:	4610      	mov	r0, r2
 800661c:	f7fe ff9d 	bl	800555a <vListInsertEnd>
=======
 80077f6:	e02f      	b.n	8007858 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077f8:	4b34      	ldr	r3, [pc, #208]	; (80078cc <xTaskResumeAll+0x120>)
 80077fa:	68db      	ldr	r3, [r3, #12]
 80077fc:	68db      	ldr	r3, [r3, #12]
 80077fe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	3318      	adds	r3, #24
 8007804:	4618      	mov	r0, r3
 8007806:	f7ff f817 	bl	8006838 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	3304      	adds	r3, #4
 800780e:	4618      	mov	r0, r3
 8007810:	f7ff f812 	bl	8006838 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007818:	4b2d      	ldr	r3, [pc, #180]	; (80078d0 <xTaskResumeAll+0x124>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	429a      	cmp	r2, r3
 800781e:	d903      	bls.n	8007828 <xTaskResumeAll+0x7c>
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007824:	4a2a      	ldr	r2, [pc, #168]	; (80078d0 <xTaskResumeAll+0x124>)
 8007826:	6013      	str	r3, [r2, #0]
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800782c:	4613      	mov	r3, r2
 800782e:	009b      	lsls	r3, r3, #2
 8007830:	4413      	add	r3, r2
 8007832:	009b      	lsls	r3, r3, #2
 8007834:	4a27      	ldr	r2, [pc, #156]	; (80078d4 <xTaskResumeAll+0x128>)
 8007836:	441a      	add	r2, r3
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	3304      	adds	r3, #4
 800783c:	4619      	mov	r1, r3
 800783e:	4610      	mov	r0, r2
 8007840:	f7fe ff9d 	bl	800677e <vListInsertEnd>
>>>>>>> Stashed changes

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
<<<<<<< Updated upstream
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006624:	4b23      	ldr	r3, [pc, #140]	; (80066b4 <xTaskResumeAll+0x12c>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800662a:	429a      	cmp	r2, r3
 800662c:	d302      	bcc.n	8006634 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800662e:	4b22      	ldr	r3, [pc, #136]	; (80066b8 <xTaskResumeAll+0x130>)
 8006630:	2201      	movs	r2, #1
 8006632:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006634:	4b1c      	ldr	r3, [pc, #112]	; (80066a8 <xTaskResumeAll+0x120>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d1cb      	bne.n	80065d4 <xTaskResumeAll+0x4c>
=======
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007848:	4b23      	ldr	r3, [pc, #140]	; (80078d8 <xTaskResumeAll+0x12c>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800784e:	429a      	cmp	r2, r3
 8007850:	d302      	bcc.n	8007858 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007852:	4b22      	ldr	r3, [pc, #136]	; (80078dc <xTaskResumeAll+0x130>)
 8007854:	2201      	movs	r2, #1
 8007856:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007858:	4b1c      	ldr	r3, [pc, #112]	; (80078cc <xTaskResumeAll+0x120>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d1cb      	bne.n	80077f8 <xTaskResumeAll+0x4c>
>>>>>>> Stashed changes
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
<<<<<<< Updated upstream
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d001      	beq.n	8006646 <xTaskResumeAll+0xbe>
=======
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d001      	beq.n	800786a <xTaskResumeAll+0xbe>
>>>>>>> Stashed changes
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
<<<<<<< Updated upstream
 8006642:	f000 fb5f 	bl	8006d04 <prvResetNextTaskUnblockTime>
=======
 8007866:	f000 fb5f 	bl	8007f28 <prvResetNextTaskUnblockTime>
>>>>>>> Stashed changes
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
<<<<<<< Updated upstream
 8006646:	4b1d      	ldr	r3, [pc, #116]	; (80066bc <xTaskResumeAll+0x134>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d010      	beq.n	8006674 <xTaskResumeAll+0xec>
=======
 800786a:	4b1d      	ldr	r3, [pc, #116]	; (80078e0 <xTaskResumeAll+0x134>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d010      	beq.n	8007898 <xTaskResumeAll+0xec>
>>>>>>> Stashed changes
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
<<<<<<< Updated upstream
 8006652:	f000 f847 	bl	80066e4 <xTaskIncrementTick>
 8006656:	4603      	mov	r3, r0
 8006658:	2b00      	cmp	r3, #0
 800665a:	d002      	beq.n	8006662 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800665c:	4b16      	ldr	r3, [pc, #88]	; (80066b8 <xTaskResumeAll+0x130>)
 800665e:	2201      	movs	r2, #1
 8006660:	601a      	str	r2, [r3, #0]
=======
 8007876:	f000 f847 	bl	8007908 <xTaskIncrementTick>
 800787a:	4603      	mov	r3, r0
 800787c:	2b00      	cmp	r3, #0
 800787e:	d002      	beq.n	8007886 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007880:	4b16      	ldr	r3, [pc, #88]	; (80078dc <xTaskResumeAll+0x130>)
 8007882:	2201      	movs	r2, #1
 8007884:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
<<<<<<< Updated upstream
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	3b01      	subs	r3, #1
 8006666:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d1f1      	bne.n	8006652 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800666e:	4b13      	ldr	r3, [pc, #76]	; (80066bc <xTaskResumeAll+0x134>)
 8006670:	2200      	movs	r2, #0
 8006672:	601a      	str	r2, [r3, #0]
=======
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	3b01      	subs	r3, #1
 800788a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d1f1      	bne.n	8007876 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007892:	4b13      	ldr	r3, [pc, #76]	; (80078e0 <xTaskResumeAll+0x134>)
 8007894:	2200      	movs	r2, #0
 8007896:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
<<<<<<< Updated upstream
 8006674:	4b10      	ldr	r3, [pc, #64]	; (80066b8 <xTaskResumeAll+0x130>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d009      	beq.n	8006690 <xTaskResumeAll+0x108>
=======
 8007898:	4b10      	ldr	r3, [pc, #64]	; (80078dc <xTaskResumeAll+0x130>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d009      	beq.n	80078b4 <xTaskResumeAll+0x108>
>>>>>>> Stashed changes
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
<<<<<<< Updated upstream
 800667c:	2301      	movs	r3, #1
 800667e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006680:	4b0f      	ldr	r3, [pc, #60]	; (80066c0 <xTaskResumeAll+0x138>)
 8006682:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006686:	601a      	str	r2, [r3, #0]
 8006688:	f3bf 8f4f 	dsb	sy
 800668c:	f3bf 8f6f 	isb	sy
=======
 80078a0:	2301      	movs	r3, #1
 80078a2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80078a4:	4b0f      	ldr	r3, [pc, #60]	; (80078e4 <xTaskResumeAll+0x138>)
 80078a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078aa:	601a      	str	r2, [r3, #0]
 80078ac:	f3bf 8f4f 	dsb	sy
 80078b0:	f3bf 8f6f 	isb	sy
>>>>>>> Stashed changes
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
<<<<<<< Updated upstream
 8006690:	f001 f8e0 	bl	8007854 <vPortExitCritical>

	return xAlreadyYielded;
 8006694:	68bb      	ldr	r3, [r7, #8]
}
 8006696:	4618      	mov	r0, r3
 8006698:	3710      	adds	r7, #16
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}
 800669e:	bf00      	nop
 80066a0:	20000ff8 	.word	0x20000ff8
 80066a4:	20000fd0 	.word	0x20000fd0
 80066a8:	20000f90 	.word	0x20000f90
 80066ac:	20000fd8 	.word	0x20000fd8
 80066b0:	20000b00 	.word	0x20000b00
 80066b4:	20000afc 	.word	0x20000afc
 80066b8:	20000fe4 	.word	0x20000fe4
 80066bc:	20000fe0 	.word	0x20000fe0
 80066c0:	e000ed04 	.word	0xe000ed04

080066c4 <xTaskGetTickCount>:
=======
 80078b4:	f001 f8e6 	bl	8008a84 <vPortExitCritical>

	return xAlreadyYielded;
 80078b8:	68bb      	ldr	r3, [r7, #8]
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3710      	adds	r7, #16
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}
 80078c2:	bf00      	nop
 80078c4:	20000f50 	.word	0x20000f50
 80078c8:	20000f28 	.word	0x20000f28
 80078cc:	20000ee8 	.word	0x20000ee8
 80078d0:	20000f30 	.word	0x20000f30
 80078d4:	20000a58 	.word	0x20000a58
 80078d8:	20000a54 	.word	0x20000a54
 80078dc:	20000f3c 	.word	0x20000f3c
 80078e0:	20000f38 	.word	0x20000f38
 80078e4:	e000ed04 	.word	0xe000ed04

080078e8 <xTaskGetTickCount>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
<<<<<<< Updated upstream
 80066c4:	b480      	push	{r7}
 80066c6:	b083      	sub	sp, #12
 80066c8:	af00      	add	r7, sp, #0
=======
 80078e8:	b480      	push	{r7}
 80078ea:	b083      	sub	sp, #12
 80078ec:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
<<<<<<< Updated upstream
 80066ca:	4b05      	ldr	r3, [pc, #20]	; (80066e0 <xTaskGetTickCount+0x1c>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	607b      	str	r3, [r7, #4]
=======
 80078ee:	4b05      	ldr	r3, [pc, #20]	; (8007904 <xTaskGetTickCount+0x1c>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	607b      	str	r3, [r7, #4]
>>>>>>> Stashed changes
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
<<<<<<< Updated upstream
 80066d0:	687b      	ldr	r3, [r7, #4]
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	370c      	adds	r7, #12
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr
 80066de:	bf00      	nop
 80066e0:	20000fd4 	.word	0x20000fd4

080066e4 <xTaskIncrementTick>:
=======
 80078f4:	687b      	ldr	r3, [r7, #4]
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	370c      	adds	r7, #12
 80078fa:	46bd      	mov	sp, r7
 80078fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007900:	4770      	bx	lr
 8007902:	bf00      	nop
 8007904:	20000f2c 	.word	0x20000f2c

08007908 <xTaskIncrementTick>:
>>>>>>> Stashed changes

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
<<<<<<< Updated upstream
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b086      	sub	sp, #24
 80066e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80066ea:	2300      	movs	r3, #0
 80066ec:	617b      	str	r3, [r7, #20]
=======
 8007908:	b580      	push	{r7, lr}
 800790a:	b086      	sub	sp, #24
 800790c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800790e:	2300      	movs	r3, #0
 8007910:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
<<<<<<< Updated upstream
 80066ee:	4b4f      	ldr	r3, [pc, #316]	; (800682c <xTaskIncrementTick+0x148>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	f040 808f 	bne.w	8006816 <xTaskIncrementTick+0x132>
=======
 8007912:	4b4f      	ldr	r3, [pc, #316]	; (8007a50 <xTaskIncrementTick+0x148>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	2b00      	cmp	r3, #0
 8007918:	f040 808f 	bne.w	8007a3a <xTaskIncrementTick+0x132>
>>>>>>> Stashed changes
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
<<<<<<< Updated upstream
 80066f8:	4b4d      	ldr	r3, [pc, #308]	; (8006830 <xTaskIncrementTick+0x14c>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	3301      	adds	r3, #1
 80066fe:	613b      	str	r3, [r7, #16]
=======
 800791c:	4b4d      	ldr	r3, [pc, #308]	; (8007a54 <xTaskIncrementTick+0x14c>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	3301      	adds	r3, #1
 8007922:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
<<<<<<< Updated upstream
 8006700:	4a4b      	ldr	r2, [pc, #300]	; (8006830 <xTaskIncrementTick+0x14c>)
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d120      	bne.n	800674e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800670c:	4b49      	ldr	r3, [pc, #292]	; (8006834 <xTaskIncrementTick+0x150>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d00a      	beq.n	800672c <xTaskIncrementTick+0x48>
	__asm volatile
 8006716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800671a:	f383 8811 	msr	BASEPRI, r3
 800671e:	f3bf 8f6f 	isb	sy
 8006722:	f3bf 8f4f 	dsb	sy
 8006726:	603b      	str	r3, [r7, #0]
}
 8006728:	bf00      	nop
 800672a:	e7fe      	b.n	800672a <xTaskIncrementTick+0x46>
 800672c:	4b41      	ldr	r3, [pc, #260]	; (8006834 <xTaskIncrementTick+0x150>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	60fb      	str	r3, [r7, #12]
 8006732:	4b41      	ldr	r3, [pc, #260]	; (8006838 <xTaskIncrementTick+0x154>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a3f      	ldr	r2, [pc, #252]	; (8006834 <xTaskIncrementTick+0x150>)
 8006738:	6013      	str	r3, [r2, #0]
 800673a:	4a3f      	ldr	r2, [pc, #252]	; (8006838 <xTaskIncrementTick+0x154>)
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	6013      	str	r3, [r2, #0]
 8006740:	4b3e      	ldr	r3, [pc, #248]	; (800683c <xTaskIncrementTick+0x158>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	3301      	adds	r3, #1
 8006746:	4a3d      	ldr	r2, [pc, #244]	; (800683c <xTaskIncrementTick+0x158>)
 8006748:	6013      	str	r3, [r2, #0]
 800674a:	f000 fadb 	bl	8006d04 <prvResetNextTaskUnblockTime>
=======
 8007924:	4a4b      	ldr	r2, [pc, #300]	; (8007a54 <xTaskIncrementTick+0x14c>)
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d120      	bne.n	8007972 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007930:	4b49      	ldr	r3, [pc, #292]	; (8007a58 <xTaskIncrementTick+0x150>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d00a      	beq.n	8007950 <xTaskIncrementTick+0x48>
	__asm volatile
 800793a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800793e:	f383 8811 	msr	BASEPRI, r3
 8007942:	f3bf 8f6f 	isb	sy
 8007946:	f3bf 8f4f 	dsb	sy
 800794a:	603b      	str	r3, [r7, #0]
}
 800794c:	bf00      	nop
 800794e:	e7fe      	b.n	800794e <xTaskIncrementTick+0x46>
 8007950:	4b41      	ldr	r3, [pc, #260]	; (8007a58 <xTaskIncrementTick+0x150>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	60fb      	str	r3, [r7, #12]
 8007956:	4b41      	ldr	r3, [pc, #260]	; (8007a5c <xTaskIncrementTick+0x154>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a3f      	ldr	r2, [pc, #252]	; (8007a58 <xTaskIncrementTick+0x150>)
 800795c:	6013      	str	r3, [r2, #0]
 800795e:	4a3f      	ldr	r2, [pc, #252]	; (8007a5c <xTaskIncrementTick+0x154>)
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	6013      	str	r3, [r2, #0]
 8007964:	4b3e      	ldr	r3, [pc, #248]	; (8007a60 <xTaskIncrementTick+0x158>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	3301      	adds	r3, #1
 800796a:	4a3d      	ldr	r2, [pc, #244]	; (8007a60 <xTaskIncrementTick+0x158>)
 800796c:	6013      	str	r3, [r2, #0]
 800796e:	f000 fadb 	bl	8007f28 <prvResetNextTaskUnblockTime>
>>>>>>> Stashed changes

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
<<<<<<< Updated upstream
 800674e:	4b3c      	ldr	r3, [pc, #240]	; (8006840 <xTaskIncrementTick+0x15c>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	693a      	ldr	r2, [r7, #16]
 8006754:	429a      	cmp	r2, r3
 8006756:	d349      	bcc.n	80067ec <xTaskIncrementTick+0x108>
=======
 8007972:	4b3c      	ldr	r3, [pc, #240]	; (8007a64 <xTaskIncrementTick+0x15c>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	693a      	ldr	r2, [r7, #16]
 8007978:	429a      	cmp	r2, r3
 800797a:	d349      	bcc.n	8007a10 <xTaskIncrementTick+0x108>
>>>>>>> Stashed changes
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
<<<<<<< Updated upstream
 8006758:	4b36      	ldr	r3, [pc, #216]	; (8006834 <xTaskIncrementTick+0x150>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d104      	bne.n	800676c <xTaskIncrementTick+0x88>
=======
 800797c:	4b36      	ldr	r3, [pc, #216]	; (8007a58 <xTaskIncrementTick+0x150>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d104      	bne.n	8007990 <xTaskIncrementTick+0x88>
>>>>>>> Stashed changes
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
<<<<<<< Updated upstream
 8006762:	4b37      	ldr	r3, [pc, #220]	; (8006840 <xTaskIncrementTick+0x15c>)
 8006764:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006768:	601a      	str	r2, [r3, #0]
					break;
 800676a:	e03f      	b.n	80067ec <xTaskIncrementTick+0x108>
=======
 8007986:	4b37      	ldr	r3, [pc, #220]	; (8007a64 <xTaskIncrementTick+0x15c>)
 8007988:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800798c:	601a      	str	r2, [r3, #0]
					break;
 800798e:	e03f      	b.n	8007a10 <xTaskIncrementTick+0x108>
>>>>>>> Stashed changes
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
<<<<<<< Updated upstream
 800676c:	4b31      	ldr	r3, [pc, #196]	; (8006834 <xTaskIncrementTick+0x150>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	68db      	ldr	r3, [r3, #12]
 8006772:	68db      	ldr	r3, [r3, #12]
 8006774:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800677c:	693a      	ldr	r2, [r7, #16]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	429a      	cmp	r2, r3
 8006782:	d203      	bcs.n	800678c <xTaskIncrementTick+0xa8>
=======
 8007990:	4b31      	ldr	r3, [pc, #196]	; (8007a58 <xTaskIncrementTick+0x150>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	68db      	ldr	r3, [r3, #12]
 8007996:	68db      	ldr	r3, [r3, #12]
 8007998:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80079a0:	693a      	ldr	r2, [r7, #16]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	429a      	cmp	r2, r3
 80079a6:	d203      	bcs.n	80079b0 <xTaskIncrementTick+0xa8>
>>>>>>> Stashed changes
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
<<<<<<< Updated upstream
 8006784:	4a2e      	ldr	r2, [pc, #184]	; (8006840 <xTaskIncrementTick+0x15c>)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800678a:	e02f      	b.n	80067ec <xTaskIncrementTick+0x108>
=======
 80079a8:	4a2e      	ldr	r2, [pc, #184]	; (8007a64 <xTaskIncrementTick+0x15c>)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80079ae:	e02f      	b.n	8007a10 <xTaskIncrementTick+0x108>
>>>>>>> Stashed changes
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
<<<<<<< Updated upstream
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	3304      	adds	r3, #4
 8006790:	4618      	mov	r0, r3
 8006792:	f7fe ff3f 	bl	8005614 <uxListRemove>
=======
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	3304      	adds	r3, #4
 80079b4:	4618      	mov	r0, r3
 80079b6:	f7fe ff3f 	bl	8006838 <uxListRemove>
>>>>>>> Stashed changes

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
<<<<<<< Updated upstream
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800679a:	2b00      	cmp	r3, #0
 800679c:	d004      	beq.n	80067a8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	3318      	adds	r3, #24
 80067a2:	4618      	mov	r0, r3
 80067a4:	f7fe ff36 	bl	8005614 <uxListRemove>
=======
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d004      	beq.n	80079cc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	3318      	adds	r3, #24
 80079c6:	4618      	mov	r0, r3
 80079c8:	f7fe ff36 	bl	8006838 <uxListRemove>
>>>>>>> Stashed changes
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
<<<<<<< Updated upstream
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067ac:	4b25      	ldr	r3, [pc, #148]	; (8006844 <xTaskIncrementTick+0x160>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d903      	bls.n	80067bc <xTaskIncrementTick+0xd8>
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b8:	4a22      	ldr	r2, [pc, #136]	; (8006844 <xTaskIncrementTick+0x160>)
 80067ba:	6013      	str	r3, [r2, #0]
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067c0:	4613      	mov	r3, r2
 80067c2:	009b      	lsls	r3, r3, #2
 80067c4:	4413      	add	r3, r2
 80067c6:	009b      	lsls	r3, r3, #2
 80067c8:	4a1f      	ldr	r2, [pc, #124]	; (8006848 <xTaskIncrementTick+0x164>)
 80067ca:	441a      	add	r2, r3
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	3304      	adds	r3, #4
 80067d0:	4619      	mov	r1, r3
 80067d2:	4610      	mov	r0, r2
 80067d4:	f7fe fec1 	bl	800555a <vListInsertEnd>
=======
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079d0:	4b25      	ldr	r3, [pc, #148]	; (8007a68 <xTaskIncrementTick+0x160>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d903      	bls.n	80079e0 <xTaskIncrementTick+0xd8>
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079dc:	4a22      	ldr	r2, [pc, #136]	; (8007a68 <xTaskIncrementTick+0x160>)
 80079de:	6013      	str	r3, [r2, #0]
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079e4:	4613      	mov	r3, r2
 80079e6:	009b      	lsls	r3, r3, #2
 80079e8:	4413      	add	r3, r2
 80079ea:	009b      	lsls	r3, r3, #2
 80079ec:	4a1f      	ldr	r2, [pc, #124]	; (8007a6c <xTaskIncrementTick+0x164>)
 80079ee:	441a      	add	r2, r3
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	3304      	adds	r3, #4
 80079f4:	4619      	mov	r1, r3
 80079f6:	4610      	mov	r0, r2
 80079f8:	f7fe fec1 	bl	800677e <vListInsertEnd>
>>>>>>> Stashed changes
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
<<<<<<< Updated upstream
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067dc:	4b1b      	ldr	r3, [pc, #108]	; (800684c <xTaskIncrementTick+0x168>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d3b8      	bcc.n	8006758 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80067e6:	2301      	movs	r3, #1
 80067e8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067ea:	e7b5      	b.n	8006758 <xTaskIncrementTick+0x74>
=======
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a00:	4b1b      	ldr	r3, [pc, #108]	; (8007a70 <xTaskIncrementTick+0x168>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d3b8      	bcc.n	800797c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a0e:	e7b5      	b.n	800797c <xTaskIncrementTick+0x74>
>>>>>>> Stashed changes
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
<<<<<<< Updated upstream
 80067ec:	4b17      	ldr	r3, [pc, #92]	; (800684c <xTaskIncrementTick+0x168>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067f2:	4915      	ldr	r1, [pc, #84]	; (8006848 <xTaskIncrementTick+0x164>)
 80067f4:	4613      	mov	r3, r2
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	4413      	add	r3, r2
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	440b      	add	r3, r1
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	2b01      	cmp	r3, #1
 8006802:	d901      	bls.n	8006808 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006804:	2301      	movs	r3, #1
 8006806:	617b      	str	r3, [r7, #20]
=======
 8007a10:	4b17      	ldr	r3, [pc, #92]	; (8007a70 <xTaskIncrementTick+0x168>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a16:	4915      	ldr	r1, [pc, #84]	; (8007a6c <xTaskIncrementTick+0x164>)
 8007a18:	4613      	mov	r3, r2
 8007a1a:	009b      	lsls	r3, r3, #2
 8007a1c:	4413      	add	r3, r2
 8007a1e:	009b      	lsls	r3, r3, #2
 8007a20:	440b      	add	r3, r1
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d901      	bls.n	8007a2c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007a28:	2301      	movs	r3, #1
 8007a2a:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
<<<<<<< Updated upstream
 8006808:	4b11      	ldr	r3, [pc, #68]	; (8006850 <xTaskIncrementTick+0x16c>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d007      	beq.n	8006820 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006810:	2301      	movs	r3, #1
 8006812:	617b      	str	r3, [r7, #20]
 8006814:	e004      	b.n	8006820 <xTaskIncrementTick+0x13c>
=======
 8007a2c:	4b11      	ldr	r3, [pc, #68]	; (8007a74 <xTaskIncrementTick+0x16c>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d007      	beq.n	8007a44 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007a34:	2301      	movs	r3, #1
 8007a36:	617b      	str	r3, [r7, #20]
 8007a38:	e004      	b.n	8007a44 <xTaskIncrementTick+0x13c>
>>>>>>> Stashed changes
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
<<<<<<< Updated upstream
 8006816:	4b0f      	ldr	r3, [pc, #60]	; (8006854 <xTaskIncrementTick+0x170>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	3301      	adds	r3, #1
 800681c:	4a0d      	ldr	r2, [pc, #52]	; (8006854 <xTaskIncrementTick+0x170>)
 800681e:	6013      	str	r3, [r2, #0]
=======
 8007a3a:	4b0f      	ldr	r3, [pc, #60]	; (8007a78 <xTaskIncrementTick+0x170>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	3301      	adds	r3, #1
 8007a40:	4a0d      	ldr	r2, [pc, #52]	; (8007a78 <xTaskIncrementTick+0x170>)
 8007a42:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
<<<<<<< Updated upstream
 8006820:	697b      	ldr	r3, [r7, #20]
}
 8006822:	4618      	mov	r0, r3
 8006824:	3718      	adds	r7, #24
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
 800682a:	bf00      	nop
 800682c:	20000ff8 	.word	0x20000ff8
 8006830:	20000fd4 	.word	0x20000fd4
 8006834:	20000f88 	.word	0x20000f88
 8006838:	20000f8c 	.word	0x20000f8c
 800683c:	20000fe8 	.word	0x20000fe8
 8006840:	20000ff0 	.word	0x20000ff0
 8006844:	20000fd8 	.word	0x20000fd8
 8006848:	20000b00 	.word	0x20000b00
 800684c:	20000afc 	.word	0x20000afc
 8006850:	20000fe4 	.word	0x20000fe4
 8006854:	20000fe0 	.word	0x20000fe0

08006858 <vTaskSwitchContext>:
=======
 8007a44:	697b      	ldr	r3, [r7, #20]
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3718      	adds	r7, #24
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}
 8007a4e:	bf00      	nop
 8007a50:	20000f50 	.word	0x20000f50
 8007a54:	20000f2c 	.word	0x20000f2c
 8007a58:	20000ee0 	.word	0x20000ee0
 8007a5c:	20000ee4 	.word	0x20000ee4
 8007a60:	20000f40 	.word	0x20000f40
 8007a64:	20000f48 	.word	0x20000f48
 8007a68:	20000f30 	.word	0x20000f30
 8007a6c:	20000a58 	.word	0x20000a58
 8007a70:	20000a54 	.word	0x20000a54
 8007a74:	20000f3c 	.word	0x20000f3c
 8007a78:	20000f38 	.word	0x20000f38

08007a7c <vTaskSwitchContext>:
>>>>>>> Stashed changes

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
<<<<<<< Updated upstream
 8006858:	b480      	push	{r7}
 800685a:	b085      	sub	sp, #20
 800685c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800685e:	4b2a      	ldr	r3, [pc, #168]	; (8006908 <vTaskSwitchContext+0xb0>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d003      	beq.n	800686e <vTaskSwitchContext+0x16>
=======
 8007a7c:	b480      	push	{r7}
 8007a7e:	b085      	sub	sp, #20
 8007a80:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007a82:	4b2a      	ldr	r3, [pc, #168]	; (8007b2c <vTaskSwitchContext+0xb0>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d003      	beq.n	8007a92 <vTaskSwitchContext+0x16>
>>>>>>> Stashed changes
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
<<<<<<< Updated upstream
 8006866:	4b29      	ldr	r3, [pc, #164]	; (800690c <vTaskSwitchContext+0xb4>)
 8006868:	2201      	movs	r2, #1
 800686a:	601a      	str	r2, [r3, #0]
=======
 8007a8a:	4b29      	ldr	r3, [pc, #164]	; (8007b30 <vTaskSwitchContext+0xb4>)
 8007a8c:	2201      	movs	r2, #1
 8007a8e:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
<<<<<<< Updated upstream
 800686c:	e046      	b.n	80068fc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800686e:	4b27      	ldr	r3, [pc, #156]	; (800690c <vTaskSwitchContext+0xb4>)
 8006870:	2200      	movs	r2, #0
 8006872:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006874:	4b26      	ldr	r3, [pc, #152]	; (8006910 <vTaskSwitchContext+0xb8>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	60fb      	str	r3, [r7, #12]
 800687a:	e010      	b.n	800689e <vTaskSwitchContext+0x46>
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d10a      	bne.n	8006898 <vTaskSwitchContext+0x40>
	__asm volatile
 8006882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006886:	f383 8811 	msr	BASEPRI, r3
 800688a:	f3bf 8f6f 	isb	sy
 800688e:	f3bf 8f4f 	dsb	sy
 8006892:	607b      	str	r3, [r7, #4]
}
 8006894:	bf00      	nop
 8006896:	e7fe      	b.n	8006896 <vTaskSwitchContext+0x3e>
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	3b01      	subs	r3, #1
 800689c:	60fb      	str	r3, [r7, #12]
 800689e:	491d      	ldr	r1, [pc, #116]	; (8006914 <vTaskSwitchContext+0xbc>)
 80068a0:	68fa      	ldr	r2, [r7, #12]
 80068a2:	4613      	mov	r3, r2
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	4413      	add	r3, r2
 80068a8:	009b      	lsls	r3, r3, #2
 80068aa:	440b      	add	r3, r1
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d0e4      	beq.n	800687c <vTaskSwitchContext+0x24>
 80068b2:	68fa      	ldr	r2, [r7, #12]
 80068b4:	4613      	mov	r3, r2
 80068b6:	009b      	lsls	r3, r3, #2
 80068b8:	4413      	add	r3, r2
 80068ba:	009b      	lsls	r3, r3, #2
 80068bc:	4a15      	ldr	r2, [pc, #84]	; (8006914 <vTaskSwitchContext+0xbc>)
 80068be:	4413      	add	r3, r2
 80068c0:	60bb      	str	r3, [r7, #8]
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	685a      	ldr	r2, [r3, #4]
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	605a      	str	r2, [r3, #4]
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	685a      	ldr	r2, [r3, #4]
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	3308      	adds	r3, #8
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d104      	bne.n	80068e2 <vTaskSwitchContext+0x8a>
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	685a      	ldr	r2, [r3, #4]
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	605a      	str	r2, [r3, #4]
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	68db      	ldr	r3, [r3, #12]
 80068e8:	4a0b      	ldr	r2, [pc, #44]	; (8006918 <vTaskSwitchContext+0xc0>)
 80068ea:	6013      	str	r3, [r2, #0]
 80068ec:	4a08      	ldr	r2, [pc, #32]	; (8006910 <vTaskSwitchContext+0xb8>)
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80068f2:	4b09      	ldr	r3, [pc, #36]	; (8006918 <vTaskSwitchContext+0xc0>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	3354      	adds	r3, #84	; 0x54
 80068f8:	4a08      	ldr	r2, [pc, #32]	; (800691c <vTaskSwitchContext+0xc4>)
 80068fa:	6013      	str	r3, [r2, #0]
}
 80068fc:	bf00      	nop
 80068fe:	3714      	adds	r7, #20
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr
 8006908:	20000ff8 	.word	0x20000ff8
 800690c:	20000fe4 	.word	0x20000fe4
 8006910:	20000fd8 	.word	0x20000fd8
 8006914:	20000b00 	.word	0x20000b00
 8006918:	20000afc 	.word	0x20000afc
 800691c:	20000068 	.word	0x20000068

08006920 <vTaskPlaceOnEventList>:
=======
 8007a90:	e046      	b.n	8007b20 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8007a92:	4b27      	ldr	r3, [pc, #156]	; (8007b30 <vTaskSwitchContext+0xb4>)
 8007a94:	2200      	movs	r2, #0
 8007a96:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a98:	4b26      	ldr	r3, [pc, #152]	; (8007b34 <vTaskSwitchContext+0xb8>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	60fb      	str	r3, [r7, #12]
 8007a9e:	e010      	b.n	8007ac2 <vTaskSwitchContext+0x46>
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d10a      	bne.n	8007abc <vTaskSwitchContext+0x40>
	__asm volatile
 8007aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aaa:	f383 8811 	msr	BASEPRI, r3
 8007aae:	f3bf 8f6f 	isb	sy
 8007ab2:	f3bf 8f4f 	dsb	sy
 8007ab6:	607b      	str	r3, [r7, #4]
}
 8007ab8:	bf00      	nop
 8007aba:	e7fe      	b.n	8007aba <vTaskSwitchContext+0x3e>
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	3b01      	subs	r3, #1
 8007ac0:	60fb      	str	r3, [r7, #12]
 8007ac2:	491d      	ldr	r1, [pc, #116]	; (8007b38 <vTaskSwitchContext+0xbc>)
 8007ac4:	68fa      	ldr	r2, [r7, #12]
 8007ac6:	4613      	mov	r3, r2
 8007ac8:	009b      	lsls	r3, r3, #2
 8007aca:	4413      	add	r3, r2
 8007acc:	009b      	lsls	r3, r3, #2
 8007ace:	440b      	add	r3, r1
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d0e4      	beq.n	8007aa0 <vTaskSwitchContext+0x24>
 8007ad6:	68fa      	ldr	r2, [r7, #12]
 8007ad8:	4613      	mov	r3, r2
 8007ada:	009b      	lsls	r3, r3, #2
 8007adc:	4413      	add	r3, r2
 8007ade:	009b      	lsls	r3, r3, #2
 8007ae0:	4a15      	ldr	r2, [pc, #84]	; (8007b38 <vTaskSwitchContext+0xbc>)
 8007ae2:	4413      	add	r3, r2
 8007ae4:	60bb      	str	r3, [r7, #8]
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	685a      	ldr	r2, [r3, #4]
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	605a      	str	r2, [r3, #4]
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	685a      	ldr	r2, [r3, #4]
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	3308      	adds	r3, #8
 8007af8:	429a      	cmp	r2, r3
 8007afa:	d104      	bne.n	8007b06 <vTaskSwitchContext+0x8a>
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	685a      	ldr	r2, [r3, #4]
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	605a      	str	r2, [r3, #4]
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	68db      	ldr	r3, [r3, #12]
 8007b0c:	4a0b      	ldr	r2, [pc, #44]	; (8007b3c <vTaskSwitchContext+0xc0>)
 8007b0e:	6013      	str	r3, [r2, #0]
 8007b10:	4a08      	ldr	r2, [pc, #32]	; (8007b34 <vTaskSwitchContext+0xb8>)
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007b16:	4b09      	ldr	r3, [pc, #36]	; (8007b3c <vTaskSwitchContext+0xc0>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	3354      	adds	r3, #84	; 0x54
 8007b1c:	4a08      	ldr	r2, [pc, #32]	; (8007b40 <vTaskSwitchContext+0xc4>)
 8007b1e:	6013      	str	r3, [r2, #0]
}
 8007b20:	bf00      	nop
 8007b22:	3714      	adds	r7, #20
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr
 8007b2c:	20000f50 	.word	0x20000f50
 8007b30:	20000f3c 	.word	0x20000f3c
 8007b34:	20000f30 	.word	0x20000f30
 8007b38:	20000a58 	.word	0x20000a58
 8007b3c:	20000a54 	.word	0x20000a54
 8007b40:	20000068 	.word	0x20000068

08007b44 <vTaskPlaceOnEventList>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
<<<<<<< Updated upstream
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d10a      	bne.n	8006946 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006934:	f383 8811 	msr	BASEPRI, r3
 8006938:	f3bf 8f6f 	isb	sy
 800693c:	f3bf 8f4f 	dsb	sy
 8006940:	60fb      	str	r3, [r7, #12]
}
 8006942:	bf00      	nop
 8006944:	e7fe      	b.n	8006944 <vTaskPlaceOnEventList+0x24>
=======
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b084      	sub	sp, #16
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d10a      	bne.n	8007b6a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b58:	f383 8811 	msr	BASEPRI, r3
 8007b5c:	f3bf 8f6f 	isb	sy
 8007b60:	f3bf 8f4f 	dsb	sy
 8007b64:	60fb      	str	r3, [r7, #12]
}
 8007b66:	bf00      	nop
 8007b68:	e7fe      	b.n	8007b68 <vTaskPlaceOnEventList+0x24>
>>>>>>> Stashed changes

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
<<<<<<< Updated upstream
 8006946:	4b07      	ldr	r3, [pc, #28]	; (8006964 <vTaskPlaceOnEventList+0x44>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	3318      	adds	r3, #24
 800694c:	4619      	mov	r1, r3
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f7fe fe27 	bl	80055a2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006954:	2101      	movs	r1, #1
 8006956:	6838      	ldr	r0, [r7, #0]
 8006958:	f000 fa80 	bl	8006e5c <prvAddCurrentTaskToDelayedList>
}
 800695c:	bf00      	nop
 800695e:	3710      	adds	r7, #16
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}
 8006964:	20000afc 	.word	0x20000afc

08006968 <vTaskPlaceOnEventListRestricted>:
=======
 8007b6a:	4b07      	ldr	r3, [pc, #28]	; (8007b88 <vTaskPlaceOnEventList+0x44>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	3318      	adds	r3, #24
 8007b70:	4619      	mov	r1, r3
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f7fe fe27 	bl	80067c6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007b78:	2101      	movs	r1, #1
 8007b7a:	6838      	ldr	r0, [r7, #0]
 8007b7c:	f000 fa80 	bl	8008080 <prvAddCurrentTaskToDelayedList>
}
 8007b80:	bf00      	nop
 8007b82:	3710      	adds	r7, #16
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}
 8007b88:	20000a54 	.word	0x20000a54

08007b8c <vTaskPlaceOnEventListRestricted>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
<<<<<<< Updated upstream
 8006968:	b580      	push	{r7, lr}
 800696a:	b086      	sub	sp, #24
 800696c:	af00      	add	r7, sp, #0
 800696e:	60f8      	str	r0, [r7, #12]
 8006970:	60b9      	str	r1, [r7, #8]
 8006972:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d10a      	bne.n	8006990 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800697a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800697e:	f383 8811 	msr	BASEPRI, r3
 8006982:	f3bf 8f6f 	isb	sy
 8006986:	f3bf 8f4f 	dsb	sy
 800698a:	617b      	str	r3, [r7, #20]
}
 800698c:	bf00      	nop
 800698e:	e7fe      	b.n	800698e <vTaskPlaceOnEventListRestricted+0x26>
=======
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b086      	sub	sp, #24
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	60f8      	str	r0, [r7, #12]
 8007b94:	60b9      	str	r1, [r7, #8]
 8007b96:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d10a      	bne.n	8007bb4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba2:	f383 8811 	msr	BASEPRI, r3
 8007ba6:	f3bf 8f6f 	isb	sy
 8007baa:	f3bf 8f4f 	dsb	sy
 8007bae:	617b      	str	r3, [r7, #20]
}
 8007bb0:	bf00      	nop
 8007bb2:	e7fe      	b.n	8007bb2 <vTaskPlaceOnEventListRestricted+0x26>
>>>>>>> Stashed changes

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
<<<<<<< Updated upstream
 8006990:	4b0a      	ldr	r3, [pc, #40]	; (80069bc <vTaskPlaceOnEventListRestricted+0x54>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	3318      	adds	r3, #24
 8006996:	4619      	mov	r1, r3
 8006998:	68f8      	ldr	r0, [r7, #12]
 800699a:	f7fe fdde 	bl	800555a <vListInsertEnd>
=======
 8007bb4:	4b0a      	ldr	r3, [pc, #40]	; (8007be0 <vTaskPlaceOnEventListRestricted+0x54>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	3318      	adds	r3, #24
 8007bba:	4619      	mov	r1, r3
 8007bbc:	68f8      	ldr	r0, [r7, #12]
 8007bbe:	f7fe fdde 	bl	800677e <vListInsertEnd>
>>>>>>> Stashed changes

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
<<<<<<< Updated upstream
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d002      	beq.n	80069aa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80069a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80069a8:	60bb      	str	r3, [r7, #8]
=======
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d002      	beq.n	8007bce <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007bc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007bcc:	60bb      	str	r3, [r7, #8]
>>>>>>> Stashed changes
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
<<<<<<< Updated upstream
 80069aa:	6879      	ldr	r1, [r7, #4]
 80069ac:	68b8      	ldr	r0, [r7, #8]
 80069ae:	f000 fa55 	bl	8006e5c <prvAddCurrentTaskToDelayedList>
	}
 80069b2:	bf00      	nop
 80069b4:	3718      	adds	r7, #24
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
 80069ba:	bf00      	nop
 80069bc:	20000afc 	.word	0x20000afc

080069c0 <xTaskRemoveFromEventList>:
=======
 8007bce:	6879      	ldr	r1, [r7, #4]
 8007bd0:	68b8      	ldr	r0, [r7, #8]
 8007bd2:	f000 fa55 	bl	8008080 <prvAddCurrentTaskToDelayedList>
	}
 8007bd6:	bf00      	nop
 8007bd8:	3718      	adds	r7, #24
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}
 8007bde:	bf00      	nop
 8007be0:	20000a54 	.word	0x20000a54

08007be4 <xTaskRemoveFromEventList>:
>>>>>>> Stashed changes

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
<<<<<<< Updated upstream
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b086      	sub	sp, #24
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
=======
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b086      	sub	sp, #24
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
<<<<<<< Updated upstream
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	68db      	ldr	r3, [r3, #12]
 80069cc:	68db      	ldr	r3, [r3, #12]
 80069ce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d10a      	bne.n	80069ec <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80069d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069da:	f383 8811 	msr	BASEPRI, r3
 80069de:	f3bf 8f6f 	isb	sy
 80069e2:	f3bf 8f4f 	dsb	sy
 80069e6:	60fb      	str	r3, [r7, #12]
}
 80069e8:	bf00      	nop
 80069ea:	e7fe      	b.n	80069ea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	3318      	adds	r3, #24
 80069f0:	4618      	mov	r0, r3
 80069f2:	f7fe fe0f 	bl	8005614 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069f6:	4b1e      	ldr	r3, [pc, #120]	; (8006a70 <xTaskRemoveFromEventList+0xb0>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d11d      	bne.n	8006a3a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	3304      	adds	r3, #4
 8006a02:	4618      	mov	r0, r3
 8006a04:	f7fe fe06 	bl	8005614 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a0c:	4b19      	ldr	r3, [pc, #100]	; (8006a74 <xTaskRemoveFromEventList+0xb4>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d903      	bls.n	8006a1c <xTaskRemoveFromEventList+0x5c>
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a18:	4a16      	ldr	r2, [pc, #88]	; (8006a74 <xTaskRemoveFromEventList+0xb4>)
 8006a1a:	6013      	str	r3, [r2, #0]
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a20:	4613      	mov	r3, r2
 8006a22:	009b      	lsls	r3, r3, #2
 8006a24:	4413      	add	r3, r2
 8006a26:	009b      	lsls	r3, r3, #2
 8006a28:	4a13      	ldr	r2, [pc, #76]	; (8006a78 <xTaskRemoveFromEventList+0xb8>)
 8006a2a:	441a      	add	r2, r3
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	3304      	adds	r3, #4
 8006a30:	4619      	mov	r1, r3
 8006a32:	4610      	mov	r0, r2
 8006a34:	f7fe fd91 	bl	800555a <vListInsertEnd>
 8006a38:	e005      	b.n	8006a46 <xTaskRemoveFromEventList+0x86>
=======
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	68db      	ldr	r3, [r3, #12]
 8007bf0:	68db      	ldr	r3, [r3, #12]
 8007bf2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d10a      	bne.n	8007c10 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bfe:	f383 8811 	msr	BASEPRI, r3
 8007c02:	f3bf 8f6f 	isb	sy
 8007c06:	f3bf 8f4f 	dsb	sy
 8007c0a:	60fb      	str	r3, [r7, #12]
}
 8007c0c:	bf00      	nop
 8007c0e:	e7fe      	b.n	8007c0e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	3318      	adds	r3, #24
 8007c14:	4618      	mov	r0, r3
 8007c16:	f7fe fe0f 	bl	8006838 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c1a:	4b1e      	ldr	r3, [pc, #120]	; (8007c94 <xTaskRemoveFromEventList+0xb0>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d11d      	bne.n	8007c5e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007c22:	693b      	ldr	r3, [r7, #16]
 8007c24:	3304      	adds	r3, #4
 8007c26:	4618      	mov	r0, r3
 8007c28:	f7fe fe06 	bl	8006838 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c30:	4b19      	ldr	r3, [pc, #100]	; (8007c98 <xTaskRemoveFromEventList+0xb4>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	429a      	cmp	r2, r3
 8007c36:	d903      	bls.n	8007c40 <xTaskRemoveFromEventList+0x5c>
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c3c:	4a16      	ldr	r2, [pc, #88]	; (8007c98 <xTaskRemoveFromEventList+0xb4>)
 8007c3e:	6013      	str	r3, [r2, #0]
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c44:	4613      	mov	r3, r2
 8007c46:	009b      	lsls	r3, r3, #2
 8007c48:	4413      	add	r3, r2
 8007c4a:	009b      	lsls	r3, r3, #2
 8007c4c:	4a13      	ldr	r2, [pc, #76]	; (8007c9c <xTaskRemoveFromEventList+0xb8>)
 8007c4e:	441a      	add	r2, r3
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	3304      	adds	r3, #4
 8007c54:	4619      	mov	r1, r3
 8007c56:	4610      	mov	r0, r2
 8007c58:	f7fe fd91 	bl	800677e <vListInsertEnd>
 8007c5c:	e005      	b.n	8007c6a <xTaskRemoveFromEventList+0x86>
>>>>>>> Stashed changes
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
<<<<<<< Updated upstream
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	3318      	adds	r3, #24
 8006a3e:	4619      	mov	r1, r3
 8006a40:	480e      	ldr	r0, [pc, #56]	; (8006a7c <xTaskRemoveFromEventList+0xbc>)
 8006a42:	f7fe fd8a 	bl	800555a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a4a:	4b0d      	ldr	r3, [pc, #52]	; (8006a80 <xTaskRemoveFromEventList+0xc0>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d905      	bls.n	8006a60 <xTaskRemoveFromEventList+0xa0>
=======
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	3318      	adds	r3, #24
 8007c62:	4619      	mov	r1, r3
 8007c64:	480e      	ldr	r0, [pc, #56]	; (8007ca0 <xTaskRemoveFromEventList+0xbc>)
 8007c66:	f7fe fd8a 	bl	800677e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c6e:	4b0d      	ldr	r3, [pc, #52]	; (8007ca4 <xTaskRemoveFromEventList+0xc0>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d905      	bls.n	8007c84 <xTaskRemoveFromEventList+0xa0>
>>>>>>> Stashed changes
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
<<<<<<< Updated upstream
 8006a54:	2301      	movs	r3, #1
 8006a56:	617b      	str	r3, [r7, #20]
=======
 8007c78:	2301      	movs	r3, #1
 8007c7a:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
<<<<<<< Updated upstream
 8006a58:	4b0a      	ldr	r3, [pc, #40]	; (8006a84 <xTaskRemoveFromEventList+0xc4>)
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	601a      	str	r2, [r3, #0]
 8006a5e:	e001      	b.n	8006a64 <xTaskRemoveFromEventList+0xa4>
=======
 8007c7c:	4b0a      	ldr	r3, [pc, #40]	; (8007ca8 <xTaskRemoveFromEventList+0xc4>)
 8007c7e:	2201      	movs	r2, #1
 8007c80:	601a      	str	r2, [r3, #0]
 8007c82:	e001      	b.n	8007c88 <xTaskRemoveFromEventList+0xa4>
>>>>>>> Stashed changes
	}
	else
	{
		xReturn = pdFALSE;
<<<<<<< Updated upstream
 8006a60:	2300      	movs	r3, #0
 8006a62:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006a64:	697b      	ldr	r3, [r7, #20]
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3718      	adds	r7, #24
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}
 8006a6e:	bf00      	nop
 8006a70:	20000ff8 	.word	0x20000ff8
 8006a74:	20000fd8 	.word	0x20000fd8
 8006a78:	20000b00 	.word	0x20000b00
 8006a7c:	20000f90 	.word	0x20000f90
 8006a80:	20000afc 	.word	0x20000afc
 8006a84:	20000fe4 	.word	0x20000fe4

08006a88 <vTaskInternalSetTimeOutState>:
=======
 8007c84:	2300      	movs	r3, #0
 8007c86:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007c88:	697b      	ldr	r3, [r7, #20]
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3718      	adds	r7, #24
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}
 8007c92:	bf00      	nop
 8007c94:	20000f50 	.word	0x20000f50
 8007c98:	20000f30 	.word	0x20000f30
 8007c9c:	20000a58 	.word	0x20000a58
 8007ca0:	20000ee8 	.word	0x20000ee8
 8007ca4:	20000a54 	.word	0x20000a54
 8007ca8:	20000f3c 	.word	0x20000f3c

08007cac <vTaskInternalSetTimeOutState>:
>>>>>>> Stashed changes
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
<<<<<<< Updated upstream
 8006a88:	b480      	push	{r7}
 8006a8a:	b083      	sub	sp, #12
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006a90:	4b06      	ldr	r3, [pc, #24]	; (8006aac <vTaskInternalSetTimeOutState+0x24>)
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006a98:	4b05      	ldr	r3, [pc, #20]	; (8006ab0 <vTaskInternalSetTimeOutState+0x28>)
 8006a9a:	681a      	ldr	r2, [r3, #0]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	605a      	str	r2, [r3, #4]
}
 8006aa0:	bf00      	nop
 8006aa2:	370c      	adds	r7, #12
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr
 8006aac:	20000fe8 	.word	0x20000fe8
 8006ab0:	20000fd4 	.word	0x20000fd4

08006ab4 <xTaskCheckForTimeOut>:
=======
 8007cac:	b480      	push	{r7}
 8007cae:	b083      	sub	sp, #12
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007cb4:	4b06      	ldr	r3, [pc, #24]	; (8007cd0 <vTaskInternalSetTimeOutState+0x24>)
 8007cb6:	681a      	ldr	r2, [r3, #0]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007cbc:	4b05      	ldr	r3, [pc, #20]	; (8007cd4 <vTaskInternalSetTimeOutState+0x28>)
 8007cbe:	681a      	ldr	r2, [r3, #0]
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	605a      	str	r2, [r3, #4]
}
 8007cc4:	bf00      	nop
 8007cc6:	370c      	adds	r7, #12
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr
 8007cd0:	20000f40 	.word	0x20000f40
 8007cd4:	20000f2c 	.word	0x20000f2c

08007cd8 <xTaskCheckForTimeOut>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
<<<<<<< Updated upstream
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b088      	sub	sp, #32
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d10a      	bne.n	8006ada <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac8:	f383 8811 	msr	BASEPRI, r3
 8006acc:	f3bf 8f6f 	isb	sy
 8006ad0:	f3bf 8f4f 	dsb	sy
 8006ad4:	613b      	str	r3, [r7, #16]
}
 8006ad6:	bf00      	nop
 8006ad8:	e7fe      	b.n	8006ad8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d10a      	bne.n	8006af6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae4:	f383 8811 	msr	BASEPRI, r3
 8006ae8:	f3bf 8f6f 	isb	sy
 8006aec:	f3bf 8f4f 	dsb	sy
 8006af0:	60fb      	str	r3, [r7, #12]
}
 8006af2:	bf00      	nop
 8006af4:	e7fe      	b.n	8006af4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006af6:	f000 fe7d 	bl	80077f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006afa:	4b1d      	ldr	r3, [pc, #116]	; (8006b70 <xTaskCheckForTimeOut+0xbc>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	69ba      	ldr	r2, [r7, #24]
 8006b06:	1ad3      	subs	r3, r2, r3
 8006b08:	617b      	str	r3, [r7, #20]
=======
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b088      	sub	sp, #32
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
 8007ce0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d10a      	bne.n	8007cfe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cec:	f383 8811 	msr	BASEPRI, r3
 8007cf0:	f3bf 8f6f 	isb	sy
 8007cf4:	f3bf 8f4f 	dsb	sy
 8007cf8:	613b      	str	r3, [r7, #16]
}
 8007cfa:	bf00      	nop
 8007cfc:	e7fe      	b.n	8007cfc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d10a      	bne.n	8007d1a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d08:	f383 8811 	msr	BASEPRI, r3
 8007d0c:	f3bf 8f6f 	isb	sy
 8007d10:	f3bf 8f4f 	dsb	sy
 8007d14:	60fb      	str	r3, [r7, #12]
}
 8007d16:	bf00      	nop
 8007d18:	e7fe      	b.n	8007d18 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007d1a:	f000 fe83 	bl	8008a24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007d1e:	4b1d      	ldr	r3, [pc, #116]	; (8007d94 <xTaskCheckForTimeOut+0xbc>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	685b      	ldr	r3, [r3, #4]
 8007d28:	69ba      	ldr	r2, [r7, #24]
 8007d2a:	1ad3      	subs	r3, r2, r3
 8007d2c:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
<<<<<<< Updated upstream
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b12:	d102      	bne.n	8006b1a <xTaskCheckForTimeOut+0x66>
=======
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d36:	d102      	bne.n	8007d3e <xTaskCheckForTimeOut+0x66>
>>>>>>> Stashed changes
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
<<<<<<< Updated upstream
 8006b14:	2300      	movs	r3, #0
 8006b16:	61fb      	str	r3, [r7, #28]
 8006b18:	e023      	b.n	8006b62 <xTaskCheckForTimeOut+0xae>
=======
 8007d38:	2300      	movs	r3, #0
 8007d3a:	61fb      	str	r3, [r7, #28]
 8007d3c:	e023      	b.n	8007d86 <xTaskCheckForTimeOut+0xae>
>>>>>>> Stashed changes
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
<<<<<<< Updated upstream
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681a      	ldr	r2, [r3, #0]
 8006b1e:	4b15      	ldr	r3, [pc, #84]	; (8006b74 <xTaskCheckForTimeOut+0xc0>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d007      	beq.n	8006b36 <xTaskCheckForTimeOut+0x82>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	69ba      	ldr	r2, [r7, #24]
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	d302      	bcc.n	8006b36 <xTaskCheckForTimeOut+0x82>
=======
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681a      	ldr	r2, [r3, #0]
 8007d42:	4b15      	ldr	r3, [pc, #84]	; (8007d98 <xTaskCheckForTimeOut+0xc0>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	429a      	cmp	r2, r3
 8007d48:	d007      	beq.n	8007d5a <xTaskCheckForTimeOut+0x82>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	69ba      	ldr	r2, [r7, #24]
 8007d50:	429a      	cmp	r2, r3
 8007d52:	d302      	bcc.n	8007d5a <xTaskCheckForTimeOut+0x82>
>>>>>>> Stashed changes
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
<<<<<<< Updated upstream
 8006b30:	2301      	movs	r3, #1
 8006b32:	61fb      	str	r3, [r7, #28]
 8006b34:	e015      	b.n	8006b62 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	697a      	ldr	r2, [r7, #20]
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d20b      	bcs.n	8006b58 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	681a      	ldr	r2, [r3, #0]
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	1ad2      	subs	r2, r2, r3
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f7ff ff9b 	bl	8006a88 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006b52:	2300      	movs	r3, #0
 8006b54:	61fb      	str	r3, [r7, #28]
 8006b56:	e004      	b.n	8006b62 <xTaskCheckForTimeOut+0xae>
=======
 8007d54:	2301      	movs	r3, #1
 8007d56:	61fb      	str	r3, [r7, #28]
 8007d58:	e015      	b.n	8007d86 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	697a      	ldr	r2, [r7, #20]
 8007d60:	429a      	cmp	r2, r3
 8007d62:	d20b      	bcs.n	8007d7c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	681a      	ldr	r2, [r3, #0]
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	1ad2      	subs	r2, r2, r3
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f7ff ff9b 	bl	8007cac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007d76:	2300      	movs	r3, #0
 8007d78:	61fb      	str	r3, [r7, #28]
 8007d7a:	e004      	b.n	8007d86 <xTaskCheckForTimeOut+0xae>
>>>>>>> Stashed changes
		}
		else
		{
			*pxTicksToWait = 0;
<<<<<<< Updated upstream
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006b62:	f000 fe77 	bl	8007854 <vPortExitCritical>

	return xReturn;
 8006b66:	69fb      	ldr	r3, [r7, #28]
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3720      	adds	r7, #32
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}
 8006b70:	20000fd4 	.word	0x20000fd4
 8006b74:	20000fe8 	.word	0x20000fe8

08006b78 <vTaskMissedYield>:
=======
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007d82:	2301      	movs	r3, #1
 8007d84:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007d86:	f000 fe7d 	bl	8008a84 <vPortExitCritical>

	return xReturn;
 8007d8a:	69fb      	ldr	r3, [r7, #28]
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3720      	adds	r7, #32
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}
 8007d94:	20000f2c 	.word	0x20000f2c
 8007d98:	20000f40 	.word	0x20000f40

08007d9c <vTaskMissedYield>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
<<<<<<< Updated upstream
 8006b78:	b480      	push	{r7}
 8006b7a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006b7c:	4b03      	ldr	r3, [pc, #12]	; (8006b8c <vTaskMissedYield+0x14>)
 8006b7e:	2201      	movs	r2, #1
 8006b80:	601a      	str	r2, [r3, #0]
}
 8006b82:	bf00      	nop
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr
 8006b8c:	20000fe4 	.word	0x20000fe4

08006b90 <prvIdleTask>:
=======
 8007d9c:	b480      	push	{r7}
 8007d9e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007da0:	4b03      	ldr	r3, [pc, #12]	; (8007db0 <vTaskMissedYield+0x14>)
 8007da2:	2201      	movs	r2, #1
 8007da4:	601a      	str	r2, [r3, #0]
}
 8007da6:	bf00      	nop
 8007da8:	46bd      	mov	sp, r7
 8007daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dae:	4770      	bx	lr
 8007db0:	20000f3c 	.word	0x20000f3c

08007db4 <prvIdleTask>:
>>>>>>> Stashed changes
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
<<<<<<< Updated upstream
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b082      	sub	sp, #8
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
=======
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b082      	sub	sp, #8
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
<<<<<<< Updated upstream
 8006b98:	f000 f852 	bl	8006c40 <prvCheckTasksWaitingTermination>
=======
 8007dbc:	f000 f852 	bl	8007e64 <prvCheckTasksWaitingTermination>
>>>>>>> Stashed changes

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
<<<<<<< Updated upstream
 8006b9c:	4b06      	ldr	r3, [pc, #24]	; (8006bb8 <prvIdleTask+0x28>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	d9f9      	bls.n	8006b98 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006ba4:	4b05      	ldr	r3, [pc, #20]	; (8006bbc <prvIdleTask+0x2c>)
 8006ba6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006baa:	601a      	str	r2, [r3, #0]
 8006bac:	f3bf 8f4f 	dsb	sy
 8006bb0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006bb4:	e7f0      	b.n	8006b98 <prvIdleTask+0x8>
 8006bb6:	bf00      	nop
 8006bb8:	20000b00 	.word	0x20000b00
 8006bbc:	e000ed04 	.word	0xe000ed04

08006bc0 <prvInitialiseTaskLists>:
=======
 8007dc0:	4b06      	ldr	r3, [pc, #24]	; (8007ddc <prvIdleTask+0x28>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	2b01      	cmp	r3, #1
 8007dc6:	d9f9      	bls.n	8007dbc <prvIdleTask+0x8>
			{
				taskYIELD();
 8007dc8:	4b05      	ldr	r3, [pc, #20]	; (8007de0 <prvIdleTask+0x2c>)
 8007dca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dce:	601a      	str	r2, [r3, #0]
 8007dd0:	f3bf 8f4f 	dsb	sy
 8007dd4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007dd8:	e7f0      	b.n	8007dbc <prvIdleTask+0x8>
 8007dda:	bf00      	nop
 8007ddc:	20000a58 	.word	0x20000a58
 8007de0:	e000ed04 	.word	0xe000ed04

08007de4 <prvInitialiseTaskLists>:
>>>>>>> Stashed changes

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
<<<<<<< Updated upstream
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b082      	sub	sp, #8
 8006bc4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	607b      	str	r3, [r7, #4]
 8006bca:	e00c      	b.n	8006be6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006bcc:	687a      	ldr	r2, [r7, #4]
 8006bce:	4613      	mov	r3, r2
 8006bd0:	009b      	lsls	r3, r3, #2
 8006bd2:	4413      	add	r3, r2
 8006bd4:	009b      	lsls	r3, r3, #2
 8006bd6:	4a12      	ldr	r2, [pc, #72]	; (8006c20 <prvInitialiseTaskLists+0x60>)
 8006bd8:	4413      	add	r3, r2
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f7fe fc90 	bl	8005500 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	3301      	adds	r3, #1
 8006be4:	607b      	str	r3, [r7, #4]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2b37      	cmp	r3, #55	; 0x37
 8006bea:	d9ef      	bls.n	8006bcc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006bec:	480d      	ldr	r0, [pc, #52]	; (8006c24 <prvInitialiseTaskLists+0x64>)
 8006bee:	f7fe fc87 	bl	8005500 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006bf2:	480d      	ldr	r0, [pc, #52]	; (8006c28 <prvInitialiseTaskLists+0x68>)
 8006bf4:	f7fe fc84 	bl	8005500 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006bf8:	480c      	ldr	r0, [pc, #48]	; (8006c2c <prvInitialiseTaskLists+0x6c>)
 8006bfa:	f7fe fc81 	bl	8005500 <vListInitialise>
=======
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b082      	sub	sp, #8
 8007de8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007dea:	2300      	movs	r3, #0
 8007dec:	607b      	str	r3, [r7, #4]
 8007dee:	e00c      	b.n	8007e0a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007df0:	687a      	ldr	r2, [r7, #4]
 8007df2:	4613      	mov	r3, r2
 8007df4:	009b      	lsls	r3, r3, #2
 8007df6:	4413      	add	r3, r2
 8007df8:	009b      	lsls	r3, r3, #2
 8007dfa:	4a12      	ldr	r2, [pc, #72]	; (8007e44 <prvInitialiseTaskLists+0x60>)
 8007dfc:	4413      	add	r3, r2
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f7fe fc90 	bl	8006724 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	3301      	adds	r3, #1
 8007e08:	607b      	str	r3, [r7, #4]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2b37      	cmp	r3, #55	; 0x37
 8007e0e:	d9ef      	bls.n	8007df0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007e10:	480d      	ldr	r0, [pc, #52]	; (8007e48 <prvInitialiseTaskLists+0x64>)
 8007e12:	f7fe fc87 	bl	8006724 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007e16:	480d      	ldr	r0, [pc, #52]	; (8007e4c <prvInitialiseTaskLists+0x68>)
 8007e18:	f7fe fc84 	bl	8006724 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007e1c:	480c      	ldr	r0, [pc, #48]	; (8007e50 <prvInitialiseTaskLists+0x6c>)
 8007e1e:	f7fe fc81 	bl	8006724 <vListInitialise>
>>>>>>> Stashed changes

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
<<<<<<< Updated upstream
 8006bfe:	480c      	ldr	r0, [pc, #48]	; (8006c30 <prvInitialiseTaskLists+0x70>)
 8006c00:	f7fe fc7e 	bl	8005500 <vListInitialise>
=======
 8007e22:	480c      	ldr	r0, [pc, #48]	; (8007e54 <prvInitialiseTaskLists+0x70>)
 8007e24:	f7fe fc7e 	bl	8006724 <vListInitialise>
>>>>>>> Stashed changes
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
<<<<<<< Updated upstream
 8006c04:	480b      	ldr	r0, [pc, #44]	; (8006c34 <prvInitialiseTaskLists+0x74>)
 8006c06:	f7fe fc7b 	bl	8005500 <vListInitialise>
=======
 8007e28:	480b      	ldr	r0, [pc, #44]	; (8007e58 <prvInitialiseTaskLists+0x74>)
 8007e2a:	f7fe fc7b 	bl	8006724 <vListInitialise>
>>>>>>> Stashed changes
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
<<<<<<< Updated upstream
 8006c0a:	4b0b      	ldr	r3, [pc, #44]	; (8006c38 <prvInitialiseTaskLists+0x78>)
 8006c0c:	4a05      	ldr	r2, [pc, #20]	; (8006c24 <prvInitialiseTaskLists+0x64>)
 8006c0e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006c10:	4b0a      	ldr	r3, [pc, #40]	; (8006c3c <prvInitialiseTaskLists+0x7c>)
 8006c12:	4a05      	ldr	r2, [pc, #20]	; (8006c28 <prvInitialiseTaskLists+0x68>)
 8006c14:	601a      	str	r2, [r3, #0]
}
 8006c16:	bf00      	nop
 8006c18:	3708      	adds	r7, #8
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
 8006c1e:	bf00      	nop
 8006c20:	20000b00 	.word	0x20000b00
 8006c24:	20000f60 	.word	0x20000f60
 8006c28:	20000f74 	.word	0x20000f74
 8006c2c:	20000f90 	.word	0x20000f90
 8006c30:	20000fa4 	.word	0x20000fa4
 8006c34:	20000fbc 	.word	0x20000fbc
 8006c38:	20000f88 	.word	0x20000f88
 8006c3c:	20000f8c 	.word	0x20000f8c

08006c40 <prvCheckTasksWaitingTermination>:
=======
 8007e2e:	4b0b      	ldr	r3, [pc, #44]	; (8007e5c <prvInitialiseTaskLists+0x78>)
 8007e30:	4a05      	ldr	r2, [pc, #20]	; (8007e48 <prvInitialiseTaskLists+0x64>)
 8007e32:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007e34:	4b0a      	ldr	r3, [pc, #40]	; (8007e60 <prvInitialiseTaskLists+0x7c>)
 8007e36:	4a05      	ldr	r2, [pc, #20]	; (8007e4c <prvInitialiseTaskLists+0x68>)
 8007e38:	601a      	str	r2, [r3, #0]
}
 8007e3a:	bf00      	nop
 8007e3c:	3708      	adds	r7, #8
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}
 8007e42:	bf00      	nop
 8007e44:	20000a58 	.word	0x20000a58
 8007e48:	20000eb8 	.word	0x20000eb8
 8007e4c:	20000ecc 	.word	0x20000ecc
 8007e50:	20000ee8 	.word	0x20000ee8
 8007e54:	20000efc 	.word	0x20000efc
 8007e58:	20000f14 	.word	0x20000f14
 8007e5c:	20000ee0 	.word	0x20000ee0
 8007e60:	20000ee4 	.word	0x20000ee4

08007e64 <prvCheckTasksWaitingTermination>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
<<<<<<< Updated upstream
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b082      	sub	sp, #8
 8006c44:	af00      	add	r7, sp, #0
=======
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b082      	sub	sp, #8
 8007e68:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
<<<<<<< Updated upstream
 8006c46:	e019      	b.n	8006c7c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006c48:	f000 fdd4 	bl	80077f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c4c:	4b10      	ldr	r3, [pc, #64]	; (8006c90 <prvCheckTasksWaitingTermination+0x50>)
 8006c4e:	68db      	ldr	r3, [r3, #12]
 8006c50:	68db      	ldr	r3, [r3, #12]
 8006c52:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	3304      	adds	r3, #4
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f7fe fcdb 	bl	8005614 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006c5e:	4b0d      	ldr	r3, [pc, #52]	; (8006c94 <prvCheckTasksWaitingTermination+0x54>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	3b01      	subs	r3, #1
 8006c64:	4a0b      	ldr	r2, [pc, #44]	; (8006c94 <prvCheckTasksWaitingTermination+0x54>)
 8006c66:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006c68:	4b0b      	ldr	r3, [pc, #44]	; (8006c98 <prvCheckTasksWaitingTermination+0x58>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	3b01      	subs	r3, #1
 8006c6e:	4a0a      	ldr	r2, [pc, #40]	; (8006c98 <prvCheckTasksWaitingTermination+0x58>)
 8006c70:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006c72:	f000 fdef 	bl	8007854 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f000 f810 	bl	8006c9c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006c7c:	4b06      	ldr	r3, [pc, #24]	; (8006c98 <prvCheckTasksWaitingTermination+0x58>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d1e1      	bne.n	8006c48 <prvCheckTasksWaitingTermination+0x8>
=======
 8007e6a:	e019      	b.n	8007ea0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007e6c:	f000 fdda 	bl	8008a24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e70:	4b10      	ldr	r3, [pc, #64]	; (8007eb4 <prvCheckTasksWaitingTermination+0x50>)
 8007e72:	68db      	ldr	r3, [r3, #12]
 8007e74:	68db      	ldr	r3, [r3, #12]
 8007e76:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	3304      	adds	r3, #4
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f7fe fcdb 	bl	8006838 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007e82:	4b0d      	ldr	r3, [pc, #52]	; (8007eb8 <prvCheckTasksWaitingTermination+0x54>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	3b01      	subs	r3, #1
 8007e88:	4a0b      	ldr	r2, [pc, #44]	; (8007eb8 <prvCheckTasksWaitingTermination+0x54>)
 8007e8a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007e8c:	4b0b      	ldr	r3, [pc, #44]	; (8007ebc <prvCheckTasksWaitingTermination+0x58>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	3b01      	subs	r3, #1
 8007e92:	4a0a      	ldr	r2, [pc, #40]	; (8007ebc <prvCheckTasksWaitingTermination+0x58>)
 8007e94:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007e96:	f000 fdf5 	bl	8008a84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f000 f810 	bl	8007ec0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007ea0:	4b06      	ldr	r3, [pc, #24]	; (8007ebc <prvCheckTasksWaitingTermination+0x58>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d1e1      	bne.n	8007e6c <prvCheckTasksWaitingTermination+0x8>
>>>>>>> Stashed changes
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
<<<<<<< Updated upstream
 8006c84:	bf00      	nop
 8006c86:	bf00      	nop
 8006c88:	3708      	adds	r7, #8
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}
 8006c8e:	bf00      	nop
 8006c90:	20000fa4 	.word	0x20000fa4
 8006c94:	20000fd0 	.word	0x20000fd0
 8006c98:	20000fb8 	.word	0x20000fb8

08006c9c <prvDeleteTCB>:
=======
 8007ea8:	bf00      	nop
 8007eaa:	bf00      	nop
 8007eac:	3708      	adds	r7, #8
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}
 8007eb2:	bf00      	nop
 8007eb4:	20000efc 	.word	0x20000efc
 8007eb8:	20000f28 	.word	0x20000f28
 8007ebc:	20000f10 	.word	0x20000f10

08007ec0 <prvDeleteTCB>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
<<<<<<< Updated upstream
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b084      	sub	sp, #16
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
=======
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b084      	sub	sp, #16
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
<<<<<<< Updated upstream
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	3354      	adds	r3, #84	; 0x54
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f001 f9e7 	bl	800807c <_reclaim_reent>
=======
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	3354      	adds	r3, #84	; 0x54
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f001 f9ed 	bl	80092ac <_reclaim_reent>
>>>>>>> Stashed changes
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
<<<<<<< Updated upstream
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d108      	bne.n	8006cca <prvDeleteTCB+0x2e>
=======
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d108      	bne.n	8007eee <prvDeleteTCB+0x2e>
>>>>>>> Stashed changes
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
<<<<<<< Updated upstream
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f000 ff87 	bl	8007bd0 <vPortFree>
				vPortFree( pxTCB );
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f000 ff84 	bl	8007bd0 <vPortFree>
=======
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f000 ff8d 	bl	8008e00 <vPortFree>
				vPortFree( pxTCB );
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f000 ff8a 	bl	8008e00 <vPortFree>
>>>>>>> Stashed changes
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
<<<<<<< Updated upstream
 8006cc8:	e018      	b.n	8006cfc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d103      	bne.n	8006cdc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f000 ff7b 	bl	8007bd0 <vPortFree>
	}
 8006cda:	e00f      	b.n	8006cfc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006ce2:	2b02      	cmp	r3, #2
 8006ce4:	d00a      	beq.n	8006cfc <prvDeleteTCB+0x60>
	__asm volatile
 8006ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cea:	f383 8811 	msr	BASEPRI, r3
 8006cee:	f3bf 8f6f 	isb	sy
 8006cf2:	f3bf 8f4f 	dsb	sy
 8006cf6:	60fb      	str	r3, [r7, #12]
}
 8006cf8:	bf00      	nop
 8006cfa:	e7fe      	b.n	8006cfa <prvDeleteTCB+0x5e>
	}
 8006cfc:	bf00      	nop
 8006cfe:	3710      	adds	r7, #16
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}

08006d04 <prvResetNextTaskUnblockTime>:
=======
 8007eec:	e018      	b.n	8007f20 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8007ef4:	2b01      	cmp	r3, #1
 8007ef6:	d103      	bne.n	8007f00 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f000 ff81 	bl	8008e00 <vPortFree>
	}
 8007efe:	e00f      	b.n	8007f20 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8007f06:	2b02      	cmp	r3, #2
 8007f08:	d00a      	beq.n	8007f20 <prvDeleteTCB+0x60>
	__asm volatile
 8007f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f0e:	f383 8811 	msr	BASEPRI, r3
 8007f12:	f3bf 8f6f 	isb	sy
 8007f16:	f3bf 8f4f 	dsb	sy
 8007f1a:	60fb      	str	r3, [r7, #12]
}
 8007f1c:	bf00      	nop
 8007f1e:	e7fe      	b.n	8007f1e <prvDeleteTCB+0x5e>
	}
 8007f20:	bf00      	nop
 8007f22:	3710      	adds	r7, #16
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}

08007f28 <prvResetNextTaskUnblockTime>:
>>>>>>> Stashed changes

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
<<<<<<< Updated upstream
 8006d04:	b480      	push	{r7}
 8006d06:	b083      	sub	sp, #12
 8006d08:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d0a:	4b0c      	ldr	r3, [pc, #48]	; (8006d3c <prvResetNextTaskUnblockTime+0x38>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d104      	bne.n	8006d1e <prvResetNextTaskUnblockTime+0x1a>
=======
 8007f28:	b480      	push	{r7}
 8007f2a:	b083      	sub	sp, #12
 8007f2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f2e:	4b0c      	ldr	r3, [pc, #48]	; (8007f60 <prvResetNextTaskUnblockTime+0x38>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d104      	bne.n	8007f42 <prvResetNextTaskUnblockTime+0x1a>
>>>>>>> Stashed changes
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
<<<<<<< Updated upstream
 8006d14:	4b0a      	ldr	r3, [pc, #40]	; (8006d40 <prvResetNextTaskUnblockTime+0x3c>)
 8006d16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d1a:	601a      	str	r2, [r3, #0]
=======
 8007f38:	4b0a      	ldr	r3, [pc, #40]	; (8007f64 <prvResetNextTaskUnblockTime+0x3c>)
 8007f3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007f3e:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
<<<<<<< Updated upstream
 8006d1c:	e008      	b.n	8006d30 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d1e:	4b07      	ldr	r3, [pc, #28]	; (8006d3c <prvResetNextTaskUnblockTime+0x38>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	68db      	ldr	r3, [r3, #12]
 8006d24:	68db      	ldr	r3, [r3, #12]
 8006d26:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	4a04      	ldr	r2, [pc, #16]	; (8006d40 <prvResetNextTaskUnblockTime+0x3c>)
 8006d2e:	6013      	str	r3, [r2, #0]
}
 8006d30:	bf00      	nop
 8006d32:	370c      	adds	r7, #12
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr
 8006d3c:	20000f88 	.word	0x20000f88
 8006d40:	20000ff0 	.word	0x20000ff0

08006d44 <xTaskGetSchedulerState>:
=======
 8007f40:	e008      	b.n	8007f54 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f42:	4b07      	ldr	r3, [pc, #28]	; (8007f60 <prvResetNextTaskUnblockTime+0x38>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	68db      	ldr	r3, [r3, #12]
 8007f48:	68db      	ldr	r3, [r3, #12]
 8007f4a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	685b      	ldr	r3, [r3, #4]
 8007f50:	4a04      	ldr	r2, [pc, #16]	; (8007f64 <prvResetNextTaskUnblockTime+0x3c>)
 8007f52:	6013      	str	r3, [r2, #0]
}
 8007f54:	bf00      	nop
 8007f56:	370c      	adds	r7, #12
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5e:	4770      	bx	lr
 8007f60:	20000ee0 	.word	0x20000ee0
 8007f64:	20000f48 	.word	0x20000f48

08007f68 <xTaskGetSchedulerState>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
<<<<<<< Updated upstream
 8006d44:	b480      	push	{r7}
 8006d46:	b083      	sub	sp, #12
 8006d48:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006d4a:	4b0b      	ldr	r3, [pc, #44]	; (8006d78 <xTaskGetSchedulerState+0x34>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d102      	bne.n	8006d58 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006d52:	2301      	movs	r3, #1
 8006d54:	607b      	str	r3, [r7, #4]
 8006d56:	e008      	b.n	8006d6a <xTaskGetSchedulerState+0x26>
=======
 8007f68:	b480      	push	{r7}
 8007f6a:	b083      	sub	sp, #12
 8007f6c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007f6e:	4b0b      	ldr	r3, [pc, #44]	; (8007f9c <xTaskGetSchedulerState+0x34>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d102      	bne.n	8007f7c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007f76:	2301      	movs	r3, #1
 8007f78:	607b      	str	r3, [r7, #4]
 8007f7a:	e008      	b.n	8007f8e <xTaskGetSchedulerState+0x26>
>>>>>>> Stashed changes
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
<<<<<<< Updated upstream
 8006d58:	4b08      	ldr	r3, [pc, #32]	; (8006d7c <xTaskGetSchedulerState+0x38>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d102      	bne.n	8006d66 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006d60:	2302      	movs	r3, #2
 8006d62:	607b      	str	r3, [r7, #4]
 8006d64:	e001      	b.n	8006d6a <xTaskGetSchedulerState+0x26>
=======
 8007f7c:	4b08      	ldr	r3, [pc, #32]	; (8007fa0 <xTaskGetSchedulerState+0x38>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d102      	bne.n	8007f8a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007f84:	2302      	movs	r3, #2
 8007f86:	607b      	str	r3, [r7, #4]
 8007f88:	e001      	b.n	8007f8e <xTaskGetSchedulerState+0x26>
>>>>>>> Stashed changes
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
<<<<<<< Updated upstream
 8006d66:	2300      	movs	r3, #0
 8006d68:	607b      	str	r3, [r7, #4]
=======
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	607b      	str	r3, [r7, #4]
>>>>>>> Stashed changes
			}
		}

		return xReturn;
<<<<<<< Updated upstream
 8006d6a:	687b      	ldr	r3, [r7, #4]
	}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	370c      	adds	r7, #12
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr
 8006d78:	20000fdc 	.word	0x20000fdc
 8006d7c:	20000ff8 	.word	0x20000ff8

08006d80 <xTaskPriorityDisinherit>:
=======
 8007f8e:	687b      	ldr	r3, [r7, #4]
	}
 8007f90:	4618      	mov	r0, r3
 8007f92:	370c      	adds	r7, #12
 8007f94:	46bd      	mov	sp, r7
 8007f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9a:	4770      	bx	lr
 8007f9c:	20000f34 	.word	0x20000f34
 8007fa0:	20000f50 	.word	0x20000f50

08007fa4 <xTaskPriorityDisinherit>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
<<<<<<< Updated upstream
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b086      	sub	sp, #24
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d056      	beq.n	8006e44 <xTaskPriorityDisinherit+0xc4>
=======
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b086      	sub	sp, #24
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d056      	beq.n	8008068 <xTaskPriorityDisinherit+0xc4>
>>>>>>> Stashed changes
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
<<<<<<< Updated upstream
 8006d96:	4b2e      	ldr	r3, [pc, #184]	; (8006e50 <xTaskPriorityDisinherit+0xd0>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	693a      	ldr	r2, [r7, #16]
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d00a      	beq.n	8006db6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da4:	f383 8811 	msr	BASEPRI, r3
 8006da8:	f3bf 8f6f 	isb	sy
 8006dac:	f3bf 8f4f 	dsb	sy
 8006db0:	60fb      	str	r3, [r7, #12]
}
 8006db2:	bf00      	nop
 8006db4:	e7fe      	b.n	8006db4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d10a      	bne.n	8006dd4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc2:	f383 8811 	msr	BASEPRI, r3
 8006dc6:	f3bf 8f6f 	isb	sy
 8006dca:	f3bf 8f4f 	dsb	sy
 8006dce:	60bb      	str	r3, [r7, #8]
}
 8006dd0:	bf00      	nop
 8006dd2:	e7fe      	b.n	8006dd2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dd8:	1e5a      	subs	r2, r3, #1
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	651a      	str	r2, [r3, #80]	; 0x50
=======
 8007fba:	4b2e      	ldr	r3, [pc, #184]	; (8008074 <xTaskPriorityDisinherit+0xd0>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	693a      	ldr	r2, [r7, #16]
 8007fc0:	429a      	cmp	r2, r3
 8007fc2:	d00a      	beq.n	8007fda <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc8:	f383 8811 	msr	BASEPRI, r3
 8007fcc:	f3bf 8f6f 	isb	sy
 8007fd0:	f3bf 8f4f 	dsb	sy
 8007fd4:	60fb      	str	r3, [r7, #12]
}
 8007fd6:	bf00      	nop
 8007fd8:	e7fe      	b.n	8007fd8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d10a      	bne.n	8007ff8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe6:	f383 8811 	msr	BASEPRI, r3
 8007fea:	f3bf 8f6f 	isb	sy
 8007fee:	f3bf 8f4f 	dsb	sy
 8007ff2:	60bb      	str	r3, [r7, #8]
}
 8007ff4:	bf00      	nop
 8007ff6:	e7fe      	b.n	8007ff6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ffc:	1e5a      	subs	r2, r3, #1
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	651a      	str	r2, [r3, #80]	; 0x50
>>>>>>> Stashed changes

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
<<<<<<< Updated upstream
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006de6:	429a      	cmp	r2, r3
 8006de8:	d02c      	beq.n	8006e44 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d128      	bne.n	8006e44 <xTaskPriorityDisinherit+0xc4>
=======
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800800a:	429a      	cmp	r2, r3
 800800c:	d02c      	beq.n	8008068 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800800e:	693b      	ldr	r3, [r7, #16]
 8008010:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008012:	2b00      	cmp	r3, #0
 8008014:	d128      	bne.n	8008068 <xTaskPriorityDisinherit+0xc4>
>>>>>>> Stashed changes
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
<<<<<<< Updated upstream
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	3304      	adds	r3, #4
 8006df6:	4618      	mov	r0, r3
 8006df8:	f7fe fc0c 	bl	8005614 <uxListRemove>
=======
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	3304      	adds	r3, #4
 800801a:	4618      	mov	r0, r3
 800801c:	f7fe fc0c 	bl	8006838 <uxListRemove>
>>>>>>> Stashed changes
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
<<<<<<< Updated upstream
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	62da      	str	r2, [r3, #44]	; 0x2c
=======
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	62da      	str	r2, [r3, #44]	; 0x2c
>>>>>>> Stashed changes

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
<<<<<<< Updated upstream
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e08:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e14:	4b0f      	ldr	r3, [pc, #60]	; (8006e54 <xTaskPriorityDisinherit+0xd4>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d903      	bls.n	8006e24 <xTaskPriorityDisinherit+0xa4>
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e20:	4a0c      	ldr	r2, [pc, #48]	; (8006e54 <xTaskPriorityDisinherit+0xd4>)
 8006e22:	6013      	str	r3, [r2, #0]
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e28:	4613      	mov	r3, r2
 8006e2a:	009b      	lsls	r3, r3, #2
 8006e2c:	4413      	add	r3, r2
 8006e2e:	009b      	lsls	r3, r3, #2
 8006e30:	4a09      	ldr	r2, [pc, #36]	; (8006e58 <xTaskPriorityDisinherit+0xd8>)
 8006e32:	441a      	add	r2, r3
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	3304      	adds	r3, #4
 8006e38:	4619      	mov	r1, r3
 8006e3a:	4610      	mov	r0, r2
 8006e3c:	f7fe fb8d 	bl	800555a <vListInsertEnd>
=======
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800802c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008030:	693b      	ldr	r3, [r7, #16]
 8008032:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008034:	693b      	ldr	r3, [r7, #16]
 8008036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008038:	4b0f      	ldr	r3, [pc, #60]	; (8008078 <xTaskPriorityDisinherit+0xd4>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	429a      	cmp	r2, r3
 800803e:	d903      	bls.n	8008048 <xTaskPriorityDisinherit+0xa4>
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008044:	4a0c      	ldr	r2, [pc, #48]	; (8008078 <xTaskPriorityDisinherit+0xd4>)
 8008046:	6013      	str	r3, [r2, #0]
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800804c:	4613      	mov	r3, r2
 800804e:	009b      	lsls	r3, r3, #2
 8008050:	4413      	add	r3, r2
 8008052:	009b      	lsls	r3, r3, #2
 8008054:	4a09      	ldr	r2, [pc, #36]	; (800807c <xTaskPriorityDisinherit+0xd8>)
 8008056:	441a      	add	r2, r3
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	3304      	adds	r3, #4
 800805c:	4619      	mov	r1, r3
 800805e:	4610      	mov	r0, r2
 8008060:	f7fe fb8d 	bl	800677e <vListInsertEnd>
>>>>>>> Stashed changes
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
<<<<<<< Updated upstream
 8006e40:	2301      	movs	r3, #1
 8006e42:	617b      	str	r3, [r7, #20]
=======
 8008064:	2301      	movs	r3, #1
 8008066:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
<<<<<<< Updated upstream
 8006e44:	697b      	ldr	r3, [r7, #20]
	}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3718      	adds	r7, #24
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}
 8006e4e:	bf00      	nop
 8006e50:	20000afc 	.word	0x20000afc
 8006e54:	20000fd8 	.word	0x20000fd8
 8006e58:	20000b00 	.word	0x20000b00

08006e5c <prvAddCurrentTaskToDelayedList>:
=======
 8008068:	697b      	ldr	r3, [r7, #20]
	}
 800806a:	4618      	mov	r0, r3
 800806c:	3718      	adds	r7, #24
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}
 8008072:	bf00      	nop
 8008074:	20000a54 	.word	0x20000a54
 8008078:	20000f30 	.word	0x20000f30
 800807c:	20000a58 	.word	0x20000a58

08008080 <prvAddCurrentTaskToDelayedList>:
>>>>>>> Stashed changes

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
<<<<<<< Updated upstream
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b084      	sub	sp, #16
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006e66:	4b21      	ldr	r3, [pc, #132]	; (8006eec <prvAddCurrentTaskToDelayedList+0x90>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	60fb      	str	r3, [r7, #12]
=======
 8008080:	b580      	push	{r7, lr}
 8008082:	b084      	sub	sp, #16
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
 8008088:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800808a:	4b21      	ldr	r3, [pc, #132]	; (8008110 <prvAddCurrentTaskToDelayedList+0x90>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
<<<<<<< Updated upstream
 8006e6c:	4b20      	ldr	r3, [pc, #128]	; (8006ef0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	3304      	adds	r3, #4
 8006e72:	4618      	mov	r0, r3
 8006e74:	f7fe fbce 	bl	8005614 <uxListRemove>
=======
 8008090:	4b20      	ldr	r3, [pc, #128]	; (8008114 <prvAddCurrentTaskToDelayedList+0x94>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	3304      	adds	r3, #4
 8008096:	4618      	mov	r0, r3
 8008098:	f7fe fbce 	bl	8006838 <uxListRemove>
>>>>>>> Stashed changes
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
<<<<<<< Updated upstream
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e7e:	d10a      	bne.n	8006e96 <prvAddCurrentTaskToDelayedList+0x3a>
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d007      	beq.n	8006e96 <prvAddCurrentTaskToDelayedList+0x3a>
=======
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080a2:	d10a      	bne.n	80080ba <prvAddCurrentTaskToDelayedList+0x3a>
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d007      	beq.n	80080ba <prvAddCurrentTaskToDelayedList+0x3a>
>>>>>>> Stashed changes
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
<<<<<<< Updated upstream
 8006e86:	4b1a      	ldr	r3, [pc, #104]	; (8006ef0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	3304      	adds	r3, #4
 8006e8c:	4619      	mov	r1, r3
 8006e8e:	4819      	ldr	r0, [pc, #100]	; (8006ef4 <prvAddCurrentTaskToDelayedList+0x98>)
 8006e90:	f7fe fb63 	bl	800555a <vListInsertEnd>
=======
 80080aa:	4b1a      	ldr	r3, [pc, #104]	; (8008114 <prvAddCurrentTaskToDelayedList+0x94>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	3304      	adds	r3, #4
 80080b0:	4619      	mov	r1, r3
 80080b2:	4819      	ldr	r0, [pc, #100]	; (8008118 <prvAddCurrentTaskToDelayedList+0x98>)
 80080b4:	f7fe fb63 	bl	800677e <vListInsertEnd>
>>>>>>> Stashed changes

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
<<<<<<< Updated upstream
 8006e94:	e026      	b.n	8006ee4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006e96:	68fa      	ldr	r2, [r7, #12]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	4413      	add	r3, r2
 8006e9c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006e9e:	4b14      	ldr	r3, [pc, #80]	; (8006ef0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	68ba      	ldr	r2, [r7, #8]
 8006ea4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006ea6:	68ba      	ldr	r2, [r7, #8]
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	d209      	bcs.n	8006ec2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006eae:	4b12      	ldr	r3, [pc, #72]	; (8006ef8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006eb0:	681a      	ldr	r2, [r3, #0]
 8006eb2:	4b0f      	ldr	r3, [pc, #60]	; (8006ef0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	3304      	adds	r3, #4
 8006eb8:	4619      	mov	r1, r3
 8006eba:	4610      	mov	r0, r2
 8006ebc:	f7fe fb71 	bl	80055a2 <vListInsert>
}
 8006ec0:	e010      	b.n	8006ee4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ec2:	4b0e      	ldr	r3, [pc, #56]	; (8006efc <prvAddCurrentTaskToDelayedList+0xa0>)
 8006ec4:	681a      	ldr	r2, [r3, #0]
 8006ec6:	4b0a      	ldr	r3, [pc, #40]	; (8006ef0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	3304      	adds	r3, #4
 8006ecc:	4619      	mov	r1, r3
 8006ece:	4610      	mov	r0, r2
 8006ed0:	f7fe fb67 	bl	80055a2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006ed4:	4b0a      	ldr	r3, [pc, #40]	; (8006f00 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	68ba      	ldr	r2, [r7, #8]
 8006eda:	429a      	cmp	r2, r3
 8006edc:	d202      	bcs.n	8006ee4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006ede:	4a08      	ldr	r2, [pc, #32]	; (8006f00 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	6013      	str	r3, [r2, #0]
}
 8006ee4:	bf00      	nop
 8006ee6:	3710      	adds	r7, #16
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}
 8006eec:	20000fd4 	.word	0x20000fd4
 8006ef0:	20000afc 	.word	0x20000afc
 8006ef4:	20000fbc 	.word	0x20000fbc
 8006ef8:	20000f8c 	.word	0x20000f8c
 8006efc:	20000f88 	.word	0x20000f88
 8006f00:	20000ff0 	.word	0x20000ff0

08006f04 <xTimerCreateTimerTask>:
=======
 80080b8:	e026      	b.n	8008108 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80080ba:	68fa      	ldr	r2, [r7, #12]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	4413      	add	r3, r2
 80080c0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80080c2:	4b14      	ldr	r3, [pc, #80]	; (8008114 <prvAddCurrentTaskToDelayedList+0x94>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	68ba      	ldr	r2, [r7, #8]
 80080c8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80080ca:	68ba      	ldr	r2, [r7, #8]
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	429a      	cmp	r2, r3
 80080d0:	d209      	bcs.n	80080e6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80080d2:	4b12      	ldr	r3, [pc, #72]	; (800811c <prvAddCurrentTaskToDelayedList+0x9c>)
 80080d4:	681a      	ldr	r2, [r3, #0]
 80080d6:	4b0f      	ldr	r3, [pc, #60]	; (8008114 <prvAddCurrentTaskToDelayedList+0x94>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	3304      	adds	r3, #4
 80080dc:	4619      	mov	r1, r3
 80080de:	4610      	mov	r0, r2
 80080e0:	f7fe fb71 	bl	80067c6 <vListInsert>
}
 80080e4:	e010      	b.n	8008108 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80080e6:	4b0e      	ldr	r3, [pc, #56]	; (8008120 <prvAddCurrentTaskToDelayedList+0xa0>)
 80080e8:	681a      	ldr	r2, [r3, #0]
 80080ea:	4b0a      	ldr	r3, [pc, #40]	; (8008114 <prvAddCurrentTaskToDelayedList+0x94>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	3304      	adds	r3, #4
 80080f0:	4619      	mov	r1, r3
 80080f2:	4610      	mov	r0, r2
 80080f4:	f7fe fb67 	bl	80067c6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80080f8:	4b0a      	ldr	r3, [pc, #40]	; (8008124 <prvAddCurrentTaskToDelayedList+0xa4>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	68ba      	ldr	r2, [r7, #8]
 80080fe:	429a      	cmp	r2, r3
 8008100:	d202      	bcs.n	8008108 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008102:	4a08      	ldr	r2, [pc, #32]	; (8008124 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	6013      	str	r3, [r2, #0]
}
 8008108:	bf00      	nop
 800810a:	3710      	adds	r7, #16
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}
 8008110:	20000f2c 	.word	0x20000f2c
 8008114:	20000a54 	.word	0x20000a54
 8008118:	20000f14 	.word	0x20000f14
 800811c:	20000ee4 	.word	0x20000ee4
 8008120:	20000ee0 	.word	0x20000ee0
 8008124:	20000f48 	.word	0x20000f48

08008128 <xTimerCreateTimerTask>:
>>>>>>> Stashed changes
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
<<<<<<< Updated upstream
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b08a      	sub	sp, #40	; 0x28
 8006f08:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	617b      	str	r3, [r7, #20]
=======
 8008128:	b580      	push	{r7, lr}
 800812a:	b08a      	sub	sp, #40	; 0x28
 800812c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800812e:	2300      	movs	r3, #0
 8008130:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
<<<<<<< Updated upstream
 8006f0e:	f000 fb07 	bl	8007520 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006f12:	4b1c      	ldr	r3, [pc, #112]	; (8006f84 <xTimerCreateTimerTask+0x80>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d021      	beq.n	8006f5e <xTimerCreateTimerTask+0x5a>
=======
 8008132:	f000 fb07 	bl	8008744 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008136:	4b1c      	ldr	r3, [pc, #112]	; (80081a8 <xTimerCreateTimerTask+0x80>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d021      	beq.n	8008182 <xTimerCreateTimerTask+0x5a>
>>>>>>> Stashed changes
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
<<<<<<< Updated upstream
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006f22:	1d3a      	adds	r2, r7, #4
 8006f24:	f107 0108 	add.w	r1, r7, #8
 8006f28:	f107 030c 	add.w	r3, r7, #12
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f7fe facd 	bl	80054cc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006f32:	6879      	ldr	r1, [r7, #4]
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	68fa      	ldr	r2, [r7, #12]
 8006f38:	9202      	str	r2, [sp, #8]
 8006f3a:	9301      	str	r3, [sp, #4]
 8006f3c:	2302      	movs	r3, #2
 8006f3e:	9300      	str	r3, [sp, #0]
 8006f40:	2300      	movs	r3, #0
 8006f42:	460a      	mov	r2, r1
 8006f44:	4910      	ldr	r1, [pc, #64]	; (8006f88 <xTimerCreateTimerTask+0x84>)
 8006f46:	4811      	ldr	r0, [pc, #68]	; (8006f8c <xTimerCreateTimerTask+0x88>)
 8006f48:	f7ff f8b4 	bl	80060b4 <xTaskCreateStatic>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	4a10      	ldr	r2, [pc, #64]	; (8006f90 <xTimerCreateTimerTask+0x8c>)
 8006f50:	6013      	str	r3, [r2, #0]
=======
 800813e:	2300      	movs	r3, #0
 8008140:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008142:	2300      	movs	r3, #0
 8008144:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008146:	1d3a      	adds	r2, r7, #4
 8008148:	f107 0108 	add.w	r1, r7, #8
 800814c:	f107 030c 	add.w	r3, r7, #12
 8008150:	4618      	mov	r0, r3
 8008152:	f7fe facd 	bl	80066f0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008156:	6879      	ldr	r1, [r7, #4]
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	68fa      	ldr	r2, [r7, #12]
 800815c:	9202      	str	r2, [sp, #8]
 800815e:	9301      	str	r3, [sp, #4]
 8008160:	2302      	movs	r3, #2
 8008162:	9300      	str	r3, [sp, #0]
 8008164:	2300      	movs	r3, #0
 8008166:	460a      	mov	r2, r1
 8008168:	4910      	ldr	r1, [pc, #64]	; (80081ac <xTimerCreateTimerTask+0x84>)
 800816a:	4811      	ldr	r0, [pc, #68]	; (80081b0 <xTimerCreateTimerTask+0x88>)
 800816c:	f7ff f8b4 	bl	80072d8 <xTaskCreateStatic>
 8008170:	4603      	mov	r3, r0
 8008172:	4a10      	ldr	r2, [pc, #64]	; (80081b4 <xTimerCreateTimerTask+0x8c>)
 8008174:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
<<<<<<< Updated upstream
 8006f52:	4b0f      	ldr	r3, [pc, #60]	; (8006f90 <xTimerCreateTimerTask+0x8c>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d001      	beq.n	8006f5e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	617b      	str	r3, [r7, #20]
=======
 8008176:	4b0f      	ldr	r3, [pc, #60]	; (80081b4 <xTimerCreateTimerTask+0x8c>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d001      	beq.n	8008182 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800817e:	2301      	movs	r3, #1
 8008180:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
<<<<<<< Updated upstream
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d10a      	bne.n	8006f7a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f68:	f383 8811 	msr	BASEPRI, r3
 8006f6c:	f3bf 8f6f 	isb	sy
 8006f70:	f3bf 8f4f 	dsb	sy
 8006f74:	613b      	str	r3, [r7, #16]
}
 8006f76:	bf00      	nop
 8006f78:	e7fe      	b.n	8006f78 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006f7a:	697b      	ldr	r3, [r7, #20]
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3718      	adds	r7, #24
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}
 8006f84:	2000102c 	.word	0x2000102c
 8006f88:	08008e78 	.word	0x08008e78
 8006f8c:	080070c9 	.word	0x080070c9
 8006f90:	20001030 	.word	0x20001030

08006f94 <xTimerGenericCommand>:
=======
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d10a      	bne.n	800819e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800818c:	f383 8811 	msr	BASEPRI, r3
 8008190:	f3bf 8f6f 	isb	sy
 8008194:	f3bf 8f4f 	dsb	sy
 8008198:	613b      	str	r3, [r7, #16]
}
 800819a:	bf00      	nop
 800819c:	e7fe      	b.n	800819c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800819e:	697b      	ldr	r3, [r7, #20]
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3718      	adds	r7, #24
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}
 80081a8:	20000f84 	.word	0x20000f84
 80081ac:	0800a19c 	.word	0x0800a19c
 80081b0:	080082ed 	.word	0x080082ed
 80081b4:	20000f88 	.word	0x20000f88

080081b8 <xTimerGenericCommand>:
>>>>>>> Stashed changes
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
<<<<<<< Updated upstream
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b08a      	sub	sp, #40	; 0x28
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	60f8      	str	r0, [r7, #12]
 8006f9c:	60b9      	str	r1, [r7, #8]
 8006f9e:	607a      	str	r2, [r7, #4]
 8006fa0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d10a      	bne.n	8006fc2 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb0:	f383 8811 	msr	BASEPRI, r3
 8006fb4:	f3bf 8f6f 	isb	sy
 8006fb8:	f3bf 8f4f 	dsb	sy
 8006fbc:	623b      	str	r3, [r7, #32]
}
 8006fbe:	bf00      	nop
 8006fc0:	e7fe      	b.n	8006fc0 <xTimerGenericCommand+0x2c>
=======
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b08a      	sub	sp, #40	; 0x28
 80081bc:	af00      	add	r7, sp, #0
 80081be:	60f8      	str	r0, [r7, #12]
 80081c0:	60b9      	str	r1, [r7, #8]
 80081c2:	607a      	str	r2, [r7, #4]
 80081c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80081c6:	2300      	movs	r3, #0
 80081c8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d10a      	bne.n	80081e6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80081d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d4:	f383 8811 	msr	BASEPRI, r3
 80081d8:	f3bf 8f6f 	isb	sy
 80081dc:	f3bf 8f4f 	dsb	sy
 80081e0:	623b      	str	r3, [r7, #32]
}
 80081e2:	bf00      	nop
 80081e4:	e7fe      	b.n	80081e4 <xTimerGenericCommand+0x2c>
>>>>>>> Stashed changes

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
<<<<<<< Updated upstream
 8006fc2:	4b1a      	ldr	r3, [pc, #104]	; (800702c <xTimerGenericCommand+0x98>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d02a      	beq.n	8007020 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	2b05      	cmp	r3, #5
 8006fda:	dc18      	bgt.n	800700e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006fdc:	f7ff feb2 	bl	8006d44 <xTaskGetSchedulerState>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	2b02      	cmp	r3, #2
 8006fe4:	d109      	bne.n	8006ffa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006fe6:	4b11      	ldr	r3, [pc, #68]	; (800702c <xTimerGenericCommand+0x98>)
 8006fe8:	6818      	ldr	r0, [r3, #0]
 8006fea:	f107 0110 	add.w	r1, r7, #16
 8006fee:	2300      	movs	r3, #0
 8006ff0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ff2:	f7fe fc77 	bl	80058e4 <xQueueGenericSend>
 8006ff6:	6278      	str	r0, [r7, #36]	; 0x24
 8006ff8:	e012      	b.n	8007020 <xTimerGenericCommand+0x8c>
=======
 80081e6:	4b1a      	ldr	r3, [pc, #104]	; (8008250 <xTimerGenericCommand+0x98>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d02a      	beq.n	8008244 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	2b05      	cmp	r3, #5
 80081fe:	dc18      	bgt.n	8008232 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008200:	f7ff feb2 	bl	8007f68 <xTaskGetSchedulerState>
 8008204:	4603      	mov	r3, r0
 8008206:	2b02      	cmp	r3, #2
 8008208:	d109      	bne.n	800821e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800820a:	4b11      	ldr	r3, [pc, #68]	; (8008250 <xTimerGenericCommand+0x98>)
 800820c:	6818      	ldr	r0, [r3, #0]
 800820e:	f107 0110 	add.w	r1, r7, #16
 8008212:	2300      	movs	r3, #0
 8008214:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008216:	f7fe fc77 	bl	8006b08 <xQueueGenericSend>
 800821a:	6278      	str	r0, [r7, #36]	; 0x24
 800821c:	e012      	b.n	8008244 <xTimerGenericCommand+0x8c>
>>>>>>> Stashed changes
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
<<<<<<< Updated upstream
 8006ffa:	4b0c      	ldr	r3, [pc, #48]	; (800702c <xTimerGenericCommand+0x98>)
 8006ffc:	6818      	ldr	r0, [r3, #0]
 8006ffe:	f107 0110 	add.w	r1, r7, #16
 8007002:	2300      	movs	r3, #0
 8007004:	2200      	movs	r2, #0
 8007006:	f7fe fc6d 	bl	80058e4 <xQueueGenericSend>
 800700a:	6278      	str	r0, [r7, #36]	; 0x24
 800700c:	e008      	b.n	8007020 <xTimerGenericCommand+0x8c>
=======
 800821e:	4b0c      	ldr	r3, [pc, #48]	; (8008250 <xTimerGenericCommand+0x98>)
 8008220:	6818      	ldr	r0, [r3, #0]
 8008222:	f107 0110 	add.w	r1, r7, #16
 8008226:	2300      	movs	r3, #0
 8008228:	2200      	movs	r2, #0
 800822a:	f7fe fc6d 	bl	8006b08 <xQueueGenericSend>
 800822e:	6278      	str	r0, [r7, #36]	; 0x24
 8008230:	e008      	b.n	8008244 <xTimerGenericCommand+0x8c>
>>>>>>> Stashed changes
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
<<<<<<< Updated upstream
 800700e:	4b07      	ldr	r3, [pc, #28]	; (800702c <xTimerGenericCommand+0x98>)
 8007010:	6818      	ldr	r0, [r3, #0]
 8007012:	f107 0110 	add.w	r1, r7, #16
 8007016:	2300      	movs	r3, #0
 8007018:	683a      	ldr	r2, [r7, #0]
 800701a:	f7fe fd61 	bl	8005ae0 <xQueueGenericSendFromISR>
 800701e:	6278      	str	r0, [r7, #36]	; 0x24
=======
 8008232:	4b07      	ldr	r3, [pc, #28]	; (8008250 <xTimerGenericCommand+0x98>)
 8008234:	6818      	ldr	r0, [r3, #0]
 8008236:	f107 0110 	add.w	r1, r7, #16
 800823a:	2300      	movs	r3, #0
 800823c:	683a      	ldr	r2, [r7, #0]
 800823e:	f7fe fd61 	bl	8006d04 <xQueueGenericSendFromISR>
 8008242:	6278      	str	r0, [r7, #36]	; 0x24
>>>>>>> Stashed changes
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
<<<<<<< Updated upstream
 8007020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007022:	4618      	mov	r0, r3
 8007024:	3728      	adds	r7, #40	; 0x28
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}
 800702a:	bf00      	nop
 800702c:	2000102c 	.word	0x2000102c

08007030 <prvProcessExpiredTimer>:
=======
 8008244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008246:	4618      	mov	r0, r3
 8008248:	3728      	adds	r7, #40	; 0x28
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}
 800824e:	bf00      	nop
 8008250:	20000f84 	.word	0x20000f84

08008254 <prvProcessExpiredTimer>:
>>>>>>> Stashed changes
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
<<<<<<< Updated upstream
 8007030:	b580      	push	{r7, lr}
 8007032:	b088      	sub	sp, #32
 8007034:	af02      	add	r7, sp, #8
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800703a:	4b22      	ldr	r3, [pc, #136]	; (80070c4 <prvProcessExpiredTimer+0x94>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	68db      	ldr	r3, [r3, #12]
 8007040:	68db      	ldr	r3, [r3, #12]
 8007042:	617b      	str	r3, [r7, #20]
=======
 8008254:	b580      	push	{r7, lr}
 8008256:	b088      	sub	sp, #32
 8008258:	af02      	add	r7, sp, #8
 800825a:	6078      	str	r0, [r7, #4]
 800825c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800825e:	4b22      	ldr	r3, [pc, #136]	; (80082e8 <prvProcessExpiredTimer+0x94>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	68db      	ldr	r3, [r3, #12]
 8008264:	68db      	ldr	r3, [r3, #12]
 8008266:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
<<<<<<< Updated upstream
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	3304      	adds	r3, #4
 8007048:	4618      	mov	r0, r3
 800704a:	f7fe fae3 	bl	8005614 <uxListRemove>
=======
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	3304      	adds	r3, #4
 800826c:	4618      	mov	r0, r3
 800826e:	f7fe fae3 	bl	8006838 <uxListRemove>
>>>>>>> Stashed changes
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
<<<<<<< Updated upstream
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007054:	f003 0304 	and.w	r3, r3, #4
 8007058:	2b00      	cmp	r3, #0
 800705a:	d022      	beq.n	80070a2 <prvProcessExpiredTimer+0x72>
=======
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008278:	f003 0304 	and.w	r3, r3, #4
 800827c:	2b00      	cmp	r3, #0
 800827e:	d022      	beq.n	80082c6 <prvProcessExpiredTimer+0x72>
>>>>>>> Stashed changes
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
<<<<<<< Updated upstream
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	699a      	ldr	r2, [r3, #24]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	18d1      	adds	r1, r2, r3
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	683a      	ldr	r2, [r7, #0]
 8007068:	6978      	ldr	r0, [r7, #20]
 800706a:	f000 f8d1 	bl	8007210 <prvInsertTimerInActiveList>
 800706e:	4603      	mov	r3, r0
 8007070:	2b00      	cmp	r3, #0
 8007072:	d01f      	beq.n	80070b4 <prvProcessExpiredTimer+0x84>
=======
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	699a      	ldr	r2, [r3, #24]
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	18d1      	adds	r1, r2, r3
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	683a      	ldr	r2, [r7, #0]
 800828c:	6978      	ldr	r0, [r7, #20]
 800828e:	f000 f8d1 	bl	8008434 <prvInsertTimerInActiveList>
 8008292:	4603      	mov	r3, r0
 8008294:	2b00      	cmp	r3, #0
 8008296:	d01f      	beq.n	80082d8 <prvProcessExpiredTimer+0x84>
>>>>>>> Stashed changes
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
<<<<<<< Updated upstream
 8007074:	2300      	movs	r3, #0
 8007076:	9300      	str	r3, [sp, #0]
 8007078:	2300      	movs	r3, #0
 800707a:	687a      	ldr	r2, [r7, #4]
 800707c:	2100      	movs	r1, #0
 800707e:	6978      	ldr	r0, [r7, #20]
 8007080:	f7ff ff88 	bl	8006f94 <xTimerGenericCommand>
 8007084:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d113      	bne.n	80070b4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800708c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007090:	f383 8811 	msr	BASEPRI, r3
 8007094:	f3bf 8f6f 	isb	sy
 8007098:	f3bf 8f4f 	dsb	sy
 800709c:	60fb      	str	r3, [r7, #12]
}
 800709e:	bf00      	nop
 80070a0:	e7fe      	b.n	80070a0 <prvProcessExpiredTimer+0x70>
=======
 8008298:	2300      	movs	r3, #0
 800829a:	9300      	str	r3, [sp, #0]
 800829c:	2300      	movs	r3, #0
 800829e:	687a      	ldr	r2, [r7, #4]
 80082a0:	2100      	movs	r1, #0
 80082a2:	6978      	ldr	r0, [r7, #20]
 80082a4:	f7ff ff88 	bl	80081b8 <xTimerGenericCommand>
 80082a8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d113      	bne.n	80082d8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80082b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082b4:	f383 8811 	msr	BASEPRI, r3
 80082b8:	f3bf 8f6f 	isb	sy
 80082bc:	f3bf 8f4f 	dsb	sy
 80082c0:	60fb      	str	r3, [r7, #12]
}
 80082c2:	bf00      	nop
 80082c4:	e7fe      	b.n	80082c4 <prvProcessExpiredTimer+0x70>
>>>>>>> Stashed changes
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
<<<<<<< Updated upstream
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070a8:	f023 0301 	bic.w	r3, r3, #1
 80070ac:	b2da      	uxtb	r2, r3
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
=======
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80082cc:	f023 0301 	bic.w	r3, r3, #1
 80082d0:	b2da      	uxtb	r2, r3
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
>>>>>>> Stashed changes
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
<<<<<<< Updated upstream
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	6a1b      	ldr	r3, [r3, #32]
 80070b8:	6978      	ldr	r0, [r7, #20]
 80070ba:	4798      	blx	r3
}
 80070bc:	bf00      	nop
 80070be:	3718      	adds	r7, #24
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}
 80070c4:	20001024 	.word	0x20001024

080070c8 <prvTimerTask>:
=======
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	6a1b      	ldr	r3, [r3, #32]
 80082dc:	6978      	ldr	r0, [r7, #20]
 80082de:	4798      	blx	r3
}
 80082e0:	bf00      	nop
 80082e2:	3718      	adds	r7, #24
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}
 80082e8:	20000f7c 	.word	0x20000f7c

080082ec <prvTimerTask>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
<<<<<<< Updated upstream
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b084      	sub	sp, #16
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
=======
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b084      	sub	sp, #16
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
<<<<<<< Updated upstream
 80070d0:	f107 0308 	add.w	r3, r7, #8
 80070d4:	4618      	mov	r0, r3
 80070d6:	f000 f857 	bl	8007188 <prvGetNextExpireTime>
 80070da:	60f8      	str	r0, [r7, #12]
=======
 80082f4:	f107 0308 	add.w	r3, r7, #8
 80082f8:	4618      	mov	r0, r3
 80082fa:	f000 f857 	bl	80083ac <prvGetNextExpireTime>
 80082fe:	60f8      	str	r0, [r7, #12]
>>>>>>> Stashed changes

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
<<<<<<< Updated upstream
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	4619      	mov	r1, r3
 80070e0:	68f8      	ldr	r0, [r7, #12]
 80070e2:	f000 f803 	bl	80070ec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80070e6:	f000 f8d5 	bl	8007294 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80070ea:	e7f1      	b.n	80070d0 <prvTimerTask+0x8>

080070ec <prvProcessTimerOrBlockTask>:
=======
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	4619      	mov	r1, r3
 8008304:	68f8      	ldr	r0, [r7, #12]
 8008306:	f000 f803 	bl	8008310 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800830a:	f000 f8d5 	bl	80084b8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800830e:	e7f1      	b.n	80082f4 <prvTimerTask+0x8>

08008310 <prvProcessTimerOrBlockTask>:
>>>>>>> Stashed changes
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
<<<<<<< Updated upstream
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b084      	sub	sp, #16
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
 80070f4:	6039      	str	r1, [r7, #0]
=======
 8008310:	b580      	push	{r7, lr}
 8008312:	b084      	sub	sp, #16
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
<<<<<<< Updated upstream
 80070f6:	f7ff fa39 	bl	800656c <vTaskSuspendAll>
=======
 800831a:	f7ff fa39 	bl	8007790 <vTaskSuspendAll>
>>>>>>> Stashed changes
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
<<<<<<< Updated upstream
 80070fa:	f107 0308 	add.w	r3, r7, #8
 80070fe:	4618      	mov	r0, r3
 8007100:	f000 f866 	bl	80071d0 <prvSampleTimeNow>
 8007104:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d130      	bne.n	800716e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d10a      	bne.n	8007128 <prvProcessTimerOrBlockTask+0x3c>
 8007112:	687a      	ldr	r2, [r7, #4]
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	429a      	cmp	r2, r3
 8007118:	d806      	bhi.n	8007128 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800711a:	f7ff fa35 	bl	8006588 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800711e:	68f9      	ldr	r1, [r7, #12]
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f7ff ff85 	bl	8007030 <prvProcessExpiredTimer>
=======
 800831e:	f107 0308 	add.w	r3, r7, #8
 8008322:	4618      	mov	r0, r3
 8008324:	f000 f866 	bl	80083f4 <prvSampleTimeNow>
 8008328:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d130      	bne.n	8008392 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d10a      	bne.n	800834c <prvProcessTimerOrBlockTask+0x3c>
 8008336:	687a      	ldr	r2, [r7, #4]
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	429a      	cmp	r2, r3
 800833c:	d806      	bhi.n	800834c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800833e:	f7ff fa35 	bl	80077ac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008342:	68f9      	ldr	r1, [r7, #12]
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f7ff ff85 	bl	8008254 <prvProcessExpiredTimer>
>>>>>>> Stashed changes
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
<<<<<<< Updated upstream
 8007126:	e024      	b.n	8007172 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d008      	beq.n	8007140 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800712e:	4b13      	ldr	r3, [pc, #76]	; (800717c <prvProcessTimerOrBlockTask+0x90>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d101      	bne.n	800713c <prvProcessTimerOrBlockTask+0x50>
 8007138:	2301      	movs	r3, #1
 800713a:	e000      	b.n	800713e <prvProcessTimerOrBlockTask+0x52>
 800713c:	2300      	movs	r3, #0
 800713e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007140:	4b0f      	ldr	r3, [pc, #60]	; (8007180 <prvProcessTimerOrBlockTask+0x94>)
 8007142:	6818      	ldr	r0, [r3, #0]
 8007144:	687a      	ldr	r2, [r7, #4]
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	1ad3      	subs	r3, r2, r3
 800714a:	683a      	ldr	r2, [r7, #0]
 800714c:	4619      	mov	r1, r3
 800714e:	f7fe ff7d 	bl	800604c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007152:	f7ff fa19 	bl	8006588 <xTaskResumeAll>
 8007156:	4603      	mov	r3, r0
 8007158:	2b00      	cmp	r3, #0
 800715a:	d10a      	bne.n	8007172 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800715c:	4b09      	ldr	r3, [pc, #36]	; (8007184 <prvProcessTimerOrBlockTask+0x98>)
 800715e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007162:	601a      	str	r2, [r3, #0]
 8007164:	f3bf 8f4f 	dsb	sy
 8007168:	f3bf 8f6f 	isb	sy
}
 800716c:	e001      	b.n	8007172 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800716e:	f7ff fa0b 	bl	8006588 <xTaskResumeAll>
}
 8007172:	bf00      	nop
 8007174:	3710      	adds	r7, #16
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}
 800717a:	bf00      	nop
 800717c:	20001028 	.word	0x20001028
 8007180:	2000102c 	.word	0x2000102c
 8007184:	e000ed04 	.word	0xe000ed04

08007188 <prvGetNextExpireTime>:
=======
 800834a:	e024      	b.n	8008396 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d008      	beq.n	8008364 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008352:	4b13      	ldr	r3, [pc, #76]	; (80083a0 <prvProcessTimerOrBlockTask+0x90>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d101      	bne.n	8008360 <prvProcessTimerOrBlockTask+0x50>
 800835c:	2301      	movs	r3, #1
 800835e:	e000      	b.n	8008362 <prvProcessTimerOrBlockTask+0x52>
 8008360:	2300      	movs	r3, #0
 8008362:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008364:	4b0f      	ldr	r3, [pc, #60]	; (80083a4 <prvProcessTimerOrBlockTask+0x94>)
 8008366:	6818      	ldr	r0, [r3, #0]
 8008368:	687a      	ldr	r2, [r7, #4]
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	1ad3      	subs	r3, r2, r3
 800836e:	683a      	ldr	r2, [r7, #0]
 8008370:	4619      	mov	r1, r3
 8008372:	f7fe ff7d 	bl	8007270 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008376:	f7ff fa19 	bl	80077ac <xTaskResumeAll>
 800837a:	4603      	mov	r3, r0
 800837c:	2b00      	cmp	r3, #0
 800837e:	d10a      	bne.n	8008396 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008380:	4b09      	ldr	r3, [pc, #36]	; (80083a8 <prvProcessTimerOrBlockTask+0x98>)
 8008382:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008386:	601a      	str	r2, [r3, #0]
 8008388:	f3bf 8f4f 	dsb	sy
 800838c:	f3bf 8f6f 	isb	sy
}
 8008390:	e001      	b.n	8008396 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008392:	f7ff fa0b 	bl	80077ac <xTaskResumeAll>
}
 8008396:	bf00      	nop
 8008398:	3710      	adds	r7, #16
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}
 800839e:	bf00      	nop
 80083a0:	20000f80 	.word	0x20000f80
 80083a4:	20000f84 	.word	0x20000f84
 80083a8:	e000ed04 	.word	0xe000ed04

080083ac <prvGetNextExpireTime>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
<<<<<<< Updated upstream
 8007188:	b480      	push	{r7}
 800718a:	b085      	sub	sp, #20
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
=======
 80083ac:	b480      	push	{r7}
 80083ae:	b085      	sub	sp, #20
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
<<<<<<< Updated upstream
 8007190:	4b0e      	ldr	r3, [pc, #56]	; (80071cc <prvGetNextExpireTime+0x44>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d101      	bne.n	800719e <prvGetNextExpireTime+0x16>
 800719a:	2201      	movs	r2, #1
 800719c:	e000      	b.n	80071a0 <prvGetNextExpireTime+0x18>
 800719e:	2200      	movs	r2, #0
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d105      	bne.n	80071b8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80071ac:	4b07      	ldr	r3, [pc, #28]	; (80071cc <prvGetNextExpireTime+0x44>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	68db      	ldr	r3, [r3, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	60fb      	str	r3, [r7, #12]
 80071b6:	e001      	b.n	80071bc <prvGetNextExpireTime+0x34>
=======
 80083b4:	4b0e      	ldr	r3, [pc, #56]	; (80083f0 <prvGetNextExpireTime+0x44>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d101      	bne.n	80083c2 <prvGetNextExpireTime+0x16>
 80083be:	2201      	movs	r2, #1
 80083c0:	e000      	b.n	80083c4 <prvGetNextExpireTime+0x18>
 80083c2:	2200      	movs	r2, #0
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d105      	bne.n	80083dc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80083d0:	4b07      	ldr	r3, [pc, #28]	; (80083f0 <prvGetNextExpireTime+0x44>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	68db      	ldr	r3, [r3, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	60fb      	str	r3, [r7, #12]
 80083da:	e001      	b.n	80083e0 <prvGetNextExpireTime+0x34>
>>>>>>> Stashed changes
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
<<<<<<< Updated upstream
 80071b8:	2300      	movs	r3, #0
 80071ba:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80071bc:	68fb      	ldr	r3, [r7, #12]
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3714      	adds	r7, #20
 80071c2:	46bd      	mov	sp, r7
 80071c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c8:	4770      	bx	lr
 80071ca:	bf00      	nop
 80071cc:	20001024 	.word	0x20001024

080071d0 <prvSampleTimeNow>:
=======
 80083dc:	2300      	movs	r3, #0
 80083de:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80083e0:	68fb      	ldr	r3, [r7, #12]
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3714      	adds	r7, #20
 80083e6:	46bd      	mov	sp, r7
 80083e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ec:	4770      	bx	lr
 80083ee:	bf00      	nop
 80083f0:	20000f7c 	.word	0x20000f7c

080083f4 <prvSampleTimeNow>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
<<<<<<< Updated upstream
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b084      	sub	sp, #16
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
=======
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b084      	sub	sp, #16
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
<<<<<<< Updated upstream
 80071d8:	f7ff fa74 	bl	80066c4 <xTaskGetTickCount>
 80071dc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80071de:	4b0b      	ldr	r3, [pc, #44]	; (800720c <prvSampleTimeNow+0x3c>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	68fa      	ldr	r2, [r7, #12]
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d205      	bcs.n	80071f4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80071e8:	f000 f936 	bl	8007458 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2201      	movs	r2, #1
 80071f0:	601a      	str	r2, [r3, #0]
 80071f2:	e002      	b.n	80071fa <prvSampleTimeNow+0x2a>
=======
 80083fc:	f7ff fa74 	bl	80078e8 <xTaskGetTickCount>
 8008400:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008402:	4b0b      	ldr	r3, [pc, #44]	; (8008430 <prvSampleTimeNow+0x3c>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	68fa      	ldr	r2, [r7, #12]
 8008408:	429a      	cmp	r2, r3
 800840a:	d205      	bcs.n	8008418 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800840c:	f000 f936 	bl	800867c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2201      	movs	r2, #1
 8008414:	601a      	str	r2, [r3, #0]
 8008416:	e002      	b.n	800841e <prvSampleTimeNow+0x2a>
>>>>>>> Stashed changes
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
<<<<<<< Updated upstream
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2200      	movs	r2, #0
 80071f8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80071fa:	4a04      	ldr	r2, [pc, #16]	; (800720c <prvSampleTimeNow+0x3c>)
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007200:	68fb      	ldr	r3, [r7, #12]
}
 8007202:	4618      	mov	r0, r3
 8007204:	3710      	adds	r7, #16
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}
 800720a:	bf00      	nop
 800720c:	20001034 	.word	0x20001034

08007210 <prvInsertTimerInActiveList>:
=======
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2200      	movs	r2, #0
 800841c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800841e:	4a04      	ldr	r2, [pc, #16]	; (8008430 <prvSampleTimeNow+0x3c>)
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008424:	68fb      	ldr	r3, [r7, #12]
}
 8008426:	4618      	mov	r0, r3
 8008428:	3710      	adds	r7, #16
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}
 800842e:	bf00      	nop
 8008430:	20000f8c 	.word	0x20000f8c

08008434 <prvInsertTimerInActiveList>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
<<<<<<< Updated upstream
 8007210:	b580      	push	{r7, lr}
 8007212:	b086      	sub	sp, #24
 8007214:	af00      	add	r7, sp, #0
 8007216:	60f8      	str	r0, [r7, #12]
 8007218:	60b9      	str	r1, [r7, #8]
 800721a:	607a      	str	r2, [r7, #4]
 800721c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800721e:	2300      	movs	r3, #0
 8007220:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	68ba      	ldr	r2, [r7, #8]
 8007226:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	68fa      	ldr	r2, [r7, #12]
 800722c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800722e:	68ba      	ldr	r2, [r7, #8]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	429a      	cmp	r2, r3
 8007234:	d812      	bhi.n	800725c <prvInsertTimerInActiveList+0x4c>
=======
 8008434:	b580      	push	{r7, lr}
 8008436:	b086      	sub	sp, #24
 8008438:	af00      	add	r7, sp, #0
 800843a:	60f8      	str	r0, [r7, #12]
 800843c:	60b9      	str	r1, [r7, #8]
 800843e:	607a      	str	r2, [r7, #4]
 8008440:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008442:	2300      	movs	r3, #0
 8008444:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	68ba      	ldr	r2, [r7, #8]
 800844a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	68fa      	ldr	r2, [r7, #12]
 8008450:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008452:	68ba      	ldr	r2, [r7, #8]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	429a      	cmp	r2, r3
 8008458:	d812      	bhi.n	8008480 <prvInsertTimerInActiveList+0x4c>
>>>>>>> Stashed changes
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
<<<<<<< Updated upstream
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	1ad2      	subs	r2, r2, r3
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	699b      	ldr	r3, [r3, #24]
 8007240:	429a      	cmp	r2, r3
 8007242:	d302      	bcc.n	800724a <prvInsertTimerInActiveList+0x3a>
=======
 800845a:	687a      	ldr	r2, [r7, #4]
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	1ad2      	subs	r2, r2, r3
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	699b      	ldr	r3, [r3, #24]
 8008464:	429a      	cmp	r2, r3
 8008466:	d302      	bcc.n	800846e <prvInsertTimerInActiveList+0x3a>
>>>>>>> Stashed changes
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
<<<<<<< Updated upstream
 8007244:	2301      	movs	r3, #1
 8007246:	617b      	str	r3, [r7, #20]
 8007248:	e01b      	b.n	8007282 <prvInsertTimerInActiveList+0x72>
=======
 8008468:	2301      	movs	r3, #1
 800846a:	617b      	str	r3, [r7, #20]
 800846c:	e01b      	b.n	80084a6 <prvInsertTimerInActiveList+0x72>
>>>>>>> Stashed changes
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
<<<<<<< Updated upstream
 800724a:	4b10      	ldr	r3, [pc, #64]	; (800728c <prvInsertTimerInActiveList+0x7c>)
 800724c:	681a      	ldr	r2, [r3, #0]
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	3304      	adds	r3, #4
 8007252:	4619      	mov	r1, r3
 8007254:	4610      	mov	r0, r2
 8007256:	f7fe f9a4 	bl	80055a2 <vListInsert>
 800725a:	e012      	b.n	8007282 <prvInsertTimerInActiveList+0x72>
=======
 800846e:	4b10      	ldr	r3, [pc, #64]	; (80084b0 <prvInsertTimerInActiveList+0x7c>)
 8008470:	681a      	ldr	r2, [r3, #0]
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	3304      	adds	r3, #4
 8008476:	4619      	mov	r1, r3
 8008478:	4610      	mov	r0, r2
 800847a:	f7fe f9a4 	bl	80067c6 <vListInsert>
 800847e:	e012      	b.n	80084a6 <prvInsertTimerInActiveList+0x72>
>>>>>>> Stashed changes
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
<<<<<<< Updated upstream
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	429a      	cmp	r2, r3
 8007262:	d206      	bcs.n	8007272 <prvInsertTimerInActiveList+0x62>
 8007264:	68ba      	ldr	r2, [r7, #8]
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	429a      	cmp	r2, r3
 800726a:	d302      	bcc.n	8007272 <prvInsertTimerInActiveList+0x62>
=======
 8008480:	687a      	ldr	r2, [r7, #4]
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	429a      	cmp	r2, r3
 8008486:	d206      	bcs.n	8008496 <prvInsertTimerInActiveList+0x62>
 8008488:	68ba      	ldr	r2, [r7, #8]
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	429a      	cmp	r2, r3
 800848e:	d302      	bcc.n	8008496 <prvInsertTimerInActiveList+0x62>
>>>>>>> Stashed changes
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
<<<<<<< Updated upstream
 800726c:	2301      	movs	r3, #1
 800726e:	617b      	str	r3, [r7, #20]
 8007270:	e007      	b.n	8007282 <prvInsertTimerInActiveList+0x72>
=======
 8008490:	2301      	movs	r3, #1
 8008492:	617b      	str	r3, [r7, #20]
 8008494:	e007      	b.n	80084a6 <prvInsertTimerInActiveList+0x72>
>>>>>>> Stashed changes
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
<<<<<<< Updated upstream
 8007272:	4b07      	ldr	r3, [pc, #28]	; (8007290 <prvInsertTimerInActiveList+0x80>)
 8007274:	681a      	ldr	r2, [r3, #0]
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	3304      	adds	r3, #4
 800727a:	4619      	mov	r1, r3
 800727c:	4610      	mov	r0, r2
 800727e:	f7fe f990 	bl	80055a2 <vListInsert>
=======
 8008496:	4b07      	ldr	r3, [pc, #28]	; (80084b4 <prvInsertTimerInActiveList+0x80>)
 8008498:	681a      	ldr	r2, [r3, #0]
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	3304      	adds	r3, #4
 800849e:	4619      	mov	r1, r3
 80084a0:	4610      	mov	r0, r2
 80084a2:	f7fe f990 	bl	80067c6 <vListInsert>
>>>>>>> Stashed changes
		}
	}

	return xProcessTimerNow;
<<<<<<< Updated upstream
 8007282:	697b      	ldr	r3, [r7, #20]
}
 8007284:	4618      	mov	r0, r3
 8007286:	3718      	adds	r7, #24
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}
 800728c:	20001028 	.word	0x20001028
 8007290:	20001024 	.word	0x20001024

08007294 <prvProcessReceivedCommands>:
=======
 80084a6:	697b      	ldr	r3, [r7, #20]
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3718      	adds	r7, #24
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}
 80084b0:	20000f80 	.word	0x20000f80
 80084b4:	20000f7c 	.word	0x20000f7c

080084b8 <prvProcessReceivedCommands>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
<<<<<<< Updated upstream
 8007294:	b580      	push	{r7, lr}
 8007296:	b08e      	sub	sp, #56	; 0x38
 8007298:	af02      	add	r7, sp, #8
=======
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b08e      	sub	sp, #56	; 0x38
 80084bc:	af02      	add	r7, sp, #8
>>>>>>> Stashed changes
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
<<<<<<< Updated upstream
 800729a:	e0ca      	b.n	8007432 <prvProcessReceivedCommands+0x19e>
=======
 80084be:	e0ca      	b.n	8008656 <prvProcessReceivedCommands+0x19e>
>>>>>>> Stashed changes
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
<<<<<<< Updated upstream
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	da18      	bge.n	80072d4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80072a2:	1d3b      	adds	r3, r7, #4
 80072a4:	3304      	adds	r3, #4
 80072a6:	62fb      	str	r3, [r7, #44]	; 0x2c
=======
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	da18      	bge.n	80084f8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80084c6:	1d3b      	adds	r3, r7, #4
 80084c8:	3304      	adds	r3, #4
 80084ca:	62fb      	str	r3, [r7, #44]	; 0x2c
>>>>>>> Stashed changes

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
<<<<<<< Updated upstream
 80072a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d10a      	bne.n	80072c4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80072ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072b2:	f383 8811 	msr	BASEPRI, r3
 80072b6:	f3bf 8f6f 	isb	sy
 80072ba:	f3bf 8f4f 	dsb	sy
 80072be:	61fb      	str	r3, [r7, #28]
}
 80072c0:	bf00      	nop
 80072c2:	e7fe      	b.n	80072c2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80072c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072ca:	6850      	ldr	r0, [r2, #4]
 80072cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072ce:	6892      	ldr	r2, [r2, #8]
 80072d0:	4611      	mov	r1, r2
 80072d2:	4798      	blx	r3
=======
 80084cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d10a      	bne.n	80084e8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80084d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d6:	f383 8811 	msr	BASEPRI, r3
 80084da:	f3bf 8f6f 	isb	sy
 80084de:	f3bf 8f4f 	dsb	sy
 80084e2:	61fb      	str	r3, [r7, #28]
}
 80084e4:	bf00      	nop
 80084e6:	e7fe      	b.n	80084e6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80084e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084ee:	6850      	ldr	r0, [r2, #4]
 80084f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084f2:	6892      	ldr	r2, [r2, #8]
 80084f4:	4611      	mov	r1, r2
 80084f6:	4798      	blx	r3
>>>>>>> Stashed changes
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
<<<<<<< Updated upstream
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	f2c0 80ab 	blt.w	8007432 <prvProcessReceivedCommands+0x19e>
=======
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	f2c0 80ab 	blt.w	8008656 <prvProcessReceivedCommands+0x19e>
>>>>>>> Stashed changes
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
<<<<<<< Updated upstream
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80072e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072e2:	695b      	ldr	r3, [r3, #20]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d004      	beq.n	80072f2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80072e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ea:	3304      	adds	r3, #4
 80072ec:	4618      	mov	r0, r3
 80072ee:	f7fe f991 	bl	8005614 <uxListRemove>
=======
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008506:	695b      	ldr	r3, [r3, #20]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d004      	beq.n	8008516 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800850c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800850e:	3304      	adds	r3, #4
 8008510:	4618      	mov	r0, r3
 8008512:	f7fe f991 	bl	8006838 <uxListRemove>
>>>>>>> Stashed changes
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
<<<<<<< Updated upstream
 80072f2:	463b      	mov	r3, r7
 80072f4:	4618      	mov	r0, r3
 80072f6:	f7ff ff6b 	bl	80071d0 <prvSampleTimeNow>
 80072fa:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2b09      	cmp	r3, #9
 8007300:	f200 8096 	bhi.w	8007430 <prvProcessReceivedCommands+0x19c>
 8007304:	a201      	add	r2, pc, #4	; (adr r2, 800730c <prvProcessReceivedCommands+0x78>)
 8007306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800730a:	bf00      	nop
 800730c:	08007335 	.word	0x08007335
 8007310:	08007335 	.word	0x08007335
 8007314:	08007335 	.word	0x08007335
 8007318:	080073a9 	.word	0x080073a9
 800731c:	080073bd 	.word	0x080073bd
 8007320:	08007407 	.word	0x08007407
 8007324:	08007335 	.word	0x08007335
 8007328:	08007335 	.word	0x08007335
 800732c:	080073a9 	.word	0x080073a9
 8007330:	080073bd 	.word	0x080073bd
=======
 8008516:	463b      	mov	r3, r7
 8008518:	4618      	mov	r0, r3
 800851a:	f7ff ff6b 	bl	80083f4 <prvSampleTimeNow>
 800851e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2b09      	cmp	r3, #9
 8008524:	f200 8096 	bhi.w	8008654 <prvProcessReceivedCommands+0x19c>
 8008528:	a201      	add	r2, pc, #4	; (adr r2, 8008530 <prvProcessReceivedCommands+0x78>)
 800852a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800852e:	bf00      	nop
 8008530:	08008559 	.word	0x08008559
 8008534:	08008559 	.word	0x08008559
 8008538:	08008559 	.word	0x08008559
 800853c:	080085cd 	.word	0x080085cd
 8008540:	080085e1 	.word	0x080085e1
 8008544:	0800862b 	.word	0x0800862b
 8008548:	08008559 	.word	0x08008559
 800854c:	08008559 	.word	0x08008559
 8008550:	080085cd 	.word	0x080085cd
 8008554:	080085e1 	.word	0x080085e1
>>>>>>> Stashed changes
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
<<<<<<< Updated upstream
 8007334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007336:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800733a:	f043 0301 	orr.w	r3, r3, #1
 800733e:	b2da      	uxtb	r2, r3
 8007340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007342:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007346:	68ba      	ldr	r2, [r7, #8]
 8007348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800734a:	699b      	ldr	r3, [r3, #24]
 800734c:	18d1      	adds	r1, r2, r3
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007352:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007354:	f7ff ff5c 	bl	8007210 <prvInsertTimerInActiveList>
 8007358:	4603      	mov	r3, r0
 800735a:	2b00      	cmp	r3, #0
 800735c:	d069      	beq.n	8007432 <prvProcessReceivedCommands+0x19e>
=======
 8008558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800855a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800855e:	f043 0301 	orr.w	r3, r3, #1
 8008562:	b2da      	uxtb	r2, r3
 8008564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008566:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800856a:	68ba      	ldr	r2, [r7, #8]
 800856c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800856e:	699b      	ldr	r3, [r3, #24]
 8008570:	18d1      	adds	r1, r2, r3
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008576:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008578:	f7ff ff5c 	bl	8008434 <prvInsertTimerInActiveList>
 800857c:	4603      	mov	r3, r0
 800857e:	2b00      	cmp	r3, #0
 8008580:	d069      	beq.n	8008656 <prvProcessReceivedCommands+0x19e>
>>>>>>> Stashed changes
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
<<<<<<< Updated upstream
 800735e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007360:	6a1b      	ldr	r3, [r3, #32]
 8007362:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007364:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007368:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800736c:	f003 0304 	and.w	r3, r3, #4
 8007370:	2b00      	cmp	r3, #0
 8007372:	d05e      	beq.n	8007432 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007374:	68ba      	ldr	r2, [r7, #8]
 8007376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007378:	699b      	ldr	r3, [r3, #24]
 800737a:	441a      	add	r2, r3
 800737c:	2300      	movs	r3, #0
 800737e:	9300      	str	r3, [sp, #0]
 8007380:	2300      	movs	r3, #0
 8007382:	2100      	movs	r1, #0
 8007384:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007386:	f7ff fe05 	bl	8006f94 <xTimerGenericCommand>
 800738a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800738c:	6a3b      	ldr	r3, [r7, #32]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d14f      	bne.n	8007432 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007396:	f383 8811 	msr	BASEPRI, r3
 800739a:	f3bf 8f6f 	isb	sy
 800739e:	f3bf 8f4f 	dsb	sy
 80073a2:	61bb      	str	r3, [r7, #24]
}
 80073a4:	bf00      	nop
 80073a6:	e7fe      	b.n	80073a6 <prvProcessReceivedCommands+0x112>
=======
 8008582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008584:	6a1b      	ldr	r3, [r3, #32]
 8008586:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008588:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800858a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800858c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008590:	f003 0304 	and.w	r3, r3, #4
 8008594:	2b00      	cmp	r3, #0
 8008596:	d05e      	beq.n	8008656 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008598:	68ba      	ldr	r2, [r7, #8]
 800859a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800859c:	699b      	ldr	r3, [r3, #24]
 800859e:	441a      	add	r2, r3
 80085a0:	2300      	movs	r3, #0
 80085a2:	9300      	str	r3, [sp, #0]
 80085a4:	2300      	movs	r3, #0
 80085a6:	2100      	movs	r1, #0
 80085a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085aa:	f7ff fe05 	bl	80081b8 <xTimerGenericCommand>
 80085ae:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80085b0:	6a3b      	ldr	r3, [r7, #32]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d14f      	bne.n	8008656 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80085b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ba:	f383 8811 	msr	BASEPRI, r3
 80085be:	f3bf 8f6f 	isb	sy
 80085c2:	f3bf 8f4f 	dsb	sy
 80085c6:	61bb      	str	r3, [r7, #24]
}
 80085c8:	bf00      	nop
 80085ca:	e7fe      	b.n	80085ca <prvProcessReceivedCommands+0x112>
>>>>>>> Stashed changes
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
<<<<<<< Updated upstream
 80073a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80073ae:	f023 0301 	bic.w	r3, r3, #1
 80073b2:	b2da      	uxtb	r2, r3
 80073b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80073ba:	e03a      	b.n	8007432 <prvProcessReceivedCommands+0x19e>
=======
 80085cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80085d2:	f023 0301 	bic.w	r3, r3, #1
 80085d6:	b2da      	uxtb	r2, r3
 80085d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80085de:	e03a      	b.n	8008656 <prvProcessReceivedCommands+0x19e>
>>>>>>> Stashed changes

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
<<<<<<< Updated upstream
 80073bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80073c2:	f043 0301 	orr.w	r3, r3, #1
 80073c6:	b2da      	uxtb	r2, r3
 80073c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80073ce:	68ba      	ldr	r2, [r7, #8]
 80073d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80073d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d6:	699b      	ldr	r3, [r3, #24]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d10a      	bne.n	80073f2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80073dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e0:	f383 8811 	msr	BASEPRI, r3
 80073e4:	f3bf 8f6f 	isb	sy
 80073e8:	f3bf 8f4f 	dsb	sy
 80073ec:	617b      	str	r3, [r7, #20]
}
 80073ee:	bf00      	nop
 80073f0:	e7fe      	b.n	80073f0 <prvProcessReceivedCommands+0x15c>
=======
 80085e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80085e6:	f043 0301 	orr.w	r3, r3, #1
 80085ea:	b2da      	uxtb	r2, r3
 80085ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80085f2:	68ba      	ldr	r2, [r7, #8]
 80085f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085f6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80085f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085fa:	699b      	ldr	r3, [r3, #24]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d10a      	bne.n	8008616 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008604:	f383 8811 	msr	BASEPRI, r3
 8008608:	f3bf 8f6f 	isb	sy
 800860c:	f3bf 8f4f 	dsb	sy
 8008610:	617b      	str	r3, [r7, #20]
}
 8008612:	bf00      	nop
 8008614:	e7fe      	b.n	8008614 <prvProcessReceivedCommands+0x15c>
>>>>>>> Stashed changes
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
<<<<<<< Updated upstream
 80073f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f4:	699a      	ldr	r2, [r3, #24]
 80073f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f8:	18d1      	adds	r1, r2, r3
 80073fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007400:	f7ff ff06 	bl	8007210 <prvInsertTimerInActiveList>
					break;
 8007404:	e015      	b.n	8007432 <prvProcessReceivedCommands+0x19e>
=======
 8008616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008618:	699a      	ldr	r2, [r3, #24]
 800861a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800861c:	18d1      	adds	r1, r2, r3
 800861e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008622:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008624:	f7ff ff06 	bl	8008434 <prvInsertTimerInActiveList>
					break;
 8008628:	e015      	b.n	8008656 <prvProcessReceivedCommands+0x19e>
>>>>>>> Stashed changes
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
<<<<<<< Updated upstream
 8007406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007408:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800740c:	f003 0302 	and.w	r3, r3, #2
 8007410:	2b00      	cmp	r3, #0
 8007412:	d103      	bne.n	800741c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007414:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007416:	f000 fbdb 	bl	8007bd0 <vPortFree>
 800741a:	e00a      	b.n	8007432 <prvProcessReceivedCommands+0x19e>
=======
 800862a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800862c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008630:	f003 0302 	and.w	r3, r3, #2
 8008634:	2b00      	cmp	r3, #0
 8008636:	d103      	bne.n	8008640 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008638:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800863a:	f000 fbe1 	bl	8008e00 <vPortFree>
 800863e:	e00a      	b.n	8008656 <prvProcessReceivedCommands+0x19e>
>>>>>>> Stashed changes
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
<<<<<<< Updated upstream
 800741c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800741e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007422:	f023 0301 	bic.w	r3, r3, #1
 8007426:	b2da      	uxtb	r2, r3
 8007428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800742a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
=======
 8008640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008642:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008646:	f023 0301 	bic.w	r3, r3, #1
 800864a:	b2da      	uxtb	r2, r3
 800864c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800864e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
>>>>>>> Stashed changes
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
<<<<<<< Updated upstream
 800742e:	e000      	b.n	8007432 <prvProcessReceivedCommands+0x19e>
=======
 8008652:	e000      	b.n	8008656 <prvProcessReceivedCommands+0x19e>
>>>>>>> Stashed changes

				default	:
					/* Don't expect to get here. */
					break;
<<<<<<< Updated upstream
 8007430:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007432:	4b08      	ldr	r3, [pc, #32]	; (8007454 <prvProcessReceivedCommands+0x1c0>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	1d39      	adds	r1, r7, #4
 8007438:	2200      	movs	r2, #0
 800743a:	4618      	mov	r0, r3
 800743c:	f7fe fbec 	bl	8005c18 <xQueueReceive>
 8007440:	4603      	mov	r3, r0
 8007442:	2b00      	cmp	r3, #0
 8007444:	f47f af2a 	bne.w	800729c <prvProcessReceivedCommands+0x8>
=======
 8008654:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008656:	4b08      	ldr	r3, [pc, #32]	; (8008678 <prvProcessReceivedCommands+0x1c0>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	1d39      	adds	r1, r7, #4
 800865c:	2200      	movs	r2, #0
 800865e:	4618      	mov	r0, r3
 8008660:	f7fe fbec 	bl	8006e3c <xQueueReceive>
 8008664:	4603      	mov	r3, r0
 8008666:	2b00      	cmp	r3, #0
 8008668:	f47f af2a 	bne.w	80084c0 <prvProcessReceivedCommands+0x8>
>>>>>>> Stashed changes
			}
		}
	}
}
<<<<<<< Updated upstream
 8007448:	bf00      	nop
 800744a:	bf00      	nop
 800744c:	3730      	adds	r7, #48	; 0x30
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}
 8007452:	bf00      	nop
 8007454:	2000102c 	.word	0x2000102c

08007458 <prvSwitchTimerLists>:
=======
 800866c:	bf00      	nop
 800866e:	bf00      	nop
 8008670:	3730      	adds	r7, #48	; 0x30
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}
 8008676:	bf00      	nop
 8008678:	20000f84 	.word	0x20000f84

0800867c <prvSwitchTimerLists>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
<<<<<<< Updated upstream
 8007458:	b580      	push	{r7, lr}
 800745a:	b088      	sub	sp, #32
 800745c:	af02      	add	r7, sp, #8
=======
 800867c:	b580      	push	{r7, lr}
 800867e:	b088      	sub	sp, #32
 8008680:	af02      	add	r7, sp, #8
>>>>>>> Stashed changes

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
<<<<<<< Updated upstream
 800745e:	e048      	b.n	80074f2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007460:	4b2d      	ldr	r3, [pc, #180]	; (8007518 <prvSwitchTimerLists+0xc0>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	68db      	ldr	r3, [r3, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800746a:	4b2b      	ldr	r3, [pc, #172]	; (8007518 <prvSwitchTimerLists+0xc0>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	68db      	ldr	r3, [r3, #12]
 8007470:	68db      	ldr	r3, [r3, #12]
 8007472:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	3304      	adds	r3, #4
 8007478:	4618      	mov	r0, r3
 800747a:	f7fe f8cb 	bl	8005614 <uxListRemove>
=======
 8008682:	e048      	b.n	8008716 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008684:	4b2d      	ldr	r3, [pc, #180]	; (800873c <prvSwitchTimerLists+0xc0>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	68db      	ldr	r3, [r3, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800868e:	4b2b      	ldr	r3, [pc, #172]	; (800873c <prvSwitchTimerLists+0xc0>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	68db      	ldr	r3, [r3, #12]
 8008694:	68db      	ldr	r3, [r3, #12]
 8008696:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	3304      	adds	r3, #4
 800869c:	4618      	mov	r0, r3
 800869e:	f7fe f8cb 	bl	8006838 <uxListRemove>
>>>>>>> Stashed changes
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
<<<<<<< Updated upstream
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	6a1b      	ldr	r3, [r3, #32]
 8007482:	68f8      	ldr	r0, [r7, #12]
 8007484:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800748c:	f003 0304 	and.w	r3, r3, #4
 8007490:	2b00      	cmp	r3, #0
 8007492:	d02e      	beq.n	80074f2 <prvSwitchTimerLists+0x9a>
=======
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	6a1b      	ldr	r3, [r3, #32]
 80086a6:	68f8      	ldr	r0, [r7, #12]
 80086a8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80086b0:	f003 0304 	and.w	r3, r3, #4
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d02e      	beq.n	8008716 <prvSwitchTimerLists+0x9a>
>>>>>>> Stashed changes
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
<<<<<<< Updated upstream
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	699b      	ldr	r3, [r3, #24]
 8007498:	693a      	ldr	r2, [r7, #16]
 800749a:	4413      	add	r3, r2
 800749c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800749e:	68ba      	ldr	r2, [r7, #8]
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	429a      	cmp	r2, r3
 80074a4:	d90e      	bls.n	80074c4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	68ba      	ldr	r2, [r7, #8]
 80074aa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	68fa      	ldr	r2, [r7, #12]
 80074b0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80074b2:	4b19      	ldr	r3, [pc, #100]	; (8007518 <prvSwitchTimerLists+0xc0>)
 80074b4:	681a      	ldr	r2, [r3, #0]
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	3304      	adds	r3, #4
 80074ba:	4619      	mov	r1, r3
 80074bc:	4610      	mov	r0, r2
 80074be:	f7fe f870 	bl	80055a2 <vListInsert>
 80074c2:	e016      	b.n	80074f2 <prvSwitchTimerLists+0x9a>
=======
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	699b      	ldr	r3, [r3, #24]
 80086bc:	693a      	ldr	r2, [r7, #16]
 80086be:	4413      	add	r3, r2
 80086c0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80086c2:	68ba      	ldr	r2, [r7, #8]
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	429a      	cmp	r2, r3
 80086c8:	d90e      	bls.n	80086e8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	68ba      	ldr	r2, [r7, #8]
 80086ce:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	68fa      	ldr	r2, [r7, #12]
 80086d4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80086d6:	4b19      	ldr	r3, [pc, #100]	; (800873c <prvSwitchTimerLists+0xc0>)
 80086d8:	681a      	ldr	r2, [r3, #0]
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	3304      	adds	r3, #4
 80086de:	4619      	mov	r1, r3
 80086e0:	4610      	mov	r0, r2
 80086e2:	f7fe f870 	bl	80067c6 <vListInsert>
 80086e6:	e016      	b.n	8008716 <prvSwitchTimerLists+0x9a>
>>>>>>> Stashed changes
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
<<<<<<< Updated upstream
 80074c4:	2300      	movs	r3, #0
 80074c6:	9300      	str	r3, [sp, #0]
 80074c8:	2300      	movs	r3, #0
 80074ca:	693a      	ldr	r2, [r7, #16]
 80074cc:	2100      	movs	r1, #0
 80074ce:	68f8      	ldr	r0, [r7, #12]
 80074d0:	f7ff fd60 	bl	8006f94 <xTimerGenericCommand>
 80074d4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d10a      	bne.n	80074f2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80074dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074e0:	f383 8811 	msr	BASEPRI, r3
 80074e4:	f3bf 8f6f 	isb	sy
 80074e8:	f3bf 8f4f 	dsb	sy
 80074ec:	603b      	str	r3, [r7, #0]
}
 80074ee:	bf00      	nop
 80074f0:	e7fe      	b.n	80074f0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80074f2:	4b09      	ldr	r3, [pc, #36]	; (8007518 <prvSwitchTimerLists+0xc0>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d1b1      	bne.n	8007460 <prvSwitchTimerLists+0x8>
=======
 80086e8:	2300      	movs	r3, #0
 80086ea:	9300      	str	r3, [sp, #0]
 80086ec:	2300      	movs	r3, #0
 80086ee:	693a      	ldr	r2, [r7, #16]
 80086f0:	2100      	movs	r1, #0
 80086f2:	68f8      	ldr	r0, [r7, #12]
 80086f4:	f7ff fd60 	bl	80081b8 <xTimerGenericCommand>
 80086f8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d10a      	bne.n	8008716 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008704:	f383 8811 	msr	BASEPRI, r3
 8008708:	f3bf 8f6f 	isb	sy
 800870c:	f3bf 8f4f 	dsb	sy
 8008710:	603b      	str	r3, [r7, #0]
}
 8008712:	bf00      	nop
 8008714:	e7fe      	b.n	8008714 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008716:	4b09      	ldr	r3, [pc, #36]	; (800873c <prvSwitchTimerLists+0xc0>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d1b1      	bne.n	8008684 <prvSwitchTimerLists+0x8>
>>>>>>> Stashed changes
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
<<<<<<< Updated upstream
 80074fc:	4b06      	ldr	r3, [pc, #24]	; (8007518 <prvSwitchTimerLists+0xc0>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007502:	4b06      	ldr	r3, [pc, #24]	; (800751c <prvSwitchTimerLists+0xc4>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4a04      	ldr	r2, [pc, #16]	; (8007518 <prvSwitchTimerLists+0xc0>)
 8007508:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800750a:	4a04      	ldr	r2, [pc, #16]	; (800751c <prvSwitchTimerLists+0xc4>)
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	6013      	str	r3, [r2, #0]
}
 8007510:	bf00      	nop
 8007512:	3718      	adds	r7, #24
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}
 8007518:	20001024 	.word	0x20001024
 800751c:	20001028 	.word	0x20001028

08007520 <prvCheckForValidListAndQueue>:
=======
 8008720:	4b06      	ldr	r3, [pc, #24]	; (800873c <prvSwitchTimerLists+0xc0>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008726:	4b06      	ldr	r3, [pc, #24]	; (8008740 <prvSwitchTimerLists+0xc4>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	4a04      	ldr	r2, [pc, #16]	; (800873c <prvSwitchTimerLists+0xc0>)
 800872c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800872e:	4a04      	ldr	r2, [pc, #16]	; (8008740 <prvSwitchTimerLists+0xc4>)
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	6013      	str	r3, [r2, #0]
}
 8008734:	bf00      	nop
 8008736:	3718      	adds	r7, #24
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}
 800873c:	20000f7c 	.word	0x20000f7c
 8008740:	20000f80 	.word	0x20000f80

08008744 <prvCheckForValidListAndQueue>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
<<<<<<< Updated upstream
 8007520:	b580      	push	{r7, lr}
 8007522:	b082      	sub	sp, #8
 8007524:	af02      	add	r7, sp, #8
=======
 8008744:	b580      	push	{r7, lr}
 8008746:	b082      	sub	sp, #8
 8008748:	af02      	add	r7, sp, #8
>>>>>>> Stashed changes
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
<<<<<<< Updated upstream
 8007526:	f000 f965 	bl	80077f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800752a:	4b15      	ldr	r3, [pc, #84]	; (8007580 <prvCheckForValidListAndQueue+0x60>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d120      	bne.n	8007574 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007532:	4814      	ldr	r0, [pc, #80]	; (8007584 <prvCheckForValidListAndQueue+0x64>)
 8007534:	f7fd ffe4 	bl	8005500 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007538:	4813      	ldr	r0, [pc, #76]	; (8007588 <prvCheckForValidListAndQueue+0x68>)
 800753a:	f7fd ffe1 	bl	8005500 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800753e:	4b13      	ldr	r3, [pc, #76]	; (800758c <prvCheckForValidListAndQueue+0x6c>)
 8007540:	4a10      	ldr	r2, [pc, #64]	; (8007584 <prvCheckForValidListAndQueue+0x64>)
 8007542:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007544:	4b12      	ldr	r3, [pc, #72]	; (8007590 <prvCheckForValidListAndQueue+0x70>)
 8007546:	4a10      	ldr	r2, [pc, #64]	; (8007588 <prvCheckForValidListAndQueue+0x68>)
 8007548:	601a      	str	r2, [r3, #0]
=======
 800874a:	f000 f96b 	bl	8008a24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800874e:	4b15      	ldr	r3, [pc, #84]	; (80087a4 <prvCheckForValidListAndQueue+0x60>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d120      	bne.n	8008798 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008756:	4814      	ldr	r0, [pc, #80]	; (80087a8 <prvCheckForValidListAndQueue+0x64>)
 8008758:	f7fd ffe4 	bl	8006724 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800875c:	4813      	ldr	r0, [pc, #76]	; (80087ac <prvCheckForValidListAndQueue+0x68>)
 800875e:	f7fd ffe1 	bl	8006724 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008762:	4b13      	ldr	r3, [pc, #76]	; (80087b0 <prvCheckForValidListAndQueue+0x6c>)
 8008764:	4a10      	ldr	r2, [pc, #64]	; (80087a8 <prvCheckForValidListAndQueue+0x64>)
 8008766:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008768:	4b12      	ldr	r3, [pc, #72]	; (80087b4 <prvCheckForValidListAndQueue+0x70>)
 800876a:	4a10      	ldr	r2, [pc, #64]	; (80087ac <prvCheckForValidListAndQueue+0x68>)
 800876c:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
<<<<<<< Updated upstream
 800754a:	2300      	movs	r3, #0
 800754c:	9300      	str	r3, [sp, #0]
 800754e:	4b11      	ldr	r3, [pc, #68]	; (8007594 <prvCheckForValidListAndQueue+0x74>)
 8007550:	4a11      	ldr	r2, [pc, #68]	; (8007598 <prvCheckForValidListAndQueue+0x78>)
 8007552:	2110      	movs	r1, #16
 8007554:	200a      	movs	r0, #10
 8007556:	f7fe f8ef 	bl	8005738 <xQueueGenericCreateStatic>
 800755a:	4603      	mov	r3, r0
 800755c:	4a08      	ldr	r2, [pc, #32]	; (8007580 <prvCheckForValidListAndQueue+0x60>)
 800755e:	6013      	str	r3, [r2, #0]
=======
 800876e:	2300      	movs	r3, #0
 8008770:	9300      	str	r3, [sp, #0]
 8008772:	4b11      	ldr	r3, [pc, #68]	; (80087b8 <prvCheckForValidListAndQueue+0x74>)
 8008774:	4a11      	ldr	r2, [pc, #68]	; (80087bc <prvCheckForValidListAndQueue+0x78>)
 8008776:	2110      	movs	r1, #16
 8008778:	200a      	movs	r0, #10
 800877a:	f7fe f8ef 	bl	800695c <xQueueGenericCreateStatic>
 800877e:	4603      	mov	r3, r0
 8008780:	4a08      	ldr	r2, [pc, #32]	; (80087a4 <prvCheckForValidListAndQueue+0x60>)
 8008782:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
<<<<<<< Updated upstream
 8007560:	4b07      	ldr	r3, [pc, #28]	; (8007580 <prvCheckForValidListAndQueue+0x60>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d005      	beq.n	8007574 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007568:	4b05      	ldr	r3, [pc, #20]	; (8007580 <prvCheckForValidListAndQueue+0x60>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	490b      	ldr	r1, [pc, #44]	; (800759c <prvCheckForValidListAndQueue+0x7c>)
 800756e:	4618      	mov	r0, r3
 8007570:	f7fe fd42 	bl	8005ff8 <vQueueAddToRegistry>
=======
 8008784:	4b07      	ldr	r3, [pc, #28]	; (80087a4 <prvCheckForValidListAndQueue+0x60>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d005      	beq.n	8008798 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800878c:	4b05      	ldr	r3, [pc, #20]	; (80087a4 <prvCheckForValidListAndQueue+0x60>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	490b      	ldr	r1, [pc, #44]	; (80087c0 <prvCheckForValidListAndQueue+0x7c>)
 8008792:	4618      	mov	r0, r3
 8008794:	f7fe fd42 	bl	800721c <vQueueAddToRegistry>
>>>>>>> Stashed changes
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
<<<<<<< Updated upstream
 8007574:	f000 f96e 	bl	8007854 <vPortExitCritical>
}
 8007578:	bf00      	nop
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	2000102c 	.word	0x2000102c
 8007584:	20000ffc 	.word	0x20000ffc
 8007588:	20001010 	.word	0x20001010
 800758c:	20001024 	.word	0x20001024
 8007590:	20001028 	.word	0x20001028
 8007594:	200010d8 	.word	0x200010d8
 8007598:	20001038 	.word	0x20001038
 800759c:	08008e80 	.word	0x08008e80

080075a0 <pxPortInitialiseStack>:
=======
 8008798:	f000 f974 	bl	8008a84 <vPortExitCritical>
}
 800879c:	bf00      	nop
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}
 80087a2:	bf00      	nop
 80087a4:	20000f84 	.word	0x20000f84
 80087a8:	20000f54 	.word	0x20000f54
 80087ac:	20000f68 	.word	0x20000f68
 80087b0:	20000f7c 	.word	0x20000f7c
 80087b4:	20000f80 	.word	0x20000f80
 80087b8:	20001030 	.word	0x20001030
 80087bc:	20000f90 	.word	0x20000f90
 80087c0:	0800a1a4 	.word	0x0800a1a4

080087c4 <pxPortInitialiseStack>:
>>>>>>> Stashed changes

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
<<<<<<< Updated upstream
 80075a0:	b480      	push	{r7}
 80075a2:	b085      	sub	sp, #20
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	60f8      	str	r0, [r7, #12]
 80075a8:	60b9      	str	r1, [r7, #8]
 80075aa:	607a      	str	r2, [r7, #4]
=======
 80087c4:	b480      	push	{r7}
 80087c6:	b085      	sub	sp, #20
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	60f8      	str	r0, [r7, #12]
 80087cc:	60b9      	str	r1, [r7, #8]
 80087ce:	607a      	str	r2, [r7, #4]
>>>>>>> Stashed changes
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
<<<<<<< Updated upstream
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	3b04      	subs	r3, #4
 80075b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80075b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	3b04      	subs	r3, #4
 80075be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	f023 0201 	bic.w	r2, r3, #1
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	3b04      	subs	r3, #4
 80075ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80075d0:	4a0c      	ldr	r2, [pc, #48]	; (8007604 <pxPortInitialiseStack+0x64>)
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	3b14      	subs	r3, #20
 80075da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80075dc:	687a      	ldr	r2, [r7, #4]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	601a      	str	r2, [r3, #0]
=======
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	3b04      	subs	r3, #4
 80087d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80087dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	3b04      	subs	r3, #4
 80087e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	f023 0201 	bic.w	r2, r3, #1
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	3b04      	subs	r3, #4
 80087f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80087f4:	4a0c      	ldr	r2, [pc, #48]	; (8008828 <pxPortInitialiseStack+0x64>)
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	3b14      	subs	r3, #20
 80087fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008800:	687a      	ldr	r2, [r7, #4]
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
<<<<<<< Updated upstream
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	3b04      	subs	r3, #4
 80075e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	f06f 0202 	mvn.w	r2, #2
 80075ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	3b20      	subs	r3, #32
 80075f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80075f6:	68fb      	ldr	r3, [r7, #12]
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3714      	adds	r7, #20
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr
 8007604:	08007609 	.word	0x08007609

08007608 <prvTaskExitError>:
=======
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	3b04      	subs	r3, #4
 800880a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	f06f 0202 	mvn.w	r2, #2
 8008812:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	3b20      	subs	r3, #32
 8008818:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800881a:	68fb      	ldr	r3, [r7, #12]
}
 800881c:	4618      	mov	r0, r3
 800881e:	3714      	adds	r7, #20
 8008820:	46bd      	mov	sp, r7
 8008822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008826:	4770      	bx	lr
 8008828:	0800882d 	.word	0x0800882d

0800882c <prvTaskExitError>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
<<<<<<< Updated upstream
 8007608:	b480      	push	{r7}
 800760a:	b085      	sub	sp, #20
 800760c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800760e:	2300      	movs	r3, #0
 8007610:	607b      	str	r3, [r7, #4]
=======
 800882c:	b480      	push	{r7}
 800882e:	b085      	sub	sp, #20
 8008830:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008832:	2300      	movs	r3, #0
 8008834:	607b      	str	r3, [r7, #4]
>>>>>>> Stashed changes
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
<<<<<<< Updated upstream
 8007612:	4b12      	ldr	r3, [pc, #72]	; (800765c <prvTaskExitError+0x54>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800761a:	d00a      	beq.n	8007632 <prvTaskExitError+0x2a>
	__asm volatile
 800761c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007620:	f383 8811 	msr	BASEPRI, r3
 8007624:	f3bf 8f6f 	isb	sy
 8007628:	f3bf 8f4f 	dsb	sy
 800762c:	60fb      	str	r3, [r7, #12]
}
 800762e:	bf00      	nop
 8007630:	e7fe      	b.n	8007630 <prvTaskExitError+0x28>
	__asm volatile
 8007632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007636:	f383 8811 	msr	BASEPRI, r3
 800763a:	f3bf 8f6f 	isb	sy
 800763e:	f3bf 8f4f 	dsb	sy
 8007642:	60bb      	str	r3, [r7, #8]
}
 8007644:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007646:	bf00      	nop
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d0fc      	beq.n	8007648 <prvTaskExitError+0x40>
=======
 8008836:	4b12      	ldr	r3, [pc, #72]	; (8008880 <prvTaskExitError+0x54>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800883e:	d00a      	beq.n	8008856 <prvTaskExitError+0x2a>
	__asm volatile
 8008840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008844:	f383 8811 	msr	BASEPRI, r3
 8008848:	f3bf 8f6f 	isb	sy
 800884c:	f3bf 8f4f 	dsb	sy
 8008850:	60fb      	str	r3, [r7, #12]
}
 8008852:	bf00      	nop
 8008854:	e7fe      	b.n	8008854 <prvTaskExitError+0x28>
	__asm volatile
 8008856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800885a:	f383 8811 	msr	BASEPRI, r3
 800885e:	f3bf 8f6f 	isb	sy
 8008862:	f3bf 8f4f 	dsb	sy
 8008866:	60bb      	str	r3, [r7, #8]
}
 8008868:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800886a:	bf00      	nop
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d0fc      	beq.n	800886c <prvTaskExitError+0x40>
>>>>>>> Stashed changes
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
<<<<<<< Updated upstream
 800764e:	bf00      	nop
 8007650:	bf00      	nop
 8007652:	3714      	adds	r7, #20
 8007654:	46bd      	mov	sp, r7
 8007656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765a:	4770      	bx	lr
 800765c:	2000000c 	.word	0x2000000c

08007660 <SVC_Handler>:
=======
 8008872:	bf00      	nop
 8008874:	bf00      	nop
 8008876:	3714      	adds	r7, #20
 8008878:	46bd      	mov	sp, r7
 800887a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887e:	4770      	bx	lr
 8008880:	2000000c 	.word	0x2000000c
	...

08008890 <SVC_Handler>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
<<<<<<< Updated upstream
 8007660:	4b07      	ldr	r3, [pc, #28]	; (8007680 <pxCurrentTCBConst2>)
 8007662:	6819      	ldr	r1, [r3, #0]
 8007664:	6808      	ldr	r0, [r1, #0]
 8007666:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800766a:	f380 8809 	msr	PSP, r0
 800766e:	f3bf 8f6f 	isb	sy
 8007672:	f04f 0000 	mov.w	r0, #0
 8007676:	f380 8811 	msr	BASEPRI, r0
 800767a:	4770      	bx	lr
 800767c:	f3af 8000 	nop.w

08007680 <pxCurrentTCBConst2>:
 8007680:	20000afc 	.word	0x20000afc
=======
 8008890:	4b07      	ldr	r3, [pc, #28]	; (80088b0 <pxCurrentTCBConst2>)
 8008892:	6819      	ldr	r1, [r3, #0]
 8008894:	6808      	ldr	r0, [r1, #0]
 8008896:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800889a:	f380 8809 	msr	PSP, r0
 800889e:	f3bf 8f6f 	isb	sy
 80088a2:	f04f 0000 	mov.w	r0, #0
 80088a6:	f380 8811 	msr	BASEPRI, r0
 80088aa:	4770      	bx	lr
 80088ac:	f3af 8000 	nop.w

080088b0 <pxCurrentTCBConst2>:
 80088b0:	20000a54 	.word	0x20000a54
>>>>>>> Stashed changes
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
<<<<<<< Updated upstream
 8007684:	bf00      	nop
 8007686:	bf00      	nop

08007688 <prvPortStartFirstTask>:
=======
 80088b4:	bf00      	nop
 80088b6:	bf00      	nop

080088b8 <prvPortStartFirstTask>:
>>>>>>> Stashed changes
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
<<<<<<< Updated upstream
 8007688:	4808      	ldr	r0, [pc, #32]	; (80076ac <prvPortStartFirstTask+0x24>)
 800768a:	6800      	ldr	r0, [r0, #0]
 800768c:	6800      	ldr	r0, [r0, #0]
 800768e:	f380 8808 	msr	MSP, r0
 8007692:	f04f 0000 	mov.w	r0, #0
 8007696:	f380 8814 	msr	CONTROL, r0
 800769a:	b662      	cpsie	i
 800769c:	b661      	cpsie	f
 800769e:	f3bf 8f4f 	dsb	sy
 80076a2:	f3bf 8f6f 	isb	sy
 80076a6:	df00      	svc	0
 80076a8:	bf00      	nop
=======
 80088b8:	4808      	ldr	r0, [pc, #32]	; (80088dc <prvPortStartFirstTask+0x24>)
 80088ba:	6800      	ldr	r0, [r0, #0]
 80088bc:	6800      	ldr	r0, [r0, #0]
 80088be:	f380 8808 	msr	MSP, r0
 80088c2:	f04f 0000 	mov.w	r0, #0
 80088c6:	f380 8814 	msr	CONTROL, r0
 80088ca:	b662      	cpsie	i
 80088cc:	b661      	cpsie	f
 80088ce:	f3bf 8f4f 	dsb	sy
 80088d2:	f3bf 8f6f 	isb	sy
 80088d6:	df00      	svc	0
 80088d8:	bf00      	nop
>>>>>>> Stashed changes
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
<<<<<<< Updated upstream
 80076aa:	bf00      	nop
 80076ac:	e000ed08 	.word	0xe000ed08

080076b0 <xPortStartScheduler>:
=======
 80088da:	bf00      	nop
 80088dc:	e000ed08 	.word	0xe000ed08

080088e0 <xPortStartScheduler>:
>>>>>>> Stashed changes

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
<<<<<<< Updated upstream
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b086      	sub	sp, #24
 80076b4:	af00      	add	r7, sp, #0
=======
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b086      	sub	sp, #24
 80088e4:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
<<<<<<< Updated upstream
 80076b6:	4b46      	ldr	r3, [pc, #280]	; (80077d0 <xPortStartScheduler+0x120>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a46      	ldr	r2, [pc, #280]	; (80077d4 <xPortStartScheduler+0x124>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d10a      	bne.n	80076d6 <xPortStartScheduler+0x26>
	__asm volatile
 80076c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076c4:	f383 8811 	msr	BASEPRI, r3
 80076c8:	f3bf 8f6f 	isb	sy
 80076cc:	f3bf 8f4f 	dsb	sy
 80076d0:	613b      	str	r3, [r7, #16]
}
 80076d2:	bf00      	nop
 80076d4:	e7fe      	b.n	80076d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80076d6:	4b3e      	ldr	r3, [pc, #248]	; (80077d0 <xPortStartScheduler+0x120>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a3f      	ldr	r2, [pc, #252]	; (80077d8 <xPortStartScheduler+0x128>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d10a      	bne.n	80076f6 <xPortStartScheduler+0x46>
	__asm volatile
 80076e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e4:	f383 8811 	msr	BASEPRI, r3
 80076e8:	f3bf 8f6f 	isb	sy
 80076ec:	f3bf 8f4f 	dsb	sy
 80076f0:	60fb      	str	r3, [r7, #12]
}
 80076f2:	bf00      	nop
 80076f4:	e7fe      	b.n	80076f4 <xPortStartScheduler+0x44>
=======
 80088e6:	4b46      	ldr	r3, [pc, #280]	; (8008a00 <xPortStartScheduler+0x120>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4a46      	ldr	r2, [pc, #280]	; (8008a04 <xPortStartScheduler+0x124>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d10a      	bne.n	8008906 <xPortStartScheduler+0x26>
	__asm volatile
 80088f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088f4:	f383 8811 	msr	BASEPRI, r3
 80088f8:	f3bf 8f6f 	isb	sy
 80088fc:	f3bf 8f4f 	dsb	sy
 8008900:	613b      	str	r3, [r7, #16]
}
 8008902:	bf00      	nop
 8008904:	e7fe      	b.n	8008904 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008906:	4b3e      	ldr	r3, [pc, #248]	; (8008a00 <xPortStartScheduler+0x120>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4a3f      	ldr	r2, [pc, #252]	; (8008a08 <xPortStartScheduler+0x128>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d10a      	bne.n	8008926 <xPortStartScheduler+0x46>
	__asm volatile
 8008910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008914:	f383 8811 	msr	BASEPRI, r3
 8008918:	f3bf 8f6f 	isb	sy
 800891c:	f3bf 8f4f 	dsb	sy
 8008920:	60fb      	str	r3, [r7, #12]
}
 8008922:	bf00      	nop
 8008924:	e7fe      	b.n	8008924 <xPortStartScheduler+0x44>
>>>>>>> Stashed changes

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
<<<<<<< Updated upstream
 80076f6:	4b39      	ldr	r3, [pc, #228]	; (80077dc <xPortStartScheduler+0x12c>)
 80076f8:	617b      	str	r3, [r7, #20]
=======
 8008926:	4b39      	ldr	r3, [pc, #228]	; (8008a0c <xPortStartScheduler+0x12c>)
 8008928:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
<<<<<<< Updated upstream
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	b2db      	uxtb	r3, r3
 8007700:	607b      	str	r3, [r7, #4]
=======
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	781b      	ldrb	r3, [r3, #0]
 800892e:	b2db      	uxtb	r3, r3
 8008930:	607b      	str	r3, [r7, #4]
>>>>>>> Stashed changes

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
<<<<<<< Updated upstream
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	22ff      	movs	r2, #255	; 0xff
 8007706:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	781b      	ldrb	r3, [r3, #0]
 800770c:	b2db      	uxtb	r3, r3
 800770e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007710:	78fb      	ldrb	r3, [r7, #3]
 8007712:	b2db      	uxtb	r3, r3
 8007714:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007718:	b2da      	uxtb	r2, r3
 800771a:	4b31      	ldr	r3, [pc, #196]	; (80077e0 <xPortStartScheduler+0x130>)
 800771c:	701a      	strb	r2, [r3, #0]
=======
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	22ff      	movs	r2, #255	; 0xff
 8008936:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	781b      	ldrb	r3, [r3, #0]
 800893c:	b2db      	uxtb	r3, r3
 800893e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008940:	78fb      	ldrb	r3, [r7, #3]
 8008942:	b2db      	uxtb	r3, r3
 8008944:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008948:	b2da      	uxtb	r2, r3
 800894a:	4b31      	ldr	r3, [pc, #196]	; (8008a10 <xPortStartScheduler+0x130>)
 800894c:	701a      	strb	r2, [r3, #0]
>>>>>>> Stashed changes

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
<<<<<<< Updated upstream
 800771e:	4b31      	ldr	r3, [pc, #196]	; (80077e4 <xPortStartScheduler+0x134>)
 8007720:	2207      	movs	r2, #7
 8007722:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007724:	e009      	b.n	800773a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007726:	4b2f      	ldr	r3, [pc, #188]	; (80077e4 <xPortStartScheduler+0x134>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	3b01      	subs	r3, #1
 800772c:	4a2d      	ldr	r2, [pc, #180]	; (80077e4 <xPortStartScheduler+0x134>)
 800772e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007730:	78fb      	ldrb	r3, [r7, #3]
 8007732:	b2db      	uxtb	r3, r3
 8007734:	005b      	lsls	r3, r3, #1
 8007736:	b2db      	uxtb	r3, r3
 8007738:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800773a:	78fb      	ldrb	r3, [r7, #3]
 800773c:	b2db      	uxtb	r3, r3
 800773e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007742:	2b80      	cmp	r3, #128	; 0x80
 8007744:	d0ef      	beq.n	8007726 <xPortStartScheduler+0x76>
=======
 800894e:	4b31      	ldr	r3, [pc, #196]	; (8008a14 <xPortStartScheduler+0x134>)
 8008950:	2207      	movs	r2, #7
 8008952:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008954:	e009      	b.n	800896a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008956:	4b2f      	ldr	r3, [pc, #188]	; (8008a14 <xPortStartScheduler+0x134>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	3b01      	subs	r3, #1
 800895c:	4a2d      	ldr	r2, [pc, #180]	; (8008a14 <xPortStartScheduler+0x134>)
 800895e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008960:	78fb      	ldrb	r3, [r7, #3]
 8008962:	b2db      	uxtb	r3, r3
 8008964:	005b      	lsls	r3, r3, #1
 8008966:	b2db      	uxtb	r3, r3
 8008968:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800896a:	78fb      	ldrb	r3, [r7, #3]
 800896c:	b2db      	uxtb	r3, r3
 800896e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008972:	2b80      	cmp	r3, #128	; 0x80
 8008974:	d0ef      	beq.n	8008956 <xPortStartScheduler+0x76>
>>>>>>> Stashed changes
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
<<<<<<< Updated upstream
 8007746:	4b27      	ldr	r3, [pc, #156]	; (80077e4 <xPortStartScheduler+0x134>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f1c3 0307 	rsb	r3, r3, #7
 800774e:	2b04      	cmp	r3, #4
 8007750:	d00a      	beq.n	8007768 <xPortStartScheduler+0xb8>
	__asm volatile
 8007752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007756:	f383 8811 	msr	BASEPRI, r3
 800775a:	f3bf 8f6f 	isb	sy
 800775e:	f3bf 8f4f 	dsb	sy
 8007762:	60bb      	str	r3, [r7, #8]
}
 8007764:	bf00      	nop
 8007766:	e7fe      	b.n	8007766 <xPortStartScheduler+0xb6>
=======
 8008976:	4b27      	ldr	r3, [pc, #156]	; (8008a14 <xPortStartScheduler+0x134>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f1c3 0307 	rsb	r3, r3, #7
 800897e:	2b04      	cmp	r3, #4
 8008980:	d00a      	beq.n	8008998 <xPortStartScheduler+0xb8>
	__asm volatile
 8008982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008986:	f383 8811 	msr	BASEPRI, r3
 800898a:	f3bf 8f6f 	isb	sy
 800898e:	f3bf 8f4f 	dsb	sy
 8008992:	60bb      	str	r3, [r7, #8]
}
 8008994:	bf00      	nop
 8008996:	e7fe      	b.n	8008996 <xPortStartScheduler+0xb6>
>>>>>>> Stashed changes
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
<<<<<<< Updated upstream
 8007768:	4b1e      	ldr	r3, [pc, #120]	; (80077e4 <xPortStartScheduler+0x134>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	021b      	lsls	r3, r3, #8
 800776e:	4a1d      	ldr	r2, [pc, #116]	; (80077e4 <xPortStartScheduler+0x134>)
 8007770:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007772:	4b1c      	ldr	r3, [pc, #112]	; (80077e4 <xPortStartScheduler+0x134>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800777a:	4a1a      	ldr	r2, [pc, #104]	; (80077e4 <xPortStartScheduler+0x134>)
 800777c:	6013      	str	r3, [r2, #0]
=======
 8008998:	4b1e      	ldr	r3, [pc, #120]	; (8008a14 <xPortStartScheduler+0x134>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	021b      	lsls	r3, r3, #8
 800899e:	4a1d      	ldr	r2, [pc, #116]	; (8008a14 <xPortStartScheduler+0x134>)
 80089a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80089a2:	4b1c      	ldr	r3, [pc, #112]	; (8008a14 <xPortStartScheduler+0x134>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80089aa:	4a1a      	ldr	r2, [pc, #104]	; (8008a14 <xPortStartScheduler+0x134>)
 80089ac:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
<<<<<<< Updated upstream
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	b2da      	uxtb	r2, r3
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	701a      	strb	r2, [r3, #0]
=======
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	b2da      	uxtb	r2, r3
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	701a      	strb	r2, [r3, #0]
>>>>>>> Stashed changes
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
<<<<<<< Updated upstream
 8007786:	4b18      	ldr	r3, [pc, #96]	; (80077e8 <xPortStartScheduler+0x138>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a17      	ldr	r2, [pc, #92]	; (80077e8 <xPortStartScheduler+0x138>)
 800778c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007790:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007792:	4b15      	ldr	r3, [pc, #84]	; (80077e8 <xPortStartScheduler+0x138>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a14      	ldr	r2, [pc, #80]	; (80077e8 <xPortStartScheduler+0x138>)
 8007798:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800779c:	6013      	str	r3, [r2, #0]
=======
 80089b6:	4b18      	ldr	r3, [pc, #96]	; (8008a18 <xPortStartScheduler+0x138>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	4a17      	ldr	r2, [pc, #92]	; (8008a18 <xPortStartScheduler+0x138>)
 80089bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80089c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80089c2:	4b15      	ldr	r3, [pc, #84]	; (8008a18 <xPortStartScheduler+0x138>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	4a14      	ldr	r2, [pc, #80]	; (8008a18 <xPortStartScheduler+0x138>)
 80089c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80089cc:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
<<<<<<< Updated upstream
 800779e:	f000 f8dd 	bl	800795c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80077a2:	4b12      	ldr	r3, [pc, #72]	; (80077ec <xPortStartScheduler+0x13c>)
 80077a4:	2200      	movs	r2, #0
 80077a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80077a8:	f000 f8fc 	bl	80079a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80077ac:	4b10      	ldr	r3, [pc, #64]	; (80077f0 <xPortStartScheduler+0x140>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a0f      	ldr	r2, [pc, #60]	; (80077f0 <xPortStartScheduler+0x140>)
 80077b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80077b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80077b8:	f7ff ff66 	bl	8007688 <prvPortStartFirstTask>
=======
 80089ce:	f000 f8dd 	bl	8008b8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80089d2:	4b12      	ldr	r3, [pc, #72]	; (8008a1c <xPortStartScheduler+0x13c>)
 80089d4:	2200      	movs	r2, #0
 80089d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80089d8:	f000 f8fc 	bl	8008bd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80089dc:	4b10      	ldr	r3, [pc, #64]	; (8008a20 <xPortStartScheduler+0x140>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4a0f      	ldr	r2, [pc, #60]	; (8008a20 <xPortStartScheduler+0x140>)
 80089e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80089e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80089e8:	f7ff ff66 	bl	80088b8 <prvPortStartFirstTask>
>>>>>>> Stashed changes
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
<<<<<<< Updated upstream
 80077bc:	f7ff f84c 	bl	8006858 <vTaskSwitchContext>
	prvTaskExitError();
 80077c0:	f7ff ff22 	bl	8007608 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80077c4:	2300      	movs	r3, #0
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3718      	adds	r7, #24
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}
 80077ce:	bf00      	nop
 80077d0:	e000ed00 	.word	0xe000ed00
 80077d4:	410fc271 	.word	0x410fc271
 80077d8:	410fc270 	.word	0x410fc270
 80077dc:	e000e400 	.word	0xe000e400
 80077e0:	20001128 	.word	0x20001128
 80077e4:	2000112c 	.word	0x2000112c
 80077e8:	e000ed20 	.word	0xe000ed20
 80077ec:	2000000c 	.word	0x2000000c
 80077f0:	e000ef34 	.word	0xe000ef34

080077f4 <vPortEnterCritical>:
=======
 80089ec:	f7ff f846 	bl	8007a7c <vTaskSwitchContext>
	prvTaskExitError();
 80089f0:	f7ff ff1c 	bl	800882c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80089f4:	2300      	movs	r3, #0
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3718      	adds	r7, #24
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}
 80089fe:	bf00      	nop
 8008a00:	e000ed00 	.word	0xe000ed00
 8008a04:	410fc271 	.word	0x410fc271
 8008a08:	410fc270 	.word	0x410fc270
 8008a0c:	e000e400 	.word	0xe000e400
 8008a10:	20001080 	.word	0x20001080
 8008a14:	20001084 	.word	0x20001084
 8008a18:	e000ed20 	.word	0xe000ed20
 8008a1c:	2000000c 	.word	0x2000000c
 8008a20:	e000ef34 	.word	0xe000ef34

08008a24 <vPortEnterCritical>:
>>>>>>> Stashed changes
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
<<<<<<< Updated upstream
 80077f4:	b480      	push	{r7}
 80077f6:	b083      	sub	sp, #12
 80077f8:	af00      	add	r7, sp, #0
	__asm volatile
 80077fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077fe:	f383 8811 	msr	BASEPRI, r3
 8007802:	f3bf 8f6f 	isb	sy
 8007806:	f3bf 8f4f 	dsb	sy
 800780a:	607b      	str	r3, [r7, #4]
}
 800780c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800780e:	4b0f      	ldr	r3, [pc, #60]	; (800784c <vPortEnterCritical+0x58>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	3301      	adds	r3, #1
 8007814:	4a0d      	ldr	r2, [pc, #52]	; (800784c <vPortEnterCritical+0x58>)
 8007816:	6013      	str	r3, [r2, #0]
=======
 8008a24:	b480      	push	{r7}
 8008a26:	b083      	sub	sp, #12
 8008a28:	af00      	add	r7, sp, #0
	__asm volatile
 8008a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a2e:	f383 8811 	msr	BASEPRI, r3
 8008a32:	f3bf 8f6f 	isb	sy
 8008a36:	f3bf 8f4f 	dsb	sy
 8008a3a:	607b      	str	r3, [r7, #4]
}
 8008a3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008a3e:	4b0f      	ldr	r3, [pc, #60]	; (8008a7c <vPortEnterCritical+0x58>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	3301      	adds	r3, #1
 8008a44:	4a0d      	ldr	r2, [pc, #52]	; (8008a7c <vPortEnterCritical+0x58>)
 8008a46:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
<<<<<<< Updated upstream
 8007818:	4b0c      	ldr	r3, [pc, #48]	; (800784c <vPortEnterCritical+0x58>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	2b01      	cmp	r3, #1
 800781e:	d10f      	bne.n	8007840 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007820:	4b0b      	ldr	r3, [pc, #44]	; (8007850 <vPortEnterCritical+0x5c>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	b2db      	uxtb	r3, r3
 8007826:	2b00      	cmp	r3, #0
 8007828:	d00a      	beq.n	8007840 <vPortEnterCritical+0x4c>
	__asm volatile
 800782a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800782e:	f383 8811 	msr	BASEPRI, r3
 8007832:	f3bf 8f6f 	isb	sy
 8007836:	f3bf 8f4f 	dsb	sy
 800783a:	603b      	str	r3, [r7, #0]
}
 800783c:	bf00      	nop
 800783e:	e7fe      	b.n	800783e <vPortEnterCritical+0x4a>
	}
}
 8007840:	bf00      	nop
 8007842:	370c      	adds	r7, #12
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr
 800784c:	2000000c 	.word	0x2000000c
 8007850:	e000ed04 	.word	0xe000ed04

08007854 <vPortExitCritical>:
=======
 8008a48:	4b0c      	ldr	r3, [pc, #48]	; (8008a7c <vPortEnterCritical+0x58>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	2b01      	cmp	r3, #1
 8008a4e:	d10f      	bne.n	8008a70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008a50:	4b0b      	ldr	r3, [pc, #44]	; (8008a80 <vPortEnterCritical+0x5c>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	b2db      	uxtb	r3, r3
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d00a      	beq.n	8008a70 <vPortEnterCritical+0x4c>
	__asm volatile
 8008a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a5e:	f383 8811 	msr	BASEPRI, r3
 8008a62:	f3bf 8f6f 	isb	sy
 8008a66:	f3bf 8f4f 	dsb	sy
 8008a6a:	603b      	str	r3, [r7, #0]
}
 8008a6c:	bf00      	nop
 8008a6e:	e7fe      	b.n	8008a6e <vPortEnterCritical+0x4a>
	}
}
 8008a70:	bf00      	nop
 8008a72:	370c      	adds	r7, #12
 8008a74:	46bd      	mov	sp, r7
 8008a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7a:	4770      	bx	lr
 8008a7c:	2000000c 	.word	0x2000000c
 8008a80:	e000ed04 	.word	0xe000ed04

08008a84 <vPortExitCritical>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
<<<<<<< Updated upstream
 8007854:	b480      	push	{r7}
 8007856:	b083      	sub	sp, #12
 8007858:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800785a:	4b12      	ldr	r3, [pc, #72]	; (80078a4 <vPortExitCritical+0x50>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d10a      	bne.n	8007878 <vPortExitCritical+0x24>
	__asm volatile
 8007862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007866:	f383 8811 	msr	BASEPRI, r3
 800786a:	f3bf 8f6f 	isb	sy
 800786e:	f3bf 8f4f 	dsb	sy
 8007872:	607b      	str	r3, [r7, #4]
}
 8007874:	bf00      	nop
 8007876:	e7fe      	b.n	8007876 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007878:	4b0a      	ldr	r3, [pc, #40]	; (80078a4 <vPortExitCritical+0x50>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	3b01      	subs	r3, #1
 800787e:	4a09      	ldr	r2, [pc, #36]	; (80078a4 <vPortExitCritical+0x50>)
 8007880:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007882:	4b08      	ldr	r3, [pc, #32]	; (80078a4 <vPortExitCritical+0x50>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d105      	bne.n	8007896 <vPortExitCritical+0x42>
 800788a:	2300      	movs	r3, #0
 800788c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	f383 8811 	msr	BASEPRI, r3
}
 8007894:	bf00      	nop
=======
 8008a84:	b480      	push	{r7}
 8008a86:	b083      	sub	sp, #12
 8008a88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008a8a:	4b12      	ldr	r3, [pc, #72]	; (8008ad4 <vPortExitCritical+0x50>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d10a      	bne.n	8008aa8 <vPortExitCritical+0x24>
	__asm volatile
 8008a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a96:	f383 8811 	msr	BASEPRI, r3
 8008a9a:	f3bf 8f6f 	isb	sy
 8008a9e:	f3bf 8f4f 	dsb	sy
 8008aa2:	607b      	str	r3, [r7, #4]
}
 8008aa4:	bf00      	nop
 8008aa6:	e7fe      	b.n	8008aa6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008aa8:	4b0a      	ldr	r3, [pc, #40]	; (8008ad4 <vPortExitCritical+0x50>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	3b01      	subs	r3, #1
 8008aae:	4a09      	ldr	r2, [pc, #36]	; (8008ad4 <vPortExitCritical+0x50>)
 8008ab0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008ab2:	4b08      	ldr	r3, [pc, #32]	; (8008ad4 <vPortExitCritical+0x50>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d105      	bne.n	8008ac6 <vPortExitCritical+0x42>
 8008aba:	2300      	movs	r3, #0
 8008abc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	f383 8811 	msr	BASEPRI, r3
}
 8008ac4:	bf00      	nop
>>>>>>> Stashed changes
	{
		portENABLE_INTERRUPTS();
	}
}
<<<<<<< Updated upstream
 8007896:	bf00      	nop
 8007898:	370c      	adds	r7, #12
 800789a:	46bd      	mov	sp, r7
 800789c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a0:	4770      	bx	lr
 80078a2:	bf00      	nop
 80078a4:	2000000c 	.word	0x2000000c
	...

080078b0 <PendSV_Handler>:
=======
 8008ac6:	bf00      	nop
 8008ac8:	370c      	adds	r7, #12
 8008aca:	46bd      	mov	sp, r7
 8008acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad0:	4770      	bx	lr
 8008ad2:	bf00      	nop
 8008ad4:	2000000c 	.word	0x2000000c
	...

08008ae0 <PendSV_Handler>:
>>>>>>> Stashed changes

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
<<<<<<< Updated upstream
 80078b0:	f3ef 8009 	mrs	r0, PSP
 80078b4:	f3bf 8f6f 	isb	sy
 80078b8:	4b15      	ldr	r3, [pc, #84]	; (8007910 <pxCurrentTCBConst>)
 80078ba:	681a      	ldr	r2, [r3, #0]
 80078bc:	f01e 0f10 	tst.w	lr, #16
 80078c0:	bf08      	it	eq
 80078c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80078c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078ca:	6010      	str	r0, [r2, #0]
 80078cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80078d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80078d4:	f380 8811 	msr	BASEPRI, r0
 80078d8:	f3bf 8f4f 	dsb	sy
 80078dc:	f3bf 8f6f 	isb	sy
 80078e0:	f7fe ffba 	bl	8006858 <vTaskSwitchContext>
 80078e4:	f04f 0000 	mov.w	r0, #0
 80078e8:	f380 8811 	msr	BASEPRI, r0
 80078ec:	bc09      	pop	{r0, r3}
 80078ee:	6819      	ldr	r1, [r3, #0]
 80078f0:	6808      	ldr	r0, [r1, #0]
 80078f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078f6:	f01e 0f10 	tst.w	lr, #16
 80078fa:	bf08      	it	eq
 80078fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007900:	f380 8809 	msr	PSP, r0
 8007904:	f3bf 8f6f 	isb	sy
 8007908:	4770      	bx	lr
 800790a:	bf00      	nop
 800790c:	f3af 8000 	nop.w

08007910 <pxCurrentTCBConst>:
 8007910:	20000afc 	.word	0x20000afc
=======
 8008ae0:	f3ef 8009 	mrs	r0, PSP
 8008ae4:	f3bf 8f6f 	isb	sy
 8008ae8:	4b15      	ldr	r3, [pc, #84]	; (8008b40 <pxCurrentTCBConst>)
 8008aea:	681a      	ldr	r2, [r3, #0]
 8008aec:	f01e 0f10 	tst.w	lr, #16
 8008af0:	bf08      	it	eq
 8008af2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008af6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008afa:	6010      	str	r0, [r2, #0]
 8008afc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008b00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008b04:	f380 8811 	msr	BASEPRI, r0
 8008b08:	f3bf 8f4f 	dsb	sy
 8008b0c:	f3bf 8f6f 	isb	sy
 8008b10:	f7fe ffb4 	bl	8007a7c <vTaskSwitchContext>
 8008b14:	f04f 0000 	mov.w	r0, #0
 8008b18:	f380 8811 	msr	BASEPRI, r0
 8008b1c:	bc09      	pop	{r0, r3}
 8008b1e:	6819      	ldr	r1, [r3, #0]
 8008b20:	6808      	ldr	r0, [r1, #0]
 8008b22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b26:	f01e 0f10 	tst.w	lr, #16
 8008b2a:	bf08      	it	eq
 8008b2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008b30:	f380 8809 	msr	PSP, r0
 8008b34:	f3bf 8f6f 	isb	sy
 8008b38:	4770      	bx	lr
 8008b3a:	bf00      	nop
 8008b3c:	f3af 8000 	nop.w

08008b40 <pxCurrentTCBConst>:
 8008b40:	20000a54 	.word	0x20000a54
>>>>>>> Stashed changes
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
<<<<<<< Updated upstream
 8007914:	bf00      	nop
 8007916:	bf00      	nop

08007918 <xPortSysTickHandler>:
=======
 8008b44:	bf00      	nop
 8008b46:	bf00      	nop

08008b48 <xPortSysTickHandler>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
<<<<<<< Updated upstream
 8007918:	b580      	push	{r7, lr}
 800791a:	b082      	sub	sp, #8
 800791c:	af00      	add	r7, sp, #0
	__asm volatile
 800791e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007922:	f383 8811 	msr	BASEPRI, r3
 8007926:	f3bf 8f6f 	isb	sy
 800792a:	f3bf 8f4f 	dsb	sy
 800792e:	607b      	str	r3, [r7, #4]
}
 8007930:	bf00      	nop
=======
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b082      	sub	sp, #8
 8008b4c:	af00      	add	r7, sp, #0
	__asm volatile
 8008b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b52:	f383 8811 	msr	BASEPRI, r3
 8008b56:	f3bf 8f6f 	isb	sy
 8008b5a:	f3bf 8f4f 	dsb	sy
 8008b5e:	607b      	str	r3, [r7, #4]
}
 8008b60:	bf00      	nop
>>>>>>> Stashed changes
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
<<<<<<< Updated upstream
 8007932:	f7fe fed7 	bl	80066e4 <xTaskIncrementTick>
 8007936:	4603      	mov	r3, r0
 8007938:	2b00      	cmp	r3, #0
 800793a:	d003      	beq.n	8007944 <xPortSysTickHandler+0x2c>
=======
 8008b62:	f7fe fed1 	bl	8007908 <xTaskIncrementTick>
 8008b66:	4603      	mov	r3, r0
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d003      	beq.n	8008b74 <xPortSysTickHandler+0x2c>
>>>>>>> Stashed changes
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
<<<<<<< Updated upstream
 800793c:	4b06      	ldr	r3, [pc, #24]	; (8007958 <xPortSysTickHandler+0x40>)
 800793e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007942:	601a      	str	r2, [r3, #0]
 8007944:	2300      	movs	r3, #0
 8007946:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	f383 8811 	msr	BASEPRI, r3
}
 800794e:	bf00      	nop
=======
 8008b6c:	4b06      	ldr	r3, [pc, #24]	; (8008b88 <xPortSysTickHandler+0x40>)
 8008b6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b72:	601a      	str	r2, [r3, #0]
 8008b74:	2300      	movs	r3, #0
 8008b76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	f383 8811 	msr	BASEPRI, r3
}
 8008b7e:	bf00      	nop
>>>>>>> Stashed changes
		}
	}
	portENABLE_INTERRUPTS();
}
<<<<<<< Updated upstream
 8007950:	bf00      	nop
 8007952:	3708      	adds	r7, #8
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}
 8007958:	e000ed04 	.word	0xe000ed04

0800795c <vPortSetupTimerInterrupt>:
=======
 8008b80:	bf00      	nop
 8008b82:	3708      	adds	r7, #8
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}
 8008b88:	e000ed04 	.word	0xe000ed04

08008b8c <vPortSetupTimerInterrupt>:
>>>>>>> Stashed changes
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
<<<<<<< Updated upstream
 800795c:	b480      	push	{r7}
 800795e:	af00      	add	r7, sp, #0
=======
 8008b8c:	b480      	push	{r7}
 8008b8e:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
<<<<<<< Updated upstream
 8007960:	4b0b      	ldr	r3, [pc, #44]	; (8007990 <vPortSetupTimerInterrupt+0x34>)
 8007962:	2200      	movs	r2, #0
 8007964:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007966:	4b0b      	ldr	r3, [pc, #44]	; (8007994 <vPortSetupTimerInterrupt+0x38>)
 8007968:	2200      	movs	r2, #0
 800796a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800796c:	4b0a      	ldr	r3, [pc, #40]	; (8007998 <vPortSetupTimerInterrupt+0x3c>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a0a      	ldr	r2, [pc, #40]	; (800799c <vPortSetupTimerInterrupt+0x40>)
 8007972:	fba2 2303 	umull	r2, r3, r2, r3
 8007976:	099b      	lsrs	r3, r3, #6
 8007978:	4a09      	ldr	r2, [pc, #36]	; (80079a0 <vPortSetupTimerInterrupt+0x44>)
 800797a:	3b01      	subs	r3, #1
 800797c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800797e:	4b04      	ldr	r3, [pc, #16]	; (8007990 <vPortSetupTimerInterrupt+0x34>)
 8007980:	2207      	movs	r2, #7
 8007982:	601a      	str	r2, [r3, #0]
}
 8007984:	bf00      	nop
 8007986:	46bd      	mov	sp, r7
 8007988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798c:	4770      	bx	lr
 800798e:	bf00      	nop
 8007990:	e000e010 	.word	0xe000e010
 8007994:	e000e018 	.word	0xe000e018
 8007998:	20000000 	.word	0x20000000
 800799c:	10624dd3 	.word	0x10624dd3
 80079a0:	e000e014 	.word	0xe000e014

080079a4 <vPortEnableVFP>:
=======
 8008b90:	4b0b      	ldr	r3, [pc, #44]	; (8008bc0 <vPortSetupTimerInterrupt+0x34>)
 8008b92:	2200      	movs	r2, #0
 8008b94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008b96:	4b0b      	ldr	r3, [pc, #44]	; (8008bc4 <vPortSetupTimerInterrupt+0x38>)
 8008b98:	2200      	movs	r2, #0
 8008b9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008b9c:	4b0a      	ldr	r3, [pc, #40]	; (8008bc8 <vPortSetupTimerInterrupt+0x3c>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4a0a      	ldr	r2, [pc, #40]	; (8008bcc <vPortSetupTimerInterrupt+0x40>)
 8008ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ba6:	099b      	lsrs	r3, r3, #6
 8008ba8:	4a09      	ldr	r2, [pc, #36]	; (8008bd0 <vPortSetupTimerInterrupt+0x44>)
 8008baa:	3b01      	subs	r3, #1
 8008bac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008bae:	4b04      	ldr	r3, [pc, #16]	; (8008bc0 <vPortSetupTimerInterrupt+0x34>)
 8008bb0:	2207      	movs	r2, #7
 8008bb2:	601a      	str	r2, [r3, #0]
}
 8008bb4:	bf00      	nop
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbc:	4770      	bx	lr
 8008bbe:	bf00      	nop
 8008bc0:	e000e010 	.word	0xe000e010
 8008bc4:	e000e018 	.word	0xe000e018
 8008bc8:	20000000 	.word	0x20000000
 8008bcc:	10624dd3 	.word	0x10624dd3
 8008bd0:	e000e014 	.word	0xe000e014

08008bd4 <vPortEnableVFP>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
<<<<<<< Updated upstream
 80079a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80079b4 <vPortEnableVFP+0x10>
 80079a8:	6801      	ldr	r1, [r0, #0]
 80079aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80079ae:	6001      	str	r1, [r0, #0]
 80079b0:	4770      	bx	lr
=======
 8008bd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008be4 <vPortEnableVFP+0x10>
 8008bd8:	6801      	ldr	r1, [r0, #0]
 8008bda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008bde:	6001      	str	r1, [r0, #0]
 8008be0:	4770      	bx	lr
>>>>>>> Stashed changes
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
<<<<<<< Updated upstream
 80079b2:	bf00      	nop
 80079b4:	e000ed88 	.word	0xe000ed88

080079b8 <vPortValidateInterruptPriority>:
=======
 8008be2:	bf00      	nop
 8008be4:	e000ed88 	.word	0xe000ed88

08008be8 <vPortValidateInterruptPriority>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
<<<<<<< Updated upstream
 80079b8:	b480      	push	{r7}
 80079ba:	b085      	sub	sp, #20
 80079bc:	af00      	add	r7, sp, #0
=======
 8008be8:	b480      	push	{r7}
 8008bea:	b085      	sub	sp, #20
 8008bec:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
<<<<<<< Updated upstream
 80079be:	f3ef 8305 	mrs	r3, IPSR
 80079c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2b0f      	cmp	r3, #15
 80079c8:	d914      	bls.n	80079f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80079ca:	4a17      	ldr	r2, [pc, #92]	; (8007a28 <vPortValidateInterruptPriority+0x70>)
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	4413      	add	r3, r2
 80079d0:	781b      	ldrb	r3, [r3, #0]
 80079d2:	72fb      	strb	r3, [r7, #11]
=======
 8008bee:	f3ef 8305 	mrs	r3, IPSR
 8008bf2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	2b0f      	cmp	r3, #15
 8008bf8:	d914      	bls.n	8008c24 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008bfa:	4a17      	ldr	r2, [pc, #92]	; (8008c58 <vPortValidateInterruptPriority+0x70>)
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	4413      	add	r3, r2
 8008c00:	781b      	ldrb	r3, [r3, #0]
 8008c02:	72fb      	strb	r3, [r7, #11]
>>>>>>> Stashed changes
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
<<<<<<< Updated upstream
 80079d4:	4b15      	ldr	r3, [pc, #84]	; (8007a2c <vPortValidateInterruptPriority+0x74>)
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	7afa      	ldrb	r2, [r7, #11]
 80079da:	429a      	cmp	r2, r3
 80079dc:	d20a      	bcs.n	80079f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80079de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e2:	f383 8811 	msr	BASEPRI, r3
 80079e6:	f3bf 8f6f 	isb	sy
 80079ea:	f3bf 8f4f 	dsb	sy
 80079ee:	607b      	str	r3, [r7, #4]
}
 80079f0:	bf00      	nop
 80079f2:	e7fe      	b.n	80079f2 <vPortValidateInterruptPriority+0x3a>
=======
 8008c04:	4b15      	ldr	r3, [pc, #84]	; (8008c5c <vPortValidateInterruptPriority+0x74>)
 8008c06:	781b      	ldrb	r3, [r3, #0]
 8008c08:	7afa      	ldrb	r2, [r7, #11]
 8008c0a:	429a      	cmp	r2, r3
 8008c0c:	d20a      	bcs.n	8008c24 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c12:	f383 8811 	msr	BASEPRI, r3
 8008c16:	f3bf 8f6f 	isb	sy
 8008c1a:	f3bf 8f4f 	dsb	sy
 8008c1e:	607b      	str	r3, [r7, #4]
}
 8008c20:	bf00      	nop
 8008c22:	e7fe      	b.n	8008c22 <vPortValidateInterruptPriority+0x3a>
>>>>>>> Stashed changes
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
<<<<<<< Updated upstream
 80079f4:	4b0e      	ldr	r3, [pc, #56]	; (8007a30 <vPortValidateInterruptPriority+0x78>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80079fc:	4b0d      	ldr	r3, [pc, #52]	; (8007a34 <vPortValidateInterruptPriority+0x7c>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d90a      	bls.n	8007a1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a08:	f383 8811 	msr	BASEPRI, r3
 8007a0c:	f3bf 8f6f 	isb	sy
 8007a10:	f3bf 8f4f 	dsb	sy
 8007a14:	603b      	str	r3, [r7, #0]
}
 8007a16:	bf00      	nop
 8007a18:	e7fe      	b.n	8007a18 <vPortValidateInterruptPriority+0x60>
	}
 8007a1a:	bf00      	nop
 8007a1c:	3714      	adds	r7, #20
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a24:	4770      	bx	lr
 8007a26:	bf00      	nop
 8007a28:	e000e3f0 	.word	0xe000e3f0
 8007a2c:	20001128 	.word	0x20001128
 8007a30:	e000ed0c 	.word	0xe000ed0c
 8007a34:	2000112c 	.word	0x2000112c

08007a38 <pvPortMalloc>:
=======
 8008c24:	4b0e      	ldr	r3, [pc, #56]	; (8008c60 <vPortValidateInterruptPriority+0x78>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008c2c:	4b0d      	ldr	r3, [pc, #52]	; (8008c64 <vPortValidateInterruptPriority+0x7c>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d90a      	bls.n	8008c4a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c38:	f383 8811 	msr	BASEPRI, r3
 8008c3c:	f3bf 8f6f 	isb	sy
 8008c40:	f3bf 8f4f 	dsb	sy
 8008c44:	603b      	str	r3, [r7, #0]
}
 8008c46:	bf00      	nop
 8008c48:	e7fe      	b.n	8008c48 <vPortValidateInterruptPriority+0x60>
	}
 8008c4a:	bf00      	nop
 8008c4c:	3714      	adds	r7, #20
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c54:	4770      	bx	lr
 8008c56:	bf00      	nop
 8008c58:	e000e3f0 	.word	0xe000e3f0
 8008c5c:	20001080 	.word	0x20001080
 8008c60:	e000ed0c 	.word	0xe000ed0c
 8008c64:	20001084 	.word	0x20001084

08008c68 <pvPortMalloc>:
>>>>>>> Stashed changes
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
<<<<<<< Updated upstream
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b08a      	sub	sp, #40	; 0x28
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007a40:	2300      	movs	r3, #0
 8007a42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007a44:	f7fe fd92 	bl	800656c <vTaskSuspendAll>
=======
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b08a      	sub	sp, #40	; 0x28
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008c70:	2300      	movs	r3, #0
 8008c72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008c74:	f7fe fd8c 	bl	8007790 <vTaskSuspendAll>
>>>>>>> Stashed changes
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
<<<<<<< Updated upstream
 8007a48:	4b5b      	ldr	r3, [pc, #364]	; (8007bb8 <pvPortMalloc+0x180>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d101      	bne.n	8007a54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007a50:	f000 f920 	bl	8007c94 <prvHeapInit>
=======
 8008c78:	4b5b      	ldr	r3, [pc, #364]	; (8008de8 <pvPortMalloc+0x180>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d101      	bne.n	8008c84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008c80:	f000 f920 	bl	8008ec4 <prvHeapInit>
>>>>>>> Stashed changes

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
<<<<<<< Updated upstream
 8007a54:	4b59      	ldr	r3, [pc, #356]	; (8007bbc <pvPortMalloc+0x184>)
 8007a56:	681a      	ldr	r2, [r3, #0]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	4013      	ands	r3, r2
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	f040 8093 	bne.w	8007b88 <pvPortMalloc+0x150>
=======
 8008c84:	4b59      	ldr	r3, [pc, #356]	; (8008dec <pvPortMalloc+0x184>)
 8008c86:	681a      	ldr	r2, [r3, #0]
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	4013      	ands	r3, r2
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	f040 8093 	bne.w	8008db8 <pvPortMalloc+0x150>
>>>>>>> Stashed changes
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
<<<<<<< Updated upstream
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d01d      	beq.n	8007aa4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007a68:	2208      	movs	r2, #8
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	4413      	add	r3, r2
 8007a6e:	607b      	str	r3, [r7, #4]
=======
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d01d      	beq.n	8008cd4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008c98:	2208      	movs	r2, #8
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	4413      	add	r3, r2
 8008c9e:	607b      	str	r3, [r7, #4]
>>>>>>> Stashed changes

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
<<<<<<< Updated upstream
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f003 0307 	and.w	r3, r3, #7
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d014      	beq.n	8007aa4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f023 0307 	bic.w	r3, r3, #7
 8007a80:	3308      	adds	r3, #8
 8007a82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f003 0307 	and.w	r3, r3, #7
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d00a      	beq.n	8007aa4 <pvPortMalloc+0x6c>
	__asm volatile
 8007a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a92:	f383 8811 	msr	BASEPRI, r3
 8007a96:	f3bf 8f6f 	isb	sy
 8007a9a:	f3bf 8f4f 	dsb	sy
 8007a9e:	617b      	str	r3, [r7, #20]
}
 8007aa0:	bf00      	nop
 8007aa2:	e7fe      	b.n	8007aa2 <pvPortMalloc+0x6a>
=======
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f003 0307 	and.w	r3, r3, #7
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d014      	beq.n	8008cd4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f023 0307 	bic.w	r3, r3, #7
 8008cb0:	3308      	adds	r3, #8
 8008cb2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f003 0307 	and.w	r3, r3, #7
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d00a      	beq.n	8008cd4 <pvPortMalloc+0x6c>
	__asm volatile
 8008cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cc2:	f383 8811 	msr	BASEPRI, r3
 8008cc6:	f3bf 8f6f 	isb	sy
 8008cca:	f3bf 8f4f 	dsb	sy
 8008cce:	617b      	str	r3, [r7, #20]
}
 8008cd0:	bf00      	nop
 8008cd2:	e7fe      	b.n	8008cd2 <pvPortMalloc+0x6a>
>>>>>>> Stashed changes
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
<<<<<<< Updated upstream
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d06e      	beq.n	8007b88 <pvPortMalloc+0x150>
 8007aaa:	4b45      	ldr	r3, [pc, #276]	; (8007bc0 <pvPortMalloc+0x188>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	687a      	ldr	r2, [r7, #4]
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	d869      	bhi.n	8007b88 <pvPortMalloc+0x150>
=======
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d06e      	beq.n	8008db8 <pvPortMalloc+0x150>
 8008cda:	4b45      	ldr	r3, [pc, #276]	; (8008df0 <pvPortMalloc+0x188>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	687a      	ldr	r2, [r7, #4]
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	d869      	bhi.n	8008db8 <pvPortMalloc+0x150>
>>>>>>> Stashed changes
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
<<<<<<< Updated upstream
 8007ab4:	4b43      	ldr	r3, [pc, #268]	; (8007bc4 <pvPortMalloc+0x18c>)
 8007ab6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007ab8:	4b42      	ldr	r3, [pc, #264]	; (8007bc4 <pvPortMalloc+0x18c>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007abe:	e004      	b.n	8007aca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	429a      	cmp	r2, r3
 8007ad2:	d903      	bls.n	8007adc <pvPortMalloc+0xa4>
 8007ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d1f1      	bne.n	8007ac0 <pvPortMalloc+0x88>
=======
 8008ce4:	4b43      	ldr	r3, [pc, #268]	; (8008df4 <pvPortMalloc+0x18c>)
 8008ce6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008ce8:	4b42      	ldr	r3, [pc, #264]	; (8008df4 <pvPortMalloc+0x18c>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008cee:	e004      	b.n	8008cfa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cf2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cfc:	685b      	ldr	r3, [r3, #4]
 8008cfe:	687a      	ldr	r2, [r7, #4]
 8008d00:	429a      	cmp	r2, r3
 8008d02:	d903      	bls.n	8008d0c <pvPortMalloc+0xa4>
 8008d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d1f1      	bne.n	8008cf0 <pvPortMalloc+0x88>
>>>>>>> Stashed changes
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
<<<<<<< Updated upstream
 8007adc:	4b36      	ldr	r3, [pc, #216]	; (8007bb8 <pvPortMalloc+0x180>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ae2:	429a      	cmp	r2, r3
 8007ae4:	d050      	beq.n	8007b88 <pvPortMalloc+0x150>
=======
 8008d0c:	4b36      	ldr	r3, [pc, #216]	; (8008de8 <pvPortMalloc+0x180>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d12:	429a      	cmp	r2, r3
 8008d14:	d050      	beq.n	8008db8 <pvPortMalloc+0x150>
>>>>>>> Stashed changes
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
<<<<<<< Updated upstream
 8007ae6:	6a3b      	ldr	r3, [r7, #32]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	2208      	movs	r2, #8
 8007aec:	4413      	add	r3, r2
 8007aee:	61fb      	str	r3, [r7, #28]
=======
 8008d16:	6a3b      	ldr	r3, [r7, #32]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	2208      	movs	r2, #8
 8008d1c:	4413      	add	r3, r2
 8008d1e:	61fb      	str	r3, [r7, #28]
>>>>>>> Stashed changes

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
<<<<<<< Updated upstream
 8007af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af2:	681a      	ldr	r2, [r3, #0]
 8007af4:	6a3b      	ldr	r3, [r7, #32]
 8007af6:	601a      	str	r2, [r3, #0]
=======
 8008d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d22:	681a      	ldr	r2, [r3, #0]
 8008d24:	6a3b      	ldr	r3, [r7, #32]
 8008d26:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
<<<<<<< Updated upstream
 8007af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007afa:	685a      	ldr	r2, [r3, #4]
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	1ad2      	subs	r2, r2, r3
 8007b00:	2308      	movs	r3, #8
 8007b02:	005b      	lsls	r3, r3, #1
 8007b04:	429a      	cmp	r2, r3
 8007b06:	d91f      	bls.n	8007b48 <pvPortMalloc+0x110>
=======
 8008d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d2a:	685a      	ldr	r2, [r3, #4]
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	1ad2      	subs	r2, r2, r3
 8008d30:	2308      	movs	r3, #8
 8008d32:	005b      	lsls	r3, r3, #1
 8008d34:	429a      	cmp	r2, r3
 8008d36:	d91f      	bls.n	8008d78 <pvPortMalloc+0x110>
>>>>>>> Stashed changes
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
<<<<<<< Updated upstream
 8007b08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	4413      	add	r3, r2
 8007b0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b10:	69bb      	ldr	r3, [r7, #24]
 8007b12:	f003 0307 	and.w	r3, r3, #7
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d00a      	beq.n	8007b30 <pvPortMalloc+0xf8>
	__asm volatile
 8007b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b1e:	f383 8811 	msr	BASEPRI, r3
 8007b22:	f3bf 8f6f 	isb	sy
 8007b26:	f3bf 8f4f 	dsb	sy
 8007b2a:	613b      	str	r3, [r7, #16]
}
 8007b2c:	bf00      	nop
 8007b2e:	e7fe      	b.n	8007b2e <pvPortMalloc+0xf6>
=======
 8008d38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	4413      	add	r3, r2
 8008d3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d40:	69bb      	ldr	r3, [r7, #24]
 8008d42:	f003 0307 	and.w	r3, r3, #7
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d00a      	beq.n	8008d60 <pvPortMalloc+0xf8>
	__asm volatile
 8008d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d4e:	f383 8811 	msr	BASEPRI, r3
 8008d52:	f3bf 8f6f 	isb	sy
 8008d56:	f3bf 8f4f 	dsb	sy
 8008d5a:	613b      	str	r3, [r7, #16]
}
 8008d5c:	bf00      	nop
 8008d5e:	e7fe      	b.n	8008d5e <pvPortMalloc+0xf6>
>>>>>>> Stashed changes

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
<<<<<<< Updated upstream
 8007b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b32:	685a      	ldr	r2, [r3, #4]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	1ad2      	subs	r2, r2, r3
 8007b38:	69bb      	ldr	r3, [r7, #24]
 8007b3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b3e:	687a      	ldr	r2, [r7, #4]
 8007b40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007b42:	69b8      	ldr	r0, [r7, #24]
 8007b44:	f000 f908 	bl	8007d58 <prvInsertBlockIntoFreeList>
=======
 8008d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d62:	685a      	ldr	r2, [r3, #4]
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	1ad2      	subs	r2, r2, r3
 8008d68:	69bb      	ldr	r3, [r7, #24]
 8008d6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d6e:	687a      	ldr	r2, [r7, #4]
 8008d70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008d72:	69b8      	ldr	r0, [r7, #24]
 8008d74:	f000 f908 	bl	8008f88 <prvInsertBlockIntoFreeList>
>>>>>>> Stashed changes
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
<<<<<<< Updated upstream
 8007b48:	4b1d      	ldr	r3, [pc, #116]	; (8007bc0 <pvPortMalloc+0x188>)
 8007b4a:	681a      	ldr	r2, [r3, #0]
 8007b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b4e:	685b      	ldr	r3, [r3, #4]
 8007b50:	1ad3      	subs	r3, r2, r3
 8007b52:	4a1b      	ldr	r2, [pc, #108]	; (8007bc0 <pvPortMalloc+0x188>)
 8007b54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007b56:	4b1a      	ldr	r3, [pc, #104]	; (8007bc0 <pvPortMalloc+0x188>)
 8007b58:	681a      	ldr	r2, [r3, #0]
 8007b5a:	4b1b      	ldr	r3, [pc, #108]	; (8007bc8 <pvPortMalloc+0x190>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	429a      	cmp	r2, r3
 8007b60:	d203      	bcs.n	8007b6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007b62:	4b17      	ldr	r3, [pc, #92]	; (8007bc0 <pvPortMalloc+0x188>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4a18      	ldr	r2, [pc, #96]	; (8007bc8 <pvPortMalloc+0x190>)
 8007b68:	6013      	str	r3, [r2, #0]
=======
 8008d78:	4b1d      	ldr	r3, [pc, #116]	; (8008df0 <pvPortMalloc+0x188>)
 8008d7a:	681a      	ldr	r2, [r3, #0]
 8008d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d7e:	685b      	ldr	r3, [r3, #4]
 8008d80:	1ad3      	subs	r3, r2, r3
 8008d82:	4a1b      	ldr	r2, [pc, #108]	; (8008df0 <pvPortMalloc+0x188>)
 8008d84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008d86:	4b1a      	ldr	r3, [pc, #104]	; (8008df0 <pvPortMalloc+0x188>)
 8008d88:	681a      	ldr	r2, [r3, #0]
 8008d8a:	4b1b      	ldr	r3, [pc, #108]	; (8008df8 <pvPortMalloc+0x190>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	429a      	cmp	r2, r3
 8008d90:	d203      	bcs.n	8008d9a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008d92:	4b17      	ldr	r3, [pc, #92]	; (8008df0 <pvPortMalloc+0x188>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	4a18      	ldr	r2, [pc, #96]	; (8008df8 <pvPortMalloc+0x190>)
 8008d98:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
<<<<<<< Updated upstream
 8007b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b6c:	685a      	ldr	r2, [r3, #4]
 8007b6e:	4b13      	ldr	r3, [pc, #76]	; (8007bbc <pvPortMalloc+0x184>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	431a      	orrs	r2, r3
 8007b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007b7e:	4b13      	ldr	r3, [pc, #76]	; (8007bcc <pvPortMalloc+0x194>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	3301      	adds	r3, #1
 8007b84:	4a11      	ldr	r2, [pc, #68]	; (8007bcc <pvPortMalloc+0x194>)
 8007b86:	6013      	str	r3, [r2, #0]
=======
 8008d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d9c:	685a      	ldr	r2, [r3, #4]
 8008d9e:	4b13      	ldr	r3, [pc, #76]	; (8008dec <pvPortMalloc+0x184>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	431a      	orrs	r2, r3
 8008da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008daa:	2200      	movs	r2, #0
 8008dac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008dae:	4b13      	ldr	r3, [pc, #76]	; (8008dfc <pvPortMalloc+0x194>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	3301      	adds	r3, #1
 8008db4:	4a11      	ldr	r2, [pc, #68]	; (8008dfc <pvPortMalloc+0x194>)
 8008db6:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
<<<<<<< Updated upstream
 8007b88:	f7fe fcfe 	bl	8006588 <xTaskResumeAll>
=======
 8008db8:	f7fe fcf8 	bl	80077ac <xTaskResumeAll>
>>>>>>> Stashed changes
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
<<<<<<< Updated upstream
 8007b8c:	69fb      	ldr	r3, [r7, #28]
 8007b8e:	f003 0307 	and.w	r3, r3, #7
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d00a      	beq.n	8007bac <pvPortMalloc+0x174>
	__asm volatile
 8007b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b9a:	f383 8811 	msr	BASEPRI, r3
 8007b9e:	f3bf 8f6f 	isb	sy
 8007ba2:	f3bf 8f4f 	dsb	sy
 8007ba6:	60fb      	str	r3, [r7, #12]
}
 8007ba8:	bf00      	nop
 8007baa:	e7fe      	b.n	8007baa <pvPortMalloc+0x172>
	return pvReturn;
 8007bac:	69fb      	ldr	r3, [r7, #28]
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	3728      	adds	r7, #40	; 0x28
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}
 8007bb6:	bf00      	nop
 8007bb8:	200024c0 	.word	0x200024c0
 8007bbc:	200024d4 	.word	0x200024d4
 8007bc0:	200024c4 	.word	0x200024c4
 8007bc4:	200024b8 	.word	0x200024b8
 8007bc8:	200024c8 	.word	0x200024c8
 8007bcc:	200024cc 	.word	0x200024cc

08007bd0 <vPortFree>:
=======
 8008dbc:	69fb      	ldr	r3, [r7, #28]
 8008dbe:	f003 0307 	and.w	r3, r3, #7
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d00a      	beq.n	8008ddc <pvPortMalloc+0x174>
	__asm volatile
 8008dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dca:	f383 8811 	msr	BASEPRI, r3
 8008dce:	f3bf 8f6f 	isb	sy
 8008dd2:	f3bf 8f4f 	dsb	sy
 8008dd6:	60fb      	str	r3, [r7, #12]
}
 8008dd8:	bf00      	nop
 8008dda:	e7fe      	b.n	8008dda <pvPortMalloc+0x172>
	return pvReturn;
 8008ddc:	69fb      	ldr	r3, [r7, #28]
}
 8008dde:	4618      	mov	r0, r3
 8008de0:	3728      	adds	r7, #40	; 0x28
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bd80      	pop	{r7, pc}
 8008de6:	bf00      	nop
 8008de8:	20002418 	.word	0x20002418
 8008dec:	2000242c 	.word	0x2000242c
 8008df0:	2000241c 	.word	0x2000241c
 8008df4:	20002410 	.word	0x20002410
 8008df8:	20002420 	.word	0x20002420
 8008dfc:	20002424 	.word	0x20002424

08008e00 <vPortFree>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
<<<<<<< Updated upstream
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b086      	sub	sp, #24
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d04d      	beq.n	8007c7e <vPortFree+0xae>
=======
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b086      	sub	sp, #24
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d04d      	beq.n	8008eae <vPortFree+0xae>
>>>>>>> Stashed changes
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
<<<<<<< Updated upstream
 8007be2:	2308      	movs	r3, #8
 8007be4:	425b      	negs	r3, r3
 8007be6:	697a      	ldr	r2, [r7, #20]
 8007be8:	4413      	add	r3, r2
 8007bea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	685a      	ldr	r2, [r3, #4]
 8007bf4:	4b24      	ldr	r3, [pc, #144]	; (8007c88 <vPortFree+0xb8>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4013      	ands	r3, r2
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d10a      	bne.n	8007c14 <vPortFree+0x44>
	__asm volatile
 8007bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c02:	f383 8811 	msr	BASEPRI, r3
 8007c06:	f3bf 8f6f 	isb	sy
 8007c0a:	f3bf 8f4f 	dsb	sy
 8007c0e:	60fb      	str	r3, [r7, #12]
}
 8007c10:	bf00      	nop
 8007c12:	e7fe      	b.n	8007c12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d00a      	beq.n	8007c32 <vPortFree+0x62>
	__asm volatile
 8007c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c20:	f383 8811 	msr	BASEPRI, r3
 8007c24:	f3bf 8f6f 	isb	sy
 8007c28:	f3bf 8f4f 	dsb	sy
 8007c2c:	60bb      	str	r3, [r7, #8]
}
 8007c2e:	bf00      	nop
 8007c30:	e7fe      	b.n	8007c30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	685a      	ldr	r2, [r3, #4]
 8007c36:	4b14      	ldr	r3, [pc, #80]	; (8007c88 <vPortFree+0xb8>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4013      	ands	r3, r2
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d01e      	beq.n	8007c7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d11a      	bne.n	8007c7e <vPortFree+0xae>
=======
 8008e12:	2308      	movs	r3, #8
 8008e14:	425b      	negs	r3, r3
 8008e16:	697a      	ldr	r2, [r7, #20]
 8008e18:	4413      	add	r3, r2
 8008e1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	685a      	ldr	r2, [r3, #4]
 8008e24:	4b24      	ldr	r3, [pc, #144]	; (8008eb8 <vPortFree+0xb8>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	4013      	ands	r3, r2
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d10a      	bne.n	8008e44 <vPortFree+0x44>
	__asm volatile
 8008e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e32:	f383 8811 	msr	BASEPRI, r3
 8008e36:	f3bf 8f6f 	isb	sy
 8008e3a:	f3bf 8f4f 	dsb	sy
 8008e3e:	60fb      	str	r3, [r7, #12]
}
 8008e40:	bf00      	nop
 8008e42:	e7fe      	b.n	8008e42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008e44:	693b      	ldr	r3, [r7, #16]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d00a      	beq.n	8008e62 <vPortFree+0x62>
	__asm volatile
 8008e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e50:	f383 8811 	msr	BASEPRI, r3
 8008e54:	f3bf 8f6f 	isb	sy
 8008e58:	f3bf 8f4f 	dsb	sy
 8008e5c:	60bb      	str	r3, [r7, #8]
}
 8008e5e:	bf00      	nop
 8008e60:	e7fe      	b.n	8008e60 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008e62:	693b      	ldr	r3, [r7, #16]
 8008e64:	685a      	ldr	r2, [r3, #4]
 8008e66:	4b14      	ldr	r3, [pc, #80]	; (8008eb8 <vPortFree+0xb8>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	4013      	ands	r3, r2
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d01e      	beq.n	8008eae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008e70:	693b      	ldr	r3, [r7, #16]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d11a      	bne.n	8008eae <vPortFree+0xae>
>>>>>>> Stashed changes
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
<<<<<<< Updated upstream
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	685a      	ldr	r2, [r3, #4]
 8007c4c:	4b0e      	ldr	r3, [pc, #56]	; (8007c88 <vPortFree+0xb8>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	43db      	mvns	r3, r3
 8007c52:	401a      	ands	r2, r3
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007c58:	f7fe fc88 	bl	800656c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	685a      	ldr	r2, [r3, #4]
 8007c60:	4b0a      	ldr	r3, [pc, #40]	; (8007c8c <vPortFree+0xbc>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4413      	add	r3, r2
 8007c66:	4a09      	ldr	r2, [pc, #36]	; (8007c8c <vPortFree+0xbc>)
 8007c68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007c6a:	6938      	ldr	r0, [r7, #16]
 8007c6c:	f000 f874 	bl	8007d58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007c70:	4b07      	ldr	r3, [pc, #28]	; (8007c90 <vPortFree+0xc0>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	3301      	adds	r3, #1
 8007c76:	4a06      	ldr	r2, [pc, #24]	; (8007c90 <vPortFree+0xc0>)
 8007c78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007c7a:	f7fe fc85 	bl	8006588 <xTaskResumeAll>
=======
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	685a      	ldr	r2, [r3, #4]
 8008e7c:	4b0e      	ldr	r3, [pc, #56]	; (8008eb8 <vPortFree+0xb8>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	43db      	mvns	r3, r3
 8008e82:	401a      	ands	r2, r3
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008e88:	f7fe fc82 	bl	8007790 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008e8c:	693b      	ldr	r3, [r7, #16]
 8008e8e:	685a      	ldr	r2, [r3, #4]
 8008e90:	4b0a      	ldr	r3, [pc, #40]	; (8008ebc <vPortFree+0xbc>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4413      	add	r3, r2
 8008e96:	4a09      	ldr	r2, [pc, #36]	; (8008ebc <vPortFree+0xbc>)
 8008e98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008e9a:	6938      	ldr	r0, [r7, #16]
 8008e9c:	f000 f874 	bl	8008f88 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008ea0:	4b07      	ldr	r3, [pc, #28]	; (8008ec0 <vPortFree+0xc0>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	3301      	adds	r3, #1
 8008ea6:	4a06      	ldr	r2, [pc, #24]	; (8008ec0 <vPortFree+0xc0>)
 8008ea8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008eaa:	f7fe fc7f 	bl	80077ac <xTaskResumeAll>
>>>>>>> Stashed changes
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
<<<<<<< Updated upstream
 8007c7e:	bf00      	nop
 8007c80:	3718      	adds	r7, #24
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}
 8007c86:	bf00      	nop
 8007c88:	200024d4 	.word	0x200024d4
 8007c8c:	200024c4 	.word	0x200024c4
 8007c90:	200024d0 	.word	0x200024d0

08007c94 <prvHeapInit>:
=======
 8008eae:	bf00      	nop
 8008eb0:	3718      	adds	r7, #24
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}
 8008eb6:	bf00      	nop
 8008eb8:	2000242c 	.word	0x2000242c
 8008ebc:	2000241c 	.word	0x2000241c
 8008ec0:	20002428 	.word	0x20002428

08008ec4 <prvHeapInit>:
>>>>>>> Stashed changes
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
<<<<<<< Updated upstream
 8007c94:	b480      	push	{r7}
 8007c96:	b085      	sub	sp, #20
 8007c98:	af00      	add	r7, sp, #0
=======
 8008ec4:	b480      	push	{r7}
 8008ec6:	b085      	sub	sp, #20
 8008ec8:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
<<<<<<< Updated upstream
 8007c9a:	f241 3388 	movw	r3, #5000	; 0x1388
 8007c9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007ca0:	4b27      	ldr	r3, [pc, #156]	; (8007d40 <prvHeapInit+0xac>)
 8007ca2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	f003 0307 	and.w	r3, r3, #7
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d00c      	beq.n	8007cc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	3307      	adds	r3, #7
 8007cb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	f023 0307 	bic.w	r3, r3, #7
 8007cba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007cbc:	68ba      	ldr	r2, [r7, #8]
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	1ad3      	subs	r3, r2, r3
 8007cc2:	4a1f      	ldr	r2, [pc, #124]	; (8007d40 <prvHeapInit+0xac>)
 8007cc4:	4413      	add	r3, r2
 8007cc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	607b      	str	r3, [r7, #4]
=======
 8008eca:	f241 3388 	movw	r3, #5000	; 0x1388
 8008ece:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008ed0:	4b27      	ldr	r3, [pc, #156]	; (8008f70 <prvHeapInit+0xac>)
 8008ed2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	f003 0307 	and.w	r3, r3, #7
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d00c      	beq.n	8008ef8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	3307      	adds	r3, #7
 8008ee2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	f023 0307 	bic.w	r3, r3, #7
 8008eea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008eec:	68ba      	ldr	r2, [r7, #8]
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	1ad3      	subs	r3, r2, r3
 8008ef2:	4a1f      	ldr	r2, [pc, #124]	; (8008f70 <prvHeapInit+0xac>)
 8008ef4:	4413      	add	r3, r2
 8008ef6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	607b      	str	r3, [r7, #4]
>>>>>>> Stashed changes

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
<<<<<<< Updated upstream
 8007ccc:	4a1d      	ldr	r2, [pc, #116]	; (8007d44 <prvHeapInit+0xb0>)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007cd2:	4b1c      	ldr	r3, [pc, #112]	; (8007d44 <prvHeapInit+0xb0>)
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	605a      	str	r2, [r3, #4]
=======
 8008efc:	4a1d      	ldr	r2, [pc, #116]	; (8008f74 <prvHeapInit+0xb0>)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008f02:	4b1c      	ldr	r3, [pc, #112]	; (8008f74 <prvHeapInit+0xb0>)
 8008f04:	2200      	movs	r2, #0
 8008f06:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
<<<<<<< Updated upstream
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	68ba      	ldr	r2, [r7, #8]
 8007cdc:	4413      	add	r3, r2
 8007cde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007ce0:	2208      	movs	r2, #8
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	1a9b      	subs	r3, r3, r2
 8007ce6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	f023 0307 	bic.w	r3, r3, #7
 8007cee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	4a15      	ldr	r2, [pc, #84]	; (8007d48 <prvHeapInit+0xb4>)
 8007cf4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007cf6:	4b14      	ldr	r3, [pc, #80]	; (8007d48 <prvHeapInit+0xb4>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007cfe:	4b12      	ldr	r3, [pc, #72]	; (8007d48 <prvHeapInit+0xb4>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	2200      	movs	r2, #0
 8007d04:	601a      	str	r2, [r3, #0]
=======
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	68ba      	ldr	r2, [r7, #8]
 8008f0c:	4413      	add	r3, r2
 8008f0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008f10:	2208      	movs	r2, #8
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	1a9b      	subs	r3, r3, r2
 8008f16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	f023 0307 	bic.w	r3, r3, #7
 8008f1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	4a15      	ldr	r2, [pc, #84]	; (8008f78 <prvHeapInit+0xb4>)
 8008f24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008f26:	4b14      	ldr	r3, [pc, #80]	; (8008f78 <prvHeapInit+0xb4>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008f2e:	4b12      	ldr	r3, [pc, #72]	; (8008f78 <prvHeapInit+0xb4>)
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	2200      	movs	r2, #0
 8008f34:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
<<<<<<< Updated upstream
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	68fa      	ldr	r2, [r7, #12]
 8007d0e:	1ad2      	subs	r2, r2, r3
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007d14:	4b0c      	ldr	r3, [pc, #48]	; (8007d48 <prvHeapInit+0xb4>)
 8007d16:	681a      	ldr	r2, [r3, #0]
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	685b      	ldr	r3, [r3, #4]
 8007d20:	4a0a      	ldr	r2, [pc, #40]	; (8007d4c <prvHeapInit+0xb8>)
 8007d22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	685b      	ldr	r3, [r3, #4]
 8007d28:	4a09      	ldr	r2, [pc, #36]	; (8007d50 <prvHeapInit+0xbc>)
 8007d2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007d2c:	4b09      	ldr	r3, [pc, #36]	; (8007d54 <prvHeapInit+0xc0>)
 8007d2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007d32:	601a      	str	r2, [r3, #0]
}
 8007d34:	bf00      	nop
 8007d36:	3714      	adds	r7, #20
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3e:	4770      	bx	lr
 8007d40:	20001130 	.word	0x20001130
 8007d44:	200024b8 	.word	0x200024b8
 8007d48:	200024c0 	.word	0x200024c0
 8007d4c:	200024c8 	.word	0x200024c8
 8007d50:	200024c4 	.word	0x200024c4
 8007d54:	200024d4 	.word	0x200024d4

08007d58 <prvInsertBlockIntoFreeList>:
=======
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	68fa      	ldr	r2, [r7, #12]
 8008f3e:	1ad2      	subs	r2, r2, r3
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008f44:	4b0c      	ldr	r3, [pc, #48]	; (8008f78 <prvHeapInit+0xb4>)
 8008f46:	681a      	ldr	r2, [r3, #0]
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	685b      	ldr	r3, [r3, #4]
 8008f50:	4a0a      	ldr	r2, [pc, #40]	; (8008f7c <prvHeapInit+0xb8>)
 8008f52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	685b      	ldr	r3, [r3, #4]
 8008f58:	4a09      	ldr	r2, [pc, #36]	; (8008f80 <prvHeapInit+0xbc>)
 8008f5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008f5c:	4b09      	ldr	r3, [pc, #36]	; (8008f84 <prvHeapInit+0xc0>)
 8008f5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008f62:	601a      	str	r2, [r3, #0]
}
 8008f64:	bf00      	nop
 8008f66:	3714      	adds	r7, #20
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6e:	4770      	bx	lr
 8008f70:	20001088 	.word	0x20001088
 8008f74:	20002410 	.word	0x20002410
 8008f78:	20002418 	.word	0x20002418
 8008f7c:	20002420 	.word	0x20002420
 8008f80:	2000241c 	.word	0x2000241c
 8008f84:	2000242c 	.word	0x2000242c

08008f88 <prvInsertBlockIntoFreeList>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
<<<<<<< Updated upstream
 8007d58:	b480      	push	{r7}
 8007d5a:	b085      	sub	sp, #20
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
=======
 8008f88:	b480      	push	{r7}
 8008f8a:	b085      	sub	sp, #20
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
<<<<<<< Updated upstream
 8007d60:	4b28      	ldr	r3, [pc, #160]	; (8007e04 <prvInsertBlockIntoFreeList+0xac>)
 8007d62:	60fb      	str	r3, [r7, #12]
 8007d64:	e002      	b.n	8007d6c <prvInsertBlockIntoFreeList+0x14>
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	60fb      	str	r3, [r7, #12]
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	687a      	ldr	r2, [r7, #4]
 8007d72:	429a      	cmp	r2, r3
 8007d74:	d8f7      	bhi.n	8007d66 <prvInsertBlockIntoFreeList+0xe>
=======
 8008f90:	4b28      	ldr	r3, [pc, #160]	; (8009034 <prvInsertBlockIntoFreeList+0xac>)
 8008f92:	60fb      	str	r3, [r7, #12]
 8008f94:	e002      	b.n	8008f9c <prvInsertBlockIntoFreeList+0x14>
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	60fb      	str	r3, [r7, #12]
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	687a      	ldr	r2, [r7, #4]
 8008fa2:	429a      	cmp	r2, r3
 8008fa4:	d8f7      	bhi.n	8008f96 <prvInsertBlockIntoFreeList+0xe>
>>>>>>> Stashed changes
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
<<<<<<< Updated upstream
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	68ba      	ldr	r2, [r7, #8]
 8007d80:	4413      	add	r3, r2
 8007d82:	687a      	ldr	r2, [r7, #4]
 8007d84:	429a      	cmp	r2, r3
 8007d86:	d108      	bne.n	8007d9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	685a      	ldr	r2, [r3, #4]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	685b      	ldr	r3, [r3, #4]
 8007d90:	441a      	add	r2, r3
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	607b      	str	r3, [r7, #4]
=======
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	685b      	ldr	r3, [r3, #4]
 8008fae:	68ba      	ldr	r2, [r7, #8]
 8008fb0:	4413      	add	r3, r2
 8008fb2:	687a      	ldr	r2, [r7, #4]
 8008fb4:	429a      	cmp	r2, r3
 8008fb6:	d108      	bne.n	8008fca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	685a      	ldr	r2, [r3, #4]
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	685b      	ldr	r3, [r3, #4]
 8008fc0:	441a      	add	r2, r3
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	607b      	str	r3, [r7, #4]
>>>>>>> Stashed changes
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
<<<<<<< Updated upstream
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	68ba      	ldr	r2, [r7, #8]
 8007da4:	441a      	add	r2, r3
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	429a      	cmp	r2, r3
 8007dac:	d118      	bne.n	8007de0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681a      	ldr	r2, [r3, #0]
 8007db2:	4b15      	ldr	r3, [pc, #84]	; (8007e08 <prvInsertBlockIntoFreeList+0xb0>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	429a      	cmp	r2, r3
 8007db8:	d00d      	beq.n	8007dd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	685a      	ldr	r2, [r3, #4]
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	441a      	add	r2, r3
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	681a      	ldr	r2, [r3, #0]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	601a      	str	r2, [r3, #0]
 8007dd4:	e008      	b.n	8007de8 <prvInsertBlockIntoFreeList+0x90>
=======
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	685b      	ldr	r3, [r3, #4]
 8008fd2:	68ba      	ldr	r2, [r7, #8]
 8008fd4:	441a      	add	r2, r3
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	429a      	cmp	r2, r3
 8008fdc:	d118      	bne.n	8009010 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681a      	ldr	r2, [r3, #0]
 8008fe2:	4b15      	ldr	r3, [pc, #84]	; (8009038 <prvInsertBlockIntoFreeList+0xb0>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	429a      	cmp	r2, r3
 8008fe8:	d00d      	beq.n	8009006 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	685a      	ldr	r2, [r3, #4]
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	685b      	ldr	r3, [r3, #4]
 8008ff4:	441a      	add	r2, r3
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	681a      	ldr	r2, [r3, #0]
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	601a      	str	r2, [r3, #0]
 8009004:	e008      	b.n	8009018 <prvInsertBlockIntoFreeList+0x90>
>>>>>>> Stashed changes
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
<<<<<<< Updated upstream
 8007dd6:	4b0c      	ldr	r3, [pc, #48]	; (8007e08 <prvInsertBlockIntoFreeList+0xb0>)
 8007dd8:	681a      	ldr	r2, [r3, #0]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	601a      	str	r2, [r3, #0]
 8007dde:	e003      	b.n	8007de8 <prvInsertBlockIntoFreeList+0x90>
=======
 8009006:	4b0c      	ldr	r3, [pc, #48]	; (8009038 <prvInsertBlockIntoFreeList+0xb0>)
 8009008:	681a      	ldr	r2, [r3, #0]
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	601a      	str	r2, [r3, #0]
 800900e:	e003      	b.n	8009018 <prvInsertBlockIntoFreeList+0x90>
>>>>>>> Stashed changes
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
<<<<<<< Updated upstream
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681a      	ldr	r2, [r3, #0]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	601a      	str	r2, [r3, #0]
=======
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	681a      	ldr	r2, [r3, #0]
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
<<<<<<< Updated upstream
 8007de8:	68fa      	ldr	r2, [r7, #12]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d002      	beq.n	8007df6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	687a      	ldr	r2, [r7, #4]
 8007df4:	601a      	str	r2, [r3, #0]
=======
 8009018:	68fa      	ldr	r2, [r7, #12]
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	429a      	cmp	r2, r3
 800901e:	d002      	beq.n	8009026 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	687a      	ldr	r2, [r7, #4]
 8009024:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
<<<<<<< Updated upstream
 8007df6:	bf00      	nop
 8007df8:	3714      	adds	r7, #20
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e00:	4770      	bx	lr
 8007e02:	bf00      	nop
 8007e04:	200024b8 	.word	0x200024b8
 8007e08:	200024c0 	.word	0x200024c0

08007e0c <std>:
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	b510      	push	{r4, lr}
 8007e10:	4604      	mov	r4, r0
 8007e12:	e9c0 3300 	strd	r3, r3, [r0]
 8007e16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007e1a:	6083      	str	r3, [r0, #8]
 8007e1c:	8181      	strh	r1, [r0, #12]
 8007e1e:	6643      	str	r3, [r0, #100]	; 0x64
 8007e20:	81c2      	strh	r2, [r0, #14]
 8007e22:	6183      	str	r3, [r0, #24]
 8007e24:	4619      	mov	r1, r3
 8007e26:	2208      	movs	r2, #8
 8007e28:	305c      	adds	r0, #92	; 0x5c
 8007e2a:	f000 f91f 	bl	800806c <memset>
 8007e2e:	4b0d      	ldr	r3, [pc, #52]	; (8007e64 <std+0x58>)
 8007e30:	6263      	str	r3, [r4, #36]	; 0x24
 8007e32:	4b0d      	ldr	r3, [pc, #52]	; (8007e68 <std+0x5c>)
 8007e34:	62a3      	str	r3, [r4, #40]	; 0x28
 8007e36:	4b0d      	ldr	r3, [pc, #52]	; (8007e6c <std+0x60>)
 8007e38:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007e3a:	4b0d      	ldr	r3, [pc, #52]	; (8007e70 <std+0x64>)
 8007e3c:	6323      	str	r3, [r4, #48]	; 0x30
 8007e3e:	4b0d      	ldr	r3, [pc, #52]	; (8007e74 <std+0x68>)
 8007e40:	6224      	str	r4, [r4, #32]
 8007e42:	429c      	cmp	r4, r3
 8007e44:	d006      	beq.n	8007e54 <std+0x48>
 8007e46:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007e4a:	4294      	cmp	r4, r2
 8007e4c:	d002      	beq.n	8007e54 <std+0x48>
 8007e4e:	33d0      	adds	r3, #208	; 0xd0
 8007e50:	429c      	cmp	r4, r3
 8007e52:	d105      	bne.n	8007e60 <std+0x54>
 8007e54:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007e58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e5c:	f000 b98e 	b.w	800817c <__retarget_lock_init_recursive>
 8007e60:	bd10      	pop	{r4, pc}
 8007e62:	bf00      	nop
 8007e64:	08008a95 	.word	0x08008a95
 8007e68:	08008ab7 	.word	0x08008ab7
 8007e6c:	08008aef 	.word	0x08008aef
 8007e70:	08008b13 	.word	0x08008b13
 8007e74:	200024d8 	.word	0x200024d8

08007e78 <stdio_exit_handler>:
 8007e78:	4a02      	ldr	r2, [pc, #8]	; (8007e84 <stdio_exit_handler+0xc>)
 8007e7a:	4903      	ldr	r1, [pc, #12]	; (8007e88 <stdio_exit_handler+0x10>)
 8007e7c:	4803      	ldr	r0, [pc, #12]	; (8007e8c <stdio_exit_handler+0x14>)
 8007e7e:	f000 b869 	b.w	8007f54 <_fwalk_sglue>
 8007e82:	bf00      	nop
 8007e84:	20000010 	.word	0x20000010
 8007e88:	08008a2d 	.word	0x08008a2d
 8007e8c:	2000001c 	.word	0x2000001c

08007e90 <cleanup_stdio>:
 8007e90:	6841      	ldr	r1, [r0, #4]
 8007e92:	4b0c      	ldr	r3, [pc, #48]	; (8007ec4 <cleanup_stdio+0x34>)
 8007e94:	4299      	cmp	r1, r3
 8007e96:	b510      	push	{r4, lr}
 8007e98:	4604      	mov	r4, r0
 8007e9a:	d001      	beq.n	8007ea0 <cleanup_stdio+0x10>
 8007e9c:	f000 fdc6 	bl	8008a2c <_fflush_r>
 8007ea0:	68a1      	ldr	r1, [r4, #8]
 8007ea2:	4b09      	ldr	r3, [pc, #36]	; (8007ec8 <cleanup_stdio+0x38>)
 8007ea4:	4299      	cmp	r1, r3
 8007ea6:	d002      	beq.n	8007eae <cleanup_stdio+0x1e>
 8007ea8:	4620      	mov	r0, r4
 8007eaa:	f000 fdbf 	bl	8008a2c <_fflush_r>
 8007eae:	68e1      	ldr	r1, [r4, #12]
 8007eb0:	4b06      	ldr	r3, [pc, #24]	; (8007ecc <cleanup_stdio+0x3c>)
 8007eb2:	4299      	cmp	r1, r3
 8007eb4:	d004      	beq.n	8007ec0 <cleanup_stdio+0x30>
 8007eb6:	4620      	mov	r0, r4
 8007eb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ebc:	f000 bdb6 	b.w	8008a2c <_fflush_r>
 8007ec0:	bd10      	pop	{r4, pc}
 8007ec2:	bf00      	nop
 8007ec4:	200024d8 	.word	0x200024d8
 8007ec8:	20002540 	.word	0x20002540
 8007ecc:	200025a8 	.word	0x200025a8

08007ed0 <global_stdio_init.part.0>:
 8007ed0:	b510      	push	{r4, lr}
 8007ed2:	4b0b      	ldr	r3, [pc, #44]	; (8007f00 <global_stdio_init.part.0+0x30>)
 8007ed4:	4c0b      	ldr	r4, [pc, #44]	; (8007f04 <global_stdio_init.part.0+0x34>)
 8007ed6:	4a0c      	ldr	r2, [pc, #48]	; (8007f08 <global_stdio_init.part.0+0x38>)
 8007ed8:	601a      	str	r2, [r3, #0]
 8007eda:	4620      	mov	r0, r4
 8007edc:	2200      	movs	r2, #0
 8007ede:	2104      	movs	r1, #4
 8007ee0:	f7ff ff94 	bl	8007e0c <std>
 8007ee4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007ee8:	2201      	movs	r2, #1
 8007eea:	2109      	movs	r1, #9
 8007eec:	f7ff ff8e 	bl	8007e0c <std>
 8007ef0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007ef4:	2202      	movs	r2, #2
 8007ef6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007efa:	2112      	movs	r1, #18
 8007efc:	f7ff bf86 	b.w	8007e0c <std>
 8007f00:	20002610 	.word	0x20002610
 8007f04:	200024d8 	.word	0x200024d8
 8007f08:	08007e79 	.word	0x08007e79

08007f0c <__sfp_lock_acquire>:
 8007f0c:	4801      	ldr	r0, [pc, #4]	; (8007f14 <__sfp_lock_acquire+0x8>)
 8007f0e:	f000 b936 	b.w	800817e <__retarget_lock_acquire_recursive>
 8007f12:	bf00      	nop
 8007f14:	20002619 	.word	0x20002619

08007f18 <__sfp_lock_release>:
 8007f18:	4801      	ldr	r0, [pc, #4]	; (8007f20 <__sfp_lock_release+0x8>)
 8007f1a:	f000 b931 	b.w	8008180 <__retarget_lock_release_recursive>
 8007f1e:	bf00      	nop
 8007f20:	20002619 	.word	0x20002619

08007f24 <__sinit>:
 8007f24:	b510      	push	{r4, lr}
 8007f26:	4604      	mov	r4, r0
 8007f28:	f7ff fff0 	bl	8007f0c <__sfp_lock_acquire>
 8007f2c:	6a23      	ldr	r3, [r4, #32]
 8007f2e:	b11b      	cbz	r3, 8007f38 <__sinit+0x14>
 8007f30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f34:	f7ff bff0 	b.w	8007f18 <__sfp_lock_release>
 8007f38:	4b04      	ldr	r3, [pc, #16]	; (8007f4c <__sinit+0x28>)
 8007f3a:	6223      	str	r3, [r4, #32]
 8007f3c:	4b04      	ldr	r3, [pc, #16]	; (8007f50 <__sinit+0x2c>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d1f5      	bne.n	8007f30 <__sinit+0xc>
 8007f44:	f7ff ffc4 	bl	8007ed0 <global_stdio_init.part.0>
 8007f48:	e7f2      	b.n	8007f30 <__sinit+0xc>
 8007f4a:	bf00      	nop
 8007f4c:	08007e91 	.word	0x08007e91
 8007f50:	20002610 	.word	0x20002610

08007f54 <_fwalk_sglue>:
 8007f54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f58:	4607      	mov	r7, r0
 8007f5a:	4688      	mov	r8, r1
 8007f5c:	4614      	mov	r4, r2
 8007f5e:	2600      	movs	r6, #0
 8007f60:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007f64:	f1b9 0901 	subs.w	r9, r9, #1
 8007f68:	d505      	bpl.n	8007f76 <_fwalk_sglue+0x22>
 8007f6a:	6824      	ldr	r4, [r4, #0]
 8007f6c:	2c00      	cmp	r4, #0
 8007f6e:	d1f7      	bne.n	8007f60 <_fwalk_sglue+0xc>
 8007f70:	4630      	mov	r0, r6
 8007f72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f76:	89ab      	ldrh	r3, [r5, #12]
 8007f78:	2b01      	cmp	r3, #1
 8007f7a:	d907      	bls.n	8007f8c <_fwalk_sglue+0x38>
 8007f7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f80:	3301      	adds	r3, #1
 8007f82:	d003      	beq.n	8007f8c <_fwalk_sglue+0x38>
 8007f84:	4629      	mov	r1, r5
 8007f86:	4638      	mov	r0, r7
 8007f88:	47c0      	blx	r8
 8007f8a:	4306      	orrs	r6, r0
 8007f8c:	3568      	adds	r5, #104	; 0x68
 8007f8e:	e7e9      	b.n	8007f64 <_fwalk_sglue+0x10>

08007f90 <iprintf>:
 8007f90:	b40f      	push	{r0, r1, r2, r3}
 8007f92:	b507      	push	{r0, r1, r2, lr}
 8007f94:	4906      	ldr	r1, [pc, #24]	; (8007fb0 <iprintf+0x20>)
 8007f96:	ab04      	add	r3, sp, #16
 8007f98:	6808      	ldr	r0, [r1, #0]
 8007f9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f9e:	6881      	ldr	r1, [r0, #8]
 8007fa0:	9301      	str	r3, [sp, #4]
 8007fa2:	f000 f973 	bl	800828c <_vfiprintf_r>
 8007fa6:	b003      	add	sp, #12
 8007fa8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007fac:	b004      	add	sp, #16
 8007fae:	4770      	bx	lr
 8007fb0:	20000068 	.word	0x20000068

08007fb4 <_puts_r>:
 8007fb4:	6a03      	ldr	r3, [r0, #32]
 8007fb6:	b570      	push	{r4, r5, r6, lr}
 8007fb8:	6884      	ldr	r4, [r0, #8]
 8007fba:	4605      	mov	r5, r0
 8007fbc:	460e      	mov	r6, r1
 8007fbe:	b90b      	cbnz	r3, 8007fc4 <_puts_r+0x10>
 8007fc0:	f7ff ffb0 	bl	8007f24 <__sinit>
 8007fc4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007fc6:	07db      	lsls	r3, r3, #31
 8007fc8:	d405      	bmi.n	8007fd6 <_puts_r+0x22>
 8007fca:	89a3      	ldrh	r3, [r4, #12]
 8007fcc:	0598      	lsls	r0, r3, #22
 8007fce:	d402      	bmi.n	8007fd6 <_puts_r+0x22>
 8007fd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007fd2:	f000 f8d4 	bl	800817e <__retarget_lock_acquire_recursive>
 8007fd6:	89a3      	ldrh	r3, [r4, #12]
 8007fd8:	0719      	lsls	r1, r3, #28
 8007fda:	d513      	bpl.n	8008004 <_puts_r+0x50>
 8007fdc:	6923      	ldr	r3, [r4, #16]
 8007fde:	b18b      	cbz	r3, 8008004 <_puts_r+0x50>
 8007fe0:	3e01      	subs	r6, #1
 8007fe2:	68a3      	ldr	r3, [r4, #8]
 8007fe4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007fe8:	3b01      	subs	r3, #1
 8007fea:	60a3      	str	r3, [r4, #8]
 8007fec:	b9e9      	cbnz	r1, 800802a <_puts_r+0x76>
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	da2e      	bge.n	8008050 <_puts_r+0x9c>
 8007ff2:	4622      	mov	r2, r4
 8007ff4:	210a      	movs	r1, #10
 8007ff6:	4628      	mov	r0, r5
 8007ff8:	f000 fd8f 	bl	8008b1a <__swbuf_r>
 8007ffc:	3001      	adds	r0, #1
 8007ffe:	d007      	beq.n	8008010 <_puts_r+0x5c>
 8008000:	250a      	movs	r5, #10
 8008002:	e007      	b.n	8008014 <_puts_r+0x60>
 8008004:	4621      	mov	r1, r4
 8008006:	4628      	mov	r0, r5
 8008008:	f000 fdc4 	bl	8008b94 <__swsetup_r>
 800800c:	2800      	cmp	r0, #0
 800800e:	d0e7      	beq.n	8007fe0 <_puts_r+0x2c>
 8008010:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8008014:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008016:	07da      	lsls	r2, r3, #31
 8008018:	d405      	bmi.n	8008026 <_puts_r+0x72>
 800801a:	89a3      	ldrh	r3, [r4, #12]
 800801c:	059b      	lsls	r3, r3, #22
 800801e:	d402      	bmi.n	8008026 <_puts_r+0x72>
 8008020:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008022:	f000 f8ad 	bl	8008180 <__retarget_lock_release_recursive>
 8008026:	4628      	mov	r0, r5
 8008028:	bd70      	pop	{r4, r5, r6, pc}
 800802a:	2b00      	cmp	r3, #0
 800802c:	da04      	bge.n	8008038 <_puts_r+0x84>
 800802e:	69a2      	ldr	r2, [r4, #24]
 8008030:	429a      	cmp	r2, r3
 8008032:	dc06      	bgt.n	8008042 <_puts_r+0x8e>
 8008034:	290a      	cmp	r1, #10
 8008036:	d004      	beq.n	8008042 <_puts_r+0x8e>
 8008038:	6823      	ldr	r3, [r4, #0]
 800803a:	1c5a      	adds	r2, r3, #1
 800803c:	6022      	str	r2, [r4, #0]
 800803e:	7019      	strb	r1, [r3, #0]
 8008040:	e7cf      	b.n	8007fe2 <_puts_r+0x2e>
 8008042:	4622      	mov	r2, r4
 8008044:	4628      	mov	r0, r5
 8008046:	f000 fd68 	bl	8008b1a <__swbuf_r>
 800804a:	3001      	adds	r0, #1
 800804c:	d1c9      	bne.n	8007fe2 <_puts_r+0x2e>
 800804e:	e7df      	b.n	8008010 <_puts_r+0x5c>
 8008050:	6823      	ldr	r3, [r4, #0]
 8008052:	250a      	movs	r5, #10
 8008054:	1c5a      	adds	r2, r3, #1
 8008056:	6022      	str	r2, [r4, #0]
 8008058:	701d      	strb	r5, [r3, #0]
 800805a:	e7db      	b.n	8008014 <_puts_r+0x60>

0800805c <puts>:
 800805c:	4b02      	ldr	r3, [pc, #8]	; (8008068 <puts+0xc>)
 800805e:	4601      	mov	r1, r0
 8008060:	6818      	ldr	r0, [r3, #0]
 8008062:	f7ff bfa7 	b.w	8007fb4 <_puts_r>
 8008066:	bf00      	nop
 8008068:	20000068 	.word	0x20000068

0800806c <memset>:
 800806c:	4402      	add	r2, r0
 800806e:	4603      	mov	r3, r0
 8008070:	4293      	cmp	r3, r2
 8008072:	d100      	bne.n	8008076 <memset+0xa>
 8008074:	4770      	bx	lr
 8008076:	f803 1b01 	strb.w	r1, [r3], #1
 800807a:	e7f9      	b.n	8008070 <memset+0x4>

0800807c <_reclaim_reent>:
 800807c:	4b29      	ldr	r3, [pc, #164]	; (8008124 <_reclaim_reent+0xa8>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4283      	cmp	r3, r0
 8008082:	b570      	push	{r4, r5, r6, lr}
 8008084:	4604      	mov	r4, r0
 8008086:	d04b      	beq.n	8008120 <_reclaim_reent+0xa4>
 8008088:	69c3      	ldr	r3, [r0, #28]
 800808a:	b143      	cbz	r3, 800809e <_reclaim_reent+0x22>
 800808c:	68db      	ldr	r3, [r3, #12]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d144      	bne.n	800811c <_reclaim_reent+0xa0>
 8008092:	69e3      	ldr	r3, [r4, #28]
 8008094:	6819      	ldr	r1, [r3, #0]
 8008096:	b111      	cbz	r1, 800809e <_reclaim_reent+0x22>
 8008098:	4620      	mov	r0, r4
 800809a:	f000 f881 	bl	80081a0 <_free_r>
 800809e:	6961      	ldr	r1, [r4, #20]
 80080a0:	b111      	cbz	r1, 80080a8 <_reclaim_reent+0x2c>
 80080a2:	4620      	mov	r0, r4
 80080a4:	f000 f87c 	bl	80081a0 <_free_r>
 80080a8:	69e1      	ldr	r1, [r4, #28]
 80080aa:	b111      	cbz	r1, 80080b2 <_reclaim_reent+0x36>
 80080ac:	4620      	mov	r0, r4
 80080ae:	f000 f877 	bl	80081a0 <_free_r>
 80080b2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80080b4:	b111      	cbz	r1, 80080bc <_reclaim_reent+0x40>
 80080b6:	4620      	mov	r0, r4
 80080b8:	f000 f872 	bl	80081a0 <_free_r>
 80080bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80080be:	b111      	cbz	r1, 80080c6 <_reclaim_reent+0x4a>
 80080c0:	4620      	mov	r0, r4
 80080c2:	f000 f86d 	bl	80081a0 <_free_r>
 80080c6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80080c8:	b111      	cbz	r1, 80080d0 <_reclaim_reent+0x54>
 80080ca:	4620      	mov	r0, r4
 80080cc:	f000 f868 	bl	80081a0 <_free_r>
 80080d0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80080d2:	b111      	cbz	r1, 80080da <_reclaim_reent+0x5e>
 80080d4:	4620      	mov	r0, r4
 80080d6:	f000 f863 	bl	80081a0 <_free_r>
 80080da:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80080dc:	b111      	cbz	r1, 80080e4 <_reclaim_reent+0x68>
 80080de:	4620      	mov	r0, r4
 80080e0:	f000 f85e 	bl	80081a0 <_free_r>
 80080e4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80080e6:	b111      	cbz	r1, 80080ee <_reclaim_reent+0x72>
 80080e8:	4620      	mov	r0, r4
 80080ea:	f000 f859 	bl	80081a0 <_free_r>
 80080ee:	6a23      	ldr	r3, [r4, #32]
 80080f0:	b1b3      	cbz	r3, 8008120 <_reclaim_reent+0xa4>
 80080f2:	4620      	mov	r0, r4
 80080f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80080f8:	4718      	bx	r3
 80080fa:	5949      	ldr	r1, [r1, r5]
 80080fc:	b941      	cbnz	r1, 8008110 <_reclaim_reent+0x94>
 80080fe:	3504      	adds	r5, #4
 8008100:	69e3      	ldr	r3, [r4, #28]
 8008102:	2d80      	cmp	r5, #128	; 0x80
 8008104:	68d9      	ldr	r1, [r3, #12]
 8008106:	d1f8      	bne.n	80080fa <_reclaim_reent+0x7e>
 8008108:	4620      	mov	r0, r4
 800810a:	f000 f849 	bl	80081a0 <_free_r>
 800810e:	e7c0      	b.n	8008092 <_reclaim_reent+0x16>
 8008110:	680e      	ldr	r6, [r1, #0]
 8008112:	4620      	mov	r0, r4
 8008114:	f000 f844 	bl	80081a0 <_free_r>
 8008118:	4631      	mov	r1, r6
 800811a:	e7ef      	b.n	80080fc <_reclaim_reent+0x80>
 800811c:	2500      	movs	r5, #0
 800811e:	e7ef      	b.n	8008100 <_reclaim_reent+0x84>
 8008120:	bd70      	pop	{r4, r5, r6, pc}
 8008122:	bf00      	nop
 8008124:	20000068 	.word	0x20000068

08008128 <__errno>:
 8008128:	4b01      	ldr	r3, [pc, #4]	; (8008130 <__errno+0x8>)
 800812a:	6818      	ldr	r0, [r3, #0]
 800812c:	4770      	bx	lr
 800812e:	bf00      	nop
 8008130:	20000068 	.word	0x20000068

08008134 <__libc_init_array>:
 8008134:	b570      	push	{r4, r5, r6, lr}
 8008136:	4d0d      	ldr	r5, [pc, #52]	; (800816c <__libc_init_array+0x38>)
 8008138:	4c0d      	ldr	r4, [pc, #52]	; (8008170 <__libc_init_array+0x3c>)
 800813a:	1b64      	subs	r4, r4, r5
 800813c:	10a4      	asrs	r4, r4, #2
 800813e:	2600      	movs	r6, #0
 8008140:	42a6      	cmp	r6, r4
 8008142:	d109      	bne.n	8008158 <__libc_init_array+0x24>
 8008144:	4d0b      	ldr	r5, [pc, #44]	; (8008174 <__libc_init_array+0x40>)
 8008146:	4c0c      	ldr	r4, [pc, #48]	; (8008178 <__libc_init_array+0x44>)
 8008148:	f000 fe56 	bl	8008df8 <_init>
 800814c:	1b64      	subs	r4, r4, r5
 800814e:	10a4      	asrs	r4, r4, #2
 8008150:	2600      	movs	r6, #0
 8008152:	42a6      	cmp	r6, r4
 8008154:	d105      	bne.n	8008162 <__libc_init_array+0x2e>
 8008156:	bd70      	pop	{r4, r5, r6, pc}
 8008158:	f855 3b04 	ldr.w	r3, [r5], #4
 800815c:	4798      	blx	r3
 800815e:	3601      	adds	r6, #1
 8008160:	e7ee      	b.n	8008140 <__libc_init_array+0xc>
 8008162:	f855 3b04 	ldr.w	r3, [r5], #4
 8008166:	4798      	blx	r3
 8008168:	3601      	adds	r6, #1
 800816a:	e7f2      	b.n	8008152 <__libc_init_array+0x1e>
 800816c:	08008fcc 	.word	0x08008fcc
 8008170:	08008fcc 	.word	0x08008fcc
 8008174:	08008fcc 	.word	0x08008fcc
 8008178:	08008fd0 	.word	0x08008fd0

0800817c <__retarget_lock_init_recursive>:
 800817c:	4770      	bx	lr

0800817e <__retarget_lock_acquire_recursive>:
 800817e:	4770      	bx	lr

08008180 <__retarget_lock_release_recursive>:
 8008180:	4770      	bx	lr

08008182 <memcpy>:
 8008182:	440a      	add	r2, r1
 8008184:	4291      	cmp	r1, r2
 8008186:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800818a:	d100      	bne.n	800818e <memcpy+0xc>
 800818c:	4770      	bx	lr
 800818e:	b510      	push	{r4, lr}
 8008190:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008194:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008198:	4291      	cmp	r1, r2
 800819a:	d1f9      	bne.n	8008190 <memcpy+0xe>
 800819c:	bd10      	pop	{r4, pc}
	...

080081a0 <_free_r>:
 80081a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80081a2:	2900      	cmp	r1, #0
 80081a4:	d044      	beq.n	8008230 <_free_r+0x90>
 80081a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081aa:	9001      	str	r0, [sp, #4]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	f1a1 0404 	sub.w	r4, r1, #4
 80081b2:	bfb8      	it	lt
 80081b4:	18e4      	addlt	r4, r4, r3
 80081b6:	f000 fc61 	bl	8008a7c <__malloc_lock>
 80081ba:	4a1e      	ldr	r2, [pc, #120]	; (8008234 <_free_r+0x94>)
 80081bc:	9801      	ldr	r0, [sp, #4]
 80081be:	6813      	ldr	r3, [r2, #0]
 80081c0:	b933      	cbnz	r3, 80081d0 <_free_r+0x30>
 80081c2:	6063      	str	r3, [r4, #4]
 80081c4:	6014      	str	r4, [r2, #0]
 80081c6:	b003      	add	sp, #12
 80081c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80081cc:	f000 bc5c 	b.w	8008a88 <__malloc_unlock>
 80081d0:	42a3      	cmp	r3, r4
 80081d2:	d908      	bls.n	80081e6 <_free_r+0x46>
 80081d4:	6825      	ldr	r5, [r4, #0]
 80081d6:	1961      	adds	r1, r4, r5
 80081d8:	428b      	cmp	r3, r1
 80081da:	bf01      	itttt	eq
 80081dc:	6819      	ldreq	r1, [r3, #0]
 80081de:	685b      	ldreq	r3, [r3, #4]
 80081e0:	1949      	addeq	r1, r1, r5
 80081e2:	6021      	streq	r1, [r4, #0]
 80081e4:	e7ed      	b.n	80081c2 <_free_r+0x22>
 80081e6:	461a      	mov	r2, r3
 80081e8:	685b      	ldr	r3, [r3, #4]
 80081ea:	b10b      	cbz	r3, 80081f0 <_free_r+0x50>
 80081ec:	42a3      	cmp	r3, r4
 80081ee:	d9fa      	bls.n	80081e6 <_free_r+0x46>
 80081f0:	6811      	ldr	r1, [r2, #0]
 80081f2:	1855      	adds	r5, r2, r1
 80081f4:	42a5      	cmp	r5, r4
 80081f6:	d10b      	bne.n	8008210 <_free_r+0x70>
 80081f8:	6824      	ldr	r4, [r4, #0]
 80081fa:	4421      	add	r1, r4
 80081fc:	1854      	adds	r4, r2, r1
 80081fe:	42a3      	cmp	r3, r4
 8008200:	6011      	str	r1, [r2, #0]
 8008202:	d1e0      	bne.n	80081c6 <_free_r+0x26>
 8008204:	681c      	ldr	r4, [r3, #0]
 8008206:	685b      	ldr	r3, [r3, #4]
 8008208:	6053      	str	r3, [r2, #4]
 800820a:	440c      	add	r4, r1
 800820c:	6014      	str	r4, [r2, #0]
 800820e:	e7da      	b.n	80081c6 <_free_r+0x26>
 8008210:	d902      	bls.n	8008218 <_free_r+0x78>
 8008212:	230c      	movs	r3, #12
 8008214:	6003      	str	r3, [r0, #0]
 8008216:	e7d6      	b.n	80081c6 <_free_r+0x26>
 8008218:	6825      	ldr	r5, [r4, #0]
 800821a:	1961      	adds	r1, r4, r5
 800821c:	428b      	cmp	r3, r1
 800821e:	bf04      	itt	eq
 8008220:	6819      	ldreq	r1, [r3, #0]
 8008222:	685b      	ldreq	r3, [r3, #4]
 8008224:	6063      	str	r3, [r4, #4]
 8008226:	bf04      	itt	eq
 8008228:	1949      	addeq	r1, r1, r5
 800822a:	6021      	streq	r1, [r4, #0]
 800822c:	6054      	str	r4, [r2, #4]
 800822e:	e7ca      	b.n	80081c6 <_free_r+0x26>
 8008230:	b003      	add	sp, #12
 8008232:	bd30      	pop	{r4, r5, pc}
 8008234:	2000261c 	.word	0x2000261c

08008238 <__sfputc_r>:
 8008238:	6893      	ldr	r3, [r2, #8]
 800823a:	3b01      	subs	r3, #1
 800823c:	2b00      	cmp	r3, #0
 800823e:	b410      	push	{r4}
 8008240:	6093      	str	r3, [r2, #8]
 8008242:	da08      	bge.n	8008256 <__sfputc_r+0x1e>
 8008244:	6994      	ldr	r4, [r2, #24]
 8008246:	42a3      	cmp	r3, r4
 8008248:	db01      	blt.n	800824e <__sfputc_r+0x16>
 800824a:	290a      	cmp	r1, #10
 800824c:	d103      	bne.n	8008256 <__sfputc_r+0x1e>
 800824e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008252:	f000 bc62 	b.w	8008b1a <__swbuf_r>
 8008256:	6813      	ldr	r3, [r2, #0]
 8008258:	1c58      	adds	r0, r3, #1
 800825a:	6010      	str	r0, [r2, #0]
 800825c:	7019      	strb	r1, [r3, #0]
 800825e:	4608      	mov	r0, r1
 8008260:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008264:	4770      	bx	lr

08008266 <__sfputs_r>:
 8008266:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008268:	4606      	mov	r6, r0
 800826a:	460f      	mov	r7, r1
 800826c:	4614      	mov	r4, r2
 800826e:	18d5      	adds	r5, r2, r3
 8008270:	42ac      	cmp	r4, r5
 8008272:	d101      	bne.n	8008278 <__sfputs_r+0x12>
 8008274:	2000      	movs	r0, #0
 8008276:	e007      	b.n	8008288 <__sfputs_r+0x22>
 8008278:	f814 1b01 	ldrb.w	r1, [r4], #1
 800827c:	463a      	mov	r2, r7
 800827e:	4630      	mov	r0, r6
 8008280:	f7ff ffda 	bl	8008238 <__sfputc_r>
 8008284:	1c43      	adds	r3, r0, #1
 8008286:	d1f3      	bne.n	8008270 <__sfputs_r+0xa>
 8008288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800828c <_vfiprintf_r>:
 800828c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008290:	460d      	mov	r5, r1
 8008292:	b09d      	sub	sp, #116	; 0x74
 8008294:	4614      	mov	r4, r2
 8008296:	4698      	mov	r8, r3
 8008298:	4606      	mov	r6, r0
 800829a:	b118      	cbz	r0, 80082a4 <_vfiprintf_r+0x18>
 800829c:	6a03      	ldr	r3, [r0, #32]
 800829e:	b90b      	cbnz	r3, 80082a4 <_vfiprintf_r+0x18>
 80082a0:	f7ff fe40 	bl	8007f24 <__sinit>
 80082a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80082a6:	07d9      	lsls	r1, r3, #31
 80082a8:	d405      	bmi.n	80082b6 <_vfiprintf_r+0x2a>
 80082aa:	89ab      	ldrh	r3, [r5, #12]
 80082ac:	059a      	lsls	r2, r3, #22
 80082ae:	d402      	bmi.n	80082b6 <_vfiprintf_r+0x2a>
 80082b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80082b2:	f7ff ff64 	bl	800817e <__retarget_lock_acquire_recursive>
 80082b6:	89ab      	ldrh	r3, [r5, #12]
 80082b8:	071b      	lsls	r3, r3, #28
 80082ba:	d501      	bpl.n	80082c0 <_vfiprintf_r+0x34>
 80082bc:	692b      	ldr	r3, [r5, #16]
 80082be:	b99b      	cbnz	r3, 80082e8 <_vfiprintf_r+0x5c>
 80082c0:	4629      	mov	r1, r5
 80082c2:	4630      	mov	r0, r6
 80082c4:	f000 fc66 	bl	8008b94 <__swsetup_r>
 80082c8:	b170      	cbz	r0, 80082e8 <_vfiprintf_r+0x5c>
 80082ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80082cc:	07dc      	lsls	r4, r3, #31
 80082ce:	d504      	bpl.n	80082da <_vfiprintf_r+0x4e>
 80082d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80082d4:	b01d      	add	sp, #116	; 0x74
 80082d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082da:	89ab      	ldrh	r3, [r5, #12]
 80082dc:	0598      	lsls	r0, r3, #22
 80082de:	d4f7      	bmi.n	80082d0 <_vfiprintf_r+0x44>
 80082e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80082e2:	f7ff ff4d 	bl	8008180 <__retarget_lock_release_recursive>
 80082e6:	e7f3      	b.n	80082d0 <_vfiprintf_r+0x44>
 80082e8:	2300      	movs	r3, #0
 80082ea:	9309      	str	r3, [sp, #36]	; 0x24
 80082ec:	2320      	movs	r3, #32
 80082ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80082f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80082f6:	2330      	movs	r3, #48	; 0x30
 80082f8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80084ac <_vfiprintf_r+0x220>
 80082fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008300:	f04f 0901 	mov.w	r9, #1
 8008304:	4623      	mov	r3, r4
 8008306:	469a      	mov	sl, r3
 8008308:	f813 2b01 	ldrb.w	r2, [r3], #1
 800830c:	b10a      	cbz	r2, 8008312 <_vfiprintf_r+0x86>
 800830e:	2a25      	cmp	r2, #37	; 0x25
 8008310:	d1f9      	bne.n	8008306 <_vfiprintf_r+0x7a>
 8008312:	ebba 0b04 	subs.w	fp, sl, r4
 8008316:	d00b      	beq.n	8008330 <_vfiprintf_r+0xa4>
 8008318:	465b      	mov	r3, fp
 800831a:	4622      	mov	r2, r4
 800831c:	4629      	mov	r1, r5
 800831e:	4630      	mov	r0, r6
 8008320:	f7ff ffa1 	bl	8008266 <__sfputs_r>
 8008324:	3001      	adds	r0, #1
 8008326:	f000 80a9 	beq.w	800847c <_vfiprintf_r+0x1f0>
 800832a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800832c:	445a      	add	r2, fp
 800832e:	9209      	str	r2, [sp, #36]	; 0x24
 8008330:	f89a 3000 	ldrb.w	r3, [sl]
 8008334:	2b00      	cmp	r3, #0
 8008336:	f000 80a1 	beq.w	800847c <_vfiprintf_r+0x1f0>
 800833a:	2300      	movs	r3, #0
 800833c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008340:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008344:	f10a 0a01 	add.w	sl, sl, #1
 8008348:	9304      	str	r3, [sp, #16]
 800834a:	9307      	str	r3, [sp, #28]
 800834c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008350:	931a      	str	r3, [sp, #104]	; 0x68
 8008352:	4654      	mov	r4, sl
 8008354:	2205      	movs	r2, #5
 8008356:	f814 1b01 	ldrb.w	r1, [r4], #1
 800835a:	4854      	ldr	r0, [pc, #336]	; (80084ac <_vfiprintf_r+0x220>)
 800835c:	f7f7 ff38 	bl	80001d0 <memchr>
 8008360:	9a04      	ldr	r2, [sp, #16]
 8008362:	b9d8      	cbnz	r0, 800839c <_vfiprintf_r+0x110>
 8008364:	06d1      	lsls	r1, r2, #27
 8008366:	bf44      	itt	mi
 8008368:	2320      	movmi	r3, #32
 800836a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800836e:	0713      	lsls	r3, r2, #28
 8008370:	bf44      	itt	mi
 8008372:	232b      	movmi	r3, #43	; 0x2b
 8008374:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008378:	f89a 3000 	ldrb.w	r3, [sl]
 800837c:	2b2a      	cmp	r3, #42	; 0x2a
 800837e:	d015      	beq.n	80083ac <_vfiprintf_r+0x120>
 8008380:	9a07      	ldr	r2, [sp, #28]
 8008382:	4654      	mov	r4, sl
 8008384:	2000      	movs	r0, #0
 8008386:	f04f 0c0a 	mov.w	ip, #10
 800838a:	4621      	mov	r1, r4
 800838c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008390:	3b30      	subs	r3, #48	; 0x30
 8008392:	2b09      	cmp	r3, #9
 8008394:	d94d      	bls.n	8008432 <_vfiprintf_r+0x1a6>
 8008396:	b1b0      	cbz	r0, 80083c6 <_vfiprintf_r+0x13a>
 8008398:	9207      	str	r2, [sp, #28]
 800839a:	e014      	b.n	80083c6 <_vfiprintf_r+0x13a>
 800839c:	eba0 0308 	sub.w	r3, r0, r8
 80083a0:	fa09 f303 	lsl.w	r3, r9, r3
 80083a4:	4313      	orrs	r3, r2
 80083a6:	9304      	str	r3, [sp, #16]
 80083a8:	46a2      	mov	sl, r4
 80083aa:	e7d2      	b.n	8008352 <_vfiprintf_r+0xc6>
 80083ac:	9b03      	ldr	r3, [sp, #12]
 80083ae:	1d19      	adds	r1, r3, #4
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	9103      	str	r1, [sp, #12]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	bfbb      	ittet	lt
 80083b8:	425b      	neglt	r3, r3
 80083ba:	f042 0202 	orrlt.w	r2, r2, #2
 80083be:	9307      	strge	r3, [sp, #28]
 80083c0:	9307      	strlt	r3, [sp, #28]
 80083c2:	bfb8      	it	lt
 80083c4:	9204      	strlt	r2, [sp, #16]
 80083c6:	7823      	ldrb	r3, [r4, #0]
 80083c8:	2b2e      	cmp	r3, #46	; 0x2e
 80083ca:	d10c      	bne.n	80083e6 <_vfiprintf_r+0x15a>
 80083cc:	7863      	ldrb	r3, [r4, #1]
 80083ce:	2b2a      	cmp	r3, #42	; 0x2a
 80083d0:	d134      	bne.n	800843c <_vfiprintf_r+0x1b0>
 80083d2:	9b03      	ldr	r3, [sp, #12]
 80083d4:	1d1a      	adds	r2, r3, #4
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	9203      	str	r2, [sp, #12]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	bfb8      	it	lt
 80083de:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80083e2:	3402      	adds	r4, #2
 80083e4:	9305      	str	r3, [sp, #20]
 80083e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80084bc <_vfiprintf_r+0x230>
 80083ea:	7821      	ldrb	r1, [r4, #0]
 80083ec:	2203      	movs	r2, #3
 80083ee:	4650      	mov	r0, sl
 80083f0:	f7f7 feee 	bl	80001d0 <memchr>
 80083f4:	b138      	cbz	r0, 8008406 <_vfiprintf_r+0x17a>
 80083f6:	9b04      	ldr	r3, [sp, #16]
 80083f8:	eba0 000a 	sub.w	r0, r0, sl
 80083fc:	2240      	movs	r2, #64	; 0x40
 80083fe:	4082      	lsls	r2, r0
 8008400:	4313      	orrs	r3, r2
 8008402:	3401      	adds	r4, #1
 8008404:	9304      	str	r3, [sp, #16]
 8008406:	f814 1b01 	ldrb.w	r1, [r4], #1
 800840a:	4829      	ldr	r0, [pc, #164]	; (80084b0 <_vfiprintf_r+0x224>)
 800840c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008410:	2206      	movs	r2, #6
 8008412:	f7f7 fedd 	bl	80001d0 <memchr>
 8008416:	2800      	cmp	r0, #0
 8008418:	d03f      	beq.n	800849a <_vfiprintf_r+0x20e>
 800841a:	4b26      	ldr	r3, [pc, #152]	; (80084b4 <_vfiprintf_r+0x228>)
 800841c:	bb1b      	cbnz	r3, 8008466 <_vfiprintf_r+0x1da>
 800841e:	9b03      	ldr	r3, [sp, #12]
 8008420:	3307      	adds	r3, #7
 8008422:	f023 0307 	bic.w	r3, r3, #7
 8008426:	3308      	adds	r3, #8
 8008428:	9303      	str	r3, [sp, #12]
 800842a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800842c:	443b      	add	r3, r7
 800842e:	9309      	str	r3, [sp, #36]	; 0x24
 8008430:	e768      	b.n	8008304 <_vfiprintf_r+0x78>
 8008432:	fb0c 3202 	mla	r2, ip, r2, r3
 8008436:	460c      	mov	r4, r1
 8008438:	2001      	movs	r0, #1
 800843a:	e7a6      	b.n	800838a <_vfiprintf_r+0xfe>
 800843c:	2300      	movs	r3, #0
 800843e:	3401      	adds	r4, #1
 8008440:	9305      	str	r3, [sp, #20]
 8008442:	4619      	mov	r1, r3
 8008444:	f04f 0c0a 	mov.w	ip, #10
 8008448:	4620      	mov	r0, r4
 800844a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800844e:	3a30      	subs	r2, #48	; 0x30
 8008450:	2a09      	cmp	r2, #9
 8008452:	d903      	bls.n	800845c <_vfiprintf_r+0x1d0>
 8008454:	2b00      	cmp	r3, #0
 8008456:	d0c6      	beq.n	80083e6 <_vfiprintf_r+0x15a>
 8008458:	9105      	str	r1, [sp, #20]
 800845a:	e7c4      	b.n	80083e6 <_vfiprintf_r+0x15a>
 800845c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008460:	4604      	mov	r4, r0
 8008462:	2301      	movs	r3, #1
 8008464:	e7f0      	b.n	8008448 <_vfiprintf_r+0x1bc>
 8008466:	ab03      	add	r3, sp, #12
 8008468:	9300      	str	r3, [sp, #0]
 800846a:	462a      	mov	r2, r5
 800846c:	4b12      	ldr	r3, [pc, #72]	; (80084b8 <_vfiprintf_r+0x22c>)
 800846e:	a904      	add	r1, sp, #16
 8008470:	4630      	mov	r0, r6
 8008472:	f3af 8000 	nop.w
 8008476:	4607      	mov	r7, r0
 8008478:	1c78      	adds	r0, r7, #1
 800847a:	d1d6      	bne.n	800842a <_vfiprintf_r+0x19e>
 800847c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800847e:	07d9      	lsls	r1, r3, #31
 8008480:	d405      	bmi.n	800848e <_vfiprintf_r+0x202>
 8008482:	89ab      	ldrh	r3, [r5, #12]
 8008484:	059a      	lsls	r2, r3, #22
 8008486:	d402      	bmi.n	800848e <_vfiprintf_r+0x202>
 8008488:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800848a:	f7ff fe79 	bl	8008180 <__retarget_lock_release_recursive>
 800848e:	89ab      	ldrh	r3, [r5, #12]
 8008490:	065b      	lsls	r3, r3, #25
 8008492:	f53f af1d 	bmi.w	80082d0 <_vfiprintf_r+0x44>
 8008496:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008498:	e71c      	b.n	80082d4 <_vfiprintf_r+0x48>
 800849a:	ab03      	add	r3, sp, #12
 800849c:	9300      	str	r3, [sp, #0]
 800849e:	462a      	mov	r2, r5
 80084a0:	4b05      	ldr	r3, [pc, #20]	; (80084b8 <_vfiprintf_r+0x22c>)
 80084a2:	a904      	add	r1, sp, #16
 80084a4:	4630      	mov	r0, r6
 80084a6:	f000 f919 	bl	80086dc <_printf_i>
 80084aa:	e7e4      	b.n	8008476 <_vfiprintf_r+0x1ea>
 80084ac:	08008f90 	.word	0x08008f90
 80084b0:	08008f9a 	.word	0x08008f9a
 80084b4:	00000000 	.word	0x00000000
 80084b8:	08008267 	.word	0x08008267
 80084bc:	08008f96 	.word	0x08008f96

080084c0 <sbrk_aligned>:
 80084c0:	b570      	push	{r4, r5, r6, lr}
 80084c2:	4e0e      	ldr	r6, [pc, #56]	; (80084fc <sbrk_aligned+0x3c>)
 80084c4:	460c      	mov	r4, r1
 80084c6:	6831      	ldr	r1, [r6, #0]
 80084c8:	4605      	mov	r5, r0
 80084ca:	b911      	cbnz	r1, 80084d2 <sbrk_aligned+0x12>
 80084cc:	f000 fc72 	bl	8008db4 <_sbrk_r>
 80084d0:	6030      	str	r0, [r6, #0]
 80084d2:	4621      	mov	r1, r4
 80084d4:	4628      	mov	r0, r5
 80084d6:	f000 fc6d 	bl	8008db4 <_sbrk_r>
 80084da:	1c43      	adds	r3, r0, #1
 80084dc:	d00a      	beq.n	80084f4 <sbrk_aligned+0x34>
 80084de:	1cc4      	adds	r4, r0, #3
 80084e0:	f024 0403 	bic.w	r4, r4, #3
 80084e4:	42a0      	cmp	r0, r4
 80084e6:	d007      	beq.n	80084f8 <sbrk_aligned+0x38>
 80084e8:	1a21      	subs	r1, r4, r0
 80084ea:	4628      	mov	r0, r5
 80084ec:	f000 fc62 	bl	8008db4 <_sbrk_r>
 80084f0:	3001      	adds	r0, #1
 80084f2:	d101      	bne.n	80084f8 <sbrk_aligned+0x38>
 80084f4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80084f8:	4620      	mov	r0, r4
 80084fa:	bd70      	pop	{r4, r5, r6, pc}
 80084fc:	20002620 	.word	0x20002620

08008500 <_malloc_r>:
 8008500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008504:	1ccd      	adds	r5, r1, #3
 8008506:	f025 0503 	bic.w	r5, r5, #3
 800850a:	3508      	adds	r5, #8
 800850c:	2d0c      	cmp	r5, #12
 800850e:	bf38      	it	cc
 8008510:	250c      	movcc	r5, #12
 8008512:	2d00      	cmp	r5, #0
 8008514:	4607      	mov	r7, r0
 8008516:	db01      	blt.n	800851c <_malloc_r+0x1c>
 8008518:	42a9      	cmp	r1, r5
 800851a:	d905      	bls.n	8008528 <_malloc_r+0x28>
 800851c:	230c      	movs	r3, #12
 800851e:	603b      	str	r3, [r7, #0]
 8008520:	2600      	movs	r6, #0
 8008522:	4630      	mov	r0, r6
 8008524:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008528:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80085fc <_malloc_r+0xfc>
 800852c:	f000 faa6 	bl	8008a7c <__malloc_lock>
 8008530:	f8d8 3000 	ldr.w	r3, [r8]
 8008534:	461c      	mov	r4, r3
 8008536:	bb5c      	cbnz	r4, 8008590 <_malloc_r+0x90>
 8008538:	4629      	mov	r1, r5
 800853a:	4638      	mov	r0, r7
 800853c:	f7ff ffc0 	bl	80084c0 <sbrk_aligned>
 8008540:	1c43      	adds	r3, r0, #1
 8008542:	4604      	mov	r4, r0
 8008544:	d155      	bne.n	80085f2 <_malloc_r+0xf2>
 8008546:	f8d8 4000 	ldr.w	r4, [r8]
 800854a:	4626      	mov	r6, r4
 800854c:	2e00      	cmp	r6, #0
 800854e:	d145      	bne.n	80085dc <_malloc_r+0xdc>
 8008550:	2c00      	cmp	r4, #0
 8008552:	d048      	beq.n	80085e6 <_malloc_r+0xe6>
 8008554:	6823      	ldr	r3, [r4, #0]
 8008556:	4631      	mov	r1, r6
 8008558:	4638      	mov	r0, r7
 800855a:	eb04 0903 	add.w	r9, r4, r3
 800855e:	f000 fc29 	bl	8008db4 <_sbrk_r>
 8008562:	4581      	cmp	r9, r0
 8008564:	d13f      	bne.n	80085e6 <_malloc_r+0xe6>
 8008566:	6821      	ldr	r1, [r4, #0]
 8008568:	1a6d      	subs	r5, r5, r1
 800856a:	4629      	mov	r1, r5
 800856c:	4638      	mov	r0, r7
 800856e:	f7ff ffa7 	bl	80084c0 <sbrk_aligned>
 8008572:	3001      	adds	r0, #1
 8008574:	d037      	beq.n	80085e6 <_malloc_r+0xe6>
 8008576:	6823      	ldr	r3, [r4, #0]
 8008578:	442b      	add	r3, r5
 800857a:	6023      	str	r3, [r4, #0]
 800857c:	f8d8 3000 	ldr.w	r3, [r8]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d038      	beq.n	80085f6 <_malloc_r+0xf6>
 8008584:	685a      	ldr	r2, [r3, #4]
 8008586:	42a2      	cmp	r2, r4
 8008588:	d12b      	bne.n	80085e2 <_malloc_r+0xe2>
 800858a:	2200      	movs	r2, #0
 800858c:	605a      	str	r2, [r3, #4]
 800858e:	e00f      	b.n	80085b0 <_malloc_r+0xb0>
 8008590:	6822      	ldr	r2, [r4, #0]
 8008592:	1b52      	subs	r2, r2, r5
 8008594:	d41f      	bmi.n	80085d6 <_malloc_r+0xd6>
 8008596:	2a0b      	cmp	r2, #11
 8008598:	d917      	bls.n	80085ca <_malloc_r+0xca>
 800859a:	1961      	adds	r1, r4, r5
 800859c:	42a3      	cmp	r3, r4
 800859e:	6025      	str	r5, [r4, #0]
 80085a0:	bf18      	it	ne
 80085a2:	6059      	strne	r1, [r3, #4]
 80085a4:	6863      	ldr	r3, [r4, #4]
 80085a6:	bf08      	it	eq
 80085a8:	f8c8 1000 	streq.w	r1, [r8]
 80085ac:	5162      	str	r2, [r4, r5]
 80085ae:	604b      	str	r3, [r1, #4]
 80085b0:	4638      	mov	r0, r7
 80085b2:	f104 060b 	add.w	r6, r4, #11
 80085b6:	f000 fa67 	bl	8008a88 <__malloc_unlock>
 80085ba:	f026 0607 	bic.w	r6, r6, #7
 80085be:	1d23      	adds	r3, r4, #4
 80085c0:	1af2      	subs	r2, r6, r3
 80085c2:	d0ae      	beq.n	8008522 <_malloc_r+0x22>
 80085c4:	1b9b      	subs	r3, r3, r6
 80085c6:	50a3      	str	r3, [r4, r2]
 80085c8:	e7ab      	b.n	8008522 <_malloc_r+0x22>
 80085ca:	42a3      	cmp	r3, r4
 80085cc:	6862      	ldr	r2, [r4, #4]
 80085ce:	d1dd      	bne.n	800858c <_malloc_r+0x8c>
 80085d0:	f8c8 2000 	str.w	r2, [r8]
 80085d4:	e7ec      	b.n	80085b0 <_malloc_r+0xb0>
 80085d6:	4623      	mov	r3, r4
 80085d8:	6864      	ldr	r4, [r4, #4]
 80085da:	e7ac      	b.n	8008536 <_malloc_r+0x36>
 80085dc:	4634      	mov	r4, r6
 80085de:	6876      	ldr	r6, [r6, #4]
 80085e0:	e7b4      	b.n	800854c <_malloc_r+0x4c>
 80085e2:	4613      	mov	r3, r2
 80085e4:	e7cc      	b.n	8008580 <_malloc_r+0x80>
 80085e6:	230c      	movs	r3, #12
 80085e8:	603b      	str	r3, [r7, #0]
 80085ea:	4638      	mov	r0, r7
 80085ec:	f000 fa4c 	bl	8008a88 <__malloc_unlock>
 80085f0:	e797      	b.n	8008522 <_malloc_r+0x22>
 80085f2:	6025      	str	r5, [r4, #0]
 80085f4:	e7dc      	b.n	80085b0 <_malloc_r+0xb0>
 80085f6:	605b      	str	r3, [r3, #4]
 80085f8:	deff      	udf	#255	; 0xff
 80085fa:	bf00      	nop
 80085fc:	2000261c 	.word	0x2000261c

08008600 <_printf_common>:
 8008600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008604:	4616      	mov	r6, r2
 8008606:	4699      	mov	r9, r3
 8008608:	688a      	ldr	r2, [r1, #8]
 800860a:	690b      	ldr	r3, [r1, #16]
 800860c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008610:	4293      	cmp	r3, r2
 8008612:	bfb8      	it	lt
 8008614:	4613      	movlt	r3, r2
 8008616:	6033      	str	r3, [r6, #0]
 8008618:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800861c:	4607      	mov	r7, r0
 800861e:	460c      	mov	r4, r1
 8008620:	b10a      	cbz	r2, 8008626 <_printf_common+0x26>
 8008622:	3301      	adds	r3, #1
 8008624:	6033      	str	r3, [r6, #0]
 8008626:	6823      	ldr	r3, [r4, #0]
 8008628:	0699      	lsls	r1, r3, #26
 800862a:	bf42      	ittt	mi
 800862c:	6833      	ldrmi	r3, [r6, #0]
 800862e:	3302      	addmi	r3, #2
 8008630:	6033      	strmi	r3, [r6, #0]
 8008632:	6825      	ldr	r5, [r4, #0]
 8008634:	f015 0506 	ands.w	r5, r5, #6
 8008638:	d106      	bne.n	8008648 <_printf_common+0x48>
 800863a:	f104 0a19 	add.w	sl, r4, #25
 800863e:	68e3      	ldr	r3, [r4, #12]
 8008640:	6832      	ldr	r2, [r6, #0]
 8008642:	1a9b      	subs	r3, r3, r2
 8008644:	42ab      	cmp	r3, r5
 8008646:	dc26      	bgt.n	8008696 <_printf_common+0x96>
 8008648:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800864c:	1e13      	subs	r3, r2, #0
 800864e:	6822      	ldr	r2, [r4, #0]
 8008650:	bf18      	it	ne
 8008652:	2301      	movne	r3, #1
 8008654:	0692      	lsls	r2, r2, #26
 8008656:	d42b      	bmi.n	80086b0 <_printf_common+0xb0>
 8008658:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800865c:	4649      	mov	r1, r9
 800865e:	4638      	mov	r0, r7
 8008660:	47c0      	blx	r8
 8008662:	3001      	adds	r0, #1
 8008664:	d01e      	beq.n	80086a4 <_printf_common+0xa4>
 8008666:	6823      	ldr	r3, [r4, #0]
 8008668:	6922      	ldr	r2, [r4, #16]
 800866a:	f003 0306 	and.w	r3, r3, #6
 800866e:	2b04      	cmp	r3, #4
 8008670:	bf02      	ittt	eq
 8008672:	68e5      	ldreq	r5, [r4, #12]
 8008674:	6833      	ldreq	r3, [r6, #0]
 8008676:	1aed      	subeq	r5, r5, r3
 8008678:	68a3      	ldr	r3, [r4, #8]
 800867a:	bf0c      	ite	eq
 800867c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008680:	2500      	movne	r5, #0
 8008682:	4293      	cmp	r3, r2
 8008684:	bfc4      	itt	gt
 8008686:	1a9b      	subgt	r3, r3, r2
 8008688:	18ed      	addgt	r5, r5, r3
 800868a:	2600      	movs	r6, #0
 800868c:	341a      	adds	r4, #26
 800868e:	42b5      	cmp	r5, r6
 8008690:	d11a      	bne.n	80086c8 <_printf_common+0xc8>
 8008692:	2000      	movs	r0, #0
 8008694:	e008      	b.n	80086a8 <_printf_common+0xa8>
 8008696:	2301      	movs	r3, #1
 8008698:	4652      	mov	r2, sl
 800869a:	4649      	mov	r1, r9
 800869c:	4638      	mov	r0, r7
 800869e:	47c0      	blx	r8
 80086a0:	3001      	adds	r0, #1
 80086a2:	d103      	bne.n	80086ac <_printf_common+0xac>
 80086a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80086a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086ac:	3501      	adds	r5, #1
 80086ae:	e7c6      	b.n	800863e <_printf_common+0x3e>
 80086b0:	18e1      	adds	r1, r4, r3
 80086b2:	1c5a      	adds	r2, r3, #1
 80086b4:	2030      	movs	r0, #48	; 0x30
 80086b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80086ba:	4422      	add	r2, r4
 80086bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80086c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80086c4:	3302      	adds	r3, #2
 80086c6:	e7c7      	b.n	8008658 <_printf_common+0x58>
 80086c8:	2301      	movs	r3, #1
 80086ca:	4622      	mov	r2, r4
 80086cc:	4649      	mov	r1, r9
 80086ce:	4638      	mov	r0, r7
 80086d0:	47c0      	blx	r8
 80086d2:	3001      	adds	r0, #1
 80086d4:	d0e6      	beq.n	80086a4 <_printf_common+0xa4>
 80086d6:	3601      	adds	r6, #1
 80086d8:	e7d9      	b.n	800868e <_printf_common+0x8e>
	...

080086dc <_printf_i>:
 80086dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80086e0:	7e0f      	ldrb	r7, [r1, #24]
 80086e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80086e4:	2f78      	cmp	r7, #120	; 0x78
 80086e6:	4691      	mov	r9, r2
 80086e8:	4680      	mov	r8, r0
 80086ea:	460c      	mov	r4, r1
 80086ec:	469a      	mov	sl, r3
 80086ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80086f2:	d807      	bhi.n	8008704 <_printf_i+0x28>
 80086f4:	2f62      	cmp	r7, #98	; 0x62
 80086f6:	d80a      	bhi.n	800870e <_printf_i+0x32>
 80086f8:	2f00      	cmp	r7, #0
 80086fa:	f000 80d4 	beq.w	80088a6 <_printf_i+0x1ca>
 80086fe:	2f58      	cmp	r7, #88	; 0x58
 8008700:	f000 80c0 	beq.w	8008884 <_printf_i+0x1a8>
 8008704:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008708:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800870c:	e03a      	b.n	8008784 <_printf_i+0xa8>
 800870e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008712:	2b15      	cmp	r3, #21
 8008714:	d8f6      	bhi.n	8008704 <_printf_i+0x28>
 8008716:	a101      	add	r1, pc, #4	; (adr r1, 800871c <_printf_i+0x40>)
 8008718:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800871c:	08008775 	.word	0x08008775
 8008720:	08008789 	.word	0x08008789
 8008724:	08008705 	.word	0x08008705
 8008728:	08008705 	.word	0x08008705
 800872c:	08008705 	.word	0x08008705
 8008730:	08008705 	.word	0x08008705
 8008734:	08008789 	.word	0x08008789
 8008738:	08008705 	.word	0x08008705
 800873c:	08008705 	.word	0x08008705
 8008740:	08008705 	.word	0x08008705
 8008744:	08008705 	.word	0x08008705
 8008748:	0800888d 	.word	0x0800888d
 800874c:	080087b5 	.word	0x080087b5
 8008750:	08008847 	.word	0x08008847
 8008754:	08008705 	.word	0x08008705
 8008758:	08008705 	.word	0x08008705
 800875c:	080088af 	.word	0x080088af
 8008760:	08008705 	.word	0x08008705
 8008764:	080087b5 	.word	0x080087b5
 8008768:	08008705 	.word	0x08008705
 800876c:	08008705 	.word	0x08008705
 8008770:	0800884f 	.word	0x0800884f
 8008774:	682b      	ldr	r3, [r5, #0]
 8008776:	1d1a      	adds	r2, r3, #4
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	602a      	str	r2, [r5, #0]
 800877c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008780:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008784:	2301      	movs	r3, #1
 8008786:	e09f      	b.n	80088c8 <_printf_i+0x1ec>
 8008788:	6820      	ldr	r0, [r4, #0]
 800878a:	682b      	ldr	r3, [r5, #0]
 800878c:	0607      	lsls	r7, r0, #24
 800878e:	f103 0104 	add.w	r1, r3, #4
 8008792:	6029      	str	r1, [r5, #0]
 8008794:	d501      	bpl.n	800879a <_printf_i+0xbe>
 8008796:	681e      	ldr	r6, [r3, #0]
 8008798:	e003      	b.n	80087a2 <_printf_i+0xc6>
 800879a:	0646      	lsls	r6, r0, #25
 800879c:	d5fb      	bpl.n	8008796 <_printf_i+0xba>
 800879e:	f9b3 6000 	ldrsh.w	r6, [r3]
 80087a2:	2e00      	cmp	r6, #0
 80087a4:	da03      	bge.n	80087ae <_printf_i+0xd2>
 80087a6:	232d      	movs	r3, #45	; 0x2d
 80087a8:	4276      	negs	r6, r6
 80087aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087ae:	485a      	ldr	r0, [pc, #360]	; (8008918 <_printf_i+0x23c>)
 80087b0:	230a      	movs	r3, #10
 80087b2:	e012      	b.n	80087da <_printf_i+0xfe>
 80087b4:	682b      	ldr	r3, [r5, #0]
 80087b6:	6820      	ldr	r0, [r4, #0]
 80087b8:	1d19      	adds	r1, r3, #4
 80087ba:	6029      	str	r1, [r5, #0]
 80087bc:	0605      	lsls	r5, r0, #24
 80087be:	d501      	bpl.n	80087c4 <_printf_i+0xe8>
 80087c0:	681e      	ldr	r6, [r3, #0]
 80087c2:	e002      	b.n	80087ca <_printf_i+0xee>
 80087c4:	0641      	lsls	r1, r0, #25
 80087c6:	d5fb      	bpl.n	80087c0 <_printf_i+0xe4>
 80087c8:	881e      	ldrh	r6, [r3, #0]
 80087ca:	4853      	ldr	r0, [pc, #332]	; (8008918 <_printf_i+0x23c>)
 80087cc:	2f6f      	cmp	r7, #111	; 0x6f
 80087ce:	bf0c      	ite	eq
 80087d0:	2308      	moveq	r3, #8
 80087d2:	230a      	movne	r3, #10
 80087d4:	2100      	movs	r1, #0
 80087d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80087da:	6865      	ldr	r5, [r4, #4]
 80087dc:	60a5      	str	r5, [r4, #8]
 80087de:	2d00      	cmp	r5, #0
 80087e0:	bfa2      	ittt	ge
 80087e2:	6821      	ldrge	r1, [r4, #0]
 80087e4:	f021 0104 	bicge.w	r1, r1, #4
 80087e8:	6021      	strge	r1, [r4, #0]
 80087ea:	b90e      	cbnz	r6, 80087f0 <_printf_i+0x114>
 80087ec:	2d00      	cmp	r5, #0
 80087ee:	d04b      	beq.n	8008888 <_printf_i+0x1ac>
 80087f0:	4615      	mov	r5, r2
 80087f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80087f6:	fb03 6711 	mls	r7, r3, r1, r6
 80087fa:	5dc7      	ldrb	r7, [r0, r7]
 80087fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008800:	4637      	mov	r7, r6
 8008802:	42bb      	cmp	r3, r7
 8008804:	460e      	mov	r6, r1
 8008806:	d9f4      	bls.n	80087f2 <_printf_i+0x116>
 8008808:	2b08      	cmp	r3, #8
 800880a:	d10b      	bne.n	8008824 <_printf_i+0x148>
 800880c:	6823      	ldr	r3, [r4, #0]
 800880e:	07de      	lsls	r6, r3, #31
 8008810:	d508      	bpl.n	8008824 <_printf_i+0x148>
 8008812:	6923      	ldr	r3, [r4, #16]
 8008814:	6861      	ldr	r1, [r4, #4]
 8008816:	4299      	cmp	r1, r3
 8008818:	bfde      	ittt	le
 800881a:	2330      	movle	r3, #48	; 0x30
 800881c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008820:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008824:	1b52      	subs	r2, r2, r5
 8008826:	6122      	str	r2, [r4, #16]
 8008828:	f8cd a000 	str.w	sl, [sp]
 800882c:	464b      	mov	r3, r9
 800882e:	aa03      	add	r2, sp, #12
 8008830:	4621      	mov	r1, r4
 8008832:	4640      	mov	r0, r8
 8008834:	f7ff fee4 	bl	8008600 <_printf_common>
 8008838:	3001      	adds	r0, #1
 800883a:	d14a      	bne.n	80088d2 <_printf_i+0x1f6>
 800883c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008840:	b004      	add	sp, #16
 8008842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008846:	6823      	ldr	r3, [r4, #0]
 8008848:	f043 0320 	orr.w	r3, r3, #32
 800884c:	6023      	str	r3, [r4, #0]
 800884e:	4833      	ldr	r0, [pc, #204]	; (800891c <_printf_i+0x240>)
 8008850:	2778      	movs	r7, #120	; 0x78
 8008852:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008856:	6823      	ldr	r3, [r4, #0]
 8008858:	6829      	ldr	r1, [r5, #0]
 800885a:	061f      	lsls	r7, r3, #24
 800885c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008860:	d402      	bmi.n	8008868 <_printf_i+0x18c>
 8008862:	065f      	lsls	r7, r3, #25
 8008864:	bf48      	it	mi
 8008866:	b2b6      	uxthmi	r6, r6
 8008868:	07df      	lsls	r7, r3, #31
 800886a:	bf48      	it	mi
 800886c:	f043 0320 	orrmi.w	r3, r3, #32
 8008870:	6029      	str	r1, [r5, #0]
 8008872:	bf48      	it	mi
 8008874:	6023      	strmi	r3, [r4, #0]
 8008876:	b91e      	cbnz	r6, 8008880 <_printf_i+0x1a4>
 8008878:	6823      	ldr	r3, [r4, #0]
 800887a:	f023 0320 	bic.w	r3, r3, #32
 800887e:	6023      	str	r3, [r4, #0]
 8008880:	2310      	movs	r3, #16
 8008882:	e7a7      	b.n	80087d4 <_printf_i+0xf8>
 8008884:	4824      	ldr	r0, [pc, #144]	; (8008918 <_printf_i+0x23c>)
 8008886:	e7e4      	b.n	8008852 <_printf_i+0x176>
 8008888:	4615      	mov	r5, r2
 800888a:	e7bd      	b.n	8008808 <_printf_i+0x12c>
 800888c:	682b      	ldr	r3, [r5, #0]
 800888e:	6826      	ldr	r6, [r4, #0]
 8008890:	6961      	ldr	r1, [r4, #20]
 8008892:	1d18      	adds	r0, r3, #4
 8008894:	6028      	str	r0, [r5, #0]
 8008896:	0635      	lsls	r5, r6, #24
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	d501      	bpl.n	80088a0 <_printf_i+0x1c4>
 800889c:	6019      	str	r1, [r3, #0]
 800889e:	e002      	b.n	80088a6 <_printf_i+0x1ca>
 80088a0:	0670      	lsls	r0, r6, #25
 80088a2:	d5fb      	bpl.n	800889c <_printf_i+0x1c0>
 80088a4:	8019      	strh	r1, [r3, #0]
 80088a6:	2300      	movs	r3, #0
 80088a8:	6123      	str	r3, [r4, #16]
 80088aa:	4615      	mov	r5, r2
 80088ac:	e7bc      	b.n	8008828 <_printf_i+0x14c>
 80088ae:	682b      	ldr	r3, [r5, #0]
 80088b0:	1d1a      	adds	r2, r3, #4
 80088b2:	602a      	str	r2, [r5, #0]
 80088b4:	681d      	ldr	r5, [r3, #0]
 80088b6:	6862      	ldr	r2, [r4, #4]
 80088b8:	2100      	movs	r1, #0
 80088ba:	4628      	mov	r0, r5
 80088bc:	f7f7 fc88 	bl	80001d0 <memchr>
 80088c0:	b108      	cbz	r0, 80088c6 <_printf_i+0x1ea>
 80088c2:	1b40      	subs	r0, r0, r5
 80088c4:	6060      	str	r0, [r4, #4]
 80088c6:	6863      	ldr	r3, [r4, #4]
 80088c8:	6123      	str	r3, [r4, #16]
 80088ca:	2300      	movs	r3, #0
 80088cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088d0:	e7aa      	b.n	8008828 <_printf_i+0x14c>
 80088d2:	6923      	ldr	r3, [r4, #16]
 80088d4:	462a      	mov	r2, r5
 80088d6:	4649      	mov	r1, r9
 80088d8:	4640      	mov	r0, r8
 80088da:	47d0      	blx	sl
 80088dc:	3001      	adds	r0, #1
 80088de:	d0ad      	beq.n	800883c <_printf_i+0x160>
 80088e0:	6823      	ldr	r3, [r4, #0]
 80088e2:	079b      	lsls	r3, r3, #30
 80088e4:	d413      	bmi.n	800890e <_printf_i+0x232>
 80088e6:	68e0      	ldr	r0, [r4, #12]
 80088e8:	9b03      	ldr	r3, [sp, #12]
 80088ea:	4298      	cmp	r0, r3
 80088ec:	bfb8      	it	lt
 80088ee:	4618      	movlt	r0, r3
 80088f0:	e7a6      	b.n	8008840 <_printf_i+0x164>
 80088f2:	2301      	movs	r3, #1
 80088f4:	4632      	mov	r2, r6
 80088f6:	4649      	mov	r1, r9
 80088f8:	4640      	mov	r0, r8
 80088fa:	47d0      	blx	sl
 80088fc:	3001      	adds	r0, #1
 80088fe:	d09d      	beq.n	800883c <_printf_i+0x160>
 8008900:	3501      	adds	r5, #1
 8008902:	68e3      	ldr	r3, [r4, #12]
 8008904:	9903      	ldr	r1, [sp, #12]
 8008906:	1a5b      	subs	r3, r3, r1
 8008908:	42ab      	cmp	r3, r5
 800890a:	dcf2      	bgt.n	80088f2 <_printf_i+0x216>
 800890c:	e7eb      	b.n	80088e6 <_printf_i+0x20a>
 800890e:	2500      	movs	r5, #0
 8008910:	f104 0619 	add.w	r6, r4, #25
 8008914:	e7f5      	b.n	8008902 <_printf_i+0x226>
 8008916:	bf00      	nop
 8008918:	08008fa1 	.word	0x08008fa1
 800891c:	08008fb2 	.word	0x08008fb2

08008920 <__sflush_r>:
 8008920:	898a      	ldrh	r2, [r1, #12]
 8008922:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008926:	4605      	mov	r5, r0
 8008928:	0710      	lsls	r0, r2, #28
 800892a:	460c      	mov	r4, r1
 800892c:	d458      	bmi.n	80089e0 <__sflush_r+0xc0>
 800892e:	684b      	ldr	r3, [r1, #4]
 8008930:	2b00      	cmp	r3, #0
 8008932:	dc05      	bgt.n	8008940 <__sflush_r+0x20>
 8008934:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008936:	2b00      	cmp	r3, #0
 8008938:	dc02      	bgt.n	8008940 <__sflush_r+0x20>
 800893a:	2000      	movs	r0, #0
 800893c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008940:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008942:	2e00      	cmp	r6, #0
 8008944:	d0f9      	beq.n	800893a <__sflush_r+0x1a>
 8008946:	2300      	movs	r3, #0
 8008948:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800894c:	682f      	ldr	r7, [r5, #0]
 800894e:	6a21      	ldr	r1, [r4, #32]
 8008950:	602b      	str	r3, [r5, #0]
 8008952:	d032      	beq.n	80089ba <__sflush_r+0x9a>
 8008954:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008956:	89a3      	ldrh	r3, [r4, #12]
 8008958:	075a      	lsls	r2, r3, #29
 800895a:	d505      	bpl.n	8008968 <__sflush_r+0x48>
 800895c:	6863      	ldr	r3, [r4, #4]
 800895e:	1ac0      	subs	r0, r0, r3
 8008960:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008962:	b10b      	cbz	r3, 8008968 <__sflush_r+0x48>
 8008964:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008966:	1ac0      	subs	r0, r0, r3
 8008968:	2300      	movs	r3, #0
 800896a:	4602      	mov	r2, r0
 800896c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800896e:	6a21      	ldr	r1, [r4, #32]
 8008970:	4628      	mov	r0, r5
 8008972:	47b0      	blx	r6
 8008974:	1c43      	adds	r3, r0, #1
 8008976:	89a3      	ldrh	r3, [r4, #12]
 8008978:	d106      	bne.n	8008988 <__sflush_r+0x68>
 800897a:	6829      	ldr	r1, [r5, #0]
 800897c:	291d      	cmp	r1, #29
 800897e:	d82b      	bhi.n	80089d8 <__sflush_r+0xb8>
 8008980:	4a29      	ldr	r2, [pc, #164]	; (8008a28 <__sflush_r+0x108>)
 8008982:	410a      	asrs	r2, r1
 8008984:	07d6      	lsls	r6, r2, #31
 8008986:	d427      	bmi.n	80089d8 <__sflush_r+0xb8>
 8008988:	2200      	movs	r2, #0
 800898a:	6062      	str	r2, [r4, #4]
 800898c:	04d9      	lsls	r1, r3, #19
 800898e:	6922      	ldr	r2, [r4, #16]
 8008990:	6022      	str	r2, [r4, #0]
 8008992:	d504      	bpl.n	800899e <__sflush_r+0x7e>
 8008994:	1c42      	adds	r2, r0, #1
 8008996:	d101      	bne.n	800899c <__sflush_r+0x7c>
 8008998:	682b      	ldr	r3, [r5, #0]
 800899a:	b903      	cbnz	r3, 800899e <__sflush_r+0x7e>
 800899c:	6560      	str	r0, [r4, #84]	; 0x54
 800899e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80089a0:	602f      	str	r7, [r5, #0]
 80089a2:	2900      	cmp	r1, #0
 80089a4:	d0c9      	beq.n	800893a <__sflush_r+0x1a>
 80089a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80089aa:	4299      	cmp	r1, r3
 80089ac:	d002      	beq.n	80089b4 <__sflush_r+0x94>
 80089ae:	4628      	mov	r0, r5
 80089b0:	f7ff fbf6 	bl	80081a0 <_free_r>
 80089b4:	2000      	movs	r0, #0
 80089b6:	6360      	str	r0, [r4, #52]	; 0x34
 80089b8:	e7c0      	b.n	800893c <__sflush_r+0x1c>
 80089ba:	2301      	movs	r3, #1
 80089bc:	4628      	mov	r0, r5
 80089be:	47b0      	blx	r6
 80089c0:	1c41      	adds	r1, r0, #1
 80089c2:	d1c8      	bne.n	8008956 <__sflush_r+0x36>
 80089c4:	682b      	ldr	r3, [r5, #0]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d0c5      	beq.n	8008956 <__sflush_r+0x36>
 80089ca:	2b1d      	cmp	r3, #29
 80089cc:	d001      	beq.n	80089d2 <__sflush_r+0xb2>
 80089ce:	2b16      	cmp	r3, #22
 80089d0:	d101      	bne.n	80089d6 <__sflush_r+0xb6>
 80089d2:	602f      	str	r7, [r5, #0]
 80089d4:	e7b1      	b.n	800893a <__sflush_r+0x1a>
 80089d6:	89a3      	ldrh	r3, [r4, #12]
 80089d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089dc:	81a3      	strh	r3, [r4, #12]
 80089de:	e7ad      	b.n	800893c <__sflush_r+0x1c>
 80089e0:	690f      	ldr	r7, [r1, #16]
 80089e2:	2f00      	cmp	r7, #0
 80089e4:	d0a9      	beq.n	800893a <__sflush_r+0x1a>
 80089e6:	0793      	lsls	r3, r2, #30
 80089e8:	680e      	ldr	r6, [r1, #0]
 80089ea:	bf08      	it	eq
 80089ec:	694b      	ldreq	r3, [r1, #20]
 80089ee:	600f      	str	r7, [r1, #0]
 80089f0:	bf18      	it	ne
 80089f2:	2300      	movne	r3, #0
 80089f4:	eba6 0807 	sub.w	r8, r6, r7
 80089f8:	608b      	str	r3, [r1, #8]
 80089fa:	f1b8 0f00 	cmp.w	r8, #0
 80089fe:	dd9c      	ble.n	800893a <__sflush_r+0x1a>
 8008a00:	6a21      	ldr	r1, [r4, #32]
 8008a02:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008a04:	4643      	mov	r3, r8
 8008a06:	463a      	mov	r2, r7
 8008a08:	4628      	mov	r0, r5
 8008a0a:	47b0      	blx	r6
 8008a0c:	2800      	cmp	r0, #0
 8008a0e:	dc06      	bgt.n	8008a1e <__sflush_r+0xfe>
 8008a10:	89a3      	ldrh	r3, [r4, #12]
 8008a12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a16:	81a3      	strh	r3, [r4, #12]
 8008a18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a1c:	e78e      	b.n	800893c <__sflush_r+0x1c>
 8008a1e:	4407      	add	r7, r0
 8008a20:	eba8 0800 	sub.w	r8, r8, r0
 8008a24:	e7e9      	b.n	80089fa <__sflush_r+0xda>
 8008a26:	bf00      	nop
 8008a28:	dfbffffe 	.word	0xdfbffffe

08008a2c <_fflush_r>:
 8008a2c:	b538      	push	{r3, r4, r5, lr}
 8008a2e:	690b      	ldr	r3, [r1, #16]
 8008a30:	4605      	mov	r5, r0
 8008a32:	460c      	mov	r4, r1
 8008a34:	b913      	cbnz	r3, 8008a3c <_fflush_r+0x10>
 8008a36:	2500      	movs	r5, #0
 8008a38:	4628      	mov	r0, r5
 8008a3a:	bd38      	pop	{r3, r4, r5, pc}
 8008a3c:	b118      	cbz	r0, 8008a46 <_fflush_r+0x1a>
 8008a3e:	6a03      	ldr	r3, [r0, #32]
 8008a40:	b90b      	cbnz	r3, 8008a46 <_fflush_r+0x1a>
 8008a42:	f7ff fa6f 	bl	8007f24 <__sinit>
 8008a46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d0f3      	beq.n	8008a36 <_fflush_r+0xa>
 8008a4e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008a50:	07d0      	lsls	r0, r2, #31
 8008a52:	d404      	bmi.n	8008a5e <_fflush_r+0x32>
 8008a54:	0599      	lsls	r1, r3, #22
 8008a56:	d402      	bmi.n	8008a5e <_fflush_r+0x32>
 8008a58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a5a:	f7ff fb90 	bl	800817e <__retarget_lock_acquire_recursive>
 8008a5e:	4628      	mov	r0, r5
 8008a60:	4621      	mov	r1, r4
 8008a62:	f7ff ff5d 	bl	8008920 <__sflush_r>
 8008a66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a68:	07da      	lsls	r2, r3, #31
 8008a6a:	4605      	mov	r5, r0
 8008a6c:	d4e4      	bmi.n	8008a38 <_fflush_r+0xc>
 8008a6e:	89a3      	ldrh	r3, [r4, #12]
 8008a70:	059b      	lsls	r3, r3, #22
 8008a72:	d4e1      	bmi.n	8008a38 <_fflush_r+0xc>
 8008a74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a76:	f7ff fb83 	bl	8008180 <__retarget_lock_release_recursive>
 8008a7a:	e7dd      	b.n	8008a38 <_fflush_r+0xc>

08008a7c <__malloc_lock>:
 8008a7c:	4801      	ldr	r0, [pc, #4]	; (8008a84 <__malloc_lock+0x8>)
 8008a7e:	f7ff bb7e 	b.w	800817e <__retarget_lock_acquire_recursive>
 8008a82:	bf00      	nop
 8008a84:	20002618 	.word	0x20002618

08008a88 <__malloc_unlock>:
 8008a88:	4801      	ldr	r0, [pc, #4]	; (8008a90 <__malloc_unlock+0x8>)
 8008a8a:	f7ff bb79 	b.w	8008180 <__retarget_lock_release_recursive>
 8008a8e:	bf00      	nop
 8008a90:	20002618 	.word	0x20002618

08008a94 <__sread>:
 8008a94:	b510      	push	{r4, lr}
 8008a96:	460c      	mov	r4, r1
 8008a98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a9c:	f000 f978 	bl	8008d90 <_read_r>
 8008aa0:	2800      	cmp	r0, #0
 8008aa2:	bfab      	itete	ge
 8008aa4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008aa6:	89a3      	ldrhlt	r3, [r4, #12]
 8008aa8:	181b      	addge	r3, r3, r0
 8008aaa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008aae:	bfac      	ite	ge
 8008ab0:	6563      	strge	r3, [r4, #84]	; 0x54
 8008ab2:	81a3      	strhlt	r3, [r4, #12]
 8008ab4:	bd10      	pop	{r4, pc}

08008ab6 <__swrite>:
 8008ab6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008aba:	461f      	mov	r7, r3
 8008abc:	898b      	ldrh	r3, [r1, #12]
 8008abe:	05db      	lsls	r3, r3, #23
 8008ac0:	4605      	mov	r5, r0
 8008ac2:	460c      	mov	r4, r1
 8008ac4:	4616      	mov	r6, r2
 8008ac6:	d505      	bpl.n	8008ad4 <__swrite+0x1e>
 8008ac8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008acc:	2302      	movs	r3, #2
 8008ace:	2200      	movs	r2, #0
 8008ad0:	f000 f94c 	bl	8008d6c <_lseek_r>
 8008ad4:	89a3      	ldrh	r3, [r4, #12]
 8008ad6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ada:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ade:	81a3      	strh	r3, [r4, #12]
 8008ae0:	4632      	mov	r2, r6
 8008ae2:	463b      	mov	r3, r7
 8008ae4:	4628      	mov	r0, r5
 8008ae6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008aea:	f000 b973 	b.w	8008dd4 <_write_r>

08008aee <__sseek>:
 8008aee:	b510      	push	{r4, lr}
 8008af0:	460c      	mov	r4, r1
 8008af2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008af6:	f000 f939 	bl	8008d6c <_lseek_r>
 8008afa:	1c43      	adds	r3, r0, #1
 8008afc:	89a3      	ldrh	r3, [r4, #12]
 8008afe:	bf15      	itete	ne
 8008b00:	6560      	strne	r0, [r4, #84]	; 0x54
 8008b02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008b06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008b0a:	81a3      	strheq	r3, [r4, #12]
 8008b0c:	bf18      	it	ne
 8008b0e:	81a3      	strhne	r3, [r4, #12]
 8008b10:	bd10      	pop	{r4, pc}

08008b12 <__sclose>:
 8008b12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b16:	f000 b8f7 	b.w	8008d08 <_close_r>

08008b1a <__swbuf_r>:
 8008b1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b1c:	460e      	mov	r6, r1
 8008b1e:	4614      	mov	r4, r2
 8008b20:	4605      	mov	r5, r0
 8008b22:	b118      	cbz	r0, 8008b2c <__swbuf_r+0x12>
 8008b24:	6a03      	ldr	r3, [r0, #32]
 8008b26:	b90b      	cbnz	r3, 8008b2c <__swbuf_r+0x12>
 8008b28:	f7ff f9fc 	bl	8007f24 <__sinit>
 8008b2c:	69a3      	ldr	r3, [r4, #24]
 8008b2e:	60a3      	str	r3, [r4, #8]
 8008b30:	89a3      	ldrh	r3, [r4, #12]
 8008b32:	071a      	lsls	r2, r3, #28
 8008b34:	d525      	bpl.n	8008b82 <__swbuf_r+0x68>
 8008b36:	6923      	ldr	r3, [r4, #16]
 8008b38:	b31b      	cbz	r3, 8008b82 <__swbuf_r+0x68>
 8008b3a:	6823      	ldr	r3, [r4, #0]
 8008b3c:	6922      	ldr	r2, [r4, #16]
 8008b3e:	1a98      	subs	r0, r3, r2
 8008b40:	6963      	ldr	r3, [r4, #20]
 8008b42:	b2f6      	uxtb	r6, r6
 8008b44:	4283      	cmp	r3, r0
 8008b46:	4637      	mov	r7, r6
 8008b48:	dc04      	bgt.n	8008b54 <__swbuf_r+0x3a>
 8008b4a:	4621      	mov	r1, r4
 8008b4c:	4628      	mov	r0, r5
 8008b4e:	f7ff ff6d 	bl	8008a2c <_fflush_r>
 8008b52:	b9e0      	cbnz	r0, 8008b8e <__swbuf_r+0x74>
 8008b54:	68a3      	ldr	r3, [r4, #8]
 8008b56:	3b01      	subs	r3, #1
 8008b58:	60a3      	str	r3, [r4, #8]
 8008b5a:	6823      	ldr	r3, [r4, #0]
 8008b5c:	1c5a      	adds	r2, r3, #1
 8008b5e:	6022      	str	r2, [r4, #0]
 8008b60:	701e      	strb	r6, [r3, #0]
 8008b62:	6962      	ldr	r2, [r4, #20]
 8008b64:	1c43      	adds	r3, r0, #1
 8008b66:	429a      	cmp	r2, r3
 8008b68:	d004      	beq.n	8008b74 <__swbuf_r+0x5a>
 8008b6a:	89a3      	ldrh	r3, [r4, #12]
 8008b6c:	07db      	lsls	r3, r3, #31
 8008b6e:	d506      	bpl.n	8008b7e <__swbuf_r+0x64>
 8008b70:	2e0a      	cmp	r6, #10
 8008b72:	d104      	bne.n	8008b7e <__swbuf_r+0x64>
 8008b74:	4621      	mov	r1, r4
 8008b76:	4628      	mov	r0, r5
 8008b78:	f7ff ff58 	bl	8008a2c <_fflush_r>
 8008b7c:	b938      	cbnz	r0, 8008b8e <__swbuf_r+0x74>
 8008b7e:	4638      	mov	r0, r7
 8008b80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b82:	4621      	mov	r1, r4
 8008b84:	4628      	mov	r0, r5
 8008b86:	f000 f805 	bl	8008b94 <__swsetup_r>
 8008b8a:	2800      	cmp	r0, #0
 8008b8c:	d0d5      	beq.n	8008b3a <__swbuf_r+0x20>
 8008b8e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008b92:	e7f4      	b.n	8008b7e <__swbuf_r+0x64>

08008b94 <__swsetup_r>:
 8008b94:	b538      	push	{r3, r4, r5, lr}
 8008b96:	4b2a      	ldr	r3, [pc, #168]	; (8008c40 <__swsetup_r+0xac>)
 8008b98:	4605      	mov	r5, r0
 8008b9a:	6818      	ldr	r0, [r3, #0]
 8008b9c:	460c      	mov	r4, r1
 8008b9e:	b118      	cbz	r0, 8008ba8 <__swsetup_r+0x14>
 8008ba0:	6a03      	ldr	r3, [r0, #32]
 8008ba2:	b90b      	cbnz	r3, 8008ba8 <__swsetup_r+0x14>
 8008ba4:	f7ff f9be 	bl	8007f24 <__sinit>
 8008ba8:	89a3      	ldrh	r3, [r4, #12]
 8008baa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008bae:	0718      	lsls	r0, r3, #28
 8008bb0:	d422      	bmi.n	8008bf8 <__swsetup_r+0x64>
 8008bb2:	06d9      	lsls	r1, r3, #27
 8008bb4:	d407      	bmi.n	8008bc6 <__swsetup_r+0x32>
 8008bb6:	2309      	movs	r3, #9
 8008bb8:	602b      	str	r3, [r5, #0]
 8008bba:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008bbe:	81a3      	strh	r3, [r4, #12]
 8008bc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008bc4:	e034      	b.n	8008c30 <__swsetup_r+0x9c>
 8008bc6:	0758      	lsls	r0, r3, #29
 8008bc8:	d512      	bpl.n	8008bf0 <__swsetup_r+0x5c>
 8008bca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008bcc:	b141      	cbz	r1, 8008be0 <__swsetup_r+0x4c>
 8008bce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008bd2:	4299      	cmp	r1, r3
 8008bd4:	d002      	beq.n	8008bdc <__swsetup_r+0x48>
 8008bd6:	4628      	mov	r0, r5
 8008bd8:	f7ff fae2 	bl	80081a0 <_free_r>
 8008bdc:	2300      	movs	r3, #0
 8008bde:	6363      	str	r3, [r4, #52]	; 0x34
 8008be0:	89a3      	ldrh	r3, [r4, #12]
 8008be2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008be6:	81a3      	strh	r3, [r4, #12]
 8008be8:	2300      	movs	r3, #0
 8008bea:	6063      	str	r3, [r4, #4]
 8008bec:	6923      	ldr	r3, [r4, #16]
 8008bee:	6023      	str	r3, [r4, #0]
 8008bf0:	89a3      	ldrh	r3, [r4, #12]
 8008bf2:	f043 0308 	orr.w	r3, r3, #8
 8008bf6:	81a3      	strh	r3, [r4, #12]
 8008bf8:	6923      	ldr	r3, [r4, #16]
 8008bfa:	b94b      	cbnz	r3, 8008c10 <__swsetup_r+0x7c>
 8008bfc:	89a3      	ldrh	r3, [r4, #12]
 8008bfe:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008c02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c06:	d003      	beq.n	8008c10 <__swsetup_r+0x7c>
 8008c08:	4621      	mov	r1, r4
 8008c0a:	4628      	mov	r0, r5
 8008c0c:	f000 f840 	bl	8008c90 <__smakebuf_r>
 8008c10:	89a0      	ldrh	r0, [r4, #12]
 8008c12:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008c16:	f010 0301 	ands.w	r3, r0, #1
 8008c1a:	d00a      	beq.n	8008c32 <__swsetup_r+0x9e>
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	60a3      	str	r3, [r4, #8]
 8008c20:	6963      	ldr	r3, [r4, #20]
 8008c22:	425b      	negs	r3, r3
 8008c24:	61a3      	str	r3, [r4, #24]
 8008c26:	6923      	ldr	r3, [r4, #16]
 8008c28:	b943      	cbnz	r3, 8008c3c <__swsetup_r+0xa8>
 8008c2a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008c2e:	d1c4      	bne.n	8008bba <__swsetup_r+0x26>
 8008c30:	bd38      	pop	{r3, r4, r5, pc}
 8008c32:	0781      	lsls	r1, r0, #30
 8008c34:	bf58      	it	pl
 8008c36:	6963      	ldrpl	r3, [r4, #20]
 8008c38:	60a3      	str	r3, [r4, #8]
 8008c3a:	e7f4      	b.n	8008c26 <__swsetup_r+0x92>
 8008c3c:	2000      	movs	r0, #0
 8008c3e:	e7f7      	b.n	8008c30 <__swsetup_r+0x9c>
 8008c40:	20000068 	.word	0x20000068

08008c44 <__swhatbuf_r>:
 8008c44:	b570      	push	{r4, r5, r6, lr}
 8008c46:	460c      	mov	r4, r1
 8008c48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c4c:	2900      	cmp	r1, #0
 8008c4e:	b096      	sub	sp, #88	; 0x58
 8008c50:	4615      	mov	r5, r2
 8008c52:	461e      	mov	r6, r3
 8008c54:	da0d      	bge.n	8008c72 <__swhatbuf_r+0x2e>
 8008c56:	89a3      	ldrh	r3, [r4, #12]
 8008c58:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008c5c:	f04f 0100 	mov.w	r1, #0
 8008c60:	bf0c      	ite	eq
 8008c62:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008c66:	2340      	movne	r3, #64	; 0x40
 8008c68:	2000      	movs	r0, #0
 8008c6a:	6031      	str	r1, [r6, #0]
 8008c6c:	602b      	str	r3, [r5, #0]
 8008c6e:	b016      	add	sp, #88	; 0x58
 8008c70:	bd70      	pop	{r4, r5, r6, pc}
 8008c72:	466a      	mov	r2, sp
 8008c74:	f000 f858 	bl	8008d28 <_fstat_r>
 8008c78:	2800      	cmp	r0, #0
 8008c7a:	dbec      	blt.n	8008c56 <__swhatbuf_r+0x12>
 8008c7c:	9901      	ldr	r1, [sp, #4]
 8008c7e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008c82:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008c86:	4259      	negs	r1, r3
 8008c88:	4159      	adcs	r1, r3
 8008c8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c8e:	e7eb      	b.n	8008c68 <__swhatbuf_r+0x24>

08008c90 <__smakebuf_r>:
 8008c90:	898b      	ldrh	r3, [r1, #12]
 8008c92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008c94:	079d      	lsls	r5, r3, #30
 8008c96:	4606      	mov	r6, r0
 8008c98:	460c      	mov	r4, r1
 8008c9a:	d507      	bpl.n	8008cac <__smakebuf_r+0x1c>
 8008c9c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008ca0:	6023      	str	r3, [r4, #0]
 8008ca2:	6123      	str	r3, [r4, #16]
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	6163      	str	r3, [r4, #20]
 8008ca8:	b002      	add	sp, #8
 8008caa:	bd70      	pop	{r4, r5, r6, pc}
 8008cac:	ab01      	add	r3, sp, #4
 8008cae:	466a      	mov	r2, sp
 8008cb0:	f7ff ffc8 	bl	8008c44 <__swhatbuf_r>
 8008cb4:	9900      	ldr	r1, [sp, #0]
 8008cb6:	4605      	mov	r5, r0
 8008cb8:	4630      	mov	r0, r6
 8008cba:	f7ff fc21 	bl	8008500 <_malloc_r>
 8008cbe:	b948      	cbnz	r0, 8008cd4 <__smakebuf_r+0x44>
 8008cc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cc4:	059a      	lsls	r2, r3, #22
 8008cc6:	d4ef      	bmi.n	8008ca8 <__smakebuf_r+0x18>
 8008cc8:	f023 0303 	bic.w	r3, r3, #3
 8008ccc:	f043 0302 	orr.w	r3, r3, #2
 8008cd0:	81a3      	strh	r3, [r4, #12]
 8008cd2:	e7e3      	b.n	8008c9c <__smakebuf_r+0xc>
 8008cd4:	89a3      	ldrh	r3, [r4, #12]
 8008cd6:	6020      	str	r0, [r4, #0]
 8008cd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cdc:	81a3      	strh	r3, [r4, #12]
 8008cde:	9b00      	ldr	r3, [sp, #0]
 8008ce0:	6163      	str	r3, [r4, #20]
 8008ce2:	9b01      	ldr	r3, [sp, #4]
 8008ce4:	6120      	str	r0, [r4, #16]
 8008ce6:	b15b      	cbz	r3, 8008d00 <__smakebuf_r+0x70>
 8008ce8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008cec:	4630      	mov	r0, r6
 8008cee:	f000 f82d 	bl	8008d4c <_isatty_r>
 8008cf2:	b128      	cbz	r0, 8008d00 <__smakebuf_r+0x70>
 8008cf4:	89a3      	ldrh	r3, [r4, #12]
 8008cf6:	f023 0303 	bic.w	r3, r3, #3
 8008cfa:	f043 0301 	orr.w	r3, r3, #1
 8008cfe:	81a3      	strh	r3, [r4, #12]
 8008d00:	89a3      	ldrh	r3, [r4, #12]
 8008d02:	431d      	orrs	r5, r3
 8008d04:	81a5      	strh	r5, [r4, #12]
 8008d06:	e7cf      	b.n	8008ca8 <__smakebuf_r+0x18>

08008d08 <_close_r>:
 8008d08:	b538      	push	{r3, r4, r5, lr}
 8008d0a:	4d06      	ldr	r5, [pc, #24]	; (8008d24 <_close_r+0x1c>)
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	4604      	mov	r4, r0
 8008d10:	4608      	mov	r0, r1
 8008d12:	602b      	str	r3, [r5, #0]
 8008d14:	f7f8 f99f 	bl	8001056 <_close>
 8008d18:	1c43      	adds	r3, r0, #1
 8008d1a:	d102      	bne.n	8008d22 <_close_r+0x1a>
 8008d1c:	682b      	ldr	r3, [r5, #0]
 8008d1e:	b103      	cbz	r3, 8008d22 <_close_r+0x1a>
 8008d20:	6023      	str	r3, [r4, #0]
 8008d22:	bd38      	pop	{r3, r4, r5, pc}
 8008d24:	20002614 	.word	0x20002614

08008d28 <_fstat_r>:
 8008d28:	b538      	push	{r3, r4, r5, lr}
 8008d2a:	4d07      	ldr	r5, [pc, #28]	; (8008d48 <_fstat_r+0x20>)
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	4604      	mov	r4, r0
 8008d30:	4608      	mov	r0, r1
 8008d32:	4611      	mov	r1, r2
 8008d34:	602b      	str	r3, [r5, #0]
 8008d36:	f7f8 f99a 	bl	800106e <_fstat>
 8008d3a:	1c43      	adds	r3, r0, #1
 8008d3c:	d102      	bne.n	8008d44 <_fstat_r+0x1c>
 8008d3e:	682b      	ldr	r3, [r5, #0]
 8008d40:	b103      	cbz	r3, 8008d44 <_fstat_r+0x1c>
 8008d42:	6023      	str	r3, [r4, #0]
 8008d44:	bd38      	pop	{r3, r4, r5, pc}
 8008d46:	bf00      	nop
 8008d48:	20002614 	.word	0x20002614

08008d4c <_isatty_r>:
 8008d4c:	b538      	push	{r3, r4, r5, lr}
 8008d4e:	4d06      	ldr	r5, [pc, #24]	; (8008d68 <_isatty_r+0x1c>)
 8008d50:	2300      	movs	r3, #0
 8008d52:	4604      	mov	r4, r0
 8008d54:	4608      	mov	r0, r1
 8008d56:	602b      	str	r3, [r5, #0]
 8008d58:	f7f8 f999 	bl	800108e <_isatty>
 8008d5c:	1c43      	adds	r3, r0, #1
 8008d5e:	d102      	bne.n	8008d66 <_isatty_r+0x1a>
 8008d60:	682b      	ldr	r3, [r5, #0]
 8008d62:	b103      	cbz	r3, 8008d66 <_isatty_r+0x1a>
 8008d64:	6023      	str	r3, [r4, #0]
 8008d66:	bd38      	pop	{r3, r4, r5, pc}
 8008d68:	20002614 	.word	0x20002614

08008d6c <_lseek_r>:
 8008d6c:	b538      	push	{r3, r4, r5, lr}
 8008d6e:	4d07      	ldr	r5, [pc, #28]	; (8008d8c <_lseek_r+0x20>)
 8008d70:	4604      	mov	r4, r0
 8008d72:	4608      	mov	r0, r1
 8008d74:	4611      	mov	r1, r2
 8008d76:	2200      	movs	r2, #0
 8008d78:	602a      	str	r2, [r5, #0]
 8008d7a:	461a      	mov	r2, r3
 8008d7c:	f7f8 f992 	bl	80010a4 <_lseek>
 8008d80:	1c43      	adds	r3, r0, #1
 8008d82:	d102      	bne.n	8008d8a <_lseek_r+0x1e>
 8008d84:	682b      	ldr	r3, [r5, #0]
 8008d86:	b103      	cbz	r3, 8008d8a <_lseek_r+0x1e>
 8008d88:	6023      	str	r3, [r4, #0]
 8008d8a:	bd38      	pop	{r3, r4, r5, pc}
 8008d8c:	20002614 	.word	0x20002614

08008d90 <_read_r>:
 8008d90:	b538      	push	{r3, r4, r5, lr}
 8008d92:	4d07      	ldr	r5, [pc, #28]	; (8008db0 <_read_r+0x20>)
 8008d94:	4604      	mov	r4, r0
 8008d96:	4608      	mov	r0, r1
 8008d98:	4611      	mov	r1, r2
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	602a      	str	r2, [r5, #0]
 8008d9e:	461a      	mov	r2, r3
 8008da0:	f7f8 f920 	bl	8000fe4 <_read>
 8008da4:	1c43      	adds	r3, r0, #1
 8008da6:	d102      	bne.n	8008dae <_read_r+0x1e>
 8008da8:	682b      	ldr	r3, [r5, #0]
 8008daa:	b103      	cbz	r3, 8008dae <_read_r+0x1e>
 8008dac:	6023      	str	r3, [r4, #0]
 8008dae:	bd38      	pop	{r3, r4, r5, pc}
 8008db0:	20002614 	.word	0x20002614

08008db4 <_sbrk_r>:
 8008db4:	b538      	push	{r3, r4, r5, lr}
 8008db6:	4d06      	ldr	r5, [pc, #24]	; (8008dd0 <_sbrk_r+0x1c>)
 8008db8:	2300      	movs	r3, #0
 8008dba:	4604      	mov	r4, r0
 8008dbc:	4608      	mov	r0, r1
 8008dbe:	602b      	str	r3, [r5, #0]
 8008dc0:	f7f8 f97e 	bl	80010c0 <_sbrk>
 8008dc4:	1c43      	adds	r3, r0, #1
 8008dc6:	d102      	bne.n	8008dce <_sbrk_r+0x1a>
 8008dc8:	682b      	ldr	r3, [r5, #0]
 8008dca:	b103      	cbz	r3, 8008dce <_sbrk_r+0x1a>
 8008dcc:	6023      	str	r3, [r4, #0]
 8008dce:	bd38      	pop	{r3, r4, r5, pc}
 8008dd0:	20002614 	.word	0x20002614

08008dd4 <_write_r>:
 8008dd4:	b538      	push	{r3, r4, r5, lr}
 8008dd6:	4d07      	ldr	r5, [pc, #28]	; (8008df4 <_write_r+0x20>)
 8008dd8:	4604      	mov	r4, r0
 8008dda:	4608      	mov	r0, r1
 8008ddc:	4611      	mov	r1, r2
 8008dde:	2200      	movs	r2, #0
 8008de0:	602a      	str	r2, [r5, #0]
 8008de2:	461a      	mov	r2, r3
 8008de4:	f7f8 f91b 	bl	800101e <_write>
 8008de8:	1c43      	adds	r3, r0, #1
 8008dea:	d102      	bne.n	8008df2 <_write_r+0x1e>
 8008dec:	682b      	ldr	r3, [r5, #0]
 8008dee:	b103      	cbz	r3, 8008df2 <_write_r+0x1e>
 8008df0:	6023      	str	r3, [r4, #0]
 8008df2:	bd38      	pop	{r3, r4, r5, pc}
 8008df4:	20002614 	.word	0x20002614

08008df8 <_init>:
 8008df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dfa:	bf00      	nop
 8008dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dfe:	bc08      	pop	{r3}
 8008e00:	469e      	mov	lr, r3
 8008e02:	4770      	bx	lr

08008e04 <_fini>:
 8008e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e06:	bf00      	nop
 8008e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e0a:	bc08      	pop	{r3}
 8008e0c:	469e      	mov	lr, r3
 8008e0e:	4770      	bx	lr
=======
 8009026:	bf00      	nop
 8009028:	3714      	adds	r7, #20
 800902a:	46bd      	mov	sp, r7
 800902c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009030:	4770      	bx	lr
 8009032:	bf00      	nop
 8009034:	20002410 	.word	0x20002410
 8009038:	20002418 	.word	0x20002418

0800903c <std>:
 800903c:	2300      	movs	r3, #0
 800903e:	b510      	push	{r4, lr}
 8009040:	4604      	mov	r4, r0
 8009042:	e9c0 3300 	strd	r3, r3, [r0]
 8009046:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800904a:	6083      	str	r3, [r0, #8]
 800904c:	8181      	strh	r1, [r0, #12]
 800904e:	6643      	str	r3, [r0, #100]	; 0x64
 8009050:	81c2      	strh	r2, [r0, #14]
 8009052:	6183      	str	r3, [r0, #24]
 8009054:	4619      	mov	r1, r3
 8009056:	2208      	movs	r2, #8
 8009058:	305c      	adds	r0, #92	; 0x5c
 800905a:	f000 f91f 	bl	800929c <memset>
 800905e:	4b0d      	ldr	r3, [pc, #52]	; (8009094 <std+0x58>)
 8009060:	6263      	str	r3, [r4, #36]	; 0x24
 8009062:	4b0d      	ldr	r3, [pc, #52]	; (8009098 <std+0x5c>)
 8009064:	62a3      	str	r3, [r4, #40]	; 0x28
 8009066:	4b0d      	ldr	r3, [pc, #52]	; (800909c <std+0x60>)
 8009068:	62e3      	str	r3, [r4, #44]	; 0x2c
 800906a:	4b0d      	ldr	r3, [pc, #52]	; (80090a0 <std+0x64>)
 800906c:	6323      	str	r3, [r4, #48]	; 0x30
 800906e:	4b0d      	ldr	r3, [pc, #52]	; (80090a4 <std+0x68>)
 8009070:	6224      	str	r4, [r4, #32]
 8009072:	429c      	cmp	r4, r3
 8009074:	d006      	beq.n	8009084 <std+0x48>
 8009076:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800907a:	4294      	cmp	r4, r2
 800907c:	d002      	beq.n	8009084 <std+0x48>
 800907e:	33d0      	adds	r3, #208	; 0xd0
 8009080:	429c      	cmp	r4, r3
 8009082:	d105      	bne.n	8009090 <std+0x54>
 8009084:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009088:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800908c:	f000 b98e 	b.w	80093ac <__retarget_lock_init_recursive>
 8009090:	bd10      	pop	{r4, pc}
 8009092:	bf00      	nop
 8009094:	08009cc5 	.word	0x08009cc5
 8009098:	08009ce7 	.word	0x08009ce7
 800909c:	08009d1f 	.word	0x08009d1f
 80090a0:	08009d43 	.word	0x08009d43
 80090a4:	20002430 	.word	0x20002430

080090a8 <stdio_exit_handler>:
 80090a8:	4a02      	ldr	r2, [pc, #8]	; (80090b4 <stdio_exit_handler+0xc>)
 80090aa:	4903      	ldr	r1, [pc, #12]	; (80090b8 <stdio_exit_handler+0x10>)
 80090ac:	4803      	ldr	r0, [pc, #12]	; (80090bc <stdio_exit_handler+0x14>)
 80090ae:	f000 b869 	b.w	8009184 <_fwalk_sglue>
 80090b2:	bf00      	nop
 80090b4:	20000010 	.word	0x20000010
 80090b8:	08009c5d 	.word	0x08009c5d
 80090bc:	2000001c 	.word	0x2000001c

080090c0 <cleanup_stdio>:
 80090c0:	6841      	ldr	r1, [r0, #4]
 80090c2:	4b0c      	ldr	r3, [pc, #48]	; (80090f4 <cleanup_stdio+0x34>)
 80090c4:	4299      	cmp	r1, r3
 80090c6:	b510      	push	{r4, lr}
 80090c8:	4604      	mov	r4, r0
 80090ca:	d001      	beq.n	80090d0 <cleanup_stdio+0x10>
 80090cc:	f000 fdc6 	bl	8009c5c <_fflush_r>
 80090d0:	68a1      	ldr	r1, [r4, #8]
 80090d2:	4b09      	ldr	r3, [pc, #36]	; (80090f8 <cleanup_stdio+0x38>)
 80090d4:	4299      	cmp	r1, r3
 80090d6:	d002      	beq.n	80090de <cleanup_stdio+0x1e>
 80090d8:	4620      	mov	r0, r4
 80090da:	f000 fdbf 	bl	8009c5c <_fflush_r>
 80090de:	68e1      	ldr	r1, [r4, #12]
 80090e0:	4b06      	ldr	r3, [pc, #24]	; (80090fc <cleanup_stdio+0x3c>)
 80090e2:	4299      	cmp	r1, r3
 80090e4:	d004      	beq.n	80090f0 <cleanup_stdio+0x30>
 80090e6:	4620      	mov	r0, r4
 80090e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090ec:	f000 bdb6 	b.w	8009c5c <_fflush_r>
 80090f0:	bd10      	pop	{r4, pc}
 80090f2:	bf00      	nop
 80090f4:	20002430 	.word	0x20002430
 80090f8:	20002498 	.word	0x20002498
 80090fc:	20002500 	.word	0x20002500

08009100 <global_stdio_init.part.0>:
 8009100:	b510      	push	{r4, lr}
 8009102:	4b0b      	ldr	r3, [pc, #44]	; (8009130 <global_stdio_init.part.0+0x30>)
 8009104:	4c0b      	ldr	r4, [pc, #44]	; (8009134 <global_stdio_init.part.0+0x34>)
 8009106:	4a0c      	ldr	r2, [pc, #48]	; (8009138 <global_stdio_init.part.0+0x38>)
 8009108:	601a      	str	r2, [r3, #0]
 800910a:	4620      	mov	r0, r4
 800910c:	2200      	movs	r2, #0
 800910e:	2104      	movs	r1, #4
 8009110:	f7ff ff94 	bl	800903c <std>
 8009114:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009118:	2201      	movs	r2, #1
 800911a:	2109      	movs	r1, #9
 800911c:	f7ff ff8e 	bl	800903c <std>
 8009120:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009124:	2202      	movs	r2, #2
 8009126:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800912a:	2112      	movs	r1, #18
 800912c:	f7ff bf86 	b.w	800903c <std>
 8009130:	20002568 	.word	0x20002568
 8009134:	20002430 	.word	0x20002430
 8009138:	080090a9 	.word	0x080090a9

0800913c <__sfp_lock_acquire>:
 800913c:	4801      	ldr	r0, [pc, #4]	; (8009144 <__sfp_lock_acquire+0x8>)
 800913e:	f000 b936 	b.w	80093ae <__retarget_lock_acquire_recursive>
 8009142:	bf00      	nop
 8009144:	20002571 	.word	0x20002571

08009148 <__sfp_lock_release>:
 8009148:	4801      	ldr	r0, [pc, #4]	; (8009150 <__sfp_lock_release+0x8>)
 800914a:	f000 b931 	b.w	80093b0 <__retarget_lock_release_recursive>
 800914e:	bf00      	nop
 8009150:	20002571 	.word	0x20002571

08009154 <__sinit>:
 8009154:	b510      	push	{r4, lr}
 8009156:	4604      	mov	r4, r0
 8009158:	f7ff fff0 	bl	800913c <__sfp_lock_acquire>
 800915c:	6a23      	ldr	r3, [r4, #32]
 800915e:	b11b      	cbz	r3, 8009168 <__sinit+0x14>
 8009160:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009164:	f7ff bff0 	b.w	8009148 <__sfp_lock_release>
 8009168:	4b04      	ldr	r3, [pc, #16]	; (800917c <__sinit+0x28>)
 800916a:	6223      	str	r3, [r4, #32]
 800916c:	4b04      	ldr	r3, [pc, #16]	; (8009180 <__sinit+0x2c>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d1f5      	bne.n	8009160 <__sinit+0xc>
 8009174:	f7ff ffc4 	bl	8009100 <global_stdio_init.part.0>
 8009178:	e7f2      	b.n	8009160 <__sinit+0xc>
 800917a:	bf00      	nop
 800917c:	080090c1 	.word	0x080090c1
 8009180:	20002568 	.word	0x20002568

08009184 <_fwalk_sglue>:
 8009184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009188:	4607      	mov	r7, r0
 800918a:	4688      	mov	r8, r1
 800918c:	4614      	mov	r4, r2
 800918e:	2600      	movs	r6, #0
 8009190:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009194:	f1b9 0901 	subs.w	r9, r9, #1
 8009198:	d505      	bpl.n	80091a6 <_fwalk_sglue+0x22>
 800919a:	6824      	ldr	r4, [r4, #0]
 800919c:	2c00      	cmp	r4, #0
 800919e:	d1f7      	bne.n	8009190 <_fwalk_sglue+0xc>
 80091a0:	4630      	mov	r0, r6
 80091a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091a6:	89ab      	ldrh	r3, [r5, #12]
 80091a8:	2b01      	cmp	r3, #1
 80091aa:	d907      	bls.n	80091bc <_fwalk_sglue+0x38>
 80091ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80091b0:	3301      	adds	r3, #1
 80091b2:	d003      	beq.n	80091bc <_fwalk_sglue+0x38>
 80091b4:	4629      	mov	r1, r5
 80091b6:	4638      	mov	r0, r7
 80091b8:	47c0      	blx	r8
 80091ba:	4306      	orrs	r6, r0
 80091bc:	3568      	adds	r5, #104	; 0x68
 80091be:	e7e9      	b.n	8009194 <_fwalk_sglue+0x10>

080091c0 <iprintf>:
 80091c0:	b40f      	push	{r0, r1, r2, r3}
 80091c2:	b507      	push	{r0, r1, r2, lr}
 80091c4:	4906      	ldr	r1, [pc, #24]	; (80091e0 <iprintf+0x20>)
 80091c6:	ab04      	add	r3, sp, #16
 80091c8:	6808      	ldr	r0, [r1, #0]
 80091ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80091ce:	6881      	ldr	r1, [r0, #8]
 80091d0:	9301      	str	r3, [sp, #4]
 80091d2:	f000 f973 	bl	80094bc <_vfiprintf_r>
 80091d6:	b003      	add	sp, #12
 80091d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80091dc:	b004      	add	sp, #16
 80091de:	4770      	bx	lr
 80091e0:	20000068 	.word	0x20000068

080091e4 <_puts_r>:
 80091e4:	6a03      	ldr	r3, [r0, #32]
 80091e6:	b570      	push	{r4, r5, r6, lr}
 80091e8:	6884      	ldr	r4, [r0, #8]
 80091ea:	4605      	mov	r5, r0
 80091ec:	460e      	mov	r6, r1
 80091ee:	b90b      	cbnz	r3, 80091f4 <_puts_r+0x10>
 80091f0:	f7ff ffb0 	bl	8009154 <__sinit>
 80091f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80091f6:	07db      	lsls	r3, r3, #31
 80091f8:	d405      	bmi.n	8009206 <_puts_r+0x22>
 80091fa:	89a3      	ldrh	r3, [r4, #12]
 80091fc:	0598      	lsls	r0, r3, #22
 80091fe:	d402      	bmi.n	8009206 <_puts_r+0x22>
 8009200:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009202:	f000 f8d4 	bl	80093ae <__retarget_lock_acquire_recursive>
 8009206:	89a3      	ldrh	r3, [r4, #12]
 8009208:	0719      	lsls	r1, r3, #28
 800920a:	d513      	bpl.n	8009234 <_puts_r+0x50>
 800920c:	6923      	ldr	r3, [r4, #16]
 800920e:	b18b      	cbz	r3, 8009234 <_puts_r+0x50>
 8009210:	3e01      	subs	r6, #1
 8009212:	68a3      	ldr	r3, [r4, #8]
 8009214:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009218:	3b01      	subs	r3, #1
 800921a:	60a3      	str	r3, [r4, #8]
 800921c:	b9e9      	cbnz	r1, 800925a <_puts_r+0x76>
 800921e:	2b00      	cmp	r3, #0
 8009220:	da2e      	bge.n	8009280 <_puts_r+0x9c>
 8009222:	4622      	mov	r2, r4
 8009224:	210a      	movs	r1, #10
 8009226:	4628      	mov	r0, r5
 8009228:	f000 fd8f 	bl	8009d4a <__swbuf_r>
 800922c:	3001      	adds	r0, #1
 800922e:	d007      	beq.n	8009240 <_puts_r+0x5c>
 8009230:	250a      	movs	r5, #10
 8009232:	e007      	b.n	8009244 <_puts_r+0x60>
 8009234:	4621      	mov	r1, r4
 8009236:	4628      	mov	r0, r5
 8009238:	f000 fdc4 	bl	8009dc4 <__swsetup_r>
 800923c:	2800      	cmp	r0, #0
 800923e:	d0e7      	beq.n	8009210 <_puts_r+0x2c>
 8009240:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8009244:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009246:	07da      	lsls	r2, r3, #31
 8009248:	d405      	bmi.n	8009256 <_puts_r+0x72>
 800924a:	89a3      	ldrh	r3, [r4, #12]
 800924c:	059b      	lsls	r3, r3, #22
 800924e:	d402      	bmi.n	8009256 <_puts_r+0x72>
 8009250:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009252:	f000 f8ad 	bl	80093b0 <__retarget_lock_release_recursive>
 8009256:	4628      	mov	r0, r5
 8009258:	bd70      	pop	{r4, r5, r6, pc}
 800925a:	2b00      	cmp	r3, #0
 800925c:	da04      	bge.n	8009268 <_puts_r+0x84>
 800925e:	69a2      	ldr	r2, [r4, #24]
 8009260:	429a      	cmp	r2, r3
 8009262:	dc06      	bgt.n	8009272 <_puts_r+0x8e>
 8009264:	290a      	cmp	r1, #10
 8009266:	d004      	beq.n	8009272 <_puts_r+0x8e>
 8009268:	6823      	ldr	r3, [r4, #0]
 800926a:	1c5a      	adds	r2, r3, #1
 800926c:	6022      	str	r2, [r4, #0]
 800926e:	7019      	strb	r1, [r3, #0]
 8009270:	e7cf      	b.n	8009212 <_puts_r+0x2e>
 8009272:	4622      	mov	r2, r4
 8009274:	4628      	mov	r0, r5
 8009276:	f000 fd68 	bl	8009d4a <__swbuf_r>
 800927a:	3001      	adds	r0, #1
 800927c:	d1c9      	bne.n	8009212 <_puts_r+0x2e>
 800927e:	e7df      	b.n	8009240 <_puts_r+0x5c>
 8009280:	6823      	ldr	r3, [r4, #0]
 8009282:	250a      	movs	r5, #10
 8009284:	1c5a      	adds	r2, r3, #1
 8009286:	6022      	str	r2, [r4, #0]
 8009288:	701d      	strb	r5, [r3, #0]
 800928a:	e7db      	b.n	8009244 <_puts_r+0x60>

0800928c <puts>:
 800928c:	4b02      	ldr	r3, [pc, #8]	; (8009298 <puts+0xc>)
 800928e:	4601      	mov	r1, r0
 8009290:	6818      	ldr	r0, [r3, #0]
 8009292:	f7ff bfa7 	b.w	80091e4 <_puts_r>
 8009296:	bf00      	nop
 8009298:	20000068 	.word	0x20000068

0800929c <memset>:
 800929c:	4402      	add	r2, r0
 800929e:	4603      	mov	r3, r0
 80092a0:	4293      	cmp	r3, r2
 80092a2:	d100      	bne.n	80092a6 <memset+0xa>
 80092a4:	4770      	bx	lr
 80092a6:	f803 1b01 	strb.w	r1, [r3], #1
 80092aa:	e7f9      	b.n	80092a0 <memset+0x4>

080092ac <_reclaim_reent>:
 80092ac:	4b29      	ldr	r3, [pc, #164]	; (8009354 <_reclaim_reent+0xa8>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	4283      	cmp	r3, r0
 80092b2:	b570      	push	{r4, r5, r6, lr}
 80092b4:	4604      	mov	r4, r0
 80092b6:	d04b      	beq.n	8009350 <_reclaim_reent+0xa4>
 80092b8:	69c3      	ldr	r3, [r0, #28]
 80092ba:	b143      	cbz	r3, 80092ce <_reclaim_reent+0x22>
 80092bc:	68db      	ldr	r3, [r3, #12]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d144      	bne.n	800934c <_reclaim_reent+0xa0>
 80092c2:	69e3      	ldr	r3, [r4, #28]
 80092c4:	6819      	ldr	r1, [r3, #0]
 80092c6:	b111      	cbz	r1, 80092ce <_reclaim_reent+0x22>
 80092c8:	4620      	mov	r0, r4
 80092ca:	f000 f881 	bl	80093d0 <_free_r>
 80092ce:	6961      	ldr	r1, [r4, #20]
 80092d0:	b111      	cbz	r1, 80092d8 <_reclaim_reent+0x2c>
 80092d2:	4620      	mov	r0, r4
 80092d4:	f000 f87c 	bl	80093d0 <_free_r>
 80092d8:	69e1      	ldr	r1, [r4, #28]
 80092da:	b111      	cbz	r1, 80092e2 <_reclaim_reent+0x36>
 80092dc:	4620      	mov	r0, r4
 80092de:	f000 f877 	bl	80093d0 <_free_r>
 80092e2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80092e4:	b111      	cbz	r1, 80092ec <_reclaim_reent+0x40>
 80092e6:	4620      	mov	r0, r4
 80092e8:	f000 f872 	bl	80093d0 <_free_r>
 80092ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80092ee:	b111      	cbz	r1, 80092f6 <_reclaim_reent+0x4a>
 80092f0:	4620      	mov	r0, r4
 80092f2:	f000 f86d 	bl	80093d0 <_free_r>
 80092f6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80092f8:	b111      	cbz	r1, 8009300 <_reclaim_reent+0x54>
 80092fa:	4620      	mov	r0, r4
 80092fc:	f000 f868 	bl	80093d0 <_free_r>
 8009300:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009302:	b111      	cbz	r1, 800930a <_reclaim_reent+0x5e>
 8009304:	4620      	mov	r0, r4
 8009306:	f000 f863 	bl	80093d0 <_free_r>
 800930a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800930c:	b111      	cbz	r1, 8009314 <_reclaim_reent+0x68>
 800930e:	4620      	mov	r0, r4
 8009310:	f000 f85e 	bl	80093d0 <_free_r>
 8009314:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8009316:	b111      	cbz	r1, 800931e <_reclaim_reent+0x72>
 8009318:	4620      	mov	r0, r4
 800931a:	f000 f859 	bl	80093d0 <_free_r>
 800931e:	6a23      	ldr	r3, [r4, #32]
 8009320:	b1b3      	cbz	r3, 8009350 <_reclaim_reent+0xa4>
 8009322:	4620      	mov	r0, r4
 8009324:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009328:	4718      	bx	r3
 800932a:	5949      	ldr	r1, [r1, r5]
 800932c:	b941      	cbnz	r1, 8009340 <_reclaim_reent+0x94>
 800932e:	3504      	adds	r5, #4
 8009330:	69e3      	ldr	r3, [r4, #28]
 8009332:	2d80      	cmp	r5, #128	; 0x80
 8009334:	68d9      	ldr	r1, [r3, #12]
 8009336:	d1f8      	bne.n	800932a <_reclaim_reent+0x7e>
 8009338:	4620      	mov	r0, r4
 800933a:	f000 f849 	bl	80093d0 <_free_r>
 800933e:	e7c0      	b.n	80092c2 <_reclaim_reent+0x16>
 8009340:	680e      	ldr	r6, [r1, #0]
 8009342:	4620      	mov	r0, r4
 8009344:	f000 f844 	bl	80093d0 <_free_r>
 8009348:	4631      	mov	r1, r6
 800934a:	e7ef      	b.n	800932c <_reclaim_reent+0x80>
 800934c:	2500      	movs	r5, #0
 800934e:	e7ef      	b.n	8009330 <_reclaim_reent+0x84>
 8009350:	bd70      	pop	{r4, r5, r6, pc}
 8009352:	bf00      	nop
 8009354:	20000068 	.word	0x20000068

08009358 <__errno>:
 8009358:	4b01      	ldr	r3, [pc, #4]	; (8009360 <__errno+0x8>)
 800935a:	6818      	ldr	r0, [r3, #0]
 800935c:	4770      	bx	lr
 800935e:	bf00      	nop
 8009360:	20000068 	.word	0x20000068

08009364 <__libc_init_array>:
 8009364:	b570      	push	{r4, r5, r6, lr}
 8009366:	4d0d      	ldr	r5, [pc, #52]	; (800939c <__libc_init_array+0x38>)
 8009368:	4c0d      	ldr	r4, [pc, #52]	; (80093a0 <__libc_init_array+0x3c>)
 800936a:	1b64      	subs	r4, r4, r5
 800936c:	10a4      	asrs	r4, r4, #2
 800936e:	2600      	movs	r6, #0
 8009370:	42a6      	cmp	r6, r4
 8009372:	d109      	bne.n	8009388 <__libc_init_array+0x24>
 8009374:	4d0b      	ldr	r5, [pc, #44]	; (80093a4 <__libc_init_array+0x40>)
 8009376:	4c0c      	ldr	r4, [pc, #48]	; (80093a8 <__libc_init_array+0x44>)
 8009378:	f000 fe56 	bl	800a028 <_init>
 800937c:	1b64      	subs	r4, r4, r5
 800937e:	10a4      	asrs	r4, r4, #2
 8009380:	2600      	movs	r6, #0
 8009382:	42a6      	cmp	r6, r4
 8009384:	d105      	bne.n	8009392 <__libc_init_array+0x2e>
 8009386:	bd70      	pop	{r4, r5, r6, pc}
 8009388:	f855 3b04 	ldr.w	r3, [r5], #4
 800938c:	4798      	blx	r3
 800938e:	3601      	adds	r6, #1
 8009390:	e7ee      	b.n	8009370 <__libc_init_array+0xc>
 8009392:	f855 3b04 	ldr.w	r3, [r5], #4
 8009396:	4798      	blx	r3
 8009398:	3601      	adds	r6, #1
 800939a:	e7f2      	b.n	8009382 <__libc_init_array+0x1e>
 800939c:	0800a314 	.word	0x0800a314
 80093a0:	0800a314 	.word	0x0800a314
 80093a4:	0800a314 	.word	0x0800a314
 80093a8:	0800a318 	.word	0x0800a318

080093ac <__retarget_lock_init_recursive>:
 80093ac:	4770      	bx	lr

080093ae <__retarget_lock_acquire_recursive>:
 80093ae:	4770      	bx	lr

080093b0 <__retarget_lock_release_recursive>:
 80093b0:	4770      	bx	lr

080093b2 <memcpy>:
 80093b2:	440a      	add	r2, r1
 80093b4:	4291      	cmp	r1, r2
 80093b6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80093ba:	d100      	bne.n	80093be <memcpy+0xc>
 80093bc:	4770      	bx	lr
 80093be:	b510      	push	{r4, lr}
 80093c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80093c8:	4291      	cmp	r1, r2
 80093ca:	d1f9      	bne.n	80093c0 <memcpy+0xe>
 80093cc:	bd10      	pop	{r4, pc}
	...

080093d0 <_free_r>:
 80093d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80093d2:	2900      	cmp	r1, #0
 80093d4:	d044      	beq.n	8009460 <_free_r+0x90>
 80093d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093da:	9001      	str	r0, [sp, #4]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	f1a1 0404 	sub.w	r4, r1, #4
 80093e2:	bfb8      	it	lt
 80093e4:	18e4      	addlt	r4, r4, r3
 80093e6:	f000 fc61 	bl	8009cac <__malloc_lock>
 80093ea:	4a1e      	ldr	r2, [pc, #120]	; (8009464 <_free_r+0x94>)
 80093ec:	9801      	ldr	r0, [sp, #4]
 80093ee:	6813      	ldr	r3, [r2, #0]
 80093f0:	b933      	cbnz	r3, 8009400 <_free_r+0x30>
 80093f2:	6063      	str	r3, [r4, #4]
 80093f4:	6014      	str	r4, [r2, #0]
 80093f6:	b003      	add	sp, #12
 80093f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80093fc:	f000 bc5c 	b.w	8009cb8 <__malloc_unlock>
 8009400:	42a3      	cmp	r3, r4
 8009402:	d908      	bls.n	8009416 <_free_r+0x46>
 8009404:	6825      	ldr	r5, [r4, #0]
 8009406:	1961      	adds	r1, r4, r5
 8009408:	428b      	cmp	r3, r1
 800940a:	bf01      	itttt	eq
 800940c:	6819      	ldreq	r1, [r3, #0]
 800940e:	685b      	ldreq	r3, [r3, #4]
 8009410:	1949      	addeq	r1, r1, r5
 8009412:	6021      	streq	r1, [r4, #0]
 8009414:	e7ed      	b.n	80093f2 <_free_r+0x22>
 8009416:	461a      	mov	r2, r3
 8009418:	685b      	ldr	r3, [r3, #4]
 800941a:	b10b      	cbz	r3, 8009420 <_free_r+0x50>
 800941c:	42a3      	cmp	r3, r4
 800941e:	d9fa      	bls.n	8009416 <_free_r+0x46>
 8009420:	6811      	ldr	r1, [r2, #0]
 8009422:	1855      	adds	r5, r2, r1
 8009424:	42a5      	cmp	r5, r4
 8009426:	d10b      	bne.n	8009440 <_free_r+0x70>
 8009428:	6824      	ldr	r4, [r4, #0]
 800942a:	4421      	add	r1, r4
 800942c:	1854      	adds	r4, r2, r1
 800942e:	42a3      	cmp	r3, r4
 8009430:	6011      	str	r1, [r2, #0]
 8009432:	d1e0      	bne.n	80093f6 <_free_r+0x26>
 8009434:	681c      	ldr	r4, [r3, #0]
 8009436:	685b      	ldr	r3, [r3, #4]
 8009438:	6053      	str	r3, [r2, #4]
 800943a:	440c      	add	r4, r1
 800943c:	6014      	str	r4, [r2, #0]
 800943e:	e7da      	b.n	80093f6 <_free_r+0x26>
 8009440:	d902      	bls.n	8009448 <_free_r+0x78>
 8009442:	230c      	movs	r3, #12
 8009444:	6003      	str	r3, [r0, #0]
 8009446:	e7d6      	b.n	80093f6 <_free_r+0x26>
 8009448:	6825      	ldr	r5, [r4, #0]
 800944a:	1961      	adds	r1, r4, r5
 800944c:	428b      	cmp	r3, r1
 800944e:	bf04      	itt	eq
 8009450:	6819      	ldreq	r1, [r3, #0]
 8009452:	685b      	ldreq	r3, [r3, #4]
 8009454:	6063      	str	r3, [r4, #4]
 8009456:	bf04      	itt	eq
 8009458:	1949      	addeq	r1, r1, r5
 800945a:	6021      	streq	r1, [r4, #0]
 800945c:	6054      	str	r4, [r2, #4]
 800945e:	e7ca      	b.n	80093f6 <_free_r+0x26>
 8009460:	b003      	add	sp, #12
 8009462:	bd30      	pop	{r4, r5, pc}
 8009464:	20002574 	.word	0x20002574

08009468 <__sfputc_r>:
 8009468:	6893      	ldr	r3, [r2, #8]
 800946a:	3b01      	subs	r3, #1
 800946c:	2b00      	cmp	r3, #0
 800946e:	b410      	push	{r4}
 8009470:	6093      	str	r3, [r2, #8]
 8009472:	da08      	bge.n	8009486 <__sfputc_r+0x1e>
 8009474:	6994      	ldr	r4, [r2, #24]
 8009476:	42a3      	cmp	r3, r4
 8009478:	db01      	blt.n	800947e <__sfputc_r+0x16>
 800947a:	290a      	cmp	r1, #10
 800947c:	d103      	bne.n	8009486 <__sfputc_r+0x1e>
 800947e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009482:	f000 bc62 	b.w	8009d4a <__swbuf_r>
 8009486:	6813      	ldr	r3, [r2, #0]
 8009488:	1c58      	adds	r0, r3, #1
 800948a:	6010      	str	r0, [r2, #0]
 800948c:	7019      	strb	r1, [r3, #0]
 800948e:	4608      	mov	r0, r1
 8009490:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009494:	4770      	bx	lr

08009496 <__sfputs_r>:
 8009496:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009498:	4606      	mov	r6, r0
 800949a:	460f      	mov	r7, r1
 800949c:	4614      	mov	r4, r2
 800949e:	18d5      	adds	r5, r2, r3
 80094a0:	42ac      	cmp	r4, r5
 80094a2:	d101      	bne.n	80094a8 <__sfputs_r+0x12>
 80094a4:	2000      	movs	r0, #0
 80094a6:	e007      	b.n	80094b8 <__sfputs_r+0x22>
 80094a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094ac:	463a      	mov	r2, r7
 80094ae:	4630      	mov	r0, r6
 80094b0:	f7ff ffda 	bl	8009468 <__sfputc_r>
 80094b4:	1c43      	adds	r3, r0, #1
 80094b6:	d1f3      	bne.n	80094a0 <__sfputs_r+0xa>
 80094b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080094bc <_vfiprintf_r>:
 80094bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094c0:	460d      	mov	r5, r1
 80094c2:	b09d      	sub	sp, #116	; 0x74
 80094c4:	4614      	mov	r4, r2
 80094c6:	4698      	mov	r8, r3
 80094c8:	4606      	mov	r6, r0
 80094ca:	b118      	cbz	r0, 80094d4 <_vfiprintf_r+0x18>
 80094cc:	6a03      	ldr	r3, [r0, #32]
 80094ce:	b90b      	cbnz	r3, 80094d4 <_vfiprintf_r+0x18>
 80094d0:	f7ff fe40 	bl	8009154 <__sinit>
 80094d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80094d6:	07d9      	lsls	r1, r3, #31
 80094d8:	d405      	bmi.n	80094e6 <_vfiprintf_r+0x2a>
 80094da:	89ab      	ldrh	r3, [r5, #12]
 80094dc:	059a      	lsls	r2, r3, #22
 80094de:	d402      	bmi.n	80094e6 <_vfiprintf_r+0x2a>
 80094e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80094e2:	f7ff ff64 	bl	80093ae <__retarget_lock_acquire_recursive>
 80094e6:	89ab      	ldrh	r3, [r5, #12]
 80094e8:	071b      	lsls	r3, r3, #28
 80094ea:	d501      	bpl.n	80094f0 <_vfiprintf_r+0x34>
 80094ec:	692b      	ldr	r3, [r5, #16]
 80094ee:	b99b      	cbnz	r3, 8009518 <_vfiprintf_r+0x5c>
 80094f0:	4629      	mov	r1, r5
 80094f2:	4630      	mov	r0, r6
 80094f4:	f000 fc66 	bl	8009dc4 <__swsetup_r>
 80094f8:	b170      	cbz	r0, 8009518 <_vfiprintf_r+0x5c>
 80094fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80094fc:	07dc      	lsls	r4, r3, #31
 80094fe:	d504      	bpl.n	800950a <_vfiprintf_r+0x4e>
 8009500:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009504:	b01d      	add	sp, #116	; 0x74
 8009506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800950a:	89ab      	ldrh	r3, [r5, #12]
 800950c:	0598      	lsls	r0, r3, #22
 800950e:	d4f7      	bmi.n	8009500 <_vfiprintf_r+0x44>
 8009510:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009512:	f7ff ff4d 	bl	80093b0 <__retarget_lock_release_recursive>
 8009516:	e7f3      	b.n	8009500 <_vfiprintf_r+0x44>
 8009518:	2300      	movs	r3, #0
 800951a:	9309      	str	r3, [sp, #36]	; 0x24
 800951c:	2320      	movs	r3, #32
 800951e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009522:	f8cd 800c 	str.w	r8, [sp, #12]
 8009526:	2330      	movs	r3, #48	; 0x30
 8009528:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80096dc <_vfiprintf_r+0x220>
 800952c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009530:	f04f 0901 	mov.w	r9, #1
 8009534:	4623      	mov	r3, r4
 8009536:	469a      	mov	sl, r3
 8009538:	f813 2b01 	ldrb.w	r2, [r3], #1
 800953c:	b10a      	cbz	r2, 8009542 <_vfiprintf_r+0x86>
 800953e:	2a25      	cmp	r2, #37	; 0x25
 8009540:	d1f9      	bne.n	8009536 <_vfiprintf_r+0x7a>
 8009542:	ebba 0b04 	subs.w	fp, sl, r4
 8009546:	d00b      	beq.n	8009560 <_vfiprintf_r+0xa4>
 8009548:	465b      	mov	r3, fp
 800954a:	4622      	mov	r2, r4
 800954c:	4629      	mov	r1, r5
 800954e:	4630      	mov	r0, r6
 8009550:	f7ff ffa1 	bl	8009496 <__sfputs_r>
 8009554:	3001      	adds	r0, #1
 8009556:	f000 80a9 	beq.w	80096ac <_vfiprintf_r+0x1f0>
 800955a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800955c:	445a      	add	r2, fp
 800955e:	9209      	str	r2, [sp, #36]	; 0x24
 8009560:	f89a 3000 	ldrb.w	r3, [sl]
 8009564:	2b00      	cmp	r3, #0
 8009566:	f000 80a1 	beq.w	80096ac <_vfiprintf_r+0x1f0>
 800956a:	2300      	movs	r3, #0
 800956c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009570:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009574:	f10a 0a01 	add.w	sl, sl, #1
 8009578:	9304      	str	r3, [sp, #16]
 800957a:	9307      	str	r3, [sp, #28]
 800957c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009580:	931a      	str	r3, [sp, #104]	; 0x68
 8009582:	4654      	mov	r4, sl
 8009584:	2205      	movs	r2, #5
 8009586:	f814 1b01 	ldrb.w	r1, [r4], #1
 800958a:	4854      	ldr	r0, [pc, #336]	; (80096dc <_vfiprintf_r+0x220>)
 800958c:	f7f6 fe20 	bl	80001d0 <memchr>
 8009590:	9a04      	ldr	r2, [sp, #16]
 8009592:	b9d8      	cbnz	r0, 80095cc <_vfiprintf_r+0x110>
 8009594:	06d1      	lsls	r1, r2, #27
 8009596:	bf44      	itt	mi
 8009598:	2320      	movmi	r3, #32
 800959a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800959e:	0713      	lsls	r3, r2, #28
 80095a0:	bf44      	itt	mi
 80095a2:	232b      	movmi	r3, #43	; 0x2b
 80095a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80095a8:	f89a 3000 	ldrb.w	r3, [sl]
 80095ac:	2b2a      	cmp	r3, #42	; 0x2a
 80095ae:	d015      	beq.n	80095dc <_vfiprintf_r+0x120>
 80095b0:	9a07      	ldr	r2, [sp, #28]
 80095b2:	4654      	mov	r4, sl
 80095b4:	2000      	movs	r0, #0
 80095b6:	f04f 0c0a 	mov.w	ip, #10
 80095ba:	4621      	mov	r1, r4
 80095bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80095c0:	3b30      	subs	r3, #48	; 0x30
 80095c2:	2b09      	cmp	r3, #9
 80095c4:	d94d      	bls.n	8009662 <_vfiprintf_r+0x1a6>
 80095c6:	b1b0      	cbz	r0, 80095f6 <_vfiprintf_r+0x13a>
 80095c8:	9207      	str	r2, [sp, #28]
 80095ca:	e014      	b.n	80095f6 <_vfiprintf_r+0x13a>
 80095cc:	eba0 0308 	sub.w	r3, r0, r8
 80095d0:	fa09 f303 	lsl.w	r3, r9, r3
 80095d4:	4313      	orrs	r3, r2
 80095d6:	9304      	str	r3, [sp, #16]
 80095d8:	46a2      	mov	sl, r4
 80095da:	e7d2      	b.n	8009582 <_vfiprintf_r+0xc6>
 80095dc:	9b03      	ldr	r3, [sp, #12]
 80095de:	1d19      	adds	r1, r3, #4
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	9103      	str	r1, [sp, #12]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	bfbb      	ittet	lt
 80095e8:	425b      	neglt	r3, r3
 80095ea:	f042 0202 	orrlt.w	r2, r2, #2
 80095ee:	9307      	strge	r3, [sp, #28]
 80095f0:	9307      	strlt	r3, [sp, #28]
 80095f2:	bfb8      	it	lt
 80095f4:	9204      	strlt	r2, [sp, #16]
 80095f6:	7823      	ldrb	r3, [r4, #0]
 80095f8:	2b2e      	cmp	r3, #46	; 0x2e
 80095fa:	d10c      	bne.n	8009616 <_vfiprintf_r+0x15a>
 80095fc:	7863      	ldrb	r3, [r4, #1]
 80095fe:	2b2a      	cmp	r3, #42	; 0x2a
 8009600:	d134      	bne.n	800966c <_vfiprintf_r+0x1b0>
 8009602:	9b03      	ldr	r3, [sp, #12]
 8009604:	1d1a      	adds	r2, r3, #4
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	9203      	str	r2, [sp, #12]
 800960a:	2b00      	cmp	r3, #0
 800960c:	bfb8      	it	lt
 800960e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009612:	3402      	adds	r4, #2
 8009614:	9305      	str	r3, [sp, #20]
 8009616:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80096ec <_vfiprintf_r+0x230>
 800961a:	7821      	ldrb	r1, [r4, #0]
 800961c:	2203      	movs	r2, #3
 800961e:	4650      	mov	r0, sl
 8009620:	f7f6 fdd6 	bl	80001d0 <memchr>
 8009624:	b138      	cbz	r0, 8009636 <_vfiprintf_r+0x17a>
 8009626:	9b04      	ldr	r3, [sp, #16]
 8009628:	eba0 000a 	sub.w	r0, r0, sl
 800962c:	2240      	movs	r2, #64	; 0x40
 800962e:	4082      	lsls	r2, r0
 8009630:	4313      	orrs	r3, r2
 8009632:	3401      	adds	r4, #1
 8009634:	9304      	str	r3, [sp, #16]
 8009636:	f814 1b01 	ldrb.w	r1, [r4], #1
 800963a:	4829      	ldr	r0, [pc, #164]	; (80096e0 <_vfiprintf_r+0x224>)
 800963c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009640:	2206      	movs	r2, #6
 8009642:	f7f6 fdc5 	bl	80001d0 <memchr>
 8009646:	2800      	cmp	r0, #0
 8009648:	d03f      	beq.n	80096ca <_vfiprintf_r+0x20e>
 800964a:	4b26      	ldr	r3, [pc, #152]	; (80096e4 <_vfiprintf_r+0x228>)
 800964c:	bb1b      	cbnz	r3, 8009696 <_vfiprintf_r+0x1da>
 800964e:	9b03      	ldr	r3, [sp, #12]
 8009650:	3307      	adds	r3, #7
 8009652:	f023 0307 	bic.w	r3, r3, #7
 8009656:	3308      	adds	r3, #8
 8009658:	9303      	str	r3, [sp, #12]
 800965a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800965c:	443b      	add	r3, r7
 800965e:	9309      	str	r3, [sp, #36]	; 0x24
 8009660:	e768      	b.n	8009534 <_vfiprintf_r+0x78>
 8009662:	fb0c 3202 	mla	r2, ip, r2, r3
 8009666:	460c      	mov	r4, r1
 8009668:	2001      	movs	r0, #1
 800966a:	e7a6      	b.n	80095ba <_vfiprintf_r+0xfe>
 800966c:	2300      	movs	r3, #0
 800966e:	3401      	adds	r4, #1
 8009670:	9305      	str	r3, [sp, #20]
 8009672:	4619      	mov	r1, r3
 8009674:	f04f 0c0a 	mov.w	ip, #10
 8009678:	4620      	mov	r0, r4
 800967a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800967e:	3a30      	subs	r2, #48	; 0x30
 8009680:	2a09      	cmp	r2, #9
 8009682:	d903      	bls.n	800968c <_vfiprintf_r+0x1d0>
 8009684:	2b00      	cmp	r3, #0
 8009686:	d0c6      	beq.n	8009616 <_vfiprintf_r+0x15a>
 8009688:	9105      	str	r1, [sp, #20]
 800968a:	e7c4      	b.n	8009616 <_vfiprintf_r+0x15a>
 800968c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009690:	4604      	mov	r4, r0
 8009692:	2301      	movs	r3, #1
 8009694:	e7f0      	b.n	8009678 <_vfiprintf_r+0x1bc>
 8009696:	ab03      	add	r3, sp, #12
 8009698:	9300      	str	r3, [sp, #0]
 800969a:	462a      	mov	r2, r5
 800969c:	4b12      	ldr	r3, [pc, #72]	; (80096e8 <_vfiprintf_r+0x22c>)
 800969e:	a904      	add	r1, sp, #16
 80096a0:	4630      	mov	r0, r6
 80096a2:	f3af 8000 	nop.w
 80096a6:	4607      	mov	r7, r0
 80096a8:	1c78      	adds	r0, r7, #1
 80096aa:	d1d6      	bne.n	800965a <_vfiprintf_r+0x19e>
 80096ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80096ae:	07d9      	lsls	r1, r3, #31
 80096b0:	d405      	bmi.n	80096be <_vfiprintf_r+0x202>
 80096b2:	89ab      	ldrh	r3, [r5, #12]
 80096b4:	059a      	lsls	r2, r3, #22
 80096b6:	d402      	bmi.n	80096be <_vfiprintf_r+0x202>
 80096b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80096ba:	f7ff fe79 	bl	80093b0 <__retarget_lock_release_recursive>
 80096be:	89ab      	ldrh	r3, [r5, #12]
 80096c0:	065b      	lsls	r3, r3, #25
 80096c2:	f53f af1d 	bmi.w	8009500 <_vfiprintf_r+0x44>
 80096c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80096c8:	e71c      	b.n	8009504 <_vfiprintf_r+0x48>
 80096ca:	ab03      	add	r3, sp, #12
 80096cc:	9300      	str	r3, [sp, #0]
 80096ce:	462a      	mov	r2, r5
 80096d0:	4b05      	ldr	r3, [pc, #20]	; (80096e8 <_vfiprintf_r+0x22c>)
 80096d2:	a904      	add	r1, sp, #16
 80096d4:	4630      	mov	r0, r6
 80096d6:	f000 f919 	bl	800990c <_printf_i>
 80096da:	e7e4      	b.n	80096a6 <_vfiprintf_r+0x1ea>
 80096dc:	0800a2d8 	.word	0x0800a2d8
 80096e0:	0800a2e2 	.word	0x0800a2e2
 80096e4:	00000000 	.word	0x00000000
 80096e8:	08009497 	.word	0x08009497
 80096ec:	0800a2de 	.word	0x0800a2de

080096f0 <sbrk_aligned>:
 80096f0:	b570      	push	{r4, r5, r6, lr}
 80096f2:	4e0e      	ldr	r6, [pc, #56]	; (800972c <sbrk_aligned+0x3c>)
 80096f4:	460c      	mov	r4, r1
 80096f6:	6831      	ldr	r1, [r6, #0]
 80096f8:	4605      	mov	r5, r0
 80096fa:	b911      	cbnz	r1, 8009702 <sbrk_aligned+0x12>
 80096fc:	f000 fc72 	bl	8009fe4 <_sbrk_r>
 8009700:	6030      	str	r0, [r6, #0]
 8009702:	4621      	mov	r1, r4
 8009704:	4628      	mov	r0, r5
 8009706:	f000 fc6d 	bl	8009fe4 <_sbrk_r>
 800970a:	1c43      	adds	r3, r0, #1
 800970c:	d00a      	beq.n	8009724 <sbrk_aligned+0x34>
 800970e:	1cc4      	adds	r4, r0, #3
 8009710:	f024 0403 	bic.w	r4, r4, #3
 8009714:	42a0      	cmp	r0, r4
 8009716:	d007      	beq.n	8009728 <sbrk_aligned+0x38>
 8009718:	1a21      	subs	r1, r4, r0
 800971a:	4628      	mov	r0, r5
 800971c:	f000 fc62 	bl	8009fe4 <_sbrk_r>
 8009720:	3001      	adds	r0, #1
 8009722:	d101      	bne.n	8009728 <sbrk_aligned+0x38>
 8009724:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009728:	4620      	mov	r0, r4
 800972a:	bd70      	pop	{r4, r5, r6, pc}
 800972c:	20002578 	.word	0x20002578

08009730 <_malloc_r>:
 8009730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009734:	1ccd      	adds	r5, r1, #3
 8009736:	f025 0503 	bic.w	r5, r5, #3
 800973a:	3508      	adds	r5, #8
 800973c:	2d0c      	cmp	r5, #12
 800973e:	bf38      	it	cc
 8009740:	250c      	movcc	r5, #12
 8009742:	2d00      	cmp	r5, #0
 8009744:	4607      	mov	r7, r0
 8009746:	db01      	blt.n	800974c <_malloc_r+0x1c>
 8009748:	42a9      	cmp	r1, r5
 800974a:	d905      	bls.n	8009758 <_malloc_r+0x28>
 800974c:	230c      	movs	r3, #12
 800974e:	603b      	str	r3, [r7, #0]
 8009750:	2600      	movs	r6, #0
 8009752:	4630      	mov	r0, r6
 8009754:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009758:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800982c <_malloc_r+0xfc>
 800975c:	f000 faa6 	bl	8009cac <__malloc_lock>
 8009760:	f8d8 3000 	ldr.w	r3, [r8]
 8009764:	461c      	mov	r4, r3
 8009766:	bb5c      	cbnz	r4, 80097c0 <_malloc_r+0x90>
 8009768:	4629      	mov	r1, r5
 800976a:	4638      	mov	r0, r7
 800976c:	f7ff ffc0 	bl	80096f0 <sbrk_aligned>
 8009770:	1c43      	adds	r3, r0, #1
 8009772:	4604      	mov	r4, r0
 8009774:	d155      	bne.n	8009822 <_malloc_r+0xf2>
 8009776:	f8d8 4000 	ldr.w	r4, [r8]
 800977a:	4626      	mov	r6, r4
 800977c:	2e00      	cmp	r6, #0
 800977e:	d145      	bne.n	800980c <_malloc_r+0xdc>
 8009780:	2c00      	cmp	r4, #0
 8009782:	d048      	beq.n	8009816 <_malloc_r+0xe6>
 8009784:	6823      	ldr	r3, [r4, #0]
 8009786:	4631      	mov	r1, r6
 8009788:	4638      	mov	r0, r7
 800978a:	eb04 0903 	add.w	r9, r4, r3
 800978e:	f000 fc29 	bl	8009fe4 <_sbrk_r>
 8009792:	4581      	cmp	r9, r0
 8009794:	d13f      	bne.n	8009816 <_malloc_r+0xe6>
 8009796:	6821      	ldr	r1, [r4, #0]
 8009798:	1a6d      	subs	r5, r5, r1
 800979a:	4629      	mov	r1, r5
 800979c:	4638      	mov	r0, r7
 800979e:	f7ff ffa7 	bl	80096f0 <sbrk_aligned>
 80097a2:	3001      	adds	r0, #1
 80097a4:	d037      	beq.n	8009816 <_malloc_r+0xe6>
 80097a6:	6823      	ldr	r3, [r4, #0]
 80097a8:	442b      	add	r3, r5
 80097aa:	6023      	str	r3, [r4, #0]
 80097ac:	f8d8 3000 	ldr.w	r3, [r8]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d038      	beq.n	8009826 <_malloc_r+0xf6>
 80097b4:	685a      	ldr	r2, [r3, #4]
 80097b6:	42a2      	cmp	r2, r4
 80097b8:	d12b      	bne.n	8009812 <_malloc_r+0xe2>
 80097ba:	2200      	movs	r2, #0
 80097bc:	605a      	str	r2, [r3, #4]
 80097be:	e00f      	b.n	80097e0 <_malloc_r+0xb0>
 80097c0:	6822      	ldr	r2, [r4, #0]
 80097c2:	1b52      	subs	r2, r2, r5
 80097c4:	d41f      	bmi.n	8009806 <_malloc_r+0xd6>
 80097c6:	2a0b      	cmp	r2, #11
 80097c8:	d917      	bls.n	80097fa <_malloc_r+0xca>
 80097ca:	1961      	adds	r1, r4, r5
 80097cc:	42a3      	cmp	r3, r4
 80097ce:	6025      	str	r5, [r4, #0]
 80097d0:	bf18      	it	ne
 80097d2:	6059      	strne	r1, [r3, #4]
 80097d4:	6863      	ldr	r3, [r4, #4]
 80097d6:	bf08      	it	eq
 80097d8:	f8c8 1000 	streq.w	r1, [r8]
 80097dc:	5162      	str	r2, [r4, r5]
 80097de:	604b      	str	r3, [r1, #4]
 80097e0:	4638      	mov	r0, r7
 80097e2:	f104 060b 	add.w	r6, r4, #11
 80097e6:	f000 fa67 	bl	8009cb8 <__malloc_unlock>
 80097ea:	f026 0607 	bic.w	r6, r6, #7
 80097ee:	1d23      	adds	r3, r4, #4
 80097f0:	1af2      	subs	r2, r6, r3
 80097f2:	d0ae      	beq.n	8009752 <_malloc_r+0x22>
 80097f4:	1b9b      	subs	r3, r3, r6
 80097f6:	50a3      	str	r3, [r4, r2]
 80097f8:	e7ab      	b.n	8009752 <_malloc_r+0x22>
 80097fa:	42a3      	cmp	r3, r4
 80097fc:	6862      	ldr	r2, [r4, #4]
 80097fe:	d1dd      	bne.n	80097bc <_malloc_r+0x8c>
 8009800:	f8c8 2000 	str.w	r2, [r8]
 8009804:	e7ec      	b.n	80097e0 <_malloc_r+0xb0>
 8009806:	4623      	mov	r3, r4
 8009808:	6864      	ldr	r4, [r4, #4]
 800980a:	e7ac      	b.n	8009766 <_malloc_r+0x36>
 800980c:	4634      	mov	r4, r6
 800980e:	6876      	ldr	r6, [r6, #4]
 8009810:	e7b4      	b.n	800977c <_malloc_r+0x4c>
 8009812:	4613      	mov	r3, r2
 8009814:	e7cc      	b.n	80097b0 <_malloc_r+0x80>
 8009816:	230c      	movs	r3, #12
 8009818:	603b      	str	r3, [r7, #0]
 800981a:	4638      	mov	r0, r7
 800981c:	f000 fa4c 	bl	8009cb8 <__malloc_unlock>
 8009820:	e797      	b.n	8009752 <_malloc_r+0x22>
 8009822:	6025      	str	r5, [r4, #0]
 8009824:	e7dc      	b.n	80097e0 <_malloc_r+0xb0>
 8009826:	605b      	str	r3, [r3, #4]
 8009828:	deff      	udf	#255	; 0xff
 800982a:	bf00      	nop
 800982c:	20002574 	.word	0x20002574

08009830 <_printf_common>:
 8009830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009834:	4616      	mov	r6, r2
 8009836:	4699      	mov	r9, r3
 8009838:	688a      	ldr	r2, [r1, #8]
 800983a:	690b      	ldr	r3, [r1, #16]
 800983c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009840:	4293      	cmp	r3, r2
 8009842:	bfb8      	it	lt
 8009844:	4613      	movlt	r3, r2
 8009846:	6033      	str	r3, [r6, #0]
 8009848:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800984c:	4607      	mov	r7, r0
 800984e:	460c      	mov	r4, r1
 8009850:	b10a      	cbz	r2, 8009856 <_printf_common+0x26>
 8009852:	3301      	adds	r3, #1
 8009854:	6033      	str	r3, [r6, #0]
 8009856:	6823      	ldr	r3, [r4, #0]
 8009858:	0699      	lsls	r1, r3, #26
 800985a:	bf42      	ittt	mi
 800985c:	6833      	ldrmi	r3, [r6, #0]
 800985e:	3302      	addmi	r3, #2
 8009860:	6033      	strmi	r3, [r6, #0]
 8009862:	6825      	ldr	r5, [r4, #0]
 8009864:	f015 0506 	ands.w	r5, r5, #6
 8009868:	d106      	bne.n	8009878 <_printf_common+0x48>
 800986a:	f104 0a19 	add.w	sl, r4, #25
 800986e:	68e3      	ldr	r3, [r4, #12]
 8009870:	6832      	ldr	r2, [r6, #0]
 8009872:	1a9b      	subs	r3, r3, r2
 8009874:	42ab      	cmp	r3, r5
 8009876:	dc26      	bgt.n	80098c6 <_printf_common+0x96>
 8009878:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800987c:	1e13      	subs	r3, r2, #0
 800987e:	6822      	ldr	r2, [r4, #0]
 8009880:	bf18      	it	ne
 8009882:	2301      	movne	r3, #1
 8009884:	0692      	lsls	r2, r2, #26
 8009886:	d42b      	bmi.n	80098e0 <_printf_common+0xb0>
 8009888:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800988c:	4649      	mov	r1, r9
 800988e:	4638      	mov	r0, r7
 8009890:	47c0      	blx	r8
 8009892:	3001      	adds	r0, #1
 8009894:	d01e      	beq.n	80098d4 <_printf_common+0xa4>
 8009896:	6823      	ldr	r3, [r4, #0]
 8009898:	6922      	ldr	r2, [r4, #16]
 800989a:	f003 0306 	and.w	r3, r3, #6
 800989e:	2b04      	cmp	r3, #4
 80098a0:	bf02      	ittt	eq
 80098a2:	68e5      	ldreq	r5, [r4, #12]
 80098a4:	6833      	ldreq	r3, [r6, #0]
 80098a6:	1aed      	subeq	r5, r5, r3
 80098a8:	68a3      	ldr	r3, [r4, #8]
 80098aa:	bf0c      	ite	eq
 80098ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80098b0:	2500      	movne	r5, #0
 80098b2:	4293      	cmp	r3, r2
 80098b4:	bfc4      	itt	gt
 80098b6:	1a9b      	subgt	r3, r3, r2
 80098b8:	18ed      	addgt	r5, r5, r3
 80098ba:	2600      	movs	r6, #0
 80098bc:	341a      	adds	r4, #26
 80098be:	42b5      	cmp	r5, r6
 80098c0:	d11a      	bne.n	80098f8 <_printf_common+0xc8>
 80098c2:	2000      	movs	r0, #0
 80098c4:	e008      	b.n	80098d8 <_printf_common+0xa8>
 80098c6:	2301      	movs	r3, #1
 80098c8:	4652      	mov	r2, sl
 80098ca:	4649      	mov	r1, r9
 80098cc:	4638      	mov	r0, r7
 80098ce:	47c0      	blx	r8
 80098d0:	3001      	adds	r0, #1
 80098d2:	d103      	bne.n	80098dc <_printf_common+0xac>
 80098d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80098d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098dc:	3501      	adds	r5, #1
 80098de:	e7c6      	b.n	800986e <_printf_common+0x3e>
 80098e0:	18e1      	adds	r1, r4, r3
 80098e2:	1c5a      	adds	r2, r3, #1
 80098e4:	2030      	movs	r0, #48	; 0x30
 80098e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80098ea:	4422      	add	r2, r4
 80098ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80098f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80098f4:	3302      	adds	r3, #2
 80098f6:	e7c7      	b.n	8009888 <_printf_common+0x58>
 80098f8:	2301      	movs	r3, #1
 80098fa:	4622      	mov	r2, r4
 80098fc:	4649      	mov	r1, r9
 80098fe:	4638      	mov	r0, r7
 8009900:	47c0      	blx	r8
 8009902:	3001      	adds	r0, #1
 8009904:	d0e6      	beq.n	80098d4 <_printf_common+0xa4>
 8009906:	3601      	adds	r6, #1
 8009908:	e7d9      	b.n	80098be <_printf_common+0x8e>
	...

0800990c <_printf_i>:
 800990c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009910:	7e0f      	ldrb	r7, [r1, #24]
 8009912:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009914:	2f78      	cmp	r7, #120	; 0x78
 8009916:	4691      	mov	r9, r2
 8009918:	4680      	mov	r8, r0
 800991a:	460c      	mov	r4, r1
 800991c:	469a      	mov	sl, r3
 800991e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009922:	d807      	bhi.n	8009934 <_printf_i+0x28>
 8009924:	2f62      	cmp	r7, #98	; 0x62
 8009926:	d80a      	bhi.n	800993e <_printf_i+0x32>
 8009928:	2f00      	cmp	r7, #0
 800992a:	f000 80d4 	beq.w	8009ad6 <_printf_i+0x1ca>
 800992e:	2f58      	cmp	r7, #88	; 0x58
 8009930:	f000 80c0 	beq.w	8009ab4 <_printf_i+0x1a8>
 8009934:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009938:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800993c:	e03a      	b.n	80099b4 <_printf_i+0xa8>
 800993e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009942:	2b15      	cmp	r3, #21
 8009944:	d8f6      	bhi.n	8009934 <_printf_i+0x28>
 8009946:	a101      	add	r1, pc, #4	; (adr r1, 800994c <_printf_i+0x40>)
 8009948:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800994c:	080099a5 	.word	0x080099a5
 8009950:	080099b9 	.word	0x080099b9
 8009954:	08009935 	.word	0x08009935
 8009958:	08009935 	.word	0x08009935
 800995c:	08009935 	.word	0x08009935
 8009960:	08009935 	.word	0x08009935
 8009964:	080099b9 	.word	0x080099b9
 8009968:	08009935 	.word	0x08009935
 800996c:	08009935 	.word	0x08009935
 8009970:	08009935 	.word	0x08009935
 8009974:	08009935 	.word	0x08009935
 8009978:	08009abd 	.word	0x08009abd
 800997c:	080099e5 	.word	0x080099e5
 8009980:	08009a77 	.word	0x08009a77
 8009984:	08009935 	.word	0x08009935
 8009988:	08009935 	.word	0x08009935
 800998c:	08009adf 	.word	0x08009adf
 8009990:	08009935 	.word	0x08009935
 8009994:	080099e5 	.word	0x080099e5
 8009998:	08009935 	.word	0x08009935
 800999c:	08009935 	.word	0x08009935
 80099a0:	08009a7f 	.word	0x08009a7f
 80099a4:	682b      	ldr	r3, [r5, #0]
 80099a6:	1d1a      	adds	r2, r3, #4
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	602a      	str	r2, [r5, #0]
 80099ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80099b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80099b4:	2301      	movs	r3, #1
 80099b6:	e09f      	b.n	8009af8 <_printf_i+0x1ec>
 80099b8:	6820      	ldr	r0, [r4, #0]
 80099ba:	682b      	ldr	r3, [r5, #0]
 80099bc:	0607      	lsls	r7, r0, #24
 80099be:	f103 0104 	add.w	r1, r3, #4
 80099c2:	6029      	str	r1, [r5, #0]
 80099c4:	d501      	bpl.n	80099ca <_printf_i+0xbe>
 80099c6:	681e      	ldr	r6, [r3, #0]
 80099c8:	e003      	b.n	80099d2 <_printf_i+0xc6>
 80099ca:	0646      	lsls	r6, r0, #25
 80099cc:	d5fb      	bpl.n	80099c6 <_printf_i+0xba>
 80099ce:	f9b3 6000 	ldrsh.w	r6, [r3]
 80099d2:	2e00      	cmp	r6, #0
 80099d4:	da03      	bge.n	80099de <_printf_i+0xd2>
 80099d6:	232d      	movs	r3, #45	; 0x2d
 80099d8:	4276      	negs	r6, r6
 80099da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80099de:	485a      	ldr	r0, [pc, #360]	; (8009b48 <_printf_i+0x23c>)
 80099e0:	230a      	movs	r3, #10
 80099e2:	e012      	b.n	8009a0a <_printf_i+0xfe>
 80099e4:	682b      	ldr	r3, [r5, #0]
 80099e6:	6820      	ldr	r0, [r4, #0]
 80099e8:	1d19      	adds	r1, r3, #4
 80099ea:	6029      	str	r1, [r5, #0]
 80099ec:	0605      	lsls	r5, r0, #24
 80099ee:	d501      	bpl.n	80099f4 <_printf_i+0xe8>
 80099f0:	681e      	ldr	r6, [r3, #0]
 80099f2:	e002      	b.n	80099fa <_printf_i+0xee>
 80099f4:	0641      	lsls	r1, r0, #25
 80099f6:	d5fb      	bpl.n	80099f0 <_printf_i+0xe4>
 80099f8:	881e      	ldrh	r6, [r3, #0]
 80099fa:	4853      	ldr	r0, [pc, #332]	; (8009b48 <_printf_i+0x23c>)
 80099fc:	2f6f      	cmp	r7, #111	; 0x6f
 80099fe:	bf0c      	ite	eq
 8009a00:	2308      	moveq	r3, #8
 8009a02:	230a      	movne	r3, #10
 8009a04:	2100      	movs	r1, #0
 8009a06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009a0a:	6865      	ldr	r5, [r4, #4]
 8009a0c:	60a5      	str	r5, [r4, #8]
 8009a0e:	2d00      	cmp	r5, #0
 8009a10:	bfa2      	ittt	ge
 8009a12:	6821      	ldrge	r1, [r4, #0]
 8009a14:	f021 0104 	bicge.w	r1, r1, #4
 8009a18:	6021      	strge	r1, [r4, #0]
 8009a1a:	b90e      	cbnz	r6, 8009a20 <_printf_i+0x114>
 8009a1c:	2d00      	cmp	r5, #0
 8009a1e:	d04b      	beq.n	8009ab8 <_printf_i+0x1ac>
 8009a20:	4615      	mov	r5, r2
 8009a22:	fbb6 f1f3 	udiv	r1, r6, r3
 8009a26:	fb03 6711 	mls	r7, r3, r1, r6
 8009a2a:	5dc7      	ldrb	r7, [r0, r7]
 8009a2c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009a30:	4637      	mov	r7, r6
 8009a32:	42bb      	cmp	r3, r7
 8009a34:	460e      	mov	r6, r1
 8009a36:	d9f4      	bls.n	8009a22 <_printf_i+0x116>
 8009a38:	2b08      	cmp	r3, #8
 8009a3a:	d10b      	bne.n	8009a54 <_printf_i+0x148>
 8009a3c:	6823      	ldr	r3, [r4, #0]
 8009a3e:	07de      	lsls	r6, r3, #31
 8009a40:	d508      	bpl.n	8009a54 <_printf_i+0x148>
 8009a42:	6923      	ldr	r3, [r4, #16]
 8009a44:	6861      	ldr	r1, [r4, #4]
 8009a46:	4299      	cmp	r1, r3
 8009a48:	bfde      	ittt	le
 8009a4a:	2330      	movle	r3, #48	; 0x30
 8009a4c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009a50:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009a54:	1b52      	subs	r2, r2, r5
 8009a56:	6122      	str	r2, [r4, #16]
 8009a58:	f8cd a000 	str.w	sl, [sp]
 8009a5c:	464b      	mov	r3, r9
 8009a5e:	aa03      	add	r2, sp, #12
 8009a60:	4621      	mov	r1, r4
 8009a62:	4640      	mov	r0, r8
 8009a64:	f7ff fee4 	bl	8009830 <_printf_common>
 8009a68:	3001      	adds	r0, #1
 8009a6a:	d14a      	bne.n	8009b02 <_printf_i+0x1f6>
 8009a6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009a70:	b004      	add	sp, #16
 8009a72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a76:	6823      	ldr	r3, [r4, #0]
 8009a78:	f043 0320 	orr.w	r3, r3, #32
 8009a7c:	6023      	str	r3, [r4, #0]
 8009a7e:	4833      	ldr	r0, [pc, #204]	; (8009b4c <_printf_i+0x240>)
 8009a80:	2778      	movs	r7, #120	; 0x78
 8009a82:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009a86:	6823      	ldr	r3, [r4, #0]
 8009a88:	6829      	ldr	r1, [r5, #0]
 8009a8a:	061f      	lsls	r7, r3, #24
 8009a8c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009a90:	d402      	bmi.n	8009a98 <_printf_i+0x18c>
 8009a92:	065f      	lsls	r7, r3, #25
 8009a94:	bf48      	it	mi
 8009a96:	b2b6      	uxthmi	r6, r6
 8009a98:	07df      	lsls	r7, r3, #31
 8009a9a:	bf48      	it	mi
 8009a9c:	f043 0320 	orrmi.w	r3, r3, #32
 8009aa0:	6029      	str	r1, [r5, #0]
 8009aa2:	bf48      	it	mi
 8009aa4:	6023      	strmi	r3, [r4, #0]
 8009aa6:	b91e      	cbnz	r6, 8009ab0 <_printf_i+0x1a4>
 8009aa8:	6823      	ldr	r3, [r4, #0]
 8009aaa:	f023 0320 	bic.w	r3, r3, #32
 8009aae:	6023      	str	r3, [r4, #0]
 8009ab0:	2310      	movs	r3, #16
 8009ab2:	e7a7      	b.n	8009a04 <_printf_i+0xf8>
 8009ab4:	4824      	ldr	r0, [pc, #144]	; (8009b48 <_printf_i+0x23c>)
 8009ab6:	e7e4      	b.n	8009a82 <_printf_i+0x176>
 8009ab8:	4615      	mov	r5, r2
 8009aba:	e7bd      	b.n	8009a38 <_printf_i+0x12c>
 8009abc:	682b      	ldr	r3, [r5, #0]
 8009abe:	6826      	ldr	r6, [r4, #0]
 8009ac0:	6961      	ldr	r1, [r4, #20]
 8009ac2:	1d18      	adds	r0, r3, #4
 8009ac4:	6028      	str	r0, [r5, #0]
 8009ac6:	0635      	lsls	r5, r6, #24
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	d501      	bpl.n	8009ad0 <_printf_i+0x1c4>
 8009acc:	6019      	str	r1, [r3, #0]
 8009ace:	e002      	b.n	8009ad6 <_printf_i+0x1ca>
 8009ad0:	0670      	lsls	r0, r6, #25
 8009ad2:	d5fb      	bpl.n	8009acc <_printf_i+0x1c0>
 8009ad4:	8019      	strh	r1, [r3, #0]
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	6123      	str	r3, [r4, #16]
 8009ada:	4615      	mov	r5, r2
 8009adc:	e7bc      	b.n	8009a58 <_printf_i+0x14c>
 8009ade:	682b      	ldr	r3, [r5, #0]
 8009ae0:	1d1a      	adds	r2, r3, #4
 8009ae2:	602a      	str	r2, [r5, #0]
 8009ae4:	681d      	ldr	r5, [r3, #0]
 8009ae6:	6862      	ldr	r2, [r4, #4]
 8009ae8:	2100      	movs	r1, #0
 8009aea:	4628      	mov	r0, r5
 8009aec:	f7f6 fb70 	bl	80001d0 <memchr>
 8009af0:	b108      	cbz	r0, 8009af6 <_printf_i+0x1ea>
 8009af2:	1b40      	subs	r0, r0, r5
 8009af4:	6060      	str	r0, [r4, #4]
 8009af6:	6863      	ldr	r3, [r4, #4]
 8009af8:	6123      	str	r3, [r4, #16]
 8009afa:	2300      	movs	r3, #0
 8009afc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b00:	e7aa      	b.n	8009a58 <_printf_i+0x14c>
 8009b02:	6923      	ldr	r3, [r4, #16]
 8009b04:	462a      	mov	r2, r5
 8009b06:	4649      	mov	r1, r9
 8009b08:	4640      	mov	r0, r8
 8009b0a:	47d0      	blx	sl
 8009b0c:	3001      	adds	r0, #1
 8009b0e:	d0ad      	beq.n	8009a6c <_printf_i+0x160>
 8009b10:	6823      	ldr	r3, [r4, #0]
 8009b12:	079b      	lsls	r3, r3, #30
 8009b14:	d413      	bmi.n	8009b3e <_printf_i+0x232>
 8009b16:	68e0      	ldr	r0, [r4, #12]
 8009b18:	9b03      	ldr	r3, [sp, #12]
 8009b1a:	4298      	cmp	r0, r3
 8009b1c:	bfb8      	it	lt
 8009b1e:	4618      	movlt	r0, r3
 8009b20:	e7a6      	b.n	8009a70 <_printf_i+0x164>
 8009b22:	2301      	movs	r3, #1
 8009b24:	4632      	mov	r2, r6
 8009b26:	4649      	mov	r1, r9
 8009b28:	4640      	mov	r0, r8
 8009b2a:	47d0      	blx	sl
 8009b2c:	3001      	adds	r0, #1
 8009b2e:	d09d      	beq.n	8009a6c <_printf_i+0x160>
 8009b30:	3501      	adds	r5, #1
 8009b32:	68e3      	ldr	r3, [r4, #12]
 8009b34:	9903      	ldr	r1, [sp, #12]
 8009b36:	1a5b      	subs	r3, r3, r1
 8009b38:	42ab      	cmp	r3, r5
 8009b3a:	dcf2      	bgt.n	8009b22 <_printf_i+0x216>
 8009b3c:	e7eb      	b.n	8009b16 <_printf_i+0x20a>
 8009b3e:	2500      	movs	r5, #0
 8009b40:	f104 0619 	add.w	r6, r4, #25
 8009b44:	e7f5      	b.n	8009b32 <_printf_i+0x226>
 8009b46:	bf00      	nop
 8009b48:	0800a2e9 	.word	0x0800a2e9
 8009b4c:	0800a2fa 	.word	0x0800a2fa

08009b50 <__sflush_r>:
 8009b50:	898a      	ldrh	r2, [r1, #12]
 8009b52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b56:	4605      	mov	r5, r0
 8009b58:	0710      	lsls	r0, r2, #28
 8009b5a:	460c      	mov	r4, r1
 8009b5c:	d458      	bmi.n	8009c10 <__sflush_r+0xc0>
 8009b5e:	684b      	ldr	r3, [r1, #4]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	dc05      	bgt.n	8009b70 <__sflush_r+0x20>
 8009b64:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	dc02      	bgt.n	8009b70 <__sflush_r+0x20>
 8009b6a:	2000      	movs	r0, #0
 8009b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009b72:	2e00      	cmp	r6, #0
 8009b74:	d0f9      	beq.n	8009b6a <__sflush_r+0x1a>
 8009b76:	2300      	movs	r3, #0
 8009b78:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009b7c:	682f      	ldr	r7, [r5, #0]
 8009b7e:	6a21      	ldr	r1, [r4, #32]
 8009b80:	602b      	str	r3, [r5, #0]
 8009b82:	d032      	beq.n	8009bea <__sflush_r+0x9a>
 8009b84:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009b86:	89a3      	ldrh	r3, [r4, #12]
 8009b88:	075a      	lsls	r2, r3, #29
 8009b8a:	d505      	bpl.n	8009b98 <__sflush_r+0x48>
 8009b8c:	6863      	ldr	r3, [r4, #4]
 8009b8e:	1ac0      	subs	r0, r0, r3
 8009b90:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009b92:	b10b      	cbz	r3, 8009b98 <__sflush_r+0x48>
 8009b94:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009b96:	1ac0      	subs	r0, r0, r3
 8009b98:	2300      	movs	r3, #0
 8009b9a:	4602      	mov	r2, r0
 8009b9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009b9e:	6a21      	ldr	r1, [r4, #32]
 8009ba0:	4628      	mov	r0, r5
 8009ba2:	47b0      	blx	r6
 8009ba4:	1c43      	adds	r3, r0, #1
 8009ba6:	89a3      	ldrh	r3, [r4, #12]
 8009ba8:	d106      	bne.n	8009bb8 <__sflush_r+0x68>
 8009baa:	6829      	ldr	r1, [r5, #0]
 8009bac:	291d      	cmp	r1, #29
 8009bae:	d82b      	bhi.n	8009c08 <__sflush_r+0xb8>
 8009bb0:	4a29      	ldr	r2, [pc, #164]	; (8009c58 <__sflush_r+0x108>)
 8009bb2:	410a      	asrs	r2, r1
 8009bb4:	07d6      	lsls	r6, r2, #31
 8009bb6:	d427      	bmi.n	8009c08 <__sflush_r+0xb8>
 8009bb8:	2200      	movs	r2, #0
 8009bba:	6062      	str	r2, [r4, #4]
 8009bbc:	04d9      	lsls	r1, r3, #19
 8009bbe:	6922      	ldr	r2, [r4, #16]
 8009bc0:	6022      	str	r2, [r4, #0]
 8009bc2:	d504      	bpl.n	8009bce <__sflush_r+0x7e>
 8009bc4:	1c42      	adds	r2, r0, #1
 8009bc6:	d101      	bne.n	8009bcc <__sflush_r+0x7c>
 8009bc8:	682b      	ldr	r3, [r5, #0]
 8009bca:	b903      	cbnz	r3, 8009bce <__sflush_r+0x7e>
 8009bcc:	6560      	str	r0, [r4, #84]	; 0x54
 8009bce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009bd0:	602f      	str	r7, [r5, #0]
 8009bd2:	2900      	cmp	r1, #0
 8009bd4:	d0c9      	beq.n	8009b6a <__sflush_r+0x1a>
 8009bd6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009bda:	4299      	cmp	r1, r3
 8009bdc:	d002      	beq.n	8009be4 <__sflush_r+0x94>
 8009bde:	4628      	mov	r0, r5
 8009be0:	f7ff fbf6 	bl	80093d0 <_free_r>
 8009be4:	2000      	movs	r0, #0
 8009be6:	6360      	str	r0, [r4, #52]	; 0x34
 8009be8:	e7c0      	b.n	8009b6c <__sflush_r+0x1c>
 8009bea:	2301      	movs	r3, #1
 8009bec:	4628      	mov	r0, r5
 8009bee:	47b0      	blx	r6
 8009bf0:	1c41      	adds	r1, r0, #1
 8009bf2:	d1c8      	bne.n	8009b86 <__sflush_r+0x36>
 8009bf4:	682b      	ldr	r3, [r5, #0]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d0c5      	beq.n	8009b86 <__sflush_r+0x36>
 8009bfa:	2b1d      	cmp	r3, #29
 8009bfc:	d001      	beq.n	8009c02 <__sflush_r+0xb2>
 8009bfe:	2b16      	cmp	r3, #22
 8009c00:	d101      	bne.n	8009c06 <__sflush_r+0xb6>
 8009c02:	602f      	str	r7, [r5, #0]
 8009c04:	e7b1      	b.n	8009b6a <__sflush_r+0x1a>
 8009c06:	89a3      	ldrh	r3, [r4, #12]
 8009c08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c0c:	81a3      	strh	r3, [r4, #12]
 8009c0e:	e7ad      	b.n	8009b6c <__sflush_r+0x1c>
 8009c10:	690f      	ldr	r7, [r1, #16]
 8009c12:	2f00      	cmp	r7, #0
 8009c14:	d0a9      	beq.n	8009b6a <__sflush_r+0x1a>
 8009c16:	0793      	lsls	r3, r2, #30
 8009c18:	680e      	ldr	r6, [r1, #0]
 8009c1a:	bf08      	it	eq
 8009c1c:	694b      	ldreq	r3, [r1, #20]
 8009c1e:	600f      	str	r7, [r1, #0]
 8009c20:	bf18      	it	ne
 8009c22:	2300      	movne	r3, #0
 8009c24:	eba6 0807 	sub.w	r8, r6, r7
 8009c28:	608b      	str	r3, [r1, #8]
 8009c2a:	f1b8 0f00 	cmp.w	r8, #0
 8009c2e:	dd9c      	ble.n	8009b6a <__sflush_r+0x1a>
 8009c30:	6a21      	ldr	r1, [r4, #32]
 8009c32:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009c34:	4643      	mov	r3, r8
 8009c36:	463a      	mov	r2, r7
 8009c38:	4628      	mov	r0, r5
 8009c3a:	47b0      	blx	r6
 8009c3c:	2800      	cmp	r0, #0
 8009c3e:	dc06      	bgt.n	8009c4e <__sflush_r+0xfe>
 8009c40:	89a3      	ldrh	r3, [r4, #12]
 8009c42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c46:	81a3      	strh	r3, [r4, #12]
 8009c48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c4c:	e78e      	b.n	8009b6c <__sflush_r+0x1c>
 8009c4e:	4407      	add	r7, r0
 8009c50:	eba8 0800 	sub.w	r8, r8, r0
 8009c54:	e7e9      	b.n	8009c2a <__sflush_r+0xda>
 8009c56:	bf00      	nop
 8009c58:	dfbffffe 	.word	0xdfbffffe

08009c5c <_fflush_r>:
 8009c5c:	b538      	push	{r3, r4, r5, lr}
 8009c5e:	690b      	ldr	r3, [r1, #16]
 8009c60:	4605      	mov	r5, r0
 8009c62:	460c      	mov	r4, r1
 8009c64:	b913      	cbnz	r3, 8009c6c <_fflush_r+0x10>
 8009c66:	2500      	movs	r5, #0
 8009c68:	4628      	mov	r0, r5
 8009c6a:	bd38      	pop	{r3, r4, r5, pc}
 8009c6c:	b118      	cbz	r0, 8009c76 <_fflush_r+0x1a>
 8009c6e:	6a03      	ldr	r3, [r0, #32]
 8009c70:	b90b      	cbnz	r3, 8009c76 <_fflush_r+0x1a>
 8009c72:	f7ff fa6f 	bl	8009154 <__sinit>
 8009c76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d0f3      	beq.n	8009c66 <_fflush_r+0xa>
 8009c7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009c80:	07d0      	lsls	r0, r2, #31
 8009c82:	d404      	bmi.n	8009c8e <_fflush_r+0x32>
 8009c84:	0599      	lsls	r1, r3, #22
 8009c86:	d402      	bmi.n	8009c8e <_fflush_r+0x32>
 8009c88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c8a:	f7ff fb90 	bl	80093ae <__retarget_lock_acquire_recursive>
 8009c8e:	4628      	mov	r0, r5
 8009c90:	4621      	mov	r1, r4
 8009c92:	f7ff ff5d 	bl	8009b50 <__sflush_r>
 8009c96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c98:	07da      	lsls	r2, r3, #31
 8009c9a:	4605      	mov	r5, r0
 8009c9c:	d4e4      	bmi.n	8009c68 <_fflush_r+0xc>
 8009c9e:	89a3      	ldrh	r3, [r4, #12]
 8009ca0:	059b      	lsls	r3, r3, #22
 8009ca2:	d4e1      	bmi.n	8009c68 <_fflush_r+0xc>
 8009ca4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ca6:	f7ff fb83 	bl	80093b0 <__retarget_lock_release_recursive>
 8009caa:	e7dd      	b.n	8009c68 <_fflush_r+0xc>

08009cac <__malloc_lock>:
 8009cac:	4801      	ldr	r0, [pc, #4]	; (8009cb4 <__malloc_lock+0x8>)
 8009cae:	f7ff bb7e 	b.w	80093ae <__retarget_lock_acquire_recursive>
 8009cb2:	bf00      	nop
 8009cb4:	20002570 	.word	0x20002570

08009cb8 <__malloc_unlock>:
 8009cb8:	4801      	ldr	r0, [pc, #4]	; (8009cc0 <__malloc_unlock+0x8>)
 8009cba:	f7ff bb79 	b.w	80093b0 <__retarget_lock_release_recursive>
 8009cbe:	bf00      	nop
 8009cc0:	20002570 	.word	0x20002570

08009cc4 <__sread>:
 8009cc4:	b510      	push	{r4, lr}
 8009cc6:	460c      	mov	r4, r1
 8009cc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ccc:	f000 f978 	bl	8009fc0 <_read_r>
 8009cd0:	2800      	cmp	r0, #0
 8009cd2:	bfab      	itete	ge
 8009cd4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009cd6:	89a3      	ldrhlt	r3, [r4, #12]
 8009cd8:	181b      	addge	r3, r3, r0
 8009cda:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009cde:	bfac      	ite	ge
 8009ce0:	6563      	strge	r3, [r4, #84]	; 0x54
 8009ce2:	81a3      	strhlt	r3, [r4, #12]
 8009ce4:	bd10      	pop	{r4, pc}

08009ce6 <__swrite>:
 8009ce6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cea:	461f      	mov	r7, r3
 8009cec:	898b      	ldrh	r3, [r1, #12]
 8009cee:	05db      	lsls	r3, r3, #23
 8009cf0:	4605      	mov	r5, r0
 8009cf2:	460c      	mov	r4, r1
 8009cf4:	4616      	mov	r6, r2
 8009cf6:	d505      	bpl.n	8009d04 <__swrite+0x1e>
 8009cf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cfc:	2302      	movs	r3, #2
 8009cfe:	2200      	movs	r2, #0
 8009d00:	f000 f94c 	bl	8009f9c <_lseek_r>
 8009d04:	89a3      	ldrh	r3, [r4, #12]
 8009d06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009d0e:	81a3      	strh	r3, [r4, #12]
 8009d10:	4632      	mov	r2, r6
 8009d12:	463b      	mov	r3, r7
 8009d14:	4628      	mov	r0, r5
 8009d16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d1a:	f000 b973 	b.w	800a004 <_write_r>

08009d1e <__sseek>:
 8009d1e:	b510      	push	{r4, lr}
 8009d20:	460c      	mov	r4, r1
 8009d22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d26:	f000 f939 	bl	8009f9c <_lseek_r>
 8009d2a:	1c43      	adds	r3, r0, #1
 8009d2c:	89a3      	ldrh	r3, [r4, #12]
 8009d2e:	bf15      	itete	ne
 8009d30:	6560      	strne	r0, [r4, #84]	; 0x54
 8009d32:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009d36:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009d3a:	81a3      	strheq	r3, [r4, #12]
 8009d3c:	bf18      	it	ne
 8009d3e:	81a3      	strhne	r3, [r4, #12]
 8009d40:	bd10      	pop	{r4, pc}

08009d42 <__sclose>:
 8009d42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d46:	f000 b8f7 	b.w	8009f38 <_close_r>

08009d4a <__swbuf_r>:
 8009d4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d4c:	460e      	mov	r6, r1
 8009d4e:	4614      	mov	r4, r2
 8009d50:	4605      	mov	r5, r0
 8009d52:	b118      	cbz	r0, 8009d5c <__swbuf_r+0x12>
 8009d54:	6a03      	ldr	r3, [r0, #32]
 8009d56:	b90b      	cbnz	r3, 8009d5c <__swbuf_r+0x12>
 8009d58:	f7ff f9fc 	bl	8009154 <__sinit>
 8009d5c:	69a3      	ldr	r3, [r4, #24]
 8009d5e:	60a3      	str	r3, [r4, #8]
 8009d60:	89a3      	ldrh	r3, [r4, #12]
 8009d62:	071a      	lsls	r2, r3, #28
 8009d64:	d525      	bpl.n	8009db2 <__swbuf_r+0x68>
 8009d66:	6923      	ldr	r3, [r4, #16]
 8009d68:	b31b      	cbz	r3, 8009db2 <__swbuf_r+0x68>
 8009d6a:	6823      	ldr	r3, [r4, #0]
 8009d6c:	6922      	ldr	r2, [r4, #16]
 8009d6e:	1a98      	subs	r0, r3, r2
 8009d70:	6963      	ldr	r3, [r4, #20]
 8009d72:	b2f6      	uxtb	r6, r6
 8009d74:	4283      	cmp	r3, r0
 8009d76:	4637      	mov	r7, r6
 8009d78:	dc04      	bgt.n	8009d84 <__swbuf_r+0x3a>
 8009d7a:	4621      	mov	r1, r4
 8009d7c:	4628      	mov	r0, r5
 8009d7e:	f7ff ff6d 	bl	8009c5c <_fflush_r>
 8009d82:	b9e0      	cbnz	r0, 8009dbe <__swbuf_r+0x74>
 8009d84:	68a3      	ldr	r3, [r4, #8]
 8009d86:	3b01      	subs	r3, #1
 8009d88:	60a3      	str	r3, [r4, #8]
 8009d8a:	6823      	ldr	r3, [r4, #0]
 8009d8c:	1c5a      	adds	r2, r3, #1
 8009d8e:	6022      	str	r2, [r4, #0]
 8009d90:	701e      	strb	r6, [r3, #0]
 8009d92:	6962      	ldr	r2, [r4, #20]
 8009d94:	1c43      	adds	r3, r0, #1
 8009d96:	429a      	cmp	r2, r3
 8009d98:	d004      	beq.n	8009da4 <__swbuf_r+0x5a>
 8009d9a:	89a3      	ldrh	r3, [r4, #12]
 8009d9c:	07db      	lsls	r3, r3, #31
 8009d9e:	d506      	bpl.n	8009dae <__swbuf_r+0x64>
 8009da0:	2e0a      	cmp	r6, #10
 8009da2:	d104      	bne.n	8009dae <__swbuf_r+0x64>
 8009da4:	4621      	mov	r1, r4
 8009da6:	4628      	mov	r0, r5
 8009da8:	f7ff ff58 	bl	8009c5c <_fflush_r>
 8009dac:	b938      	cbnz	r0, 8009dbe <__swbuf_r+0x74>
 8009dae:	4638      	mov	r0, r7
 8009db0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009db2:	4621      	mov	r1, r4
 8009db4:	4628      	mov	r0, r5
 8009db6:	f000 f805 	bl	8009dc4 <__swsetup_r>
 8009dba:	2800      	cmp	r0, #0
 8009dbc:	d0d5      	beq.n	8009d6a <__swbuf_r+0x20>
 8009dbe:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009dc2:	e7f4      	b.n	8009dae <__swbuf_r+0x64>

08009dc4 <__swsetup_r>:
 8009dc4:	b538      	push	{r3, r4, r5, lr}
 8009dc6:	4b2a      	ldr	r3, [pc, #168]	; (8009e70 <__swsetup_r+0xac>)
 8009dc8:	4605      	mov	r5, r0
 8009dca:	6818      	ldr	r0, [r3, #0]
 8009dcc:	460c      	mov	r4, r1
 8009dce:	b118      	cbz	r0, 8009dd8 <__swsetup_r+0x14>
 8009dd0:	6a03      	ldr	r3, [r0, #32]
 8009dd2:	b90b      	cbnz	r3, 8009dd8 <__swsetup_r+0x14>
 8009dd4:	f7ff f9be 	bl	8009154 <__sinit>
 8009dd8:	89a3      	ldrh	r3, [r4, #12]
 8009dda:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009dde:	0718      	lsls	r0, r3, #28
 8009de0:	d422      	bmi.n	8009e28 <__swsetup_r+0x64>
 8009de2:	06d9      	lsls	r1, r3, #27
 8009de4:	d407      	bmi.n	8009df6 <__swsetup_r+0x32>
 8009de6:	2309      	movs	r3, #9
 8009de8:	602b      	str	r3, [r5, #0]
 8009dea:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009dee:	81a3      	strh	r3, [r4, #12]
 8009df0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009df4:	e034      	b.n	8009e60 <__swsetup_r+0x9c>
 8009df6:	0758      	lsls	r0, r3, #29
 8009df8:	d512      	bpl.n	8009e20 <__swsetup_r+0x5c>
 8009dfa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009dfc:	b141      	cbz	r1, 8009e10 <__swsetup_r+0x4c>
 8009dfe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e02:	4299      	cmp	r1, r3
 8009e04:	d002      	beq.n	8009e0c <__swsetup_r+0x48>
 8009e06:	4628      	mov	r0, r5
 8009e08:	f7ff fae2 	bl	80093d0 <_free_r>
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	6363      	str	r3, [r4, #52]	; 0x34
 8009e10:	89a3      	ldrh	r3, [r4, #12]
 8009e12:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009e16:	81a3      	strh	r3, [r4, #12]
 8009e18:	2300      	movs	r3, #0
 8009e1a:	6063      	str	r3, [r4, #4]
 8009e1c:	6923      	ldr	r3, [r4, #16]
 8009e1e:	6023      	str	r3, [r4, #0]
 8009e20:	89a3      	ldrh	r3, [r4, #12]
 8009e22:	f043 0308 	orr.w	r3, r3, #8
 8009e26:	81a3      	strh	r3, [r4, #12]
 8009e28:	6923      	ldr	r3, [r4, #16]
 8009e2a:	b94b      	cbnz	r3, 8009e40 <__swsetup_r+0x7c>
 8009e2c:	89a3      	ldrh	r3, [r4, #12]
 8009e2e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009e32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e36:	d003      	beq.n	8009e40 <__swsetup_r+0x7c>
 8009e38:	4621      	mov	r1, r4
 8009e3a:	4628      	mov	r0, r5
 8009e3c:	f000 f840 	bl	8009ec0 <__smakebuf_r>
 8009e40:	89a0      	ldrh	r0, [r4, #12]
 8009e42:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009e46:	f010 0301 	ands.w	r3, r0, #1
 8009e4a:	d00a      	beq.n	8009e62 <__swsetup_r+0x9e>
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	60a3      	str	r3, [r4, #8]
 8009e50:	6963      	ldr	r3, [r4, #20]
 8009e52:	425b      	negs	r3, r3
 8009e54:	61a3      	str	r3, [r4, #24]
 8009e56:	6923      	ldr	r3, [r4, #16]
 8009e58:	b943      	cbnz	r3, 8009e6c <__swsetup_r+0xa8>
 8009e5a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009e5e:	d1c4      	bne.n	8009dea <__swsetup_r+0x26>
 8009e60:	bd38      	pop	{r3, r4, r5, pc}
 8009e62:	0781      	lsls	r1, r0, #30
 8009e64:	bf58      	it	pl
 8009e66:	6963      	ldrpl	r3, [r4, #20]
 8009e68:	60a3      	str	r3, [r4, #8]
 8009e6a:	e7f4      	b.n	8009e56 <__swsetup_r+0x92>
 8009e6c:	2000      	movs	r0, #0
 8009e6e:	e7f7      	b.n	8009e60 <__swsetup_r+0x9c>
 8009e70:	20000068 	.word	0x20000068

08009e74 <__swhatbuf_r>:
 8009e74:	b570      	push	{r4, r5, r6, lr}
 8009e76:	460c      	mov	r4, r1
 8009e78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e7c:	2900      	cmp	r1, #0
 8009e7e:	b096      	sub	sp, #88	; 0x58
 8009e80:	4615      	mov	r5, r2
 8009e82:	461e      	mov	r6, r3
 8009e84:	da0d      	bge.n	8009ea2 <__swhatbuf_r+0x2e>
 8009e86:	89a3      	ldrh	r3, [r4, #12]
 8009e88:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009e8c:	f04f 0100 	mov.w	r1, #0
 8009e90:	bf0c      	ite	eq
 8009e92:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009e96:	2340      	movne	r3, #64	; 0x40
 8009e98:	2000      	movs	r0, #0
 8009e9a:	6031      	str	r1, [r6, #0]
 8009e9c:	602b      	str	r3, [r5, #0]
 8009e9e:	b016      	add	sp, #88	; 0x58
 8009ea0:	bd70      	pop	{r4, r5, r6, pc}
 8009ea2:	466a      	mov	r2, sp
 8009ea4:	f000 f858 	bl	8009f58 <_fstat_r>
 8009ea8:	2800      	cmp	r0, #0
 8009eaa:	dbec      	blt.n	8009e86 <__swhatbuf_r+0x12>
 8009eac:	9901      	ldr	r1, [sp, #4]
 8009eae:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009eb2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009eb6:	4259      	negs	r1, r3
 8009eb8:	4159      	adcs	r1, r3
 8009eba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ebe:	e7eb      	b.n	8009e98 <__swhatbuf_r+0x24>

08009ec0 <__smakebuf_r>:
 8009ec0:	898b      	ldrh	r3, [r1, #12]
 8009ec2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009ec4:	079d      	lsls	r5, r3, #30
 8009ec6:	4606      	mov	r6, r0
 8009ec8:	460c      	mov	r4, r1
 8009eca:	d507      	bpl.n	8009edc <__smakebuf_r+0x1c>
 8009ecc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009ed0:	6023      	str	r3, [r4, #0]
 8009ed2:	6123      	str	r3, [r4, #16]
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	6163      	str	r3, [r4, #20]
 8009ed8:	b002      	add	sp, #8
 8009eda:	bd70      	pop	{r4, r5, r6, pc}
 8009edc:	ab01      	add	r3, sp, #4
 8009ede:	466a      	mov	r2, sp
 8009ee0:	f7ff ffc8 	bl	8009e74 <__swhatbuf_r>
 8009ee4:	9900      	ldr	r1, [sp, #0]
 8009ee6:	4605      	mov	r5, r0
 8009ee8:	4630      	mov	r0, r6
 8009eea:	f7ff fc21 	bl	8009730 <_malloc_r>
 8009eee:	b948      	cbnz	r0, 8009f04 <__smakebuf_r+0x44>
 8009ef0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ef4:	059a      	lsls	r2, r3, #22
 8009ef6:	d4ef      	bmi.n	8009ed8 <__smakebuf_r+0x18>
 8009ef8:	f023 0303 	bic.w	r3, r3, #3
 8009efc:	f043 0302 	orr.w	r3, r3, #2
 8009f00:	81a3      	strh	r3, [r4, #12]
 8009f02:	e7e3      	b.n	8009ecc <__smakebuf_r+0xc>
 8009f04:	89a3      	ldrh	r3, [r4, #12]
 8009f06:	6020      	str	r0, [r4, #0]
 8009f08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f0c:	81a3      	strh	r3, [r4, #12]
 8009f0e:	9b00      	ldr	r3, [sp, #0]
 8009f10:	6163      	str	r3, [r4, #20]
 8009f12:	9b01      	ldr	r3, [sp, #4]
 8009f14:	6120      	str	r0, [r4, #16]
 8009f16:	b15b      	cbz	r3, 8009f30 <__smakebuf_r+0x70>
 8009f18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f1c:	4630      	mov	r0, r6
 8009f1e:	f000 f82d 	bl	8009f7c <_isatty_r>
 8009f22:	b128      	cbz	r0, 8009f30 <__smakebuf_r+0x70>
 8009f24:	89a3      	ldrh	r3, [r4, #12]
 8009f26:	f023 0303 	bic.w	r3, r3, #3
 8009f2a:	f043 0301 	orr.w	r3, r3, #1
 8009f2e:	81a3      	strh	r3, [r4, #12]
 8009f30:	89a3      	ldrh	r3, [r4, #12]
 8009f32:	431d      	orrs	r5, r3
 8009f34:	81a5      	strh	r5, [r4, #12]
 8009f36:	e7cf      	b.n	8009ed8 <__smakebuf_r+0x18>

08009f38 <_close_r>:
 8009f38:	b538      	push	{r3, r4, r5, lr}
 8009f3a:	4d06      	ldr	r5, [pc, #24]	; (8009f54 <_close_r+0x1c>)
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	4604      	mov	r4, r0
 8009f40:	4608      	mov	r0, r1
 8009f42:	602b      	str	r3, [r5, #0]
 8009f44:	f7f7 fa41 	bl	80013ca <_close>
 8009f48:	1c43      	adds	r3, r0, #1
 8009f4a:	d102      	bne.n	8009f52 <_close_r+0x1a>
 8009f4c:	682b      	ldr	r3, [r5, #0]
 8009f4e:	b103      	cbz	r3, 8009f52 <_close_r+0x1a>
 8009f50:	6023      	str	r3, [r4, #0]
 8009f52:	bd38      	pop	{r3, r4, r5, pc}
 8009f54:	2000256c 	.word	0x2000256c

08009f58 <_fstat_r>:
 8009f58:	b538      	push	{r3, r4, r5, lr}
 8009f5a:	4d07      	ldr	r5, [pc, #28]	; (8009f78 <_fstat_r+0x20>)
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	4604      	mov	r4, r0
 8009f60:	4608      	mov	r0, r1
 8009f62:	4611      	mov	r1, r2
 8009f64:	602b      	str	r3, [r5, #0]
 8009f66:	f7f7 fa3c 	bl	80013e2 <_fstat>
 8009f6a:	1c43      	adds	r3, r0, #1
 8009f6c:	d102      	bne.n	8009f74 <_fstat_r+0x1c>
 8009f6e:	682b      	ldr	r3, [r5, #0]
 8009f70:	b103      	cbz	r3, 8009f74 <_fstat_r+0x1c>
 8009f72:	6023      	str	r3, [r4, #0]
 8009f74:	bd38      	pop	{r3, r4, r5, pc}
 8009f76:	bf00      	nop
 8009f78:	2000256c 	.word	0x2000256c

08009f7c <_isatty_r>:
 8009f7c:	b538      	push	{r3, r4, r5, lr}
 8009f7e:	4d06      	ldr	r5, [pc, #24]	; (8009f98 <_isatty_r+0x1c>)
 8009f80:	2300      	movs	r3, #0
 8009f82:	4604      	mov	r4, r0
 8009f84:	4608      	mov	r0, r1
 8009f86:	602b      	str	r3, [r5, #0]
 8009f88:	f7f7 fa3b 	bl	8001402 <_isatty>
 8009f8c:	1c43      	adds	r3, r0, #1
 8009f8e:	d102      	bne.n	8009f96 <_isatty_r+0x1a>
 8009f90:	682b      	ldr	r3, [r5, #0]
 8009f92:	b103      	cbz	r3, 8009f96 <_isatty_r+0x1a>
 8009f94:	6023      	str	r3, [r4, #0]
 8009f96:	bd38      	pop	{r3, r4, r5, pc}
 8009f98:	2000256c 	.word	0x2000256c

08009f9c <_lseek_r>:
 8009f9c:	b538      	push	{r3, r4, r5, lr}
 8009f9e:	4d07      	ldr	r5, [pc, #28]	; (8009fbc <_lseek_r+0x20>)
 8009fa0:	4604      	mov	r4, r0
 8009fa2:	4608      	mov	r0, r1
 8009fa4:	4611      	mov	r1, r2
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	602a      	str	r2, [r5, #0]
 8009faa:	461a      	mov	r2, r3
 8009fac:	f7f7 fa34 	bl	8001418 <_lseek>
 8009fb0:	1c43      	adds	r3, r0, #1
 8009fb2:	d102      	bne.n	8009fba <_lseek_r+0x1e>
 8009fb4:	682b      	ldr	r3, [r5, #0]
 8009fb6:	b103      	cbz	r3, 8009fba <_lseek_r+0x1e>
 8009fb8:	6023      	str	r3, [r4, #0]
 8009fba:	bd38      	pop	{r3, r4, r5, pc}
 8009fbc:	2000256c 	.word	0x2000256c

08009fc0 <_read_r>:
 8009fc0:	b538      	push	{r3, r4, r5, lr}
 8009fc2:	4d07      	ldr	r5, [pc, #28]	; (8009fe0 <_read_r+0x20>)
 8009fc4:	4604      	mov	r4, r0
 8009fc6:	4608      	mov	r0, r1
 8009fc8:	4611      	mov	r1, r2
 8009fca:	2200      	movs	r2, #0
 8009fcc:	602a      	str	r2, [r5, #0]
 8009fce:	461a      	mov	r2, r3
 8009fd0:	f7f7 f9c2 	bl	8001358 <_read>
 8009fd4:	1c43      	adds	r3, r0, #1
 8009fd6:	d102      	bne.n	8009fde <_read_r+0x1e>
 8009fd8:	682b      	ldr	r3, [r5, #0]
 8009fda:	b103      	cbz	r3, 8009fde <_read_r+0x1e>
 8009fdc:	6023      	str	r3, [r4, #0]
 8009fde:	bd38      	pop	{r3, r4, r5, pc}
 8009fe0:	2000256c 	.word	0x2000256c

08009fe4 <_sbrk_r>:
 8009fe4:	b538      	push	{r3, r4, r5, lr}
 8009fe6:	4d06      	ldr	r5, [pc, #24]	; (800a000 <_sbrk_r+0x1c>)
 8009fe8:	2300      	movs	r3, #0
 8009fea:	4604      	mov	r4, r0
 8009fec:	4608      	mov	r0, r1
 8009fee:	602b      	str	r3, [r5, #0]
 8009ff0:	f7f7 fa20 	bl	8001434 <_sbrk>
 8009ff4:	1c43      	adds	r3, r0, #1
 8009ff6:	d102      	bne.n	8009ffe <_sbrk_r+0x1a>
 8009ff8:	682b      	ldr	r3, [r5, #0]
 8009ffa:	b103      	cbz	r3, 8009ffe <_sbrk_r+0x1a>
 8009ffc:	6023      	str	r3, [r4, #0]
 8009ffe:	bd38      	pop	{r3, r4, r5, pc}
 800a000:	2000256c 	.word	0x2000256c

0800a004 <_write_r>:
 800a004:	b538      	push	{r3, r4, r5, lr}
 800a006:	4d07      	ldr	r5, [pc, #28]	; (800a024 <_write_r+0x20>)
 800a008:	4604      	mov	r4, r0
 800a00a:	4608      	mov	r0, r1
 800a00c:	4611      	mov	r1, r2
 800a00e:	2200      	movs	r2, #0
 800a010:	602a      	str	r2, [r5, #0]
 800a012:	461a      	mov	r2, r3
 800a014:	f7f7 f9bd 	bl	8001392 <_write>
 800a018:	1c43      	adds	r3, r0, #1
 800a01a:	d102      	bne.n	800a022 <_write_r+0x1e>
 800a01c:	682b      	ldr	r3, [r5, #0]
 800a01e:	b103      	cbz	r3, 800a022 <_write_r+0x1e>
 800a020:	6023      	str	r3, [r4, #0]
 800a022:	bd38      	pop	{r3, r4, r5, pc}
 800a024:	2000256c 	.word	0x2000256c

0800a028 <_init>:
 800a028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a02a:	bf00      	nop
 800a02c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a02e:	bc08      	pop	{r3}
 800a030:	469e      	mov	lr, r3
 800a032:	4770      	bx	lr

0800a034 <_fini>:
 800a034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a036:	bf00      	nop
 800a038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a03a:	bc08      	pop	{r3}
 800a03c:	469e      	mov	lr, r3
 800a03e:	4770      	bx	lr
>>>>>>> Stashed changes
