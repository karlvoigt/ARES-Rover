
ARES-STM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c90  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  08008e20  08008e20  00018e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008fd4  08008fd4  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08008fd4  08008fd4  00018fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008fdc  08008fdc  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008fdc  08008fdc  00018fdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008fe0  08008fe0  00018fe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08008fe4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000025b8  2000006c  08009050  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002624  08009050  00022624  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021172  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004653  00000000  00000000  00041251  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c00  00000000  00000000  000458a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000015c0  00000000  00000000  000474a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e059  00000000  00000000  00048a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020de3  00000000  00000000  00066ac1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b8e2c  00000000  00000000  000878a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007d54  00000000  00000000  001406d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00148424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008e08 	.word	0x08008e08

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08008e08 	.word	0x08008e08

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <sendMessage>:
#include "stm32l4xx_hal.h"

extern UART_HandleTypeDef huart2;


void sendMessage(SensorType sensorType, uint32_t timestamp, uint16_t sensorData) {
 800056c:	b580      	push	{r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af00      	add	r7, sp, #0
 8000572:	4603      	mov	r3, r0
 8000574:	6039      	str	r1, [r7, #0]
 8000576:	71fb      	strb	r3, [r7, #7]
 8000578:	4613      	mov	r3, r2
 800057a:	80bb      	strh	r3, [r7, #4]
    CustomMessage message;
    message.startDelimiter = START_DELIMITER;
 800057c:	23aa      	movs	r3, #170	; 0xaa
 800057e:	723b      	strb	r3, [r7, #8]
    message.sensorType = sensorType;
 8000580:	79fb      	ldrb	r3, [r7, #7]
 8000582:	727b      	strb	r3, [r7, #9]
    message.timestamp = timestamp;
 8000584:	683b      	ldr	r3, [r7, #0]
 8000586:	f8c7 300a 	str.w	r3, [r7, #10]
    message.sensorData = sensorData;
 800058a:	88bb      	ldrh	r3, [r7, #4]
 800058c:	81fb      	strh	r3, [r7, #14]
    message.checksum = START_DELIMITER + sensorType + (timestamp & 0xFF) + ((timestamp >> 8) & 0xFF) + ((timestamp >> 16) & 0xFF) + ((timestamp >> 24) & 0xFF) + (sensorData & 0xFF) + ((sensorData >> 8) & 0xFF);
 800058e:	683b      	ldr	r3, [r7, #0]
 8000590:	b2da      	uxtb	r2, r3
 8000592:	79fb      	ldrb	r3, [r7, #7]
 8000594:	4413      	add	r3, r2
 8000596:	b2da      	uxtb	r2, r3
 8000598:	683b      	ldr	r3, [r7, #0]
 800059a:	0a1b      	lsrs	r3, r3, #8
 800059c:	b2db      	uxtb	r3, r3
 800059e:	4413      	add	r3, r2
 80005a0:	b2da      	uxtb	r2, r3
 80005a2:	683b      	ldr	r3, [r7, #0]
 80005a4:	0c1b      	lsrs	r3, r3, #16
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	4413      	add	r3, r2
 80005aa:	b2da      	uxtb	r2, r3
 80005ac:	683b      	ldr	r3, [r7, #0]
 80005ae:	0e1b      	lsrs	r3, r3, #24
 80005b0:	b2db      	uxtb	r3, r3
 80005b2:	4413      	add	r3, r2
 80005b4:	b2da      	uxtb	r2, r3
 80005b6:	88bb      	ldrh	r3, [r7, #4]
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	4413      	add	r3, r2
 80005bc:	b2da      	uxtb	r2, r3
 80005be:	88bb      	ldrh	r3, [r7, #4]
 80005c0:	0a1b      	lsrs	r3, r3, #8
 80005c2:	b29b      	uxth	r3, r3
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	4413      	add	r3, r2
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	3b56      	subs	r3, #86	; 0x56
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	743b      	strb	r3, [r7, #16]
    message.endDelimiter = END_DELIMITER;
 80005d0:	2355      	movs	r3, #85	; 0x55
 80005d2:	747b      	strb	r3, [r7, #17]
    HAL_UART_Transmit(&huart2, (uint8_t*)&message, CUSTOM_MESSAGE_SIZE, HAL_MAX_DELAY);
 80005d4:	f107 0108 	add.w	r1, r7, #8
 80005d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005dc:	220a      	movs	r2, #10
 80005de:	4804      	ldr	r0, [pc, #16]	; (80005f0 <sendMessage+0x84>)
 80005e0:	f003 fa92 	bl	8003b08 <HAL_UART_Transmit>
    int i=1;
 80005e4:	2301      	movs	r3, #1
 80005e6:	617b      	str	r3, [r7, #20]
}
 80005e8:	bf00      	nop
 80005ea:	3718      	adds	r7, #24
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	20000164 	.word	0x20000164

080005f4 <sendLightSensorData>:

void sendLightSensorData(uint16_t sensorData) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	80fb      	strh	r3, [r7, #6]
	uint32_t curTime;
	curTime = HAL_GetTick();
 80005fe:	f000 fdff 	bl	8001200 <HAL_GetTick>
 8000602:	60f8      	str	r0, [r7, #12]
	sendMessage(0x02, curTime, sensorData);
 8000604:	88fb      	ldrh	r3, [r7, #6]
 8000606:	461a      	mov	r2, r3
 8000608:	68f9      	ldr	r1, [r7, #12]
 800060a:	2002      	movs	r0, #2
 800060c:	f7ff ffae 	bl	800056c <sendMessage>
}
 8000610:	bf00      	nop
 8000612:	3710      	adds	r7, #16
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}

08000618 <LTR329_Init>:
#include "stm32l4xx_hal.h"
#include <stdint.h>

extern I2C_HandleTypeDef hi2c1;  // Assuming you are using hi2c1

void LTR329_Init() {
 8000618:	b580      	push	{r7, lr}
 800061a:	b086      	sub	sp, #24
 800061c:	af04      	add	r7, sp, #16
    uint8_t data;

    // Activate the sensor
    data = LTR329_ACTIVE_MODE;
 800061e:	2301      	movs	r3, #1
 8000620:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, LTR329_I2C_ADDRESS, LTR329_ALS_CONTR, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 8000622:	2364      	movs	r3, #100	; 0x64
 8000624:	9302      	str	r3, [sp, #8]
 8000626:	2301      	movs	r3, #1
 8000628:	9301      	str	r3, [sp, #4]
 800062a:	1dfb      	adds	r3, r7, #7
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	2301      	movs	r3, #1
 8000630:	2280      	movs	r2, #128	; 0x80
 8000632:	2152      	movs	r1, #82	; 0x52
 8000634:	480a      	ldr	r0, [pc, #40]	; (8000660 <LTR329_Init+0x48>)
 8000636:	f001 f977 	bl	8001928 <HAL_I2C_Mem_Write>

    // Set measurement rate
    data = LTR329_MEAS_RATE;
 800063a:	2303      	movs	r3, #3
 800063c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, LTR329_I2C_ADDRESS, LTR329_ALS_MEAS_RATE, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 800063e:	2364      	movs	r3, #100	; 0x64
 8000640:	9302      	str	r3, [sp, #8]
 8000642:	2301      	movs	r3, #1
 8000644:	9301      	str	r3, [sp, #4]
 8000646:	1dfb      	adds	r3, r7, #7
 8000648:	9300      	str	r3, [sp, #0]
 800064a:	2301      	movs	r3, #1
 800064c:	2285      	movs	r2, #133	; 0x85
 800064e:	2152      	movs	r1, #82	; 0x52
 8000650:	4803      	ldr	r0, [pc, #12]	; (8000660 <LTR329_Init+0x48>)
 8000652:	f001 f969 	bl	8001928 <HAL_I2C_Mem_Write>
}
 8000656:	bf00      	nop
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	20000088 	.word	0x20000088

08000664 <LTR329_Read_Light>:

void LTR329_Read_Light(uint16_t *ch0, uint16_t *ch1) {
 8000664:	b580      	push	{r7, lr}
 8000666:	b088      	sub	sp, #32
 8000668:	af04      	add	r7, sp, #16
 800066a:	6078      	str	r0, [r7, #4]
 800066c:	6039      	str	r1, [r7, #0]
    uint8_t data[4];

    // Read 4 bytes of data starting from LTR329_ALS_DATA_CH1_0
    HAL_I2C_Mem_Read(&hi2c1, LTR329_I2C_ADDRESS, LTR329_ALS_DATA_CH1_0, I2C_MEMADD_SIZE_8BIT, data, 4, 100);
 800066e:	2364      	movs	r3, #100	; 0x64
 8000670:	9302      	str	r3, [sp, #8]
 8000672:	2304      	movs	r3, #4
 8000674:	9301      	str	r3, [sp, #4]
 8000676:	f107 030c 	add.w	r3, r7, #12
 800067a:	9300      	str	r3, [sp, #0]
 800067c:	2301      	movs	r3, #1
 800067e:	2288      	movs	r2, #136	; 0x88
 8000680:	2152      	movs	r1, #82	; 0x52
 8000682:	480d      	ldr	r0, [pc, #52]	; (80006b8 <LTR329_Read_Light+0x54>)
 8000684:	f001 fa64 	bl	8001b50 <HAL_I2C_Mem_Read>

    // Combine bytes to get the light data for each channel
    *ch1 = (uint16_t)(data[1] << 8) | data[0];
 8000688:	7b7b      	ldrb	r3, [r7, #13]
 800068a:	b29b      	uxth	r3, r3
 800068c:	021b      	lsls	r3, r3, #8
 800068e:	b29a      	uxth	r2, r3
 8000690:	7b3b      	ldrb	r3, [r7, #12]
 8000692:	b29b      	uxth	r3, r3
 8000694:	4313      	orrs	r3, r2
 8000696:	b29a      	uxth	r2, r3
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	801a      	strh	r2, [r3, #0]
    *ch0 = (uint16_t)(data[3] << 8) | data[2];
 800069c:	7bfb      	ldrb	r3, [r7, #15]
 800069e:	b29b      	uxth	r3, r3
 80006a0:	021b      	lsls	r3, r3, #8
 80006a2:	b29a      	uxth	r2, r3
 80006a4:	7bbb      	ldrb	r3, [r7, #14]
 80006a6:	b29b      	uxth	r3, r3
 80006a8:	4313      	orrs	r3, r2
 80006aa:	b29a      	uxth	r2, r3
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	801a      	strh	r2, [r3, #0]
}
 80006b0:	bf00      	nop
 80006b2:	3710      	adds	r7, #16
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	20000088 	.word	0x20000088

080006bc <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE {
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 80006c4:	1d39      	adds	r1, r7, #4
 80006c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006ca:	2201      	movs	r2, #1
 80006cc:	4803      	ldr	r0, [pc, #12]	; (80006dc <__io_putchar+0x20>)
 80006ce:	f003 fa1b 	bl	8003b08 <HAL_UART_Transmit>
	return ch;
 80006d2:	687b      	ldr	r3, [r7, #4]
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	20000164 	.word	0x20000164

080006e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006e4:	f000 fd5f 	bl	80011a6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006e8:	f000 f85e 	bl	80007a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ec:	f000 f952 	bl	8000994 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006f0:	f000 f920 	bl	8000934 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80006f4:	f000 f8ae 	bl	8000854 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80006f8:	f000 f8ec 	bl	80008d4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006fc:	f004 fd64 	bl	80051c8 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of uart1Queue */
  uart1QueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &uart1Queue_attributes);
 8000700:	4a19      	ldr	r2, [pc, #100]	; (8000768 <main+0x88>)
 8000702:	2102      	movs	r1, #2
 8000704:	2010      	movs	r0, #16
 8000706:	f004 fe56 	bl	80053b6 <osMessageQueueNew>
 800070a:	4603      	mov	r3, r0
 800070c:	4a17      	ldr	r2, [pc, #92]	; (800076c <main+0x8c>)
 800070e:	6013      	str	r3, [r2, #0]

  /* creation of uart2Queue */
  uart2QueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &uart2Queue_attributes);
 8000710:	4a17      	ldr	r2, [pc, #92]	; (8000770 <main+0x90>)
 8000712:	2102      	movs	r1, #2
 8000714:	2010      	movs	r0, #16
 8000716:	f004 fe4e 	bl	80053b6 <osMessageQueueNew>
 800071a:	4603      	mov	r3, r0
 800071c:	4a15      	ldr	r2, [pc, #84]	; (8000774 <main+0x94>)
 800071e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000720:	4a15      	ldr	r2, [pc, #84]	; (8000778 <main+0x98>)
 8000722:	2100      	movs	r1, #0
 8000724:	4815      	ldr	r0, [pc, #84]	; (800077c <main+0x9c>)
 8000726:	f004 fd99 	bl	800525c <osThreadNew>
 800072a:	4603      	mov	r3, r0
 800072c:	4a14      	ldr	r2, [pc, #80]	; (8000780 <main+0xa0>)
 800072e:	6013      	str	r3, [r2, #0]

  /* creation of UART2Task */
  UART2TaskHandle = osThreadNew(UART2_Task, NULL, &UART2Task_attributes);
 8000730:	4a14      	ldr	r2, [pc, #80]	; (8000784 <main+0xa4>)
 8000732:	2100      	movs	r1, #0
 8000734:	4814      	ldr	r0, [pc, #80]	; (8000788 <main+0xa8>)
 8000736:	f004 fd91 	bl	800525c <osThreadNew>
 800073a:	4603      	mov	r3, r0
 800073c:	4a13      	ldr	r2, [pc, #76]	; (800078c <main+0xac>)
 800073e:	6013      	str	r3, [r2, #0]

  /* creation of UART1Task */
  UART1TaskHandle = osThreadNew(UART1_Task, NULL, &UART1Task_attributes);
 8000740:	4a13      	ldr	r2, [pc, #76]	; (8000790 <main+0xb0>)
 8000742:	2100      	movs	r1, #0
 8000744:	4813      	ldr	r0, [pc, #76]	; (8000794 <main+0xb4>)
 8000746:	f004 fd89 	bl	800525c <osThreadNew>
 800074a:	4603      	mov	r3, r0
 800074c:	4a12      	ldr	r2, [pc, #72]	; (8000798 <main+0xb8>)
 800074e:	6013      	str	r3, [r2, #0]

  /* creation of LightSensor_Tas */
  LightSensor_TasHandle = osThreadNew(LightSensorTask, NULL, &LightSensor_Tas_attributes);
 8000750:	4a12      	ldr	r2, [pc, #72]	; (800079c <main+0xbc>)
 8000752:	2100      	movs	r1, #0
 8000754:	4812      	ldr	r0, [pc, #72]	; (80007a0 <main+0xc0>)
 8000756:	f004 fd81 	bl	800525c <osThreadNew>
 800075a:	4603      	mov	r3, r0
 800075c:	4a11      	ldr	r2, [pc, #68]	; (80007a4 <main+0xc4>)
 800075e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000760:	f004 fd56 	bl	8005210 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000764:	e7fe      	b.n	8000764 <main+0x84>
 8000766:	bf00      	nop
 8000768:	08008f28 	.word	0x08008f28
 800076c:	200001fc 	.word	0x200001fc
 8000770:	08008f40 	.word	0x08008f40
 8000774:	20000200 	.word	0x20000200
 8000778:	08008e98 	.word	0x08008e98
 800077c:	08000aa1 	.word	0x08000aa1
 8000780:	200001ec 	.word	0x200001ec
 8000784:	08008ebc 	.word	0x08008ebc
 8000788:	08000ae1 	.word	0x08000ae1
 800078c:	200001f0 	.word	0x200001f0
 8000790:	08008ee0 	.word	0x08008ee0
 8000794:	08000b65 	.word	0x08000b65
 8000798:	200001f4 	.word	0x200001f4
 800079c:	08008f04 	.word	0x08008f04
 80007a0:	08000bdd 	.word	0x08000bdd
 80007a4:	200001f8 	.word	0x200001f8

080007a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b096      	sub	sp, #88	; 0x58
 80007ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ae:	f107 0314 	add.w	r3, r7, #20
 80007b2:	2244      	movs	r2, #68	; 0x44
 80007b4:	2100      	movs	r1, #0
 80007b6:	4618      	mov	r0, r3
 80007b8:	f007 fc60 	bl	800807c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007bc:	463b      	mov	r3, r7
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
 80007c6:	60da      	str	r2, [r3, #12]
 80007c8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007ca:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007ce:	f001 fe47 	bl	8002460 <HAL_PWREx_ControlVoltageScaling>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80007d8:	f000 fa2a 	bl	8000c30 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007dc:	f001 fe22 	bl	8002424 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80007e0:	4b1b      	ldr	r3, [pc, #108]	; (8000850 <SystemClock_Config+0xa8>)
 80007e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80007e6:	4a1a      	ldr	r2, [pc, #104]	; (8000850 <SystemClock_Config+0xa8>)
 80007e8:	f023 0318 	bic.w	r3, r3, #24
 80007ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80007f0:	2314      	movs	r3, #20
 80007f2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80007f4:	2301      	movs	r3, #1
 80007f6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007f8:	2301      	movs	r3, #1
 80007fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8000800:	23a0      	movs	r3, #160	; 0xa0
 8000802:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000804:	2300      	movs	r3, #0
 8000806:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000808:	f107 0314 	add.w	r3, r7, #20
 800080c:	4618      	mov	r0, r3
 800080e:	f001 fe7d 	bl	800250c <HAL_RCC_OscConfig>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000818:	f000 fa0a 	bl	8000c30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800081c:	230f      	movs	r3, #15
 800081e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000820:	2300      	movs	r3, #0
 8000822:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000824:	2300      	movs	r3, #0
 8000826:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000828:	2300      	movs	r3, #0
 800082a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800082c:	2300      	movs	r3, #0
 800082e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000830:	463b      	mov	r3, r7
 8000832:	2101      	movs	r1, #1
 8000834:	4618      	mov	r0, r3
 8000836:	f002 facb 	bl	8002dd0 <HAL_RCC_ClockConfig>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000840:	f000 f9f6 	bl	8000c30 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000844:	f002 fea0 	bl	8003588 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000848:	bf00      	nop
 800084a:	3758      	adds	r7, #88	; 0x58
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40021000 	.word	0x40021000

08000854 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000858:	4b1b      	ldr	r3, [pc, #108]	; (80008c8 <MX_I2C1_Init+0x74>)
 800085a:	4a1c      	ldr	r2, [pc, #112]	; (80008cc <MX_I2C1_Init+0x78>)
 800085c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 800085e:	4b1a      	ldr	r3, [pc, #104]	; (80008c8 <MX_I2C1_Init+0x74>)
 8000860:	4a1b      	ldr	r2, [pc, #108]	; (80008d0 <MX_I2C1_Init+0x7c>)
 8000862:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000864:	4b18      	ldr	r3, [pc, #96]	; (80008c8 <MX_I2C1_Init+0x74>)
 8000866:	2200      	movs	r2, #0
 8000868:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800086a:	4b17      	ldr	r3, [pc, #92]	; (80008c8 <MX_I2C1_Init+0x74>)
 800086c:	2201      	movs	r2, #1
 800086e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000870:	4b15      	ldr	r3, [pc, #84]	; (80008c8 <MX_I2C1_Init+0x74>)
 8000872:	2200      	movs	r2, #0
 8000874:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000876:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <MX_I2C1_Init+0x74>)
 8000878:	2200      	movs	r2, #0
 800087a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800087c:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <MX_I2C1_Init+0x74>)
 800087e:	2200      	movs	r2, #0
 8000880:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000882:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <MX_I2C1_Init+0x74>)
 8000884:	2200      	movs	r2, #0
 8000886:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000888:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <MX_I2C1_Init+0x74>)
 800088a:	2200      	movs	r2, #0
 800088c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800088e:	480e      	ldr	r0, [pc, #56]	; (80008c8 <MX_I2C1_Init+0x74>)
 8000890:	f000 ffae 	bl	80017f0 <HAL_I2C_Init>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800089a:	f000 f9c9 	bl	8000c30 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800089e:	2100      	movs	r1, #0
 80008a0:	4809      	ldr	r0, [pc, #36]	; (80008c8 <MX_I2C1_Init+0x74>)
 80008a2:	f001 fd27 	bl	80022f4 <HAL_I2CEx_ConfigAnalogFilter>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008ac:	f000 f9c0 	bl	8000c30 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008b0:	2100      	movs	r1, #0
 80008b2:	4805      	ldr	r0, [pc, #20]	; (80008c8 <MX_I2C1_Init+0x74>)
 80008b4:	f001 fd69 	bl	800238a <HAL_I2CEx_ConfigDigitalFilter>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008be:	f000 f9b7 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	20000088 	.word	0x20000088
 80008cc:	40005400 	.word	0x40005400
 80008d0:	00707cbb 	.word	0x00707cbb

080008d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008d8:	4b14      	ldr	r3, [pc, #80]	; (800092c <MX_USART1_UART_Init+0x58>)
 80008da:	4a15      	ldr	r2, [pc, #84]	; (8000930 <MX_USART1_UART_Init+0x5c>)
 80008dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 80008de:	4b13      	ldr	r3, [pc, #76]	; (800092c <MX_USART1_UART_Init+0x58>)
 80008e0:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 80008e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008e6:	4b11      	ldr	r3, [pc, #68]	; (800092c <MX_USART1_UART_Init+0x58>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008ec:	4b0f      	ldr	r3, [pc, #60]	; (800092c <MX_USART1_UART_Init+0x58>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008f2:	4b0e      	ldr	r3, [pc, #56]	; (800092c <MX_USART1_UART_Init+0x58>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008f8:	4b0c      	ldr	r3, [pc, #48]	; (800092c <MX_USART1_UART_Init+0x58>)
 80008fa:	220c      	movs	r2, #12
 80008fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008fe:	4b0b      	ldr	r3, [pc, #44]	; (800092c <MX_USART1_UART_Init+0x58>)
 8000900:	2200      	movs	r2, #0
 8000902:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000904:	4b09      	ldr	r3, [pc, #36]	; (800092c <MX_USART1_UART_Init+0x58>)
 8000906:	2200      	movs	r2, #0
 8000908:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800090a:	4b08      	ldr	r3, [pc, #32]	; (800092c <MX_USART1_UART_Init+0x58>)
 800090c:	2200      	movs	r2, #0
 800090e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000910:	4b06      	ldr	r3, [pc, #24]	; (800092c <MX_USART1_UART_Init+0x58>)
 8000912:	2200      	movs	r2, #0
 8000914:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000916:	4805      	ldr	r0, [pc, #20]	; (800092c <MX_USART1_UART_Init+0x58>)
 8000918:	f003 f8a8 	bl	8003a6c <HAL_UART_Init>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000922:	f000 f985 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	200000dc 	.word	0x200000dc
 8000930:	40013800 	.word	0x40013800

08000934 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000938:	4b14      	ldr	r3, [pc, #80]	; (800098c <MX_USART2_UART_Init+0x58>)
 800093a:	4a15      	ldr	r2, [pc, #84]	; (8000990 <MX_USART2_UART_Init+0x5c>)
 800093c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800093e:	4b13      	ldr	r3, [pc, #76]	; (800098c <MX_USART2_UART_Init+0x58>)
 8000940:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000944:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000946:	4b11      	ldr	r3, [pc, #68]	; (800098c <MX_USART2_UART_Init+0x58>)
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800094c:	4b0f      	ldr	r3, [pc, #60]	; (800098c <MX_USART2_UART_Init+0x58>)
 800094e:	2200      	movs	r2, #0
 8000950:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000952:	4b0e      	ldr	r3, [pc, #56]	; (800098c <MX_USART2_UART_Init+0x58>)
 8000954:	2200      	movs	r2, #0
 8000956:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000958:	4b0c      	ldr	r3, [pc, #48]	; (800098c <MX_USART2_UART_Init+0x58>)
 800095a:	220c      	movs	r2, #12
 800095c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800095e:	4b0b      	ldr	r3, [pc, #44]	; (800098c <MX_USART2_UART_Init+0x58>)
 8000960:	2200      	movs	r2, #0
 8000962:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000964:	4b09      	ldr	r3, [pc, #36]	; (800098c <MX_USART2_UART_Init+0x58>)
 8000966:	2200      	movs	r2, #0
 8000968:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800096a:	4b08      	ldr	r3, [pc, #32]	; (800098c <MX_USART2_UART_Init+0x58>)
 800096c:	2200      	movs	r2, #0
 800096e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000970:	4b06      	ldr	r3, [pc, #24]	; (800098c <MX_USART2_UART_Init+0x58>)
 8000972:	2200      	movs	r2, #0
 8000974:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000976:	4805      	ldr	r0, [pc, #20]	; (800098c <MX_USART2_UART_Init+0x58>)
 8000978:	f003 f878 	bl	8003a6c <HAL_UART_Init>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000982:	f000 f955 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	20000164 	.word	0x20000164
 8000990:	40004400 	.word	0x40004400

08000994 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b088      	sub	sp, #32
 8000998:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099a:	f107 030c 	add.w	r3, r7, #12
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
 80009a2:	605a      	str	r2, [r3, #4]
 80009a4:	609a      	str	r2, [r3, #8]
 80009a6:	60da      	str	r2, [r3, #12]
 80009a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009aa:	4b1d      	ldr	r3, [pc, #116]	; (8000a20 <MX_GPIO_Init+0x8c>)
 80009ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ae:	4a1c      	ldr	r2, [pc, #112]	; (8000a20 <MX_GPIO_Init+0x8c>)
 80009b0:	f043 0304 	orr.w	r3, r3, #4
 80009b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009b6:	4b1a      	ldr	r3, [pc, #104]	; (8000a20 <MX_GPIO_Init+0x8c>)
 80009b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ba:	f003 0304 	and.w	r3, r3, #4
 80009be:	60bb      	str	r3, [r7, #8]
 80009c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c2:	4b17      	ldr	r3, [pc, #92]	; (8000a20 <MX_GPIO_Init+0x8c>)
 80009c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c6:	4a16      	ldr	r2, [pc, #88]	; (8000a20 <MX_GPIO_Init+0x8c>)
 80009c8:	f043 0301 	orr.w	r3, r3, #1
 80009cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ce:	4b14      	ldr	r3, [pc, #80]	; (8000a20 <MX_GPIO_Init+0x8c>)
 80009d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d2:	f003 0301 	and.w	r3, r3, #1
 80009d6:	607b      	str	r3, [r7, #4]
 80009d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009da:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <MX_GPIO_Init+0x8c>)
 80009dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009de:	4a10      	ldr	r2, [pc, #64]	; (8000a20 <MX_GPIO_Init+0x8c>)
 80009e0:	f043 0302 	orr.w	r3, r3, #2
 80009e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009e6:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <MX_GPIO_Init+0x8c>)
 80009e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ea:	f003 0302 	and.w	r3, r3, #2
 80009ee:	603b      	str	r3, [r7, #0]
 80009f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80009f2:	2200      	movs	r2, #0
 80009f4:	2108      	movs	r1, #8
 80009f6:	480b      	ldr	r0, [pc, #44]	; (8000a24 <MX_GPIO_Init+0x90>)
 80009f8:	f000 fee2 	bl	80017c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80009fc:	2308      	movs	r3, #8
 80009fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a00:	2301      	movs	r3, #1
 8000a02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000a0c:	f107 030c 	add.w	r3, r7, #12
 8000a10:	4619      	mov	r1, r3
 8000a12:	4804      	ldr	r0, [pc, #16]	; (8000a24 <MX_GPIO_Init+0x90>)
 8000a14:	f000 fd62 	bl	80014dc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a18:	bf00      	nop
 8000a1a:	3720      	adds	r7, #32
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40021000 	.word	0x40021000
 8000a24:	48000400 	.word	0x48000400

08000a28 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]

	if (huart->Instance == USART1)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a12      	ldr	r2, [pc, #72]	; (8000a80 <HAL_UART_RxCpltCallback+0x58>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d10c      	bne.n	8000a54 <HAL_UART_RxCpltCallback+0x2c>
	{
		xQueueSendFromISR(uart1QueueHandle, uart1_buffer, NULL);
 8000a3a:	4b12      	ldr	r3, [pc, #72]	; (8000a84 <HAL_UART_RxCpltCallback+0x5c>)
 8000a3c:	6818      	ldr	r0, [r3, #0]
 8000a3e:	2300      	movs	r3, #0
 8000a40:	2200      	movs	r2, #0
 8000a42:	4911      	ldr	r1, [pc, #68]	; (8000a88 <HAL_UART_RxCpltCallback+0x60>)
 8000a44:	f005 f84e 	bl	8005ae4 <xQueueGenericSendFromISR>
		HAL_UART_Receive_IT(&huart1, uart1_buffer, 1);
 8000a48:	2201      	movs	r2, #1
 8000a4a:	490f      	ldr	r1, [pc, #60]	; (8000a88 <HAL_UART_RxCpltCallback+0x60>)
 8000a4c:	480f      	ldr	r0, [pc, #60]	; (8000a8c <HAL_UART_RxCpltCallback+0x64>)
 8000a4e:	f003 f8e5 	bl	8003c1c <HAL_UART_Receive_IT>

		// Prepare to receive the next character
		HAL_UART_Receive_IT(&huart2, uart2_buffer, 1);

	}
}
 8000a52:	e010      	b.n	8000a76 <HAL_UART_RxCpltCallback+0x4e>
	else if (huart->Instance == USART2)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a0d      	ldr	r2, [pc, #52]	; (8000a90 <HAL_UART_RxCpltCallback+0x68>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d10b      	bne.n	8000a76 <HAL_UART_RxCpltCallback+0x4e>
		xQueueSendFromISR(uart2QueueHandle, uart2_buffer, NULL);
 8000a5e:	4b0d      	ldr	r3, [pc, #52]	; (8000a94 <HAL_UART_RxCpltCallback+0x6c>)
 8000a60:	6818      	ldr	r0, [r3, #0]
 8000a62:	2300      	movs	r3, #0
 8000a64:	2200      	movs	r2, #0
 8000a66:	490c      	ldr	r1, [pc, #48]	; (8000a98 <HAL_UART_RxCpltCallback+0x70>)
 8000a68:	f005 f83c 	bl	8005ae4 <xQueueGenericSendFromISR>
		HAL_UART_Receive_IT(&huart2, uart2_buffer, 1);
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	490a      	ldr	r1, [pc, #40]	; (8000a98 <HAL_UART_RxCpltCallback+0x70>)
 8000a70:	480a      	ldr	r0, [pc, #40]	; (8000a9c <HAL_UART_RxCpltCallback+0x74>)
 8000a72:	f003 f8d3 	bl	8003c1c <HAL_UART_Receive_IT>
}
 8000a76:	bf00      	nop
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40013800 	.word	0x40013800
 8000a84:	200001fc 	.word	0x200001fc
 8000a88:	20000204 	.word	0x20000204
 8000a8c:	200000dc 	.word	0x200000dc
 8000a90:	40004400 	.word	0x40004400
 8000a94:	20000200 	.word	0x20000200
 8000a98:	20000208 	.word	0x20000208
 8000a9c:	20000164 	.word	0x20000164

08000aa0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  HAL_UART_Receive_IT(&huart2, uart2_buffer, 1);
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	4908      	ldr	r1, [pc, #32]	; (8000acc <StartDefaultTask+0x2c>)
 8000aac:	4808      	ldr	r0, [pc, #32]	; (8000ad0 <StartDefaultTask+0x30>)
 8000aae:	f003 f8b5 	bl	8003c1c <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart1, uart1_buffer, 1);
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	4907      	ldr	r1, [pc, #28]	; (8000ad4 <StartDefaultTask+0x34>)
 8000ab6:	4808      	ldr	r0, [pc, #32]	; (8000ad8 <StartDefaultTask+0x38>)
 8000ab8:	f003 f8b0 	bl	8003c1c <HAL_UART_Receive_IT>
  printf("Setup complete\n");
 8000abc:	4807      	ldr	r0, [pc, #28]	; (8000adc <StartDefaultTask+0x3c>)
 8000abe:	f007 fad5 	bl	800806c <puts>
  /* Infinite loop */
  for(;;)
  {
    osDelay(10000);
 8000ac2:	f242 7010 	movw	r0, #10000	; 0x2710
 8000ac6:	f004 fc5b 	bl	8005380 <osDelay>
 8000aca:	e7fa      	b.n	8000ac2 <StartDefaultTask+0x22>
 8000acc:	20000208 	.word	0x20000208
 8000ad0:	20000164 	.word	0x20000164
 8000ad4:	20000204 	.word	0x20000204
 8000ad8:	200000dc 	.word	0x200000dc
 8000adc:	08008e6c 	.word	0x08008e6c

08000ae0 <UART2_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UART2_Task */
void UART2_Task(void *argument)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART2_Task */
	char receivedChar;
	  /* Infinite loop */
	  for(;;)
	  {
	    if (xQueueReceive(uart2QueueHandle, &receivedChar, portMAX_DELAY) == pdPASS)
 8000ae8:	4b1a      	ldr	r3, [pc, #104]	; (8000b54 <UART2_Task+0x74>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f107 010f 	add.w	r1, r7, #15
 8000af0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000af4:	4618      	mov	r0, r3
 8000af6:	f005 f891 	bl	8005c1c <xQueueReceive>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	d1f3      	bne.n	8000ae8 <UART2_Task+0x8>
	    {

	      // Check if the end of transmission is reached
	      if (receivedChar == '\n' || receivedChar == '\r')
 8000b00:	7bfb      	ldrb	r3, [r7, #15]
 8000b02:	2b0a      	cmp	r3, #10
 8000b04:	d002      	beq.n	8000b0c <UART2_Task+0x2c>
 8000b06:	7bfb      	ldrb	r3, [r7, #15]
 8000b08:	2b0d      	cmp	r3, #13
 8000b0a:	d110      	bne.n	8000b2e <UART2_Task+0x4e>
	      {
	        // Null-terminate the string
	        uart2_accumulate_buffer[uart2_accumulate_pos] = '\0';
 8000b0c:	4b12      	ldr	r3, [pc, #72]	; (8000b58 <UART2_Task+0x78>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	461a      	mov	r2, r3
 8000b12:	4b12      	ldr	r3, [pc, #72]	; (8000b5c <UART2_Task+0x7c>)
 8000b14:	2100      	movs	r1, #0
 8000b16:	5499      	strb	r1, [r3, r2]

	        // Process the complete message here
//	        printf("%s\n", uart2_accumulate_buffer);
	        HAL_UART_Transmit(&huart1, uart2_accumulate_buffer,UART_BUFFER_SIZE , HAL_MAX_DELAY);
 8000b18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b1c:	2280      	movs	r2, #128	; 0x80
 8000b1e:	490f      	ldr	r1, [pc, #60]	; (8000b5c <UART2_Task+0x7c>)
 8000b20:	480f      	ldr	r0, [pc, #60]	; (8000b60 <UART2_Task+0x80>)
 8000b22:	f002 fff1 	bl	8003b08 <HAL_UART_Transmit>

	        // Reset the accumulate buffer position
	        uart2_accumulate_pos = 0;
 8000b26:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <UART2_Task+0x78>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	701a      	strb	r2, [r3, #0]
 8000b2c:	e009      	b.n	8000b42 <UART2_Task+0x62>
	      } else {
		      // Accumulate the received characters
		      uart2_accumulate_buffer[uart2_accumulate_pos++] = receivedChar;
 8000b2e:	4b0a      	ldr	r3, [pc, #40]	; (8000b58 <UART2_Task+0x78>)
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	1c5a      	adds	r2, r3, #1
 8000b34:	b2d1      	uxtb	r1, r2
 8000b36:	4a08      	ldr	r2, [pc, #32]	; (8000b58 <UART2_Task+0x78>)
 8000b38:	7011      	strb	r1, [r2, #0]
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	7bf9      	ldrb	r1, [r7, #15]
 8000b3e:	4b07      	ldr	r3, [pc, #28]	; (8000b5c <UART2_Task+0x7c>)
 8000b40:	5499      	strb	r1, [r3, r2]
	      }

	      // Make sure we don't overflow the buffer
	      if (uart2_accumulate_pos >= UART_BUFFER_SIZE)
 8000b42:	4b05      	ldr	r3, [pc, #20]	; (8000b58 <UART2_Task+0x78>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	b25b      	sxtb	r3, r3
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	dacd      	bge.n	8000ae8 <UART2_Task+0x8>
	      {
	        uart2_accumulate_pos = 0;
 8000b4c:	4b02      	ldr	r3, [pc, #8]	; (8000b58 <UART2_Task+0x78>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	701a      	strb	r2, [r3, #0]
	    if (xQueueReceive(uart2QueueHandle, &receivedChar, portMAX_DELAY) == pdPASS)
 8000b52:	e7c9      	b.n	8000ae8 <UART2_Task+0x8>
 8000b54:	20000200 	.word	0x20000200
 8000b58:	2000030d 	.word	0x2000030d
 8000b5c:	2000028c 	.word	0x2000028c
 8000b60:	200000dc 	.word	0x200000dc

08000b64 <UART1_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UART1_Task */
void UART1_Task(void *argument)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART1_Task */
	char receivedChar;
	/* Infinite loop */
	for(;;)
	{
		if (xQueueReceive(uart1QueueHandle, &receivedChar, portMAX_DELAY) == pdPASS)
 8000b6c:	4b17      	ldr	r3, [pc, #92]	; (8000bcc <UART1_Task+0x68>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f107 010f 	add.w	r1, r7, #15
 8000b74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f005 f84f 	bl	8005c1c <xQueueReceive>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	d1f3      	bne.n	8000b6c <UART1_Task+0x8>
		{

		  // Check if the end of transmission is reached
		  if ( receivedChar == '\r')
 8000b84:	7bfb      	ldrb	r3, [r7, #15]
 8000b86:	2b0d      	cmp	r3, #13
 8000b88:	d10d      	bne.n	8000ba6 <UART1_Task+0x42>
		  {
			// Null-terminate the string
			uart1_accumulate_buffer[uart1_accumulate_pos] = '\0';
 8000b8a:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <UART1_Task+0x6c>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	461a      	mov	r2, r3
 8000b90:	4b10      	ldr	r3, [pc, #64]	; (8000bd4 <UART1_Task+0x70>)
 8000b92:	2100      	movs	r1, #0
 8000b94:	5499      	strb	r1, [r3, r2]

			// Process the complete message here
			printf("%s\r", uart1_accumulate_buffer);
 8000b96:	490f      	ldr	r1, [pc, #60]	; (8000bd4 <UART1_Task+0x70>)
 8000b98:	480f      	ldr	r0, [pc, #60]	; (8000bd8 <UART1_Task+0x74>)
 8000b9a:	f007 fa01 	bl	8007fa0 <iprintf>

			// Reset the accumulate buffer position
			uart1_accumulate_pos = 0;
 8000b9e:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <UART1_Task+0x6c>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	701a      	strb	r2, [r3, #0]
 8000ba4:	e009      	b.n	8000bba <UART1_Task+0x56>
		  } else {
			  // Accumulate the received characters
			  uart1_accumulate_buffer[uart1_accumulate_pos++] = receivedChar;
 8000ba6:	4b0a      	ldr	r3, [pc, #40]	; (8000bd0 <UART1_Task+0x6c>)
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	1c5a      	adds	r2, r3, #1
 8000bac:	b2d1      	uxtb	r1, r2
 8000bae:	4a08      	ldr	r2, [pc, #32]	; (8000bd0 <UART1_Task+0x6c>)
 8000bb0:	7011      	strb	r1, [r2, #0]
 8000bb2:	461a      	mov	r2, r3
 8000bb4:	7bf9      	ldrb	r1, [r7, #15]
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <UART1_Task+0x70>)
 8000bb8:	5499      	strb	r1, [r3, r2]
		  }

		  // Make sure we don't overflow the buffer
		  if (uart1_accumulate_pos >= UART_BUFFER_SIZE)
 8000bba:	4b05      	ldr	r3, [pc, #20]	; (8000bd0 <UART1_Task+0x6c>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	b25b      	sxtb	r3, r3
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	dad3      	bge.n	8000b6c <UART1_Task+0x8>
		  {
			uart1_accumulate_pos = 0;
 8000bc4:	4b02      	ldr	r3, [pc, #8]	; (8000bd0 <UART1_Task+0x6c>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	701a      	strb	r2, [r3, #0]
		if (xQueueReceive(uart1QueueHandle, &receivedChar, portMAX_DELAY) == pdPASS)
 8000bca:	e7cf      	b.n	8000b6c <UART1_Task+0x8>
 8000bcc:	200001fc 	.word	0x200001fc
 8000bd0:	2000030c 	.word	0x2000030c
 8000bd4:	2000020c 	.word	0x2000020c
 8000bd8:	08008e7c 	.word	0x08008e7c

08000bdc <LightSensorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LightSensorTask */
void LightSensorTask(void *argument)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LightSensorTask */
	LTR329_Init();
 8000be4:	f7ff fd18 	bl	8000618 <LTR329_Init>
	/* Infinite loop */
	  for(;;)
	  {
		// Read light data
		LTR329_Read_Light(&light_ch0, &light_ch1);
 8000be8:	4906      	ldr	r1, [pc, #24]	; (8000c04 <LightSensorTask+0x28>)
 8000bea:	4807      	ldr	r0, [pc, #28]	; (8000c08 <LightSensorTask+0x2c>)
 8000bec:	f7ff fd3a 	bl	8000664 <LTR329_Read_Light>
//		if (verbose) printf("Light Ch0: %d \n Light Ch1: %d\n________\n\n",light_ch0,light_ch1);
		sendLightSensorData(light_ch0);
 8000bf0:	4b05      	ldr	r3, [pc, #20]	; (8000c08 <LightSensorTask+0x2c>)
 8000bf2:	881b      	ldrh	r3, [r3, #0]
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f7ff fcfd 	bl	80005f4 <sendLightSensorData>
		osDelay(2000);
 8000bfa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000bfe:	f004 fbbf 	bl	8005380 <osDelay>
		LTR329_Read_Light(&light_ch0, &light_ch1);
 8000c02:	e7f1      	b.n	8000be8 <LightSensorTask+0xc>
 8000c04:	20000310 	.word	0x20000310
 8000c08:	2000030e 	.word	0x2000030e

08000c0c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a04      	ldr	r2, [pc, #16]	; (8000c2c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d101      	bne.n	8000c22 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c1e:	f000 fadb 	bl	80011d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c22:	bf00      	nop
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40001000 	.word	0x40001000

08000c30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c34:	b672      	cpsid	i
}
 8000c36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c38:	e7fe      	b.n	8000c38 <Error_Handler+0x8>
	...

08000c3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c42:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <HAL_MspInit+0x4c>)
 8000c44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c46:	4a10      	ldr	r2, [pc, #64]	; (8000c88 <HAL_MspInit+0x4c>)
 8000c48:	f043 0301 	orr.w	r3, r3, #1
 8000c4c:	6613      	str	r3, [r2, #96]	; 0x60
 8000c4e:	4b0e      	ldr	r3, [pc, #56]	; (8000c88 <HAL_MspInit+0x4c>)
 8000c50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	607b      	str	r3, [r7, #4]
 8000c58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c5a:	4b0b      	ldr	r3, [pc, #44]	; (8000c88 <HAL_MspInit+0x4c>)
 8000c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c5e:	4a0a      	ldr	r2, [pc, #40]	; (8000c88 <HAL_MspInit+0x4c>)
 8000c60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c64:	6593      	str	r3, [r2, #88]	; 0x58
 8000c66:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <HAL_MspInit+0x4c>)
 8000c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c6e:	603b      	str	r3, [r7, #0]
 8000c70:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c72:	2200      	movs	r2, #0
 8000c74:	210f      	movs	r1, #15
 8000c76:	f06f 0001 	mvn.w	r0, #1
 8000c7a:	f000 fb85 	bl	8001388 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40021000 	.word	0x40021000

08000c8c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b096      	sub	sp, #88	; 0x58
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c94:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ca4:	f107 0310 	add.w	r3, r7, #16
 8000ca8:	2234      	movs	r2, #52	; 0x34
 8000caa:	2100      	movs	r1, #0
 8000cac:	4618      	mov	r0, r3
 8000cae:	f007 f9e5 	bl	800807c <memset>
  if(hi2c->Instance==I2C1)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a1f      	ldr	r2, [pc, #124]	; (8000d34 <HAL_I2C_MspInit+0xa8>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d137      	bne.n	8000d2c <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000cbc:	2340      	movs	r3, #64	; 0x40
 8000cbe:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cc4:	f107 0310 	add.w	r3, r7, #16
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f002 fad7 	bl	800327c <HAL_RCCEx_PeriphCLKConfig>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000cd4:	f7ff ffac 	bl	8000c30 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd8:	4b17      	ldr	r3, [pc, #92]	; (8000d38 <HAL_I2C_MspInit+0xac>)
 8000cda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cdc:	4a16      	ldr	r2, [pc, #88]	; (8000d38 <HAL_I2C_MspInit+0xac>)
 8000cde:	f043 0301 	orr.w	r3, r3, #1
 8000ce2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ce4:	4b14      	ldr	r3, [pc, #80]	; (8000d38 <HAL_I2C_MspInit+0xac>)
 8000ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce8:	f003 0301 	and.w	r3, r3, #1
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000cf0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000cf4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cf6:	2312      	movs	r3, #18
 8000cf8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfe:	2303      	movs	r3, #3
 8000d00:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d02:	2304      	movs	r3, #4
 8000d04:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d06:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d10:	f000 fbe4 	bl	80014dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d14:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <HAL_I2C_MspInit+0xac>)
 8000d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d18:	4a07      	ldr	r2, [pc, #28]	; (8000d38 <HAL_I2C_MspInit+0xac>)
 8000d1a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d1e:	6593      	str	r3, [r2, #88]	; 0x58
 8000d20:	4b05      	ldr	r3, [pc, #20]	; (8000d38 <HAL_I2C_MspInit+0xac>)
 8000d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d28:	60bb      	str	r3, [r7, #8]
 8000d2a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d2c:	bf00      	nop
 8000d2e:	3758      	adds	r7, #88	; 0x58
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40005400 	.word	0x40005400
 8000d38:	40021000 	.word	0x40021000

08000d3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b098      	sub	sp, #96	; 0x60
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d44:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
 8000d52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d54:	f107 0318 	add.w	r3, r7, #24
 8000d58:	2234      	movs	r2, #52	; 0x34
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f007 f98d 	bl	800807c <memset>
  if(huart->Instance==USART1)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a45      	ldr	r2, [pc, #276]	; (8000e7c <HAL_UART_MspInit+0x140>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d13e      	bne.n	8000dea <HAL_UART_MspInit+0xae>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d70:	2300      	movs	r3, #0
 8000d72:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d74:	f107 0318 	add.w	r3, r7, #24
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f002 fa7f 	bl	800327c <HAL_RCCEx_PeriphCLKConfig>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d84:	f7ff ff54 	bl	8000c30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d88:	4b3d      	ldr	r3, [pc, #244]	; (8000e80 <HAL_UART_MspInit+0x144>)
 8000d8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d8c:	4a3c      	ldr	r2, [pc, #240]	; (8000e80 <HAL_UART_MspInit+0x144>)
 8000d8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d92:	6613      	str	r3, [r2, #96]	; 0x60
 8000d94:	4b3a      	ldr	r3, [pc, #232]	; (8000e80 <HAL_UART_MspInit+0x144>)
 8000d96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d9c:	617b      	str	r3, [r7, #20]
 8000d9e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da0:	4b37      	ldr	r3, [pc, #220]	; (8000e80 <HAL_UART_MspInit+0x144>)
 8000da2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da4:	4a36      	ldr	r2, [pc, #216]	; (8000e80 <HAL_UART_MspInit+0x144>)
 8000da6:	f043 0302 	orr.w	r3, r3, #2
 8000daa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dac:	4b34      	ldr	r3, [pc, #208]	; (8000e80 <HAL_UART_MspInit+0x144>)
 8000dae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db0:	f003 0302 	and.w	r3, r3, #2
 8000db4:	613b      	str	r3, [r7, #16]
 8000db6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000db8:	23c0      	movs	r3, #192	; 0xc0
 8000dba:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc4:	2303      	movs	r3, #3
 8000dc6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000dc8:	2307      	movs	r3, #7
 8000dca:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dcc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	482c      	ldr	r0, [pc, #176]	; (8000e84 <HAL_UART_MspInit+0x148>)
 8000dd4:	f000 fb82 	bl	80014dc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	2105      	movs	r1, #5
 8000ddc:	2025      	movs	r0, #37	; 0x25
 8000dde:	f000 fad3 	bl	8001388 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000de2:	2025      	movs	r0, #37	; 0x25
 8000de4:	f000 faec 	bl	80013c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000de8:	e043      	b.n	8000e72 <HAL_UART_MspInit+0x136>
  else if(huart->Instance==USART2)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a26      	ldr	r2, [pc, #152]	; (8000e88 <HAL_UART_MspInit+0x14c>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d13e      	bne.n	8000e72 <HAL_UART_MspInit+0x136>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000df4:	2302      	movs	r3, #2
 8000df6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dfc:	f107 0318 	add.w	r3, r7, #24
 8000e00:	4618      	mov	r0, r3
 8000e02:	f002 fa3b 	bl	800327c <HAL_RCCEx_PeriphCLKConfig>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8000e0c:	f7ff ff10 	bl	8000c30 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e10:	4b1b      	ldr	r3, [pc, #108]	; (8000e80 <HAL_UART_MspInit+0x144>)
 8000e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e14:	4a1a      	ldr	r2, [pc, #104]	; (8000e80 <HAL_UART_MspInit+0x144>)
 8000e16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e1a:	6593      	str	r3, [r2, #88]	; 0x58
 8000e1c:	4b18      	ldr	r3, [pc, #96]	; (8000e80 <HAL_UART_MspInit+0x144>)
 8000e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e28:	4b15      	ldr	r3, [pc, #84]	; (8000e80 <HAL_UART_MspInit+0x144>)
 8000e2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e2c:	4a14      	ldr	r2, [pc, #80]	; (8000e80 <HAL_UART_MspInit+0x144>)
 8000e2e:	f043 0301 	orr.w	r3, r3, #1
 8000e32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e34:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <HAL_UART_MspInit+0x144>)
 8000e36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e38:	f003 0301 	and.w	r3, r3, #1
 8000e3c:	60bb      	str	r3, [r7, #8]
 8000e3e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000e40:	230c      	movs	r3, #12
 8000e42:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e44:	2302      	movs	r3, #2
 8000e46:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e50:	2307      	movs	r3, #7
 8000e52:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e54:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e58:	4619      	mov	r1, r3
 8000e5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e5e:	f000 fb3d 	bl	80014dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000e62:	2200      	movs	r2, #0
 8000e64:	2105      	movs	r1, #5
 8000e66:	2026      	movs	r0, #38	; 0x26
 8000e68:	f000 fa8e 	bl	8001388 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e6c:	2026      	movs	r0, #38	; 0x26
 8000e6e:	f000 faa7 	bl	80013c0 <HAL_NVIC_EnableIRQ>
}
 8000e72:	bf00      	nop
 8000e74:	3760      	adds	r7, #96	; 0x60
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40013800 	.word	0x40013800
 8000e80:	40021000 	.word	0x40021000
 8000e84:	48000400 	.word	0x48000400
 8000e88:	40004400 	.word	0x40004400

08000e8c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b08e      	sub	sp, #56	; 0x38
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000e94:	2300      	movs	r3, #0
 8000e96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e9a:	4b34      	ldr	r3, [pc, #208]	; (8000f6c <HAL_InitTick+0xe0>)
 8000e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e9e:	4a33      	ldr	r2, [pc, #204]	; (8000f6c <HAL_InitTick+0xe0>)
 8000ea0:	f043 0310 	orr.w	r3, r3, #16
 8000ea4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ea6:	4b31      	ldr	r3, [pc, #196]	; (8000f6c <HAL_InitTick+0xe0>)
 8000ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eaa:	f003 0310 	and.w	r3, r3, #16
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000eb2:	f107 0210 	add.w	r2, r7, #16
 8000eb6:	f107 0314 	add.w	r3, r7, #20
 8000eba:	4611      	mov	r1, r2
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f002 f94b 	bl	8003158 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ec2:	6a3b      	ldr	r3, [r7, #32]
 8000ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d103      	bne.n	8000ed4 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ecc:	f002 f918 	bl	8003100 <HAL_RCC_GetPCLK1Freq>
 8000ed0:	6378      	str	r0, [r7, #52]	; 0x34
 8000ed2:	e004      	b.n	8000ede <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ed4:	f002 f914 	bl	8003100 <HAL_RCC_GetPCLK1Freq>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ee0:	4a23      	ldr	r2, [pc, #140]	; (8000f70 <HAL_InitTick+0xe4>)
 8000ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ee6:	0c9b      	lsrs	r3, r3, #18
 8000ee8:	3b01      	subs	r3, #1
 8000eea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000eec:	4b21      	ldr	r3, [pc, #132]	; (8000f74 <HAL_InitTick+0xe8>)
 8000eee:	4a22      	ldr	r2, [pc, #136]	; (8000f78 <HAL_InitTick+0xec>)
 8000ef0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000ef2:	4b20      	ldr	r3, [pc, #128]	; (8000f74 <HAL_InitTick+0xe8>)
 8000ef4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ef8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000efa:	4a1e      	ldr	r2, [pc, #120]	; (8000f74 <HAL_InitTick+0xe8>)
 8000efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000efe:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000f00:	4b1c      	ldr	r3, [pc, #112]	; (8000f74 <HAL_InitTick+0xe8>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f06:	4b1b      	ldr	r3, [pc, #108]	; (8000f74 <HAL_InitTick+0xe8>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f0c:	4b19      	ldr	r3, [pc, #100]	; (8000f74 <HAL_InitTick+0xe8>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000f12:	4818      	ldr	r0, [pc, #96]	; (8000f74 <HAL_InitTick+0xe8>)
 8000f14:	f002 fb48 	bl	80035a8 <HAL_TIM_Base_Init>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000f1e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d11b      	bne.n	8000f5e <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000f26:	4813      	ldr	r0, [pc, #76]	; (8000f74 <HAL_InitTick+0xe8>)
 8000f28:	f002 fba0 	bl	800366c <HAL_TIM_Base_Start_IT>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000f32:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d111      	bne.n	8000f5e <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000f3a:	2036      	movs	r0, #54	; 0x36
 8000f3c:	f000 fa40 	bl	80013c0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2b0f      	cmp	r3, #15
 8000f44:	d808      	bhi.n	8000f58 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8000f46:	2200      	movs	r2, #0
 8000f48:	6879      	ldr	r1, [r7, #4]
 8000f4a:	2036      	movs	r0, #54	; 0x36
 8000f4c:	f000 fa1c 	bl	8001388 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f50:	4a0a      	ldr	r2, [pc, #40]	; (8000f7c <HAL_InitTick+0xf0>)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6013      	str	r3, [r2, #0]
 8000f56:	e002      	b.n	8000f5e <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000f5e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3738      	adds	r7, #56	; 0x38
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40021000 	.word	0x40021000
 8000f70:	431bde83 	.word	0x431bde83
 8000f74:	20000314 	.word	0x20000314
 8000f78:	40001000 	.word	0x40001000
 8000f7c:	20000004 	.word	0x20000004

08000f80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f84:	e7fe      	b.n	8000f84 <NMI_Handler+0x4>

08000f86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f86:	b480      	push	{r7}
 8000f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f8a:	e7fe      	b.n	8000f8a <HardFault_Handler+0x4>

08000f8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f90:	e7fe      	b.n	8000f90 <MemManage_Handler+0x4>

08000f92 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f92:	b480      	push	{r7}
 8000f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f96:	e7fe      	b.n	8000f96 <BusFault_Handler+0x4>

08000f98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f9c:	e7fe      	b.n	8000f9c <UsageFault_Handler+0x4>

08000f9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000fb0:	4802      	ldr	r0, [pc, #8]	; (8000fbc <USART1_IRQHandler+0x10>)
 8000fb2:	f002 fe7f 	bl	8003cb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	200000dc 	.word	0x200000dc

08000fc0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000fc4:	4802      	ldr	r0, [pc, #8]	; (8000fd0 <USART2_IRQHandler+0x10>)
 8000fc6:	f002 fe75 	bl	8003cb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20000164 	.word	0x20000164

08000fd4 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000fd8:	4802      	ldr	r0, [pc, #8]	; (8000fe4 <TIM6_IRQHandler+0x10>)
 8000fda:	f002 fb9b 	bl	8003714 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20000314 	.word	0x20000314

08000fe8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	60f8      	str	r0, [r7, #12]
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	617b      	str	r3, [r7, #20]
 8000ff8:	e00a      	b.n	8001010 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ffa:	f3af 8000 	nop.w
 8000ffe:	4601      	mov	r1, r0
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	1c5a      	adds	r2, r3, #1
 8001004:	60ba      	str	r2, [r7, #8]
 8001006:	b2ca      	uxtb	r2, r1
 8001008:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	3301      	adds	r3, #1
 800100e:	617b      	str	r3, [r7, #20]
 8001010:	697a      	ldr	r2, [r7, #20]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	429a      	cmp	r2, r3
 8001016:	dbf0      	blt.n	8000ffa <_read+0x12>
  }

  return len;
 8001018:	687b      	ldr	r3, [r7, #4]
}
 800101a:	4618      	mov	r0, r3
 800101c:	3718      	adds	r7, #24
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	b086      	sub	sp, #24
 8001026:	af00      	add	r7, sp, #0
 8001028:	60f8      	str	r0, [r7, #12]
 800102a:	60b9      	str	r1, [r7, #8]
 800102c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800102e:	2300      	movs	r3, #0
 8001030:	617b      	str	r3, [r7, #20]
 8001032:	e009      	b.n	8001048 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	1c5a      	adds	r2, r3, #1
 8001038:	60ba      	str	r2, [r7, #8]
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff fb3d 	bl	80006bc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	3301      	adds	r3, #1
 8001046:	617b      	str	r3, [r7, #20]
 8001048:	697a      	ldr	r2, [r7, #20]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	429a      	cmp	r2, r3
 800104e:	dbf1      	blt.n	8001034 <_write+0x12>
  }
  return len;
 8001050:	687b      	ldr	r3, [r7, #4]
}
 8001052:	4618      	mov	r0, r3
 8001054:	3718      	adds	r7, #24
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <_close>:

int _close(int file)
{
 800105a:	b480      	push	{r7}
 800105c:	b083      	sub	sp, #12
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001062:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001066:	4618      	mov	r0, r3
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr

08001072 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001072:	b480      	push	{r7}
 8001074:	b083      	sub	sp, #12
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
 800107a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001082:	605a      	str	r2, [r3, #4]
  return 0;
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr

08001092 <_isatty>:

int _isatty(int file)
{
 8001092:	b480      	push	{r7}
 8001094:	b083      	sub	sp, #12
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800109a:	2301      	movs	r3, #1
}
 800109c:	4618      	mov	r0, r3
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010b4:	2300      	movs	r3, #0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3714      	adds	r7, #20
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
	...

080010c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b086      	sub	sp, #24
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010cc:	4a14      	ldr	r2, [pc, #80]	; (8001120 <_sbrk+0x5c>)
 80010ce:	4b15      	ldr	r3, [pc, #84]	; (8001124 <_sbrk+0x60>)
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010d8:	4b13      	ldr	r3, [pc, #76]	; (8001128 <_sbrk+0x64>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d102      	bne.n	80010e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010e0:	4b11      	ldr	r3, [pc, #68]	; (8001128 <_sbrk+0x64>)
 80010e2:	4a12      	ldr	r2, [pc, #72]	; (800112c <_sbrk+0x68>)
 80010e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010e6:	4b10      	ldr	r3, [pc, #64]	; (8001128 <_sbrk+0x64>)
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4413      	add	r3, r2
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d207      	bcs.n	8001104 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010f4:	f007 f820 	bl	8008138 <__errno>
 80010f8:	4603      	mov	r3, r0
 80010fa:	220c      	movs	r2, #12
 80010fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001102:	e009      	b.n	8001118 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001104:	4b08      	ldr	r3, [pc, #32]	; (8001128 <_sbrk+0x64>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800110a:	4b07      	ldr	r3, [pc, #28]	; (8001128 <_sbrk+0x64>)
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4413      	add	r3, r2
 8001112:	4a05      	ldr	r2, [pc, #20]	; (8001128 <_sbrk+0x64>)
 8001114:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001116:	68fb      	ldr	r3, [r7, #12]
}
 8001118:	4618      	mov	r0, r3
 800111a:	3718      	adds	r7, #24
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	2000a000 	.word	0x2000a000
 8001124:	00000400 	.word	0x00000400
 8001128:	20000360 	.word	0x20000360
 800112c:	20002628 	.word	0x20002628

08001130 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001134:	4b06      	ldr	r3, [pc, #24]	; (8001150 <SystemInit+0x20>)
 8001136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800113a:	4a05      	ldr	r2, [pc, #20]	; (8001150 <SystemInit+0x20>)
 800113c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001140:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001144:	bf00      	nop
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	e000ed00 	.word	0xe000ed00

08001154 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001154:	f8df d034 	ldr.w	sp, [pc, #52]	; 800118c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001158:	f7ff ffea 	bl	8001130 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800115c:	480c      	ldr	r0, [pc, #48]	; (8001190 <LoopForever+0x6>)
  ldr r1, =_edata
 800115e:	490d      	ldr	r1, [pc, #52]	; (8001194 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001160:	4a0d      	ldr	r2, [pc, #52]	; (8001198 <LoopForever+0xe>)
  movs r3, #0
 8001162:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001164:	e002      	b.n	800116c <LoopCopyDataInit>

08001166 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001166:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001168:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800116a:	3304      	adds	r3, #4

0800116c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800116c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800116e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001170:	d3f9      	bcc.n	8001166 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001172:	4a0a      	ldr	r2, [pc, #40]	; (800119c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001174:	4c0a      	ldr	r4, [pc, #40]	; (80011a0 <LoopForever+0x16>)
  movs r3, #0
 8001176:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001178:	e001      	b.n	800117e <LoopFillZerobss>

0800117a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800117a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800117c:	3204      	adds	r2, #4

0800117e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800117e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001180:	d3fb      	bcc.n	800117a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001182:	f006 ffdf 	bl	8008144 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001186:	f7ff faab 	bl	80006e0 <main>

0800118a <LoopForever>:

LoopForever:
    b LoopForever
 800118a:	e7fe      	b.n	800118a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800118c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001190:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001194:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001198:	08008fe4 	.word	0x08008fe4
  ldr r2, =_sbss
 800119c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80011a0:	20002624 	.word	0x20002624

080011a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011a4:	e7fe      	b.n	80011a4 <ADC1_2_IRQHandler>

080011a6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b082      	sub	sp, #8
 80011aa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011ac:	2300      	movs	r3, #0
 80011ae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011b0:	2003      	movs	r0, #3
 80011b2:	f000 f8de 	bl	8001372 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011b6:	200f      	movs	r0, #15
 80011b8:	f7ff fe68 	bl	8000e8c <HAL_InitTick>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d002      	beq.n	80011c8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	71fb      	strb	r3, [r7, #7]
 80011c6:	e001      	b.n	80011cc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011c8:	f7ff fd38 	bl	8000c3c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011cc:	79fb      	ldrb	r3, [r7, #7]
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
	...

080011d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011dc:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <HAL_IncTick+0x20>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	461a      	mov	r2, r3
 80011e2:	4b06      	ldr	r3, [pc, #24]	; (80011fc <HAL_IncTick+0x24>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4413      	add	r3, r2
 80011e8:	4a04      	ldr	r2, [pc, #16]	; (80011fc <HAL_IncTick+0x24>)
 80011ea:	6013      	str	r3, [r2, #0]
}
 80011ec:	bf00      	nop
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	20000008 	.word	0x20000008
 80011fc:	20000364 	.word	0x20000364

08001200 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  return uwTick;
 8001204:	4b03      	ldr	r3, [pc, #12]	; (8001214 <HAL_GetTick+0x14>)
 8001206:	681b      	ldr	r3, [r3, #0]
}
 8001208:	4618      	mov	r0, r3
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	20000364 	.word	0x20000364

08001218 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001218:	b480      	push	{r7}
 800121a:	b085      	sub	sp, #20
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	f003 0307 	and.w	r3, r3, #7
 8001226:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001228:	4b0c      	ldr	r3, [pc, #48]	; (800125c <__NVIC_SetPriorityGrouping+0x44>)
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800122e:	68ba      	ldr	r2, [r7, #8]
 8001230:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001234:	4013      	ands	r3, r2
 8001236:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001240:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001244:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001248:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800124a:	4a04      	ldr	r2, [pc, #16]	; (800125c <__NVIC_SetPriorityGrouping+0x44>)
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	60d3      	str	r3, [r2, #12]
}
 8001250:	bf00      	nop
 8001252:	3714      	adds	r7, #20
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	e000ed00 	.word	0xe000ed00

08001260 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001264:	4b04      	ldr	r3, [pc, #16]	; (8001278 <__NVIC_GetPriorityGrouping+0x18>)
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	0a1b      	lsrs	r3, r3, #8
 800126a:	f003 0307 	and.w	r3, r3, #7
}
 800126e:	4618      	mov	r0, r3
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	e000ed00 	.word	0xe000ed00

0800127c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128a:	2b00      	cmp	r3, #0
 800128c:	db0b      	blt.n	80012a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800128e:	79fb      	ldrb	r3, [r7, #7]
 8001290:	f003 021f 	and.w	r2, r3, #31
 8001294:	4907      	ldr	r1, [pc, #28]	; (80012b4 <__NVIC_EnableIRQ+0x38>)
 8001296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129a:	095b      	lsrs	r3, r3, #5
 800129c:	2001      	movs	r0, #1
 800129e:	fa00 f202 	lsl.w	r2, r0, r2
 80012a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012a6:	bf00      	nop
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	e000e100 	.word	0xe000e100

080012b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	6039      	str	r1, [r7, #0]
 80012c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	db0a      	blt.n	80012e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	b2da      	uxtb	r2, r3
 80012d0:	490c      	ldr	r1, [pc, #48]	; (8001304 <__NVIC_SetPriority+0x4c>)
 80012d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d6:	0112      	lsls	r2, r2, #4
 80012d8:	b2d2      	uxtb	r2, r2
 80012da:	440b      	add	r3, r1
 80012dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012e0:	e00a      	b.n	80012f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	b2da      	uxtb	r2, r3
 80012e6:	4908      	ldr	r1, [pc, #32]	; (8001308 <__NVIC_SetPriority+0x50>)
 80012e8:	79fb      	ldrb	r3, [r7, #7]
 80012ea:	f003 030f 	and.w	r3, r3, #15
 80012ee:	3b04      	subs	r3, #4
 80012f0:	0112      	lsls	r2, r2, #4
 80012f2:	b2d2      	uxtb	r2, r2
 80012f4:	440b      	add	r3, r1
 80012f6:	761a      	strb	r2, [r3, #24]
}
 80012f8:	bf00      	nop
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	e000e100 	.word	0xe000e100
 8001308:	e000ed00 	.word	0xe000ed00

0800130c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800130c:	b480      	push	{r7}
 800130e:	b089      	sub	sp, #36	; 0x24
 8001310:	af00      	add	r7, sp, #0
 8001312:	60f8      	str	r0, [r7, #12]
 8001314:	60b9      	str	r1, [r7, #8]
 8001316:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	f003 0307 	and.w	r3, r3, #7
 800131e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	f1c3 0307 	rsb	r3, r3, #7
 8001326:	2b04      	cmp	r3, #4
 8001328:	bf28      	it	cs
 800132a:	2304      	movcs	r3, #4
 800132c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	3304      	adds	r3, #4
 8001332:	2b06      	cmp	r3, #6
 8001334:	d902      	bls.n	800133c <NVIC_EncodePriority+0x30>
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	3b03      	subs	r3, #3
 800133a:	e000      	b.n	800133e <NVIC_EncodePriority+0x32>
 800133c:	2300      	movs	r3, #0
 800133e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001340:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	43da      	mvns	r2, r3
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	401a      	ands	r2, r3
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001354:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	fa01 f303 	lsl.w	r3, r1, r3
 800135e:	43d9      	mvns	r1, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001364:	4313      	orrs	r3, r2
         );
}
 8001366:	4618      	mov	r0, r3
 8001368:	3724      	adds	r7, #36	; 0x24
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr

08001372 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	b082      	sub	sp, #8
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f7ff ff4c 	bl	8001218 <__NVIC_SetPriorityGrouping>
}
 8001380:	bf00      	nop
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}

08001388 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b086      	sub	sp, #24
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
 8001394:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001396:	2300      	movs	r3, #0
 8001398:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800139a:	f7ff ff61 	bl	8001260 <__NVIC_GetPriorityGrouping>
 800139e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013a0:	687a      	ldr	r2, [r7, #4]
 80013a2:	68b9      	ldr	r1, [r7, #8]
 80013a4:	6978      	ldr	r0, [r7, #20]
 80013a6:	f7ff ffb1 	bl	800130c <NVIC_EncodePriority>
 80013aa:	4602      	mov	r2, r0
 80013ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013b0:	4611      	mov	r1, r2
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff ff80 	bl	80012b8 <__NVIC_SetPriority>
}
 80013b8:	bf00      	nop
 80013ba:	3718      	adds	r7, #24
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	4603      	mov	r3, r0
 80013c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff ff54 	bl	800127c <__NVIC_EnableIRQ>
}
 80013d4:	bf00      	nop
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}

080013dc <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013dc:	b480      	push	{r7}
 80013de:	b085      	sub	sp, #20
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013e4:	2300      	movs	r3, #0
 80013e6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d008      	beq.n	8001406 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2204      	movs	r2, #4
 80013f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2200      	movs	r2, #0
 80013fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e022      	b.n	800144c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f022 020e 	bic.w	r2, r2, #14
 8001414:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f022 0201 	bic.w	r2, r2, #1
 8001424:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142a:	f003 021c 	and.w	r2, r3, #28
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	2101      	movs	r1, #1
 8001434:	fa01 f202 	lsl.w	r2, r1, r2
 8001438:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2201      	movs	r2, #1
 800143e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2200      	movs	r2, #0
 8001446:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800144a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800144c:	4618      	mov	r0, r3
 800144e:	3714      	adds	r7, #20
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001460:	2300      	movs	r3, #0
 8001462:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800146a:	b2db      	uxtb	r3, r3
 800146c:	2b02      	cmp	r3, #2
 800146e:	d005      	beq.n	800147c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2204      	movs	r2, #4
 8001474:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	73fb      	strb	r3, [r7, #15]
 800147a:	e029      	b.n	80014d0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f022 020e 	bic.w	r2, r2, #14
 800148a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f022 0201 	bic.w	r2, r2, #1
 800149a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a0:	f003 021c 	and.w	r2, r3, #28
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a8:	2101      	movs	r1, #1
 80014aa:	fa01 f202 	lsl.w	r2, r1, r2
 80014ae:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2201      	movs	r2, #1
 80014b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2200      	movs	r2, #0
 80014bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d003      	beq.n	80014d0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	4798      	blx	r3
    }
  }
  return status;
 80014d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3710      	adds	r7, #16
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
	...

080014dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014dc:	b480      	push	{r7}
 80014de:	b087      	sub	sp, #28
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014e6:	2300      	movs	r3, #0
 80014e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014ea:	e14e      	b.n	800178a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	2101      	movs	r1, #1
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	fa01 f303 	lsl.w	r3, r1, r3
 80014f8:	4013      	ands	r3, r2
 80014fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	f000 8140 	beq.w	8001784 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f003 0303 	and.w	r3, r3, #3
 800150c:	2b01      	cmp	r3, #1
 800150e:	d005      	beq.n	800151c <HAL_GPIO_Init+0x40>
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f003 0303 	and.w	r3, r3, #3
 8001518:	2b02      	cmp	r3, #2
 800151a:	d130      	bne.n	800157e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	2203      	movs	r2, #3
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	43db      	mvns	r3, r3
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	4013      	ands	r3, r2
 8001532:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	68da      	ldr	r2, [r3, #12]
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	693a      	ldr	r2, [r7, #16]
 8001542:	4313      	orrs	r3, r2
 8001544:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	693a      	ldr	r2, [r7, #16]
 800154a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001552:	2201      	movs	r2, #1
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	fa02 f303 	lsl.w	r3, r2, r3
 800155a:	43db      	mvns	r3, r3
 800155c:	693a      	ldr	r2, [r7, #16]
 800155e:	4013      	ands	r3, r2
 8001560:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	091b      	lsrs	r3, r3, #4
 8001568:	f003 0201 	and.w	r2, r3, #1
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	4313      	orrs	r3, r2
 8001576:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f003 0303 	and.w	r3, r3, #3
 8001586:	2b03      	cmp	r3, #3
 8001588:	d017      	beq.n	80015ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	68db      	ldr	r3, [r3, #12]
 800158e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	2203      	movs	r2, #3
 8001596:	fa02 f303 	lsl.w	r3, r2, r3
 800159a:	43db      	mvns	r3, r3
 800159c:	693a      	ldr	r2, [r7, #16]
 800159e:	4013      	ands	r3, r2
 80015a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	689a      	ldr	r2, [r3, #8]
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	fa02 f303 	lsl.w	r3, r2, r3
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f003 0303 	and.w	r3, r3, #3
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d123      	bne.n	800160e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	08da      	lsrs	r2, r3, #3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	3208      	adds	r2, #8
 80015ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	f003 0307 	and.w	r3, r3, #7
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	220f      	movs	r2, #15
 80015de:	fa02 f303 	lsl.w	r3, r2, r3
 80015e2:	43db      	mvns	r3, r3
 80015e4:	693a      	ldr	r2, [r7, #16]
 80015e6:	4013      	ands	r3, r2
 80015e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	691a      	ldr	r2, [r3, #16]
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	f003 0307 	and.w	r3, r3, #7
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	fa02 f303 	lsl.w	r3, r2, r3
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	08da      	lsrs	r2, r3, #3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	3208      	adds	r2, #8
 8001608:	6939      	ldr	r1, [r7, #16]
 800160a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	2203      	movs	r2, #3
 800161a:	fa02 f303 	lsl.w	r3, r2, r3
 800161e:	43db      	mvns	r3, r3
 8001620:	693a      	ldr	r2, [r7, #16]
 8001622:	4013      	ands	r3, r2
 8001624:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f003 0203 	and.w	r2, r3, #3
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	fa02 f303 	lsl.w	r3, r2, r3
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	4313      	orrs	r3, r2
 800163a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	693a      	ldr	r2, [r7, #16]
 8001640:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800164a:	2b00      	cmp	r3, #0
 800164c:	f000 809a 	beq.w	8001784 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001650:	4b55      	ldr	r3, [pc, #340]	; (80017a8 <HAL_GPIO_Init+0x2cc>)
 8001652:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001654:	4a54      	ldr	r2, [pc, #336]	; (80017a8 <HAL_GPIO_Init+0x2cc>)
 8001656:	f043 0301 	orr.w	r3, r3, #1
 800165a:	6613      	str	r3, [r2, #96]	; 0x60
 800165c:	4b52      	ldr	r3, [pc, #328]	; (80017a8 <HAL_GPIO_Init+0x2cc>)
 800165e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001660:	f003 0301 	and.w	r3, r3, #1
 8001664:	60bb      	str	r3, [r7, #8]
 8001666:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001668:	4a50      	ldr	r2, [pc, #320]	; (80017ac <HAL_GPIO_Init+0x2d0>)
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	089b      	lsrs	r3, r3, #2
 800166e:	3302      	adds	r3, #2
 8001670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001674:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	f003 0303 	and.w	r3, r3, #3
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	220f      	movs	r2, #15
 8001680:	fa02 f303 	lsl.w	r3, r2, r3
 8001684:	43db      	mvns	r3, r3
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	4013      	ands	r3, r2
 800168a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001692:	d013      	beq.n	80016bc <HAL_GPIO_Init+0x1e0>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	4a46      	ldr	r2, [pc, #280]	; (80017b0 <HAL_GPIO_Init+0x2d4>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d00d      	beq.n	80016b8 <HAL_GPIO_Init+0x1dc>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	4a45      	ldr	r2, [pc, #276]	; (80017b4 <HAL_GPIO_Init+0x2d8>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d007      	beq.n	80016b4 <HAL_GPIO_Init+0x1d8>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	4a44      	ldr	r2, [pc, #272]	; (80017b8 <HAL_GPIO_Init+0x2dc>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d101      	bne.n	80016b0 <HAL_GPIO_Init+0x1d4>
 80016ac:	2303      	movs	r3, #3
 80016ae:	e006      	b.n	80016be <HAL_GPIO_Init+0x1e2>
 80016b0:	2307      	movs	r3, #7
 80016b2:	e004      	b.n	80016be <HAL_GPIO_Init+0x1e2>
 80016b4:	2302      	movs	r3, #2
 80016b6:	e002      	b.n	80016be <HAL_GPIO_Init+0x1e2>
 80016b8:	2301      	movs	r3, #1
 80016ba:	e000      	b.n	80016be <HAL_GPIO_Init+0x1e2>
 80016bc:	2300      	movs	r3, #0
 80016be:	697a      	ldr	r2, [r7, #20]
 80016c0:	f002 0203 	and.w	r2, r2, #3
 80016c4:	0092      	lsls	r2, r2, #2
 80016c6:	4093      	lsls	r3, r2
 80016c8:	693a      	ldr	r2, [r7, #16]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80016ce:	4937      	ldr	r1, [pc, #220]	; (80017ac <HAL_GPIO_Init+0x2d0>)
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	089b      	lsrs	r3, r3, #2
 80016d4:	3302      	adds	r3, #2
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016dc:	4b37      	ldr	r3, [pc, #220]	; (80017bc <HAL_GPIO_Init+0x2e0>)
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	43db      	mvns	r3, r3
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	4013      	ands	r3, r2
 80016ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d003      	beq.n	8001700 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80016f8:	693a      	ldr	r2, [r7, #16]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001700:	4a2e      	ldr	r2, [pc, #184]	; (80017bc <HAL_GPIO_Init+0x2e0>)
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001706:	4b2d      	ldr	r3, [pc, #180]	; (80017bc <HAL_GPIO_Init+0x2e0>)
 8001708:	68db      	ldr	r3, [r3, #12]
 800170a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	43db      	mvns	r3, r3
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	4013      	ands	r3, r2
 8001714:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d003      	beq.n	800172a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	4313      	orrs	r3, r2
 8001728:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800172a:	4a24      	ldr	r2, [pc, #144]	; (80017bc <HAL_GPIO_Init+0x2e0>)
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001730:	4b22      	ldr	r3, [pc, #136]	; (80017bc <HAL_GPIO_Init+0x2e0>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	43db      	mvns	r3, r3
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	4013      	ands	r3, r2
 800173e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d003      	beq.n	8001754 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800174c:	693a      	ldr	r2, [r7, #16]
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	4313      	orrs	r3, r2
 8001752:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001754:	4a19      	ldr	r2, [pc, #100]	; (80017bc <HAL_GPIO_Init+0x2e0>)
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800175a:	4b18      	ldr	r3, [pc, #96]	; (80017bc <HAL_GPIO_Init+0x2e0>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	43db      	mvns	r3, r3
 8001764:	693a      	ldr	r2, [r7, #16]
 8001766:	4013      	ands	r3, r2
 8001768:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d003      	beq.n	800177e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	4313      	orrs	r3, r2
 800177c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800177e:	4a0f      	ldr	r2, [pc, #60]	; (80017bc <HAL_GPIO_Init+0x2e0>)
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	3301      	adds	r3, #1
 8001788:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	fa22 f303 	lsr.w	r3, r2, r3
 8001794:	2b00      	cmp	r3, #0
 8001796:	f47f aea9 	bne.w	80014ec <HAL_GPIO_Init+0x10>
  }
}
 800179a:	bf00      	nop
 800179c:	bf00      	nop
 800179e:	371c      	adds	r7, #28
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	40021000 	.word	0x40021000
 80017ac:	40010000 	.word	0x40010000
 80017b0:	48000400 	.word	0x48000400
 80017b4:	48000800 	.word	0x48000800
 80017b8:	48000c00 	.word	0x48000c00
 80017bc:	40010400 	.word	0x40010400

080017c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	460b      	mov	r3, r1
 80017ca:	807b      	strh	r3, [r7, #2]
 80017cc:	4613      	mov	r3, r2
 80017ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017d0:	787b      	ldrb	r3, [r7, #1]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d003      	beq.n	80017de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017d6:	887a      	ldrh	r2, [r7, #2]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017dc:	e002      	b.n	80017e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017de:	887a      	ldrh	r2, [r7, #2]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017e4:	bf00      	nop
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d101      	bne.n	8001802 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e08d      	b.n	800191e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001808:	b2db      	uxtb	r3, r3
 800180a:	2b00      	cmp	r3, #0
 800180c:	d106      	bne.n	800181c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2200      	movs	r2, #0
 8001812:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f7ff fa38 	bl	8000c8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2224      	movs	r2, #36	; 0x24
 8001820:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f022 0201 	bic.w	r2, r2, #1
 8001832:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685a      	ldr	r2, [r3, #4]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001840:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	689a      	ldr	r2, [r3, #8]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001850:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	68db      	ldr	r3, [r3, #12]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d107      	bne.n	800186a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	689a      	ldr	r2, [r3, #8]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001866:	609a      	str	r2, [r3, #8]
 8001868:	e006      	b.n	8001878 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	689a      	ldr	r2, [r3, #8]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001876:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	2b02      	cmp	r3, #2
 800187e:	d108      	bne.n	8001892 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	685a      	ldr	r2, [r3, #4]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800188e:	605a      	str	r2, [r3, #4]
 8001890:	e007      	b.n	80018a2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	685a      	ldr	r2, [r3, #4]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018a0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	6812      	ldr	r2, [r2, #0]
 80018ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018b4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	68da      	ldr	r2, [r3, #12]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80018c4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	691a      	ldr	r2, [r3, #16]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	699b      	ldr	r3, [r3, #24]
 80018d6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	430a      	orrs	r2, r1
 80018de:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	69d9      	ldr	r1, [r3, #28]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6a1a      	ldr	r2, [r3, #32]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	430a      	orrs	r2, r1
 80018ee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f042 0201 	orr.w	r2, r2, #1
 80018fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2220      	movs	r2, #32
 800190a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2200      	movs	r2, #0
 8001918:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
	...

08001928 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b088      	sub	sp, #32
 800192c:	af02      	add	r7, sp, #8
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	4608      	mov	r0, r1
 8001932:	4611      	mov	r1, r2
 8001934:	461a      	mov	r2, r3
 8001936:	4603      	mov	r3, r0
 8001938:	817b      	strh	r3, [r7, #10]
 800193a:	460b      	mov	r3, r1
 800193c:	813b      	strh	r3, [r7, #8]
 800193e:	4613      	mov	r3, r2
 8001940:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001948:	b2db      	uxtb	r3, r3
 800194a:	2b20      	cmp	r3, #32
 800194c:	f040 80f9 	bne.w	8001b42 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001950:	6a3b      	ldr	r3, [r7, #32]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d002      	beq.n	800195c <HAL_I2C_Mem_Write+0x34>
 8001956:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001958:	2b00      	cmp	r3, #0
 800195a:	d105      	bne.n	8001968 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001962:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e0ed      	b.n	8001b44 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800196e:	2b01      	cmp	r3, #1
 8001970:	d101      	bne.n	8001976 <HAL_I2C_Mem_Write+0x4e>
 8001972:	2302      	movs	r3, #2
 8001974:	e0e6      	b.n	8001b44 <HAL_I2C_Mem_Write+0x21c>
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	2201      	movs	r2, #1
 800197a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800197e:	f7ff fc3f 	bl	8001200 <HAL_GetTick>
 8001982:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	9300      	str	r3, [sp, #0]
 8001988:	2319      	movs	r3, #25
 800198a:	2201      	movs	r2, #1
 800198c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001990:	68f8      	ldr	r0, [r7, #12]
 8001992:	f000 fac3 	bl	8001f1c <I2C_WaitOnFlagUntilTimeout>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e0d1      	b.n	8001b44 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2221      	movs	r2, #33	; 0x21
 80019a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2240      	movs	r2, #64	; 0x40
 80019ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	2200      	movs	r2, #0
 80019b4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	6a3a      	ldr	r2, [r7, #32]
 80019ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80019c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	2200      	movs	r2, #0
 80019c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80019c8:	88f8      	ldrh	r0, [r7, #6]
 80019ca:	893a      	ldrh	r2, [r7, #8]
 80019cc:	8979      	ldrh	r1, [r7, #10]
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	9301      	str	r3, [sp, #4]
 80019d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019d4:	9300      	str	r3, [sp, #0]
 80019d6:	4603      	mov	r3, r0
 80019d8:	68f8      	ldr	r0, [r7, #12]
 80019da:	f000 f9d3 	bl	8001d84 <I2C_RequestMemoryWrite>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d005      	beq.n	80019f0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2200      	movs	r2, #0
 80019e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e0a9      	b.n	8001b44 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	2bff      	cmp	r3, #255	; 0xff
 80019f8:	d90e      	bls.n	8001a18 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	22ff      	movs	r2, #255	; 0xff
 80019fe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a04:	b2da      	uxtb	r2, r3
 8001a06:	8979      	ldrh	r1, [r7, #10]
 8001a08:	2300      	movs	r3, #0
 8001a0a:	9300      	str	r3, [sp, #0]
 8001a0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a10:	68f8      	ldr	r0, [r7, #12]
 8001a12:	f000 fc3d 	bl	8002290 <I2C_TransferConfig>
 8001a16:	e00f      	b.n	8001a38 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a1c:	b29a      	uxth	r2, r3
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a26:	b2da      	uxtb	r2, r3
 8001a28:	8979      	ldrh	r1, [r7, #10]
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	9300      	str	r3, [sp, #0]
 8001a2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a32:	68f8      	ldr	r0, [r7, #12]
 8001a34:	f000 fc2c 	bl	8002290 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a38:	697a      	ldr	r2, [r7, #20]
 8001a3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a3c:	68f8      	ldr	r0, [r7, #12]
 8001a3e:	f000 fabc 	bl	8001fba <I2C_WaitOnTXISFlagUntilTimeout>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e07b      	b.n	8001b44 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a50:	781a      	ldrb	r2, [r3, #0]
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5c:	1c5a      	adds	r2, r3, #1
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	3b01      	subs	r3, #1
 8001a6a:	b29a      	uxth	r2, r3
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a74:	3b01      	subs	r3, #1
 8001a76:	b29a      	uxth	r2, r3
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d034      	beq.n	8001af0 <HAL_I2C_Mem_Write+0x1c8>
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d130      	bne.n	8001af0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	9300      	str	r3, [sp, #0]
 8001a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a94:	2200      	movs	r2, #0
 8001a96:	2180      	movs	r1, #128	; 0x80
 8001a98:	68f8      	ldr	r0, [r7, #12]
 8001a9a:	f000 fa3f 	bl	8001f1c <I2C_WaitOnFlagUntilTimeout>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e04d      	b.n	8001b44 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	2bff      	cmp	r3, #255	; 0xff
 8001ab0:	d90e      	bls.n	8001ad0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	22ff      	movs	r2, #255	; 0xff
 8001ab6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001abc:	b2da      	uxtb	r2, r3
 8001abe:	8979      	ldrh	r1, [r7, #10]
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	9300      	str	r3, [sp, #0]
 8001ac4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ac8:	68f8      	ldr	r0, [r7, #12]
 8001aca:	f000 fbe1 	bl	8002290 <I2C_TransferConfig>
 8001ace:	e00f      	b.n	8001af0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ad4:	b29a      	uxth	r2, r3
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ade:	b2da      	uxtb	r2, r3
 8001ae0:	8979      	ldrh	r1, [r7, #10]
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	9300      	str	r3, [sp, #0]
 8001ae6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001aea:	68f8      	ldr	r0, [r7, #12]
 8001aec:	f000 fbd0 	bl	8002290 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d19e      	bne.n	8001a38 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001afa:	697a      	ldr	r2, [r7, #20]
 8001afc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001afe:	68f8      	ldr	r0, [r7, #12]
 8001b00:	f000 faa2 	bl	8002048 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e01a      	b.n	8001b44 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2220      	movs	r2, #32
 8001b14:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	6859      	ldr	r1, [r3, #4]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	4b0a      	ldr	r3, [pc, #40]	; (8001b4c <HAL_I2C_Mem_Write+0x224>)
 8001b22:	400b      	ands	r3, r1
 8001b24:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2220      	movs	r2, #32
 8001b2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2200      	movs	r2, #0
 8001b32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	e000      	b.n	8001b44 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001b42:	2302      	movs	r3, #2
  }
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3718      	adds	r7, #24
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	fe00e800 	.word	0xfe00e800

08001b50 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b088      	sub	sp, #32
 8001b54:	af02      	add	r7, sp, #8
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	4608      	mov	r0, r1
 8001b5a:	4611      	mov	r1, r2
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	4603      	mov	r3, r0
 8001b60:	817b      	strh	r3, [r7, #10]
 8001b62:	460b      	mov	r3, r1
 8001b64:	813b      	strh	r3, [r7, #8]
 8001b66:	4613      	mov	r3, r2
 8001b68:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	2b20      	cmp	r3, #32
 8001b74:	f040 80fd 	bne.w	8001d72 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b78:	6a3b      	ldr	r3, [r7, #32]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d002      	beq.n	8001b84 <HAL_I2C_Mem_Read+0x34>
 8001b7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d105      	bne.n	8001b90 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b8a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e0f1      	b.n	8001d74 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d101      	bne.n	8001b9e <HAL_I2C_Mem_Read+0x4e>
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	e0ea      	b.n	8001d74 <HAL_I2C_Mem_Read+0x224>
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001ba6:	f7ff fb2b 	bl	8001200 <HAL_GetTick>
 8001baa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	9300      	str	r3, [sp, #0]
 8001bb0:	2319      	movs	r3, #25
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bb8:	68f8      	ldr	r0, [r7, #12]
 8001bba:	f000 f9af 	bl	8001f1c <I2C_WaitOnFlagUntilTimeout>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e0d5      	b.n	8001d74 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2222      	movs	r2, #34	; 0x22
 8001bcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2240      	movs	r2, #64	; 0x40
 8001bd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	6a3a      	ldr	r2, [r7, #32]
 8001be2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001be8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2200      	movs	r2, #0
 8001bee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001bf0:	88f8      	ldrh	r0, [r7, #6]
 8001bf2:	893a      	ldrh	r2, [r7, #8]
 8001bf4:	8979      	ldrh	r1, [r7, #10]
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	9301      	str	r3, [sp, #4]
 8001bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bfc:	9300      	str	r3, [sp, #0]
 8001bfe:	4603      	mov	r3, r0
 8001c00:	68f8      	ldr	r0, [r7, #12]
 8001c02:	f000 f913 	bl	8001e2c <I2C_RequestMemoryRead>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d005      	beq.n	8001c18 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e0ad      	b.n	8001d74 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	2bff      	cmp	r3, #255	; 0xff
 8001c20:	d90e      	bls.n	8001c40 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	22ff      	movs	r2, #255	; 0xff
 8001c26:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c2c:	b2da      	uxtb	r2, r3
 8001c2e:	8979      	ldrh	r1, [r7, #10]
 8001c30:	4b52      	ldr	r3, [pc, #328]	; (8001d7c <HAL_I2C_Mem_Read+0x22c>)
 8001c32:	9300      	str	r3, [sp, #0]
 8001c34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c38:	68f8      	ldr	r0, [r7, #12]
 8001c3a:	f000 fb29 	bl	8002290 <I2C_TransferConfig>
 8001c3e:	e00f      	b.n	8001c60 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c44:	b29a      	uxth	r2, r3
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c4e:	b2da      	uxtb	r2, r3
 8001c50:	8979      	ldrh	r1, [r7, #10]
 8001c52:	4b4a      	ldr	r3, [pc, #296]	; (8001d7c <HAL_I2C_Mem_Read+0x22c>)
 8001c54:	9300      	str	r3, [sp, #0]
 8001c56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c5a:	68f8      	ldr	r0, [r7, #12]
 8001c5c:	f000 fb18 	bl	8002290 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	9300      	str	r3, [sp, #0]
 8001c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c66:	2200      	movs	r2, #0
 8001c68:	2104      	movs	r1, #4
 8001c6a:	68f8      	ldr	r0, [r7, #12]
 8001c6c:	f000 f956 	bl	8001f1c <I2C_WaitOnFlagUntilTimeout>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e07c      	b.n	8001d74 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c84:	b2d2      	uxtb	r2, r2
 8001c86:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8c:	1c5a      	adds	r2, r3, #1
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c96:	3b01      	subs	r3, #1
 8001c98:	b29a      	uxth	r2, r3
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	3b01      	subs	r3, #1
 8001ca6:	b29a      	uxth	r2, r3
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d034      	beq.n	8001d20 <HAL_I2C_Mem_Read+0x1d0>
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d130      	bne.n	8001d20 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	9300      	str	r3, [sp, #0]
 8001cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	2180      	movs	r1, #128	; 0x80
 8001cc8:	68f8      	ldr	r0, [r7, #12]
 8001cca:	f000 f927 	bl	8001f1c <I2C_WaitOnFlagUntilTimeout>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e04d      	b.n	8001d74 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	2bff      	cmp	r3, #255	; 0xff
 8001ce0:	d90e      	bls.n	8001d00 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	22ff      	movs	r2, #255	; 0xff
 8001ce6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cec:	b2da      	uxtb	r2, r3
 8001cee:	8979      	ldrh	r1, [r7, #10]
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	9300      	str	r3, [sp, #0]
 8001cf4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001cf8:	68f8      	ldr	r0, [r7, #12]
 8001cfa:	f000 fac9 	bl	8002290 <I2C_TransferConfig>
 8001cfe:	e00f      	b.n	8001d20 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d04:	b29a      	uxth	r2, r3
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d0e:	b2da      	uxtb	r2, r3
 8001d10:	8979      	ldrh	r1, [r7, #10]
 8001d12:	2300      	movs	r3, #0
 8001d14:	9300      	str	r3, [sp, #0]
 8001d16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d1a:	68f8      	ldr	r0, [r7, #12]
 8001d1c:	f000 fab8 	bl	8002290 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d19a      	bne.n	8001c60 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d2a:	697a      	ldr	r2, [r7, #20]
 8001d2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d2e:	68f8      	ldr	r0, [r7, #12]
 8001d30:	f000 f98a 	bl	8002048 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e01a      	b.n	8001d74 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2220      	movs	r2, #32
 8001d44:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	6859      	ldr	r1, [r3, #4]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	4b0b      	ldr	r3, [pc, #44]	; (8001d80 <HAL_I2C_Mem_Read+0x230>)
 8001d52:	400b      	ands	r3, r1
 8001d54:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2220      	movs	r2, #32
 8001d5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2200      	movs	r2, #0
 8001d62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	e000      	b.n	8001d74 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001d72:	2302      	movs	r3, #2
  }
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3718      	adds	r7, #24
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	80002400 	.word	0x80002400
 8001d80:	fe00e800 	.word	0xfe00e800

08001d84 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af02      	add	r7, sp, #8
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	4608      	mov	r0, r1
 8001d8e:	4611      	mov	r1, r2
 8001d90:	461a      	mov	r2, r3
 8001d92:	4603      	mov	r3, r0
 8001d94:	817b      	strh	r3, [r7, #10]
 8001d96:	460b      	mov	r3, r1
 8001d98:	813b      	strh	r3, [r7, #8]
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001d9e:	88fb      	ldrh	r3, [r7, #6]
 8001da0:	b2da      	uxtb	r2, r3
 8001da2:	8979      	ldrh	r1, [r7, #10]
 8001da4:	4b20      	ldr	r3, [pc, #128]	; (8001e28 <I2C_RequestMemoryWrite+0xa4>)
 8001da6:	9300      	str	r3, [sp, #0]
 8001da8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001dac:	68f8      	ldr	r0, [r7, #12]
 8001dae:	f000 fa6f 	bl	8002290 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001db2:	69fa      	ldr	r2, [r7, #28]
 8001db4:	69b9      	ldr	r1, [r7, #24]
 8001db6:	68f8      	ldr	r0, [r7, #12]
 8001db8:	f000 f8ff 	bl	8001fba <I2C_WaitOnTXISFlagUntilTimeout>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e02c      	b.n	8001e20 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001dc6:	88fb      	ldrh	r3, [r7, #6]
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d105      	bne.n	8001dd8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001dcc:	893b      	ldrh	r3, [r7, #8]
 8001dce:	b2da      	uxtb	r2, r3
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	629a      	str	r2, [r3, #40]	; 0x28
 8001dd6:	e015      	b.n	8001e04 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001dd8:	893b      	ldrh	r3, [r7, #8]
 8001dda:	0a1b      	lsrs	r3, r3, #8
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	b2da      	uxtb	r2, r3
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001de6:	69fa      	ldr	r2, [r7, #28]
 8001de8:	69b9      	ldr	r1, [r7, #24]
 8001dea:	68f8      	ldr	r0, [r7, #12]
 8001dec:	f000 f8e5 	bl	8001fba <I2C_WaitOnTXISFlagUntilTimeout>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e012      	b.n	8001e20 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001dfa:	893b      	ldrh	r3, [r7, #8]
 8001dfc:	b2da      	uxtb	r2, r3
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	9300      	str	r3, [sp, #0]
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	2180      	movs	r1, #128	; 0x80
 8001e0e:	68f8      	ldr	r0, [r7, #12]
 8001e10:	f000 f884 	bl	8001f1c <I2C_WaitOnFlagUntilTimeout>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e000      	b.n	8001e20 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001e1e:	2300      	movs	r3, #0
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3710      	adds	r7, #16
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	80002000 	.word	0x80002000

08001e2c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af02      	add	r7, sp, #8
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	4608      	mov	r0, r1
 8001e36:	4611      	mov	r1, r2
 8001e38:	461a      	mov	r2, r3
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	817b      	strh	r3, [r7, #10]
 8001e3e:	460b      	mov	r3, r1
 8001e40:	813b      	strh	r3, [r7, #8]
 8001e42:	4613      	mov	r3, r2
 8001e44:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001e46:	88fb      	ldrh	r3, [r7, #6]
 8001e48:	b2da      	uxtb	r2, r3
 8001e4a:	8979      	ldrh	r1, [r7, #10]
 8001e4c:	4b20      	ldr	r3, [pc, #128]	; (8001ed0 <I2C_RequestMemoryRead+0xa4>)
 8001e4e:	9300      	str	r3, [sp, #0]
 8001e50:	2300      	movs	r3, #0
 8001e52:	68f8      	ldr	r0, [r7, #12]
 8001e54:	f000 fa1c 	bl	8002290 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e58:	69fa      	ldr	r2, [r7, #28]
 8001e5a:	69b9      	ldr	r1, [r7, #24]
 8001e5c:	68f8      	ldr	r0, [r7, #12]
 8001e5e:	f000 f8ac 	bl	8001fba <I2C_WaitOnTXISFlagUntilTimeout>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e02c      	b.n	8001ec6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001e6c:	88fb      	ldrh	r3, [r7, #6]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d105      	bne.n	8001e7e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001e72:	893b      	ldrh	r3, [r7, #8]
 8001e74:	b2da      	uxtb	r2, r3
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	629a      	str	r2, [r3, #40]	; 0x28
 8001e7c:	e015      	b.n	8001eaa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001e7e:	893b      	ldrh	r3, [r7, #8]
 8001e80:	0a1b      	lsrs	r3, r3, #8
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	b2da      	uxtb	r2, r3
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e8c:	69fa      	ldr	r2, [r7, #28]
 8001e8e:	69b9      	ldr	r1, [r7, #24]
 8001e90:	68f8      	ldr	r0, [r7, #12]
 8001e92:	f000 f892 	bl	8001fba <I2C_WaitOnTXISFlagUntilTimeout>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e012      	b.n	8001ec6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001ea0:	893b      	ldrh	r3, [r7, #8]
 8001ea2:	b2da      	uxtb	r2, r3
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	9300      	str	r3, [sp, #0]
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	2140      	movs	r1, #64	; 0x40
 8001eb4:	68f8      	ldr	r0, [r7, #12]
 8001eb6:	f000 f831 	bl	8001f1c <I2C_WaitOnFlagUntilTimeout>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e000      	b.n	8001ec6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3710      	adds	r7, #16
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	80002000 	.word	0x80002000

08001ed4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	699b      	ldr	r3, [r3, #24]
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d103      	bne.n	8001ef2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	f003 0301 	and.w	r3, r3, #1
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d007      	beq.n	8001f10 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	699a      	ldr	r2, [r3, #24]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f042 0201 	orr.w	r2, r2, #1
 8001f0e:	619a      	str	r2, [r3, #24]
  }
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	603b      	str	r3, [r7, #0]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f2c:	e031      	b.n	8001f92 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f34:	d02d      	beq.n	8001f92 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f36:	f7ff f963 	bl	8001200 <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	683a      	ldr	r2, [r7, #0]
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d302      	bcc.n	8001f4c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d122      	bne.n	8001f92 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	699a      	ldr	r2, [r3, #24]
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	4013      	ands	r3, r2
 8001f56:	68ba      	ldr	r2, [r7, #8]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	bf0c      	ite	eq
 8001f5c:	2301      	moveq	r3, #1
 8001f5e:	2300      	movne	r3, #0
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	461a      	mov	r2, r3
 8001f64:	79fb      	ldrb	r3, [r7, #7]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d113      	bne.n	8001f92 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6e:	f043 0220 	orr.w	r2, r3, #32
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2220      	movs	r2, #32
 8001f7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e00f      	b.n	8001fb2 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	699a      	ldr	r2, [r3, #24]
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	68ba      	ldr	r2, [r7, #8]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	bf0c      	ite	eq
 8001fa2:	2301      	moveq	r3, #1
 8001fa4:	2300      	movne	r3, #0
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	461a      	mov	r2, r3
 8001faa:	79fb      	ldrb	r3, [r7, #7]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d0be      	beq.n	8001f2e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3710      	adds	r7, #16
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b084      	sub	sp, #16
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	60f8      	str	r0, [r7, #12]
 8001fc2:	60b9      	str	r1, [r7, #8]
 8001fc4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001fc6:	e033      	b.n	8002030 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	68b9      	ldr	r1, [r7, #8]
 8001fcc:	68f8      	ldr	r0, [r7, #12]
 8001fce:	f000 f87f 	bl	80020d0 <I2C_IsErrorOccurred>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e031      	b.n	8002040 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001fe2:	d025      	beq.n	8002030 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fe4:	f7ff f90c 	bl	8001200 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	68ba      	ldr	r2, [r7, #8]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d302      	bcc.n	8001ffa <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d11a      	bne.n	8002030 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	699b      	ldr	r3, [r3, #24]
 8002000:	f003 0302 	and.w	r3, r3, #2
 8002004:	2b02      	cmp	r3, #2
 8002006:	d013      	beq.n	8002030 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200c:	f043 0220 	orr.w	r2, r3, #32
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2220      	movs	r2, #32
 8002018:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2200      	movs	r2, #0
 8002020:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2200      	movs	r2, #0
 8002028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e007      	b.n	8002040 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	699b      	ldr	r3, [r3, #24]
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	2b02      	cmp	r3, #2
 800203c:	d1c4      	bne.n	8001fc8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800203e:	2300      	movs	r3, #0
}
 8002040:	4618      	mov	r0, r3
 8002042:	3710      	adds	r7, #16
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002054:	e02f      	b.n	80020b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	68b9      	ldr	r1, [r7, #8]
 800205a:	68f8      	ldr	r0, [r7, #12]
 800205c:	f000 f838 	bl	80020d0 <I2C_IsErrorOccurred>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e02d      	b.n	80020c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800206a:	f7ff f8c9 	bl	8001200 <HAL_GetTick>
 800206e:	4602      	mov	r2, r0
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	68ba      	ldr	r2, [r7, #8]
 8002076:	429a      	cmp	r2, r3
 8002078:	d302      	bcc.n	8002080 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d11a      	bne.n	80020b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	699b      	ldr	r3, [r3, #24]
 8002086:	f003 0320 	and.w	r3, r3, #32
 800208a:	2b20      	cmp	r3, #32
 800208c:	d013      	beq.n	80020b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002092:	f043 0220 	orr.w	r2, r3, #32
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2220      	movs	r2, #32
 800209e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e007      	b.n	80020c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	699b      	ldr	r3, [r3, #24]
 80020bc:	f003 0320 	and.w	r3, r3, #32
 80020c0:	2b20      	cmp	r3, #32
 80020c2:	d1c8      	bne.n	8002056 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3710      	adds	r7, #16
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
	...

080020d0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b08a      	sub	sp, #40	; 0x28
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020dc:	2300      	movs	r3, #0
 80020de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80020ea:	2300      	movs	r3, #0
 80020ec:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	f003 0310 	and.w	r3, r3, #16
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d068      	beq.n	80021ce <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2210      	movs	r2, #16
 8002102:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002104:	e049      	b.n	800219a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800210c:	d045      	beq.n	800219a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800210e:	f7ff f877 	bl	8001200 <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	68ba      	ldr	r2, [r7, #8]
 800211a:	429a      	cmp	r2, r3
 800211c:	d302      	bcc.n	8002124 <I2C_IsErrorOccurred+0x54>
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d13a      	bne.n	800219a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800212e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002136:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	699b      	ldr	r3, [r3, #24]
 800213e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002142:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002146:	d121      	bne.n	800218c <I2C_IsErrorOccurred+0xbc>
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800214e:	d01d      	beq.n	800218c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002150:	7cfb      	ldrb	r3, [r7, #19]
 8002152:	2b20      	cmp	r3, #32
 8002154:	d01a      	beq.n	800218c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	685a      	ldr	r2, [r3, #4]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002164:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002166:	f7ff f84b 	bl	8001200 <HAL_GetTick>
 800216a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800216c:	e00e      	b.n	800218c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800216e:	f7ff f847 	bl	8001200 <HAL_GetTick>
 8002172:	4602      	mov	r2, r0
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	2b19      	cmp	r3, #25
 800217a:	d907      	bls.n	800218c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800217c:	6a3b      	ldr	r3, [r7, #32]
 800217e:	f043 0320 	orr.w	r3, r3, #32
 8002182:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800218a:	e006      	b.n	800219a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	f003 0320 	and.w	r3, r3, #32
 8002196:	2b20      	cmp	r3, #32
 8002198:	d1e9      	bne.n	800216e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	f003 0320 	and.w	r3, r3, #32
 80021a4:	2b20      	cmp	r3, #32
 80021a6:	d003      	beq.n	80021b0 <I2C_IsErrorOccurred+0xe0>
 80021a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d0aa      	beq.n	8002106 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80021b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d103      	bne.n	80021c0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2220      	movs	r2, #32
 80021be:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80021c0:	6a3b      	ldr	r3, [r7, #32]
 80021c2:	f043 0304 	orr.w	r3, r3, #4
 80021c6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d00b      	beq.n	80021f8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80021e0:	6a3b      	ldr	r3, [r7, #32]
 80021e2:	f043 0301 	orr.w	r3, r3, #1
 80021e6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021f0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d00b      	beq.n	800221a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002202:	6a3b      	ldr	r3, [r7, #32]
 8002204:	f043 0308 	orr.w	r3, r3, #8
 8002208:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002212:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002220:	2b00      	cmp	r3, #0
 8002222:	d00b      	beq.n	800223c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002224:	6a3b      	ldr	r3, [r7, #32]
 8002226:	f043 0302 	orr.w	r3, r3, #2
 800222a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002234:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800223c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002240:	2b00      	cmp	r3, #0
 8002242:	d01c      	beq.n	800227e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002244:	68f8      	ldr	r0, [r7, #12]
 8002246:	f7ff fe45 	bl	8001ed4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	6859      	ldr	r1, [r3, #4]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	4b0d      	ldr	r3, [pc, #52]	; (800228c <I2C_IsErrorOccurred+0x1bc>)
 8002256:	400b      	ands	r3, r1
 8002258:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800225e:	6a3b      	ldr	r3, [r7, #32]
 8002260:	431a      	orrs	r2, r3
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2220      	movs	r2, #32
 800226a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2200      	movs	r2, #0
 8002272:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2200      	movs	r2, #0
 800227a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800227e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002282:	4618      	mov	r0, r3
 8002284:	3728      	adds	r7, #40	; 0x28
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	fe00e800 	.word	0xfe00e800

08002290 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002290:	b480      	push	{r7}
 8002292:	b087      	sub	sp, #28
 8002294:	af00      	add	r7, sp, #0
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	607b      	str	r3, [r7, #4]
 800229a:	460b      	mov	r3, r1
 800229c:	817b      	strh	r3, [r7, #10]
 800229e:	4613      	mov	r3, r2
 80022a0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80022a2:	897b      	ldrh	r3, [r7, #10]
 80022a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80022a8:	7a7b      	ldrb	r3, [r7, #9]
 80022aa:	041b      	lsls	r3, r3, #16
 80022ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80022b0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80022b6:	6a3b      	ldr	r3, [r7, #32]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80022be:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	685a      	ldr	r2, [r3, #4]
 80022c6:	6a3b      	ldr	r3, [r7, #32]
 80022c8:	0d5b      	lsrs	r3, r3, #21
 80022ca:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80022ce:	4b08      	ldr	r3, [pc, #32]	; (80022f0 <I2C_TransferConfig+0x60>)
 80022d0:	430b      	orrs	r3, r1
 80022d2:	43db      	mvns	r3, r3
 80022d4:	ea02 0103 	and.w	r1, r2, r3
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	697a      	ldr	r2, [r7, #20]
 80022de:	430a      	orrs	r2, r1
 80022e0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80022e2:	bf00      	nop
 80022e4:	371c      	adds	r7, #28
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	03ff63ff 	.word	0x03ff63ff

080022f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002304:	b2db      	uxtb	r3, r3
 8002306:	2b20      	cmp	r3, #32
 8002308:	d138      	bne.n	800237c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002310:	2b01      	cmp	r3, #1
 8002312:	d101      	bne.n	8002318 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002314:	2302      	movs	r3, #2
 8002316:	e032      	b.n	800237e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2201      	movs	r2, #1
 800231c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2224      	movs	r2, #36	; 0x24
 8002324:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f022 0201 	bic.w	r2, r2, #1
 8002336:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002346:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	6819      	ldr	r1, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	683a      	ldr	r2, [r7, #0]
 8002354:	430a      	orrs	r2, r1
 8002356:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f042 0201 	orr.w	r2, r2, #1
 8002366:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2220      	movs	r2, #32
 800236c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002378:	2300      	movs	r3, #0
 800237a:	e000      	b.n	800237e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800237c:	2302      	movs	r3, #2
  }
}
 800237e:	4618      	mov	r0, r3
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr

0800238a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800238a:	b480      	push	{r7}
 800238c:	b085      	sub	sp, #20
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
 8002392:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800239a:	b2db      	uxtb	r3, r3
 800239c:	2b20      	cmp	r3, #32
 800239e:	d139      	bne.n	8002414 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d101      	bne.n	80023ae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80023aa:	2302      	movs	r3, #2
 80023ac:	e033      	b.n	8002416 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2201      	movs	r2, #1
 80023b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2224      	movs	r2, #36	; 0x24
 80023ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f022 0201 	bic.w	r2, r2, #1
 80023cc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80023dc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	021b      	lsls	r3, r3, #8
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f042 0201 	orr.w	r2, r2, #1
 80023fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2220      	movs	r2, #32
 8002404:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002410:	2300      	movs	r3, #0
 8002412:	e000      	b.n	8002416 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002414:	2302      	movs	r3, #2
  }
}
 8002416:	4618      	mov	r0, r3
 8002418:	3714      	adds	r7, #20
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
	...

08002424 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002428:	4b05      	ldr	r3, [pc, #20]	; (8002440 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a04      	ldr	r2, [pc, #16]	; (8002440 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800242e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002432:	6013      	str	r3, [r2, #0]
}
 8002434:	bf00      	nop
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	40007000 	.word	0x40007000

08002444 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002448:	4b04      	ldr	r3, [pc, #16]	; (800245c <HAL_PWREx_GetVoltageRange+0x18>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002450:	4618      	mov	r0, r3
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	40007000 	.word	0x40007000

08002460 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002460:	b480      	push	{r7}
 8002462:	b085      	sub	sp, #20
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800246e:	d130      	bne.n	80024d2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002470:	4b23      	ldr	r3, [pc, #140]	; (8002500 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002478:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800247c:	d038      	beq.n	80024f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800247e:	4b20      	ldr	r3, [pc, #128]	; (8002500 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002486:	4a1e      	ldr	r2, [pc, #120]	; (8002500 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002488:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800248c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800248e:	4b1d      	ldr	r3, [pc, #116]	; (8002504 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2232      	movs	r2, #50	; 0x32
 8002494:	fb02 f303 	mul.w	r3, r2, r3
 8002498:	4a1b      	ldr	r2, [pc, #108]	; (8002508 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800249a:	fba2 2303 	umull	r2, r3, r2, r3
 800249e:	0c9b      	lsrs	r3, r3, #18
 80024a0:	3301      	adds	r3, #1
 80024a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024a4:	e002      	b.n	80024ac <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	3b01      	subs	r3, #1
 80024aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024ac:	4b14      	ldr	r3, [pc, #80]	; (8002500 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024ae:	695b      	ldr	r3, [r3, #20]
 80024b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024b8:	d102      	bne.n	80024c0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d1f2      	bne.n	80024a6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80024c0:	4b0f      	ldr	r3, [pc, #60]	; (8002500 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024c2:	695b      	ldr	r3, [r3, #20]
 80024c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024cc:	d110      	bne.n	80024f0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e00f      	b.n	80024f2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80024d2:	4b0b      	ldr	r3, [pc, #44]	; (8002500 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80024da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024de:	d007      	beq.n	80024f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80024e0:	4b07      	ldr	r3, [pc, #28]	; (8002500 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80024e8:	4a05      	ldr	r2, [pc, #20]	; (8002500 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024ee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3714      	adds	r7, #20
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	40007000 	.word	0x40007000
 8002504:	20000000 	.word	0x20000000
 8002508:	431bde83 	.word	0x431bde83

0800250c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b08a      	sub	sp, #40	; 0x28
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d102      	bne.n	8002520 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	f000 bc4f 	b.w	8002dbe <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002520:	4b97      	ldr	r3, [pc, #604]	; (8002780 <HAL_RCC_OscConfig+0x274>)
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f003 030c 	and.w	r3, r3, #12
 8002528:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800252a:	4b95      	ldr	r3, [pc, #596]	; (8002780 <HAL_RCC_OscConfig+0x274>)
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	f003 0303 	and.w	r3, r3, #3
 8002532:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0310 	and.w	r3, r3, #16
 800253c:	2b00      	cmp	r3, #0
 800253e:	f000 80e6 	beq.w	800270e <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002542:	6a3b      	ldr	r3, [r7, #32]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d007      	beq.n	8002558 <HAL_RCC_OscConfig+0x4c>
 8002548:	6a3b      	ldr	r3, [r7, #32]
 800254a:	2b0c      	cmp	r3, #12
 800254c:	f040 808d 	bne.w	800266a <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	2b01      	cmp	r3, #1
 8002554:	f040 8089 	bne.w	800266a <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002558:	4b89      	ldr	r3, [pc, #548]	; (8002780 <HAL_RCC_OscConfig+0x274>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0302 	and.w	r3, r3, #2
 8002560:	2b00      	cmp	r3, #0
 8002562:	d006      	beq.n	8002572 <HAL_RCC_OscConfig+0x66>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	69db      	ldr	r3, [r3, #28]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d102      	bne.n	8002572 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	f000 bc26 	b.w	8002dbe <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002576:	4b82      	ldr	r3, [pc, #520]	; (8002780 <HAL_RCC_OscConfig+0x274>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0308 	and.w	r3, r3, #8
 800257e:	2b00      	cmp	r3, #0
 8002580:	d004      	beq.n	800258c <HAL_RCC_OscConfig+0x80>
 8002582:	4b7f      	ldr	r3, [pc, #508]	; (8002780 <HAL_RCC_OscConfig+0x274>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800258a:	e005      	b.n	8002598 <HAL_RCC_OscConfig+0x8c>
 800258c:	4b7c      	ldr	r3, [pc, #496]	; (8002780 <HAL_RCC_OscConfig+0x274>)
 800258e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002592:	091b      	lsrs	r3, r3, #4
 8002594:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002598:	4293      	cmp	r3, r2
 800259a:	d224      	bcs.n	80025e6 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a0:	4618      	mov	r0, r3
 80025a2:	f000 fe0b 	bl	80031bc <RCC_SetFlashLatencyFromMSIRange>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d002      	beq.n	80025b2 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	f000 bc06 	b.w	8002dbe <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025b2:	4b73      	ldr	r3, [pc, #460]	; (8002780 <HAL_RCC_OscConfig+0x274>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a72      	ldr	r2, [pc, #456]	; (8002780 <HAL_RCC_OscConfig+0x274>)
 80025b8:	f043 0308 	orr.w	r3, r3, #8
 80025bc:	6013      	str	r3, [r2, #0]
 80025be:	4b70      	ldr	r3, [pc, #448]	; (8002780 <HAL_RCC_OscConfig+0x274>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ca:	496d      	ldr	r1, [pc, #436]	; (8002780 <HAL_RCC_OscConfig+0x274>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025d0:	4b6b      	ldr	r3, [pc, #428]	; (8002780 <HAL_RCC_OscConfig+0x274>)
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a1b      	ldr	r3, [r3, #32]
 80025dc:	021b      	lsls	r3, r3, #8
 80025de:	4968      	ldr	r1, [pc, #416]	; (8002780 <HAL_RCC_OscConfig+0x274>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	604b      	str	r3, [r1, #4]
 80025e4:	e025      	b.n	8002632 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025e6:	4b66      	ldr	r3, [pc, #408]	; (8002780 <HAL_RCC_OscConfig+0x274>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a65      	ldr	r2, [pc, #404]	; (8002780 <HAL_RCC_OscConfig+0x274>)
 80025ec:	f043 0308 	orr.w	r3, r3, #8
 80025f0:	6013      	str	r3, [r2, #0]
 80025f2:	4b63      	ldr	r3, [pc, #396]	; (8002780 <HAL_RCC_OscConfig+0x274>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fe:	4960      	ldr	r1, [pc, #384]	; (8002780 <HAL_RCC_OscConfig+0x274>)
 8002600:	4313      	orrs	r3, r2
 8002602:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002604:	4b5e      	ldr	r3, [pc, #376]	; (8002780 <HAL_RCC_OscConfig+0x274>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a1b      	ldr	r3, [r3, #32]
 8002610:	021b      	lsls	r3, r3, #8
 8002612:	495b      	ldr	r1, [pc, #364]	; (8002780 <HAL_RCC_OscConfig+0x274>)
 8002614:	4313      	orrs	r3, r2
 8002616:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002618:	6a3b      	ldr	r3, [r7, #32]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d109      	bne.n	8002632 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002622:	4618      	mov	r0, r3
 8002624:	f000 fdca 	bl	80031bc <RCC_SetFlashLatencyFromMSIRange>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e3c5      	b.n	8002dbe <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002632:	f000 fccd 	bl	8002fd0 <HAL_RCC_GetSysClockFreq>
 8002636:	4602      	mov	r2, r0
 8002638:	4b51      	ldr	r3, [pc, #324]	; (8002780 <HAL_RCC_OscConfig+0x274>)
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	091b      	lsrs	r3, r3, #4
 800263e:	f003 030f 	and.w	r3, r3, #15
 8002642:	4950      	ldr	r1, [pc, #320]	; (8002784 <HAL_RCC_OscConfig+0x278>)
 8002644:	5ccb      	ldrb	r3, [r1, r3]
 8002646:	f003 031f 	and.w	r3, r3, #31
 800264a:	fa22 f303 	lsr.w	r3, r2, r3
 800264e:	4a4e      	ldr	r2, [pc, #312]	; (8002788 <HAL_RCC_OscConfig+0x27c>)
 8002650:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002652:	4b4e      	ldr	r3, [pc, #312]	; (800278c <HAL_RCC_OscConfig+0x280>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4618      	mov	r0, r3
 8002658:	f7fe fc18 	bl	8000e8c <HAL_InitTick>
 800265c:	4603      	mov	r3, r0
 800265e:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8002660:	7dfb      	ldrb	r3, [r7, #23]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d052      	beq.n	800270c <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8002666:	7dfb      	ldrb	r3, [r7, #23]
 8002668:	e3a9      	b.n	8002dbe <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	69db      	ldr	r3, [r3, #28]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d032      	beq.n	80026d8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002672:	4b43      	ldr	r3, [pc, #268]	; (8002780 <HAL_RCC_OscConfig+0x274>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a42      	ldr	r2, [pc, #264]	; (8002780 <HAL_RCC_OscConfig+0x274>)
 8002678:	f043 0301 	orr.w	r3, r3, #1
 800267c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800267e:	f7fe fdbf 	bl	8001200 <HAL_GetTick>
 8002682:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002684:	e008      	b.n	8002698 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002686:	f7fe fdbb 	bl	8001200 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	2b02      	cmp	r3, #2
 8002692:	d901      	bls.n	8002698 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e392      	b.n	8002dbe <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002698:	4b39      	ldr	r3, [pc, #228]	; (8002780 <HAL_RCC_OscConfig+0x274>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0302 	and.w	r3, r3, #2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d0f0      	beq.n	8002686 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026a4:	4b36      	ldr	r3, [pc, #216]	; (8002780 <HAL_RCC_OscConfig+0x274>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a35      	ldr	r2, [pc, #212]	; (8002780 <HAL_RCC_OscConfig+0x274>)
 80026aa:	f043 0308 	orr.w	r3, r3, #8
 80026ae:	6013      	str	r3, [r2, #0]
 80026b0:	4b33      	ldr	r3, [pc, #204]	; (8002780 <HAL_RCC_OscConfig+0x274>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026bc:	4930      	ldr	r1, [pc, #192]	; (8002780 <HAL_RCC_OscConfig+0x274>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026c2:	4b2f      	ldr	r3, [pc, #188]	; (8002780 <HAL_RCC_OscConfig+0x274>)
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a1b      	ldr	r3, [r3, #32]
 80026ce:	021b      	lsls	r3, r3, #8
 80026d0:	492b      	ldr	r1, [pc, #172]	; (8002780 <HAL_RCC_OscConfig+0x274>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	604b      	str	r3, [r1, #4]
 80026d6:	e01a      	b.n	800270e <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80026d8:	4b29      	ldr	r3, [pc, #164]	; (8002780 <HAL_RCC_OscConfig+0x274>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a28      	ldr	r2, [pc, #160]	; (8002780 <HAL_RCC_OscConfig+0x274>)
 80026de:	f023 0301 	bic.w	r3, r3, #1
 80026e2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026e4:	f7fe fd8c 	bl	8001200 <HAL_GetTick>
 80026e8:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026ea:	e008      	b.n	80026fe <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026ec:	f7fe fd88 	bl	8001200 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e35f      	b.n	8002dbe <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026fe:	4b20      	ldr	r3, [pc, #128]	; (8002780 <HAL_RCC_OscConfig+0x274>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d1f0      	bne.n	80026ec <HAL_RCC_OscConfig+0x1e0>
 800270a:	e000      	b.n	800270e <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800270c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	2b00      	cmp	r3, #0
 8002718:	d073      	beq.n	8002802 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800271a:	6a3b      	ldr	r3, [r7, #32]
 800271c:	2b08      	cmp	r3, #8
 800271e:	d005      	beq.n	800272c <HAL_RCC_OscConfig+0x220>
 8002720:	6a3b      	ldr	r3, [r7, #32]
 8002722:	2b0c      	cmp	r3, #12
 8002724:	d10e      	bne.n	8002744 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	2b03      	cmp	r3, #3
 800272a:	d10b      	bne.n	8002744 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800272c:	4b14      	ldr	r3, [pc, #80]	; (8002780 <HAL_RCC_OscConfig+0x274>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d063      	beq.n	8002800 <HAL_RCC_OscConfig+0x2f4>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d15f      	bne.n	8002800 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e33c      	b.n	8002dbe <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800274c:	d106      	bne.n	800275c <HAL_RCC_OscConfig+0x250>
 800274e:	4b0c      	ldr	r3, [pc, #48]	; (8002780 <HAL_RCC_OscConfig+0x274>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a0b      	ldr	r2, [pc, #44]	; (8002780 <HAL_RCC_OscConfig+0x274>)
 8002754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002758:	6013      	str	r3, [r2, #0]
 800275a:	e025      	b.n	80027a8 <HAL_RCC_OscConfig+0x29c>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002764:	d114      	bne.n	8002790 <HAL_RCC_OscConfig+0x284>
 8002766:	4b06      	ldr	r3, [pc, #24]	; (8002780 <HAL_RCC_OscConfig+0x274>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a05      	ldr	r2, [pc, #20]	; (8002780 <HAL_RCC_OscConfig+0x274>)
 800276c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002770:	6013      	str	r3, [r2, #0]
 8002772:	4b03      	ldr	r3, [pc, #12]	; (8002780 <HAL_RCC_OscConfig+0x274>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a02      	ldr	r2, [pc, #8]	; (8002780 <HAL_RCC_OscConfig+0x274>)
 8002778:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800277c:	6013      	str	r3, [r2, #0]
 800277e:	e013      	b.n	80027a8 <HAL_RCC_OscConfig+0x29c>
 8002780:	40021000 	.word	0x40021000
 8002784:	08008f58 	.word	0x08008f58
 8002788:	20000000 	.word	0x20000000
 800278c:	20000004 	.word	0x20000004
 8002790:	4b8f      	ldr	r3, [pc, #572]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a8e      	ldr	r2, [pc, #568]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 8002796:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800279a:	6013      	str	r3, [r2, #0]
 800279c:	4b8c      	ldr	r3, [pc, #560]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a8b      	ldr	r2, [pc, #556]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 80027a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d013      	beq.n	80027d8 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b0:	f7fe fd26 	bl	8001200 <HAL_GetTick>
 80027b4:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027b6:	e008      	b.n	80027ca <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027b8:	f7fe fd22 	bl	8001200 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b64      	cmp	r3, #100	; 0x64
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e2f9      	b.n	8002dbe <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027ca:	4b81      	ldr	r3, [pc, #516]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d0f0      	beq.n	80027b8 <HAL_RCC_OscConfig+0x2ac>
 80027d6:	e014      	b.n	8002802 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d8:	f7fe fd12 	bl	8001200 <HAL_GetTick>
 80027dc:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027de:	e008      	b.n	80027f2 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027e0:	f7fe fd0e 	bl	8001200 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b64      	cmp	r3, #100	; 0x64
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e2e5      	b.n	8002dbe <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027f2:	4b77      	ldr	r3, [pc, #476]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d1f0      	bne.n	80027e0 <HAL_RCC_OscConfig+0x2d4>
 80027fe:	e000      	b.n	8002802 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002800:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d060      	beq.n	80028d0 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800280e:	6a3b      	ldr	r3, [r7, #32]
 8002810:	2b04      	cmp	r3, #4
 8002812:	d005      	beq.n	8002820 <HAL_RCC_OscConfig+0x314>
 8002814:	6a3b      	ldr	r3, [r7, #32]
 8002816:	2b0c      	cmp	r3, #12
 8002818:	d119      	bne.n	800284e <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	2b02      	cmp	r3, #2
 800281e:	d116      	bne.n	800284e <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002820:	4b6b      	ldr	r3, [pc, #428]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002828:	2b00      	cmp	r3, #0
 800282a:	d005      	beq.n	8002838 <HAL_RCC_OscConfig+0x32c>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d101      	bne.n	8002838 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e2c2      	b.n	8002dbe <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002838:	4b65      	ldr	r3, [pc, #404]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	691b      	ldr	r3, [r3, #16]
 8002844:	061b      	lsls	r3, r3, #24
 8002846:	4962      	ldr	r1, [pc, #392]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 8002848:	4313      	orrs	r3, r2
 800284a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800284c:	e040      	b.n	80028d0 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d023      	beq.n	800289e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002856:	4b5e      	ldr	r3, [pc, #376]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a5d      	ldr	r2, [pc, #372]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 800285c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002860:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002862:	f7fe fccd 	bl	8001200 <HAL_GetTick>
 8002866:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002868:	e008      	b.n	800287c <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800286a:	f7fe fcc9 	bl	8001200 <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d901      	bls.n	800287c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e2a0      	b.n	8002dbe <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800287c:	4b54      	ldr	r3, [pc, #336]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002884:	2b00      	cmp	r3, #0
 8002886:	d0f0      	beq.n	800286a <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002888:	4b51      	ldr	r3, [pc, #324]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	691b      	ldr	r3, [r3, #16]
 8002894:	061b      	lsls	r3, r3, #24
 8002896:	494e      	ldr	r1, [pc, #312]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 8002898:	4313      	orrs	r3, r2
 800289a:	604b      	str	r3, [r1, #4]
 800289c:	e018      	b.n	80028d0 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800289e:	4b4c      	ldr	r3, [pc, #304]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a4b      	ldr	r2, [pc, #300]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 80028a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028aa:	f7fe fca9 	bl	8001200 <HAL_GetTick>
 80028ae:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028b0:	e008      	b.n	80028c4 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028b2:	f7fe fca5 	bl	8001200 <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d901      	bls.n	80028c4 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e27c      	b.n	8002dbe <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028c4:	4b42      	ldr	r3, [pc, #264]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d1f0      	bne.n	80028b2 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0308 	and.w	r3, r3, #8
 80028d8:	2b00      	cmp	r3, #0
 80028da:	f000 8082 	beq.w	80029e2 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	695b      	ldr	r3, [r3, #20]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d05f      	beq.n	80029a6 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80028e6:	4b3a      	ldr	r3, [pc, #232]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 80028e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028ec:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	699a      	ldr	r2, [r3, #24]
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	f003 0310 	and.w	r3, r3, #16
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d037      	beq.n	800296c <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d006      	beq.n	8002914 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800290c:	2b00      	cmp	r3, #0
 800290e:	d101      	bne.n	8002914 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e254      	b.n	8002dbe <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	f003 0301 	and.w	r3, r3, #1
 800291a:	2b00      	cmp	r3, #0
 800291c:	d01b      	beq.n	8002956 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 800291e:	4b2c      	ldr	r3, [pc, #176]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 8002920:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002924:	4a2a      	ldr	r2, [pc, #168]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 8002926:	f023 0301 	bic.w	r3, r3, #1
 800292a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800292e:	f7fe fc67 	bl	8001200 <HAL_GetTick>
 8002932:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002934:	e008      	b.n	8002948 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002936:	f7fe fc63 	bl	8001200 <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	2b11      	cmp	r3, #17
 8002942:	d901      	bls.n	8002948 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e23a      	b.n	8002dbe <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002948:	4b21      	ldr	r3, [pc, #132]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 800294a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b00      	cmp	r3, #0
 8002954:	d1ef      	bne.n	8002936 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8002956:	4b1e      	ldr	r3, [pc, #120]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 8002958:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800295c:	f023 0210 	bic.w	r2, r3, #16
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	699b      	ldr	r3, [r3, #24]
 8002964:	491a      	ldr	r1, [pc, #104]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 8002966:	4313      	orrs	r3, r2
 8002968:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800296c:	4b18      	ldr	r3, [pc, #96]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 800296e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002972:	4a17      	ldr	r2, [pc, #92]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 8002974:	f043 0301 	orr.w	r3, r3, #1
 8002978:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800297c:	f7fe fc40 	bl	8001200 <HAL_GetTick>
 8002980:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002982:	e008      	b.n	8002996 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002984:	f7fe fc3c 	bl	8001200 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b11      	cmp	r3, #17
 8002990:	d901      	bls.n	8002996 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e213      	b.n	8002dbe <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002996:	4b0e      	ldr	r3, [pc, #56]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 8002998:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800299c:	f003 0302 	and.w	r3, r3, #2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d0ef      	beq.n	8002984 <HAL_RCC_OscConfig+0x478>
 80029a4:	e01d      	b.n	80029e2 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029a6:	4b0a      	ldr	r3, [pc, #40]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 80029a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029ac:	4a08      	ldr	r2, [pc, #32]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 80029ae:	f023 0301 	bic.w	r3, r3, #1
 80029b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b6:	f7fe fc23 	bl	8001200 <HAL_GetTick>
 80029ba:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029bc:	e00a      	b.n	80029d4 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029be:	f7fe fc1f 	bl	8001200 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	2b11      	cmp	r3, #17
 80029ca:	d903      	bls.n	80029d4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e1f6      	b.n	8002dbe <HAL_RCC_OscConfig+0x8b2>
 80029d0:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029d4:	4ba9      	ldr	r3, [pc, #676]	; (8002c7c <HAL_RCC_OscConfig+0x770>)
 80029d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d1ed      	bne.n	80029be <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0304 	and.w	r3, r3, #4
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	f000 80bd 	beq.w	8002b6a <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029f0:	2300      	movs	r3, #0
 80029f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80029f6:	4ba1      	ldr	r3, [pc, #644]	; (8002c7c <HAL_RCC_OscConfig+0x770>)
 80029f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d10e      	bne.n	8002a20 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a02:	4b9e      	ldr	r3, [pc, #632]	; (8002c7c <HAL_RCC_OscConfig+0x770>)
 8002a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a06:	4a9d      	ldr	r2, [pc, #628]	; (8002c7c <HAL_RCC_OscConfig+0x770>)
 8002a08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a0c:	6593      	str	r3, [r2, #88]	; 0x58
 8002a0e:	4b9b      	ldr	r3, [pc, #620]	; (8002c7c <HAL_RCC_OscConfig+0x770>)
 8002a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a16:	60fb      	str	r3, [r7, #12]
 8002a18:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a20:	4b97      	ldr	r3, [pc, #604]	; (8002c80 <HAL_RCC_OscConfig+0x774>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d118      	bne.n	8002a5e <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a2c:	4b94      	ldr	r3, [pc, #592]	; (8002c80 <HAL_RCC_OscConfig+0x774>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a93      	ldr	r2, [pc, #588]	; (8002c80 <HAL_RCC_OscConfig+0x774>)
 8002a32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a36:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a38:	f7fe fbe2 	bl	8001200 <HAL_GetTick>
 8002a3c:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a3e:	e008      	b.n	8002a52 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a40:	f7fe fbde 	bl	8001200 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e1b5      	b.n	8002dbe <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a52:	4b8b      	ldr	r3, [pc, #556]	; (8002c80 <HAL_RCC_OscConfig+0x774>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d0f0      	beq.n	8002a40 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d02c      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8002a6a:	4b84      	ldr	r3, [pc, #528]	; (8002c7c <HAL_RCC_OscConfig+0x770>)
 8002a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a70:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a7c:	497f      	ldr	r1, [pc, #508]	; (8002c7c <HAL_RCC_OscConfig+0x770>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f003 0304 	and.w	r3, r3, #4
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d010      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002a90:	4b7a      	ldr	r3, [pc, #488]	; (8002c7c <HAL_RCC_OscConfig+0x770>)
 8002a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a96:	4a79      	ldr	r2, [pc, #484]	; (8002c7c <HAL_RCC_OscConfig+0x770>)
 8002a98:	f043 0304 	orr.w	r3, r3, #4
 8002a9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002aa0:	4b76      	ldr	r3, [pc, #472]	; (8002c7c <HAL_RCC_OscConfig+0x770>)
 8002aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aa6:	4a75      	ldr	r2, [pc, #468]	; (8002c7c <HAL_RCC_OscConfig+0x770>)
 8002aa8:	f043 0301 	orr.w	r3, r3, #1
 8002aac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ab0:	e018      	b.n	8002ae4 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002ab2:	4b72      	ldr	r3, [pc, #456]	; (8002c7c <HAL_RCC_OscConfig+0x770>)
 8002ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab8:	4a70      	ldr	r2, [pc, #448]	; (8002c7c <HAL_RCC_OscConfig+0x770>)
 8002aba:	f043 0301 	orr.w	r3, r3, #1
 8002abe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ac2:	e00f      	b.n	8002ae4 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002ac4:	4b6d      	ldr	r3, [pc, #436]	; (8002c7c <HAL_RCC_OscConfig+0x770>)
 8002ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aca:	4a6c      	ldr	r2, [pc, #432]	; (8002c7c <HAL_RCC_OscConfig+0x770>)
 8002acc:	f023 0301 	bic.w	r3, r3, #1
 8002ad0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002ad4:	4b69      	ldr	r3, [pc, #420]	; (8002c7c <HAL_RCC_OscConfig+0x770>)
 8002ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ada:	4a68      	ldr	r2, [pc, #416]	; (8002c7c <HAL_RCC_OscConfig+0x770>)
 8002adc:	f023 0304 	bic.w	r3, r3, #4
 8002ae0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d016      	beq.n	8002b1a <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aec:	f7fe fb88 	bl	8001200 <HAL_GetTick>
 8002af0:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002af2:	e00a      	b.n	8002b0a <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002af4:	f7fe fb84 	bl	8001200 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e159      	b.n	8002dbe <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b0a:	4b5c      	ldr	r3, [pc, #368]	; (8002c7c <HAL_RCC_OscConfig+0x770>)
 8002b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b10:	f003 0302 	and.w	r3, r3, #2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d0ed      	beq.n	8002af4 <HAL_RCC_OscConfig+0x5e8>
 8002b18:	e01d      	b.n	8002b56 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b1a:	f7fe fb71 	bl	8001200 <HAL_GetTick>
 8002b1e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b20:	e00a      	b.n	8002b38 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b22:	f7fe fb6d 	bl	8001200 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d901      	bls.n	8002b38 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	e142      	b.n	8002dbe <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b38:	4b50      	ldr	r3, [pc, #320]	; (8002c7c <HAL_RCC_OscConfig+0x770>)
 8002b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d1ed      	bne.n	8002b22 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8002b46:	4b4d      	ldr	r3, [pc, #308]	; (8002c7c <HAL_RCC_OscConfig+0x770>)
 8002b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b4c:	4a4b      	ldr	r2, [pc, #300]	; (8002c7c <HAL_RCC_OscConfig+0x770>)
 8002b4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d105      	bne.n	8002b6a <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b5e:	4b47      	ldr	r3, [pc, #284]	; (8002c7c <HAL_RCC_OscConfig+0x770>)
 8002b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b62:	4a46      	ldr	r2, [pc, #280]	; (8002c7c <HAL_RCC_OscConfig+0x770>)
 8002b64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b68:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0320 	and.w	r3, r3, #32
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d03c      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d01c      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002b7e:	4b3f      	ldr	r3, [pc, #252]	; (8002c7c <HAL_RCC_OscConfig+0x770>)
 8002b80:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b84:	4a3d      	ldr	r2, [pc, #244]	; (8002c7c <HAL_RCC_OscConfig+0x770>)
 8002b86:	f043 0301 	orr.w	r3, r3, #1
 8002b8a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b8e:	f7fe fb37 	bl	8001200 <HAL_GetTick>
 8002b92:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002b94:	e008      	b.n	8002ba8 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b96:	f7fe fb33 	bl	8001200 <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d901      	bls.n	8002ba8 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e10a      	b.n	8002dbe <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002ba8:	4b34      	ldr	r3, [pc, #208]	; (8002c7c <HAL_RCC_OscConfig+0x770>)
 8002baa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d0ef      	beq.n	8002b96 <HAL_RCC_OscConfig+0x68a>
 8002bb6:	e01b      	b.n	8002bf0 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002bb8:	4b30      	ldr	r3, [pc, #192]	; (8002c7c <HAL_RCC_OscConfig+0x770>)
 8002bba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002bbe:	4a2f      	ldr	r2, [pc, #188]	; (8002c7c <HAL_RCC_OscConfig+0x770>)
 8002bc0:	f023 0301 	bic.w	r3, r3, #1
 8002bc4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc8:	f7fe fb1a 	bl	8001200 <HAL_GetTick>
 8002bcc:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002bce:	e008      	b.n	8002be2 <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002bd0:	f7fe fb16 	bl	8001200 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e0ed      	b.n	8002dbe <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002be2:	4b26      	ldr	r3, [pc, #152]	; (8002c7c <HAL_RCC_OscConfig+0x770>)
 8002be4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002be8:	f003 0302 	and.w	r3, r3, #2
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d1ef      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	f000 80e1 	beq.w	8002dbc <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	f040 80b5 	bne.w	8002d6e <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002c04:	4b1d      	ldr	r3, [pc, #116]	; (8002c7c <HAL_RCC_OscConfig+0x770>)
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	f003 0203 	and.w	r2, r3, #3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d124      	bne.n	8002c62 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c22:	3b01      	subs	r3, #1
 8002c24:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d11b      	bne.n	8002c62 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c34:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d113      	bne.n	8002c62 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c44:	085b      	lsrs	r3, r3, #1
 8002c46:	3b01      	subs	r3, #1
 8002c48:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d109      	bne.n	8002c62 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c58:	085b      	lsrs	r3, r3, #1
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d05f      	beq.n	8002d22 <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c62:	6a3b      	ldr	r3, [r7, #32]
 8002c64:	2b0c      	cmp	r3, #12
 8002c66:	d05a      	beq.n	8002d1e <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002c68:	4b04      	ldr	r3, [pc, #16]	; (8002c7c <HAL_RCC_OscConfig+0x770>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a03      	ldr	r2, [pc, #12]	; (8002c7c <HAL_RCC_OscConfig+0x770>)
 8002c6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c72:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c74:	f7fe fac4 	bl	8001200 <HAL_GetTick>
 8002c78:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c7a:	e00c      	b.n	8002c96 <HAL_RCC_OscConfig+0x78a>
 8002c7c:	40021000 	.word	0x40021000
 8002c80:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c84:	f7fe fabc 	bl	8001200 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e093      	b.n	8002dbe <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c96:	4b4c      	ldr	r3, [pc, #304]	; (8002dc8 <HAL_RCC_OscConfig+0x8bc>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1f0      	bne.n	8002c84 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ca2:	4b49      	ldr	r3, [pc, #292]	; (8002dc8 <HAL_RCC_OscConfig+0x8bc>)
 8002ca4:	68da      	ldr	r2, [r3, #12]
 8002ca6:	4b49      	ldr	r3, [pc, #292]	; (8002dcc <HAL_RCC_OscConfig+0x8c0>)
 8002ca8:	4013      	ands	r3, r2
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002cb2:	3a01      	subs	r2, #1
 8002cb4:	0112      	lsls	r2, r2, #4
 8002cb6:	4311      	orrs	r1, r2
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002cbc:	0212      	lsls	r2, r2, #8
 8002cbe:	4311      	orrs	r1, r2
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002cc4:	0852      	lsrs	r2, r2, #1
 8002cc6:	3a01      	subs	r2, #1
 8002cc8:	0552      	lsls	r2, r2, #21
 8002cca:	4311      	orrs	r1, r2
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002cd0:	0852      	lsrs	r2, r2, #1
 8002cd2:	3a01      	subs	r2, #1
 8002cd4:	0652      	lsls	r2, r2, #25
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	493b      	ldr	r1, [pc, #236]	; (8002dc8 <HAL_RCC_OscConfig+0x8bc>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002cde:	4b3a      	ldr	r3, [pc, #232]	; (8002dc8 <HAL_RCC_OscConfig+0x8bc>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a39      	ldr	r2, [pc, #228]	; (8002dc8 <HAL_RCC_OscConfig+0x8bc>)
 8002ce4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ce8:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002cea:	4b37      	ldr	r3, [pc, #220]	; (8002dc8 <HAL_RCC_OscConfig+0x8bc>)
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	4a36      	ldr	r2, [pc, #216]	; (8002dc8 <HAL_RCC_OscConfig+0x8bc>)
 8002cf0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cf4:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002cf6:	f7fe fa83 	bl	8001200 <HAL_GetTick>
 8002cfa:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cfc:	e008      	b.n	8002d10 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cfe:	f7fe fa7f 	bl	8001200 <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d901      	bls.n	8002d10 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e056      	b.n	8002dbe <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d10:	4b2d      	ldr	r3, [pc, #180]	; (8002dc8 <HAL_RCC_OscConfig+0x8bc>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d0f0      	beq.n	8002cfe <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d1c:	e04e      	b.n	8002dbc <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e04d      	b.n	8002dbe <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d22:	4b29      	ldr	r3, [pc, #164]	; (8002dc8 <HAL_RCC_OscConfig+0x8bc>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d146      	bne.n	8002dbc <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002d2e:	4b26      	ldr	r3, [pc, #152]	; (8002dc8 <HAL_RCC_OscConfig+0x8bc>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a25      	ldr	r2, [pc, #148]	; (8002dc8 <HAL_RCC_OscConfig+0x8bc>)
 8002d34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d38:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d3a:	4b23      	ldr	r3, [pc, #140]	; (8002dc8 <HAL_RCC_OscConfig+0x8bc>)
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	4a22      	ldr	r2, [pc, #136]	; (8002dc8 <HAL_RCC_OscConfig+0x8bc>)
 8002d40:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d44:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d46:	f7fe fa5b 	bl	8001200 <HAL_GetTick>
 8002d4a:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d4c:	e008      	b.n	8002d60 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d4e:	f7fe fa57 	bl	8001200 <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d901      	bls.n	8002d60 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e02e      	b.n	8002dbe <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d60:	4b19      	ldr	r3, [pc, #100]	; (8002dc8 <HAL_RCC_OscConfig+0x8bc>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d0f0      	beq.n	8002d4e <HAL_RCC_OscConfig+0x842>
 8002d6c:	e026      	b.n	8002dbc <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d6e:	6a3b      	ldr	r3, [r7, #32]
 8002d70:	2b0c      	cmp	r3, #12
 8002d72:	d021      	beq.n	8002db8 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d74:	4b14      	ldr	r3, [pc, #80]	; (8002dc8 <HAL_RCC_OscConfig+0x8bc>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a13      	ldr	r2, [pc, #76]	; (8002dc8 <HAL_RCC_OscConfig+0x8bc>)
 8002d7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d80:	f7fe fa3e 	bl	8001200 <HAL_GetTick>
 8002d84:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d86:	e008      	b.n	8002d9a <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d88:	f7fe fa3a 	bl	8001200 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e011      	b.n	8002dbe <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d9a:	4b0b      	ldr	r3, [pc, #44]	; (8002dc8 <HAL_RCC_OscConfig+0x8bc>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d1f0      	bne.n	8002d88 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8002da6:	4b08      	ldr	r3, [pc, #32]	; (8002dc8 <HAL_RCC_OscConfig+0x8bc>)
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	4a07      	ldr	r2, [pc, #28]	; (8002dc8 <HAL_RCC_OscConfig+0x8bc>)
 8002dac:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002db0:	f023 0303 	bic.w	r3, r3, #3
 8002db4:	60d3      	str	r3, [r2, #12]
 8002db6:	e001      	b.n	8002dbc <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e000      	b.n	8002dbe <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3728      	adds	r7, #40	; 0x28
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	40021000 	.word	0x40021000
 8002dcc:	f99f808c 	.word	0xf99f808c

08002dd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d101      	bne.n	8002de4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e0e7      	b.n	8002fb4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002de4:	4b75      	ldr	r3, [pc, #468]	; (8002fbc <HAL_RCC_ClockConfig+0x1ec>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0307 	and.w	r3, r3, #7
 8002dec:	683a      	ldr	r2, [r7, #0]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d910      	bls.n	8002e14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002df2:	4b72      	ldr	r3, [pc, #456]	; (8002fbc <HAL_RCC_ClockConfig+0x1ec>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f023 0207 	bic.w	r2, r3, #7
 8002dfa:	4970      	ldr	r1, [pc, #448]	; (8002fbc <HAL_RCC_ClockConfig+0x1ec>)
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e02:	4b6e      	ldr	r3, [pc, #440]	; (8002fbc <HAL_RCC_ClockConfig+0x1ec>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0307 	and.w	r3, r3, #7
 8002e0a:	683a      	ldr	r2, [r7, #0]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d001      	beq.n	8002e14 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e0cf      	b.n	8002fb4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0302 	and.w	r3, r3, #2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d010      	beq.n	8002e42 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689a      	ldr	r2, [r3, #8]
 8002e24:	4b66      	ldr	r3, [pc, #408]	; (8002fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d908      	bls.n	8002e42 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e30:	4b63      	ldr	r3, [pc, #396]	; (8002fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	4960      	ldr	r1, [pc, #384]	; (8002fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0301 	and.w	r3, r3, #1
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d04c      	beq.n	8002ee8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	2b03      	cmp	r3, #3
 8002e54:	d107      	bne.n	8002e66 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e56:	4b5a      	ldr	r3, [pc, #360]	; (8002fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d121      	bne.n	8002ea6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e0a6      	b.n	8002fb4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d107      	bne.n	8002e7e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e6e:	4b54      	ldr	r3, [pc, #336]	; (8002fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d115      	bne.n	8002ea6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e09a      	b.n	8002fb4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d107      	bne.n	8002e96 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e86:	4b4e      	ldr	r3, [pc, #312]	; (8002fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d109      	bne.n	8002ea6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e08e      	b.n	8002fb4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e96:	4b4a      	ldr	r3, [pc, #296]	; (8002fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d101      	bne.n	8002ea6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e086      	b.n	8002fb4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ea6:	4b46      	ldr	r3, [pc, #280]	; (8002fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f023 0203 	bic.w	r2, r3, #3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	4943      	ldr	r1, [pc, #268]	; (8002fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002eb8:	f7fe f9a2 	bl	8001200 <HAL_GetTick>
 8002ebc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ebe:	e00a      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ec0:	f7fe f99e 	bl	8001200 <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e06e      	b.n	8002fb4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ed6:	4b3a      	ldr	r3, [pc, #232]	; (8002fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f003 020c 	and.w	r2, r3, #12
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d1eb      	bne.n	8002ec0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0302 	and.w	r3, r3, #2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d010      	beq.n	8002f16 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	689a      	ldr	r2, [r3, #8]
 8002ef8:	4b31      	ldr	r3, [pc, #196]	; (8002fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d208      	bcs.n	8002f16 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f04:	4b2e      	ldr	r3, [pc, #184]	; (8002fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	492b      	ldr	r1, [pc, #172]	; (8002fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f16:	4b29      	ldr	r3, [pc, #164]	; (8002fbc <HAL_RCC_ClockConfig+0x1ec>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0307 	and.w	r3, r3, #7
 8002f1e:	683a      	ldr	r2, [r7, #0]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d210      	bcs.n	8002f46 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f24:	4b25      	ldr	r3, [pc, #148]	; (8002fbc <HAL_RCC_ClockConfig+0x1ec>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f023 0207 	bic.w	r2, r3, #7
 8002f2c:	4923      	ldr	r1, [pc, #140]	; (8002fbc <HAL_RCC_ClockConfig+0x1ec>)
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f34:	4b21      	ldr	r3, [pc, #132]	; (8002fbc <HAL_RCC_ClockConfig+0x1ec>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0307 	and.w	r3, r3, #7
 8002f3c:	683a      	ldr	r2, [r7, #0]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d001      	beq.n	8002f46 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e036      	b.n	8002fb4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0304 	and.w	r3, r3, #4
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d008      	beq.n	8002f64 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f52:	4b1b      	ldr	r3, [pc, #108]	; (8002fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	4918      	ldr	r1, [pc, #96]	; (8002fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8002f60:	4313      	orrs	r3, r2
 8002f62:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0308 	and.w	r3, r3, #8
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d009      	beq.n	8002f84 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f70:	4b13      	ldr	r3, [pc, #76]	; (8002fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	691b      	ldr	r3, [r3, #16]
 8002f7c:	00db      	lsls	r3, r3, #3
 8002f7e:	4910      	ldr	r1, [pc, #64]	; (8002fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8002f80:	4313      	orrs	r3, r2
 8002f82:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f84:	f000 f824 	bl	8002fd0 <HAL_RCC_GetSysClockFreq>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	4b0d      	ldr	r3, [pc, #52]	; (8002fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	091b      	lsrs	r3, r3, #4
 8002f90:	f003 030f 	and.w	r3, r3, #15
 8002f94:	490b      	ldr	r1, [pc, #44]	; (8002fc4 <HAL_RCC_ClockConfig+0x1f4>)
 8002f96:	5ccb      	ldrb	r3, [r1, r3]
 8002f98:	f003 031f 	and.w	r3, r3, #31
 8002f9c:	fa22 f303 	lsr.w	r3, r2, r3
 8002fa0:	4a09      	ldr	r2, [pc, #36]	; (8002fc8 <HAL_RCC_ClockConfig+0x1f8>)
 8002fa2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002fa4:	4b09      	ldr	r3, [pc, #36]	; (8002fcc <HAL_RCC_ClockConfig+0x1fc>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7fd ff6f 	bl	8000e8c <HAL_InitTick>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	72fb      	strb	r3, [r7, #11]

  return status;
 8002fb2:	7afb      	ldrb	r3, [r7, #11]
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3710      	adds	r7, #16
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	40022000 	.word	0x40022000
 8002fc0:	40021000 	.word	0x40021000
 8002fc4:	08008f58 	.word	0x08008f58
 8002fc8:	20000000 	.word	0x20000000
 8002fcc:	20000004 	.word	0x20000004

08002fd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b089      	sub	sp, #36	; 0x24
 8002fd4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	61fb      	str	r3, [r7, #28]
 8002fda:	2300      	movs	r3, #0
 8002fdc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fde:	4b3e      	ldr	r3, [pc, #248]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f003 030c 	and.w	r3, r3, #12
 8002fe6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fe8:	4b3b      	ldr	r3, [pc, #236]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	f003 0303 	and.w	r3, r3, #3
 8002ff0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d005      	beq.n	8003004 <HAL_RCC_GetSysClockFreq+0x34>
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	2b0c      	cmp	r3, #12
 8002ffc:	d121      	bne.n	8003042 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2b01      	cmp	r3, #1
 8003002:	d11e      	bne.n	8003042 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003004:	4b34      	ldr	r3, [pc, #208]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0308 	and.w	r3, r3, #8
 800300c:	2b00      	cmp	r3, #0
 800300e:	d107      	bne.n	8003020 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003010:	4b31      	ldr	r3, [pc, #196]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003012:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003016:	0a1b      	lsrs	r3, r3, #8
 8003018:	f003 030f 	and.w	r3, r3, #15
 800301c:	61fb      	str	r3, [r7, #28]
 800301e:	e005      	b.n	800302c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003020:	4b2d      	ldr	r3, [pc, #180]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	091b      	lsrs	r3, r3, #4
 8003026:	f003 030f 	and.w	r3, r3, #15
 800302a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800302c:	4a2b      	ldr	r2, [pc, #172]	; (80030dc <HAL_RCC_GetSysClockFreq+0x10c>)
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003034:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d10d      	bne.n	8003058 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003040:	e00a      	b.n	8003058 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	2b04      	cmp	r3, #4
 8003046:	d102      	bne.n	800304e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003048:	4b25      	ldr	r3, [pc, #148]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x110>)
 800304a:	61bb      	str	r3, [r7, #24]
 800304c:	e004      	b.n	8003058 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	2b08      	cmp	r3, #8
 8003052:	d101      	bne.n	8003058 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003054:	4b23      	ldr	r3, [pc, #140]	; (80030e4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003056:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	2b0c      	cmp	r3, #12
 800305c:	d134      	bne.n	80030c8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800305e:	4b1e      	ldr	r3, [pc, #120]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	f003 0303 	and.w	r3, r3, #3
 8003066:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	2b02      	cmp	r3, #2
 800306c:	d003      	beq.n	8003076 <HAL_RCC_GetSysClockFreq+0xa6>
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	2b03      	cmp	r3, #3
 8003072:	d003      	beq.n	800307c <HAL_RCC_GetSysClockFreq+0xac>
 8003074:	e005      	b.n	8003082 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003076:	4b1a      	ldr	r3, [pc, #104]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003078:	617b      	str	r3, [r7, #20]
      break;
 800307a:	e005      	b.n	8003088 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800307c:	4b19      	ldr	r3, [pc, #100]	; (80030e4 <HAL_RCC_GetSysClockFreq+0x114>)
 800307e:	617b      	str	r3, [r7, #20]
      break;
 8003080:	e002      	b.n	8003088 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	617b      	str	r3, [r7, #20]
      break;
 8003086:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003088:	4b13      	ldr	r3, [pc, #76]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x108>)
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	091b      	lsrs	r3, r3, #4
 800308e:	f003 0307 	and.w	r3, r3, #7
 8003092:	3301      	adds	r3, #1
 8003094:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003096:	4b10      	ldr	r3, [pc, #64]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	0a1b      	lsrs	r3, r3, #8
 800309c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030a0:	697a      	ldr	r2, [r7, #20]
 80030a2:	fb03 f202 	mul.w	r2, r3, r2
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ac:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80030ae:	4b0a      	ldr	r3, [pc, #40]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	0e5b      	lsrs	r3, r3, #25
 80030b4:	f003 0303 	and.w	r3, r3, #3
 80030b8:	3301      	adds	r3, #1
 80030ba:	005b      	lsls	r3, r3, #1
 80030bc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80030be:	697a      	ldr	r2, [r7, #20]
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80030c6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80030c8:	69bb      	ldr	r3, [r7, #24]
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3724      	adds	r7, #36	; 0x24
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	40021000 	.word	0x40021000
 80030dc:	08008f70 	.word	0x08008f70
 80030e0:	00f42400 	.word	0x00f42400
 80030e4:	007a1200 	.word	0x007a1200

080030e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030e8:	b480      	push	{r7}
 80030ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030ec:	4b03      	ldr	r3, [pc, #12]	; (80030fc <HAL_RCC_GetHCLKFreq+0x14>)
 80030ee:	681b      	ldr	r3, [r3, #0]
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	20000000 	.word	0x20000000

08003100 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003104:	f7ff fff0 	bl	80030e8 <HAL_RCC_GetHCLKFreq>
 8003108:	4602      	mov	r2, r0
 800310a:	4b06      	ldr	r3, [pc, #24]	; (8003124 <HAL_RCC_GetPCLK1Freq+0x24>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	0a1b      	lsrs	r3, r3, #8
 8003110:	f003 0307 	and.w	r3, r3, #7
 8003114:	4904      	ldr	r1, [pc, #16]	; (8003128 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003116:	5ccb      	ldrb	r3, [r1, r3]
 8003118:	f003 031f 	and.w	r3, r3, #31
 800311c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003120:	4618      	mov	r0, r3
 8003122:	bd80      	pop	{r7, pc}
 8003124:	40021000 	.word	0x40021000
 8003128:	08008f68 	.word	0x08008f68

0800312c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003130:	f7ff ffda 	bl	80030e8 <HAL_RCC_GetHCLKFreq>
 8003134:	4602      	mov	r2, r0
 8003136:	4b06      	ldr	r3, [pc, #24]	; (8003150 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	0adb      	lsrs	r3, r3, #11
 800313c:	f003 0307 	and.w	r3, r3, #7
 8003140:	4904      	ldr	r1, [pc, #16]	; (8003154 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003142:	5ccb      	ldrb	r3, [r1, r3]
 8003144:	f003 031f 	and.w	r3, r3, #31
 8003148:	fa22 f303 	lsr.w	r3, r2, r3
}
 800314c:	4618      	mov	r0, r3
 800314e:	bd80      	pop	{r7, pc}
 8003150:	40021000 	.word	0x40021000
 8003154:	08008f68 	.word	0x08008f68

08003158 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	220f      	movs	r2, #15
 8003166:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003168:	4b12      	ldr	r3, [pc, #72]	; (80031b4 <HAL_RCC_GetClockConfig+0x5c>)
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f003 0203 	and.w	r2, r3, #3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003174:	4b0f      	ldr	r3, [pc, #60]	; (80031b4 <HAL_RCC_GetClockConfig+0x5c>)
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003180:	4b0c      	ldr	r3, [pc, #48]	; (80031b4 <HAL_RCC_GetClockConfig+0x5c>)
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800318c:	4b09      	ldr	r3, [pc, #36]	; (80031b4 <HAL_RCC_GetClockConfig+0x5c>)
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	08db      	lsrs	r3, r3, #3
 8003192:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800319a:	4b07      	ldr	r3, [pc, #28]	; (80031b8 <HAL_RCC_GetClockConfig+0x60>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0207 	and.w	r2, r3, #7
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	601a      	str	r2, [r3, #0]
}
 80031a6:	bf00      	nop
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	40021000 	.word	0x40021000
 80031b8:	40022000 	.word	0x40022000

080031bc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b086      	sub	sp, #24
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80031c4:	2300      	movs	r3, #0
 80031c6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80031c8:	4b2a      	ldr	r3, [pc, #168]	; (8003274 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d003      	beq.n	80031dc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80031d4:	f7ff f936 	bl	8002444 <HAL_PWREx_GetVoltageRange>
 80031d8:	6178      	str	r0, [r7, #20]
 80031da:	e014      	b.n	8003206 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80031dc:	4b25      	ldr	r3, [pc, #148]	; (8003274 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031e0:	4a24      	ldr	r2, [pc, #144]	; (8003274 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031e6:	6593      	str	r3, [r2, #88]	; 0x58
 80031e8:	4b22      	ldr	r3, [pc, #136]	; (8003274 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031f0:	60fb      	str	r3, [r7, #12]
 80031f2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80031f4:	f7ff f926 	bl	8002444 <HAL_PWREx_GetVoltageRange>
 80031f8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80031fa:	4b1e      	ldr	r3, [pc, #120]	; (8003274 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031fe:	4a1d      	ldr	r2, [pc, #116]	; (8003274 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003200:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003204:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800320c:	d10b      	bne.n	8003226 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2b80      	cmp	r3, #128	; 0x80
 8003212:	d919      	bls.n	8003248 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2ba0      	cmp	r3, #160	; 0xa0
 8003218:	d902      	bls.n	8003220 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800321a:	2302      	movs	r3, #2
 800321c:	613b      	str	r3, [r7, #16]
 800321e:	e013      	b.n	8003248 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003220:	2301      	movs	r3, #1
 8003222:	613b      	str	r3, [r7, #16]
 8003224:	e010      	b.n	8003248 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2b80      	cmp	r3, #128	; 0x80
 800322a:	d902      	bls.n	8003232 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800322c:	2303      	movs	r3, #3
 800322e:	613b      	str	r3, [r7, #16]
 8003230:	e00a      	b.n	8003248 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2b80      	cmp	r3, #128	; 0x80
 8003236:	d102      	bne.n	800323e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003238:	2302      	movs	r3, #2
 800323a:	613b      	str	r3, [r7, #16]
 800323c:	e004      	b.n	8003248 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2b70      	cmp	r3, #112	; 0x70
 8003242:	d101      	bne.n	8003248 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003244:	2301      	movs	r3, #1
 8003246:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003248:	4b0b      	ldr	r3, [pc, #44]	; (8003278 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f023 0207 	bic.w	r2, r3, #7
 8003250:	4909      	ldr	r1, [pc, #36]	; (8003278 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	4313      	orrs	r3, r2
 8003256:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003258:	4b07      	ldr	r3, [pc, #28]	; (8003278 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0307 	and.w	r3, r3, #7
 8003260:	693a      	ldr	r2, [r7, #16]
 8003262:	429a      	cmp	r2, r3
 8003264:	d001      	beq.n	800326a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e000      	b.n	800326c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800326a:	2300      	movs	r3, #0
}
 800326c:	4618      	mov	r0, r3
 800326e:	3718      	adds	r7, #24
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}
 8003274:	40021000 	.word	0x40021000
 8003278:	40022000 	.word	0x40022000

0800327c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b086      	sub	sp, #24
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003284:	2300      	movs	r3, #0
 8003286:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003288:	2300      	movs	r3, #0
 800328a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003294:	2b00      	cmp	r3, #0
 8003296:	f000 809e 	beq.w	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800329a:	2300      	movs	r3, #0
 800329c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800329e:	4b46      	ldr	r3, [pc, #280]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80032a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d101      	bne.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x32>
 80032aa:	2301      	movs	r3, #1
 80032ac:	e000      	b.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x34>
 80032ae:	2300      	movs	r3, #0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d00d      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032b4:	4b40      	ldr	r3, [pc, #256]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80032b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032b8:	4a3f      	ldr	r2, [pc, #252]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80032ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032be:	6593      	str	r3, [r2, #88]	; 0x58
 80032c0:	4b3d      	ldr	r3, [pc, #244]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80032c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032c8:	60bb      	str	r3, [r7, #8]
 80032ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032cc:	2301      	movs	r3, #1
 80032ce:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032d0:	4b3a      	ldr	r3, [pc, #232]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a39      	ldr	r2, [pc, #228]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80032d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80032dc:	f7fd ff90 	bl	8001200 <HAL_GetTick>
 80032e0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80032e2:	e009      	b.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032e4:	f7fd ff8c 	bl	8001200 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d902      	bls.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	74fb      	strb	r3, [r7, #19]
        break;
 80032f6:	e005      	b.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80032f8:	4b30      	ldr	r3, [pc, #192]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003300:	2b00      	cmp	r3, #0
 8003302:	d0ef      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8003304:	7cfb      	ldrb	r3, [r7, #19]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d15a      	bne.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800330a:	4b2b      	ldr	r3, [pc, #172]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800330c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003310:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003314:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d01e      	beq.n	800335a <HAL_RCCEx_PeriphCLKConfig+0xde>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003320:	697a      	ldr	r2, [r7, #20]
 8003322:	429a      	cmp	r2, r3
 8003324:	d019      	beq.n	800335a <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003326:	4b24      	ldr	r3, [pc, #144]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800332c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003330:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003332:	4b21      	ldr	r3, [pc, #132]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003334:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003338:	4a1f      	ldr	r2, [pc, #124]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800333a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800333e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003342:	4b1d      	ldr	r3, [pc, #116]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003344:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003348:	4a1b      	ldr	r2, [pc, #108]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800334a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800334e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003352:	4a19      	ldr	r2, [pc, #100]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	f003 0301 	and.w	r3, r3, #1
 8003360:	2b00      	cmp	r3, #0
 8003362:	d016      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003364:	f7fd ff4c 	bl	8001200 <HAL_GetTick>
 8003368:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800336a:	e00b      	b.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800336c:	f7fd ff48 	bl	8001200 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	f241 3288 	movw	r2, #5000	; 0x1388
 800337a:	4293      	cmp	r3, r2
 800337c:	d902      	bls.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	74fb      	strb	r3, [r7, #19]
            break;
 8003382:	e006      	b.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003384:	4b0c      	ldr	r3, [pc, #48]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b00      	cmp	r3, #0
 8003390:	d0ec      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8003392:	7cfb      	ldrb	r3, [r7, #19]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d10b      	bne.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003398:	4b07      	ldr	r3, [pc, #28]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800339a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800339e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a6:	4904      	ldr	r1, [pc, #16]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80033ae:	e009      	b.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80033b0:	7cfb      	ldrb	r3, [r7, #19]
 80033b2:	74bb      	strb	r3, [r7, #18]
 80033b4:	e006      	b.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x148>
 80033b6:	bf00      	nop
 80033b8:	40021000 	.word	0x40021000
 80033bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033c0:	7cfb      	ldrb	r3, [r7, #19]
 80033c2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033c4:	7c7b      	ldrb	r3, [r7, #17]
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d105      	bne.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033ca:	4b6e      	ldr	r3, [pc, #440]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80033cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ce:	4a6d      	ldr	r2, [pc, #436]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80033d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033d4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0301 	and.w	r3, r3, #1
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00a      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033e2:	4b68      	ldr	r3, [pc, #416]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80033e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e8:	f023 0203 	bic.w	r2, r3, #3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	4964      	ldr	r1, [pc, #400]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0302 	and.w	r3, r3, #2
 8003400:	2b00      	cmp	r3, #0
 8003402:	d00a      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003404:	4b5f      	ldr	r3, [pc, #380]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800340a:	f023 020c 	bic.w	r2, r3, #12
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	495c      	ldr	r1, [pc, #368]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003414:	4313      	orrs	r3, r2
 8003416:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0304 	and.w	r3, r3, #4
 8003422:	2b00      	cmp	r3, #0
 8003424:	d00a      	beq.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003426:	4b57      	ldr	r3, [pc, #348]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800342c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	4953      	ldr	r1, [pc, #332]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003436:	4313      	orrs	r3, r2
 8003438:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0320 	and.w	r3, r3, #32
 8003444:	2b00      	cmp	r3, #0
 8003446:	d00a      	beq.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003448:	4b4e      	ldr	r3, [pc, #312]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800344a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800344e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	494b      	ldr	r1, [pc, #300]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003458:	4313      	orrs	r3, r2
 800345a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003466:	2b00      	cmp	r3, #0
 8003468:	d00a      	beq.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800346a:	4b46      	ldr	r3, [pc, #280]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800346c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003470:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a1b      	ldr	r3, [r3, #32]
 8003478:	4942      	ldr	r1, [pc, #264]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800347a:	4313      	orrs	r3, r2
 800347c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003488:	2b00      	cmp	r3, #0
 800348a:	d00a      	beq.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800348c:	4b3d      	ldr	r3, [pc, #244]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800348e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003492:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349a:	493a      	ldr	r1, [pc, #232]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800349c:	4313      	orrs	r3, r2
 800349e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00a      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034ae:	4b35      	ldr	r3, [pc, #212]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80034b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	695b      	ldr	r3, [r3, #20]
 80034bc:	4931      	ldr	r1, [pc, #196]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d00a      	beq.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80034d0:	4b2c      	ldr	r3, [pc, #176]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80034d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	699b      	ldr	r3, [r3, #24]
 80034de:	4929      	ldr	r1, [pc, #164]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00a      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80034f2:	4b24      	ldr	r3, [pc, #144]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80034f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	69db      	ldr	r3, [r3, #28]
 8003500:	4920      	ldr	r1, [pc, #128]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003502:	4313      	orrs	r3, r2
 8003504:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d015      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003514:	4b1b      	ldr	r3, [pc, #108]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800351a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003522:	4918      	ldr	r1, [pc, #96]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003524:	4313      	orrs	r3, r2
 8003526:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800352e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003532:	d105      	bne.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003534:	4b13      	ldr	r3, [pc, #76]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	4a12      	ldr	r2, [pc, #72]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800353a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800353e:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d015      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800354c:	4b0d      	ldr	r3, [pc, #52]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800354e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003552:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355a:	490a      	ldr	r1, [pc, #40]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800355c:	4313      	orrs	r3, r2
 800355e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003566:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800356a:	d105      	bne.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800356c:	4b05      	ldr	r3, [pc, #20]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	4a04      	ldr	r2, [pc, #16]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003572:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003576:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003578:	7cbb      	ldrb	r3, [r7, #18]
}
 800357a:	4618      	mov	r0, r3
 800357c:	3718      	adds	r7, #24
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	40021000 	.word	0x40021000

08003588 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003588:	b480      	push	{r7}
 800358a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800358c:	4b05      	ldr	r3, [pc, #20]	; (80035a4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a04      	ldr	r2, [pc, #16]	; (80035a4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003592:	f043 0304 	orr.w	r3, r3, #4
 8003596:	6013      	str	r3, [r2, #0]
}
 8003598:	bf00      	nop
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	40021000 	.word	0x40021000

080035a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d101      	bne.n	80035ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e049      	b.n	800364e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d106      	bne.n	80035d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 f841 	bl	8003656 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2202      	movs	r2, #2
 80035d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	3304      	adds	r3, #4
 80035e4:	4619      	mov	r1, r3
 80035e6:	4610      	mov	r0, r2
 80035e8:	f000 f9be 	bl	8003968 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800364c:	2300      	movs	r3, #0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3708      	adds	r7, #8
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}

08003656 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003656:	b480      	push	{r7}
 8003658:	b083      	sub	sp, #12
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800365e:	bf00      	nop
 8003660:	370c      	adds	r7, #12
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
	...

0800366c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800366c:	b480      	push	{r7}
 800366e:	b085      	sub	sp, #20
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800367a:	b2db      	uxtb	r3, r3
 800367c:	2b01      	cmp	r3, #1
 800367e:	d001      	beq.n	8003684 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e03b      	b.n	80036fc <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2202      	movs	r2, #2
 8003688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68da      	ldr	r2, [r3, #12]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f042 0201 	orr.w	r2, r2, #1
 800369a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a19      	ldr	r2, [pc, #100]	; (8003708 <HAL_TIM_Base_Start_IT+0x9c>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d009      	beq.n	80036ba <HAL_TIM_Base_Start_IT+0x4e>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036ae:	d004      	beq.n	80036ba <HAL_TIM_Base_Start_IT+0x4e>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a15      	ldr	r2, [pc, #84]	; (800370c <HAL_TIM_Base_Start_IT+0xa0>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d115      	bne.n	80036e6 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	689a      	ldr	r2, [r3, #8]
 80036c0:	4b13      	ldr	r3, [pc, #76]	; (8003710 <HAL_TIM_Base_Start_IT+0xa4>)
 80036c2:	4013      	ands	r3, r2
 80036c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2b06      	cmp	r3, #6
 80036ca:	d015      	beq.n	80036f8 <HAL_TIM_Base_Start_IT+0x8c>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036d2:	d011      	beq.n	80036f8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f042 0201 	orr.w	r2, r2, #1
 80036e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036e4:	e008      	b.n	80036f8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f042 0201 	orr.w	r2, r2, #1
 80036f4:	601a      	str	r2, [r3, #0]
 80036f6:	e000      	b.n	80036fa <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036f8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3714      	adds	r7, #20
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr
 8003708:	40012c00 	.word	0x40012c00
 800370c:	40014000 	.word	0x40014000
 8003710:	00010007 	.word	0x00010007

08003714 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	2b00      	cmp	r3, #0
 8003734:	d020      	beq.n	8003778 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f003 0302 	and.w	r3, r3, #2
 800373c:	2b00      	cmp	r3, #0
 800373e:	d01b      	beq.n	8003778 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f06f 0202 	mvn.w	r2, #2
 8003748:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2201      	movs	r2, #1
 800374e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	f003 0303 	and.w	r3, r3, #3
 800375a:	2b00      	cmp	r3, #0
 800375c:	d003      	beq.n	8003766 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 f8e4 	bl	800392c <HAL_TIM_IC_CaptureCallback>
 8003764:	e005      	b.n	8003772 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 f8d6 	bl	8003918 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f000 f8e7 	bl	8003940 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	f003 0304 	and.w	r3, r3, #4
 800377e:	2b00      	cmp	r3, #0
 8003780:	d020      	beq.n	80037c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f003 0304 	and.w	r3, r3, #4
 8003788:	2b00      	cmp	r3, #0
 800378a:	d01b      	beq.n	80037c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f06f 0204 	mvn.w	r2, #4
 8003794:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2202      	movs	r2, #2
 800379a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d003      	beq.n	80037b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 f8be 	bl	800392c <HAL_TIM_IC_CaptureCallback>
 80037b0:	e005      	b.n	80037be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 f8b0 	bl	8003918 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f000 f8c1 	bl	8003940 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	f003 0308 	and.w	r3, r3, #8
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d020      	beq.n	8003810 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f003 0308 	and.w	r3, r3, #8
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d01b      	beq.n	8003810 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f06f 0208 	mvn.w	r2, #8
 80037e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2204      	movs	r2, #4
 80037e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	69db      	ldr	r3, [r3, #28]
 80037ee:	f003 0303 	and.w	r3, r3, #3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d003      	beq.n	80037fe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 f898 	bl	800392c <HAL_TIM_IC_CaptureCallback>
 80037fc:	e005      	b.n	800380a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 f88a 	bl	8003918 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f000 f89b 	bl	8003940 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	f003 0310 	and.w	r3, r3, #16
 8003816:	2b00      	cmp	r3, #0
 8003818:	d020      	beq.n	800385c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f003 0310 	and.w	r3, r3, #16
 8003820:	2b00      	cmp	r3, #0
 8003822:	d01b      	beq.n	800385c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f06f 0210 	mvn.w	r2, #16
 800382c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2208      	movs	r2, #8
 8003832:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	69db      	ldr	r3, [r3, #28]
 800383a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800383e:	2b00      	cmp	r3, #0
 8003840:	d003      	beq.n	800384a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 f872 	bl	800392c <HAL_TIM_IC_CaptureCallback>
 8003848:	e005      	b.n	8003856 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 f864 	bl	8003918 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f000 f875 	bl	8003940 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00c      	beq.n	8003880 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f003 0301 	and.w	r3, r3, #1
 800386c:	2b00      	cmp	r3, #0
 800386e:	d007      	beq.n	8003880 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f06f 0201 	mvn.w	r2, #1
 8003878:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f7fd f9c6 	bl	8000c0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00c      	beq.n	80038a4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003890:	2b00      	cmp	r3, #0
 8003892:	d007      	beq.n	80038a4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800389c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 f8d0 	bl	8003a44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00c      	beq.n	80038c8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d007      	beq.n	80038c8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80038c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 f8c8 	bl	8003a58 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00c      	beq.n	80038ec <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d007      	beq.n	80038ec <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80038e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 f834 	bl	8003954 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	f003 0320 	and.w	r3, r3, #32
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00c      	beq.n	8003910 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	f003 0320 	and.w	r3, r3, #32
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d007      	beq.n	8003910 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f06f 0220 	mvn.w	r2, #32
 8003908:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 f890 	bl	8003a30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003910:	bf00      	nop
 8003912:	3710      	adds	r7, #16
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003920:	bf00      	nop
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003934:	bf00      	nop
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003948:	bf00      	nop
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800395c:	bf00      	nop
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003968:	b480      	push	{r7}
 800396a:	b085      	sub	sp, #20
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a2a      	ldr	r2, [pc, #168]	; (8003a24 <TIM_Base_SetConfig+0xbc>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d003      	beq.n	8003988 <TIM_Base_SetConfig+0x20>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003986:	d108      	bne.n	800399a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800398e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	68fa      	ldr	r2, [r7, #12]
 8003996:	4313      	orrs	r3, r2
 8003998:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a21      	ldr	r2, [pc, #132]	; (8003a24 <TIM_Base_SetConfig+0xbc>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d00b      	beq.n	80039ba <TIM_Base_SetConfig+0x52>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039a8:	d007      	beq.n	80039ba <TIM_Base_SetConfig+0x52>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a1e      	ldr	r2, [pc, #120]	; (8003a28 <TIM_Base_SetConfig+0xc0>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d003      	beq.n	80039ba <TIM_Base_SetConfig+0x52>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a1d      	ldr	r2, [pc, #116]	; (8003a2c <TIM_Base_SetConfig+0xc4>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d108      	bne.n	80039cc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	695b      	ldr	r3, [r3, #20]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	689a      	ldr	r2, [r3, #8]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4a0c      	ldr	r2, [pc, #48]	; (8003a24 <TIM_Base_SetConfig+0xbc>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d007      	beq.n	8003a08 <TIM_Base_SetConfig+0xa0>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4a0b      	ldr	r2, [pc, #44]	; (8003a28 <TIM_Base_SetConfig+0xc0>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d003      	beq.n	8003a08 <TIM_Base_SetConfig+0xa0>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4a0a      	ldr	r2, [pc, #40]	; (8003a2c <TIM_Base_SetConfig+0xc4>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d103      	bne.n	8003a10 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	691a      	ldr	r2, [r3, #16]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	615a      	str	r2, [r3, #20]
}
 8003a16:	bf00      	nop
 8003a18:	3714      	adds	r7, #20
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr
 8003a22:	bf00      	nop
 8003a24:	40012c00 	.word	0x40012c00
 8003a28:	40014000 	.word	0x40014000
 8003a2c:	40014400 	.word	0x40014400

08003a30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a38:	bf00      	nop
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a4c:	bf00      	nop
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003a60:	bf00      	nop
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d101      	bne.n	8003a7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e040      	b.n	8003b00 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d106      	bne.n	8003a94 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f7fd f954 	bl	8000d3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2224      	movs	r2, #36	; 0x24
 8003a98:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f022 0201 	bic.w	r2, r2, #1
 8003aa8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d002      	beq.n	8003ab8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 fe62 	bl	800477c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f000 fc05 	bl	80042c8 <UART_SetConfig>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d101      	bne.n	8003ac8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e01b      	b.n	8003b00 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	685a      	ldr	r2, [r3, #4]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ad6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	689a      	ldr	r2, [r3, #8]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ae6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f042 0201 	orr.w	r2, r2, #1
 8003af6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 fee1 	bl	80048c0 <UART_CheckIdleState>
 8003afe:	4603      	mov	r3, r0
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3708      	adds	r7, #8
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b08a      	sub	sp, #40	; 0x28
 8003b0c:	af02      	add	r7, sp, #8
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	603b      	str	r3, [r7, #0]
 8003b14:	4613      	mov	r3, r2
 8003b16:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b1c:	2b20      	cmp	r3, #32
 8003b1e:	d178      	bne.n	8003c12 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d002      	beq.n	8003b2c <HAL_UART_Transmit+0x24>
 8003b26:	88fb      	ldrh	r3, [r7, #6]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d101      	bne.n	8003b30 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e071      	b.n	8003c14 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2221      	movs	r2, #33	; 0x21
 8003b3c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b3e:	f7fd fb5f 	bl	8001200 <HAL_GetTick>
 8003b42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	88fa      	ldrh	r2, [r7, #6]
 8003b48:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	88fa      	ldrh	r2, [r7, #6]
 8003b50:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b5c:	d108      	bne.n	8003b70 <HAL_UART_Transmit+0x68>
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d104      	bne.n	8003b70 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003b66:	2300      	movs	r3, #0
 8003b68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	61bb      	str	r3, [r7, #24]
 8003b6e:	e003      	b.n	8003b78 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b74:	2300      	movs	r3, #0
 8003b76:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b78:	e030      	b.n	8003bdc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	9300      	str	r3, [sp, #0]
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	2200      	movs	r2, #0
 8003b82:	2180      	movs	r1, #128	; 0x80
 8003b84:	68f8      	ldr	r0, [r7, #12]
 8003b86:	f000 ff43 	bl	8004a10 <UART_WaitOnFlagUntilTimeout>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d004      	beq.n	8003b9a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2220      	movs	r2, #32
 8003b94:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e03c      	b.n	8003c14 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d10b      	bne.n	8003bb8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	881a      	ldrh	r2, [r3, #0]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bac:	b292      	uxth	r2, r2
 8003bae:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	3302      	adds	r3, #2
 8003bb4:	61bb      	str	r3, [r7, #24]
 8003bb6:	e008      	b.n	8003bca <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	781a      	ldrb	r2, [r3, #0]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	b292      	uxth	r2, r2
 8003bc2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	3301      	adds	r3, #1
 8003bc8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	3b01      	subs	r3, #1
 8003bd4:	b29a      	uxth	r2, r3
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d1c8      	bne.n	8003b7a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	9300      	str	r3, [sp, #0]
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	2140      	movs	r1, #64	; 0x40
 8003bf2:	68f8      	ldr	r0, [r7, #12]
 8003bf4:	f000 ff0c 	bl	8004a10 <UART_WaitOnFlagUntilTimeout>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d004      	beq.n	8003c08 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2220      	movs	r2, #32
 8003c02:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	e005      	b.n	8003c14 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2220      	movs	r2, #32
 8003c0c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	e000      	b.n	8003c14 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003c12:	2302      	movs	r3, #2
  }
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3720      	adds	r7, #32
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b08a      	sub	sp, #40	; 0x28
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	60b9      	str	r1, [r7, #8]
 8003c26:	4613      	mov	r3, r2
 8003c28:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c30:	2b20      	cmp	r3, #32
 8003c32:	d137      	bne.n	8003ca4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d002      	beq.n	8003c40 <HAL_UART_Receive_IT+0x24>
 8003c3a:	88fb      	ldrh	r3, [r7, #6]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d101      	bne.n	8003c44 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e030      	b.n	8003ca6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2200      	movs	r2, #0
 8003c48:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a18      	ldr	r2, [pc, #96]	; (8003cb0 <HAL_UART_Receive_IT+0x94>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d01f      	beq.n	8003c94 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d018      	beq.n	8003c94 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	e853 3f00 	ldrex	r3, [r3]
 8003c6e:	613b      	str	r3, [r7, #16]
   return(result);
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c76:	627b      	str	r3, [r7, #36]	; 0x24
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c80:	623b      	str	r3, [r7, #32]
 8003c82:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c84:	69f9      	ldr	r1, [r7, #28]
 8003c86:	6a3a      	ldr	r2, [r7, #32]
 8003c88:	e841 2300 	strex	r3, r2, [r1]
 8003c8c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d1e6      	bne.n	8003c62 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003c94:	88fb      	ldrh	r3, [r7, #6]
 8003c96:	461a      	mov	r2, r3
 8003c98:	68b9      	ldr	r1, [r7, #8]
 8003c9a:	68f8      	ldr	r0, [r7, #12]
 8003c9c:	f000 ff20 	bl	8004ae0 <UART_Start_Receive_IT>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	e000      	b.n	8003ca6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003ca4:	2302      	movs	r3, #2
  }
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3728      	adds	r7, #40	; 0x28
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	40008000 	.word	0x40008000

08003cb4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b0ba      	sub	sp, #232	; 0xe8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	69db      	ldr	r3, [r3, #28]
 8003cc2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003cda:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003cde:	f640 030f 	movw	r3, #2063	; 0x80f
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003ce8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d115      	bne.n	8003d1c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003cf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cf4:	f003 0320 	and.w	r3, r3, #32
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d00f      	beq.n	8003d1c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003cfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d00:	f003 0320 	and.w	r3, r3, #32
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d009      	beq.n	8003d1c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	f000 82ae 	beq.w	800426e <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	4798      	blx	r3
      }
      return;
 8003d1a:	e2a8      	b.n	800426e <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003d1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	f000 8117 	beq.w	8003f54 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003d26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d2a:	f003 0301 	and.w	r3, r3, #1
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d106      	bne.n	8003d40 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003d32:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003d36:	4b85      	ldr	r3, [pc, #532]	; (8003f4c <HAL_UART_IRQHandler+0x298>)
 8003d38:	4013      	ands	r3, r2
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	f000 810a 	beq.w	8003f54 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003d40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d44:	f003 0301 	and.w	r3, r3, #1
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d011      	beq.n	8003d70 <HAL_UART_IRQHandler+0xbc>
 8003d4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d00b      	beq.n	8003d70 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d66:	f043 0201 	orr.w	r2, r3, #1
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d74:	f003 0302 	and.w	r3, r3, #2
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d011      	beq.n	8003da0 <HAL_UART_IRQHandler+0xec>
 8003d7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d80:	f003 0301 	and.w	r3, r3, #1
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d00b      	beq.n	8003da0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2202      	movs	r2, #2
 8003d8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d96:	f043 0204 	orr.w	r2, r3, #4
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003da0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003da4:	f003 0304 	and.w	r3, r3, #4
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d011      	beq.n	8003dd0 <HAL_UART_IRQHandler+0x11c>
 8003dac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003db0:	f003 0301 	and.w	r3, r3, #1
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d00b      	beq.n	8003dd0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2204      	movs	r2, #4
 8003dbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dc6:	f043 0202 	orr.w	r2, r3, #2
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003dd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dd4:	f003 0308 	and.w	r3, r3, #8
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d017      	beq.n	8003e0c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003ddc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003de0:	f003 0320 	and.w	r3, r3, #32
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d105      	bne.n	8003df4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003de8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003dec:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d00b      	beq.n	8003e0c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2208      	movs	r2, #8
 8003dfa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e02:	f043 0208 	orr.w	r2, r3, #8
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003e0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d012      	beq.n	8003e3e <HAL_UART_IRQHandler+0x18a>
 8003e18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d00c      	beq.n	8003e3e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e34:	f043 0220 	orr.w	r2, r3, #32
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	f000 8214 	beq.w	8004272 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003e4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e4e:	f003 0320 	and.w	r3, r3, #32
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d00d      	beq.n	8003e72 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003e56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e5a:	f003 0320 	and.w	r3, r3, #32
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d007      	beq.n	8003e72 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d003      	beq.n	8003e72 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e78:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e86:	2b40      	cmp	r3, #64	; 0x40
 8003e88:	d005      	beq.n	8003e96 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003e8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003e8e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d04f      	beq.n	8003f36 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 fee8 	bl	8004c6c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ea6:	2b40      	cmp	r3, #64	; 0x40
 8003ea8:	d141      	bne.n	8003f2e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	3308      	adds	r3, #8
 8003eb0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003eb8:	e853 3f00 	ldrex	r3, [r3]
 8003ebc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003ec0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003ec4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ec8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	3308      	adds	r3, #8
 8003ed2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003ed6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003eda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ede:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003ee2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003ee6:	e841 2300 	strex	r3, r2, [r1]
 8003eea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003eee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d1d9      	bne.n	8003eaa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d013      	beq.n	8003f26 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f02:	4a13      	ldr	r2, [pc, #76]	; (8003f50 <HAL_UART_IRQHandler+0x29c>)
 8003f04:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f7fd faa4 	bl	8001458 <HAL_DMA_Abort_IT>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d017      	beq.n	8003f46 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003f20:	4610      	mov	r0, r2
 8003f22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f24:	e00f      	b.n	8003f46 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f000 f9b8 	bl	800429c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f2c:	e00b      	b.n	8003f46 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f000 f9b4 	bl	800429c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f34:	e007      	b.n	8003f46 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 f9b0 	bl	800429c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003f44:	e195      	b.n	8004272 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f46:	bf00      	nop
    return;
 8003f48:	e193      	b.n	8004272 <HAL_UART_IRQHandler+0x5be>
 8003f4a:	bf00      	nop
 8003f4c:	04000120 	.word	0x04000120
 8003f50:	08004d35 	.word	0x08004d35

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	f040 814e 	bne.w	80041fa <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003f5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f62:	f003 0310 	and.w	r3, r3, #16
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	f000 8147 	beq.w	80041fa <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003f6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f70:	f003 0310 	and.w	r3, r3, #16
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	f000 8140 	beq.w	80041fa <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	2210      	movs	r2, #16
 8003f80:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f8c:	2b40      	cmp	r3, #64	; 0x40
 8003f8e:	f040 80b8 	bne.w	8004102 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003f9e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	f000 8167 	beq.w	8004276 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003fae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	f080 815f 	bcs.w	8004276 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003fbe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0320 	and.w	r3, r3, #32
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	f040 8086 	bne.w	80040e0 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fdc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003fe0:	e853 3f00 	ldrex	r3, [r3]
 8003fe4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003fe8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003fec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ff0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003ffe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004002:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004006:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800400a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800400e:	e841 2300 	strex	r3, r2, [r1]
 8004012:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004016:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1da      	bne.n	8003fd4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	3308      	adds	r3, #8
 8004024:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004026:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004028:	e853 3f00 	ldrex	r3, [r3]
 800402c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800402e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004030:	f023 0301 	bic.w	r3, r3, #1
 8004034:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	3308      	adds	r3, #8
 800403e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004042:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004046:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004048:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800404a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800404e:	e841 2300 	strex	r3, r2, [r1]
 8004052:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004054:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004056:	2b00      	cmp	r3, #0
 8004058:	d1e1      	bne.n	800401e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	3308      	adds	r3, #8
 8004060:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004062:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004064:	e853 3f00 	ldrex	r3, [r3]
 8004068:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800406a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800406c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004070:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	3308      	adds	r3, #8
 800407a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800407e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004080:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004082:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004084:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004086:	e841 2300 	strex	r3, r2, [r1]
 800408a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800408c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800408e:	2b00      	cmp	r3, #0
 8004090:	d1e3      	bne.n	800405a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2220      	movs	r2, #32
 8004096:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040a8:	e853 3f00 	ldrex	r3, [r3]
 80040ac:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80040ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040b0:	f023 0310 	bic.w	r3, r3, #16
 80040b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	461a      	mov	r2, r3
 80040be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80040c2:	65bb      	str	r3, [r7, #88]	; 0x58
 80040c4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80040c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80040ca:	e841 2300 	strex	r3, r2, [r1]
 80040ce:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80040d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d1e4      	bne.n	80040a0 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040da:	4618      	mov	r0, r3
 80040dc:	f7fd f97e 	bl	80013dc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2202      	movs	r2, #2
 80040e4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	4619      	mov	r1, r3
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 f8d8 	bl	80042b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004100:	e0b9      	b.n	8004276 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800410e:	b29b      	uxth	r3, r3
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800411c:	b29b      	uxth	r3, r3
 800411e:	2b00      	cmp	r3, #0
 8004120:	f000 80ab 	beq.w	800427a <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8004124:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004128:	2b00      	cmp	r3, #0
 800412a:	f000 80a6 	beq.w	800427a <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004136:	e853 3f00 	ldrex	r3, [r3]
 800413a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800413c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800413e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004142:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	461a      	mov	r2, r3
 800414c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004150:	647b      	str	r3, [r7, #68]	; 0x44
 8004152:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004154:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004156:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004158:	e841 2300 	strex	r3, r2, [r1]
 800415c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800415e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004160:	2b00      	cmp	r3, #0
 8004162:	d1e4      	bne.n	800412e <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	3308      	adds	r3, #8
 800416a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800416c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416e:	e853 3f00 	ldrex	r3, [r3]
 8004172:	623b      	str	r3, [r7, #32]
   return(result);
 8004174:	6a3b      	ldr	r3, [r7, #32]
 8004176:	f023 0301 	bic.w	r3, r3, #1
 800417a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	3308      	adds	r3, #8
 8004184:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004188:	633a      	str	r2, [r7, #48]	; 0x30
 800418a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800418c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800418e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004190:	e841 2300 	strex	r3, r2, [r1]
 8004194:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004198:	2b00      	cmp	r3, #0
 800419a:	d1e3      	bne.n	8004164 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2220      	movs	r2, #32
 80041a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	e853 3f00 	ldrex	r3, [r3]
 80041bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f023 0310 	bic.w	r3, r3, #16
 80041c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	461a      	mov	r2, r3
 80041ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80041d2:	61fb      	str	r3, [r7, #28]
 80041d4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d6:	69b9      	ldr	r1, [r7, #24]
 80041d8:	69fa      	ldr	r2, [r7, #28]
 80041da:	e841 2300 	strex	r3, r2, [r1]
 80041de:	617b      	str	r3, [r7, #20]
   return(result);
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d1e4      	bne.n	80041b0 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2202      	movs	r2, #2
 80041ea:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80041ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80041f0:	4619      	mov	r1, r3
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 f85c 	bl	80042b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80041f8:	e03f      	b.n	800427a <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80041fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00e      	beq.n	8004224 <HAL_UART_IRQHandler+0x570>
 8004206:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800420a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d008      	beq.n	8004224 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800421a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f000 ff85 	bl	800512c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004222:	e02d      	b.n	8004280 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004224:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004228:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800422c:	2b00      	cmp	r3, #0
 800422e:	d00e      	beq.n	800424e <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004230:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004234:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004238:	2b00      	cmp	r3, #0
 800423a:	d008      	beq.n	800424e <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004240:	2b00      	cmp	r3, #0
 8004242:	d01c      	beq.n	800427e <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	4798      	blx	r3
    }
    return;
 800424c:	e017      	b.n	800427e <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800424e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004256:	2b00      	cmp	r3, #0
 8004258:	d012      	beq.n	8004280 <HAL_UART_IRQHandler+0x5cc>
 800425a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800425e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004262:	2b00      	cmp	r3, #0
 8004264:	d00c      	beq.n	8004280 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f000 fd7a 	bl	8004d60 <UART_EndTransmit_IT>
    return;
 800426c:	e008      	b.n	8004280 <HAL_UART_IRQHandler+0x5cc>
      return;
 800426e:	bf00      	nop
 8004270:	e006      	b.n	8004280 <HAL_UART_IRQHandler+0x5cc>
    return;
 8004272:	bf00      	nop
 8004274:	e004      	b.n	8004280 <HAL_UART_IRQHandler+0x5cc>
      return;
 8004276:	bf00      	nop
 8004278:	e002      	b.n	8004280 <HAL_UART_IRQHandler+0x5cc>
      return;
 800427a:	bf00      	nop
 800427c:	e000      	b.n	8004280 <HAL_UART_IRQHandler+0x5cc>
    return;
 800427e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004280:	37e8      	adds	r7, #232	; 0xe8
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop

08004288 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004290:	bf00      	nop
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80042a4:	bf00      	nop
 80042a6:	370c      	adds	r7, #12
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr

080042b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	460b      	mov	r3, r1
 80042ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80042bc:	bf00      	nop
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042cc:	b08a      	sub	sp, #40	; 0x28
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80042d2:	2300      	movs	r3, #0
 80042d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	689a      	ldr	r2, [r3, #8]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	691b      	ldr	r3, [r3, #16]
 80042e0:	431a      	orrs	r2, r3
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	695b      	ldr	r3, [r3, #20]
 80042e6:	431a      	orrs	r2, r3
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	69db      	ldr	r3, [r3, #28]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	4b9e      	ldr	r3, [pc, #632]	; (8004570 <UART_SetConfig+0x2a8>)
 80042f8:	4013      	ands	r3, r2
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	6812      	ldr	r2, [r2, #0]
 80042fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004300:	430b      	orrs	r3, r1
 8004302:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	68da      	ldr	r2, [r3, #12]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	430a      	orrs	r2, r1
 8004318:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a93      	ldr	r2, [pc, #588]	; (8004574 <UART_SetConfig+0x2ac>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d004      	beq.n	8004334 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6a1b      	ldr	r3, [r3, #32]
 800432e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004330:	4313      	orrs	r3, r2
 8004332:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004344:	430a      	orrs	r2, r1
 8004346:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a8a      	ldr	r2, [pc, #552]	; (8004578 <UART_SetConfig+0x2b0>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d126      	bne.n	80043a0 <UART_SetConfig+0xd8>
 8004352:	4b8a      	ldr	r3, [pc, #552]	; (800457c <UART_SetConfig+0x2b4>)
 8004354:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004358:	f003 0303 	and.w	r3, r3, #3
 800435c:	2b03      	cmp	r3, #3
 800435e:	d81b      	bhi.n	8004398 <UART_SetConfig+0xd0>
 8004360:	a201      	add	r2, pc, #4	; (adr r2, 8004368 <UART_SetConfig+0xa0>)
 8004362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004366:	bf00      	nop
 8004368:	08004379 	.word	0x08004379
 800436c:	08004389 	.word	0x08004389
 8004370:	08004381 	.word	0x08004381
 8004374:	08004391 	.word	0x08004391
 8004378:	2301      	movs	r3, #1
 800437a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800437e:	e0ab      	b.n	80044d8 <UART_SetConfig+0x210>
 8004380:	2302      	movs	r3, #2
 8004382:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004386:	e0a7      	b.n	80044d8 <UART_SetConfig+0x210>
 8004388:	2304      	movs	r3, #4
 800438a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800438e:	e0a3      	b.n	80044d8 <UART_SetConfig+0x210>
 8004390:	2308      	movs	r3, #8
 8004392:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004396:	e09f      	b.n	80044d8 <UART_SetConfig+0x210>
 8004398:	2310      	movs	r3, #16
 800439a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800439e:	e09b      	b.n	80044d8 <UART_SetConfig+0x210>
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a76      	ldr	r2, [pc, #472]	; (8004580 <UART_SetConfig+0x2b8>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d138      	bne.n	800441c <UART_SetConfig+0x154>
 80043aa:	4b74      	ldr	r3, [pc, #464]	; (800457c <UART_SetConfig+0x2b4>)
 80043ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b0:	f003 030c 	and.w	r3, r3, #12
 80043b4:	2b0c      	cmp	r3, #12
 80043b6:	d82d      	bhi.n	8004414 <UART_SetConfig+0x14c>
 80043b8:	a201      	add	r2, pc, #4	; (adr r2, 80043c0 <UART_SetConfig+0xf8>)
 80043ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043be:	bf00      	nop
 80043c0:	080043f5 	.word	0x080043f5
 80043c4:	08004415 	.word	0x08004415
 80043c8:	08004415 	.word	0x08004415
 80043cc:	08004415 	.word	0x08004415
 80043d0:	08004405 	.word	0x08004405
 80043d4:	08004415 	.word	0x08004415
 80043d8:	08004415 	.word	0x08004415
 80043dc:	08004415 	.word	0x08004415
 80043e0:	080043fd 	.word	0x080043fd
 80043e4:	08004415 	.word	0x08004415
 80043e8:	08004415 	.word	0x08004415
 80043ec:	08004415 	.word	0x08004415
 80043f0:	0800440d 	.word	0x0800440d
 80043f4:	2300      	movs	r3, #0
 80043f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043fa:	e06d      	b.n	80044d8 <UART_SetConfig+0x210>
 80043fc:	2302      	movs	r3, #2
 80043fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004402:	e069      	b.n	80044d8 <UART_SetConfig+0x210>
 8004404:	2304      	movs	r3, #4
 8004406:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800440a:	e065      	b.n	80044d8 <UART_SetConfig+0x210>
 800440c:	2308      	movs	r3, #8
 800440e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004412:	e061      	b.n	80044d8 <UART_SetConfig+0x210>
 8004414:	2310      	movs	r3, #16
 8004416:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800441a:	e05d      	b.n	80044d8 <UART_SetConfig+0x210>
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a58      	ldr	r2, [pc, #352]	; (8004584 <UART_SetConfig+0x2bc>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d125      	bne.n	8004472 <UART_SetConfig+0x1aa>
 8004426:	4b55      	ldr	r3, [pc, #340]	; (800457c <UART_SetConfig+0x2b4>)
 8004428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800442c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004430:	2b30      	cmp	r3, #48	; 0x30
 8004432:	d016      	beq.n	8004462 <UART_SetConfig+0x19a>
 8004434:	2b30      	cmp	r3, #48	; 0x30
 8004436:	d818      	bhi.n	800446a <UART_SetConfig+0x1a2>
 8004438:	2b20      	cmp	r3, #32
 800443a:	d00a      	beq.n	8004452 <UART_SetConfig+0x18a>
 800443c:	2b20      	cmp	r3, #32
 800443e:	d814      	bhi.n	800446a <UART_SetConfig+0x1a2>
 8004440:	2b00      	cmp	r3, #0
 8004442:	d002      	beq.n	800444a <UART_SetConfig+0x182>
 8004444:	2b10      	cmp	r3, #16
 8004446:	d008      	beq.n	800445a <UART_SetConfig+0x192>
 8004448:	e00f      	b.n	800446a <UART_SetConfig+0x1a2>
 800444a:	2300      	movs	r3, #0
 800444c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004450:	e042      	b.n	80044d8 <UART_SetConfig+0x210>
 8004452:	2302      	movs	r3, #2
 8004454:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004458:	e03e      	b.n	80044d8 <UART_SetConfig+0x210>
 800445a:	2304      	movs	r3, #4
 800445c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004460:	e03a      	b.n	80044d8 <UART_SetConfig+0x210>
 8004462:	2308      	movs	r3, #8
 8004464:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004468:	e036      	b.n	80044d8 <UART_SetConfig+0x210>
 800446a:	2310      	movs	r3, #16
 800446c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004470:	e032      	b.n	80044d8 <UART_SetConfig+0x210>
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a3f      	ldr	r2, [pc, #252]	; (8004574 <UART_SetConfig+0x2ac>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d12a      	bne.n	80044d2 <UART_SetConfig+0x20a>
 800447c:	4b3f      	ldr	r3, [pc, #252]	; (800457c <UART_SetConfig+0x2b4>)
 800447e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004482:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004486:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800448a:	d01a      	beq.n	80044c2 <UART_SetConfig+0x1fa>
 800448c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004490:	d81b      	bhi.n	80044ca <UART_SetConfig+0x202>
 8004492:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004496:	d00c      	beq.n	80044b2 <UART_SetConfig+0x1ea>
 8004498:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800449c:	d815      	bhi.n	80044ca <UART_SetConfig+0x202>
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d003      	beq.n	80044aa <UART_SetConfig+0x1e2>
 80044a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044a6:	d008      	beq.n	80044ba <UART_SetConfig+0x1f2>
 80044a8:	e00f      	b.n	80044ca <UART_SetConfig+0x202>
 80044aa:	2300      	movs	r3, #0
 80044ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044b0:	e012      	b.n	80044d8 <UART_SetConfig+0x210>
 80044b2:	2302      	movs	r3, #2
 80044b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044b8:	e00e      	b.n	80044d8 <UART_SetConfig+0x210>
 80044ba:	2304      	movs	r3, #4
 80044bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044c0:	e00a      	b.n	80044d8 <UART_SetConfig+0x210>
 80044c2:	2308      	movs	r3, #8
 80044c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044c8:	e006      	b.n	80044d8 <UART_SetConfig+0x210>
 80044ca:	2310      	movs	r3, #16
 80044cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044d0:	e002      	b.n	80044d8 <UART_SetConfig+0x210>
 80044d2:	2310      	movs	r3, #16
 80044d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a25      	ldr	r2, [pc, #148]	; (8004574 <UART_SetConfig+0x2ac>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	f040 808a 	bne.w	80045f8 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80044e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80044e8:	2b08      	cmp	r3, #8
 80044ea:	d824      	bhi.n	8004536 <UART_SetConfig+0x26e>
 80044ec:	a201      	add	r2, pc, #4	; (adr r2, 80044f4 <UART_SetConfig+0x22c>)
 80044ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044f2:	bf00      	nop
 80044f4:	08004519 	.word	0x08004519
 80044f8:	08004537 	.word	0x08004537
 80044fc:	08004521 	.word	0x08004521
 8004500:	08004537 	.word	0x08004537
 8004504:	08004527 	.word	0x08004527
 8004508:	08004537 	.word	0x08004537
 800450c:	08004537 	.word	0x08004537
 8004510:	08004537 	.word	0x08004537
 8004514:	0800452f 	.word	0x0800452f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004518:	f7fe fdf2 	bl	8003100 <HAL_RCC_GetPCLK1Freq>
 800451c:	61f8      	str	r0, [r7, #28]
        break;
 800451e:	e010      	b.n	8004542 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004520:	4b19      	ldr	r3, [pc, #100]	; (8004588 <UART_SetConfig+0x2c0>)
 8004522:	61fb      	str	r3, [r7, #28]
        break;
 8004524:	e00d      	b.n	8004542 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004526:	f7fe fd53 	bl	8002fd0 <HAL_RCC_GetSysClockFreq>
 800452a:	61f8      	str	r0, [r7, #28]
        break;
 800452c:	e009      	b.n	8004542 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800452e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004532:	61fb      	str	r3, [r7, #28]
        break;
 8004534:	e005      	b.n	8004542 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8004536:	2300      	movs	r3, #0
 8004538:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004540:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004542:	69fb      	ldr	r3, [r7, #28]
 8004544:	2b00      	cmp	r3, #0
 8004546:	f000 8109 	beq.w	800475c <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	685a      	ldr	r2, [r3, #4]
 800454e:	4613      	mov	r3, r2
 8004550:	005b      	lsls	r3, r3, #1
 8004552:	4413      	add	r3, r2
 8004554:	69fa      	ldr	r2, [r7, #28]
 8004556:	429a      	cmp	r2, r3
 8004558:	d305      	bcc.n	8004566 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004560:	69fa      	ldr	r2, [r7, #28]
 8004562:	429a      	cmp	r2, r3
 8004564:	d912      	bls.n	800458c <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800456c:	e0f6      	b.n	800475c <UART_SetConfig+0x494>
 800456e:	bf00      	nop
 8004570:	efff69f3 	.word	0xefff69f3
 8004574:	40008000 	.word	0x40008000
 8004578:	40013800 	.word	0x40013800
 800457c:	40021000 	.word	0x40021000
 8004580:	40004400 	.word	0x40004400
 8004584:	40004800 	.word	0x40004800
 8004588:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	2200      	movs	r2, #0
 8004590:	461c      	mov	r4, r3
 8004592:	4615      	mov	r5, r2
 8004594:	f04f 0200 	mov.w	r2, #0
 8004598:	f04f 0300 	mov.w	r3, #0
 800459c:	022b      	lsls	r3, r5, #8
 800459e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80045a2:	0222      	lsls	r2, r4, #8
 80045a4:	68f9      	ldr	r1, [r7, #12]
 80045a6:	6849      	ldr	r1, [r1, #4]
 80045a8:	0849      	lsrs	r1, r1, #1
 80045aa:	2000      	movs	r0, #0
 80045ac:	4688      	mov	r8, r1
 80045ae:	4681      	mov	r9, r0
 80045b0:	eb12 0a08 	adds.w	sl, r2, r8
 80045b4:	eb43 0b09 	adc.w	fp, r3, r9
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	603b      	str	r3, [r7, #0]
 80045c0:	607a      	str	r2, [r7, #4]
 80045c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045c6:	4650      	mov	r0, sl
 80045c8:	4659      	mov	r1, fp
 80045ca:	f7fb fe51 	bl	8000270 <__aeabi_uldivmod>
 80045ce:	4602      	mov	r2, r0
 80045d0:	460b      	mov	r3, r1
 80045d2:	4613      	mov	r3, r2
 80045d4:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045dc:	d308      	bcc.n	80045f0 <UART_SetConfig+0x328>
 80045de:	69bb      	ldr	r3, [r7, #24]
 80045e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045e4:	d204      	bcs.n	80045f0 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	69ba      	ldr	r2, [r7, #24]
 80045ec:	60da      	str	r2, [r3, #12]
 80045ee:	e0b5      	b.n	800475c <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80045f6:	e0b1      	b.n	800475c <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	69db      	ldr	r3, [r3, #28]
 80045fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004600:	d15d      	bne.n	80046be <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8004602:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004606:	2b08      	cmp	r3, #8
 8004608:	d827      	bhi.n	800465a <UART_SetConfig+0x392>
 800460a:	a201      	add	r2, pc, #4	; (adr r2, 8004610 <UART_SetConfig+0x348>)
 800460c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004610:	08004635 	.word	0x08004635
 8004614:	0800463d 	.word	0x0800463d
 8004618:	08004645 	.word	0x08004645
 800461c:	0800465b 	.word	0x0800465b
 8004620:	0800464b 	.word	0x0800464b
 8004624:	0800465b 	.word	0x0800465b
 8004628:	0800465b 	.word	0x0800465b
 800462c:	0800465b 	.word	0x0800465b
 8004630:	08004653 	.word	0x08004653
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004634:	f7fe fd64 	bl	8003100 <HAL_RCC_GetPCLK1Freq>
 8004638:	61f8      	str	r0, [r7, #28]
        break;
 800463a:	e014      	b.n	8004666 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800463c:	f7fe fd76 	bl	800312c <HAL_RCC_GetPCLK2Freq>
 8004640:	61f8      	str	r0, [r7, #28]
        break;
 8004642:	e010      	b.n	8004666 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004644:	4b4c      	ldr	r3, [pc, #304]	; (8004778 <UART_SetConfig+0x4b0>)
 8004646:	61fb      	str	r3, [r7, #28]
        break;
 8004648:	e00d      	b.n	8004666 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800464a:	f7fe fcc1 	bl	8002fd0 <HAL_RCC_GetSysClockFreq>
 800464e:	61f8      	str	r0, [r7, #28]
        break;
 8004650:	e009      	b.n	8004666 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004652:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004656:	61fb      	str	r3, [r7, #28]
        break;
 8004658:	e005      	b.n	8004666 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 800465a:	2300      	movs	r3, #0
 800465c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004664:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d077      	beq.n	800475c <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	005a      	lsls	r2, r3, #1
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	085b      	lsrs	r3, r3, #1
 8004676:	441a      	add	r2, r3
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004680:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004682:	69bb      	ldr	r3, [r7, #24]
 8004684:	2b0f      	cmp	r3, #15
 8004686:	d916      	bls.n	80046b6 <UART_SetConfig+0x3ee>
 8004688:	69bb      	ldr	r3, [r7, #24]
 800468a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800468e:	d212      	bcs.n	80046b6 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	b29b      	uxth	r3, r3
 8004694:	f023 030f 	bic.w	r3, r3, #15
 8004698:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800469a:	69bb      	ldr	r3, [r7, #24]
 800469c:	085b      	lsrs	r3, r3, #1
 800469e:	b29b      	uxth	r3, r3
 80046a0:	f003 0307 	and.w	r3, r3, #7
 80046a4:	b29a      	uxth	r2, r3
 80046a6:	8afb      	ldrh	r3, [r7, #22]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	8afa      	ldrh	r2, [r7, #22]
 80046b2:	60da      	str	r2, [r3, #12]
 80046b4:	e052      	b.n	800475c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80046bc:	e04e      	b.n	800475c <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 80046be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80046c2:	2b08      	cmp	r3, #8
 80046c4:	d827      	bhi.n	8004716 <UART_SetConfig+0x44e>
 80046c6:	a201      	add	r2, pc, #4	; (adr r2, 80046cc <UART_SetConfig+0x404>)
 80046c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046cc:	080046f1 	.word	0x080046f1
 80046d0:	080046f9 	.word	0x080046f9
 80046d4:	08004701 	.word	0x08004701
 80046d8:	08004717 	.word	0x08004717
 80046dc:	08004707 	.word	0x08004707
 80046e0:	08004717 	.word	0x08004717
 80046e4:	08004717 	.word	0x08004717
 80046e8:	08004717 	.word	0x08004717
 80046ec:	0800470f 	.word	0x0800470f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046f0:	f7fe fd06 	bl	8003100 <HAL_RCC_GetPCLK1Freq>
 80046f4:	61f8      	str	r0, [r7, #28]
        break;
 80046f6:	e014      	b.n	8004722 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046f8:	f7fe fd18 	bl	800312c <HAL_RCC_GetPCLK2Freq>
 80046fc:	61f8      	str	r0, [r7, #28]
        break;
 80046fe:	e010      	b.n	8004722 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004700:	4b1d      	ldr	r3, [pc, #116]	; (8004778 <UART_SetConfig+0x4b0>)
 8004702:	61fb      	str	r3, [r7, #28]
        break;
 8004704:	e00d      	b.n	8004722 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004706:	f7fe fc63 	bl	8002fd0 <HAL_RCC_GetSysClockFreq>
 800470a:	61f8      	str	r0, [r7, #28]
        break;
 800470c:	e009      	b.n	8004722 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800470e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004712:	61fb      	str	r3, [r7, #28]
        break;
 8004714:	e005      	b.n	8004722 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8004716:	2300      	movs	r3, #0
 8004718:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004720:	bf00      	nop
    }

    if (pclk != 0U)
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d019      	beq.n	800475c <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	085a      	lsrs	r2, r3, #1
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	441a      	add	r2, r3
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	fbb2 f3f3 	udiv	r3, r2, r3
 800473a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	2b0f      	cmp	r3, #15
 8004740:	d909      	bls.n	8004756 <UART_SetConfig+0x48e>
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004748:	d205      	bcs.n	8004756 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800474a:	69bb      	ldr	r3, [r7, #24]
 800474c:	b29a      	uxth	r2, r3
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	60da      	str	r2, [r3, #12]
 8004754:	e002      	b.n	800475c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2200      	movs	r2, #0
 8004760:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2200      	movs	r2, #0
 8004766:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004768:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800476c:	4618      	mov	r0, r3
 800476e:	3728      	adds	r7, #40	; 0x28
 8004770:	46bd      	mov	sp, r7
 8004772:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004776:	bf00      	nop
 8004778:	00f42400 	.word	0x00f42400

0800477c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800477c:	b480      	push	{r7}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004788:	f003 0308 	and.w	r3, r3, #8
 800478c:	2b00      	cmp	r3, #0
 800478e:	d00a      	beq.n	80047a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	430a      	orrs	r2, r1
 80047a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047aa:	f003 0301 	and.w	r3, r3, #1
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d00a      	beq.n	80047c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	430a      	orrs	r2, r1
 80047c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047cc:	f003 0302 	and.w	r3, r3, #2
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d00a      	beq.n	80047ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	430a      	orrs	r2, r1
 80047e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ee:	f003 0304 	and.w	r3, r3, #4
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d00a      	beq.n	800480c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	430a      	orrs	r2, r1
 800480a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004810:	f003 0310 	and.w	r3, r3, #16
 8004814:	2b00      	cmp	r3, #0
 8004816:	d00a      	beq.n	800482e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	430a      	orrs	r2, r1
 800482c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004832:	f003 0320 	and.w	r3, r3, #32
 8004836:	2b00      	cmp	r3, #0
 8004838:	d00a      	beq.n	8004850 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	430a      	orrs	r2, r1
 800484e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004858:	2b00      	cmp	r3, #0
 800485a:	d01a      	beq.n	8004892 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	430a      	orrs	r2, r1
 8004870:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004876:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800487a:	d10a      	bne.n	8004892 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	430a      	orrs	r2, r1
 8004890:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800489a:	2b00      	cmp	r3, #0
 800489c:	d00a      	beq.n	80048b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	430a      	orrs	r2, r1
 80048b2:	605a      	str	r2, [r3, #4]
  }
}
 80048b4:	bf00      	nop
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b098      	sub	sp, #96	; 0x60
 80048c4:	af02      	add	r7, sp, #8
 80048c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80048d0:	f7fc fc96 	bl	8001200 <HAL_GetTick>
 80048d4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0308 	and.w	r3, r3, #8
 80048e0:	2b08      	cmp	r3, #8
 80048e2:	d12e      	bne.n	8004942 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80048e8:	9300      	str	r3, [sp, #0]
 80048ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048ec:	2200      	movs	r2, #0
 80048ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 f88c 	bl	8004a10 <UART_WaitOnFlagUntilTimeout>
 80048f8:	4603      	mov	r3, r0
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d021      	beq.n	8004942 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004906:	e853 3f00 	ldrex	r3, [r3]
 800490a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800490c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800490e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004912:	653b      	str	r3, [r7, #80]	; 0x50
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	461a      	mov	r2, r3
 800491a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800491c:	647b      	str	r3, [r7, #68]	; 0x44
 800491e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004920:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004922:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004924:	e841 2300 	strex	r3, r2, [r1]
 8004928:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800492a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800492c:	2b00      	cmp	r3, #0
 800492e:	d1e6      	bne.n	80048fe <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2220      	movs	r2, #32
 8004934:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e062      	b.n	8004a08 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0304 	and.w	r3, r3, #4
 800494c:	2b04      	cmp	r3, #4
 800494e:	d149      	bne.n	80049e4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004950:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004954:	9300      	str	r3, [sp, #0]
 8004956:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004958:	2200      	movs	r2, #0
 800495a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f000 f856 	bl	8004a10 <UART_WaitOnFlagUntilTimeout>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d03c      	beq.n	80049e4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004972:	e853 3f00 	ldrex	r3, [r3]
 8004976:	623b      	str	r3, [r7, #32]
   return(result);
 8004978:	6a3b      	ldr	r3, [r7, #32]
 800497a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800497e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	461a      	mov	r2, r3
 8004986:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004988:	633b      	str	r3, [r7, #48]	; 0x30
 800498a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800498c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800498e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004990:	e841 2300 	strex	r3, r2, [r1]
 8004994:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004998:	2b00      	cmp	r3, #0
 800499a:	d1e6      	bne.n	800496a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	3308      	adds	r3, #8
 80049a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	e853 3f00 	ldrex	r3, [r3]
 80049aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f023 0301 	bic.w	r3, r3, #1
 80049b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	3308      	adds	r3, #8
 80049ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049bc:	61fa      	str	r2, [r7, #28]
 80049be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c0:	69b9      	ldr	r1, [r7, #24]
 80049c2:	69fa      	ldr	r2, [r7, #28]
 80049c4:	e841 2300 	strex	r3, r2, [r1]
 80049c8:	617b      	str	r3, [r7, #20]
   return(result);
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d1e5      	bne.n	800499c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2220      	movs	r2, #32
 80049d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049e0:	2303      	movs	r3, #3
 80049e2:	e011      	b.n	8004a08 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2220      	movs	r2, #32
 80049e8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2220      	movs	r2, #32
 80049ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004a06:	2300      	movs	r3, #0
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3758      	adds	r7, #88	; 0x58
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}

08004a10 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	60b9      	str	r1, [r7, #8]
 8004a1a:	603b      	str	r3, [r7, #0]
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a20:	e049      	b.n	8004ab6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a28:	d045      	beq.n	8004ab6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a2a:	f7fc fbe9 	bl	8001200 <HAL_GetTick>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	69ba      	ldr	r2, [r7, #24]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d302      	bcc.n	8004a40 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d101      	bne.n	8004a44 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004a40:	2303      	movs	r3, #3
 8004a42:	e048      	b.n	8004ad6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 0304 	and.w	r3, r3, #4
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d031      	beq.n	8004ab6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	69db      	ldr	r3, [r3, #28]
 8004a58:	f003 0308 	and.w	r3, r3, #8
 8004a5c:	2b08      	cmp	r3, #8
 8004a5e:	d110      	bne.n	8004a82 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	2208      	movs	r2, #8
 8004a66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a68:	68f8      	ldr	r0, [r7, #12]
 8004a6a:	f000 f8ff 	bl	8004c6c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2208      	movs	r2, #8
 8004a72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e029      	b.n	8004ad6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	69db      	ldr	r3, [r3, #28]
 8004a88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a90:	d111      	bne.n	8004ab6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a9c:	68f8      	ldr	r0, [r7, #12]
 8004a9e:	f000 f8e5 	bl	8004c6c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2220      	movs	r2, #32
 8004aa6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	e00f      	b.n	8004ad6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	69da      	ldr	r2, [r3, #28]
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	4013      	ands	r3, r2
 8004ac0:	68ba      	ldr	r2, [r7, #8]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	bf0c      	ite	eq
 8004ac6:	2301      	moveq	r3, #1
 8004ac8:	2300      	movne	r3, #0
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	461a      	mov	r2, r3
 8004ace:	79fb      	ldrb	r3, [r7, #7]
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d0a6      	beq.n	8004a22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ad4:	2300      	movs	r3, #0
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3710      	adds	r7, #16
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
	...

08004ae0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b097      	sub	sp, #92	; 0x5c
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	60f8      	str	r0, [r7, #12]
 8004ae8:	60b9      	str	r1, [r7, #8]
 8004aea:	4613      	mov	r3, r2
 8004aec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	68ba      	ldr	r2, [r7, #8]
 8004af2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	88fa      	ldrh	r2, [r7, #6]
 8004af8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	88fa      	ldrh	r2, [r7, #6]
 8004b00:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2200      	movs	r2, #0
 8004b08:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b12:	d10e      	bne.n	8004b32 <UART_Start_Receive_IT+0x52>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	691b      	ldr	r3, [r3, #16]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d105      	bne.n	8004b28 <UART_Start_Receive_IT+0x48>
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004b22:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b26:	e02d      	b.n	8004b84 <UART_Start_Receive_IT+0xa4>
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	22ff      	movs	r2, #255	; 0xff
 8004b2c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b30:	e028      	b.n	8004b84 <UART_Start_Receive_IT+0xa4>
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d10d      	bne.n	8004b56 <UART_Start_Receive_IT+0x76>
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	691b      	ldr	r3, [r3, #16]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d104      	bne.n	8004b4c <UART_Start_Receive_IT+0x6c>
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	22ff      	movs	r2, #255	; 0xff
 8004b46:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b4a:	e01b      	b.n	8004b84 <UART_Start_Receive_IT+0xa4>
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	227f      	movs	r2, #127	; 0x7f
 8004b50:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b54:	e016      	b.n	8004b84 <UART_Start_Receive_IT+0xa4>
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b5e:	d10d      	bne.n	8004b7c <UART_Start_Receive_IT+0x9c>
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	691b      	ldr	r3, [r3, #16]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d104      	bne.n	8004b72 <UART_Start_Receive_IT+0x92>
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	227f      	movs	r2, #127	; 0x7f
 8004b6c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b70:	e008      	b.n	8004b84 <UART_Start_Receive_IT+0xa4>
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	223f      	movs	r2, #63	; 0x3f
 8004b76:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b7a:	e003      	b.n	8004b84 <UART_Start_Receive_IT+0xa4>
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2222      	movs	r2, #34	; 0x22
 8004b90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	3308      	adds	r3, #8
 8004b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b9e:	e853 3f00 	ldrex	r3, [r3]
 8004ba2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ba6:	f043 0301 	orr.w	r3, r3, #1
 8004baa:	657b      	str	r3, [r7, #84]	; 0x54
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	3308      	adds	r3, #8
 8004bb2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004bb4:	64ba      	str	r2, [r7, #72]	; 0x48
 8004bb6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004bba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004bbc:	e841 2300 	strex	r3, r2, [r1]
 8004bc0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004bc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d1e5      	bne.n	8004b94 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bd0:	d107      	bne.n	8004be2 <UART_Start_Receive_IT+0x102>
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d103      	bne.n	8004be2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	4a21      	ldr	r2, [pc, #132]	; (8004c64 <UART_Start_Receive_IT+0x184>)
 8004bde:	669a      	str	r2, [r3, #104]	; 0x68
 8004be0:	e002      	b.n	8004be8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	4a20      	ldr	r2, [pc, #128]	; (8004c68 <UART_Start_Receive_IT+0x188>)
 8004be6:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	691b      	ldr	r3, [r3, #16]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d019      	beq.n	8004c24 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf8:	e853 3f00 	ldrex	r3, [r3]
 8004bfc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c00:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004c04:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c0e:	637b      	str	r3, [r7, #52]	; 0x34
 8004c10:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c12:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c16:	e841 2300 	strex	r3, r2, [r1]
 8004c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d1e6      	bne.n	8004bf0 <UART_Start_Receive_IT+0x110>
 8004c22:	e018      	b.n	8004c56 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	e853 3f00 	ldrex	r3, [r3]
 8004c30:	613b      	str	r3, [r7, #16]
   return(result);
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	f043 0320 	orr.w	r3, r3, #32
 8004c38:	653b      	str	r3, [r7, #80]	; 0x50
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	461a      	mov	r2, r3
 8004c40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c42:	623b      	str	r3, [r7, #32]
 8004c44:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c46:	69f9      	ldr	r1, [r7, #28]
 8004c48:	6a3a      	ldr	r2, [r7, #32]
 8004c4a:	e841 2300 	strex	r3, r2, [r1]
 8004c4e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d1e6      	bne.n	8004c24 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004c56:	2300      	movs	r3, #0
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	375c      	adds	r7, #92	; 0x5c
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr
 8004c64:	08004f71 	.word	0x08004f71
 8004c68:	08004db5 	.word	0x08004db5

08004c6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b095      	sub	sp, #84	; 0x54
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c7c:	e853 3f00 	ldrex	r3, [r3]
 8004c80:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c88:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	461a      	mov	r2, r3
 8004c90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c92:	643b      	str	r3, [r7, #64]	; 0x40
 8004c94:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c96:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004c98:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c9a:	e841 2300 	strex	r3, r2, [r1]
 8004c9e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d1e6      	bne.n	8004c74 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	3308      	adds	r3, #8
 8004cac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cae:	6a3b      	ldr	r3, [r7, #32]
 8004cb0:	e853 3f00 	ldrex	r3, [r3]
 8004cb4:	61fb      	str	r3, [r7, #28]
   return(result);
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	f023 0301 	bic.w	r3, r3, #1
 8004cbc:	64bb      	str	r3, [r7, #72]	; 0x48
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	3308      	adds	r3, #8
 8004cc4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004cc6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004cc8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ccc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cce:	e841 2300 	strex	r3, r2, [r1]
 8004cd2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d1e5      	bne.n	8004ca6 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d118      	bne.n	8004d14 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	e853 3f00 	ldrex	r3, [r3]
 8004cee:	60bb      	str	r3, [r7, #8]
   return(result);
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	f023 0310 	bic.w	r3, r3, #16
 8004cf6:	647b      	str	r3, [r7, #68]	; 0x44
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d00:	61bb      	str	r3, [r7, #24]
 8004d02:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d04:	6979      	ldr	r1, [r7, #20]
 8004d06:	69ba      	ldr	r2, [r7, #24]
 8004d08:	e841 2300 	strex	r3, r2, [r1]
 8004d0c:	613b      	str	r3, [r7, #16]
   return(result);
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d1e6      	bne.n	8004ce2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2220      	movs	r2, #32
 8004d18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004d28:	bf00      	nop
 8004d2a:	3754      	adds	r7, #84	; 0x54
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr

08004d34 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d40:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2200      	movs	r2, #0
 8004d46:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d52:	68f8      	ldr	r0, [r7, #12]
 8004d54:	f7ff faa2 	bl	800429c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d58:	bf00      	nop
 8004d5a:	3710      	adds	r7, #16
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b088      	sub	sp, #32
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	e853 3f00 	ldrex	r3, [r3]
 8004d74:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d7c:	61fb      	str	r3, [r7, #28]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	461a      	mov	r2, r3
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	61bb      	str	r3, [r7, #24]
 8004d88:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d8a:	6979      	ldr	r1, [r7, #20]
 8004d8c:	69ba      	ldr	r2, [r7, #24]
 8004d8e:	e841 2300 	strex	r3, r2, [r1]
 8004d92:	613b      	str	r3, [r7, #16]
   return(result);
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d1e6      	bne.n	8004d68 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2220      	movs	r2, #32
 8004d9e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f7ff fa6e 	bl	8004288 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004dac:	bf00      	nop
 8004dae:	3720      	adds	r7, #32
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b09c      	sub	sp, #112	; 0x70
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004dc2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004dcc:	2b22      	cmp	r3, #34	; 0x22
 8004dce:	f040 80be 	bne.w	8004f4e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004dd8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004ddc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004de0:	b2d9      	uxtb	r1, r3
 8004de2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004de6:	b2da      	uxtb	r2, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dec:	400a      	ands	r2, r1
 8004dee:	b2d2      	uxtb	r2, r2
 8004df0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004df6:	1c5a      	adds	r2, r3, #1
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	3b01      	subs	r3, #1
 8004e06:	b29a      	uxth	r2, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	f040 80a3 	bne.w	8004f62 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e24:	e853 3f00 	ldrex	r3, [r3]
 8004e28:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004e2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e30:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	461a      	mov	r2, r3
 8004e38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e3a:	65bb      	str	r3, [r7, #88]	; 0x58
 8004e3c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e3e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004e40:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004e42:	e841 2300 	strex	r3, r2, [r1]
 8004e46:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004e48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d1e6      	bne.n	8004e1c <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	3308      	adds	r3, #8
 8004e54:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e58:	e853 3f00 	ldrex	r3, [r3]
 8004e5c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e60:	f023 0301 	bic.w	r3, r3, #1
 8004e64:	667b      	str	r3, [r7, #100]	; 0x64
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	3308      	adds	r3, #8
 8004e6c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004e6e:	647a      	str	r2, [r7, #68]	; 0x44
 8004e70:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e72:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e76:	e841 2300 	strex	r3, r2, [r1]
 8004e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1e5      	bne.n	8004e4e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2220      	movs	r2, #32
 8004e86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a34      	ldr	r2, [pc, #208]	; (8004f6c <UART_RxISR_8BIT+0x1b8>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d01f      	beq.n	8004ee0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d018      	beq.n	8004ee0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb6:	e853 3f00 	ldrex	r3, [r3]
 8004eba:	623b      	str	r3, [r7, #32]
   return(result);
 8004ebc:	6a3b      	ldr	r3, [r7, #32]
 8004ebe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004ec2:	663b      	str	r3, [r7, #96]	; 0x60
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	461a      	mov	r2, r3
 8004eca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ecc:	633b      	str	r3, [r7, #48]	; 0x30
 8004ece:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ed2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ed4:	e841 2300 	strex	r3, r2, [r1]
 8004ed8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d1e6      	bne.n	8004eae <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d12e      	bne.n	8004f46 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	e853 3f00 	ldrex	r3, [r3]
 8004efa:	60fb      	str	r3, [r7, #12]
   return(result);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f023 0310 	bic.w	r3, r3, #16
 8004f02:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	461a      	mov	r2, r3
 8004f0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f0c:	61fb      	str	r3, [r7, #28]
 8004f0e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f10:	69b9      	ldr	r1, [r7, #24]
 8004f12:	69fa      	ldr	r2, [r7, #28]
 8004f14:	e841 2300 	strex	r3, r2, [r1]
 8004f18:	617b      	str	r3, [r7, #20]
   return(result);
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d1e6      	bne.n	8004eee <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	69db      	ldr	r3, [r3, #28]
 8004f26:	f003 0310 	and.w	r3, r3, #16
 8004f2a:	2b10      	cmp	r3, #16
 8004f2c:	d103      	bne.n	8004f36 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	2210      	movs	r2, #16
 8004f34:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004f3c:	4619      	mov	r1, r3
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f7ff f9b6 	bl	80042b0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004f44:	e00d      	b.n	8004f62 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f7fb fd6e 	bl	8000a28 <HAL_UART_RxCpltCallback>
}
 8004f4c:	e009      	b.n	8004f62 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	8b1b      	ldrh	r3, [r3, #24]
 8004f54:	b29a      	uxth	r2, r3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f042 0208 	orr.w	r2, r2, #8
 8004f5e:	b292      	uxth	r2, r2
 8004f60:	831a      	strh	r2, [r3, #24]
}
 8004f62:	bf00      	nop
 8004f64:	3770      	adds	r7, #112	; 0x70
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}
 8004f6a:	bf00      	nop
 8004f6c:	40008000 	.word	0x40008000

08004f70 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b09c      	sub	sp, #112	; 0x70
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004f7e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f88:	2b22      	cmp	r3, #34	; 0x22
 8004f8a:	f040 80be 	bne.w	800510a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004f94:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f9c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004f9e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8004fa2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	b29a      	uxth	r2, r3
 8004faa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fac:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fb2:	1c9a      	adds	r2, r3, #2
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	3b01      	subs	r3, #1
 8004fc2:	b29a      	uxth	r2, r3
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	f040 80a3 	bne.w	800511e <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fe0:	e853 3f00 	ldrex	r3, [r3]
 8004fe4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004fe6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fe8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004fec:	667b      	str	r3, [r7, #100]	; 0x64
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ff6:	657b      	str	r3, [r7, #84]	; 0x54
 8004ff8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ffa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004ffc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004ffe:	e841 2300 	strex	r3, r2, [r1]
 8005002:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005004:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005006:	2b00      	cmp	r3, #0
 8005008:	d1e6      	bne.n	8004fd8 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	3308      	adds	r3, #8
 8005010:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005014:	e853 3f00 	ldrex	r3, [r3]
 8005018:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800501a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800501c:	f023 0301 	bic.w	r3, r3, #1
 8005020:	663b      	str	r3, [r7, #96]	; 0x60
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	3308      	adds	r3, #8
 8005028:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800502a:	643a      	str	r2, [r7, #64]	; 0x40
 800502c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800502e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005030:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005032:	e841 2300 	strex	r3, r2, [r1]
 8005036:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800503a:	2b00      	cmp	r3, #0
 800503c:	d1e5      	bne.n	800500a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2220      	movs	r2, #32
 8005042:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a34      	ldr	r2, [pc, #208]	; (8005128 <UART_RxISR_16BIT+0x1b8>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d01f      	beq.n	800509c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005066:	2b00      	cmp	r3, #0
 8005068:	d018      	beq.n	800509c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005070:	6a3b      	ldr	r3, [r7, #32]
 8005072:	e853 3f00 	ldrex	r3, [r3]
 8005076:	61fb      	str	r3, [r7, #28]
   return(result);
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800507e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	461a      	mov	r2, r3
 8005086:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005088:	62fb      	str	r3, [r7, #44]	; 0x2c
 800508a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800508c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800508e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005090:	e841 2300 	strex	r3, r2, [r1]
 8005094:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005098:	2b00      	cmp	r3, #0
 800509a:	d1e6      	bne.n	800506a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d12e      	bne.n	8005102 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	e853 3f00 	ldrex	r3, [r3]
 80050b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	f023 0310 	bic.w	r3, r3, #16
 80050be:	65bb      	str	r3, [r7, #88]	; 0x58
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	461a      	mov	r2, r3
 80050c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80050c8:	61bb      	str	r3, [r7, #24]
 80050ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050cc:	6979      	ldr	r1, [r7, #20]
 80050ce:	69ba      	ldr	r2, [r7, #24]
 80050d0:	e841 2300 	strex	r3, r2, [r1]
 80050d4:	613b      	str	r3, [r7, #16]
   return(result);
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d1e6      	bne.n	80050aa <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	69db      	ldr	r3, [r3, #28]
 80050e2:	f003 0310 	and.w	r3, r3, #16
 80050e6:	2b10      	cmp	r3, #16
 80050e8:	d103      	bne.n	80050f2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	2210      	movs	r2, #16
 80050f0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80050f8:	4619      	mov	r1, r3
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f7ff f8d8 	bl	80042b0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005100:	e00d      	b.n	800511e <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f7fb fc90 	bl	8000a28 <HAL_UART_RxCpltCallback>
}
 8005108:	e009      	b.n	800511e <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	8b1b      	ldrh	r3, [r3, #24]
 8005110:	b29a      	uxth	r2, r3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f042 0208 	orr.w	r2, r2, #8
 800511a:	b292      	uxth	r2, r2
 800511c:	831a      	strh	r2, [r3, #24]
}
 800511e:	bf00      	nop
 8005120:	3770      	adds	r7, #112	; 0x70
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	40008000 	.word	0x40008000

0800512c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800512c:	b480      	push	{r7}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005134:	bf00      	nop
 8005136:	370c      	adds	r7, #12
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr

08005140 <__NVIC_SetPriority>:
{
 8005140:	b480      	push	{r7}
 8005142:	b083      	sub	sp, #12
 8005144:	af00      	add	r7, sp, #0
 8005146:	4603      	mov	r3, r0
 8005148:	6039      	str	r1, [r7, #0]
 800514a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800514c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005150:	2b00      	cmp	r3, #0
 8005152:	db0a      	blt.n	800516a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	b2da      	uxtb	r2, r3
 8005158:	490c      	ldr	r1, [pc, #48]	; (800518c <__NVIC_SetPriority+0x4c>)
 800515a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800515e:	0112      	lsls	r2, r2, #4
 8005160:	b2d2      	uxtb	r2, r2
 8005162:	440b      	add	r3, r1
 8005164:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005168:	e00a      	b.n	8005180 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	b2da      	uxtb	r2, r3
 800516e:	4908      	ldr	r1, [pc, #32]	; (8005190 <__NVIC_SetPriority+0x50>)
 8005170:	79fb      	ldrb	r3, [r7, #7]
 8005172:	f003 030f 	and.w	r3, r3, #15
 8005176:	3b04      	subs	r3, #4
 8005178:	0112      	lsls	r2, r2, #4
 800517a:	b2d2      	uxtb	r2, r2
 800517c:	440b      	add	r3, r1
 800517e:	761a      	strb	r2, [r3, #24]
}
 8005180:	bf00      	nop
 8005182:	370c      	adds	r7, #12
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr
 800518c:	e000e100 	.word	0xe000e100
 8005190:	e000ed00 	.word	0xe000ed00

08005194 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005194:	b580      	push	{r7, lr}
 8005196:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005198:	4b05      	ldr	r3, [pc, #20]	; (80051b0 <SysTick_Handler+0x1c>)
 800519a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800519c:	f001 fdd4 	bl	8006d48 <xTaskGetSchedulerState>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d001      	beq.n	80051aa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80051a6:	f002 fbbf 	bl	8007928 <xPortSysTickHandler>
  }
}
 80051aa:	bf00      	nop
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	bf00      	nop
 80051b0:	e000e010 	.word	0xe000e010

080051b4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80051b4:	b580      	push	{r7, lr}
 80051b6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80051b8:	2100      	movs	r1, #0
 80051ba:	f06f 0004 	mvn.w	r0, #4
 80051be:	f7ff ffbf 	bl	8005140 <__NVIC_SetPriority>
#endif
}
 80051c2:	bf00      	nop
 80051c4:	bd80      	pop	{r7, pc}
	...

080051c8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051ce:	f3ef 8305 	mrs	r3, IPSR
 80051d2:	603b      	str	r3, [r7, #0]
  return(result);
 80051d4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d003      	beq.n	80051e2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80051da:	f06f 0305 	mvn.w	r3, #5
 80051de:	607b      	str	r3, [r7, #4]
 80051e0:	e00c      	b.n	80051fc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80051e2:	4b0a      	ldr	r3, [pc, #40]	; (800520c <osKernelInitialize+0x44>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d105      	bne.n	80051f6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80051ea:	4b08      	ldr	r3, [pc, #32]	; (800520c <osKernelInitialize+0x44>)
 80051ec:	2201      	movs	r2, #1
 80051ee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80051f0:	2300      	movs	r3, #0
 80051f2:	607b      	str	r3, [r7, #4]
 80051f4:	e002      	b.n	80051fc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80051f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80051fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80051fc:	687b      	ldr	r3, [r7, #4]
}
 80051fe:	4618      	mov	r0, r3
 8005200:	370c      	adds	r7, #12
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr
 800520a:	bf00      	nop
 800520c:	20000368 	.word	0x20000368

08005210 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005210:	b580      	push	{r7, lr}
 8005212:	b082      	sub	sp, #8
 8005214:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005216:	f3ef 8305 	mrs	r3, IPSR
 800521a:	603b      	str	r3, [r7, #0]
  return(result);
 800521c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800521e:	2b00      	cmp	r3, #0
 8005220:	d003      	beq.n	800522a <osKernelStart+0x1a>
    stat = osErrorISR;
 8005222:	f06f 0305 	mvn.w	r3, #5
 8005226:	607b      	str	r3, [r7, #4]
 8005228:	e010      	b.n	800524c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800522a:	4b0b      	ldr	r3, [pc, #44]	; (8005258 <osKernelStart+0x48>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	2b01      	cmp	r3, #1
 8005230:	d109      	bne.n	8005246 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005232:	f7ff ffbf 	bl	80051b4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005236:	4b08      	ldr	r3, [pc, #32]	; (8005258 <osKernelStart+0x48>)
 8005238:	2202      	movs	r2, #2
 800523a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800523c:	f001 f928 	bl	8006490 <vTaskStartScheduler>
      stat = osOK;
 8005240:	2300      	movs	r3, #0
 8005242:	607b      	str	r3, [r7, #4]
 8005244:	e002      	b.n	800524c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005246:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800524a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800524c:	687b      	ldr	r3, [r7, #4]
}
 800524e:	4618      	mov	r0, r3
 8005250:	3708      	adds	r7, #8
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
 8005256:	bf00      	nop
 8005258:	20000368 	.word	0x20000368

0800525c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800525c:	b580      	push	{r7, lr}
 800525e:	b08e      	sub	sp, #56	; 0x38
 8005260:	af04      	add	r7, sp, #16
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	60b9      	str	r1, [r7, #8]
 8005266:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005268:	2300      	movs	r3, #0
 800526a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800526c:	f3ef 8305 	mrs	r3, IPSR
 8005270:	617b      	str	r3, [r7, #20]
  return(result);
 8005272:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005274:	2b00      	cmp	r3, #0
 8005276:	d17e      	bne.n	8005376 <osThreadNew+0x11a>
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d07b      	beq.n	8005376 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800527e:	2380      	movs	r3, #128	; 0x80
 8005280:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005282:	2318      	movs	r3, #24
 8005284:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005286:	2300      	movs	r3, #0
 8005288:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800528a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800528e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d045      	beq.n	8005322 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d002      	beq.n	80052a4 <osThreadNew+0x48>
        name = attr->name;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	699b      	ldr	r3, [r3, #24]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d002      	beq.n	80052b2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	699b      	ldr	r3, [r3, #24]
 80052b0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d008      	beq.n	80052ca <osThreadNew+0x6e>
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	2b38      	cmp	r3, #56	; 0x38
 80052bc:	d805      	bhi.n	80052ca <osThreadNew+0x6e>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	f003 0301 	and.w	r3, r3, #1
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d001      	beq.n	80052ce <osThreadNew+0x72>
        return (NULL);
 80052ca:	2300      	movs	r3, #0
 80052cc:	e054      	b.n	8005378 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	695b      	ldr	r3, [r3, #20]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d003      	beq.n	80052de <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	695b      	ldr	r3, [r3, #20]
 80052da:	089b      	lsrs	r3, r3, #2
 80052dc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d00e      	beq.n	8005304 <osThreadNew+0xa8>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	2ba7      	cmp	r3, #167	; 0xa7
 80052ec:	d90a      	bls.n	8005304 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d006      	beq.n	8005304 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	695b      	ldr	r3, [r3, #20]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d002      	beq.n	8005304 <osThreadNew+0xa8>
        mem = 1;
 80052fe:	2301      	movs	r3, #1
 8005300:	61bb      	str	r3, [r7, #24]
 8005302:	e010      	b.n	8005326 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d10c      	bne.n	8005326 <osThreadNew+0xca>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d108      	bne.n	8005326 <osThreadNew+0xca>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d104      	bne.n	8005326 <osThreadNew+0xca>
          mem = 0;
 800531c:	2300      	movs	r3, #0
 800531e:	61bb      	str	r3, [r7, #24]
 8005320:	e001      	b.n	8005326 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005322:	2300      	movs	r3, #0
 8005324:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005326:	69bb      	ldr	r3, [r7, #24]
 8005328:	2b01      	cmp	r3, #1
 800532a:	d110      	bne.n	800534e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005334:	9202      	str	r2, [sp, #8]
 8005336:	9301      	str	r3, [sp, #4]
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	9300      	str	r3, [sp, #0]
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	6a3a      	ldr	r2, [r7, #32]
 8005340:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005342:	68f8      	ldr	r0, [r7, #12]
 8005344:	f000 feb8 	bl	80060b8 <xTaskCreateStatic>
 8005348:	4603      	mov	r3, r0
 800534a:	613b      	str	r3, [r7, #16]
 800534c:	e013      	b.n	8005376 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d110      	bne.n	8005376 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005354:	6a3b      	ldr	r3, [r7, #32]
 8005356:	b29a      	uxth	r2, r3
 8005358:	f107 0310 	add.w	r3, r7, #16
 800535c:	9301      	str	r3, [sp, #4]
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	9300      	str	r3, [sp, #0]
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005366:	68f8      	ldr	r0, [r7, #12]
 8005368:	f000 ff03 	bl	8006172 <xTaskCreate>
 800536c:	4603      	mov	r3, r0
 800536e:	2b01      	cmp	r3, #1
 8005370:	d001      	beq.n	8005376 <osThreadNew+0x11a>
            hTask = NULL;
 8005372:	2300      	movs	r3, #0
 8005374:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005376:	693b      	ldr	r3, [r7, #16]
}
 8005378:	4618      	mov	r0, r3
 800537a:	3728      	adds	r7, #40	; 0x28
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005388:	f3ef 8305 	mrs	r3, IPSR
 800538c:	60bb      	str	r3, [r7, #8]
  return(result);
 800538e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005390:	2b00      	cmp	r3, #0
 8005392:	d003      	beq.n	800539c <osDelay+0x1c>
    stat = osErrorISR;
 8005394:	f06f 0305 	mvn.w	r3, #5
 8005398:	60fb      	str	r3, [r7, #12]
 800539a:	e007      	b.n	80053ac <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800539c:	2300      	movs	r3, #0
 800539e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d002      	beq.n	80053ac <osDelay+0x2c>
      vTaskDelay(ticks);
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f001 f83e 	bl	8006428 <vTaskDelay>
    }
  }

  return (stat);
 80053ac:	68fb      	ldr	r3, [r7, #12]
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3710      	adds	r7, #16
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}

080053b6 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80053b6:	b580      	push	{r7, lr}
 80053b8:	b08a      	sub	sp, #40	; 0x28
 80053ba:	af02      	add	r7, sp, #8
 80053bc:	60f8      	str	r0, [r7, #12]
 80053be:	60b9      	str	r1, [r7, #8]
 80053c0:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80053c2:	2300      	movs	r3, #0
 80053c4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053c6:	f3ef 8305 	mrs	r3, IPSR
 80053ca:	613b      	str	r3, [r7, #16]
  return(result);
 80053cc:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d15f      	bne.n	8005492 <osMessageQueueNew+0xdc>
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d05c      	beq.n	8005492 <osMessageQueueNew+0xdc>
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d059      	beq.n	8005492 <osMessageQueueNew+0xdc>
    mem = -1;
 80053de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053e2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d029      	beq.n	800543e <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d012      	beq.n	8005418 <osMessageQueueNew+0x62>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	2b4f      	cmp	r3, #79	; 0x4f
 80053f8:	d90e      	bls.n	8005418 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d00a      	beq.n	8005418 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	695a      	ldr	r2, [r3, #20]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	68b9      	ldr	r1, [r7, #8]
 800540a:	fb01 f303 	mul.w	r3, r1, r3
 800540e:	429a      	cmp	r2, r3
 8005410:	d302      	bcc.n	8005418 <osMessageQueueNew+0x62>
        mem = 1;
 8005412:	2301      	movs	r3, #1
 8005414:	61bb      	str	r3, [r7, #24]
 8005416:	e014      	b.n	8005442 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d110      	bne.n	8005442 <osMessageQueueNew+0x8c>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d10c      	bne.n	8005442 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800542c:	2b00      	cmp	r3, #0
 800542e:	d108      	bne.n	8005442 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	695b      	ldr	r3, [r3, #20]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d104      	bne.n	8005442 <osMessageQueueNew+0x8c>
          mem = 0;
 8005438:	2300      	movs	r3, #0
 800543a:	61bb      	str	r3, [r7, #24]
 800543c:	e001      	b.n	8005442 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800543e:	2300      	movs	r3, #0
 8005440:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	2b01      	cmp	r3, #1
 8005446:	d10b      	bne.n	8005460 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	691a      	ldr	r2, [r3, #16]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	2100      	movs	r1, #0
 8005452:	9100      	str	r1, [sp, #0]
 8005454:	68b9      	ldr	r1, [r7, #8]
 8005456:	68f8      	ldr	r0, [r7, #12]
 8005458:	f000 f970 	bl	800573c <xQueueGenericCreateStatic>
 800545c:	61f8      	str	r0, [r7, #28]
 800545e:	e008      	b.n	8005472 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8005460:	69bb      	ldr	r3, [r7, #24]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d105      	bne.n	8005472 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005466:	2200      	movs	r2, #0
 8005468:	68b9      	ldr	r1, [r7, #8]
 800546a:	68f8      	ldr	r0, [r7, #12]
 800546c:	f000 f9de 	bl	800582c <xQueueGenericCreate>
 8005470:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005472:	69fb      	ldr	r3, [r7, #28]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d00c      	beq.n	8005492 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d003      	beq.n	8005486 <osMessageQueueNew+0xd0>
        name = attr->name;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	617b      	str	r3, [r7, #20]
 8005484:	e001      	b.n	800548a <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8005486:	2300      	movs	r3, #0
 8005488:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800548a:	6979      	ldr	r1, [r7, #20]
 800548c:	69f8      	ldr	r0, [r7, #28]
 800548e:	f000 fdb5 	bl	8005ffc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005492:	69fb      	ldr	r3, [r7, #28]
}
 8005494:	4618      	mov	r0, r3
 8005496:	3720      	adds	r7, #32
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}

0800549c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800549c:	b480      	push	{r7}
 800549e:	b085      	sub	sp, #20
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	60b9      	str	r1, [r7, #8]
 80054a6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	4a07      	ldr	r2, [pc, #28]	; (80054c8 <vApplicationGetIdleTaskMemory+0x2c>)
 80054ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	4a06      	ldr	r2, [pc, #24]	; (80054cc <vApplicationGetIdleTaskMemory+0x30>)
 80054b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2280      	movs	r2, #128	; 0x80
 80054b8:	601a      	str	r2, [r3, #0]
}
 80054ba:	bf00      	nop
 80054bc:	3714      	adds	r7, #20
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr
 80054c6:	bf00      	nop
 80054c8:	2000036c 	.word	0x2000036c
 80054cc:	20000414 	.word	0x20000414

080054d0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80054d0:	b480      	push	{r7}
 80054d2:	b085      	sub	sp, #20
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	60f8      	str	r0, [r7, #12]
 80054d8:	60b9      	str	r1, [r7, #8]
 80054da:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	4a07      	ldr	r2, [pc, #28]	; (80054fc <vApplicationGetTimerTaskMemory+0x2c>)
 80054e0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	4a06      	ldr	r2, [pc, #24]	; (8005500 <vApplicationGetTimerTaskMemory+0x30>)
 80054e6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80054ee:	601a      	str	r2, [r3, #0]
}
 80054f0:	bf00      	nop
 80054f2:	3714      	adds	r7, #20
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr
 80054fc:	20000614 	.word	0x20000614
 8005500:	200006bc 	.word	0x200006bc

08005504 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005504:	b480      	push	{r7}
 8005506:	b083      	sub	sp, #12
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f103 0208 	add.w	r2, r3, #8
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800551c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f103 0208 	add.w	r2, r3, #8
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f103 0208 	add.w	r2, r3, #8
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005538:	bf00      	nop
 800553a:	370c      	adds	r7, #12
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr

08005544 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005544:	b480      	push	{r7}
 8005546:	b083      	sub	sp, #12
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2200      	movs	r2, #0
 8005550:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005552:	bf00      	nop
 8005554:	370c      	adds	r7, #12
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr

0800555e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800555e:	b480      	push	{r7}
 8005560:	b085      	sub	sp, #20
 8005562:	af00      	add	r7, sp, #0
 8005564:	6078      	str	r0, [r7, #4]
 8005566:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	68fa      	ldr	r2, [r7, #12]
 8005572:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	689a      	ldr	r2, [r3, #8]
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	683a      	ldr	r2, [r7, #0]
 8005582:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	683a      	ldr	r2, [r7, #0]
 8005588:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	1c5a      	adds	r2, r3, #1
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	601a      	str	r2, [r3, #0]
}
 800559a:	bf00      	nop
 800559c:	3714      	adds	r7, #20
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr

080055a6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80055a6:	b480      	push	{r7}
 80055a8:	b085      	sub	sp, #20
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	6078      	str	r0, [r7, #4]
 80055ae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055bc:	d103      	bne.n	80055c6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	60fb      	str	r3, [r7, #12]
 80055c4:	e00c      	b.n	80055e0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	3308      	adds	r3, #8
 80055ca:	60fb      	str	r3, [r7, #12]
 80055cc:	e002      	b.n	80055d4 <vListInsert+0x2e>
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	60fb      	str	r3, [r7, #12]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	68ba      	ldr	r2, [r7, #8]
 80055dc:	429a      	cmp	r2, r3
 80055de:	d2f6      	bcs.n	80055ce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	685a      	ldr	r2, [r3, #4]
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	683a      	ldr	r2, [r7, #0]
 80055ee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	68fa      	ldr	r2, [r7, #12]
 80055f4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	683a      	ldr	r2, [r7, #0]
 80055fa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	1c5a      	adds	r2, r3, #1
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	601a      	str	r2, [r3, #0]
}
 800560c:	bf00      	nop
 800560e:	3714      	adds	r7, #20
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr

08005618 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005618:	b480      	push	{r7}
 800561a:	b085      	sub	sp, #20
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	691b      	ldr	r3, [r3, #16]
 8005624:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	6892      	ldr	r2, [r2, #8]
 800562e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	6852      	ldr	r2, [r2, #4]
 8005638:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	429a      	cmp	r2, r3
 8005642:	d103      	bne.n	800564c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	689a      	ldr	r2, [r3, #8]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	1e5a      	subs	r2, r3, #1
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
}
 8005660:	4618      	mov	r0, r3
 8005662:	3714      	adds	r7, #20
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b084      	sub	sp, #16
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d10a      	bne.n	8005696 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005684:	f383 8811 	msr	BASEPRI, r3
 8005688:	f3bf 8f6f 	isb	sy
 800568c:	f3bf 8f4f 	dsb	sy
 8005690:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005692:	bf00      	nop
 8005694:	e7fe      	b.n	8005694 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005696:	f002 f8b5 	bl	8007804 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056a2:	68f9      	ldr	r1, [r7, #12]
 80056a4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80056a6:	fb01 f303 	mul.w	r3, r1, r3
 80056aa:	441a      	add	r2, r3
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2200      	movs	r2, #0
 80056b4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056c6:	3b01      	subs	r3, #1
 80056c8:	68f9      	ldr	r1, [r7, #12]
 80056ca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80056cc:	fb01 f303 	mul.w	r3, r1, r3
 80056d0:	441a      	add	r2, r3
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	22ff      	movs	r2, #255	; 0xff
 80056da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	22ff      	movs	r2, #255	; 0xff
 80056e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d114      	bne.n	8005716 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	691b      	ldr	r3, [r3, #16]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d01a      	beq.n	800572a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	3310      	adds	r3, #16
 80056f8:	4618      	mov	r0, r3
 80056fa:	f001 f963 	bl	80069c4 <xTaskRemoveFromEventList>
 80056fe:	4603      	mov	r3, r0
 8005700:	2b00      	cmp	r3, #0
 8005702:	d012      	beq.n	800572a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005704:	4b0c      	ldr	r3, [pc, #48]	; (8005738 <xQueueGenericReset+0xcc>)
 8005706:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800570a:	601a      	str	r2, [r3, #0]
 800570c:	f3bf 8f4f 	dsb	sy
 8005710:	f3bf 8f6f 	isb	sy
 8005714:	e009      	b.n	800572a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	3310      	adds	r3, #16
 800571a:	4618      	mov	r0, r3
 800571c:	f7ff fef2 	bl	8005504 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	3324      	adds	r3, #36	; 0x24
 8005724:	4618      	mov	r0, r3
 8005726:	f7ff feed 	bl	8005504 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800572a:	f002 f89b 	bl	8007864 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800572e:	2301      	movs	r3, #1
}
 8005730:	4618      	mov	r0, r3
 8005732:	3710      	adds	r7, #16
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}
 8005738:	e000ed04 	.word	0xe000ed04

0800573c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800573c:	b580      	push	{r7, lr}
 800573e:	b08e      	sub	sp, #56	; 0x38
 8005740:	af02      	add	r7, sp, #8
 8005742:	60f8      	str	r0, [r7, #12]
 8005744:	60b9      	str	r1, [r7, #8]
 8005746:	607a      	str	r2, [r7, #4]
 8005748:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d10a      	bne.n	8005766 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005754:	f383 8811 	msr	BASEPRI, r3
 8005758:	f3bf 8f6f 	isb	sy
 800575c:	f3bf 8f4f 	dsb	sy
 8005760:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005762:	bf00      	nop
 8005764:	e7fe      	b.n	8005764 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d10a      	bne.n	8005782 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800576c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005770:	f383 8811 	msr	BASEPRI, r3
 8005774:	f3bf 8f6f 	isb	sy
 8005778:	f3bf 8f4f 	dsb	sy
 800577c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800577e:	bf00      	nop
 8005780:	e7fe      	b.n	8005780 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d002      	beq.n	800578e <xQueueGenericCreateStatic+0x52>
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d001      	beq.n	8005792 <xQueueGenericCreateStatic+0x56>
 800578e:	2301      	movs	r3, #1
 8005790:	e000      	b.n	8005794 <xQueueGenericCreateStatic+0x58>
 8005792:	2300      	movs	r3, #0
 8005794:	2b00      	cmp	r3, #0
 8005796:	d10a      	bne.n	80057ae <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800579c:	f383 8811 	msr	BASEPRI, r3
 80057a0:	f3bf 8f6f 	isb	sy
 80057a4:	f3bf 8f4f 	dsb	sy
 80057a8:	623b      	str	r3, [r7, #32]
}
 80057aa:	bf00      	nop
 80057ac:	e7fe      	b.n	80057ac <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d102      	bne.n	80057ba <xQueueGenericCreateStatic+0x7e>
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d101      	bne.n	80057be <xQueueGenericCreateStatic+0x82>
 80057ba:	2301      	movs	r3, #1
 80057bc:	e000      	b.n	80057c0 <xQueueGenericCreateStatic+0x84>
 80057be:	2300      	movs	r3, #0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d10a      	bne.n	80057da <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80057c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c8:	f383 8811 	msr	BASEPRI, r3
 80057cc:	f3bf 8f6f 	isb	sy
 80057d0:	f3bf 8f4f 	dsb	sy
 80057d4:	61fb      	str	r3, [r7, #28]
}
 80057d6:	bf00      	nop
 80057d8:	e7fe      	b.n	80057d8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80057da:	2350      	movs	r3, #80	; 0x50
 80057dc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	2b50      	cmp	r3, #80	; 0x50
 80057e2:	d00a      	beq.n	80057fa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80057e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e8:	f383 8811 	msr	BASEPRI, r3
 80057ec:	f3bf 8f6f 	isb	sy
 80057f0:	f3bf 8f4f 	dsb	sy
 80057f4:	61bb      	str	r3, [r7, #24]
}
 80057f6:	bf00      	nop
 80057f8:	e7fe      	b.n	80057f8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80057fa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005802:	2b00      	cmp	r3, #0
 8005804:	d00d      	beq.n	8005822 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005808:	2201      	movs	r2, #1
 800580a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800580e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005814:	9300      	str	r3, [sp, #0]
 8005816:	4613      	mov	r3, r2
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	68b9      	ldr	r1, [r7, #8]
 800581c:	68f8      	ldr	r0, [r7, #12]
 800581e:	f000 f83f 	bl	80058a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005824:	4618      	mov	r0, r3
 8005826:	3730      	adds	r7, #48	; 0x30
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}

0800582c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800582c:	b580      	push	{r7, lr}
 800582e:	b08a      	sub	sp, #40	; 0x28
 8005830:	af02      	add	r7, sp, #8
 8005832:	60f8      	str	r0, [r7, #12]
 8005834:	60b9      	str	r1, [r7, #8]
 8005836:	4613      	mov	r3, r2
 8005838:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d10a      	bne.n	8005856 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005844:	f383 8811 	msr	BASEPRI, r3
 8005848:	f3bf 8f6f 	isb	sy
 800584c:	f3bf 8f4f 	dsb	sy
 8005850:	613b      	str	r3, [r7, #16]
}
 8005852:	bf00      	nop
 8005854:	e7fe      	b.n	8005854 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	68ba      	ldr	r2, [r7, #8]
 800585a:	fb02 f303 	mul.w	r3, r2, r3
 800585e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	3350      	adds	r3, #80	; 0x50
 8005864:	4618      	mov	r0, r3
 8005866:	f002 f8ef 	bl	8007a48 <pvPortMalloc>
 800586a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800586c:	69bb      	ldr	r3, [r7, #24]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d011      	beq.n	8005896 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005872:	69bb      	ldr	r3, [r7, #24]
 8005874:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	3350      	adds	r3, #80	; 0x50
 800587a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800587c:	69bb      	ldr	r3, [r7, #24]
 800587e:	2200      	movs	r2, #0
 8005880:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005884:	79fa      	ldrb	r2, [r7, #7]
 8005886:	69bb      	ldr	r3, [r7, #24]
 8005888:	9300      	str	r3, [sp, #0]
 800588a:	4613      	mov	r3, r2
 800588c:	697a      	ldr	r2, [r7, #20]
 800588e:	68b9      	ldr	r1, [r7, #8]
 8005890:	68f8      	ldr	r0, [r7, #12]
 8005892:	f000 f805 	bl	80058a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005896:	69bb      	ldr	r3, [r7, #24]
	}
 8005898:	4618      	mov	r0, r3
 800589a:	3720      	adds	r7, #32
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}

080058a0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b084      	sub	sp, #16
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	60f8      	str	r0, [r7, #12]
 80058a8:	60b9      	str	r1, [r7, #8]
 80058aa:	607a      	str	r2, [r7, #4]
 80058ac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d103      	bne.n	80058bc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80058b4:	69bb      	ldr	r3, [r7, #24]
 80058b6:	69ba      	ldr	r2, [r7, #24]
 80058b8:	601a      	str	r2, [r3, #0]
 80058ba:	e002      	b.n	80058c2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80058c2:	69bb      	ldr	r3, [r7, #24]
 80058c4:	68fa      	ldr	r2, [r7, #12]
 80058c6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80058c8:	69bb      	ldr	r3, [r7, #24]
 80058ca:	68ba      	ldr	r2, [r7, #8]
 80058cc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80058ce:	2101      	movs	r1, #1
 80058d0:	69b8      	ldr	r0, [r7, #24]
 80058d2:	f7ff fecb 	bl	800566c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80058d6:	69bb      	ldr	r3, [r7, #24]
 80058d8:	78fa      	ldrb	r2, [r7, #3]
 80058da:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80058de:	bf00      	nop
 80058e0:	3710      	adds	r7, #16
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
	...

080058e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b08e      	sub	sp, #56	; 0x38
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	60b9      	str	r1, [r7, #8]
 80058f2:	607a      	str	r2, [r7, #4]
 80058f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80058f6:	2300      	movs	r3, #0
 80058f8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80058fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005900:	2b00      	cmp	r3, #0
 8005902:	d10a      	bne.n	800591a <xQueueGenericSend+0x32>
	__asm volatile
 8005904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005908:	f383 8811 	msr	BASEPRI, r3
 800590c:	f3bf 8f6f 	isb	sy
 8005910:	f3bf 8f4f 	dsb	sy
 8005914:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005916:	bf00      	nop
 8005918:	e7fe      	b.n	8005918 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d103      	bne.n	8005928 <xQueueGenericSend+0x40>
 8005920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005924:	2b00      	cmp	r3, #0
 8005926:	d101      	bne.n	800592c <xQueueGenericSend+0x44>
 8005928:	2301      	movs	r3, #1
 800592a:	e000      	b.n	800592e <xQueueGenericSend+0x46>
 800592c:	2300      	movs	r3, #0
 800592e:	2b00      	cmp	r3, #0
 8005930:	d10a      	bne.n	8005948 <xQueueGenericSend+0x60>
	__asm volatile
 8005932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005936:	f383 8811 	msr	BASEPRI, r3
 800593a:	f3bf 8f6f 	isb	sy
 800593e:	f3bf 8f4f 	dsb	sy
 8005942:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005944:	bf00      	nop
 8005946:	e7fe      	b.n	8005946 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	2b02      	cmp	r3, #2
 800594c:	d103      	bne.n	8005956 <xQueueGenericSend+0x6e>
 800594e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005952:	2b01      	cmp	r3, #1
 8005954:	d101      	bne.n	800595a <xQueueGenericSend+0x72>
 8005956:	2301      	movs	r3, #1
 8005958:	e000      	b.n	800595c <xQueueGenericSend+0x74>
 800595a:	2300      	movs	r3, #0
 800595c:	2b00      	cmp	r3, #0
 800595e:	d10a      	bne.n	8005976 <xQueueGenericSend+0x8e>
	__asm volatile
 8005960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005964:	f383 8811 	msr	BASEPRI, r3
 8005968:	f3bf 8f6f 	isb	sy
 800596c:	f3bf 8f4f 	dsb	sy
 8005970:	623b      	str	r3, [r7, #32]
}
 8005972:	bf00      	nop
 8005974:	e7fe      	b.n	8005974 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005976:	f001 f9e7 	bl	8006d48 <xTaskGetSchedulerState>
 800597a:	4603      	mov	r3, r0
 800597c:	2b00      	cmp	r3, #0
 800597e:	d102      	bne.n	8005986 <xQueueGenericSend+0x9e>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d101      	bne.n	800598a <xQueueGenericSend+0xa2>
 8005986:	2301      	movs	r3, #1
 8005988:	e000      	b.n	800598c <xQueueGenericSend+0xa4>
 800598a:	2300      	movs	r3, #0
 800598c:	2b00      	cmp	r3, #0
 800598e:	d10a      	bne.n	80059a6 <xQueueGenericSend+0xbe>
	__asm volatile
 8005990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005994:	f383 8811 	msr	BASEPRI, r3
 8005998:	f3bf 8f6f 	isb	sy
 800599c:	f3bf 8f4f 	dsb	sy
 80059a0:	61fb      	str	r3, [r7, #28]
}
 80059a2:	bf00      	nop
 80059a4:	e7fe      	b.n	80059a4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80059a6:	f001 ff2d 	bl	8007804 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80059aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d302      	bcc.n	80059bc <xQueueGenericSend+0xd4>
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	2b02      	cmp	r3, #2
 80059ba:	d129      	bne.n	8005a10 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80059bc:	683a      	ldr	r2, [r7, #0]
 80059be:	68b9      	ldr	r1, [r7, #8]
 80059c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059c2:	f000 fa0b 	bl	8005ddc <prvCopyDataToQueue>
 80059c6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d010      	beq.n	80059f2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d2:	3324      	adds	r3, #36	; 0x24
 80059d4:	4618      	mov	r0, r3
 80059d6:	f000 fff5 	bl	80069c4 <xTaskRemoveFromEventList>
 80059da:	4603      	mov	r3, r0
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d013      	beq.n	8005a08 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80059e0:	4b3f      	ldr	r3, [pc, #252]	; (8005ae0 <xQueueGenericSend+0x1f8>)
 80059e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059e6:	601a      	str	r2, [r3, #0]
 80059e8:	f3bf 8f4f 	dsb	sy
 80059ec:	f3bf 8f6f 	isb	sy
 80059f0:	e00a      	b.n	8005a08 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80059f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d007      	beq.n	8005a08 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80059f8:	4b39      	ldr	r3, [pc, #228]	; (8005ae0 <xQueueGenericSend+0x1f8>)
 80059fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059fe:	601a      	str	r2, [r3, #0]
 8005a00:	f3bf 8f4f 	dsb	sy
 8005a04:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005a08:	f001 ff2c 	bl	8007864 <vPortExitCritical>
				return pdPASS;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e063      	b.n	8005ad8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d103      	bne.n	8005a1e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a16:	f001 ff25 	bl	8007864 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	e05c      	b.n	8005ad8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d106      	bne.n	8005a32 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a24:	f107 0314 	add.w	r3, r7, #20
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f001 f82f 	bl	8006a8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a32:	f001 ff17 	bl	8007864 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a36:	f000 fd9b 	bl	8006570 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a3a:	f001 fee3 	bl	8007804 <vPortEnterCritical>
 8005a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a44:	b25b      	sxtb	r3, r3
 8005a46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a4a:	d103      	bne.n	8005a54 <xQueueGenericSend+0x16c>
 8005a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a5a:	b25b      	sxtb	r3, r3
 8005a5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a60:	d103      	bne.n	8005a6a <xQueueGenericSend+0x182>
 8005a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a64:	2200      	movs	r2, #0
 8005a66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a6a:	f001 fefb 	bl	8007864 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a6e:	1d3a      	adds	r2, r7, #4
 8005a70:	f107 0314 	add.w	r3, r7, #20
 8005a74:	4611      	mov	r1, r2
 8005a76:	4618      	mov	r0, r3
 8005a78:	f001 f81e 	bl	8006ab8 <xTaskCheckForTimeOut>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d124      	bne.n	8005acc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005a82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a84:	f000 faa2 	bl	8005fcc <prvIsQueueFull>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d018      	beq.n	8005ac0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a90:	3310      	adds	r3, #16
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	4611      	mov	r1, r2
 8005a96:	4618      	mov	r0, r3
 8005a98:	f000 ff44 	bl	8006924 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005a9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a9e:	f000 fa2d 	bl	8005efc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005aa2:	f000 fd73 	bl	800658c <xTaskResumeAll>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	f47f af7c 	bne.w	80059a6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005aae:	4b0c      	ldr	r3, [pc, #48]	; (8005ae0 <xQueueGenericSend+0x1f8>)
 8005ab0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ab4:	601a      	str	r2, [r3, #0]
 8005ab6:	f3bf 8f4f 	dsb	sy
 8005aba:	f3bf 8f6f 	isb	sy
 8005abe:	e772      	b.n	80059a6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005ac0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ac2:	f000 fa1b 	bl	8005efc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ac6:	f000 fd61 	bl	800658c <xTaskResumeAll>
 8005aca:	e76c      	b.n	80059a6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005acc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ace:	f000 fa15 	bl	8005efc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005ad2:	f000 fd5b 	bl	800658c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005ad6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3738      	adds	r7, #56	; 0x38
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}
 8005ae0:	e000ed04 	.word	0xe000ed04

08005ae4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b090      	sub	sp, #64	; 0x40
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	60f8      	str	r0, [r7, #12]
 8005aec:	60b9      	str	r1, [r7, #8]
 8005aee:	607a      	str	r2, [r7, #4]
 8005af0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d10a      	bne.n	8005b12 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b00:	f383 8811 	msr	BASEPRI, r3
 8005b04:	f3bf 8f6f 	isb	sy
 8005b08:	f3bf 8f4f 	dsb	sy
 8005b0c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005b0e:	bf00      	nop
 8005b10:	e7fe      	b.n	8005b10 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d103      	bne.n	8005b20 <xQueueGenericSendFromISR+0x3c>
 8005b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d101      	bne.n	8005b24 <xQueueGenericSendFromISR+0x40>
 8005b20:	2301      	movs	r3, #1
 8005b22:	e000      	b.n	8005b26 <xQueueGenericSendFromISR+0x42>
 8005b24:	2300      	movs	r3, #0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d10a      	bne.n	8005b40 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b2e:	f383 8811 	msr	BASEPRI, r3
 8005b32:	f3bf 8f6f 	isb	sy
 8005b36:	f3bf 8f4f 	dsb	sy
 8005b3a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005b3c:	bf00      	nop
 8005b3e:	e7fe      	b.n	8005b3e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	2b02      	cmp	r3, #2
 8005b44:	d103      	bne.n	8005b4e <xQueueGenericSendFromISR+0x6a>
 8005b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d101      	bne.n	8005b52 <xQueueGenericSendFromISR+0x6e>
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e000      	b.n	8005b54 <xQueueGenericSendFromISR+0x70>
 8005b52:	2300      	movs	r3, #0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d10a      	bne.n	8005b6e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b5c:	f383 8811 	msr	BASEPRI, r3
 8005b60:	f3bf 8f6f 	isb	sy
 8005b64:	f3bf 8f4f 	dsb	sy
 8005b68:	623b      	str	r3, [r7, #32]
}
 8005b6a:	bf00      	nop
 8005b6c:	e7fe      	b.n	8005b6c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005b6e:	f001 ff2b 	bl	80079c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005b72:	f3ef 8211 	mrs	r2, BASEPRI
 8005b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b7a:	f383 8811 	msr	BASEPRI, r3
 8005b7e:	f3bf 8f6f 	isb	sy
 8005b82:	f3bf 8f4f 	dsb	sy
 8005b86:	61fa      	str	r2, [r7, #28]
 8005b88:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005b8a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005b8c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d302      	bcc.n	8005ba0 <xQueueGenericSendFromISR+0xbc>
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	2b02      	cmp	r3, #2
 8005b9e:	d12f      	bne.n	8005c00 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ba2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ba6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bae:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005bb0:	683a      	ldr	r2, [r7, #0]
 8005bb2:	68b9      	ldr	r1, [r7, #8]
 8005bb4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005bb6:	f000 f911 	bl	8005ddc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005bba:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005bbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005bc2:	d112      	bne.n	8005bea <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d016      	beq.n	8005bfa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bce:	3324      	adds	r3, #36	; 0x24
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f000 fef7 	bl	80069c4 <xTaskRemoveFromEventList>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d00e      	beq.n	8005bfa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d00b      	beq.n	8005bfa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2201      	movs	r2, #1
 8005be6:	601a      	str	r2, [r3, #0]
 8005be8:	e007      	b.n	8005bfa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005bea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005bee:	3301      	adds	r3, #1
 8005bf0:	b2db      	uxtb	r3, r3
 8005bf2:	b25a      	sxtb	r2, r3
 8005bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005bfe:	e001      	b.n	8005c04 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005c00:	2300      	movs	r3, #0
 8005c02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c06:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005c0e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005c10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3740      	adds	r7, #64	; 0x40
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
	...

08005c1c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b08c      	sub	sp, #48	; 0x30
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	60f8      	str	r0, [r7, #12]
 8005c24:	60b9      	str	r1, [r7, #8]
 8005c26:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d10a      	bne.n	8005c4c <xQueueReceive+0x30>
	__asm volatile
 8005c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c3a:	f383 8811 	msr	BASEPRI, r3
 8005c3e:	f3bf 8f6f 	isb	sy
 8005c42:	f3bf 8f4f 	dsb	sy
 8005c46:	623b      	str	r3, [r7, #32]
}
 8005c48:	bf00      	nop
 8005c4a:	e7fe      	b.n	8005c4a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d103      	bne.n	8005c5a <xQueueReceive+0x3e>
 8005c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d101      	bne.n	8005c5e <xQueueReceive+0x42>
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e000      	b.n	8005c60 <xQueueReceive+0x44>
 8005c5e:	2300      	movs	r3, #0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d10a      	bne.n	8005c7a <xQueueReceive+0x5e>
	__asm volatile
 8005c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c68:	f383 8811 	msr	BASEPRI, r3
 8005c6c:	f3bf 8f6f 	isb	sy
 8005c70:	f3bf 8f4f 	dsb	sy
 8005c74:	61fb      	str	r3, [r7, #28]
}
 8005c76:	bf00      	nop
 8005c78:	e7fe      	b.n	8005c78 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005c7a:	f001 f865 	bl	8006d48 <xTaskGetSchedulerState>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d102      	bne.n	8005c8a <xQueueReceive+0x6e>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d101      	bne.n	8005c8e <xQueueReceive+0x72>
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e000      	b.n	8005c90 <xQueueReceive+0x74>
 8005c8e:	2300      	movs	r3, #0
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d10a      	bne.n	8005caa <xQueueReceive+0x8e>
	__asm volatile
 8005c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c98:	f383 8811 	msr	BASEPRI, r3
 8005c9c:	f3bf 8f6f 	isb	sy
 8005ca0:	f3bf 8f4f 	dsb	sy
 8005ca4:	61bb      	str	r3, [r7, #24]
}
 8005ca6:	bf00      	nop
 8005ca8:	e7fe      	b.n	8005ca8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005caa:	f001 fdab 	bl	8007804 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d01f      	beq.n	8005cfa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005cba:	68b9      	ldr	r1, [r7, #8]
 8005cbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cbe:	f000 f8f7 	bl	8005eb0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc4:	1e5a      	subs	r2, r3, #1
 8005cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ccc:	691b      	ldr	r3, [r3, #16]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d00f      	beq.n	8005cf2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd4:	3310      	adds	r3, #16
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f000 fe74 	bl	80069c4 <xTaskRemoveFromEventList>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d007      	beq.n	8005cf2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005ce2:	4b3d      	ldr	r3, [pc, #244]	; (8005dd8 <xQueueReceive+0x1bc>)
 8005ce4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ce8:	601a      	str	r2, [r3, #0]
 8005cea:	f3bf 8f4f 	dsb	sy
 8005cee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005cf2:	f001 fdb7 	bl	8007864 <vPortExitCritical>
				return pdPASS;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e069      	b.n	8005dce <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d103      	bne.n	8005d08 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005d00:	f001 fdb0 	bl	8007864 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005d04:	2300      	movs	r3, #0
 8005d06:	e062      	b.n	8005dce <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d106      	bne.n	8005d1c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d0e:	f107 0310 	add.w	r3, r7, #16
 8005d12:	4618      	mov	r0, r3
 8005d14:	f000 feba 	bl	8006a8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005d1c:	f001 fda2 	bl	8007864 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005d20:	f000 fc26 	bl	8006570 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d24:	f001 fd6e 	bl	8007804 <vPortEnterCritical>
 8005d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d2e:	b25b      	sxtb	r3, r3
 8005d30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d34:	d103      	bne.n	8005d3e <xQueueReceive+0x122>
 8005d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d44:	b25b      	sxtb	r3, r3
 8005d46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d4a:	d103      	bne.n	8005d54 <xQueueReceive+0x138>
 8005d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d54:	f001 fd86 	bl	8007864 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005d58:	1d3a      	adds	r2, r7, #4
 8005d5a:	f107 0310 	add.w	r3, r7, #16
 8005d5e:	4611      	mov	r1, r2
 8005d60:	4618      	mov	r0, r3
 8005d62:	f000 fea9 	bl	8006ab8 <xTaskCheckForTimeOut>
 8005d66:	4603      	mov	r3, r0
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d123      	bne.n	8005db4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d6e:	f000 f917 	bl	8005fa0 <prvIsQueueEmpty>
 8005d72:	4603      	mov	r3, r0
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d017      	beq.n	8005da8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d7a:	3324      	adds	r3, #36	; 0x24
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	4611      	mov	r1, r2
 8005d80:	4618      	mov	r0, r3
 8005d82:	f000 fdcf 	bl	8006924 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005d86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d88:	f000 f8b8 	bl	8005efc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005d8c:	f000 fbfe 	bl	800658c <xTaskResumeAll>
 8005d90:	4603      	mov	r3, r0
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d189      	bne.n	8005caa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005d96:	4b10      	ldr	r3, [pc, #64]	; (8005dd8 <xQueueReceive+0x1bc>)
 8005d98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d9c:	601a      	str	r2, [r3, #0]
 8005d9e:	f3bf 8f4f 	dsb	sy
 8005da2:	f3bf 8f6f 	isb	sy
 8005da6:	e780      	b.n	8005caa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005da8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005daa:	f000 f8a7 	bl	8005efc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005dae:	f000 fbed 	bl	800658c <xTaskResumeAll>
 8005db2:	e77a      	b.n	8005caa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005db4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005db6:	f000 f8a1 	bl	8005efc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005dba:	f000 fbe7 	bl	800658c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005dbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005dc0:	f000 f8ee 	bl	8005fa0 <prvIsQueueEmpty>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	f43f af6f 	beq.w	8005caa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005dcc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3730      	adds	r7, #48	; 0x30
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	bf00      	nop
 8005dd8:	e000ed04 	.word	0xe000ed04

08005ddc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b086      	sub	sp, #24
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	60b9      	str	r1, [r7, #8]
 8005de6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005de8:	2300      	movs	r3, #0
 8005dea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d10d      	bne.n	8005e16 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d14d      	bne.n	8005e9e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	4618      	mov	r0, r3
 8005e08:	f000 ffbc 	bl	8006d84 <xTaskPriorityDisinherit>
 8005e0c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2200      	movs	r2, #0
 8005e12:	609a      	str	r2, [r3, #8]
 8005e14:	e043      	b.n	8005e9e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d119      	bne.n	8005e50 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6858      	ldr	r0, [r3, #4]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e24:	461a      	mov	r2, r3
 8005e26:	68b9      	ldr	r1, [r7, #8]
 8005e28:	f002 f9b3 	bl	8008192 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	685a      	ldr	r2, [r3, #4]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e34:	441a      	add	r2, r3
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	685a      	ldr	r2, [r3, #4]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d32b      	bcc.n	8005e9e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	605a      	str	r2, [r3, #4]
 8005e4e:	e026      	b.n	8005e9e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	68d8      	ldr	r0, [r3, #12]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e58:	461a      	mov	r2, r3
 8005e5a:	68b9      	ldr	r1, [r7, #8]
 8005e5c:	f002 f999 	bl	8008192 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	68da      	ldr	r2, [r3, #12]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e68:	425b      	negs	r3, r3
 8005e6a:	441a      	add	r2, r3
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	68da      	ldr	r2, [r3, #12]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d207      	bcs.n	8005e8c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	689a      	ldr	r2, [r3, #8]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e84:	425b      	negs	r3, r3
 8005e86:	441a      	add	r2, r3
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2b02      	cmp	r3, #2
 8005e90:	d105      	bne.n	8005e9e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d002      	beq.n	8005e9e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	3b01      	subs	r3, #1
 8005e9c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	1c5a      	adds	r2, r3, #1
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005ea6:	697b      	ldr	r3, [r7, #20]
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3718      	adds	r7, #24
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b082      	sub	sp, #8
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d018      	beq.n	8005ef4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	68da      	ldr	r2, [r3, #12]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eca:	441a      	add	r2, r3
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	68da      	ldr	r2, [r3, #12]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d303      	bcc.n	8005ee4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	68d9      	ldr	r1, [r3, #12]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eec:	461a      	mov	r2, r3
 8005eee:	6838      	ldr	r0, [r7, #0]
 8005ef0:	f002 f94f 	bl	8008192 <memcpy>
	}
}
 8005ef4:	bf00      	nop
 8005ef6:	3708      	adds	r7, #8
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}

08005efc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b084      	sub	sp, #16
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005f04:	f001 fc7e 	bl	8007804 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f0e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f10:	e011      	b.n	8005f36 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d012      	beq.n	8005f40 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	3324      	adds	r3, #36	; 0x24
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f000 fd50 	bl	80069c4 <xTaskRemoveFromEventList>
 8005f24:	4603      	mov	r3, r0
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d001      	beq.n	8005f2e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005f2a:	f000 fe27 	bl	8006b7c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005f2e:	7bfb      	ldrb	r3, [r7, #15]
 8005f30:	3b01      	subs	r3, #1
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	dce9      	bgt.n	8005f12 <prvUnlockQueue+0x16>
 8005f3e:	e000      	b.n	8005f42 <prvUnlockQueue+0x46>
					break;
 8005f40:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	22ff      	movs	r2, #255	; 0xff
 8005f46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005f4a:	f001 fc8b 	bl	8007864 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005f4e:	f001 fc59 	bl	8007804 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f58:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f5a:	e011      	b.n	8005f80 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	691b      	ldr	r3, [r3, #16]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d012      	beq.n	8005f8a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	3310      	adds	r3, #16
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f000 fd2b 	bl	80069c4 <xTaskRemoveFromEventList>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d001      	beq.n	8005f78 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005f74:	f000 fe02 	bl	8006b7c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005f78:	7bbb      	ldrb	r3, [r7, #14]
 8005f7a:	3b01      	subs	r3, #1
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	dce9      	bgt.n	8005f5c <prvUnlockQueue+0x60>
 8005f88:	e000      	b.n	8005f8c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005f8a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	22ff      	movs	r2, #255	; 0xff
 8005f90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005f94:	f001 fc66 	bl	8007864 <vPortExitCritical>
}
 8005f98:	bf00      	nop
 8005f9a:	3710      	adds	r7, #16
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}

08005fa0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b084      	sub	sp, #16
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005fa8:	f001 fc2c 	bl	8007804 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d102      	bne.n	8005fba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	60fb      	str	r3, [r7, #12]
 8005fb8:	e001      	b.n	8005fbe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005fbe:	f001 fc51 	bl	8007864 <vPortExitCritical>

	return xReturn;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3710      	adds	r7, #16
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b084      	sub	sp, #16
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005fd4:	f001 fc16 	bl	8007804 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d102      	bne.n	8005fea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	60fb      	str	r3, [r7, #12]
 8005fe8:	e001      	b.n	8005fee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005fea:	2300      	movs	r3, #0
 8005fec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005fee:	f001 fc39 	bl	8007864 <vPortExitCritical>

	return xReturn;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3710      	adds	r7, #16
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}

08005ffc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b085      	sub	sp, #20
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006006:	2300      	movs	r3, #0
 8006008:	60fb      	str	r3, [r7, #12]
 800600a:	e014      	b.n	8006036 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800600c:	4a0f      	ldr	r2, [pc, #60]	; (800604c <vQueueAddToRegistry+0x50>)
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d10b      	bne.n	8006030 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006018:	490c      	ldr	r1, [pc, #48]	; (800604c <vQueueAddToRegistry+0x50>)
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	683a      	ldr	r2, [r7, #0]
 800601e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006022:	4a0a      	ldr	r2, [pc, #40]	; (800604c <vQueueAddToRegistry+0x50>)
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	00db      	lsls	r3, r3, #3
 8006028:	4413      	add	r3, r2
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800602e:	e006      	b.n	800603e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	3301      	adds	r3, #1
 8006034:	60fb      	str	r3, [r7, #12]
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2b07      	cmp	r3, #7
 800603a:	d9e7      	bls.n	800600c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800603c:	bf00      	nop
 800603e:	bf00      	nop
 8006040:	3714      	adds	r7, #20
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr
 800604a:	bf00      	nop
 800604c:	20000abc 	.word	0x20000abc

08006050 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006050:	b580      	push	{r7, lr}
 8006052:	b086      	sub	sp, #24
 8006054:	af00      	add	r7, sp, #0
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	60b9      	str	r1, [r7, #8]
 800605a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006060:	f001 fbd0 	bl	8007804 <vPortEnterCritical>
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800606a:	b25b      	sxtb	r3, r3
 800606c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006070:	d103      	bne.n	800607a <vQueueWaitForMessageRestricted+0x2a>
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	2200      	movs	r2, #0
 8006076:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006080:	b25b      	sxtb	r3, r3
 8006082:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006086:	d103      	bne.n	8006090 <vQueueWaitForMessageRestricted+0x40>
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	2200      	movs	r2, #0
 800608c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006090:	f001 fbe8 	bl	8007864 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006098:	2b00      	cmp	r3, #0
 800609a:	d106      	bne.n	80060aa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	3324      	adds	r3, #36	; 0x24
 80060a0:	687a      	ldr	r2, [r7, #4]
 80060a2:	68b9      	ldr	r1, [r7, #8]
 80060a4:	4618      	mov	r0, r3
 80060a6:	f000 fc61 	bl	800696c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80060aa:	6978      	ldr	r0, [r7, #20]
 80060ac:	f7ff ff26 	bl	8005efc <prvUnlockQueue>
	}
 80060b0:	bf00      	nop
 80060b2:	3718      	adds	r7, #24
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b08e      	sub	sp, #56	; 0x38
 80060bc:	af04      	add	r7, sp, #16
 80060be:	60f8      	str	r0, [r7, #12]
 80060c0:	60b9      	str	r1, [r7, #8]
 80060c2:	607a      	str	r2, [r7, #4]
 80060c4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80060c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d10a      	bne.n	80060e2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80060cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d0:	f383 8811 	msr	BASEPRI, r3
 80060d4:	f3bf 8f6f 	isb	sy
 80060d8:	f3bf 8f4f 	dsb	sy
 80060dc:	623b      	str	r3, [r7, #32]
}
 80060de:	bf00      	nop
 80060e0:	e7fe      	b.n	80060e0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80060e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d10a      	bne.n	80060fe <xTaskCreateStatic+0x46>
	__asm volatile
 80060e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ec:	f383 8811 	msr	BASEPRI, r3
 80060f0:	f3bf 8f6f 	isb	sy
 80060f4:	f3bf 8f4f 	dsb	sy
 80060f8:	61fb      	str	r3, [r7, #28]
}
 80060fa:	bf00      	nop
 80060fc:	e7fe      	b.n	80060fc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80060fe:	23a8      	movs	r3, #168	; 0xa8
 8006100:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	2ba8      	cmp	r3, #168	; 0xa8
 8006106:	d00a      	beq.n	800611e <xTaskCreateStatic+0x66>
	__asm volatile
 8006108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800610c:	f383 8811 	msr	BASEPRI, r3
 8006110:	f3bf 8f6f 	isb	sy
 8006114:	f3bf 8f4f 	dsb	sy
 8006118:	61bb      	str	r3, [r7, #24]
}
 800611a:	bf00      	nop
 800611c:	e7fe      	b.n	800611c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800611e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006122:	2b00      	cmp	r3, #0
 8006124:	d01e      	beq.n	8006164 <xTaskCreateStatic+0xac>
 8006126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006128:	2b00      	cmp	r3, #0
 800612a:	d01b      	beq.n	8006164 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800612c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800612e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006132:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006134:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006138:	2202      	movs	r2, #2
 800613a:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800613e:	2300      	movs	r3, #0
 8006140:	9303      	str	r3, [sp, #12]
 8006142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006144:	9302      	str	r3, [sp, #8]
 8006146:	f107 0314 	add.w	r3, r7, #20
 800614a:	9301      	str	r3, [sp, #4]
 800614c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800614e:	9300      	str	r3, [sp, #0]
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	68b9      	ldr	r1, [r7, #8]
 8006156:	68f8      	ldr	r0, [r7, #12]
 8006158:	f000 f850 	bl	80061fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800615c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800615e:	f000 f8f3 	bl	8006348 <prvAddNewTaskToReadyList>
 8006162:	e001      	b.n	8006168 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006164:	2300      	movs	r3, #0
 8006166:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006168:	697b      	ldr	r3, [r7, #20]
	}
 800616a:	4618      	mov	r0, r3
 800616c:	3728      	adds	r7, #40	; 0x28
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}

08006172 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006172:	b580      	push	{r7, lr}
 8006174:	b08c      	sub	sp, #48	; 0x30
 8006176:	af04      	add	r7, sp, #16
 8006178:	60f8      	str	r0, [r7, #12]
 800617a:	60b9      	str	r1, [r7, #8]
 800617c:	603b      	str	r3, [r7, #0]
 800617e:	4613      	mov	r3, r2
 8006180:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006182:	88fb      	ldrh	r3, [r7, #6]
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	4618      	mov	r0, r3
 8006188:	f001 fc5e 	bl	8007a48 <pvPortMalloc>
 800618c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d00e      	beq.n	80061b2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006194:	20a8      	movs	r0, #168	; 0xa8
 8006196:	f001 fc57 	bl	8007a48 <pvPortMalloc>
 800619a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800619c:	69fb      	ldr	r3, [r7, #28]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d003      	beq.n	80061aa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80061a2:	69fb      	ldr	r3, [r7, #28]
 80061a4:	697a      	ldr	r2, [r7, #20]
 80061a6:	631a      	str	r2, [r3, #48]	; 0x30
 80061a8:	e005      	b.n	80061b6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80061aa:	6978      	ldr	r0, [r7, #20]
 80061ac:	f001 fd18 	bl	8007be0 <vPortFree>
 80061b0:	e001      	b.n	80061b6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80061b2:	2300      	movs	r3, #0
 80061b4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80061b6:	69fb      	ldr	r3, [r7, #28]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d017      	beq.n	80061ec <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	2200      	movs	r2, #0
 80061c0:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80061c4:	88fa      	ldrh	r2, [r7, #6]
 80061c6:	2300      	movs	r3, #0
 80061c8:	9303      	str	r3, [sp, #12]
 80061ca:	69fb      	ldr	r3, [r7, #28]
 80061cc:	9302      	str	r3, [sp, #8]
 80061ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d0:	9301      	str	r3, [sp, #4]
 80061d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d4:	9300      	str	r3, [sp, #0]
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	68b9      	ldr	r1, [r7, #8]
 80061da:	68f8      	ldr	r0, [r7, #12]
 80061dc:	f000 f80e 	bl	80061fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80061e0:	69f8      	ldr	r0, [r7, #28]
 80061e2:	f000 f8b1 	bl	8006348 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80061e6:	2301      	movs	r3, #1
 80061e8:	61bb      	str	r3, [r7, #24]
 80061ea:	e002      	b.n	80061f2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80061ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80061f0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80061f2:	69bb      	ldr	r3, [r7, #24]
	}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3720      	adds	r7, #32
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}

080061fc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b088      	sub	sp, #32
 8006200:	af00      	add	r7, sp, #0
 8006202:	60f8      	str	r0, [r7, #12]
 8006204:	60b9      	str	r1, [r7, #8]
 8006206:	607a      	str	r2, [r7, #4]
 8006208:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800620a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800620c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	009b      	lsls	r3, r3, #2
 8006212:	461a      	mov	r2, r3
 8006214:	21a5      	movs	r1, #165	; 0xa5
 8006216:	f001 ff31 	bl	800807c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800621a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800621c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006224:	3b01      	subs	r3, #1
 8006226:	009b      	lsls	r3, r3, #2
 8006228:	4413      	add	r3, r2
 800622a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800622c:	69bb      	ldr	r3, [r7, #24]
 800622e:	f023 0307 	bic.w	r3, r3, #7
 8006232:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006234:	69bb      	ldr	r3, [r7, #24]
 8006236:	f003 0307 	and.w	r3, r3, #7
 800623a:	2b00      	cmp	r3, #0
 800623c:	d00a      	beq.n	8006254 <prvInitialiseNewTask+0x58>
	__asm volatile
 800623e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006242:	f383 8811 	msr	BASEPRI, r3
 8006246:	f3bf 8f6f 	isb	sy
 800624a:	f3bf 8f4f 	dsb	sy
 800624e:	617b      	str	r3, [r7, #20]
}
 8006250:	bf00      	nop
 8006252:	e7fe      	b.n	8006252 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d01f      	beq.n	800629a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800625a:	2300      	movs	r3, #0
 800625c:	61fb      	str	r3, [r7, #28]
 800625e:	e012      	b.n	8006286 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006260:	68ba      	ldr	r2, [r7, #8]
 8006262:	69fb      	ldr	r3, [r7, #28]
 8006264:	4413      	add	r3, r2
 8006266:	7819      	ldrb	r1, [r3, #0]
 8006268:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800626a:	69fb      	ldr	r3, [r7, #28]
 800626c:	4413      	add	r3, r2
 800626e:	3334      	adds	r3, #52	; 0x34
 8006270:	460a      	mov	r2, r1
 8006272:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006274:	68ba      	ldr	r2, [r7, #8]
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	4413      	add	r3, r2
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d006      	beq.n	800628e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006280:	69fb      	ldr	r3, [r7, #28]
 8006282:	3301      	adds	r3, #1
 8006284:	61fb      	str	r3, [r7, #28]
 8006286:	69fb      	ldr	r3, [r7, #28]
 8006288:	2b0f      	cmp	r3, #15
 800628a:	d9e9      	bls.n	8006260 <prvInitialiseNewTask+0x64>
 800628c:	e000      	b.n	8006290 <prvInitialiseNewTask+0x94>
			{
				break;
 800628e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006292:	2200      	movs	r2, #0
 8006294:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006298:	e003      	b.n	80062a2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800629a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800629c:	2200      	movs	r2, #0
 800629e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80062a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a4:	2b37      	cmp	r3, #55	; 0x37
 80062a6:	d901      	bls.n	80062ac <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80062a8:	2337      	movs	r3, #55	; 0x37
 80062aa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80062ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062b0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80062b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062b6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80062b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ba:	2200      	movs	r2, #0
 80062bc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80062be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c0:	3304      	adds	r3, #4
 80062c2:	4618      	mov	r0, r3
 80062c4:	f7ff f93e 	bl	8005544 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80062c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ca:	3318      	adds	r3, #24
 80062cc:	4618      	mov	r0, r3
 80062ce:	f7ff f939 	bl	8005544 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80062d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062d6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062da:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80062de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80062e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062e6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80062e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ea:	2200      	movs	r2, #0
 80062ec:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80062f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f2:	2200      	movs	r2, #0
 80062f4:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80062f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062fa:	3354      	adds	r3, #84	; 0x54
 80062fc:	224c      	movs	r2, #76	; 0x4c
 80062fe:	2100      	movs	r1, #0
 8006300:	4618      	mov	r0, r3
 8006302:	f001 febb 	bl	800807c <memset>
 8006306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006308:	4a0c      	ldr	r2, [pc, #48]	; (800633c <prvInitialiseNewTask+0x140>)
 800630a:	659a      	str	r2, [r3, #88]	; 0x58
 800630c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800630e:	4a0c      	ldr	r2, [pc, #48]	; (8006340 <prvInitialiseNewTask+0x144>)
 8006310:	65da      	str	r2, [r3, #92]	; 0x5c
 8006312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006314:	4a0b      	ldr	r2, [pc, #44]	; (8006344 <prvInitialiseNewTask+0x148>)
 8006316:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006318:	683a      	ldr	r2, [r7, #0]
 800631a:	68f9      	ldr	r1, [r7, #12]
 800631c:	69b8      	ldr	r0, [r7, #24]
 800631e:	f001 f941 	bl	80075a4 <pxPortInitialiseStack>
 8006322:	4602      	mov	r2, r0
 8006324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006326:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800632a:	2b00      	cmp	r3, #0
 800632c:	d002      	beq.n	8006334 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800632e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006330:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006332:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006334:	bf00      	nop
 8006336:	3720      	adds	r7, #32
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}
 800633c:	200024d8 	.word	0x200024d8
 8006340:	20002540 	.word	0x20002540
 8006344:	200025a8 	.word	0x200025a8

08006348 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b082      	sub	sp, #8
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006350:	f001 fa58 	bl	8007804 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006354:	4b2d      	ldr	r3, [pc, #180]	; (800640c <prvAddNewTaskToReadyList+0xc4>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	3301      	adds	r3, #1
 800635a:	4a2c      	ldr	r2, [pc, #176]	; (800640c <prvAddNewTaskToReadyList+0xc4>)
 800635c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800635e:	4b2c      	ldr	r3, [pc, #176]	; (8006410 <prvAddNewTaskToReadyList+0xc8>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d109      	bne.n	800637a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006366:	4a2a      	ldr	r2, [pc, #168]	; (8006410 <prvAddNewTaskToReadyList+0xc8>)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800636c:	4b27      	ldr	r3, [pc, #156]	; (800640c <prvAddNewTaskToReadyList+0xc4>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	2b01      	cmp	r3, #1
 8006372:	d110      	bne.n	8006396 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006374:	f000 fc26 	bl	8006bc4 <prvInitialiseTaskLists>
 8006378:	e00d      	b.n	8006396 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800637a:	4b26      	ldr	r3, [pc, #152]	; (8006414 <prvAddNewTaskToReadyList+0xcc>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d109      	bne.n	8006396 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006382:	4b23      	ldr	r3, [pc, #140]	; (8006410 <prvAddNewTaskToReadyList+0xc8>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800638c:	429a      	cmp	r2, r3
 800638e:	d802      	bhi.n	8006396 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006390:	4a1f      	ldr	r2, [pc, #124]	; (8006410 <prvAddNewTaskToReadyList+0xc8>)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006396:	4b20      	ldr	r3, [pc, #128]	; (8006418 <prvAddNewTaskToReadyList+0xd0>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	3301      	adds	r3, #1
 800639c:	4a1e      	ldr	r2, [pc, #120]	; (8006418 <prvAddNewTaskToReadyList+0xd0>)
 800639e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80063a0:	4b1d      	ldr	r3, [pc, #116]	; (8006418 <prvAddNewTaskToReadyList+0xd0>)
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063ac:	4b1b      	ldr	r3, [pc, #108]	; (800641c <prvAddNewTaskToReadyList+0xd4>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d903      	bls.n	80063bc <prvAddNewTaskToReadyList+0x74>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b8:	4a18      	ldr	r2, [pc, #96]	; (800641c <prvAddNewTaskToReadyList+0xd4>)
 80063ba:	6013      	str	r3, [r2, #0]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063c0:	4613      	mov	r3, r2
 80063c2:	009b      	lsls	r3, r3, #2
 80063c4:	4413      	add	r3, r2
 80063c6:	009b      	lsls	r3, r3, #2
 80063c8:	4a15      	ldr	r2, [pc, #84]	; (8006420 <prvAddNewTaskToReadyList+0xd8>)
 80063ca:	441a      	add	r2, r3
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	3304      	adds	r3, #4
 80063d0:	4619      	mov	r1, r3
 80063d2:	4610      	mov	r0, r2
 80063d4:	f7ff f8c3 	bl	800555e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80063d8:	f001 fa44 	bl	8007864 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80063dc:	4b0d      	ldr	r3, [pc, #52]	; (8006414 <prvAddNewTaskToReadyList+0xcc>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d00e      	beq.n	8006402 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80063e4:	4b0a      	ldr	r3, [pc, #40]	; (8006410 <prvAddNewTaskToReadyList+0xc8>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d207      	bcs.n	8006402 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80063f2:	4b0c      	ldr	r3, [pc, #48]	; (8006424 <prvAddNewTaskToReadyList+0xdc>)
 80063f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063f8:	601a      	str	r2, [r3, #0]
 80063fa:	f3bf 8f4f 	dsb	sy
 80063fe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006402:	bf00      	nop
 8006404:	3708      	adds	r7, #8
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}
 800640a:	bf00      	nop
 800640c:	20000fd0 	.word	0x20000fd0
 8006410:	20000afc 	.word	0x20000afc
 8006414:	20000fdc 	.word	0x20000fdc
 8006418:	20000fec 	.word	0x20000fec
 800641c:	20000fd8 	.word	0x20000fd8
 8006420:	20000b00 	.word	0x20000b00
 8006424:	e000ed04 	.word	0xe000ed04

08006428 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006428:	b580      	push	{r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006430:	2300      	movs	r3, #0
 8006432:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d017      	beq.n	800646a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800643a:	4b13      	ldr	r3, [pc, #76]	; (8006488 <vTaskDelay+0x60>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d00a      	beq.n	8006458 <vTaskDelay+0x30>
	__asm volatile
 8006442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006446:	f383 8811 	msr	BASEPRI, r3
 800644a:	f3bf 8f6f 	isb	sy
 800644e:	f3bf 8f4f 	dsb	sy
 8006452:	60bb      	str	r3, [r7, #8]
}
 8006454:	bf00      	nop
 8006456:	e7fe      	b.n	8006456 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006458:	f000 f88a 	bl	8006570 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800645c:	2100      	movs	r1, #0
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f000 fcfe 	bl	8006e60 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006464:	f000 f892 	bl	800658c <xTaskResumeAll>
 8006468:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d107      	bne.n	8006480 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006470:	4b06      	ldr	r3, [pc, #24]	; (800648c <vTaskDelay+0x64>)
 8006472:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006476:	601a      	str	r2, [r3, #0]
 8006478:	f3bf 8f4f 	dsb	sy
 800647c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006480:	bf00      	nop
 8006482:	3710      	adds	r7, #16
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}
 8006488:	20000ff8 	.word	0x20000ff8
 800648c:	e000ed04 	.word	0xe000ed04

08006490 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b08a      	sub	sp, #40	; 0x28
 8006494:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006496:	2300      	movs	r3, #0
 8006498:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800649a:	2300      	movs	r3, #0
 800649c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800649e:	463a      	mov	r2, r7
 80064a0:	1d39      	adds	r1, r7, #4
 80064a2:	f107 0308 	add.w	r3, r7, #8
 80064a6:	4618      	mov	r0, r3
 80064a8:	f7fe fff8 	bl	800549c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80064ac:	6839      	ldr	r1, [r7, #0]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	68ba      	ldr	r2, [r7, #8]
 80064b2:	9202      	str	r2, [sp, #8]
 80064b4:	9301      	str	r3, [sp, #4]
 80064b6:	2300      	movs	r3, #0
 80064b8:	9300      	str	r3, [sp, #0]
 80064ba:	2300      	movs	r3, #0
 80064bc:	460a      	mov	r2, r1
 80064be:	4924      	ldr	r1, [pc, #144]	; (8006550 <vTaskStartScheduler+0xc0>)
 80064c0:	4824      	ldr	r0, [pc, #144]	; (8006554 <vTaskStartScheduler+0xc4>)
 80064c2:	f7ff fdf9 	bl	80060b8 <xTaskCreateStatic>
 80064c6:	4603      	mov	r3, r0
 80064c8:	4a23      	ldr	r2, [pc, #140]	; (8006558 <vTaskStartScheduler+0xc8>)
 80064ca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80064cc:	4b22      	ldr	r3, [pc, #136]	; (8006558 <vTaskStartScheduler+0xc8>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d002      	beq.n	80064da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80064d4:	2301      	movs	r3, #1
 80064d6:	617b      	str	r3, [r7, #20]
 80064d8:	e001      	b.n	80064de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80064da:	2300      	movs	r3, #0
 80064dc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d102      	bne.n	80064ea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80064e4:	f000 fd10 	bl	8006f08 <xTimerCreateTimerTask>
 80064e8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d11b      	bne.n	8006528 <vTaskStartScheduler+0x98>
	__asm volatile
 80064f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f4:	f383 8811 	msr	BASEPRI, r3
 80064f8:	f3bf 8f6f 	isb	sy
 80064fc:	f3bf 8f4f 	dsb	sy
 8006500:	613b      	str	r3, [r7, #16]
}
 8006502:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006504:	4b15      	ldr	r3, [pc, #84]	; (800655c <vTaskStartScheduler+0xcc>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	3354      	adds	r3, #84	; 0x54
 800650a:	4a15      	ldr	r2, [pc, #84]	; (8006560 <vTaskStartScheduler+0xd0>)
 800650c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800650e:	4b15      	ldr	r3, [pc, #84]	; (8006564 <vTaskStartScheduler+0xd4>)
 8006510:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006514:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006516:	4b14      	ldr	r3, [pc, #80]	; (8006568 <vTaskStartScheduler+0xd8>)
 8006518:	2201      	movs	r2, #1
 800651a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800651c:	4b13      	ldr	r3, [pc, #76]	; (800656c <vTaskStartScheduler+0xdc>)
 800651e:	2200      	movs	r2, #0
 8006520:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006522:	f001 f8cd 	bl	80076c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006526:	e00e      	b.n	8006546 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800652e:	d10a      	bne.n	8006546 <vTaskStartScheduler+0xb6>
	__asm volatile
 8006530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006534:	f383 8811 	msr	BASEPRI, r3
 8006538:	f3bf 8f6f 	isb	sy
 800653c:	f3bf 8f4f 	dsb	sy
 8006540:	60fb      	str	r3, [r7, #12]
}
 8006542:	bf00      	nop
 8006544:	e7fe      	b.n	8006544 <vTaskStartScheduler+0xb4>
}
 8006546:	bf00      	nop
 8006548:	3718      	adds	r7, #24
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop
 8006550:	08008e80 	.word	0x08008e80
 8006554:	08006b95 	.word	0x08006b95
 8006558:	20000ff4 	.word	0x20000ff4
 800655c:	20000afc 	.word	0x20000afc
 8006560:	20000068 	.word	0x20000068
 8006564:	20000ff0 	.word	0x20000ff0
 8006568:	20000fdc 	.word	0x20000fdc
 800656c:	20000fd4 	.word	0x20000fd4

08006570 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006570:	b480      	push	{r7}
 8006572:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006574:	4b04      	ldr	r3, [pc, #16]	; (8006588 <vTaskSuspendAll+0x18>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	3301      	adds	r3, #1
 800657a:	4a03      	ldr	r2, [pc, #12]	; (8006588 <vTaskSuspendAll+0x18>)
 800657c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800657e:	bf00      	nop
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr
 8006588:	20000ff8 	.word	0x20000ff8

0800658c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b084      	sub	sp, #16
 8006590:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006592:	2300      	movs	r3, #0
 8006594:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006596:	2300      	movs	r3, #0
 8006598:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800659a:	4b42      	ldr	r3, [pc, #264]	; (80066a4 <xTaskResumeAll+0x118>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d10a      	bne.n	80065b8 <xTaskResumeAll+0x2c>
	__asm volatile
 80065a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a6:	f383 8811 	msr	BASEPRI, r3
 80065aa:	f3bf 8f6f 	isb	sy
 80065ae:	f3bf 8f4f 	dsb	sy
 80065b2:	603b      	str	r3, [r7, #0]
}
 80065b4:	bf00      	nop
 80065b6:	e7fe      	b.n	80065b6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80065b8:	f001 f924 	bl	8007804 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80065bc:	4b39      	ldr	r3, [pc, #228]	; (80066a4 <xTaskResumeAll+0x118>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	3b01      	subs	r3, #1
 80065c2:	4a38      	ldr	r2, [pc, #224]	; (80066a4 <xTaskResumeAll+0x118>)
 80065c4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065c6:	4b37      	ldr	r3, [pc, #220]	; (80066a4 <xTaskResumeAll+0x118>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d162      	bne.n	8006694 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80065ce:	4b36      	ldr	r3, [pc, #216]	; (80066a8 <xTaskResumeAll+0x11c>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d05e      	beq.n	8006694 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80065d6:	e02f      	b.n	8006638 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065d8:	4b34      	ldr	r3, [pc, #208]	; (80066ac <xTaskResumeAll+0x120>)
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	68db      	ldr	r3, [r3, #12]
 80065de:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	3318      	adds	r3, #24
 80065e4:	4618      	mov	r0, r3
 80065e6:	f7ff f817 	bl	8005618 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	3304      	adds	r3, #4
 80065ee:	4618      	mov	r0, r3
 80065f0:	f7ff f812 	bl	8005618 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065f8:	4b2d      	ldr	r3, [pc, #180]	; (80066b0 <xTaskResumeAll+0x124>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d903      	bls.n	8006608 <xTaskResumeAll+0x7c>
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006604:	4a2a      	ldr	r2, [pc, #168]	; (80066b0 <xTaskResumeAll+0x124>)
 8006606:	6013      	str	r3, [r2, #0]
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800660c:	4613      	mov	r3, r2
 800660e:	009b      	lsls	r3, r3, #2
 8006610:	4413      	add	r3, r2
 8006612:	009b      	lsls	r3, r3, #2
 8006614:	4a27      	ldr	r2, [pc, #156]	; (80066b4 <xTaskResumeAll+0x128>)
 8006616:	441a      	add	r2, r3
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	3304      	adds	r3, #4
 800661c:	4619      	mov	r1, r3
 800661e:	4610      	mov	r0, r2
 8006620:	f7fe ff9d 	bl	800555e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006628:	4b23      	ldr	r3, [pc, #140]	; (80066b8 <xTaskResumeAll+0x12c>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800662e:	429a      	cmp	r2, r3
 8006630:	d302      	bcc.n	8006638 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006632:	4b22      	ldr	r3, [pc, #136]	; (80066bc <xTaskResumeAll+0x130>)
 8006634:	2201      	movs	r2, #1
 8006636:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006638:	4b1c      	ldr	r3, [pc, #112]	; (80066ac <xTaskResumeAll+0x120>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d1cb      	bne.n	80065d8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d001      	beq.n	800664a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006646:	f000 fb5f 	bl	8006d08 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800664a:	4b1d      	ldr	r3, [pc, #116]	; (80066c0 <xTaskResumeAll+0x134>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d010      	beq.n	8006678 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006656:	f000 f847 	bl	80066e8 <xTaskIncrementTick>
 800665a:	4603      	mov	r3, r0
 800665c:	2b00      	cmp	r3, #0
 800665e:	d002      	beq.n	8006666 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006660:	4b16      	ldr	r3, [pc, #88]	; (80066bc <xTaskResumeAll+0x130>)
 8006662:	2201      	movs	r2, #1
 8006664:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	3b01      	subs	r3, #1
 800666a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d1f1      	bne.n	8006656 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006672:	4b13      	ldr	r3, [pc, #76]	; (80066c0 <xTaskResumeAll+0x134>)
 8006674:	2200      	movs	r2, #0
 8006676:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006678:	4b10      	ldr	r3, [pc, #64]	; (80066bc <xTaskResumeAll+0x130>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d009      	beq.n	8006694 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006680:	2301      	movs	r3, #1
 8006682:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006684:	4b0f      	ldr	r3, [pc, #60]	; (80066c4 <xTaskResumeAll+0x138>)
 8006686:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800668a:	601a      	str	r2, [r3, #0]
 800668c:	f3bf 8f4f 	dsb	sy
 8006690:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006694:	f001 f8e6 	bl	8007864 <vPortExitCritical>

	return xAlreadyYielded;
 8006698:	68bb      	ldr	r3, [r7, #8]
}
 800669a:	4618      	mov	r0, r3
 800669c:	3710      	adds	r7, #16
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
 80066a2:	bf00      	nop
 80066a4:	20000ff8 	.word	0x20000ff8
 80066a8:	20000fd0 	.word	0x20000fd0
 80066ac:	20000f90 	.word	0x20000f90
 80066b0:	20000fd8 	.word	0x20000fd8
 80066b4:	20000b00 	.word	0x20000b00
 80066b8:	20000afc 	.word	0x20000afc
 80066bc:	20000fe4 	.word	0x20000fe4
 80066c0:	20000fe0 	.word	0x20000fe0
 80066c4:	e000ed04 	.word	0xe000ed04

080066c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80066c8:	b480      	push	{r7}
 80066ca:	b083      	sub	sp, #12
 80066cc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80066ce:	4b05      	ldr	r3, [pc, #20]	; (80066e4 <xTaskGetTickCount+0x1c>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80066d4:	687b      	ldr	r3, [r7, #4]
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	370c      	adds	r7, #12
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr
 80066e2:	bf00      	nop
 80066e4:	20000fd4 	.word	0x20000fd4

080066e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b086      	sub	sp, #24
 80066ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80066ee:	2300      	movs	r3, #0
 80066f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066f2:	4b4f      	ldr	r3, [pc, #316]	; (8006830 <xTaskIncrementTick+0x148>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	f040 808f 	bne.w	800681a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80066fc:	4b4d      	ldr	r3, [pc, #308]	; (8006834 <xTaskIncrementTick+0x14c>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	3301      	adds	r3, #1
 8006702:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006704:	4a4b      	ldr	r2, [pc, #300]	; (8006834 <xTaskIncrementTick+0x14c>)
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d120      	bne.n	8006752 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006710:	4b49      	ldr	r3, [pc, #292]	; (8006838 <xTaskIncrementTick+0x150>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d00a      	beq.n	8006730 <xTaskIncrementTick+0x48>
	__asm volatile
 800671a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800671e:	f383 8811 	msr	BASEPRI, r3
 8006722:	f3bf 8f6f 	isb	sy
 8006726:	f3bf 8f4f 	dsb	sy
 800672a:	603b      	str	r3, [r7, #0]
}
 800672c:	bf00      	nop
 800672e:	e7fe      	b.n	800672e <xTaskIncrementTick+0x46>
 8006730:	4b41      	ldr	r3, [pc, #260]	; (8006838 <xTaskIncrementTick+0x150>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	60fb      	str	r3, [r7, #12]
 8006736:	4b41      	ldr	r3, [pc, #260]	; (800683c <xTaskIncrementTick+0x154>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a3f      	ldr	r2, [pc, #252]	; (8006838 <xTaskIncrementTick+0x150>)
 800673c:	6013      	str	r3, [r2, #0]
 800673e:	4a3f      	ldr	r2, [pc, #252]	; (800683c <xTaskIncrementTick+0x154>)
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	6013      	str	r3, [r2, #0]
 8006744:	4b3e      	ldr	r3, [pc, #248]	; (8006840 <xTaskIncrementTick+0x158>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	3301      	adds	r3, #1
 800674a:	4a3d      	ldr	r2, [pc, #244]	; (8006840 <xTaskIncrementTick+0x158>)
 800674c:	6013      	str	r3, [r2, #0]
 800674e:	f000 fadb 	bl	8006d08 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006752:	4b3c      	ldr	r3, [pc, #240]	; (8006844 <xTaskIncrementTick+0x15c>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	693a      	ldr	r2, [r7, #16]
 8006758:	429a      	cmp	r2, r3
 800675a:	d349      	bcc.n	80067f0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800675c:	4b36      	ldr	r3, [pc, #216]	; (8006838 <xTaskIncrementTick+0x150>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d104      	bne.n	8006770 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006766:	4b37      	ldr	r3, [pc, #220]	; (8006844 <xTaskIncrementTick+0x15c>)
 8006768:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800676c:	601a      	str	r2, [r3, #0]
					break;
 800676e:	e03f      	b.n	80067f0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006770:	4b31      	ldr	r3, [pc, #196]	; (8006838 <xTaskIncrementTick+0x150>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	68db      	ldr	r3, [r3, #12]
 8006776:	68db      	ldr	r3, [r3, #12]
 8006778:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006780:	693a      	ldr	r2, [r7, #16]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	429a      	cmp	r2, r3
 8006786:	d203      	bcs.n	8006790 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006788:	4a2e      	ldr	r2, [pc, #184]	; (8006844 <xTaskIncrementTick+0x15c>)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800678e:	e02f      	b.n	80067f0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	3304      	adds	r3, #4
 8006794:	4618      	mov	r0, r3
 8006796:	f7fe ff3f 	bl	8005618 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d004      	beq.n	80067ac <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	3318      	adds	r3, #24
 80067a6:	4618      	mov	r0, r3
 80067a8:	f7fe ff36 	bl	8005618 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067b0:	4b25      	ldr	r3, [pc, #148]	; (8006848 <xTaskIncrementTick+0x160>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	429a      	cmp	r2, r3
 80067b6:	d903      	bls.n	80067c0 <xTaskIncrementTick+0xd8>
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067bc:	4a22      	ldr	r2, [pc, #136]	; (8006848 <xTaskIncrementTick+0x160>)
 80067be:	6013      	str	r3, [r2, #0]
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067c4:	4613      	mov	r3, r2
 80067c6:	009b      	lsls	r3, r3, #2
 80067c8:	4413      	add	r3, r2
 80067ca:	009b      	lsls	r3, r3, #2
 80067cc:	4a1f      	ldr	r2, [pc, #124]	; (800684c <xTaskIncrementTick+0x164>)
 80067ce:	441a      	add	r2, r3
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	3304      	adds	r3, #4
 80067d4:	4619      	mov	r1, r3
 80067d6:	4610      	mov	r0, r2
 80067d8:	f7fe fec1 	bl	800555e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067e0:	4b1b      	ldr	r3, [pc, #108]	; (8006850 <xTaskIncrementTick+0x168>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d3b8      	bcc.n	800675c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80067ea:	2301      	movs	r3, #1
 80067ec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067ee:	e7b5      	b.n	800675c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80067f0:	4b17      	ldr	r3, [pc, #92]	; (8006850 <xTaskIncrementTick+0x168>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067f6:	4915      	ldr	r1, [pc, #84]	; (800684c <xTaskIncrementTick+0x164>)
 80067f8:	4613      	mov	r3, r2
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	4413      	add	r3, r2
 80067fe:	009b      	lsls	r3, r3, #2
 8006800:	440b      	add	r3, r1
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	2b01      	cmp	r3, #1
 8006806:	d901      	bls.n	800680c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006808:	2301      	movs	r3, #1
 800680a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800680c:	4b11      	ldr	r3, [pc, #68]	; (8006854 <xTaskIncrementTick+0x16c>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d007      	beq.n	8006824 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006814:	2301      	movs	r3, #1
 8006816:	617b      	str	r3, [r7, #20]
 8006818:	e004      	b.n	8006824 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800681a:	4b0f      	ldr	r3, [pc, #60]	; (8006858 <xTaskIncrementTick+0x170>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	3301      	adds	r3, #1
 8006820:	4a0d      	ldr	r2, [pc, #52]	; (8006858 <xTaskIncrementTick+0x170>)
 8006822:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006824:	697b      	ldr	r3, [r7, #20]
}
 8006826:	4618      	mov	r0, r3
 8006828:	3718      	adds	r7, #24
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
 800682e:	bf00      	nop
 8006830:	20000ff8 	.word	0x20000ff8
 8006834:	20000fd4 	.word	0x20000fd4
 8006838:	20000f88 	.word	0x20000f88
 800683c:	20000f8c 	.word	0x20000f8c
 8006840:	20000fe8 	.word	0x20000fe8
 8006844:	20000ff0 	.word	0x20000ff0
 8006848:	20000fd8 	.word	0x20000fd8
 800684c:	20000b00 	.word	0x20000b00
 8006850:	20000afc 	.word	0x20000afc
 8006854:	20000fe4 	.word	0x20000fe4
 8006858:	20000fe0 	.word	0x20000fe0

0800685c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800685c:	b480      	push	{r7}
 800685e:	b085      	sub	sp, #20
 8006860:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006862:	4b2a      	ldr	r3, [pc, #168]	; (800690c <vTaskSwitchContext+0xb0>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d003      	beq.n	8006872 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800686a:	4b29      	ldr	r3, [pc, #164]	; (8006910 <vTaskSwitchContext+0xb4>)
 800686c:	2201      	movs	r2, #1
 800686e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006870:	e046      	b.n	8006900 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8006872:	4b27      	ldr	r3, [pc, #156]	; (8006910 <vTaskSwitchContext+0xb4>)
 8006874:	2200      	movs	r2, #0
 8006876:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006878:	4b26      	ldr	r3, [pc, #152]	; (8006914 <vTaskSwitchContext+0xb8>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	60fb      	str	r3, [r7, #12]
 800687e:	e010      	b.n	80068a2 <vTaskSwitchContext+0x46>
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d10a      	bne.n	800689c <vTaskSwitchContext+0x40>
	__asm volatile
 8006886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800688a:	f383 8811 	msr	BASEPRI, r3
 800688e:	f3bf 8f6f 	isb	sy
 8006892:	f3bf 8f4f 	dsb	sy
 8006896:	607b      	str	r3, [r7, #4]
}
 8006898:	bf00      	nop
 800689a:	e7fe      	b.n	800689a <vTaskSwitchContext+0x3e>
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	3b01      	subs	r3, #1
 80068a0:	60fb      	str	r3, [r7, #12]
 80068a2:	491d      	ldr	r1, [pc, #116]	; (8006918 <vTaskSwitchContext+0xbc>)
 80068a4:	68fa      	ldr	r2, [r7, #12]
 80068a6:	4613      	mov	r3, r2
 80068a8:	009b      	lsls	r3, r3, #2
 80068aa:	4413      	add	r3, r2
 80068ac:	009b      	lsls	r3, r3, #2
 80068ae:	440b      	add	r3, r1
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d0e4      	beq.n	8006880 <vTaskSwitchContext+0x24>
 80068b6:	68fa      	ldr	r2, [r7, #12]
 80068b8:	4613      	mov	r3, r2
 80068ba:	009b      	lsls	r3, r3, #2
 80068bc:	4413      	add	r3, r2
 80068be:	009b      	lsls	r3, r3, #2
 80068c0:	4a15      	ldr	r2, [pc, #84]	; (8006918 <vTaskSwitchContext+0xbc>)
 80068c2:	4413      	add	r3, r2
 80068c4:	60bb      	str	r3, [r7, #8]
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	685a      	ldr	r2, [r3, #4]
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	605a      	str	r2, [r3, #4]
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	685a      	ldr	r2, [r3, #4]
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	3308      	adds	r3, #8
 80068d8:	429a      	cmp	r2, r3
 80068da:	d104      	bne.n	80068e6 <vTaskSwitchContext+0x8a>
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	685a      	ldr	r2, [r3, #4]
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	605a      	str	r2, [r3, #4]
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	68db      	ldr	r3, [r3, #12]
 80068ec:	4a0b      	ldr	r2, [pc, #44]	; (800691c <vTaskSwitchContext+0xc0>)
 80068ee:	6013      	str	r3, [r2, #0]
 80068f0:	4a08      	ldr	r2, [pc, #32]	; (8006914 <vTaskSwitchContext+0xb8>)
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80068f6:	4b09      	ldr	r3, [pc, #36]	; (800691c <vTaskSwitchContext+0xc0>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	3354      	adds	r3, #84	; 0x54
 80068fc:	4a08      	ldr	r2, [pc, #32]	; (8006920 <vTaskSwitchContext+0xc4>)
 80068fe:	6013      	str	r3, [r2, #0]
}
 8006900:	bf00      	nop
 8006902:	3714      	adds	r7, #20
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr
 800690c:	20000ff8 	.word	0x20000ff8
 8006910:	20000fe4 	.word	0x20000fe4
 8006914:	20000fd8 	.word	0x20000fd8
 8006918:	20000b00 	.word	0x20000b00
 800691c:	20000afc 	.word	0x20000afc
 8006920:	20000068 	.word	0x20000068

08006924 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b084      	sub	sp, #16
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d10a      	bne.n	800694a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006938:	f383 8811 	msr	BASEPRI, r3
 800693c:	f3bf 8f6f 	isb	sy
 8006940:	f3bf 8f4f 	dsb	sy
 8006944:	60fb      	str	r3, [r7, #12]
}
 8006946:	bf00      	nop
 8006948:	e7fe      	b.n	8006948 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800694a:	4b07      	ldr	r3, [pc, #28]	; (8006968 <vTaskPlaceOnEventList+0x44>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	3318      	adds	r3, #24
 8006950:	4619      	mov	r1, r3
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f7fe fe27 	bl	80055a6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006958:	2101      	movs	r1, #1
 800695a:	6838      	ldr	r0, [r7, #0]
 800695c:	f000 fa80 	bl	8006e60 <prvAddCurrentTaskToDelayedList>
}
 8006960:	bf00      	nop
 8006962:	3710      	adds	r7, #16
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}
 8006968:	20000afc 	.word	0x20000afc

0800696c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800696c:	b580      	push	{r7, lr}
 800696e:	b086      	sub	sp, #24
 8006970:	af00      	add	r7, sp, #0
 8006972:	60f8      	str	r0, [r7, #12]
 8006974:	60b9      	str	r1, [r7, #8]
 8006976:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d10a      	bne.n	8006994 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800697e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006982:	f383 8811 	msr	BASEPRI, r3
 8006986:	f3bf 8f6f 	isb	sy
 800698a:	f3bf 8f4f 	dsb	sy
 800698e:	617b      	str	r3, [r7, #20]
}
 8006990:	bf00      	nop
 8006992:	e7fe      	b.n	8006992 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006994:	4b0a      	ldr	r3, [pc, #40]	; (80069c0 <vTaskPlaceOnEventListRestricted+0x54>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	3318      	adds	r3, #24
 800699a:	4619      	mov	r1, r3
 800699c:	68f8      	ldr	r0, [r7, #12]
 800699e:	f7fe fdde 	bl	800555e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d002      	beq.n	80069ae <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80069a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80069ac:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80069ae:	6879      	ldr	r1, [r7, #4]
 80069b0:	68b8      	ldr	r0, [r7, #8]
 80069b2:	f000 fa55 	bl	8006e60 <prvAddCurrentTaskToDelayedList>
	}
 80069b6:	bf00      	nop
 80069b8:	3718      	adds	r7, #24
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}
 80069be:	bf00      	nop
 80069c0:	20000afc 	.word	0x20000afc

080069c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b086      	sub	sp, #24
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	68db      	ldr	r3, [r3, #12]
 80069d0:	68db      	ldr	r3, [r3, #12]
 80069d2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d10a      	bne.n	80069f0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80069da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069de:	f383 8811 	msr	BASEPRI, r3
 80069e2:	f3bf 8f6f 	isb	sy
 80069e6:	f3bf 8f4f 	dsb	sy
 80069ea:	60fb      	str	r3, [r7, #12]
}
 80069ec:	bf00      	nop
 80069ee:	e7fe      	b.n	80069ee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	3318      	adds	r3, #24
 80069f4:	4618      	mov	r0, r3
 80069f6:	f7fe fe0f 	bl	8005618 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069fa:	4b1e      	ldr	r3, [pc, #120]	; (8006a74 <xTaskRemoveFromEventList+0xb0>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d11d      	bne.n	8006a3e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	3304      	adds	r3, #4
 8006a06:	4618      	mov	r0, r3
 8006a08:	f7fe fe06 	bl	8005618 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a10:	4b19      	ldr	r3, [pc, #100]	; (8006a78 <xTaskRemoveFromEventList+0xb4>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	429a      	cmp	r2, r3
 8006a16:	d903      	bls.n	8006a20 <xTaskRemoveFromEventList+0x5c>
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a1c:	4a16      	ldr	r2, [pc, #88]	; (8006a78 <xTaskRemoveFromEventList+0xb4>)
 8006a1e:	6013      	str	r3, [r2, #0]
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a24:	4613      	mov	r3, r2
 8006a26:	009b      	lsls	r3, r3, #2
 8006a28:	4413      	add	r3, r2
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	4a13      	ldr	r2, [pc, #76]	; (8006a7c <xTaskRemoveFromEventList+0xb8>)
 8006a2e:	441a      	add	r2, r3
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	3304      	adds	r3, #4
 8006a34:	4619      	mov	r1, r3
 8006a36:	4610      	mov	r0, r2
 8006a38:	f7fe fd91 	bl	800555e <vListInsertEnd>
 8006a3c:	e005      	b.n	8006a4a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	3318      	adds	r3, #24
 8006a42:	4619      	mov	r1, r3
 8006a44:	480e      	ldr	r0, [pc, #56]	; (8006a80 <xTaskRemoveFromEventList+0xbc>)
 8006a46:	f7fe fd8a 	bl	800555e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a4e:	4b0d      	ldr	r3, [pc, #52]	; (8006a84 <xTaskRemoveFromEventList+0xc0>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d905      	bls.n	8006a64 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006a5c:	4b0a      	ldr	r3, [pc, #40]	; (8006a88 <xTaskRemoveFromEventList+0xc4>)
 8006a5e:	2201      	movs	r2, #1
 8006a60:	601a      	str	r2, [r3, #0]
 8006a62:	e001      	b.n	8006a68 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006a64:	2300      	movs	r3, #0
 8006a66:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006a68:	697b      	ldr	r3, [r7, #20]
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3718      	adds	r7, #24
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}
 8006a72:	bf00      	nop
 8006a74:	20000ff8 	.word	0x20000ff8
 8006a78:	20000fd8 	.word	0x20000fd8
 8006a7c:	20000b00 	.word	0x20000b00
 8006a80:	20000f90 	.word	0x20000f90
 8006a84:	20000afc 	.word	0x20000afc
 8006a88:	20000fe4 	.word	0x20000fe4

08006a8c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b083      	sub	sp, #12
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006a94:	4b06      	ldr	r3, [pc, #24]	; (8006ab0 <vTaskInternalSetTimeOutState+0x24>)
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006a9c:	4b05      	ldr	r3, [pc, #20]	; (8006ab4 <vTaskInternalSetTimeOutState+0x28>)
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	605a      	str	r2, [r3, #4]
}
 8006aa4:	bf00      	nop
 8006aa6:	370c      	adds	r7, #12
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aae:	4770      	bx	lr
 8006ab0:	20000fe8 	.word	0x20000fe8
 8006ab4:	20000fd4 	.word	0x20000fd4

08006ab8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b088      	sub	sp, #32
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d10a      	bne.n	8006ade <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006acc:	f383 8811 	msr	BASEPRI, r3
 8006ad0:	f3bf 8f6f 	isb	sy
 8006ad4:	f3bf 8f4f 	dsb	sy
 8006ad8:	613b      	str	r3, [r7, #16]
}
 8006ada:	bf00      	nop
 8006adc:	e7fe      	b.n	8006adc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d10a      	bne.n	8006afa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae8:	f383 8811 	msr	BASEPRI, r3
 8006aec:	f3bf 8f6f 	isb	sy
 8006af0:	f3bf 8f4f 	dsb	sy
 8006af4:	60fb      	str	r3, [r7, #12]
}
 8006af6:	bf00      	nop
 8006af8:	e7fe      	b.n	8006af8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006afa:	f000 fe83 	bl	8007804 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006afe:	4b1d      	ldr	r3, [pc, #116]	; (8006b74 <xTaskCheckForTimeOut+0xbc>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	69ba      	ldr	r2, [r7, #24]
 8006b0a:	1ad3      	subs	r3, r2, r3
 8006b0c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b16:	d102      	bne.n	8006b1e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	61fb      	str	r3, [r7, #28]
 8006b1c:	e023      	b.n	8006b66 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	4b15      	ldr	r3, [pc, #84]	; (8006b78 <xTaskCheckForTimeOut+0xc0>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d007      	beq.n	8006b3a <xTaskCheckForTimeOut+0x82>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	69ba      	ldr	r2, [r7, #24]
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d302      	bcc.n	8006b3a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006b34:	2301      	movs	r3, #1
 8006b36:	61fb      	str	r3, [r7, #28]
 8006b38:	e015      	b.n	8006b66 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	697a      	ldr	r2, [r7, #20]
 8006b40:	429a      	cmp	r2, r3
 8006b42:	d20b      	bcs.n	8006b5c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	681a      	ldr	r2, [r3, #0]
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	1ad2      	subs	r2, r2, r3
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f7ff ff9b 	bl	8006a8c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006b56:	2300      	movs	r3, #0
 8006b58:	61fb      	str	r3, [r7, #28]
 8006b5a:	e004      	b.n	8006b66 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006b62:	2301      	movs	r3, #1
 8006b64:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006b66:	f000 fe7d 	bl	8007864 <vPortExitCritical>

	return xReturn;
 8006b6a:	69fb      	ldr	r3, [r7, #28]
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3720      	adds	r7, #32
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}
 8006b74:	20000fd4 	.word	0x20000fd4
 8006b78:	20000fe8 	.word	0x20000fe8

08006b7c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006b80:	4b03      	ldr	r3, [pc, #12]	; (8006b90 <vTaskMissedYield+0x14>)
 8006b82:	2201      	movs	r2, #1
 8006b84:	601a      	str	r2, [r3, #0]
}
 8006b86:	bf00      	nop
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr
 8006b90:	20000fe4 	.word	0x20000fe4

08006b94 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b082      	sub	sp, #8
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006b9c:	f000 f852 	bl	8006c44 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006ba0:	4b06      	ldr	r3, [pc, #24]	; (8006bbc <prvIdleTask+0x28>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d9f9      	bls.n	8006b9c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006ba8:	4b05      	ldr	r3, [pc, #20]	; (8006bc0 <prvIdleTask+0x2c>)
 8006baa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bae:	601a      	str	r2, [r3, #0]
 8006bb0:	f3bf 8f4f 	dsb	sy
 8006bb4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006bb8:	e7f0      	b.n	8006b9c <prvIdleTask+0x8>
 8006bba:	bf00      	nop
 8006bbc:	20000b00 	.word	0x20000b00
 8006bc0:	e000ed04 	.word	0xe000ed04

08006bc4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b082      	sub	sp, #8
 8006bc8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006bca:	2300      	movs	r3, #0
 8006bcc:	607b      	str	r3, [r7, #4]
 8006bce:	e00c      	b.n	8006bea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	4613      	mov	r3, r2
 8006bd4:	009b      	lsls	r3, r3, #2
 8006bd6:	4413      	add	r3, r2
 8006bd8:	009b      	lsls	r3, r3, #2
 8006bda:	4a12      	ldr	r2, [pc, #72]	; (8006c24 <prvInitialiseTaskLists+0x60>)
 8006bdc:	4413      	add	r3, r2
 8006bde:	4618      	mov	r0, r3
 8006be0:	f7fe fc90 	bl	8005504 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	3301      	adds	r3, #1
 8006be8:	607b      	str	r3, [r7, #4]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2b37      	cmp	r3, #55	; 0x37
 8006bee:	d9ef      	bls.n	8006bd0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006bf0:	480d      	ldr	r0, [pc, #52]	; (8006c28 <prvInitialiseTaskLists+0x64>)
 8006bf2:	f7fe fc87 	bl	8005504 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006bf6:	480d      	ldr	r0, [pc, #52]	; (8006c2c <prvInitialiseTaskLists+0x68>)
 8006bf8:	f7fe fc84 	bl	8005504 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006bfc:	480c      	ldr	r0, [pc, #48]	; (8006c30 <prvInitialiseTaskLists+0x6c>)
 8006bfe:	f7fe fc81 	bl	8005504 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006c02:	480c      	ldr	r0, [pc, #48]	; (8006c34 <prvInitialiseTaskLists+0x70>)
 8006c04:	f7fe fc7e 	bl	8005504 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006c08:	480b      	ldr	r0, [pc, #44]	; (8006c38 <prvInitialiseTaskLists+0x74>)
 8006c0a:	f7fe fc7b 	bl	8005504 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006c0e:	4b0b      	ldr	r3, [pc, #44]	; (8006c3c <prvInitialiseTaskLists+0x78>)
 8006c10:	4a05      	ldr	r2, [pc, #20]	; (8006c28 <prvInitialiseTaskLists+0x64>)
 8006c12:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006c14:	4b0a      	ldr	r3, [pc, #40]	; (8006c40 <prvInitialiseTaskLists+0x7c>)
 8006c16:	4a05      	ldr	r2, [pc, #20]	; (8006c2c <prvInitialiseTaskLists+0x68>)
 8006c18:	601a      	str	r2, [r3, #0]
}
 8006c1a:	bf00      	nop
 8006c1c:	3708      	adds	r7, #8
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}
 8006c22:	bf00      	nop
 8006c24:	20000b00 	.word	0x20000b00
 8006c28:	20000f60 	.word	0x20000f60
 8006c2c:	20000f74 	.word	0x20000f74
 8006c30:	20000f90 	.word	0x20000f90
 8006c34:	20000fa4 	.word	0x20000fa4
 8006c38:	20000fbc 	.word	0x20000fbc
 8006c3c:	20000f88 	.word	0x20000f88
 8006c40:	20000f8c 	.word	0x20000f8c

08006c44 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b082      	sub	sp, #8
 8006c48:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006c4a:	e019      	b.n	8006c80 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006c4c:	f000 fdda 	bl	8007804 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c50:	4b10      	ldr	r3, [pc, #64]	; (8006c94 <prvCheckTasksWaitingTermination+0x50>)
 8006c52:	68db      	ldr	r3, [r3, #12]
 8006c54:	68db      	ldr	r3, [r3, #12]
 8006c56:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	3304      	adds	r3, #4
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f7fe fcdb 	bl	8005618 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006c62:	4b0d      	ldr	r3, [pc, #52]	; (8006c98 <prvCheckTasksWaitingTermination+0x54>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	3b01      	subs	r3, #1
 8006c68:	4a0b      	ldr	r2, [pc, #44]	; (8006c98 <prvCheckTasksWaitingTermination+0x54>)
 8006c6a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006c6c:	4b0b      	ldr	r3, [pc, #44]	; (8006c9c <prvCheckTasksWaitingTermination+0x58>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	3b01      	subs	r3, #1
 8006c72:	4a0a      	ldr	r2, [pc, #40]	; (8006c9c <prvCheckTasksWaitingTermination+0x58>)
 8006c74:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006c76:	f000 fdf5 	bl	8007864 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f000 f810 	bl	8006ca0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006c80:	4b06      	ldr	r3, [pc, #24]	; (8006c9c <prvCheckTasksWaitingTermination+0x58>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d1e1      	bne.n	8006c4c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006c88:	bf00      	nop
 8006c8a:	bf00      	nop
 8006c8c:	3708      	adds	r7, #8
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
 8006c92:	bf00      	nop
 8006c94:	20000fa4 	.word	0x20000fa4
 8006c98:	20000fd0 	.word	0x20000fd0
 8006c9c:	20000fb8 	.word	0x20000fb8

08006ca0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b084      	sub	sp, #16
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	3354      	adds	r3, #84	; 0x54
 8006cac:	4618      	mov	r0, r3
 8006cae:	f001 f9ed 	bl	800808c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d108      	bne.n	8006cce <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f000 ff8d 	bl	8007be0 <vPortFree>
				vPortFree( pxTCB );
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 ff8a 	bl	8007be0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006ccc:	e018      	b.n	8006d00 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d103      	bne.n	8006ce0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f000 ff81 	bl	8007be0 <vPortFree>
	}
 8006cde:	e00f      	b.n	8006d00 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006ce6:	2b02      	cmp	r3, #2
 8006ce8:	d00a      	beq.n	8006d00 <prvDeleteTCB+0x60>
	__asm volatile
 8006cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cee:	f383 8811 	msr	BASEPRI, r3
 8006cf2:	f3bf 8f6f 	isb	sy
 8006cf6:	f3bf 8f4f 	dsb	sy
 8006cfa:	60fb      	str	r3, [r7, #12]
}
 8006cfc:	bf00      	nop
 8006cfe:	e7fe      	b.n	8006cfe <prvDeleteTCB+0x5e>
	}
 8006d00:	bf00      	nop
 8006d02:	3710      	adds	r7, #16
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}

08006d08 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b083      	sub	sp, #12
 8006d0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d0e:	4b0c      	ldr	r3, [pc, #48]	; (8006d40 <prvResetNextTaskUnblockTime+0x38>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d104      	bne.n	8006d22 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006d18:	4b0a      	ldr	r3, [pc, #40]	; (8006d44 <prvResetNextTaskUnblockTime+0x3c>)
 8006d1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d1e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006d20:	e008      	b.n	8006d34 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d22:	4b07      	ldr	r3, [pc, #28]	; (8006d40 <prvResetNextTaskUnblockTime+0x38>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	68db      	ldr	r3, [r3, #12]
 8006d28:	68db      	ldr	r3, [r3, #12]
 8006d2a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	4a04      	ldr	r2, [pc, #16]	; (8006d44 <prvResetNextTaskUnblockTime+0x3c>)
 8006d32:	6013      	str	r3, [r2, #0]
}
 8006d34:	bf00      	nop
 8006d36:	370c      	adds	r7, #12
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr
 8006d40:	20000f88 	.word	0x20000f88
 8006d44:	20000ff0 	.word	0x20000ff0

08006d48 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006d48:	b480      	push	{r7}
 8006d4a:	b083      	sub	sp, #12
 8006d4c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006d4e:	4b0b      	ldr	r3, [pc, #44]	; (8006d7c <xTaskGetSchedulerState+0x34>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d102      	bne.n	8006d5c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006d56:	2301      	movs	r3, #1
 8006d58:	607b      	str	r3, [r7, #4]
 8006d5a:	e008      	b.n	8006d6e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d5c:	4b08      	ldr	r3, [pc, #32]	; (8006d80 <xTaskGetSchedulerState+0x38>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d102      	bne.n	8006d6a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006d64:	2302      	movs	r3, #2
 8006d66:	607b      	str	r3, [r7, #4]
 8006d68:	e001      	b.n	8006d6e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006d6e:	687b      	ldr	r3, [r7, #4]
	}
 8006d70:	4618      	mov	r0, r3
 8006d72:	370c      	adds	r7, #12
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr
 8006d7c:	20000fdc 	.word	0x20000fdc
 8006d80:	20000ff8 	.word	0x20000ff8

08006d84 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b086      	sub	sp, #24
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006d90:	2300      	movs	r3, #0
 8006d92:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d056      	beq.n	8006e48 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006d9a:	4b2e      	ldr	r3, [pc, #184]	; (8006e54 <xTaskPriorityDisinherit+0xd0>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	693a      	ldr	r2, [r7, #16]
 8006da0:	429a      	cmp	r2, r3
 8006da2:	d00a      	beq.n	8006dba <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da8:	f383 8811 	msr	BASEPRI, r3
 8006dac:	f3bf 8f6f 	isb	sy
 8006db0:	f3bf 8f4f 	dsb	sy
 8006db4:	60fb      	str	r3, [r7, #12]
}
 8006db6:	bf00      	nop
 8006db8:	e7fe      	b.n	8006db8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d10a      	bne.n	8006dd8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc6:	f383 8811 	msr	BASEPRI, r3
 8006dca:	f3bf 8f6f 	isb	sy
 8006dce:	f3bf 8f4f 	dsb	sy
 8006dd2:	60bb      	str	r3, [r7, #8]
}
 8006dd4:	bf00      	nop
 8006dd6:	e7fe      	b.n	8006dd6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ddc:	1e5a      	subs	r2, r3, #1
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d02c      	beq.n	8006e48 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d128      	bne.n	8006e48 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	3304      	adds	r3, #4
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f7fe fc0c 	bl	8005618 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e0c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e18:	4b0f      	ldr	r3, [pc, #60]	; (8006e58 <xTaskPriorityDisinherit+0xd4>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d903      	bls.n	8006e28 <xTaskPriorityDisinherit+0xa4>
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e24:	4a0c      	ldr	r2, [pc, #48]	; (8006e58 <xTaskPriorityDisinherit+0xd4>)
 8006e26:	6013      	str	r3, [r2, #0]
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e2c:	4613      	mov	r3, r2
 8006e2e:	009b      	lsls	r3, r3, #2
 8006e30:	4413      	add	r3, r2
 8006e32:	009b      	lsls	r3, r3, #2
 8006e34:	4a09      	ldr	r2, [pc, #36]	; (8006e5c <xTaskPriorityDisinherit+0xd8>)
 8006e36:	441a      	add	r2, r3
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	3304      	adds	r3, #4
 8006e3c:	4619      	mov	r1, r3
 8006e3e:	4610      	mov	r0, r2
 8006e40:	f7fe fb8d 	bl	800555e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006e44:	2301      	movs	r3, #1
 8006e46:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006e48:	697b      	ldr	r3, [r7, #20]
	}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3718      	adds	r7, #24
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
 8006e52:	bf00      	nop
 8006e54:	20000afc 	.word	0x20000afc
 8006e58:	20000fd8 	.word	0x20000fd8
 8006e5c:	20000b00 	.word	0x20000b00

08006e60 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b084      	sub	sp, #16
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006e6a:	4b21      	ldr	r3, [pc, #132]	; (8006ef0 <prvAddCurrentTaskToDelayedList+0x90>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e70:	4b20      	ldr	r3, [pc, #128]	; (8006ef4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	3304      	adds	r3, #4
 8006e76:	4618      	mov	r0, r3
 8006e78:	f7fe fbce 	bl	8005618 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e82:	d10a      	bne.n	8006e9a <prvAddCurrentTaskToDelayedList+0x3a>
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d007      	beq.n	8006e9a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e8a:	4b1a      	ldr	r3, [pc, #104]	; (8006ef4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	3304      	adds	r3, #4
 8006e90:	4619      	mov	r1, r3
 8006e92:	4819      	ldr	r0, [pc, #100]	; (8006ef8 <prvAddCurrentTaskToDelayedList+0x98>)
 8006e94:	f7fe fb63 	bl	800555e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006e98:	e026      	b.n	8006ee8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006e9a:	68fa      	ldr	r2, [r7, #12]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	4413      	add	r3, r2
 8006ea0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006ea2:	4b14      	ldr	r3, [pc, #80]	; (8006ef4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	68ba      	ldr	r2, [r7, #8]
 8006ea8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006eaa:	68ba      	ldr	r2, [r7, #8]
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	d209      	bcs.n	8006ec6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006eb2:	4b12      	ldr	r3, [pc, #72]	; (8006efc <prvAddCurrentTaskToDelayedList+0x9c>)
 8006eb4:	681a      	ldr	r2, [r3, #0]
 8006eb6:	4b0f      	ldr	r3, [pc, #60]	; (8006ef4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	3304      	adds	r3, #4
 8006ebc:	4619      	mov	r1, r3
 8006ebe:	4610      	mov	r0, r2
 8006ec0:	f7fe fb71 	bl	80055a6 <vListInsert>
}
 8006ec4:	e010      	b.n	8006ee8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ec6:	4b0e      	ldr	r3, [pc, #56]	; (8006f00 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006ec8:	681a      	ldr	r2, [r3, #0]
 8006eca:	4b0a      	ldr	r3, [pc, #40]	; (8006ef4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	3304      	adds	r3, #4
 8006ed0:	4619      	mov	r1, r3
 8006ed2:	4610      	mov	r0, r2
 8006ed4:	f7fe fb67 	bl	80055a6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006ed8:	4b0a      	ldr	r3, [pc, #40]	; (8006f04 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	68ba      	ldr	r2, [r7, #8]
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d202      	bcs.n	8006ee8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006ee2:	4a08      	ldr	r2, [pc, #32]	; (8006f04 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	6013      	str	r3, [r2, #0]
}
 8006ee8:	bf00      	nop
 8006eea:	3710      	adds	r7, #16
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}
 8006ef0:	20000fd4 	.word	0x20000fd4
 8006ef4:	20000afc 	.word	0x20000afc
 8006ef8:	20000fbc 	.word	0x20000fbc
 8006efc:	20000f8c 	.word	0x20000f8c
 8006f00:	20000f88 	.word	0x20000f88
 8006f04:	20000ff0 	.word	0x20000ff0

08006f08 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b08a      	sub	sp, #40	; 0x28
 8006f0c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006f12:	f000 fb07 	bl	8007524 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006f16:	4b1c      	ldr	r3, [pc, #112]	; (8006f88 <xTimerCreateTimerTask+0x80>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d021      	beq.n	8006f62 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006f22:	2300      	movs	r3, #0
 8006f24:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006f26:	1d3a      	adds	r2, r7, #4
 8006f28:	f107 0108 	add.w	r1, r7, #8
 8006f2c:	f107 030c 	add.w	r3, r7, #12
 8006f30:	4618      	mov	r0, r3
 8006f32:	f7fe facd 	bl	80054d0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006f36:	6879      	ldr	r1, [r7, #4]
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	68fa      	ldr	r2, [r7, #12]
 8006f3c:	9202      	str	r2, [sp, #8]
 8006f3e:	9301      	str	r3, [sp, #4]
 8006f40:	2302      	movs	r3, #2
 8006f42:	9300      	str	r3, [sp, #0]
 8006f44:	2300      	movs	r3, #0
 8006f46:	460a      	mov	r2, r1
 8006f48:	4910      	ldr	r1, [pc, #64]	; (8006f8c <xTimerCreateTimerTask+0x84>)
 8006f4a:	4811      	ldr	r0, [pc, #68]	; (8006f90 <xTimerCreateTimerTask+0x88>)
 8006f4c:	f7ff f8b4 	bl	80060b8 <xTaskCreateStatic>
 8006f50:	4603      	mov	r3, r0
 8006f52:	4a10      	ldr	r2, [pc, #64]	; (8006f94 <xTimerCreateTimerTask+0x8c>)
 8006f54:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006f56:	4b0f      	ldr	r3, [pc, #60]	; (8006f94 <xTimerCreateTimerTask+0x8c>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d001      	beq.n	8006f62 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d10a      	bne.n	8006f7e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f6c:	f383 8811 	msr	BASEPRI, r3
 8006f70:	f3bf 8f6f 	isb	sy
 8006f74:	f3bf 8f4f 	dsb	sy
 8006f78:	613b      	str	r3, [r7, #16]
}
 8006f7a:	bf00      	nop
 8006f7c:	e7fe      	b.n	8006f7c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006f7e:	697b      	ldr	r3, [r7, #20]
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3718      	adds	r7, #24
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}
 8006f88:	2000102c 	.word	0x2000102c
 8006f8c:	08008e88 	.word	0x08008e88
 8006f90:	080070cd 	.word	0x080070cd
 8006f94:	20001030 	.word	0x20001030

08006f98 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b08a      	sub	sp, #40	; 0x28
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	60f8      	str	r0, [r7, #12]
 8006fa0:	60b9      	str	r1, [r7, #8]
 8006fa2:	607a      	str	r2, [r7, #4]
 8006fa4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d10a      	bne.n	8006fc6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb4:	f383 8811 	msr	BASEPRI, r3
 8006fb8:	f3bf 8f6f 	isb	sy
 8006fbc:	f3bf 8f4f 	dsb	sy
 8006fc0:	623b      	str	r3, [r7, #32]
}
 8006fc2:	bf00      	nop
 8006fc4:	e7fe      	b.n	8006fc4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006fc6:	4b1a      	ldr	r3, [pc, #104]	; (8007030 <xTimerGenericCommand+0x98>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d02a      	beq.n	8007024 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	2b05      	cmp	r3, #5
 8006fde:	dc18      	bgt.n	8007012 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006fe0:	f7ff feb2 	bl	8006d48 <xTaskGetSchedulerState>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	2b02      	cmp	r3, #2
 8006fe8:	d109      	bne.n	8006ffe <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006fea:	4b11      	ldr	r3, [pc, #68]	; (8007030 <xTimerGenericCommand+0x98>)
 8006fec:	6818      	ldr	r0, [r3, #0]
 8006fee:	f107 0110 	add.w	r1, r7, #16
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ff6:	f7fe fc77 	bl	80058e8 <xQueueGenericSend>
 8006ffa:	6278      	str	r0, [r7, #36]	; 0x24
 8006ffc:	e012      	b.n	8007024 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006ffe:	4b0c      	ldr	r3, [pc, #48]	; (8007030 <xTimerGenericCommand+0x98>)
 8007000:	6818      	ldr	r0, [r3, #0]
 8007002:	f107 0110 	add.w	r1, r7, #16
 8007006:	2300      	movs	r3, #0
 8007008:	2200      	movs	r2, #0
 800700a:	f7fe fc6d 	bl	80058e8 <xQueueGenericSend>
 800700e:	6278      	str	r0, [r7, #36]	; 0x24
 8007010:	e008      	b.n	8007024 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007012:	4b07      	ldr	r3, [pc, #28]	; (8007030 <xTimerGenericCommand+0x98>)
 8007014:	6818      	ldr	r0, [r3, #0]
 8007016:	f107 0110 	add.w	r1, r7, #16
 800701a:	2300      	movs	r3, #0
 800701c:	683a      	ldr	r2, [r7, #0]
 800701e:	f7fe fd61 	bl	8005ae4 <xQueueGenericSendFromISR>
 8007022:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007026:	4618      	mov	r0, r3
 8007028:	3728      	adds	r7, #40	; 0x28
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}
 800702e:	bf00      	nop
 8007030:	2000102c 	.word	0x2000102c

08007034 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b088      	sub	sp, #32
 8007038:	af02      	add	r7, sp, #8
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800703e:	4b22      	ldr	r3, [pc, #136]	; (80070c8 <prvProcessExpiredTimer+0x94>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	68db      	ldr	r3, [r3, #12]
 8007044:	68db      	ldr	r3, [r3, #12]
 8007046:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	3304      	adds	r3, #4
 800704c:	4618      	mov	r0, r3
 800704e:	f7fe fae3 	bl	8005618 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007058:	f003 0304 	and.w	r3, r3, #4
 800705c:	2b00      	cmp	r3, #0
 800705e:	d022      	beq.n	80070a6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	699a      	ldr	r2, [r3, #24]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	18d1      	adds	r1, r2, r3
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	683a      	ldr	r2, [r7, #0]
 800706c:	6978      	ldr	r0, [r7, #20]
 800706e:	f000 f8d1 	bl	8007214 <prvInsertTimerInActiveList>
 8007072:	4603      	mov	r3, r0
 8007074:	2b00      	cmp	r3, #0
 8007076:	d01f      	beq.n	80070b8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007078:	2300      	movs	r3, #0
 800707a:	9300      	str	r3, [sp, #0]
 800707c:	2300      	movs	r3, #0
 800707e:	687a      	ldr	r2, [r7, #4]
 8007080:	2100      	movs	r1, #0
 8007082:	6978      	ldr	r0, [r7, #20]
 8007084:	f7ff ff88 	bl	8006f98 <xTimerGenericCommand>
 8007088:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d113      	bne.n	80070b8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007094:	f383 8811 	msr	BASEPRI, r3
 8007098:	f3bf 8f6f 	isb	sy
 800709c:	f3bf 8f4f 	dsb	sy
 80070a0:	60fb      	str	r3, [r7, #12]
}
 80070a2:	bf00      	nop
 80070a4:	e7fe      	b.n	80070a4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070ac:	f023 0301 	bic.w	r3, r3, #1
 80070b0:	b2da      	uxtb	r2, r3
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	6a1b      	ldr	r3, [r3, #32]
 80070bc:	6978      	ldr	r0, [r7, #20]
 80070be:	4798      	blx	r3
}
 80070c0:	bf00      	nop
 80070c2:	3718      	adds	r7, #24
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}
 80070c8:	20001024 	.word	0x20001024

080070cc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b084      	sub	sp, #16
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80070d4:	f107 0308 	add.w	r3, r7, #8
 80070d8:	4618      	mov	r0, r3
 80070da:	f000 f857 	bl	800718c <prvGetNextExpireTime>
 80070de:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	4619      	mov	r1, r3
 80070e4:	68f8      	ldr	r0, [r7, #12]
 80070e6:	f000 f803 	bl	80070f0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80070ea:	f000 f8d5 	bl	8007298 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80070ee:	e7f1      	b.n	80070d4 <prvTimerTask+0x8>

080070f0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b084      	sub	sp, #16
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80070fa:	f7ff fa39 	bl	8006570 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80070fe:	f107 0308 	add.w	r3, r7, #8
 8007102:	4618      	mov	r0, r3
 8007104:	f000 f866 	bl	80071d4 <prvSampleTimeNow>
 8007108:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d130      	bne.n	8007172 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d10a      	bne.n	800712c <prvProcessTimerOrBlockTask+0x3c>
 8007116:	687a      	ldr	r2, [r7, #4]
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	429a      	cmp	r2, r3
 800711c:	d806      	bhi.n	800712c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800711e:	f7ff fa35 	bl	800658c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007122:	68f9      	ldr	r1, [r7, #12]
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f7ff ff85 	bl	8007034 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800712a:	e024      	b.n	8007176 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d008      	beq.n	8007144 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007132:	4b13      	ldr	r3, [pc, #76]	; (8007180 <prvProcessTimerOrBlockTask+0x90>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d101      	bne.n	8007140 <prvProcessTimerOrBlockTask+0x50>
 800713c:	2301      	movs	r3, #1
 800713e:	e000      	b.n	8007142 <prvProcessTimerOrBlockTask+0x52>
 8007140:	2300      	movs	r3, #0
 8007142:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007144:	4b0f      	ldr	r3, [pc, #60]	; (8007184 <prvProcessTimerOrBlockTask+0x94>)
 8007146:	6818      	ldr	r0, [r3, #0]
 8007148:	687a      	ldr	r2, [r7, #4]
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	1ad3      	subs	r3, r2, r3
 800714e:	683a      	ldr	r2, [r7, #0]
 8007150:	4619      	mov	r1, r3
 8007152:	f7fe ff7d 	bl	8006050 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007156:	f7ff fa19 	bl	800658c <xTaskResumeAll>
 800715a:	4603      	mov	r3, r0
 800715c:	2b00      	cmp	r3, #0
 800715e:	d10a      	bne.n	8007176 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007160:	4b09      	ldr	r3, [pc, #36]	; (8007188 <prvProcessTimerOrBlockTask+0x98>)
 8007162:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007166:	601a      	str	r2, [r3, #0]
 8007168:	f3bf 8f4f 	dsb	sy
 800716c:	f3bf 8f6f 	isb	sy
}
 8007170:	e001      	b.n	8007176 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007172:	f7ff fa0b 	bl	800658c <xTaskResumeAll>
}
 8007176:	bf00      	nop
 8007178:	3710      	adds	r7, #16
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}
 800717e:	bf00      	nop
 8007180:	20001028 	.word	0x20001028
 8007184:	2000102c 	.word	0x2000102c
 8007188:	e000ed04 	.word	0xe000ed04

0800718c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800718c:	b480      	push	{r7}
 800718e:	b085      	sub	sp, #20
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007194:	4b0e      	ldr	r3, [pc, #56]	; (80071d0 <prvGetNextExpireTime+0x44>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d101      	bne.n	80071a2 <prvGetNextExpireTime+0x16>
 800719e:	2201      	movs	r2, #1
 80071a0:	e000      	b.n	80071a4 <prvGetNextExpireTime+0x18>
 80071a2:	2200      	movs	r2, #0
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d105      	bne.n	80071bc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80071b0:	4b07      	ldr	r3, [pc, #28]	; (80071d0 <prvGetNextExpireTime+0x44>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	68db      	ldr	r3, [r3, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	60fb      	str	r3, [r7, #12]
 80071ba:	e001      	b.n	80071c0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80071bc:	2300      	movs	r3, #0
 80071be:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80071c0:	68fb      	ldr	r3, [r7, #12]
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3714      	adds	r7, #20
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr
 80071ce:	bf00      	nop
 80071d0:	20001024 	.word	0x20001024

080071d4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b084      	sub	sp, #16
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80071dc:	f7ff fa74 	bl	80066c8 <xTaskGetTickCount>
 80071e0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80071e2:	4b0b      	ldr	r3, [pc, #44]	; (8007210 <prvSampleTimeNow+0x3c>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	68fa      	ldr	r2, [r7, #12]
 80071e8:	429a      	cmp	r2, r3
 80071ea:	d205      	bcs.n	80071f8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80071ec:	f000 f936 	bl	800745c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2201      	movs	r2, #1
 80071f4:	601a      	str	r2, [r3, #0]
 80071f6:	e002      	b.n	80071fe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2200      	movs	r2, #0
 80071fc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80071fe:	4a04      	ldr	r2, [pc, #16]	; (8007210 <prvSampleTimeNow+0x3c>)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007204:	68fb      	ldr	r3, [r7, #12]
}
 8007206:	4618      	mov	r0, r3
 8007208:	3710      	adds	r7, #16
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}
 800720e:	bf00      	nop
 8007210:	20001034 	.word	0x20001034

08007214 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b086      	sub	sp, #24
 8007218:	af00      	add	r7, sp, #0
 800721a:	60f8      	str	r0, [r7, #12]
 800721c:	60b9      	str	r1, [r7, #8]
 800721e:	607a      	str	r2, [r7, #4]
 8007220:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007222:	2300      	movs	r3, #0
 8007224:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	68ba      	ldr	r2, [r7, #8]
 800722a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	68fa      	ldr	r2, [r7, #12]
 8007230:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007232:	68ba      	ldr	r2, [r7, #8]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	429a      	cmp	r2, r3
 8007238:	d812      	bhi.n	8007260 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800723a:	687a      	ldr	r2, [r7, #4]
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	1ad2      	subs	r2, r2, r3
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	699b      	ldr	r3, [r3, #24]
 8007244:	429a      	cmp	r2, r3
 8007246:	d302      	bcc.n	800724e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007248:	2301      	movs	r3, #1
 800724a:	617b      	str	r3, [r7, #20]
 800724c:	e01b      	b.n	8007286 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800724e:	4b10      	ldr	r3, [pc, #64]	; (8007290 <prvInsertTimerInActiveList+0x7c>)
 8007250:	681a      	ldr	r2, [r3, #0]
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	3304      	adds	r3, #4
 8007256:	4619      	mov	r1, r3
 8007258:	4610      	mov	r0, r2
 800725a:	f7fe f9a4 	bl	80055a6 <vListInsert>
 800725e:	e012      	b.n	8007286 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007260:	687a      	ldr	r2, [r7, #4]
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	429a      	cmp	r2, r3
 8007266:	d206      	bcs.n	8007276 <prvInsertTimerInActiveList+0x62>
 8007268:	68ba      	ldr	r2, [r7, #8]
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	429a      	cmp	r2, r3
 800726e:	d302      	bcc.n	8007276 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007270:	2301      	movs	r3, #1
 8007272:	617b      	str	r3, [r7, #20]
 8007274:	e007      	b.n	8007286 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007276:	4b07      	ldr	r3, [pc, #28]	; (8007294 <prvInsertTimerInActiveList+0x80>)
 8007278:	681a      	ldr	r2, [r3, #0]
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	3304      	adds	r3, #4
 800727e:	4619      	mov	r1, r3
 8007280:	4610      	mov	r0, r2
 8007282:	f7fe f990 	bl	80055a6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007286:	697b      	ldr	r3, [r7, #20]
}
 8007288:	4618      	mov	r0, r3
 800728a:	3718      	adds	r7, #24
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}
 8007290:	20001028 	.word	0x20001028
 8007294:	20001024 	.word	0x20001024

08007298 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b08e      	sub	sp, #56	; 0x38
 800729c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800729e:	e0ca      	b.n	8007436 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	da18      	bge.n	80072d8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80072a6:	1d3b      	adds	r3, r7, #4
 80072a8:	3304      	adds	r3, #4
 80072aa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80072ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d10a      	bne.n	80072c8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80072b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072b6:	f383 8811 	msr	BASEPRI, r3
 80072ba:	f3bf 8f6f 	isb	sy
 80072be:	f3bf 8f4f 	dsb	sy
 80072c2:	61fb      	str	r3, [r7, #28]
}
 80072c4:	bf00      	nop
 80072c6:	e7fe      	b.n	80072c6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80072c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072ce:	6850      	ldr	r0, [r2, #4]
 80072d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072d2:	6892      	ldr	r2, [r2, #8]
 80072d4:	4611      	mov	r1, r2
 80072d6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	f2c0 80ab 	blt.w	8007436 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80072e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072e6:	695b      	ldr	r3, [r3, #20]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d004      	beq.n	80072f6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80072ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ee:	3304      	adds	r3, #4
 80072f0:	4618      	mov	r0, r3
 80072f2:	f7fe f991 	bl	8005618 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80072f6:	463b      	mov	r3, r7
 80072f8:	4618      	mov	r0, r3
 80072fa:	f7ff ff6b 	bl	80071d4 <prvSampleTimeNow>
 80072fe:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2b09      	cmp	r3, #9
 8007304:	f200 8096 	bhi.w	8007434 <prvProcessReceivedCommands+0x19c>
 8007308:	a201      	add	r2, pc, #4	; (adr r2, 8007310 <prvProcessReceivedCommands+0x78>)
 800730a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800730e:	bf00      	nop
 8007310:	08007339 	.word	0x08007339
 8007314:	08007339 	.word	0x08007339
 8007318:	08007339 	.word	0x08007339
 800731c:	080073ad 	.word	0x080073ad
 8007320:	080073c1 	.word	0x080073c1
 8007324:	0800740b 	.word	0x0800740b
 8007328:	08007339 	.word	0x08007339
 800732c:	08007339 	.word	0x08007339
 8007330:	080073ad 	.word	0x080073ad
 8007334:	080073c1 	.word	0x080073c1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800733a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800733e:	f043 0301 	orr.w	r3, r3, #1
 8007342:	b2da      	uxtb	r2, r3
 8007344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007346:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800734a:	68ba      	ldr	r2, [r7, #8]
 800734c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800734e:	699b      	ldr	r3, [r3, #24]
 8007350:	18d1      	adds	r1, r2, r3
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007356:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007358:	f7ff ff5c 	bl	8007214 <prvInsertTimerInActiveList>
 800735c:	4603      	mov	r3, r0
 800735e:	2b00      	cmp	r3, #0
 8007360:	d069      	beq.n	8007436 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007364:	6a1b      	ldr	r3, [r3, #32]
 8007366:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007368:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800736a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800736c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007370:	f003 0304 	and.w	r3, r3, #4
 8007374:	2b00      	cmp	r3, #0
 8007376:	d05e      	beq.n	8007436 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007378:	68ba      	ldr	r2, [r7, #8]
 800737a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800737c:	699b      	ldr	r3, [r3, #24]
 800737e:	441a      	add	r2, r3
 8007380:	2300      	movs	r3, #0
 8007382:	9300      	str	r3, [sp, #0]
 8007384:	2300      	movs	r3, #0
 8007386:	2100      	movs	r1, #0
 8007388:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800738a:	f7ff fe05 	bl	8006f98 <xTimerGenericCommand>
 800738e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007390:	6a3b      	ldr	r3, [r7, #32]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d14f      	bne.n	8007436 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800739a:	f383 8811 	msr	BASEPRI, r3
 800739e:	f3bf 8f6f 	isb	sy
 80073a2:	f3bf 8f4f 	dsb	sy
 80073a6:	61bb      	str	r3, [r7, #24]
}
 80073a8:	bf00      	nop
 80073aa:	e7fe      	b.n	80073aa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80073ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80073b2:	f023 0301 	bic.w	r3, r3, #1
 80073b6:	b2da      	uxtb	r2, r3
 80073b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80073be:	e03a      	b.n	8007436 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80073c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80073c6:	f043 0301 	orr.w	r3, r3, #1
 80073ca:	b2da      	uxtb	r2, r3
 80073cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80073d2:	68ba      	ldr	r2, [r7, #8]
 80073d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80073d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073da:	699b      	ldr	r3, [r3, #24]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d10a      	bne.n	80073f6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80073e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e4:	f383 8811 	msr	BASEPRI, r3
 80073e8:	f3bf 8f6f 	isb	sy
 80073ec:	f3bf 8f4f 	dsb	sy
 80073f0:	617b      	str	r3, [r7, #20]
}
 80073f2:	bf00      	nop
 80073f4:	e7fe      	b.n	80073f4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80073f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f8:	699a      	ldr	r2, [r3, #24]
 80073fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fc:	18d1      	adds	r1, r2, r3
 80073fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007402:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007404:	f7ff ff06 	bl	8007214 <prvInsertTimerInActiveList>
					break;
 8007408:	e015      	b.n	8007436 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800740a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800740c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007410:	f003 0302 	and.w	r3, r3, #2
 8007414:	2b00      	cmp	r3, #0
 8007416:	d103      	bne.n	8007420 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007418:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800741a:	f000 fbe1 	bl	8007be0 <vPortFree>
 800741e:	e00a      	b.n	8007436 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007422:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007426:	f023 0301 	bic.w	r3, r3, #1
 800742a:	b2da      	uxtb	r2, r3
 800742c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800742e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007432:	e000      	b.n	8007436 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8007434:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007436:	4b08      	ldr	r3, [pc, #32]	; (8007458 <prvProcessReceivedCommands+0x1c0>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	1d39      	adds	r1, r7, #4
 800743c:	2200      	movs	r2, #0
 800743e:	4618      	mov	r0, r3
 8007440:	f7fe fbec 	bl	8005c1c <xQueueReceive>
 8007444:	4603      	mov	r3, r0
 8007446:	2b00      	cmp	r3, #0
 8007448:	f47f af2a 	bne.w	80072a0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800744c:	bf00      	nop
 800744e:	bf00      	nop
 8007450:	3730      	adds	r7, #48	; 0x30
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}
 8007456:	bf00      	nop
 8007458:	2000102c 	.word	0x2000102c

0800745c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b088      	sub	sp, #32
 8007460:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007462:	e048      	b.n	80074f6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007464:	4b2d      	ldr	r3, [pc, #180]	; (800751c <prvSwitchTimerLists+0xc0>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	68db      	ldr	r3, [r3, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800746e:	4b2b      	ldr	r3, [pc, #172]	; (800751c <prvSwitchTimerLists+0xc0>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	68db      	ldr	r3, [r3, #12]
 8007474:	68db      	ldr	r3, [r3, #12]
 8007476:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	3304      	adds	r3, #4
 800747c:	4618      	mov	r0, r3
 800747e:	f7fe f8cb 	bl	8005618 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	6a1b      	ldr	r3, [r3, #32]
 8007486:	68f8      	ldr	r0, [r7, #12]
 8007488:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007490:	f003 0304 	and.w	r3, r3, #4
 8007494:	2b00      	cmp	r3, #0
 8007496:	d02e      	beq.n	80074f6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	699b      	ldr	r3, [r3, #24]
 800749c:	693a      	ldr	r2, [r7, #16]
 800749e:	4413      	add	r3, r2
 80074a0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80074a2:	68ba      	ldr	r2, [r7, #8]
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	429a      	cmp	r2, r3
 80074a8:	d90e      	bls.n	80074c8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	68ba      	ldr	r2, [r7, #8]
 80074ae:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	68fa      	ldr	r2, [r7, #12]
 80074b4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80074b6:	4b19      	ldr	r3, [pc, #100]	; (800751c <prvSwitchTimerLists+0xc0>)
 80074b8:	681a      	ldr	r2, [r3, #0]
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	3304      	adds	r3, #4
 80074be:	4619      	mov	r1, r3
 80074c0:	4610      	mov	r0, r2
 80074c2:	f7fe f870 	bl	80055a6 <vListInsert>
 80074c6:	e016      	b.n	80074f6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80074c8:	2300      	movs	r3, #0
 80074ca:	9300      	str	r3, [sp, #0]
 80074cc:	2300      	movs	r3, #0
 80074ce:	693a      	ldr	r2, [r7, #16]
 80074d0:	2100      	movs	r1, #0
 80074d2:	68f8      	ldr	r0, [r7, #12]
 80074d4:	f7ff fd60 	bl	8006f98 <xTimerGenericCommand>
 80074d8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d10a      	bne.n	80074f6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80074e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074e4:	f383 8811 	msr	BASEPRI, r3
 80074e8:	f3bf 8f6f 	isb	sy
 80074ec:	f3bf 8f4f 	dsb	sy
 80074f0:	603b      	str	r3, [r7, #0]
}
 80074f2:	bf00      	nop
 80074f4:	e7fe      	b.n	80074f4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80074f6:	4b09      	ldr	r3, [pc, #36]	; (800751c <prvSwitchTimerLists+0xc0>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d1b1      	bne.n	8007464 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007500:	4b06      	ldr	r3, [pc, #24]	; (800751c <prvSwitchTimerLists+0xc0>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007506:	4b06      	ldr	r3, [pc, #24]	; (8007520 <prvSwitchTimerLists+0xc4>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a04      	ldr	r2, [pc, #16]	; (800751c <prvSwitchTimerLists+0xc0>)
 800750c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800750e:	4a04      	ldr	r2, [pc, #16]	; (8007520 <prvSwitchTimerLists+0xc4>)
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	6013      	str	r3, [r2, #0]
}
 8007514:	bf00      	nop
 8007516:	3718      	adds	r7, #24
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}
 800751c:	20001024 	.word	0x20001024
 8007520:	20001028 	.word	0x20001028

08007524 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b082      	sub	sp, #8
 8007528:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800752a:	f000 f96b 	bl	8007804 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800752e:	4b15      	ldr	r3, [pc, #84]	; (8007584 <prvCheckForValidListAndQueue+0x60>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d120      	bne.n	8007578 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007536:	4814      	ldr	r0, [pc, #80]	; (8007588 <prvCheckForValidListAndQueue+0x64>)
 8007538:	f7fd ffe4 	bl	8005504 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800753c:	4813      	ldr	r0, [pc, #76]	; (800758c <prvCheckForValidListAndQueue+0x68>)
 800753e:	f7fd ffe1 	bl	8005504 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007542:	4b13      	ldr	r3, [pc, #76]	; (8007590 <prvCheckForValidListAndQueue+0x6c>)
 8007544:	4a10      	ldr	r2, [pc, #64]	; (8007588 <prvCheckForValidListAndQueue+0x64>)
 8007546:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007548:	4b12      	ldr	r3, [pc, #72]	; (8007594 <prvCheckForValidListAndQueue+0x70>)
 800754a:	4a10      	ldr	r2, [pc, #64]	; (800758c <prvCheckForValidListAndQueue+0x68>)
 800754c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800754e:	2300      	movs	r3, #0
 8007550:	9300      	str	r3, [sp, #0]
 8007552:	4b11      	ldr	r3, [pc, #68]	; (8007598 <prvCheckForValidListAndQueue+0x74>)
 8007554:	4a11      	ldr	r2, [pc, #68]	; (800759c <prvCheckForValidListAndQueue+0x78>)
 8007556:	2110      	movs	r1, #16
 8007558:	200a      	movs	r0, #10
 800755a:	f7fe f8ef 	bl	800573c <xQueueGenericCreateStatic>
 800755e:	4603      	mov	r3, r0
 8007560:	4a08      	ldr	r2, [pc, #32]	; (8007584 <prvCheckForValidListAndQueue+0x60>)
 8007562:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007564:	4b07      	ldr	r3, [pc, #28]	; (8007584 <prvCheckForValidListAndQueue+0x60>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d005      	beq.n	8007578 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800756c:	4b05      	ldr	r3, [pc, #20]	; (8007584 <prvCheckForValidListAndQueue+0x60>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	490b      	ldr	r1, [pc, #44]	; (80075a0 <prvCheckForValidListAndQueue+0x7c>)
 8007572:	4618      	mov	r0, r3
 8007574:	f7fe fd42 	bl	8005ffc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007578:	f000 f974 	bl	8007864 <vPortExitCritical>
}
 800757c:	bf00      	nop
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}
 8007582:	bf00      	nop
 8007584:	2000102c 	.word	0x2000102c
 8007588:	20000ffc 	.word	0x20000ffc
 800758c:	20001010 	.word	0x20001010
 8007590:	20001024 	.word	0x20001024
 8007594:	20001028 	.word	0x20001028
 8007598:	200010d8 	.word	0x200010d8
 800759c:	20001038 	.word	0x20001038
 80075a0:	08008e90 	.word	0x08008e90

080075a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80075a4:	b480      	push	{r7}
 80075a6:	b085      	sub	sp, #20
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	60f8      	str	r0, [r7, #12]
 80075ac:	60b9      	str	r1, [r7, #8]
 80075ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	3b04      	subs	r3, #4
 80075b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80075bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	3b04      	subs	r3, #4
 80075c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	f023 0201 	bic.w	r2, r3, #1
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	3b04      	subs	r3, #4
 80075d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80075d4:	4a0c      	ldr	r2, [pc, #48]	; (8007608 <pxPortInitialiseStack+0x64>)
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	3b14      	subs	r3, #20
 80075de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	3b04      	subs	r3, #4
 80075ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	f06f 0202 	mvn.w	r2, #2
 80075f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	3b20      	subs	r3, #32
 80075f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80075fa:	68fb      	ldr	r3, [r7, #12]
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3714      	adds	r7, #20
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr
 8007608:	0800760d 	.word	0x0800760d

0800760c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800760c:	b480      	push	{r7}
 800760e:	b085      	sub	sp, #20
 8007610:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007612:	2300      	movs	r3, #0
 8007614:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007616:	4b12      	ldr	r3, [pc, #72]	; (8007660 <prvTaskExitError+0x54>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800761e:	d00a      	beq.n	8007636 <prvTaskExitError+0x2a>
	__asm volatile
 8007620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007624:	f383 8811 	msr	BASEPRI, r3
 8007628:	f3bf 8f6f 	isb	sy
 800762c:	f3bf 8f4f 	dsb	sy
 8007630:	60fb      	str	r3, [r7, #12]
}
 8007632:	bf00      	nop
 8007634:	e7fe      	b.n	8007634 <prvTaskExitError+0x28>
	__asm volatile
 8007636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800763a:	f383 8811 	msr	BASEPRI, r3
 800763e:	f3bf 8f6f 	isb	sy
 8007642:	f3bf 8f4f 	dsb	sy
 8007646:	60bb      	str	r3, [r7, #8]
}
 8007648:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800764a:	bf00      	nop
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d0fc      	beq.n	800764c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007652:	bf00      	nop
 8007654:	bf00      	nop
 8007656:	3714      	adds	r7, #20
 8007658:	46bd      	mov	sp, r7
 800765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765e:	4770      	bx	lr
 8007660:	2000000c 	.word	0x2000000c
	...

08007670 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007670:	4b07      	ldr	r3, [pc, #28]	; (8007690 <pxCurrentTCBConst2>)
 8007672:	6819      	ldr	r1, [r3, #0]
 8007674:	6808      	ldr	r0, [r1, #0]
 8007676:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800767a:	f380 8809 	msr	PSP, r0
 800767e:	f3bf 8f6f 	isb	sy
 8007682:	f04f 0000 	mov.w	r0, #0
 8007686:	f380 8811 	msr	BASEPRI, r0
 800768a:	4770      	bx	lr
 800768c:	f3af 8000 	nop.w

08007690 <pxCurrentTCBConst2>:
 8007690:	20000afc 	.word	0x20000afc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007694:	bf00      	nop
 8007696:	bf00      	nop

08007698 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007698:	4808      	ldr	r0, [pc, #32]	; (80076bc <prvPortStartFirstTask+0x24>)
 800769a:	6800      	ldr	r0, [r0, #0]
 800769c:	6800      	ldr	r0, [r0, #0]
 800769e:	f380 8808 	msr	MSP, r0
 80076a2:	f04f 0000 	mov.w	r0, #0
 80076a6:	f380 8814 	msr	CONTROL, r0
 80076aa:	b662      	cpsie	i
 80076ac:	b661      	cpsie	f
 80076ae:	f3bf 8f4f 	dsb	sy
 80076b2:	f3bf 8f6f 	isb	sy
 80076b6:	df00      	svc	0
 80076b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80076ba:	bf00      	nop
 80076bc:	e000ed08 	.word	0xe000ed08

080076c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b086      	sub	sp, #24
 80076c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80076c6:	4b46      	ldr	r3, [pc, #280]	; (80077e0 <xPortStartScheduler+0x120>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a46      	ldr	r2, [pc, #280]	; (80077e4 <xPortStartScheduler+0x124>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d10a      	bne.n	80076e6 <xPortStartScheduler+0x26>
	__asm volatile
 80076d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d4:	f383 8811 	msr	BASEPRI, r3
 80076d8:	f3bf 8f6f 	isb	sy
 80076dc:	f3bf 8f4f 	dsb	sy
 80076e0:	613b      	str	r3, [r7, #16]
}
 80076e2:	bf00      	nop
 80076e4:	e7fe      	b.n	80076e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80076e6:	4b3e      	ldr	r3, [pc, #248]	; (80077e0 <xPortStartScheduler+0x120>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a3f      	ldr	r2, [pc, #252]	; (80077e8 <xPortStartScheduler+0x128>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d10a      	bne.n	8007706 <xPortStartScheduler+0x46>
	__asm volatile
 80076f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f4:	f383 8811 	msr	BASEPRI, r3
 80076f8:	f3bf 8f6f 	isb	sy
 80076fc:	f3bf 8f4f 	dsb	sy
 8007700:	60fb      	str	r3, [r7, #12]
}
 8007702:	bf00      	nop
 8007704:	e7fe      	b.n	8007704 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007706:	4b39      	ldr	r3, [pc, #228]	; (80077ec <xPortStartScheduler+0x12c>)
 8007708:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	b2db      	uxtb	r3, r3
 8007710:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	22ff      	movs	r2, #255	; 0xff
 8007716:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	b2db      	uxtb	r3, r3
 800771e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007720:	78fb      	ldrb	r3, [r7, #3]
 8007722:	b2db      	uxtb	r3, r3
 8007724:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007728:	b2da      	uxtb	r2, r3
 800772a:	4b31      	ldr	r3, [pc, #196]	; (80077f0 <xPortStartScheduler+0x130>)
 800772c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800772e:	4b31      	ldr	r3, [pc, #196]	; (80077f4 <xPortStartScheduler+0x134>)
 8007730:	2207      	movs	r2, #7
 8007732:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007734:	e009      	b.n	800774a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007736:	4b2f      	ldr	r3, [pc, #188]	; (80077f4 <xPortStartScheduler+0x134>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	3b01      	subs	r3, #1
 800773c:	4a2d      	ldr	r2, [pc, #180]	; (80077f4 <xPortStartScheduler+0x134>)
 800773e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007740:	78fb      	ldrb	r3, [r7, #3]
 8007742:	b2db      	uxtb	r3, r3
 8007744:	005b      	lsls	r3, r3, #1
 8007746:	b2db      	uxtb	r3, r3
 8007748:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800774a:	78fb      	ldrb	r3, [r7, #3]
 800774c:	b2db      	uxtb	r3, r3
 800774e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007752:	2b80      	cmp	r3, #128	; 0x80
 8007754:	d0ef      	beq.n	8007736 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007756:	4b27      	ldr	r3, [pc, #156]	; (80077f4 <xPortStartScheduler+0x134>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f1c3 0307 	rsb	r3, r3, #7
 800775e:	2b04      	cmp	r3, #4
 8007760:	d00a      	beq.n	8007778 <xPortStartScheduler+0xb8>
	__asm volatile
 8007762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007766:	f383 8811 	msr	BASEPRI, r3
 800776a:	f3bf 8f6f 	isb	sy
 800776e:	f3bf 8f4f 	dsb	sy
 8007772:	60bb      	str	r3, [r7, #8]
}
 8007774:	bf00      	nop
 8007776:	e7fe      	b.n	8007776 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007778:	4b1e      	ldr	r3, [pc, #120]	; (80077f4 <xPortStartScheduler+0x134>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	021b      	lsls	r3, r3, #8
 800777e:	4a1d      	ldr	r2, [pc, #116]	; (80077f4 <xPortStartScheduler+0x134>)
 8007780:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007782:	4b1c      	ldr	r3, [pc, #112]	; (80077f4 <xPortStartScheduler+0x134>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800778a:	4a1a      	ldr	r2, [pc, #104]	; (80077f4 <xPortStartScheduler+0x134>)
 800778c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	b2da      	uxtb	r2, r3
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007796:	4b18      	ldr	r3, [pc, #96]	; (80077f8 <xPortStartScheduler+0x138>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a17      	ldr	r2, [pc, #92]	; (80077f8 <xPortStartScheduler+0x138>)
 800779c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80077a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80077a2:	4b15      	ldr	r3, [pc, #84]	; (80077f8 <xPortStartScheduler+0x138>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4a14      	ldr	r2, [pc, #80]	; (80077f8 <xPortStartScheduler+0x138>)
 80077a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80077ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80077ae:	f000 f8dd 	bl	800796c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80077b2:	4b12      	ldr	r3, [pc, #72]	; (80077fc <xPortStartScheduler+0x13c>)
 80077b4:	2200      	movs	r2, #0
 80077b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80077b8:	f000 f8fc 	bl	80079b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80077bc:	4b10      	ldr	r3, [pc, #64]	; (8007800 <xPortStartScheduler+0x140>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a0f      	ldr	r2, [pc, #60]	; (8007800 <xPortStartScheduler+0x140>)
 80077c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80077c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80077c8:	f7ff ff66 	bl	8007698 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80077cc:	f7ff f846 	bl	800685c <vTaskSwitchContext>
	prvTaskExitError();
 80077d0:	f7ff ff1c 	bl	800760c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80077d4:	2300      	movs	r3, #0
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3718      	adds	r7, #24
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
 80077de:	bf00      	nop
 80077e0:	e000ed00 	.word	0xe000ed00
 80077e4:	410fc271 	.word	0x410fc271
 80077e8:	410fc270 	.word	0x410fc270
 80077ec:	e000e400 	.word	0xe000e400
 80077f0:	20001128 	.word	0x20001128
 80077f4:	2000112c 	.word	0x2000112c
 80077f8:	e000ed20 	.word	0xe000ed20
 80077fc:	2000000c 	.word	0x2000000c
 8007800:	e000ef34 	.word	0xe000ef34

08007804 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007804:	b480      	push	{r7}
 8007806:	b083      	sub	sp, #12
 8007808:	af00      	add	r7, sp, #0
	__asm volatile
 800780a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800780e:	f383 8811 	msr	BASEPRI, r3
 8007812:	f3bf 8f6f 	isb	sy
 8007816:	f3bf 8f4f 	dsb	sy
 800781a:	607b      	str	r3, [r7, #4]
}
 800781c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800781e:	4b0f      	ldr	r3, [pc, #60]	; (800785c <vPortEnterCritical+0x58>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	3301      	adds	r3, #1
 8007824:	4a0d      	ldr	r2, [pc, #52]	; (800785c <vPortEnterCritical+0x58>)
 8007826:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007828:	4b0c      	ldr	r3, [pc, #48]	; (800785c <vPortEnterCritical+0x58>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	2b01      	cmp	r3, #1
 800782e:	d10f      	bne.n	8007850 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007830:	4b0b      	ldr	r3, [pc, #44]	; (8007860 <vPortEnterCritical+0x5c>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	b2db      	uxtb	r3, r3
 8007836:	2b00      	cmp	r3, #0
 8007838:	d00a      	beq.n	8007850 <vPortEnterCritical+0x4c>
	__asm volatile
 800783a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800783e:	f383 8811 	msr	BASEPRI, r3
 8007842:	f3bf 8f6f 	isb	sy
 8007846:	f3bf 8f4f 	dsb	sy
 800784a:	603b      	str	r3, [r7, #0]
}
 800784c:	bf00      	nop
 800784e:	e7fe      	b.n	800784e <vPortEnterCritical+0x4a>
	}
}
 8007850:	bf00      	nop
 8007852:	370c      	adds	r7, #12
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr
 800785c:	2000000c 	.word	0x2000000c
 8007860:	e000ed04 	.word	0xe000ed04

08007864 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007864:	b480      	push	{r7}
 8007866:	b083      	sub	sp, #12
 8007868:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800786a:	4b12      	ldr	r3, [pc, #72]	; (80078b4 <vPortExitCritical+0x50>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d10a      	bne.n	8007888 <vPortExitCritical+0x24>
	__asm volatile
 8007872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007876:	f383 8811 	msr	BASEPRI, r3
 800787a:	f3bf 8f6f 	isb	sy
 800787e:	f3bf 8f4f 	dsb	sy
 8007882:	607b      	str	r3, [r7, #4]
}
 8007884:	bf00      	nop
 8007886:	e7fe      	b.n	8007886 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007888:	4b0a      	ldr	r3, [pc, #40]	; (80078b4 <vPortExitCritical+0x50>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	3b01      	subs	r3, #1
 800788e:	4a09      	ldr	r2, [pc, #36]	; (80078b4 <vPortExitCritical+0x50>)
 8007890:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007892:	4b08      	ldr	r3, [pc, #32]	; (80078b4 <vPortExitCritical+0x50>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d105      	bne.n	80078a6 <vPortExitCritical+0x42>
 800789a:	2300      	movs	r3, #0
 800789c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	f383 8811 	msr	BASEPRI, r3
}
 80078a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80078a6:	bf00      	nop
 80078a8:	370c      	adds	r7, #12
 80078aa:	46bd      	mov	sp, r7
 80078ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b0:	4770      	bx	lr
 80078b2:	bf00      	nop
 80078b4:	2000000c 	.word	0x2000000c
	...

080078c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80078c0:	f3ef 8009 	mrs	r0, PSP
 80078c4:	f3bf 8f6f 	isb	sy
 80078c8:	4b15      	ldr	r3, [pc, #84]	; (8007920 <pxCurrentTCBConst>)
 80078ca:	681a      	ldr	r2, [r3, #0]
 80078cc:	f01e 0f10 	tst.w	lr, #16
 80078d0:	bf08      	it	eq
 80078d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80078d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078da:	6010      	str	r0, [r2, #0]
 80078dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80078e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80078e4:	f380 8811 	msr	BASEPRI, r0
 80078e8:	f3bf 8f4f 	dsb	sy
 80078ec:	f3bf 8f6f 	isb	sy
 80078f0:	f7fe ffb4 	bl	800685c <vTaskSwitchContext>
 80078f4:	f04f 0000 	mov.w	r0, #0
 80078f8:	f380 8811 	msr	BASEPRI, r0
 80078fc:	bc09      	pop	{r0, r3}
 80078fe:	6819      	ldr	r1, [r3, #0]
 8007900:	6808      	ldr	r0, [r1, #0]
 8007902:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007906:	f01e 0f10 	tst.w	lr, #16
 800790a:	bf08      	it	eq
 800790c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007910:	f380 8809 	msr	PSP, r0
 8007914:	f3bf 8f6f 	isb	sy
 8007918:	4770      	bx	lr
 800791a:	bf00      	nop
 800791c:	f3af 8000 	nop.w

08007920 <pxCurrentTCBConst>:
 8007920:	20000afc 	.word	0x20000afc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007924:	bf00      	nop
 8007926:	bf00      	nop

08007928 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b082      	sub	sp, #8
 800792c:	af00      	add	r7, sp, #0
	__asm volatile
 800792e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007932:	f383 8811 	msr	BASEPRI, r3
 8007936:	f3bf 8f6f 	isb	sy
 800793a:	f3bf 8f4f 	dsb	sy
 800793e:	607b      	str	r3, [r7, #4]
}
 8007940:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007942:	f7fe fed1 	bl	80066e8 <xTaskIncrementTick>
 8007946:	4603      	mov	r3, r0
 8007948:	2b00      	cmp	r3, #0
 800794a:	d003      	beq.n	8007954 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800794c:	4b06      	ldr	r3, [pc, #24]	; (8007968 <xPortSysTickHandler+0x40>)
 800794e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007952:	601a      	str	r2, [r3, #0]
 8007954:	2300      	movs	r3, #0
 8007956:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	f383 8811 	msr	BASEPRI, r3
}
 800795e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007960:	bf00      	nop
 8007962:	3708      	adds	r7, #8
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}
 8007968:	e000ed04 	.word	0xe000ed04

0800796c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800796c:	b480      	push	{r7}
 800796e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007970:	4b0b      	ldr	r3, [pc, #44]	; (80079a0 <vPortSetupTimerInterrupt+0x34>)
 8007972:	2200      	movs	r2, #0
 8007974:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007976:	4b0b      	ldr	r3, [pc, #44]	; (80079a4 <vPortSetupTimerInterrupt+0x38>)
 8007978:	2200      	movs	r2, #0
 800797a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800797c:	4b0a      	ldr	r3, [pc, #40]	; (80079a8 <vPortSetupTimerInterrupt+0x3c>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a0a      	ldr	r2, [pc, #40]	; (80079ac <vPortSetupTimerInterrupt+0x40>)
 8007982:	fba2 2303 	umull	r2, r3, r2, r3
 8007986:	099b      	lsrs	r3, r3, #6
 8007988:	4a09      	ldr	r2, [pc, #36]	; (80079b0 <vPortSetupTimerInterrupt+0x44>)
 800798a:	3b01      	subs	r3, #1
 800798c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800798e:	4b04      	ldr	r3, [pc, #16]	; (80079a0 <vPortSetupTimerInterrupt+0x34>)
 8007990:	2207      	movs	r2, #7
 8007992:	601a      	str	r2, [r3, #0]
}
 8007994:	bf00      	nop
 8007996:	46bd      	mov	sp, r7
 8007998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799c:	4770      	bx	lr
 800799e:	bf00      	nop
 80079a0:	e000e010 	.word	0xe000e010
 80079a4:	e000e018 	.word	0xe000e018
 80079a8:	20000000 	.word	0x20000000
 80079ac:	10624dd3 	.word	0x10624dd3
 80079b0:	e000e014 	.word	0xe000e014

080079b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80079b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80079c4 <vPortEnableVFP+0x10>
 80079b8:	6801      	ldr	r1, [r0, #0]
 80079ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80079be:	6001      	str	r1, [r0, #0]
 80079c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80079c2:	bf00      	nop
 80079c4:	e000ed88 	.word	0xe000ed88

080079c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80079c8:	b480      	push	{r7}
 80079ca:	b085      	sub	sp, #20
 80079cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80079ce:	f3ef 8305 	mrs	r3, IPSR
 80079d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2b0f      	cmp	r3, #15
 80079d8:	d914      	bls.n	8007a04 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80079da:	4a17      	ldr	r2, [pc, #92]	; (8007a38 <vPortValidateInterruptPriority+0x70>)
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	4413      	add	r3, r2
 80079e0:	781b      	ldrb	r3, [r3, #0]
 80079e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80079e4:	4b15      	ldr	r3, [pc, #84]	; (8007a3c <vPortValidateInterruptPriority+0x74>)
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	7afa      	ldrb	r2, [r7, #11]
 80079ea:	429a      	cmp	r2, r3
 80079ec:	d20a      	bcs.n	8007a04 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80079ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079f2:	f383 8811 	msr	BASEPRI, r3
 80079f6:	f3bf 8f6f 	isb	sy
 80079fa:	f3bf 8f4f 	dsb	sy
 80079fe:	607b      	str	r3, [r7, #4]
}
 8007a00:	bf00      	nop
 8007a02:	e7fe      	b.n	8007a02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007a04:	4b0e      	ldr	r3, [pc, #56]	; (8007a40 <vPortValidateInterruptPriority+0x78>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007a0c:	4b0d      	ldr	r3, [pc, #52]	; (8007a44 <vPortValidateInterruptPriority+0x7c>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	429a      	cmp	r2, r3
 8007a12:	d90a      	bls.n	8007a2a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a18:	f383 8811 	msr	BASEPRI, r3
 8007a1c:	f3bf 8f6f 	isb	sy
 8007a20:	f3bf 8f4f 	dsb	sy
 8007a24:	603b      	str	r3, [r7, #0]
}
 8007a26:	bf00      	nop
 8007a28:	e7fe      	b.n	8007a28 <vPortValidateInterruptPriority+0x60>
	}
 8007a2a:	bf00      	nop
 8007a2c:	3714      	adds	r7, #20
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a34:	4770      	bx	lr
 8007a36:	bf00      	nop
 8007a38:	e000e3f0 	.word	0xe000e3f0
 8007a3c:	20001128 	.word	0x20001128
 8007a40:	e000ed0c 	.word	0xe000ed0c
 8007a44:	2000112c 	.word	0x2000112c

08007a48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b08a      	sub	sp, #40	; 0x28
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007a50:	2300      	movs	r3, #0
 8007a52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007a54:	f7fe fd8c 	bl	8006570 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007a58:	4b5b      	ldr	r3, [pc, #364]	; (8007bc8 <pvPortMalloc+0x180>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d101      	bne.n	8007a64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007a60:	f000 f920 	bl	8007ca4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007a64:	4b59      	ldr	r3, [pc, #356]	; (8007bcc <pvPortMalloc+0x184>)
 8007a66:	681a      	ldr	r2, [r3, #0]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	4013      	ands	r3, r2
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	f040 8093 	bne.w	8007b98 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d01d      	beq.n	8007ab4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007a78:	2208      	movs	r2, #8
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	4413      	add	r3, r2
 8007a7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f003 0307 	and.w	r3, r3, #7
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d014      	beq.n	8007ab4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f023 0307 	bic.w	r3, r3, #7
 8007a90:	3308      	adds	r3, #8
 8007a92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f003 0307 	and.w	r3, r3, #7
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d00a      	beq.n	8007ab4 <pvPortMalloc+0x6c>
	__asm volatile
 8007a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa2:	f383 8811 	msr	BASEPRI, r3
 8007aa6:	f3bf 8f6f 	isb	sy
 8007aaa:	f3bf 8f4f 	dsb	sy
 8007aae:	617b      	str	r3, [r7, #20]
}
 8007ab0:	bf00      	nop
 8007ab2:	e7fe      	b.n	8007ab2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d06e      	beq.n	8007b98 <pvPortMalloc+0x150>
 8007aba:	4b45      	ldr	r3, [pc, #276]	; (8007bd0 <pvPortMalloc+0x188>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	687a      	ldr	r2, [r7, #4]
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d869      	bhi.n	8007b98 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007ac4:	4b43      	ldr	r3, [pc, #268]	; (8007bd4 <pvPortMalloc+0x18c>)
 8007ac6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007ac8:	4b42      	ldr	r3, [pc, #264]	; (8007bd4 <pvPortMalloc+0x18c>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ace:	e004      	b.n	8007ada <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	687a      	ldr	r2, [r7, #4]
 8007ae0:	429a      	cmp	r2, r3
 8007ae2:	d903      	bls.n	8007aec <pvPortMalloc+0xa4>
 8007ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d1f1      	bne.n	8007ad0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007aec:	4b36      	ldr	r3, [pc, #216]	; (8007bc8 <pvPortMalloc+0x180>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007af2:	429a      	cmp	r2, r3
 8007af4:	d050      	beq.n	8007b98 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007af6:	6a3b      	ldr	r3, [r7, #32]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	2208      	movs	r2, #8
 8007afc:	4413      	add	r3, r2
 8007afe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b02:	681a      	ldr	r2, [r3, #0]
 8007b04:	6a3b      	ldr	r3, [r7, #32]
 8007b06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0a:	685a      	ldr	r2, [r3, #4]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	1ad2      	subs	r2, r2, r3
 8007b10:	2308      	movs	r3, #8
 8007b12:	005b      	lsls	r3, r3, #1
 8007b14:	429a      	cmp	r2, r3
 8007b16:	d91f      	bls.n	8007b58 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007b18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	4413      	add	r3, r2
 8007b1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b20:	69bb      	ldr	r3, [r7, #24]
 8007b22:	f003 0307 	and.w	r3, r3, #7
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d00a      	beq.n	8007b40 <pvPortMalloc+0xf8>
	__asm volatile
 8007b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b2e:	f383 8811 	msr	BASEPRI, r3
 8007b32:	f3bf 8f6f 	isb	sy
 8007b36:	f3bf 8f4f 	dsb	sy
 8007b3a:	613b      	str	r3, [r7, #16]
}
 8007b3c:	bf00      	nop
 8007b3e:	e7fe      	b.n	8007b3e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b42:	685a      	ldr	r2, [r3, #4]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	1ad2      	subs	r2, r2, r3
 8007b48:	69bb      	ldr	r3, [r7, #24]
 8007b4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b4e:	687a      	ldr	r2, [r7, #4]
 8007b50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007b52:	69b8      	ldr	r0, [r7, #24]
 8007b54:	f000 f908 	bl	8007d68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007b58:	4b1d      	ldr	r3, [pc, #116]	; (8007bd0 <pvPortMalloc+0x188>)
 8007b5a:	681a      	ldr	r2, [r3, #0]
 8007b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b5e:	685b      	ldr	r3, [r3, #4]
 8007b60:	1ad3      	subs	r3, r2, r3
 8007b62:	4a1b      	ldr	r2, [pc, #108]	; (8007bd0 <pvPortMalloc+0x188>)
 8007b64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007b66:	4b1a      	ldr	r3, [pc, #104]	; (8007bd0 <pvPortMalloc+0x188>)
 8007b68:	681a      	ldr	r2, [r3, #0]
 8007b6a:	4b1b      	ldr	r3, [pc, #108]	; (8007bd8 <pvPortMalloc+0x190>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	429a      	cmp	r2, r3
 8007b70:	d203      	bcs.n	8007b7a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007b72:	4b17      	ldr	r3, [pc, #92]	; (8007bd0 <pvPortMalloc+0x188>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4a18      	ldr	r2, [pc, #96]	; (8007bd8 <pvPortMalloc+0x190>)
 8007b78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b7c:	685a      	ldr	r2, [r3, #4]
 8007b7e:	4b13      	ldr	r3, [pc, #76]	; (8007bcc <pvPortMalloc+0x184>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	431a      	orrs	r2, r3
 8007b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007b8e:	4b13      	ldr	r3, [pc, #76]	; (8007bdc <pvPortMalloc+0x194>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	3301      	adds	r3, #1
 8007b94:	4a11      	ldr	r2, [pc, #68]	; (8007bdc <pvPortMalloc+0x194>)
 8007b96:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007b98:	f7fe fcf8 	bl	800658c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b9c:	69fb      	ldr	r3, [r7, #28]
 8007b9e:	f003 0307 	and.w	r3, r3, #7
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d00a      	beq.n	8007bbc <pvPortMalloc+0x174>
	__asm volatile
 8007ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007baa:	f383 8811 	msr	BASEPRI, r3
 8007bae:	f3bf 8f6f 	isb	sy
 8007bb2:	f3bf 8f4f 	dsb	sy
 8007bb6:	60fb      	str	r3, [r7, #12]
}
 8007bb8:	bf00      	nop
 8007bba:	e7fe      	b.n	8007bba <pvPortMalloc+0x172>
	return pvReturn;
 8007bbc:	69fb      	ldr	r3, [r7, #28]
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3728      	adds	r7, #40	; 0x28
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}
 8007bc6:	bf00      	nop
 8007bc8:	200024c0 	.word	0x200024c0
 8007bcc:	200024d4 	.word	0x200024d4
 8007bd0:	200024c4 	.word	0x200024c4
 8007bd4:	200024b8 	.word	0x200024b8
 8007bd8:	200024c8 	.word	0x200024c8
 8007bdc:	200024cc 	.word	0x200024cc

08007be0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b086      	sub	sp, #24
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d04d      	beq.n	8007c8e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007bf2:	2308      	movs	r3, #8
 8007bf4:	425b      	negs	r3, r3
 8007bf6:	697a      	ldr	r2, [r7, #20]
 8007bf8:	4413      	add	r3, r2
 8007bfa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	685a      	ldr	r2, [r3, #4]
 8007c04:	4b24      	ldr	r3, [pc, #144]	; (8007c98 <vPortFree+0xb8>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4013      	ands	r3, r2
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d10a      	bne.n	8007c24 <vPortFree+0x44>
	__asm volatile
 8007c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c12:	f383 8811 	msr	BASEPRI, r3
 8007c16:	f3bf 8f6f 	isb	sy
 8007c1a:	f3bf 8f4f 	dsb	sy
 8007c1e:	60fb      	str	r3, [r7, #12]
}
 8007c20:	bf00      	nop
 8007c22:	e7fe      	b.n	8007c22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007c24:	693b      	ldr	r3, [r7, #16]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d00a      	beq.n	8007c42 <vPortFree+0x62>
	__asm volatile
 8007c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c30:	f383 8811 	msr	BASEPRI, r3
 8007c34:	f3bf 8f6f 	isb	sy
 8007c38:	f3bf 8f4f 	dsb	sy
 8007c3c:	60bb      	str	r3, [r7, #8]
}
 8007c3e:	bf00      	nop
 8007c40:	e7fe      	b.n	8007c40 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	685a      	ldr	r2, [r3, #4]
 8007c46:	4b14      	ldr	r3, [pc, #80]	; (8007c98 <vPortFree+0xb8>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4013      	ands	r3, r2
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d01e      	beq.n	8007c8e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d11a      	bne.n	8007c8e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	685a      	ldr	r2, [r3, #4]
 8007c5c:	4b0e      	ldr	r3, [pc, #56]	; (8007c98 <vPortFree+0xb8>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	43db      	mvns	r3, r3
 8007c62:	401a      	ands	r2, r3
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007c68:	f7fe fc82 	bl	8006570 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	685a      	ldr	r2, [r3, #4]
 8007c70:	4b0a      	ldr	r3, [pc, #40]	; (8007c9c <vPortFree+0xbc>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4413      	add	r3, r2
 8007c76:	4a09      	ldr	r2, [pc, #36]	; (8007c9c <vPortFree+0xbc>)
 8007c78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007c7a:	6938      	ldr	r0, [r7, #16]
 8007c7c:	f000 f874 	bl	8007d68 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007c80:	4b07      	ldr	r3, [pc, #28]	; (8007ca0 <vPortFree+0xc0>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	3301      	adds	r3, #1
 8007c86:	4a06      	ldr	r2, [pc, #24]	; (8007ca0 <vPortFree+0xc0>)
 8007c88:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007c8a:	f7fe fc7f 	bl	800658c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007c8e:	bf00      	nop
 8007c90:	3718      	adds	r7, #24
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}
 8007c96:	bf00      	nop
 8007c98:	200024d4 	.word	0x200024d4
 8007c9c:	200024c4 	.word	0x200024c4
 8007ca0:	200024d0 	.word	0x200024d0

08007ca4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b085      	sub	sp, #20
 8007ca8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007caa:	f241 3388 	movw	r3, #5000	; 0x1388
 8007cae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007cb0:	4b27      	ldr	r3, [pc, #156]	; (8007d50 <prvHeapInit+0xac>)
 8007cb2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	f003 0307 	and.w	r3, r3, #7
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d00c      	beq.n	8007cd8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	3307      	adds	r3, #7
 8007cc2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	f023 0307 	bic.w	r3, r3, #7
 8007cca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007ccc:	68ba      	ldr	r2, [r7, #8]
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	1ad3      	subs	r3, r2, r3
 8007cd2:	4a1f      	ldr	r2, [pc, #124]	; (8007d50 <prvHeapInit+0xac>)
 8007cd4:	4413      	add	r3, r2
 8007cd6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007cdc:	4a1d      	ldr	r2, [pc, #116]	; (8007d54 <prvHeapInit+0xb0>)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007ce2:	4b1c      	ldr	r3, [pc, #112]	; (8007d54 <prvHeapInit+0xb0>)
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	68ba      	ldr	r2, [r7, #8]
 8007cec:	4413      	add	r3, r2
 8007cee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007cf0:	2208      	movs	r2, #8
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	1a9b      	subs	r3, r3, r2
 8007cf6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	f023 0307 	bic.w	r3, r3, #7
 8007cfe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	4a15      	ldr	r2, [pc, #84]	; (8007d58 <prvHeapInit+0xb4>)
 8007d04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007d06:	4b14      	ldr	r3, [pc, #80]	; (8007d58 <prvHeapInit+0xb4>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007d0e:	4b12      	ldr	r3, [pc, #72]	; (8007d58 <prvHeapInit+0xb4>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	2200      	movs	r2, #0
 8007d14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	68fa      	ldr	r2, [r7, #12]
 8007d1e:	1ad2      	subs	r2, r2, r3
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007d24:	4b0c      	ldr	r3, [pc, #48]	; (8007d58 <prvHeapInit+0xb4>)
 8007d26:	681a      	ldr	r2, [r3, #0]
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	4a0a      	ldr	r2, [pc, #40]	; (8007d5c <prvHeapInit+0xb8>)
 8007d32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	4a09      	ldr	r2, [pc, #36]	; (8007d60 <prvHeapInit+0xbc>)
 8007d3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007d3c:	4b09      	ldr	r3, [pc, #36]	; (8007d64 <prvHeapInit+0xc0>)
 8007d3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007d42:	601a      	str	r2, [r3, #0]
}
 8007d44:	bf00      	nop
 8007d46:	3714      	adds	r7, #20
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4e:	4770      	bx	lr
 8007d50:	20001130 	.word	0x20001130
 8007d54:	200024b8 	.word	0x200024b8
 8007d58:	200024c0 	.word	0x200024c0
 8007d5c:	200024c8 	.word	0x200024c8
 8007d60:	200024c4 	.word	0x200024c4
 8007d64:	200024d4 	.word	0x200024d4

08007d68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b085      	sub	sp, #20
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007d70:	4b28      	ldr	r3, [pc, #160]	; (8007e14 <prvInsertBlockIntoFreeList+0xac>)
 8007d72:	60fb      	str	r3, [r7, #12]
 8007d74:	e002      	b.n	8007d7c <prvInsertBlockIntoFreeList+0x14>
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	60fb      	str	r3, [r7, #12]
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	687a      	ldr	r2, [r7, #4]
 8007d82:	429a      	cmp	r2, r3
 8007d84:	d8f7      	bhi.n	8007d76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	68ba      	ldr	r2, [r7, #8]
 8007d90:	4413      	add	r3, r2
 8007d92:	687a      	ldr	r2, [r7, #4]
 8007d94:	429a      	cmp	r2, r3
 8007d96:	d108      	bne.n	8007daa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	685a      	ldr	r2, [r3, #4]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	441a      	add	r2, r3
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	68ba      	ldr	r2, [r7, #8]
 8007db4:	441a      	add	r2, r3
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	429a      	cmp	r2, r3
 8007dbc:	d118      	bne.n	8007df0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681a      	ldr	r2, [r3, #0]
 8007dc2:	4b15      	ldr	r3, [pc, #84]	; (8007e18 <prvInsertBlockIntoFreeList+0xb0>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	429a      	cmp	r2, r3
 8007dc8:	d00d      	beq.n	8007de6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	685a      	ldr	r2, [r3, #4]
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	441a      	add	r2, r3
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	681a      	ldr	r2, [r3, #0]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	601a      	str	r2, [r3, #0]
 8007de4:	e008      	b.n	8007df8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007de6:	4b0c      	ldr	r3, [pc, #48]	; (8007e18 <prvInsertBlockIntoFreeList+0xb0>)
 8007de8:	681a      	ldr	r2, [r3, #0]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	601a      	str	r2, [r3, #0]
 8007dee:	e003      	b.n	8007df8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681a      	ldr	r2, [r3, #0]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007df8:	68fa      	ldr	r2, [r7, #12]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	d002      	beq.n	8007e06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	687a      	ldr	r2, [r7, #4]
 8007e04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e06:	bf00      	nop
 8007e08:	3714      	adds	r7, #20
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e10:	4770      	bx	lr
 8007e12:	bf00      	nop
 8007e14:	200024b8 	.word	0x200024b8
 8007e18:	200024c0 	.word	0x200024c0

08007e1c <std>:
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	b510      	push	{r4, lr}
 8007e20:	4604      	mov	r4, r0
 8007e22:	e9c0 3300 	strd	r3, r3, [r0]
 8007e26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007e2a:	6083      	str	r3, [r0, #8]
 8007e2c:	8181      	strh	r1, [r0, #12]
 8007e2e:	6643      	str	r3, [r0, #100]	; 0x64
 8007e30:	81c2      	strh	r2, [r0, #14]
 8007e32:	6183      	str	r3, [r0, #24]
 8007e34:	4619      	mov	r1, r3
 8007e36:	2208      	movs	r2, #8
 8007e38:	305c      	adds	r0, #92	; 0x5c
 8007e3a:	f000 f91f 	bl	800807c <memset>
 8007e3e:	4b0d      	ldr	r3, [pc, #52]	; (8007e74 <std+0x58>)
 8007e40:	6263      	str	r3, [r4, #36]	; 0x24
 8007e42:	4b0d      	ldr	r3, [pc, #52]	; (8007e78 <std+0x5c>)
 8007e44:	62a3      	str	r3, [r4, #40]	; 0x28
 8007e46:	4b0d      	ldr	r3, [pc, #52]	; (8007e7c <std+0x60>)
 8007e48:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007e4a:	4b0d      	ldr	r3, [pc, #52]	; (8007e80 <std+0x64>)
 8007e4c:	6323      	str	r3, [r4, #48]	; 0x30
 8007e4e:	4b0d      	ldr	r3, [pc, #52]	; (8007e84 <std+0x68>)
 8007e50:	6224      	str	r4, [r4, #32]
 8007e52:	429c      	cmp	r4, r3
 8007e54:	d006      	beq.n	8007e64 <std+0x48>
 8007e56:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007e5a:	4294      	cmp	r4, r2
 8007e5c:	d002      	beq.n	8007e64 <std+0x48>
 8007e5e:	33d0      	adds	r3, #208	; 0xd0
 8007e60:	429c      	cmp	r4, r3
 8007e62:	d105      	bne.n	8007e70 <std+0x54>
 8007e64:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007e68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e6c:	f000 b98e 	b.w	800818c <__retarget_lock_init_recursive>
 8007e70:	bd10      	pop	{r4, pc}
 8007e72:	bf00      	nop
 8007e74:	08008aa5 	.word	0x08008aa5
 8007e78:	08008ac7 	.word	0x08008ac7
 8007e7c:	08008aff 	.word	0x08008aff
 8007e80:	08008b23 	.word	0x08008b23
 8007e84:	200024d8 	.word	0x200024d8

08007e88 <stdio_exit_handler>:
 8007e88:	4a02      	ldr	r2, [pc, #8]	; (8007e94 <stdio_exit_handler+0xc>)
 8007e8a:	4903      	ldr	r1, [pc, #12]	; (8007e98 <stdio_exit_handler+0x10>)
 8007e8c:	4803      	ldr	r0, [pc, #12]	; (8007e9c <stdio_exit_handler+0x14>)
 8007e8e:	f000 b869 	b.w	8007f64 <_fwalk_sglue>
 8007e92:	bf00      	nop
 8007e94:	20000010 	.word	0x20000010
 8007e98:	08008a3d 	.word	0x08008a3d
 8007e9c:	2000001c 	.word	0x2000001c

08007ea0 <cleanup_stdio>:
 8007ea0:	6841      	ldr	r1, [r0, #4]
 8007ea2:	4b0c      	ldr	r3, [pc, #48]	; (8007ed4 <cleanup_stdio+0x34>)
 8007ea4:	4299      	cmp	r1, r3
 8007ea6:	b510      	push	{r4, lr}
 8007ea8:	4604      	mov	r4, r0
 8007eaa:	d001      	beq.n	8007eb0 <cleanup_stdio+0x10>
 8007eac:	f000 fdc6 	bl	8008a3c <_fflush_r>
 8007eb0:	68a1      	ldr	r1, [r4, #8]
 8007eb2:	4b09      	ldr	r3, [pc, #36]	; (8007ed8 <cleanup_stdio+0x38>)
 8007eb4:	4299      	cmp	r1, r3
 8007eb6:	d002      	beq.n	8007ebe <cleanup_stdio+0x1e>
 8007eb8:	4620      	mov	r0, r4
 8007eba:	f000 fdbf 	bl	8008a3c <_fflush_r>
 8007ebe:	68e1      	ldr	r1, [r4, #12]
 8007ec0:	4b06      	ldr	r3, [pc, #24]	; (8007edc <cleanup_stdio+0x3c>)
 8007ec2:	4299      	cmp	r1, r3
 8007ec4:	d004      	beq.n	8007ed0 <cleanup_stdio+0x30>
 8007ec6:	4620      	mov	r0, r4
 8007ec8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ecc:	f000 bdb6 	b.w	8008a3c <_fflush_r>
 8007ed0:	bd10      	pop	{r4, pc}
 8007ed2:	bf00      	nop
 8007ed4:	200024d8 	.word	0x200024d8
 8007ed8:	20002540 	.word	0x20002540
 8007edc:	200025a8 	.word	0x200025a8

08007ee0 <global_stdio_init.part.0>:
 8007ee0:	b510      	push	{r4, lr}
 8007ee2:	4b0b      	ldr	r3, [pc, #44]	; (8007f10 <global_stdio_init.part.0+0x30>)
 8007ee4:	4c0b      	ldr	r4, [pc, #44]	; (8007f14 <global_stdio_init.part.0+0x34>)
 8007ee6:	4a0c      	ldr	r2, [pc, #48]	; (8007f18 <global_stdio_init.part.0+0x38>)
 8007ee8:	601a      	str	r2, [r3, #0]
 8007eea:	4620      	mov	r0, r4
 8007eec:	2200      	movs	r2, #0
 8007eee:	2104      	movs	r1, #4
 8007ef0:	f7ff ff94 	bl	8007e1c <std>
 8007ef4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007ef8:	2201      	movs	r2, #1
 8007efa:	2109      	movs	r1, #9
 8007efc:	f7ff ff8e 	bl	8007e1c <std>
 8007f00:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007f04:	2202      	movs	r2, #2
 8007f06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f0a:	2112      	movs	r1, #18
 8007f0c:	f7ff bf86 	b.w	8007e1c <std>
 8007f10:	20002610 	.word	0x20002610
 8007f14:	200024d8 	.word	0x200024d8
 8007f18:	08007e89 	.word	0x08007e89

08007f1c <__sfp_lock_acquire>:
 8007f1c:	4801      	ldr	r0, [pc, #4]	; (8007f24 <__sfp_lock_acquire+0x8>)
 8007f1e:	f000 b936 	b.w	800818e <__retarget_lock_acquire_recursive>
 8007f22:	bf00      	nop
 8007f24:	20002619 	.word	0x20002619

08007f28 <__sfp_lock_release>:
 8007f28:	4801      	ldr	r0, [pc, #4]	; (8007f30 <__sfp_lock_release+0x8>)
 8007f2a:	f000 b931 	b.w	8008190 <__retarget_lock_release_recursive>
 8007f2e:	bf00      	nop
 8007f30:	20002619 	.word	0x20002619

08007f34 <__sinit>:
 8007f34:	b510      	push	{r4, lr}
 8007f36:	4604      	mov	r4, r0
 8007f38:	f7ff fff0 	bl	8007f1c <__sfp_lock_acquire>
 8007f3c:	6a23      	ldr	r3, [r4, #32]
 8007f3e:	b11b      	cbz	r3, 8007f48 <__sinit+0x14>
 8007f40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f44:	f7ff bff0 	b.w	8007f28 <__sfp_lock_release>
 8007f48:	4b04      	ldr	r3, [pc, #16]	; (8007f5c <__sinit+0x28>)
 8007f4a:	6223      	str	r3, [r4, #32]
 8007f4c:	4b04      	ldr	r3, [pc, #16]	; (8007f60 <__sinit+0x2c>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d1f5      	bne.n	8007f40 <__sinit+0xc>
 8007f54:	f7ff ffc4 	bl	8007ee0 <global_stdio_init.part.0>
 8007f58:	e7f2      	b.n	8007f40 <__sinit+0xc>
 8007f5a:	bf00      	nop
 8007f5c:	08007ea1 	.word	0x08007ea1
 8007f60:	20002610 	.word	0x20002610

08007f64 <_fwalk_sglue>:
 8007f64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f68:	4607      	mov	r7, r0
 8007f6a:	4688      	mov	r8, r1
 8007f6c:	4614      	mov	r4, r2
 8007f6e:	2600      	movs	r6, #0
 8007f70:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007f74:	f1b9 0901 	subs.w	r9, r9, #1
 8007f78:	d505      	bpl.n	8007f86 <_fwalk_sglue+0x22>
 8007f7a:	6824      	ldr	r4, [r4, #0]
 8007f7c:	2c00      	cmp	r4, #0
 8007f7e:	d1f7      	bne.n	8007f70 <_fwalk_sglue+0xc>
 8007f80:	4630      	mov	r0, r6
 8007f82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f86:	89ab      	ldrh	r3, [r5, #12]
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	d907      	bls.n	8007f9c <_fwalk_sglue+0x38>
 8007f8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f90:	3301      	adds	r3, #1
 8007f92:	d003      	beq.n	8007f9c <_fwalk_sglue+0x38>
 8007f94:	4629      	mov	r1, r5
 8007f96:	4638      	mov	r0, r7
 8007f98:	47c0      	blx	r8
 8007f9a:	4306      	orrs	r6, r0
 8007f9c:	3568      	adds	r5, #104	; 0x68
 8007f9e:	e7e9      	b.n	8007f74 <_fwalk_sglue+0x10>

08007fa0 <iprintf>:
 8007fa0:	b40f      	push	{r0, r1, r2, r3}
 8007fa2:	b507      	push	{r0, r1, r2, lr}
 8007fa4:	4906      	ldr	r1, [pc, #24]	; (8007fc0 <iprintf+0x20>)
 8007fa6:	ab04      	add	r3, sp, #16
 8007fa8:	6808      	ldr	r0, [r1, #0]
 8007faa:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fae:	6881      	ldr	r1, [r0, #8]
 8007fb0:	9301      	str	r3, [sp, #4]
 8007fb2:	f000 f973 	bl	800829c <_vfiprintf_r>
 8007fb6:	b003      	add	sp, #12
 8007fb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007fbc:	b004      	add	sp, #16
 8007fbe:	4770      	bx	lr
 8007fc0:	20000068 	.word	0x20000068

08007fc4 <_puts_r>:
 8007fc4:	6a03      	ldr	r3, [r0, #32]
 8007fc6:	b570      	push	{r4, r5, r6, lr}
 8007fc8:	6884      	ldr	r4, [r0, #8]
 8007fca:	4605      	mov	r5, r0
 8007fcc:	460e      	mov	r6, r1
 8007fce:	b90b      	cbnz	r3, 8007fd4 <_puts_r+0x10>
 8007fd0:	f7ff ffb0 	bl	8007f34 <__sinit>
 8007fd4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007fd6:	07db      	lsls	r3, r3, #31
 8007fd8:	d405      	bmi.n	8007fe6 <_puts_r+0x22>
 8007fda:	89a3      	ldrh	r3, [r4, #12]
 8007fdc:	0598      	lsls	r0, r3, #22
 8007fde:	d402      	bmi.n	8007fe6 <_puts_r+0x22>
 8007fe0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007fe2:	f000 f8d4 	bl	800818e <__retarget_lock_acquire_recursive>
 8007fe6:	89a3      	ldrh	r3, [r4, #12]
 8007fe8:	0719      	lsls	r1, r3, #28
 8007fea:	d513      	bpl.n	8008014 <_puts_r+0x50>
 8007fec:	6923      	ldr	r3, [r4, #16]
 8007fee:	b18b      	cbz	r3, 8008014 <_puts_r+0x50>
 8007ff0:	3e01      	subs	r6, #1
 8007ff2:	68a3      	ldr	r3, [r4, #8]
 8007ff4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007ff8:	3b01      	subs	r3, #1
 8007ffa:	60a3      	str	r3, [r4, #8]
 8007ffc:	b9e9      	cbnz	r1, 800803a <_puts_r+0x76>
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	da2e      	bge.n	8008060 <_puts_r+0x9c>
 8008002:	4622      	mov	r2, r4
 8008004:	210a      	movs	r1, #10
 8008006:	4628      	mov	r0, r5
 8008008:	f000 fd8f 	bl	8008b2a <__swbuf_r>
 800800c:	3001      	adds	r0, #1
 800800e:	d007      	beq.n	8008020 <_puts_r+0x5c>
 8008010:	250a      	movs	r5, #10
 8008012:	e007      	b.n	8008024 <_puts_r+0x60>
 8008014:	4621      	mov	r1, r4
 8008016:	4628      	mov	r0, r5
 8008018:	f000 fdc4 	bl	8008ba4 <__swsetup_r>
 800801c:	2800      	cmp	r0, #0
 800801e:	d0e7      	beq.n	8007ff0 <_puts_r+0x2c>
 8008020:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8008024:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008026:	07da      	lsls	r2, r3, #31
 8008028:	d405      	bmi.n	8008036 <_puts_r+0x72>
 800802a:	89a3      	ldrh	r3, [r4, #12]
 800802c:	059b      	lsls	r3, r3, #22
 800802e:	d402      	bmi.n	8008036 <_puts_r+0x72>
 8008030:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008032:	f000 f8ad 	bl	8008190 <__retarget_lock_release_recursive>
 8008036:	4628      	mov	r0, r5
 8008038:	bd70      	pop	{r4, r5, r6, pc}
 800803a:	2b00      	cmp	r3, #0
 800803c:	da04      	bge.n	8008048 <_puts_r+0x84>
 800803e:	69a2      	ldr	r2, [r4, #24]
 8008040:	429a      	cmp	r2, r3
 8008042:	dc06      	bgt.n	8008052 <_puts_r+0x8e>
 8008044:	290a      	cmp	r1, #10
 8008046:	d004      	beq.n	8008052 <_puts_r+0x8e>
 8008048:	6823      	ldr	r3, [r4, #0]
 800804a:	1c5a      	adds	r2, r3, #1
 800804c:	6022      	str	r2, [r4, #0]
 800804e:	7019      	strb	r1, [r3, #0]
 8008050:	e7cf      	b.n	8007ff2 <_puts_r+0x2e>
 8008052:	4622      	mov	r2, r4
 8008054:	4628      	mov	r0, r5
 8008056:	f000 fd68 	bl	8008b2a <__swbuf_r>
 800805a:	3001      	adds	r0, #1
 800805c:	d1c9      	bne.n	8007ff2 <_puts_r+0x2e>
 800805e:	e7df      	b.n	8008020 <_puts_r+0x5c>
 8008060:	6823      	ldr	r3, [r4, #0]
 8008062:	250a      	movs	r5, #10
 8008064:	1c5a      	adds	r2, r3, #1
 8008066:	6022      	str	r2, [r4, #0]
 8008068:	701d      	strb	r5, [r3, #0]
 800806a:	e7db      	b.n	8008024 <_puts_r+0x60>

0800806c <puts>:
 800806c:	4b02      	ldr	r3, [pc, #8]	; (8008078 <puts+0xc>)
 800806e:	4601      	mov	r1, r0
 8008070:	6818      	ldr	r0, [r3, #0]
 8008072:	f7ff bfa7 	b.w	8007fc4 <_puts_r>
 8008076:	bf00      	nop
 8008078:	20000068 	.word	0x20000068

0800807c <memset>:
 800807c:	4402      	add	r2, r0
 800807e:	4603      	mov	r3, r0
 8008080:	4293      	cmp	r3, r2
 8008082:	d100      	bne.n	8008086 <memset+0xa>
 8008084:	4770      	bx	lr
 8008086:	f803 1b01 	strb.w	r1, [r3], #1
 800808a:	e7f9      	b.n	8008080 <memset+0x4>

0800808c <_reclaim_reent>:
 800808c:	4b29      	ldr	r3, [pc, #164]	; (8008134 <_reclaim_reent+0xa8>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4283      	cmp	r3, r0
 8008092:	b570      	push	{r4, r5, r6, lr}
 8008094:	4604      	mov	r4, r0
 8008096:	d04b      	beq.n	8008130 <_reclaim_reent+0xa4>
 8008098:	69c3      	ldr	r3, [r0, #28]
 800809a:	b143      	cbz	r3, 80080ae <_reclaim_reent+0x22>
 800809c:	68db      	ldr	r3, [r3, #12]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d144      	bne.n	800812c <_reclaim_reent+0xa0>
 80080a2:	69e3      	ldr	r3, [r4, #28]
 80080a4:	6819      	ldr	r1, [r3, #0]
 80080a6:	b111      	cbz	r1, 80080ae <_reclaim_reent+0x22>
 80080a8:	4620      	mov	r0, r4
 80080aa:	f000 f881 	bl	80081b0 <_free_r>
 80080ae:	6961      	ldr	r1, [r4, #20]
 80080b0:	b111      	cbz	r1, 80080b8 <_reclaim_reent+0x2c>
 80080b2:	4620      	mov	r0, r4
 80080b4:	f000 f87c 	bl	80081b0 <_free_r>
 80080b8:	69e1      	ldr	r1, [r4, #28]
 80080ba:	b111      	cbz	r1, 80080c2 <_reclaim_reent+0x36>
 80080bc:	4620      	mov	r0, r4
 80080be:	f000 f877 	bl	80081b0 <_free_r>
 80080c2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80080c4:	b111      	cbz	r1, 80080cc <_reclaim_reent+0x40>
 80080c6:	4620      	mov	r0, r4
 80080c8:	f000 f872 	bl	80081b0 <_free_r>
 80080cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80080ce:	b111      	cbz	r1, 80080d6 <_reclaim_reent+0x4a>
 80080d0:	4620      	mov	r0, r4
 80080d2:	f000 f86d 	bl	80081b0 <_free_r>
 80080d6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80080d8:	b111      	cbz	r1, 80080e0 <_reclaim_reent+0x54>
 80080da:	4620      	mov	r0, r4
 80080dc:	f000 f868 	bl	80081b0 <_free_r>
 80080e0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80080e2:	b111      	cbz	r1, 80080ea <_reclaim_reent+0x5e>
 80080e4:	4620      	mov	r0, r4
 80080e6:	f000 f863 	bl	80081b0 <_free_r>
 80080ea:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80080ec:	b111      	cbz	r1, 80080f4 <_reclaim_reent+0x68>
 80080ee:	4620      	mov	r0, r4
 80080f0:	f000 f85e 	bl	80081b0 <_free_r>
 80080f4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80080f6:	b111      	cbz	r1, 80080fe <_reclaim_reent+0x72>
 80080f8:	4620      	mov	r0, r4
 80080fa:	f000 f859 	bl	80081b0 <_free_r>
 80080fe:	6a23      	ldr	r3, [r4, #32]
 8008100:	b1b3      	cbz	r3, 8008130 <_reclaim_reent+0xa4>
 8008102:	4620      	mov	r0, r4
 8008104:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008108:	4718      	bx	r3
 800810a:	5949      	ldr	r1, [r1, r5]
 800810c:	b941      	cbnz	r1, 8008120 <_reclaim_reent+0x94>
 800810e:	3504      	adds	r5, #4
 8008110:	69e3      	ldr	r3, [r4, #28]
 8008112:	2d80      	cmp	r5, #128	; 0x80
 8008114:	68d9      	ldr	r1, [r3, #12]
 8008116:	d1f8      	bne.n	800810a <_reclaim_reent+0x7e>
 8008118:	4620      	mov	r0, r4
 800811a:	f000 f849 	bl	80081b0 <_free_r>
 800811e:	e7c0      	b.n	80080a2 <_reclaim_reent+0x16>
 8008120:	680e      	ldr	r6, [r1, #0]
 8008122:	4620      	mov	r0, r4
 8008124:	f000 f844 	bl	80081b0 <_free_r>
 8008128:	4631      	mov	r1, r6
 800812a:	e7ef      	b.n	800810c <_reclaim_reent+0x80>
 800812c:	2500      	movs	r5, #0
 800812e:	e7ef      	b.n	8008110 <_reclaim_reent+0x84>
 8008130:	bd70      	pop	{r4, r5, r6, pc}
 8008132:	bf00      	nop
 8008134:	20000068 	.word	0x20000068

08008138 <__errno>:
 8008138:	4b01      	ldr	r3, [pc, #4]	; (8008140 <__errno+0x8>)
 800813a:	6818      	ldr	r0, [r3, #0]
 800813c:	4770      	bx	lr
 800813e:	bf00      	nop
 8008140:	20000068 	.word	0x20000068

08008144 <__libc_init_array>:
 8008144:	b570      	push	{r4, r5, r6, lr}
 8008146:	4d0d      	ldr	r5, [pc, #52]	; (800817c <__libc_init_array+0x38>)
 8008148:	4c0d      	ldr	r4, [pc, #52]	; (8008180 <__libc_init_array+0x3c>)
 800814a:	1b64      	subs	r4, r4, r5
 800814c:	10a4      	asrs	r4, r4, #2
 800814e:	2600      	movs	r6, #0
 8008150:	42a6      	cmp	r6, r4
 8008152:	d109      	bne.n	8008168 <__libc_init_array+0x24>
 8008154:	4d0b      	ldr	r5, [pc, #44]	; (8008184 <__libc_init_array+0x40>)
 8008156:	4c0c      	ldr	r4, [pc, #48]	; (8008188 <__libc_init_array+0x44>)
 8008158:	f000 fe56 	bl	8008e08 <_init>
 800815c:	1b64      	subs	r4, r4, r5
 800815e:	10a4      	asrs	r4, r4, #2
 8008160:	2600      	movs	r6, #0
 8008162:	42a6      	cmp	r6, r4
 8008164:	d105      	bne.n	8008172 <__libc_init_array+0x2e>
 8008166:	bd70      	pop	{r4, r5, r6, pc}
 8008168:	f855 3b04 	ldr.w	r3, [r5], #4
 800816c:	4798      	blx	r3
 800816e:	3601      	adds	r6, #1
 8008170:	e7ee      	b.n	8008150 <__libc_init_array+0xc>
 8008172:	f855 3b04 	ldr.w	r3, [r5], #4
 8008176:	4798      	blx	r3
 8008178:	3601      	adds	r6, #1
 800817a:	e7f2      	b.n	8008162 <__libc_init_array+0x1e>
 800817c:	08008fdc 	.word	0x08008fdc
 8008180:	08008fdc 	.word	0x08008fdc
 8008184:	08008fdc 	.word	0x08008fdc
 8008188:	08008fe0 	.word	0x08008fe0

0800818c <__retarget_lock_init_recursive>:
 800818c:	4770      	bx	lr

0800818e <__retarget_lock_acquire_recursive>:
 800818e:	4770      	bx	lr

08008190 <__retarget_lock_release_recursive>:
 8008190:	4770      	bx	lr

08008192 <memcpy>:
 8008192:	440a      	add	r2, r1
 8008194:	4291      	cmp	r1, r2
 8008196:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800819a:	d100      	bne.n	800819e <memcpy+0xc>
 800819c:	4770      	bx	lr
 800819e:	b510      	push	{r4, lr}
 80081a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081a8:	4291      	cmp	r1, r2
 80081aa:	d1f9      	bne.n	80081a0 <memcpy+0xe>
 80081ac:	bd10      	pop	{r4, pc}
	...

080081b0 <_free_r>:
 80081b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80081b2:	2900      	cmp	r1, #0
 80081b4:	d044      	beq.n	8008240 <_free_r+0x90>
 80081b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081ba:	9001      	str	r0, [sp, #4]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	f1a1 0404 	sub.w	r4, r1, #4
 80081c2:	bfb8      	it	lt
 80081c4:	18e4      	addlt	r4, r4, r3
 80081c6:	f000 fc61 	bl	8008a8c <__malloc_lock>
 80081ca:	4a1e      	ldr	r2, [pc, #120]	; (8008244 <_free_r+0x94>)
 80081cc:	9801      	ldr	r0, [sp, #4]
 80081ce:	6813      	ldr	r3, [r2, #0]
 80081d0:	b933      	cbnz	r3, 80081e0 <_free_r+0x30>
 80081d2:	6063      	str	r3, [r4, #4]
 80081d4:	6014      	str	r4, [r2, #0]
 80081d6:	b003      	add	sp, #12
 80081d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80081dc:	f000 bc5c 	b.w	8008a98 <__malloc_unlock>
 80081e0:	42a3      	cmp	r3, r4
 80081e2:	d908      	bls.n	80081f6 <_free_r+0x46>
 80081e4:	6825      	ldr	r5, [r4, #0]
 80081e6:	1961      	adds	r1, r4, r5
 80081e8:	428b      	cmp	r3, r1
 80081ea:	bf01      	itttt	eq
 80081ec:	6819      	ldreq	r1, [r3, #0]
 80081ee:	685b      	ldreq	r3, [r3, #4]
 80081f0:	1949      	addeq	r1, r1, r5
 80081f2:	6021      	streq	r1, [r4, #0]
 80081f4:	e7ed      	b.n	80081d2 <_free_r+0x22>
 80081f6:	461a      	mov	r2, r3
 80081f8:	685b      	ldr	r3, [r3, #4]
 80081fa:	b10b      	cbz	r3, 8008200 <_free_r+0x50>
 80081fc:	42a3      	cmp	r3, r4
 80081fe:	d9fa      	bls.n	80081f6 <_free_r+0x46>
 8008200:	6811      	ldr	r1, [r2, #0]
 8008202:	1855      	adds	r5, r2, r1
 8008204:	42a5      	cmp	r5, r4
 8008206:	d10b      	bne.n	8008220 <_free_r+0x70>
 8008208:	6824      	ldr	r4, [r4, #0]
 800820a:	4421      	add	r1, r4
 800820c:	1854      	adds	r4, r2, r1
 800820e:	42a3      	cmp	r3, r4
 8008210:	6011      	str	r1, [r2, #0]
 8008212:	d1e0      	bne.n	80081d6 <_free_r+0x26>
 8008214:	681c      	ldr	r4, [r3, #0]
 8008216:	685b      	ldr	r3, [r3, #4]
 8008218:	6053      	str	r3, [r2, #4]
 800821a:	440c      	add	r4, r1
 800821c:	6014      	str	r4, [r2, #0]
 800821e:	e7da      	b.n	80081d6 <_free_r+0x26>
 8008220:	d902      	bls.n	8008228 <_free_r+0x78>
 8008222:	230c      	movs	r3, #12
 8008224:	6003      	str	r3, [r0, #0]
 8008226:	e7d6      	b.n	80081d6 <_free_r+0x26>
 8008228:	6825      	ldr	r5, [r4, #0]
 800822a:	1961      	adds	r1, r4, r5
 800822c:	428b      	cmp	r3, r1
 800822e:	bf04      	itt	eq
 8008230:	6819      	ldreq	r1, [r3, #0]
 8008232:	685b      	ldreq	r3, [r3, #4]
 8008234:	6063      	str	r3, [r4, #4]
 8008236:	bf04      	itt	eq
 8008238:	1949      	addeq	r1, r1, r5
 800823a:	6021      	streq	r1, [r4, #0]
 800823c:	6054      	str	r4, [r2, #4]
 800823e:	e7ca      	b.n	80081d6 <_free_r+0x26>
 8008240:	b003      	add	sp, #12
 8008242:	bd30      	pop	{r4, r5, pc}
 8008244:	2000261c 	.word	0x2000261c

08008248 <__sfputc_r>:
 8008248:	6893      	ldr	r3, [r2, #8]
 800824a:	3b01      	subs	r3, #1
 800824c:	2b00      	cmp	r3, #0
 800824e:	b410      	push	{r4}
 8008250:	6093      	str	r3, [r2, #8]
 8008252:	da08      	bge.n	8008266 <__sfputc_r+0x1e>
 8008254:	6994      	ldr	r4, [r2, #24]
 8008256:	42a3      	cmp	r3, r4
 8008258:	db01      	blt.n	800825e <__sfputc_r+0x16>
 800825a:	290a      	cmp	r1, #10
 800825c:	d103      	bne.n	8008266 <__sfputc_r+0x1e>
 800825e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008262:	f000 bc62 	b.w	8008b2a <__swbuf_r>
 8008266:	6813      	ldr	r3, [r2, #0]
 8008268:	1c58      	adds	r0, r3, #1
 800826a:	6010      	str	r0, [r2, #0]
 800826c:	7019      	strb	r1, [r3, #0]
 800826e:	4608      	mov	r0, r1
 8008270:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008274:	4770      	bx	lr

08008276 <__sfputs_r>:
 8008276:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008278:	4606      	mov	r6, r0
 800827a:	460f      	mov	r7, r1
 800827c:	4614      	mov	r4, r2
 800827e:	18d5      	adds	r5, r2, r3
 8008280:	42ac      	cmp	r4, r5
 8008282:	d101      	bne.n	8008288 <__sfputs_r+0x12>
 8008284:	2000      	movs	r0, #0
 8008286:	e007      	b.n	8008298 <__sfputs_r+0x22>
 8008288:	f814 1b01 	ldrb.w	r1, [r4], #1
 800828c:	463a      	mov	r2, r7
 800828e:	4630      	mov	r0, r6
 8008290:	f7ff ffda 	bl	8008248 <__sfputc_r>
 8008294:	1c43      	adds	r3, r0, #1
 8008296:	d1f3      	bne.n	8008280 <__sfputs_r+0xa>
 8008298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800829c <_vfiprintf_r>:
 800829c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082a0:	460d      	mov	r5, r1
 80082a2:	b09d      	sub	sp, #116	; 0x74
 80082a4:	4614      	mov	r4, r2
 80082a6:	4698      	mov	r8, r3
 80082a8:	4606      	mov	r6, r0
 80082aa:	b118      	cbz	r0, 80082b4 <_vfiprintf_r+0x18>
 80082ac:	6a03      	ldr	r3, [r0, #32]
 80082ae:	b90b      	cbnz	r3, 80082b4 <_vfiprintf_r+0x18>
 80082b0:	f7ff fe40 	bl	8007f34 <__sinit>
 80082b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80082b6:	07d9      	lsls	r1, r3, #31
 80082b8:	d405      	bmi.n	80082c6 <_vfiprintf_r+0x2a>
 80082ba:	89ab      	ldrh	r3, [r5, #12]
 80082bc:	059a      	lsls	r2, r3, #22
 80082be:	d402      	bmi.n	80082c6 <_vfiprintf_r+0x2a>
 80082c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80082c2:	f7ff ff64 	bl	800818e <__retarget_lock_acquire_recursive>
 80082c6:	89ab      	ldrh	r3, [r5, #12]
 80082c8:	071b      	lsls	r3, r3, #28
 80082ca:	d501      	bpl.n	80082d0 <_vfiprintf_r+0x34>
 80082cc:	692b      	ldr	r3, [r5, #16]
 80082ce:	b99b      	cbnz	r3, 80082f8 <_vfiprintf_r+0x5c>
 80082d0:	4629      	mov	r1, r5
 80082d2:	4630      	mov	r0, r6
 80082d4:	f000 fc66 	bl	8008ba4 <__swsetup_r>
 80082d8:	b170      	cbz	r0, 80082f8 <_vfiprintf_r+0x5c>
 80082da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80082dc:	07dc      	lsls	r4, r3, #31
 80082de:	d504      	bpl.n	80082ea <_vfiprintf_r+0x4e>
 80082e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80082e4:	b01d      	add	sp, #116	; 0x74
 80082e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082ea:	89ab      	ldrh	r3, [r5, #12]
 80082ec:	0598      	lsls	r0, r3, #22
 80082ee:	d4f7      	bmi.n	80082e0 <_vfiprintf_r+0x44>
 80082f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80082f2:	f7ff ff4d 	bl	8008190 <__retarget_lock_release_recursive>
 80082f6:	e7f3      	b.n	80082e0 <_vfiprintf_r+0x44>
 80082f8:	2300      	movs	r3, #0
 80082fa:	9309      	str	r3, [sp, #36]	; 0x24
 80082fc:	2320      	movs	r3, #32
 80082fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008302:	f8cd 800c 	str.w	r8, [sp, #12]
 8008306:	2330      	movs	r3, #48	; 0x30
 8008308:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80084bc <_vfiprintf_r+0x220>
 800830c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008310:	f04f 0901 	mov.w	r9, #1
 8008314:	4623      	mov	r3, r4
 8008316:	469a      	mov	sl, r3
 8008318:	f813 2b01 	ldrb.w	r2, [r3], #1
 800831c:	b10a      	cbz	r2, 8008322 <_vfiprintf_r+0x86>
 800831e:	2a25      	cmp	r2, #37	; 0x25
 8008320:	d1f9      	bne.n	8008316 <_vfiprintf_r+0x7a>
 8008322:	ebba 0b04 	subs.w	fp, sl, r4
 8008326:	d00b      	beq.n	8008340 <_vfiprintf_r+0xa4>
 8008328:	465b      	mov	r3, fp
 800832a:	4622      	mov	r2, r4
 800832c:	4629      	mov	r1, r5
 800832e:	4630      	mov	r0, r6
 8008330:	f7ff ffa1 	bl	8008276 <__sfputs_r>
 8008334:	3001      	adds	r0, #1
 8008336:	f000 80a9 	beq.w	800848c <_vfiprintf_r+0x1f0>
 800833a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800833c:	445a      	add	r2, fp
 800833e:	9209      	str	r2, [sp, #36]	; 0x24
 8008340:	f89a 3000 	ldrb.w	r3, [sl]
 8008344:	2b00      	cmp	r3, #0
 8008346:	f000 80a1 	beq.w	800848c <_vfiprintf_r+0x1f0>
 800834a:	2300      	movs	r3, #0
 800834c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008350:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008354:	f10a 0a01 	add.w	sl, sl, #1
 8008358:	9304      	str	r3, [sp, #16]
 800835a:	9307      	str	r3, [sp, #28]
 800835c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008360:	931a      	str	r3, [sp, #104]	; 0x68
 8008362:	4654      	mov	r4, sl
 8008364:	2205      	movs	r2, #5
 8008366:	f814 1b01 	ldrb.w	r1, [r4], #1
 800836a:	4854      	ldr	r0, [pc, #336]	; (80084bc <_vfiprintf_r+0x220>)
 800836c:	f7f7 ff30 	bl	80001d0 <memchr>
 8008370:	9a04      	ldr	r2, [sp, #16]
 8008372:	b9d8      	cbnz	r0, 80083ac <_vfiprintf_r+0x110>
 8008374:	06d1      	lsls	r1, r2, #27
 8008376:	bf44      	itt	mi
 8008378:	2320      	movmi	r3, #32
 800837a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800837e:	0713      	lsls	r3, r2, #28
 8008380:	bf44      	itt	mi
 8008382:	232b      	movmi	r3, #43	; 0x2b
 8008384:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008388:	f89a 3000 	ldrb.w	r3, [sl]
 800838c:	2b2a      	cmp	r3, #42	; 0x2a
 800838e:	d015      	beq.n	80083bc <_vfiprintf_r+0x120>
 8008390:	9a07      	ldr	r2, [sp, #28]
 8008392:	4654      	mov	r4, sl
 8008394:	2000      	movs	r0, #0
 8008396:	f04f 0c0a 	mov.w	ip, #10
 800839a:	4621      	mov	r1, r4
 800839c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083a0:	3b30      	subs	r3, #48	; 0x30
 80083a2:	2b09      	cmp	r3, #9
 80083a4:	d94d      	bls.n	8008442 <_vfiprintf_r+0x1a6>
 80083a6:	b1b0      	cbz	r0, 80083d6 <_vfiprintf_r+0x13a>
 80083a8:	9207      	str	r2, [sp, #28]
 80083aa:	e014      	b.n	80083d6 <_vfiprintf_r+0x13a>
 80083ac:	eba0 0308 	sub.w	r3, r0, r8
 80083b0:	fa09 f303 	lsl.w	r3, r9, r3
 80083b4:	4313      	orrs	r3, r2
 80083b6:	9304      	str	r3, [sp, #16]
 80083b8:	46a2      	mov	sl, r4
 80083ba:	e7d2      	b.n	8008362 <_vfiprintf_r+0xc6>
 80083bc:	9b03      	ldr	r3, [sp, #12]
 80083be:	1d19      	adds	r1, r3, #4
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	9103      	str	r1, [sp, #12]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	bfbb      	ittet	lt
 80083c8:	425b      	neglt	r3, r3
 80083ca:	f042 0202 	orrlt.w	r2, r2, #2
 80083ce:	9307      	strge	r3, [sp, #28]
 80083d0:	9307      	strlt	r3, [sp, #28]
 80083d2:	bfb8      	it	lt
 80083d4:	9204      	strlt	r2, [sp, #16]
 80083d6:	7823      	ldrb	r3, [r4, #0]
 80083d8:	2b2e      	cmp	r3, #46	; 0x2e
 80083da:	d10c      	bne.n	80083f6 <_vfiprintf_r+0x15a>
 80083dc:	7863      	ldrb	r3, [r4, #1]
 80083de:	2b2a      	cmp	r3, #42	; 0x2a
 80083e0:	d134      	bne.n	800844c <_vfiprintf_r+0x1b0>
 80083e2:	9b03      	ldr	r3, [sp, #12]
 80083e4:	1d1a      	adds	r2, r3, #4
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	9203      	str	r2, [sp, #12]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	bfb8      	it	lt
 80083ee:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80083f2:	3402      	adds	r4, #2
 80083f4:	9305      	str	r3, [sp, #20]
 80083f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80084cc <_vfiprintf_r+0x230>
 80083fa:	7821      	ldrb	r1, [r4, #0]
 80083fc:	2203      	movs	r2, #3
 80083fe:	4650      	mov	r0, sl
 8008400:	f7f7 fee6 	bl	80001d0 <memchr>
 8008404:	b138      	cbz	r0, 8008416 <_vfiprintf_r+0x17a>
 8008406:	9b04      	ldr	r3, [sp, #16]
 8008408:	eba0 000a 	sub.w	r0, r0, sl
 800840c:	2240      	movs	r2, #64	; 0x40
 800840e:	4082      	lsls	r2, r0
 8008410:	4313      	orrs	r3, r2
 8008412:	3401      	adds	r4, #1
 8008414:	9304      	str	r3, [sp, #16]
 8008416:	f814 1b01 	ldrb.w	r1, [r4], #1
 800841a:	4829      	ldr	r0, [pc, #164]	; (80084c0 <_vfiprintf_r+0x224>)
 800841c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008420:	2206      	movs	r2, #6
 8008422:	f7f7 fed5 	bl	80001d0 <memchr>
 8008426:	2800      	cmp	r0, #0
 8008428:	d03f      	beq.n	80084aa <_vfiprintf_r+0x20e>
 800842a:	4b26      	ldr	r3, [pc, #152]	; (80084c4 <_vfiprintf_r+0x228>)
 800842c:	bb1b      	cbnz	r3, 8008476 <_vfiprintf_r+0x1da>
 800842e:	9b03      	ldr	r3, [sp, #12]
 8008430:	3307      	adds	r3, #7
 8008432:	f023 0307 	bic.w	r3, r3, #7
 8008436:	3308      	adds	r3, #8
 8008438:	9303      	str	r3, [sp, #12]
 800843a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800843c:	443b      	add	r3, r7
 800843e:	9309      	str	r3, [sp, #36]	; 0x24
 8008440:	e768      	b.n	8008314 <_vfiprintf_r+0x78>
 8008442:	fb0c 3202 	mla	r2, ip, r2, r3
 8008446:	460c      	mov	r4, r1
 8008448:	2001      	movs	r0, #1
 800844a:	e7a6      	b.n	800839a <_vfiprintf_r+0xfe>
 800844c:	2300      	movs	r3, #0
 800844e:	3401      	adds	r4, #1
 8008450:	9305      	str	r3, [sp, #20]
 8008452:	4619      	mov	r1, r3
 8008454:	f04f 0c0a 	mov.w	ip, #10
 8008458:	4620      	mov	r0, r4
 800845a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800845e:	3a30      	subs	r2, #48	; 0x30
 8008460:	2a09      	cmp	r2, #9
 8008462:	d903      	bls.n	800846c <_vfiprintf_r+0x1d0>
 8008464:	2b00      	cmp	r3, #0
 8008466:	d0c6      	beq.n	80083f6 <_vfiprintf_r+0x15a>
 8008468:	9105      	str	r1, [sp, #20]
 800846a:	e7c4      	b.n	80083f6 <_vfiprintf_r+0x15a>
 800846c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008470:	4604      	mov	r4, r0
 8008472:	2301      	movs	r3, #1
 8008474:	e7f0      	b.n	8008458 <_vfiprintf_r+0x1bc>
 8008476:	ab03      	add	r3, sp, #12
 8008478:	9300      	str	r3, [sp, #0]
 800847a:	462a      	mov	r2, r5
 800847c:	4b12      	ldr	r3, [pc, #72]	; (80084c8 <_vfiprintf_r+0x22c>)
 800847e:	a904      	add	r1, sp, #16
 8008480:	4630      	mov	r0, r6
 8008482:	f3af 8000 	nop.w
 8008486:	4607      	mov	r7, r0
 8008488:	1c78      	adds	r0, r7, #1
 800848a:	d1d6      	bne.n	800843a <_vfiprintf_r+0x19e>
 800848c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800848e:	07d9      	lsls	r1, r3, #31
 8008490:	d405      	bmi.n	800849e <_vfiprintf_r+0x202>
 8008492:	89ab      	ldrh	r3, [r5, #12]
 8008494:	059a      	lsls	r2, r3, #22
 8008496:	d402      	bmi.n	800849e <_vfiprintf_r+0x202>
 8008498:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800849a:	f7ff fe79 	bl	8008190 <__retarget_lock_release_recursive>
 800849e:	89ab      	ldrh	r3, [r5, #12]
 80084a0:	065b      	lsls	r3, r3, #25
 80084a2:	f53f af1d 	bmi.w	80082e0 <_vfiprintf_r+0x44>
 80084a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80084a8:	e71c      	b.n	80082e4 <_vfiprintf_r+0x48>
 80084aa:	ab03      	add	r3, sp, #12
 80084ac:	9300      	str	r3, [sp, #0]
 80084ae:	462a      	mov	r2, r5
 80084b0:	4b05      	ldr	r3, [pc, #20]	; (80084c8 <_vfiprintf_r+0x22c>)
 80084b2:	a904      	add	r1, sp, #16
 80084b4:	4630      	mov	r0, r6
 80084b6:	f000 f919 	bl	80086ec <_printf_i>
 80084ba:	e7e4      	b.n	8008486 <_vfiprintf_r+0x1ea>
 80084bc:	08008fa0 	.word	0x08008fa0
 80084c0:	08008faa 	.word	0x08008faa
 80084c4:	00000000 	.word	0x00000000
 80084c8:	08008277 	.word	0x08008277
 80084cc:	08008fa6 	.word	0x08008fa6

080084d0 <sbrk_aligned>:
 80084d0:	b570      	push	{r4, r5, r6, lr}
 80084d2:	4e0e      	ldr	r6, [pc, #56]	; (800850c <sbrk_aligned+0x3c>)
 80084d4:	460c      	mov	r4, r1
 80084d6:	6831      	ldr	r1, [r6, #0]
 80084d8:	4605      	mov	r5, r0
 80084da:	b911      	cbnz	r1, 80084e2 <sbrk_aligned+0x12>
 80084dc:	f000 fc72 	bl	8008dc4 <_sbrk_r>
 80084e0:	6030      	str	r0, [r6, #0]
 80084e2:	4621      	mov	r1, r4
 80084e4:	4628      	mov	r0, r5
 80084e6:	f000 fc6d 	bl	8008dc4 <_sbrk_r>
 80084ea:	1c43      	adds	r3, r0, #1
 80084ec:	d00a      	beq.n	8008504 <sbrk_aligned+0x34>
 80084ee:	1cc4      	adds	r4, r0, #3
 80084f0:	f024 0403 	bic.w	r4, r4, #3
 80084f4:	42a0      	cmp	r0, r4
 80084f6:	d007      	beq.n	8008508 <sbrk_aligned+0x38>
 80084f8:	1a21      	subs	r1, r4, r0
 80084fa:	4628      	mov	r0, r5
 80084fc:	f000 fc62 	bl	8008dc4 <_sbrk_r>
 8008500:	3001      	adds	r0, #1
 8008502:	d101      	bne.n	8008508 <sbrk_aligned+0x38>
 8008504:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008508:	4620      	mov	r0, r4
 800850a:	bd70      	pop	{r4, r5, r6, pc}
 800850c:	20002620 	.word	0x20002620

08008510 <_malloc_r>:
 8008510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008514:	1ccd      	adds	r5, r1, #3
 8008516:	f025 0503 	bic.w	r5, r5, #3
 800851a:	3508      	adds	r5, #8
 800851c:	2d0c      	cmp	r5, #12
 800851e:	bf38      	it	cc
 8008520:	250c      	movcc	r5, #12
 8008522:	2d00      	cmp	r5, #0
 8008524:	4607      	mov	r7, r0
 8008526:	db01      	blt.n	800852c <_malloc_r+0x1c>
 8008528:	42a9      	cmp	r1, r5
 800852a:	d905      	bls.n	8008538 <_malloc_r+0x28>
 800852c:	230c      	movs	r3, #12
 800852e:	603b      	str	r3, [r7, #0]
 8008530:	2600      	movs	r6, #0
 8008532:	4630      	mov	r0, r6
 8008534:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008538:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800860c <_malloc_r+0xfc>
 800853c:	f000 faa6 	bl	8008a8c <__malloc_lock>
 8008540:	f8d8 3000 	ldr.w	r3, [r8]
 8008544:	461c      	mov	r4, r3
 8008546:	bb5c      	cbnz	r4, 80085a0 <_malloc_r+0x90>
 8008548:	4629      	mov	r1, r5
 800854a:	4638      	mov	r0, r7
 800854c:	f7ff ffc0 	bl	80084d0 <sbrk_aligned>
 8008550:	1c43      	adds	r3, r0, #1
 8008552:	4604      	mov	r4, r0
 8008554:	d155      	bne.n	8008602 <_malloc_r+0xf2>
 8008556:	f8d8 4000 	ldr.w	r4, [r8]
 800855a:	4626      	mov	r6, r4
 800855c:	2e00      	cmp	r6, #0
 800855e:	d145      	bne.n	80085ec <_malloc_r+0xdc>
 8008560:	2c00      	cmp	r4, #0
 8008562:	d048      	beq.n	80085f6 <_malloc_r+0xe6>
 8008564:	6823      	ldr	r3, [r4, #0]
 8008566:	4631      	mov	r1, r6
 8008568:	4638      	mov	r0, r7
 800856a:	eb04 0903 	add.w	r9, r4, r3
 800856e:	f000 fc29 	bl	8008dc4 <_sbrk_r>
 8008572:	4581      	cmp	r9, r0
 8008574:	d13f      	bne.n	80085f6 <_malloc_r+0xe6>
 8008576:	6821      	ldr	r1, [r4, #0]
 8008578:	1a6d      	subs	r5, r5, r1
 800857a:	4629      	mov	r1, r5
 800857c:	4638      	mov	r0, r7
 800857e:	f7ff ffa7 	bl	80084d0 <sbrk_aligned>
 8008582:	3001      	adds	r0, #1
 8008584:	d037      	beq.n	80085f6 <_malloc_r+0xe6>
 8008586:	6823      	ldr	r3, [r4, #0]
 8008588:	442b      	add	r3, r5
 800858a:	6023      	str	r3, [r4, #0]
 800858c:	f8d8 3000 	ldr.w	r3, [r8]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d038      	beq.n	8008606 <_malloc_r+0xf6>
 8008594:	685a      	ldr	r2, [r3, #4]
 8008596:	42a2      	cmp	r2, r4
 8008598:	d12b      	bne.n	80085f2 <_malloc_r+0xe2>
 800859a:	2200      	movs	r2, #0
 800859c:	605a      	str	r2, [r3, #4]
 800859e:	e00f      	b.n	80085c0 <_malloc_r+0xb0>
 80085a0:	6822      	ldr	r2, [r4, #0]
 80085a2:	1b52      	subs	r2, r2, r5
 80085a4:	d41f      	bmi.n	80085e6 <_malloc_r+0xd6>
 80085a6:	2a0b      	cmp	r2, #11
 80085a8:	d917      	bls.n	80085da <_malloc_r+0xca>
 80085aa:	1961      	adds	r1, r4, r5
 80085ac:	42a3      	cmp	r3, r4
 80085ae:	6025      	str	r5, [r4, #0]
 80085b0:	bf18      	it	ne
 80085b2:	6059      	strne	r1, [r3, #4]
 80085b4:	6863      	ldr	r3, [r4, #4]
 80085b6:	bf08      	it	eq
 80085b8:	f8c8 1000 	streq.w	r1, [r8]
 80085bc:	5162      	str	r2, [r4, r5]
 80085be:	604b      	str	r3, [r1, #4]
 80085c0:	4638      	mov	r0, r7
 80085c2:	f104 060b 	add.w	r6, r4, #11
 80085c6:	f000 fa67 	bl	8008a98 <__malloc_unlock>
 80085ca:	f026 0607 	bic.w	r6, r6, #7
 80085ce:	1d23      	adds	r3, r4, #4
 80085d0:	1af2      	subs	r2, r6, r3
 80085d2:	d0ae      	beq.n	8008532 <_malloc_r+0x22>
 80085d4:	1b9b      	subs	r3, r3, r6
 80085d6:	50a3      	str	r3, [r4, r2]
 80085d8:	e7ab      	b.n	8008532 <_malloc_r+0x22>
 80085da:	42a3      	cmp	r3, r4
 80085dc:	6862      	ldr	r2, [r4, #4]
 80085de:	d1dd      	bne.n	800859c <_malloc_r+0x8c>
 80085e0:	f8c8 2000 	str.w	r2, [r8]
 80085e4:	e7ec      	b.n	80085c0 <_malloc_r+0xb0>
 80085e6:	4623      	mov	r3, r4
 80085e8:	6864      	ldr	r4, [r4, #4]
 80085ea:	e7ac      	b.n	8008546 <_malloc_r+0x36>
 80085ec:	4634      	mov	r4, r6
 80085ee:	6876      	ldr	r6, [r6, #4]
 80085f0:	e7b4      	b.n	800855c <_malloc_r+0x4c>
 80085f2:	4613      	mov	r3, r2
 80085f4:	e7cc      	b.n	8008590 <_malloc_r+0x80>
 80085f6:	230c      	movs	r3, #12
 80085f8:	603b      	str	r3, [r7, #0]
 80085fa:	4638      	mov	r0, r7
 80085fc:	f000 fa4c 	bl	8008a98 <__malloc_unlock>
 8008600:	e797      	b.n	8008532 <_malloc_r+0x22>
 8008602:	6025      	str	r5, [r4, #0]
 8008604:	e7dc      	b.n	80085c0 <_malloc_r+0xb0>
 8008606:	605b      	str	r3, [r3, #4]
 8008608:	deff      	udf	#255	; 0xff
 800860a:	bf00      	nop
 800860c:	2000261c 	.word	0x2000261c

08008610 <_printf_common>:
 8008610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008614:	4616      	mov	r6, r2
 8008616:	4699      	mov	r9, r3
 8008618:	688a      	ldr	r2, [r1, #8]
 800861a:	690b      	ldr	r3, [r1, #16]
 800861c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008620:	4293      	cmp	r3, r2
 8008622:	bfb8      	it	lt
 8008624:	4613      	movlt	r3, r2
 8008626:	6033      	str	r3, [r6, #0]
 8008628:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800862c:	4607      	mov	r7, r0
 800862e:	460c      	mov	r4, r1
 8008630:	b10a      	cbz	r2, 8008636 <_printf_common+0x26>
 8008632:	3301      	adds	r3, #1
 8008634:	6033      	str	r3, [r6, #0]
 8008636:	6823      	ldr	r3, [r4, #0]
 8008638:	0699      	lsls	r1, r3, #26
 800863a:	bf42      	ittt	mi
 800863c:	6833      	ldrmi	r3, [r6, #0]
 800863e:	3302      	addmi	r3, #2
 8008640:	6033      	strmi	r3, [r6, #0]
 8008642:	6825      	ldr	r5, [r4, #0]
 8008644:	f015 0506 	ands.w	r5, r5, #6
 8008648:	d106      	bne.n	8008658 <_printf_common+0x48>
 800864a:	f104 0a19 	add.w	sl, r4, #25
 800864e:	68e3      	ldr	r3, [r4, #12]
 8008650:	6832      	ldr	r2, [r6, #0]
 8008652:	1a9b      	subs	r3, r3, r2
 8008654:	42ab      	cmp	r3, r5
 8008656:	dc26      	bgt.n	80086a6 <_printf_common+0x96>
 8008658:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800865c:	1e13      	subs	r3, r2, #0
 800865e:	6822      	ldr	r2, [r4, #0]
 8008660:	bf18      	it	ne
 8008662:	2301      	movne	r3, #1
 8008664:	0692      	lsls	r2, r2, #26
 8008666:	d42b      	bmi.n	80086c0 <_printf_common+0xb0>
 8008668:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800866c:	4649      	mov	r1, r9
 800866e:	4638      	mov	r0, r7
 8008670:	47c0      	blx	r8
 8008672:	3001      	adds	r0, #1
 8008674:	d01e      	beq.n	80086b4 <_printf_common+0xa4>
 8008676:	6823      	ldr	r3, [r4, #0]
 8008678:	6922      	ldr	r2, [r4, #16]
 800867a:	f003 0306 	and.w	r3, r3, #6
 800867e:	2b04      	cmp	r3, #4
 8008680:	bf02      	ittt	eq
 8008682:	68e5      	ldreq	r5, [r4, #12]
 8008684:	6833      	ldreq	r3, [r6, #0]
 8008686:	1aed      	subeq	r5, r5, r3
 8008688:	68a3      	ldr	r3, [r4, #8]
 800868a:	bf0c      	ite	eq
 800868c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008690:	2500      	movne	r5, #0
 8008692:	4293      	cmp	r3, r2
 8008694:	bfc4      	itt	gt
 8008696:	1a9b      	subgt	r3, r3, r2
 8008698:	18ed      	addgt	r5, r5, r3
 800869a:	2600      	movs	r6, #0
 800869c:	341a      	adds	r4, #26
 800869e:	42b5      	cmp	r5, r6
 80086a0:	d11a      	bne.n	80086d8 <_printf_common+0xc8>
 80086a2:	2000      	movs	r0, #0
 80086a4:	e008      	b.n	80086b8 <_printf_common+0xa8>
 80086a6:	2301      	movs	r3, #1
 80086a8:	4652      	mov	r2, sl
 80086aa:	4649      	mov	r1, r9
 80086ac:	4638      	mov	r0, r7
 80086ae:	47c0      	blx	r8
 80086b0:	3001      	adds	r0, #1
 80086b2:	d103      	bne.n	80086bc <_printf_common+0xac>
 80086b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80086b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086bc:	3501      	adds	r5, #1
 80086be:	e7c6      	b.n	800864e <_printf_common+0x3e>
 80086c0:	18e1      	adds	r1, r4, r3
 80086c2:	1c5a      	adds	r2, r3, #1
 80086c4:	2030      	movs	r0, #48	; 0x30
 80086c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80086ca:	4422      	add	r2, r4
 80086cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80086d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80086d4:	3302      	adds	r3, #2
 80086d6:	e7c7      	b.n	8008668 <_printf_common+0x58>
 80086d8:	2301      	movs	r3, #1
 80086da:	4622      	mov	r2, r4
 80086dc:	4649      	mov	r1, r9
 80086de:	4638      	mov	r0, r7
 80086e0:	47c0      	blx	r8
 80086e2:	3001      	adds	r0, #1
 80086e4:	d0e6      	beq.n	80086b4 <_printf_common+0xa4>
 80086e6:	3601      	adds	r6, #1
 80086e8:	e7d9      	b.n	800869e <_printf_common+0x8e>
	...

080086ec <_printf_i>:
 80086ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80086f0:	7e0f      	ldrb	r7, [r1, #24]
 80086f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80086f4:	2f78      	cmp	r7, #120	; 0x78
 80086f6:	4691      	mov	r9, r2
 80086f8:	4680      	mov	r8, r0
 80086fa:	460c      	mov	r4, r1
 80086fc:	469a      	mov	sl, r3
 80086fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008702:	d807      	bhi.n	8008714 <_printf_i+0x28>
 8008704:	2f62      	cmp	r7, #98	; 0x62
 8008706:	d80a      	bhi.n	800871e <_printf_i+0x32>
 8008708:	2f00      	cmp	r7, #0
 800870a:	f000 80d4 	beq.w	80088b6 <_printf_i+0x1ca>
 800870e:	2f58      	cmp	r7, #88	; 0x58
 8008710:	f000 80c0 	beq.w	8008894 <_printf_i+0x1a8>
 8008714:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008718:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800871c:	e03a      	b.n	8008794 <_printf_i+0xa8>
 800871e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008722:	2b15      	cmp	r3, #21
 8008724:	d8f6      	bhi.n	8008714 <_printf_i+0x28>
 8008726:	a101      	add	r1, pc, #4	; (adr r1, 800872c <_printf_i+0x40>)
 8008728:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800872c:	08008785 	.word	0x08008785
 8008730:	08008799 	.word	0x08008799
 8008734:	08008715 	.word	0x08008715
 8008738:	08008715 	.word	0x08008715
 800873c:	08008715 	.word	0x08008715
 8008740:	08008715 	.word	0x08008715
 8008744:	08008799 	.word	0x08008799
 8008748:	08008715 	.word	0x08008715
 800874c:	08008715 	.word	0x08008715
 8008750:	08008715 	.word	0x08008715
 8008754:	08008715 	.word	0x08008715
 8008758:	0800889d 	.word	0x0800889d
 800875c:	080087c5 	.word	0x080087c5
 8008760:	08008857 	.word	0x08008857
 8008764:	08008715 	.word	0x08008715
 8008768:	08008715 	.word	0x08008715
 800876c:	080088bf 	.word	0x080088bf
 8008770:	08008715 	.word	0x08008715
 8008774:	080087c5 	.word	0x080087c5
 8008778:	08008715 	.word	0x08008715
 800877c:	08008715 	.word	0x08008715
 8008780:	0800885f 	.word	0x0800885f
 8008784:	682b      	ldr	r3, [r5, #0]
 8008786:	1d1a      	adds	r2, r3, #4
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	602a      	str	r2, [r5, #0]
 800878c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008790:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008794:	2301      	movs	r3, #1
 8008796:	e09f      	b.n	80088d8 <_printf_i+0x1ec>
 8008798:	6820      	ldr	r0, [r4, #0]
 800879a:	682b      	ldr	r3, [r5, #0]
 800879c:	0607      	lsls	r7, r0, #24
 800879e:	f103 0104 	add.w	r1, r3, #4
 80087a2:	6029      	str	r1, [r5, #0]
 80087a4:	d501      	bpl.n	80087aa <_printf_i+0xbe>
 80087a6:	681e      	ldr	r6, [r3, #0]
 80087a8:	e003      	b.n	80087b2 <_printf_i+0xc6>
 80087aa:	0646      	lsls	r6, r0, #25
 80087ac:	d5fb      	bpl.n	80087a6 <_printf_i+0xba>
 80087ae:	f9b3 6000 	ldrsh.w	r6, [r3]
 80087b2:	2e00      	cmp	r6, #0
 80087b4:	da03      	bge.n	80087be <_printf_i+0xd2>
 80087b6:	232d      	movs	r3, #45	; 0x2d
 80087b8:	4276      	negs	r6, r6
 80087ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087be:	485a      	ldr	r0, [pc, #360]	; (8008928 <_printf_i+0x23c>)
 80087c0:	230a      	movs	r3, #10
 80087c2:	e012      	b.n	80087ea <_printf_i+0xfe>
 80087c4:	682b      	ldr	r3, [r5, #0]
 80087c6:	6820      	ldr	r0, [r4, #0]
 80087c8:	1d19      	adds	r1, r3, #4
 80087ca:	6029      	str	r1, [r5, #0]
 80087cc:	0605      	lsls	r5, r0, #24
 80087ce:	d501      	bpl.n	80087d4 <_printf_i+0xe8>
 80087d0:	681e      	ldr	r6, [r3, #0]
 80087d2:	e002      	b.n	80087da <_printf_i+0xee>
 80087d4:	0641      	lsls	r1, r0, #25
 80087d6:	d5fb      	bpl.n	80087d0 <_printf_i+0xe4>
 80087d8:	881e      	ldrh	r6, [r3, #0]
 80087da:	4853      	ldr	r0, [pc, #332]	; (8008928 <_printf_i+0x23c>)
 80087dc:	2f6f      	cmp	r7, #111	; 0x6f
 80087de:	bf0c      	ite	eq
 80087e0:	2308      	moveq	r3, #8
 80087e2:	230a      	movne	r3, #10
 80087e4:	2100      	movs	r1, #0
 80087e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80087ea:	6865      	ldr	r5, [r4, #4]
 80087ec:	60a5      	str	r5, [r4, #8]
 80087ee:	2d00      	cmp	r5, #0
 80087f0:	bfa2      	ittt	ge
 80087f2:	6821      	ldrge	r1, [r4, #0]
 80087f4:	f021 0104 	bicge.w	r1, r1, #4
 80087f8:	6021      	strge	r1, [r4, #0]
 80087fa:	b90e      	cbnz	r6, 8008800 <_printf_i+0x114>
 80087fc:	2d00      	cmp	r5, #0
 80087fe:	d04b      	beq.n	8008898 <_printf_i+0x1ac>
 8008800:	4615      	mov	r5, r2
 8008802:	fbb6 f1f3 	udiv	r1, r6, r3
 8008806:	fb03 6711 	mls	r7, r3, r1, r6
 800880a:	5dc7      	ldrb	r7, [r0, r7]
 800880c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008810:	4637      	mov	r7, r6
 8008812:	42bb      	cmp	r3, r7
 8008814:	460e      	mov	r6, r1
 8008816:	d9f4      	bls.n	8008802 <_printf_i+0x116>
 8008818:	2b08      	cmp	r3, #8
 800881a:	d10b      	bne.n	8008834 <_printf_i+0x148>
 800881c:	6823      	ldr	r3, [r4, #0]
 800881e:	07de      	lsls	r6, r3, #31
 8008820:	d508      	bpl.n	8008834 <_printf_i+0x148>
 8008822:	6923      	ldr	r3, [r4, #16]
 8008824:	6861      	ldr	r1, [r4, #4]
 8008826:	4299      	cmp	r1, r3
 8008828:	bfde      	ittt	le
 800882a:	2330      	movle	r3, #48	; 0x30
 800882c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008830:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008834:	1b52      	subs	r2, r2, r5
 8008836:	6122      	str	r2, [r4, #16]
 8008838:	f8cd a000 	str.w	sl, [sp]
 800883c:	464b      	mov	r3, r9
 800883e:	aa03      	add	r2, sp, #12
 8008840:	4621      	mov	r1, r4
 8008842:	4640      	mov	r0, r8
 8008844:	f7ff fee4 	bl	8008610 <_printf_common>
 8008848:	3001      	adds	r0, #1
 800884a:	d14a      	bne.n	80088e2 <_printf_i+0x1f6>
 800884c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008850:	b004      	add	sp, #16
 8008852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008856:	6823      	ldr	r3, [r4, #0]
 8008858:	f043 0320 	orr.w	r3, r3, #32
 800885c:	6023      	str	r3, [r4, #0]
 800885e:	4833      	ldr	r0, [pc, #204]	; (800892c <_printf_i+0x240>)
 8008860:	2778      	movs	r7, #120	; 0x78
 8008862:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008866:	6823      	ldr	r3, [r4, #0]
 8008868:	6829      	ldr	r1, [r5, #0]
 800886a:	061f      	lsls	r7, r3, #24
 800886c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008870:	d402      	bmi.n	8008878 <_printf_i+0x18c>
 8008872:	065f      	lsls	r7, r3, #25
 8008874:	bf48      	it	mi
 8008876:	b2b6      	uxthmi	r6, r6
 8008878:	07df      	lsls	r7, r3, #31
 800887a:	bf48      	it	mi
 800887c:	f043 0320 	orrmi.w	r3, r3, #32
 8008880:	6029      	str	r1, [r5, #0]
 8008882:	bf48      	it	mi
 8008884:	6023      	strmi	r3, [r4, #0]
 8008886:	b91e      	cbnz	r6, 8008890 <_printf_i+0x1a4>
 8008888:	6823      	ldr	r3, [r4, #0]
 800888a:	f023 0320 	bic.w	r3, r3, #32
 800888e:	6023      	str	r3, [r4, #0]
 8008890:	2310      	movs	r3, #16
 8008892:	e7a7      	b.n	80087e4 <_printf_i+0xf8>
 8008894:	4824      	ldr	r0, [pc, #144]	; (8008928 <_printf_i+0x23c>)
 8008896:	e7e4      	b.n	8008862 <_printf_i+0x176>
 8008898:	4615      	mov	r5, r2
 800889a:	e7bd      	b.n	8008818 <_printf_i+0x12c>
 800889c:	682b      	ldr	r3, [r5, #0]
 800889e:	6826      	ldr	r6, [r4, #0]
 80088a0:	6961      	ldr	r1, [r4, #20]
 80088a2:	1d18      	adds	r0, r3, #4
 80088a4:	6028      	str	r0, [r5, #0]
 80088a6:	0635      	lsls	r5, r6, #24
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	d501      	bpl.n	80088b0 <_printf_i+0x1c4>
 80088ac:	6019      	str	r1, [r3, #0]
 80088ae:	e002      	b.n	80088b6 <_printf_i+0x1ca>
 80088b0:	0670      	lsls	r0, r6, #25
 80088b2:	d5fb      	bpl.n	80088ac <_printf_i+0x1c0>
 80088b4:	8019      	strh	r1, [r3, #0]
 80088b6:	2300      	movs	r3, #0
 80088b8:	6123      	str	r3, [r4, #16]
 80088ba:	4615      	mov	r5, r2
 80088bc:	e7bc      	b.n	8008838 <_printf_i+0x14c>
 80088be:	682b      	ldr	r3, [r5, #0]
 80088c0:	1d1a      	adds	r2, r3, #4
 80088c2:	602a      	str	r2, [r5, #0]
 80088c4:	681d      	ldr	r5, [r3, #0]
 80088c6:	6862      	ldr	r2, [r4, #4]
 80088c8:	2100      	movs	r1, #0
 80088ca:	4628      	mov	r0, r5
 80088cc:	f7f7 fc80 	bl	80001d0 <memchr>
 80088d0:	b108      	cbz	r0, 80088d6 <_printf_i+0x1ea>
 80088d2:	1b40      	subs	r0, r0, r5
 80088d4:	6060      	str	r0, [r4, #4]
 80088d6:	6863      	ldr	r3, [r4, #4]
 80088d8:	6123      	str	r3, [r4, #16]
 80088da:	2300      	movs	r3, #0
 80088dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088e0:	e7aa      	b.n	8008838 <_printf_i+0x14c>
 80088e2:	6923      	ldr	r3, [r4, #16]
 80088e4:	462a      	mov	r2, r5
 80088e6:	4649      	mov	r1, r9
 80088e8:	4640      	mov	r0, r8
 80088ea:	47d0      	blx	sl
 80088ec:	3001      	adds	r0, #1
 80088ee:	d0ad      	beq.n	800884c <_printf_i+0x160>
 80088f0:	6823      	ldr	r3, [r4, #0]
 80088f2:	079b      	lsls	r3, r3, #30
 80088f4:	d413      	bmi.n	800891e <_printf_i+0x232>
 80088f6:	68e0      	ldr	r0, [r4, #12]
 80088f8:	9b03      	ldr	r3, [sp, #12]
 80088fa:	4298      	cmp	r0, r3
 80088fc:	bfb8      	it	lt
 80088fe:	4618      	movlt	r0, r3
 8008900:	e7a6      	b.n	8008850 <_printf_i+0x164>
 8008902:	2301      	movs	r3, #1
 8008904:	4632      	mov	r2, r6
 8008906:	4649      	mov	r1, r9
 8008908:	4640      	mov	r0, r8
 800890a:	47d0      	blx	sl
 800890c:	3001      	adds	r0, #1
 800890e:	d09d      	beq.n	800884c <_printf_i+0x160>
 8008910:	3501      	adds	r5, #1
 8008912:	68e3      	ldr	r3, [r4, #12]
 8008914:	9903      	ldr	r1, [sp, #12]
 8008916:	1a5b      	subs	r3, r3, r1
 8008918:	42ab      	cmp	r3, r5
 800891a:	dcf2      	bgt.n	8008902 <_printf_i+0x216>
 800891c:	e7eb      	b.n	80088f6 <_printf_i+0x20a>
 800891e:	2500      	movs	r5, #0
 8008920:	f104 0619 	add.w	r6, r4, #25
 8008924:	e7f5      	b.n	8008912 <_printf_i+0x226>
 8008926:	bf00      	nop
 8008928:	08008fb1 	.word	0x08008fb1
 800892c:	08008fc2 	.word	0x08008fc2

08008930 <__sflush_r>:
 8008930:	898a      	ldrh	r2, [r1, #12]
 8008932:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008936:	4605      	mov	r5, r0
 8008938:	0710      	lsls	r0, r2, #28
 800893a:	460c      	mov	r4, r1
 800893c:	d458      	bmi.n	80089f0 <__sflush_r+0xc0>
 800893e:	684b      	ldr	r3, [r1, #4]
 8008940:	2b00      	cmp	r3, #0
 8008942:	dc05      	bgt.n	8008950 <__sflush_r+0x20>
 8008944:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008946:	2b00      	cmp	r3, #0
 8008948:	dc02      	bgt.n	8008950 <__sflush_r+0x20>
 800894a:	2000      	movs	r0, #0
 800894c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008950:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008952:	2e00      	cmp	r6, #0
 8008954:	d0f9      	beq.n	800894a <__sflush_r+0x1a>
 8008956:	2300      	movs	r3, #0
 8008958:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800895c:	682f      	ldr	r7, [r5, #0]
 800895e:	6a21      	ldr	r1, [r4, #32]
 8008960:	602b      	str	r3, [r5, #0]
 8008962:	d032      	beq.n	80089ca <__sflush_r+0x9a>
 8008964:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008966:	89a3      	ldrh	r3, [r4, #12]
 8008968:	075a      	lsls	r2, r3, #29
 800896a:	d505      	bpl.n	8008978 <__sflush_r+0x48>
 800896c:	6863      	ldr	r3, [r4, #4]
 800896e:	1ac0      	subs	r0, r0, r3
 8008970:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008972:	b10b      	cbz	r3, 8008978 <__sflush_r+0x48>
 8008974:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008976:	1ac0      	subs	r0, r0, r3
 8008978:	2300      	movs	r3, #0
 800897a:	4602      	mov	r2, r0
 800897c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800897e:	6a21      	ldr	r1, [r4, #32]
 8008980:	4628      	mov	r0, r5
 8008982:	47b0      	blx	r6
 8008984:	1c43      	adds	r3, r0, #1
 8008986:	89a3      	ldrh	r3, [r4, #12]
 8008988:	d106      	bne.n	8008998 <__sflush_r+0x68>
 800898a:	6829      	ldr	r1, [r5, #0]
 800898c:	291d      	cmp	r1, #29
 800898e:	d82b      	bhi.n	80089e8 <__sflush_r+0xb8>
 8008990:	4a29      	ldr	r2, [pc, #164]	; (8008a38 <__sflush_r+0x108>)
 8008992:	410a      	asrs	r2, r1
 8008994:	07d6      	lsls	r6, r2, #31
 8008996:	d427      	bmi.n	80089e8 <__sflush_r+0xb8>
 8008998:	2200      	movs	r2, #0
 800899a:	6062      	str	r2, [r4, #4]
 800899c:	04d9      	lsls	r1, r3, #19
 800899e:	6922      	ldr	r2, [r4, #16]
 80089a0:	6022      	str	r2, [r4, #0]
 80089a2:	d504      	bpl.n	80089ae <__sflush_r+0x7e>
 80089a4:	1c42      	adds	r2, r0, #1
 80089a6:	d101      	bne.n	80089ac <__sflush_r+0x7c>
 80089a8:	682b      	ldr	r3, [r5, #0]
 80089aa:	b903      	cbnz	r3, 80089ae <__sflush_r+0x7e>
 80089ac:	6560      	str	r0, [r4, #84]	; 0x54
 80089ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80089b0:	602f      	str	r7, [r5, #0]
 80089b2:	2900      	cmp	r1, #0
 80089b4:	d0c9      	beq.n	800894a <__sflush_r+0x1a>
 80089b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80089ba:	4299      	cmp	r1, r3
 80089bc:	d002      	beq.n	80089c4 <__sflush_r+0x94>
 80089be:	4628      	mov	r0, r5
 80089c0:	f7ff fbf6 	bl	80081b0 <_free_r>
 80089c4:	2000      	movs	r0, #0
 80089c6:	6360      	str	r0, [r4, #52]	; 0x34
 80089c8:	e7c0      	b.n	800894c <__sflush_r+0x1c>
 80089ca:	2301      	movs	r3, #1
 80089cc:	4628      	mov	r0, r5
 80089ce:	47b0      	blx	r6
 80089d0:	1c41      	adds	r1, r0, #1
 80089d2:	d1c8      	bne.n	8008966 <__sflush_r+0x36>
 80089d4:	682b      	ldr	r3, [r5, #0]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d0c5      	beq.n	8008966 <__sflush_r+0x36>
 80089da:	2b1d      	cmp	r3, #29
 80089dc:	d001      	beq.n	80089e2 <__sflush_r+0xb2>
 80089de:	2b16      	cmp	r3, #22
 80089e0:	d101      	bne.n	80089e6 <__sflush_r+0xb6>
 80089e2:	602f      	str	r7, [r5, #0]
 80089e4:	e7b1      	b.n	800894a <__sflush_r+0x1a>
 80089e6:	89a3      	ldrh	r3, [r4, #12]
 80089e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089ec:	81a3      	strh	r3, [r4, #12]
 80089ee:	e7ad      	b.n	800894c <__sflush_r+0x1c>
 80089f0:	690f      	ldr	r7, [r1, #16]
 80089f2:	2f00      	cmp	r7, #0
 80089f4:	d0a9      	beq.n	800894a <__sflush_r+0x1a>
 80089f6:	0793      	lsls	r3, r2, #30
 80089f8:	680e      	ldr	r6, [r1, #0]
 80089fa:	bf08      	it	eq
 80089fc:	694b      	ldreq	r3, [r1, #20]
 80089fe:	600f      	str	r7, [r1, #0]
 8008a00:	bf18      	it	ne
 8008a02:	2300      	movne	r3, #0
 8008a04:	eba6 0807 	sub.w	r8, r6, r7
 8008a08:	608b      	str	r3, [r1, #8]
 8008a0a:	f1b8 0f00 	cmp.w	r8, #0
 8008a0e:	dd9c      	ble.n	800894a <__sflush_r+0x1a>
 8008a10:	6a21      	ldr	r1, [r4, #32]
 8008a12:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008a14:	4643      	mov	r3, r8
 8008a16:	463a      	mov	r2, r7
 8008a18:	4628      	mov	r0, r5
 8008a1a:	47b0      	blx	r6
 8008a1c:	2800      	cmp	r0, #0
 8008a1e:	dc06      	bgt.n	8008a2e <__sflush_r+0xfe>
 8008a20:	89a3      	ldrh	r3, [r4, #12]
 8008a22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a26:	81a3      	strh	r3, [r4, #12]
 8008a28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a2c:	e78e      	b.n	800894c <__sflush_r+0x1c>
 8008a2e:	4407      	add	r7, r0
 8008a30:	eba8 0800 	sub.w	r8, r8, r0
 8008a34:	e7e9      	b.n	8008a0a <__sflush_r+0xda>
 8008a36:	bf00      	nop
 8008a38:	dfbffffe 	.word	0xdfbffffe

08008a3c <_fflush_r>:
 8008a3c:	b538      	push	{r3, r4, r5, lr}
 8008a3e:	690b      	ldr	r3, [r1, #16]
 8008a40:	4605      	mov	r5, r0
 8008a42:	460c      	mov	r4, r1
 8008a44:	b913      	cbnz	r3, 8008a4c <_fflush_r+0x10>
 8008a46:	2500      	movs	r5, #0
 8008a48:	4628      	mov	r0, r5
 8008a4a:	bd38      	pop	{r3, r4, r5, pc}
 8008a4c:	b118      	cbz	r0, 8008a56 <_fflush_r+0x1a>
 8008a4e:	6a03      	ldr	r3, [r0, #32]
 8008a50:	b90b      	cbnz	r3, 8008a56 <_fflush_r+0x1a>
 8008a52:	f7ff fa6f 	bl	8007f34 <__sinit>
 8008a56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d0f3      	beq.n	8008a46 <_fflush_r+0xa>
 8008a5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008a60:	07d0      	lsls	r0, r2, #31
 8008a62:	d404      	bmi.n	8008a6e <_fflush_r+0x32>
 8008a64:	0599      	lsls	r1, r3, #22
 8008a66:	d402      	bmi.n	8008a6e <_fflush_r+0x32>
 8008a68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a6a:	f7ff fb90 	bl	800818e <__retarget_lock_acquire_recursive>
 8008a6e:	4628      	mov	r0, r5
 8008a70:	4621      	mov	r1, r4
 8008a72:	f7ff ff5d 	bl	8008930 <__sflush_r>
 8008a76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a78:	07da      	lsls	r2, r3, #31
 8008a7a:	4605      	mov	r5, r0
 8008a7c:	d4e4      	bmi.n	8008a48 <_fflush_r+0xc>
 8008a7e:	89a3      	ldrh	r3, [r4, #12]
 8008a80:	059b      	lsls	r3, r3, #22
 8008a82:	d4e1      	bmi.n	8008a48 <_fflush_r+0xc>
 8008a84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a86:	f7ff fb83 	bl	8008190 <__retarget_lock_release_recursive>
 8008a8a:	e7dd      	b.n	8008a48 <_fflush_r+0xc>

08008a8c <__malloc_lock>:
 8008a8c:	4801      	ldr	r0, [pc, #4]	; (8008a94 <__malloc_lock+0x8>)
 8008a8e:	f7ff bb7e 	b.w	800818e <__retarget_lock_acquire_recursive>
 8008a92:	bf00      	nop
 8008a94:	20002618 	.word	0x20002618

08008a98 <__malloc_unlock>:
 8008a98:	4801      	ldr	r0, [pc, #4]	; (8008aa0 <__malloc_unlock+0x8>)
 8008a9a:	f7ff bb79 	b.w	8008190 <__retarget_lock_release_recursive>
 8008a9e:	bf00      	nop
 8008aa0:	20002618 	.word	0x20002618

08008aa4 <__sread>:
 8008aa4:	b510      	push	{r4, lr}
 8008aa6:	460c      	mov	r4, r1
 8008aa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008aac:	f000 f978 	bl	8008da0 <_read_r>
 8008ab0:	2800      	cmp	r0, #0
 8008ab2:	bfab      	itete	ge
 8008ab4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008ab6:	89a3      	ldrhlt	r3, [r4, #12]
 8008ab8:	181b      	addge	r3, r3, r0
 8008aba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008abe:	bfac      	ite	ge
 8008ac0:	6563      	strge	r3, [r4, #84]	; 0x54
 8008ac2:	81a3      	strhlt	r3, [r4, #12]
 8008ac4:	bd10      	pop	{r4, pc}

08008ac6 <__swrite>:
 8008ac6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008aca:	461f      	mov	r7, r3
 8008acc:	898b      	ldrh	r3, [r1, #12]
 8008ace:	05db      	lsls	r3, r3, #23
 8008ad0:	4605      	mov	r5, r0
 8008ad2:	460c      	mov	r4, r1
 8008ad4:	4616      	mov	r6, r2
 8008ad6:	d505      	bpl.n	8008ae4 <__swrite+0x1e>
 8008ad8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008adc:	2302      	movs	r3, #2
 8008ade:	2200      	movs	r2, #0
 8008ae0:	f000 f94c 	bl	8008d7c <_lseek_r>
 8008ae4:	89a3      	ldrh	r3, [r4, #12]
 8008ae6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008aea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008aee:	81a3      	strh	r3, [r4, #12]
 8008af0:	4632      	mov	r2, r6
 8008af2:	463b      	mov	r3, r7
 8008af4:	4628      	mov	r0, r5
 8008af6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008afa:	f000 b973 	b.w	8008de4 <_write_r>

08008afe <__sseek>:
 8008afe:	b510      	push	{r4, lr}
 8008b00:	460c      	mov	r4, r1
 8008b02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b06:	f000 f939 	bl	8008d7c <_lseek_r>
 8008b0a:	1c43      	adds	r3, r0, #1
 8008b0c:	89a3      	ldrh	r3, [r4, #12]
 8008b0e:	bf15      	itete	ne
 8008b10:	6560      	strne	r0, [r4, #84]	; 0x54
 8008b12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008b16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008b1a:	81a3      	strheq	r3, [r4, #12]
 8008b1c:	bf18      	it	ne
 8008b1e:	81a3      	strhne	r3, [r4, #12]
 8008b20:	bd10      	pop	{r4, pc}

08008b22 <__sclose>:
 8008b22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b26:	f000 b8f7 	b.w	8008d18 <_close_r>

08008b2a <__swbuf_r>:
 8008b2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b2c:	460e      	mov	r6, r1
 8008b2e:	4614      	mov	r4, r2
 8008b30:	4605      	mov	r5, r0
 8008b32:	b118      	cbz	r0, 8008b3c <__swbuf_r+0x12>
 8008b34:	6a03      	ldr	r3, [r0, #32]
 8008b36:	b90b      	cbnz	r3, 8008b3c <__swbuf_r+0x12>
 8008b38:	f7ff f9fc 	bl	8007f34 <__sinit>
 8008b3c:	69a3      	ldr	r3, [r4, #24]
 8008b3e:	60a3      	str	r3, [r4, #8]
 8008b40:	89a3      	ldrh	r3, [r4, #12]
 8008b42:	071a      	lsls	r2, r3, #28
 8008b44:	d525      	bpl.n	8008b92 <__swbuf_r+0x68>
 8008b46:	6923      	ldr	r3, [r4, #16]
 8008b48:	b31b      	cbz	r3, 8008b92 <__swbuf_r+0x68>
 8008b4a:	6823      	ldr	r3, [r4, #0]
 8008b4c:	6922      	ldr	r2, [r4, #16]
 8008b4e:	1a98      	subs	r0, r3, r2
 8008b50:	6963      	ldr	r3, [r4, #20]
 8008b52:	b2f6      	uxtb	r6, r6
 8008b54:	4283      	cmp	r3, r0
 8008b56:	4637      	mov	r7, r6
 8008b58:	dc04      	bgt.n	8008b64 <__swbuf_r+0x3a>
 8008b5a:	4621      	mov	r1, r4
 8008b5c:	4628      	mov	r0, r5
 8008b5e:	f7ff ff6d 	bl	8008a3c <_fflush_r>
 8008b62:	b9e0      	cbnz	r0, 8008b9e <__swbuf_r+0x74>
 8008b64:	68a3      	ldr	r3, [r4, #8]
 8008b66:	3b01      	subs	r3, #1
 8008b68:	60a3      	str	r3, [r4, #8]
 8008b6a:	6823      	ldr	r3, [r4, #0]
 8008b6c:	1c5a      	adds	r2, r3, #1
 8008b6e:	6022      	str	r2, [r4, #0]
 8008b70:	701e      	strb	r6, [r3, #0]
 8008b72:	6962      	ldr	r2, [r4, #20]
 8008b74:	1c43      	adds	r3, r0, #1
 8008b76:	429a      	cmp	r2, r3
 8008b78:	d004      	beq.n	8008b84 <__swbuf_r+0x5a>
 8008b7a:	89a3      	ldrh	r3, [r4, #12]
 8008b7c:	07db      	lsls	r3, r3, #31
 8008b7e:	d506      	bpl.n	8008b8e <__swbuf_r+0x64>
 8008b80:	2e0a      	cmp	r6, #10
 8008b82:	d104      	bne.n	8008b8e <__swbuf_r+0x64>
 8008b84:	4621      	mov	r1, r4
 8008b86:	4628      	mov	r0, r5
 8008b88:	f7ff ff58 	bl	8008a3c <_fflush_r>
 8008b8c:	b938      	cbnz	r0, 8008b9e <__swbuf_r+0x74>
 8008b8e:	4638      	mov	r0, r7
 8008b90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b92:	4621      	mov	r1, r4
 8008b94:	4628      	mov	r0, r5
 8008b96:	f000 f805 	bl	8008ba4 <__swsetup_r>
 8008b9a:	2800      	cmp	r0, #0
 8008b9c:	d0d5      	beq.n	8008b4a <__swbuf_r+0x20>
 8008b9e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008ba2:	e7f4      	b.n	8008b8e <__swbuf_r+0x64>

08008ba4 <__swsetup_r>:
 8008ba4:	b538      	push	{r3, r4, r5, lr}
 8008ba6:	4b2a      	ldr	r3, [pc, #168]	; (8008c50 <__swsetup_r+0xac>)
 8008ba8:	4605      	mov	r5, r0
 8008baa:	6818      	ldr	r0, [r3, #0]
 8008bac:	460c      	mov	r4, r1
 8008bae:	b118      	cbz	r0, 8008bb8 <__swsetup_r+0x14>
 8008bb0:	6a03      	ldr	r3, [r0, #32]
 8008bb2:	b90b      	cbnz	r3, 8008bb8 <__swsetup_r+0x14>
 8008bb4:	f7ff f9be 	bl	8007f34 <__sinit>
 8008bb8:	89a3      	ldrh	r3, [r4, #12]
 8008bba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008bbe:	0718      	lsls	r0, r3, #28
 8008bc0:	d422      	bmi.n	8008c08 <__swsetup_r+0x64>
 8008bc2:	06d9      	lsls	r1, r3, #27
 8008bc4:	d407      	bmi.n	8008bd6 <__swsetup_r+0x32>
 8008bc6:	2309      	movs	r3, #9
 8008bc8:	602b      	str	r3, [r5, #0]
 8008bca:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008bce:	81a3      	strh	r3, [r4, #12]
 8008bd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008bd4:	e034      	b.n	8008c40 <__swsetup_r+0x9c>
 8008bd6:	0758      	lsls	r0, r3, #29
 8008bd8:	d512      	bpl.n	8008c00 <__swsetup_r+0x5c>
 8008bda:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008bdc:	b141      	cbz	r1, 8008bf0 <__swsetup_r+0x4c>
 8008bde:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008be2:	4299      	cmp	r1, r3
 8008be4:	d002      	beq.n	8008bec <__swsetup_r+0x48>
 8008be6:	4628      	mov	r0, r5
 8008be8:	f7ff fae2 	bl	80081b0 <_free_r>
 8008bec:	2300      	movs	r3, #0
 8008bee:	6363      	str	r3, [r4, #52]	; 0x34
 8008bf0:	89a3      	ldrh	r3, [r4, #12]
 8008bf2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008bf6:	81a3      	strh	r3, [r4, #12]
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	6063      	str	r3, [r4, #4]
 8008bfc:	6923      	ldr	r3, [r4, #16]
 8008bfe:	6023      	str	r3, [r4, #0]
 8008c00:	89a3      	ldrh	r3, [r4, #12]
 8008c02:	f043 0308 	orr.w	r3, r3, #8
 8008c06:	81a3      	strh	r3, [r4, #12]
 8008c08:	6923      	ldr	r3, [r4, #16]
 8008c0a:	b94b      	cbnz	r3, 8008c20 <__swsetup_r+0x7c>
 8008c0c:	89a3      	ldrh	r3, [r4, #12]
 8008c0e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008c12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c16:	d003      	beq.n	8008c20 <__swsetup_r+0x7c>
 8008c18:	4621      	mov	r1, r4
 8008c1a:	4628      	mov	r0, r5
 8008c1c:	f000 f840 	bl	8008ca0 <__smakebuf_r>
 8008c20:	89a0      	ldrh	r0, [r4, #12]
 8008c22:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008c26:	f010 0301 	ands.w	r3, r0, #1
 8008c2a:	d00a      	beq.n	8008c42 <__swsetup_r+0x9e>
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	60a3      	str	r3, [r4, #8]
 8008c30:	6963      	ldr	r3, [r4, #20]
 8008c32:	425b      	negs	r3, r3
 8008c34:	61a3      	str	r3, [r4, #24]
 8008c36:	6923      	ldr	r3, [r4, #16]
 8008c38:	b943      	cbnz	r3, 8008c4c <__swsetup_r+0xa8>
 8008c3a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008c3e:	d1c4      	bne.n	8008bca <__swsetup_r+0x26>
 8008c40:	bd38      	pop	{r3, r4, r5, pc}
 8008c42:	0781      	lsls	r1, r0, #30
 8008c44:	bf58      	it	pl
 8008c46:	6963      	ldrpl	r3, [r4, #20]
 8008c48:	60a3      	str	r3, [r4, #8]
 8008c4a:	e7f4      	b.n	8008c36 <__swsetup_r+0x92>
 8008c4c:	2000      	movs	r0, #0
 8008c4e:	e7f7      	b.n	8008c40 <__swsetup_r+0x9c>
 8008c50:	20000068 	.word	0x20000068

08008c54 <__swhatbuf_r>:
 8008c54:	b570      	push	{r4, r5, r6, lr}
 8008c56:	460c      	mov	r4, r1
 8008c58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c5c:	2900      	cmp	r1, #0
 8008c5e:	b096      	sub	sp, #88	; 0x58
 8008c60:	4615      	mov	r5, r2
 8008c62:	461e      	mov	r6, r3
 8008c64:	da0d      	bge.n	8008c82 <__swhatbuf_r+0x2e>
 8008c66:	89a3      	ldrh	r3, [r4, #12]
 8008c68:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008c6c:	f04f 0100 	mov.w	r1, #0
 8008c70:	bf0c      	ite	eq
 8008c72:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008c76:	2340      	movne	r3, #64	; 0x40
 8008c78:	2000      	movs	r0, #0
 8008c7a:	6031      	str	r1, [r6, #0]
 8008c7c:	602b      	str	r3, [r5, #0]
 8008c7e:	b016      	add	sp, #88	; 0x58
 8008c80:	bd70      	pop	{r4, r5, r6, pc}
 8008c82:	466a      	mov	r2, sp
 8008c84:	f000 f858 	bl	8008d38 <_fstat_r>
 8008c88:	2800      	cmp	r0, #0
 8008c8a:	dbec      	blt.n	8008c66 <__swhatbuf_r+0x12>
 8008c8c:	9901      	ldr	r1, [sp, #4]
 8008c8e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008c92:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008c96:	4259      	negs	r1, r3
 8008c98:	4159      	adcs	r1, r3
 8008c9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c9e:	e7eb      	b.n	8008c78 <__swhatbuf_r+0x24>

08008ca0 <__smakebuf_r>:
 8008ca0:	898b      	ldrh	r3, [r1, #12]
 8008ca2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008ca4:	079d      	lsls	r5, r3, #30
 8008ca6:	4606      	mov	r6, r0
 8008ca8:	460c      	mov	r4, r1
 8008caa:	d507      	bpl.n	8008cbc <__smakebuf_r+0x1c>
 8008cac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008cb0:	6023      	str	r3, [r4, #0]
 8008cb2:	6123      	str	r3, [r4, #16]
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	6163      	str	r3, [r4, #20]
 8008cb8:	b002      	add	sp, #8
 8008cba:	bd70      	pop	{r4, r5, r6, pc}
 8008cbc:	ab01      	add	r3, sp, #4
 8008cbe:	466a      	mov	r2, sp
 8008cc0:	f7ff ffc8 	bl	8008c54 <__swhatbuf_r>
 8008cc4:	9900      	ldr	r1, [sp, #0]
 8008cc6:	4605      	mov	r5, r0
 8008cc8:	4630      	mov	r0, r6
 8008cca:	f7ff fc21 	bl	8008510 <_malloc_r>
 8008cce:	b948      	cbnz	r0, 8008ce4 <__smakebuf_r+0x44>
 8008cd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cd4:	059a      	lsls	r2, r3, #22
 8008cd6:	d4ef      	bmi.n	8008cb8 <__smakebuf_r+0x18>
 8008cd8:	f023 0303 	bic.w	r3, r3, #3
 8008cdc:	f043 0302 	orr.w	r3, r3, #2
 8008ce0:	81a3      	strh	r3, [r4, #12]
 8008ce2:	e7e3      	b.n	8008cac <__smakebuf_r+0xc>
 8008ce4:	89a3      	ldrh	r3, [r4, #12]
 8008ce6:	6020      	str	r0, [r4, #0]
 8008ce8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cec:	81a3      	strh	r3, [r4, #12]
 8008cee:	9b00      	ldr	r3, [sp, #0]
 8008cf0:	6163      	str	r3, [r4, #20]
 8008cf2:	9b01      	ldr	r3, [sp, #4]
 8008cf4:	6120      	str	r0, [r4, #16]
 8008cf6:	b15b      	cbz	r3, 8008d10 <__smakebuf_r+0x70>
 8008cf8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008cfc:	4630      	mov	r0, r6
 8008cfe:	f000 f82d 	bl	8008d5c <_isatty_r>
 8008d02:	b128      	cbz	r0, 8008d10 <__smakebuf_r+0x70>
 8008d04:	89a3      	ldrh	r3, [r4, #12]
 8008d06:	f023 0303 	bic.w	r3, r3, #3
 8008d0a:	f043 0301 	orr.w	r3, r3, #1
 8008d0e:	81a3      	strh	r3, [r4, #12]
 8008d10:	89a3      	ldrh	r3, [r4, #12]
 8008d12:	431d      	orrs	r5, r3
 8008d14:	81a5      	strh	r5, [r4, #12]
 8008d16:	e7cf      	b.n	8008cb8 <__smakebuf_r+0x18>

08008d18 <_close_r>:
 8008d18:	b538      	push	{r3, r4, r5, lr}
 8008d1a:	4d06      	ldr	r5, [pc, #24]	; (8008d34 <_close_r+0x1c>)
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	4604      	mov	r4, r0
 8008d20:	4608      	mov	r0, r1
 8008d22:	602b      	str	r3, [r5, #0]
 8008d24:	f7f8 f999 	bl	800105a <_close>
 8008d28:	1c43      	adds	r3, r0, #1
 8008d2a:	d102      	bne.n	8008d32 <_close_r+0x1a>
 8008d2c:	682b      	ldr	r3, [r5, #0]
 8008d2e:	b103      	cbz	r3, 8008d32 <_close_r+0x1a>
 8008d30:	6023      	str	r3, [r4, #0]
 8008d32:	bd38      	pop	{r3, r4, r5, pc}
 8008d34:	20002614 	.word	0x20002614

08008d38 <_fstat_r>:
 8008d38:	b538      	push	{r3, r4, r5, lr}
 8008d3a:	4d07      	ldr	r5, [pc, #28]	; (8008d58 <_fstat_r+0x20>)
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	4604      	mov	r4, r0
 8008d40:	4608      	mov	r0, r1
 8008d42:	4611      	mov	r1, r2
 8008d44:	602b      	str	r3, [r5, #0]
 8008d46:	f7f8 f994 	bl	8001072 <_fstat>
 8008d4a:	1c43      	adds	r3, r0, #1
 8008d4c:	d102      	bne.n	8008d54 <_fstat_r+0x1c>
 8008d4e:	682b      	ldr	r3, [r5, #0]
 8008d50:	b103      	cbz	r3, 8008d54 <_fstat_r+0x1c>
 8008d52:	6023      	str	r3, [r4, #0]
 8008d54:	bd38      	pop	{r3, r4, r5, pc}
 8008d56:	bf00      	nop
 8008d58:	20002614 	.word	0x20002614

08008d5c <_isatty_r>:
 8008d5c:	b538      	push	{r3, r4, r5, lr}
 8008d5e:	4d06      	ldr	r5, [pc, #24]	; (8008d78 <_isatty_r+0x1c>)
 8008d60:	2300      	movs	r3, #0
 8008d62:	4604      	mov	r4, r0
 8008d64:	4608      	mov	r0, r1
 8008d66:	602b      	str	r3, [r5, #0]
 8008d68:	f7f8 f993 	bl	8001092 <_isatty>
 8008d6c:	1c43      	adds	r3, r0, #1
 8008d6e:	d102      	bne.n	8008d76 <_isatty_r+0x1a>
 8008d70:	682b      	ldr	r3, [r5, #0]
 8008d72:	b103      	cbz	r3, 8008d76 <_isatty_r+0x1a>
 8008d74:	6023      	str	r3, [r4, #0]
 8008d76:	bd38      	pop	{r3, r4, r5, pc}
 8008d78:	20002614 	.word	0x20002614

08008d7c <_lseek_r>:
 8008d7c:	b538      	push	{r3, r4, r5, lr}
 8008d7e:	4d07      	ldr	r5, [pc, #28]	; (8008d9c <_lseek_r+0x20>)
 8008d80:	4604      	mov	r4, r0
 8008d82:	4608      	mov	r0, r1
 8008d84:	4611      	mov	r1, r2
 8008d86:	2200      	movs	r2, #0
 8008d88:	602a      	str	r2, [r5, #0]
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	f7f8 f98c 	bl	80010a8 <_lseek>
 8008d90:	1c43      	adds	r3, r0, #1
 8008d92:	d102      	bne.n	8008d9a <_lseek_r+0x1e>
 8008d94:	682b      	ldr	r3, [r5, #0]
 8008d96:	b103      	cbz	r3, 8008d9a <_lseek_r+0x1e>
 8008d98:	6023      	str	r3, [r4, #0]
 8008d9a:	bd38      	pop	{r3, r4, r5, pc}
 8008d9c:	20002614 	.word	0x20002614

08008da0 <_read_r>:
 8008da0:	b538      	push	{r3, r4, r5, lr}
 8008da2:	4d07      	ldr	r5, [pc, #28]	; (8008dc0 <_read_r+0x20>)
 8008da4:	4604      	mov	r4, r0
 8008da6:	4608      	mov	r0, r1
 8008da8:	4611      	mov	r1, r2
 8008daa:	2200      	movs	r2, #0
 8008dac:	602a      	str	r2, [r5, #0]
 8008dae:	461a      	mov	r2, r3
 8008db0:	f7f8 f91a 	bl	8000fe8 <_read>
 8008db4:	1c43      	adds	r3, r0, #1
 8008db6:	d102      	bne.n	8008dbe <_read_r+0x1e>
 8008db8:	682b      	ldr	r3, [r5, #0]
 8008dba:	b103      	cbz	r3, 8008dbe <_read_r+0x1e>
 8008dbc:	6023      	str	r3, [r4, #0]
 8008dbe:	bd38      	pop	{r3, r4, r5, pc}
 8008dc0:	20002614 	.word	0x20002614

08008dc4 <_sbrk_r>:
 8008dc4:	b538      	push	{r3, r4, r5, lr}
 8008dc6:	4d06      	ldr	r5, [pc, #24]	; (8008de0 <_sbrk_r+0x1c>)
 8008dc8:	2300      	movs	r3, #0
 8008dca:	4604      	mov	r4, r0
 8008dcc:	4608      	mov	r0, r1
 8008dce:	602b      	str	r3, [r5, #0]
 8008dd0:	f7f8 f978 	bl	80010c4 <_sbrk>
 8008dd4:	1c43      	adds	r3, r0, #1
 8008dd6:	d102      	bne.n	8008dde <_sbrk_r+0x1a>
 8008dd8:	682b      	ldr	r3, [r5, #0]
 8008dda:	b103      	cbz	r3, 8008dde <_sbrk_r+0x1a>
 8008ddc:	6023      	str	r3, [r4, #0]
 8008dde:	bd38      	pop	{r3, r4, r5, pc}
 8008de0:	20002614 	.word	0x20002614

08008de4 <_write_r>:
 8008de4:	b538      	push	{r3, r4, r5, lr}
 8008de6:	4d07      	ldr	r5, [pc, #28]	; (8008e04 <_write_r+0x20>)
 8008de8:	4604      	mov	r4, r0
 8008dea:	4608      	mov	r0, r1
 8008dec:	4611      	mov	r1, r2
 8008dee:	2200      	movs	r2, #0
 8008df0:	602a      	str	r2, [r5, #0]
 8008df2:	461a      	mov	r2, r3
 8008df4:	f7f8 f915 	bl	8001022 <_write>
 8008df8:	1c43      	adds	r3, r0, #1
 8008dfa:	d102      	bne.n	8008e02 <_write_r+0x1e>
 8008dfc:	682b      	ldr	r3, [r5, #0]
 8008dfe:	b103      	cbz	r3, 8008e02 <_write_r+0x1e>
 8008e00:	6023      	str	r3, [r4, #0]
 8008e02:	bd38      	pop	{r3, r4, r5, pc}
 8008e04:	20002614 	.word	0x20002614

08008e08 <_init>:
 8008e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e0a:	bf00      	nop
 8008e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e0e:	bc08      	pop	{r3}
 8008e10:	469e      	mov	lr, r3
 8008e12:	4770      	bx	lr

08008e14 <_fini>:
 8008e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e16:	bf00      	nop
 8008e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e1a:	bc08      	pop	{r3}
 8008e1c:	469e      	mov	lr, r3
 8008e1e:	4770      	bx	lr
