
ARES-STM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027bc  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08002948  08002948  00012948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002990  08002990  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002990  08002990  00012990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002998  08002998  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002998  08002998  00012998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800299c  0800299c  0001299c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080029a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  2000000c  080029ac  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  080029ac  000200b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a44f  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018f0  00000000  00000000  0002a4ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000900  00000000  00000000  0002bdc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006dd  00000000  00000000  0002c6c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001881c  00000000  00000000  0002cd9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a71c  00000000  00000000  000455b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009accd  00000000  00000000  0004fcd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002390  00000000  00000000  000ea9a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000ecd34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08002930 	.word	0x08002930

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08002930 	.word	0x08002930

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e0:	f000 b970 	b.w	80004c4 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	460d      	mov	r5, r1
 8000204:	4604      	mov	r4, r0
 8000206:	460f      	mov	r7, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14a      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020c:	428a      	cmp	r2, r1
 800020e:	4694      	mov	ip, r2
 8000210:	d965      	bls.n	80002de <__udivmoddi4+0xe2>
 8000212:	fab2 f382 	clz	r3, r2
 8000216:	b143      	cbz	r3, 800022a <__udivmoddi4+0x2e>
 8000218:	fa02 fc03 	lsl.w	ip, r2, r3
 800021c:	f1c3 0220 	rsb	r2, r3, #32
 8000220:	409f      	lsls	r7, r3
 8000222:	fa20 f202 	lsr.w	r2, r0, r2
 8000226:	4317      	orrs	r7, r2
 8000228:	409c      	lsls	r4, r3
 800022a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022e:	fa1f f58c 	uxth.w	r5, ip
 8000232:	fbb7 f1fe 	udiv	r1, r7, lr
 8000236:	0c22      	lsrs	r2, r4, #16
 8000238:	fb0e 7711 	mls	r7, lr, r1, r7
 800023c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000240:	fb01 f005 	mul.w	r0, r1, r5
 8000244:	4290      	cmp	r0, r2
 8000246:	d90a      	bls.n	800025e <__udivmoddi4+0x62>
 8000248:	eb1c 0202 	adds.w	r2, ip, r2
 800024c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000250:	f080 811c 	bcs.w	800048c <__udivmoddi4+0x290>
 8000254:	4290      	cmp	r0, r2
 8000256:	f240 8119 	bls.w	800048c <__udivmoddi4+0x290>
 800025a:	3902      	subs	r1, #2
 800025c:	4462      	add	r2, ip
 800025e:	1a12      	subs	r2, r2, r0
 8000260:	b2a4      	uxth	r4, r4
 8000262:	fbb2 f0fe 	udiv	r0, r2, lr
 8000266:	fb0e 2210 	mls	r2, lr, r0, r2
 800026a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026e:	fb00 f505 	mul.w	r5, r0, r5
 8000272:	42a5      	cmp	r5, r4
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x90>
 8000276:	eb1c 0404 	adds.w	r4, ip, r4
 800027a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x294>
 8000282:	42a5      	cmp	r5, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x294>
 8000288:	4464      	add	r4, ip
 800028a:	3802      	subs	r0, #2
 800028c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000290:	1b64      	subs	r4, r4, r5
 8000292:	2100      	movs	r1, #0
 8000294:	b11e      	cbz	r6, 800029e <__udivmoddi4+0xa2>
 8000296:	40dc      	lsrs	r4, r3
 8000298:	2300      	movs	r3, #0
 800029a:	e9c6 4300 	strd	r4, r3, [r6]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d908      	bls.n	80002b8 <__udivmoddi4+0xbc>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80ed 	beq.w	8000486 <__udivmoddi4+0x28a>
 80002ac:	2100      	movs	r1, #0
 80002ae:	e9c6 0500 	strd	r0, r5, [r6]
 80002b2:	4608      	mov	r0, r1
 80002b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b8:	fab3 f183 	clz	r1, r3
 80002bc:	2900      	cmp	r1, #0
 80002be:	d149      	bne.n	8000354 <__udivmoddi4+0x158>
 80002c0:	42ab      	cmp	r3, r5
 80002c2:	d302      	bcc.n	80002ca <__udivmoddi4+0xce>
 80002c4:	4282      	cmp	r2, r0
 80002c6:	f200 80f8 	bhi.w	80004ba <__udivmoddi4+0x2be>
 80002ca:	1a84      	subs	r4, r0, r2
 80002cc:	eb65 0203 	sbc.w	r2, r5, r3
 80002d0:	2001      	movs	r0, #1
 80002d2:	4617      	mov	r7, r2
 80002d4:	2e00      	cmp	r6, #0
 80002d6:	d0e2      	beq.n	800029e <__udivmoddi4+0xa2>
 80002d8:	e9c6 4700 	strd	r4, r7, [r6]
 80002dc:	e7df      	b.n	800029e <__udivmoddi4+0xa2>
 80002de:	b902      	cbnz	r2, 80002e2 <__udivmoddi4+0xe6>
 80002e0:	deff      	udf	#255	; 0xff
 80002e2:	fab2 f382 	clz	r3, r2
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x210>
 80002ec:	1a8a      	subs	r2, r1, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f fe8c 	uxth.w	lr, ip
 80002f6:	2101      	movs	r1, #1
 80002f8:	fbb2 f5f7 	udiv	r5, r2, r7
 80002fc:	fb07 2015 	mls	r0, r7, r5, r2
 8000300:	0c22      	lsrs	r2, r4, #16
 8000302:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000306:	fb0e f005 	mul.w	r0, lr, r5
 800030a:	4290      	cmp	r0, r2
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x124>
 800030e:	eb1c 0202 	adds.w	r2, ip, r2
 8000312:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4290      	cmp	r0, r2
 800031a:	f200 80cb 	bhi.w	80004b4 <__udivmoddi4+0x2b8>
 800031e:	4645      	mov	r5, r8
 8000320:	1a12      	subs	r2, r2, r0
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb2 f0f7 	udiv	r0, r2, r7
 8000328:	fb07 2210 	mls	r2, r7, r0, r2
 800032c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000330:	fb0e fe00 	mul.w	lr, lr, r0
 8000334:	45a6      	cmp	lr, r4
 8000336:	d908      	bls.n	800034a <__udivmoddi4+0x14e>
 8000338:	eb1c 0404 	adds.w	r4, ip, r4
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x14c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f200 80bb 	bhi.w	80004be <__udivmoddi4+0x2c2>
 8000348:	4610      	mov	r0, r2
 800034a:	eba4 040e 	sub.w	r4, r4, lr
 800034e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000352:	e79f      	b.n	8000294 <__udivmoddi4+0x98>
 8000354:	f1c1 0720 	rsb	r7, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 fc07 	lsr.w	ip, r2, r7
 800035e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000362:	fa05 f401 	lsl.w	r4, r5, r1
 8000366:	fa20 f307 	lsr.w	r3, r0, r7
 800036a:	40fd      	lsrs	r5, r7
 800036c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fbb5 f8f9 	udiv	r8, r5, r9
 8000376:	fa1f fe8c 	uxth.w	lr, ip
 800037a:	fb09 5518 	mls	r5, r9, r8, r5
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000384:	fb08 f50e 	mul.w	r5, r8, lr
 8000388:	42a5      	cmp	r5, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	fa00 f001 	lsl.w	r0, r0, r1
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800039c:	f080 8088 	bcs.w	80004b0 <__udivmoddi4+0x2b4>
 80003a0:	42a5      	cmp	r5, r4
 80003a2:	f240 8085 	bls.w	80004b0 <__udivmoddi4+0x2b4>
 80003a6:	f1a8 0802 	sub.w	r8, r8, #2
 80003aa:	4464      	add	r4, ip
 80003ac:	1b64      	subs	r4, r4, r5
 80003ae:	b29d      	uxth	r5, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003bc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c0:	45a6      	cmp	lr, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003cc:	d26c      	bcs.n	80004a8 <__udivmoddi4+0x2ac>
 80003ce:	45a6      	cmp	lr, r4
 80003d0:	d96a      	bls.n	80004a8 <__udivmoddi4+0x2ac>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	4464      	add	r4, ip
 80003d6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003da:	fba3 9502 	umull	r9, r5, r3, r2
 80003de:	eba4 040e 	sub.w	r4, r4, lr
 80003e2:	42ac      	cmp	r4, r5
 80003e4:	46c8      	mov	r8, r9
 80003e6:	46ae      	mov	lr, r5
 80003e8:	d356      	bcc.n	8000498 <__udivmoddi4+0x29c>
 80003ea:	d053      	beq.n	8000494 <__udivmoddi4+0x298>
 80003ec:	b156      	cbz	r6, 8000404 <__udivmoddi4+0x208>
 80003ee:	ebb0 0208 	subs.w	r2, r0, r8
 80003f2:	eb64 040e 	sbc.w	r4, r4, lr
 80003f6:	fa04 f707 	lsl.w	r7, r4, r7
 80003fa:	40ca      	lsrs	r2, r1
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	4317      	orrs	r7, r2
 8000400:	e9c6 7400 	strd	r7, r4, [r6]
 8000404:	4618      	mov	r0, r3
 8000406:	2100      	movs	r1, #0
 8000408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040c:	f1c3 0120 	rsb	r1, r3, #32
 8000410:	fa02 fc03 	lsl.w	ip, r2, r3
 8000414:	fa20 f201 	lsr.w	r2, r0, r1
 8000418:	fa25 f101 	lsr.w	r1, r5, r1
 800041c:	409d      	lsls	r5, r3
 800041e:	432a      	orrs	r2, r5
 8000420:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000424:	fa1f fe8c 	uxth.w	lr, ip
 8000428:	fbb1 f0f7 	udiv	r0, r1, r7
 800042c:	fb07 1510 	mls	r5, r7, r0, r1
 8000430:	0c11      	lsrs	r1, r2, #16
 8000432:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000436:	fb00 f50e 	mul.w	r5, r0, lr
 800043a:	428d      	cmp	r5, r1
 800043c:	fa04 f403 	lsl.w	r4, r4, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x258>
 8000442:	eb1c 0101 	adds.w	r1, ip, r1
 8000446:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800044a:	d22f      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800044c:	428d      	cmp	r5, r1
 800044e:	d92d      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000450:	3802      	subs	r0, #2
 8000452:	4461      	add	r1, ip
 8000454:	1b49      	subs	r1, r1, r5
 8000456:	b292      	uxth	r2, r2
 8000458:	fbb1 f5f7 	udiv	r5, r1, r7
 800045c:	fb07 1115 	mls	r1, r7, r5, r1
 8000460:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000464:	fb05 f10e 	mul.w	r1, r5, lr
 8000468:	4291      	cmp	r1, r2
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x282>
 800046c:	eb1c 0202 	adds.w	r2, ip, r2
 8000470:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000474:	d216      	bcs.n	80004a4 <__udivmoddi4+0x2a8>
 8000476:	4291      	cmp	r1, r2
 8000478:	d914      	bls.n	80004a4 <__udivmoddi4+0x2a8>
 800047a:	3d02      	subs	r5, #2
 800047c:	4462      	add	r2, ip
 800047e:	1a52      	subs	r2, r2, r1
 8000480:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000484:	e738      	b.n	80002f8 <__udivmoddi4+0xfc>
 8000486:	4631      	mov	r1, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e708      	b.n	800029e <__udivmoddi4+0xa2>
 800048c:	4639      	mov	r1, r7
 800048e:	e6e6      	b.n	800025e <__udivmoddi4+0x62>
 8000490:	4610      	mov	r0, r2
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x90>
 8000494:	4548      	cmp	r0, r9
 8000496:	d2a9      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000498:	ebb9 0802 	subs.w	r8, r9, r2
 800049c:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a0:	3b01      	subs	r3, #1
 80004a2:	e7a3      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a4:	4645      	mov	r5, r8
 80004a6:	e7ea      	b.n	800047e <__udivmoddi4+0x282>
 80004a8:	462b      	mov	r3, r5
 80004aa:	e794      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004ac:	4640      	mov	r0, r8
 80004ae:	e7d1      	b.n	8000454 <__udivmoddi4+0x258>
 80004b0:	46d0      	mov	r8, sl
 80004b2:	e77b      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b4:	3d02      	subs	r5, #2
 80004b6:	4462      	add	r2, ip
 80004b8:	e732      	b.n	8000320 <__udivmoddi4+0x124>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e70a      	b.n	80002d4 <__udivmoddi4+0xd8>
 80004be:	4464      	add	r4, ip
 80004c0:	3802      	subs	r0, #2
 80004c2:	e742      	b.n	800034a <__udivmoddi4+0x14e>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 f9d1 	bl	8000872 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f806 	bl	80004e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 f88a 	bl	80005ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004d8:	f000 f858 	bl	800058c <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004dc:	e7fe      	b.n	80004dc <main+0x14>
	...

080004e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b096      	sub	sp, #88	; 0x58
 80004e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004e6:	f107 0314 	add.w	r3, r7, #20
 80004ea:	2244      	movs	r2, #68	; 0x44
 80004ec:	2100      	movs	r1, #0
 80004ee:	4618      	mov	r0, r3
 80004f0:	f002 f9f1 	bl	80028d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004f4:	463b      	mov	r3, r7
 80004f6:	2200      	movs	r2, #0
 80004f8:	601a      	str	r2, [r3, #0]
 80004fa:	605a      	str	r2, [r3, #4]
 80004fc:	609a      	str	r2, [r3, #8]
 80004fe:	60da      	str	r2, [r3, #12]
 8000500:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000502:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000506:	f000 fcb7 	bl	8000e78 <HAL_PWREx_ControlVoltageScaling>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	d001      	beq.n	8000514 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000510:	f000 f8b6 	bl	8000680 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000514:	f000 fc92 	bl	8000e3c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000518:	4b1b      	ldr	r3, [pc, #108]	; (8000588 <SystemClock_Config+0xa8>)
 800051a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800051e:	4a1a      	ldr	r2, [pc, #104]	; (8000588 <SystemClock_Config+0xa8>)
 8000520:	f023 0318 	bic.w	r3, r3, #24
 8000524:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000528:	2314      	movs	r3, #20
 800052a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800052c:	2301      	movs	r3, #1
 800052e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000530:	2301      	movs	r3, #1
 8000532:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000534:	2300      	movs	r3, #0
 8000536:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8000538:	23a0      	movs	r3, #160	; 0xa0
 800053a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800053c:	2300      	movs	r3, #0
 800053e:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000540:	f107 0314 	add.w	r3, r7, #20
 8000544:	4618      	mov	r0, r3
 8000546:	f000 fced 	bl	8000f24 <HAL_RCC_OscConfig>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000550:	f000 f896 	bl	8000680 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000554:	230f      	movs	r3, #15
 8000556:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000558:	2300      	movs	r3, #0
 800055a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800055c:	2300      	movs	r3, #0
 800055e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000560:	2300      	movs	r3, #0
 8000562:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000564:	2300      	movs	r3, #0
 8000566:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000568:	463b      	mov	r3, r7
 800056a:	2101      	movs	r1, #1
 800056c:	4618      	mov	r0, r3
 800056e:	f001 f93b 	bl	80017e8 <HAL_RCC_ClockConfig>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000578:	f000 f882 	bl	8000680 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800057c:	f001 fcde 	bl	8001f3c <HAL_RCCEx_EnableMSIPLLMode>
}
 8000580:	bf00      	nop
 8000582:	3758      	adds	r7, #88	; 0x58
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	40021000 	.word	0x40021000

0800058c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000590:	4b14      	ldr	r3, [pc, #80]	; (80005e4 <MX_USART2_UART_Init+0x58>)
 8000592:	4a15      	ldr	r2, [pc, #84]	; (80005e8 <MX_USART2_UART_Init+0x5c>)
 8000594:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000596:	4b13      	ldr	r3, [pc, #76]	; (80005e4 <MX_USART2_UART_Init+0x58>)
 8000598:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800059c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800059e:	4b11      	ldr	r3, [pc, #68]	; (80005e4 <MX_USART2_UART_Init+0x58>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005a4:	4b0f      	ldr	r3, [pc, #60]	; (80005e4 <MX_USART2_UART_Init+0x58>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005aa:	4b0e      	ldr	r3, [pc, #56]	; (80005e4 <MX_USART2_UART_Init+0x58>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005b0:	4b0c      	ldr	r3, [pc, #48]	; (80005e4 <MX_USART2_UART_Init+0x58>)
 80005b2:	220c      	movs	r2, #12
 80005b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005b6:	4b0b      	ldr	r3, [pc, #44]	; (80005e4 <MX_USART2_UART_Init+0x58>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005bc:	4b09      	ldr	r3, [pc, #36]	; (80005e4 <MX_USART2_UART_Init+0x58>)
 80005be:	2200      	movs	r2, #0
 80005c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005c2:	4b08      	ldr	r3, [pc, #32]	; (80005e4 <MX_USART2_UART_Init+0x58>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005c8:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <MX_USART2_UART_Init+0x58>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005ce:	4805      	ldr	r0, [pc, #20]	; (80005e4 <MX_USART2_UART_Init+0x58>)
 80005d0:	f001 fcc4 	bl	8001f5c <HAL_UART_Init>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80005da:	f000 f851 	bl	8000680 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005de:	bf00      	nop
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	20000028 	.word	0x20000028
 80005e8:	40004400 	.word	0x40004400

080005ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b088      	sub	sp, #32
 80005f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f2:	f107 030c 	add.w	r3, r7, #12
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
 80005fe:	60da      	str	r2, [r3, #12]
 8000600:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000602:	4b1d      	ldr	r3, [pc, #116]	; (8000678 <MX_GPIO_Init+0x8c>)
 8000604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000606:	4a1c      	ldr	r2, [pc, #112]	; (8000678 <MX_GPIO_Init+0x8c>)
 8000608:	f043 0304 	orr.w	r3, r3, #4
 800060c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800060e:	4b1a      	ldr	r3, [pc, #104]	; (8000678 <MX_GPIO_Init+0x8c>)
 8000610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000612:	f003 0304 	and.w	r3, r3, #4
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800061a:	4b17      	ldr	r3, [pc, #92]	; (8000678 <MX_GPIO_Init+0x8c>)
 800061c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800061e:	4a16      	ldr	r2, [pc, #88]	; (8000678 <MX_GPIO_Init+0x8c>)
 8000620:	f043 0301 	orr.w	r3, r3, #1
 8000624:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000626:	4b14      	ldr	r3, [pc, #80]	; (8000678 <MX_GPIO_Init+0x8c>)
 8000628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800062a:	f003 0301 	and.w	r3, r3, #1
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000632:	4b11      	ldr	r3, [pc, #68]	; (8000678 <MX_GPIO_Init+0x8c>)
 8000634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000636:	4a10      	ldr	r2, [pc, #64]	; (8000678 <MX_GPIO_Init+0x8c>)
 8000638:	f043 0302 	orr.w	r3, r3, #2
 800063c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800063e:	4b0e      	ldr	r3, [pc, #56]	; (8000678 <MX_GPIO_Init+0x8c>)
 8000640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000642:	f003 0302 	and.w	r3, r3, #2
 8000646:	603b      	str	r3, [r7, #0]
 8000648:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800064a:	2200      	movs	r2, #0
 800064c:	2108      	movs	r1, #8
 800064e:	480b      	ldr	r0, [pc, #44]	; (800067c <MX_GPIO_Init+0x90>)
 8000650:	f000 fbdc 	bl	8000e0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000654:	2308      	movs	r3, #8
 8000656:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000658:	2301      	movs	r3, #1
 800065a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065c:	2300      	movs	r3, #0
 800065e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000660:	2300      	movs	r3, #0
 8000662:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000664:	f107 030c 	add.w	r3, r7, #12
 8000668:	4619      	mov	r1, r3
 800066a:	4804      	ldr	r0, [pc, #16]	; (800067c <MX_GPIO_Init+0x90>)
 800066c:	f000 fa5c 	bl	8000b28 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000670:	bf00      	nop
 8000672:	3720      	adds	r7, #32
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	40021000 	.word	0x40021000
 800067c:	48000400 	.word	0x48000400

08000680 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000684:	b672      	cpsid	i
}
 8000686:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000688:	e7fe      	b.n	8000688 <Error_Handler+0x8>
	...

0800068c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000692:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <HAL_MspInit+0x44>)
 8000694:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000696:	4a0e      	ldr	r2, [pc, #56]	; (80006d0 <HAL_MspInit+0x44>)
 8000698:	f043 0301 	orr.w	r3, r3, #1
 800069c:	6613      	str	r3, [r2, #96]	; 0x60
 800069e:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <HAL_MspInit+0x44>)
 80006a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006a2:	f003 0301 	and.w	r3, r3, #1
 80006a6:	607b      	str	r3, [r7, #4]
 80006a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006aa:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <HAL_MspInit+0x44>)
 80006ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006ae:	4a08      	ldr	r2, [pc, #32]	; (80006d0 <HAL_MspInit+0x44>)
 80006b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006b4:	6593      	str	r3, [r2, #88]	; 0x58
 80006b6:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <HAL_MspInit+0x44>)
 80006b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006be:	603b      	str	r3, [r7, #0]
 80006c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006c2:	bf00      	nop
 80006c4:	370c      	adds	r7, #12
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop
 80006d0:	40021000 	.word	0x40021000

080006d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b096      	sub	sp, #88	; 0x58
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006dc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
 80006e8:	60da      	str	r2, [r3, #12]
 80006ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006ec:	f107 0310 	add.w	r3, r7, #16
 80006f0:	2234      	movs	r2, #52	; 0x34
 80006f2:	2100      	movs	r1, #0
 80006f4:	4618      	mov	r0, r3
 80006f6:	f002 f8ee 	bl	80028d6 <memset>
  if(huart->Instance==USART2)
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	4a28      	ldr	r2, [pc, #160]	; (80007a0 <HAL_UART_MspInit+0xcc>)
 8000700:	4293      	cmp	r3, r2
 8000702:	d148      	bne.n	8000796 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000704:	2302      	movs	r3, #2
 8000706:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000708:	2300      	movs	r3, #0
 800070a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800070c:	f107 0310 	add.w	r3, r7, #16
 8000710:	4618      	mov	r0, r3
 8000712:	f001 fa8d 	bl	8001c30 <HAL_RCCEx_PeriphCLKConfig>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800071c:	f7ff ffb0 	bl	8000680 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000720:	4b20      	ldr	r3, [pc, #128]	; (80007a4 <HAL_UART_MspInit+0xd0>)
 8000722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000724:	4a1f      	ldr	r2, [pc, #124]	; (80007a4 <HAL_UART_MspInit+0xd0>)
 8000726:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800072a:	6593      	str	r3, [r2, #88]	; 0x58
 800072c:	4b1d      	ldr	r3, [pc, #116]	; (80007a4 <HAL_UART_MspInit+0xd0>)
 800072e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000730:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000734:	60fb      	str	r3, [r7, #12]
 8000736:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000738:	4b1a      	ldr	r3, [pc, #104]	; (80007a4 <HAL_UART_MspInit+0xd0>)
 800073a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073c:	4a19      	ldr	r2, [pc, #100]	; (80007a4 <HAL_UART_MspInit+0xd0>)
 800073e:	f043 0301 	orr.w	r3, r3, #1
 8000742:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000744:	4b17      	ldr	r3, [pc, #92]	; (80007a4 <HAL_UART_MspInit+0xd0>)
 8000746:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000748:	f003 0301 	and.w	r3, r3, #1
 800074c:	60bb      	str	r3, [r7, #8]
 800074e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000750:	2304      	movs	r3, #4
 8000752:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000754:	2302      	movs	r3, #2
 8000756:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000758:	2300      	movs	r3, #0
 800075a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800075c:	2303      	movs	r3, #3
 800075e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000760:	2307      	movs	r3, #7
 8000762:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000764:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000768:	4619      	mov	r1, r3
 800076a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800076e:	f000 f9db 	bl	8000b28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000772:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000776:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000778:	2302      	movs	r3, #2
 800077a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000780:	2303      	movs	r3, #3
 8000782:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000784:	2303      	movs	r3, #3
 8000786:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000788:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800078c:	4619      	mov	r1, r3
 800078e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000792:	f000 f9c9 	bl	8000b28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000796:	bf00      	nop
 8000798:	3758      	adds	r7, #88	; 0x58
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40004400 	.word	0x40004400
 80007a4:	40021000 	.word	0x40021000

080007a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007ac:	e7fe      	b.n	80007ac <NMI_Handler+0x4>

080007ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ae:	b480      	push	{r7}
 80007b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007b2:	e7fe      	b.n	80007b2 <HardFault_Handler+0x4>

080007b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007b8:	e7fe      	b.n	80007b8 <MemManage_Handler+0x4>

080007ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ba:	b480      	push	{r7}
 80007bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007be:	e7fe      	b.n	80007be <BusFault_Handler+0x4>

080007c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007c4:	e7fe      	b.n	80007c4 <UsageFault_Handler+0x4>

080007c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007c6:	b480      	push	{r7}
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007ca:	bf00      	nop
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr

080007d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007d8:	bf00      	nop
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr

080007e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007e2:	b480      	push	{r7}
 80007e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007e6:	bf00      	nop
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr

080007f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007f4:	f000 f892 	bl	800091c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007f8:	bf00      	nop
 80007fa:	bd80      	pop	{r7, pc}

080007fc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000800:	4b06      	ldr	r3, [pc, #24]	; (800081c <SystemInit+0x20>)
 8000802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000806:	4a05      	ldr	r2, [pc, #20]	; (800081c <SystemInit+0x20>)
 8000808:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800080c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000810:	bf00      	nop
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	e000ed00 	.word	0xe000ed00

08000820 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000820:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000858 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000824:	f7ff ffea 	bl	80007fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000828:	480c      	ldr	r0, [pc, #48]	; (800085c <LoopForever+0x6>)
  ldr r1, =_edata
 800082a:	490d      	ldr	r1, [pc, #52]	; (8000860 <LoopForever+0xa>)
  ldr r2, =_sidata
 800082c:	4a0d      	ldr	r2, [pc, #52]	; (8000864 <LoopForever+0xe>)
  movs r3, #0
 800082e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000830:	e002      	b.n	8000838 <LoopCopyDataInit>

08000832 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000832:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000834:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000836:	3304      	adds	r3, #4

08000838 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000838:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800083a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800083c:	d3f9      	bcc.n	8000832 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800083e:	4a0a      	ldr	r2, [pc, #40]	; (8000868 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000840:	4c0a      	ldr	r4, [pc, #40]	; (800086c <LoopForever+0x16>)
  movs r3, #0
 8000842:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000844:	e001      	b.n	800084a <LoopFillZerobss>

08000846 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000846:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000848:	3204      	adds	r2, #4

0800084a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800084a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800084c:	d3fb      	bcc.n	8000846 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800084e:	f002 f84b 	bl	80028e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000852:	f7ff fe39 	bl	80004c8 <main>

08000856 <LoopForever>:

LoopForever:
    b LoopForever
 8000856:	e7fe      	b.n	8000856 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000858:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800085c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000860:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000864:	080029a0 	.word	0x080029a0
  ldr r2, =_sbss
 8000868:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800086c:	200000b4 	.word	0x200000b4

08000870 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000870:	e7fe      	b.n	8000870 <ADC1_2_IRQHandler>

08000872 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000872:	b580      	push	{r7, lr}
 8000874:	b082      	sub	sp, #8
 8000876:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000878:	2300      	movs	r3, #0
 800087a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800087c:	2003      	movs	r0, #3
 800087e:	f000 f91f 	bl	8000ac0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000882:	2000      	movs	r0, #0
 8000884:	f000 f80e 	bl	80008a4 <HAL_InitTick>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d002      	beq.n	8000894 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800088e:	2301      	movs	r3, #1
 8000890:	71fb      	strb	r3, [r7, #7]
 8000892:	e001      	b.n	8000898 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000894:	f7ff fefa 	bl	800068c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000898:	79fb      	ldrb	r3, [r7, #7]
}
 800089a:	4618      	mov	r0, r3
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
	...

080008a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80008ac:	2300      	movs	r3, #0
 80008ae:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80008b0:	4b17      	ldr	r3, [pc, #92]	; (8000910 <HAL_InitTick+0x6c>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d023      	beq.n	8000900 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80008b8:	4b16      	ldr	r3, [pc, #88]	; (8000914 <HAL_InitTick+0x70>)
 80008ba:	681a      	ldr	r2, [r3, #0]
 80008bc:	4b14      	ldr	r3, [pc, #80]	; (8000910 <HAL_InitTick+0x6c>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	4619      	mov	r1, r3
 80008c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ce:	4618      	mov	r0, r3
 80008d0:	f000 f91d 	bl	8000b0e <HAL_SYSTICK_Config>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d10f      	bne.n	80008fa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	2b0f      	cmp	r3, #15
 80008de:	d809      	bhi.n	80008f4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008e0:	2200      	movs	r2, #0
 80008e2:	6879      	ldr	r1, [r7, #4]
 80008e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008e8:	f000 f8f5 	bl	8000ad6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008ec:	4a0a      	ldr	r2, [pc, #40]	; (8000918 <HAL_InitTick+0x74>)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	6013      	str	r3, [r2, #0]
 80008f2:	e007      	b.n	8000904 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80008f4:	2301      	movs	r3, #1
 80008f6:	73fb      	strb	r3, [r7, #15]
 80008f8:	e004      	b.n	8000904 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80008fa:	2301      	movs	r3, #1
 80008fc:	73fb      	strb	r3, [r7, #15]
 80008fe:	e001      	b.n	8000904 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000900:	2301      	movs	r3, #1
 8000902:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000904:	7bfb      	ldrb	r3, [r7, #15]
}
 8000906:	4618      	mov	r0, r3
 8000908:	3710      	adds	r7, #16
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	20000008 	.word	0x20000008
 8000914:	20000000 	.word	0x20000000
 8000918:	20000004 	.word	0x20000004

0800091c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000920:	4b06      	ldr	r3, [pc, #24]	; (800093c <HAL_IncTick+0x20>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	461a      	mov	r2, r3
 8000926:	4b06      	ldr	r3, [pc, #24]	; (8000940 <HAL_IncTick+0x24>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4413      	add	r3, r2
 800092c:	4a04      	ldr	r2, [pc, #16]	; (8000940 <HAL_IncTick+0x24>)
 800092e:	6013      	str	r3, [r2, #0]
}
 8000930:	bf00      	nop
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	20000008 	.word	0x20000008
 8000940:	200000b0 	.word	0x200000b0

08000944 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  return uwTick;
 8000948:	4b03      	ldr	r3, [pc, #12]	; (8000958 <HAL_GetTick+0x14>)
 800094a:	681b      	ldr	r3, [r3, #0]
}
 800094c:	4618      	mov	r0, r3
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	200000b0 	.word	0x200000b0

0800095c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800095c:	b480      	push	{r7}
 800095e:	b085      	sub	sp, #20
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	f003 0307 	and.w	r3, r3, #7
 800096a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800096c:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <__NVIC_SetPriorityGrouping+0x44>)
 800096e:	68db      	ldr	r3, [r3, #12]
 8000970:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000972:	68ba      	ldr	r2, [r7, #8]
 8000974:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000978:	4013      	ands	r3, r2
 800097a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000984:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000988:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800098c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800098e:	4a04      	ldr	r2, [pc, #16]	; (80009a0 <__NVIC_SetPriorityGrouping+0x44>)
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	60d3      	str	r3, [r2, #12]
}
 8000994:	bf00      	nop
 8000996:	3714      	adds	r7, #20
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr
 80009a0:	e000ed00 	.word	0xe000ed00

080009a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009a8:	4b04      	ldr	r3, [pc, #16]	; (80009bc <__NVIC_GetPriorityGrouping+0x18>)
 80009aa:	68db      	ldr	r3, [r3, #12]
 80009ac:	0a1b      	lsrs	r3, r3, #8
 80009ae:	f003 0307 	and.w	r3, r3, #7
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr
 80009bc:	e000ed00 	.word	0xe000ed00

080009c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	6039      	str	r1, [r7, #0]
 80009ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	db0a      	blt.n	80009ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	b2da      	uxtb	r2, r3
 80009d8:	490c      	ldr	r1, [pc, #48]	; (8000a0c <__NVIC_SetPriority+0x4c>)
 80009da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009de:	0112      	lsls	r2, r2, #4
 80009e0:	b2d2      	uxtb	r2, r2
 80009e2:	440b      	add	r3, r1
 80009e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009e8:	e00a      	b.n	8000a00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	b2da      	uxtb	r2, r3
 80009ee:	4908      	ldr	r1, [pc, #32]	; (8000a10 <__NVIC_SetPriority+0x50>)
 80009f0:	79fb      	ldrb	r3, [r7, #7]
 80009f2:	f003 030f 	and.w	r3, r3, #15
 80009f6:	3b04      	subs	r3, #4
 80009f8:	0112      	lsls	r2, r2, #4
 80009fa:	b2d2      	uxtb	r2, r2
 80009fc:	440b      	add	r3, r1
 80009fe:	761a      	strb	r2, [r3, #24]
}
 8000a00:	bf00      	nop
 8000a02:	370c      	adds	r7, #12
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr
 8000a0c:	e000e100 	.word	0xe000e100
 8000a10:	e000ed00 	.word	0xe000ed00

08000a14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b089      	sub	sp, #36	; 0x24
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	60f8      	str	r0, [r7, #12]
 8000a1c:	60b9      	str	r1, [r7, #8]
 8000a1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	f003 0307 	and.w	r3, r3, #7
 8000a26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a28:	69fb      	ldr	r3, [r7, #28]
 8000a2a:	f1c3 0307 	rsb	r3, r3, #7
 8000a2e:	2b04      	cmp	r3, #4
 8000a30:	bf28      	it	cs
 8000a32:	2304      	movcs	r3, #4
 8000a34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a36:	69fb      	ldr	r3, [r7, #28]
 8000a38:	3304      	adds	r3, #4
 8000a3a:	2b06      	cmp	r3, #6
 8000a3c:	d902      	bls.n	8000a44 <NVIC_EncodePriority+0x30>
 8000a3e:	69fb      	ldr	r3, [r7, #28]
 8000a40:	3b03      	subs	r3, #3
 8000a42:	e000      	b.n	8000a46 <NVIC_EncodePriority+0x32>
 8000a44:	2300      	movs	r3, #0
 8000a46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a4c:	69bb      	ldr	r3, [r7, #24]
 8000a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a52:	43da      	mvns	r2, r3
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	401a      	ands	r2, r3
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	fa01 f303 	lsl.w	r3, r1, r3
 8000a66:	43d9      	mvns	r1, r3
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a6c:	4313      	orrs	r3, r2
         );
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3724      	adds	r7, #36	; 0x24
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
	...

08000a7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	3b01      	subs	r3, #1
 8000a88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a8c:	d301      	bcc.n	8000a92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a8e:	2301      	movs	r3, #1
 8000a90:	e00f      	b.n	8000ab2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a92:	4a0a      	ldr	r2, [pc, #40]	; (8000abc <SysTick_Config+0x40>)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	3b01      	subs	r3, #1
 8000a98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a9a:	210f      	movs	r1, #15
 8000a9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000aa0:	f7ff ff8e 	bl	80009c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000aa4:	4b05      	ldr	r3, [pc, #20]	; (8000abc <SysTick_Config+0x40>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aaa:	4b04      	ldr	r3, [pc, #16]	; (8000abc <SysTick_Config+0x40>)
 8000aac:	2207      	movs	r2, #7
 8000aae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ab0:	2300      	movs	r3, #0
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	e000e010 	.word	0xe000e010

08000ac0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ac8:	6878      	ldr	r0, [r7, #4]
 8000aca:	f7ff ff47 	bl	800095c <__NVIC_SetPriorityGrouping>
}
 8000ace:	bf00      	nop
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}

08000ad6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ad6:	b580      	push	{r7, lr}
 8000ad8:	b086      	sub	sp, #24
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	4603      	mov	r3, r0
 8000ade:	60b9      	str	r1, [r7, #8]
 8000ae0:	607a      	str	r2, [r7, #4]
 8000ae2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ae8:	f7ff ff5c 	bl	80009a4 <__NVIC_GetPriorityGrouping>
 8000aec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000aee:	687a      	ldr	r2, [r7, #4]
 8000af0:	68b9      	ldr	r1, [r7, #8]
 8000af2:	6978      	ldr	r0, [r7, #20]
 8000af4:	f7ff ff8e 	bl	8000a14 <NVIC_EncodePriority>
 8000af8:	4602      	mov	r2, r0
 8000afa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000afe:	4611      	mov	r1, r2
 8000b00:	4618      	mov	r0, r3
 8000b02:	f7ff ff5d 	bl	80009c0 <__NVIC_SetPriority>
}
 8000b06:	bf00      	nop
 8000b08:	3718      	adds	r7, #24
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	b082      	sub	sp, #8
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b16:	6878      	ldr	r0, [r7, #4]
 8000b18:	f7ff ffb0 	bl	8000a7c <SysTick_Config>
 8000b1c:	4603      	mov	r3, r0
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
	...

08000b28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b087      	sub	sp, #28
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b32:	2300      	movs	r3, #0
 8000b34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b36:	e14e      	b.n	8000dd6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	681a      	ldr	r2, [r3, #0]
 8000b3c:	2101      	movs	r1, #1
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	fa01 f303 	lsl.w	r3, r1, r3
 8000b44:	4013      	ands	r3, r2
 8000b46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	f000 8140 	beq.w	8000dd0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	f003 0303 	and.w	r3, r3, #3
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d005      	beq.n	8000b68 <HAL_GPIO_Init+0x40>
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	f003 0303 	and.w	r3, r3, #3
 8000b64:	2b02      	cmp	r3, #2
 8000b66:	d130      	bne.n	8000bca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	689b      	ldr	r3, [r3, #8]
 8000b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	005b      	lsls	r3, r3, #1
 8000b72:	2203      	movs	r2, #3
 8000b74:	fa02 f303 	lsl.w	r3, r2, r3
 8000b78:	43db      	mvns	r3, r3
 8000b7a:	693a      	ldr	r2, [r7, #16]
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	68da      	ldr	r2, [r3, #12]
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	005b      	lsls	r3, r3, #1
 8000b88:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8c:	693a      	ldr	r2, [r7, #16]
 8000b8e:	4313      	orrs	r3, r2
 8000b90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	693a      	ldr	r2, [r7, #16]
 8000b96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba6:	43db      	mvns	r3, r3
 8000ba8:	693a      	ldr	r2, [r7, #16]
 8000baa:	4013      	ands	r3, r2
 8000bac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	091b      	lsrs	r3, r3, #4
 8000bb4:	f003 0201 	and.w	r2, r3, #1
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbe:	693a      	ldr	r2, [r7, #16]
 8000bc0:	4313      	orrs	r3, r2
 8000bc2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	693a      	ldr	r2, [r7, #16]
 8000bc8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	f003 0303 	and.w	r3, r3, #3
 8000bd2:	2b03      	cmp	r3, #3
 8000bd4:	d017      	beq.n	8000c06 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	68db      	ldr	r3, [r3, #12]
 8000bda:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	005b      	lsls	r3, r3, #1
 8000be0:	2203      	movs	r2, #3
 8000be2:	fa02 f303 	lsl.w	r3, r2, r3
 8000be6:	43db      	mvns	r3, r3
 8000be8:	693a      	ldr	r2, [r7, #16]
 8000bea:	4013      	ands	r3, r2
 8000bec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	689a      	ldr	r2, [r3, #8]
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	005b      	lsls	r3, r3, #1
 8000bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfa:	693a      	ldr	r2, [r7, #16]
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	693a      	ldr	r2, [r7, #16]
 8000c04:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	f003 0303 	and.w	r3, r3, #3
 8000c0e:	2b02      	cmp	r3, #2
 8000c10:	d123      	bne.n	8000c5a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	08da      	lsrs	r2, r3, #3
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	3208      	adds	r2, #8
 8000c1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	f003 0307 	and.w	r3, r3, #7
 8000c26:	009b      	lsls	r3, r3, #2
 8000c28:	220f      	movs	r2, #15
 8000c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2e:	43db      	mvns	r3, r3
 8000c30:	693a      	ldr	r2, [r7, #16]
 8000c32:	4013      	ands	r3, r2
 8000c34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	691a      	ldr	r2, [r3, #16]
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	f003 0307 	and.w	r3, r3, #7
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	fa02 f303 	lsl.w	r3, r2, r3
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	08da      	lsrs	r2, r3, #3
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	3208      	adds	r2, #8
 8000c54:	6939      	ldr	r1, [r7, #16]
 8000c56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	005b      	lsls	r3, r3, #1
 8000c64:	2203      	movs	r2, #3
 8000c66:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6a:	43db      	mvns	r3, r3
 8000c6c:	693a      	ldr	r2, [r7, #16]
 8000c6e:	4013      	ands	r3, r2
 8000c70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	f003 0203 	and.w	r2, r3, #3
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c82:	693a      	ldr	r2, [r7, #16]
 8000c84:	4313      	orrs	r3, r2
 8000c86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	f000 809a 	beq.w	8000dd0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c9c:	4b55      	ldr	r3, [pc, #340]	; (8000df4 <HAL_GPIO_Init+0x2cc>)
 8000c9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ca0:	4a54      	ldr	r2, [pc, #336]	; (8000df4 <HAL_GPIO_Init+0x2cc>)
 8000ca2:	f043 0301 	orr.w	r3, r3, #1
 8000ca6:	6613      	str	r3, [r2, #96]	; 0x60
 8000ca8:	4b52      	ldr	r3, [pc, #328]	; (8000df4 <HAL_GPIO_Init+0x2cc>)
 8000caa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cac:	f003 0301 	and.w	r3, r3, #1
 8000cb0:	60bb      	str	r3, [r7, #8]
 8000cb2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000cb4:	4a50      	ldr	r2, [pc, #320]	; (8000df8 <HAL_GPIO_Init+0x2d0>)
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	089b      	lsrs	r3, r3, #2
 8000cba:	3302      	adds	r3, #2
 8000cbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	f003 0303 	and.w	r3, r3, #3
 8000cc8:	009b      	lsls	r3, r3, #2
 8000cca:	220f      	movs	r2, #15
 8000ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd0:	43db      	mvns	r3, r3
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000cde:	d013      	beq.n	8000d08 <HAL_GPIO_Init+0x1e0>
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	4a46      	ldr	r2, [pc, #280]	; (8000dfc <HAL_GPIO_Init+0x2d4>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d00d      	beq.n	8000d04 <HAL_GPIO_Init+0x1dc>
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	4a45      	ldr	r2, [pc, #276]	; (8000e00 <HAL_GPIO_Init+0x2d8>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d007      	beq.n	8000d00 <HAL_GPIO_Init+0x1d8>
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	4a44      	ldr	r2, [pc, #272]	; (8000e04 <HAL_GPIO_Init+0x2dc>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d101      	bne.n	8000cfc <HAL_GPIO_Init+0x1d4>
 8000cf8:	2303      	movs	r3, #3
 8000cfa:	e006      	b.n	8000d0a <HAL_GPIO_Init+0x1e2>
 8000cfc:	2307      	movs	r3, #7
 8000cfe:	e004      	b.n	8000d0a <HAL_GPIO_Init+0x1e2>
 8000d00:	2302      	movs	r3, #2
 8000d02:	e002      	b.n	8000d0a <HAL_GPIO_Init+0x1e2>
 8000d04:	2301      	movs	r3, #1
 8000d06:	e000      	b.n	8000d0a <HAL_GPIO_Init+0x1e2>
 8000d08:	2300      	movs	r3, #0
 8000d0a:	697a      	ldr	r2, [r7, #20]
 8000d0c:	f002 0203 	and.w	r2, r2, #3
 8000d10:	0092      	lsls	r2, r2, #2
 8000d12:	4093      	lsls	r3, r2
 8000d14:	693a      	ldr	r2, [r7, #16]
 8000d16:	4313      	orrs	r3, r2
 8000d18:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d1a:	4937      	ldr	r1, [pc, #220]	; (8000df8 <HAL_GPIO_Init+0x2d0>)
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	089b      	lsrs	r3, r3, #2
 8000d20:	3302      	adds	r3, #2
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d28:	4b37      	ldr	r3, [pc, #220]	; (8000e08 <HAL_GPIO_Init+0x2e0>)
 8000d2a:	689b      	ldr	r3, [r3, #8]
 8000d2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	43db      	mvns	r3, r3
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	4013      	ands	r3, r2
 8000d36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d003      	beq.n	8000d4c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000d44:	693a      	ldr	r2, [r7, #16]
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000d4c:	4a2e      	ldr	r2, [pc, #184]	; (8000e08 <HAL_GPIO_Init+0x2e0>)
 8000d4e:	693b      	ldr	r3, [r7, #16]
 8000d50:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000d52:	4b2d      	ldr	r3, [pc, #180]	; (8000e08 <HAL_GPIO_Init+0x2e0>)
 8000d54:	68db      	ldr	r3, [r3, #12]
 8000d56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	43db      	mvns	r3, r3
 8000d5c:	693a      	ldr	r2, [r7, #16]
 8000d5e:	4013      	ands	r3, r2
 8000d60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d003      	beq.n	8000d76 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	4313      	orrs	r3, r2
 8000d74:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000d76:	4a24      	ldr	r2, [pc, #144]	; (8000e08 <HAL_GPIO_Init+0x2e0>)
 8000d78:	693b      	ldr	r3, [r7, #16]
 8000d7a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000d7c:	4b22      	ldr	r3, [pc, #136]	; (8000e08 <HAL_GPIO_Init+0x2e0>)
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	43db      	mvns	r3, r3
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	4013      	ands	r3, r2
 8000d8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d003      	beq.n	8000da0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000d98:	693a      	ldr	r2, [r7, #16]
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000da0:	4a19      	ldr	r2, [pc, #100]	; (8000e08 <HAL_GPIO_Init+0x2e0>)
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000da6:	4b18      	ldr	r3, [pc, #96]	; (8000e08 <HAL_GPIO_Init+0x2e0>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	43db      	mvns	r3, r3
 8000db0:	693a      	ldr	r2, [r7, #16]
 8000db2:	4013      	ands	r3, r2
 8000db4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d003      	beq.n	8000dca <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000dca:	4a0f      	ldr	r2, [pc, #60]	; (8000e08 <HAL_GPIO_Init+0x2e0>)
 8000dcc:	693b      	ldr	r3, [r7, #16]
 8000dce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	fa22 f303 	lsr.w	r3, r2, r3
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	f47f aea9 	bne.w	8000b38 <HAL_GPIO_Init+0x10>
  }
}
 8000de6:	bf00      	nop
 8000de8:	bf00      	nop
 8000dea:	371c      	adds	r7, #28
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	40021000 	.word	0x40021000
 8000df8:	40010000 	.word	0x40010000
 8000dfc:	48000400 	.word	0x48000400
 8000e00:	48000800 	.word	0x48000800
 8000e04:	48000c00 	.word	0x48000c00
 8000e08:	40010400 	.word	0x40010400

08000e0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	460b      	mov	r3, r1
 8000e16:	807b      	strh	r3, [r7, #2]
 8000e18:	4613      	mov	r3, r2
 8000e1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e1c:	787b      	ldrb	r3, [r7, #1]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d003      	beq.n	8000e2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e22:	887a      	ldrh	r2, [r7, #2]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e28:	e002      	b.n	8000e30 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e2a:	887a      	ldrh	r2, [r7, #2]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e30:	bf00      	nop
 8000e32:	370c      	adds	r7, #12
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000e40:	4b05      	ldr	r3, [pc, #20]	; (8000e58 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a04      	ldr	r2, [pc, #16]	; (8000e58 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000e46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e4a:	6013      	str	r3, [r2, #0]
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	40007000 	.word	0x40007000

08000e5c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000e60:	4b04      	ldr	r3, [pc, #16]	; (8000e74 <HAL_PWREx_GetVoltageRange+0x18>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	40007000 	.word	0x40007000

08000e78 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e86:	d130      	bne.n	8000eea <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e88:	4b23      	ldr	r3, [pc, #140]	; (8000f18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e94:	d038      	beq.n	8000f08 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e96:	4b20      	ldr	r3, [pc, #128]	; (8000f18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e9e:	4a1e      	ldr	r2, [pc, #120]	; (8000f18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ea0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ea4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000ea6:	4b1d      	ldr	r3, [pc, #116]	; (8000f1c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	2232      	movs	r2, #50	; 0x32
 8000eac:	fb02 f303 	mul.w	r3, r2, r3
 8000eb0:	4a1b      	ldr	r2, [pc, #108]	; (8000f20 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8000eb6:	0c9b      	lsrs	r3, r3, #18
 8000eb8:	3301      	adds	r3, #1
 8000eba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ebc:	e002      	b.n	8000ec4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	3b01      	subs	r3, #1
 8000ec2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ec4:	4b14      	ldr	r3, [pc, #80]	; (8000f18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ec6:	695b      	ldr	r3, [r3, #20]
 8000ec8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ecc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ed0:	d102      	bne.n	8000ed8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d1f2      	bne.n	8000ebe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000ed8:	4b0f      	ldr	r3, [pc, #60]	; (8000f18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000eda:	695b      	ldr	r3, [r3, #20]
 8000edc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ee0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ee4:	d110      	bne.n	8000f08 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	e00f      	b.n	8000f0a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000eea:	4b0b      	ldr	r3, [pc, #44]	; (8000f18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000ef2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ef6:	d007      	beq.n	8000f08 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ef8:	4b07      	ldr	r3, [pc, #28]	; (8000f18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f00:	4a05      	ldr	r2, [pc, #20]	; (8000f18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f06:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000f08:	2300      	movs	r3, #0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3714      	adds	r7, #20
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	40007000 	.word	0x40007000
 8000f1c:	20000000 	.word	0x20000000
 8000f20:	431bde83 	.word	0x431bde83

08000f24 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b08a      	sub	sp, #40	; 0x28
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d102      	bne.n	8000f38 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	f000 bc4f 	b.w	80017d6 <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f38:	4b97      	ldr	r3, [pc, #604]	; (8001198 <HAL_RCC_OscConfig+0x274>)
 8000f3a:	689b      	ldr	r3, [r3, #8]
 8000f3c:	f003 030c 	and.w	r3, r3, #12
 8000f40:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f42:	4b95      	ldr	r3, [pc, #596]	; (8001198 <HAL_RCC_OscConfig+0x274>)
 8000f44:	68db      	ldr	r3, [r3, #12]
 8000f46:	f003 0303 	and.w	r3, r3, #3
 8000f4a:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f003 0310 	and.w	r3, r3, #16
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	f000 80e6 	beq.w	8001126 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000f5a:	6a3b      	ldr	r3, [r7, #32]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d007      	beq.n	8000f70 <HAL_RCC_OscConfig+0x4c>
 8000f60:	6a3b      	ldr	r3, [r7, #32]
 8000f62:	2b0c      	cmp	r3, #12
 8000f64:	f040 808d 	bne.w	8001082 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	2b01      	cmp	r3, #1
 8000f6c:	f040 8089 	bne.w	8001082 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f70:	4b89      	ldr	r3, [pc, #548]	; (8001198 <HAL_RCC_OscConfig+0x274>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f003 0302 	and.w	r3, r3, #2
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d006      	beq.n	8000f8a <HAL_RCC_OscConfig+0x66>
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	69db      	ldr	r3, [r3, #28]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d102      	bne.n	8000f8a <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8000f84:	2301      	movs	r3, #1
 8000f86:	f000 bc26 	b.w	80017d6 <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f8e:	4b82      	ldr	r3, [pc, #520]	; (8001198 <HAL_RCC_OscConfig+0x274>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f003 0308 	and.w	r3, r3, #8
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d004      	beq.n	8000fa4 <HAL_RCC_OscConfig+0x80>
 8000f9a:	4b7f      	ldr	r3, [pc, #508]	; (8001198 <HAL_RCC_OscConfig+0x274>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000fa2:	e005      	b.n	8000fb0 <HAL_RCC_OscConfig+0x8c>
 8000fa4:	4b7c      	ldr	r3, [pc, #496]	; (8001198 <HAL_RCC_OscConfig+0x274>)
 8000fa6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000faa:	091b      	lsrs	r3, r3, #4
 8000fac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d224      	bcs.n	8000ffe <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f000 fdd9 	bl	8001b70 <RCC_SetFlashLatencyFromMSIRange>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d002      	beq.n	8000fca <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	f000 bc06 	b.w	80017d6 <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fca:	4b73      	ldr	r3, [pc, #460]	; (8001198 <HAL_RCC_OscConfig+0x274>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a72      	ldr	r2, [pc, #456]	; (8001198 <HAL_RCC_OscConfig+0x274>)
 8000fd0:	f043 0308 	orr.w	r3, r3, #8
 8000fd4:	6013      	str	r3, [r2, #0]
 8000fd6:	4b70      	ldr	r3, [pc, #448]	; (8001198 <HAL_RCC_OscConfig+0x274>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe2:	496d      	ldr	r1, [pc, #436]	; (8001198 <HAL_RCC_OscConfig+0x274>)
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000fe8:	4b6b      	ldr	r3, [pc, #428]	; (8001198 <HAL_RCC_OscConfig+0x274>)
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6a1b      	ldr	r3, [r3, #32]
 8000ff4:	021b      	lsls	r3, r3, #8
 8000ff6:	4968      	ldr	r1, [pc, #416]	; (8001198 <HAL_RCC_OscConfig+0x274>)
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	604b      	str	r3, [r1, #4]
 8000ffc:	e025      	b.n	800104a <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ffe:	4b66      	ldr	r3, [pc, #408]	; (8001198 <HAL_RCC_OscConfig+0x274>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a65      	ldr	r2, [pc, #404]	; (8001198 <HAL_RCC_OscConfig+0x274>)
 8001004:	f043 0308 	orr.w	r3, r3, #8
 8001008:	6013      	str	r3, [r2, #0]
 800100a:	4b63      	ldr	r3, [pc, #396]	; (8001198 <HAL_RCC_OscConfig+0x274>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001016:	4960      	ldr	r1, [pc, #384]	; (8001198 <HAL_RCC_OscConfig+0x274>)
 8001018:	4313      	orrs	r3, r2
 800101a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800101c:	4b5e      	ldr	r3, [pc, #376]	; (8001198 <HAL_RCC_OscConfig+0x274>)
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6a1b      	ldr	r3, [r3, #32]
 8001028:	021b      	lsls	r3, r3, #8
 800102a:	495b      	ldr	r1, [pc, #364]	; (8001198 <HAL_RCC_OscConfig+0x274>)
 800102c:	4313      	orrs	r3, r2
 800102e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001030:	6a3b      	ldr	r3, [r7, #32]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d109      	bne.n	800104a <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800103a:	4618      	mov	r0, r3
 800103c:	f000 fd98 	bl	8001b70 <RCC_SetFlashLatencyFromMSIRange>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e3c5      	b.n	80017d6 <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800104a:	f000 fccd 	bl	80019e8 <HAL_RCC_GetSysClockFreq>
 800104e:	4602      	mov	r2, r0
 8001050:	4b51      	ldr	r3, [pc, #324]	; (8001198 <HAL_RCC_OscConfig+0x274>)
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	091b      	lsrs	r3, r3, #4
 8001056:	f003 030f 	and.w	r3, r3, #15
 800105a:	4950      	ldr	r1, [pc, #320]	; (800119c <HAL_RCC_OscConfig+0x278>)
 800105c:	5ccb      	ldrb	r3, [r1, r3]
 800105e:	f003 031f 	and.w	r3, r3, #31
 8001062:	fa22 f303 	lsr.w	r3, r2, r3
 8001066:	4a4e      	ldr	r2, [pc, #312]	; (80011a0 <HAL_RCC_OscConfig+0x27c>)
 8001068:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800106a:	4b4e      	ldr	r3, [pc, #312]	; (80011a4 <HAL_RCC_OscConfig+0x280>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff fc18 	bl	80008a4 <HAL_InitTick>
 8001074:	4603      	mov	r3, r0
 8001076:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8001078:	7dfb      	ldrb	r3, [r7, #23]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d052      	beq.n	8001124 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 800107e:	7dfb      	ldrb	r3, [r7, #23]
 8001080:	e3a9      	b.n	80017d6 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	69db      	ldr	r3, [r3, #28]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d032      	beq.n	80010f0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800108a:	4b43      	ldr	r3, [pc, #268]	; (8001198 <HAL_RCC_OscConfig+0x274>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a42      	ldr	r2, [pc, #264]	; (8001198 <HAL_RCC_OscConfig+0x274>)
 8001090:	f043 0301 	orr.w	r3, r3, #1
 8001094:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001096:	f7ff fc55 	bl	8000944 <HAL_GetTick>
 800109a:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800109c:	e008      	b.n	80010b0 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800109e:	f7ff fc51 	bl	8000944 <HAL_GetTick>
 80010a2:	4602      	mov	r2, r0
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	1ad3      	subs	r3, r2, r3
 80010a8:	2b02      	cmp	r3, #2
 80010aa:	d901      	bls.n	80010b0 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80010ac:	2303      	movs	r3, #3
 80010ae:	e392      	b.n	80017d6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80010b0:	4b39      	ldr	r3, [pc, #228]	; (8001198 <HAL_RCC_OscConfig+0x274>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f003 0302 	and.w	r3, r3, #2
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d0f0      	beq.n	800109e <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010bc:	4b36      	ldr	r3, [pc, #216]	; (8001198 <HAL_RCC_OscConfig+0x274>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a35      	ldr	r2, [pc, #212]	; (8001198 <HAL_RCC_OscConfig+0x274>)
 80010c2:	f043 0308 	orr.w	r3, r3, #8
 80010c6:	6013      	str	r3, [r2, #0]
 80010c8:	4b33      	ldr	r3, [pc, #204]	; (8001198 <HAL_RCC_OscConfig+0x274>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d4:	4930      	ldr	r1, [pc, #192]	; (8001198 <HAL_RCC_OscConfig+0x274>)
 80010d6:	4313      	orrs	r3, r2
 80010d8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010da:	4b2f      	ldr	r3, [pc, #188]	; (8001198 <HAL_RCC_OscConfig+0x274>)
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6a1b      	ldr	r3, [r3, #32]
 80010e6:	021b      	lsls	r3, r3, #8
 80010e8:	492b      	ldr	r1, [pc, #172]	; (8001198 <HAL_RCC_OscConfig+0x274>)
 80010ea:	4313      	orrs	r3, r2
 80010ec:	604b      	str	r3, [r1, #4]
 80010ee:	e01a      	b.n	8001126 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80010f0:	4b29      	ldr	r3, [pc, #164]	; (8001198 <HAL_RCC_OscConfig+0x274>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a28      	ldr	r2, [pc, #160]	; (8001198 <HAL_RCC_OscConfig+0x274>)
 80010f6:	f023 0301 	bic.w	r3, r3, #1
 80010fa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80010fc:	f7ff fc22 	bl	8000944 <HAL_GetTick>
 8001100:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001102:	e008      	b.n	8001116 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001104:	f7ff fc1e 	bl	8000944 <HAL_GetTick>
 8001108:	4602      	mov	r2, r0
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	2b02      	cmp	r3, #2
 8001110:	d901      	bls.n	8001116 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001112:	2303      	movs	r3, #3
 8001114:	e35f      	b.n	80017d6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001116:	4b20      	ldr	r3, [pc, #128]	; (8001198 <HAL_RCC_OscConfig+0x274>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f003 0302 	and.w	r3, r3, #2
 800111e:	2b00      	cmp	r3, #0
 8001120:	d1f0      	bne.n	8001104 <HAL_RCC_OscConfig+0x1e0>
 8001122:	e000      	b.n	8001126 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001124:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	2b00      	cmp	r3, #0
 8001130:	d073      	beq.n	800121a <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001132:	6a3b      	ldr	r3, [r7, #32]
 8001134:	2b08      	cmp	r3, #8
 8001136:	d005      	beq.n	8001144 <HAL_RCC_OscConfig+0x220>
 8001138:	6a3b      	ldr	r3, [r7, #32]
 800113a:	2b0c      	cmp	r3, #12
 800113c:	d10e      	bne.n	800115c <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	2b03      	cmp	r3, #3
 8001142:	d10b      	bne.n	800115c <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001144:	4b14      	ldr	r3, [pc, #80]	; (8001198 <HAL_RCC_OscConfig+0x274>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800114c:	2b00      	cmp	r3, #0
 800114e:	d063      	beq.n	8001218 <HAL_RCC_OscConfig+0x2f4>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d15f      	bne.n	8001218 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001158:	2301      	movs	r3, #1
 800115a:	e33c      	b.n	80017d6 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001164:	d106      	bne.n	8001174 <HAL_RCC_OscConfig+0x250>
 8001166:	4b0c      	ldr	r3, [pc, #48]	; (8001198 <HAL_RCC_OscConfig+0x274>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a0b      	ldr	r2, [pc, #44]	; (8001198 <HAL_RCC_OscConfig+0x274>)
 800116c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001170:	6013      	str	r3, [r2, #0]
 8001172:	e025      	b.n	80011c0 <HAL_RCC_OscConfig+0x29c>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800117c:	d114      	bne.n	80011a8 <HAL_RCC_OscConfig+0x284>
 800117e:	4b06      	ldr	r3, [pc, #24]	; (8001198 <HAL_RCC_OscConfig+0x274>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a05      	ldr	r2, [pc, #20]	; (8001198 <HAL_RCC_OscConfig+0x274>)
 8001184:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001188:	6013      	str	r3, [r2, #0]
 800118a:	4b03      	ldr	r3, [pc, #12]	; (8001198 <HAL_RCC_OscConfig+0x274>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a02      	ldr	r2, [pc, #8]	; (8001198 <HAL_RCC_OscConfig+0x274>)
 8001190:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001194:	6013      	str	r3, [r2, #0]
 8001196:	e013      	b.n	80011c0 <HAL_RCC_OscConfig+0x29c>
 8001198:	40021000 	.word	0x40021000
 800119c:	08002948 	.word	0x08002948
 80011a0:	20000000 	.word	0x20000000
 80011a4:	20000004 	.word	0x20000004
 80011a8:	4b8f      	ldr	r3, [pc, #572]	; (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a8e      	ldr	r2, [pc, #568]	; (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 80011ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011b2:	6013      	str	r3, [r2, #0]
 80011b4:	4b8c      	ldr	r3, [pc, #560]	; (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a8b      	ldr	r2, [pc, #556]	; (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 80011ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d013      	beq.n	80011f0 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011c8:	f7ff fbbc 	bl	8000944 <HAL_GetTick>
 80011cc:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011ce:	e008      	b.n	80011e2 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011d0:	f7ff fbb8 	bl	8000944 <HAL_GetTick>
 80011d4:	4602      	mov	r2, r0
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	2b64      	cmp	r3, #100	; 0x64
 80011dc:	d901      	bls.n	80011e2 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80011de:	2303      	movs	r3, #3
 80011e0:	e2f9      	b.n	80017d6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011e2:	4b81      	ldr	r3, [pc, #516]	; (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d0f0      	beq.n	80011d0 <HAL_RCC_OscConfig+0x2ac>
 80011ee:	e014      	b.n	800121a <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011f0:	f7ff fba8 	bl	8000944 <HAL_GetTick>
 80011f4:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011f6:	e008      	b.n	800120a <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011f8:	f7ff fba4 	bl	8000944 <HAL_GetTick>
 80011fc:	4602      	mov	r2, r0
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	2b64      	cmp	r3, #100	; 0x64
 8001204:	d901      	bls.n	800120a <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8001206:	2303      	movs	r3, #3
 8001208:	e2e5      	b.n	80017d6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800120a:	4b77      	ldr	r3, [pc, #476]	; (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001212:	2b00      	cmp	r3, #0
 8001214:	d1f0      	bne.n	80011f8 <HAL_RCC_OscConfig+0x2d4>
 8001216:	e000      	b.n	800121a <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001218:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 0302 	and.w	r3, r3, #2
 8001222:	2b00      	cmp	r3, #0
 8001224:	d060      	beq.n	80012e8 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001226:	6a3b      	ldr	r3, [r7, #32]
 8001228:	2b04      	cmp	r3, #4
 800122a:	d005      	beq.n	8001238 <HAL_RCC_OscConfig+0x314>
 800122c:	6a3b      	ldr	r3, [r7, #32]
 800122e:	2b0c      	cmp	r3, #12
 8001230:	d119      	bne.n	8001266 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	2b02      	cmp	r3, #2
 8001236:	d116      	bne.n	8001266 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001238:	4b6b      	ldr	r3, [pc, #428]	; (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001240:	2b00      	cmp	r3, #0
 8001242:	d005      	beq.n	8001250 <HAL_RCC_OscConfig+0x32c>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d101      	bne.n	8001250 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 800124c:	2301      	movs	r3, #1
 800124e:	e2c2      	b.n	80017d6 <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001250:	4b65      	ldr	r3, [pc, #404]	; (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	691b      	ldr	r3, [r3, #16]
 800125c:	061b      	lsls	r3, r3, #24
 800125e:	4962      	ldr	r1, [pc, #392]	; (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 8001260:	4313      	orrs	r3, r2
 8001262:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001264:	e040      	b.n	80012e8 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	68db      	ldr	r3, [r3, #12]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d023      	beq.n	80012b6 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800126e:	4b5e      	ldr	r3, [pc, #376]	; (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a5d      	ldr	r2, [pc, #372]	; (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 8001274:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001278:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800127a:	f7ff fb63 	bl	8000944 <HAL_GetTick>
 800127e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001280:	e008      	b.n	8001294 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001282:	f7ff fb5f 	bl	8000944 <HAL_GetTick>
 8001286:	4602      	mov	r2, r0
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	2b02      	cmp	r3, #2
 800128e:	d901      	bls.n	8001294 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001290:	2303      	movs	r3, #3
 8001292:	e2a0      	b.n	80017d6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001294:	4b54      	ldr	r3, [pc, #336]	; (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800129c:	2b00      	cmp	r3, #0
 800129e:	d0f0      	beq.n	8001282 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012a0:	4b51      	ldr	r3, [pc, #324]	; (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	691b      	ldr	r3, [r3, #16]
 80012ac:	061b      	lsls	r3, r3, #24
 80012ae:	494e      	ldr	r1, [pc, #312]	; (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 80012b0:	4313      	orrs	r3, r2
 80012b2:	604b      	str	r3, [r1, #4]
 80012b4:	e018      	b.n	80012e8 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012b6:	4b4c      	ldr	r3, [pc, #304]	; (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a4b      	ldr	r2, [pc, #300]	; (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 80012bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012c2:	f7ff fb3f 	bl	8000944 <HAL_GetTick>
 80012c6:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012c8:	e008      	b.n	80012dc <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012ca:	f7ff fb3b 	bl	8000944 <HAL_GetTick>
 80012ce:	4602      	mov	r2, r0
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d901      	bls.n	80012dc <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 80012d8:	2303      	movs	r3, #3
 80012da:	e27c      	b.n	80017d6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012dc:	4b42      	ldr	r3, [pc, #264]	; (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d1f0      	bne.n	80012ca <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 0308 	and.w	r3, r3, #8
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	f000 8082 	beq.w	80013fa <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	695b      	ldr	r3, [r3, #20]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d05f      	beq.n	80013be <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80012fe:	4b3a      	ldr	r3, [pc, #232]	; (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 8001300:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001304:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	699a      	ldr	r2, [r3, #24]
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	f003 0310 	and.w	r3, r3, #16
 8001310:	429a      	cmp	r2, r3
 8001312:	d037      	beq.n	8001384 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	2b00      	cmp	r3, #0
 800131c:	d006      	beq.n	800132c <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001324:	2b00      	cmp	r3, #0
 8001326:	d101      	bne.n	800132c <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8001328:	2301      	movs	r3, #1
 800132a:	e254      	b.n	80017d6 <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	2b00      	cmp	r3, #0
 8001334:	d01b      	beq.n	800136e <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8001336:	4b2c      	ldr	r3, [pc, #176]	; (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 8001338:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800133c:	4a2a      	ldr	r2, [pc, #168]	; (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 800133e:	f023 0301 	bic.w	r3, r3, #1
 8001342:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001346:	f7ff fafd 	bl	8000944 <HAL_GetTick>
 800134a:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800134c:	e008      	b.n	8001360 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800134e:	f7ff faf9 	bl	8000944 <HAL_GetTick>
 8001352:	4602      	mov	r2, r0
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	2b11      	cmp	r3, #17
 800135a:	d901      	bls.n	8001360 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 800135c:	2303      	movs	r3, #3
 800135e:	e23a      	b.n	80017d6 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001360:	4b21      	ldr	r3, [pc, #132]	; (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 8001362:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001366:	f003 0302 	and.w	r3, r3, #2
 800136a:	2b00      	cmp	r3, #0
 800136c:	d1ef      	bne.n	800134e <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 800136e:	4b1e      	ldr	r3, [pc, #120]	; (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 8001370:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001374:	f023 0210 	bic.w	r2, r3, #16
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	491a      	ldr	r1, [pc, #104]	; (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 800137e:	4313      	orrs	r3, r2
 8001380:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001384:	4b18      	ldr	r3, [pc, #96]	; (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 8001386:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800138a:	4a17      	ldr	r2, [pc, #92]	; (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 800138c:	f043 0301 	orr.w	r3, r3, #1
 8001390:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001394:	f7ff fad6 	bl	8000944 <HAL_GetTick>
 8001398:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800139a:	e008      	b.n	80013ae <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800139c:	f7ff fad2 	bl	8000944 <HAL_GetTick>
 80013a0:	4602      	mov	r2, r0
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	2b11      	cmp	r3, #17
 80013a8:	d901      	bls.n	80013ae <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80013aa:	2303      	movs	r3, #3
 80013ac:	e213      	b.n	80017d6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013ae:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 80013b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013b4:	f003 0302 	and.w	r3, r3, #2
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d0ef      	beq.n	800139c <HAL_RCC_OscConfig+0x478>
 80013bc:	e01d      	b.n	80013fa <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013be:	4b0a      	ldr	r3, [pc, #40]	; (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 80013c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013c4:	4a08      	ldr	r2, [pc, #32]	; (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 80013c6:	f023 0301 	bic.w	r3, r3, #1
 80013ca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013ce:	f7ff fab9 	bl	8000944 <HAL_GetTick>
 80013d2:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013d4:	e00a      	b.n	80013ec <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013d6:	f7ff fab5 	bl	8000944 <HAL_GetTick>
 80013da:	4602      	mov	r2, r0
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	2b11      	cmp	r3, #17
 80013e2:	d903      	bls.n	80013ec <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 80013e4:	2303      	movs	r3, #3
 80013e6:	e1f6      	b.n	80017d6 <HAL_RCC_OscConfig+0x8b2>
 80013e8:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013ec:	4ba9      	ldr	r3, [pc, #676]	; (8001694 <HAL_RCC_OscConfig+0x770>)
 80013ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d1ed      	bne.n	80013d6 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0304 	and.w	r3, r3, #4
 8001402:	2b00      	cmp	r3, #0
 8001404:	f000 80bd 	beq.w	8001582 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001408:	2300      	movs	r3, #0
 800140a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800140e:	4ba1      	ldr	r3, [pc, #644]	; (8001694 <HAL_RCC_OscConfig+0x770>)
 8001410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d10e      	bne.n	8001438 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800141a:	4b9e      	ldr	r3, [pc, #632]	; (8001694 <HAL_RCC_OscConfig+0x770>)
 800141c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800141e:	4a9d      	ldr	r2, [pc, #628]	; (8001694 <HAL_RCC_OscConfig+0x770>)
 8001420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001424:	6593      	str	r3, [r2, #88]	; 0x58
 8001426:	4b9b      	ldr	r3, [pc, #620]	; (8001694 <HAL_RCC_OscConfig+0x770>)
 8001428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800142a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001432:	2301      	movs	r3, #1
 8001434:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001438:	4b97      	ldr	r3, [pc, #604]	; (8001698 <HAL_RCC_OscConfig+0x774>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001440:	2b00      	cmp	r3, #0
 8001442:	d118      	bne.n	8001476 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001444:	4b94      	ldr	r3, [pc, #592]	; (8001698 <HAL_RCC_OscConfig+0x774>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a93      	ldr	r2, [pc, #588]	; (8001698 <HAL_RCC_OscConfig+0x774>)
 800144a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800144e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001450:	f7ff fa78 	bl	8000944 <HAL_GetTick>
 8001454:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001456:	e008      	b.n	800146a <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001458:	f7ff fa74 	bl	8000944 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b02      	cmp	r3, #2
 8001464:	d901      	bls.n	800146a <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e1b5      	b.n	80017d6 <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800146a:	4b8b      	ldr	r3, [pc, #556]	; (8001698 <HAL_RCC_OscConfig+0x774>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001472:	2b00      	cmp	r3, #0
 8001474:	d0f0      	beq.n	8001458 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	2b00      	cmp	r3, #0
 8001480:	d02c      	beq.n	80014dc <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8001482:	4b84      	ldr	r3, [pc, #528]	; (8001694 <HAL_RCC_OscConfig+0x770>)
 8001484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001488:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001494:	497f      	ldr	r1, [pc, #508]	; (8001694 <HAL_RCC_OscConfig+0x770>)
 8001496:	4313      	orrs	r3, r2
 8001498:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	f003 0304 	and.w	r3, r3, #4
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d010      	beq.n	80014ca <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80014a8:	4b7a      	ldr	r3, [pc, #488]	; (8001694 <HAL_RCC_OscConfig+0x770>)
 80014aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014ae:	4a79      	ldr	r2, [pc, #484]	; (8001694 <HAL_RCC_OscConfig+0x770>)
 80014b0:	f043 0304 	orr.w	r3, r3, #4
 80014b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80014b8:	4b76      	ldr	r3, [pc, #472]	; (8001694 <HAL_RCC_OscConfig+0x770>)
 80014ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014be:	4a75      	ldr	r2, [pc, #468]	; (8001694 <HAL_RCC_OscConfig+0x770>)
 80014c0:	f043 0301 	orr.w	r3, r3, #1
 80014c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014c8:	e018      	b.n	80014fc <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80014ca:	4b72      	ldr	r3, [pc, #456]	; (8001694 <HAL_RCC_OscConfig+0x770>)
 80014cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014d0:	4a70      	ldr	r2, [pc, #448]	; (8001694 <HAL_RCC_OscConfig+0x770>)
 80014d2:	f043 0301 	orr.w	r3, r3, #1
 80014d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014da:	e00f      	b.n	80014fc <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80014dc:	4b6d      	ldr	r3, [pc, #436]	; (8001694 <HAL_RCC_OscConfig+0x770>)
 80014de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014e2:	4a6c      	ldr	r2, [pc, #432]	; (8001694 <HAL_RCC_OscConfig+0x770>)
 80014e4:	f023 0301 	bic.w	r3, r3, #1
 80014e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80014ec:	4b69      	ldr	r3, [pc, #420]	; (8001694 <HAL_RCC_OscConfig+0x770>)
 80014ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014f2:	4a68      	ldr	r2, [pc, #416]	; (8001694 <HAL_RCC_OscConfig+0x770>)
 80014f4:	f023 0304 	bic.w	r3, r3, #4
 80014f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d016      	beq.n	8001532 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001504:	f7ff fa1e 	bl	8000944 <HAL_GetTick>
 8001508:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800150a:	e00a      	b.n	8001522 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800150c:	f7ff fa1a 	bl	8000944 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	69bb      	ldr	r3, [r7, #24]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	f241 3288 	movw	r2, #5000	; 0x1388
 800151a:	4293      	cmp	r3, r2
 800151c:	d901      	bls.n	8001522 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e159      	b.n	80017d6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001522:	4b5c      	ldr	r3, [pc, #368]	; (8001694 <HAL_RCC_OscConfig+0x770>)
 8001524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001528:	f003 0302 	and.w	r3, r3, #2
 800152c:	2b00      	cmp	r3, #0
 800152e:	d0ed      	beq.n	800150c <HAL_RCC_OscConfig+0x5e8>
 8001530:	e01d      	b.n	800156e <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001532:	f7ff fa07 	bl	8000944 <HAL_GetTick>
 8001536:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001538:	e00a      	b.n	8001550 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800153a:	f7ff fa03 	bl	8000944 <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	f241 3288 	movw	r2, #5000	; 0x1388
 8001548:	4293      	cmp	r3, r2
 800154a:	d901      	bls.n	8001550 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 800154c:	2303      	movs	r3, #3
 800154e:	e142      	b.n	80017d6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001550:	4b50      	ldr	r3, [pc, #320]	; (8001694 <HAL_RCC_OscConfig+0x770>)
 8001552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	2b00      	cmp	r3, #0
 800155c:	d1ed      	bne.n	800153a <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 800155e:	4b4d      	ldr	r3, [pc, #308]	; (8001694 <HAL_RCC_OscConfig+0x770>)
 8001560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001564:	4a4b      	ldr	r2, [pc, #300]	; (8001694 <HAL_RCC_OscConfig+0x770>)
 8001566:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800156a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800156e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001572:	2b01      	cmp	r3, #1
 8001574:	d105      	bne.n	8001582 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001576:	4b47      	ldr	r3, [pc, #284]	; (8001694 <HAL_RCC_OscConfig+0x770>)
 8001578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800157a:	4a46      	ldr	r2, [pc, #280]	; (8001694 <HAL_RCC_OscConfig+0x770>)
 800157c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001580:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0320 	and.w	r3, r3, #32
 800158a:	2b00      	cmp	r3, #0
 800158c:	d03c      	beq.n	8001608 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001592:	2b00      	cmp	r3, #0
 8001594:	d01c      	beq.n	80015d0 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001596:	4b3f      	ldr	r3, [pc, #252]	; (8001694 <HAL_RCC_OscConfig+0x770>)
 8001598:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800159c:	4a3d      	ldr	r2, [pc, #244]	; (8001694 <HAL_RCC_OscConfig+0x770>)
 800159e:	f043 0301 	orr.w	r3, r3, #1
 80015a2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015a6:	f7ff f9cd 	bl	8000944 <HAL_GetTick>
 80015aa:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80015ac:	e008      	b.n	80015c0 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015ae:	f7ff f9c9 	bl	8000944 <HAL_GetTick>
 80015b2:	4602      	mov	r2, r0
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d901      	bls.n	80015c0 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 80015bc:	2303      	movs	r3, #3
 80015be:	e10a      	b.n	80017d6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80015c0:	4b34      	ldr	r3, [pc, #208]	; (8001694 <HAL_RCC_OscConfig+0x770>)
 80015c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d0ef      	beq.n	80015ae <HAL_RCC_OscConfig+0x68a>
 80015ce:	e01b      	b.n	8001608 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80015d0:	4b30      	ldr	r3, [pc, #192]	; (8001694 <HAL_RCC_OscConfig+0x770>)
 80015d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015d6:	4a2f      	ldr	r2, [pc, #188]	; (8001694 <HAL_RCC_OscConfig+0x770>)
 80015d8:	f023 0301 	bic.w	r3, r3, #1
 80015dc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015e0:	f7ff f9b0 	bl	8000944 <HAL_GetTick>
 80015e4:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80015e6:	e008      	b.n	80015fa <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015e8:	f7ff f9ac 	bl	8000944 <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e0ed      	b.n	80017d6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80015fa:	4b26      	ldr	r3, [pc, #152]	; (8001694 <HAL_RCC_OscConfig+0x770>)
 80015fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001600:	f003 0302 	and.w	r3, r3, #2
 8001604:	2b00      	cmp	r3, #0
 8001606:	d1ef      	bne.n	80015e8 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800160c:	2b00      	cmp	r3, #0
 800160e:	f000 80e1 	beq.w	80017d4 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001616:	2b02      	cmp	r3, #2
 8001618:	f040 80b5 	bne.w	8001786 <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800161c:	4b1d      	ldr	r3, [pc, #116]	; (8001694 <HAL_RCC_OscConfig+0x770>)
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	f003 0203 	and.w	r2, r3, #3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162c:	429a      	cmp	r2, r3
 800162e:	d124      	bne.n	800167a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800163a:	3b01      	subs	r3, #1
 800163c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800163e:	429a      	cmp	r2, r3
 8001640:	d11b      	bne.n	800167a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800164c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800164e:	429a      	cmp	r2, r3
 8001650:	d113      	bne.n	800167a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800165c:	085b      	lsrs	r3, r3, #1
 800165e:	3b01      	subs	r3, #1
 8001660:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001662:	429a      	cmp	r2, r3
 8001664:	d109      	bne.n	800167a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001670:	085b      	lsrs	r3, r3, #1
 8001672:	3b01      	subs	r3, #1
 8001674:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001676:	429a      	cmp	r2, r3
 8001678:	d05f      	beq.n	800173a <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800167a:	6a3b      	ldr	r3, [r7, #32]
 800167c:	2b0c      	cmp	r3, #12
 800167e:	d05a      	beq.n	8001736 <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001680:	4b04      	ldr	r3, [pc, #16]	; (8001694 <HAL_RCC_OscConfig+0x770>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a03      	ldr	r2, [pc, #12]	; (8001694 <HAL_RCC_OscConfig+0x770>)
 8001686:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800168a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800168c:	f7ff f95a 	bl	8000944 <HAL_GetTick>
 8001690:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001692:	e00c      	b.n	80016ae <HAL_RCC_OscConfig+0x78a>
 8001694:	40021000 	.word	0x40021000
 8001698:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800169c:	f7ff f952 	bl	8000944 <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e093      	b.n	80017d6 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016ae:	4b4c      	ldr	r3, [pc, #304]	; (80017e0 <HAL_RCC_OscConfig+0x8bc>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d1f0      	bne.n	800169c <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016ba:	4b49      	ldr	r3, [pc, #292]	; (80017e0 <HAL_RCC_OscConfig+0x8bc>)
 80016bc:	68da      	ldr	r2, [r3, #12]
 80016be:	4b49      	ldr	r3, [pc, #292]	; (80017e4 <HAL_RCC_OscConfig+0x8c0>)
 80016c0:	4013      	ands	r3, r2
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80016ca:	3a01      	subs	r2, #1
 80016cc:	0112      	lsls	r2, r2, #4
 80016ce:	4311      	orrs	r1, r2
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80016d4:	0212      	lsls	r2, r2, #8
 80016d6:	4311      	orrs	r1, r2
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80016dc:	0852      	lsrs	r2, r2, #1
 80016de:	3a01      	subs	r2, #1
 80016e0:	0552      	lsls	r2, r2, #21
 80016e2:	4311      	orrs	r1, r2
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80016e8:	0852      	lsrs	r2, r2, #1
 80016ea:	3a01      	subs	r2, #1
 80016ec:	0652      	lsls	r2, r2, #25
 80016ee:	430a      	orrs	r2, r1
 80016f0:	493b      	ldr	r1, [pc, #236]	; (80017e0 <HAL_RCC_OscConfig+0x8bc>)
 80016f2:	4313      	orrs	r3, r2
 80016f4:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80016f6:	4b3a      	ldr	r3, [pc, #232]	; (80017e0 <HAL_RCC_OscConfig+0x8bc>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a39      	ldr	r2, [pc, #228]	; (80017e0 <HAL_RCC_OscConfig+0x8bc>)
 80016fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001700:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001702:	4b37      	ldr	r3, [pc, #220]	; (80017e0 <HAL_RCC_OscConfig+0x8bc>)
 8001704:	68db      	ldr	r3, [r3, #12]
 8001706:	4a36      	ldr	r2, [pc, #216]	; (80017e0 <HAL_RCC_OscConfig+0x8bc>)
 8001708:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800170c:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800170e:	f7ff f919 	bl	8000944 <HAL_GetTick>
 8001712:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001714:	e008      	b.n	8001728 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001716:	f7ff f915 	bl	8000944 <HAL_GetTick>
 800171a:	4602      	mov	r2, r0
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	2b02      	cmp	r3, #2
 8001722:	d901      	bls.n	8001728 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8001724:	2303      	movs	r3, #3
 8001726:	e056      	b.n	80017d6 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001728:	4b2d      	ldr	r3, [pc, #180]	; (80017e0 <HAL_RCC_OscConfig+0x8bc>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d0f0      	beq.n	8001716 <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001734:	e04e      	b.n	80017d4 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e04d      	b.n	80017d6 <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800173a:	4b29      	ldr	r3, [pc, #164]	; (80017e0 <HAL_RCC_OscConfig+0x8bc>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d146      	bne.n	80017d4 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001746:	4b26      	ldr	r3, [pc, #152]	; (80017e0 <HAL_RCC_OscConfig+0x8bc>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a25      	ldr	r2, [pc, #148]	; (80017e0 <HAL_RCC_OscConfig+0x8bc>)
 800174c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001750:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001752:	4b23      	ldr	r3, [pc, #140]	; (80017e0 <HAL_RCC_OscConfig+0x8bc>)
 8001754:	68db      	ldr	r3, [r3, #12]
 8001756:	4a22      	ldr	r2, [pc, #136]	; (80017e0 <HAL_RCC_OscConfig+0x8bc>)
 8001758:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800175c:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800175e:	f7ff f8f1 	bl	8000944 <HAL_GetTick>
 8001762:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001764:	e008      	b.n	8001778 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001766:	f7ff f8ed 	bl	8000944 <HAL_GetTick>
 800176a:	4602      	mov	r2, r0
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	2b02      	cmp	r3, #2
 8001772:	d901      	bls.n	8001778 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8001774:	2303      	movs	r3, #3
 8001776:	e02e      	b.n	80017d6 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001778:	4b19      	ldr	r3, [pc, #100]	; (80017e0 <HAL_RCC_OscConfig+0x8bc>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d0f0      	beq.n	8001766 <HAL_RCC_OscConfig+0x842>
 8001784:	e026      	b.n	80017d4 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001786:	6a3b      	ldr	r3, [r7, #32]
 8001788:	2b0c      	cmp	r3, #12
 800178a:	d021      	beq.n	80017d0 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800178c:	4b14      	ldr	r3, [pc, #80]	; (80017e0 <HAL_RCC_OscConfig+0x8bc>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a13      	ldr	r2, [pc, #76]	; (80017e0 <HAL_RCC_OscConfig+0x8bc>)
 8001792:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001796:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001798:	f7ff f8d4 	bl	8000944 <HAL_GetTick>
 800179c:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800179e:	e008      	b.n	80017b2 <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017a0:	f7ff f8d0 	bl	8000944 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e011      	b.n	80017d6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017b2:	4b0b      	ldr	r3, [pc, #44]	; (80017e0 <HAL_RCC_OscConfig+0x8bc>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d1f0      	bne.n	80017a0 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 80017be:	4b08      	ldr	r3, [pc, #32]	; (80017e0 <HAL_RCC_OscConfig+0x8bc>)
 80017c0:	68db      	ldr	r3, [r3, #12]
 80017c2:	4a07      	ldr	r2, [pc, #28]	; (80017e0 <HAL_RCC_OscConfig+0x8bc>)
 80017c4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80017c8:	f023 0303 	bic.w	r3, r3, #3
 80017cc:	60d3      	str	r3, [r2, #12]
 80017ce:	e001      	b.n	80017d4 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e000      	b.n	80017d6 <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3728      	adds	r7, #40	; 0x28
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40021000 	.word	0x40021000
 80017e4:	f99f808c 	.word	0xf99f808c

080017e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d101      	bne.n	80017fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e0e7      	b.n	80019cc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017fc:	4b75      	ldr	r3, [pc, #468]	; (80019d4 <HAL_RCC_ClockConfig+0x1ec>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0307 	and.w	r3, r3, #7
 8001804:	683a      	ldr	r2, [r7, #0]
 8001806:	429a      	cmp	r2, r3
 8001808:	d910      	bls.n	800182c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800180a:	4b72      	ldr	r3, [pc, #456]	; (80019d4 <HAL_RCC_ClockConfig+0x1ec>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f023 0207 	bic.w	r2, r3, #7
 8001812:	4970      	ldr	r1, [pc, #448]	; (80019d4 <HAL_RCC_ClockConfig+0x1ec>)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	4313      	orrs	r3, r2
 8001818:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800181a:	4b6e      	ldr	r3, [pc, #440]	; (80019d4 <HAL_RCC_ClockConfig+0x1ec>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0307 	and.w	r3, r3, #7
 8001822:	683a      	ldr	r2, [r7, #0]
 8001824:	429a      	cmp	r2, r3
 8001826:	d001      	beq.n	800182c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e0cf      	b.n	80019cc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 0302 	and.w	r3, r3, #2
 8001834:	2b00      	cmp	r3, #0
 8001836:	d010      	beq.n	800185a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689a      	ldr	r2, [r3, #8]
 800183c:	4b66      	ldr	r3, [pc, #408]	; (80019d8 <HAL_RCC_ClockConfig+0x1f0>)
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001844:	429a      	cmp	r2, r3
 8001846:	d908      	bls.n	800185a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001848:	4b63      	ldr	r3, [pc, #396]	; (80019d8 <HAL_RCC_ClockConfig+0x1f0>)
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	4960      	ldr	r1, [pc, #384]	; (80019d8 <HAL_RCC_ClockConfig+0x1f0>)
 8001856:	4313      	orrs	r3, r2
 8001858:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	2b00      	cmp	r3, #0
 8001864:	d04c      	beq.n	8001900 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	2b03      	cmp	r3, #3
 800186c:	d107      	bne.n	800187e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800186e:	4b5a      	ldr	r3, [pc, #360]	; (80019d8 <HAL_RCC_ClockConfig+0x1f0>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d121      	bne.n	80018be <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e0a6      	b.n	80019cc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	2b02      	cmp	r3, #2
 8001884:	d107      	bne.n	8001896 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001886:	4b54      	ldr	r3, [pc, #336]	; (80019d8 <HAL_RCC_ClockConfig+0x1f0>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d115      	bne.n	80018be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e09a      	b.n	80019cc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d107      	bne.n	80018ae <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800189e:	4b4e      	ldr	r3, [pc, #312]	; (80019d8 <HAL_RCC_ClockConfig+0x1f0>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d109      	bne.n	80018be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e08e      	b.n	80019cc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018ae:	4b4a      	ldr	r3, [pc, #296]	; (80019d8 <HAL_RCC_ClockConfig+0x1f0>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d101      	bne.n	80018be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e086      	b.n	80019cc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80018be:	4b46      	ldr	r3, [pc, #280]	; (80019d8 <HAL_RCC_ClockConfig+0x1f0>)
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	f023 0203 	bic.w	r2, r3, #3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	4943      	ldr	r1, [pc, #268]	; (80019d8 <HAL_RCC_ClockConfig+0x1f0>)
 80018cc:	4313      	orrs	r3, r2
 80018ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018d0:	f7ff f838 	bl	8000944 <HAL_GetTick>
 80018d4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018d6:	e00a      	b.n	80018ee <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018d8:	f7ff f834 	bl	8000944 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e06e      	b.n	80019cc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ee:	4b3a      	ldr	r3, [pc, #232]	; (80019d8 <HAL_RCC_ClockConfig+0x1f0>)
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	f003 020c 	and.w	r2, r3, #12
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d1eb      	bne.n	80018d8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0302 	and.w	r3, r3, #2
 8001908:	2b00      	cmp	r3, #0
 800190a:	d010      	beq.n	800192e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	689a      	ldr	r2, [r3, #8]
 8001910:	4b31      	ldr	r3, [pc, #196]	; (80019d8 <HAL_RCC_ClockConfig+0x1f0>)
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001918:	429a      	cmp	r2, r3
 800191a:	d208      	bcs.n	800192e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800191c:	4b2e      	ldr	r3, [pc, #184]	; (80019d8 <HAL_RCC_ClockConfig+0x1f0>)
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	492b      	ldr	r1, [pc, #172]	; (80019d8 <HAL_RCC_ClockConfig+0x1f0>)
 800192a:	4313      	orrs	r3, r2
 800192c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800192e:	4b29      	ldr	r3, [pc, #164]	; (80019d4 <HAL_RCC_ClockConfig+0x1ec>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0307 	and.w	r3, r3, #7
 8001936:	683a      	ldr	r2, [r7, #0]
 8001938:	429a      	cmp	r2, r3
 800193a:	d210      	bcs.n	800195e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800193c:	4b25      	ldr	r3, [pc, #148]	; (80019d4 <HAL_RCC_ClockConfig+0x1ec>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f023 0207 	bic.w	r2, r3, #7
 8001944:	4923      	ldr	r1, [pc, #140]	; (80019d4 <HAL_RCC_ClockConfig+0x1ec>)
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	4313      	orrs	r3, r2
 800194a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800194c:	4b21      	ldr	r3, [pc, #132]	; (80019d4 <HAL_RCC_ClockConfig+0x1ec>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0307 	and.w	r3, r3, #7
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	429a      	cmp	r2, r3
 8001958:	d001      	beq.n	800195e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e036      	b.n	80019cc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0304 	and.w	r3, r3, #4
 8001966:	2b00      	cmp	r3, #0
 8001968:	d008      	beq.n	800197c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800196a:	4b1b      	ldr	r3, [pc, #108]	; (80019d8 <HAL_RCC_ClockConfig+0x1f0>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	68db      	ldr	r3, [r3, #12]
 8001976:	4918      	ldr	r1, [pc, #96]	; (80019d8 <HAL_RCC_ClockConfig+0x1f0>)
 8001978:	4313      	orrs	r3, r2
 800197a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0308 	and.w	r3, r3, #8
 8001984:	2b00      	cmp	r3, #0
 8001986:	d009      	beq.n	800199c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001988:	4b13      	ldr	r3, [pc, #76]	; (80019d8 <HAL_RCC_ClockConfig+0x1f0>)
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	691b      	ldr	r3, [r3, #16]
 8001994:	00db      	lsls	r3, r3, #3
 8001996:	4910      	ldr	r1, [pc, #64]	; (80019d8 <HAL_RCC_ClockConfig+0x1f0>)
 8001998:	4313      	orrs	r3, r2
 800199a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800199c:	f000 f824 	bl	80019e8 <HAL_RCC_GetSysClockFreq>
 80019a0:	4602      	mov	r2, r0
 80019a2:	4b0d      	ldr	r3, [pc, #52]	; (80019d8 <HAL_RCC_ClockConfig+0x1f0>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	091b      	lsrs	r3, r3, #4
 80019a8:	f003 030f 	and.w	r3, r3, #15
 80019ac:	490b      	ldr	r1, [pc, #44]	; (80019dc <HAL_RCC_ClockConfig+0x1f4>)
 80019ae:	5ccb      	ldrb	r3, [r1, r3]
 80019b0:	f003 031f 	and.w	r3, r3, #31
 80019b4:	fa22 f303 	lsr.w	r3, r2, r3
 80019b8:	4a09      	ldr	r2, [pc, #36]	; (80019e0 <HAL_RCC_ClockConfig+0x1f8>)
 80019ba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80019bc:	4b09      	ldr	r3, [pc, #36]	; (80019e4 <HAL_RCC_ClockConfig+0x1fc>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7fe ff6f 	bl	80008a4 <HAL_InitTick>
 80019c6:	4603      	mov	r3, r0
 80019c8:	72fb      	strb	r3, [r7, #11]

  return status;
 80019ca:	7afb      	ldrb	r3, [r7, #11]
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3710      	adds	r7, #16
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	40022000 	.word	0x40022000
 80019d8:	40021000 	.word	0x40021000
 80019dc:	08002948 	.word	0x08002948
 80019e0:	20000000 	.word	0x20000000
 80019e4:	20000004 	.word	0x20000004

080019e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b089      	sub	sp, #36	; 0x24
 80019ec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80019ee:	2300      	movs	r3, #0
 80019f0:	61fb      	str	r3, [r7, #28]
 80019f2:	2300      	movs	r3, #0
 80019f4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019f6:	4b3e      	ldr	r3, [pc, #248]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x108>)
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	f003 030c 	and.w	r3, r3, #12
 80019fe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a00:	4b3b      	ldr	r3, [pc, #236]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	f003 0303 	and.w	r3, r3, #3
 8001a08:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d005      	beq.n	8001a1c <HAL_RCC_GetSysClockFreq+0x34>
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	2b0c      	cmp	r3, #12
 8001a14:	d121      	bne.n	8001a5a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d11e      	bne.n	8001a5a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001a1c:	4b34      	ldr	r3, [pc, #208]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0308 	and.w	r3, r3, #8
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d107      	bne.n	8001a38 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001a28:	4b31      	ldr	r3, [pc, #196]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a2e:	0a1b      	lsrs	r3, r3, #8
 8001a30:	f003 030f 	and.w	r3, r3, #15
 8001a34:	61fb      	str	r3, [r7, #28]
 8001a36:	e005      	b.n	8001a44 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001a38:	4b2d      	ldr	r3, [pc, #180]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	091b      	lsrs	r3, r3, #4
 8001a3e:	f003 030f 	and.w	r3, r3, #15
 8001a42:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001a44:	4a2b      	ldr	r2, [pc, #172]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a4c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d10d      	bne.n	8001a70 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a58:	e00a      	b.n	8001a70 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	2b04      	cmp	r3, #4
 8001a5e:	d102      	bne.n	8001a66 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001a60:	4b25      	ldr	r3, [pc, #148]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001a62:	61bb      	str	r3, [r7, #24]
 8001a64:	e004      	b.n	8001a70 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	2b08      	cmp	r3, #8
 8001a6a:	d101      	bne.n	8001a70 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001a6c:	4b23      	ldr	r3, [pc, #140]	; (8001afc <HAL_RCC_GetSysClockFreq+0x114>)
 8001a6e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	2b0c      	cmp	r3, #12
 8001a74:	d134      	bne.n	8001ae0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001a76:	4b1e      	ldr	r3, [pc, #120]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	f003 0303 	and.w	r3, r3, #3
 8001a7e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d003      	beq.n	8001a8e <HAL_RCC_GetSysClockFreq+0xa6>
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	2b03      	cmp	r3, #3
 8001a8a:	d003      	beq.n	8001a94 <HAL_RCC_GetSysClockFreq+0xac>
 8001a8c:	e005      	b.n	8001a9a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001a8e:	4b1a      	ldr	r3, [pc, #104]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001a90:	617b      	str	r3, [r7, #20]
      break;
 8001a92:	e005      	b.n	8001aa0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001a94:	4b19      	ldr	r3, [pc, #100]	; (8001afc <HAL_RCC_GetSysClockFreq+0x114>)
 8001a96:	617b      	str	r3, [r7, #20]
      break;
 8001a98:	e002      	b.n	8001aa0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	617b      	str	r3, [r7, #20]
      break;
 8001a9e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001aa0:	4b13      	ldr	r3, [pc, #76]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	091b      	lsrs	r3, r3, #4
 8001aa6:	f003 0307 	and.w	r3, r3, #7
 8001aaa:	3301      	adds	r3, #1
 8001aac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001aae:	4b10      	ldr	r3, [pc, #64]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	0a1b      	lsrs	r3, r3, #8
 8001ab4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ab8:	697a      	ldr	r2, [r7, #20]
 8001aba:	fb03 f202 	mul.w	r2, r3, r2
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ac4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ac6:	4b0a      	ldr	r3, [pc, #40]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ac8:	68db      	ldr	r3, [r3, #12]
 8001aca:	0e5b      	lsrs	r3, r3, #25
 8001acc:	f003 0303 	and.w	r3, r3, #3
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001ad6:	697a      	ldr	r2, [r7, #20]
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ade:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001ae0:	69bb      	ldr	r3, [r7, #24]
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3724      	adds	r7, #36	; 0x24
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	40021000 	.word	0x40021000
 8001af4:	08002960 	.word	0x08002960
 8001af8:	00f42400 	.word	0x00f42400
 8001afc:	007a1200 	.word	0x007a1200

08001b00 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b04:	4b03      	ldr	r3, [pc, #12]	; (8001b14 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b06:	681b      	ldr	r3, [r3, #0]
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	20000000 	.word	0x20000000

08001b18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001b1c:	f7ff fff0 	bl	8001b00 <HAL_RCC_GetHCLKFreq>
 8001b20:	4602      	mov	r2, r0
 8001b22:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	0a1b      	lsrs	r3, r3, #8
 8001b28:	f003 0307 	and.w	r3, r3, #7
 8001b2c:	4904      	ldr	r1, [pc, #16]	; (8001b40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b2e:	5ccb      	ldrb	r3, [r1, r3]
 8001b30:	f003 031f 	and.w	r3, r3, #31
 8001b34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	08002958 	.word	0x08002958

08001b44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001b48:	f7ff ffda 	bl	8001b00 <HAL_RCC_GetHCLKFreq>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	0adb      	lsrs	r3, r3, #11
 8001b54:	f003 0307 	and.w	r3, r3, #7
 8001b58:	4904      	ldr	r1, [pc, #16]	; (8001b6c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001b5a:	5ccb      	ldrb	r3, [r1, r3]
 8001b5c:	f003 031f 	and.w	r3, r3, #31
 8001b60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	08002958 	.word	0x08002958

08001b70 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001b78:	2300      	movs	r3, #0
 8001b7a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001b7c:	4b2a      	ldr	r3, [pc, #168]	; (8001c28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d003      	beq.n	8001b90 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001b88:	f7ff f968 	bl	8000e5c <HAL_PWREx_GetVoltageRange>
 8001b8c:	6178      	str	r0, [r7, #20]
 8001b8e:	e014      	b.n	8001bba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b90:	4b25      	ldr	r3, [pc, #148]	; (8001c28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b94:	4a24      	ldr	r2, [pc, #144]	; (8001c28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b9a:	6593      	str	r3, [r2, #88]	; 0x58
 8001b9c:	4b22      	ldr	r3, [pc, #136]	; (8001c28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba4:	60fb      	str	r3, [r7, #12]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001ba8:	f7ff f958 	bl	8000e5c <HAL_PWREx_GetVoltageRange>
 8001bac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001bae:	4b1e      	ldr	r3, [pc, #120]	; (8001c28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb2:	4a1d      	ldr	r2, [pc, #116]	; (8001c28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bb8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bc0:	d10b      	bne.n	8001bda <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2b80      	cmp	r3, #128	; 0x80
 8001bc6:	d919      	bls.n	8001bfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2ba0      	cmp	r3, #160	; 0xa0
 8001bcc:	d902      	bls.n	8001bd4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001bce:	2302      	movs	r3, #2
 8001bd0:	613b      	str	r3, [r7, #16]
 8001bd2:	e013      	b.n	8001bfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	613b      	str	r3, [r7, #16]
 8001bd8:	e010      	b.n	8001bfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2b80      	cmp	r3, #128	; 0x80
 8001bde:	d902      	bls.n	8001be6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001be0:	2303      	movs	r3, #3
 8001be2:	613b      	str	r3, [r7, #16]
 8001be4:	e00a      	b.n	8001bfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2b80      	cmp	r3, #128	; 0x80
 8001bea:	d102      	bne.n	8001bf2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001bec:	2302      	movs	r3, #2
 8001bee:	613b      	str	r3, [r7, #16]
 8001bf0:	e004      	b.n	8001bfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2b70      	cmp	r3, #112	; 0x70
 8001bf6:	d101      	bne.n	8001bfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001bfc:	4b0b      	ldr	r3, [pc, #44]	; (8001c2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f023 0207 	bic.w	r2, r3, #7
 8001c04:	4909      	ldr	r1, [pc, #36]	; (8001c2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001c0c:	4b07      	ldr	r3, [pc, #28]	; (8001c2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0307 	and.w	r3, r3, #7
 8001c14:	693a      	ldr	r2, [r7, #16]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d001      	beq.n	8001c1e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e000      	b.n	8001c20 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001c1e:	2300      	movs	r3, #0
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3718      	adds	r7, #24
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	40022000 	.word	0x40022000

08001c30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b086      	sub	sp, #24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001c38:	2300      	movs	r3, #0
 8001c3a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	f000 809e 	beq.w	8001d8a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001c52:	4b46      	ldr	r3, [pc, #280]	; (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d101      	bne.n	8001c62 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e000      	b.n	8001c64 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8001c62:	2300      	movs	r3, #0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d00d      	beq.n	8001c84 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c68:	4b40      	ldr	r3, [pc, #256]	; (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c6c:	4a3f      	ldr	r2, [pc, #252]	; (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001c6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c72:	6593      	str	r3, [r2, #88]	; 0x58
 8001c74:	4b3d      	ldr	r3, [pc, #244]	; (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c7c:	60bb      	str	r3, [r7, #8]
 8001c7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c80:	2301      	movs	r3, #1
 8001c82:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c84:	4b3a      	ldr	r3, [pc, #232]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a39      	ldr	r2, [pc, #228]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001c8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c8e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001c90:	f7fe fe58 	bl	8000944 <HAL_GetTick>
 8001c94:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001c96:	e009      	b.n	8001cac <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c98:	f7fe fe54 	bl	8000944 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d902      	bls.n	8001cac <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	74fb      	strb	r3, [r7, #19]
        break;
 8001caa:	e005      	b.n	8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001cac:	4b30      	ldr	r3, [pc, #192]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d0ef      	beq.n	8001c98 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8001cb8:	7cfb      	ldrb	r3, [r7, #19]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d15a      	bne.n	8001d74 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001cbe:	4b2b      	ldr	r3, [pc, #172]	; (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cc8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d01e      	beq.n	8001d0e <HAL_RCCEx_PeriphCLKConfig+0xde>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd4:	697a      	ldr	r2, [r7, #20]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d019      	beq.n	8001d0e <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001cda:	4b24      	ldr	r3, [pc, #144]	; (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ce0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ce4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001ce6:	4b21      	ldr	r3, [pc, #132]	; (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cec:	4a1f      	ldr	r2, [pc, #124]	; (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001cee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cf2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001cf6:	4b1d      	ldr	r3, [pc, #116]	; (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cfc:	4a1b      	ldr	r2, [pc, #108]	; (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001cfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001d06:	4a19      	ldr	r2, [pc, #100]	; (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	f003 0301 	and.w	r3, r3, #1
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d016      	beq.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d18:	f7fe fe14 	bl	8000944 <HAL_GetTick>
 8001d1c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d1e:	e00b      	b.n	8001d38 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d20:	f7fe fe10 	bl	8000944 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d902      	bls.n	8001d38 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	74fb      	strb	r3, [r7, #19]
            break;
 8001d36:	e006      	b.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d38:	4b0c      	ldr	r3, [pc, #48]	; (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d0ec      	beq.n	8001d20 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8001d46:	7cfb      	ldrb	r3, [r7, #19]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d10b      	bne.n	8001d64 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d4c:	4b07      	ldr	r3, [pc, #28]	; (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d52:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5a:	4904      	ldr	r1, [pc, #16]	; (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001d62:	e009      	b.n	8001d78 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001d64:	7cfb      	ldrb	r3, [r7, #19]
 8001d66:	74bb      	strb	r3, [r7, #18]
 8001d68:	e006      	b.n	8001d78 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8001d6a:	bf00      	nop
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d74:	7cfb      	ldrb	r3, [r7, #19]
 8001d76:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d78:	7c7b      	ldrb	r3, [r7, #17]
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d105      	bne.n	8001d8a <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d7e:	4b6e      	ldr	r3, [pc, #440]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d82:	4a6d      	ldr	r2, [pc, #436]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001d84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d88:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d00a      	beq.n	8001dac <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d96:	4b68      	ldr	r3, [pc, #416]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d9c:	f023 0203 	bic.w	r2, r3, #3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	4964      	ldr	r1, [pc, #400]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0302 	and.w	r3, r3, #2
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d00a      	beq.n	8001dce <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001db8:	4b5f      	ldr	r3, [pc, #380]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dbe:	f023 020c 	bic.w	r2, r3, #12
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	495c      	ldr	r1, [pc, #368]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0304 	and.w	r3, r3, #4
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d00a      	beq.n	8001df0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001dda:	4b57      	ldr	r3, [pc, #348]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001de0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	4953      	ldr	r1, [pc, #332]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001dea:	4313      	orrs	r3, r2
 8001dec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0320 	and.w	r3, r3, #32
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d00a      	beq.n	8001e12 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001dfc:	4b4e      	ldr	r3, [pc, #312]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e02:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	691b      	ldr	r3, [r3, #16]
 8001e0a:	494b      	ldr	r1, [pc, #300]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d00a      	beq.n	8001e34 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001e1e:	4b46      	ldr	r3, [pc, #280]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e24:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6a1b      	ldr	r3, [r3, #32]
 8001e2c:	4942      	ldr	r1, [pc, #264]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d00a      	beq.n	8001e56 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001e40:	4b3d      	ldr	r3, [pc, #244]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e46:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4e:	493a      	ldr	r1, [pc, #232]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001e50:	4313      	orrs	r3, r2
 8001e52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d00a      	beq.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e62:	4b35      	ldr	r3, [pc, #212]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e68:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	695b      	ldr	r3, [r3, #20]
 8001e70:	4931      	ldr	r1, [pc, #196]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001e72:	4313      	orrs	r3, r2
 8001e74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d00a      	beq.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001e84:	4b2c      	ldr	r3, [pc, #176]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e8a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	699b      	ldr	r3, [r3, #24]
 8001e92:	4929      	ldr	r1, [pc, #164]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001e94:	4313      	orrs	r3, r2
 8001e96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d00a      	beq.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001ea6:	4b24      	ldr	r3, [pc, #144]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	69db      	ldr	r3, [r3, #28]
 8001eb4:	4920      	ldr	r1, [pc, #128]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d015      	beq.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001ec8:	4b1b      	ldr	r3, [pc, #108]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ece:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed6:	4918      	ldr	r1, [pc, #96]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001ee6:	d105      	bne.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001ee8:	4b13      	ldr	r3, [pc, #76]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	4a12      	ldr	r2, [pc, #72]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001eee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ef2:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d015      	beq.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001f00:	4b0d      	ldr	r3, [pc, #52]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f06:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f0e:	490a      	ldr	r1, [pc, #40]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001f10:	4313      	orrs	r3, r2
 8001f12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f1e:	d105      	bne.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f20:	4b05      	ldr	r3, [pc, #20]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	4a04      	ldr	r2, [pc, #16]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001f26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f2a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8001f2c:	7cbb      	ldrb	r3, [r7, #18]
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3718      	adds	r7, #24
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	40021000 	.word	0x40021000

08001f3c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8001f40:	4b05      	ldr	r3, [pc, #20]	; (8001f58 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a04      	ldr	r2, [pc, #16]	; (8001f58 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8001f46:	f043 0304 	orr.w	r3, r3, #4
 8001f4a:	6013      	str	r3, [r2, #0]
}
 8001f4c:	bf00      	nop
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	40021000 	.word	0x40021000

08001f5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d101      	bne.n	8001f6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e040      	b.n	8001ff0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d106      	bne.n	8001f84 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f7fe fba8 	bl	80006d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2224      	movs	r2, #36	; 0x24
 8001f88:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f022 0201 	bic.w	r2, r2, #1
 8001f98:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d002      	beq.n	8001fa8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 fa82 	bl	80024ac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f000 f825 	bl	8001ff8 <UART_SetConfig>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d101      	bne.n	8001fb8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e01b      	b.n	8001ff0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	685a      	ldr	r2, [r3, #4]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001fc6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	689a      	ldr	r2, [r3, #8]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001fd6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f042 0201 	orr.w	r2, r2, #1
 8001fe6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f000 fb01 	bl	80025f0 <UART_CheckIdleState>
 8001fee:	4603      	mov	r3, r0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3708      	adds	r7, #8
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001ff8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ffc:	b08a      	sub	sp, #40	; 0x28
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002002:	2300      	movs	r3, #0
 8002004:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	689a      	ldr	r2, [r3, #8]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	691b      	ldr	r3, [r3, #16]
 8002010:	431a      	orrs	r2, r3
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	695b      	ldr	r3, [r3, #20]
 8002016:	431a      	orrs	r2, r3
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	69db      	ldr	r3, [r3, #28]
 800201c:	4313      	orrs	r3, r2
 800201e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	4b9e      	ldr	r3, [pc, #632]	; (80022a0 <UART_SetConfig+0x2a8>)
 8002028:	4013      	ands	r3, r2
 800202a:	68fa      	ldr	r2, [r7, #12]
 800202c:	6812      	ldr	r2, [r2, #0]
 800202e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002030:	430b      	orrs	r3, r1
 8002032:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	68da      	ldr	r2, [r3, #12]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	430a      	orrs	r2, r1
 8002048:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	699b      	ldr	r3, [r3, #24]
 800204e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a93      	ldr	r2, [pc, #588]	; (80022a4 <UART_SetConfig+0x2ac>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d004      	beq.n	8002064 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6a1b      	ldr	r3, [r3, #32]
 800205e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002060:	4313      	orrs	r3, r2
 8002062:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002074:	430a      	orrs	r2, r1
 8002076:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a8a      	ldr	r2, [pc, #552]	; (80022a8 <UART_SetConfig+0x2b0>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d126      	bne.n	80020d0 <UART_SetConfig+0xd8>
 8002082:	4b8a      	ldr	r3, [pc, #552]	; (80022ac <UART_SetConfig+0x2b4>)
 8002084:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002088:	f003 0303 	and.w	r3, r3, #3
 800208c:	2b03      	cmp	r3, #3
 800208e:	d81b      	bhi.n	80020c8 <UART_SetConfig+0xd0>
 8002090:	a201      	add	r2, pc, #4	; (adr r2, 8002098 <UART_SetConfig+0xa0>)
 8002092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002096:	bf00      	nop
 8002098:	080020a9 	.word	0x080020a9
 800209c:	080020b9 	.word	0x080020b9
 80020a0:	080020b1 	.word	0x080020b1
 80020a4:	080020c1 	.word	0x080020c1
 80020a8:	2301      	movs	r3, #1
 80020aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80020ae:	e0ab      	b.n	8002208 <UART_SetConfig+0x210>
 80020b0:	2302      	movs	r3, #2
 80020b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80020b6:	e0a7      	b.n	8002208 <UART_SetConfig+0x210>
 80020b8:	2304      	movs	r3, #4
 80020ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80020be:	e0a3      	b.n	8002208 <UART_SetConfig+0x210>
 80020c0:	2308      	movs	r3, #8
 80020c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80020c6:	e09f      	b.n	8002208 <UART_SetConfig+0x210>
 80020c8:	2310      	movs	r3, #16
 80020ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80020ce:	e09b      	b.n	8002208 <UART_SetConfig+0x210>
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a76      	ldr	r2, [pc, #472]	; (80022b0 <UART_SetConfig+0x2b8>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d138      	bne.n	800214c <UART_SetConfig+0x154>
 80020da:	4b74      	ldr	r3, [pc, #464]	; (80022ac <UART_SetConfig+0x2b4>)
 80020dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020e0:	f003 030c 	and.w	r3, r3, #12
 80020e4:	2b0c      	cmp	r3, #12
 80020e6:	d82d      	bhi.n	8002144 <UART_SetConfig+0x14c>
 80020e8:	a201      	add	r2, pc, #4	; (adr r2, 80020f0 <UART_SetConfig+0xf8>)
 80020ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ee:	bf00      	nop
 80020f0:	08002125 	.word	0x08002125
 80020f4:	08002145 	.word	0x08002145
 80020f8:	08002145 	.word	0x08002145
 80020fc:	08002145 	.word	0x08002145
 8002100:	08002135 	.word	0x08002135
 8002104:	08002145 	.word	0x08002145
 8002108:	08002145 	.word	0x08002145
 800210c:	08002145 	.word	0x08002145
 8002110:	0800212d 	.word	0x0800212d
 8002114:	08002145 	.word	0x08002145
 8002118:	08002145 	.word	0x08002145
 800211c:	08002145 	.word	0x08002145
 8002120:	0800213d 	.word	0x0800213d
 8002124:	2300      	movs	r3, #0
 8002126:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800212a:	e06d      	b.n	8002208 <UART_SetConfig+0x210>
 800212c:	2302      	movs	r3, #2
 800212e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002132:	e069      	b.n	8002208 <UART_SetConfig+0x210>
 8002134:	2304      	movs	r3, #4
 8002136:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800213a:	e065      	b.n	8002208 <UART_SetConfig+0x210>
 800213c:	2308      	movs	r3, #8
 800213e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002142:	e061      	b.n	8002208 <UART_SetConfig+0x210>
 8002144:	2310      	movs	r3, #16
 8002146:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800214a:	e05d      	b.n	8002208 <UART_SetConfig+0x210>
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a58      	ldr	r2, [pc, #352]	; (80022b4 <UART_SetConfig+0x2bc>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d125      	bne.n	80021a2 <UART_SetConfig+0x1aa>
 8002156:	4b55      	ldr	r3, [pc, #340]	; (80022ac <UART_SetConfig+0x2b4>)
 8002158:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800215c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002160:	2b30      	cmp	r3, #48	; 0x30
 8002162:	d016      	beq.n	8002192 <UART_SetConfig+0x19a>
 8002164:	2b30      	cmp	r3, #48	; 0x30
 8002166:	d818      	bhi.n	800219a <UART_SetConfig+0x1a2>
 8002168:	2b20      	cmp	r3, #32
 800216a:	d00a      	beq.n	8002182 <UART_SetConfig+0x18a>
 800216c:	2b20      	cmp	r3, #32
 800216e:	d814      	bhi.n	800219a <UART_SetConfig+0x1a2>
 8002170:	2b00      	cmp	r3, #0
 8002172:	d002      	beq.n	800217a <UART_SetConfig+0x182>
 8002174:	2b10      	cmp	r3, #16
 8002176:	d008      	beq.n	800218a <UART_SetConfig+0x192>
 8002178:	e00f      	b.n	800219a <UART_SetConfig+0x1a2>
 800217a:	2300      	movs	r3, #0
 800217c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002180:	e042      	b.n	8002208 <UART_SetConfig+0x210>
 8002182:	2302      	movs	r3, #2
 8002184:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002188:	e03e      	b.n	8002208 <UART_SetConfig+0x210>
 800218a:	2304      	movs	r3, #4
 800218c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002190:	e03a      	b.n	8002208 <UART_SetConfig+0x210>
 8002192:	2308      	movs	r3, #8
 8002194:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002198:	e036      	b.n	8002208 <UART_SetConfig+0x210>
 800219a:	2310      	movs	r3, #16
 800219c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80021a0:	e032      	b.n	8002208 <UART_SetConfig+0x210>
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a3f      	ldr	r2, [pc, #252]	; (80022a4 <UART_SetConfig+0x2ac>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d12a      	bne.n	8002202 <UART_SetConfig+0x20a>
 80021ac:	4b3f      	ldr	r3, [pc, #252]	; (80022ac <UART_SetConfig+0x2b4>)
 80021ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021b2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80021b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80021ba:	d01a      	beq.n	80021f2 <UART_SetConfig+0x1fa>
 80021bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80021c0:	d81b      	bhi.n	80021fa <UART_SetConfig+0x202>
 80021c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80021c6:	d00c      	beq.n	80021e2 <UART_SetConfig+0x1ea>
 80021c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80021cc:	d815      	bhi.n	80021fa <UART_SetConfig+0x202>
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d003      	beq.n	80021da <UART_SetConfig+0x1e2>
 80021d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021d6:	d008      	beq.n	80021ea <UART_SetConfig+0x1f2>
 80021d8:	e00f      	b.n	80021fa <UART_SetConfig+0x202>
 80021da:	2300      	movs	r3, #0
 80021dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80021e0:	e012      	b.n	8002208 <UART_SetConfig+0x210>
 80021e2:	2302      	movs	r3, #2
 80021e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80021e8:	e00e      	b.n	8002208 <UART_SetConfig+0x210>
 80021ea:	2304      	movs	r3, #4
 80021ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80021f0:	e00a      	b.n	8002208 <UART_SetConfig+0x210>
 80021f2:	2308      	movs	r3, #8
 80021f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80021f8:	e006      	b.n	8002208 <UART_SetConfig+0x210>
 80021fa:	2310      	movs	r3, #16
 80021fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002200:	e002      	b.n	8002208 <UART_SetConfig+0x210>
 8002202:	2310      	movs	r3, #16
 8002204:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a25      	ldr	r2, [pc, #148]	; (80022a4 <UART_SetConfig+0x2ac>)
 800220e:	4293      	cmp	r3, r2
 8002210:	f040 808a 	bne.w	8002328 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002214:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002218:	2b08      	cmp	r3, #8
 800221a:	d824      	bhi.n	8002266 <UART_SetConfig+0x26e>
 800221c:	a201      	add	r2, pc, #4	; (adr r2, 8002224 <UART_SetConfig+0x22c>)
 800221e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002222:	bf00      	nop
 8002224:	08002249 	.word	0x08002249
 8002228:	08002267 	.word	0x08002267
 800222c:	08002251 	.word	0x08002251
 8002230:	08002267 	.word	0x08002267
 8002234:	08002257 	.word	0x08002257
 8002238:	08002267 	.word	0x08002267
 800223c:	08002267 	.word	0x08002267
 8002240:	08002267 	.word	0x08002267
 8002244:	0800225f 	.word	0x0800225f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002248:	f7ff fc66 	bl	8001b18 <HAL_RCC_GetPCLK1Freq>
 800224c:	61f8      	str	r0, [r7, #28]
        break;
 800224e:	e010      	b.n	8002272 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002250:	4b19      	ldr	r3, [pc, #100]	; (80022b8 <UART_SetConfig+0x2c0>)
 8002252:	61fb      	str	r3, [r7, #28]
        break;
 8002254:	e00d      	b.n	8002272 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002256:	f7ff fbc7 	bl	80019e8 <HAL_RCC_GetSysClockFreq>
 800225a:	61f8      	str	r0, [r7, #28]
        break;
 800225c:	e009      	b.n	8002272 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800225e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002262:	61fb      	str	r3, [r7, #28]
        break;
 8002264:	e005      	b.n	8002272 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8002266:	2300      	movs	r3, #0
 8002268:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002270:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	2b00      	cmp	r3, #0
 8002276:	f000 8109 	beq.w	800248c <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	685a      	ldr	r2, [r3, #4]
 800227e:	4613      	mov	r3, r2
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	4413      	add	r3, r2
 8002284:	69fa      	ldr	r2, [r7, #28]
 8002286:	429a      	cmp	r2, r3
 8002288:	d305      	bcc.n	8002296 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002290:	69fa      	ldr	r2, [r7, #28]
 8002292:	429a      	cmp	r2, r3
 8002294:	d912      	bls.n	80022bc <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800229c:	e0f6      	b.n	800248c <UART_SetConfig+0x494>
 800229e:	bf00      	nop
 80022a0:	efff69f3 	.word	0xefff69f3
 80022a4:	40008000 	.word	0x40008000
 80022a8:	40013800 	.word	0x40013800
 80022ac:	40021000 	.word	0x40021000
 80022b0:	40004400 	.word	0x40004400
 80022b4:	40004800 	.word	0x40004800
 80022b8:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	2200      	movs	r2, #0
 80022c0:	461c      	mov	r4, r3
 80022c2:	4615      	mov	r5, r2
 80022c4:	f04f 0200 	mov.w	r2, #0
 80022c8:	f04f 0300 	mov.w	r3, #0
 80022cc:	022b      	lsls	r3, r5, #8
 80022ce:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80022d2:	0222      	lsls	r2, r4, #8
 80022d4:	68f9      	ldr	r1, [r7, #12]
 80022d6:	6849      	ldr	r1, [r1, #4]
 80022d8:	0849      	lsrs	r1, r1, #1
 80022da:	2000      	movs	r0, #0
 80022dc:	4688      	mov	r8, r1
 80022de:	4681      	mov	r9, r0
 80022e0:	eb12 0a08 	adds.w	sl, r2, r8
 80022e4:	eb43 0b09 	adc.w	fp, r3, r9
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	603b      	str	r3, [r7, #0]
 80022f0:	607a      	str	r2, [r7, #4]
 80022f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80022f6:	4650      	mov	r0, sl
 80022f8:	4659      	mov	r1, fp
 80022fa:	f7fd ff67 	bl	80001cc <__aeabi_uldivmod>
 80022fe:	4602      	mov	r2, r0
 8002300:	460b      	mov	r3, r1
 8002302:	4613      	mov	r3, r2
 8002304:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800230c:	d308      	bcc.n	8002320 <UART_SetConfig+0x328>
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002314:	d204      	bcs.n	8002320 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	60da      	str	r2, [r3, #12]
 800231e:	e0b5      	b.n	800248c <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002326:	e0b1      	b.n	800248c <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	69db      	ldr	r3, [r3, #28]
 800232c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002330:	d15d      	bne.n	80023ee <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8002332:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002336:	2b08      	cmp	r3, #8
 8002338:	d827      	bhi.n	800238a <UART_SetConfig+0x392>
 800233a:	a201      	add	r2, pc, #4	; (adr r2, 8002340 <UART_SetConfig+0x348>)
 800233c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002340:	08002365 	.word	0x08002365
 8002344:	0800236d 	.word	0x0800236d
 8002348:	08002375 	.word	0x08002375
 800234c:	0800238b 	.word	0x0800238b
 8002350:	0800237b 	.word	0x0800237b
 8002354:	0800238b 	.word	0x0800238b
 8002358:	0800238b 	.word	0x0800238b
 800235c:	0800238b 	.word	0x0800238b
 8002360:	08002383 	.word	0x08002383
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002364:	f7ff fbd8 	bl	8001b18 <HAL_RCC_GetPCLK1Freq>
 8002368:	61f8      	str	r0, [r7, #28]
        break;
 800236a:	e014      	b.n	8002396 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800236c:	f7ff fbea 	bl	8001b44 <HAL_RCC_GetPCLK2Freq>
 8002370:	61f8      	str	r0, [r7, #28]
        break;
 8002372:	e010      	b.n	8002396 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002374:	4b4c      	ldr	r3, [pc, #304]	; (80024a8 <UART_SetConfig+0x4b0>)
 8002376:	61fb      	str	r3, [r7, #28]
        break;
 8002378:	e00d      	b.n	8002396 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800237a:	f7ff fb35 	bl	80019e8 <HAL_RCC_GetSysClockFreq>
 800237e:	61f8      	str	r0, [r7, #28]
        break;
 8002380:	e009      	b.n	8002396 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002382:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002386:	61fb      	str	r3, [r7, #28]
        break;
 8002388:	e005      	b.n	8002396 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 800238a:	2300      	movs	r3, #0
 800238c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002394:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d077      	beq.n	800248c <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	005a      	lsls	r2, r3, #1
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	085b      	lsrs	r3, r3, #1
 80023a6:	441a      	add	r2, r3
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	2b0f      	cmp	r3, #15
 80023b6:	d916      	bls.n	80023e6 <UART_SetConfig+0x3ee>
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023be:	d212      	bcs.n	80023e6 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	f023 030f 	bic.w	r3, r3, #15
 80023c8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	085b      	lsrs	r3, r3, #1
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	f003 0307 	and.w	r3, r3, #7
 80023d4:	b29a      	uxth	r2, r3
 80023d6:	8afb      	ldrh	r3, [r7, #22]
 80023d8:	4313      	orrs	r3, r2
 80023da:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	8afa      	ldrh	r2, [r7, #22]
 80023e2:	60da      	str	r2, [r3, #12]
 80023e4:	e052      	b.n	800248c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80023ec:	e04e      	b.n	800248c <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 80023ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80023f2:	2b08      	cmp	r3, #8
 80023f4:	d827      	bhi.n	8002446 <UART_SetConfig+0x44e>
 80023f6:	a201      	add	r2, pc, #4	; (adr r2, 80023fc <UART_SetConfig+0x404>)
 80023f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023fc:	08002421 	.word	0x08002421
 8002400:	08002429 	.word	0x08002429
 8002404:	08002431 	.word	0x08002431
 8002408:	08002447 	.word	0x08002447
 800240c:	08002437 	.word	0x08002437
 8002410:	08002447 	.word	0x08002447
 8002414:	08002447 	.word	0x08002447
 8002418:	08002447 	.word	0x08002447
 800241c:	0800243f 	.word	0x0800243f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002420:	f7ff fb7a 	bl	8001b18 <HAL_RCC_GetPCLK1Freq>
 8002424:	61f8      	str	r0, [r7, #28]
        break;
 8002426:	e014      	b.n	8002452 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002428:	f7ff fb8c 	bl	8001b44 <HAL_RCC_GetPCLK2Freq>
 800242c:	61f8      	str	r0, [r7, #28]
        break;
 800242e:	e010      	b.n	8002452 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002430:	4b1d      	ldr	r3, [pc, #116]	; (80024a8 <UART_SetConfig+0x4b0>)
 8002432:	61fb      	str	r3, [r7, #28]
        break;
 8002434:	e00d      	b.n	8002452 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002436:	f7ff fad7 	bl	80019e8 <HAL_RCC_GetSysClockFreq>
 800243a:	61f8      	str	r0, [r7, #28]
        break;
 800243c:	e009      	b.n	8002452 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800243e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002442:	61fb      	str	r3, [r7, #28]
        break;
 8002444:	e005      	b.n	8002452 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8002446:	2300      	movs	r3, #0
 8002448:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002450:	bf00      	nop
    }

    if (pclk != 0U)
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d019      	beq.n	800248c <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	085a      	lsrs	r2, r3, #1
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	441a      	add	r2, r3
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	fbb2 f3f3 	udiv	r3, r2, r3
 800246a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	2b0f      	cmp	r3, #15
 8002470:	d909      	bls.n	8002486 <UART_SetConfig+0x48e>
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002478:	d205      	bcs.n	8002486 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	b29a      	uxth	r2, r3
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	60da      	str	r2, [r3, #12]
 8002484:	e002      	b.n	800248c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2200      	movs	r2, #0
 8002490:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2200      	movs	r2, #0
 8002496:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002498:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800249c:	4618      	mov	r0, r3
 800249e:	3728      	adds	r7, #40	; 0x28
 80024a0:	46bd      	mov	sp, r7
 80024a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024a6:	bf00      	nop
 80024a8:	00f42400 	.word	0x00f42400

080024ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b8:	f003 0308 	and.w	r3, r3, #8
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d00a      	beq.n	80024d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	430a      	orrs	r2, r1
 80024d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d00a      	beq.n	80024f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	430a      	orrs	r2, r1
 80024f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fc:	f003 0302 	and.w	r3, r3, #2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d00a      	beq.n	800251a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	430a      	orrs	r2, r1
 8002518:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251e:	f003 0304 	and.w	r3, r3, #4
 8002522:	2b00      	cmp	r3, #0
 8002524:	d00a      	beq.n	800253c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	430a      	orrs	r2, r1
 800253a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002540:	f003 0310 	and.w	r3, r3, #16
 8002544:	2b00      	cmp	r3, #0
 8002546:	d00a      	beq.n	800255e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	430a      	orrs	r2, r1
 800255c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002562:	f003 0320 	and.w	r3, r3, #32
 8002566:	2b00      	cmp	r3, #0
 8002568:	d00a      	beq.n	8002580 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	430a      	orrs	r2, r1
 800257e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002588:	2b00      	cmp	r3, #0
 800258a:	d01a      	beq.n	80025c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	430a      	orrs	r2, r1
 80025a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025aa:	d10a      	bne.n	80025c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	430a      	orrs	r2, r1
 80025c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d00a      	beq.n	80025e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	430a      	orrs	r2, r1
 80025e2:	605a      	str	r2, [r3, #4]
  }
}
 80025e4:	bf00      	nop
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b098      	sub	sp, #96	; 0x60
 80025f4:	af02      	add	r7, sp, #8
 80025f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002600:	f7fe f9a0 	bl	8000944 <HAL_GetTick>
 8002604:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0308 	and.w	r3, r3, #8
 8002610:	2b08      	cmp	r3, #8
 8002612:	d12e      	bne.n	8002672 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002614:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002618:	9300      	str	r3, [sp, #0]
 800261a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800261c:	2200      	movs	r2, #0
 800261e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f000 f88c 	bl	8002740 <UART_WaitOnFlagUntilTimeout>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d021      	beq.n	8002672 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002636:	e853 3f00 	ldrex	r3, [r3]
 800263a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800263c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800263e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002642:	653b      	str	r3, [r7, #80]	; 0x50
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	461a      	mov	r2, r3
 800264a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800264c:	647b      	str	r3, [r7, #68]	; 0x44
 800264e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002650:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002652:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002654:	e841 2300 	strex	r3, r2, [r1]
 8002658:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800265a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800265c:	2b00      	cmp	r3, #0
 800265e:	d1e6      	bne.n	800262e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2220      	movs	r2, #32
 8002664:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e062      	b.n	8002738 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0304 	and.w	r3, r3, #4
 800267c:	2b04      	cmp	r3, #4
 800267e:	d149      	bne.n	8002714 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002680:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002684:	9300      	str	r3, [sp, #0]
 8002686:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002688:	2200      	movs	r2, #0
 800268a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f000 f856 	bl	8002740 <UART_WaitOnFlagUntilTimeout>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d03c      	beq.n	8002714 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a2:	e853 3f00 	ldrex	r3, [r3]
 80026a6:	623b      	str	r3, [r7, #32]
   return(result);
 80026a8:	6a3b      	ldr	r3, [r7, #32]
 80026aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80026ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	461a      	mov	r2, r3
 80026b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026b8:	633b      	str	r3, [r7, #48]	; 0x30
 80026ba:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80026be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026c0:	e841 2300 	strex	r3, r2, [r1]
 80026c4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80026c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d1e6      	bne.n	800269a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	3308      	adds	r3, #8
 80026d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	e853 3f00 	ldrex	r3, [r3]
 80026da:	60fb      	str	r3, [r7, #12]
   return(result);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f023 0301 	bic.w	r3, r3, #1
 80026e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	3308      	adds	r3, #8
 80026ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80026ec:	61fa      	str	r2, [r7, #28]
 80026ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026f0:	69b9      	ldr	r1, [r7, #24]
 80026f2:	69fa      	ldr	r2, [r7, #28]
 80026f4:	e841 2300 	strex	r3, r2, [r1]
 80026f8:	617b      	str	r3, [r7, #20]
   return(result);
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d1e5      	bne.n	80026cc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2220      	movs	r2, #32
 8002704:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e011      	b.n	8002738 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2220      	movs	r2, #32
 8002718:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2220      	movs	r2, #32
 800271e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8002736:	2300      	movs	r3, #0
}
 8002738:	4618      	mov	r0, r3
 800273a:	3758      	adds	r7, #88	; 0x58
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}

08002740 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	603b      	str	r3, [r7, #0]
 800274c:	4613      	mov	r3, r2
 800274e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002750:	e049      	b.n	80027e6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002758:	d045      	beq.n	80027e6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800275a:	f7fe f8f3 	bl	8000944 <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	429a      	cmp	r2, r3
 8002768:	d302      	bcc.n	8002770 <UART_WaitOnFlagUntilTimeout+0x30>
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d101      	bne.n	8002774 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e048      	b.n	8002806 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0304 	and.w	r3, r3, #4
 800277e:	2b00      	cmp	r3, #0
 8002780:	d031      	beq.n	80027e6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	69db      	ldr	r3, [r3, #28]
 8002788:	f003 0308 	and.w	r3, r3, #8
 800278c:	2b08      	cmp	r3, #8
 800278e:	d110      	bne.n	80027b2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2208      	movs	r2, #8
 8002796:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002798:	68f8      	ldr	r0, [r7, #12]
 800279a:	f000 f838 	bl	800280e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2208      	movs	r2, #8
 80027a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e029      	b.n	8002806 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	69db      	ldr	r3, [r3, #28]
 80027b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027c0:	d111      	bne.n	80027e6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80027ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80027cc:	68f8      	ldr	r0, [r7, #12]
 80027ce:	f000 f81e 	bl	800280e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2220      	movs	r2, #32
 80027d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e00f      	b.n	8002806 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	69da      	ldr	r2, [r3, #28]
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	4013      	ands	r3, r2
 80027f0:	68ba      	ldr	r2, [r7, #8]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	bf0c      	ite	eq
 80027f6:	2301      	moveq	r3, #1
 80027f8:	2300      	movne	r3, #0
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	461a      	mov	r2, r3
 80027fe:	79fb      	ldrb	r3, [r7, #7]
 8002800:	429a      	cmp	r2, r3
 8002802:	d0a6      	beq.n	8002752 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002804:	2300      	movs	r3, #0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3710      	adds	r7, #16
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800280e:	b480      	push	{r7}
 8002810:	b095      	sub	sp, #84	; 0x54
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800281c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800281e:	e853 3f00 	ldrex	r3, [r3]
 8002822:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002826:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800282a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	461a      	mov	r2, r3
 8002832:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002834:	643b      	str	r3, [r7, #64]	; 0x40
 8002836:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002838:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800283a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800283c:	e841 2300 	strex	r3, r2, [r1]
 8002840:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002844:	2b00      	cmp	r3, #0
 8002846:	d1e6      	bne.n	8002816 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	3308      	adds	r3, #8
 800284e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002850:	6a3b      	ldr	r3, [r7, #32]
 8002852:	e853 3f00 	ldrex	r3, [r3]
 8002856:	61fb      	str	r3, [r7, #28]
   return(result);
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	f023 0301 	bic.w	r3, r3, #1
 800285e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	3308      	adds	r3, #8
 8002866:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002868:	62fa      	str	r2, [r7, #44]	; 0x2c
 800286a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800286c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800286e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002870:	e841 2300 	strex	r3, r2, [r1]
 8002874:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002878:	2b00      	cmp	r3, #0
 800287a:	d1e5      	bne.n	8002848 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002880:	2b01      	cmp	r3, #1
 8002882:	d118      	bne.n	80028b6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	e853 3f00 	ldrex	r3, [r3]
 8002890:	60bb      	str	r3, [r7, #8]
   return(result);
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	f023 0310 	bic.w	r3, r3, #16
 8002898:	647b      	str	r3, [r7, #68]	; 0x44
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	461a      	mov	r2, r3
 80028a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028a2:	61bb      	str	r3, [r7, #24]
 80028a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028a6:	6979      	ldr	r1, [r7, #20]
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	e841 2300 	strex	r3, r2, [r1]
 80028ae:	613b      	str	r3, [r7, #16]
   return(result);
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d1e6      	bne.n	8002884 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2220      	movs	r2, #32
 80028ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80028ca:	bf00      	nop
 80028cc:	3754      	adds	r7, #84	; 0x54
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr

080028d6 <memset>:
 80028d6:	4402      	add	r2, r0
 80028d8:	4603      	mov	r3, r0
 80028da:	4293      	cmp	r3, r2
 80028dc:	d100      	bne.n	80028e0 <memset+0xa>
 80028de:	4770      	bx	lr
 80028e0:	f803 1b01 	strb.w	r1, [r3], #1
 80028e4:	e7f9      	b.n	80028da <memset+0x4>
	...

080028e8 <__libc_init_array>:
 80028e8:	b570      	push	{r4, r5, r6, lr}
 80028ea:	4d0d      	ldr	r5, [pc, #52]	; (8002920 <__libc_init_array+0x38>)
 80028ec:	4c0d      	ldr	r4, [pc, #52]	; (8002924 <__libc_init_array+0x3c>)
 80028ee:	1b64      	subs	r4, r4, r5
 80028f0:	10a4      	asrs	r4, r4, #2
 80028f2:	2600      	movs	r6, #0
 80028f4:	42a6      	cmp	r6, r4
 80028f6:	d109      	bne.n	800290c <__libc_init_array+0x24>
 80028f8:	4d0b      	ldr	r5, [pc, #44]	; (8002928 <__libc_init_array+0x40>)
 80028fa:	4c0c      	ldr	r4, [pc, #48]	; (800292c <__libc_init_array+0x44>)
 80028fc:	f000 f818 	bl	8002930 <_init>
 8002900:	1b64      	subs	r4, r4, r5
 8002902:	10a4      	asrs	r4, r4, #2
 8002904:	2600      	movs	r6, #0
 8002906:	42a6      	cmp	r6, r4
 8002908:	d105      	bne.n	8002916 <__libc_init_array+0x2e>
 800290a:	bd70      	pop	{r4, r5, r6, pc}
 800290c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002910:	4798      	blx	r3
 8002912:	3601      	adds	r6, #1
 8002914:	e7ee      	b.n	80028f4 <__libc_init_array+0xc>
 8002916:	f855 3b04 	ldr.w	r3, [r5], #4
 800291a:	4798      	blx	r3
 800291c:	3601      	adds	r6, #1
 800291e:	e7f2      	b.n	8002906 <__libc_init_array+0x1e>
 8002920:	08002998 	.word	0x08002998
 8002924:	08002998 	.word	0x08002998
 8002928:	08002998 	.word	0x08002998
 800292c:	0800299c 	.word	0x0800299c

08002930 <_init>:
 8002930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002932:	bf00      	nop
 8002934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002936:	bc08      	pop	{r3}
 8002938:	469e      	mov	lr, r3
 800293a:	4770      	bx	lr

0800293c <_fini>:
 800293c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800293e:	bf00      	nop
 8002940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002942:	bc08      	pop	{r3}
 8002944:	469e      	mov	lr, r3
 8002946:	4770      	bx	lr
