
ARES-STM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf74  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000748  0800d108  0800d108  0001d108  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d850  0800d850  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d850  0800d850  0001d850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d858  0800d858  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d858  0800d858  0001d858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d85c  0800d85c  0001d85c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800d860  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000253c  200001e8  0800da48  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002724  0800da48  00022724  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021d37  00000000  00000000  0002025b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004725  00000000  00000000  00041f92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c50  00000000  00000000  000466b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001602  00000000  00000000  00048308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e00f  00000000  00000000  0004990a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021279  00000000  00000000  00067919  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b9bc7  00000000  00000000  00088b92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008964  00000000  00000000  0014275c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0014b0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d0ec 	.word	0x0800d0ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800d0ec 	.word	0x0800d0ec

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <sendMessage>:
#include <string.h>

extern UART_HandleTypeDef huart2;


void sendMessage(SensorType sensorType, uint32_t timestamp, uint16_t sensorData) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	6039      	str	r1, [r7, #0]
 8000f4e:	71fb      	strb	r3, [r7, #7]
 8000f50:	4613      	mov	r3, r2
 8000f52:	80bb      	strh	r3, [r7, #4]
    CustomMessage message;
    message.startDelimiter = START_DELIMITER;
 8000f54:	235b      	movs	r3, #91	; 0x5b
 8000f56:	723b      	strb	r3, [r7, #8]
    message.sensorType = sensorType;
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	727b      	strb	r3, [r7, #9]
    message.timestamp = timestamp;
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	f8c7 300a 	str.w	r3, [r7, #10]
    message.sensorData = sensorData;
 8000f62:	88bb      	ldrh	r3, [r7, #4]
 8000f64:	81fb      	strh	r3, [r7, #14]
    message.checksum = START_DELIMITER + sensorType + (timestamp & 0xFF) + ((timestamp >> 8) & 0xFF) + ((timestamp >> 16) & 0xFF) + ((timestamp >> 24) & 0xFF) + (sensorData & 0xFF) + ((sensorData >> 8) & 0xFF);
 8000f66:	79fa      	ldrb	r2, [r7, #7]
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	441a      	add	r2, r3
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	0a1b      	lsrs	r3, r3, #8
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	441a      	add	r2, r3
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	0c1b      	lsrs	r3, r3, #16
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	441a      	add	r2, r3
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	0e1b      	lsrs	r3, r3, #24
 8000f82:	441a      	add	r2, r3
 8000f84:	88bb      	ldrh	r3, [r7, #4]
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	441a      	add	r2, r3
 8000f8a:	88bb      	ldrh	r3, [r7, #4]
 8000f8c:	0a1b      	lsrs	r3, r3, #8
 8000f8e:	b29b      	uxth	r3, r3
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	4413      	add	r3, r2
 8000f94:	335b      	adds	r3, #91	; 0x5b
 8000f96:	613b      	str	r3, [r7, #16]
    message.endDelimiter = END_DELIMITER;
 8000f98:	235d      	movs	r3, #93	; 0x5d
 8000f9a:	753b      	strb	r3, [r7, #20]
    HAL_UART_Transmit(&huart2, (uint8_t*)&message, CUSTOM_MESSAGE_SIZE, HAL_MAX_DELAY);
 8000f9c:	f107 0108 	add.w	r1, r7, #8
 8000fa0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fa4:	220a      	movs	r2, #10
 8000fa6:	4803      	ldr	r0, [pc, #12]	; (8000fb4 <sendMessage+0x70>)
 8000fa8:	f004 f926 	bl	80051f8 <HAL_UART_Transmit>
}
 8000fac:	bf00      	nop
 8000fae:	3718      	adds	r7, #24
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	200002e0 	.word	0x200002e0

08000fb8 <sendLightSensorData>:

 void sendLightSensorData(uint16_t sensorData) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	80fb      	strh	r3, [r7, #6]
 	uint32_t curTime;
 	curTime = HAL_GetTick();
 8000fc2:	f001 fa93 	bl	80024ec <HAL_GetTick>
 8000fc6:	60f8      	str	r0, [r7, #12]
 	sendMessage(0x02, curTime, sensorData);
 8000fc8:	88fb      	ldrh	r3, [r7, #6]
 8000fca:	461a      	mov	r2, r3
 8000fcc:	68f9      	ldr	r1, [r7, #12]
 8000fce:	2002      	movs	r0, #2
 8000fd0:	f7ff ffb8 	bl	8000f44 <sendMessage>
 }
 8000fd4:	bf00      	nop
 8000fd6:	3710      	adds	r7, #16
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <LTR329_Init>:
#include "stm32l4xx_hal.h"
#include <stdint.h>

extern I2C_HandleTypeDef hi2c1;  // Assuming you are using hi2c1

void LTR329_Init() {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af04      	add	r7, sp, #16
    uint8_t data;

    // Activate the sensor
    data = LTR329_ACTIVE_MODE;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, LTR329_I2C_ADDRESS, LTR329_ALS_CONTR, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 8000fe6:	2364      	movs	r3, #100	; 0x64
 8000fe8:	9302      	str	r3, [sp, #8]
 8000fea:	2301      	movs	r3, #1
 8000fec:	9301      	str	r3, [sp, #4]
 8000fee:	1dfb      	adds	r3, r7, #7
 8000ff0:	9300      	str	r3, [sp, #0]
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	2280      	movs	r2, #128	; 0x80
 8000ff6:	2152      	movs	r1, #82	; 0x52
 8000ff8:	480a      	ldr	r0, [pc, #40]	; (8001024 <LTR329_Init+0x48>)
 8000ffa:	f002 f80d 	bl	8003018 <HAL_I2C_Mem_Write>

    // Set measurement rate
    data = LTR329_MEAS_RATE;
 8000ffe:	2303      	movs	r3, #3
 8001000:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, LTR329_I2C_ADDRESS, LTR329_ALS_MEAS_RATE, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 8001002:	2364      	movs	r3, #100	; 0x64
 8001004:	9302      	str	r3, [sp, #8]
 8001006:	2301      	movs	r3, #1
 8001008:	9301      	str	r3, [sp, #4]
 800100a:	1dfb      	adds	r3, r7, #7
 800100c:	9300      	str	r3, [sp, #0]
 800100e:	2301      	movs	r3, #1
 8001010:	2285      	movs	r2, #133	; 0x85
 8001012:	2152      	movs	r1, #82	; 0x52
 8001014:	4803      	ldr	r0, [pc, #12]	; (8001024 <LTR329_Init+0x48>)
 8001016:	f001 ffff 	bl	8003018 <HAL_I2C_Mem_Write>
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20000204 	.word	0x20000204

08001028 <LTR329_Read_Light>:

void LTR329_Read_Light(uint16_t *ch0, uint16_t *ch1) {
 8001028:	b580      	push	{r7, lr}
 800102a:	b088      	sub	sp, #32
 800102c:	af04      	add	r7, sp, #16
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
    uint8_t data[4];

    // Read 4 bytes of data starting from LTR329_ALS_DATA_CH1_0
    HAL_I2C_Mem_Read(&hi2c1, LTR329_I2C_ADDRESS, LTR329_ALS_DATA_CH1_0, I2C_MEMADD_SIZE_8BIT, data, 4, 100);
 8001032:	2364      	movs	r3, #100	; 0x64
 8001034:	9302      	str	r3, [sp, #8]
 8001036:	2304      	movs	r3, #4
 8001038:	9301      	str	r3, [sp, #4]
 800103a:	f107 030c 	add.w	r3, r7, #12
 800103e:	9300      	str	r3, [sp, #0]
 8001040:	2301      	movs	r3, #1
 8001042:	2288      	movs	r2, #136	; 0x88
 8001044:	2152      	movs	r1, #82	; 0x52
 8001046:	480d      	ldr	r0, [pc, #52]	; (800107c <LTR329_Read_Light+0x54>)
 8001048:	f002 f8fa 	bl	8003240 <HAL_I2C_Mem_Read>

    // Combine bytes to get the light data for each channel
    *ch1 = (uint16_t)(data[1] << 8) | data[0];
 800104c:	7b7b      	ldrb	r3, [r7, #13]
 800104e:	b29b      	uxth	r3, r3
 8001050:	021b      	lsls	r3, r3, #8
 8001052:	b29a      	uxth	r2, r3
 8001054:	7b3b      	ldrb	r3, [r7, #12]
 8001056:	b29b      	uxth	r3, r3
 8001058:	4313      	orrs	r3, r2
 800105a:	b29a      	uxth	r2, r3
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	801a      	strh	r2, [r3, #0]
    *ch0 = (uint16_t)(data[3] << 8) | data[2];
 8001060:	7bfb      	ldrb	r3, [r7, #15]
 8001062:	b29b      	uxth	r3, r3
 8001064:	021b      	lsls	r3, r3, #8
 8001066:	b29a      	uxth	r2, r3
 8001068:	7bbb      	ldrb	r3, [r7, #14]
 800106a:	b29b      	uxth	r3, r3
 800106c:	4313      	orrs	r3, r2
 800106e:	b29a      	uxth	r2, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	801a      	strh	r2, [r3, #0]
}
 8001074:	bf00      	nop
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	20000204 	.word	0x20000204

08001080 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE {
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 8001088:	1d39      	adds	r1, r7, #4
 800108a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800108e:	2201      	movs	r2, #1
 8001090:	4803      	ldr	r0, [pc, #12]	; (80010a0 <__io_putchar+0x20>)
 8001092:	f004 f8b1 	bl	80051f8 <HAL_UART_Transmit>
	return ch;
 8001096:	687b      	ldr	r3, [r7, #4]
}
 8001098:	4618      	mov	r0, r3
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	200002e0 	.word	0x200002e0
 80010a4:	00000000 	.word	0x00000000

080010a8 <calculatePath>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t calculatePath(navigationInstruction* instructions){
 80010a8:	b5b0      	push	{r4, r5, r7, lr}
 80010aa:	b088      	sub	sp, #32
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
    uint8_t instructionCount = 0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	77fb      	strb	r3, [r7, #31]
    float deltaX = targetX - curX;
 80010b4:	4b86      	ldr	r3, [pc, #536]	; (80012d0 <calculatePath+0x228>)
 80010b6:	ed93 7a00 	vldr	s14, [r3]
 80010ba:	4b86      	ldr	r3, [pc, #536]	; (80012d4 <calculatePath+0x22c>)
 80010bc:	edd3 7a00 	vldr	s15, [r3]
 80010c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010c4:	edc7 7a05 	vstr	s15, [r7, #20]
    float deltaY = targetY - curY;
 80010c8:	4b83      	ldr	r3, [pc, #524]	; (80012d8 <calculatePath+0x230>)
 80010ca:	ed93 7a00 	vldr	s14, [r3]
 80010ce:	4b83      	ldr	r3, [pc, #524]	; (80012dc <calculatePath+0x234>)
 80010d0:	edd3 7a00 	vldr	s15, [r3]
 80010d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010d8:	edc7 7a04 	vstr	s15, [r7, #16]

    // Calculate the angle to the target point
    float targetAngle = atan2(deltaY, deltaX) * (180.0 / M_PI);
 80010dc:	6938      	ldr	r0, [r7, #16]
 80010de:	f7ff fa33 	bl	8000548 <__aeabi_f2d>
 80010e2:	4604      	mov	r4, r0
 80010e4:	460d      	mov	r5, r1
 80010e6:	6978      	ldr	r0, [r7, #20]
 80010e8:	f7ff fa2e 	bl	8000548 <__aeabi_f2d>
 80010ec:	4602      	mov	r2, r0
 80010ee:	460b      	mov	r3, r1
 80010f0:	ec43 2b11 	vmov	d1, r2, r3
 80010f4:	ec45 4b10 	vmov	d0, r4, r5
 80010f8:	f00b fb40 	bl	800c77c <atan2>
 80010fc:	ec51 0b10 	vmov	r0, r1, d0
 8001100:	a36f      	add	r3, pc, #444	; (adr r3, 80012c0 <calculatePath+0x218>)
 8001102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001106:	f7ff fa77 	bl	80005f8 <__aeabi_dmul>
 800110a:	4602      	mov	r2, r0
 800110c:	460b      	mov	r3, r1
 800110e:	4610      	mov	r0, r2
 8001110:	4619      	mov	r1, r3
 8001112:	f7ff fd49 	bl	8000ba8 <__aeabi_d2f>
 8001116:	4603      	mov	r3, r0
 8001118:	60fb      	str	r3, [r7, #12]
    targetAngle = fmod(targetAngle + 360.0, 360.0); // Ensure the angle is between 0 and 360
 800111a:	68f8      	ldr	r0, [r7, #12]
 800111c:	f7ff fa14 	bl	8000548 <__aeabi_f2d>
 8001120:	f04f 0200 	mov.w	r2, #0
 8001124:	4b6e      	ldr	r3, [pc, #440]	; (80012e0 <calculatePath+0x238>)
 8001126:	f7ff f8b1 	bl	800028c <__adddf3>
 800112a:	4602      	mov	r2, r0
 800112c:	460b      	mov	r3, r1
 800112e:	ec43 2b17 	vmov	d7, r2, r3
 8001132:	ed9f 1b65 	vldr	d1, [pc, #404]	; 80012c8 <calculatePath+0x220>
 8001136:	eeb0 0a47 	vmov.f32	s0, s14
 800113a:	eef0 0a67 	vmov.f32	s1, s15
 800113e:	f00b fb1f 	bl	800c780 <fmod>
 8001142:	ec53 2b10 	vmov	r2, r3, d0
 8001146:	4610      	mov	r0, r2
 8001148:	4619      	mov	r1, r3
 800114a:	f7ff fd2d 	bl	8000ba8 <__aeabi_d2f>
 800114e:	4603      	mov	r3, r0
 8001150:	60fb      	str	r3, [r7, #12]

    // Calculate the shortest turn to the target angle
    float turnAngle = targetAngle - curAngle;
 8001152:	4b64      	ldr	r3, [pc, #400]	; (80012e4 <calculatePath+0x23c>)
 8001154:	edd3 7a00 	vldr	s15, [r3]
 8001158:	ed97 7a03 	vldr	s14, [r7, #12]
 800115c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001160:	edc7 7a06 	vstr	s15, [r7, #24]
    if (turnAngle < -180.0) turnAngle += 360.0;
 8001164:	edd7 7a06 	vldr	s15, [r7, #24]
 8001168:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 80012e8 <calculatePath+0x240>
 800116c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001174:	d507      	bpl.n	8001186 <calculatePath+0xde>
 8001176:	edd7 7a06 	vldr	s15, [r7, #24]
 800117a:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 80012ec <calculatePath+0x244>
 800117e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001182:	edc7 7a06 	vstr	s15, [r7, #24]
    if (turnAngle > 180.0) turnAngle -= 360.0;
 8001186:	edd7 7a06 	vldr	s15, [r7, #24]
 800118a:	ed9f 7a59 	vldr	s14, [pc, #356]	; 80012f0 <calculatePath+0x248>
 800118e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001196:	dd07      	ble.n	80011a8 <calculatePath+0x100>
 8001198:	edd7 7a06 	vldr	s15, [r7, #24]
 800119c:	ed9f 7a53 	vldr	s14, [pc, #332]	; 80012ec <calculatePath+0x244>
 80011a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80011a4:	edc7 7a06 	vstr	s15, [r7, #24]

    // Turn to face the target point
    if (turnAngle != 0.0) {
 80011a8:	edd7 7a06 	vldr	s15, [r7, #24]
 80011ac:	eef5 7a40 	vcmp.f32	s15, #0.0
 80011b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011b4:	d025      	beq.n	8001202 <calculatePath+0x15a>
        instructions[instructionCount].instructionType = turnAngle > 0.0 ? CLOCKWISE : COUNTERCLOCKWISE;
 80011b6:	edd7 7a06 	vldr	s15, [r7, #24]
 80011ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011c2:	dd01      	ble.n	80011c8 <calculatePath+0x120>
 80011c4:	2104      	movs	r1, #4
 80011c6:	e000      	b.n	80011ca <calculatePath+0x122>
 80011c8:	2105      	movs	r1, #5
 80011ca:	7ffa      	ldrb	r2, [r7, #31]
 80011cc:	4613      	mov	r3, r2
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	4413      	add	r3, r2
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	4413      	add	r3, r2
 80011d6:	460a      	mov	r2, r1
 80011d8:	701a      	strb	r2, [r3, #0]
        instructions[instructionCount].instructionValue = fabs(turnAngle);
 80011da:	7ffa      	ldrb	r2, [r7, #31]
 80011dc:	4613      	mov	r3, r2
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	4413      	add	r3, r2
 80011e2:	687a      	ldr	r2, [r7, #4]
 80011e4:	4413      	add	r3, r2
 80011e6:	edd7 7a06 	vldr	s15, [r7, #24]
 80011ea:	eef0 7ae7 	vabs.f32	s15, s15
 80011ee:	3301      	adds	r3, #1
 80011f0:	ee17 2a90 	vmov	r2, s15
 80011f4:	601a      	str	r2, [r3, #0]
        instructionCount++;
 80011f6:	7ffb      	ldrb	r3, [r7, #31]
 80011f8:	3301      	adds	r3, #1
 80011fa:	77fb      	strb	r3, [r7, #31]
        plannedAngle = targetAngle;
 80011fc:	4a3d      	ldr	r2, [pc, #244]	; (80012f4 <calculatePath+0x24c>)
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	6013      	str	r3, [r2, #0]
    }

    // Move to the target point
    float distance = sqrt(deltaX * deltaX + deltaY * deltaY);
 8001202:	edd7 7a05 	vldr	s15, [r7, #20]
 8001206:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800120a:	edd7 7a04 	vldr	s15, [r7, #16]
 800120e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001212:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001216:	ee17 0a90 	vmov	r0, s15
 800121a:	f7ff f995 	bl	8000548 <__aeabi_f2d>
 800121e:	4602      	mov	r2, r0
 8001220:	460b      	mov	r3, r1
 8001222:	ec43 2b10 	vmov	d0, r2, r3
 8001226:	f00b fba1 	bl	800c96c <sqrt>
 800122a:	ec53 2b10 	vmov	r2, r3, d0
 800122e:	4610      	mov	r0, r2
 8001230:	4619      	mov	r1, r3
 8001232:	f7ff fcb9 	bl	8000ba8 <__aeabi_d2f>
 8001236:	4603      	mov	r3, r0
 8001238:	60bb      	str	r3, [r7, #8]
    instructions[instructionCount].instructionType = turnAngle >= -90.0 && turnAngle <= 90.0 ? FORWARD : BACKWARD;
 800123a:	edd7 7a06 	vldr	s15, [r7, #24]
 800123e:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80012f8 <calculatePath+0x250>
 8001242:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800124a:	db0a      	blt.n	8001262 <calculatePath+0x1ba>
 800124c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001250:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80012fc <calculatePath+0x254>
 8001254:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800125c:	d801      	bhi.n	8001262 <calculatePath+0x1ba>
 800125e:	2102      	movs	r1, #2
 8001260:	e000      	b.n	8001264 <calculatePath+0x1bc>
 8001262:	2103      	movs	r1, #3
 8001264:	7ffa      	ldrb	r2, [r7, #31]
 8001266:	4613      	mov	r3, r2
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	4413      	add	r3, r2
 800126c:	687a      	ldr	r2, [r7, #4]
 800126e:	4413      	add	r3, r2
 8001270:	460a      	mov	r2, r1
 8001272:	701a      	strb	r2, [r3, #0]
    instructions[instructionCount].instructionValue = distance;
 8001274:	7ffa      	ldrb	r2, [r7, #31]
 8001276:	4613      	mov	r3, r2
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	4413      	add	r3, r2
 800127c:	687a      	ldr	r2, [r7, #4]
 800127e:	4413      	add	r3, r2
 8001280:	3301      	adds	r3, #1
 8001282:	68ba      	ldr	r2, [r7, #8]
 8001284:	601a      	str	r2, [r3, #0]
    instructionCount++;
 8001286:	7ffb      	ldrb	r3, [r7, #31]
 8001288:	3301      	adds	r3, #1
 800128a:	77fb      	strb	r3, [r7, #31]

    // Add a stop instruction
    instructions[instructionCount].instructionType = STOP;
 800128c:	7ffa      	ldrb	r2, [r7, #31]
 800128e:	4613      	mov	r3, r2
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	4413      	add	r3, r2
 8001294:	687a      	ldr	r2, [r7, #4]
 8001296:	4413      	add	r3, r2
 8001298:	2206      	movs	r2, #6
 800129a:	701a      	strb	r2, [r3, #0]
    instructions[instructionCount].instructionValue = 0.0;
 800129c:	7ffa      	ldrb	r2, [r7, #31]
 800129e:	4613      	mov	r3, r2
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	4413      	add	r3, r2
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	4413      	add	r3, r2
 80012a8:	3301      	adds	r3, #1
 80012aa:	f04f 0200 	mov.w	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
    instructionCount++;
 80012b0:	7ffb      	ldrb	r3, [r7, #31]
 80012b2:	3301      	adds	r3, #1
 80012b4:	77fb      	strb	r3, [r7, #31]

    return instructionCount;
 80012b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3720      	adds	r7, #32
 80012bc:	46bd      	mov	sp, r7
 80012be:	bdb0      	pop	{r4, r5, r7, pc}
 80012c0:	1a63c1f8 	.word	0x1a63c1f8
 80012c4:	404ca5dc 	.word	0x404ca5dc
 80012c8:	00000000 	.word	0x00000000
 80012cc:	40768000 	.word	0x40768000
 80012d0:	200003f8 	.word	0x200003f8
 80012d4:	200003ec 	.word	0x200003ec
 80012d8:	200003fc 	.word	0x200003fc
 80012dc:	200003f0 	.word	0x200003f0
 80012e0:	40768000 	.word	0x40768000
 80012e4:	200003f4 	.word	0x200003f4
 80012e8:	c3340000 	.word	0xc3340000
 80012ec:	43b40000 	.word	0x43b40000
 80012f0:	43340000 	.word	0x43340000
 80012f4:	20000400 	.word	0x20000400
 80012f8:	c2b40000 	.word	0xc2b40000
 80012fc:	42b40000 	.word	0x42b40000

08001300 <transmitInstructions>:

void transmitInstructions(navigationInstruction* instructions, uint8_t instructionCnt){
 8001300:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001304:	b087      	sub	sp, #28
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
 800130a:	460b      	mov	r3, r1
 800130c:	70fb      	strb	r3, [r7, #3]
 800130e:	466b      	mov	r3, sp
 8001310:	461e      	mov	r6, r3
      Transmissions consists of a START_DELIMITER, Instruction Count, payload and END_DELIMITER
      Instruction Count is a 1 byte value
      Payload consists of the instructions which are 5 bytes each
      The data is transmitted on USART2 using HAL_UART_Transmit
    */
    uint8_t transmission[instructionCnt*sizeof(navigationInstruction) + 3];
 8001312:	78fa      	ldrb	r2, [r7, #3]
 8001314:	4613      	mov	r3, r2
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	4413      	add	r3, r2
 800131a:	1cd9      	adds	r1, r3, #3
 800131c:	460b      	mov	r3, r1
 800131e:	3b01      	subs	r3, #1
 8001320:	613b      	str	r3, [r7, #16]
 8001322:	2300      	movs	r3, #0
 8001324:	4688      	mov	r8, r1
 8001326:	4699      	mov	r9, r3
 8001328:	f04f 0200 	mov.w	r2, #0
 800132c:	f04f 0300 	mov.w	r3, #0
 8001330:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001334:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001338:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800133c:	2300      	movs	r3, #0
 800133e:	460c      	mov	r4, r1
 8001340:	461d      	mov	r5, r3
 8001342:	f04f 0200 	mov.w	r2, #0
 8001346:	f04f 0300 	mov.w	r3, #0
 800134a:	00eb      	lsls	r3, r5, #3
 800134c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001350:	00e2      	lsls	r2, r4, #3
 8001352:	1dcb      	adds	r3, r1, #7
 8001354:	08db      	lsrs	r3, r3, #3
 8001356:	00db      	lsls	r3, r3, #3
 8001358:	ebad 0d03 	sub.w	sp, sp, r3
 800135c:	466b      	mov	r3, sp
 800135e:	3300      	adds	r3, #0
 8001360:	60fb      	str	r3, [r7, #12]

    transmission[0] = START_DELIMITER;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	225b      	movs	r2, #91	; 0x5b
 8001366:	701a      	strb	r2, [r3, #0]
    transmission[1] = instructionCnt;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	78fa      	ldrb	r2, [r7, #3]
 800136c:	705a      	strb	r2, [r3, #1]
    for (int i = 0; i < instructionCnt; i++) {
 800136e:	2300      	movs	r3, #0
 8001370:	617b      	str	r3, [r7, #20]
 8001372:	e020      	b.n	80013b6 <transmitInstructions+0xb6>
        transmission[2 + i*sizeof(navigationInstruction)] = instructions[i].instructionType;
 8001374:	697a      	ldr	r2, [r7, #20]
 8001376:	4613      	mov	r3, r2
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	4413      	add	r3, r2
 800137c:	687a      	ldr	r2, [r7, #4]
 800137e:	18d1      	adds	r1, r2, r3
 8001380:	697a      	ldr	r2, [r7, #20]
 8001382:	4613      	mov	r3, r2
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	4413      	add	r3, r2
 8001388:	3302      	adds	r3, #2
 800138a:	7809      	ldrb	r1, [r1, #0]
 800138c:	68fa      	ldr	r2, [r7, #12]
 800138e:	54d1      	strb	r1, [r2, r3]
        memcpy(&transmission[3 + i*sizeof(navigationInstruction)], &instructions[i].instructionValue, 4);
 8001390:	697a      	ldr	r2, [r7, #20]
 8001392:	4613      	mov	r3, r2
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	4413      	add	r3, r2
 8001398:	3303      	adds	r3, #3
 800139a:	68fa      	ldr	r2, [r7, #12]
 800139c:	18d1      	adds	r1, r2, r3
 800139e:	697a      	ldr	r2, [r7, #20]
 80013a0:	4613      	mov	r3, r2
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	4413      	add	r3, r2
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	4413      	add	r3, r2
 80013aa:	3301      	adds	r3, #1
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	600b      	str	r3, [r1, #0]
    for (int i = 0; i < instructionCnt; i++) {
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	3301      	adds	r3, #1
 80013b4:	617b      	str	r3, [r7, #20]
 80013b6:	78fb      	ldrb	r3, [r7, #3]
 80013b8:	697a      	ldr	r2, [r7, #20]
 80013ba:	429a      	cmp	r2, r3
 80013bc:	dbda      	blt.n	8001374 <transmitInstructions+0x74>
    }
    transmission[instructionCnt*sizeof(navigationInstruction) + 2] = END_DELIMITER;
 80013be:	78fa      	ldrb	r2, [r7, #3]
 80013c0:	4613      	mov	r3, r2
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	4413      	add	r3, r2
 80013c6:	3302      	adds	r3, #2
 80013c8:	68fa      	ldr	r2, [r7, #12]
 80013ca:	215d      	movs	r1, #93	; 0x5d
 80013cc:	54d1      	strb	r1, [r2, r3]
     HAL_UART_Transmit(&huart2, transmission, instructionCnt*sizeof(navigationInstruction) + 3, HAL_MAX_DELAY);
 80013ce:	78fb      	ldrb	r3, [r7, #3]
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	461a      	mov	r2, r3
 80013d4:	0092      	lsls	r2, r2, #2
 80013d6:	4413      	add	r3, r2
 80013d8:	b29b      	uxth	r3, r3
 80013da:	3303      	adds	r3, #3
 80013dc:	b29a      	uxth	r2, r3
 80013de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013e2:	68f9      	ldr	r1, [r7, #12]
 80013e4:	480a      	ldr	r0, [pc, #40]	; (8001410 <transmitInstructions+0x110>)
 80013e6:	f003 ff07 	bl	80051f8 <HAL_UART_Transmit>
    receiveInstructions(transmission, instructionCnt*sizeof(navigationInstruction) + 3);
 80013ea:	78fb      	ldrb	r3, [r7, #3]
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	461a      	mov	r2, r3
 80013f0:	0092      	lsls	r2, r2, #2
 80013f2:	4413      	add	r3, r2
 80013f4:	b29b      	uxth	r3, r3
 80013f6:	3303      	adds	r3, #3
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	4619      	mov	r1, r3
 80013fc:	68f8      	ldr	r0, [r7, #12]
 80013fe:	f000 f809 	bl	8001414 <receiveInstructions>
 8001402:	46b5      	mov	sp, r6
}
 8001404:	bf00      	nop
 8001406:	371c      	adds	r7, #28
 8001408:	46bd      	mov	sp, r7
 800140a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800140e:	bf00      	nop
 8001410:	200002e0 	.word	0x200002e0

08001414 <receiveInstructions>:

// Function to receive and decode instructions
uint8_t receiveInstructions(uint8_t* data, uint16_t dataLength) {
 8001414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001418:	b08b      	sub	sp, #44	; 0x2c
 800141a:	af00      	add	r7, sp, #0
 800141c:	6178      	str	r0, [r7, #20]
 800141e:	460b      	mov	r3, r1
 8001420:	827b      	strh	r3, [r7, #18]
 8001422:	466b      	mov	r3, sp
 8001424:	607b      	str	r3, [r7, #4]
    // Check the start and end delimiters
    if (data[0] != START_DELIMITER || data[dataLength - 1] != END_DELIMITER) {
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	2b5b      	cmp	r3, #91	; 0x5b
 800142c:	d106      	bne.n	800143c <receiveInstructions+0x28>
 800142e:	8a7b      	ldrh	r3, [r7, #18]
 8001430:	3b01      	subs	r3, #1
 8001432:	697a      	ldr	r2, [r7, #20]
 8001434:	4413      	add	r3, r2
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	2b5d      	cmp	r3, #93	; 0x5d
 800143a:	d001      	beq.n	8001440 <receiveInstructions+0x2c>
        return 0; // Invalid data
 800143c:	2300      	movs	r3, #0
 800143e:	e07e      	b.n	800153e <receiveInstructions+0x12a>
    }

    // Calculate the number of instructions
    uint16_t numInstructions = (dataLength - 2) / sizeof(navigationInstruction);
 8001440:	8a7b      	ldrh	r3, [r7, #18]
 8001442:	3b02      	subs	r3, #2
 8001444:	461a      	mov	r2, r3
 8001446:	4b41      	ldr	r3, [pc, #260]	; (800154c <receiveInstructions+0x138>)
 8001448:	fba3 2302 	umull	r2, r3, r3, r2
 800144c:	089b      	lsrs	r3, r3, #2
 800144e:	84bb      	strh	r3, [r7, #36]	; 0x24
    //check that the calculated number of instructions matches the transmitted number
    if (numInstructions != data[1]) {
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	3301      	adds	r3, #1
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	b29b      	uxth	r3, r3
 8001458:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800145a:	429a      	cmp	r2, r3
 800145c:	d001      	beq.n	8001462 <receiveInstructions+0x4e>
        return 0; // Invalid data
 800145e:	2300      	movs	r3, #0
 8001460:	e06d      	b.n	800153e <receiveInstructions+0x12a>
    }
    navigationInstruction instructions[numInstructions];
 8001462:	8cbe      	ldrh	r6, [r7, #36]	; 0x24
 8001464:	4633      	mov	r3, r6
 8001466:	3b01      	subs	r3, #1
 8001468:	623b      	str	r3, [r7, #32]
 800146a:	b2b3      	uxth	r3, r6
 800146c:	2200      	movs	r2, #0
 800146e:	60bb      	str	r3, [r7, #8]
 8001470:	60fa      	str	r2, [r7, #12]
 8001472:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001476:	f04f 0000 	mov.w	r0, #0
 800147a:	f04f 0100 	mov.w	r1, #0
 800147e:	0099      	lsls	r1, r3, #2
 8001480:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001484:	0090      	lsls	r0, r2, #2
 8001486:	4602      	mov	r2, r0
 8001488:	460b      	mov	r3, r1
 800148a:	68b9      	ldr	r1, [r7, #8]
 800148c:	eb12 0801 	adds.w	r8, r2, r1
 8001490:	68f9      	ldr	r1, [r7, #12]
 8001492:	eb43 0901 	adc.w	r9, r3, r1
 8001496:	f04f 0200 	mov.w	r2, #0
 800149a:	f04f 0300 	mov.w	r3, #0
 800149e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80014a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80014a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80014aa:	b2b3      	uxth	r3, r6
 80014ac:	2200      	movs	r2, #0
 80014ae:	469a      	mov	sl, r3
 80014b0:	4693      	mov	fp, r2
 80014b2:	4652      	mov	r2, sl
 80014b4:	465b      	mov	r3, fp
 80014b6:	f04f 0000 	mov.w	r0, #0
 80014ba:	f04f 0100 	mov.w	r1, #0
 80014be:	0099      	lsls	r1, r3, #2
 80014c0:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80014c4:	0090      	lsls	r0, r2, #2
 80014c6:	4602      	mov	r2, r0
 80014c8:	460b      	mov	r3, r1
 80014ca:	eb12 040a 	adds.w	r4, r2, sl
 80014ce:	eb43 050b 	adc.w	r5, r3, fp
 80014d2:	f04f 0200 	mov.w	r2, #0
 80014d6:	f04f 0300 	mov.w	r3, #0
 80014da:	00eb      	lsls	r3, r5, #3
 80014dc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80014e0:	00e2      	lsls	r2, r4, #3
 80014e2:	4632      	mov	r2, r6
 80014e4:	4613      	mov	r3, r2
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	4413      	add	r3, r2
 80014ea:	3307      	adds	r3, #7
 80014ec:	08db      	lsrs	r3, r3, #3
 80014ee:	00db      	lsls	r3, r3, #3
 80014f0:	ebad 0d03 	sub.w	sp, sp, r3
 80014f4:	466b      	mov	r3, sp
 80014f6:	3300      	adds	r3, #0
 80014f8:	61fb      	str	r3, [r7, #28]

    // Decode the instructions
    for (uint16_t i = 0; i < numInstructions; i++) {
 80014fa:	2300      	movs	r3, #0
 80014fc:	84fb      	strh	r3, [r7, #38]	; 0x26
 80014fe:	e013      	b.n	8001528 <receiveInstructions+0x114>
        memcpy(&instructions[i], &data[i * sizeof(navigationInstruction) + 1], sizeof(navigationInstruction));
 8001500:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001502:	4613      	mov	r3, r2
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	4413      	add	r3, r2
 8001508:	69fa      	ldr	r2, [r7, #28]
 800150a:	18d0      	adds	r0, r2, r3
 800150c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800150e:	4613      	mov	r3, r2
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	4413      	add	r3, r2
 8001514:	3301      	adds	r3, #1
 8001516:	697a      	ldr	r2, [r7, #20]
 8001518:	4413      	add	r3, r2
 800151a:	2205      	movs	r2, #5
 800151c:	4619      	mov	r1, r3
 800151e:	f009 f9d2 	bl	800a8c6 <memcpy>
    for (uint16_t i = 0; i < numInstructions; i++) {
 8001522:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001524:	3301      	adds	r3, #1
 8001526:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001528:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800152a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800152c:	429a      	cmp	r2, r3
 800152e:	d3e7      	bcc.n	8001500 <receiveInstructions+0xec>
    }

    // Print the instructions
    printInstructions(instructions, numInstructions);
 8001530:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001532:	4619      	mov	r1, r3
 8001534:	69f8      	ldr	r0, [r7, #28]
 8001536:	f000 f80b 	bl	8001550 <printInstructions>
    return numInstructions;
 800153a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800153c:	b2db      	uxtb	r3, r3
 800153e:	f8d7 d004 	ldr.w	sp, [r7, #4]
}
 8001542:	4618      	mov	r0, r3
 8001544:	372c      	adds	r7, #44	; 0x2c
 8001546:	46bd      	mov	sp, r7
 8001548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800154c:	cccccccd 	.word	0xcccccccd

08001550 <printInstructions>:

// Function to print the instructions
void printInstructions(navigationInstruction* instructions, uint16_t numInstructions) {
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	460b      	mov	r3, r1
 800155a:	807b      	strh	r3, [r7, #2]
  for (uint16_t i = 0; i < numInstructions; i++) {
 800155c:	2300      	movs	r3, #0
 800155e:	81fb      	strh	r3, [r7, #14]
 8001560:	e08f      	b.n	8001682 <printInstructions+0x132>
    printf("Instruction %d: ", i);
 8001562:	89fb      	ldrh	r3, [r7, #14]
 8001564:	4619      	mov	r1, r3
 8001566:	484c      	ldr	r0, [pc, #304]	; (8001698 <printInstructions+0x148>)
 8001568:	f009 f8b0 	bl	800a6cc <iprintf>
    switch (instructions[i].instructionType) {
 800156c:	89fa      	ldrh	r2, [r7, #14]
 800156e:	4613      	mov	r3, r2
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	4413      	add	r3, r2
 8001574:	687a      	ldr	r2, [r7, #4]
 8001576:	4413      	add	r3, r2
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	2b06      	cmp	r3, #6
 800157c:	d87a      	bhi.n	8001674 <printInstructions+0x124>
 800157e:	a201      	add	r2, pc, #4	; (adr r2, 8001584 <printInstructions+0x34>)
 8001580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001584:	080015c3 	.word	0x080015c3
 8001588:	080015a1 	.word	0x080015a1
 800158c:	080015e5 	.word	0x080015e5
 8001590:	08001607 	.word	0x08001607
 8001594:	08001629 	.word	0x08001629
 8001598:	0800164b 	.word	0x0800164b
 800159c:	0800166d 	.word	0x0800166d
      case LEFT:
        printf("Turn left and drive %f mm\n", instructions[i].instructionValue);
 80015a0:	89fa      	ldrh	r2, [r7, #14]
 80015a2:	4613      	mov	r3, r2
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	4413      	add	r3, r2
 80015a8:	687a      	ldr	r2, [r7, #4]
 80015aa:	4413      	add	r3, r2
 80015ac:	f8d3 3001 	ldr.w	r3, [r3, #1]
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7fe ffc9 	bl	8000548 <__aeabi_f2d>
 80015b6:	4602      	mov	r2, r0
 80015b8:	460b      	mov	r3, r1
 80015ba:	4838      	ldr	r0, [pc, #224]	; (800169c <printInstructions+0x14c>)
 80015bc:	f009 f886 	bl	800a6cc <iprintf>
        break;
 80015c0:	e05c      	b.n	800167c <printInstructions+0x12c>
      case RIGHT:
        printf("Turn right and drive %f mm\n", instructions[i].instructionValue);
 80015c2:	89fa      	ldrh	r2, [r7, #14]
 80015c4:	4613      	mov	r3, r2
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	4413      	add	r3, r2
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	4413      	add	r3, r2
 80015ce:	f8d3 3001 	ldr.w	r3, [r3, #1]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7fe ffb8 	bl	8000548 <__aeabi_f2d>
 80015d8:	4602      	mov	r2, r0
 80015da:	460b      	mov	r3, r1
 80015dc:	4830      	ldr	r0, [pc, #192]	; (80016a0 <printInstructions+0x150>)
 80015de:	f009 f875 	bl	800a6cc <iprintf>
        break;
 80015e2:	e04b      	b.n	800167c <printInstructions+0x12c>
      case FORWARD:
        printf("Drive %f mm forwards\n", instructions[i].instructionValue);
 80015e4:	89fa      	ldrh	r2, [r7, #14]
 80015e6:	4613      	mov	r3, r2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	4413      	add	r3, r2
 80015ec:	687a      	ldr	r2, [r7, #4]
 80015ee:	4413      	add	r3, r2
 80015f0:	f8d3 3001 	ldr.w	r3, [r3, #1]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7fe ffa7 	bl	8000548 <__aeabi_f2d>
 80015fa:	4602      	mov	r2, r0
 80015fc:	460b      	mov	r3, r1
 80015fe:	4829      	ldr	r0, [pc, #164]	; (80016a4 <printInstructions+0x154>)
 8001600:	f009 f864 	bl	800a6cc <iprintf>
        break;
 8001604:	e03a      	b.n	800167c <printInstructions+0x12c>
      case BACKWARD:
        printf("Drive %f mm backwards\n", instructions[i].instructionValue);
 8001606:	89fa      	ldrh	r2, [r7, #14]
 8001608:	4613      	mov	r3, r2
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	4413      	add	r3, r2
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	4413      	add	r3, r2
 8001612:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8001616:	4618      	mov	r0, r3
 8001618:	f7fe ff96 	bl	8000548 <__aeabi_f2d>
 800161c:	4602      	mov	r2, r0
 800161e:	460b      	mov	r3, r1
 8001620:	4821      	ldr	r0, [pc, #132]	; (80016a8 <printInstructions+0x158>)
 8001622:	f009 f853 	bl	800a6cc <iprintf>
        break;
 8001626:	e029      	b.n	800167c <printInstructions+0x12c>
      case CLOCKWISE:
        printf("Turn clockwise %f degrees\n", instructions[i].instructionValue);
 8001628:	89fa      	ldrh	r2, [r7, #14]
 800162a:	4613      	mov	r3, r2
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	4413      	add	r3, r2
 8001630:	687a      	ldr	r2, [r7, #4]
 8001632:	4413      	add	r3, r2
 8001634:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8001638:	4618      	mov	r0, r3
 800163a:	f7fe ff85 	bl	8000548 <__aeabi_f2d>
 800163e:	4602      	mov	r2, r0
 8001640:	460b      	mov	r3, r1
 8001642:	481a      	ldr	r0, [pc, #104]	; (80016ac <printInstructions+0x15c>)
 8001644:	f009 f842 	bl	800a6cc <iprintf>
        break;
 8001648:	e018      	b.n	800167c <printInstructions+0x12c>
      case COUNTERCLOCKWISE:
        printf("Turn counterclockwise %f degrees\n", instructions[i].instructionValue);
 800164a:	89fa      	ldrh	r2, [r7, #14]
 800164c:	4613      	mov	r3, r2
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	4413      	add	r3, r2
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	4413      	add	r3, r2
 8001656:	f8d3 3001 	ldr.w	r3, [r3, #1]
 800165a:	4618      	mov	r0, r3
 800165c:	f7fe ff74 	bl	8000548 <__aeabi_f2d>
 8001660:	4602      	mov	r2, r0
 8001662:	460b      	mov	r3, r1
 8001664:	4812      	ldr	r0, [pc, #72]	; (80016b0 <printInstructions+0x160>)
 8001666:	f009 f831 	bl	800a6cc <iprintf>
        break;
 800166a:	e007      	b.n	800167c <printInstructions+0x12c>
      case STOP:
        printf("Stop\n");
 800166c:	4811      	ldr	r0, [pc, #68]	; (80016b4 <printInstructions+0x164>)
 800166e:	f009 f893 	bl	800a798 <puts>
        break;
 8001672:	e003      	b.n	800167c <printInstructions+0x12c>
      default:
        printf("Unknown instruction type\n");
 8001674:	4810      	ldr	r0, [pc, #64]	; (80016b8 <printInstructions+0x168>)
 8001676:	f009 f88f 	bl	800a798 <puts>
        break;
 800167a:	bf00      	nop
  for (uint16_t i = 0; i < numInstructions; i++) {
 800167c:	89fb      	ldrh	r3, [r7, #14]
 800167e:	3301      	adds	r3, #1
 8001680:	81fb      	strh	r3, [r7, #14]
 8001682:	89fa      	ldrh	r2, [r7, #14]
 8001684:	887b      	ldrh	r3, [r7, #2]
 8001686:	429a      	cmp	r2, r3
 8001688:	f4ff af6b 	bcc.w	8001562 <printInstructions+0x12>
    }
  }
}
 800168c:	bf00      	nop
 800168e:	bf00      	nop
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	0800d170 	.word	0x0800d170
 800169c:	0800d184 	.word	0x0800d184
 80016a0:	0800d1a0 	.word	0x0800d1a0
 80016a4:	0800d1bc 	.word	0x0800d1bc
 80016a8:	0800d1d4 	.word	0x0800d1d4
 80016ac:	0800d1ec 	.word	0x0800d1ec
 80016b0:	0800d208 	.word	0x0800d208
 80016b4:	0800d22c 	.word	0x0800d22c
 80016b8:	0800d234 	.word	0x0800d234

080016bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016c0:	f000 fee7 	bl	8002492 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016c4:	f000 f892 	bl	80017ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016c8:	f000 f9a4 	bl	8001a14 <MX_GPIO_Init>
  MX_DMA_Init();
 80016cc:	f000 f984 	bl	80019d8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80016d0:	f000 f952 	bl	8001978 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80016d4:	f000 f8e0 	bl	8001898 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80016d8:	f000 f91e 	bl	8001918 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, uart2_buffer, 1);
 80016dc:	2201      	movs	r2, #1
 80016de:	4928      	ldr	r1, [pc, #160]	; (8001780 <main+0xc4>)
 80016e0:	4828      	ldr	r0, [pc, #160]	; (8001784 <main+0xc8>)
 80016e2:	f003 fe13 	bl	800530c <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart1, uart1_buffer, 1);
 80016e6:	2201      	movs	r2, #1
 80016e8:	4927      	ldr	r1, [pc, #156]	; (8001788 <main+0xcc>)
 80016ea:	4828      	ldr	r0, [pc, #160]	; (800178c <main+0xd0>)
 80016ec:	f003 fe0e 	bl	800530c <HAL_UART_Receive_IT>
  printf("Setup complete\n");
 80016f0:	4827      	ldr	r0, [pc, #156]	; (8001790 <main+0xd4>)
 80016f2:	f009 f851 	bl	800a798 <puts>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80016f6:	f005 fb81 	bl	8006dfc <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of uart1Queue */
  uart1QueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &uart1Queue_attributes);
 80016fa:	4a26      	ldr	r2, [pc, #152]	; (8001794 <main+0xd8>)
 80016fc:	2102      	movs	r1, #2
 80016fe:	2010      	movs	r0, #16
 8001700:	f005 fc73 	bl	8006fea <osMessageQueueNew>
 8001704:	4603      	mov	r3, r0
 8001706:	4a24      	ldr	r2, [pc, #144]	; (8001798 <main+0xdc>)
 8001708:	6013      	str	r3, [r2, #0]

  /* creation of uart2Queue */
  uart2QueueHandle = osMessageQueueNew (2, sizeof(Dash7ToSTM32Message), &uart2Queue_attributes);
 800170a:	4a24      	ldr	r2, [pc, #144]	; (800179c <main+0xe0>)
 800170c:	210b      	movs	r1, #11
 800170e:	2002      	movs	r0, #2
 8001710:	f005 fc6b 	bl	8006fea <osMessageQueueNew>
 8001714:	4603      	mov	r3, r0
 8001716:	4a22      	ldr	r2, [pc, #136]	; (80017a0 <main+0xe4>)
 8001718:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800171a:	4a22      	ldr	r2, [pc, #136]	; (80017a4 <main+0xe8>)
 800171c:	2100      	movs	r1, #0
 800171e:	4822      	ldr	r0, [pc, #136]	; (80017a8 <main+0xec>)
 8001720:	f005 fbb6 	bl	8006e90 <osThreadNew>
 8001724:	4603      	mov	r3, r0
 8001726:	4a21      	ldr	r2, [pc, #132]	; (80017ac <main+0xf0>)
 8001728:	6013      	str	r3, [r2, #0]

  /* creation of UART2Task */
  UART2TaskHandle = osThreadNew(UART2_Task, NULL, &UART2Task_attributes);
 800172a:	4a21      	ldr	r2, [pc, #132]	; (80017b0 <main+0xf4>)
 800172c:	2100      	movs	r1, #0
 800172e:	4821      	ldr	r0, [pc, #132]	; (80017b4 <main+0xf8>)
 8001730:	f005 fbae 	bl	8006e90 <osThreadNew>
 8001734:	4603      	mov	r3, r0
 8001736:	4a20      	ldr	r2, [pc, #128]	; (80017b8 <main+0xfc>)
 8001738:	6013      	str	r3, [r2, #0]

  /* creation of UART1Task */
  UART1TaskHandle = osThreadNew(UART1_Task, NULL, &UART1Task_attributes);
 800173a:	4a20      	ldr	r2, [pc, #128]	; (80017bc <main+0x100>)
 800173c:	2100      	movs	r1, #0
 800173e:	4820      	ldr	r0, [pc, #128]	; (80017c0 <main+0x104>)
 8001740:	f005 fba6 	bl	8006e90 <osThreadNew>
 8001744:	4603      	mov	r3, r0
 8001746:	4a1f      	ldr	r2, [pc, #124]	; (80017c4 <main+0x108>)
 8001748:	6013      	str	r3, [r2, #0]

  /* creation of LightSensor_Tas */
  LightSensor_TasHandle = osThreadNew(LightSensorTask, NULL, &LightSensor_Tas_attributes);
 800174a:	4a1f      	ldr	r2, [pc, #124]	; (80017c8 <main+0x10c>)
 800174c:	2100      	movs	r1, #0
 800174e:	481f      	ldr	r0, [pc, #124]	; (80017cc <main+0x110>)
 8001750:	f005 fb9e 	bl	8006e90 <osThreadNew>
 8001754:	4603      	mov	r3, r0
 8001756:	4a1e      	ldr	r2, [pc, #120]	; (80017d0 <main+0x114>)
 8001758:	6013      	str	r3, [r2, #0]

  /* creation of Temp_Task */
  Temp_TaskHandle = osThreadNew(TempTask, NULL, &Temp_Task_attributes);
 800175a:	4a1e      	ldr	r2, [pc, #120]	; (80017d4 <main+0x118>)
 800175c:	2100      	movs	r1, #0
 800175e:	481e      	ldr	r0, [pc, #120]	; (80017d8 <main+0x11c>)
 8001760:	f005 fb96 	bl	8006e90 <osThreadNew>
 8001764:	4603      	mov	r3, r0
 8001766:	4a1d      	ldr	r2, [pc, #116]	; (80017dc <main+0x120>)
 8001768:	6013      	str	r3, [r2, #0]

  /* creation of NavigationTask */
  NavigationTaskHandle = osThreadNew(StartNavigationTask, NULL, &NavigationTask_attributes);
 800176a:	4a1d      	ldr	r2, [pc, #116]	; (80017e0 <main+0x124>)
 800176c:	2100      	movs	r1, #0
 800176e:	481d      	ldr	r0, [pc, #116]	; (80017e4 <main+0x128>)
 8001770:	f005 fb8e 	bl	8006e90 <osThreadNew>
 8001774:	4603      	mov	r3, r0
 8001776:	4a1c      	ldr	r2, [pc, #112]	; (80017e8 <main+0x12c>)
 8001778:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800177a:	f005 fb63 	bl	8006e44 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800177e:	e7fe      	b.n	800177e <main+0xc2>
 8001780:	200003d4 	.word	0x200003d4
 8001784:	200002e0 	.word	0x200002e0
 8001788:	200003d0 	.word	0x200003d0
 800178c:	20000258 	.word	0x20000258
 8001790:	0800d250 	.word	0x0800d250
 8001794:	0800d3e4 	.word	0x0800d3e4
 8001798:	200003c8 	.word	0x200003c8
 800179c:	0800d3fc 	.word	0x0800d3fc
 80017a0:	200003cc 	.word	0x200003cc
 80017a4:	0800d30c 	.word	0x0800d30c
 80017a8:	08001cd9 	.word	0x08001cd9
 80017ac:	200003b0 	.word	0x200003b0
 80017b0:	0800d330 	.word	0x0800d330
 80017b4:	08001d11 	.word	0x08001d11
 80017b8:	200003b4 	.word	0x200003b4
 80017bc:	0800d354 	.word	0x0800d354
 80017c0:	08001d23 	.word	0x08001d23
 80017c4:	200003b8 	.word	0x200003b8
 80017c8:	0800d378 	.word	0x0800d378
 80017cc:	08001d35 	.word	0x08001d35
 80017d0:	200003bc 	.word	0x200003bc
 80017d4:	0800d39c 	.word	0x0800d39c
 80017d8:	08001d65 	.word	0x08001d65
 80017dc:	200003c0 	.word	0x200003c0
 80017e0:	0800d3c0 	.word	0x0800d3c0
 80017e4:	08001d75 	.word	0x08001d75
 80017e8:	200003c4 	.word	0x200003c4

080017ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b096      	sub	sp, #88	; 0x58
 80017f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017f2:	f107 0314 	add.w	r3, r7, #20
 80017f6:	2244      	movs	r2, #68	; 0x44
 80017f8:	2100      	movs	r1, #0
 80017fa:	4618      	mov	r0, r3
 80017fc:	f008 ffd4 	bl	800a7a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001800:	463b      	mov	r3, r7
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	605a      	str	r2, [r3, #4]
 8001808:	609a      	str	r2, [r3, #8]
 800180a:	60da      	str	r2, [r3, #12]
 800180c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800180e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001812:	f002 f99d 	bl	8003b50 <HAL_PWREx_ControlVoltageScaling>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800181c:	f000 fb24 	bl	8001e68 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001820:	f002 f978 	bl	8003b14 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001824:	4b1b      	ldr	r3, [pc, #108]	; (8001894 <SystemClock_Config+0xa8>)
 8001826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800182a:	4a1a      	ldr	r2, [pc, #104]	; (8001894 <SystemClock_Config+0xa8>)
 800182c:	f023 0318 	bic.w	r3, r3, #24
 8001830:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001834:	2314      	movs	r3, #20
 8001836:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001838:	2301      	movs	r3, #1
 800183a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800183c:	2301      	movs	r3, #1
 800183e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001840:	2300      	movs	r3, #0
 8001842:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8001844:	23a0      	movs	r3, #160	; 0xa0
 8001846:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001848:	2300      	movs	r3, #0
 800184a:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800184c:	f107 0314 	add.w	r3, r7, #20
 8001850:	4618      	mov	r0, r3
 8001852:	f002 f9d3 	bl	8003bfc <HAL_RCC_OscConfig>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800185c:	f000 fb04 	bl	8001e68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001860:	230f      	movs	r3, #15
 8001862:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001864:	2300      	movs	r3, #0
 8001866:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001868:	2300      	movs	r3, #0
 800186a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800186c:	2300      	movs	r3, #0
 800186e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001870:	2300      	movs	r3, #0
 8001872:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001874:	463b      	mov	r3, r7
 8001876:	2101      	movs	r1, #1
 8001878:	4618      	mov	r0, r3
 800187a:	f002 fe21 	bl	80044c0 <HAL_RCC_ClockConfig>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001884:	f000 faf0 	bl	8001e68 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001888:	f003 f9f6 	bl	8004c78 <HAL_RCCEx_EnableMSIPLLMode>
}
 800188c:	bf00      	nop
 800188e:	3758      	adds	r7, #88	; 0x58
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	40021000 	.word	0x40021000

08001898 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800189c:	4b1b      	ldr	r3, [pc, #108]	; (800190c <MX_I2C1_Init+0x74>)
 800189e:	4a1c      	ldr	r2, [pc, #112]	; (8001910 <MX_I2C1_Init+0x78>)
 80018a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80018a2:	4b1a      	ldr	r3, [pc, #104]	; (800190c <MX_I2C1_Init+0x74>)
 80018a4:	4a1b      	ldr	r2, [pc, #108]	; (8001914 <MX_I2C1_Init+0x7c>)
 80018a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80018a8:	4b18      	ldr	r3, [pc, #96]	; (800190c <MX_I2C1_Init+0x74>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018ae:	4b17      	ldr	r3, [pc, #92]	; (800190c <MX_I2C1_Init+0x74>)
 80018b0:	2201      	movs	r2, #1
 80018b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018b4:	4b15      	ldr	r3, [pc, #84]	; (800190c <MX_I2C1_Init+0x74>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80018ba:	4b14      	ldr	r3, [pc, #80]	; (800190c <MX_I2C1_Init+0x74>)
 80018bc:	2200      	movs	r2, #0
 80018be:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80018c0:	4b12      	ldr	r3, [pc, #72]	; (800190c <MX_I2C1_Init+0x74>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018c6:	4b11      	ldr	r3, [pc, #68]	; (800190c <MX_I2C1_Init+0x74>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018cc:	4b0f      	ldr	r3, [pc, #60]	; (800190c <MX_I2C1_Init+0x74>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018d2:	480e      	ldr	r0, [pc, #56]	; (800190c <MX_I2C1_Init+0x74>)
 80018d4:	f001 fb04 	bl	8002ee0 <HAL_I2C_Init>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80018de:	f000 fac3 	bl	8001e68 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80018e2:	2100      	movs	r1, #0
 80018e4:	4809      	ldr	r0, [pc, #36]	; (800190c <MX_I2C1_Init+0x74>)
 80018e6:	f002 f87d 	bl	80039e4 <HAL_I2CEx_ConfigAnalogFilter>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80018f0:	f000 faba 	bl	8001e68 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80018f4:	2100      	movs	r1, #0
 80018f6:	4805      	ldr	r0, [pc, #20]	; (800190c <MX_I2C1_Init+0x74>)
 80018f8:	f002 f8bf 	bl	8003a7a <HAL_I2CEx_ConfigDigitalFilter>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001902:	f000 fab1 	bl	8001e68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001906:	bf00      	nop
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	20000204 	.word	0x20000204
 8001910:	40005400 	.word	0x40005400
 8001914:	00707cbb 	.word	0x00707cbb

08001918 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800191c:	4b14      	ldr	r3, [pc, #80]	; (8001970 <MX_USART1_UART_Init+0x58>)
 800191e:	4a15      	ldr	r2, [pc, #84]	; (8001974 <MX_USART1_UART_Init+0x5c>)
 8001920:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 8001922:	4b13      	ldr	r3, [pc, #76]	; (8001970 <MX_USART1_UART_Init+0x58>)
 8001924:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8001928:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800192a:	4b11      	ldr	r3, [pc, #68]	; (8001970 <MX_USART1_UART_Init+0x58>)
 800192c:	2200      	movs	r2, #0
 800192e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001930:	4b0f      	ldr	r3, [pc, #60]	; (8001970 <MX_USART1_UART_Init+0x58>)
 8001932:	2200      	movs	r2, #0
 8001934:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001936:	4b0e      	ldr	r3, [pc, #56]	; (8001970 <MX_USART1_UART_Init+0x58>)
 8001938:	2200      	movs	r2, #0
 800193a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800193c:	4b0c      	ldr	r3, [pc, #48]	; (8001970 <MX_USART1_UART_Init+0x58>)
 800193e:	220c      	movs	r2, #12
 8001940:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001942:	4b0b      	ldr	r3, [pc, #44]	; (8001970 <MX_USART1_UART_Init+0x58>)
 8001944:	2200      	movs	r2, #0
 8001946:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001948:	4b09      	ldr	r3, [pc, #36]	; (8001970 <MX_USART1_UART_Init+0x58>)
 800194a:	2200      	movs	r2, #0
 800194c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800194e:	4b08      	ldr	r3, [pc, #32]	; (8001970 <MX_USART1_UART_Init+0x58>)
 8001950:	2200      	movs	r2, #0
 8001952:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001954:	4b06      	ldr	r3, [pc, #24]	; (8001970 <MX_USART1_UART_Init+0x58>)
 8001956:	2200      	movs	r2, #0
 8001958:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800195a:	4805      	ldr	r0, [pc, #20]	; (8001970 <MX_USART1_UART_Init+0x58>)
 800195c:	f003 fbfe 	bl	800515c <HAL_UART_Init>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001966:	f000 fa7f 	bl	8001e68 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800196a:	bf00      	nop
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	20000258 	.word	0x20000258
 8001974:	40013800 	.word	0x40013800

08001978 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800197c:	4b14      	ldr	r3, [pc, #80]	; (80019d0 <MX_USART2_UART_Init+0x58>)
 800197e:	4a15      	ldr	r2, [pc, #84]	; (80019d4 <MX_USART2_UART_Init+0x5c>)
 8001980:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001982:	4b13      	ldr	r3, [pc, #76]	; (80019d0 <MX_USART2_UART_Init+0x58>)
 8001984:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001988:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800198a:	4b11      	ldr	r3, [pc, #68]	; (80019d0 <MX_USART2_UART_Init+0x58>)
 800198c:	2200      	movs	r2, #0
 800198e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001990:	4b0f      	ldr	r3, [pc, #60]	; (80019d0 <MX_USART2_UART_Init+0x58>)
 8001992:	2200      	movs	r2, #0
 8001994:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001996:	4b0e      	ldr	r3, [pc, #56]	; (80019d0 <MX_USART2_UART_Init+0x58>)
 8001998:	2200      	movs	r2, #0
 800199a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800199c:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <MX_USART2_UART_Init+0x58>)
 800199e:	220c      	movs	r2, #12
 80019a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019a2:	4b0b      	ldr	r3, [pc, #44]	; (80019d0 <MX_USART2_UART_Init+0x58>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019a8:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <MX_USART2_UART_Init+0x58>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019ae:	4b08      	ldr	r3, [pc, #32]	; (80019d0 <MX_USART2_UART_Init+0x58>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019b4:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <MX_USART2_UART_Init+0x58>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019ba:	4805      	ldr	r0, [pc, #20]	; (80019d0 <MX_USART2_UART_Init+0x58>)
 80019bc:	f003 fbce 	bl	800515c <HAL_UART_Init>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80019c6:	f000 fa4f 	bl	8001e68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	200002e0 	.word	0x200002e0
 80019d4:	40004400 	.word	0x40004400

080019d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019de:	4b0c      	ldr	r3, [pc, #48]	; (8001a10 <MX_DMA_Init+0x38>)
 80019e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019e2:	4a0b      	ldr	r2, [pc, #44]	; (8001a10 <MX_DMA_Init+0x38>)
 80019e4:	f043 0301 	orr.w	r3, r3, #1
 80019e8:	6493      	str	r3, [r2, #72]	; 0x48
 80019ea:	4b09      	ldr	r3, [pc, #36]	; (8001a10 <MX_DMA_Init+0x38>)
 80019ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019ee:	f003 0301 	and.w	r3, r3, #1
 80019f2:	607b      	str	r3, [r7, #4]
 80019f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 80019f6:	2200      	movs	r2, #0
 80019f8:	2105      	movs	r1, #5
 80019fa:	200f      	movs	r0, #15
 80019fc:	f000 fe3a 	bl	8002674 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001a00:	200f      	movs	r0, #15
 8001a02:	f000 fe53 	bl	80026ac <HAL_NVIC_EnableIRQ>

}
 8001a06:	bf00      	nop
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	40021000 	.word	0x40021000

08001a14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b088      	sub	sp, #32
 8001a18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a1a:	f107 030c 	add.w	r3, r7, #12
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	605a      	str	r2, [r3, #4]
 8001a24:	609a      	str	r2, [r3, #8]
 8001a26:	60da      	str	r2, [r3, #12]
 8001a28:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a2a:	4b1d      	ldr	r3, [pc, #116]	; (8001aa0 <MX_GPIO_Init+0x8c>)
 8001a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a2e:	4a1c      	ldr	r2, [pc, #112]	; (8001aa0 <MX_GPIO_Init+0x8c>)
 8001a30:	f043 0304 	orr.w	r3, r3, #4
 8001a34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a36:	4b1a      	ldr	r3, [pc, #104]	; (8001aa0 <MX_GPIO_Init+0x8c>)
 8001a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a3a:	f003 0304 	and.w	r3, r3, #4
 8001a3e:	60bb      	str	r3, [r7, #8]
 8001a40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a42:	4b17      	ldr	r3, [pc, #92]	; (8001aa0 <MX_GPIO_Init+0x8c>)
 8001a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a46:	4a16      	ldr	r2, [pc, #88]	; (8001aa0 <MX_GPIO_Init+0x8c>)
 8001a48:	f043 0301 	orr.w	r3, r3, #1
 8001a4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a4e:	4b14      	ldr	r3, [pc, #80]	; (8001aa0 <MX_GPIO_Init+0x8c>)
 8001a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	607b      	str	r3, [r7, #4]
 8001a58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a5a:	4b11      	ldr	r3, [pc, #68]	; (8001aa0 <MX_GPIO_Init+0x8c>)
 8001a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a5e:	4a10      	ldr	r2, [pc, #64]	; (8001aa0 <MX_GPIO_Init+0x8c>)
 8001a60:	f043 0302 	orr.w	r3, r3, #2
 8001a64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a66:	4b0e      	ldr	r3, [pc, #56]	; (8001aa0 <MX_GPIO_Init+0x8c>)
 8001a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	603b      	str	r3, [r7, #0]
 8001a70:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001a72:	2200      	movs	r2, #0
 8001a74:	2108      	movs	r1, #8
 8001a76:	480b      	ldr	r0, [pc, #44]	; (8001aa4 <MX_GPIO_Init+0x90>)
 8001a78:	f001 fa1a 	bl	8002eb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8001a7c:	2308      	movs	r3, #8
 8001a7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a80:	2301      	movs	r3, #1
 8001a82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a84:	2300      	movs	r3, #0
 8001a86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001a8c:	f107 030c 	add.w	r3, r7, #12
 8001a90:	4619      	mov	r1, r3
 8001a92:	4804      	ldr	r0, [pc, #16]	; (8001aa4 <MX_GPIO_Init+0x90>)
 8001a94:	f001 f89a 	bl	8002bcc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a98:	bf00      	nop
 8001a9a:	3720      	adds	r7, #32
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	48000400 	.word	0x48000400

08001aa8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a56      	ldr	r2, [pc, #344]	; (8001c10 <HAL_UART_RxCpltCallback+0x168>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	f040 8080 	bne.w	8001bbc <HAL_UART_RxCpltCallback+0x114>
    {
        switch (UART1receiveState) {
 8001abc:	4b55      	ldr	r3, [pc, #340]	; (8001c14 <HAL_UART_RxCpltCallback+0x16c>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	2b03      	cmp	r3, #3
 8001ac2:	f200 80a1 	bhi.w	8001c08 <HAL_UART_RxCpltCallback+0x160>
 8001ac6:	a201      	add	r2, pc, #4	; (adr r2, 8001acc <HAL_UART_RxCpltCallback+0x24>)
 8001ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001acc:	08001add 	.word	0x08001add
 8001ad0:	08001af7 	.word	0x08001af7
 8001ad4:	08001b17 	.word	0x08001b17
 8001ad8:	08001b6b 	.word	0x08001b6b
            case WAIT_FOR_START_DELIMITER:
                if (uart1_buffer[0] == START_DELIMITER) {
 8001adc:	4b4e      	ldr	r3, [pc, #312]	; (8001c18 <HAL_UART_RxCpltCallback+0x170>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	2b5b      	cmp	r3, #91	; 0x5b
 8001ae2:	d102      	bne.n	8001aea <HAL_UART_RxCpltCallback+0x42>
                    UART1receiveState = WAIT_FOR_DATA_LENGTH_HIGH;
 8001ae4:	4b4b      	ldr	r3, [pc, #300]	; (8001c14 <HAL_UART_RxCpltCallback+0x16c>)
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	701a      	strb	r2, [r3, #0]
                }
                HAL_UART_Receive_IT(&huart1, uart1_buffer, 1);
 8001aea:	2201      	movs	r2, #1
 8001aec:	494a      	ldr	r1, [pc, #296]	; (8001c18 <HAL_UART_RxCpltCallback+0x170>)
 8001aee:	484b      	ldr	r0, [pc, #300]	; (8001c1c <HAL_UART_RxCpltCallback+0x174>)
 8001af0:	f003 fc0c 	bl	800530c <HAL_UART_Receive_IT>
                break;
 8001af4:	e088      	b.n	8001c08 <HAL_UART_RxCpltCallback+0x160>

            case WAIT_FOR_DATA_LENGTH_HIGH:
                dataLength = uart1_buffer[0] << 8;
 8001af6:	4b48      	ldr	r3, [pc, #288]	; (8001c18 <HAL_UART_RxCpltCallback+0x170>)
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	021b      	lsls	r3, r3, #8
 8001afe:	b29a      	uxth	r2, r3
 8001b00:	4b47      	ldr	r3, [pc, #284]	; (8001c20 <HAL_UART_RxCpltCallback+0x178>)
 8001b02:	801a      	strh	r2, [r3, #0]
                UART1receiveState = WAIT_FOR_DATA_LENGTH_LOW;
 8001b04:	4b43      	ldr	r3, [pc, #268]	; (8001c14 <HAL_UART_RxCpltCallback+0x16c>)
 8001b06:	2202      	movs	r2, #2
 8001b08:	701a      	strb	r2, [r3, #0]
                HAL_UART_Receive_IT(&huart1, uart1_buffer, 1);
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	4942      	ldr	r1, [pc, #264]	; (8001c18 <HAL_UART_RxCpltCallback+0x170>)
 8001b0e:	4843      	ldr	r0, [pc, #268]	; (8001c1c <HAL_UART_RxCpltCallback+0x174>)
 8001b10:	f003 fbfc 	bl	800530c <HAL_UART_Receive_IT>
                break;
 8001b14:	e078      	b.n	8001c08 <HAL_UART_RxCpltCallback+0x160>

            case WAIT_FOR_DATA_LENGTH_LOW:
                dataLength |= uart1_buffer[0];
 8001b16:	4b40      	ldr	r3, [pc, #256]	; (8001c18 <HAL_UART_RxCpltCallback+0x170>)
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	b29a      	uxth	r2, r3
 8001b1c:	4b40      	ldr	r3, [pc, #256]	; (8001c20 <HAL_UART_RxCpltCallback+0x178>)
 8001b1e:	881b      	ldrh	r3, [r3, #0]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	b29a      	uxth	r2, r3
 8001b24:	4b3e      	ldr	r3, [pc, #248]	; (8001c20 <HAL_UART_RxCpltCallback+0x178>)
 8001b26:	801a      	strh	r2, [r3, #0]
                UART1receiveState = WAIT_FOR_DATA;
 8001b28:	4b3a      	ldr	r3, [pc, #232]	; (8001c14 <HAL_UART_RxCpltCallback+0x16c>)
 8001b2a:	2203      	movs	r2, #3
 8001b2c:	701a      	strb	r2, [r3, #0]
                dma_buffer = (uint8_t*)pvPortMalloc((dataLength*12 + 1) * sizeof(uint8_t)); // Allocate buffer for DMA transfer
 8001b2e:	4b3c      	ldr	r3, [pc, #240]	; (8001c20 <HAL_UART_RxCpltCallback+0x178>)
 8001b30:	881b      	ldrh	r3, [r3, #0]
 8001b32:	461a      	mov	r2, r3
 8001b34:	4613      	mov	r3, r2
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	4413      	add	r3, r2
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f007 feb2 	bl	80098a8 <pvPortMalloc>
 8001b44:	4603      	mov	r3, r0
 8001b46:	4a37      	ldr	r2, [pc, #220]	; (8001c24 <HAL_UART_RxCpltCallback+0x17c>)
 8001b48:	6013      	str	r3, [r2, #0]
                HAL_UART_Receive_DMA(&huart1, dma_buffer, dataLength*12 + 1);
 8001b4a:	4b36      	ldr	r3, [pc, #216]	; (8001c24 <HAL_UART_RxCpltCallback+0x17c>)
 8001b4c:	6819      	ldr	r1, [r3, #0]
 8001b4e:	4b34      	ldr	r3, [pc, #208]	; (8001c20 <HAL_UART_RxCpltCallback+0x178>)
 8001b50:	881b      	ldrh	r3, [r3, #0]
 8001b52:	461a      	mov	r2, r3
 8001b54:	0052      	lsls	r2, r2, #1
 8001b56:	4413      	add	r3, r2
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	461a      	mov	r2, r3
 8001b62:	482e      	ldr	r0, [pc, #184]	; (8001c1c <HAL_UART_RxCpltCallback+0x174>)
 8001b64:	f003 fc1e 	bl	80053a4 <HAL_UART_Receive_DMA>
                break;
 8001b68:	e04e      	b.n	8001c08 <HAL_UART_RxCpltCallback+0x160>

            case WAIT_FOR_DATA:
                // DMA transfer is complete
                HAL_UART_DMAStop(&huart1); // Stop the DMA transfer
 8001b6a:	482c      	ldr	r0, [pc, #176]	; (8001c1c <HAL_UART_RxCpltCallback+0x174>)
 8001b6c:	f003 fc66 	bl	800543c <HAL_UART_DMAStop>

                // Check if the last byte is the end delimiter
                if (dma_buffer[dataLength*12] == END_DELIMITER) {
 8001b70:	4b2c      	ldr	r3, [pc, #176]	; (8001c24 <HAL_UART_RxCpltCallback+0x17c>)
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	4b2a      	ldr	r3, [pc, #168]	; (8001c20 <HAL_UART_RxCpltCallback+0x178>)
 8001b76:	881b      	ldrh	r3, [r3, #0]
 8001b78:	4619      	mov	r1, r3
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	440b      	add	r3, r1
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	4413      	add	r3, r2
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	2b5d      	cmp	r3, #93	; 0x5d
 8001b88:	d107      	bne.n	8001b9a <HAL_UART_RxCpltCallback+0xf2>
                    // Process the received data here
                    // You can send the data to a FreeRTOS task using a queue
                    xQueueSendFromISR(uart1QueueHandle, dma_buffer, NULL);
 8001b8a:	4b27      	ldr	r3, [pc, #156]	; (8001c28 <HAL_UART_RxCpltCallback+0x180>)
 8001b8c:	6818      	ldr	r0, [r3, #0]
 8001b8e:	4b25      	ldr	r3, [pc, #148]	; (8001c24 <HAL_UART_RxCpltCallback+0x17c>)
 8001b90:	6819      	ldr	r1, [r3, #0]
 8001b92:	2300      	movs	r3, #0
 8001b94:	2200      	movs	r2, #0
 8001b96:	f005 fdbf 	bl	8007718 <xQueueGenericSendFromISR>
                }

                // Free the DMA buffer
                vPortFree(dma_buffer);
 8001b9a:	4b22      	ldr	r3, [pc, #136]	; (8001c24 <HAL_UART_RxCpltCallback+0x17c>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f007 ff4e 	bl	8009a40 <vPortFree>
                dma_buffer = NULL;
 8001ba4:	4b1f      	ldr	r3, [pc, #124]	; (8001c24 <HAL_UART_RxCpltCallback+0x17c>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	601a      	str	r2, [r3, #0]

                // Restart the interrupt-based reception
                UART1receiveState = WAIT_FOR_START_DELIMITER;
 8001baa:	4b1a      	ldr	r3, [pc, #104]	; (8001c14 <HAL_UART_RxCpltCallback+0x16c>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	701a      	strb	r2, [r3, #0]
                HAL_UART_Receive_IT(&huart1, uart1_buffer, 1);
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	4919      	ldr	r1, [pc, #100]	; (8001c18 <HAL_UART_RxCpltCallback+0x170>)
 8001bb4:	4819      	ldr	r0, [pc, #100]	; (8001c1c <HAL_UART_RxCpltCallback+0x174>)
 8001bb6:	f003 fba9 	bl	800530c <HAL_UART_Receive_IT>
                break;
 8001bba:	e025      	b.n	8001c08 <HAL_UART_RxCpltCallback+0x160>
	// if (huart->Instance == USART1)
	// {
	// 	xQueueSendFromISR(uart1QueueHandle, uart1_buffer, NULL);
	// 	HAL_UART_Receive_IT(&huart1, uart1_buffer, 1);
	// }
	else if (huart->Instance == USART2)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a1a      	ldr	r2, [pc, #104]	; (8001c2c <HAL_UART_RxCpltCallback+0x184>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d120      	bne.n	8001c08 <HAL_UART_RxCpltCallback+0x160>
	{
		  // xQueueSendFromISR(uart2QueueHandle, uart2_buffer, NULL);
//		HAL_UART_Receive_IT(&huart2, uart2_buffer, 1);
      newInstruction.startDelimiter = uart2_buffer[11];
 8001bc6:	4b1a      	ldr	r3, [pc, #104]	; (8001c30 <HAL_UART_RxCpltCallback+0x188>)
 8001bc8:	7ada      	ldrb	r2, [r3, #11]
 8001bca:	4b1a      	ldr	r3, [pc, #104]	; (8001c34 <HAL_UART_RxCpltCallback+0x18c>)
 8001bcc:	701a      	strb	r2, [r3, #0]
 8001bce:	4b18      	ldr	r3, [pc, #96]	; (8001c30 <HAL_UART_RxCpltCallback+0x188>)
 8001bd0:	681b      	ldr	r3, [r3, #0]

      memcpy(&newInstruction.xCoord, &uart2_buffer[0], sizeof(float));
 8001bd2:	4a18      	ldr	r2, [pc, #96]	; (8001c34 <HAL_UART_RxCpltCallback+0x18c>)
 8001bd4:	f8c2 3001 	str.w	r3, [r2, #1]
 8001bd8:	4b15      	ldr	r3, [pc, #84]	; (8001c30 <HAL_UART_RxCpltCallback+0x188>)
 8001bda:	685b      	ldr	r3, [r3, #4]
      memcpy(&newInstruction.yCoord, &uart2_buffer[4], sizeof(float));
 8001bdc:	4a15      	ldr	r2, [pc, #84]	; (8001c34 <HAL_UART_RxCpltCallback+0x18c>)
 8001bde:	f8c2 3005 	str.w	r3, [r2, #5]

      newInstruction.sensorControl = uart2_buffer[8];
 8001be2:	4b13      	ldr	r3, [pc, #76]	; (8001c30 <HAL_UART_RxCpltCallback+0x188>)
 8001be4:	7a1a      	ldrb	r2, [r3, #8]
 8001be6:	4b13      	ldr	r3, [pc, #76]	; (8001c34 <HAL_UART_RxCpltCallback+0x18c>)
 8001be8:	725a      	strb	r2, [r3, #9]
      newInstruction.endDelimiter = uart2_buffer[9];
 8001bea:	4b11      	ldr	r3, [pc, #68]	; (8001c30 <HAL_UART_RxCpltCallback+0x188>)
 8001bec:	7a5a      	ldrb	r2, [r3, #9]
 8001bee:	4b11      	ldr	r3, [pc, #68]	; (8001c34 <HAL_UART_RxCpltCallback+0x18c>)
 8001bf0:	729a      	strb	r2, [r3, #10]
//		xQueueSendFromISR(uart2QueueHandle, &msg, NULL);

		  xTaskResumeFromISR(NavigationTaskHandle);
 8001bf2:	4b11      	ldr	r3, [pc, #68]	; (8001c38 <HAL_UART_RxCpltCallback+0x190>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f006 fb0c 	bl	8008214 <xTaskResumeFromISR>

      // Prepare to receive the next character
      HAL_UART_Receive_DMA(&huart2, uart2_buffer, sizeof(uart2_buffer));
 8001bfc:	220b      	movs	r2, #11
 8001bfe:	490c      	ldr	r1, [pc, #48]	; (8001c30 <HAL_UART_RxCpltCallback+0x188>)
 8001c00:	480e      	ldr	r0, [pc, #56]	; (8001c3c <HAL_UART_RxCpltCallback+0x194>)
 8001c02:	f003 fbcf 	bl	80053a4 <HAL_UART_Receive_DMA>
	}
}
 8001c06:	e7ff      	b.n	8001c08 <HAL_UART_RxCpltCallback+0x160>
 8001c08:	bf00      	nop
 8001c0a:	3708      	adds	r7, #8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	40013800 	.word	0x40013800
 8001c14:	200003e4 	.word	0x200003e4
 8001c18:	200003d0 	.word	0x200003d0
 8001c1c:	20000258 	.word	0x20000258
 8001c20:	200003e6 	.word	0x200003e6
 8001c24:	200003e8 	.word	0x200003e8
 8001c28:	200003c8 	.word	0x200003c8
 8001c2c:	40004400 	.word	0x40004400
 8001c30:	200003d4 	.word	0x200003d4
 8001c34:	20000408 	.word	0x20000408
 8001c38:	200003c4 	.word	0x200003c4
 8001c3c:	200002e0 	.word	0x200002e0

08001c40 <printSensorMeasurements>:



void printSensorMeasurements(SensorMeasurements measurements) {
 8001c40:	b590      	push	{r4, r7, lr}
 8001c42:	b087      	sub	sp, #28
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	7138      	strb	r0, [r7, #4]
    const char* measurementStrings[] = {"?","No", "Yes", "Optional"};
 8001c48:	4b1e      	ldr	r3, [pc, #120]	; (8001cc4 <printSensorMeasurements+0x84>)
 8001c4a:	f107 0408 	add.w	r4, r7, #8
 8001c4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c50:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    printf("\nTemperature: %s\n", measurementStrings[measurements.temperature]);
 8001c54:	793b      	ldrb	r3, [r7, #4]
 8001c56:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	3318      	adds	r3, #24
 8001c60:	443b      	add	r3, r7
 8001c62:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8001c66:	4619      	mov	r1, r3
 8001c68:	4817      	ldr	r0, [pc, #92]	; (8001cc8 <printSensorMeasurements+0x88>)
 8001c6a:	f008 fd2f 	bl	800a6cc <iprintf>
    printf("Humidity: %s\n", measurementStrings[measurements.humidity]);
 8001c6e:	793b      	ldrb	r3, [r7, #4]
 8001c70:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	3318      	adds	r3, #24
 8001c7a:	443b      	add	r3, r7
 8001c7c:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8001c80:	4619      	mov	r1, r3
 8001c82:	4812      	ldr	r0, [pc, #72]	; (8001ccc <printSensorMeasurements+0x8c>)
 8001c84:	f008 fd22 	bl	800a6cc <iprintf>
    printf("Visible Light: %s\n", measurementStrings[measurements.visibleLight]);
 8001c88:	793b      	ldrb	r3, [r7, #4]
 8001c8a:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	3318      	adds	r3, #24
 8001c94:	443b      	add	r3, r7
 8001c96:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	480c      	ldr	r0, [pc, #48]	; (8001cd0 <printSensorMeasurements+0x90>)
 8001c9e:	f008 fd15 	bl	800a6cc <iprintf>
    printf("Infrared: %s\n", measurementStrings[measurements.infrared]);
 8001ca2:	793b      	ldrb	r3, [r7, #4]
 8001ca4:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	3318      	adds	r3, #24
 8001cae:	443b      	add	r3, r7
 8001cb0:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4807      	ldr	r0, [pc, #28]	; (8001cd4 <printSensorMeasurements+0x94>)
 8001cb8:	f008 fd08 	bl	800a6cc <iprintf>
}
 8001cbc:	bf00      	nop
 8001cbe:	371c      	adds	r7, #28
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd90      	pop	{r4, r7, pc}
 8001cc4:	0800d2c0 	.word	0x0800d2c0
 8001cc8:	0800d260 	.word	0x0800d260
 8001ccc:	0800d274 	.word	0x0800d274
 8001cd0:	0800d284 	.word	0x0800d284
 8001cd4:	0800d298 	.word	0x0800d298

08001cd8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  HAL_UART_Receive_IT(&huart2, uart2_buffer, 1);
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	4908      	ldr	r1, [pc, #32]	; (8001d04 <StartDefaultTask+0x2c>)
 8001ce4:	4808      	ldr	r0, [pc, #32]	; (8001d08 <StartDefaultTask+0x30>)
 8001ce6:	f003 fb11 	bl	800530c <HAL_UART_Receive_IT>
  HAL_UART_Receive_DMA(&huart2, uart2_buffer, sizeof(uart2_buffer));
 8001cea:	220b      	movs	r2, #11
 8001cec:	4905      	ldr	r1, [pc, #20]	; (8001d04 <StartDefaultTask+0x2c>)
 8001cee:	4806      	ldr	r0, [pc, #24]	; (8001d08 <StartDefaultTask+0x30>)
 8001cf0:	f003 fb58 	bl	80053a4 <HAL_UART_Receive_DMA>
  // HAL_UART_Receive_IT(&huart1, uart1_buffer, 1);
  printf("Setup complete\n");
 8001cf4:	4805      	ldr	r0, [pc, #20]	; (8001d0c <StartDefaultTask+0x34>)
 8001cf6:	f008 fd4f 	bl	800a798 <puts>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001cfa:	2001      	movs	r0, #1
 8001cfc:	f005 f95a 	bl	8006fb4 <osDelay>
 8001d00:	e7fb      	b.n	8001cfa <StartDefaultTask+0x22>
 8001d02:	bf00      	nop
 8001d04:	200003d4 	.word	0x200003d4
 8001d08:	200002e0 	.word	0x200002e0
 8001d0c:	0800d250 	.word	0x0800d250

08001d10 <UART2_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UART2_Task */
void UART2_Task(void *argument)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
//        targetMeasurements = *(SensorMeasurements*)&receivedMessage.sensorControl;
//        printSensorMeasurements(targetMeasurements);
//        printf("Received message with x: %f, y: %f\n", targetX, targetY);
//      }
//    }
	  osDelay(10000);
 8001d18:	f242 7010 	movw	r0, #10000	; 0x2710
 8001d1c:	f005 f94a 	bl	8006fb4 <osDelay>
 8001d20:	e7fa      	b.n	8001d18 <UART2_Task+0x8>

08001d22 <UART1_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UART1_Task */
void UART1_Task(void *argument)
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b082      	sub	sp, #8
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART1_Task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001d2a:	2001      	movs	r0, #1
 8001d2c:	f005 f942 	bl	8006fb4 <osDelay>
 8001d30:	e7fb      	b.n	8001d2a <UART1_Task+0x8>
	...

08001d34 <LightSensorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LightSensorTask */
void LightSensorTask(void *argument)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LightSensorTask */
	LTR329_Init();
 8001d3c:	f7ff f94e 	bl	8000fdc <LTR329_Init>
	/* Infinite loop */
	  for(;;)
	  {
		// Read light data
		LTR329_Read_Light(&light_ch0, &light_ch1);
 8001d40:	4906      	ldr	r1, [pc, #24]	; (8001d5c <LightSensorTask+0x28>)
 8001d42:	4807      	ldr	r0, [pc, #28]	; (8001d60 <LightSensorTask+0x2c>)
 8001d44:	f7ff f970 	bl	8001028 <LTR329_Read_Light>
//		if (verbose) printf("Light Ch0: %d \n Light Ch1: %d\n________\n\n",light_ch0,light_ch1);
		sendLightSensorData(light_ch0);
 8001d48:	4b05      	ldr	r3, [pc, #20]	; (8001d60 <LightSensorTask+0x2c>)
 8001d4a:	881b      	ldrh	r3, [r3, #0]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff f933 	bl	8000fb8 <sendLightSensorData>
		osDelay(2000);
 8001d52:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001d56:	f005 f92d 	bl	8006fb4 <osDelay>
		LTR329_Read_Light(&light_ch0, &light_ch1);
 8001d5a:	e7f1      	b.n	8001d40 <LightSensorTask+0xc>
 8001d5c:	200003e2 	.word	0x200003e2
 8001d60:	200003e0 	.word	0x200003e0

08001d64 <TempTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TempTask */
void TempTask(void *argument)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TempTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001d6c:	2001      	movs	r0, #1
 8001d6e:	f005 f921 	bl	8006fb4 <osDelay>
 8001d72:	e7fb      	b.n	8001d6c <TempTask+0x8>

08001d74 <StartNavigationTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartNavigationTask */
void StartNavigationTask(void *argument)
{
 8001d74:	b5b0      	push	{r4, r5, r7, lr}
 8001d76:	b08c      	sub	sp, #48	; 0x30
 8001d78:	af02      	add	r7, sp, #8
 8001d7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartNavigationTask */
  /* Infinite loop */
  for(;;)
  {
	  if (newInstruction.startDelimiter == START_DELIMITER && newInstruction.endDelimiter == END_DELIMITER)
 8001d7c:	4b2b      	ldr	r3, [pc, #172]	; (8001e2c <StartNavigationTask+0xb8>)
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	2b5b      	cmp	r3, #91	; 0x5b
 8001d82:	d14f      	bne.n	8001e24 <StartNavigationTask+0xb0>
 8001d84:	4b29      	ldr	r3, [pc, #164]	; (8001e2c <StartNavigationTask+0xb8>)
 8001d86:	7a9b      	ldrb	r3, [r3, #10]
 8001d88:	2b5d      	cmp	r3, #93	; 0x5d
 8001d8a:	d14b      	bne.n	8001e24 <StartNavigationTask+0xb0>
		{
		  targetX = newInstruction.xCoord;
 8001d8c:	4b27      	ldr	r3, [pc, #156]	; (8001e2c <StartNavigationTask+0xb8>)
 8001d8e:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8001d92:	4a27      	ldr	r2, [pc, #156]	; (8001e30 <StartNavigationTask+0xbc>)
 8001d94:	6013      	str	r3, [r2, #0]
		  targetY = newInstruction.yCoord;
 8001d96:	4b25      	ldr	r3, [pc, #148]	; (8001e2c <StartNavigationTask+0xb8>)
 8001d98:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8001d9c:	4a25      	ldr	r2, [pc, #148]	; (8001e34 <StartNavigationTask+0xc0>)
 8001d9e:	6013      	str	r3, [r2, #0]
		  targetMeasurements = *(SensorMeasurements*)&newInstruction.sensorControl;
 8001da0:	4b25      	ldr	r3, [pc, #148]	; (8001e38 <StartNavigationTask+0xc4>)
 8001da2:	4a26      	ldr	r2, [pc, #152]	; (8001e3c <StartNavigationTask+0xc8>)
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	7013      	strb	r3, [r2, #0]
		  printf("Received message with x: %f, y: %f\n", targetX, targetY);
 8001da8:	4b21      	ldr	r3, [pc, #132]	; (8001e30 <StartNavigationTask+0xbc>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7fe fbcb 	bl	8000548 <__aeabi_f2d>
 8001db2:	4604      	mov	r4, r0
 8001db4:	460d      	mov	r5, r1
 8001db6:	4b1f      	ldr	r3, [pc, #124]	; (8001e34 <StartNavigationTask+0xc0>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7fe fbc4 	bl	8000548 <__aeabi_f2d>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	e9cd 2300 	strd	r2, r3, [sp]
 8001dc8:	4622      	mov	r2, r4
 8001dca:	462b      	mov	r3, r5
 8001dcc:	481c      	ldr	r0, [pc, #112]	; (8001e40 <StartNavigationTask+0xcc>)
 8001dce:	f008 fc7d 	bl	800a6cc <iprintf>
		  navigationInstruction instructions[INSTRUCTION_BUFFER_SIZE];
		  uint8_t instructionCnt = calculatePath(instructions);
 8001dd2:	f107 030c 	add.w	r3, r7, #12
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7ff f966 	bl	80010a8 <calculatePath>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		  transmitInstructions(instructions, instructionCnt);
 8001de2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001de6:	f107 030c 	add.w	r3, r7, #12
 8001dea:	4611      	mov	r1, r2
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff fa87 	bl	8001300 <transmitInstructions>
		  printSensorMeasurements(targetMeasurements);
 8001df2:	4b12      	ldr	r3, [pc, #72]	; (8001e3c <StartNavigationTask+0xc8>)
 8001df4:	7818      	ldrb	r0, [r3, #0]
 8001df6:	f7ff ff23 	bl	8001c40 <printSensorMeasurements>
		  printf("Received message with x: %f, y: %f\n", targetX, targetY);
 8001dfa:	4b0d      	ldr	r3, [pc, #52]	; (8001e30 <StartNavigationTask+0xbc>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7fe fba2 	bl	8000548 <__aeabi_f2d>
 8001e04:	4604      	mov	r4, r0
 8001e06:	460d      	mov	r5, r1
 8001e08:	4b0a      	ldr	r3, [pc, #40]	; (8001e34 <StartNavigationTask+0xc0>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7fe fb9b 	bl	8000548 <__aeabi_f2d>
 8001e12:	4602      	mov	r2, r0
 8001e14:	460b      	mov	r3, r1
 8001e16:	e9cd 2300 	strd	r2, r3, [sp]
 8001e1a:	4622      	mov	r2, r4
 8001e1c:	462b      	mov	r3, r5
 8001e1e:	4808      	ldr	r0, [pc, #32]	; (8001e40 <StartNavigationTask+0xcc>)
 8001e20:	f008 fc54 	bl	800a6cc <iprintf>
		}
		vTaskSuspend(NULL);
 8001e24:	2000      	movs	r0, #0
 8001e26:	f006 f94d 	bl	80080c4 <vTaskSuspend>
	  if (newInstruction.startDelimiter == START_DELIMITER && newInstruction.endDelimiter == END_DELIMITER)
 8001e2a:	e7a7      	b.n	8001d7c <StartNavigationTask+0x8>
 8001e2c:	20000408 	.word	0x20000408
 8001e30:	200003f8 	.word	0x200003f8
 8001e34:	200003fc 	.word	0x200003fc
 8001e38:	20000411 	.word	0x20000411
 8001e3c:	20000404 	.word	0x20000404
 8001e40:	0800d2d0 	.word	0x0800d2d0

08001e44 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a04      	ldr	r2, [pc, #16]	; (8001e64 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d101      	bne.n	8001e5a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001e56:	f000 fb35 	bl	80024c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001e5a:	bf00      	nop
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	40001000 	.word	0x40001000

08001e68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e6c:	b672      	cpsid	i
}
 8001e6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e70:	e7fe      	b.n	8001e70 <Error_Handler+0x8>
	...

08001e74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e7a:	4b11      	ldr	r3, [pc, #68]	; (8001ec0 <HAL_MspInit+0x4c>)
 8001e7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e7e:	4a10      	ldr	r2, [pc, #64]	; (8001ec0 <HAL_MspInit+0x4c>)
 8001e80:	f043 0301 	orr.w	r3, r3, #1
 8001e84:	6613      	str	r3, [r2, #96]	; 0x60
 8001e86:	4b0e      	ldr	r3, [pc, #56]	; (8001ec0 <HAL_MspInit+0x4c>)
 8001e88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	607b      	str	r3, [r7, #4]
 8001e90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e92:	4b0b      	ldr	r3, [pc, #44]	; (8001ec0 <HAL_MspInit+0x4c>)
 8001e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e96:	4a0a      	ldr	r2, [pc, #40]	; (8001ec0 <HAL_MspInit+0x4c>)
 8001e98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e9c:	6593      	str	r3, [r2, #88]	; 0x58
 8001e9e:	4b08      	ldr	r3, [pc, #32]	; (8001ec0 <HAL_MspInit+0x4c>)
 8001ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea6:	603b      	str	r3, [r7, #0]
 8001ea8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001eaa:	2200      	movs	r2, #0
 8001eac:	210f      	movs	r1, #15
 8001eae:	f06f 0001 	mvn.w	r0, #1
 8001eb2:	f000 fbdf 	bl	8002674 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eb6:	bf00      	nop
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	40021000 	.word	0x40021000

08001ec4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b096      	sub	sp, #88	; 0x58
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ecc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	605a      	str	r2, [r3, #4]
 8001ed6:	609a      	str	r2, [r3, #8]
 8001ed8:	60da      	str	r2, [r3, #12]
 8001eda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001edc:	f107 0310 	add.w	r3, r7, #16
 8001ee0:	2234      	movs	r2, #52	; 0x34
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f008 fc5f 	bl	800a7a8 <memset>
  if(hi2c->Instance==I2C1)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a1f      	ldr	r2, [pc, #124]	; (8001f6c <HAL_I2C_MspInit+0xa8>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d137      	bne.n	8001f64 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001ef4:	2340      	movs	r3, #64	; 0x40
 8001ef6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001efc:	f107 0310 	add.w	r3, r7, #16
 8001f00:	4618      	mov	r0, r3
 8001f02:	f002 fd33 	bl	800496c <HAL_RCCEx_PeriphCLKConfig>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001f0c:	f7ff ffac 	bl	8001e68 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f10:	4b17      	ldr	r3, [pc, #92]	; (8001f70 <HAL_I2C_MspInit+0xac>)
 8001f12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f14:	4a16      	ldr	r2, [pc, #88]	; (8001f70 <HAL_I2C_MspInit+0xac>)
 8001f16:	f043 0301 	orr.w	r3, r3, #1
 8001f1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f1c:	4b14      	ldr	r3, [pc, #80]	; (8001f70 <HAL_I2C_MspInit+0xac>)
 8001f1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f20:	f003 0301 	and.w	r3, r3, #1
 8001f24:	60fb      	str	r3, [r7, #12]
 8001f26:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001f28:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001f2c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f2e:	2312      	movs	r3, #18
 8001f30:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f32:	2300      	movs	r3, #0
 8001f34:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f36:	2303      	movs	r3, #3
 8001f38:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f3a:	2304      	movs	r3, #4
 8001f3c:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f3e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001f42:	4619      	mov	r1, r3
 8001f44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f48:	f000 fe40 	bl	8002bcc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f4c:	4b08      	ldr	r3, [pc, #32]	; (8001f70 <HAL_I2C_MspInit+0xac>)
 8001f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f50:	4a07      	ldr	r2, [pc, #28]	; (8001f70 <HAL_I2C_MspInit+0xac>)
 8001f52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f56:	6593      	str	r3, [r2, #88]	; 0x58
 8001f58:	4b05      	ldr	r3, [pc, #20]	; (8001f70 <HAL_I2C_MspInit+0xac>)
 8001f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f60:	60bb      	str	r3, [r7, #8]
 8001f62:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001f64:	bf00      	nop
 8001f66:	3758      	adds	r7, #88	; 0x58
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	40005400 	.word	0x40005400
 8001f70:	40021000 	.word	0x40021000

08001f74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b098      	sub	sp, #96	; 0x60
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f7c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	605a      	str	r2, [r3, #4]
 8001f86:	609a      	str	r2, [r3, #8]
 8001f88:	60da      	str	r2, [r3, #12]
 8001f8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f8c:	f107 0318 	add.w	r3, r7, #24
 8001f90:	2234      	movs	r2, #52	; 0x34
 8001f92:	2100      	movs	r1, #0
 8001f94:	4618      	mov	r0, r3
 8001f96:	f008 fc07 	bl	800a7a8 <memset>
  if(huart->Instance==USART1)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a5a      	ldr	r2, [pc, #360]	; (8002108 <HAL_UART_MspInit+0x194>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d168      	bne.n	8002076 <HAL_UART_MspInit+0x102>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fac:	f107 0318 	add.w	r3, r7, #24
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f002 fcdb 	bl	800496c <HAL_RCCEx_PeriphCLKConfig>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d001      	beq.n	8001fc0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001fbc:	f7ff ff54 	bl	8001e68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fc0:	4b52      	ldr	r3, [pc, #328]	; (800210c <HAL_UART_MspInit+0x198>)
 8001fc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fc4:	4a51      	ldr	r2, [pc, #324]	; (800210c <HAL_UART_MspInit+0x198>)
 8001fc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fca:	6613      	str	r3, [r2, #96]	; 0x60
 8001fcc:	4b4f      	ldr	r3, [pc, #316]	; (800210c <HAL_UART_MspInit+0x198>)
 8001fce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fd4:	617b      	str	r3, [r7, #20]
 8001fd6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fd8:	4b4c      	ldr	r3, [pc, #304]	; (800210c <HAL_UART_MspInit+0x198>)
 8001fda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fdc:	4a4b      	ldr	r2, [pc, #300]	; (800210c <HAL_UART_MspInit+0x198>)
 8001fde:	f043 0302 	orr.w	r3, r3, #2
 8001fe2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fe4:	4b49      	ldr	r3, [pc, #292]	; (800210c <HAL_UART_MspInit+0x198>)
 8001fe6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe8:	f003 0302 	and.w	r3, r3, #2
 8001fec:	613b      	str	r3, [r7, #16]
 8001fee:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ff0:	23c0      	movs	r3, #192	; 0xc0
 8001ff2:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002000:	2307      	movs	r3, #7
 8002002:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002004:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002008:	4619      	mov	r1, r3
 800200a:	4841      	ldr	r0, [pc, #260]	; (8002110 <HAL_UART_MspInit+0x19c>)
 800200c:	f000 fdde 	bl	8002bcc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002010:	4b40      	ldr	r3, [pc, #256]	; (8002114 <HAL_UART_MspInit+0x1a0>)
 8002012:	4a41      	ldr	r2, [pc, #260]	; (8002118 <HAL_UART_MspInit+0x1a4>)
 8002014:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8002016:	4b3f      	ldr	r3, [pc, #252]	; (8002114 <HAL_UART_MspInit+0x1a0>)
 8002018:	2202      	movs	r2, #2
 800201a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800201c:	4b3d      	ldr	r3, [pc, #244]	; (8002114 <HAL_UART_MspInit+0x1a0>)
 800201e:	2200      	movs	r2, #0
 8002020:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002022:	4b3c      	ldr	r3, [pc, #240]	; (8002114 <HAL_UART_MspInit+0x1a0>)
 8002024:	2200      	movs	r2, #0
 8002026:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002028:	4b3a      	ldr	r3, [pc, #232]	; (8002114 <HAL_UART_MspInit+0x1a0>)
 800202a:	2280      	movs	r2, #128	; 0x80
 800202c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800202e:	4b39      	ldr	r3, [pc, #228]	; (8002114 <HAL_UART_MspInit+0x1a0>)
 8002030:	2200      	movs	r2, #0
 8002032:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002034:	4b37      	ldr	r3, [pc, #220]	; (8002114 <HAL_UART_MspInit+0x1a0>)
 8002036:	2200      	movs	r2, #0
 8002038:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800203a:	4b36      	ldr	r3, [pc, #216]	; (8002114 <HAL_UART_MspInit+0x1a0>)
 800203c:	2200      	movs	r2, #0
 800203e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002040:	4b34      	ldr	r3, [pc, #208]	; (8002114 <HAL_UART_MspInit+0x1a0>)
 8002042:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002046:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002048:	4832      	ldr	r0, [pc, #200]	; (8002114 <HAL_UART_MspInit+0x1a0>)
 800204a:	f000 fb3d 	bl	80026c8 <HAL_DMA_Init>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 8002054:	f7ff ff08 	bl	8001e68 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4a2e      	ldr	r2, [pc, #184]	; (8002114 <HAL_UART_MspInit+0x1a0>)
 800205c:	675a      	str	r2, [r3, #116]	; 0x74
 800205e:	4a2d      	ldr	r2, [pc, #180]	; (8002114 <HAL_UART_MspInit+0x1a0>)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002064:	2200      	movs	r2, #0
 8002066:	2105      	movs	r1, #5
 8002068:	2025      	movs	r0, #37	; 0x25
 800206a:	f000 fb03 	bl	8002674 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800206e:	2025      	movs	r0, #37	; 0x25
 8002070:	f000 fb1c 	bl	80026ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002074:	e043      	b.n	80020fe <HAL_UART_MspInit+0x18a>
  else if(huart->Instance==USART2)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a28      	ldr	r2, [pc, #160]	; (800211c <HAL_UART_MspInit+0x1a8>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d13e      	bne.n	80020fe <HAL_UART_MspInit+0x18a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002080:	2302      	movs	r3, #2
 8002082:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002084:	2300      	movs	r3, #0
 8002086:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002088:	f107 0318 	add.w	r3, r7, #24
 800208c:	4618      	mov	r0, r3
 800208e:	f002 fc6d 	bl	800496c <HAL_RCCEx_PeriphCLKConfig>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <HAL_UART_MspInit+0x128>
      Error_Handler();
 8002098:	f7ff fee6 	bl	8001e68 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800209c:	4b1b      	ldr	r3, [pc, #108]	; (800210c <HAL_UART_MspInit+0x198>)
 800209e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a0:	4a1a      	ldr	r2, [pc, #104]	; (800210c <HAL_UART_MspInit+0x198>)
 80020a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020a6:	6593      	str	r3, [r2, #88]	; 0x58
 80020a8:	4b18      	ldr	r3, [pc, #96]	; (800210c <HAL_UART_MspInit+0x198>)
 80020aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b0:	60fb      	str	r3, [r7, #12]
 80020b2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020b4:	4b15      	ldr	r3, [pc, #84]	; (800210c <HAL_UART_MspInit+0x198>)
 80020b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020b8:	4a14      	ldr	r2, [pc, #80]	; (800210c <HAL_UART_MspInit+0x198>)
 80020ba:	f043 0301 	orr.w	r3, r3, #1
 80020be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020c0:	4b12      	ldr	r3, [pc, #72]	; (800210c <HAL_UART_MspInit+0x198>)
 80020c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	60bb      	str	r3, [r7, #8]
 80020ca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80020cc:	230c      	movs	r3, #12
 80020ce:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d0:	2302      	movs	r3, #2
 80020d2:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d4:	2300      	movs	r3, #0
 80020d6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020d8:	2303      	movs	r3, #3
 80020da:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020dc:	2307      	movs	r3, #7
 80020de:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020e0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80020e4:	4619      	mov	r1, r3
 80020e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020ea:	f000 fd6f 	bl	8002bcc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80020ee:	2200      	movs	r2, #0
 80020f0:	2105      	movs	r1, #5
 80020f2:	2026      	movs	r0, #38	; 0x26
 80020f4:	f000 fabe 	bl	8002674 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80020f8:	2026      	movs	r0, #38	; 0x26
 80020fa:	f000 fad7 	bl	80026ac <HAL_NVIC_EnableIRQ>
}
 80020fe:	bf00      	nop
 8002100:	3760      	adds	r7, #96	; 0x60
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	40013800 	.word	0x40013800
 800210c:	40021000 	.word	0x40021000
 8002110:	48000400 	.word	0x48000400
 8002114:	20000368 	.word	0x20000368
 8002118:	40020058 	.word	0x40020058
 800211c:	40004400 	.word	0x40004400

08002120 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b08e      	sub	sp, #56	; 0x38
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002128:	2300      	movs	r3, #0
 800212a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800212e:	4b34      	ldr	r3, [pc, #208]	; (8002200 <HAL_InitTick+0xe0>)
 8002130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002132:	4a33      	ldr	r2, [pc, #204]	; (8002200 <HAL_InitTick+0xe0>)
 8002134:	f043 0310 	orr.w	r3, r3, #16
 8002138:	6593      	str	r3, [r2, #88]	; 0x58
 800213a:	4b31      	ldr	r3, [pc, #196]	; (8002200 <HAL_InitTick+0xe0>)
 800213c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800213e:	f003 0310 	and.w	r3, r3, #16
 8002142:	60fb      	str	r3, [r7, #12]
 8002144:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002146:	f107 0210 	add.w	r2, r7, #16
 800214a:	f107 0314 	add.w	r3, r7, #20
 800214e:	4611      	mov	r1, r2
 8002150:	4618      	mov	r0, r3
 8002152:	f002 fb79 	bl	8004848 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002156:	6a3b      	ldr	r3, [r7, #32]
 8002158:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800215a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800215c:	2b00      	cmp	r3, #0
 800215e:	d103      	bne.n	8002168 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002160:	f002 fb46 	bl	80047f0 <HAL_RCC_GetPCLK1Freq>
 8002164:	6378      	str	r0, [r7, #52]	; 0x34
 8002166:	e004      	b.n	8002172 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002168:	f002 fb42 	bl	80047f0 <HAL_RCC_GetPCLK1Freq>
 800216c:	4603      	mov	r3, r0
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002174:	4a23      	ldr	r2, [pc, #140]	; (8002204 <HAL_InitTick+0xe4>)
 8002176:	fba2 2303 	umull	r2, r3, r2, r3
 800217a:	0c9b      	lsrs	r3, r3, #18
 800217c:	3b01      	subs	r3, #1
 800217e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002180:	4b21      	ldr	r3, [pc, #132]	; (8002208 <HAL_InitTick+0xe8>)
 8002182:	4a22      	ldr	r2, [pc, #136]	; (800220c <HAL_InitTick+0xec>)
 8002184:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002186:	4b20      	ldr	r3, [pc, #128]	; (8002208 <HAL_InitTick+0xe8>)
 8002188:	f240 32e7 	movw	r2, #999	; 0x3e7
 800218c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800218e:	4a1e      	ldr	r2, [pc, #120]	; (8002208 <HAL_InitTick+0xe8>)
 8002190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002192:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002194:	4b1c      	ldr	r3, [pc, #112]	; (8002208 <HAL_InitTick+0xe8>)
 8002196:	2200      	movs	r2, #0
 8002198:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800219a:	4b1b      	ldr	r3, [pc, #108]	; (8002208 <HAL_InitTick+0xe8>)
 800219c:	2200      	movs	r2, #0
 800219e:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021a0:	4b19      	ldr	r3, [pc, #100]	; (8002208 <HAL_InitTick+0xe8>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80021a6:	4818      	ldr	r0, [pc, #96]	; (8002208 <HAL_InitTick+0xe8>)
 80021a8:	f002 fd76 	bl	8004c98 <HAL_TIM_Base_Init>
 80021ac:	4603      	mov	r3, r0
 80021ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80021b2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d11b      	bne.n	80021f2 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80021ba:	4813      	ldr	r0, [pc, #76]	; (8002208 <HAL_InitTick+0xe8>)
 80021bc:	f002 fdce 	bl	8004d5c <HAL_TIM_Base_Start_IT>
 80021c0:	4603      	mov	r3, r0
 80021c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80021c6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d111      	bne.n	80021f2 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80021ce:	2036      	movs	r0, #54	; 0x36
 80021d0:	f000 fa6c 	bl	80026ac <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2b0f      	cmp	r3, #15
 80021d8:	d808      	bhi.n	80021ec <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 80021da:	2200      	movs	r2, #0
 80021dc:	6879      	ldr	r1, [r7, #4]
 80021de:	2036      	movs	r0, #54	; 0x36
 80021e0:	f000 fa48 	bl	8002674 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021e4:	4a0a      	ldr	r2, [pc, #40]	; (8002210 <HAL_InitTick+0xf0>)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6013      	str	r3, [r2, #0]
 80021ea:	e002      	b.n	80021f2 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80021f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3738      	adds	r7, #56	; 0x38
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	40021000 	.word	0x40021000
 8002204:	431bde83 	.word	0x431bde83
 8002208:	20000414 	.word	0x20000414
 800220c:	40001000 	.word	0x40001000
 8002210:	20000004 	.word	0x20000004

08002214 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002218:	e7fe      	b.n	8002218 <NMI_Handler+0x4>

0800221a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800221a:	b480      	push	{r7}
 800221c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800221e:	e7fe      	b.n	800221e <HardFault_Handler+0x4>

08002220 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002224:	e7fe      	b.n	8002224 <MemManage_Handler+0x4>

08002226 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002226:	b480      	push	{r7}
 8002228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800222a:	e7fe      	b.n	800222a <BusFault_Handler+0x4>

0800222c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002230:	e7fe      	b.n	8002230 <UsageFault_Handler+0x4>

08002232 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002232:	b480      	push	{r7}
 8002234:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002236:	bf00      	nop
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002244:	4802      	ldr	r0, [pc, #8]	; (8002250 <DMA1_Channel5_IRQHandler+0x10>)
 8002246:	f000 fbd6 	bl	80029f6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800224a:	bf00      	nop
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	20000368 	.word	0x20000368

08002254 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002258:	4802      	ldr	r0, [pc, #8]	; (8002264 <USART1_IRQHandler+0x10>)
 800225a:	f003 f981 	bl	8005560 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800225e:	bf00      	nop
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	20000258 	.word	0x20000258

08002268 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800226c:	4802      	ldr	r0, [pc, #8]	; (8002278 <USART2_IRQHandler+0x10>)
 800226e:	f003 f977 	bl	8005560 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002272:	bf00      	nop
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	200002e0 	.word	0x200002e0

0800227c <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002280:	4802      	ldr	r0, [pc, #8]	; (800228c <TIM6_IRQHandler+0x10>)
 8002282:	f002 fdbf 	bl	8004e04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8002286:	bf00      	nop
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	20000414 	.word	0x20000414

08002290 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  return 1;
 8002294:	2301      	movs	r3, #1
}
 8002296:	4618      	mov	r0, r3
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <_kill>:

int _kill(int pid, int sig)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80022aa:	f008 fadf 	bl	800a86c <__errno>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2216      	movs	r2, #22
 80022b2:	601a      	str	r2, [r3, #0]
  return -1;
 80022b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3708      	adds	r7, #8
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <_exit>:

void _exit (int status)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80022c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f7ff ffe7 	bl	80022a0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80022d2:	e7fe      	b.n	80022d2 <_exit+0x12>

080022d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022e0:	2300      	movs	r3, #0
 80022e2:	617b      	str	r3, [r7, #20]
 80022e4:	e00a      	b.n	80022fc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80022e6:	f3af 8000 	nop.w
 80022ea:	4601      	mov	r1, r0
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	1c5a      	adds	r2, r3, #1
 80022f0:	60ba      	str	r2, [r7, #8]
 80022f2:	b2ca      	uxtb	r2, r1
 80022f4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	3301      	adds	r3, #1
 80022fa:	617b      	str	r3, [r7, #20]
 80022fc:	697a      	ldr	r2, [r7, #20]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	429a      	cmp	r2, r3
 8002302:	dbf0      	blt.n	80022e6 <_read+0x12>
  }

  return len;
 8002304:	687b      	ldr	r3, [r7, #4]
}
 8002306:	4618      	mov	r0, r3
 8002308:	3718      	adds	r7, #24
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800230e:	b580      	push	{r7, lr}
 8002310:	b086      	sub	sp, #24
 8002312:	af00      	add	r7, sp, #0
 8002314:	60f8      	str	r0, [r7, #12]
 8002316:	60b9      	str	r1, [r7, #8]
 8002318:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800231a:	2300      	movs	r3, #0
 800231c:	617b      	str	r3, [r7, #20]
 800231e:	e009      	b.n	8002334 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	1c5a      	adds	r2, r3, #1
 8002324:	60ba      	str	r2, [r7, #8]
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	4618      	mov	r0, r3
 800232a:	f7fe fea9 	bl	8001080 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	3301      	adds	r3, #1
 8002332:	617b      	str	r3, [r7, #20]
 8002334:	697a      	ldr	r2, [r7, #20]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	429a      	cmp	r2, r3
 800233a:	dbf1      	blt.n	8002320 <_write+0x12>
  }
  return len;
 800233c:	687b      	ldr	r3, [r7, #4]
}
 800233e:	4618      	mov	r0, r3
 8002340:	3718      	adds	r7, #24
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <_close>:

int _close(int file)
{
 8002346:	b480      	push	{r7}
 8002348:	b083      	sub	sp, #12
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800234e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002352:	4618      	mov	r0, r3
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr

0800235e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800235e:	b480      	push	{r7}
 8002360:	b083      	sub	sp, #12
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
 8002366:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800236e:	605a      	str	r2, [r3, #4]
  return 0;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr

0800237e <_isatty>:

int _isatty(int file)
{
 800237e:	b480      	push	{r7}
 8002380:	b083      	sub	sp, #12
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002386:	2301      	movs	r3, #1
}
 8002388:	4618      	mov	r0, r3
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002394:	b480      	push	{r7}
 8002396:	b085      	sub	sp, #20
 8002398:	af00      	add	r7, sp, #0
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3714      	adds	r7, #20
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
	...

080023b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b086      	sub	sp, #24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023b8:	4a14      	ldr	r2, [pc, #80]	; (800240c <_sbrk+0x5c>)
 80023ba:	4b15      	ldr	r3, [pc, #84]	; (8002410 <_sbrk+0x60>)
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023c4:	4b13      	ldr	r3, [pc, #76]	; (8002414 <_sbrk+0x64>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d102      	bne.n	80023d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023cc:	4b11      	ldr	r3, [pc, #68]	; (8002414 <_sbrk+0x64>)
 80023ce:	4a12      	ldr	r2, [pc, #72]	; (8002418 <_sbrk+0x68>)
 80023d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023d2:	4b10      	ldr	r3, [pc, #64]	; (8002414 <_sbrk+0x64>)
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4413      	add	r3, r2
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d207      	bcs.n	80023f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023e0:	f008 fa44 	bl	800a86c <__errno>
 80023e4:	4603      	mov	r3, r0
 80023e6:	220c      	movs	r2, #12
 80023e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023ee:	e009      	b.n	8002404 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023f0:	4b08      	ldr	r3, [pc, #32]	; (8002414 <_sbrk+0x64>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023f6:	4b07      	ldr	r3, [pc, #28]	; (8002414 <_sbrk+0x64>)
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4413      	add	r3, r2
 80023fe:	4a05      	ldr	r2, [pc, #20]	; (8002414 <_sbrk+0x64>)
 8002400:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002402:	68fb      	ldr	r3, [r7, #12]
}
 8002404:	4618      	mov	r0, r3
 8002406:	3718      	adds	r7, #24
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	2000a000 	.word	0x2000a000
 8002410:	00000400 	.word	0x00000400
 8002414:	20000460 	.word	0x20000460
 8002418:	20002728 	.word	0x20002728

0800241c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002420:	4b06      	ldr	r3, [pc, #24]	; (800243c <SystemInit+0x20>)
 8002422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002426:	4a05      	ldr	r2, [pc, #20]	; (800243c <SystemInit+0x20>)
 8002428:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800242c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002430:	bf00      	nop
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	e000ed00 	.word	0xe000ed00

08002440 <Reset_Handler>:
 8002440:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002478 <LoopForever+0x2>
 8002444:	f7ff ffea 	bl	800241c <SystemInit>
 8002448:	480c      	ldr	r0, [pc, #48]	; (800247c <LoopForever+0x6>)
 800244a:	490d      	ldr	r1, [pc, #52]	; (8002480 <LoopForever+0xa>)
 800244c:	4a0d      	ldr	r2, [pc, #52]	; (8002484 <LoopForever+0xe>)
 800244e:	2300      	movs	r3, #0
 8002450:	e002      	b.n	8002458 <LoopCopyDataInit>

08002452 <CopyDataInit>:
 8002452:	58d4      	ldr	r4, [r2, r3]
 8002454:	50c4      	str	r4, [r0, r3]
 8002456:	3304      	adds	r3, #4

08002458 <LoopCopyDataInit>:
 8002458:	18c4      	adds	r4, r0, r3
 800245a:	428c      	cmp	r4, r1
 800245c:	d3f9      	bcc.n	8002452 <CopyDataInit>
 800245e:	4a0a      	ldr	r2, [pc, #40]	; (8002488 <LoopForever+0x12>)
 8002460:	4c0a      	ldr	r4, [pc, #40]	; (800248c <LoopForever+0x16>)
 8002462:	2300      	movs	r3, #0
 8002464:	e001      	b.n	800246a <LoopFillZerobss>

08002466 <FillZerobss>:
 8002466:	6013      	str	r3, [r2, #0]
 8002468:	3204      	adds	r2, #4

0800246a <LoopFillZerobss>:
 800246a:	42a2      	cmp	r2, r4
 800246c:	d3fb      	bcc.n	8002466 <FillZerobss>
 800246e:	f008 fa03 	bl	800a878 <__libc_init_array>
 8002472:	f7ff f923 	bl	80016bc <main>

08002476 <LoopForever>:
 8002476:	e7fe      	b.n	8002476 <LoopForever>
 8002478:	2000a000 	.word	0x2000a000
 800247c:	20000000 	.word	0x20000000
 8002480:	200001e8 	.word	0x200001e8
 8002484:	0800d860 	.word	0x0800d860
 8002488:	200001e8 	.word	0x200001e8
 800248c:	20002724 	.word	0x20002724

08002490 <ADC1_2_IRQHandler>:
 8002490:	e7fe      	b.n	8002490 <ADC1_2_IRQHandler>

08002492 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002492:	b580      	push	{r7, lr}
 8002494:	b082      	sub	sp, #8
 8002496:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002498:	2300      	movs	r3, #0
 800249a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800249c:	2003      	movs	r0, #3
 800249e:	f000 f8de 	bl	800265e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024a2:	200f      	movs	r0, #15
 80024a4:	f7ff fe3c 	bl	8002120 <HAL_InitTick>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d002      	beq.n	80024b4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	71fb      	strb	r3, [r7, #7]
 80024b2:	e001      	b.n	80024b8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80024b4:	f7ff fcde 	bl	8001e74 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80024b8:	79fb      	ldrb	r3, [r7, #7]
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
	...

080024c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80024c8:	4b06      	ldr	r3, [pc, #24]	; (80024e4 <HAL_IncTick+0x20>)
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	461a      	mov	r2, r3
 80024ce:	4b06      	ldr	r3, [pc, #24]	; (80024e8 <HAL_IncTick+0x24>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4413      	add	r3, r2
 80024d4:	4a04      	ldr	r2, [pc, #16]	; (80024e8 <HAL_IncTick+0x24>)
 80024d6:	6013      	str	r3, [r2, #0]
}
 80024d8:	bf00      	nop
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	20000008 	.word	0x20000008
 80024e8:	20000464 	.word	0x20000464

080024ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  return uwTick;
 80024f0:	4b03      	ldr	r3, [pc, #12]	; (8002500 <HAL_GetTick+0x14>)
 80024f2:	681b      	ldr	r3, [r3, #0]
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	20000464 	.word	0x20000464

08002504 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002504:	b480      	push	{r7}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f003 0307 	and.w	r3, r3, #7
 8002512:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002514:	4b0c      	ldr	r3, [pc, #48]	; (8002548 <__NVIC_SetPriorityGrouping+0x44>)
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800251a:	68ba      	ldr	r2, [r7, #8]
 800251c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002520:	4013      	ands	r3, r2
 8002522:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800252c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002530:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002534:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002536:	4a04      	ldr	r2, [pc, #16]	; (8002548 <__NVIC_SetPriorityGrouping+0x44>)
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	60d3      	str	r3, [r2, #12]
}
 800253c:	bf00      	nop
 800253e:	3714      	adds	r7, #20
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr
 8002548:	e000ed00 	.word	0xe000ed00

0800254c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002550:	4b04      	ldr	r3, [pc, #16]	; (8002564 <__NVIC_GetPriorityGrouping+0x18>)
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	0a1b      	lsrs	r3, r3, #8
 8002556:	f003 0307 	and.w	r3, r3, #7
}
 800255a:	4618      	mov	r0, r3
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr
 8002564:	e000ed00 	.word	0xe000ed00

08002568 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	4603      	mov	r3, r0
 8002570:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002576:	2b00      	cmp	r3, #0
 8002578:	db0b      	blt.n	8002592 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800257a:	79fb      	ldrb	r3, [r7, #7]
 800257c:	f003 021f 	and.w	r2, r3, #31
 8002580:	4907      	ldr	r1, [pc, #28]	; (80025a0 <__NVIC_EnableIRQ+0x38>)
 8002582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002586:	095b      	lsrs	r3, r3, #5
 8002588:	2001      	movs	r0, #1
 800258a:	fa00 f202 	lsl.w	r2, r0, r2
 800258e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002592:	bf00      	nop
 8002594:	370c      	adds	r7, #12
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	e000e100 	.word	0xe000e100

080025a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	4603      	mov	r3, r0
 80025ac:	6039      	str	r1, [r7, #0]
 80025ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	db0a      	blt.n	80025ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	b2da      	uxtb	r2, r3
 80025bc:	490c      	ldr	r1, [pc, #48]	; (80025f0 <__NVIC_SetPriority+0x4c>)
 80025be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c2:	0112      	lsls	r2, r2, #4
 80025c4:	b2d2      	uxtb	r2, r2
 80025c6:	440b      	add	r3, r1
 80025c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025cc:	e00a      	b.n	80025e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	b2da      	uxtb	r2, r3
 80025d2:	4908      	ldr	r1, [pc, #32]	; (80025f4 <__NVIC_SetPriority+0x50>)
 80025d4:	79fb      	ldrb	r3, [r7, #7]
 80025d6:	f003 030f 	and.w	r3, r3, #15
 80025da:	3b04      	subs	r3, #4
 80025dc:	0112      	lsls	r2, r2, #4
 80025de:	b2d2      	uxtb	r2, r2
 80025e0:	440b      	add	r3, r1
 80025e2:	761a      	strb	r2, [r3, #24]
}
 80025e4:	bf00      	nop
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr
 80025f0:	e000e100 	.word	0xe000e100
 80025f4:	e000ed00 	.word	0xe000ed00

080025f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b089      	sub	sp, #36	; 0x24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f003 0307 	and.w	r3, r3, #7
 800260a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	f1c3 0307 	rsb	r3, r3, #7
 8002612:	2b04      	cmp	r3, #4
 8002614:	bf28      	it	cs
 8002616:	2304      	movcs	r3, #4
 8002618:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	3304      	adds	r3, #4
 800261e:	2b06      	cmp	r3, #6
 8002620:	d902      	bls.n	8002628 <NVIC_EncodePriority+0x30>
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	3b03      	subs	r3, #3
 8002626:	e000      	b.n	800262a <NVIC_EncodePriority+0x32>
 8002628:	2300      	movs	r3, #0
 800262a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800262c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	fa02 f303 	lsl.w	r3, r2, r3
 8002636:	43da      	mvns	r2, r3
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	401a      	ands	r2, r3
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002640:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	fa01 f303 	lsl.w	r3, r1, r3
 800264a:	43d9      	mvns	r1, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002650:	4313      	orrs	r3, r2
         );
}
 8002652:	4618      	mov	r0, r3
 8002654:	3724      	adds	r7, #36	; 0x24
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr

0800265e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800265e:	b580      	push	{r7, lr}
 8002660:	b082      	sub	sp, #8
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f7ff ff4c 	bl	8002504 <__NVIC_SetPriorityGrouping>
}
 800266c:	bf00      	nop
 800266e:	3708      	adds	r7, #8
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af00      	add	r7, sp, #0
 800267a:	4603      	mov	r3, r0
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
 8002680:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002682:	2300      	movs	r3, #0
 8002684:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002686:	f7ff ff61 	bl	800254c <__NVIC_GetPriorityGrouping>
 800268a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	68b9      	ldr	r1, [r7, #8]
 8002690:	6978      	ldr	r0, [r7, #20]
 8002692:	f7ff ffb1 	bl	80025f8 <NVIC_EncodePriority>
 8002696:	4602      	mov	r2, r0
 8002698:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800269c:	4611      	mov	r1, r2
 800269e:	4618      	mov	r0, r3
 80026a0:	f7ff ff80 	bl	80025a4 <__NVIC_SetPriority>
}
 80026a4:	bf00      	nop
 80026a6:	3718      	adds	r7, #24
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	4603      	mov	r3, r0
 80026b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7ff ff54 	bl	8002568 <__NVIC_EnableIRQ>
}
 80026c0:	bf00      	nop
 80026c2:	3708      	adds	r7, #8
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b085      	sub	sp, #20
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e098      	b.n	800280c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	461a      	mov	r2, r3
 80026e0:	4b4d      	ldr	r3, [pc, #308]	; (8002818 <HAL_DMA_Init+0x150>)
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d80f      	bhi.n	8002706 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	461a      	mov	r2, r3
 80026ec:	4b4b      	ldr	r3, [pc, #300]	; (800281c <HAL_DMA_Init+0x154>)
 80026ee:	4413      	add	r3, r2
 80026f0:	4a4b      	ldr	r2, [pc, #300]	; (8002820 <HAL_DMA_Init+0x158>)
 80026f2:	fba2 2303 	umull	r2, r3, r2, r3
 80026f6:	091b      	lsrs	r3, r3, #4
 80026f8:	009a      	lsls	r2, r3, #2
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a48      	ldr	r2, [pc, #288]	; (8002824 <HAL_DMA_Init+0x15c>)
 8002702:	641a      	str	r2, [r3, #64]	; 0x40
 8002704:	e00e      	b.n	8002724 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	461a      	mov	r2, r3
 800270c:	4b46      	ldr	r3, [pc, #280]	; (8002828 <HAL_DMA_Init+0x160>)
 800270e:	4413      	add	r3, r2
 8002710:	4a43      	ldr	r2, [pc, #268]	; (8002820 <HAL_DMA_Init+0x158>)
 8002712:	fba2 2303 	umull	r2, r3, r2, r3
 8002716:	091b      	lsrs	r3, r3, #4
 8002718:	009a      	lsls	r2, r3, #2
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a42      	ldr	r2, [pc, #264]	; (800282c <HAL_DMA_Init+0x164>)
 8002722:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2202      	movs	r2, #2
 8002728:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800273a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800273e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002748:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002754:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	699b      	ldr	r3, [r3, #24]
 800275a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002760:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a1b      	ldr	r3, [r3, #32]
 8002766:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002768:	68fa      	ldr	r2, [r7, #12]
 800276a:	4313      	orrs	r3, r2
 800276c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68fa      	ldr	r2, [r7, #12]
 8002774:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800277e:	d039      	beq.n	80027f4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002784:	4a27      	ldr	r2, [pc, #156]	; (8002824 <HAL_DMA_Init+0x15c>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d11a      	bne.n	80027c0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800278a:	4b29      	ldr	r3, [pc, #164]	; (8002830 <HAL_DMA_Init+0x168>)
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002792:	f003 031c 	and.w	r3, r3, #28
 8002796:	210f      	movs	r1, #15
 8002798:	fa01 f303 	lsl.w	r3, r1, r3
 800279c:	43db      	mvns	r3, r3
 800279e:	4924      	ldr	r1, [pc, #144]	; (8002830 <HAL_DMA_Init+0x168>)
 80027a0:	4013      	ands	r3, r2
 80027a2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80027a4:	4b22      	ldr	r3, [pc, #136]	; (8002830 <HAL_DMA_Init+0x168>)
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6859      	ldr	r1, [r3, #4]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b0:	f003 031c 	and.w	r3, r3, #28
 80027b4:	fa01 f303 	lsl.w	r3, r1, r3
 80027b8:	491d      	ldr	r1, [pc, #116]	; (8002830 <HAL_DMA_Init+0x168>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	600b      	str	r3, [r1, #0]
 80027be:	e019      	b.n	80027f4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80027c0:	4b1c      	ldr	r3, [pc, #112]	; (8002834 <HAL_DMA_Init+0x16c>)
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c8:	f003 031c 	and.w	r3, r3, #28
 80027cc:	210f      	movs	r1, #15
 80027ce:	fa01 f303 	lsl.w	r3, r1, r3
 80027d2:	43db      	mvns	r3, r3
 80027d4:	4917      	ldr	r1, [pc, #92]	; (8002834 <HAL_DMA_Init+0x16c>)
 80027d6:	4013      	ands	r3, r2
 80027d8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80027da:	4b16      	ldr	r3, [pc, #88]	; (8002834 <HAL_DMA_Init+0x16c>)
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6859      	ldr	r1, [r3, #4]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e6:	f003 031c 	and.w	r3, r3, #28
 80027ea:	fa01 f303 	lsl.w	r3, r1, r3
 80027ee:	4911      	ldr	r1, [pc, #68]	; (8002834 <HAL_DMA_Init+0x16c>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2201      	movs	r2, #1
 80027fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800280a:	2300      	movs	r3, #0
}
 800280c:	4618      	mov	r0, r3
 800280e:	3714      	adds	r7, #20
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr
 8002818:	40020407 	.word	0x40020407
 800281c:	bffdfff8 	.word	0xbffdfff8
 8002820:	cccccccd 	.word	0xcccccccd
 8002824:	40020000 	.word	0x40020000
 8002828:	bffdfbf8 	.word	0xbffdfbf8
 800282c:	40020400 	.word	0x40020400
 8002830:	400200a8 	.word	0x400200a8
 8002834:	400204a8 	.word	0x400204a8

08002838 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b086      	sub	sp, #24
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
 8002844:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002846:	2300      	movs	r3, #0
 8002848:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002850:	2b01      	cmp	r3, #1
 8002852:	d101      	bne.n	8002858 <HAL_DMA_Start_IT+0x20>
 8002854:	2302      	movs	r3, #2
 8002856:	e04b      	b.n	80028f0 <HAL_DMA_Start_IT+0xb8>
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002866:	b2db      	uxtb	r3, r3
 8002868:	2b01      	cmp	r3, #1
 800286a:	d13a      	bne.n	80028e2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2202      	movs	r2, #2
 8002870:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2200      	movs	r2, #0
 8002878:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f022 0201 	bic.w	r2, r2, #1
 8002888:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	68b9      	ldr	r1, [r7, #8]
 8002890:	68f8      	ldr	r0, [r7, #12]
 8002892:	f000 f96b 	bl	8002b6c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289a:	2b00      	cmp	r3, #0
 800289c:	d008      	beq.n	80028b0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f042 020e 	orr.w	r2, r2, #14
 80028ac:	601a      	str	r2, [r3, #0]
 80028ae:	e00f      	b.n	80028d0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f022 0204 	bic.w	r2, r2, #4
 80028be:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f042 020a 	orr.w	r2, r2, #10
 80028ce:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f042 0201 	orr.w	r2, r2, #1
 80028de:	601a      	str	r2, [r3, #0]
 80028e0:	e005      	b.n	80028ee <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80028ea:	2302      	movs	r3, #2
 80028ec:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80028ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3718      	adds	r7, #24
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b085      	sub	sp, #20
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002900:	2300      	movs	r3, #0
 8002902:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800290a:	b2db      	uxtb	r3, r3
 800290c:	2b02      	cmp	r3, #2
 800290e:	d008      	beq.n	8002922 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2204      	movs	r2, #4
 8002914:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e022      	b.n	8002968 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f022 020e 	bic.w	r2, r2, #14
 8002930:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f022 0201 	bic.w	r2, r2, #1
 8002940:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002946:	f003 021c 	and.w	r2, r3, #28
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294e:	2101      	movs	r1, #1
 8002950:	fa01 f202 	lsl.w	r2, r1, r2
 8002954:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2201      	movs	r2, #1
 800295a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002966:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002968:	4618      	mov	r0, r3
 800296a:	3714      	adds	r7, #20
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800297c:	2300      	movs	r3, #0
 800297e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002986:	b2db      	uxtb	r3, r3
 8002988:	2b02      	cmp	r3, #2
 800298a:	d005      	beq.n	8002998 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2204      	movs	r2, #4
 8002990:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	73fb      	strb	r3, [r7, #15]
 8002996:	e029      	b.n	80029ec <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f022 020e 	bic.w	r2, r2, #14
 80029a6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f022 0201 	bic.w	r2, r2, #1
 80029b6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029bc:	f003 021c 	and.w	r2, r3, #28
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c4:	2101      	movs	r1, #1
 80029c6:	fa01 f202 	lsl.w	r2, r1, r2
 80029ca:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d003      	beq.n	80029ec <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	4798      	blx	r3
    }
  }
  return status;
 80029ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3710      	adds	r7, #16
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b084      	sub	sp, #16
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a12:	f003 031c 	and.w	r3, r3, #28
 8002a16:	2204      	movs	r2, #4
 8002a18:	409a      	lsls	r2, r3
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d026      	beq.n	8002a70 <HAL_DMA_IRQHandler+0x7a>
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	f003 0304 	and.w	r3, r3, #4
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d021      	beq.n	8002a70 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0320 	and.w	r3, r3, #32
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d107      	bne.n	8002a4a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f022 0204 	bic.w	r2, r2, #4
 8002a48:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a4e:	f003 021c 	and.w	r2, r3, #28
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a56:	2104      	movs	r1, #4
 8002a58:	fa01 f202 	lsl.w	r2, r1, r2
 8002a5c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d071      	beq.n	8002b4a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002a6e:	e06c      	b.n	8002b4a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a74:	f003 031c 	and.w	r3, r3, #28
 8002a78:	2202      	movs	r2, #2
 8002a7a:	409a      	lsls	r2, r3
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	4013      	ands	r3, r2
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d02e      	beq.n	8002ae2 <HAL_DMA_IRQHandler+0xec>
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	f003 0302 	and.w	r3, r3, #2
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d029      	beq.n	8002ae2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0320 	and.w	r3, r3, #32
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d10b      	bne.n	8002ab4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f022 020a 	bic.w	r2, r2, #10
 8002aaa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab8:	f003 021c 	and.w	r2, r3, #28
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac0:	2102      	movs	r1, #2
 8002ac2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ac6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d038      	beq.n	8002b4a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002ae0:	e033      	b.n	8002b4a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae6:	f003 031c 	and.w	r3, r3, #28
 8002aea:	2208      	movs	r2, #8
 8002aec:	409a      	lsls	r2, r3
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	4013      	ands	r3, r2
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d02a      	beq.n	8002b4c <HAL_DMA_IRQHandler+0x156>
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	f003 0308 	and.w	r3, r3, #8
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d025      	beq.n	8002b4c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f022 020e 	bic.w	r2, r2, #14
 8002b0e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b14:	f003 021c 	and.w	r2, r3, #28
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1c:	2101      	movs	r1, #1
 8002b1e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b22:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d004      	beq.n	8002b4c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002b4a:	bf00      	nop
 8002b4c:	bf00      	nop
}
 8002b4e:	3710      	adds	r7, #16
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b085      	sub	sp, #20
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	607a      	str	r2, [r7, #4]
 8002b78:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b7e:	f003 021c 	and.w	r2, r3, #28
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b86:	2101      	movs	r1, #1
 8002b88:	fa01 f202 	lsl.w	r2, r1, r2
 8002b8c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	2b10      	cmp	r3, #16
 8002b9c:	d108      	bne.n	8002bb0 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68ba      	ldr	r2, [r7, #8]
 8002bac:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002bae:	e007      	b.n	8002bc0 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	68ba      	ldr	r2, [r7, #8]
 8002bb6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	60da      	str	r2, [r3, #12]
}
 8002bc0:	bf00      	nop
 8002bc2:	3714      	adds	r7, #20
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b087      	sub	sp, #28
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bda:	e14e      	b.n	8002e7a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	2101      	movs	r1, #1
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	fa01 f303 	lsl.w	r3, r1, r3
 8002be8:	4013      	ands	r3, r2
 8002bea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	f000 8140 	beq.w	8002e74 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f003 0303 	and.w	r3, r3, #3
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d005      	beq.n	8002c0c <HAL_GPIO_Init+0x40>
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f003 0303 	and.w	r3, r3, #3
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d130      	bne.n	8002c6e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	2203      	movs	r2, #3
 8002c18:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1c:	43db      	mvns	r3, r3
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	4013      	ands	r3, r2
 8002c22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	68da      	ldr	r2, [r3, #12]
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	693a      	ldr	r2, [r7, #16]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	693a      	ldr	r2, [r7, #16]
 8002c3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c42:	2201      	movs	r2, #1
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4a:	43db      	mvns	r3, r3
 8002c4c:	693a      	ldr	r2, [r7, #16]
 8002c4e:	4013      	ands	r3, r2
 8002c50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	091b      	lsrs	r3, r3, #4
 8002c58:	f003 0201 	and.w	r2, r3, #1
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c62:	693a      	ldr	r2, [r7, #16]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f003 0303 	and.w	r3, r3, #3
 8002c76:	2b03      	cmp	r3, #3
 8002c78:	d017      	beq.n	8002caa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	005b      	lsls	r3, r3, #1
 8002c84:	2203      	movs	r2, #3
 8002c86:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8a:	43db      	mvns	r3, r3
 8002c8c:	693a      	ldr	r2, [r7, #16]
 8002c8e:	4013      	ands	r3, r2
 8002c90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	689a      	ldr	r2, [r3, #8]
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	005b      	lsls	r3, r3, #1
 8002c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9e:	693a      	ldr	r2, [r7, #16]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	693a      	ldr	r2, [r7, #16]
 8002ca8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f003 0303 	and.w	r3, r3, #3
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d123      	bne.n	8002cfe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	08da      	lsrs	r2, r3, #3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	3208      	adds	r2, #8
 8002cbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cc2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	f003 0307 	and.w	r3, r3, #7
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	220f      	movs	r2, #15
 8002cce:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd2:	43db      	mvns	r3, r3
 8002cd4:	693a      	ldr	r2, [r7, #16]
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	691a      	ldr	r2, [r3, #16]
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	f003 0307 	and.w	r3, r3, #7
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	08da      	lsrs	r2, r3, #3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	3208      	adds	r2, #8
 8002cf8:	6939      	ldr	r1, [r7, #16]
 8002cfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	2203      	movs	r2, #3
 8002d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0e:	43db      	mvns	r3, r3
 8002d10:	693a      	ldr	r2, [r7, #16]
 8002d12:	4013      	ands	r3, r2
 8002d14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f003 0203 	and.w	r2, r3, #3
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	005b      	lsls	r3, r3, #1
 8002d22:	fa02 f303 	lsl.w	r3, r2, r3
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	693a      	ldr	r2, [r7, #16]
 8002d30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	f000 809a 	beq.w	8002e74 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d40:	4b55      	ldr	r3, [pc, #340]	; (8002e98 <HAL_GPIO_Init+0x2cc>)
 8002d42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d44:	4a54      	ldr	r2, [pc, #336]	; (8002e98 <HAL_GPIO_Init+0x2cc>)
 8002d46:	f043 0301 	orr.w	r3, r3, #1
 8002d4a:	6613      	str	r3, [r2, #96]	; 0x60
 8002d4c:	4b52      	ldr	r3, [pc, #328]	; (8002e98 <HAL_GPIO_Init+0x2cc>)
 8002d4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d50:	f003 0301 	and.w	r3, r3, #1
 8002d54:	60bb      	str	r3, [r7, #8]
 8002d56:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002d58:	4a50      	ldr	r2, [pc, #320]	; (8002e9c <HAL_GPIO_Init+0x2d0>)
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	089b      	lsrs	r3, r3, #2
 8002d5e:	3302      	adds	r3, #2
 8002d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	f003 0303 	and.w	r3, r3, #3
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	220f      	movs	r2, #15
 8002d70:	fa02 f303 	lsl.w	r3, r2, r3
 8002d74:	43db      	mvns	r3, r3
 8002d76:	693a      	ldr	r2, [r7, #16]
 8002d78:	4013      	ands	r3, r2
 8002d7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002d82:	d013      	beq.n	8002dac <HAL_GPIO_Init+0x1e0>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	4a46      	ldr	r2, [pc, #280]	; (8002ea0 <HAL_GPIO_Init+0x2d4>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d00d      	beq.n	8002da8 <HAL_GPIO_Init+0x1dc>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4a45      	ldr	r2, [pc, #276]	; (8002ea4 <HAL_GPIO_Init+0x2d8>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d007      	beq.n	8002da4 <HAL_GPIO_Init+0x1d8>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4a44      	ldr	r2, [pc, #272]	; (8002ea8 <HAL_GPIO_Init+0x2dc>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d101      	bne.n	8002da0 <HAL_GPIO_Init+0x1d4>
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e006      	b.n	8002dae <HAL_GPIO_Init+0x1e2>
 8002da0:	2307      	movs	r3, #7
 8002da2:	e004      	b.n	8002dae <HAL_GPIO_Init+0x1e2>
 8002da4:	2302      	movs	r3, #2
 8002da6:	e002      	b.n	8002dae <HAL_GPIO_Init+0x1e2>
 8002da8:	2301      	movs	r3, #1
 8002daa:	e000      	b.n	8002dae <HAL_GPIO_Init+0x1e2>
 8002dac:	2300      	movs	r3, #0
 8002dae:	697a      	ldr	r2, [r7, #20]
 8002db0:	f002 0203 	and.w	r2, r2, #3
 8002db4:	0092      	lsls	r2, r2, #2
 8002db6:	4093      	lsls	r3, r2
 8002db8:	693a      	ldr	r2, [r7, #16]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002dbe:	4937      	ldr	r1, [pc, #220]	; (8002e9c <HAL_GPIO_Init+0x2d0>)
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	089b      	lsrs	r3, r3, #2
 8002dc4:	3302      	adds	r3, #2
 8002dc6:	693a      	ldr	r2, [r7, #16]
 8002dc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002dcc:	4b37      	ldr	r3, [pc, #220]	; (8002eac <HAL_GPIO_Init+0x2e0>)
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	43db      	mvns	r3, r3
 8002dd6:	693a      	ldr	r2, [r7, #16]
 8002dd8:	4013      	ands	r3, r2
 8002dda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d003      	beq.n	8002df0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002de8:	693a      	ldr	r2, [r7, #16]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002df0:	4a2e      	ldr	r2, [pc, #184]	; (8002eac <HAL_GPIO_Init+0x2e0>)
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002df6:	4b2d      	ldr	r3, [pc, #180]	; (8002eac <HAL_GPIO_Init+0x2e0>)
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	43db      	mvns	r3, r3
 8002e00:	693a      	ldr	r2, [r7, #16]
 8002e02:	4013      	ands	r3, r2
 8002e04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d003      	beq.n	8002e1a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002e12:	693a      	ldr	r2, [r7, #16]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002e1a:	4a24      	ldr	r2, [pc, #144]	; (8002eac <HAL_GPIO_Init+0x2e0>)
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002e20:	4b22      	ldr	r3, [pc, #136]	; (8002eac <HAL_GPIO_Init+0x2e0>)
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	43db      	mvns	r3, r3
 8002e2a:	693a      	ldr	r2, [r7, #16]
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d003      	beq.n	8002e44 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002e3c:	693a      	ldr	r2, [r7, #16]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002e44:	4a19      	ldr	r2, [pc, #100]	; (8002eac <HAL_GPIO_Init+0x2e0>)
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002e4a:	4b18      	ldr	r3, [pc, #96]	; (8002eac <HAL_GPIO_Init+0x2e0>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	43db      	mvns	r3, r3
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	4013      	ands	r3, r2
 8002e58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d003      	beq.n	8002e6e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002e66:	693a      	ldr	r2, [r7, #16]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002e6e:	4a0f      	ldr	r2, [pc, #60]	; (8002eac <HAL_GPIO_Init+0x2e0>)
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	3301      	adds	r3, #1
 8002e78:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	fa22 f303 	lsr.w	r3, r2, r3
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	f47f aea9 	bne.w	8002bdc <HAL_GPIO_Init+0x10>
  }
}
 8002e8a:	bf00      	nop
 8002e8c:	bf00      	nop
 8002e8e:	371c      	adds	r7, #28
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr
 8002e98:	40021000 	.word	0x40021000
 8002e9c:	40010000 	.word	0x40010000
 8002ea0:	48000400 	.word	0x48000400
 8002ea4:	48000800 	.word	0x48000800
 8002ea8:	48000c00 	.word	0x48000c00
 8002eac:	40010400 	.word	0x40010400

08002eb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	460b      	mov	r3, r1
 8002eba:	807b      	strh	r3, [r7, #2]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ec0:	787b      	ldrb	r3, [r7, #1]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d003      	beq.n	8002ece <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ec6:	887a      	ldrh	r2, [r7, #2]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ecc:	e002      	b.n	8002ed4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ece:	887a      	ldrh	r2, [r7, #2]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ed4:	bf00      	nop
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d101      	bne.n	8002ef2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e08d      	b.n	800300e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d106      	bne.n	8002f0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f7fe ffdc 	bl	8001ec4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2224      	movs	r2, #36	; 0x24
 8002f10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f022 0201 	bic.w	r2, r2, #1
 8002f22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685a      	ldr	r2, [r3, #4]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f30:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	689a      	ldr	r2, [r3, #8]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f40:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d107      	bne.n	8002f5a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	689a      	ldr	r2, [r3, #8]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f56:	609a      	str	r2, [r3, #8]
 8002f58:	e006      	b.n	8002f68 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	689a      	ldr	r2, [r3, #8]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002f66:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d108      	bne.n	8002f82 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	685a      	ldr	r2, [r3, #4]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f7e:	605a      	str	r2, [r3, #4]
 8002f80:	e007      	b.n	8002f92 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	685a      	ldr	r2, [r3, #4]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f90:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	6812      	ldr	r2, [r2, #0]
 8002f9c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002fa0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fa4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68da      	ldr	r2, [r3, #12]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002fb4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	691a      	ldr	r2, [r3, #16]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	69d9      	ldr	r1, [r3, #28]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a1a      	ldr	r2, [r3, #32]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f042 0201 	orr.w	r2, r2, #1
 8002fee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2220      	movs	r2, #32
 8002ffa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3708      	adds	r7, #8
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
	...

08003018 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b088      	sub	sp, #32
 800301c:	af02      	add	r7, sp, #8
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	4608      	mov	r0, r1
 8003022:	4611      	mov	r1, r2
 8003024:	461a      	mov	r2, r3
 8003026:	4603      	mov	r3, r0
 8003028:	817b      	strh	r3, [r7, #10]
 800302a:	460b      	mov	r3, r1
 800302c:	813b      	strh	r3, [r7, #8]
 800302e:	4613      	mov	r3, r2
 8003030:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b20      	cmp	r3, #32
 800303c:	f040 80f9 	bne.w	8003232 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003040:	6a3b      	ldr	r3, [r7, #32]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d002      	beq.n	800304c <HAL_I2C_Mem_Write+0x34>
 8003046:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003048:	2b00      	cmp	r3, #0
 800304a:	d105      	bne.n	8003058 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003052:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e0ed      	b.n	8003234 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800305e:	2b01      	cmp	r3, #1
 8003060:	d101      	bne.n	8003066 <HAL_I2C_Mem_Write+0x4e>
 8003062:	2302      	movs	r3, #2
 8003064:	e0e6      	b.n	8003234 <HAL_I2C_Mem_Write+0x21c>
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2201      	movs	r2, #1
 800306a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800306e:	f7ff fa3d 	bl	80024ec <HAL_GetTick>
 8003072:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	9300      	str	r3, [sp, #0]
 8003078:	2319      	movs	r3, #25
 800307a:	2201      	movs	r2, #1
 800307c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003080:	68f8      	ldr	r0, [r7, #12]
 8003082:	f000 fac3 	bl	800360c <I2C_WaitOnFlagUntilTimeout>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d001      	beq.n	8003090 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e0d1      	b.n	8003234 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2221      	movs	r2, #33	; 0x21
 8003094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2240      	movs	r2, #64	; 0x40
 800309c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2200      	movs	r2, #0
 80030a4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6a3a      	ldr	r2, [r7, #32]
 80030aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80030b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2200      	movs	r2, #0
 80030b6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80030b8:	88f8      	ldrh	r0, [r7, #6]
 80030ba:	893a      	ldrh	r2, [r7, #8]
 80030bc:	8979      	ldrh	r1, [r7, #10]
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	9301      	str	r3, [sp, #4]
 80030c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c4:	9300      	str	r3, [sp, #0]
 80030c6:	4603      	mov	r3, r0
 80030c8:	68f8      	ldr	r0, [r7, #12]
 80030ca:	f000 f9d3 	bl	8003474 <I2C_RequestMemoryWrite>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d005      	beq.n	80030e0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e0a9      	b.n	8003234 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	2bff      	cmp	r3, #255	; 0xff
 80030e8:	d90e      	bls.n	8003108 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	22ff      	movs	r2, #255	; 0xff
 80030ee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030f4:	b2da      	uxtb	r2, r3
 80030f6:	8979      	ldrh	r1, [r7, #10]
 80030f8:	2300      	movs	r3, #0
 80030fa:	9300      	str	r3, [sp, #0]
 80030fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003100:	68f8      	ldr	r0, [r7, #12]
 8003102:	f000 fc3d 	bl	8003980 <I2C_TransferConfig>
 8003106:	e00f      	b.n	8003128 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800310c:	b29a      	uxth	r2, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003116:	b2da      	uxtb	r2, r3
 8003118:	8979      	ldrh	r1, [r7, #10]
 800311a:	2300      	movs	r3, #0
 800311c:	9300      	str	r3, [sp, #0]
 800311e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003122:	68f8      	ldr	r0, [r7, #12]
 8003124:	f000 fc2c 	bl	8003980 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003128:	697a      	ldr	r2, [r7, #20]
 800312a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800312c:	68f8      	ldr	r0, [r7, #12]
 800312e:	f000 fabc 	bl	80036aa <I2C_WaitOnTXISFlagUntilTimeout>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d001      	beq.n	800313c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e07b      	b.n	8003234 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003140:	781a      	ldrb	r2, [r3, #0]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314c:	1c5a      	adds	r2, r3, #1
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003156:	b29b      	uxth	r3, r3
 8003158:	3b01      	subs	r3, #1
 800315a:	b29a      	uxth	r2, r3
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003164:	3b01      	subs	r3, #1
 8003166:	b29a      	uxth	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003170:	b29b      	uxth	r3, r3
 8003172:	2b00      	cmp	r3, #0
 8003174:	d034      	beq.n	80031e0 <HAL_I2C_Mem_Write+0x1c8>
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800317a:	2b00      	cmp	r3, #0
 800317c:	d130      	bne.n	80031e0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	9300      	str	r3, [sp, #0]
 8003182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003184:	2200      	movs	r2, #0
 8003186:	2180      	movs	r1, #128	; 0x80
 8003188:	68f8      	ldr	r0, [r7, #12]
 800318a:	f000 fa3f 	bl	800360c <I2C_WaitOnFlagUntilTimeout>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d001      	beq.n	8003198 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e04d      	b.n	8003234 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800319c:	b29b      	uxth	r3, r3
 800319e:	2bff      	cmp	r3, #255	; 0xff
 80031a0:	d90e      	bls.n	80031c0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	22ff      	movs	r2, #255	; 0xff
 80031a6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ac:	b2da      	uxtb	r2, r3
 80031ae:	8979      	ldrh	r1, [r7, #10]
 80031b0:	2300      	movs	r3, #0
 80031b2:	9300      	str	r3, [sp, #0]
 80031b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031b8:	68f8      	ldr	r0, [r7, #12]
 80031ba:	f000 fbe1 	bl	8003980 <I2C_TransferConfig>
 80031be:	e00f      	b.n	80031e0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031c4:	b29a      	uxth	r2, r3
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ce:	b2da      	uxtb	r2, r3
 80031d0:	8979      	ldrh	r1, [r7, #10]
 80031d2:	2300      	movs	r3, #0
 80031d4:	9300      	str	r3, [sp, #0]
 80031d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031da:	68f8      	ldr	r0, [r7, #12]
 80031dc:	f000 fbd0 	bl	8003980 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d19e      	bne.n	8003128 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031ea:	697a      	ldr	r2, [r7, #20]
 80031ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031ee:	68f8      	ldr	r0, [r7, #12]
 80031f0:	f000 faa2 	bl	8003738 <I2C_WaitOnSTOPFlagUntilTimeout>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d001      	beq.n	80031fe <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e01a      	b.n	8003234 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2220      	movs	r2, #32
 8003204:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	6859      	ldr	r1, [r3, #4]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	4b0a      	ldr	r3, [pc, #40]	; (800323c <HAL_I2C_Mem_Write+0x224>)
 8003212:	400b      	ands	r3, r1
 8003214:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2220      	movs	r2, #32
 800321a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800322e:	2300      	movs	r3, #0
 8003230:	e000      	b.n	8003234 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003232:	2302      	movs	r3, #2
  }
}
 8003234:	4618      	mov	r0, r3
 8003236:	3718      	adds	r7, #24
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	fe00e800 	.word	0xfe00e800

08003240 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b088      	sub	sp, #32
 8003244:	af02      	add	r7, sp, #8
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	4608      	mov	r0, r1
 800324a:	4611      	mov	r1, r2
 800324c:	461a      	mov	r2, r3
 800324e:	4603      	mov	r3, r0
 8003250:	817b      	strh	r3, [r7, #10]
 8003252:	460b      	mov	r3, r1
 8003254:	813b      	strh	r3, [r7, #8]
 8003256:	4613      	mov	r3, r2
 8003258:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b20      	cmp	r3, #32
 8003264:	f040 80fd 	bne.w	8003462 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003268:	6a3b      	ldr	r3, [r7, #32]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d002      	beq.n	8003274 <HAL_I2C_Mem_Read+0x34>
 800326e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003270:	2b00      	cmp	r3, #0
 8003272:	d105      	bne.n	8003280 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f44f 7200 	mov.w	r2, #512	; 0x200
 800327a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e0f1      	b.n	8003464 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003286:	2b01      	cmp	r3, #1
 8003288:	d101      	bne.n	800328e <HAL_I2C_Mem_Read+0x4e>
 800328a:	2302      	movs	r3, #2
 800328c:	e0ea      	b.n	8003464 <HAL_I2C_Mem_Read+0x224>
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2201      	movs	r2, #1
 8003292:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003296:	f7ff f929 	bl	80024ec <HAL_GetTick>
 800329a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	9300      	str	r3, [sp, #0]
 80032a0:	2319      	movs	r3, #25
 80032a2:	2201      	movs	r2, #1
 80032a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80032a8:	68f8      	ldr	r0, [r7, #12]
 80032aa:	f000 f9af 	bl	800360c <I2C_WaitOnFlagUntilTimeout>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d001      	beq.n	80032b8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e0d5      	b.n	8003464 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2222      	movs	r2, #34	; 0x22
 80032bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2240      	movs	r2, #64	; 0x40
 80032c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6a3a      	ldr	r2, [r7, #32]
 80032d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80032d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2200      	movs	r2, #0
 80032de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80032e0:	88f8      	ldrh	r0, [r7, #6]
 80032e2:	893a      	ldrh	r2, [r7, #8]
 80032e4:	8979      	ldrh	r1, [r7, #10]
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	9301      	str	r3, [sp, #4]
 80032ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ec:	9300      	str	r3, [sp, #0]
 80032ee:	4603      	mov	r3, r0
 80032f0:	68f8      	ldr	r0, [r7, #12]
 80032f2:	f000 f913 	bl	800351c <I2C_RequestMemoryRead>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d005      	beq.n	8003308 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e0ad      	b.n	8003464 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800330c:	b29b      	uxth	r3, r3
 800330e:	2bff      	cmp	r3, #255	; 0xff
 8003310:	d90e      	bls.n	8003330 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	22ff      	movs	r2, #255	; 0xff
 8003316:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800331c:	b2da      	uxtb	r2, r3
 800331e:	8979      	ldrh	r1, [r7, #10]
 8003320:	4b52      	ldr	r3, [pc, #328]	; (800346c <HAL_I2C_Mem_Read+0x22c>)
 8003322:	9300      	str	r3, [sp, #0]
 8003324:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003328:	68f8      	ldr	r0, [r7, #12]
 800332a:	f000 fb29 	bl	8003980 <I2C_TransferConfig>
 800332e:	e00f      	b.n	8003350 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003334:	b29a      	uxth	r2, r3
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800333e:	b2da      	uxtb	r2, r3
 8003340:	8979      	ldrh	r1, [r7, #10]
 8003342:	4b4a      	ldr	r3, [pc, #296]	; (800346c <HAL_I2C_Mem_Read+0x22c>)
 8003344:	9300      	str	r3, [sp, #0]
 8003346:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800334a:	68f8      	ldr	r0, [r7, #12]
 800334c:	f000 fb18 	bl	8003980 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	9300      	str	r3, [sp, #0]
 8003354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003356:	2200      	movs	r2, #0
 8003358:	2104      	movs	r1, #4
 800335a:	68f8      	ldr	r0, [r7, #12]
 800335c:	f000 f956 	bl	800360c <I2C_WaitOnFlagUntilTimeout>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d001      	beq.n	800336a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e07c      	b.n	8003464 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003374:	b2d2      	uxtb	r2, r2
 8003376:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337c:	1c5a      	adds	r2, r3, #1
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003386:	3b01      	subs	r3, #1
 8003388:	b29a      	uxth	r2, r3
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003392:	b29b      	uxth	r3, r3
 8003394:	3b01      	subs	r3, #1
 8003396:	b29a      	uxth	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d034      	beq.n	8003410 <HAL_I2C_Mem_Read+0x1d0>
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d130      	bne.n	8003410 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	9300      	str	r3, [sp, #0]
 80033b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033b4:	2200      	movs	r2, #0
 80033b6:	2180      	movs	r1, #128	; 0x80
 80033b8:	68f8      	ldr	r0, [r7, #12]
 80033ba:	f000 f927 	bl	800360c <I2C_WaitOnFlagUntilTimeout>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d001      	beq.n	80033c8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e04d      	b.n	8003464 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	2bff      	cmp	r3, #255	; 0xff
 80033d0:	d90e      	bls.n	80033f0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	22ff      	movs	r2, #255	; 0xff
 80033d6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033dc:	b2da      	uxtb	r2, r3
 80033de:	8979      	ldrh	r1, [r7, #10]
 80033e0:	2300      	movs	r3, #0
 80033e2:	9300      	str	r3, [sp, #0]
 80033e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033e8:	68f8      	ldr	r0, [r7, #12]
 80033ea:	f000 fac9 	bl	8003980 <I2C_TransferConfig>
 80033ee:	e00f      	b.n	8003410 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033f4:	b29a      	uxth	r2, r3
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033fe:	b2da      	uxtb	r2, r3
 8003400:	8979      	ldrh	r1, [r7, #10]
 8003402:	2300      	movs	r3, #0
 8003404:	9300      	str	r3, [sp, #0]
 8003406:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800340a:	68f8      	ldr	r0, [r7, #12]
 800340c:	f000 fab8 	bl	8003980 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003414:	b29b      	uxth	r3, r3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d19a      	bne.n	8003350 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800341a:	697a      	ldr	r2, [r7, #20]
 800341c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800341e:	68f8      	ldr	r0, [r7, #12]
 8003420:	f000 f98a 	bl	8003738 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d001      	beq.n	800342e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e01a      	b.n	8003464 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2220      	movs	r2, #32
 8003434:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	6859      	ldr	r1, [r3, #4]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	4b0b      	ldr	r3, [pc, #44]	; (8003470 <HAL_I2C_Mem_Read+0x230>)
 8003442:	400b      	ands	r3, r1
 8003444:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2220      	movs	r2, #32
 800344a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2200      	movs	r2, #0
 800345a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800345e:	2300      	movs	r3, #0
 8003460:	e000      	b.n	8003464 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003462:	2302      	movs	r3, #2
  }
}
 8003464:	4618      	mov	r0, r3
 8003466:	3718      	adds	r7, #24
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	80002400 	.word	0x80002400
 8003470:	fe00e800 	.word	0xfe00e800

08003474 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b086      	sub	sp, #24
 8003478:	af02      	add	r7, sp, #8
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	4608      	mov	r0, r1
 800347e:	4611      	mov	r1, r2
 8003480:	461a      	mov	r2, r3
 8003482:	4603      	mov	r3, r0
 8003484:	817b      	strh	r3, [r7, #10]
 8003486:	460b      	mov	r3, r1
 8003488:	813b      	strh	r3, [r7, #8]
 800348a:	4613      	mov	r3, r2
 800348c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800348e:	88fb      	ldrh	r3, [r7, #6]
 8003490:	b2da      	uxtb	r2, r3
 8003492:	8979      	ldrh	r1, [r7, #10]
 8003494:	4b20      	ldr	r3, [pc, #128]	; (8003518 <I2C_RequestMemoryWrite+0xa4>)
 8003496:	9300      	str	r3, [sp, #0]
 8003498:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800349c:	68f8      	ldr	r0, [r7, #12]
 800349e:	f000 fa6f 	bl	8003980 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034a2:	69fa      	ldr	r2, [r7, #28]
 80034a4:	69b9      	ldr	r1, [r7, #24]
 80034a6:	68f8      	ldr	r0, [r7, #12]
 80034a8:	f000 f8ff 	bl	80036aa <I2C_WaitOnTXISFlagUntilTimeout>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d001      	beq.n	80034b6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e02c      	b.n	8003510 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80034b6:	88fb      	ldrh	r3, [r7, #6]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d105      	bne.n	80034c8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80034bc:	893b      	ldrh	r3, [r7, #8]
 80034be:	b2da      	uxtb	r2, r3
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	629a      	str	r2, [r3, #40]	; 0x28
 80034c6:	e015      	b.n	80034f4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80034c8:	893b      	ldrh	r3, [r7, #8]
 80034ca:	0a1b      	lsrs	r3, r3, #8
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	b2da      	uxtb	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034d6:	69fa      	ldr	r2, [r7, #28]
 80034d8:	69b9      	ldr	r1, [r7, #24]
 80034da:	68f8      	ldr	r0, [r7, #12]
 80034dc:	f000 f8e5 	bl	80036aa <I2C_WaitOnTXISFlagUntilTimeout>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d001      	beq.n	80034ea <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e012      	b.n	8003510 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80034ea:	893b      	ldrh	r3, [r7, #8]
 80034ec:	b2da      	uxtb	r2, r3
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	9300      	str	r3, [sp, #0]
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	2200      	movs	r2, #0
 80034fc:	2180      	movs	r1, #128	; 0x80
 80034fe:	68f8      	ldr	r0, [r7, #12]
 8003500:	f000 f884 	bl	800360c <I2C_WaitOnFlagUntilTimeout>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d001      	beq.n	800350e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e000      	b.n	8003510 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800350e:	2300      	movs	r3, #0
}
 8003510:	4618      	mov	r0, r3
 8003512:	3710      	adds	r7, #16
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	80002000 	.word	0x80002000

0800351c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b086      	sub	sp, #24
 8003520:	af02      	add	r7, sp, #8
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	4608      	mov	r0, r1
 8003526:	4611      	mov	r1, r2
 8003528:	461a      	mov	r2, r3
 800352a:	4603      	mov	r3, r0
 800352c:	817b      	strh	r3, [r7, #10]
 800352e:	460b      	mov	r3, r1
 8003530:	813b      	strh	r3, [r7, #8]
 8003532:	4613      	mov	r3, r2
 8003534:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003536:	88fb      	ldrh	r3, [r7, #6]
 8003538:	b2da      	uxtb	r2, r3
 800353a:	8979      	ldrh	r1, [r7, #10]
 800353c:	4b20      	ldr	r3, [pc, #128]	; (80035c0 <I2C_RequestMemoryRead+0xa4>)
 800353e:	9300      	str	r3, [sp, #0]
 8003540:	2300      	movs	r3, #0
 8003542:	68f8      	ldr	r0, [r7, #12]
 8003544:	f000 fa1c 	bl	8003980 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003548:	69fa      	ldr	r2, [r7, #28]
 800354a:	69b9      	ldr	r1, [r7, #24]
 800354c:	68f8      	ldr	r0, [r7, #12]
 800354e:	f000 f8ac 	bl	80036aa <I2C_WaitOnTXISFlagUntilTimeout>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d001      	beq.n	800355c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e02c      	b.n	80035b6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800355c:	88fb      	ldrh	r3, [r7, #6]
 800355e:	2b01      	cmp	r3, #1
 8003560:	d105      	bne.n	800356e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003562:	893b      	ldrh	r3, [r7, #8]
 8003564:	b2da      	uxtb	r2, r3
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	629a      	str	r2, [r3, #40]	; 0x28
 800356c:	e015      	b.n	800359a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800356e:	893b      	ldrh	r3, [r7, #8]
 8003570:	0a1b      	lsrs	r3, r3, #8
 8003572:	b29b      	uxth	r3, r3
 8003574:	b2da      	uxtb	r2, r3
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800357c:	69fa      	ldr	r2, [r7, #28]
 800357e:	69b9      	ldr	r1, [r7, #24]
 8003580:	68f8      	ldr	r0, [r7, #12]
 8003582:	f000 f892 	bl	80036aa <I2C_WaitOnTXISFlagUntilTimeout>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d001      	beq.n	8003590 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e012      	b.n	80035b6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003590:	893b      	ldrh	r3, [r7, #8]
 8003592:	b2da      	uxtb	r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	9300      	str	r3, [sp, #0]
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	2200      	movs	r2, #0
 80035a2:	2140      	movs	r1, #64	; 0x40
 80035a4:	68f8      	ldr	r0, [r7, #12]
 80035a6:	f000 f831 	bl	800360c <I2C_WaitOnFlagUntilTimeout>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d001      	beq.n	80035b4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e000      	b.n	80035b6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	80002000 	.word	0x80002000

080035c4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	699b      	ldr	r3, [r3, #24]
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d103      	bne.n	80035e2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2200      	movs	r2, #0
 80035e0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	f003 0301 	and.w	r3, r3, #1
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d007      	beq.n	8003600 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	699a      	ldr	r2, [r3, #24]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f042 0201 	orr.w	r2, r2, #1
 80035fe:	619a      	str	r2, [r3, #24]
  }
}
 8003600:	bf00      	nop
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	603b      	str	r3, [r7, #0]
 8003618:	4613      	mov	r3, r2
 800361a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800361c:	e031      	b.n	8003682 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003624:	d02d      	beq.n	8003682 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003626:	f7fe ff61 	bl	80024ec <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	683a      	ldr	r2, [r7, #0]
 8003632:	429a      	cmp	r2, r3
 8003634:	d302      	bcc.n	800363c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d122      	bne.n	8003682 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	699a      	ldr	r2, [r3, #24]
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	4013      	ands	r3, r2
 8003646:	68ba      	ldr	r2, [r7, #8]
 8003648:	429a      	cmp	r2, r3
 800364a:	bf0c      	ite	eq
 800364c:	2301      	moveq	r3, #1
 800364e:	2300      	movne	r3, #0
 8003650:	b2db      	uxtb	r3, r3
 8003652:	461a      	mov	r2, r3
 8003654:	79fb      	ldrb	r3, [r7, #7]
 8003656:	429a      	cmp	r2, r3
 8003658:	d113      	bne.n	8003682 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800365e:	f043 0220 	orr.w	r2, r3, #32
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2220      	movs	r2, #32
 800366a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e00f      	b.n	80036a2 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	699a      	ldr	r2, [r3, #24]
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	4013      	ands	r3, r2
 800368c:	68ba      	ldr	r2, [r7, #8]
 800368e:	429a      	cmp	r2, r3
 8003690:	bf0c      	ite	eq
 8003692:	2301      	moveq	r3, #1
 8003694:	2300      	movne	r3, #0
 8003696:	b2db      	uxtb	r3, r3
 8003698:	461a      	mov	r2, r3
 800369a:	79fb      	ldrb	r3, [r7, #7]
 800369c:	429a      	cmp	r2, r3
 800369e:	d0be      	beq.n	800361e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3710      	adds	r7, #16
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}

080036aa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80036aa:	b580      	push	{r7, lr}
 80036ac:	b084      	sub	sp, #16
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	60f8      	str	r0, [r7, #12]
 80036b2:	60b9      	str	r1, [r7, #8]
 80036b4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80036b6:	e033      	b.n	8003720 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	68b9      	ldr	r1, [r7, #8]
 80036bc:	68f8      	ldr	r0, [r7, #12]
 80036be:	f000 f87f 	bl	80037c0 <I2C_IsErrorOccurred>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d001      	beq.n	80036cc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e031      	b.n	8003730 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036d2:	d025      	beq.n	8003720 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036d4:	f7fe ff0a 	bl	80024ec <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	68ba      	ldr	r2, [r7, #8]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d302      	bcc.n	80036ea <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d11a      	bne.n	8003720 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	699b      	ldr	r3, [r3, #24]
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d013      	beq.n	8003720 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fc:	f043 0220 	orr.w	r2, r3, #32
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2220      	movs	r2, #32
 8003708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e007      	b.n	8003730 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	f003 0302 	and.w	r3, r3, #2
 800372a:	2b02      	cmp	r3, #2
 800372c:	d1c4      	bne.n	80036b8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800372e:	2300      	movs	r3, #0
}
 8003730:	4618      	mov	r0, r3
 8003732:	3710      	adds	r7, #16
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003744:	e02f      	b.n	80037a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	68b9      	ldr	r1, [r7, #8]
 800374a:	68f8      	ldr	r0, [r7, #12]
 800374c:	f000 f838 	bl	80037c0 <I2C_IsErrorOccurred>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d001      	beq.n	800375a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e02d      	b.n	80037b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800375a:	f7fe fec7 	bl	80024ec <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	68ba      	ldr	r2, [r7, #8]
 8003766:	429a      	cmp	r2, r3
 8003768:	d302      	bcc.n	8003770 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d11a      	bne.n	80037a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	f003 0320 	and.w	r3, r3, #32
 800377a:	2b20      	cmp	r3, #32
 800377c:	d013      	beq.n	80037a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003782:	f043 0220 	orr.w	r2, r3, #32
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2220      	movs	r2, #32
 800378e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e007      	b.n	80037b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	699b      	ldr	r3, [r3, #24]
 80037ac:	f003 0320 	and.w	r3, r3, #32
 80037b0:	2b20      	cmp	r3, #32
 80037b2:	d1c8      	bne.n	8003746 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3710      	adds	r7, #16
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
	...

080037c0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b08a      	sub	sp, #40	; 0x28
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037cc:	2300      	movs	r3, #0
 80037ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	699b      	ldr	r3, [r3, #24]
 80037d8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80037da:	2300      	movs	r3, #0
 80037dc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	f003 0310 	and.w	r3, r3, #16
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d068      	beq.n	80038be <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2210      	movs	r2, #16
 80037f2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80037f4:	e049      	b.n	800388a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037fc:	d045      	beq.n	800388a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80037fe:	f7fe fe75 	bl	80024ec <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	68ba      	ldr	r2, [r7, #8]
 800380a:	429a      	cmp	r2, r3
 800380c:	d302      	bcc.n	8003814 <I2C_IsErrorOccurred+0x54>
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d13a      	bne.n	800388a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800381e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003826:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	699b      	ldr	r3, [r3, #24]
 800382e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003832:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003836:	d121      	bne.n	800387c <I2C_IsErrorOccurred+0xbc>
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800383e:	d01d      	beq.n	800387c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003840:	7cfb      	ldrb	r3, [r7, #19]
 8003842:	2b20      	cmp	r3, #32
 8003844:	d01a      	beq.n	800387c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	685a      	ldr	r2, [r3, #4]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003854:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003856:	f7fe fe49 	bl	80024ec <HAL_GetTick>
 800385a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800385c:	e00e      	b.n	800387c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800385e:	f7fe fe45 	bl	80024ec <HAL_GetTick>
 8003862:	4602      	mov	r2, r0
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	2b19      	cmp	r3, #25
 800386a:	d907      	bls.n	800387c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800386c:	6a3b      	ldr	r3, [r7, #32]
 800386e:	f043 0320 	orr.w	r3, r3, #32
 8003872:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800387a:	e006      	b.n	800388a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	f003 0320 	and.w	r3, r3, #32
 8003886:	2b20      	cmp	r3, #32
 8003888:	d1e9      	bne.n	800385e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	699b      	ldr	r3, [r3, #24]
 8003890:	f003 0320 	and.w	r3, r3, #32
 8003894:	2b20      	cmp	r3, #32
 8003896:	d003      	beq.n	80038a0 <I2C_IsErrorOccurred+0xe0>
 8003898:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800389c:	2b00      	cmp	r3, #0
 800389e:	d0aa      	beq.n	80037f6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80038a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d103      	bne.n	80038b0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2220      	movs	r2, #32
 80038ae:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80038b0:	6a3b      	ldr	r3, [r7, #32]
 80038b2:	f043 0304 	orr.w	r3, r3, #4
 80038b6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d00b      	beq.n	80038e8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80038d0:	6a3b      	ldr	r3, [r7, #32]
 80038d2:	f043 0301 	orr.w	r3, r3, #1
 80038d6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80038e0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00b      	beq.n	800390a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80038f2:	6a3b      	ldr	r3, [r7, #32]
 80038f4:	f043 0308 	orr.w	r3, r3, #8
 80038f8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003902:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003910:	2b00      	cmp	r3, #0
 8003912:	d00b      	beq.n	800392c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003914:	6a3b      	ldr	r3, [r7, #32]
 8003916:	f043 0302 	orr.w	r3, r3, #2
 800391a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003924:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800392c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003930:	2b00      	cmp	r3, #0
 8003932:	d01c      	beq.n	800396e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003934:	68f8      	ldr	r0, [r7, #12]
 8003936:	f7ff fe45 	bl	80035c4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	6859      	ldr	r1, [r3, #4]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	4b0d      	ldr	r3, [pc, #52]	; (800397c <I2C_IsErrorOccurred+0x1bc>)
 8003946:	400b      	ands	r3, r1
 8003948:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800394e:	6a3b      	ldr	r3, [r7, #32]
 8003950:	431a      	orrs	r2, r3
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2220      	movs	r2, #32
 800395a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800396e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003972:	4618      	mov	r0, r3
 8003974:	3728      	adds	r7, #40	; 0x28
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	fe00e800 	.word	0xfe00e800

08003980 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003980:	b480      	push	{r7}
 8003982:	b087      	sub	sp, #28
 8003984:	af00      	add	r7, sp, #0
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	607b      	str	r3, [r7, #4]
 800398a:	460b      	mov	r3, r1
 800398c:	817b      	strh	r3, [r7, #10]
 800398e:	4613      	mov	r3, r2
 8003990:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003992:	897b      	ldrh	r3, [r7, #10]
 8003994:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003998:	7a7b      	ldrb	r3, [r7, #9]
 800399a:	041b      	lsls	r3, r3, #16
 800399c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80039a0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80039a6:	6a3b      	ldr	r3, [r7, #32]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80039ae:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	685a      	ldr	r2, [r3, #4]
 80039b6:	6a3b      	ldr	r3, [r7, #32]
 80039b8:	0d5b      	lsrs	r3, r3, #21
 80039ba:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80039be:	4b08      	ldr	r3, [pc, #32]	; (80039e0 <I2C_TransferConfig+0x60>)
 80039c0:	430b      	orrs	r3, r1
 80039c2:	43db      	mvns	r3, r3
 80039c4:	ea02 0103 	and.w	r1, r2, r3
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	697a      	ldr	r2, [r7, #20]
 80039ce:	430a      	orrs	r2, r1
 80039d0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80039d2:	bf00      	nop
 80039d4:	371c      	adds	r7, #28
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr
 80039de:	bf00      	nop
 80039e0:	03ff63ff 	.word	0x03ff63ff

080039e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b20      	cmp	r3, #32
 80039f8:	d138      	bne.n	8003a6c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d101      	bne.n	8003a08 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003a04:	2302      	movs	r3, #2
 8003a06:	e032      	b.n	8003a6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2224      	movs	r2, #36	; 0x24
 8003a14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f022 0201 	bic.w	r2, r2, #1
 8003a26:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a36:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	6819      	ldr	r1, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	683a      	ldr	r2, [r7, #0]
 8003a44:	430a      	orrs	r2, r1
 8003a46:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f042 0201 	orr.w	r2, r2, #1
 8003a56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2220      	movs	r2, #32
 8003a5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	e000      	b.n	8003a6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003a6c:	2302      	movs	r3, #2
  }
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	370c      	adds	r7, #12
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr

08003a7a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003a7a:	b480      	push	{r7}
 8003a7c:	b085      	sub	sp, #20
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
 8003a82:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	2b20      	cmp	r3, #32
 8003a8e:	d139      	bne.n	8003b04 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d101      	bne.n	8003a9e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003a9a:	2302      	movs	r3, #2
 8003a9c:	e033      	b.n	8003b06 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2224      	movs	r2, #36	; 0x24
 8003aaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f022 0201 	bic.w	r2, r2, #1
 8003abc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003acc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	021b      	lsls	r3, r3, #8
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	68fa      	ldr	r2, [r7, #12]
 8003ade:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f042 0201 	orr.w	r2, r2, #1
 8003aee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2220      	movs	r2, #32
 8003af4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b00:	2300      	movs	r3, #0
 8003b02:	e000      	b.n	8003b06 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003b04:	2302      	movs	r3, #2
  }
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3714      	adds	r7, #20
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
	...

08003b14 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003b14:	b480      	push	{r7}
 8003b16:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b18:	4b05      	ldr	r3, [pc, #20]	; (8003b30 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a04      	ldr	r2, [pc, #16]	; (8003b30 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003b1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b22:	6013      	str	r3, [r2, #0]
}
 8003b24:	bf00      	nop
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	40007000 	.word	0x40007000

08003b34 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003b34:	b480      	push	{r7}
 8003b36:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003b38:	4b04      	ldr	r3, [pc, #16]	; (8003b4c <HAL_PWREx_GetVoltageRange+0x18>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop
 8003b4c:	40007000 	.word	0x40007000

08003b50 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b085      	sub	sp, #20
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b5e:	d130      	bne.n	8003bc2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b60:	4b23      	ldr	r3, [pc, #140]	; (8003bf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003b68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b6c:	d038      	beq.n	8003be0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b6e:	4b20      	ldr	r3, [pc, #128]	; (8003bf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003b76:	4a1e      	ldr	r2, [pc, #120]	; (8003bf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b7c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003b7e:	4b1d      	ldr	r3, [pc, #116]	; (8003bf4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2232      	movs	r2, #50	; 0x32
 8003b84:	fb02 f303 	mul.w	r3, r2, r3
 8003b88:	4a1b      	ldr	r2, [pc, #108]	; (8003bf8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b8e:	0c9b      	lsrs	r3, r3, #18
 8003b90:	3301      	adds	r3, #1
 8003b92:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b94:	e002      	b.n	8003b9c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	3b01      	subs	r3, #1
 8003b9a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b9c:	4b14      	ldr	r3, [pc, #80]	; (8003bf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b9e:	695b      	ldr	r3, [r3, #20]
 8003ba0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ba4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ba8:	d102      	bne.n	8003bb0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d1f2      	bne.n	8003b96 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003bb0:	4b0f      	ldr	r3, [pc, #60]	; (8003bf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bb2:	695b      	ldr	r3, [r3, #20]
 8003bb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bbc:	d110      	bne.n	8003be0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e00f      	b.n	8003be2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003bc2:	4b0b      	ldr	r3, [pc, #44]	; (8003bf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003bca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bce:	d007      	beq.n	8003be0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003bd0:	4b07      	ldr	r3, [pc, #28]	; (8003bf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003bd8:	4a05      	ldr	r2, [pc, #20]	; (8003bf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003bde:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3714      	adds	r7, #20
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop
 8003bf0:	40007000 	.word	0x40007000
 8003bf4:	20000000 	.word	0x20000000
 8003bf8:	431bde83 	.word	0x431bde83

08003bfc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b08a      	sub	sp, #40	; 0x28
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d102      	bne.n	8003c10 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	f000 bc4f 	b.w	80044ae <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c10:	4b97      	ldr	r3, [pc, #604]	; (8003e70 <HAL_RCC_OscConfig+0x274>)
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	f003 030c 	and.w	r3, r3, #12
 8003c18:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c1a:	4b95      	ldr	r3, [pc, #596]	; (8003e70 <HAL_RCC_OscConfig+0x274>)
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	f003 0303 	and.w	r3, r3, #3
 8003c22:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0310 	and.w	r3, r3, #16
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	f000 80e6 	beq.w	8003dfe <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003c32:	6a3b      	ldr	r3, [r7, #32]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d007      	beq.n	8003c48 <HAL_RCC_OscConfig+0x4c>
 8003c38:	6a3b      	ldr	r3, [r7, #32]
 8003c3a:	2b0c      	cmp	r3, #12
 8003c3c:	f040 808d 	bne.w	8003d5a <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	f040 8089 	bne.w	8003d5a <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003c48:	4b89      	ldr	r3, [pc, #548]	; (8003e70 <HAL_RCC_OscConfig+0x274>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0302 	and.w	r3, r3, #2
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d006      	beq.n	8003c62 <HAL_RCC_OscConfig+0x66>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	69db      	ldr	r3, [r3, #28]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d102      	bne.n	8003c62 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	f000 bc26 	b.w	80044ae <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c66:	4b82      	ldr	r3, [pc, #520]	; (8003e70 <HAL_RCC_OscConfig+0x274>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0308 	and.w	r3, r3, #8
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d004      	beq.n	8003c7c <HAL_RCC_OscConfig+0x80>
 8003c72:	4b7f      	ldr	r3, [pc, #508]	; (8003e70 <HAL_RCC_OscConfig+0x274>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c7a:	e005      	b.n	8003c88 <HAL_RCC_OscConfig+0x8c>
 8003c7c:	4b7c      	ldr	r3, [pc, #496]	; (8003e70 <HAL_RCC_OscConfig+0x274>)
 8003c7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c82:	091b      	lsrs	r3, r3, #4
 8003c84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d224      	bcs.n	8003cd6 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c90:	4618      	mov	r0, r3
 8003c92:	f000 fe0b 	bl	80048ac <RCC_SetFlashLatencyFromMSIRange>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d002      	beq.n	8003ca2 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	f000 bc06 	b.w	80044ae <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ca2:	4b73      	ldr	r3, [pc, #460]	; (8003e70 <HAL_RCC_OscConfig+0x274>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a72      	ldr	r2, [pc, #456]	; (8003e70 <HAL_RCC_OscConfig+0x274>)
 8003ca8:	f043 0308 	orr.w	r3, r3, #8
 8003cac:	6013      	str	r3, [r2, #0]
 8003cae:	4b70      	ldr	r3, [pc, #448]	; (8003e70 <HAL_RCC_OscConfig+0x274>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cba:	496d      	ldr	r1, [pc, #436]	; (8003e70 <HAL_RCC_OscConfig+0x274>)
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003cc0:	4b6b      	ldr	r3, [pc, #428]	; (8003e70 <HAL_RCC_OscConfig+0x274>)
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a1b      	ldr	r3, [r3, #32]
 8003ccc:	021b      	lsls	r3, r3, #8
 8003cce:	4968      	ldr	r1, [pc, #416]	; (8003e70 <HAL_RCC_OscConfig+0x274>)
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	604b      	str	r3, [r1, #4]
 8003cd4:	e025      	b.n	8003d22 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003cd6:	4b66      	ldr	r3, [pc, #408]	; (8003e70 <HAL_RCC_OscConfig+0x274>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a65      	ldr	r2, [pc, #404]	; (8003e70 <HAL_RCC_OscConfig+0x274>)
 8003cdc:	f043 0308 	orr.w	r3, r3, #8
 8003ce0:	6013      	str	r3, [r2, #0]
 8003ce2:	4b63      	ldr	r3, [pc, #396]	; (8003e70 <HAL_RCC_OscConfig+0x274>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cee:	4960      	ldr	r1, [pc, #384]	; (8003e70 <HAL_RCC_OscConfig+0x274>)
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003cf4:	4b5e      	ldr	r3, [pc, #376]	; (8003e70 <HAL_RCC_OscConfig+0x274>)
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6a1b      	ldr	r3, [r3, #32]
 8003d00:	021b      	lsls	r3, r3, #8
 8003d02:	495b      	ldr	r1, [pc, #364]	; (8003e70 <HAL_RCC_OscConfig+0x274>)
 8003d04:	4313      	orrs	r3, r2
 8003d06:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d08:	6a3b      	ldr	r3, [r7, #32]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d109      	bne.n	8003d22 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d12:	4618      	mov	r0, r3
 8003d14:	f000 fdca 	bl	80048ac <RCC_SetFlashLatencyFromMSIRange>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d001      	beq.n	8003d22 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e3c5      	b.n	80044ae <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d22:	f000 fccd 	bl	80046c0 <HAL_RCC_GetSysClockFreq>
 8003d26:	4602      	mov	r2, r0
 8003d28:	4b51      	ldr	r3, [pc, #324]	; (8003e70 <HAL_RCC_OscConfig+0x274>)
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	091b      	lsrs	r3, r3, #4
 8003d2e:	f003 030f 	and.w	r3, r3, #15
 8003d32:	4950      	ldr	r1, [pc, #320]	; (8003e74 <HAL_RCC_OscConfig+0x278>)
 8003d34:	5ccb      	ldrb	r3, [r1, r3]
 8003d36:	f003 031f 	and.w	r3, r3, #31
 8003d3a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d3e:	4a4e      	ldr	r2, [pc, #312]	; (8003e78 <HAL_RCC_OscConfig+0x27c>)
 8003d40:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003d42:	4b4e      	ldr	r3, [pc, #312]	; (8003e7c <HAL_RCC_OscConfig+0x280>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4618      	mov	r0, r3
 8003d48:	f7fe f9ea 	bl	8002120 <HAL_InitTick>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8003d50:	7dfb      	ldrb	r3, [r7, #23]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d052      	beq.n	8003dfc <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8003d56:	7dfb      	ldrb	r3, [r7, #23]
 8003d58:	e3a9      	b.n	80044ae <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	69db      	ldr	r3, [r3, #28]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d032      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003d62:	4b43      	ldr	r3, [pc, #268]	; (8003e70 <HAL_RCC_OscConfig+0x274>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a42      	ldr	r2, [pc, #264]	; (8003e70 <HAL_RCC_OscConfig+0x274>)
 8003d68:	f043 0301 	orr.w	r3, r3, #1
 8003d6c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003d6e:	f7fe fbbd 	bl	80024ec <HAL_GetTick>
 8003d72:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d74:	e008      	b.n	8003d88 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d76:	f7fe fbb9 	bl	80024ec <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d901      	bls.n	8003d88 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e392      	b.n	80044ae <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d88:	4b39      	ldr	r3, [pc, #228]	; (8003e70 <HAL_RCC_OscConfig+0x274>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0302 	and.w	r3, r3, #2
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d0f0      	beq.n	8003d76 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d94:	4b36      	ldr	r3, [pc, #216]	; (8003e70 <HAL_RCC_OscConfig+0x274>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a35      	ldr	r2, [pc, #212]	; (8003e70 <HAL_RCC_OscConfig+0x274>)
 8003d9a:	f043 0308 	orr.w	r3, r3, #8
 8003d9e:	6013      	str	r3, [r2, #0]
 8003da0:	4b33      	ldr	r3, [pc, #204]	; (8003e70 <HAL_RCC_OscConfig+0x274>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dac:	4930      	ldr	r1, [pc, #192]	; (8003e70 <HAL_RCC_OscConfig+0x274>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003db2:	4b2f      	ldr	r3, [pc, #188]	; (8003e70 <HAL_RCC_OscConfig+0x274>)
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a1b      	ldr	r3, [r3, #32]
 8003dbe:	021b      	lsls	r3, r3, #8
 8003dc0:	492b      	ldr	r1, [pc, #172]	; (8003e70 <HAL_RCC_OscConfig+0x274>)
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	604b      	str	r3, [r1, #4]
 8003dc6:	e01a      	b.n	8003dfe <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003dc8:	4b29      	ldr	r3, [pc, #164]	; (8003e70 <HAL_RCC_OscConfig+0x274>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a28      	ldr	r2, [pc, #160]	; (8003e70 <HAL_RCC_OscConfig+0x274>)
 8003dce:	f023 0301 	bic.w	r3, r3, #1
 8003dd2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003dd4:	f7fe fb8a 	bl	80024ec <HAL_GetTick>
 8003dd8:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003dda:	e008      	b.n	8003dee <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ddc:	f7fe fb86 	bl	80024ec <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d901      	bls.n	8003dee <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e35f      	b.n	80044ae <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003dee:	4b20      	ldr	r3, [pc, #128]	; (8003e70 <HAL_RCC_OscConfig+0x274>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0302 	and.w	r3, r3, #2
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d1f0      	bne.n	8003ddc <HAL_RCC_OscConfig+0x1e0>
 8003dfa:	e000      	b.n	8003dfe <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003dfc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0301 	and.w	r3, r3, #1
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d073      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003e0a:	6a3b      	ldr	r3, [r7, #32]
 8003e0c:	2b08      	cmp	r3, #8
 8003e0e:	d005      	beq.n	8003e1c <HAL_RCC_OscConfig+0x220>
 8003e10:	6a3b      	ldr	r3, [r7, #32]
 8003e12:	2b0c      	cmp	r3, #12
 8003e14:	d10e      	bne.n	8003e34 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	2b03      	cmp	r3, #3
 8003e1a:	d10b      	bne.n	8003e34 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e1c:	4b14      	ldr	r3, [pc, #80]	; (8003e70 <HAL_RCC_OscConfig+0x274>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d063      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x2f4>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d15f      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e33c      	b.n	80044ae <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e3c:	d106      	bne.n	8003e4c <HAL_RCC_OscConfig+0x250>
 8003e3e:	4b0c      	ldr	r3, [pc, #48]	; (8003e70 <HAL_RCC_OscConfig+0x274>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a0b      	ldr	r2, [pc, #44]	; (8003e70 <HAL_RCC_OscConfig+0x274>)
 8003e44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e48:	6013      	str	r3, [r2, #0]
 8003e4a:	e025      	b.n	8003e98 <HAL_RCC_OscConfig+0x29c>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e54:	d114      	bne.n	8003e80 <HAL_RCC_OscConfig+0x284>
 8003e56:	4b06      	ldr	r3, [pc, #24]	; (8003e70 <HAL_RCC_OscConfig+0x274>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a05      	ldr	r2, [pc, #20]	; (8003e70 <HAL_RCC_OscConfig+0x274>)
 8003e5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e60:	6013      	str	r3, [r2, #0]
 8003e62:	4b03      	ldr	r3, [pc, #12]	; (8003e70 <HAL_RCC_OscConfig+0x274>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a02      	ldr	r2, [pc, #8]	; (8003e70 <HAL_RCC_OscConfig+0x274>)
 8003e68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e6c:	6013      	str	r3, [r2, #0]
 8003e6e:	e013      	b.n	8003e98 <HAL_RCC_OscConfig+0x29c>
 8003e70:	40021000 	.word	0x40021000
 8003e74:	0800d414 	.word	0x0800d414
 8003e78:	20000000 	.word	0x20000000
 8003e7c:	20000004 	.word	0x20000004
 8003e80:	4b8f      	ldr	r3, [pc, #572]	; (80040c0 <HAL_RCC_OscConfig+0x4c4>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a8e      	ldr	r2, [pc, #568]	; (80040c0 <HAL_RCC_OscConfig+0x4c4>)
 8003e86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e8a:	6013      	str	r3, [r2, #0]
 8003e8c:	4b8c      	ldr	r3, [pc, #560]	; (80040c0 <HAL_RCC_OscConfig+0x4c4>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a8b      	ldr	r2, [pc, #556]	; (80040c0 <HAL_RCC_OscConfig+0x4c4>)
 8003e92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d013      	beq.n	8003ec8 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea0:	f7fe fb24 	bl	80024ec <HAL_GetTick>
 8003ea4:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ea6:	e008      	b.n	8003eba <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ea8:	f7fe fb20 	bl	80024ec <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	2b64      	cmp	r3, #100	; 0x64
 8003eb4:	d901      	bls.n	8003eba <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e2f9      	b.n	80044ae <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003eba:	4b81      	ldr	r3, [pc, #516]	; (80040c0 <HAL_RCC_OscConfig+0x4c4>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d0f0      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x2ac>
 8003ec6:	e014      	b.n	8003ef2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec8:	f7fe fb10 	bl	80024ec <HAL_GetTick>
 8003ecc:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ece:	e008      	b.n	8003ee2 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ed0:	f7fe fb0c 	bl	80024ec <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	2b64      	cmp	r3, #100	; 0x64
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e2e5      	b.n	80044ae <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ee2:	4b77      	ldr	r3, [pc, #476]	; (80040c0 <HAL_RCC_OscConfig+0x4c4>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1f0      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x2d4>
 8003eee:	e000      	b.n	8003ef2 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ef0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0302 	and.w	r3, r3, #2
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d060      	beq.n	8003fc0 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003efe:	6a3b      	ldr	r3, [r7, #32]
 8003f00:	2b04      	cmp	r3, #4
 8003f02:	d005      	beq.n	8003f10 <HAL_RCC_OscConfig+0x314>
 8003f04:	6a3b      	ldr	r3, [r7, #32]
 8003f06:	2b0c      	cmp	r3, #12
 8003f08:	d119      	bne.n	8003f3e <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	d116      	bne.n	8003f3e <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f10:	4b6b      	ldr	r3, [pc, #428]	; (80040c0 <HAL_RCC_OscConfig+0x4c4>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d005      	beq.n	8003f28 <HAL_RCC_OscConfig+0x32c>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d101      	bne.n	8003f28 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e2c2      	b.n	80044ae <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f28:	4b65      	ldr	r3, [pc, #404]	; (80040c0 <HAL_RCC_OscConfig+0x4c4>)
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	691b      	ldr	r3, [r3, #16]
 8003f34:	061b      	lsls	r3, r3, #24
 8003f36:	4962      	ldr	r1, [pc, #392]	; (80040c0 <HAL_RCC_OscConfig+0x4c4>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f3c:	e040      	b.n	8003fc0 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d023      	beq.n	8003f8e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f46:	4b5e      	ldr	r3, [pc, #376]	; (80040c0 <HAL_RCC_OscConfig+0x4c4>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a5d      	ldr	r2, [pc, #372]	; (80040c0 <HAL_RCC_OscConfig+0x4c4>)
 8003f4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f52:	f7fe facb 	bl	80024ec <HAL_GetTick>
 8003f56:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f58:	e008      	b.n	8003f6c <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f5a:	f7fe fac7 	bl	80024ec <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d901      	bls.n	8003f6c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e2a0      	b.n	80044ae <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f6c:	4b54      	ldr	r3, [pc, #336]	; (80040c0 <HAL_RCC_OscConfig+0x4c4>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d0f0      	beq.n	8003f5a <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f78:	4b51      	ldr	r3, [pc, #324]	; (80040c0 <HAL_RCC_OscConfig+0x4c4>)
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	061b      	lsls	r3, r3, #24
 8003f86:	494e      	ldr	r1, [pc, #312]	; (80040c0 <HAL_RCC_OscConfig+0x4c4>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	604b      	str	r3, [r1, #4]
 8003f8c:	e018      	b.n	8003fc0 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f8e:	4b4c      	ldr	r3, [pc, #304]	; (80040c0 <HAL_RCC_OscConfig+0x4c4>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a4b      	ldr	r2, [pc, #300]	; (80040c0 <HAL_RCC_OscConfig+0x4c4>)
 8003f94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f9a:	f7fe faa7 	bl	80024ec <HAL_GetTick>
 8003f9e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fa0:	e008      	b.n	8003fb4 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fa2:	f7fe faa3 	bl	80024ec <HAL_GetTick>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d901      	bls.n	8003fb4 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e27c      	b.n	80044ae <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fb4:	4b42      	ldr	r3, [pc, #264]	; (80040c0 <HAL_RCC_OscConfig+0x4c4>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d1f0      	bne.n	8003fa2 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0308 	and.w	r3, r3, #8
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	f000 8082 	beq.w	80040d2 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	695b      	ldr	r3, [r3, #20]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d05f      	beq.n	8004096 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8003fd6:	4b3a      	ldr	r3, [pc, #232]	; (80040c0 <HAL_RCC_OscConfig+0x4c4>)
 8003fd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fdc:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	699a      	ldr	r2, [r3, #24]
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	f003 0310 	and.w	r3, r3, #16
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d037      	beq.n	800405c <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	f003 0302 	and.w	r3, r3, #2
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d006      	beq.n	8004004 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d101      	bne.n	8004004 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e254      	b.n	80044ae <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	2b00      	cmp	r3, #0
 800400c:	d01b      	beq.n	8004046 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 800400e:	4b2c      	ldr	r3, [pc, #176]	; (80040c0 <HAL_RCC_OscConfig+0x4c4>)
 8004010:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004014:	4a2a      	ldr	r2, [pc, #168]	; (80040c0 <HAL_RCC_OscConfig+0x4c4>)
 8004016:	f023 0301 	bic.w	r3, r3, #1
 800401a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800401e:	f7fe fa65 	bl	80024ec <HAL_GetTick>
 8004022:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004024:	e008      	b.n	8004038 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004026:	f7fe fa61 	bl	80024ec <HAL_GetTick>
 800402a:	4602      	mov	r2, r0
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	2b11      	cmp	r3, #17
 8004032:	d901      	bls.n	8004038 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8004034:	2303      	movs	r3, #3
 8004036:	e23a      	b.n	80044ae <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004038:	4b21      	ldr	r3, [pc, #132]	; (80040c0 <HAL_RCC_OscConfig+0x4c4>)
 800403a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800403e:	f003 0302 	and.w	r3, r3, #2
 8004042:	2b00      	cmp	r3, #0
 8004044:	d1ef      	bne.n	8004026 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8004046:	4b1e      	ldr	r3, [pc, #120]	; (80040c0 <HAL_RCC_OscConfig+0x4c4>)
 8004048:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800404c:	f023 0210 	bic.w	r2, r3, #16
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	699b      	ldr	r3, [r3, #24]
 8004054:	491a      	ldr	r1, [pc, #104]	; (80040c0 <HAL_RCC_OscConfig+0x4c4>)
 8004056:	4313      	orrs	r3, r2
 8004058:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800405c:	4b18      	ldr	r3, [pc, #96]	; (80040c0 <HAL_RCC_OscConfig+0x4c4>)
 800405e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004062:	4a17      	ldr	r2, [pc, #92]	; (80040c0 <HAL_RCC_OscConfig+0x4c4>)
 8004064:	f043 0301 	orr.w	r3, r3, #1
 8004068:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800406c:	f7fe fa3e 	bl	80024ec <HAL_GetTick>
 8004070:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004072:	e008      	b.n	8004086 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004074:	f7fe fa3a 	bl	80024ec <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	69bb      	ldr	r3, [r7, #24]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	2b11      	cmp	r3, #17
 8004080:	d901      	bls.n	8004086 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e213      	b.n	80044ae <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004086:	4b0e      	ldr	r3, [pc, #56]	; (80040c0 <HAL_RCC_OscConfig+0x4c4>)
 8004088:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800408c:	f003 0302 	and.w	r3, r3, #2
 8004090:	2b00      	cmp	r3, #0
 8004092:	d0ef      	beq.n	8004074 <HAL_RCC_OscConfig+0x478>
 8004094:	e01d      	b.n	80040d2 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004096:	4b0a      	ldr	r3, [pc, #40]	; (80040c0 <HAL_RCC_OscConfig+0x4c4>)
 8004098:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800409c:	4a08      	ldr	r2, [pc, #32]	; (80040c0 <HAL_RCC_OscConfig+0x4c4>)
 800409e:	f023 0301 	bic.w	r3, r3, #1
 80040a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040a6:	f7fe fa21 	bl	80024ec <HAL_GetTick>
 80040aa:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040ac:	e00a      	b.n	80040c4 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040ae:	f7fe fa1d 	bl	80024ec <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	2b11      	cmp	r3, #17
 80040ba:	d903      	bls.n	80040c4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e1f6      	b.n	80044ae <HAL_RCC_OscConfig+0x8b2>
 80040c0:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040c4:	4ba9      	ldr	r3, [pc, #676]	; (800436c <HAL_RCC_OscConfig+0x770>)
 80040c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040ca:	f003 0302 	and.w	r3, r3, #2
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d1ed      	bne.n	80040ae <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0304 	and.w	r3, r3, #4
 80040da:	2b00      	cmp	r3, #0
 80040dc:	f000 80bd 	beq.w	800425a <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040e0:	2300      	movs	r3, #0
 80040e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80040e6:	4ba1      	ldr	r3, [pc, #644]	; (800436c <HAL_RCC_OscConfig+0x770>)
 80040e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d10e      	bne.n	8004110 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040f2:	4b9e      	ldr	r3, [pc, #632]	; (800436c <HAL_RCC_OscConfig+0x770>)
 80040f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f6:	4a9d      	ldr	r2, [pc, #628]	; (800436c <HAL_RCC_OscConfig+0x770>)
 80040f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040fc:	6593      	str	r3, [r2, #88]	; 0x58
 80040fe:	4b9b      	ldr	r3, [pc, #620]	; (800436c <HAL_RCC_OscConfig+0x770>)
 8004100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004106:	60fb      	str	r3, [r7, #12]
 8004108:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800410a:	2301      	movs	r3, #1
 800410c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004110:	4b97      	ldr	r3, [pc, #604]	; (8004370 <HAL_RCC_OscConfig+0x774>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004118:	2b00      	cmp	r3, #0
 800411a:	d118      	bne.n	800414e <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800411c:	4b94      	ldr	r3, [pc, #592]	; (8004370 <HAL_RCC_OscConfig+0x774>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a93      	ldr	r2, [pc, #588]	; (8004370 <HAL_RCC_OscConfig+0x774>)
 8004122:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004126:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004128:	f7fe f9e0 	bl	80024ec <HAL_GetTick>
 800412c:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800412e:	e008      	b.n	8004142 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004130:	f7fe f9dc 	bl	80024ec <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	69bb      	ldr	r3, [r7, #24]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	2b02      	cmp	r3, #2
 800413c:	d901      	bls.n	8004142 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e1b5      	b.n	80044ae <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004142:	4b8b      	ldr	r3, [pc, #556]	; (8004370 <HAL_RCC_OscConfig+0x774>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800414a:	2b00      	cmp	r3, #0
 800414c:	d0f0      	beq.n	8004130 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	f003 0301 	and.w	r3, r3, #1
 8004156:	2b00      	cmp	r3, #0
 8004158:	d02c      	beq.n	80041b4 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 800415a:	4b84      	ldr	r3, [pc, #528]	; (800436c <HAL_RCC_OscConfig+0x770>)
 800415c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004160:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800416c:	497f      	ldr	r1, [pc, #508]	; (800436c <HAL_RCC_OscConfig+0x770>)
 800416e:	4313      	orrs	r3, r2
 8004170:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	f003 0304 	and.w	r3, r3, #4
 800417c:	2b00      	cmp	r3, #0
 800417e:	d010      	beq.n	80041a2 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004180:	4b7a      	ldr	r3, [pc, #488]	; (800436c <HAL_RCC_OscConfig+0x770>)
 8004182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004186:	4a79      	ldr	r2, [pc, #484]	; (800436c <HAL_RCC_OscConfig+0x770>)
 8004188:	f043 0304 	orr.w	r3, r3, #4
 800418c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004190:	4b76      	ldr	r3, [pc, #472]	; (800436c <HAL_RCC_OscConfig+0x770>)
 8004192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004196:	4a75      	ldr	r2, [pc, #468]	; (800436c <HAL_RCC_OscConfig+0x770>)
 8004198:	f043 0301 	orr.w	r3, r3, #1
 800419c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041a0:	e018      	b.n	80041d4 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80041a2:	4b72      	ldr	r3, [pc, #456]	; (800436c <HAL_RCC_OscConfig+0x770>)
 80041a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041a8:	4a70      	ldr	r2, [pc, #448]	; (800436c <HAL_RCC_OscConfig+0x770>)
 80041aa:	f043 0301 	orr.w	r3, r3, #1
 80041ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041b2:	e00f      	b.n	80041d4 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80041b4:	4b6d      	ldr	r3, [pc, #436]	; (800436c <HAL_RCC_OscConfig+0x770>)
 80041b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ba:	4a6c      	ldr	r2, [pc, #432]	; (800436c <HAL_RCC_OscConfig+0x770>)
 80041bc:	f023 0301 	bic.w	r3, r3, #1
 80041c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80041c4:	4b69      	ldr	r3, [pc, #420]	; (800436c <HAL_RCC_OscConfig+0x770>)
 80041c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ca:	4a68      	ldr	r2, [pc, #416]	; (800436c <HAL_RCC_OscConfig+0x770>)
 80041cc:	f023 0304 	bic.w	r3, r3, #4
 80041d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d016      	beq.n	800420a <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041dc:	f7fe f986 	bl	80024ec <HAL_GetTick>
 80041e0:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041e2:	e00a      	b.n	80041fa <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041e4:	f7fe f982 	bl	80024ec <HAL_GetTick>
 80041e8:	4602      	mov	r2, r0
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d901      	bls.n	80041fa <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e159      	b.n	80044ae <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041fa:	4b5c      	ldr	r3, [pc, #368]	; (800436c <HAL_RCC_OscConfig+0x770>)
 80041fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004200:	f003 0302 	and.w	r3, r3, #2
 8004204:	2b00      	cmp	r3, #0
 8004206:	d0ed      	beq.n	80041e4 <HAL_RCC_OscConfig+0x5e8>
 8004208:	e01d      	b.n	8004246 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800420a:	f7fe f96f 	bl	80024ec <HAL_GetTick>
 800420e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004210:	e00a      	b.n	8004228 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004212:	f7fe f96b 	bl	80024ec <HAL_GetTick>
 8004216:	4602      	mov	r2, r0
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004220:	4293      	cmp	r3, r2
 8004222:	d901      	bls.n	8004228 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8004224:	2303      	movs	r3, #3
 8004226:	e142      	b.n	80044ae <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004228:	4b50      	ldr	r3, [pc, #320]	; (800436c <HAL_RCC_OscConfig+0x770>)
 800422a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800422e:	f003 0302 	and.w	r3, r3, #2
 8004232:	2b00      	cmp	r3, #0
 8004234:	d1ed      	bne.n	8004212 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8004236:	4b4d      	ldr	r3, [pc, #308]	; (800436c <HAL_RCC_OscConfig+0x770>)
 8004238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800423c:	4a4b      	ldr	r2, [pc, #300]	; (800436c <HAL_RCC_OscConfig+0x770>)
 800423e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004242:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004246:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800424a:	2b01      	cmp	r3, #1
 800424c:	d105      	bne.n	800425a <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800424e:	4b47      	ldr	r3, [pc, #284]	; (800436c <HAL_RCC_OscConfig+0x770>)
 8004250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004252:	4a46      	ldr	r2, [pc, #280]	; (800436c <HAL_RCC_OscConfig+0x770>)
 8004254:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004258:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0320 	and.w	r3, r3, #32
 8004262:	2b00      	cmp	r3, #0
 8004264:	d03c      	beq.n	80042e0 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800426a:	2b00      	cmp	r3, #0
 800426c:	d01c      	beq.n	80042a8 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800426e:	4b3f      	ldr	r3, [pc, #252]	; (800436c <HAL_RCC_OscConfig+0x770>)
 8004270:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004274:	4a3d      	ldr	r2, [pc, #244]	; (800436c <HAL_RCC_OscConfig+0x770>)
 8004276:	f043 0301 	orr.w	r3, r3, #1
 800427a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800427e:	f7fe f935 	bl	80024ec <HAL_GetTick>
 8004282:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004284:	e008      	b.n	8004298 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004286:	f7fe f931 	bl	80024ec <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	2b02      	cmp	r3, #2
 8004292:	d901      	bls.n	8004298 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8004294:	2303      	movs	r3, #3
 8004296:	e10a      	b.n	80044ae <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004298:	4b34      	ldr	r3, [pc, #208]	; (800436c <HAL_RCC_OscConfig+0x770>)
 800429a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800429e:	f003 0302 	and.w	r3, r3, #2
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d0ef      	beq.n	8004286 <HAL_RCC_OscConfig+0x68a>
 80042a6:	e01b      	b.n	80042e0 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80042a8:	4b30      	ldr	r3, [pc, #192]	; (800436c <HAL_RCC_OscConfig+0x770>)
 80042aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042ae:	4a2f      	ldr	r2, [pc, #188]	; (800436c <HAL_RCC_OscConfig+0x770>)
 80042b0:	f023 0301 	bic.w	r3, r3, #1
 80042b4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042b8:	f7fe f918 	bl	80024ec <HAL_GetTick>
 80042bc:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80042be:	e008      	b.n	80042d2 <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042c0:	f7fe f914 	bl	80024ec <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d901      	bls.n	80042d2 <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e0ed      	b.n	80044ae <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80042d2:	4b26      	ldr	r3, [pc, #152]	; (800436c <HAL_RCC_OscConfig+0x770>)
 80042d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042d8:	f003 0302 	and.w	r3, r3, #2
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d1ef      	bne.n	80042c0 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	f000 80e1 	beq.w	80044ac <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	f040 80b5 	bne.w	800445e <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80042f4:	4b1d      	ldr	r3, [pc, #116]	; (800436c <HAL_RCC_OscConfig+0x770>)
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	f003 0203 	and.w	r2, r3, #3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004304:	429a      	cmp	r2, r3
 8004306:	d124      	bne.n	8004352 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004312:	3b01      	subs	r3, #1
 8004314:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004316:	429a      	cmp	r2, r3
 8004318:	d11b      	bne.n	8004352 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004324:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004326:	429a      	cmp	r2, r3
 8004328:	d113      	bne.n	8004352 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004334:	085b      	lsrs	r3, r3, #1
 8004336:	3b01      	subs	r3, #1
 8004338:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800433a:	429a      	cmp	r2, r3
 800433c:	d109      	bne.n	8004352 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004348:	085b      	lsrs	r3, r3, #1
 800434a:	3b01      	subs	r3, #1
 800434c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800434e:	429a      	cmp	r2, r3
 8004350:	d05f      	beq.n	8004412 <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004352:	6a3b      	ldr	r3, [r7, #32]
 8004354:	2b0c      	cmp	r3, #12
 8004356:	d05a      	beq.n	800440e <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004358:	4b04      	ldr	r3, [pc, #16]	; (800436c <HAL_RCC_OscConfig+0x770>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a03      	ldr	r2, [pc, #12]	; (800436c <HAL_RCC_OscConfig+0x770>)
 800435e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004362:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004364:	f7fe f8c2 	bl	80024ec <HAL_GetTick>
 8004368:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800436a:	e00c      	b.n	8004386 <HAL_RCC_OscConfig+0x78a>
 800436c:	40021000 	.word	0x40021000
 8004370:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004374:	f7fe f8ba 	bl	80024ec <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	69bb      	ldr	r3, [r7, #24]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	2b02      	cmp	r3, #2
 8004380:	d901      	bls.n	8004386 <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e093      	b.n	80044ae <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004386:	4b4c      	ldr	r3, [pc, #304]	; (80044b8 <HAL_RCC_OscConfig+0x8bc>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d1f0      	bne.n	8004374 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004392:	4b49      	ldr	r3, [pc, #292]	; (80044b8 <HAL_RCC_OscConfig+0x8bc>)
 8004394:	68da      	ldr	r2, [r3, #12]
 8004396:	4b49      	ldr	r3, [pc, #292]	; (80044bc <HAL_RCC_OscConfig+0x8c0>)
 8004398:	4013      	ands	r3, r2
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80043a2:	3a01      	subs	r2, #1
 80043a4:	0112      	lsls	r2, r2, #4
 80043a6:	4311      	orrs	r1, r2
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80043ac:	0212      	lsls	r2, r2, #8
 80043ae:	4311      	orrs	r1, r2
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80043b4:	0852      	lsrs	r2, r2, #1
 80043b6:	3a01      	subs	r2, #1
 80043b8:	0552      	lsls	r2, r2, #21
 80043ba:	4311      	orrs	r1, r2
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80043c0:	0852      	lsrs	r2, r2, #1
 80043c2:	3a01      	subs	r2, #1
 80043c4:	0652      	lsls	r2, r2, #25
 80043c6:	430a      	orrs	r2, r1
 80043c8:	493b      	ldr	r1, [pc, #236]	; (80044b8 <HAL_RCC_OscConfig+0x8bc>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80043ce:	4b3a      	ldr	r3, [pc, #232]	; (80044b8 <HAL_RCC_OscConfig+0x8bc>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a39      	ldr	r2, [pc, #228]	; (80044b8 <HAL_RCC_OscConfig+0x8bc>)
 80043d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043d8:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80043da:	4b37      	ldr	r3, [pc, #220]	; (80044b8 <HAL_RCC_OscConfig+0x8bc>)
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	4a36      	ldr	r2, [pc, #216]	; (80044b8 <HAL_RCC_OscConfig+0x8bc>)
 80043e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043e4:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80043e6:	f7fe f881 	bl	80024ec <HAL_GetTick>
 80043ea:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043ec:	e008      	b.n	8004400 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043ee:	f7fe f87d 	bl	80024ec <HAL_GetTick>
 80043f2:	4602      	mov	r2, r0
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	d901      	bls.n	8004400 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 80043fc:	2303      	movs	r3, #3
 80043fe:	e056      	b.n	80044ae <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004400:	4b2d      	ldr	r3, [pc, #180]	; (80044b8 <HAL_RCC_OscConfig+0x8bc>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004408:	2b00      	cmp	r3, #0
 800440a:	d0f0      	beq.n	80043ee <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800440c:	e04e      	b.n	80044ac <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e04d      	b.n	80044ae <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004412:	4b29      	ldr	r3, [pc, #164]	; (80044b8 <HAL_RCC_OscConfig+0x8bc>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d146      	bne.n	80044ac <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800441e:	4b26      	ldr	r3, [pc, #152]	; (80044b8 <HAL_RCC_OscConfig+0x8bc>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a25      	ldr	r2, [pc, #148]	; (80044b8 <HAL_RCC_OscConfig+0x8bc>)
 8004424:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004428:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800442a:	4b23      	ldr	r3, [pc, #140]	; (80044b8 <HAL_RCC_OscConfig+0x8bc>)
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	4a22      	ldr	r2, [pc, #136]	; (80044b8 <HAL_RCC_OscConfig+0x8bc>)
 8004430:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004434:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004436:	f7fe f859 	bl	80024ec <HAL_GetTick>
 800443a:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800443c:	e008      	b.n	8004450 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800443e:	f7fe f855 	bl	80024ec <HAL_GetTick>
 8004442:	4602      	mov	r2, r0
 8004444:	69bb      	ldr	r3, [r7, #24]
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	2b02      	cmp	r3, #2
 800444a:	d901      	bls.n	8004450 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 800444c:	2303      	movs	r3, #3
 800444e:	e02e      	b.n	80044ae <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004450:	4b19      	ldr	r3, [pc, #100]	; (80044b8 <HAL_RCC_OscConfig+0x8bc>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004458:	2b00      	cmp	r3, #0
 800445a:	d0f0      	beq.n	800443e <HAL_RCC_OscConfig+0x842>
 800445c:	e026      	b.n	80044ac <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800445e:	6a3b      	ldr	r3, [r7, #32]
 8004460:	2b0c      	cmp	r3, #12
 8004462:	d021      	beq.n	80044a8 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004464:	4b14      	ldr	r3, [pc, #80]	; (80044b8 <HAL_RCC_OscConfig+0x8bc>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a13      	ldr	r2, [pc, #76]	; (80044b8 <HAL_RCC_OscConfig+0x8bc>)
 800446a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800446e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004470:	f7fe f83c 	bl	80024ec <HAL_GetTick>
 8004474:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004476:	e008      	b.n	800448a <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004478:	f7fe f838 	bl	80024ec <HAL_GetTick>
 800447c:	4602      	mov	r2, r0
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	2b02      	cmp	r3, #2
 8004484:	d901      	bls.n	800448a <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e011      	b.n	80044ae <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800448a:	4b0b      	ldr	r3, [pc, #44]	; (80044b8 <HAL_RCC_OscConfig+0x8bc>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d1f0      	bne.n	8004478 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8004496:	4b08      	ldr	r3, [pc, #32]	; (80044b8 <HAL_RCC_OscConfig+0x8bc>)
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	4a07      	ldr	r2, [pc, #28]	; (80044b8 <HAL_RCC_OscConfig+0x8bc>)
 800449c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80044a0:	f023 0303 	bic.w	r3, r3, #3
 80044a4:	60d3      	str	r3, [r2, #12]
 80044a6:	e001      	b.n	80044ac <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e000      	b.n	80044ae <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3728      	adds	r7, #40	; 0x28
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	40021000 	.word	0x40021000
 80044bc:	f99f808c 	.word	0xf99f808c

080044c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d101      	bne.n	80044d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e0e7      	b.n	80046a4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044d4:	4b75      	ldr	r3, [pc, #468]	; (80046ac <HAL_RCC_ClockConfig+0x1ec>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0307 	and.w	r3, r3, #7
 80044dc:	683a      	ldr	r2, [r7, #0]
 80044de:	429a      	cmp	r2, r3
 80044e0:	d910      	bls.n	8004504 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044e2:	4b72      	ldr	r3, [pc, #456]	; (80046ac <HAL_RCC_ClockConfig+0x1ec>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f023 0207 	bic.w	r2, r3, #7
 80044ea:	4970      	ldr	r1, [pc, #448]	; (80046ac <HAL_RCC_ClockConfig+0x1ec>)
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044f2:	4b6e      	ldr	r3, [pc, #440]	; (80046ac <HAL_RCC_ClockConfig+0x1ec>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0307 	and.w	r3, r3, #7
 80044fa:	683a      	ldr	r2, [r7, #0]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d001      	beq.n	8004504 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e0cf      	b.n	80046a4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0302 	and.w	r3, r3, #2
 800450c:	2b00      	cmp	r3, #0
 800450e:	d010      	beq.n	8004532 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	689a      	ldr	r2, [r3, #8]
 8004514:	4b66      	ldr	r3, [pc, #408]	; (80046b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800451c:	429a      	cmp	r2, r3
 800451e:	d908      	bls.n	8004532 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004520:	4b63      	ldr	r3, [pc, #396]	; (80046b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	4960      	ldr	r1, [pc, #384]	; (80046b0 <HAL_RCC_ClockConfig+0x1f0>)
 800452e:	4313      	orrs	r3, r2
 8004530:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0301 	and.w	r3, r3, #1
 800453a:	2b00      	cmp	r3, #0
 800453c:	d04c      	beq.n	80045d8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	2b03      	cmp	r3, #3
 8004544:	d107      	bne.n	8004556 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004546:	4b5a      	ldr	r3, [pc, #360]	; (80046b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d121      	bne.n	8004596 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e0a6      	b.n	80046a4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	2b02      	cmp	r3, #2
 800455c:	d107      	bne.n	800456e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800455e:	4b54      	ldr	r3, [pc, #336]	; (80046b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d115      	bne.n	8004596 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e09a      	b.n	80046a4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d107      	bne.n	8004586 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004576:	4b4e      	ldr	r3, [pc, #312]	; (80046b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0302 	and.w	r3, r3, #2
 800457e:	2b00      	cmp	r3, #0
 8004580:	d109      	bne.n	8004596 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e08e      	b.n	80046a4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004586:	4b4a      	ldr	r3, [pc, #296]	; (80046b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800458e:	2b00      	cmp	r3, #0
 8004590:	d101      	bne.n	8004596 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e086      	b.n	80046a4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004596:	4b46      	ldr	r3, [pc, #280]	; (80046b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	f023 0203 	bic.w	r2, r3, #3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	4943      	ldr	r1, [pc, #268]	; (80046b0 <HAL_RCC_ClockConfig+0x1f0>)
 80045a4:	4313      	orrs	r3, r2
 80045a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045a8:	f7fd ffa0 	bl	80024ec <HAL_GetTick>
 80045ac:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ae:	e00a      	b.n	80045c6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045b0:	f7fd ff9c 	bl	80024ec <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80045be:	4293      	cmp	r3, r2
 80045c0:	d901      	bls.n	80045c6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80045c2:	2303      	movs	r3, #3
 80045c4:	e06e      	b.n	80046a4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045c6:	4b3a      	ldr	r3, [pc, #232]	; (80046b0 <HAL_RCC_ClockConfig+0x1f0>)
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f003 020c 	and.w	r2, r3, #12
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d1eb      	bne.n	80045b0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 0302 	and.w	r3, r3, #2
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d010      	beq.n	8004606 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	689a      	ldr	r2, [r3, #8]
 80045e8:	4b31      	ldr	r3, [pc, #196]	; (80046b0 <HAL_RCC_ClockConfig+0x1f0>)
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d208      	bcs.n	8004606 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045f4:	4b2e      	ldr	r3, [pc, #184]	; (80046b0 <HAL_RCC_ClockConfig+0x1f0>)
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	492b      	ldr	r1, [pc, #172]	; (80046b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004602:	4313      	orrs	r3, r2
 8004604:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004606:	4b29      	ldr	r3, [pc, #164]	; (80046ac <HAL_RCC_ClockConfig+0x1ec>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0307 	and.w	r3, r3, #7
 800460e:	683a      	ldr	r2, [r7, #0]
 8004610:	429a      	cmp	r2, r3
 8004612:	d210      	bcs.n	8004636 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004614:	4b25      	ldr	r3, [pc, #148]	; (80046ac <HAL_RCC_ClockConfig+0x1ec>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f023 0207 	bic.w	r2, r3, #7
 800461c:	4923      	ldr	r1, [pc, #140]	; (80046ac <HAL_RCC_ClockConfig+0x1ec>)
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	4313      	orrs	r3, r2
 8004622:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004624:	4b21      	ldr	r3, [pc, #132]	; (80046ac <HAL_RCC_ClockConfig+0x1ec>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0307 	and.w	r3, r3, #7
 800462c:	683a      	ldr	r2, [r7, #0]
 800462e:	429a      	cmp	r2, r3
 8004630:	d001      	beq.n	8004636 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e036      	b.n	80046a4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0304 	and.w	r3, r3, #4
 800463e:	2b00      	cmp	r3, #0
 8004640:	d008      	beq.n	8004654 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004642:	4b1b      	ldr	r3, [pc, #108]	; (80046b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	4918      	ldr	r1, [pc, #96]	; (80046b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004650:	4313      	orrs	r3, r2
 8004652:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0308 	and.w	r3, r3, #8
 800465c:	2b00      	cmp	r3, #0
 800465e:	d009      	beq.n	8004674 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004660:	4b13      	ldr	r3, [pc, #76]	; (80046b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	691b      	ldr	r3, [r3, #16]
 800466c:	00db      	lsls	r3, r3, #3
 800466e:	4910      	ldr	r1, [pc, #64]	; (80046b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004670:	4313      	orrs	r3, r2
 8004672:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004674:	f000 f824 	bl	80046c0 <HAL_RCC_GetSysClockFreq>
 8004678:	4602      	mov	r2, r0
 800467a:	4b0d      	ldr	r3, [pc, #52]	; (80046b0 <HAL_RCC_ClockConfig+0x1f0>)
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	091b      	lsrs	r3, r3, #4
 8004680:	f003 030f 	and.w	r3, r3, #15
 8004684:	490b      	ldr	r1, [pc, #44]	; (80046b4 <HAL_RCC_ClockConfig+0x1f4>)
 8004686:	5ccb      	ldrb	r3, [r1, r3]
 8004688:	f003 031f 	and.w	r3, r3, #31
 800468c:	fa22 f303 	lsr.w	r3, r2, r3
 8004690:	4a09      	ldr	r2, [pc, #36]	; (80046b8 <HAL_RCC_ClockConfig+0x1f8>)
 8004692:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004694:	4b09      	ldr	r3, [pc, #36]	; (80046bc <HAL_RCC_ClockConfig+0x1fc>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4618      	mov	r0, r3
 800469a:	f7fd fd41 	bl	8002120 <HAL_InitTick>
 800469e:	4603      	mov	r3, r0
 80046a0:	72fb      	strb	r3, [r7, #11]

  return status;
 80046a2:	7afb      	ldrb	r3, [r7, #11]
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3710      	adds	r7, #16
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	40022000 	.word	0x40022000
 80046b0:	40021000 	.word	0x40021000
 80046b4:	0800d414 	.word	0x0800d414
 80046b8:	20000000 	.word	0x20000000
 80046bc:	20000004 	.word	0x20000004

080046c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b089      	sub	sp, #36	; 0x24
 80046c4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80046c6:	2300      	movs	r3, #0
 80046c8:	61fb      	str	r3, [r7, #28]
 80046ca:	2300      	movs	r3, #0
 80046cc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046ce:	4b3e      	ldr	r3, [pc, #248]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	f003 030c 	and.w	r3, r3, #12
 80046d6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80046d8:	4b3b      	ldr	r3, [pc, #236]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	f003 0303 	and.w	r3, r3, #3
 80046e0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d005      	beq.n	80046f4 <HAL_RCC_GetSysClockFreq+0x34>
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	2b0c      	cmp	r3, #12
 80046ec:	d121      	bne.n	8004732 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d11e      	bne.n	8004732 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80046f4:	4b34      	ldr	r3, [pc, #208]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 0308 	and.w	r3, r3, #8
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d107      	bne.n	8004710 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004700:	4b31      	ldr	r3, [pc, #196]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004702:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004706:	0a1b      	lsrs	r3, r3, #8
 8004708:	f003 030f 	and.w	r3, r3, #15
 800470c:	61fb      	str	r3, [r7, #28]
 800470e:	e005      	b.n	800471c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004710:	4b2d      	ldr	r3, [pc, #180]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	091b      	lsrs	r3, r3, #4
 8004716:	f003 030f 	and.w	r3, r3, #15
 800471a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800471c:	4a2b      	ldr	r2, [pc, #172]	; (80047cc <HAL_RCC_GetSysClockFreq+0x10c>)
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004724:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d10d      	bne.n	8004748 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004730:	e00a      	b.n	8004748 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	2b04      	cmp	r3, #4
 8004736:	d102      	bne.n	800473e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004738:	4b25      	ldr	r3, [pc, #148]	; (80047d0 <HAL_RCC_GetSysClockFreq+0x110>)
 800473a:	61bb      	str	r3, [r7, #24]
 800473c:	e004      	b.n	8004748 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	2b08      	cmp	r3, #8
 8004742:	d101      	bne.n	8004748 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004744:	4b23      	ldr	r3, [pc, #140]	; (80047d4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004746:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	2b0c      	cmp	r3, #12
 800474c:	d134      	bne.n	80047b8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800474e:	4b1e      	ldr	r3, [pc, #120]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	f003 0303 	and.w	r3, r3, #3
 8004756:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	2b02      	cmp	r3, #2
 800475c:	d003      	beq.n	8004766 <HAL_RCC_GetSysClockFreq+0xa6>
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	2b03      	cmp	r3, #3
 8004762:	d003      	beq.n	800476c <HAL_RCC_GetSysClockFreq+0xac>
 8004764:	e005      	b.n	8004772 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004766:	4b1a      	ldr	r3, [pc, #104]	; (80047d0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004768:	617b      	str	r3, [r7, #20]
      break;
 800476a:	e005      	b.n	8004778 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800476c:	4b19      	ldr	r3, [pc, #100]	; (80047d4 <HAL_RCC_GetSysClockFreq+0x114>)
 800476e:	617b      	str	r3, [r7, #20]
      break;
 8004770:	e002      	b.n	8004778 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004772:	69fb      	ldr	r3, [r7, #28]
 8004774:	617b      	str	r3, [r7, #20]
      break;
 8004776:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004778:	4b13      	ldr	r3, [pc, #76]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x108>)
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	091b      	lsrs	r3, r3, #4
 800477e:	f003 0307 	and.w	r3, r3, #7
 8004782:	3301      	adds	r3, #1
 8004784:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004786:	4b10      	ldr	r3, [pc, #64]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	0a1b      	lsrs	r3, r3, #8
 800478c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004790:	697a      	ldr	r2, [r7, #20]
 8004792:	fb03 f202 	mul.w	r2, r3, r2
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	fbb2 f3f3 	udiv	r3, r2, r3
 800479c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800479e:	4b0a      	ldr	r3, [pc, #40]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	0e5b      	lsrs	r3, r3, #25
 80047a4:	f003 0303 	and.w	r3, r3, #3
 80047a8:	3301      	adds	r3, #1
 80047aa:	005b      	lsls	r3, r3, #1
 80047ac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80047ae:	697a      	ldr	r2, [r7, #20]
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80047b6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80047b8:	69bb      	ldr	r3, [r7, #24]
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3724      	adds	r7, #36	; 0x24
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr
 80047c6:	bf00      	nop
 80047c8:	40021000 	.word	0x40021000
 80047cc:	0800d42c 	.word	0x0800d42c
 80047d0:	00f42400 	.word	0x00f42400
 80047d4:	007a1200 	.word	0x007a1200

080047d8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047d8:	b480      	push	{r7}
 80047da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047dc:	4b03      	ldr	r3, [pc, #12]	; (80047ec <HAL_RCC_GetHCLKFreq+0x14>)
 80047de:	681b      	ldr	r3, [r3, #0]
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr
 80047ea:	bf00      	nop
 80047ec:	20000000 	.word	0x20000000

080047f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80047f4:	f7ff fff0 	bl	80047d8 <HAL_RCC_GetHCLKFreq>
 80047f8:	4602      	mov	r2, r0
 80047fa:	4b06      	ldr	r3, [pc, #24]	; (8004814 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	0a1b      	lsrs	r3, r3, #8
 8004800:	f003 0307 	and.w	r3, r3, #7
 8004804:	4904      	ldr	r1, [pc, #16]	; (8004818 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004806:	5ccb      	ldrb	r3, [r1, r3]
 8004808:	f003 031f 	and.w	r3, r3, #31
 800480c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004810:	4618      	mov	r0, r3
 8004812:	bd80      	pop	{r7, pc}
 8004814:	40021000 	.word	0x40021000
 8004818:	0800d424 	.word	0x0800d424

0800481c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004820:	f7ff ffda 	bl	80047d8 <HAL_RCC_GetHCLKFreq>
 8004824:	4602      	mov	r2, r0
 8004826:	4b06      	ldr	r3, [pc, #24]	; (8004840 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	0adb      	lsrs	r3, r3, #11
 800482c:	f003 0307 	and.w	r3, r3, #7
 8004830:	4904      	ldr	r1, [pc, #16]	; (8004844 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004832:	5ccb      	ldrb	r3, [r1, r3]
 8004834:	f003 031f 	and.w	r3, r3, #31
 8004838:	fa22 f303 	lsr.w	r3, r2, r3
}
 800483c:	4618      	mov	r0, r3
 800483e:	bd80      	pop	{r7, pc}
 8004840:	40021000 	.word	0x40021000
 8004844:	0800d424 	.word	0x0800d424

08004848 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	220f      	movs	r2, #15
 8004856:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004858:	4b12      	ldr	r3, [pc, #72]	; (80048a4 <HAL_RCC_GetClockConfig+0x5c>)
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	f003 0203 	and.w	r2, r3, #3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004864:	4b0f      	ldr	r3, [pc, #60]	; (80048a4 <HAL_RCC_GetClockConfig+0x5c>)
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004870:	4b0c      	ldr	r3, [pc, #48]	; (80048a4 <HAL_RCC_GetClockConfig+0x5c>)
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800487c:	4b09      	ldr	r3, [pc, #36]	; (80048a4 <HAL_RCC_GetClockConfig+0x5c>)
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	08db      	lsrs	r3, r3, #3
 8004882:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800488a:	4b07      	ldr	r3, [pc, #28]	; (80048a8 <HAL_RCC_GetClockConfig+0x60>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0207 	and.w	r2, r3, #7
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	601a      	str	r2, [r3, #0]
}
 8004896:	bf00      	nop
 8004898:	370c      	adds	r7, #12
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop
 80048a4:	40021000 	.word	0x40021000
 80048a8:	40022000 	.word	0x40022000

080048ac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b086      	sub	sp, #24
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80048b4:	2300      	movs	r3, #0
 80048b6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80048b8:	4b2a      	ldr	r3, [pc, #168]	; (8004964 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d003      	beq.n	80048cc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80048c4:	f7ff f936 	bl	8003b34 <HAL_PWREx_GetVoltageRange>
 80048c8:	6178      	str	r0, [r7, #20]
 80048ca:	e014      	b.n	80048f6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80048cc:	4b25      	ldr	r3, [pc, #148]	; (8004964 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048d0:	4a24      	ldr	r2, [pc, #144]	; (8004964 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048d6:	6593      	str	r3, [r2, #88]	; 0x58
 80048d8:	4b22      	ldr	r3, [pc, #136]	; (8004964 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048e0:	60fb      	str	r3, [r7, #12]
 80048e2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80048e4:	f7ff f926 	bl	8003b34 <HAL_PWREx_GetVoltageRange>
 80048e8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80048ea:	4b1e      	ldr	r3, [pc, #120]	; (8004964 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ee:	4a1d      	ldr	r2, [pc, #116]	; (8004964 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048f4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048fc:	d10b      	bne.n	8004916 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2b80      	cmp	r3, #128	; 0x80
 8004902:	d919      	bls.n	8004938 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2ba0      	cmp	r3, #160	; 0xa0
 8004908:	d902      	bls.n	8004910 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800490a:	2302      	movs	r3, #2
 800490c:	613b      	str	r3, [r7, #16]
 800490e:	e013      	b.n	8004938 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004910:	2301      	movs	r3, #1
 8004912:	613b      	str	r3, [r7, #16]
 8004914:	e010      	b.n	8004938 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2b80      	cmp	r3, #128	; 0x80
 800491a:	d902      	bls.n	8004922 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800491c:	2303      	movs	r3, #3
 800491e:	613b      	str	r3, [r7, #16]
 8004920:	e00a      	b.n	8004938 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2b80      	cmp	r3, #128	; 0x80
 8004926:	d102      	bne.n	800492e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004928:	2302      	movs	r3, #2
 800492a:	613b      	str	r3, [r7, #16]
 800492c:	e004      	b.n	8004938 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2b70      	cmp	r3, #112	; 0x70
 8004932:	d101      	bne.n	8004938 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004934:	2301      	movs	r3, #1
 8004936:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004938:	4b0b      	ldr	r3, [pc, #44]	; (8004968 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f023 0207 	bic.w	r2, r3, #7
 8004940:	4909      	ldr	r1, [pc, #36]	; (8004968 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	4313      	orrs	r3, r2
 8004946:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004948:	4b07      	ldr	r3, [pc, #28]	; (8004968 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 0307 	and.w	r3, r3, #7
 8004950:	693a      	ldr	r2, [r7, #16]
 8004952:	429a      	cmp	r2, r3
 8004954:	d001      	beq.n	800495a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e000      	b.n	800495c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800495a:	2300      	movs	r3, #0
}
 800495c:	4618      	mov	r0, r3
 800495e:	3718      	adds	r7, #24
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}
 8004964:	40021000 	.word	0x40021000
 8004968:	40022000 	.word	0x40022000

0800496c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b086      	sub	sp, #24
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004974:	2300      	movs	r3, #0
 8004976:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004978:	2300      	movs	r3, #0
 800497a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004984:	2b00      	cmp	r3, #0
 8004986:	f000 809e 	beq.w	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800498a:	2300      	movs	r3, #0
 800498c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800498e:	4b46      	ldr	r3, [pc, #280]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d101      	bne.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x32>
 800499a:	2301      	movs	r3, #1
 800499c:	e000      	b.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x34>
 800499e:	2300      	movs	r3, #0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d00d      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049a4:	4b40      	ldr	r3, [pc, #256]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80049a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049a8:	4a3f      	ldr	r2, [pc, #252]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80049aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049ae:	6593      	str	r3, [r2, #88]	; 0x58
 80049b0:	4b3d      	ldr	r3, [pc, #244]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80049b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049b8:	60bb      	str	r3, [r7, #8]
 80049ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049bc:	2301      	movs	r3, #1
 80049be:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049c0:	4b3a      	ldr	r3, [pc, #232]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a39      	ldr	r2, [pc, #228]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80049c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049ca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80049cc:	f7fd fd8e 	bl	80024ec <HAL_GetTick>
 80049d0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80049d2:	e009      	b.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049d4:	f7fd fd8a 	bl	80024ec <HAL_GetTick>
 80049d8:	4602      	mov	r2, r0
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	2b02      	cmp	r3, #2
 80049e0:	d902      	bls.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	74fb      	strb	r3, [r7, #19]
        break;
 80049e6:	e005      	b.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80049e8:	4b30      	ldr	r3, [pc, #192]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d0ef      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 80049f4:	7cfb      	ldrb	r3, [r7, #19]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d15a      	bne.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80049fa:	4b2b      	ldr	r3, [pc, #172]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80049fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a04:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d01e      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a10:	697a      	ldr	r2, [r7, #20]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d019      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004a16:	4b24      	ldr	r3, [pc, #144]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a20:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a22:	4b21      	ldr	r3, [pc, #132]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a28:	4a1f      	ldr	r2, [pc, #124]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004a2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a32:	4b1d      	ldr	r3, [pc, #116]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a38:	4a1b      	ldr	r2, [pc, #108]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004a3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004a42:	4a19      	ldr	r2, [pc, #100]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	f003 0301 	and.w	r3, r3, #1
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d016      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a54:	f7fd fd4a 	bl	80024ec <HAL_GetTick>
 8004a58:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a5a:	e00b      	b.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a5c:	f7fd fd46 	bl	80024ec <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d902      	bls.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	74fb      	strb	r3, [r7, #19]
            break;
 8004a72:	e006      	b.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a74:	4b0c      	ldr	r3, [pc, #48]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a7a:	f003 0302 	and.w	r3, r3, #2
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d0ec      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8004a82:	7cfb      	ldrb	r3, [r7, #19]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d10b      	bne.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a88:	4b07      	ldr	r3, [pc, #28]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a8e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a96:	4904      	ldr	r1, [pc, #16]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004a9e:	e009      	b.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004aa0:	7cfb      	ldrb	r3, [r7, #19]
 8004aa2:	74bb      	strb	r3, [r7, #18]
 8004aa4:	e006      	b.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8004aa6:	bf00      	nop
 8004aa8:	40021000 	.word	0x40021000
 8004aac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ab0:	7cfb      	ldrb	r3, [r7, #19]
 8004ab2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ab4:	7c7b      	ldrb	r3, [r7, #17]
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d105      	bne.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004aba:	4b6e      	ldr	r3, [pc, #440]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004abe:	4a6d      	ldr	r2, [pc, #436]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004ac0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ac4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 0301 	and.w	r3, r3, #1
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d00a      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ad2:	4b68      	ldr	r3, [pc, #416]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ad8:	f023 0203 	bic.w	r2, r3, #3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	4964      	ldr	r1, [pc, #400]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0302 	and.w	r3, r3, #2
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d00a      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004af4:	4b5f      	ldr	r3, [pc, #380]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004afa:	f023 020c 	bic.w	r2, r3, #12
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	495c      	ldr	r1, [pc, #368]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004b04:	4313      	orrs	r3, r2
 8004b06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0304 	and.w	r3, r3, #4
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d00a      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004b16:	4b57      	ldr	r3, [pc, #348]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b1c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	4953      	ldr	r1, [pc, #332]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0320 	and.w	r3, r3, #32
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d00a      	beq.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b38:	4b4e      	ldr	r3, [pc, #312]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b3e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	494b      	ldr	r1, [pc, #300]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d00a      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b5a:	4b46      	ldr	r3, [pc, #280]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b60:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6a1b      	ldr	r3, [r3, #32]
 8004b68:	4942      	ldr	r1, [pc, #264]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d00a      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004b7c:	4b3d      	ldr	r3, [pc, #244]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b82:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8a:	493a      	ldr	r1, [pc, #232]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d00a      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b9e:	4b35      	ldr	r3, [pc, #212]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ba4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	695b      	ldr	r3, [r3, #20]
 8004bac:	4931      	ldr	r1, [pc, #196]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d00a      	beq.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004bc0:	4b2c      	ldr	r3, [pc, #176]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bc6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	699b      	ldr	r3, [r3, #24]
 8004bce:	4929      	ldr	r1, [pc, #164]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d00a      	beq.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004be2:	4b24      	ldr	r3, [pc, #144]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004be8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	69db      	ldr	r3, [r3, #28]
 8004bf0:	4920      	ldr	r1, [pc, #128]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d015      	beq.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c04:	4b1b      	ldr	r3, [pc, #108]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c0a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c12:	4918      	ldr	r1, [pc, #96]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004c14:	4313      	orrs	r3, r2
 8004c16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c22:	d105      	bne.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c24:	4b13      	ldr	r3, [pc, #76]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	4a12      	ldr	r2, [pc, #72]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004c2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c2e:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d015      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c3c:	4b0d      	ldr	r3, [pc, #52]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c42:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c4a:	490a      	ldr	r1, [pc, #40]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c5a:	d105      	bne.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c5c:	4b05      	ldr	r3, [pc, #20]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	4a04      	ldr	r2, [pc, #16]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004c62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c66:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004c68:	7cbb      	ldrb	r3, [r7, #18]
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3718      	adds	r7, #24
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	40021000 	.word	0x40021000

08004c78 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004c7c:	4b05      	ldr	r3, [pc, #20]	; (8004c94 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a04      	ldr	r2, [pc, #16]	; (8004c94 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004c82:	f043 0304 	orr.w	r3, r3, #4
 8004c86:	6013      	str	r3, [r2, #0]
}
 8004c88:	bf00      	nop
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr
 8004c92:	bf00      	nop
 8004c94:	40021000 	.word	0x40021000

08004c98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b082      	sub	sp, #8
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d101      	bne.n	8004caa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e049      	b.n	8004d3e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d106      	bne.n	8004cc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 f841 	bl	8004d46 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2202      	movs	r2, #2
 8004cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	3304      	adds	r3, #4
 8004cd4:	4619      	mov	r1, r3
 8004cd6:	4610      	mov	r0, r2
 8004cd8:	f000 f9be 	bl	8005058 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3708      	adds	r7, #8
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}

08004d46 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004d46:	b480      	push	{r7}
 8004d48:	b083      	sub	sp, #12
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004d4e:	bf00      	nop
 8004d50:	370c      	adds	r7, #12
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr
	...

08004d5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b085      	sub	sp, #20
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d001      	beq.n	8004d74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	e03b      	b.n	8004dec <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2202      	movs	r2, #2
 8004d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	68da      	ldr	r2, [r3, #12]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f042 0201 	orr.w	r2, r2, #1
 8004d8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a19      	ldr	r2, [pc, #100]	; (8004df8 <HAL_TIM_Base_Start_IT+0x9c>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d009      	beq.n	8004daa <HAL_TIM_Base_Start_IT+0x4e>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d9e:	d004      	beq.n	8004daa <HAL_TIM_Base_Start_IT+0x4e>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a15      	ldr	r2, [pc, #84]	; (8004dfc <HAL_TIM_Base_Start_IT+0xa0>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d115      	bne.n	8004dd6 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	689a      	ldr	r2, [r3, #8]
 8004db0:	4b13      	ldr	r3, [pc, #76]	; (8004e00 <HAL_TIM_Base_Start_IT+0xa4>)
 8004db2:	4013      	ands	r3, r2
 8004db4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2b06      	cmp	r3, #6
 8004dba:	d015      	beq.n	8004de8 <HAL_TIM_Base_Start_IT+0x8c>
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dc2:	d011      	beq.n	8004de8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f042 0201 	orr.w	r2, r2, #1
 8004dd2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dd4:	e008      	b.n	8004de8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f042 0201 	orr.w	r2, r2, #1
 8004de4:	601a      	str	r2, [r3, #0]
 8004de6:	e000      	b.n	8004dea <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004de8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004dea:	2300      	movs	r3, #0
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3714      	adds	r7, #20
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr
 8004df8:	40012c00 	.word	0x40012c00
 8004dfc:	40014000 	.word	0x40014000
 8004e00:	00010007 	.word	0x00010007

08004e04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	68db      	ldr	r3, [r3, #12]
 8004e12:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	691b      	ldr	r3, [r3, #16]
 8004e1a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	f003 0302 	and.w	r3, r3, #2
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d020      	beq.n	8004e68 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f003 0302 	and.w	r3, r3, #2
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d01b      	beq.n	8004e68 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f06f 0202 	mvn.w	r2, #2
 8004e38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	699b      	ldr	r3, [r3, #24]
 8004e46:	f003 0303 	and.w	r3, r3, #3
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d003      	beq.n	8004e56 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 f8e4 	bl	800501c <HAL_TIM_IC_CaptureCallback>
 8004e54:	e005      	b.n	8004e62 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f000 f8d6 	bl	8005008 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f000 f8e7 	bl	8005030 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	f003 0304 	and.w	r3, r3, #4
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d020      	beq.n	8004eb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	f003 0304 	and.w	r3, r3, #4
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d01b      	beq.n	8004eb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f06f 0204 	mvn.w	r2, #4
 8004e84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2202      	movs	r2, #2
 8004e8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	699b      	ldr	r3, [r3, #24]
 8004e92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d003      	beq.n	8004ea2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 f8be 	bl	800501c <HAL_TIM_IC_CaptureCallback>
 8004ea0:	e005      	b.n	8004eae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 f8b0 	bl	8005008 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f000 f8c1 	bl	8005030 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	f003 0308 	and.w	r3, r3, #8
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d020      	beq.n	8004f00 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f003 0308 	and.w	r3, r3, #8
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d01b      	beq.n	8004f00 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f06f 0208 	mvn.w	r2, #8
 8004ed0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2204      	movs	r2, #4
 8004ed6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	69db      	ldr	r3, [r3, #28]
 8004ede:	f003 0303 	and.w	r3, r3, #3
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d003      	beq.n	8004eee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f000 f898 	bl	800501c <HAL_TIM_IC_CaptureCallback>
 8004eec:	e005      	b.n	8004efa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f000 f88a 	bl	8005008 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f000 f89b 	bl	8005030 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	f003 0310 	and.w	r3, r3, #16
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d020      	beq.n	8004f4c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	f003 0310 	and.w	r3, r3, #16
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d01b      	beq.n	8004f4c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f06f 0210 	mvn.w	r2, #16
 8004f1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2208      	movs	r2, #8
 8004f22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	69db      	ldr	r3, [r3, #28]
 8004f2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d003      	beq.n	8004f3a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f000 f872 	bl	800501c <HAL_TIM_IC_CaptureCallback>
 8004f38:	e005      	b.n	8004f46 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 f864 	bl	8005008 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f000 f875 	bl	8005030 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	f003 0301 	and.w	r3, r3, #1
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d00c      	beq.n	8004f70 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	f003 0301 	and.w	r3, r3, #1
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d007      	beq.n	8004f70 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f06f 0201 	mvn.w	r2, #1
 8004f68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f7fc ff6a 	bl	8001e44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00c      	beq.n	8004f94 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d007      	beq.n	8004f94 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 f8d0 	bl	8005134 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00c      	beq.n	8004fb8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d007      	beq.n	8004fb8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004fb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 f8c8 	bl	8005148 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d00c      	beq.n	8004fdc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d007      	beq.n	8004fdc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004fd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 f834 	bl	8005044 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	f003 0320 	and.w	r3, r3, #32
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d00c      	beq.n	8005000 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f003 0320 	and.w	r3, r3, #32
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d007      	beq.n	8005000 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f06f 0220 	mvn.w	r2, #32
 8004ff8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f000 f890 	bl	8005120 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005000:	bf00      	nop
 8005002:	3710      	adds	r7, #16
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005010:	bf00      	nop
 8005012:	370c      	adds	r7, #12
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr

0800501c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005024:	bf00      	nop
 8005026:	370c      	adds	r7, #12
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005038:	bf00      	nop
 800503a:	370c      	adds	r7, #12
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr

08005044 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800504c:	bf00      	nop
 800504e:	370c      	adds	r7, #12
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr

08005058 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005058:	b480      	push	{r7}
 800505a:	b085      	sub	sp, #20
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	4a2a      	ldr	r2, [pc, #168]	; (8005114 <TIM_Base_SetConfig+0xbc>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d003      	beq.n	8005078 <TIM_Base_SetConfig+0x20>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005076:	d108      	bne.n	800508a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800507e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	4313      	orrs	r3, r2
 8005088:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4a21      	ldr	r2, [pc, #132]	; (8005114 <TIM_Base_SetConfig+0xbc>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d00b      	beq.n	80050aa <TIM_Base_SetConfig+0x52>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005098:	d007      	beq.n	80050aa <TIM_Base_SetConfig+0x52>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4a1e      	ldr	r2, [pc, #120]	; (8005118 <TIM_Base_SetConfig+0xc0>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d003      	beq.n	80050aa <TIM_Base_SetConfig+0x52>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a1d      	ldr	r2, [pc, #116]	; (800511c <TIM_Base_SetConfig+0xc4>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d108      	bne.n	80050bc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	68db      	ldr	r3, [r3, #12]
 80050b6:	68fa      	ldr	r2, [r7, #12]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	695b      	ldr	r3, [r3, #20]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	689a      	ldr	r2, [r3, #8]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4a0c      	ldr	r2, [pc, #48]	; (8005114 <TIM_Base_SetConfig+0xbc>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d007      	beq.n	80050f8 <TIM_Base_SetConfig+0xa0>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4a0b      	ldr	r2, [pc, #44]	; (8005118 <TIM_Base_SetConfig+0xc0>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d003      	beq.n	80050f8 <TIM_Base_SetConfig+0xa0>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4a0a      	ldr	r2, [pc, #40]	; (800511c <TIM_Base_SetConfig+0xc4>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d103      	bne.n	8005100 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	691a      	ldr	r2, [r3, #16]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	615a      	str	r2, [r3, #20]
}
 8005106:	bf00      	nop
 8005108:	3714      	adds	r7, #20
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr
 8005112:	bf00      	nop
 8005114:	40012c00 	.word	0x40012c00
 8005118:	40014000 	.word	0x40014000
 800511c:	40014400 	.word	0x40014400

08005120 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005120:	b480      	push	{r7}
 8005122:	b083      	sub	sp, #12
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005128:	bf00      	nop
 800512a:	370c      	adds	r7, #12
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800513c:	bf00      	nop
 800513e:	370c      	adds	r7, #12
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr

08005148 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005148:	b480      	push	{r7}
 800514a:	b083      	sub	sp, #12
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005150:	bf00      	nop
 8005152:	370c      	adds	r7, #12
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr

0800515c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b082      	sub	sp, #8
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d101      	bne.n	800516e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e040      	b.n	80051f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005172:	2b00      	cmp	r3, #0
 8005174:	d106      	bne.n	8005184 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f7fc fef8 	bl	8001f74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2224      	movs	r2, #36	; 0x24
 8005188:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f022 0201 	bic.w	r2, r2, #1
 8005198:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d002      	beq.n	80051a8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f000 ff4a 	bl	800603c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f000 fced 	bl	8005b88 <UART_SetConfig>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d101      	bne.n	80051b8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e01b      	b.n	80051f0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	685a      	ldr	r2, [r3, #4]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	689a      	ldr	r2, [r3, #8]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f042 0201 	orr.w	r2, r2, #1
 80051e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f000 ffc9 	bl	8006180 <UART_CheckIdleState>
 80051ee:	4603      	mov	r3, r0
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3708      	adds	r7, #8
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b08a      	sub	sp, #40	; 0x28
 80051fc:	af02      	add	r7, sp, #8
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	60b9      	str	r1, [r7, #8]
 8005202:	603b      	str	r3, [r7, #0]
 8005204:	4613      	mov	r3, r2
 8005206:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800520c:	2b20      	cmp	r3, #32
 800520e:	d178      	bne.n	8005302 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d002      	beq.n	800521c <HAL_UART_Transmit+0x24>
 8005216:	88fb      	ldrh	r3, [r7, #6]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d101      	bne.n	8005220 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	e071      	b.n	8005304 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2200      	movs	r2, #0
 8005224:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2221      	movs	r2, #33	; 0x21
 800522c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800522e:	f7fd f95d 	bl	80024ec <HAL_GetTick>
 8005232:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	88fa      	ldrh	r2, [r7, #6]
 8005238:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	88fa      	ldrh	r2, [r7, #6]
 8005240:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800524c:	d108      	bne.n	8005260 <HAL_UART_Transmit+0x68>
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	691b      	ldr	r3, [r3, #16]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d104      	bne.n	8005260 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005256:	2300      	movs	r3, #0
 8005258:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	61bb      	str	r3, [r7, #24]
 800525e:	e003      	b.n	8005268 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005264:	2300      	movs	r3, #0
 8005266:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005268:	e030      	b.n	80052cc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	9300      	str	r3, [sp, #0]
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	2200      	movs	r2, #0
 8005272:	2180      	movs	r1, #128	; 0x80
 8005274:	68f8      	ldr	r0, [r7, #12]
 8005276:	f001 f82b 	bl	80062d0 <UART_WaitOnFlagUntilTimeout>
 800527a:	4603      	mov	r3, r0
 800527c:	2b00      	cmp	r3, #0
 800527e:	d004      	beq.n	800528a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2220      	movs	r2, #32
 8005284:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e03c      	b.n	8005304 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d10b      	bne.n	80052a8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005290:	69bb      	ldr	r3, [r7, #24]
 8005292:	881a      	ldrh	r2, [r3, #0]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800529c:	b292      	uxth	r2, r2
 800529e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80052a0:	69bb      	ldr	r3, [r7, #24]
 80052a2:	3302      	adds	r3, #2
 80052a4:	61bb      	str	r3, [r7, #24]
 80052a6:	e008      	b.n	80052ba <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80052a8:	69fb      	ldr	r3, [r7, #28]
 80052aa:	781a      	ldrb	r2, [r3, #0]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	b292      	uxth	r2, r2
 80052b2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80052b4:	69fb      	ldr	r3, [r7, #28]
 80052b6:	3301      	adds	r3, #1
 80052b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	3b01      	subs	r3, #1
 80052c4:	b29a      	uxth	r2, r3
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d1c8      	bne.n	800526a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	9300      	str	r3, [sp, #0]
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	2200      	movs	r2, #0
 80052e0:	2140      	movs	r1, #64	; 0x40
 80052e2:	68f8      	ldr	r0, [r7, #12]
 80052e4:	f000 fff4 	bl	80062d0 <UART_WaitOnFlagUntilTimeout>
 80052e8:	4603      	mov	r3, r0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d004      	beq.n	80052f8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2220      	movs	r2, #32
 80052f2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80052f4:	2303      	movs	r3, #3
 80052f6:	e005      	b.n	8005304 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2220      	movs	r2, #32
 80052fc:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80052fe:	2300      	movs	r3, #0
 8005300:	e000      	b.n	8005304 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8005302:	2302      	movs	r3, #2
  }
}
 8005304:	4618      	mov	r0, r3
 8005306:	3720      	adds	r7, #32
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}

0800530c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b08a      	sub	sp, #40	; 0x28
 8005310:	af00      	add	r7, sp, #0
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	4613      	mov	r3, r2
 8005318:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005320:	2b20      	cmp	r3, #32
 8005322:	d137      	bne.n	8005394 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d002      	beq.n	8005330 <HAL_UART_Receive_IT+0x24>
 800532a:	88fb      	ldrh	r3, [r7, #6]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d101      	bne.n	8005334 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e030      	b.n	8005396 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2200      	movs	r2, #0
 8005338:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a18      	ldr	r2, [pc, #96]	; (80053a0 <HAL_UART_Receive_IT+0x94>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d01f      	beq.n	8005384 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800534e:	2b00      	cmp	r3, #0
 8005350:	d018      	beq.n	8005384 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	e853 3f00 	ldrex	r3, [r3]
 800535e:	613b      	str	r3, [r7, #16]
   return(result);
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005366:	627b      	str	r3, [r7, #36]	; 0x24
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	461a      	mov	r2, r3
 800536e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005370:	623b      	str	r3, [r7, #32]
 8005372:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005374:	69f9      	ldr	r1, [r7, #28]
 8005376:	6a3a      	ldr	r2, [r7, #32]
 8005378:	e841 2300 	strex	r3, r2, [r1]
 800537c:	61bb      	str	r3, [r7, #24]
   return(result);
 800537e:	69bb      	ldr	r3, [r7, #24]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d1e6      	bne.n	8005352 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005384:	88fb      	ldrh	r3, [r7, #6]
 8005386:	461a      	mov	r2, r3
 8005388:	68b9      	ldr	r1, [r7, #8]
 800538a:	68f8      	ldr	r0, [r7, #12]
 800538c:	f001 f808 	bl	80063a0 <UART_Start_Receive_IT>
 8005390:	4603      	mov	r3, r0
 8005392:	e000      	b.n	8005396 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005394:	2302      	movs	r3, #2
  }
}
 8005396:	4618      	mov	r0, r3
 8005398:	3728      	adds	r7, #40	; 0x28
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	40008000 	.word	0x40008000

080053a4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b08a      	sub	sp, #40	; 0x28
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	60b9      	str	r1, [r7, #8]
 80053ae:	4613      	mov	r3, r2
 80053b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053b8:	2b20      	cmp	r3, #32
 80053ba:	d137      	bne.n	800542c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d002      	beq.n	80053c8 <HAL_UART_Receive_DMA+0x24>
 80053c2:	88fb      	ldrh	r3, [r7, #6]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d101      	bne.n	80053cc <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e030      	b.n	800542e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2200      	movs	r2, #0
 80053d0:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a18      	ldr	r2, [pc, #96]	; (8005438 <HAL_UART_Receive_DMA+0x94>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d01f      	beq.n	800541c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d018      	beq.n	800541c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	e853 3f00 	ldrex	r3, [r3]
 80053f6:	613b      	str	r3, [r7, #16]
   return(result);
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80053fe:	627b      	str	r3, [r7, #36]	; 0x24
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	461a      	mov	r2, r3
 8005406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005408:	623b      	str	r3, [r7, #32]
 800540a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800540c:	69f9      	ldr	r1, [r7, #28]
 800540e:	6a3a      	ldr	r2, [r7, #32]
 8005410:	e841 2300 	strex	r3, r2, [r1]
 8005414:	61bb      	str	r3, [r7, #24]
   return(result);
 8005416:	69bb      	ldr	r3, [r7, #24]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d1e6      	bne.n	80053ea <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800541c:	88fb      	ldrh	r3, [r7, #6]
 800541e:	461a      	mov	r2, r3
 8005420:	68b9      	ldr	r1, [r7, #8]
 8005422:	68f8      	ldr	r0, [r7, #12]
 8005424:	f001 f882 	bl	800652c <UART_Start_Receive_DMA>
 8005428:	4603      	mov	r3, r0
 800542a:	e000      	b.n	800542e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800542c:	2302      	movs	r3, #2
  }
}
 800542e:	4618      	mov	r0, r3
 8005430:	3728      	adds	r7, #40	; 0x28
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	40008000 	.word	0x40008000

0800543c <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b090      	sub	sp, #64	; 0x40
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005448:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005450:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800545c:	2b80      	cmp	r3, #128	; 0x80
 800545e:	d139      	bne.n	80054d4 <HAL_UART_DMAStop+0x98>
 8005460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005462:	2b21      	cmp	r3, #33	; 0x21
 8005464:	d136      	bne.n	80054d4 <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	3308      	adds	r3, #8
 800546c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800546e:	6a3b      	ldr	r3, [r7, #32]
 8005470:	e853 3f00 	ldrex	r3, [r3]
 8005474:	61fb      	str	r3, [r7, #28]
   return(result);
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800547c:	637b      	str	r3, [r7, #52]	; 0x34
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	3308      	adds	r3, #8
 8005484:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005486:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005488:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800548a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800548c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800548e:	e841 2300 	strex	r3, r2, [r1]
 8005492:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005496:	2b00      	cmp	r3, #0
 8005498:	d1e5      	bne.n	8005466 <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d015      	beq.n	80054ce <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054a6:	4618      	mov	r0, r3
 80054a8:	f7fd fa26 	bl	80028f8 <HAL_DMA_Abort>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d00d      	beq.n	80054ce <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054b6:	4618      	mov	r0, r3
 80054b8:	f7fd fb4c 	bl	8002b54 <HAL_DMA_GetError>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b20      	cmp	r3, #32
 80054c0:	d105      	bne.n	80054ce <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2210      	movs	r2, #16
 80054c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80054ca:	2303      	movs	r3, #3
 80054cc:	e044      	b.n	8005558 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f001 f8cc 	bl	800666c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054de:	2b40      	cmp	r3, #64	; 0x40
 80054e0:	d139      	bne.n	8005556 <HAL_UART_DMAStop+0x11a>
 80054e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e4:	2b22      	cmp	r3, #34	; 0x22
 80054e6:	d136      	bne.n	8005556 <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	3308      	adds	r3, #8
 80054ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	e853 3f00 	ldrex	r3, [r3]
 80054f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054fe:	633b      	str	r3, [r7, #48]	; 0x30
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	3308      	adds	r3, #8
 8005506:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005508:	61ba      	str	r2, [r7, #24]
 800550a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800550c:	6979      	ldr	r1, [r7, #20]
 800550e:	69ba      	ldr	r2, [r7, #24]
 8005510:	e841 2300 	strex	r3, r2, [r1]
 8005514:	613b      	str	r3, [r7, #16]
   return(result);
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d1e5      	bne.n	80054e8 <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005520:	2b00      	cmp	r3, #0
 8005522:	d015      	beq.n	8005550 <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005528:	4618      	mov	r0, r3
 800552a:	f7fd f9e5 	bl	80028f8 <HAL_DMA_Abort>
 800552e:	4603      	mov	r3, r0
 8005530:	2b00      	cmp	r3, #0
 8005532:	d00d      	beq.n	8005550 <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005538:	4618      	mov	r0, r3
 800553a:	f7fd fb0b 	bl	8002b54 <HAL_DMA_GetError>
 800553e:	4603      	mov	r3, r0
 8005540:	2b20      	cmp	r3, #32
 8005542:	d105      	bne.n	8005550 <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2210      	movs	r2, #16
 8005548:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800554c:	2303      	movs	r3, #3
 800554e:	e003      	b.n	8005558 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f001 f8b1 	bl	80066b8 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8005556:	2300      	movs	r3, #0
}
 8005558:	4618      	mov	r0, r3
 800555a:	3740      	adds	r7, #64	; 0x40
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}

08005560 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b0ba      	sub	sp, #232	; 0xe8
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	69db      	ldr	r3, [r3, #28]
 800556e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005586:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800558a:	f640 030f 	movw	r3, #2063	; 0x80f
 800558e:	4013      	ands	r3, r2
 8005590:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005594:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005598:	2b00      	cmp	r3, #0
 800559a:	d115      	bne.n	80055c8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800559c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055a0:	f003 0320 	and.w	r3, r3, #32
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d00f      	beq.n	80055c8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80055a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055ac:	f003 0320 	and.w	r3, r3, #32
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d009      	beq.n	80055c8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	f000 82ae 	beq.w	8005b1a <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	4798      	blx	r3
      }
      return;
 80055c6:	e2a8      	b.n	8005b1a <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80055c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	f000 8117 	beq.w	8005800 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80055d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055d6:	f003 0301 	and.w	r3, r3, #1
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d106      	bne.n	80055ec <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80055de:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80055e2:	4b85      	ldr	r3, [pc, #532]	; (80057f8 <HAL_UART_IRQHandler+0x298>)
 80055e4:	4013      	ands	r3, r2
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	f000 810a 	beq.w	8005800 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80055ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055f0:	f003 0301 	and.w	r3, r3, #1
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d011      	beq.n	800561c <HAL_UART_IRQHandler+0xbc>
 80055f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005600:	2b00      	cmp	r3, #0
 8005602:	d00b      	beq.n	800561c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	2201      	movs	r2, #1
 800560a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005612:	f043 0201 	orr.w	r2, r3, #1
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800561c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005620:	f003 0302 	and.w	r3, r3, #2
 8005624:	2b00      	cmp	r3, #0
 8005626:	d011      	beq.n	800564c <HAL_UART_IRQHandler+0xec>
 8005628:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800562c:	f003 0301 	and.w	r3, r3, #1
 8005630:	2b00      	cmp	r3, #0
 8005632:	d00b      	beq.n	800564c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2202      	movs	r2, #2
 800563a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005642:	f043 0204 	orr.w	r2, r3, #4
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800564c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005650:	f003 0304 	and.w	r3, r3, #4
 8005654:	2b00      	cmp	r3, #0
 8005656:	d011      	beq.n	800567c <HAL_UART_IRQHandler+0x11c>
 8005658:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800565c:	f003 0301 	and.w	r3, r3, #1
 8005660:	2b00      	cmp	r3, #0
 8005662:	d00b      	beq.n	800567c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	2204      	movs	r2, #4
 800566a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005672:	f043 0202 	orr.w	r2, r3, #2
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800567c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005680:	f003 0308 	and.w	r3, r3, #8
 8005684:	2b00      	cmp	r3, #0
 8005686:	d017      	beq.n	80056b8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005688:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800568c:	f003 0320 	and.w	r3, r3, #32
 8005690:	2b00      	cmp	r3, #0
 8005692:	d105      	bne.n	80056a0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005694:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005698:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800569c:	2b00      	cmp	r3, #0
 800569e:	d00b      	beq.n	80056b8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	2208      	movs	r2, #8
 80056a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056ae:	f043 0208 	orr.w	r2, r3, #8
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80056b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d012      	beq.n	80056ea <HAL_UART_IRQHandler+0x18a>
 80056c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d00c      	beq.n	80056ea <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80056d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056e0:	f043 0220 	orr.w	r2, r3, #32
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	f000 8214 	beq.w	8005b1e <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80056f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056fa:	f003 0320 	and.w	r3, r3, #32
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d00d      	beq.n	800571e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005702:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005706:	f003 0320 	and.w	r3, r3, #32
 800570a:	2b00      	cmp	r3, #0
 800570c:	d007      	beq.n	800571e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005712:	2b00      	cmp	r3, #0
 8005714:	d003      	beq.n	800571e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005724:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005732:	2b40      	cmp	r3, #64	; 0x40
 8005734:	d005      	beq.n	8005742 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005736:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800573a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800573e:	2b00      	cmp	r3, #0
 8005740:	d04f      	beq.n	80057e2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 ffb8 	bl	80066b8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005752:	2b40      	cmp	r3, #64	; 0x40
 8005754:	d141      	bne.n	80057da <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	3308      	adds	r3, #8
 800575c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005760:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005764:	e853 3f00 	ldrex	r3, [r3]
 8005768:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800576c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005770:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005774:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	3308      	adds	r3, #8
 800577e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005782:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005786:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800578a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800578e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005792:	e841 2300 	strex	r3, r2, [r1]
 8005796:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800579a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d1d9      	bne.n	8005756 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d013      	beq.n	80057d2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057ae:	4a13      	ldr	r2, [pc, #76]	; (80057fc <HAL_UART_IRQHandler+0x29c>)
 80057b0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057b6:	4618      	mov	r0, r3
 80057b8:	f7fd f8dc 	bl	8002974 <HAL_DMA_Abort_IT>
 80057bc:	4603      	mov	r3, r0
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d017      	beq.n	80057f2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80057cc:	4610      	mov	r0, r2
 80057ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057d0:	e00f      	b.n	80057f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 f9c2 	bl	8005b5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057d8:	e00b      	b.n	80057f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f000 f9be 	bl	8005b5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057e0:	e007      	b.n	80057f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 f9ba 	bl	8005b5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2200      	movs	r2, #0
 80057ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80057f0:	e195      	b.n	8005b1e <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057f2:	bf00      	nop
    return;
 80057f4:	e193      	b.n	8005b1e <HAL_UART_IRQHandler+0x5be>
 80057f6:	bf00      	nop
 80057f8:	04000120 	.word	0x04000120
 80057fc:	08006969 	.word	0x08006969

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005804:	2b01      	cmp	r3, #1
 8005806:	f040 814e 	bne.w	8005aa6 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800580a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800580e:	f003 0310 	and.w	r3, r3, #16
 8005812:	2b00      	cmp	r3, #0
 8005814:	f000 8147 	beq.w	8005aa6 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005818:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800581c:	f003 0310 	and.w	r3, r3, #16
 8005820:	2b00      	cmp	r3, #0
 8005822:	f000 8140 	beq.w	8005aa6 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	2210      	movs	r2, #16
 800582c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005838:	2b40      	cmp	r3, #64	; 0x40
 800583a:	f040 80b8 	bne.w	80059ae <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800584a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800584e:	2b00      	cmp	r3, #0
 8005850:	f000 8167 	beq.w	8005b22 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800585a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800585e:	429a      	cmp	r2, r3
 8005860:	f080 815f 	bcs.w	8005b22 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800586a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f003 0320 	and.w	r3, r3, #32
 800587a:	2b00      	cmp	r3, #0
 800587c:	f040 8086 	bne.w	800598c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005888:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800588c:	e853 3f00 	ldrex	r3, [r3]
 8005890:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005894:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005898:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800589c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	461a      	mov	r2, r3
 80058a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80058aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80058ae:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80058b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80058ba:	e841 2300 	strex	r3, r2, [r1]
 80058be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80058c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d1da      	bne.n	8005880 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	3308      	adds	r3, #8
 80058d0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058d4:	e853 3f00 	ldrex	r3, [r3]
 80058d8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80058da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80058dc:	f023 0301 	bic.w	r3, r3, #1
 80058e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	3308      	adds	r3, #8
 80058ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80058ee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80058f2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80058f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80058fa:	e841 2300 	strex	r3, r2, [r1]
 80058fe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005900:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005902:	2b00      	cmp	r3, #0
 8005904:	d1e1      	bne.n	80058ca <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	3308      	adds	r3, #8
 800590c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800590e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005910:	e853 3f00 	ldrex	r3, [r3]
 8005914:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005916:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005918:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800591c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	3308      	adds	r3, #8
 8005926:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800592a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800592c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800592e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005930:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005932:	e841 2300 	strex	r3, r2, [r1]
 8005936:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005938:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800593a:	2b00      	cmp	r3, #0
 800593c:	d1e3      	bne.n	8005906 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2220      	movs	r2, #32
 8005942:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005952:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005954:	e853 3f00 	ldrex	r3, [r3]
 8005958:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800595a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800595c:	f023 0310 	bic.w	r3, r3, #16
 8005960:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	461a      	mov	r2, r3
 800596a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800596e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005970:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005972:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005974:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005976:	e841 2300 	strex	r3, r2, [r1]
 800597a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800597c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800597e:	2b00      	cmp	r3, #0
 8005980:	d1e4      	bne.n	800594c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005986:	4618      	mov	r0, r3
 8005988:	f7fc ffb6 	bl	80028f8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2202      	movs	r2, #2
 8005990:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800599e:	b29b      	uxth	r3, r3
 80059a0:	1ad3      	subs	r3, r2, r3
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	4619      	mov	r1, r3
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f000 f8e2 	bl	8005b70 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80059ac:	e0b9      	b.n	8005b22 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	1ad3      	subs	r3, r2, r3
 80059be:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	f000 80ab 	beq.w	8005b26 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 80059d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	f000 80a6 	beq.w	8005b26 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059e2:	e853 3f00 	ldrex	r3, [r3]
 80059e6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80059e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80059ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	461a      	mov	r2, r3
 80059f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80059fc:	647b      	str	r3, [r7, #68]	; 0x44
 80059fe:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a00:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a04:	e841 2300 	strex	r3, r2, [r1]
 8005a08:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d1e4      	bne.n	80059da <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	3308      	adds	r3, #8
 8005a16:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1a:	e853 3f00 	ldrex	r3, [r3]
 8005a1e:	623b      	str	r3, [r7, #32]
   return(result);
 8005a20:	6a3b      	ldr	r3, [r7, #32]
 8005a22:	f023 0301 	bic.w	r3, r3, #1
 8005a26:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	3308      	adds	r3, #8
 8005a30:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005a34:	633a      	str	r2, [r7, #48]	; 0x30
 8005a36:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a38:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a3c:	e841 2300 	strex	r3, r2, [r1]
 8005a40:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d1e3      	bne.n	8005a10 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2220      	movs	r2, #32
 8005a4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2200      	movs	r2, #0
 8005a54:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	e853 3f00 	ldrex	r3, [r3]
 8005a68:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f023 0310 	bic.w	r3, r3, #16
 8005a70:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	461a      	mov	r2, r3
 8005a7a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005a7e:	61fb      	str	r3, [r7, #28]
 8005a80:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a82:	69b9      	ldr	r1, [r7, #24]
 8005a84:	69fa      	ldr	r2, [r7, #28]
 8005a86:	e841 2300 	strex	r3, r2, [r1]
 8005a8a:	617b      	str	r3, [r7, #20]
   return(result);
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d1e4      	bne.n	8005a5c <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2202      	movs	r2, #2
 8005a96:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005a98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005a9c:	4619      	mov	r1, r3
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f000 f866 	bl	8005b70 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005aa4:	e03f      	b.n	8005b26 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005aa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d00e      	beq.n	8005ad0 <HAL_UART_IRQHandler+0x570>
 8005ab2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ab6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d008      	beq.n	8005ad0 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005ac6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f001 f949 	bl	8006d60 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005ace:	e02d      	b.n	8005b2c <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005ad0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d00e      	beq.n	8005afa <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005adc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d008      	beq.n	8005afa <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d01c      	beq.n	8005b2a <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	4798      	blx	r3
    }
    return;
 8005af8:	e017      	b.n	8005b2a <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005afa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d012      	beq.n	8005b2c <HAL_UART_IRQHandler+0x5cc>
 8005b06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d00c      	beq.n	8005b2c <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f000 ff3e 	bl	8006994 <UART_EndTransmit_IT>
    return;
 8005b18:	e008      	b.n	8005b2c <HAL_UART_IRQHandler+0x5cc>
      return;
 8005b1a:	bf00      	nop
 8005b1c:	e006      	b.n	8005b2c <HAL_UART_IRQHandler+0x5cc>
    return;
 8005b1e:	bf00      	nop
 8005b20:	e004      	b.n	8005b2c <HAL_UART_IRQHandler+0x5cc>
      return;
 8005b22:	bf00      	nop
 8005b24:	e002      	b.n	8005b2c <HAL_UART_IRQHandler+0x5cc>
      return;
 8005b26:	bf00      	nop
 8005b28:	e000      	b.n	8005b2c <HAL_UART_IRQHandler+0x5cc>
    return;
 8005b2a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005b2c:	37e8      	adds	r7, #232	; 0xe8
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
 8005b32:	bf00      	nop

08005b34 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b083      	sub	sp, #12
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005b3c:	bf00      	nop
 8005b3e:	370c      	adds	r7, #12
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr

08005b48 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005b50:	bf00      	nop
 8005b52:	370c      	adds	r7, #12
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr

08005b5c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b083      	sub	sp, #12
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005b64:	bf00      	nop
 8005b66:	370c      	adds	r7, #12
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr

08005b70 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b083      	sub	sp, #12
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	460b      	mov	r3, r1
 8005b7a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005b7c:	bf00      	nop
 8005b7e:	370c      	adds	r7, #12
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr

08005b88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b8c:	b08a      	sub	sp, #40	; 0x28
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b92:	2300      	movs	r3, #0
 8005b94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	689a      	ldr	r2, [r3, #8]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	691b      	ldr	r3, [r3, #16]
 8005ba0:	431a      	orrs	r2, r3
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	695b      	ldr	r3, [r3, #20]
 8005ba6:	431a      	orrs	r2, r3
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	69db      	ldr	r3, [r3, #28]
 8005bac:	4313      	orrs	r3, r2
 8005bae:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	4b9e      	ldr	r3, [pc, #632]	; (8005e30 <UART_SetConfig+0x2a8>)
 8005bb8:	4013      	ands	r3, r2
 8005bba:	68fa      	ldr	r2, [r7, #12]
 8005bbc:	6812      	ldr	r2, [r2, #0]
 8005bbe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005bc0:	430b      	orrs	r3, r1
 8005bc2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	68da      	ldr	r2, [r3, #12]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	430a      	orrs	r2, r1
 8005bd8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	699b      	ldr	r3, [r3, #24]
 8005bde:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a93      	ldr	r2, [pc, #588]	; (8005e34 <UART_SetConfig+0x2ac>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d004      	beq.n	8005bf4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6a1b      	ldr	r3, [r3, #32]
 8005bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c04:	430a      	orrs	r2, r1
 8005c06:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a8a      	ldr	r2, [pc, #552]	; (8005e38 <UART_SetConfig+0x2b0>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d126      	bne.n	8005c60 <UART_SetConfig+0xd8>
 8005c12:	4b8a      	ldr	r3, [pc, #552]	; (8005e3c <UART_SetConfig+0x2b4>)
 8005c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c18:	f003 0303 	and.w	r3, r3, #3
 8005c1c:	2b03      	cmp	r3, #3
 8005c1e:	d81b      	bhi.n	8005c58 <UART_SetConfig+0xd0>
 8005c20:	a201      	add	r2, pc, #4	; (adr r2, 8005c28 <UART_SetConfig+0xa0>)
 8005c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c26:	bf00      	nop
 8005c28:	08005c39 	.word	0x08005c39
 8005c2c:	08005c49 	.word	0x08005c49
 8005c30:	08005c41 	.word	0x08005c41
 8005c34:	08005c51 	.word	0x08005c51
 8005c38:	2301      	movs	r3, #1
 8005c3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c3e:	e0ab      	b.n	8005d98 <UART_SetConfig+0x210>
 8005c40:	2302      	movs	r3, #2
 8005c42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c46:	e0a7      	b.n	8005d98 <UART_SetConfig+0x210>
 8005c48:	2304      	movs	r3, #4
 8005c4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c4e:	e0a3      	b.n	8005d98 <UART_SetConfig+0x210>
 8005c50:	2308      	movs	r3, #8
 8005c52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c56:	e09f      	b.n	8005d98 <UART_SetConfig+0x210>
 8005c58:	2310      	movs	r3, #16
 8005c5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c5e:	e09b      	b.n	8005d98 <UART_SetConfig+0x210>
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a76      	ldr	r2, [pc, #472]	; (8005e40 <UART_SetConfig+0x2b8>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d138      	bne.n	8005cdc <UART_SetConfig+0x154>
 8005c6a:	4b74      	ldr	r3, [pc, #464]	; (8005e3c <UART_SetConfig+0x2b4>)
 8005c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c70:	f003 030c 	and.w	r3, r3, #12
 8005c74:	2b0c      	cmp	r3, #12
 8005c76:	d82d      	bhi.n	8005cd4 <UART_SetConfig+0x14c>
 8005c78:	a201      	add	r2, pc, #4	; (adr r2, 8005c80 <UART_SetConfig+0xf8>)
 8005c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c7e:	bf00      	nop
 8005c80:	08005cb5 	.word	0x08005cb5
 8005c84:	08005cd5 	.word	0x08005cd5
 8005c88:	08005cd5 	.word	0x08005cd5
 8005c8c:	08005cd5 	.word	0x08005cd5
 8005c90:	08005cc5 	.word	0x08005cc5
 8005c94:	08005cd5 	.word	0x08005cd5
 8005c98:	08005cd5 	.word	0x08005cd5
 8005c9c:	08005cd5 	.word	0x08005cd5
 8005ca0:	08005cbd 	.word	0x08005cbd
 8005ca4:	08005cd5 	.word	0x08005cd5
 8005ca8:	08005cd5 	.word	0x08005cd5
 8005cac:	08005cd5 	.word	0x08005cd5
 8005cb0:	08005ccd 	.word	0x08005ccd
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cba:	e06d      	b.n	8005d98 <UART_SetConfig+0x210>
 8005cbc:	2302      	movs	r3, #2
 8005cbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cc2:	e069      	b.n	8005d98 <UART_SetConfig+0x210>
 8005cc4:	2304      	movs	r3, #4
 8005cc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cca:	e065      	b.n	8005d98 <UART_SetConfig+0x210>
 8005ccc:	2308      	movs	r3, #8
 8005cce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cd2:	e061      	b.n	8005d98 <UART_SetConfig+0x210>
 8005cd4:	2310      	movs	r3, #16
 8005cd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cda:	e05d      	b.n	8005d98 <UART_SetConfig+0x210>
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a58      	ldr	r2, [pc, #352]	; (8005e44 <UART_SetConfig+0x2bc>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d125      	bne.n	8005d32 <UART_SetConfig+0x1aa>
 8005ce6:	4b55      	ldr	r3, [pc, #340]	; (8005e3c <UART_SetConfig+0x2b4>)
 8005ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cec:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005cf0:	2b30      	cmp	r3, #48	; 0x30
 8005cf2:	d016      	beq.n	8005d22 <UART_SetConfig+0x19a>
 8005cf4:	2b30      	cmp	r3, #48	; 0x30
 8005cf6:	d818      	bhi.n	8005d2a <UART_SetConfig+0x1a2>
 8005cf8:	2b20      	cmp	r3, #32
 8005cfa:	d00a      	beq.n	8005d12 <UART_SetConfig+0x18a>
 8005cfc:	2b20      	cmp	r3, #32
 8005cfe:	d814      	bhi.n	8005d2a <UART_SetConfig+0x1a2>
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d002      	beq.n	8005d0a <UART_SetConfig+0x182>
 8005d04:	2b10      	cmp	r3, #16
 8005d06:	d008      	beq.n	8005d1a <UART_SetConfig+0x192>
 8005d08:	e00f      	b.n	8005d2a <UART_SetConfig+0x1a2>
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d10:	e042      	b.n	8005d98 <UART_SetConfig+0x210>
 8005d12:	2302      	movs	r3, #2
 8005d14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d18:	e03e      	b.n	8005d98 <UART_SetConfig+0x210>
 8005d1a:	2304      	movs	r3, #4
 8005d1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d20:	e03a      	b.n	8005d98 <UART_SetConfig+0x210>
 8005d22:	2308      	movs	r3, #8
 8005d24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d28:	e036      	b.n	8005d98 <UART_SetConfig+0x210>
 8005d2a:	2310      	movs	r3, #16
 8005d2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d30:	e032      	b.n	8005d98 <UART_SetConfig+0x210>
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a3f      	ldr	r2, [pc, #252]	; (8005e34 <UART_SetConfig+0x2ac>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d12a      	bne.n	8005d92 <UART_SetConfig+0x20a>
 8005d3c:	4b3f      	ldr	r3, [pc, #252]	; (8005e3c <UART_SetConfig+0x2b4>)
 8005d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d42:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005d46:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d4a:	d01a      	beq.n	8005d82 <UART_SetConfig+0x1fa>
 8005d4c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d50:	d81b      	bhi.n	8005d8a <UART_SetConfig+0x202>
 8005d52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d56:	d00c      	beq.n	8005d72 <UART_SetConfig+0x1ea>
 8005d58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d5c:	d815      	bhi.n	8005d8a <UART_SetConfig+0x202>
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d003      	beq.n	8005d6a <UART_SetConfig+0x1e2>
 8005d62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d66:	d008      	beq.n	8005d7a <UART_SetConfig+0x1f2>
 8005d68:	e00f      	b.n	8005d8a <UART_SetConfig+0x202>
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d70:	e012      	b.n	8005d98 <UART_SetConfig+0x210>
 8005d72:	2302      	movs	r3, #2
 8005d74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d78:	e00e      	b.n	8005d98 <UART_SetConfig+0x210>
 8005d7a:	2304      	movs	r3, #4
 8005d7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d80:	e00a      	b.n	8005d98 <UART_SetConfig+0x210>
 8005d82:	2308      	movs	r3, #8
 8005d84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d88:	e006      	b.n	8005d98 <UART_SetConfig+0x210>
 8005d8a:	2310      	movs	r3, #16
 8005d8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d90:	e002      	b.n	8005d98 <UART_SetConfig+0x210>
 8005d92:	2310      	movs	r3, #16
 8005d94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a25      	ldr	r2, [pc, #148]	; (8005e34 <UART_SetConfig+0x2ac>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	f040 808a 	bne.w	8005eb8 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005da4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005da8:	2b08      	cmp	r3, #8
 8005daa:	d824      	bhi.n	8005df6 <UART_SetConfig+0x26e>
 8005dac:	a201      	add	r2, pc, #4	; (adr r2, 8005db4 <UART_SetConfig+0x22c>)
 8005dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db2:	bf00      	nop
 8005db4:	08005dd9 	.word	0x08005dd9
 8005db8:	08005df7 	.word	0x08005df7
 8005dbc:	08005de1 	.word	0x08005de1
 8005dc0:	08005df7 	.word	0x08005df7
 8005dc4:	08005de7 	.word	0x08005de7
 8005dc8:	08005df7 	.word	0x08005df7
 8005dcc:	08005df7 	.word	0x08005df7
 8005dd0:	08005df7 	.word	0x08005df7
 8005dd4:	08005def 	.word	0x08005def
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005dd8:	f7fe fd0a 	bl	80047f0 <HAL_RCC_GetPCLK1Freq>
 8005ddc:	61f8      	str	r0, [r7, #28]
        break;
 8005dde:	e010      	b.n	8005e02 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005de0:	4b19      	ldr	r3, [pc, #100]	; (8005e48 <UART_SetConfig+0x2c0>)
 8005de2:	61fb      	str	r3, [r7, #28]
        break;
 8005de4:	e00d      	b.n	8005e02 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005de6:	f7fe fc6b 	bl	80046c0 <HAL_RCC_GetSysClockFreq>
 8005dea:	61f8      	str	r0, [r7, #28]
        break;
 8005dec:	e009      	b.n	8005e02 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005df2:	61fb      	str	r3, [r7, #28]
        break;
 8005df4:	e005      	b.n	8005e02 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8005df6:	2300      	movs	r3, #0
 8005df8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005e00:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	f000 8109 	beq.w	800601c <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	685a      	ldr	r2, [r3, #4]
 8005e0e:	4613      	mov	r3, r2
 8005e10:	005b      	lsls	r3, r3, #1
 8005e12:	4413      	add	r3, r2
 8005e14:	69fa      	ldr	r2, [r7, #28]
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d305      	bcc.n	8005e26 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005e20:	69fa      	ldr	r2, [r7, #28]
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d912      	bls.n	8005e4c <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005e2c:	e0f6      	b.n	800601c <UART_SetConfig+0x494>
 8005e2e:	bf00      	nop
 8005e30:	efff69f3 	.word	0xefff69f3
 8005e34:	40008000 	.word	0x40008000
 8005e38:	40013800 	.word	0x40013800
 8005e3c:	40021000 	.word	0x40021000
 8005e40:	40004400 	.word	0x40004400
 8005e44:	40004800 	.word	0x40004800
 8005e48:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	461c      	mov	r4, r3
 8005e52:	4615      	mov	r5, r2
 8005e54:	f04f 0200 	mov.w	r2, #0
 8005e58:	f04f 0300 	mov.w	r3, #0
 8005e5c:	022b      	lsls	r3, r5, #8
 8005e5e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005e62:	0222      	lsls	r2, r4, #8
 8005e64:	68f9      	ldr	r1, [r7, #12]
 8005e66:	6849      	ldr	r1, [r1, #4]
 8005e68:	0849      	lsrs	r1, r1, #1
 8005e6a:	2000      	movs	r0, #0
 8005e6c:	4688      	mov	r8, r1
 8005e6e:	4681      	mov	r9, r0
 8005e70:	eb12 0a08 	adds.w	sl, r2, r8
 8005e74:	eb43 0b09 	adc.w	fp, r3, r9
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	603b      	str	r3, [r7, #0]
 8005e80:	607a      	str	r2, [r7, #4]
 8005e82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e86:	4650      	mov	r0, sl
 8005e88:	4659      	mov	r1, fp
 8005e8a:	f7fa fedd 	bl	8000c48 <__aeabi_uldivmod>
 8005e8e:	4602      	mov	r2, r0
 8005e90:	460b      	mov	r3, r1
 8005e92:	4613      	mov	r3, r2
 8005e94:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005e96:	69bb      	ldr	r3, [r7, #24]
 8005e98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e9c:	d308      	bcc.n	8005eb0 <UART_SetConfig+0x328>
 8005e9e:	69bb      	ldr	r3, [r7, #24]
 8005ea0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ea4:	d204      	bcs.n	8005eb0 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	69ba      	ldr	r2, [r7, #24]
 8005eac:	60da      	str	r2, [r3, #12]
 8005eae:	e0b5      	b.n	800601c <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005eb6:	e0b1      	b.n	800601c <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	69db      	ldr	r3, [r3, #28]
 8005ebc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ec0:	d15d      	bne.n	8005f7e <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8005ec2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005ec6:	2b08      	cmp	r3, #8
 8005ec8:	d827      	bhi.n	8005f1a <UART_SetConfig+0x392>
 8005eca:	a201      	add	r2, pc, #4	; (adr r2, 8005ed0 <UART_SetConfig+0x348>)
 8005ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ed0:	08005ef5 	.word	0x08005ef5
 8005ed4:	08005efd 	.word	0x08005efd
 8005ed8:	08005f05 	.word	0x08005f05
 8005edc:	08005f1b 	.word	0x08005f1b
 8005ee0:	08005f0b 	.word	0x08005f0b
 8005ee4:	08005f1b 	.word	0x08005f1b
 8005ee8:	08005f1b 	.word	0x08005f1b
 8005eec:	08005f1b 	.word	0x08005f1b
 8005ef0:	08005f13 	.word	0x08005f13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ef4:	f7fe fc7c 	bl	80047f0 <HAL_RCC_GetPCLK1Freq>
 8005ef8:	61f8      	str	r0, [r7, #28]
        break;
 8005efa:	e014      	b.n	8005f26 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005efc:	f7fe fc8e 	bl	800481c <HAL_RCC_GetPCLK2Freq>
 8005f00:	61f8      	str	r0, [r7, #28]
        break;
 8005f02:	e010      	b.n	8005f26 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f04:	4b4c      	ldr	r3, [pc, #304]	; (8006038 <UART_SetConfig+0x4b0>)
 8005f06:	61fb      	str	r3, [r7, #28]
        break;
 8005f08:	e00d      	b.n	8005f26 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f0a:	f7fe fbd9 	bl	80046c0 <HAL_RCC_GetSysClockFreq>
 8005f0e:	61f8      	str	r0, [r7, #28]
        break;
 8005f10:	e009      	b.n	8005f26 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f16:	61fb      	str	r3, [r7, #28]
        break;
 8005f18:	e005      	b.n	8005f26 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005f24:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d077      	beq.n	800601c <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005f2c:	69fb      	ldr	r3, [r7, #28]
 8005f2e:	005a      	lsls	r2, r3, #1
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	085b      	lsrs	r3, r3, #1
 8005f36:	441a      	add	r2, r3
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f40:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f42:	69bb      	ldr	r3, [r7, #24]
 8005f44:	2b0f      	cmp	r3, #15
 8005f46:	d916      	bls.n	8005f76 <UART_SetConfig+0x3ee>
 8005f48:	69bb      	ldr	r3, [r7, #24]
 8005f4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f4e:	d212      	bcs.n	8005f76 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f50:	69bb      	ldr	r3, [r7, #24]
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	f023 030f 	bic.w	r3, r3, #15
 8005f58:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f5a:	69bb      	ldr	r3, [r7, #24]
 8005f5c:	085b      	lsrs	r3, r3, #1
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	f003 0307 	and.w	r3, r3, #7
 8005f64:	b29a      	uxth	r2, r3
 8005f66:	8afb      	ldrh	r3, [r7, #22]
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	8afa      	ldrh	r2, [r7, #22]
 8005f72:	60da      	str	r2, [r3, #12]
 8005f74:	e052      	b.n	800601c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005f7c:	e04e      	b.n	800601c <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005f7e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005f82:	2b08      	cmp	r3, #8
 8005f84:	d827      	bhi.n	8005fd6 <UART_SetConfig+0x44e>
 8005f86:	a201      	add	r2, pc, #4	; (adr r2, 8005f8c <UART_SetConfig+0x404>)
 8005f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f8c:	08005fb1 	.word	0x08005fb1
 8005f90:	08005fb9 	.word	0x08005fb9
 8005f94:	08005fc1 	.word	0x08005fc1
 8005f98:	08005fd7 	.word	0x08005fd7
 8005f9c:	08005fc7 	.word	0x08005fc7
 8005fa0:	08005fd7 	.word	0x08005fd7
 8005fa4:	08005fd7 	.word	0x08005fd7
 8005fa8:	08005fd7 	.word	0x08005fd7
 8005fac:	08005fcf 	.word	0x08005fcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fb0:	f7fe fc1e 	bl	80047f0 <HAL_RCC_GetPCLK1Freq>
 8005fb4:	61f8      	str	r0, [r7, #28]
        break;
 8005fb6:	e014      	b.n	8005fe2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fb8:	f7fe fc30 	bl	800481c <HAL_RCC_GetPCLK2Freq>
 8005fbc:	61f8      	str	r0, [r7, #28]
        break;
 8005fbe:	e010      	b.n	8005fe2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fc0:	4b1d      	ldr	r3, [pc, #116]	; (8006038 <UART_SetConfig+0x4b0>)
 8005fc2:	61fb      	str	r3, [r7, #28]
        break;
 8005fc4:	e00d      	b.n	8005fe2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fc6:	f7fe fb7b 	bl	80046c0 <HAL_RCC_GetSysClockFreq>
 8005fca:	61f8      	str	r0, [r7, #28]
        break;
 8005fcc:	e009      	b.n	8005fe2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fd2:	61fb      	str	r3, [r7, #28]
        break;
 8005fd4:	e005      	b.n	8005fe2 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005fe0:	bf00      	nop
    }

    if (pclk != 0U)
 8005fe2:	69fb      	ldr	r3, [r7, #28]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d019      	beq.n	800601c <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	085a      	lsrs	r2, r3, #1
 8005fee:	69fb      	ldr	r3, [r7, #28]
 8005ff0:	441a      	add	r2, r3
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ffa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ffc:	69bb      	ldr	r3, [r7, #24]
 8005ffe:	2b0f      	cmp	r3, #15
 8006000:	d909      	bls.n	8006016 <UART_SetConfig+0x48e>
 8006002:	69bb      	ldr	r3, [r7, #24]
 8006004:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006008:	d205      	bcs.n	8006016 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800600a:	69bb      	ldr	r3, [r7, #24]
 800600c:	b29a      	uxth	r2, r3
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	60da      	str	r2, [r3, #12]
 8006014:	e002      	b.n	800601c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2200      	movs	r2, #0
 8006020:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2200      	movs	r2, #0
 8006026:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006028:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800602c:	4618      	mov	r0, r3
 800602e:	3728      	adds	r7, #40	; 0x28
 8006030:	46bd      	mov	sp, r7
 8006032:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006036:	bf00      	nop
 8006038:	00f42400 	.word	0x00f42400

0800603c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800603c:	b480      	push	{r7}
 800603e:	b083      	sub	sp, #12
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006048:	f003 0308 	and.w	r3, r3, #8
 800604c:	2b00      	cmp	r3, #0
 800604e:	d00a      	beq.n	8006066 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	430a      	orrs	r2, r1
 8006064:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606a:	f003 0301 	and.w	r3, r3, #1
 800606e:	2b00      	cmp	r3, #0
 8006070:	d00a      	beq.n	8006088 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	430a      	orrs	r2, r1
 8006086:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608c:	f003 0302 	and.w	r3, r3, #2
 8006090:	2b00      	cmp	r3, #0
 8006092:	d00a      	beq.n	80060aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	430a      	orrs	r2, r1
 80060a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ae:	f003 0304 	and.w	r3, r3, #4
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d00a      	beq.n	80060cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	430a      	orrs	r2, r1
 80060ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d0:	f003 0310 	and.w	r3, r3, #16
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d00a      	beq.n	80060ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	430a      	orrs	r2, r1
 80060ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f2:	f003 0320 	and.w	r3, r3, #32
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d00a      	beq.n	8006110 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	430a      	orrs	r2, r1
 800610e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006118:	2b00      	cmp	r3, #0
 800611a:	d01a      	beq.n	8006152 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	430a      	orrs	r2, r1
 8006130:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006136:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800613a:	d10a      	bne.n	8006152 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	430a      	orrs	r2, r1
 8006150:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800615a:	2b00      	cmp	r3, #0
 800615c:	d00a      	beq.n	8006174 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	430a      	orrs	r2, r1
 8006172:	605a      	str	r2, [r3, #4]
  }
}
 8006174:	bf00      	nop
 8006176:	370c      	adds	r7, #12
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr

08006180 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b098      	sub	sp, #96	; 0x60
 8006184:	af02      	add	r7, sp, #8
 8006186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2200      	movs	r2, #0
 800618c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006190:	f7fc f9ac 	bl	80024ec <HAL_GetTick>
 8006194:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f003 0308 	and.w	r3, r3, #8
 80061a0:	2b08      	cmp	r3, #8
 80061a2:	d12e      	bne.n	8006202 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80061a8:	9300      	str	r3, [sp, #0]
 80061aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061ac:	2200      	movs	r2, #0
 80061ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f000 f88c 	bl	80062d0 <UART_WaitOnFlagUntilTimeout>
 80061b8:	4603      	mov	r3, r0
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d021      	beq.n	8006202 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061c6:	e853 3f00 	ldrex	r3, [r3]
 80061ca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80061cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061d2:	653b      	str	r3, [r7, #80]	; 0x50
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	461a      	mov	r2, r3
 80061da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061dc:	647b      	str	r3, [r7, #68]	; 0x44
 80061de:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80061e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061e4:	e841 2300 	strex	r3, r2, [r1]
 80061e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80061ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d1e6      	bne.n	80061be <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2220      	movs	r2, #32
 80061f4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061fe:	2303      	movs	r3, #3
 8006200:	e062      	b.n	80062c8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f003 0304 	and.w	r3, r3, #4
 800620c:	2b04      	cmp	r3, #4
 800620e:	d149      	bne.n	80062a4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006210:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006214:	9300      	str	r3, [sp, #0]
 8006216:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006218:	2200      	movs	r2, #0
 800621a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f000 f856 	bl	80062d0 <UART_WaitOnFlagUntilTimeout>
 8006224:	4603      	mov	r3, r0
 8006226:	2b00      	cmp	r3, #0
 8006228:	d03c      	beq.n	80062a4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006232:	e853 3f00 	ldrex	r3, [r3]
 8006236:	623b      	str	r3, [r7, #32]
   return(result);
 8006238:	6a3b      	ldr	r3, [r7, #32]
 800623a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800623e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	461a      	mov	r2, r3
 8006246:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006248:	633b      	str	r3, [r7, #48]	; 0x30
 800624a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800624c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800624e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006250:	e841 2300 	strex	r3, r2, [r1]
 8006254:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006258:	2b00      	cmp	r3, #0
 800625a:	d1e6      	bne.n	800622a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	3308      	adds	r3, #8
 8006262:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	e853 3f00 	ldrex	r3, [r3]
 800626a:	60fb      	str	r3, [r7, #12]
   return(result);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f023 0301 	bic.w	r3, r3, #1
 8006272:	64bb      	str	r3, [r7, #72]	; 0x48
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	3308      	adds	r3, #8
 800627a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800627c:	61fa      	str	r2, [r7, #28]
 800627e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006280:	69b9      	ldr	r1, [r7, #24]
 8006282:	69fa      	ldr	r2, [r7, #28]
 8006284:	e841 2300 	strex	r3, r2, [r1]
 8006288:	617b      	str	r3, [r7, #20]
   return(result);
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d1e5      	bne.n	800625c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2220      	movs	r2, #32
 8006294:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062a0:	2303      	movs	r3, #3
 80062a2:	e011      	b.n	80062c8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2220      	movs	r2, #32
 80062a8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2220      	movs	r2, #32
 80062ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2200      	movs	r2, #0
 80062b6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2200      	movs	r2, #0
 80062c2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80062c6:	2300      	movs	r3, #0
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3758      	adds	r7, #88	; 0x58
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b084      	sub	sp, #16
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	60b9      	str	r1, [r7, #8]
 80062da:	603b      	str	r3, [r7, #0]
 80062dc:	4613      	mov	r3, r2
 80062de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062e0:	e049      	b.n	8006376 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062e2:	69bb      	ldr	r3, [r7, #24]
 80062e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062e8:	d045      	beq.n	8006376 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062ea:	f7fc f8ff 	bl	80024ec <HAL_GetTick>
 80062ee:	4602      	mov	r2, r0
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	1ad3      	subs	r3, r2, r3
 80062f4:	69ba      	ldr	r2, [r7, #24]
 80062f6:	429a      	cmp	r2, r3
 80062f8:	d302      	bcc.n	8006300 <UART_WaitOnFlagUntilTimeout+0x30>
 80062fa:	69bb      	ldr	r3, [r7, #24]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d101      	bne.n	8006304 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006300:	2303      	movs	r3, #3
 8006302:	e048      	b.n	8006396 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f003 0304 	and.w	r3, r3, #4
 800630e:	2b00      	cmp	r3, #0
 8006310:	d031      	beq.n	8006376 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	69db      	ldr	r3, [r3, #28]
 8006318:	f003 0308 	and.w	r3, r3, #8
 800631c:	2b08      	cmp	r3, #8
 800631e:	d110      	bne.n	8006342 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	2208      	movs	r2, #8
 8006326:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006328:	68f8      	ldr	r0, [r7, #12]
 800632a:	f000 f9c5 	bl	80066b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2208      	movs	r2, #8
 8006332:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2200      	movs	r2, #0
 800633a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e029      	b.n	8006396 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	69db      	ldr	r3, [r3, #28]
 8006348:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800634c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006350:	d111      	bne.n	8006376 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800635a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800635c:	68f8      	ldr	r0, [r7, #12]
 800635e:	f000 f9ab 	bl	80066b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2220      	movs	r2, #32
 8006366:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2200      	movs	r2, #0
 800636e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006372:	2303      	movs	r3, #3
 8006374:	e00f      	b.n	8006396 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	69da      	ldr	r2, [r3, #28]
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	4013      	ands	r3, r2
 8006380:	68ba      	ldr	r2, [r7, #8]
 8006382:	429a      	cmp	r2, r3
 8006384:	bf0c      	ite	eq
 8006386:	2301      	moveq	r3, #1
 8006388:	2300      	movne	r3, #0
 800638a:	b2db      	uxtb	r3, r3
 800638c:	461a      	mov	r2, r3
 800638e:	79fb      	ldrb	r3, [r7, #7]
 8006390:	429a      	cmp	r2, r3
 8006392:	d0a6      	beq.n	80062e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006394:	2300      	movs	r3, #0
}
 8006396:	4618      	mov	r0, r3
 8006398:	3710      	adds	r7, #16
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}
	...

080063a0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b097      	sub	sp, #92	; 0x5c
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	4613      	mov	r3, r2
 80063ac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	68ba      	ldr	r2, [r7, #8]
 80063b2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	88fa      	ldrh	r2, [r7, #6]
 80063b8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	88fa      	ldrh	r2, [r7, #6]
 80063c0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2200      	movs	r2, #0
 80063c8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063d2:	d10e      	bne.n	80063f2 <UART_Start_Receive_IT+0x52>
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	691b      	ldr	r3, [r3, #16]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d105      	bne.n	80063e8 <UART_Start_Receive_IT+0x48>
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f240 12ff 	movw	r2, #511	; 0x1ff
 80063e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80063e6:	e02d      	b.n	8006444 <UART_Start_Receive_IT+0xa4>
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	22ff      	movs	r2, #255	; 0xff
 80063ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80063f0:	e028      	b.n	8006444 <UART_Start_Receive_IT+0xa4>
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d10d      	bne.n	8006416 <UART_Start_Receive_IT+0x76>
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	691b      	ldr	r3, [r3, #16]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d104      	bne.n	800640c <UART_Start_Receive_IT+0x6c>
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	22ff      	movs	r2, #255	; 0xff
 8006406:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800640a:	e01b      	b.n	8006444 <UART_Start_Receive_IT+0xa4>
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	227f      	movs	r2, #127	; 0x7f
 8006410:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006414:	e016      	b.n	8006444 <UART_Start_Receive_IT+0xa4>
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800641e:	d10d      	bne.n	800643c <UART_Start_Receive_IT+0x9c>
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	691b      	ldr	r3, [r3, #16]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d104      	bne.n	8006432 <UART_Start_Receive_IT+0x92>
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	227f      	movs	r2, #127	; 0x7f
 800642c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006430:	e008      	b.n	8006444 <UART_Start_Receive_IT+0xa4>
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	223f      	movs	r2, #63	; 0x3f
 8006436:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800643a:	e003      	b.n	8006444 <UART_Start_Receive_IT+0xa4>
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2200      	movs	r2, #0
 8006440:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2200      	movs	r2, #0
 8006448:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2222      	movs	r2, #34	; 0x22
 8006450:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	3308      	adds	r3, #8
 800645a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800645c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800645e:	e853 3f00 	ldrex	r3, [r3]
 8006462:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006466:	f043 0301 	orr.w	r3, r3, #1
 800646a:	657b      	str	r3, [r7, #84]	; 0x54
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	3308      	adds	r3, #8
 8006472:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006474:	64ba      	str	r2, [r7, #72]	; 0x48
 8006476:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006478:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800647a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800647c:	e841 2300 	strex	r3, r2, [r1]
 8006480:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006482:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006484:	2b00      	cmp	r3, #0
 8006486:	d1e5      	bne.n	8006454 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006490:	d107      	bne.n	80064a2 <UART_Start_Receive_IT+0x102>
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	691b      	ldr	r3, [r3, #16]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d103      	bne.n	80064a2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	4a21      	ldr	r2, [pc, #132]	; (8006524 <UART_Start_Receive_IT+0x184>)
 800649e:	669a      	str	r2, [r3, #104]	; 0x68
 80064a0:	e002      	b.n	80064a8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	4a20      	ldr	r2, [pc, #128]	; (8006528 <UART_Start_Receive_IT+0x188>)
 80064a6:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	691b      	ldr	r3, [r3, #16]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d019      	beq.n	80064e4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b8:	e853 3f00 	ldrex	r3, [r3]
 80064bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80064be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c0:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80064c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	461a      	mov	r2, r3
 80064cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064ce:	637b      	str	r3, [r7, #52]	; 0x34
 80064d0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80064d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80064d6:	e841 2300 	strex	r3, r2, [r1]
 80064da:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80064dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d1e6      	bne.n	80064b0 <UART_Start_Receive_IT+0x110>
 80064e2:	e018      	b.n	8006516 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	e853 3f00 	ldrex	r3, [r3]
 80064f0:	613b      	str	r3, [r7, #16]
   return(result);
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	f043 0320 	orr.w	r3, r3, #32
 80064f8:	653b      	str	r3, [r7, #80]	; 0x50
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	461a      	mov	r2, r3
 8006500:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006502:	623b      	str	r3, [r7, #32]
 8006504:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006506:	69f9      	ldr	r1, [r7, #28]
 8006508:	6a3a      	ldr	r2, [r7, #32]
 800650a:	e841 2300 	strex	r3, r2, [r1]
 800650e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d1e6      	bne.n	80064e4 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8006516:	2300      	movs	r3, #0
}
 8006518:	4618      	mov	r0, r3
 800651a:	375c      	adds	r7, #92	; 0x5c
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr
 8006524:	08006ba5 	.word	0x08006ba5
 8006528:	080069e9 	.word	0x080069e9

0800652c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b096      	sub	sp, #88	; 0x58
 8006530:	af00      	add	r7, sp, #0
 8006532:	60f8      	str	r0, [r7, #12]
 8006534:	60b9      	str	r1, [r7, #8]
 8006536:	4613      	mov	r3, r2
 8006538:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	68ba      	ldr	r2, [r7, #8]
 800653e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	88fa      	ldrh	r2, [r7, #6]
 8006544:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2200      	movs	r2, #0
 800654c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2222      	movs	r2, #34	; 0x22
 8006554:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800655c:	2b00      	cmp	r3, #0
 800655e:	d028      	beq.n	80065b2 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006564:	4a3e      	ldr	r2, [pc, #248]	; (8006660 <UART_Start_Receive_DMA+0x134>)
 8006566:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800656c:	4a3d      	ldr	r2, [pc, #244]	; (8006664 <UART_Start_Receive_DMA+0x138>)
 800656e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006574:	4a3c      	ldr	r2, [pc, #240]	; (8006668 <UART_Start_Receive_DMA+0x13c>)
 8006576:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800657c:	2200      	movs	r2, #0
 800657e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	3324      	adds	r3, #36	; 0x24
 800658a:	4619      	mov	r1, r3
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006590:	461a      	mov	r2, r3
 8006592:	88fb      	ldrh	r3, [r7, #6]
 8006594:	f7fc f950 	bl	8002838 <HAL_DMA_Start_IT>
 8006598:	4603      	mov	r3, r0
 800659a:	2b00      	cmp	r3, #0
 800659c:	d009      	beq.n	80065b2 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2210      	movs	r2, #16
 80065a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2220      	movs	r2, #32
 80065aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	e051      	b.n	8006656 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	691b      	ldr	r3, [r3, #16]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d018      	beq.n	80065ec <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065c2:	e853 3f00 	ldrex	r3, [r3]
 80065c6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80065c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065ce:	657b      	str	r3, [r7, #84]	; 0x54
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	461a      	mov	r2, r3
 80065d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80065da:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065dc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80065de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065e0:	e841 2300 	strex	r3, r2, [r1]
 80065e4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80065e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d1e6      	bne.n	80065ba <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	3308      	adds	r3, #8
 80065f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f6:	e853 3f00 	ldrex	r3, [r3]
 80065fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80065fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fe:	f043 0301 	orr.w	r3, r3, #1
 8006602:	653b      	str	r3, [r7, #80]	; 0x50
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	3308      	adds	r3, #8
 800660a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800660c:	637a      	str	r2, [r7, #52]	; 0x34
 800660e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006610:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006612:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006614:	e841 2300 	strex	r3, r2, [r1]
 8006618:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800661a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800661c:	2b00      	cmp	r3, #0
 800661e:	d1e5      	bne.n	80065ec <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	3308      	adds	r3, #8
 8006626:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	e853 3f00 	ldrex	r3, [r3]
 800662e:	613b      	str	r3, [r7, #16]
   return(result);
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006636:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	3308      	adds	r3, #8
 800663e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006640:	623a      	str	r2, [r7, #32]
 8006642:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006644:	69f9      	ldr	r1, [r7, #28]
 8006646:	6a3a      	ldr	r2, [r7, #32]
 8006648:	e841 2300 	strex	r3, r2, [r1]
 800664c:	61bb      	str	r3, [r7, #24]
   return(result);
 800664e:	69bb      	ldr	r3, [r7, #24]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d1e5      	bne.n	8006620 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8006654:	2300      	movs	r3, #0
}
 8006656:	4618      	mov	r0, r3
 8006658:	3758      	adds	r7, #88	; 0x58
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}
 800665e:	bf00      	nop
 8006660:	08006781 	.word	0x08006781
 8006664:	080068ad 	.word	0x080068ad
 8006668:	080068eb 	.word	0x080068eb

0800666c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800666c:	b480      	push	{r7}
 800666e:	b089      	sub	sp, #36	; 0x24
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	e853 3f00 	ldrex	r3, [r3]
 8006680:	60bb      	str	r3, [r7, #8]
   return(result);
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006688:	61fb      	str	r3, [r7, #28]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	461a      	mov	r2, r3
 8006690:	69fb      	ldr	r3, [r7, #28]
 8006692:	61bb      	str	r3, [r7, #24]
 8006694:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006696:	6979      	ldr	r1, [r7, #20]
 8006698:	69ba      	ldr	r2, [r7, #24]
 800669a:	e841 2300 	strex	r3, r2, [r1]
 800669e:	613b      	str	r3, [r7, #16]
   return(result);
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d1e6      	bne.n	8006674 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2220      	movs	r2, #32
 80066aa:	67da      	str	r2, [r3, #124]	; 0x7c
}
 80066ac:	bf00      	nop
 80066ae:	3724      	adds	r7, #36	; 0x24
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr

080066b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b095      	sub	sp, #84	; 0x54
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066c8:	e853 3f00 	ldrex	r3, [r3]
 80066cc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80066ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80066d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	461a      	mov	r2, r3
 80066dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066de:	643b      	str	r3, [r7, #64]	; 0x40
 80066e0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80066e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80066e6:	e841 2300 	strex	r3, r2, [r1]
 80066ea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80066ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d1e6      	bne.n	80066c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	3308      	adds	r3, #8
 80066f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066fa:	6a3b      	ldr	r3, [r7, #32]
 80066fc:	e853 3f00 	ldrex	r3, [r3]
 8006700:	61fb      	str	r3, [r7, #28]
   return(result);
 8006702:	69fb      	ldr	r3, [r7, #28]
 8006704:	f023 0301 	bic.w	r3, r3, #1
 8006708:	64bb      	str	r3, [r7, #72]	; 0x48
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	3308      	adds	r3, #8
 8006710:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006712:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006714:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006716:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006718:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800671a:	e841 2300 	strex	r3, r2, [r1]
 800671e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006722:	2b00      	cmp	r3, #0
 8006724:	d1e5      	bne.n	80066f2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800672a:	2b01      	cmp	r3, #1
 800672c:	d118      	bne.n	8006760 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	e853 3f00 	ldrex	r3, [r3]
 800673a:	60bb      	str	r3, [r7, #8]
   return(result);
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	f023 0310 	bic.w	r3, r3, #16
 8006742:	647b      	str	r3, [r7, #68]	; 0x44
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	461a      	mov	r2, r3
 800674a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800674c:	61bb      	str	r3, [r7, #24]
 800674e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006750:	6979      	ldr	r1, [r7, #20]
 8006752:	69ba      	ldr	r2, [r7, #24]
 8006754:	e841 2300 	strex	r3, r2, [r1]
 8006758:	613b      	str	r3, [r7, #16]
   return(result);
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d1e6      	bne.n	800672e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2220      	movs	r2, #32
 8006764:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2200      	movs	r2, #0
 800676c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2200      	movs	r2, #0
 8006772:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006774:	bf00      	nop
 8006776:	3754      	adds	r7, #84	; 0x54
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr

08006780 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b09c      	sub	sp, #112	; 0x70
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800678c:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f003 0320 	and.w	r3, r3, #32
 8006798:	2b00      	cmp	r3, #0
 800679a:	d171      	bne.n	8006880 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800679c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800679e:	2200      	movs	r2, #0
 80067a0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80067a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067ac:	e853 3f00 	ldrex	r3, [r3]
 80067b0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80067b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80067ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	461a      	mov	r2, r3
 80067c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80067c2:	65bb      	str	r3, [r7, #88]	; 0x58
 80067c4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80067c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80067ca:	e841 2300 	strex	r3, r2, [r1]
 80067ce:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80067d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d1e6      	bne.n	80067a4 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	3308      	adds	r3, #8
 80067dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067e0:	e853 3f00 	ldrex	r3, [r3]
 80067e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80067e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067e8:	f023 0301 	bic.w	r3, r3, #1
 80067ec:	667b      	str	r3, [r7, #100]	; 0x64
 80067ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	3308      	adds	r3, #8
 80067f4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80067f6:	647a      	str	r2, [r7, #68]	; 0x44
 80067f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80067fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80067fe:	e841 2300 	strex	r3, r2, [r1]
 8006802:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006804:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006806:	2b00      	cmp	r3, #0
 8006808:	d1e5      	bne.n	80067d6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800680a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	3308      	adds	r3, #8
 8006810:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006814:	e853 3f00 	ldrex	r3, [r3]
 8006818:	623b      	str	r3, [r7, #32]
   return(result);
 800681a:	6a3b      	ldr	r3, [r7, #32]
 800681c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006820:	663b      	str	r3, [r7, #96]	; 0x60
 8006822:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	3308      	adds	r3, #8
 8006828:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800682a:	633a      	str	r2, [r7, #48]	; 0x30
 800682c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800682e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006830:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006832:	e841 2300 	strex	r3, r2, [r1]
 8006836:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800683a:	2b00      	cmp	r3, #0
 800683c:	d1e5      	bne.n	800680a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800683e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006840:	2220      	movs	r2, #32
 8006842:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006846:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006848:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800684a:	2b01      	cmp	r3, #1
 800684c:	d118      	bne.n	8006880 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800684e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	e853 3f00 	ldrex	r3, [r3]
 800685a:	60fb      	str	r3, [r7, #12]
   return(result);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f023 0310 	bic.w	r3, r3, #16
 8006862:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006864:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	461a      	mov	r2, r3
 800686a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800686c:	61fb      	str	r3, [r7, #28]
 800686e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006870:	69b9      	ldr	r1, [r7, #24]
 8006872:	69fa      	ldr	r2, [r7, #28]
 8006874:	e841 2300 	strex	r3, r2, [r1]
 8006878:	617b      	str	r3, [r7, #20]
   return(result);
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d1e6      	bne.n	800684e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006880:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006882:	2200      	movs	r2, #0
 8006884:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006886:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006888:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800688a:	2b01      	cmp	r3, #1
 800688c:	d107      	bne.n	800689e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800688e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006890:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006894:	4619      	mov	r1, r3
 8006896:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006898:	f7ff f96a 	bl	8005b70 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800689c:	e002      	b.n	80068a4 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800689e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80068a0:	f7fb f902 	bl	8001aa8 <HAL_UART_RxCpltCallback>
}
 80068a4:	bf00      	nop
 80068a6:	3770      	adds	r7, #112	; 0x70
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}

080068ac <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b084      	sub	sp, #16
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068b8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2201      	movs	r2, #1
 80068be:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	d109      	bne.n	80068dc <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80068ce:	085b      	lsrs	r3, r3, #1
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	4619      	mov	r1, r3
 80068d4:	68f8      	ldr	r0, [r7, #12]
 80068d6:	f7ff f94b 	bl	8005b70 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80068da:	e002      	b.n	80068e2 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80068dc:	68f8      	ldr	r0, [r7, #12]
 80068de:	f7ff f933 	bl	8005b48 <HAL_UART_RxHalfCpltCallback>
}
 80068e2:	bf00      	nop
 80068e4:	3710      	adds	r7, #16
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}

080068ea <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80068ea:	b580      	push	{r7, lr}
 80068ec:	b086      	sub	sp, #24
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068f6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068fc:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006904:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006910:	2b80      	cmp	r3, #128	; 0x80
 8006912:	d109      	bne.n	8006928 <UART_DMAError+0x3e>
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	2b21      	cmp	r3, #33	; 0x21
 8006918:	d106      	bne.n	8006928 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	2200      	movs	r2, #0
 800691e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8006922:	6978      	ldr	r0, [r7, #20]
 8006924:	f7ff fea2 	bl	800666c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006932:	2b40      	cmp	r3, #64	; 0x40
 8006934:	d109      	bne.n	800694a <UART_DMAError+0x60>
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2b22      	cmp	r3, #34	; 0x22
 800693a:	d106      	bne.n	800694a <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	2200      	movs	r2, #0
 8006940:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8006944:	6978      	ldr	r0, [r7, #20]
 8006946:	f7ff feb7 	bl	80066b8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006950:	f043 0210 	orr.w	r2, r3, #16
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800695a:	6978      	ldr	r0, [r7, #20]
 800695c:	f7ff f8fe 	bl	8005b5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006960:	bf00      	nop
 8006962:	3718      	adds	r7, #24
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b084      	sub	sp, #16
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006974:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2200      	movs	r2, #0
 800697a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2200      	movs	r2, #0
 8006982:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006986:	68f8      	ldr	r0, [r7, #12]
 8006988:	f7ff f8e8 	bl	8005b5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800698c:	bf00      	nop
 800698e:	3710      	adds	r7, #16
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}

08006994 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b088      	sub	sp, #32
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	e853 3f00 	ldrex	r3, [r3]
 80069a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069b0:	61fb      	str	r3, [r7, #28]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	461a      	mov	r2, r3
 80069b8:	69fb      	ldr	r3, [r7, #28]
 80069ba:	61bb      	str	r3, [r7, #24]
 80069bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069be:	6979      	ldr	r1, [r7, #20]
 80069c0:	69ba      	ldr	r2, [r7, #24]
 80069c2:	e841 2300 	strex	r3, r2, [r1]
 80069c6:	613b      	str	r3, [r7, #16]
   return(result);
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d1e6      	bne.n	800699c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2220      	movs	r2, #32
 80069d2:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2200      	movs	r2, #0
 80069d8:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f7ff f8aa 	bl	8005b34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069e0:	bf00      	nop
 80069e2:	3720      	adds	r7, #32
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b09c      	sub	sp, #112	; 0x70
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80069f6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a00:	2b22      	cmp	r3, #34	; 0x22
 8006a02:	f040 80be 	bne.w	8006b82 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006a0c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006a10:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006a14:	b2d9      	uxtb	r1, r3
 8006a16:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006a1a:	b2da      	uxtb	r2, r3
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a20:	400a      	ands	r2, r1
 8006a22:	b2d2      	uxtb	r2, r2
 8006a24:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a2a:	1c5a      	adds	r2, r3, #1
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	3b01      	subs	r3, #1
 8006a3a:	b29a      	uxth	r2, r3
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	f040 80a3 	bne.w	8006b96 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a58:	e853 3f00 	ldrex	r3, [r3]
 8006a5c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006a5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a64:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	461a      	mov	r2, r3
 8006a6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006a6e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006a70:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a72:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006a74:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006a76:	e841 2300 	strex	r3, r2, [r1]
 8006a7a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006a7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d1e6      	bne.n	8006a50 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	3308      	adds	r3, #8
 8006a88:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a8c:	e853 3f00 	ldrex	r3, [r3]
 8006a90:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a94:	f023 0301 	bic.w	r3, r3, #1
 8006a98:	667b      	str	r3, [r7, #100]	; 0x64
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	3308      	adds	r3, #8
 8006aa0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006aa2:	647a      	str	r2, [r7, #68]	; 0x44
 8006aa4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006aa8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006aaa:	e841 2300 	strex	r3, r2, [r1]
 8006aae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006ab0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d1e5      	bne.n	8006a82 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2220      	movs	r2, #32
 8006aba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a34      	ldr	r2, [pc, #208]	; (8006ba0 <UART_RxISR_8BIT+0x1b8>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d01f      	beq.n	8006b14 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d018      	beq.n	8006b14 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aea:	e853 3f00 	ldrex	r3, [r3]
 8006aee:	623b      	str	r3, [r7, #32]
   return(result);
 8006af0:	6a3b      	ldr	r3, [r7, #32]
 8006af2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006af6:	663b      	str	r3, [r7, #96]	; 0x60
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	461a      	mov	r2, r3
 8006afe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b00:	633b      	str	r3, [r7, #48]	; 0x30
 8006b02:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b04:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b08:	e841 2300 	strex	r3, r2, [r1]
 8006b0c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d1e6      	bne.n	8006ae2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d12e      	bne.n	8006b7a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	e853 3f00 	ldrex	r3, [r3]
 8006b2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f023 0310 	bic.w	r3, r3, #16
 8006b36:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	461a      	mov	r2, r3
 8006b3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b40:	61fb      	str	r3, [r7, #28]
 8006b42:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b44:	69b9      	ldr	r1, [r7, #24]
 8006b46:	69fa      	ldr	r2, [r7, #28]
 8006b48:	e841 2300 	strex	r3, r2, [r1]
 8006b4c:	617b      	str	r3, [r7, #20]
   return(result);
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d1e6      	bne.n	8006b22 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	69db      	ldr	r3, [r3, #28]
 8006b5a:	f003 0310 	and.w	r3, r3, #16
 8006b5e:	2b10      	cmp	r3, #16
 8006b60:	d103      	bne.n	8006b6a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	2210      	movs	r2, #16
 8006b68:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006b70:	4619      	mov	r1, r3
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f7fe fffc 	bl	8005b70 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006b78:	e00d      	b.n	8006b96 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f7fa ff94 	bl	8001aa8 <HAL_UART_RxCpltCallback>
}
 8006b80:	e009      	b.n	8006b96 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	8b1b      	ldrh	r3, [r3, #24]
 8006b88:	b29a      	uxth	r2, r3
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f042 0208 	orr.w	r2, r2, #8
 8006b92:	b292      	uxth	r2, r2
 8006b94:	831a      	strh	r2, [r3, #24]
}
 8006b96:	bf00      	nop
 8006b98:	3770      	adds	r7, #112	; 0x70
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}
 8006b9e:	bf00      	nop
 8006ba0:	40008000 	.word	0x40008000

08006ba4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b09c      	sub	sp, #112	; 0x70
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006bb2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bbc:	2b22      	cmp	r3, #34	; 0x22
 8006bbe:	f040 80be 	bne.w	8006d3e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006bc8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bd0:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006bd2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8006bd6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006bda:	4013      	ands	r3, r2
 8006bdc:	b29a      	uxth	r2, r3
 8006bde:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006be0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006be6:	1c9a      	adds	r2, r3, #2
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	3b01      	subs	r3, #1
 8006bf6:	b29a      	uxth	r2, r3
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	f040 80a3 	bne.w	8006d52 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c14:	e853 3f00 	ldrex	r3, [r3]
 8006c18:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006c1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c20:	667b      	str	r3, [r7, #100]	; 0x64
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	461a      	mov	r2, r3
 8006c28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c2a:	657b      	str	r3, [r7, #84]	; 0x54
 8006c2c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c2e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006c30:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006c32:	e841 2300 	strex	r3, r2, [r1]
 8006c36:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006c38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d1e6      	bne.n	8006c0c <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	3308      	adds	r3, #8
 8006c44:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c48:	e853 3f00 	ldrex	r3, [r3]
 8006c4c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c50:	f023 0301 	bic.w	r3, r3, #1
 8006c54:	663b      	str	r3, [r7, #96]	; 0x60
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	3308      	adds	r3, #8
 8006c5c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006c5e:	643a      	str	r2, [r7, #64]	; 0x40
 8006c60:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c62:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006c64:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c66:	e841 2300 	strex	r3, r2, [r1]
 8006c6a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d1e5      	bne.n	8006c3e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2220      	movs	r2, #32
 8006c76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a34      	ldr	r2, [pc, #208]	; (8006d5c <UART_RxISR_16BIT+0x1b8>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d01f      	beq.n	8006cd0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d018      	beq.n	8006cd0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca4:	6a3b      	ldr	r3, [r7, #32]
 8006ca6:	e853 3f00 	ldrex	r3, [r3]
 8006caa:	61fb      	str	r3, [r7, #28]
   return(result);
 8006cac:	69fb      	ldr	r3, [r7, #28]
 8006cae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006cb2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	461a      	mov	r2, r3
 8006cba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006cbe:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006cc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cc4:	e841 2300 	strex	r3, r2, [r1]
 8006cc8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d1e6      	bne.n	8006c9e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d12e      	bne.n	8006d36 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	e853 3f00 	ldrex	r3, [r3]
 8006cea:	60bb      	str	r3, [r7, #8]
   return(result);
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	f023 0310 	bic.w	r3, r3, #16
 8006cf2:	65bb      	str	r3, [r7, #88]	; 0x58
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006cfc:	61bb      	str	r3, [r7, #24]
 8006cfe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d00:	6979      	ldr	r1, [r7, #20]
 8006d02:	69ba      	ldr	r2, [r7, #24]
 8006d04:	e841 2300 	strex	r3, r2, [r1]
 8006d08:	613b      	str	r3, [r7, #16]
   return(result);
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d1e6      	bne.n	8006cde <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	69db      	ldr	r3, [r3, #28]
 8006d16:	f003 0310 	and.w	r3, r3, #16
 8006d1a:	2b10      	cmp	r3, #16
 8006d1c:	d103      	bne.n	8006d26 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	2210      	movs	r2, #16
 8006d24:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006d2c:	4619      	mov	r1, r3
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f7fe ff1e 	bl	8005b70 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006d34:	e00d      	b.n	8006d52 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f7fa feb6 	bl	8001aa8 <HAL_UART_RxCpltCallback>
}
 8006d3c:	e009      	b.n	8006d52 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	8b1b      	ldrh	r3, [r3, #24]
 8006d44:	b29a      	uxth	r2, r3
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f042 0208 	orr.w	r2, r2, #8
 8006d4e:	b292      	uxth	r2, r2
 8006d50:	831a      	strh	r2, [r3, #24]
}
 8006d52:	bf00      	nop
 8006d54:	3770      	adds	r7, #112	; 0x70
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}
 8006d5a:	bf00      	nop
 8006d5c:	40008000 	.word	0x40008000

08006d60 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b083      	sub	sp, #12
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006d68:	bf00      	nop
 8006d6a:	370c      	adds	r7, #12
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr

08006d74 <__NVIC_SetPriority>:
{
 8006d74:	b480      	push	{r7}
 8006d76:	b083      	sub	sp, #12
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	6039      	str	r1, [r7, #0]
 8006d7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	db0a      	blt.n	8006d9e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	b2da      	uxtb	r2, r3
 8006d8c:	490c      	ldr	r1, [pc, #48]	; (8006dc0 <__NVIC_SetPriority+0x4c>)
 8006d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d92:	0112      	lsls	r2, r2, #4
 8006d94:	b2d2      	uxtb	r2, r2
 8006d96:	440b      	add	r3, r1
 8006d98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006d9c:	e00a      	b.n	8006db4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	b2da      	uxtb	r2, r3
 8006da2:	4908      	ldr	r1, [pc, #32]	; (8006dc4 <__NVIC_SetPriority+0x50>)
 8006da4:	79fb      	ldrb	r3, [r7, #7]
 8006da6:	f003 030f 	and.w	r3, r3, #15
 8006daa:	3b04      	subs	r3, #4
 8006dac:	0112      	lsls	r2, r2, #4
 8006dae:	b2d2      	uxtb	r2, r2
 8006db0:	440b      	add	r3, r1
 8006db2:	761a      	strb	r2, [r3, #24]
}
 8006db4:	bf00      	nop
 8006db6:	370c      	adds	r7, #12
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr
 8006dc0:	e000e100 	.word	0xe000e100
 8006dc4:	e000ed00 	.word	0xe000ed00

08006dc8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006dcc:	4b05      	ldr	r3, [pc, #20]	; (8006de4 <SysTick_Handler+0x1c>)
 8006dce:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006dd0:	f001 feee 	bl	8008bb0 <xTaskGetSchedulerState>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	d001      	beq.n	8006dde <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006dda:	f002 fcd5 	bl	8009788 <xPortSysTickHandler>
  }
}
 8006dde:	bf00      	nop
 8006de0:	bd80      	pop	{r7, pc}
 8006de2:	bf00      	nop
 8006de4:	e000e010 	.word	0xe000e010

08006de8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006de8:	b580      	push	{r7, lr}
 8006dea:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006dec:	2100      	movs	r1, #0
 8006dee:	f06f 0004 	mvn.w	r0, #4
 8006df2:	f7ff ffbf 	bl	8006d74 <__NVIC_SetPriority>
#endif
}
 8006df6:	bf00      	nop
 8006df8:	bd80      	pop	{r7, pc}
	...

08006dfc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006dfc:	b480      	push	{r7}
 8006dfe:	b083      	sub	sp, #12
 8006e00:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e02:	f3ef 8305 	mrs	r3, IPSR
 8006e06:	603b      	str	r3, [r7, #0]
  return(result);
 8006e08:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d003      	beq.n	8006e16 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006e0e:	f06f 0305 	mvn.w	r3, #5
 8006e12:	607b      	str	r3, [r7, #4]
 8006e14:	e00c      	b.n	8006e30 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006e16:	4b0a      	ldr	r3, [pc, #40]	; (8006e40 <osKernelInitialize+0x44>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d105      	bne.n	8006e2a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006e1e:	4b08      	ldr	r3, [pc, #32]	; (8006e40 <osKernelInitialize+0x44>)
 8006e20:	2201      	movs	r2, #1
 8006e22:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006e24:	2300      	movs	r3, #0
 8006e26:	607b      	str	r3, [r7, #4]
 8006e28:	e002      	b.n	8006e30 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006e2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006e2e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006e30:	687b      	ldr	r3, [r7, #4]
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	370c      	adds	r7, #12
 8006e36:	46bd      	mov	sp, r7
 8006e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3c:	4770      	bx	lr
 8006e3e:	bf00      	nop
 8006e40:	20000468 	.word	0x20000468

08006e44 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b082      	sub	sp, #8
 8006e48:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e4a:	f3ef 8305 	mrs	r3, IPSR
 8006e4e:	603b      	str	r3, [r7, #0]
  return(result);
 8006e50:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d003      	beq.n	8006e5e <osKernelStart+0x1a>
    stat = osErrorISR;
 8006e56:	f06f 0305 	mvn.w	r3, #5
 8006e5a:	607b      	str	r3, [r7, #4]
 8006e5c:	e010      	b.n	8006e80 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006e5e:	4b0b      	ldr	r3, [pc, #44]	; (8006e8c <osKernelStart+0x48>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	2b01      	cmp	r3, #1
 8006e64:	d109      	bne.n	8006e7a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006e66:	f7ff ffbf 	bl	8006de8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006e6a:	4b08      	ldr	r3, [pc, #32]	; (8006e8c <osKernelStart+0x48>)
 8006e6c:	2202      	movs	r2, #2
 8006e6e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006e70:	f001 fa42 	bl	80082f8 <vTaskStartScheduler>
      stat = osOK;
 8006e74:	2300      	movs	r3, #0
 8006e76:	607b      	str	r3, [r7, #4]
 8006e78:	e002      	b.n	8006e80 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006e7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006e7e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006e80:	687b      	ldr	r3, [r7, #4]
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3708      	adds	r7, #8
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}
 8006e8a:	bf00      	nop
 8006e8c:	20000468 	.word	0x20000468

08006e90 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b08e      	sub	sp, #56	; 0x38
 8006e94:	af04      	add	r7, sp, #16
 8006e96:	60f8      	str	r0, [r7, #12]
 8006e98:	60b9      	str	r1, [r7, #8]
 8006e9a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ea0:	f3ef 8305 	mrs	r3, IPSR
 8006ea4:	617b      	str	r3, [r7, #20]
  return(result);
 8006ea6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d17e      	bne.n	8006faa <osThreadNew+0x11a>
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d07b      	beq.n	8006faa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006eb2:	2380      	movs	r3, #128	; 0x80
 8006eb4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006eb6:	2318      	movs	r3, #24
 8006eb8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006ebe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006ec2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d045      	beq.n	8006f56 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d002      	beq.n	8006ed8 <osThreadNew+0x48>
        name = attr->name;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	699b      	ldr	r3, [r3, #24]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d002      	beq.n	8006ee6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	699b      	ldr	r3, [r3, #24]
 8006ee4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006ee6:	69fb      	ldr	r3, [r7, #28]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d008      	beq.n	8006efe <osThreadNew+0x6e>
 8006eec:	69fb      	ldr	r3, [r7, #28]
 8006eee:	2b38      	cmp	r3, #56	; 0x38
 8006ef0:	d805      	bhi.n	8006efe <osThreadNew+0x6e>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	f003 0301 	and.w	r3, r3, #1
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d001      	beq.n	8006f02 <osThreadNew+0x72>
        return (NULL);
 8006efe:	2300      	movs	r3, #0
 8006f00:	e054      	b.n	8006fac <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	695b      	ldr	r3, [r3, #20]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d003      	beq.n	8006f12 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	695b      	ldr	r3, [r3, #20]
 8006f0e:	089b      	lsrs	r3, r3, #2
 8006f10:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d00e      	beq.n	8006f38 <osThreadNew+0xa8>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	68db      	ldr	r3, [r3, #12]
 8006f1e:	2ba7      	cmp	r3, #167	; 0xa7
 8006f20:	d90a      	bls.n	8006f38 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d006      	beq.n	8006f38 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	695b      	ldr	r3, [r3, #20]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d002      	beq.n	8006f38 <osThreadNew+0xa8>
        mem = 1;
 8006f32:	2301      	movs	r3, #1
 8006f34:	61bb      	str	r3, [r7, #24]
 8006f36:	e010      	b.n	8006f5a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	689b      	ldr	r3, [r3, #8]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d10c      	bne.n	8006f5a <osThreadNew+0xca>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	68db      	ldr	r3, [r3, #12]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d108      	bne.n	8006f5a <osThreadNew+0xca>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	691b      	ldr	r3, [r3, #16]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d104      	bne.n	8006f5a <osThreadNew+0xca>
          mem = 0;
 8006f50:	2300      	movs	r3, #0
 8006f52:	61bb      	str	r3, [r7, #24]
 8006f54:	e001      	b.n	8006f5a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006f56:	2300      	movs	r3, #0
 8006f58:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006f5a:	69bb      	ldr	r3, [r7, #24]
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d110      	bne.n	8006f82 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006f64:	687a      	ldr	r2, [r7, #4]
 8006f66:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006f68:	9202      	str	r2, [sp, #8]
 8006f6a:	9301      	str	r3, [sp, #4]
 8006f6c:	69fb      	ldr	r3, [r7, #28]
 8006f6e:	9300      	str	r3, [sp, #0]
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	6a3a      	ldr	r2, [r7, #32]
 8006f74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006f76:	68f8      	ldr	r0, [r7, #12]
 8006f78:	f000 feb8 	bl	8007cec <xTaskCreateStatic>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	613b      	str	r3, [r7, #16]
 8006f80:	e013      	b.n	8006faa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006f82:	69bb      	ldr	r3, [r7, #24]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d110      	bne.n	8006faa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006f88:	6a3b      	ldr	r3, [r7, #32]
 8006f8a:	b29a      	uxth	r2, r3
 8006f8c:	f107 0310 	add.w	r3, r7, #16
 8006f90:	9301      	str	r3, [sp, #4]
 8006f92:	69fb      	ldr	r3, [r7, #28]
 8006f94:	9300      	str	r3, [sp, #0]
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006f9a:	68f8      	ldr	r0, [r7, #12]
 8006f9c:	f000 ff03 	bl	8007da6 <xTaskCreate>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	d001      	beq.n	8006faa <osThreadNew+0x11a>
            hTask = NULL;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006faa:	693b      	ldr	r3, [r7, #16]
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3728      	adds	r7, #40	; 0x28
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}

08006fb4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b084      	sub	sp, #16
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006fbc:	f3ef 8305 	mrs	r3, IPSR
 8006fc0:	60bb      	str	r3, [r7, #8]
  return(result);
 8006fc2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d003      	beq.n	8006fd0 <osDelay+0x1c>
    stat = osErrorISR;
 8006fc8:	f06f 0305 	mvn.w	r3, #5
 8006fcc:	60fb      	str	r3, [r7, #12]
 8006fce:	e007      	b.n	8006fe0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d002      	beq.n	8006fe0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f001 f83e 	bl	800805c <vTaskDelay>
    }
  }

  return (stat);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3710      	adds	r7, #16
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}

08006fea <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006fea:	b580      	push	{r7, lr}
 8006fec:	b08a      	sub	sp, #40	; 0x28
 8006fee:	af02      	add	r7, sp, #8
 8006ff0:	60f8      	str	r0, [r7, #12]
 8006ff2:	60b9      	str	r1, [r7, #8]
 8006ff4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ffa:	f3ef 8305 	mrs	r3, IPSR
 8006ffe:	613b      	str	r3, [r7, #16]
  return(result);
 8007000:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007002:	2b00      	cmp	r3, #0
 8007004:	d15f      	bne.n	80070c6 <osMessageQueueNew+0xdc>
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d05c      	beq.n	80070c6 <osMessageQueueNew+0xdc>
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d059      	beq.n	80070c6 <osMessageQueueNew+0xdc>
    mem = -1;
 8007012:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007016:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d029      	beq.n	8007072 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	689b      	ldr	r3, [r3, #8]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d012      	beq.n	800704c <osMessageQueueNew+0x62>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	68db      	ldr	r3, [r3, #12]
 800702a:	2b4f      	cmp	r3, #79	; 0x4f
 800702c:	d90e      	bls.n	800704c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007032:	2b00      	cmp	r3, #0
 8007034:	d00a      	beq.n	800704c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	695a      	ldr	r2, [r3, #20]
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	68b9      	ldr	r1, [r7, #8]
 800703e:	fb01 f303 	mul.w	r3, r1, r3
 8007042:	429a      	cmp	r2, r3
 8007044:	d302      	bcc.n	800704c <osMessageQueueNew+0x62>
        mem = 1;
 8007046:	2301      	movs	r3, #1
 8007048:	61bb      	str	r3, [r7, #24]
 800704a:	e014      	b.n	8007076 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d110      	bne.n	8007076 <osMessageQueueNew+0x8c>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	68db      	ldr	r3, [r3, #12]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d10c      	bne.n	8007076 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007060:	2b00      	cmp	r3, #0
 8007062:	d108      	bne.n	8007076 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	695b      	ldr	r3, [r3, #20]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d104      	bne.n	8007076 <osMessageQueueNew+0x8c>
          mem = 0;
 800706c:	2300      	movs	r3, #0
 800706e:	61bb      	str	r3, [r7, #24]
 8007070:	e001      	b.n	8007076 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8007072:	2300      	movs	r3, #0
 8007074:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007076:	69bb      	ldr	r3, [r7, #24]
 8007078:	2b01      	cmp	r3, #1
 800707a:	d10b      	bne.n	8007094 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	691a      	ldr	r2, [r3, #16]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	2100      	movs	r1, #0
 8007086:	9100      	str	r1, [sp, #0]
 8007088:	68b9      	ldr	r1, [r7, #8]
 800708a:	68f8      	ldr	r0, [r7, #12]
 800708c:	f000 f970 	bl	8007370 <xQueueGenericCreateStatic>
 8007090:	61f8      	str	r0, [r7, #28]
 8007092:	e008      	b.n	80070a6 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8007094:	69bb      	ldr	r3, [r7, #24]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d105      	bne.n	80070a6 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800709a:	2200      	movs	r2, #0
 800709c:	68b9      	ldr	r1, [r7, #8]
 800709e:	68f8      	ldr	r0, [r7, #12]
 80070a0:	f000 f9de 	bl	8007460 <xQueueGenericCreate>
 80070a4:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80070a6:	69fb      	ldr	r3, [r7, #28]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d00c      	beq.n	80070c6 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d003      	beq.n	80070ba <osMessageQueueNew+0xd0>
        name = attr->name;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	617b      	str	r3, [r7, #20]
 80070b8:	e001      	b.n	80070be <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80070ba:	2300      	movs	r3, #0
 80070bc:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80070be:	6979      	ldr	r1, [r7, #20]
 80070c0:	69f8      	ldr	r0, [r7, #28]
 80070c2:	f000 fdb5 	bl	8007c30 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80070c6:	69fb      	ldr	r3, [r7, #28]
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3720      	adds	r7, #32
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}

080070d0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80070d0:	b480      	push	{r7}
 80070d2:	b085      	sub	sp, #20
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	60f8      	str	r0, [r7, #12]
 80070d8:	60b9      	str	r1, [r7, #8]
 80070da:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	4a07      	ldr	r2, [pc, #28]	; (80070fc <vApplicationGetIdleTaskMemory+0x2c>)
 80070e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	4a06      	ldr	r2, [pc, #24]	; (8007100 <vApplicationGetIdleTaskMemory+0x30>)
 80070e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2280      	movs	r2, #128	; 0x80
 80070ec:	601a      	str	r2, [r3, #0]
}
 80070ee:	bf00      	nop
 80070f0:	3714      	adds	r7, #20
 80070f2:	46bd      	mov	sp, r7
 80070f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f8:	4770      	bx	lr
 80070fa:	bf00      	nop
 80070fc:	2000046c 	.word	0x2000046c
 8007100:	20000514 	.word	0x20000514

08007104 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007104:	b480      	push	{r7}
 8007106:	b085      	sub	sp, #20
 8007108:	af00      	add	r7, sp, #0
 800710a:	60f8      	str	r0, [r7, #12]
 800710c:	60b9      	str	r1, [r7, #8]
 800710e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	4a07      	ldr	r2, [pc, #28]	; (8007130 <vApplicationGetTimerTaskMemory+0x2c>)
 8007114:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	4a06      	ldr	r2, [pc, #24]	; (8007134 <vApplicationGetTimerTaskMemory+0x30>)
 800711a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007122:	601a      	str	r2, [r3, #0]
}
 8007124:	bf00      	nop
 8007126:	3714      	adds	r7, #20
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr
 8007130:	20000714 	.word	0x20000714
 8007134:	200007bc 	.word	0x200007bc

08007138 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007138:	b480      	push	{r7}
 800713a:	b083      	sub	sp, #12
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f103 0208 	add.w	r2, r3, #8
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007150:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f103 0208 	add.w	r2, r3, #8
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f103 0208 	add.w	r2, r3, #8
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2200      	movs	r2, #0
 800716a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800716c:	bf00      	nop
 800716e:	370c      	adds	r7, #12
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr

08007178 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007178:	b480      	push	{r7}
 800717a:	b083      	sub	sp, #12
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2200      	movs	r2, #0
 8007184:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007186:	bf00      	nop
 8007188:	370c      	adds	r7, #12
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr

08007192 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007192:	b480      	push	{r7}
 8007194:	b085      	sub	sp, #20
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]
 800719a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	68fa      	ldr	r2, [r7, #12]
 80071a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	689a      	ldr	r2, [r3, #8]
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	683a      	ldr	r2, [r7, #0]
 80071b6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	683a      	ldr	r2, [r7, #0]
 80071bc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	687a      	ldr	r2, [r7, #4]
 80071c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	1c5a      	adds	r2, r3, #1
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	601a      	str	r2, [r3, #0]
}
 80071ce:	bf00      	nop
 80071d0:	3714      	adds	r7, #20
 80071d2:	46bd      	mov	sp, r7
 80071d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d8:	4770      	bx	lr

080071da <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80071da:	b480      	push	{r7}
 80071dc:	b085      	sub	sp, #20
 80071de:	af00      	add	r7, sp, #0
 80071e0:	6078      	str	r0, [r7, #4]
 80071e2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071f0:	d103      	bne.n	80071fa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	691b      	ldr	r3, [r3, #16]
 80071f6:	60fb      	str	r3, [r7, #12]
 80071f8:	e00c      	b.n	8007214 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	3308      	adds	r3, #8
 80071fe:	60fb      	str	r3, [r7, #12]
 8007200:	e002      	b.n	8007208 <vListInsert+0x2e>
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	60fb      	str	r3, [r7, #12]
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	68ba      	ldr	r2, [r7, #8]
 8007210:	429a      	cmp	r2, r3
 8007212:	d2f6      	bcs.n	8007202 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	685a      	ldr	r2, [r3, #4]
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	683a      	ldr	r2, [r7, #0]
 8007222:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	68fa      	ldr	r2, [r7, #12]
 8007228:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	683a      	ldr	r2, [r7, #0]
 800722e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	687a      	ldr	r2, [r7, #4]
 8007234:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	1c5a      	adds	r2, r3, #1
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	601a      	str	r2, [r3, #0]
}
 8007240:	bf00      	nop
 8007242:	3714      	adds	r7, #20
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr

0800724c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800724c:	b480      	push	{r7}
 800724e:	b085      	sub	sp, #20
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	691b      	ldr	r3, [r3, #16]
 8007258:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	6892      	ldr	r2, [r2, #8]
 8007262:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	6852      	ldr	r2, [r2, #4]
 800726c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	687a      	ldr	r2, [r7, #4]
 8007274:	429a      	cmp	r2, r3
 8007276:	d103      	bne.n	8007280 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	689a      	ldr	r2, [r3, #8]
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2200      	movs	r2, #0
 8007284:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	1e5a      	subs	r2, r3, #1
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
}
 8007294:	4618      	mov	r0, r3
 8007296:	3714      	adds	r7, #20
 8007298:	46bd      	mov	sp, r7
 800729a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729e:	4770      	bx	lr

080072a0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b084      	sub	sp, #16
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d10a      	bne.n	80072ca <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80072b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072b8:	f383 8811 	msr	BASEPRI, r3
 80072bc:	f3bf 8f6f 	isb	sy
 80072c0:	f3bf 8f4f 	dsb	sy
 80072c4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80072c6:	bf00      	nop
 80072c8:	e7fe      	b.n	80072c8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80072ca:	f002 f9cb 	bl	8009664 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681a      	ldr	r2, [r3, #0]
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072d6:	68f9      	ldr	r1, [r7, #12]
 80072d8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80072da:	fb01 f303 	mul.w	r3, r1, r3
 80072de:	441a      	add	r2, r3
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2200      	movs	r2, #0
 80072e8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681a      	ldr	r2, [r3, #0]
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681a      	ldr	r2, [r3, #0]
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072fa:	3b01      	subs	r3, #1
 80072fc:	68f9      	ldr	r1, [r7, #12]
 80072fe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007300:	fb01 f303 	mul.w	r3, r1, r3
 8007304:	441a      	add	r2, r3
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	22ff      	movs	r2, #255	; 0xff
 800730e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	22ff      	movs	r2, #255	; 0xff
 8007316:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d114      	bne.n	800734a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	691b      	ldr	r3, [r3, #16]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d01a      	beq.n	800735e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	3310      	adds	r3, #16
 800732c:	4618      	mov	r0, r3
 800732e:	f001 fa7d 	bl	800882c <xTaskRemoveFromEventList>
 8007332:	4603      	mov	r3, r0
 8007334:	2b00      	cmp	r3, #0
 8007336:	d012      	beq.n	800735e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007338:	4b0c      	ldr	r3, [pc, #48]	; (800736c <xQueueGenericReset+0xcc>)
 800733a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800733e:	601a      	str	r2, [r3, #0]
 8007340:	f3bf 8f4f 	dsb	sy
 8007344:	f3bf 8f6f 	isb	sy
 8007348:	e009      	b.n	800735e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	3310      	adds	r3, #16
 800734e:	4618      	mov	r0, r3
 8007350:	f7ff fef2 	bl	8007138 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	3324      	adds	r3, #36	; 0x24
 8007358:	4618      	mov	r0, r3
 800735a:	f7ff feed 	bl	8007138 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800735e:	f002 f9b1 	bl	80096c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007362:	2301      	movs	r3, #1
}
 8007364:	4618      	mov	r0, r3
 8007366:	3710      	adds	r7, #16
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}
 800736c:	e000ed04 	.word	0xe000ed04

08007370 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007370:	b580      	push	{r7, lr}
 8007372:	b08e      	sub	sp, #56	; 0x38
 8007374:	af02      	add	r7, sp, #8
 8007376:	60f8      	str	r0, [r7, #12]
 8007378:	60b9      	str	r1, [r7, #8]
 800737a:	607a      	str	r2, [r7, #4]
 800737c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d10a      	bne.n	800739a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007388:	f383 8811 	msr	BASEPRI, r3
 800738c:	f3bf 8f6f 	isb	sy
 8007390:	f3bf 8f4f 	dsb	sy
 8007394:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007396:	bf00      	nop
 8007398:	e7fe      	b.n	8007398 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d10a      	bne.n	80073b6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80073a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a4:	f383 8811 	msr	BASEPRI, r3
 80073a8:	f3bf 8f6f 	isb	sy
 80073ac:	f3bf 8f4f 	dsb	sy
 80073b0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80073b2:	bf00      	nop
 80073b4:	e7fe      	b.n	80073b4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d002      	beq.n	80073c2 <xQueueGenericCreateStatic+0x52>
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d001      	beq.n	80073c6 <xQueueGenericCreateStatic+0x56>
 80073c2:	2301      	movs	r3, #1
 80073c4:	e000      	b.n	80073c8 <xQueueGenericCreateStatic+0x58>
 80073c6:	2300      	movs	r3, #0
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d10a      	bne.n	80073e2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80073cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d0:	f383 8811 	msr	BASEPRI, r3
 80073d4:	f3bf 8f6f 	isb	sy
 80073d8:	f3bf 8f4f 	dsb	sy
 80073dc:	623b      	str	r3, [r7, #32]
}
 80073de:	bf00      	nop
 80073e0:	e7fe      	b.n	80073e0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d102      	bne.n	80073ee <xQueueGenericCreateStatic+0x7e>
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d101      	bne.n	80073f2 <xQueueGenericCreateStatic+0x82>
 80073ee:	2301      	movs	r3, #1
 80073f0:	e000      	b.n	80073f4 <xQueueGenericCreateStatic+0x84>
 80073f2:	2300      	movs	r3, #0
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d10a      	bne.n	800740e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80073f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073fc:	f383 8811 	msr	BASEPRI, r3
 8007400:	f3bf 8f6f 	isb	sy
 8007404:	f3bf 8f4f 	dsb	sy
 8007408:	61fb      	str	r3, [r7, #28]
}
 800740a:	bf00      	nop
 800740c:	e7fe      	b.n	800740c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800740e:	2350      	movs	r3, #80	; 0x50
 8007410:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	2b50      	cmp	r3, #80	; 0x50
 8007416:	d00a      	beq.n	800742e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800741c:	f383 8811 	msr	BASEPRI, r3
 8007420:	f3bf 8f6f 	isb	sy
 8007424:	f3bf 8f4f 	dsb	sy
 8007428:	61bb      	str	r3, [r7, #24]
}
 800742a:	bf00      	nop
 800742c:	e7fe      	b.n	800742c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800742e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007436:	2b00      	cmp	r3, #0
 8007438:	d00d      	beq.n	8007456 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800743a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800743c:	2201      	movs	r2, #1
 800743e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007442:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007448:	9300      	str	r3, [sp, #0]
 800744a:	4613      	mov	r3, r2
 800744c:	687a      	ldr	r2, [r7, #4]
 800744e:	68b9      	ldr	r1, [r7, #8]
 8007450:	68f8      	ldr	r0, [r7, #12]
 8007452:	f000 f83f 	bl	80074d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007458:	4618      	mov	r0, r3
 800745a:	3730      	adds	r7, #48	; 0x30
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}

08007460 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007460:	b580      	push	{r7, lr}
 8007462:	b08a      	sub	sp, #40	; 0x28
 8007464:	af02      	add	r7, sp, #8
 8007466:	60f8      	str	r0, [r7, #12]
 8007468:	60b9      	str	r1, [r7, #8]
 800746a:	4613      	mov	r3, r2
 800746c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d10a      	bne.n	800748a <xQueueGenericCreate+0x2a>
	__asm volatile
 8007474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007478:	f383 8811 	msr	BASEPRI, r3
 800747c:	f3bf 8f6f 	isb	sy
 8007480:	f3bf 8f4f 	dsb	sy
 8007484:	613b      	str	r3, [r7, #16]
}
 8007486:	bf00      	nop
 8007488:	e7fe      	b.n	8007488 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	68ba      	ldr	r2, [r7, #8]
 800748e:	fb02 f303 	mul.w	r3, r2, r3
 8007492:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007494:	69fb      	ldr	r3, [r7, #28]
 8007496:	3350      	adds	r3, #80	; 0x50
 8007498:	4618      	mov	r0, r3
 800749a:	f002 fa05 	bl	80098a8 <pvPortMalloc>
 800749e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80074a0:	69bb      	ldr	r3, [r7, #24]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d011      	beq.n	80074ca <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80074a6:	69bb      	ldr	r3, [r7, #24]
 80074a8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	3350      	adds	r3, #80	; 0x50
 80074ae:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80074b0:	69bb      	ldr	r3, [r7, #24]
 80074b2:	2200      	movs	r2, #0
 80074b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80074b8:	79fa      	ldrb	r2, [r7, #7]
 80074ba:	69bb      	ldr	r3, [r7, #24]
 80074bc:	9300      	str	r3, [sp, #0]
 80074be:	4613      	mov	r3, r2
 80074c0:	697a      	ldr	r2, [r7, #20]
 80074c2:	68b9      	ldr	r1, [r7, #8]
 80074c4:	68f8      	ldr	r0, [r7, #12]
 80074c6:	f000 f805 	bl	80074d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80074ca:	69bb      	ldr	r3, [r7, #24]
	}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3720      	adds	r7, #32
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b084      	sub	sp, #16
 80074d8:	af00      	add	r7, sp, #0
 80074da:	60f8      	str	r0, [r7, #12]
 80074dc:	60b9      	str	r1, [r7, #8]
 80074de:	607a      	str	r2, [r7, #4]
 80074e0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d103      	bne.n	80074f0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80074e8:	69bb      	ldr	r3, [r7, #24]
 80074ea:	69ba      	ldr	r2, [r7, #24]
 80074ec:	601a      	str	r2, [r3, #0]
 80074ee:	e002      	b.n	80074f6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80074f0:	69bb      	ldr	r3, [r7, #24]
 80074f2:	687a      	ldr	r2, [r7, #4]
 80074f4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80074f6:	69bb      	ldr	r3, [r7, #24]
 80074f8:	68fa      	ldr	r2, [r7, #12]
 80074fa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80074fc:	69bb      	ldr	r3, [r7, #24]
 80074fe:	68ba      	ldr	r2, [r7, #8]
 8007500:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007502:	2101      	movs	r1, #1
 8007504:	69b8      	ldr	r0, [r7, #24]
 8007506:	f7ff fecb 	bl	80072a0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800750a:	69bb      	ldr	r3, [r7, #24]
 800750c:	78fa      	ldrb	r2, [r7, #3]
 800750e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007512:	bf00      	nop
 8007514:	3710      	adds	r7, #16
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}
	...

0800751c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b08e      	sub	sp, #56	; 0x38
 8007520:	af00      	add	r7, sp, #0
 8007522:	60f8      	str	r0, [r7, #12]
 8007524:	60b9      	str	r1, [r7, #8]
 8007526:	607a      	str	r2, [r7, #4]
 8007528:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800752a:	2300      	movs	r3, #0
 800752c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007534:	2b00      	cmp	r3, #0
 8007536:	d10a      	bne.n	800754e <xQueueGenericSend+0x32>
	__asm volatile
 8007538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800753c:	f383 8811 	msr	BASEPRI, r3
 8007540:	f3bf 8f6f 	isb	sy
 8007544:	f3bf 8f4f 	dsb	sy
 8007548:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800754a:	bf00      	nop
 800754c:	e7fe      	b.n	800754c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d103      	bne.n	800755c <xQueueGenericSend+0x40>
 8007554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007558:	2b00      	cmp	r3, #0
 800755a:	d101      	bne.n	8007560 <xQueueGenericSend+0x44>
 800755c:	2301      	movs	r3, #1
 800755e:	e000      	b.n	8007562 <xQueueGenericSend+0x46>
 8007560:	2300      	movs	r3, #0
 8007562:	2b00      	cmp	r3, #0
 8007564:	d10a      	bne.n	800757c <xQueueGenericSend+0x60>
	__asm volatile
 8007566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800756a:	f383 8811 	msr	BASEPRI, r3
 800756e:	f3bf 8f6f 	isb	sy
 8007572:	f3bf 8f4f 	dsb	sy
 8007576:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007578:	bf00      	nop
 800757a:	e7fe      	b.n	800757a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	2b02      	cmp	r3, #2
 8007580:	d103      	bne.n	800758a <xQueueGenericSend+0x6e>
 8007582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007586:	2b01      	cmp	r3, #1
 8007588:	d101      	bne.n	800758e <xQueueGenericSend+0x72>
 800758a:	2301      	movs	r3, #1
 800758c:	e000      	b.n	8007590 <xQueueGenericSend+0x74>
 800758e:	2300      	movs	r3, #0
 8007590:	2b00      	cmp	r3, #0
 8007592:	d10a      	bne.n	80075aa <xQueueGenericSend+0x8e>
	__asm volatile
 8007594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007598:	f383 8811 	msr	BASEPRI, r3
 800759c:	f3bf 8f6f 	isb	sy
 80075a0:	f3bf 8f4f 	dsb	sy
 80075a4:	623b      	str	r3, [r7, #32]
}
 80075a6:	bf00      	nop
 80075a8:	e7fe      	b.n	80075a8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80075aa:	f001 fb01 	bl	8008bb0 <xTaskGetSchedulerState>
 80075ae:	4603      	mov	r3, r0
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d102      	bne.n	80075ba <xQueueGenericSend+0x9e>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d101      	bne.n	80075be <xQueueGenericSend+0xa2>
 80075ba:	2301      	movs	r3, #1
 80075bc:	e000      	b.n	80075c0 <xQueueGenericSend+0xa4>
 80075be:	2300      	movs	r3, #0
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d10a      	bne.n	80075da <xQueueGenericSend+0xbe>
	__asm volatile
 80075c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c8:	f383 8811 	msr	BASEPRI, r3
 80075cc:	f3bf 8f6f 	isb	sy
 80075d0:	f3bf 8f4f 	dsb	sy
 80075d4:	61fb      	str	r3, [r7, #28]
}
 80075d6:	bf00      	nop
 80075d8:	e7fe      	b.n	80075d8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80075da:	f002 f843 	bl	8009664 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80075de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075e6:	429a      	cmp	r2, r3
 80075e8:	d302      	bcc.n	80075f0 <xQueueGenericSend+0xd4>
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	2b02      	cmp	r3, #2
 80075ee:	d129      	bne.n	8007644 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80075f0:	683a      	ldr	r2, [r7, #0]
 80075f2:	68b9      	ldr	r1, [r7, #8]
 80075f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075f6:	f000 fa0b 	bl	8007a10 <prvCopyDataToQueue>
 80075fa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80075fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007600:	2b00      	cmp	r3, #0
 8007602:	d010      	beq.n	8007626 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007606:	3324      	adds	r3, #36	; 0x24
 8007608:	4618      	mov	r0, r3
 800760a:	f001 f90f 	bl	800882c <xTaskRemoveFromEventList>
 800760e:	4603      	mov	r3, r0
 8007610:	2b00      	cmp	r3, #0
 8007612:	d013      	beq.n	800763c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007614:	4b3f      	ldr	r3, [pc, #252]	; (8007714 <xQueueGenericSend+0x1f8>)
 8007616:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800761a:	601a      	str	r2, [r3, #0]
 800761c:	f3bf 8f4f 	dsb	sy
 8007620:	f3bf 8f6f 	isb	sy
 8007624:	e00a      	b.n	800763c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007628:	2b00      	cmp	r3, #0
 800762a:	d007      	beq.n	800763c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800762c:	4b39      	ldr	r3, [pc, #228]	; (8007714 <xQueueGenericSend+0x1f8>)
 800762e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007632:	601a      	str	r2, [r3, #0]
 8007634:	f3bf 8f4f 	dsb	sy
 8007638:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800763c:	f002 f842 	bl	80096c4 <vPortExitCritical>
				return pdPASS;
 8007640:	2301      	movs	r3, #1
 8007642:	e063      	b.n	800770c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d103      	bne.n	8007652 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800764a:	f002 f83b 	bl	80096c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800764e:	2300      	movs	r3, #0
 8007650:	e05c      	b.n	800770c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007654:	2b00      	cmp	r3, #0
 8007656:	d106      	bne.n	8007666 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007658:	f107 0314 	add.w	r3, r7, #20
 800765c:	4618      	mov	r0, r3
 800765e:	f001 f949 	bl	80088f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007662:	2301      	movs	r3, #1
 8007664:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007666:	f002 f82d 	bl	80096c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800766a:	f000 feb5 	bl	80083d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800766e:	f001 fff9 	bl	8009664 <vPortEnterCritical>
 8007672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007674:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007678:	b25b      	sxtb	r3, r3
 800767a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800767e:	d103      	bne.n	8007688 <xQueueGenericSend+0x16c>
 8007680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007682:	2200      	movs	r2, #0
 8007684:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800768a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800768e:	b25b      	sxtb	r3, r3
 8007690:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007694:	d103      	bne.n	800769e <xQueueGenericSend+0x182>
 8007696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007698:	2200      	movs	r2, #0
 800769a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800769e:	f002 f811 	bl	80096c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80076a2:	1d3a      	adds	r2, r7, #4
 80076a4:	f107 0314 	add.w	r3, r7, #20
 80076a8:	4611      	mov	r1, r2
 80076aa:	4618      	mov	r0, r3
 80076ac:	f001 f938 	bl	8008920 <xTaskCheckForTimeOut>
 80076b0:	4603      	mov	r3, r0
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d124      	bne.n	8007700 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80076b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80076b8:	f000 faa2 	bl	8007c00 <prvIsQueueFull>
 80076bc:	4603      	mov	r3, r0
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d018      	beq.n	80076f4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80076c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c4:	3310      	adds	r3, #16
 80076c6:	687a      	ldr	r2, [r7, #4]
 80076c8:	4611      	mov	r1, r2
 80076ca:	4618      	mov	r0, r3
 80076cc:	f001 f85e 	bl	800878c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80076d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80076d2:	f000 fa2d 	bl	8007b30 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80076d6:	f000 fe8d 	bl	80083f4 <xTaskResumeAll>
 80076da:	4603      	mov	r3, r0
 80076dc:	2b00      	cmp	r3, #0
 80076de:	f47f af7c 	bne.w	80075da <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80076e2:	4b0c      	ldr	r3, [pc, #48]	; (8007714 <xQueueGenericSend+0x1f8>)
 80076e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076e8:	601a      	str	r2, [r3, #0]
 80076ea:	f3bf 8f4f 	dsb	sy
 80076ee:	f3bf 8f6f 	isb	sy
 80076f2:	e772      	b.n	80075da <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80076f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80076f6:	f000 fa1b 	bl	8007b30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80076fa:	f000 fe7b 	bl	80083f4 <xTaskResumeAll>
 80076fe:	e76c      	b.n	80075da <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007700:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007702:	f000 fa15 	bl	8007b30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007706:	f000 fe75 	bl	80083f4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800770a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800770c:	4618      	mov	r0, r3
 800770e:	3738      	adds	r7, #56	; 0x38
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}
 8007714:	e000ed04 	.word	0xe000ed04

08007718 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b090      	sub	sp, #64	; 0x40
 800771c:	af00      	add	r7, sp, #0
 800771e:	60f8      	str	r0, [r7, #12]
 8007720:	60b9      	str	r1, [r7, #8]
 8007722:	607a      	str	r2, [r7, #4]
 8007724:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800772a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800772c:	2b00      	cmp	r3, #0
 800772e:	d10a      	bne.n	8007746 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007734:	f383 8811 	msr	BASEPRI, r3
 8007738:	f3bf 8f6f 	isb	sy
 800773c:	f3bf 8f4f 	dsb	sy
 8007740:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007742:	bf00      	nop
 8007744:	e7fe      	b.n	8007744 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d103      	bne.n	8007754 <xQueueGenericSendFromISR+0x3c>
 800774c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800774e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007750:	2b00      	cmp	r3, #0
 8007752:	d101      	bne.n	8007758 <xQueueGenericSendFromISR+0x40>
 8007754:	2301      	movs	r3, #1
 8007756:	e000      	b.n	800775a <xQueueGenericSendFromISR+0x42>
 8007758:	2300      	movs	r3, #0
 800775a:	2b00      	cmp	r3, #0
 800775c:	d10a      	bne.n	8007774 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800775e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007762:	f383 8811 	msr	BASEPRI, r3
 8007766:	f3bf 8f6f 	isb	sy
 800776a:	f3bf 8f4f 	dsb	sy
 800776e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007770:	bf00      	nop
 8007772:	e7fe      	b.n	8007772 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	2b02      	cmp	r3, #2
 8007778:	d103      	bne.n	8007782 <xQueueGenericSendFromISR+0x6a>
 800777a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800777c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800777e:	2b01      	cmp	r3, #1
 8007780:	d101      	bne.n	8007786 <xQueueGenericSendFromISR+0x6e>
 8007782:	2301      	movs	r3, #1
 8007784:	e000      	b.n	8007788 <xQueueGenericSendFromISR+0x70>
 8007786:	2300      	movs	r3, #0
 8007788:	2b00      	cmp	r3, #0
 800778a:	d10a      	bne.n	80077a2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800778c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007790:	f383 8811 	msr	BASEPRI, r3
 8007794:	f3bf 8f6f 	isb	sy
 8007798:	f3bf 8f4f 	dsb	sy
 800779c:	623b      	str	r3, [r7, #32]
}
 800779e:	bf00      	nop
 80077a0:	e7fe      	b.n	80077a0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80077a2:	f002 f841 	bl	8009828 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80077a6:	f3ef 8211 	mrs	r2, BASEPRI
 80077aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ae:	f383 8811 	msr	BASEPRI, r3
 80077b2:	f3bf 8f6f 	isb	sy
 80077b6:	f3bf 8f4f 	dsb	sy
 80077ba:	61fa      	str	r2, [r7, #28]
 80077bc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80077be:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80077c0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80077c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077ca:	429a      	cmp	r2, r3
 80077cc:	d302      	bcc.n	80077d4 <xQueueGenericSendFromISR+0xbc>
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	2b02      	cmp	r3, #2
 80077d2:	d12f      	bne.n	8007834 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80077d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80077da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80077de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077e2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80077e4:	683a      	ldr	r2, [r7, #0]
 80077e6:	68b9      	ldr	r1, [r7, #8]
 80077e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80077ea:	f000 f911 	bl	8007a10 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80077ee:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80077f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077f6:	d112      	bne.n	800781e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80077f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d016      	beq.n	800782e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007802:	3324      	adds	r3, #36	; 0x24
 8007804:	4618      	mov	r0, r3
 8007806:	f001 f811 	bl	800882c <xTaskRemoveFromEventList>
 800780a:	4603      	mov	r3, r0
 800780c:	2b00      	cmp	r3, #0
 800780e:	d00e      	beq.n	800782e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d00b      	beq.n	800782e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2201      	movs	r2, #1
 800781a:	601a      	str	r2, [r3, #0]
 800781c:	e007      	b.n	800782e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800781e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007822:	3301      	adds	r3, #1
 8007824:	b2db      	uxtb	r3, r3
 8007826:	b25a      	sxtb	r2, r3
 8007828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800782a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800782e:	2301      	movs	r3, #1
 8007830:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007832:	e001      	b.n	8007838 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007834:	2300      	movs	r3, #0
 8007836:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800783a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007842:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007846:	4618      	mov	r0, r3
 8007848:	3740      	adds	r7, #64	; 0x40
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}
	...

08007850 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b08c      	sub	sp, #48	; 0x30
 8007854:	af00      	add	r7, sp, #0
 8007856:	60f8      	str	r0, [r7, #12]
 8007858:	60b9      	str	r1, [r7, #8]
 800785a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800785c:	2300      	movs	r3, #0
 800785e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007866:	2b00      	cmp	r3, #0
 8007868:	d10a      	bne.n	8007880 <xQueueReceive+0x30>
	__asm volatile
 800786a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800786e:	f383 8811 	msr	BASEPRI, r3
 8007872:	f3bf 8f6f 	isb	sy
 8007876:	f3bf 8f4f 	dsb	sy
 800787a:	623b      	str	r3, [r7, #32]
}
 800787c:	bf00      	nop
 800787e:	e7fe      	b.n	800787e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d103      	bne.n	800788e <xQueueReceive+0x3e>
 8007886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800788a:	2b00      	cmp	r3, #0
 800788c:	d101      	bne.n	8007892 <xQueueReceive+0x42>
 800788e:	2301      	movs	r3, #1
 8007890:	e000      	b.n	8007894 <xQueueReceive+0x44>
 8007892:	2300      	movs	r3, #0
 8007894:	2b00      	cmp	r3, #0
 8007896:	d10a      	bne.n	80078ae <xQueueReceive+0x5e>
	__asm volatile
 8007898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800789c:	f383 8811 	msr	BASEPRI, r3
 80078a0:	f3bf 8f6f 	isb	sy
 80078a4:	f3bf 8f4f 	dsb	sy
 80078a8:	61fb      	str	r3, [r7, #28]
}
 80078aa:	bf00      	nop
 80078ac:	e7fe      	b.n	80078ac <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80078ae:	f001 f97f 	bl	8008bb0 <xTaskGetSchedulerState>
 80078b2:	4603      	mov	r3, r0
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d102      	bne.n	80078be <xQueueReceive+0x6e>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d101      	bne.n	80078c2 <xQueueReceive+0x72>
 80078be:	2301      	movs	r3, #1
 80078c0:	e000      	b.n	80078c4 <xQueueReceive+0x74>
 80078c2:	2300      	movs	r3, #0
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d10a      	bne.n	80078de <xQueueReceive+0x8e>
	__asm volatile
 80078c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078cc:	f383 8811 	msr	BASEPRI, r3
 80078d0:	f3bf 8f6f 	isb	sy
 80078d4:	f3bf 8f4f 	dsb	sy
 80078d8:	61bb      	str	r3, [r7, #24]
}
 80078da:	bf00      	nop
 80078dc:	e7fe      	b.n	80078dc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80078de:	f001 fec1 	bl	8009664 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80078e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078e6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80078e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d01f      	beq.n	800792e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80078ee:	68b9      	ldr	r1, [r7, #8]
 80078f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078f2:	f000 f8f7 	bl	8007ae4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80078f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f8:	1e5a      	subs	r2, r3, #1
 80078fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078fc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80078fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007900:	691b      	ldr	r3, [r3, #16]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d00f      	beq.n	8007926 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007908:	3310      	adds	r3, #16
 800790a:	4618      	mov	r0, r3
 800790c:	f000 ff8e 	bl	800882c <xTaskRemoveFromEventList>
 8007910:	4603      	mov	r3, r0
 8007912:	2b00      	cmp	r3, #0
 8007914:	d007      	beq.n	8007926 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007916:	4b3d      	ldr	r3, [pc, #244]	; (8007a0c <xQueueReceive+0x1bc>)
 8007918:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800791c:	601a      	str	r2, [r3, #0]
 800791e:	f3bf 8f4f 	dsb	sy
 8007922:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007926:	f001 fecd 	bl	80096c4 <vPortExitCritical>
				return pdPASS;
 800792a:	2301      	movs	r3, #1
 800792c:	e069      	b.n	8007a02 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d103      	bne.n	800793c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007934:	f001 fec6 	bl	80096c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007938:	2300      	movs	r3, #0
 800793a:	e062      	b.n	8007a02 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800793c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800793e:	2b00      	cmp	r3, #0
 8007940:	d106      	bne.n	8007950 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007942:	f107 0310 	add.w	r3, r7, #16
 8007946:	4618      	mov	r0, r3
 8007948:	f000 ffd4 	bl	80088f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800794c:	2301      	movs	r3, #1
 800794e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007950:	f001 feb8 	bl	80096c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007954:	f000 fd40 	bl	80083d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007958:	f001 fe84 	bl	8009664 <vPortEnterCritical>
 800795c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800795e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007962:	b25b      	sxtb	r3, r3
 8007964:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007968:	d103      	bne.n	8007972 <xQueueReceive+0x122>
 800796a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800796c:	2200      	movs	r2, #0
 800796e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007974:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007978:	b25b      	sxtb	r3, r3
 800797a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800797e:	d103      	bne.n	8007988 <xQueueReceive+0x138>
 8007980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007982:	2200      	movs	r2, #0
 8007984:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007988:	f001 fe9c 	bl	80096c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800798c:	1d3a      	adds	r2, r7, #4
 800798e:	f107 0310 	add.w	r3, r7, #16
 8007992:	4611      	mov	r1, r2
 8007994:	4618      	mov	r0, r3
 8007996:	f000 ffc3 	bl	8008920 <xTaskCheckForTimeOut>
 800799a:	4603      	mov	r3, r0
 800799c:	2b00      	cmp	r3, #0
 800799e:	d123      	bne.n	80079e8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80079a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079a2:	f000 f917 	bl	8007bd4 <prvIsQueueEmpty>
 80079a6:	4603      	mov	r3, r0
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d017      	beq.n	80079dc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80079ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ae:	3324      	adds	r3, #36	; 0x24
 80079b0:	687a      	ldr	r2, [r7, #4]
 80079b2:	4611      	mov	r1, r2
 80079b4:	4618      	mov	r0, r3
 80079b6:	f000 fee9 	bl	800878c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80079ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079bc:	f000 f8b8 	bl	8007b30 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80079c0:	f000 fd18 	bl	80083f4 <xTaskResumeAll>
 80079c4:	4603      	mov	r3, r0
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d189      	bne.n	80078de <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80079ca:	4b10      	ldr	r3, [pc, #64]	; (8007a0c <xQueueReceive+0x1bc>)
 80079cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079d0:	601a      	str	r2, [r3, #0]
 80079d2:	f3bf 8f4f 	dsb	sy
 80079d6:	f3bf 8f6f 	isb	sy
 80079da:	e780      	b.n	80078de <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80079dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079de:	f000 f8a7 	bl	8007b30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80079e2:	f000 fd07 	bl	80083f4 <xTaskResumeAll>
 80079e6:	e77a      	b.n	80078de <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80079e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079ea:	f000 f8a1 	bl	8007b30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80079ee:	f000 fd01 	bl	80083f4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80079f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079f4:	f000 f8ee 	bl	8007bd4 <prvIsQueueEmpty>
 80079f8:	4603      	mov	r3, r0
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	f43f af6f 	beq.w	80078de <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007a00:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	3730      	adds	r7, #48	; 0x30
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}
 8007a0a:	bf00      	nop
 8007a0c:	e000ed04 	.word	0xe000ed04

08007a10 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b086      	sub	sp, #24
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	60f8      	str	r0, [r7, #12]
 8007a18:	60b9      	str	r1, [r7, #8]
 8007a1a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a24:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d10d      	bne.n	8007a4a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d14d      	bne.n	8007ad2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	689b      	ldr	r3, [r3, #8]
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f001 f8d6 	bl	8008bec <xTaskPriorityDisinherit>
 8007a40:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	2200      	movs	r2, #0
 8007a46:	609a      	str	r2, [r3, #8]
 8007a48:	e043      	b.n	8007ad2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d119      	bne.n	8007a84 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	6858      	ldr	r0, [r3, #4]
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a58:	461a      	mov	r2, r3
 8007a5a:	68b9      	ldr	r1, [r7, #8]
 8007a5c:	f002 ff33 	bl	800a8c6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	685a      	ldr	r2, [r3, #4]
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a68:	441a      	add	r2, r3
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	685a      	ldr	r2, [r3, #4]
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	689b      	ldr	r3, [r3, #8]
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d32b      	bcc.n	8007ad2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681a      	ldr	r2, [r3, #0]
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	605a      	str	r2, [r3, #4]
 8007a82:	e026      	b.n	8007ad2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	68d8      	ldr	r0, [r3, #12]
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a8c:	461a      	mov	r2, r3
 8007a8e:	68b9      	ldr	r1, [r7, #8]
 8007a90:	f002 ff19 	bl	800a8c6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	68da      	ldr	r2, [r3, #12]
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a9c:	425b      	negs	r3, r3
 8007a9e:	441a      	add	r2, r3
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	68da      	ldr	r2, [r3, #12]
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d207      	bcs.n	8007ac0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	689a      	ldr	r2, [r3, #8]
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ab8:	425b      	negs	r3, r3
 8007aba:	441a      	add	r2, r3
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2b02      	cmp	r3, #2
 8007ac4:	d105      	bne.n	8007ad2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d002      	beq.n	8007ad2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	3b01      	subs	r3, #1
 8007ad0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	1c5a      	adds	r2, r3, #1
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007ada:	697b      	ldr	r3, [r7, #20]
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3718      	adds	r7, #24
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}

08007ae4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b082      	sub	sp, #8
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d018      	beq.n	8007b28 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	68da      	ldr	r2, [r3, #12]
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007afe:	441a      	add	r2, r3
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	68da      	ldr	r2, [r3, #12]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	689b      	ldr	r3, [r3, #8]
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	d303      	bcc.n	8007b18 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	68d9      	ldr	r1, [r3, #12]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b20:	461a      	mov	r2, r3
 8007b22:	6838      	ldr	r0, [r7, #0]
 8007b24:	f002 fecf 	bl	800a8c6 <memcpy>
	}
}
 8007b28:	bf00      	nop
 8007b2a:	3708      	adds	r7, #8
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}

08007b30 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b084      	sub	sp, #16
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007b38:	f001 fd94 	bl	8009664 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b42:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007b44:	e011      	b.n	8007b6a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d012      	beq.n	8007b74 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	3324      	adds	r3, #36	; 0x24
 8007b52:	4618      	mov	r0, r3
 8007b54:	f000 fe6a 	bl	800882c <xTaskRemoveFromEventList>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d001      	beq.n	8007b62 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007b5e:	f000 ff41 	bl	80089e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007b62:	7bfb      	ldrb	r3, [r7, #15]
 8007b64:	3b01      	subs	r3, #1
 8007b66:	b2db      	uxtb	r3, r3
 8007b68:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007b6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	dce9      	bgt.n	8007b46 <prvUnlockQueue+0x16>
 8007b72:	e000      	b.n	8007b76 <prvUnlockQueue+0x46>
					break;
 8007b74:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	22ff      	movs	r2, #255	; 0xff
 8007b7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007b7e:	f001 fda1 	bl	80096c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007b82:	f001 fd6f 	bl	8009664 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b8c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007b8e:	e011      	b.n	8007bb4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	691b      	ldr	r3, [r3, #16]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d012      	beq.n	8007bbe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	3310      	adds	r3, #16
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f000 fe45 	bl	800882c <xTaskRemoveFromEventList>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d001      	beq.n	8007bac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007ba8:	f000 ff1c 	bl	80089e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007bac:	7bbb      	ldrb	r3, [r7, #14]
 8007bae:	3b01      	subs	r3, #1
 8007bb0:	b2db      	uxtb	r3, r3
 8007bb2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007bb4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	dce9      	bgt.n	8007b90 <prvUnlockQueue+0x60>
 8007bbc:	e000      	b.n	8007bc0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007bbe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	22ff      	movs	r2, #255	; 0xff
 8007bc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007bc8:	f001 fd7c 	bl	80096c4 <vPortExitCritical>
}
 8007bcc:	bf00      	nop
 8007bce:	3710      	adds	r7, #16
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}

08007bd4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b084      	sub	sp, #16
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007bdc:	f001 fd42 	bl	8009664 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d102      	bne.n	8007bee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007be8:	2301      	movs	r3, #1
 8007bea:	60fb      	str	r3, [r7, #12]
 8007bec:	e001      	b.n	8007bf2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007bf2:	f001 fd67 	bl	80096c4 <vPortExitCritical>

	return xReturn;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3710      	adds	r7, #16
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b084      	sub	sp, #16
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007c08:	f001 fd2c 	bl	8009664 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d102      	bne.n	8007c1e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007c18:	2301      	movs	r3, #1
 8007c1a:	60fb      	str	r3, [r7, #12]
 8007c1c:	e001      	b.n	8007c22 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007c22:	f001 fd4f 	bl	80096c4 <vPortExitCritical>

	return xReturn;
 8007c26:	68fb      	ldr	r3, [r7, #12]
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3710      	adds	r7, #16
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}

08007c30 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007c30:	b480      	push	{r7}
 8007c32:	b085      	sub	sp, #20
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
 8007c38:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	60fb      	str	r3, [r7, #12]
 8007c3e:	e014      	b.n	8007c6a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007c40:	4a0f      	ldr	r2, [pc, #60]	; (8007c80 <vQueueAddToRegistry+0x50>)
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d10b      	bne.n	8007c64 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007c4c:	490c      	ldr	r1, [pc, #48]	; (8007c80 <vQueueAddToRegistry+0x50>)
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	683a      	ldr	r2, [r7, #0]
 8007c52:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007c56:	4a0a      	ldr	r2, [pc, #40]	; (8007c80 <vQueueAddToRegistry+0x50>)
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	00db      	lsls	r3, r3, #3
 8007c5c:	4413      	add	r3, r2
 8007c5e:	687a      	ldr	r2, [r7, #4]
 8007c60:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007c62:	e006      	b.n	8007c72 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	3301      	adds	r3, #1
 8007c68:	60fb      	str	r3, [r7, #12]
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2b07      	cmp	r3, #7
 8007c6e:	d9e7      	bls.n	8007c40 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007c70:	bf00      	nop
 8007c72:	bf00      	nop
 8007c74:	3714      	adds	r7, #20
 8007c76:	46bd      	mov	sp, r7
 8007c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7c:	4770      	bx	lr
 8007c7e:	bf00      	nop
 8007c80:	20000bbc 	.word	0x20000bbc

08007c84 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b086      	sub	sp, #24
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	60f8      	str	r0, [r7, #12]
 8007c8c:	60b9      	str	r1, [r7, #8]
 8007c8e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007c94:	f001 fce6 	bl	8009664 <vPortEnterCritical>
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c9e:	b25b      	sxtb	r3, r3
 8007ca0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ca4:	d103      	bne.n	8007cae <vQueueWaitForMessageRestricted+0x2a>
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007cb4:	b25b      	sxtb	r3, r3
 8007cb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007cba:	d103      	bne.n	8007cc4 <vQueueWaitForMessageRestricted+0x40>
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007cc4:	f001 fcfe 	bl	80096c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007cc8:	697b      	ldr	r3, [r7, #20]
 8007cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d106      	bne.n	8007cde <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	3324      	adds	r3, #36	; 0x24
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	68b9      	ldr	r1, [r7, #8]
 8007cd8:	4618      	mov	r0, r3
 8007cda:	f000 fd7b 	bl	80087d4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007cde:	6978      	ldr	r0, [r7, #20]
 8007ce0:	f7ff ff26 	bl	8007b30 <prvUnlockQueue>
	}
 8007ce4:	bf00      	nop
 8007ce6:	3718      	adds	r7, #24
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}

08007cec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b08e      	sub	sp, #56	; 0x38
 8007cf0:	af04      	add	r7, sp, #16
 8007cf2:	60f8      	str	r0, [r7, #12]
 8007cf4:	60b9      	str	r1, [r7, #8]
 8007cf6:	607a      	str	r2, [r7, #4]
 8007cf8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007cfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d10a      	bne.n	8007d16 <xTaskCreateStatic+0x2a>
	__asm volatile
 8007d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d04:	f383 8811 	msr	BASEPRI, r3
 8007d08:	f3bf 8f6f 	isb	sy
 8007d0c:	f3bf 8f4f 	dsb	sy
 8007d10:	623b      	str	r3, [r7, #32]
}
 8007d12:	bf00      	nop
 8007d14:	e7fe      	b.n	8007d14 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d10a      	bne.n	8007d32 <xTaskCreateStatic+0x46>
	__asm volatile
 8007d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d20:	f383 8811 	msr	BASEPRI, r3
 8007d24:	f3bf 8f6f 	isb	sy
 8007d28:	f3bf 8f4f 	dsb	sy
 8007d2c:	61fb      	str	r3, [r7, #28]
}
 8007d2e:	bf00      	nop
 8007d30:	e7fe      	b.n	8007d30 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007d32:	23a8      	movs	r3, #168	; 0xa8
 8007d34:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007d36:	693b      	ldr	r3, [r7, #16]
 8007d38:	2ba8      	cmp	r3, #168	; 0xa8
 8007d3a:	d00a      	beq.n	8007d52 <xTaskCreateStatic+0x66>
	__asm volatile
 8007d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d40:	f383 8811 	msr	BASEPRI, r3
 8007d44:	f3bf 8f6f 	isb	sy
 8007d48:	f3bf 8f4f 	dsb	sy
 8007d4c:	61bb      	str	r3, [r7, #24]
}
 8007d4e:	bf00      	nop
 8007d50:	e7fe      	b.n	8007d50 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007d52:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d01e      	beq.n	8007d98 <xTaskCreateStatic+0xac>
 8007d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d01b      	beq.n	8007d98 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d62:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d68:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d6c:	2202      	movs	r2, #2
 8007d6e:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007d72:	2300      	movs	r3, #0
 8007d74:	9303      	str	r3, [sp, #12]
 8007d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d78:	9302      	str	r3, [sp, #8]
 8007d7a:	f107 0314 	add.w	r3, r7, #20
 8007d7e:	9301      	str	r3, [sp, #4]
 8007d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d82:	9300      	str	r3, [sp, #0]
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	687a      	ldr	r2, [r7, #4]
 8007d88:	68b9      	ldr	r1, [r7, #8]
 8007d8a:	68f8      	ldr	r0, [r7, #12]
 8007d8c:	f000 f850 	bl	8007e30 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007d90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007d92:	f000 f8f3 	bl	8007f7c <prvAddNewTaskToReadyList>
 8007d96:	e001      	b.n	8007d9c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007d9c:	697b      	ldr	r3, [r7, #20]
	}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3728      	adds	r7, #40	; 0x28
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}

08007da6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007da6:	b580      	push	{r7, lr}
 8007da8:	b08c      	sub	sp, #48	; 0x30
 8007daa:	af04      	add	r7, sp, #16
 8007dac:	60f8      	str	r0, [r7, #12]
 8007dae:	60b9      	str	r1, [r7, #8]
 8007db0:	603b      	str	r3, [r7, #0]
 8007db2:	4613      	mov	r3, r2
 8007db4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007db6:	88fb      	ldrh	r3, [r7, #6]
 8007db8:	009b      	lsls	r3, r3, #2
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f001 fd74 	bl	80098a8 <pvPortMalloc>
 8007dc0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d00e      	beq.n	8007de6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007dc8:	20a8      	movs	r0, #168	; 0xa8
 8007dca:	f001 fd6d 	bl	80098a8 <pvPortMalloc>
 8007dce:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007dd0:	69fb      	ldr	r3, [r7, #28]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d003      	beq.n	8007dde <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007dd6:	69fb      	ldr	r3, [r7, #28]
 8007dd8:	697a      	ldr	r2, [r7, #20]
 8007dda:	631a      	str	r2, [r3, #48]	; 0x30
 8007ddc:	e005      	b.n	8007dea <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007dde:	6978      	ldr	r0, [r7, #20]
 8007de0:	f001 fe2e 	bl	8009a40 <vPortFree>
 8007de4:	e001      	b.n	8007dea <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007de6:	2300      	movs	r3, #0
 8007de8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007dea:	69fb      	ldr	r3, [r7, #28]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d017      	beq.n	8007e20 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007df0:	69fb      	ldr	r3, [r7, #28]
 8007df2:	2200      	movs	r2, #0
 8007df4:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007df8:	88fa      	ldrh	r2, [r7, #6]
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	9303      	str	r3, [sp, #12]
 8007dfe:	69fb      	ldr	r3, [r7, #28]
 8007e00:	9302      	str	r3, [sp, #8]
 8007e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e04:	9301      	str	r3, [sp, #4]
 8007e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e08:	9300      	str	r3, [sp, #0]
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	68b9      	ldr	r1, [r7, #8]
 8007e0e:	68f8      	ldr	r0, [r7, #12]
 8007e10:	f000 f80e 	bl	8007e30 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007e14:	69f8      	ldr	r0, [r7, #28]
 8007e16:	f000 f8b1 	bl	8007f7c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	61bb      	str	r3, [r7, #24]
 8007e1e:	e002      	b.n	8007e26 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007e20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007e24:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007e26:	69bb      	ldr	r3, [r7, #24]
	}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	3720      	adds	r7, #32
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}

08007e30 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b088      	sub	sp, #32
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	60f8      	str	r0, [r7, #12]
 8007e38:	60b9      	str	r1, [r7, #8]
 8007e3a:	607a      	str	r2, [r7, #4]
 8007e3c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e40:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	009b      	lsls	r3, r3, #2
 8007e46:	461a      	mov	r2, r3
 8007e48:	21a5      	movs	r1, #165	; 0xa5
 8007e4a:	f002 fcad 	bl	800a7a8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007e58:	3b01      	subs	r3, #1
 8007e5a:	009b      	lsls	r3, r3, #2
 8007e5c:	4413      	add	r3, r2
 8007e5e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007e60:	69bb      	ldr	r3, [r7, #24]
 8007e62:	f023 0307 	bic.w	r3, r3, #7
 8007e66:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007e68:	69bb      	ldr	r3, [r7, #24]
 8007e6a:	f003 0307 	and.w	r3, r3, #7
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d00a      	beq.n	8007e88 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e76:	f383 8811 	msr	BASEPRI, r3
 8007e7a:	f3bf 8f6f 	isb	sy
 8007e7e:	f3bf 8f4f 	dsb	sy
 8007e82:	617b      	str	r3, [r7, #20]
}
 8007e84:	bf00      	nop
 8007e86:	e7fe      	b.n	8007e86 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d01f      	beq.n	8007ece <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007e8e:	2300      	movs	r3, #0
 8007e90:	61fb      	str	r3, [r7, #28]
 8007e92:	e012      	b.n	8007eba <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007e94:	68ba      	ldr	r2, [r7, #8]
 8007e96:	69fb      	ldr	r3, [r7, #28]
 8007e98:	4413      	add	r3, r2
 8007e9a:	7819      	ldrb	r1, [r3, #0]
 8007e9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e9e:	69fb      	ldr	r3, [r7, #28]
 8007ea0:	4413      	add	r3, r2
 8007ea2:	3334      	adds	r3, #52	; 0x34
 8007ea4:	460a      	mov	r2, r1
 8007ea6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007ea8:	68ba      	ldr	r2, [r7, #8]
 8007eaa:	69fb      	ldr	r3, [r7, #28]
 8007eac:	4413      	add	r3, r2
 8007eae:	781b      	ldrb	r3, [r3, #0]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d006      	beq.n	8007ec2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007eb4:	69fb      	ldr	r3, [r7, #28]
 8007eb6:	3301      	adds	r3, #1
 8007eb8:	61fb      	str	r3, [r7, #28]
 8007eba:	69fb      	ldr	r3, [r7, #28]
 8007ebc:	2b0f      	cmp	r3, #15
 8007ebe:	d9e9      	bls.n	8007e94 <prvInitialiseNewTask+0x64>
 8007ec0:	e000      	b.n	8007ec4 <prvInitialiseNewTask+0x94>
			{
				break;
 8007ec2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007ecc:	e003      	b.n	8007ed6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ed8:	2b37      	cmp	r3, #55	; 0x37
 8007eda:	d901      	bls.n	8007ee0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007edc:	2337      	movs	r3, #55	; 0x37
 8007ede:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ee2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ee4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ee8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007eea:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eee:	2200      	movs	r2, #0
 8007ef0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef4:	3304      	adds	r3, #4
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f7ff f93e 	bl	8007178 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007efe:	3318      	adds	r3, #24
 8007f00:	4618      	mov	r0, r3
 8007f02:	f7ff f939 	bl	8007178 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f0a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f0e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f14:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f1a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f1e:	2200      	movs	r2, #0
 8007f20:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f26:	2200      	movs	r2, #0
 8007f28:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f2e:	3354      	adds	r3, #84	; 0x54
 8007f30:	224c      	movs	r2, #76	; 0x4c
 8007f32:	2100      	movs	r1, #0
 8007f34:	4618      	mov	r0, r3
 8007f36:	f002 fc37 	bl	800a7a8 <memset>
 8007f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f3c:	4a0c      	ldr	r2, [pc, #48]	; (8007f70 <prvInitialiseNewTask+0x140>)
 8007f3e:	659a      	str	r2, [r3, #88]	; 0x58
 8007f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f42:	4a0c      	ldr	r2, [pc, #48]	; (8007f74 <prvInitialiseNewTask+0x144>)
 8007f44:	65da      	str	r2, [r3, #92]	; 0x5c
 8007f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f48:	4a0b      	ldr	r2, [pc, #44]	; (8007f78 <prvInitialiseNewTask+0x148>)
 8007f4a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007f4c:	683a      	ldr	r2, [r7, #0]
 8007f4e:	68f9      	ldr	r1, [r7, #12]
 8007f50:	69b8      	ldr	r0, [r7, #24]
 8007f52:	f001 fa5b 	bl	800940c <pxPortInitialiseStack>
 8007f56:	4602      	mov	r2, r0
 8007f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f5a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d002      	beq.n	8007f68 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f66:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f68:	bf00      	nop
 8007f6a:	3720      	adds	r7, #32
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}
 8007f70:	200025d8 	.word	0x200025d8
 8007f74:	20002640 	.word	0x20002640
 8007f78:	200026a8 	.word	0x200026a8

08007f7c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b082      	sub	sp, #8
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007f84:	f001 fb6e 	bl	8009664 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007f88:	4b2d      	ldr	r3, [pc, #180]	; (8008040 <prvAddNewTaskToReadyList+0xc4>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	3301      	adds	r3, #1
 8007f8e:	4a2c      	ldr	r2, [pc, #176]	; (8008040 <prvAddNewTaskToReadyList+0xc4>)
 8007f90:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007f92:	4b2c      	ldr	r3, [pc, #176]	; (8008044 <prvAddNewTaskToReadyList+0xc8>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d109      	bne.n	8007fae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007f9a:	4a2a      	ldr	r2, [pc, #168]	; (8008044 <prvAddNewTaskToReadyList+0xc8>)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007fa0:	4b27      	ldr	r3, [pc, #156]	; (8008040 <prvAddNewTaskToReadyList+0xc4>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	2b01      	cmp	r3, #1
 8007fa6:	d110      	bne.n	8007fca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007fa8:	f000 fd40 	bl	8008a2c <prvInitialiseTaskLists>
 8007fac:	e00d      	b.n	8007fca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007fae:	4b26      	ldr	r3, [pc, #152]	; (8008048 <prvAddNewTaskToReadyList+0xcc>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d109      	bne.n	8007fca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007fb6:	4b23      	ldr	r3, [pc, #140]	; (8008044 <prvAddNewTaskToReadyList+0xc8>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fc0:	429a      	cmp	r2, r3
 8007fc2:	d802      	bhi.n	8007fca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007fc4:	4a1f      	ldr	r2, [pc, #124]	; (8008044 <prvAddNewTaskToReadyList+0xc8>)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007fca:	4b20      	ldr	r3, [pc, #128]	; (800804c <prvAddNewTaskToReadyList+0xd0>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	3301      	adds	r3, #1
 8007fd0:	4a1e      	ldr	r2, [pc, #120]	; (800804c <prvAddNewTaskToReadyList+0xd0>)
 8007fd2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007fd4:	4b1d      	ldr	r3, [pc, #116]	; (800804c <prvAddNewTaskToReadyList+0xd0>)
 8007fd6:	681a      	ldr	r2, [r3, #0]
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fe0:	4b1b      	ldr	r3, [pc, #108]	; (8008050 <prvAddNewTaskToReadyList+0xd4>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	429a      	cmp	r2, r3
 8007fe6:	d903      	bls.n	8007ff0 <prvAddNewTaskToReadyList+0x74>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fec:	4a18      	ldr	r2, [pc, #96]	; (8008050 <prvAddNewTaskToReadyList+0xd4>)
 8007fee:	6013      	str	r3, [r2, #0]
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ff4:	4613      	mov	r3, r2
 8007ff6:	009b      	lsls	r3, r3, #2
 8007ff8:	4413      	add	r3, r2
 8007ffa:	009b      	lsls	r3, r3, #2
 8007ffc:	4a15      	ldr	r2, [pc, #84]	; (8008054 <prvAddNewTaskToReadyList+0xd8>)
 8007ffe:	441a      	add	r2, r3
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	3304      	adds	r3, #4
 8008004:	4619      	mov	r1, r3
 8008006:	4610      	mov	r0, r2
 8008008:	f7ff f8c3 	bl	8007192 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800800c:	f001 fb5a 	bl	80096c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008010:	4b0d      	ldr	r3, [pc, #52]	; (8008048 <prvAddNewTaskToReadyList+0xcc>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d00e      	beq.n	8008036 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008018:	4b0a      	ldr	r3, [pc, #40]	; (8008044 <prvAddNewTaskToReadyList+0xc8>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008022:	429a      	cmp	r2, r3
 8008024:	d207      	bcs.n	8008036 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008026:	4b0c      	ldr	r3, [pc, #48]	; (8008058 <prvAddNewTaskToReadyList+0xdc>)
 8008028:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800802c:	601a      	str	r2, [r3, #0]
 800802e:	f3bf 8f4f 	dsb	sy
 8008032:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008036:	bf00      	nop
 8008038:	3708      	adds	r7, #8
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}
 800803e:	bf00      	nop
 8008040:	200010d0 	.word	0x200010d0
 8008044:	20000bfc 	.word	0x20000bfc
 8008048:	200010dc 	.word	0x200010dc
 800804c:	200010ec 	.word	0x200010ec
 8008050:	200010d8 	.word	0x200010d8
 8008054:	20000c00 	.word	0x20000c00
 8008058:	e000ed04 	.word	0xe000ed04

0800805c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800805c:	b580      	push	{r7, lr}
 800805e:	b084      	sub	sp, #16
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008064:	2300      	movs	r3, #0
 8008066:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d017      	beq.n	800809e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800806e:	4b13      	ldr	r3, [pc, #76]	; (80080bc <vTaskDelay+0x60>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d00a      	beq.n	800808c <vTaskDelay+0x30>
	__asm volatile
 8008076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800807a:	f383 8811 	msr	BASEPRI, r3
 800807e:	f3bf 8f6f 	isb	sy
 8008082:	f3bf 8f4f 	dsb	sy
 8008086:	60bb      	str	r3, [r7, #8]
}
 8008088:	bf00      	nop
 800808a:	e7fe      	b.n	800808a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800808c:	f000 f9a4 	bl	80083d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008090:	2100      	movs	r1, #0
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f000 fe18 	bl	8008cc8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008098:	f000 f9ac 	bl	80083f4 <xTaskResumeAll>
 800809c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d107      	bne.n	80080b4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80080a4:	4b06      	ldr	r3, [pc, #24]	; (80080c0 <vTaskDelay+0x64>)
 80080a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080aa:	601a      	str	r2, [r3, #0]
 80080ac:	f3bf 8f4f 	dsb	sy
 80080b0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80080b4:	bf00      	nop
 80080b6:	3710      	adds	r7, #16
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}
 80080bc:	200010f8 	.word	0x200010f8
 80080c0:	e000ed04 	.word	0xe000ed04

080080c4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b084      	sub	sp, #16
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80080cc:	f001 faca 	bl	8009664 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d102      	bne.n	80080dc <vTaskSuspend+0x18>
 80080d6:	4b30      	ldr	r3, [pc, #192]	; (8008198 <vTaskSuspend+0xd4>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	e000      	b.n	80080de <vTaskSuspend+0x1a>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	3304      	adds	r3, #4
 80080e4:	4618      	mov	r0, r3
 80080e6:	f7ff f8b1 	bl	800724c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d004      	beq.n	80080fc <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	3318      	adds	r3, #24
 80080f6:	4618      	mov	r0, r3
 80080f8:	f7ff f8a8 	bl	800724c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	3304      	adds	r3, #4
 8008100:	4619      	mov	r1, r3
 8008102:	4826      	ldr	r0, [pc, #152]	; (800819c <vTaskSuspend+0xd8>)
 8008104:	f7ff f845 	bl	8007192 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800810e:	b2db      	uxtb	r3, r3
 8008110:	2b01      	cmp	r3, #1
 8008112:	d103      	bne.n	800811c <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	2200      	movs	r2, #0
 8008118:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800811c:	f001 fad2 	bl	80096c4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8008120:	4b1f      	ldr	r3, [pc, #124]	; (80081a0 <vTaskSuspend+0xdc>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d005      	beq.n	8008134 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8008128:	f001 fa9c 	bl	8009664 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800812c:	f000 fd20 	bl	8008b70 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8008130:	f001 fac8 	bl	80096c4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8008134:	4b18      	ldr	r3, [pc, #96]	; (8008198 <vTaskSuspend+0xd4>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	68fa      	ldr	r2, [r7, #12]
 800813a:	429a      	cmp	r2, r3
 800813c:	d127      	bne.n	800818e <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800813e:	4b18      	ldr	r3, [pc, #96]	; (80081a0 <vTaskSuspend+0xdc>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d017      	beq.n	8008176 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8008146:	4b17      	ldr	r3, [pc, #92]	; (80081a4 <vTaskSuspend+0xe0>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d00a      	beq.n	8008164 <vTaskSuspend+0xa0>
	__asm volatile
 800814e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008152:	f383 8811 	msr	BASEPRI, r3
 8008156:	f3bf 8f6f 	isb	sy
 800815a:	f3bf 8f4f 	dsb	sy
 800815e:	60bb      	str	r3, [r7, #8]
}
 8008160:	bf00      	nop
 8008162:	e7fe      	b.n	8008162 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8008164:	4b10      	ldr	r3, [pc, #64]	; (80081a8 <vTaskSuspend+0xe4>)
 8008166:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800816a:	601a      	str	r2, [r3, #0]
 800816c:	f3bf 8f4f 	dsb	sy
 8008170:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008174:	e00b      	b.n	800818e <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8008176:	4b09      	ldr	r3, [pc, #36]	; (800819c <vTaskSuspend+0xd8>)
 8008178:	681a      	ldr	r2, [r3, #0]
 800817a:	4b0c      	ldr	r3, [pc, #48]	; (80081ac <vTaskSuspend+0xe8>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	429a      	cmp	r2, r3
 8008180:	d103      	bne.n	800818a <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 8008182:	4b05      	ldr	r3, [pc, #20]	; (8008198 <vTaskSuspend+0xd4>)
 8008184:	2200      	movs	r2, #0
 8008186:	601a      	str	r2, [r3, #0]
	}
 8008188:	e001      	b.n	800818e <vTaskSuspend+0xca>
					vTaskSwitchContext();
 800818a:	f000 fa9b 	bl	80086c4 <vTaskSwitchContext>
	}
 800818e:	bf00      	nop
 8008190:	3710      	adds	r7, #16
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}
 8008196:	bf00      	nop
 8008198:	20000bfc 	.word	0x20000bfc
 800819c:	200010bc 	.word	0x200010bc
 80081a0:	200010dc 	.word	0x200010dc
 80081a4:	200010f8 	.word	0x200010f8
 80081a8:	e000ed04 	.word	0xe000ed04
 80081ac:	200010d0 	.word	0x200010d0

080081b0 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 80081b0:	b480      	push	{r7}
 80081b2:	b087      	sub	sp, #28
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 80081b8:	2300      	movs	r3, #0
 80081ba:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d10a      	bne.n	80081dc <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 80081c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ca:	f383 8811 	msr	BASEPRI, r3
 80081ce:	f3bf 8f6f 	isb	sy
 80081d2:	f3bf 8f4f 	dsb	sy
 80081d6:	60fb      	str	r3, [r7, #12]
}
 80081d8:	bf00      	nop
 80081da:	e7fe      	b.n	80081da <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	695b      	ldr	r3, [r3, #20]
 80081e0:	4a0a      	ldr	r2, [pc, #40]	; (800820c <prvTaskIsTaskSuspended+0x5c>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d10a      	bne.n	80081fc <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80081e6:	693b      	ldr	r3, [r7, #16]
 80081e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ea:	4a09      	ldr	r2, [pc, #36]	; (8008210 <prvTaskIsTaskSuspended+0x60>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d005      	beq.n	80081fc <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d101      	bne.n	80081fc <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 80081f8:	2301      	movs	r3, #1
 80081fa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80081fc:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80081fe:	4618      	mov	r0, r3
 8008200:	371c      	adds	r7, #28
 8008202:	46bd      	mov	sp, r7
 8008204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008208:	4770      	bx	lr
 800820a:	bf00      	nop
 800820c:	200010bc 	.word	0x200010bc
 8008210:	20001090 	.word	0x20001090

08008214 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8008214:	b580      	push	{r7, lr}
 8008216:	b08a      	sub	sp, #40	; 0x28
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 800821c:	2300      	movs	r3, #0
 800821e:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d10a      	bne.n	8008240 <xTaskResumeFromISR+0x2c>
	__asm volatile
 800822a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800822e:	f383 8811 	msr	BASEPRI, r3
 8008232:	f3bf 8f6f 	isb	sy
 8008236:	f3bf 8f4f 	dsb	sy
 800823a:	61bb      	str	r3, [r7, #24]
}
 800823c:	bf00      	nop
 800823e:	e7fe      	b.n	800823e <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008240:	f001 faf2 	bl	8009828 <vPortValidateInterruptPriority>
	__asm volatile
 8008244:	f3ef 8211 	mrs	r2, BASEPRI
 8008248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800824c:	f383 8811 	msr	BASEPRI, r3
 8008250:	f3bf 8f6f 	isb	sy
 8008254:	f3bf 8f4f 	dsb	sy
 8008258:	617a      	str	r2, [r7, #20]
 800825a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800825c:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800825e:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8008260:	6a38      	ldr	r0, [r7, #32]
 8008262:	f7ff ffa5 	bl	80081b0 <prvTaskIsTaskSuspended>
 8008266:	4603      	mov	r3, r0
 8008268:	2b00      	cmp	r3, #0
 800826a:	d030      	beq.n	80082ce <xTaskResumeFromISR+0xba>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800826c:	4b1d      	ldr	r3, [pc, #116]	; (80082e4 <xTaskResumeFromISR+0xd0>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d126      	bne.n	80082c2 <xTaskResumeFromISR+0xae>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008274:	6a3b      	ldr	r3, [r7, #32]
 8008276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008278:	4b1b      	ldr	r3, [pc, #108]	; (80082e8 <xTaskResumeFromISR+0xd4>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800827e:	429a      	cmp	r2, r3
 8008280:	d301      	bcc.n	8008286 <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 8008282:	2301      	movs	r3, #1
 8008284:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008286:	6a3b      	ldr	r3, [r7, #32]
 8008288:	3304      	adds	r3, #4
 800828a:	4618      	mov	r0, r3
 800828c:	f7fe ffde 	bl	800724c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008290:	6a3b      	ldr	r3, [r7, #32]
 8008292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008294:	4b15      	ldr	r3, [pc, #84]	; (80082ec <xTaskResumeFromISR+0xd8>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	429a      	cmp	r2, r3
 800829a:	d903      	bls.n	80082a4 <xTaskResumeFromISR+0x90>
 800829c:	6a3b      	ldr	r3, [r7, #32]
 800829e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082a0:	4a12      	ldr	r2, [pc, #72]	; (80082ec <xTaskResumeFromISR+0xd8>)
 80082a2:	6013      	str	r3, [r2, #0]
 80082a4:	6a3b      	ldr	r3, [r7, #32]
 80082a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082a8:	4613      	mov	r3, r2
 80082aa:	009b      	lsls	r3, r3, #2
 80082ac:	4413      	add	r3, r2
 80082ae:	009b      	lsls	r3, r3, #2
 80082b0:	4a0f      	ldr	r2, [pc, #60]	; (80082f0 <xTaskResumeFromISR+0xdc>)
 80082b2:	441a      	add	r2, r3
 80082b4:	6a3b      	ldr	r3, [r7, #32]
 80082b6:	3304      	adds	r3, #4
 80082b8:	4619      	mov	r1, r3
 80082ba:	4610      	mov	r0, r2
 80082bc:	f7fe ff69 	bl	8007192 <vListInsertEnd>
 80082c0:	e005      	b.n	80082ce <xTaskResumeFromISR+0xba>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80082c2:	6a3b      	ldr	r3, [r7, #32]
 80082c4:	3318      	adds	r3, #24
 80082c6:	4619      	mov	r1, r3
 80082c8:	480a      	ldr	r0, [pc, #40]	; (80082f4 <xTaskResumeFromISR+0xe0>)
 80082ca:	f7fe ff62 	bl	8007192 <vListInsertEnd>
 80082ce:	69fb      	ldr	r3, [r7, #28]
 80082d0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	f383 8811 	msr	BASEPRI, r3
}
 80082d8:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 80082da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80082dc:	4618      	mov	r0, r3
 80082de:	3728      	adds	r7, #40	; 0x28
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}
 80082e4:	200010f8 	.word	0x200010f8
 80082e8:	20000bfc 	.word	0x20000bfc
 80082ec:	200010d8 	.word	0x200010d8
 80082f0:	20000c00 	.word	0x20000c00
 80082f4:	20001090 	.word	0x20001090

080082f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b08a      	sub	sp, #40	; 0x28
 80082fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80082fe:	2300      	movs	r3, #0
 8008300:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008302:	2300      	movs	r3, #0
 8008304:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008306:	463a      	mov	r2, r7
 8008308:	1d39      	adds	r1, r7, #4
 800830a:	f107 0308 	add.w	r3, r7, #8
 800830e:	4618      	mov	r0, r3
 8008310:	f7fe fede 	bl	80070d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008314:	6839      	ldr	r1, [r7, #0]
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	68ba      	ldr	r2, [r7, #8]
 800831a:	9202      	str	r2, [sp, #8]
 800831c:	9301      	str	r3, [sp, #4]
 800831e:	2300      	movs	r3, #0
 8008320:	9300      	str	r3, [sp, #0]
 8008322:	2300      	movs	r3, #0
 8008324:	460a      	mov	r2, r1
 8008326:	4924      	ldr	r1, [pc, #144]	; (80083b8 <vTaskStartScheduler+0xc0>)
 8008328:	4824      	ldr	r0, [pc, #144]	; (80083bc <vTaskStartScheduler+0xc4>)
 800832a:	f7ff fcdf 	bl	8007cec <xTaskCreateStatic>
 800832e:	4603      	mov	r3, r0
 8008330:	4a23      	ldr	r2, [pc, #140]	; (80083c0 <vTaskStartScheduler+0xc8>)
 8008332:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008334:	4b22      	ldr	r3, [pc, #136]	; (80083c0 <vTaskStartScheduler+0xc8>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d002      	beq.n	8008342 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800833c:	2301      	movs	r3, #1
 800833e:	617b      	str	r3, [r7, #20]
 8008340:	e001      	b.n	8008346 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008342:	2300      	movs	r3, #0
 8008344:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008346:	697b      	ldr	r3, [r7, #20]
 8008348:	2b01      	cmp	r3, #1
 800834a:	d102      	bne.n	8008352 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800834c:	f000 fd10 	bl	8008d70 <xTimerCreateTimerTask>
 8008350:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	2b01      	cmp	r3, #1
 8008356:	d11b      	bne.n	8008390 <vTaskStartScheduler+0x98>
	__asm volatile
 8008358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800835c:	f383 8811 	msr	BASEPRI, r3
 8008360:	f3bf 8f6f 	isb	sy
 8008364:	f3bf 8f4f 	dsb	sy
 8008368:	613b      	str	r3, [r7, #16]
}
 800836a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800836c:	4b15      	ldr	r3, [pc, #84]	; (80083c4 <vTaskStartScheduler+0xcc>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	3354      	adds	r3, #84	; 0x54
 8008372:	4a15      	ldr	r2, [pc, #84]	; (80083c8 <vTaskStartScheduler+0xd0>)
 8008374:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008376:	4b15      	ldr	r3, [pc, #84]	; (80083cc <vTaskStartScheduler+0xd4>)
 8008378:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800837c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800837e:	4b14      	ldr	r3, [pc, #80]	; (80083d0 <vTaskStartScheduler+0xd8>)
 8008380:	2201      	movs	r2, #1
 8008382:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008384:	4b13      	ldr	r3, [pc, #76]	; (80083d4 <vTaskStartScheduler+0xdc>)
 8008386:	2200      	movs	r2, #0
 8008388:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800838a:	f001 f8c9 	bl	8009520 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800838e:	e00e      	b.n	80083ae <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008396:	d10a      	bne.n	80083ae <vTaskStartScheduler+0xb6>
	__asm volatile
 8008398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800839c:	f383 8811 	msr	BASEPRI, r3
 80083a0:	f3bf 8f6f 	isb	sy
 80083a4:	f3bf 8f4f 	dsb	sy
 80083a8:	60fb      	str	r3, [r7, #12]
}
 80083aa:	bf00      	nop
 80083ac:	e7fe      	b.n	80083ac <vTaskStartScheduler+0xb4>
}
 80083ae:	bf00      	nop
 80083b0:	3718      	adds	r7, #24
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}
 80083b6:	bf00      	nop
 80083b8:	0800d2f4 	.word	0x0800d2f4
 80083bc:	080089fd 	.word	0x080089fd
 80083c0:	200010f4 	.word	0x200010f4
 80083c4:	20000bfc 	.word	0x20000bfc
 80083c8:	20000068 	.word	0x20000068
 80083cc:	200010f0 	.word	0x200010f0
 80083d0:	200010dc 	.word	0x200010dc
 80083d4:	200010d4 	.word	0x200010d4

080083d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80083d8:	b480      	push	{r7}
 80083da:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80083dc:	4b04      	ldr	r3, [pc, #16]	; (80083f0 <vTaskSuspendAll+0x18>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	3301      	adds	r3, #1
 80083e2:	4a03      	ldr	r2, [pc, #12]	; (80083f0 <vTaskSuspendAll+0x18>)
 80083e4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80083e6:	bf00      	nop
 80083e8:	46bd      	mov	sp, r7
 80083ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ee:	4770      	bx	lr
 80083f0:	200010f8 	.word	0x200010f8

080083f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b084      	sub	sp, #16
 80083f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80083fa:	2300      	movs	r3, #0
 80083fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80083fe:	2300      	movs	r3, #0
 8008400:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008402:	4b42      	ldr	r3, [pc, #264]	; (800850c <xTaskResumeAll+0x118>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d10a      	bne.n	8008420 <xTaskResumeAll+0x2c>
	__asm volatile
 800840a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800840e:	f383 8811 	msr	BASEPRI, r3
 8008412:	f3bf 8f6f 	isb	sy
 8008416:	f3bf 8f4f 	dsb	sy
 800841a:	603b      	str	r3, [r7, #0]
}
 800841c:	bf00      	nop
 800841e:	e7fe      	b.n	800841e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008420:	f001 f920 	bl	8009664 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008424:	4b39      	ldr	r3, [pc, #228]	; (800850c <xTaskResumeAll+0x118>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	3b01      	subs	r3, #1
 800842a:	4a38      	ldr	r2, [pc, #224]	; (800850c <xTaskResumeAll+0x118>)
 800842c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800842e:	4b37      	ldr	r3, [pc, #220]	; (800850c <xTaskResumeAll+0x118>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d162      	bne.n	80084fc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008436:	4b36      	ldr	r3, [pc, #216]	; (8008510 <xTaskResumeAll+0x11c>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d05e      	beq.n	80084fc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800843e:	e02f      	b.n	80084a0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008440:	4b34      	ldr	r3, [pc, #208]	; (8008514 <xTaskResumeAll+0x120>)
 8008442:	68db      	ldr	r3, [r3, #12]
 8008444:	68db      	ldr	r3, [r3, #12]
 8008446:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	3318      	adds	r3, #24
 800844c:	4618      	mov	r0, r3
 800844e:	f7fe fefd 	bl	800724c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	3304      	adds	r3, #4
 8008456:	4618      	mov	r0, r3
 8008458:	f7fe fef8 	bl	800724c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008460:	4b2d      	ldr	r3, [pc, #180]	; (8008518 <xTaskResumeAll+0x124>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	429a      	cmp	r2, r3
 8008466:	d903      	bls.n	8008470 <xTaskResumeAll+0x7c>
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800846c:	4a2a      	ldr	r2, [pc, #168]	; (8008518 <xTaskResumeAll+0x124>)
 800846e:	6013      	str	r3, [r2, #0]
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008474:	4613      	mov	r3, r2
 8008476:	009b      	lsls	r3, r3, #2
 8008478:	4413      	add	r3, r2
 800847a:	009b      	lsls	r3, r3, #2
 800847c:	4a27      	ldr	r2, [pc, #156]	; (800851c <xTaskResumeAll+0x128>)
 800847e:	441a      	add	r2, r3
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	3304      	adds	r3, #4
 8008484:	4619      	mov	r1, r3
 8008486:	4610      	mov	r0, r2
 8008488:	f7fe fe83 	bl	8007192 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008490:	4b23      	ldr	r3, [pc, #140]	; (8008520 <xTaskResumeAll+0x12c>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008496:	429a      	cmp	r2, r3
 8008498:	d302      	bcc.n	80084a0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800849a:	4b22      	ldr	r3, [pc, #136]	; (8008524 <xTaskResumeAll+0x130>)
 800849c:	2201      	movs	r2, #1
 800849e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80084a0:	4b1c      	ldr	r3, [pc, #112]	; (8008514 <xTaskResumeAll+0x120>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d1cb      	bne.n	8008440 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d001      	beq.n	80084b2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80084ae:	f000 fb5f 	bl	8008b70 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80084b2:	4b1d      	ldr	r3, [pc, #116]	; (8008528 <xTaskResumeAll+0x134>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d010      	beq.n	80084e0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80084be:	f000 f847 	bl	8008550 <xTaskIncrementTick>
 80084c2:	4603      	mov	r3, r0
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d002      	beq.n	80084ce <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80084c8:	4b16      	ldr	r3, [pc, #88]	; (8008524 <xTaskResumeAll+0x130>)
 80084ca:	2201      	movs	r2, #1
 80084cc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	3b01      	subs	r3, #1
 80084d2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d1f1      	bne.n	80084be <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80084da:	4b13      	ldr	r3, [pc, #76]	; (8008528 <xTaskResumeAll+0x134>)
 80084dc:	2200      	movs	r2, #0
 80084de:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80084e0:	4b10      	ldr	r3, [pc, #64]	; (8008524 <xTaskResumeAll+0x130>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d009      	beq.n	80084fc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80084e8:	2301      	movs	r3, #1
 80084ea:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80084ec:	4b0f      	ldr	r3, [pc, #60]	; (800852c <xTaskResumeAll+0x138>)
 80084ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084f2:	601a      	str	r2, [r3, #0]
 80084f4:	f3bf 8f4f 	dsb	sy
 80084f8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80084fc:	f001 f8e2 	bl	80096c4 <vPortExitCritical>

	return xAlreadyYielded;
 8008500:	68bb      	ldr	r3, [r7, #8]
}
 8008502:	4618      	mov	r0, r3
 8008504:	3710      	adds	r7, #16
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}
 800850a:	bf00      	nop
 800850c:	200010f8 	.word	0x200010f8
 8008510:	200010d0 	.word	0x200010d0
 8008514:	20001090 	.word	0x20001090
 8008518:	200010d8 	.word	0x200010d8
 800851c:	20000c00 	.word	0x20000c00
 8008520:	20000bfc 	.word	0x20000bfc
 8008524:	200010e4 	.word	0x200010e4
 8008528:	200010e0 	.word	0x200010e0
 800852c:	e000ed04 	.word	0xe000ed04

08008530 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008530:	b480      	push	{r7}
 8008532:	b083      	sub	sp, #12
 8008534:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008536:	4b05      	ldr	r3, [pc, #20]	; (800854c <xTaskGetTickCount+0x1c>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800853c:	687b      	ldr	r3, [r7, #4]
}
 800853e:	4618      	mov	r0, r3
 8008540:	370c      	adds	r7, #12
 8008542:	46bd      	mov	sp, r7
 8008544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008548:	4770      	bx	lr
 800854a:	bf00      	nop
 800854c:	200010d4 	.word	0x200010d4

08008550 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b086      	sub	sp, #24
 8008554:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008556:	2300      	movs	r3, #0
 8008558:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800855a:	4b4f      	ldr	r3, [pc, #316]	; (8008698 <xTaskIncrementTick+0x148>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	2b00      	cmp	r3, #0
 8008560:	f040 808f 	bne.w	8008682 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008564:	4b4d      	ldr	r3, [pc, #308]	; (800869c <xTaskIncrementTick+0x14c>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	3301      	adds	r3, #1
 800856a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800856c:	4a4b      	ldr	r2, [pc, #300]	; (800869c <xTaskIncrementTick+0x14c>)
 800856e:	693b      	ldr	r3, [r7, #16]
 8008570:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d120      	bne.n	80085ba <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008578:	4b49      	ldr	r3, [pc, #292]	; (80086a0 <xTaskIncrementTick+0x150>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d00a      	beq.n	8008598 <xTaskIncrementTick+0x48>
	__asm volatile
 8008582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008586:	f383 8811 	msr	BASEPRI, r3
 800858a:	f3bf 8f6f 	isb	sy
 800858e:	f3bf 8f4f 	dsb	sy
 8008592:	603b      	str	r3, [r7, #0]
}
 8008594:	bf00      	nop
 8008596:	e7fe      	b.n	8008596 <xTaskIncrementTick+0x46>
 8008598:	4b41      	ldr	r3, [pc, #260]	; (80086a0 <xTaskIncrementTick+0x150>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	60fb      	str	r3, [r7, #12]
 800859e:	4b41      	ldr	r3, [pc, #260]	; (80086a4 <xTaskIncrementTick+0x154>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	4a3f      	ldr	r2, [pc, #252]	; (80086a0 <xTaskIncrementTick+0x150>)
 80085a4:	6013      	str	r3, [r2, #0]
 80085a6:	4a3f      	ldr	r2, [pc, #252]	; (80086a4 <xTaskIncrementTick+0x154>)
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	6013      	str	r3, [r2, #0]
 80085ac:	4b3e      	ldr	r3, [pc, #248]	; (80086a8 <xTaskIncrementTick+0x158>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	3301      	adds	r3, #1
 80085b2:	4a3d      	ldr	r2, [pc, #244]	; (80086a8 <xTaskIncrementTick+0x158>)
 80085b4:	6013      	str	r3, [r2, #0]
 80085b6:	f000 fadb 	bl	8008b70 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80085ba:	4b3c      	ldr	r3, [pc, #240]	; (80086ac <xTaskIncrementTick+0x15c>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	693a      	ldr	r2, [r7, #16]
 80085c0:	429a      	cmp	r2, r3
 80085c2:	d349      	bcc.n	8008658 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80085c4:	4b36      	ldr	r3, [pc, #216]	; (80086a0 <xTaskIncrementTick+0x150>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d104      	bne.n	80085d8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085ce:	4b37      	ldr	r3, [pc, #220]	; (80086ac <xTaskIncrementTick+0x15c>)
 80085d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80085d4:	601a      	str	r2, [r3, #0]
					break;
 80085d6:	e03f      	b.n	8008658 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085d8:	4b31      	ldr	r3, [pc, #196]	; (80086a0 <xTaskIncrementTick+0x150>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	68db      	ldr	r3, [r3, #12]
 80085de:	68db      	ldr	r3, [r3, #12]
 80085e0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	685b      	ldr	r3, [r3, #4]
 80085e6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80085e8:	693a      	ldr	r2, [r7, #16]
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	429a      	cmp	r2, r3
 80085ee:	d203      	bcs.n	80085f8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80085f0:	4a2e      	ldr	r2, [pc, #184]	; (80086ac <xTaskIncrementTick+0x15c>)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80085f6:	e02f      	b.n	8008658 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	3304      	adds	r3, #4
 80085fc:	4618      	mov	r0, r3
 80085fe:	f7fe fe25 	bl	800724c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008606:	2b00      	cmp	r3, #0
 8008608:	d004      	beq.n	8008614 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	3318      	adds	r3, #24
 800860e:	4618      	mov	r0, r3
 8008610:	f7fe fe1c 	bl	800724c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008618:	4b25      	ldr	r3, [pc, #148]	; (80086b0 <xTaskIncrementTick+0x160>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	429a      	cmp	r2, r3
 800861e:	d903      	bls.n	8008628 <xTaskIncrementTick+0xd8>
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008624:	4a22      	ldr	r2, [pc, #136]	; (80086b0 <xTaskIncrementTick+0x160>)
 8008626:	6013      	str	r3, [r2, #0]
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800862c:	4613      	mov	r3, r2
 800862e:	009b      	lsls	r3, r3, #2
 8008630:	4413      	add	r3, r2
 8008632:	009b      	lsls	r3, r3, #2
 8008634:	4a1f      	ldr	r2, [pc, #124]	; (80086b4 <xTaskIncrementTick+0x164>)
 8008636:	441a      	add	r2, r3
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	3304      	adds	r3, #4
 800863c:	4619      	mov	r1, r3
 800863e:	4610      	mov	r0, r2
 8008640:	f7fe fda7 	bl	8007192 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008648:	4b1b      	ldr	r3, [pc, #108]	; (80086b8 <xTaskIncrementTick+0x168>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800864e:	429a      	cmp	r2, r3
 8008650:	d3b8      	bcc.n	80085c4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008652:	2301      	movs	r3, #1
 8008654:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008656:	e7b5      	b.n	80085c4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008658:	4b17      	ldr	r3, [pc, #92]	; (80086b8 <xTaskIncrementTick+0x168>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800865e:	4915      	ldr	r1, [pc, #84]	; (80086b4 <xTaskIncrementTick+0x164>)
 8008660:	4613      	mov	r3, r2
 8008662:	009b      	lsls	r3, r3, #2
 8008664:	4413      	add	r3, r2
 8008666:	009b      	lsls	r3, r3, #2
 8008668:	440b      	add	r3, r1
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	2b01      	cmp	r3, #1
 800866e:	d901      	bls.n	8008674 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008670:	2301      	movs	r3, #1
 8008672:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008674:	4b11      	ldr	r3, [pc, #68]	; (80086bc <xTaskIncrementTick+0x16c>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d007      	beq.n	800868c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800867c:	2301      	movs	r3, #1
 800867e:	617b      	str	r3, [r7, #20]
 8008680:	e004      	b.n	800868c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008682:	4b0f      	ldr	r3, [pc, #60]	; (80086c0 <xTaskIncrementTick+0x170>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	3301      	adds	r3, #1
 8008688:	4a0d      	ldr	r2, [pc, #52]	; (80086c0 <xTaskIncrementTick+0x170>)
 800868a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800868c:	697b      	ldr	r3, [r7, #20]
}
 800868e:	4618      	mov	r0, r3
 8008690:	3718      	adds	r7, #24
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}
 8008696:	bf00      	nop
 8008698:	200010f8 	.word	0x200010f8
 800869c:	200010d4 	.word	0x200010d4
 80086a0:	20001088 	.word	0x20001088
 80086a4:	2000108c 	.word	0x2000108c
 80086a8:	200010e8 	.word	0x200010e8
 80086ac:	200010f0 	.word	0x200010f0
 80086b0:	200010d8 	.word	0x200010d8
 80086b4:	20000c00 	.word	0x20000c00
 80086b8:	20000bfc 	.word	0x20000bfc
 80086bc:	200010e4 	.word	0x200010e4
 80086c0:	200010e0 	.word	0x200010e0

080086c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80086c4:	b480      	push	{r7}
 80086c6:	b085      	sub	sp, #20
 80086c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80086ca:	4b2a      	ldr	r3, [pc, #168]	; (8008774 <vTaskSwitchContext+0xb0>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d003      	beq.n	80086da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80086d2:	4b29      	ldr	r3, [pc, #164]	; (8008778 <vTaskSwitchContext+0xb4>)
 80086d4:	2201      	movs	r2, #1
 80086d6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80086d8:	e046      	b.n	8008768 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80086da:	4b27      	ldr	r3, [pc, #156]	; (8008778 <vTaskSwitchContext+0xb4>)
 80086dc:	2200      	movs	r2, #0
 80086de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086e0:	4b26      	ldr	r3, [pc, #152]	; (800877c <vTaskSwitchContext+0xb8>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	60fb      	str	r3, [r7, #12]
 80086e6:	e010      	b.n	800870a <vTaskSwitchContext+0x46>
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d10a      	bne.n	8008704 <vTaskSwitchContext+0x40>
	__asm volatile
 80086ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086f2:	f383 8811 	msr	BASEPRI, r3
 80086f6:	f3bf 8f6f 	isb	sy
 80086fa:	f3bf 8f4f 	dsb	sy
 80086fe:	607b      	str	r3, [r7, #4]
}
 8008700:	bf00      	nop
 8008702:	e7fe      	b.n	8008702 <vTaskSwitchContext+0x3e>
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	3b01      	subs	r3, #1
 8008708:	60fb      	str	r3, [r7, #12]
 800870a:	491d      	ldr	r1, [pc, #116]	; (8008780 <vTaskSwitchContext+0xbc>)
 800870c:	68fa      	ldr	r2, [r7, #12]
 800870e:	4613      	mov	r3, r2
 8008710:	009b      	lsls	r3, r3, #2
 8008712:	4413      	add	r3, r2
 8008714:	009b      	lsls	r3, r3, #2
 8008716:	440b      	add	r3, r1
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d0e4      	beq.n	80086e8 <vTaskSwitchContext+0x24>
 800871e:	68fa      	ldr	r2, [r7, #12]
 8008720:	4613      	mov	r3, r2
 8008722:	009b      	lsls	r3, r3, #2
 8008724:	4413      	add	r3, r2
 8008726:	009b      	lsls	r3, r3, #2
 8008728:	4a15      	ldr	r2, [pc, #84]	; (8008780 <vTaskSwitchContext+0xbc>)
 800872a:	4413      	add	r3, r2
 800872c:	60bb      	str	r3, [r7, #8]
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	685b      	ldr	r3, [r3, #4]
 8008732:	685a      	ldr	r2, [r3, #4]
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	605a      	str	r2, [r3, #4]
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	685a      	ldr	r2, [r3, #4]
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	3308      	adds	r3, #8
 8008740:	429a      	cmp	r2, r3
 8008742:	d104      	bne.n	800874e <vTaskSwitchContext+0x8a>
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	685b      	ldr	r3, [r3, #4]
 8008748:	685a      	ldr	r2, [r3, #4]
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	605a      	str	r2, [r3, #4]
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	685b      	ldr	r3, [r3, #4]
 8008752:	68db      	ldr	r3, [r3, #12]
 8008754:	4a0b      	ldr	r2, [pc, #44]	; (8008784 <vTaskSwitchContext+0xc0>)
 8008756:	6013      	str	r3, [r2, #0]
 8008758:	4a08      	ldr	r2, [pc, #32]	; (800877c <vTaskSwitchContext+0xb8>)
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800875e:	4b09      	ldr	r3, [pc, #36]	; (8008784 <vTaskSwitchContext+0xc0>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	3354      	adds	r3, #84	; 0x54
 8008764:	4a08      	ldr	r2, [pc, #32]	; (8008788 <vTaskSwitchContext+0xc4>)
 8008766:	6013      	str	r3, [r2, #0]
}
 8008768:	bf00      	nop
 800876a:	3714      	adds	r7, #20
 800876c:	46bd      	mov	sp, r7
 800876e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008772:	4770      	bx	lr
 8008774:	200010f8 	.word	0x200010f8
 8008778:	200010e4 	.word	0x200010e4
 800877c:	200010d8 	.word	0x200010d8
 8008780:	20000c00 	.word	0x20000c00
 8008784:	20000bfc 	.word	0x20000bfc
 8008788:	20000068 	.word	0x20000068

0800878c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b084      	sub	sp, #16
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d10a      	bne.n	80087b2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800879c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087a0:	f383 8811 	msr	BASEPRI, r3
 80087a4:	f3bf 8f6f 	isb	sy
 80087a8:	f3bf 8f4f 	dsb	sy
 80087ac:	60fb      	str	r3, [r7, #12]
}
 80087ae:	bf00      	nop
 80087b0:	e7fe      	b.n	80087b0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80087b2:	4b07      	ldr	r3, [pc, #28]	; (80087d0 <vTaskPlaceOnEventList+0x44>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	3318      	adds	r3, #24
 80087b8:	4619      	mov	r1, r3
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f7fe fd0d 	bl	80071da <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80087c0:	2101      	movs	r1, #1
 80087c2:	6838      	ldr	r0, [r7, #0]
 80087c4:	f000 fa80 	bl	8008cc8 <prvAddCurrentTaskToDelayedList>
}
 80087c8:	bf00      	nop
 80087ca:	3710      	adds	r7, #16
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}
 80087d0:	20000bfc 	.word	0x20000bfc

080087d4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b086      	sub	sp, #24
 80087d8:	af00      	add	r7, sp, #0
 80087da:	60f8      	str	r0, [r7, #12]
 80087dc:	60b9      	str	r1, [r7, #8]
 80087de:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d10a      	bne.n	80087fc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80087e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ea:	f383 8811 	msr	BASEPRI, r3
 80087ee:	f3bf 8f6f 	isb	sy
 80087f2:	f3bf 8f4f 	dsb	sy
 80087f6:	617b      	str	r3, [r7, #20]
}
 80087f8:	bf00      	nop
 80087fa:	e7fe      	b.n	80087fa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80087fc:	4b0a      	ldr	r3, [pc, #40]	; (8008828 <vTaskPlaceOnEventListRestricted+0x54>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	3318      	adds	r3, #24
 8008802:	4619      	mov	r1, r3
 8008804:	68f8      	ldr	r0, [r7, #12]
 8008806:	f7fe fcc4 	bl	8007192 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d002      	beq.n	8008816 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008810:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008814:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008816:	6879      	ldr	r1, [r7, #4]
 8008818:	68b8      	ldr	r0, [r7, #8]
 800881a:	f000 fa55 	bl	8008cc8 <prvAddCurrentTaskToDelayedList>
	}
 800881e:	bf00      	nop
 8008820:	3718      	adds	r7, #24
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}
 8008826:	bf00      	nop
 8008828:	20000bfc 	.word	0x20000bfc

0800882c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b086      	sub	sp, #24
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	68db      	ldr	r3, [r3, #12]
 8008838:	68db      	ldr	r3, [r3, #12]
 800883a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d10a      	bne.n	8008858 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008846:	f383 8811 	msr	BASEPRI, r3
 800884a:	f3bf 8f6f 	isb	sy
 800884e:	f3bf 8f4f 	dsb	sy
 8008852:	60fb      	str	r3, [r7, #12]
}
 8008854:	bf00      	nop
 8008856:	e7fe      	b.n	8008856 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008858:	693b      	ldr	r3, [r7, #16]
 800885a:	3318      	adds	r3, #24
 800885c:	4618      	mov	r0, r3
 800885e:	f7fe fcf5 	bl	800724c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008862:	4b1e      	ldr	r3, [pc, #120]	; (80088dc <xTaskRemoveFromEventList+0xb0>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d11d      	bne.n	80088a6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	3304      	adds	r3, #4
 800886e:	4618      	mov	r0, r3
 8008870:	f7fe fcec 	bl	800724c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008874:	693b      	ldr	r3, [r7, #16]
 8008876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008878:	4b19      	ldr	r3, [pc, #100]	; (80088e0 <xTaskRemoveFromEventList+0xb4>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	429a      	cmp	r2, r3
 800887e:	d903      	bls.n	8008888 <xTaskRemoveFromEventList+0x5c>
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008884:	4a16      	ldr	r2, [pc, #88]	; (80088e0 <xTaskRemoveFromEventList+0xb4>)
 8008886:	6013      	str	r3, [r2, #0]
 8008888:	693b      	ldr	r3, [r7, #16]
 800888a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800888c:	4613      	mov	r3, r2
 800888e:	009b      	lsls	r3, r3, #2
 8008890:	4413      	add	r3, r2
 8008892:	009b      	lsls	r3, r3, #2
 8008894:	4a13      	ldr	r2, [pc, #76]	; (80088e4 <xTaskRemoveFromEventList+0xb8>)
 8008896:	441a      	add	r2, r3
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	3304      	adds	r3, #4
 800889c:	4619      	mov	r1, r3
 800889e:	4610      	mov	r0, r2
 80088a0:	f7fe fc77 	bl	8007192 <vListInsertEnd>
 80088a4:	e005      	b.n	80088b2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	3318      	adds	r3, #24
 80088aa:	4619      	mov	r1, r3
 80088ac:	480e      	ldr	r0, [pc, #56]	; (80088e8 <xTaskRemoveFromEventList+0xbc>)
 80088ae:	f7fe fc70 	bl	8007192 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088b6:	4b0d      	ldr	r3, [pc, #52]	; (80088ec <xTaskRemoveFromEventList+0xc0>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088bc:	429a      	cmp	r2, r3
 80088be:	d905      	bls.n	80088cc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80088c0:	2301      	movs	r3, #1
 80088c2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80088c4:	4b0a      	ldr	r3, [pc, #40]	; (80088f0 <xTaskRemoveFromEventList+0xc4>)
 80088c6:	2201      	movs	r2, #1
 80088c8:	601a      	str	r2, [r3, #0]
 80088ca:	e001      	b.n	80088d0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80088cc:	2300      	movs	r3, #0
 80088ce:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80088d0:	697b      	ldr	r3, [r7, #20]
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3718      	adds	r7, #24
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}
 80088da:	bf00      	nop
 80088dc:	200010f8 	.word	0x200010f8
 80088e0:	200010d8 	.word	0x200010d8
 80088e4:	20000c00 	.word	0x20000c00
 80088e8:	20001090 	.word	0x20001090
 80088ec:	20000bfc 	.word	0x20000bfc
 80088f0:	200010e4 	.word	0x200010e4

080088f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80088f4:	b480      	push	{r7}
 80088f6:	b083      	sub	sp, #12
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80088fc:	4b06      	ldr	r3, [pc, #24]	; (8008918 <vTaskInternalSetTimeOutState+0x24>)
 80088fe:	681a      	ldr	r2, [r3, #0]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008904:	4b05      	ldr	r3, [pc, #20]	; (800891c <vTaskInternalSetTimeOutState+0x28>)
 8008906:	681a      	ldr	r2, [r3, #0]
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	605a      	str	r2, [r3, #4]
}
 800890c:	bf00      	nop
 800890e:	370c      	adds	r7, #12
 8008910:	46bd      	mov	sp, r7
 8008912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008916:	4770      	bx	lr
 8008918:	200010e8 	.word	0x200010e8
 800891c:	200010d4 	.word	0x200010d4

08008920 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b088      	sub	sp, #32
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
 8008928:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d10a      	bne.n	8008946 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008934:	f383 8811 	msr	BASEPRI, r3
 8008938:	f3bf 8f6f 	isb	sy
 800893c:	f3bf 8f4f 	dsb	sy
 8008940:	613b      	str	r3, [r7, #16]
}
 8008942:	bf00      	nop
 8008944:	e7fe      	b.n	8008944 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d10a      	bne.n	8008962 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800894c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008950:	f383 8811 	msr	BASEPRI, r3
 8008954:	f3bf 8f6f 	isb	sy
 8008958:	f3bf 8f4f 	dsb	sy
 800895c:	60fb      	str	r3, [r7, #12]
}
 800895e:	bf00      	nop
 8008960:	e7fe      	b.n	8008960 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008962:	f000 fe7f 	bl	8009664 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008966:	4b1d      	ldr	r3, [pc, #116]	; (80089dc <xTaskCheckForTimeOut+0xbc>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	685b      	ldr	r3, [r3, #4]
 8008970:	69ba      	ldr	r2, [r7, #24]
 8008972:	1ad3      	subs	r3, r2, r3
 8008974:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800897e:	d102      	bne.n	8008986 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008980:	2300      	movs	r3, #0
 8008982:	61fb      	str	r3, [r7, #28]
 8008984:	e023      	b.n	80089ce <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681a      	ldr	r2, [r3, #0]
 800898a:	4b15      	ldr	r3, [pc, #84]	; (80089e0 <xTaskCheckForTimeOut+0xc0>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	429a      	cmp	r2, r3
 8008990:	d007      	beq.n	80089a2 <xTaskCheckForTimeOut+0x82>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	685b      	ldr	r3, [r3, #4]
 8008996:	69ba      	ldr	r2, [r7, #24]
 8008998:	429a      	cmp	r2, r3
 800899a:	d302      	bcc.n	80089a2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800899c:	2301      	movs	r3, #1
 800899e:	61fb      	str	r3, [r7, #28]
 80089a0:	e015      	b.n	80089ce <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	697a      	ldr	r2, [r7, #20]
 80089a8:	429a      	cmp	r2, r3
 80089aa:	d20b      	bcs.n	80089c4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	681a      	ldr	r2, [r3, #0]
 80089b0:	697b      	ldr	r3, [r7, #20]
 80089b2:	1ad2      	subs	r2, r2, r3
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f7ff ff9b 	bl	80088f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80089be:	2300      	movs	r3, #0
 80089c0:	61fb      	str	r3, [r7, #28]
 80089c2:	e004      	b.n	80089ce <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	2200      	movs	r2, #0
 80089c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80089ca:	2301      	movs	r3, #1
 80089cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80089ce:	f000 fe79 	bl	80096c4 <vPortExitCritical>

	return xReturn;
 80089d2:	69fb      	ldr	r3, [r7, #28]
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	3720      	adds	r7, #32
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}
 80089dc:	200010d4 	.word	0x200010d4
 80089e0:	200010e8 	.word	0x200010e8

080089e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80089e4:	b480      	push	{r7}
 80089e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80089e8:	4b03      	ldr	r3, [pc, #12]	; (80089f8 <vTaskMissedYield+0x14>)
 80089ea:	2201      	movs	r2, #1
 80089ec:	601a      	str	r2, [r3, #0]
}
 80089ee:	bf00      	nop
 80089f0:	46bd      	mov	sp, r7
 80089f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f6:	4770      	bx	lr
 80089f8:	200010e4 	.word	0x200010e4

080089fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b082      	sub	sp, #8
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008a04:	f000 f852 	bl	8008aac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008a08:	4b06      	ldr	r3, [pc, #24]	; (8008a24 <prvIdleTask+0x28>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	2b01      	cmp	r3, #1
 8008a0e:	d9f9      	bls.n	8008a04 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008a10:	4b05      	ldr	r3, [pc, #20]	; (8008a28 <prvIdleTask+0x2c>)
 8008a12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a16:	601a      	str	r2, [r3, #0]
 8008a18:	f3bf 8f4f 	dsb	sy
 8008a1c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008a20:	e7f0      	b.n	8008a04 <prvIdleTask+0x8>
 8008a22:	bf00      	nop
 8008a24:	20000c00 	.word	0x20000c00
 8008a28:	e000ed04 	.word	0xe000ed04

08008a2c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b082      	sub	sp, #8
 8008a30:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008a32:	2300      	movs	r3, #0
 8008a34:	607b      	str	r3, [r7, #4]
 8008a36:	e00c      	b.n	8008a52 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008a38:	687a      	ldr	r2, [r7, #4]
 8008a3a:	4613      	mov	r3, r2
 8008a3c:	009b      	lsls	r3, r3, #2
 8008a3e:	4413      	add	r3, r2
 8008a40:	009b      	lsls	r3, r3, #2
 8008a42:	4a12      	ldr	r2, [pc, #72]	; (8008a8c <prvInitialiseTaskLists+0x60>)
 8008a44:	4413      	add	r3, r2
 8008a46:	4618      	mov	r0, r3
 8008a48:	f7fe fb76 	bl	8007138 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	3301      	adds	r3, #1
 8008a50:	607b      	str	r3, [r7, #4]
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2b37      	cmp	r3, #55	; 0x37
 8008a56:	d9ef      	bls.n	8008a38 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008a58:	480d      	ldr	r0, [pc, #52]	; (8008a90 <prvInitialiseTaskLists+0x64>)
 8008a5a:	f7fe fb6d 	bl	8007138 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008a5e:	480d      	ldr	r0, [pc, #52]	; (8008a94 <prvInitialiseTaskLists+0x68>)
 8008a60:	f7fe fb6a 	bl	8007138 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008a64:	480c      	ldr	r0, [pc, #48]	; (8008a98 <prvInitialiseTaskLists+0x6c>)
 8008a66:	f7fe fb67 	bl	8007138 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008a6a:	480c      	ldr	r0, [pc, #48]	; (8008a9c <prvInitialiseTaskLists+0x70>)
 8008a6c:	f7fe fb64 	bl	8007138 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008a70:	480b      	ldr	r0, [pc, #44]	; (8008aa0 <prvInitialiseTaskLists+0x74>)
 8008a72:	f7fe fb61 	bl	8007138 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008a76:	4b0b      	ldr	r3, [pc, #44]	; (8008aa4 <prvInitialiseTaskLists+0x78>)
 8008a78:	4a05      	ldr	r2, [pc, #20]	; (8008a90 <prvInitialiseTaskLists+0x64>)
 8008a7a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008a7c:	4b0a      	ldr	r3, [pc, #40]	; (8008aa8 <prvInitialiseTaskLists+0x7c>)
 8008a7e:	4a05      	ldr	r2, [pc, #20]	; (8008a94 <prvInitialiseTaskLists+0x68>)
 8008a80:	601a      	str	r2, [r3, #0]
}
 8008a82:	bf00      	nop
 8008a84:	3708      	adds	r7, #8
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}
 8008a8a:	bf00      	nop
 8008a8c:	20000c00 	.word	0x20000c00
 8008a90:	20001060 	.word	0x20001060
 8008a94:	20001074 	.word	0x20001074
 8008a98:	20001090 	.word	0x20001090
 8008a9c:	200010a4 	.word	0x200010a4
 8008aa0:	200010bc 	.word	0x200010bc
 8008aa4:	20001088 	.word	0x20001088
 8008aa8:	2000108c 	.word	0x2000108c

08008aac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b082      	sub	sp, #8
 8008ab0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008ab2:	e019      	b.n	8008ae8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008ab4:	f000 fdd6 	bl	8009664 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ab8:	4b10      	ldr	r3, [pc, #64]	; (8008afc <prvCheckTasksWaitingTermination+0x50>)
 8008aba:	68db      	ldr	r3, [r3, #12]
 8008abc:	68db      	ldr	r3, [r3, #12]
 8008abe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	3304      	adds	r3, #4
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f7fe fbc1 	bl	800724c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008aca:	4b0d      	ldr	r3, [pc, #52]	; (8008b00 <prvCheckTasksWaitingTermination+0x54>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	3b01      	subs	r3, #1
 8008ad0:	4a0b      	ldr	r2, [pc, #44]	; (8008b00 <prvCheckTasksWaitingTermination+0x54>)
 8008ad2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008ad4:	4b0b      	ldr	r3, [pc, #44]	; (8008b04 <prvCheckTasksWaitingTermination+0x58>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	3b01      	subs	r3, #1
 8008ada:	4a0a      	ldr	r2, [pc, #40]	; (8008b04 <prvCheckTasksWaitingTermination+0x58>)
 8008adc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008ade:	f000 fdf1 	bl	80096c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f000 f810 	bl	8008b08 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008ae8:	4b06      	ldr	r3, [pc, #24]	; (8008b04 <prvCheckTasksWaitingTermination+0x58>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d1e1      	bne.n	8008ab4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008af0:	bf00      	nop
 8008af2:	bf00      	nop
 8008af4:	3708      	adds	r7, #8
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}
 8008afa:	bf00      	nop
 8008afc:	200010a4 	.word	0x200010a4
 8008b00:	200010d0 	.word	0x200010d0
 8008b04:	200010b8 	.word	0x200010b8

08008b08 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b084      	sub	sp, #16
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	3354      	adds	r3, #84	; 0x54
 8008b14:	4618      	mov	r0, r3
 8008b16:	f001 fe53 	bl	800a7c0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d108      	bne.n	8008b36 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f000 ff89 	bl	8009a40 <vPortFree>
				vPortFree( pxTCB );
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f000 ff86 	bl	8009a40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008b34:	e018      	b.n	8008b68 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008b3c:	2b01      	cmp	r3, #1
 8008b3e:	d103      	bne.n	8008b48 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f000 ff7d 	bl	8009a40 <vPortFree>
	}
 8008b46:	e00f      	b.n	8008b68 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008b4e:	2b02      	cmp	r3, #2
 8008b50:	d00a      	beq.n	8008b68 <prvDeleteTCB+0x60>
	__asm volatile
 8008b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b56:	f383 8811 	msr	BASEPRI, r3
 8008b5a:	f3bf 8f6f 	isb	sy
 8008b5e:	f3bf 8f4f 	dsb	sy
 8008b62:	60fb      	str	r3, [r7, #12]
}
 8008b64:	bf00      	nop
 8008b66:	e7fe      	b.n	8008b66 <prvDeleteTCB+0x5e>
	}
 8008b68:	bf00      	nop
 8008b6a:	3710      	adds	r7, #16
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}

08008b70 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008b70:	b480      	push	{r7}
 8008b72:	b083      	sub	sp, #12
 8008b74:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b76:	4b0c      	ldr	r3, [pc, #48]	; (8008ba8 <prvResetNextTaskUnblockTime+0x38>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d104      	bne.n	8008b8a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008b80:	4b0a      	ldr	r3, [pc, #40]	; (8008bac <prvResetNextTaskUnblockTime+0x3c>)
 8008b82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008b86:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008b88:	e008      	b.n	8008b9c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b8a:	4b07      	ldr	r3, [pc, #28]	; (8008ba8 <prvResetNextTaskUnblockTime+0x38>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	68db      	ldr	r3, [r3, #12]
 8008b90:	68db      	ldr	r3, [r3, #12]
 8008b92:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	685b      	ldr	r3, [r3, #4]
 8008b98:	4a04      	ldr	r2, [pc, #16]	; (8008bac <prvResetNextTaskUnblockTime+0x3c>)
 8008b9a:	6013      	str	r3, [r2, #0]
}
 8008b9c:	bf00      	nop
 8008b9e:	370c      	adds	r7, #12
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba6:	4770      	bx	lr
 8008ba8:	20001088 	.word	0x20001088
 8008bac:	200010f0 	.word	0x200010f0

08008bb0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b083      	sub	sp, #12
 8008bb4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008bb6:	4b0b      	ldr	r3, [pc, #44]	; (8008be4 <xTaskGetSchedulerState+0x34>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d102      	bne.n	8008bc4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	607b      	str	r3, [r7, #4]
 8008bc2:	e008      	b.n	8008bd6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008bc4:	4b08      	ldr	r3, [pc, #32]	; (8008be8 <xTaskGetSchedulerState+0x38>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d102      	bne.n	8008bd2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008bcc:	2302      	movs	r3, #2
 8008bce:	607b      	str	r3, [r7, #4]
 8008bd0:	e001      	b.n	8008bd6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008bd6:	687b      	ldr	r3, [r7, #4]
	}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	370c      	adds	r7, #12
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be2:	4770      	bx	lr
 8008be4:	200010dc 	.word	0x200010dc
 8008be8:	200010f8 	.word	0x200010f8

08008bec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b086      	sub	sp, #24
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d056      	beq.n	8008cb0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008c02:	4b2e      	ldr	r3, [pc, #184]	; (8008cbc <xTaskPriorityDisinherit+0xd0>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	693a      	ldr	r2, [r7, #16]
 8008c08:	429a      	cmp	r2, r3
 8008c0a:	d00a      	beq.n	8008c22 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c10:	f383 8811 	msr	BASEPRI, r3
 8008c14:	f3bf 8f6f 	isb	sy
 8008c18:	f3bf 8f4f 	dsb	sy
 8008c1c:	60fb      	str	r3, [r7, #12]
}
 8008c1e:	bf00      	nop
 8008c20:	e7fe      	b.n	8008c20 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008c22:	693b      	ldr	r3, [r7, #16]
 8008c24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d10a      	bne.n	8008c40 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c2e:	f383 8811 	msr	BASEPRI, r3
 8008c32:	f3bf 8f6f 	isb	sy
 8008c36:	f3bf 8f4f 	dsb	sy
 8008c3a:	60bb      	str	r3, [r7, #8]
}
 8008c3c:	bf00      	nop
 8008c3e:	e7fe      	b.n	8008c3e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008c40:	693b      	ldr	r3, [r7, #16]
 8008c42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c44:	1e5a      	subs	r2, r3, #1
 8008c46:	693b      	ldr	r3, [r7, #16]
 8008c48:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c52:	429a      	cmp	r2, r3
 8008c54:	d02c      	beq.n	8008cb0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008c56:	693b      	ldr	r3, [r7, #16]
 8008c58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d128      	bne.n	8008cb0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c5e:	693b      	ldr	r3, [r7, #16]
 8008c60:	3304      	adds	r3, #4
 8008c62:	4618      	mov	r0, r3
 8008c64:	f7fe faf2 	bl	800724c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008c6c:	693b      	ldr	r3, [r7, #16]
 8008c6e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c74:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008c78:	693b      	ldr	r3, [r7, #16]
 8008c7a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c80:	4b0f      	ldr	r3, [pc, #60]	; (8008cc0 <xTaskPriorityDisinherit+0xd4>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	429a      	cmp	r2, r3
 8008c86:	d903      	bls.n	8008c90 <xTaskPriorityDisinherit+0xa4>
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c8c:	4a0c      	ldr	r2, [pc, #48]	; (8008cc0 <xTaskPriorityDisinherit+0xd4>)
 8008c8e:	6013      	str	r3, [r2, #0]
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c94:	4613      	mov	r3, r2
 8008c96:	009b      	lsls	r3, r3, #2
 8008c98:	4413      	add	r3, r2
 8008c9a:	009b      	lsls	r3, r3, #2
 8008c9c:	4a09      	ldr	r2, [pc, #36]	; (8008cc4 <xTaskPriorityDisinherit+0xd8>)
 8008c9e:	441a      	add	r2, r3
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	3304      	adds	r3, #4
 8008ca4:	4619      	mov	r1, r3
 8008ca6:	4610      	mov	r0, r2
 8008ca8:	f7fe fa73 	bl	8007192 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008cac:	2301      	movs	r3, #1
 8008cae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008cb0:	697b      	ldr	r3, [r7, #20]
	}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3718      	adds	r7, #24
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}
 8008cba:	bf00      	nop
 8008cbc:	20000bfc 	.word	0x20000bfc
 8008cc0:	200010d8 	.word	0x200010d8
 8008cc4:	20000c00 	.word	0x20000c00

08008cc8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b084      	sub	sp, #16
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
 8008cd0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008cd2:	4b21      	ldr	r3, [pc, #132]	; (8008d58 <prvAddCurrentTaskToDelayedList+0x90>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008cd8:	4b20      	ldr	r3, [pc, #128]	; (8008d5c <prvAddCurrentTaskToDelayedList+0x94>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	3304      	adds	r3, #4
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f7fe fab4 	bl	800724c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008cea:	d10a      	bne.n	8008d02 <prvAddCurrentTaskToDelayedList+0x3a>
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d007      	beq.n	8008d02 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008cf2:	4b1a      	ldr	r3, [pc, #104]	; (8008d5c <prvAddCurrentTaskToDelayedList+0x94>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	3304      	adds	r3, #4
 8008cf8:	4619      	mov	r1, r3
 8008cfa:	4819      	ldr	r0, [pc, #100]	; (8008d60 <prvAddCurrentTaskToDelayedList+0x98>)
 8008cfc:	f7fe fa49 	bl	8007192 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008d00:	e026      	b.n	8008d50 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008d02:	68fa      	ldr	r2, [r7, #12]
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	4413      	add	r3, r2
 8008d08:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008d0a:	4b14      	ldr	r3, [pc, #80]	; (8008d5c <prvAddCurrentTaskToDelayedList+0x94>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	68ba      	ldr	r2, [r7, #8]
 8008d10:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008d12:	68ba      	ldr	r2, [r7, #8]
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	429a      	cmp	r2, r3
 8008d18:	d209      	bcs.n	8008d2e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d1a:	4b12      	ldr	r3, [pc, #72]	; (8008d64 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008d1c:	681a      	ldr	r2, [r3, #0]
 8008d1e:	4b0f      	ldr	r3, [pc, #60]	; (8008d5c <prvAddCurrentTaskToDelayedList+0x94>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	3304      	adds	r3, #4
 8008d24:	4619      	mov	r1, r3
 8008d26:	4610      	mov	r0, r2
 8008d28:	f7fe fa57 	bl	80071da <vListInsert>
}
 8008d2c:	e010      	b.n	8008d50 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d2e:	4b0e      	ldr	r3, [pc, #56]	; (8008d68 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008d30:	681a      	ldr	r2, [r3, #0]
 8008d32:	4b0a      	ldr	r3, [pc, #40]	; (8008d5c <prvAddCurrentTaskToDelayedList+0x94>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	3304      	adds	r3, #4
 8008d38:	4619      	mov	r1, r3
 8008d3a:	4610      	mov	r0, r2
 8008d3c:	f7fe fa4d 	bl	80071da <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008d40:	4b0a      	ldr	r3, [pc, #40]	; (8008d6c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	68ba      	ldr	r2, [r7, #8]
 8008d46:	429a      	cmp	r2, r3
 8008d48:	d202      	bcs.n	8008d50 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008d4a:	4a08      	ldr	r2, [pc, #32]	; (8008d6c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	6013      	str	r3, [r2, #0]
}
 8008d50:	bf00      	nop
 8008d52:	3710      	adds	r7, #16
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}
 8008d58:	200010d4 	.word	0x200010d4
 8008d5c:	20000bfc 	.word	0x20000bfc
 8008d60:	200010bc 	.word	0x200010bc
 8008d64:	2000108c 	.word	0x2000108c
 8008d68:	20001088 	.word	0x20001088
 8008d6c:	200010f0 	.word	0x200010f0

08008d70 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b08a      	sub	sp, #40	; 0x28
 8008d74:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008d76:	2300      	movs	r3, #0
 8008d78:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008d7a:	f000 fb07 	bl	800938c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008d7e:	4b1c      	ldr	r3, [pc, #112]	; (8008df0 <xTimerCreateTimerTask+0x80>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d021      	beq.n	8008dca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008d86:	2300      	movs	r3, #0
 8008d88:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008d8e:	1d3a      	adds	r2, r7, #4
 8008d90:	f107 0108 	add.w	r1, r7, #8
 8008d94:	f107 030c 	add.w	r3, r7, #12
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f7fe f9b3 	bl	8007104 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008d9e:	6879      	ldr	r1, [r7, #4]
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	68fa      	ldr	r2, [r7, #12]
 8008da4:	9202      	str	r2, [sp, #8]
 8008da6:	9301      	str	r3, [sp, #4]
 8008da8:	2302      	movs	r3, #2
 8008daa:	9300      	str	r3, [sp, #0]
 8008dac:	2300      	movs	r3, #0
 8008dae:	460a      	mov	r2, r1
 8008db0:	4910      	ldr	r1, [pc, #64]	; (8008df4 <xTimerCreateTimerTask+0x84>)
 8008db2:	4811      	ldr	r0, [pc, #68]	; (8008df8 <xTimerCreateTimerTask+0x88>)
 8008db4:	f7fe ff9a 	bl	8007cec <xTaskCreateStatic>
 8008db8:	4603      	mov	r3, r0
 8008dba:	4a10      	ldr	r2, [pc, #64]	; (8008dfc <xTimerCreateTimerTask+0x8c>)
 8008dbc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008dbe:	4b0f      	ldr	r3, [pc, #60]	; (8008dfc <xTimerCreateTimerTask+0x8c>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d001      	beq.n	8008dca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d10a      	bne.n	8008de6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd4:	f383 8811 	msr	BASEPRI, r3
 8008dd8:	f3bf 8f6f 	isb	sy
 8008ddc:	f3bf 8f4f 	dsb	sy
 8008de0:	613b      	str	r3, [r7, #16]
}
 8008de2:	bf00      	nop
 8008de4:	e7fe      	b.n	8008de4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008de6:	697b      	ldr	r3, [r7, #20]
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3718      	adds	r7, #24
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}
 8008df0:	2000112c 	.word	0x2000112c
 8008df4:	0800d2fc 	.word	0x0800d2fc
 8008df8:	08008f35 	.word	0x08008f35
 8008dfc:	20001130 	.word	0x20001130

08008e00 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b08a      	sub	sp, #40	; 0x28
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	60f8      	str	r0, [r7, #12]
 8008e08:	60b9      	str	r1, [r7, #8]
 8008e0a:	607a      	str	r2, [r7, #4]
 8008e0c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d10a      	bne.n	8008e2e <xTimerGenericCommand+0x2e>
	__asm volatile
 8008e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e1c:	f383 8811 	msr	BASEPRI, r3
 8008e20:	f3bf 8f6f 	isb	sy
 8008e24:	f3bf 8f4f 	dsb	sy
 8008e28:	623b      	str	r3, [r7, #32]
}
 8008e2a:	bf00      	nop
 8008e2c:	e7fe      	b.n	8008e2c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008e2e:	4b1a      	ldr	r3, [pc, #104]	; (8008e98 <xTimerGenericCommand+0x98>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d02a      	beq.n	8008e8c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	2b05      	cmp	r3, #5
 8008e46:	dc18      	bgt.n	8008e7a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008e48:	f7ff feb2 	bl	8008bb0 <xTaskGetSchedulerState>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	2b02      	cmp	r3, #2
 8008e50:	d109      	bne.n	8008e66 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008e52:	4b11      	ldr	r3, [pc, #68]	; (8008e98 <xTimerGenericCommand+0x98>)
 8008e54:	6818      	ldr	r0, [r3, #0]
 8008e56:	f107 0110 	add.w	r1, r7, #16
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e5e:	f7fe fb5d 	bl	800751c <xQueueGenericSend>
 8008e62:	6278      	str	r0, [r7, #36]	; 0x24
 8008e64:	e012      	b.n	8008e8c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008e66:	4b0c      	ldr	r3, [pc, #48]	; (8008e98 <xTimerGenericCommand+0x98>)
 8008e68:	6818      	ldr	r0, [r3, #0]
 8008e6a:	f107 0110 	add.w	r1, r7, #16
 8008e6e:	2300      	movs	r3, #0
 8008e70:	2200      	movs	r2, #0
 8008e72:	f7fe fb53 	bl	800751c <xQueueGenericSend>
 8008e76:	6278      	str	r0, [r7, #36]	; 0x24
 8008e78:	e008      	b.n	8008e8c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008e7a:	4b07      	ldr	r3, [pc, #28]	; (8008e98 <xTimerGenericCommand+0x98>)
 8008e7c:	6818      	ldr	r0, [r3, #0]
 8008e7e:	f107 0110 	add.w	r1, r7, #16
 8008e82:	2300      	movs	r3, #0
 8008e84:	683a      	ldr	r2, [r7, #0]
 8008e86:	f7fe fc47 	bl	8007718 <xQueueGenericSendFromISR>
 8008e8a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3728      	adds	r7, #40	; 0x28
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}
 8008e96:	bf00      	nop
 8008e98:	2000112c 	.word	0x2000112c

08008e9c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b088      	sub	sp, #32
 8008ea0:	af02      	add	r7, sp, #8
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ea6:	4b22      	ldr	r3, [pc, #136]	; (8008f30 <prvProcessExpiredTimer+0x94>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	68db      	ldr	r3, [r3, #12]
 8008eac:	68db      	ldr	r3, [r3, #12]
 8008eae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008eb0:	697b      	ldr	r3, [r7, #20]
 8008eb2:	3304      	adds	r3, #4
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f7fe f9c9 	bl	800724c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ec0:	f003 0304 	and.w	r3, r3, #4
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d022      	beq.n	8008f0e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008ec8:	697b      	ldr	r3, [r7, #20]
 8008eca:	699a      	ldr	r2, [r3, #24]
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	18d1      	adds	r1, r2, r3
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	683a      	ldr	r2, [r7, #0]
 8008ed4:	6978      	ldr	r0, [r7, #20]
 8008ed6:	f000 f8d1 	bl	800907c <prvInsertTimerInActiveList>
 8008eda:	4603      	mov	r3, r0
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d01f      	beq.n	8008f20 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	9300      	str	r3, [sp, #0]
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	687a      	ldr	r2, [r7, #4]
 8008ee8:	2100      	movs	r1, #0
 8008eea:	6978      	ldr	r0, [r7, #20]
 8008eec:	f7ff ff88 	bl	8008e00 <xTimerGenericCommand>
 8008ef0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d113      	bne.n	8008f20 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008efc:	f383 8811 	msr	BASEPRI, r3
 8008f00:	f3bf 8f6f 	isb	sy
 8008f04:	f3bf 8f4f 	dsb	sy
 8008f08:	60fb      	str	r3, [r7, #12]
}
 8008f0a:	bf00      	nop
 8008f0c:	e7fe      	b.n	8008f0c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008f0e:	697b      	ldr	r3, [r7, #20]
 8008f10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f14:	f023 0301 	bic.w	r3, r3, #1
 8008f18:	b2da      	uxtb	r2, r3
 8008f1a:	697b      	ldr	r3, [r7, #20]
 8008f1c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008f20:	697b      	ldr	r3, [r7, #20]
 8008f22:	6a1b      	ldr	r3, [r3, #32]
 8008f24:	6978      	ldr	r0, [r7, #20]
 8008f26:	4798      	blx	r3
}
 8008f28:	bf00      	nop
 8008f2a:	3718      	adds	r7, #24
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bd80      	pop	{r7, pc}
 8008f30:	20001124 	.word	0x20001124

08008f34 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b084      	sub	sp, #16
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008f3c:	f107 0308 	add.w	r3, r7, #8
 8008f40:	4618      	mov	r0, r3
 8008f42:	f000 f857 	bl	8008ff4 <prvGetNextExpireTime>
 8008f46:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	4619      	mov	r1, r3
 8008f4c:	68f8      	ldr	r0, [r7, #12]
 8008f4e:	f000 f803 	bl	8008f58 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008f52:	f000 f8d5 	bl	8009100 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008f56:	e7f1      	b.n	8008f3c <prvTimerTask+0x8>

08008f58 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b084      	sub	sp, #16
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
 8008f60:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008f62:	f7ff fa39 	bl	80083d8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008f66:	f107 0308 	add.w	r3, r7, #8
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f000 f866 	bl	800903c <prvSampleTimeNow>
 8008f70:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d130      	bne.n	8008fda <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d10a      	bne.n	8008f94 <prvProcessTimerOrBlockTask+0x3c>
 8008f7e:	687a      	ldr	r2, [r7, #4]
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	429a      	cmp	r2, r3
 8008f84:	d806      	bhi.n	8008f94 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008f86:	f7ff fa35 	bl	80083f4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008f8a:	68f9      	ldr	r1, [r7, #12]
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f7ff ff85 	bl	8008e9c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008f92:	e024      	b.n	8008fde <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d008      	beq.n	8008fac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008f9a:	4b13      	ldr	r3, [pc, #76]	; (8008fe8 <prvProcessTimerOrBlockTask+0x90>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d101      	bne.n	8008fa8 <prvProcessTimerOrBlockTask+0x50>
 8008fa4:	2301      	movs	r3, #1
 8008fa6:	e000      	b.n	8008faa <prvProcessTimerOrBlockTask+0x52>
 8008fa8:	2300      	movs	r3, #0
 8008faa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008fac:	4b0f      	ldr	r3, [pc, #60]	; (8008fec <prvProcessTimerOrBlockTask+0x94>)
 8008fae:	6818      	ldr	r0, [r3, #0]
 8008fb0:	687a      	ldr	r2, [r7, #4]
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	1ad3      	subs	r3, r2, r3
 8008fb6:	683a      	ldr	r2, [r7, #0]
 8008fb8:	4619      	mov	r1, r3
 8008fba:	f7fe fe63 	bl	8007c84 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008fbe:	f7ff fa19 	bl	80083f4 <xTaskResumeAll>
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d10a      	bne.n	8008fde <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008fc8:	4b09      	ldr	r3, [pc, #36]	; (8008ff0 <prvProcessTimerOrBlockTask+0x98>)
 8008fca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fce:	601a      	str	r2, [r3, #0]
 8008fd0:	f3bf 8f4f 	dsb	sy
 8008fd4:	f3bf 8f6f 	isb	sy
}
 8008fd8:	e001      	b.n	8008fde <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008fda:	f7ff fa0b 	bl	80083f4 <xTaskResumeAll>
}
 8008fde:	bf00      	nop
 8008fe0:	3710      	adds	r7, #16
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}
 8008fe6:	bf00      	nop
 8008fe8:	20001128 	.word	0x20001128
 8008fec:	2000112c 	.word	0x2000112c
 8008ff0:	e000ed04 	.word	0xe000ed04

08008ff4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b085      	sub	sp, #20
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008ffc:	4b0e      	ldr	r3, [pc, #56]	; (8009038 <prvGetNextExpireTime+0x44>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d101      	bne.n	800900a <prvGetNextExpireTime+0x16>
 8009006:	2201      	movs	r2, #1
 8009008:	e000      	b.n	800900c <prvGetNextExpireTime+0x18>
 800900a:	2200      	movs	r2, #0
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d105      	bne.n	8009024 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009018:	4b07      	ldr	r3, [pc, #28]	; (8009038 <prvGetNextExpireTime+0x44>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	68db      	ldr	r3, [r3, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	60fb      	str	r3, [r7, #12]
 8009022:	e001      	b.n	8009028 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009024:	2300      	movs	r3, #0
 8009026:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009028:	68fb      	ldr	r3, [r7, #12]
}
 800902a:	4618      	mov	r0, r3
 800902c:	3714      	adds	r7, #20
 800902e:	46bd      	mov	sp, r7
 8009030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009034:	4770      	bx	lr
 8009036:	bf00      	nop
 8009038:	20001124 	.word	0x20001124

0800903c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b084      	sub	sp, #16
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009044:	f7ff fa74 	bl	8008530 <xTaskGetTickCount>
 8009048:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800904a:	4b0b      	ldr	r3, [pc, #44]	; (8009078 <prvSampleTimeNow+0x3c>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	68fa      	ldr	r2, [r7, #12]
 8009050:	429a      	cmp	r2, r3
 8009052:	d205      	bcs.n	8009060 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009054:	f000 f936 	bl	80092c4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2201      	movs	r2, #1
 800905c:	601a      	str	r2, [r3, #0]
 800905e:	e002      	b.n	8009066 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2200      	movs	r2, #0
 8009064:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009066:	4a04      	ldr	r2, [pc, #16]	; (8009078 <prvSampleTimeNow+0x3c>)
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800906c:	68fb      	ldr	r3, [r7, #12]
}
 800906e:	4618      	mov	r0, r3
 8009070:	3710      	adds	r7, #16
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}
 8009076:	bf00      	nop
 8009078:	20001134 	.word	0x20001134

0800907c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b086      	sub	sp, #24
 8009080:	af00      	add	r7, sp, #0
 8009082:	60f8      	str	r0, [r7, #12]
 8009084:	60b9      	str	r1, [r7, #8]
 8009086:	607a      	str	r2, [r7, #4]
 8009088:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800908a:	2300      	movs	r3, #0
 800908c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	68ba      	ldr	r2, [r7, #8]
 8009092:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	68fa      	ldr	r2, [r7, #12]
 8009098:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800909a:	68ba      	ldr	r2, [r7, #8]
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	429a      	cmp	r2, r3
 80090a0:	d812      	bhi.n	80090c8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090a2:	687a      	ldr	r2, [r7, #4]
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	1ad2      	subs	r2, r2, r3
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	699b      	ldr	r3, [r3, #24]
 80090ac:	429a      	cmp	r2, r3
 80090ae:	d302      	bcc.n	80090b6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80090b0:	2301      	movs	r3, #1
 80090b2:	617b      	str	r3, [r7, #20]
 80090b4:	e01b      	b.n	80090ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80090b6:	4b10      	ldr	r3, [pc, #64]	; (80090f8 <prvInsertTimerInActiveList+0x7c>)
 80090b8:	681a      	ldr	r2, [r3, #0]
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	3304      	adds	r3, #4
 80090be:	4619      	mov	r1, r3
 80090c0:	4610      	mov	r0, r2
 80090c2:	f7fe f88a 	bl	80071da <vListInsert>
 80090c6:	e012      	b.n	80090ee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80090c8:	687a      	ldr	r2, [r7, #4]
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	429a      	cmp	r2, r3
 80090ce:	d206      	bcs.n	80090de <prvInsertTimerInActiveList+0x62>
 80090d0:	68ba      	ldr	r2, [r7, #8]
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	429a      	cmp	r2, r3
 80090d6:	d302      	bcc.n	80090de <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80090d8:	2301      	movs	r3, #1
 80090da:	617b      	str	r3, [r7, #20]
 80090dc:	e007      	b.n	80090ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80090de:	4b07      	ldr	r3, [pc, #28]	; (80090fc <prvInsertTimerInActiveList+0x80>)
 80090e0:	681a      	ldr	r2, [r3, #0]
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	3304      	adds	r3, #4
 80090e6:	4619      	mov	r1, r3
 80090e8:	4610      	mov	r0, r2
 80090ea:	f7fe f876 	bl	80071da <vListInsert>
		}
	}

	return xProcessTimerNow;
 80090ee:	697b      	ldr	r3, [r7, #20]
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	3718      	adds	r7, #24
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}
 80090f8:	20001128 	.word	0x20001128
 80090fc:	20001124 	.word	0x20001124

08009100 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b08e      	sub	sp, #56	; 0x38
 8009104:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009106:	e0ca      	b.n	800929e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2b00      	cmp	r3, #0
 800910c:	da18      	bge.n	8009140 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800910e:	1d3b      	adds	r3, r7, #4
 8009110:	3304      	adds	r3, #4
 8009112:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009116:	2b00      	cmp	r3, #0
 8009118:	d10a      	bne.n	8009130 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800911a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800911e:	f383 8811 	msr	BASEPRI, r3
 8009122:	f3bf 8f6f 	isb	sy
 8009126:	f3bf 8f4f 	dsb	sy
 800912a:	61fb      	str	r3, [r7, #28]
}
 800912c:	bf00      	nop
 800912e:	e7fe      	b.n	800912e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009136:	6850      	ldr	r0, [r2, #4]
 8009138:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800913a:	6892      	ldr	r2, [r2, #8]
 800913c:	4611      	mov	r1, r2
 800913e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2b00      	cmp	r3, #0
 8009144:	f2c0 80ab 	blt.w	800929e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800914c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800914e:	695b      	ldr	r3, [r3, #20]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d004      	beq.n	800915e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009156:	3304      	adds	r3, #4
 8009158:	4618      	mov	r0, r3
 800915a:	f7fe f877 	bl	800724c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800915e:	463b      	mov	r3, r7
 8009160:	4618      	mov	r0, r3
 8009162:	f7ff ff6b 	bl	800903c <prvSampleTimeNow>
 8009166:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2b09      	cmp	r3, #9
 800916c:	f200 8096 	bhi.w	800929c <prvProcessReceivedCommands+0x19c>
 8009170:	a201      	add	r2, pc, #4	; (adr r2, 8009178 <prvProcessReceivedCommands+0x78>)
 8009172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009176:	bf00      	nop
 8009178:	080091a1 	.word	0x080091a1
 800917c:	080091a1 	.word	0x080091a1
 8009180:	080091a1 	.word	0x080091a1
 8009184:	08009215 	.word	0x08009215
 8009188:	08009229 	.word	0x08009229
 800918c:	08009273 	.word	0x08009273
 8009190:	080091a1 	.word	0x080091a1
 8009194:	080091a1 	.word	0x080091a1
 8009198:	08009215 	.word	0x08009215
 800919c:	08009229 	.word	0x08009229
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80091a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80091a6:	f043 0301 	orr.w	r3, r3, #1
 80091aa:	b2da      	uxtb	r2, r3
 80091ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80091b2:	68ba      	ldr	r2, [r7, #8]
 80091b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091b6:	699b      	ldr	r3, [r3, #24]
 80091b8:	18d1      	adds	r1, r2, r3
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091c0:	f7ff ff5c 	bl	800907c <prvInsertTimerInActiveList>
 80091c4:	4603      	mov	r3, r0
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d069      	beq.n	800929e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80091ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091cc:	6a1b      	ldr	r3, [r3, #32]
 80091ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091d0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80091d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80091d8:	f003 0304 	and.w	r3, r3, #4
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d05e      	beq.n	800929e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80091e0:	68ba      	ldr	r2, [r7, #8]
 80091e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091e4:	699b      	ldr	r3, [r3, #24]
 80091e6:	441a      	add	r2, r3
 80091e8:	2300      	movs	r3, #0
 80091ea:	9300      	str	r3, [sp, #0]
 80091ec:	2300      	movs	r3, #0
 80091ee:	2100      	movs	r1, #0
 80091f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091f2:	f7ff fe05 	bl	8008e00 <xTimerGenericCommand>
 80091f6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80091f8:	6a3b      	ldr	r3, [r7, #32]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d14f      	bne.n	800929e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80091fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009202:	f383 8811 	msr	BASEPRI, r3
 8009206:	f3bf 8f6f 	isb	sy
 800920a:	f3bf 8f4f 	dsb	sy
 800920e:	61bb      	str	r3, [r7, #24]
}
 8009210:	bf00      	nop
 8009212:	e7fe      	b.n	8009212 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009216:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800921a:	f023 0301 	bic.w	r3, r3, #1
 800921e:	b2da      	uxtb	r2, r3
 8009220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009222:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009226:	e03a      	b.n	800929e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800922a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800922e:	f043 0301 	orr.w	r3, r3, #1
 8009232:	b2da      	uxtb	r2, r3
 8009234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009236:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800923a:	68ba      	ldr	r2, [r7, #8]
 800923c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800923e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009242:	699b      	ldr	r3, [r3, #24]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d10a      	bne.n	800925e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800924c:	f383 8811 	msr	BASEPRI, r3
 8009250:	f3bf 8f6f 	isb	sy
 8009254:	f3bf 8f4f 	dsb	sy
 8009258:	617b      	str	r3, [r7, #20]
}
 800925a:	bf00      	nop
 800925c:	e7fe      	b.n	800925c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800925e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009260:	699a      	ldr	r2, [r3, #24]
 8009262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009264:	18d1      	adds	r1, r2, r3
 8009266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009268:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800926a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800926c:	f7ff ff06 	bl	800907c <prvInsertTimerInActiveList>
					break;
 8009270:	e015      	b.n	800929e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009274:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009278:	f003 0302 	and.w	r3, r3, #2
 800927c:	2b00      	cmp	r3, #0
 800927e:	d103      	bne.n	8009288 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009280:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009282:	f000 fbdd 	bl	8009a40 <vPortFree>
 8009286:	e00a      	b.n	800929e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800928a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800928e:	f023 0301 	bic.w	r3, r3, #1
 8009292:	b2da      	uxtb	r2, r3
 8009294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009296:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800929a:	e000      	b.n	800929e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800929c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800929e:	4b08      	ldr	r3, [pc, #32]	; (80092c0 <prvProcessReceivedCommands+0x1c0>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	1d39      	adds	r1, r7, #4
 80092a4:	2200      	movs	r2, #0
 80092a6:	4618      	mov	r0, r3
 80092a8:	f7fe fad2 	bl	8007850 <xQueueReceive>
 80092ac:	4603      	mov	r3, r0
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	f47f af2a 	bne.w	8009108 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80092b4:	bf00      	nop
 80092b6:	bf00      	nop
 80092b8:	3730      	adds	r7, #48	; 0x30
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}
 80092be:	bf00      	nop
 80092c0:	2000112c 	.word	0x2000112c

080092c4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b088      	sub	sp, #32
 80092c8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80092ca:	e048      	b.n	800935e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80092cc:	4b2d      	ldr	r3, [pc, #180]	; (8009384 <prvSwitchTimerLists+0xc0>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	68db      	ldr	r3, [r3, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092d6:	4b2b      	ldr	r3, [pc, #172]	; (8009384 <prvSwitchTimerLists+0xc0>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	68db      	ldr	r3, [r3, #12]
 80092dc:	68db      	ldr	r3, [r3, #12]
 80092de:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	3304      	adds	r3, #4
 80092e4:	4618      	mov	r0, r3
 80092e6:	f7fd ffb1 	bl	800724c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	6a1b      	ldr	r3, [r3, #32]
 80092ee:	68f8      	ldr	r0, [r7, #12]
 80092f0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80092f8:	f003 0304 	and.w	r3, r3, #4
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d02e      	beq.n	800935e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	699b      	ldr	r3, [r3, #24]
 8009304:	693a      	ldr	r2, [r7, #16]
 8009306:	4413      	add	r3, r2
 8009308:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800930a:	68ba      	ldr	r2, [r7, #8]
 800930c:	693b      	ldr	r3, [r7, #16]
 800930e:	429a      	cmp	r2, r3
 8009310:	d90e      	bls.n	8009330 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	68ba      	ldr	r2, [r7, #8]
 8009316:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	68fa      	ldr	r2, [r7, #12]
 800931c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800931e:	4b19      	ldr	r3, [pc, #100]	; (8009384 <prvSwitchTimerLists+0xc0>)
 8009320:	681a      	ldr	r2, [r3, #0]
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	3304      	adds	r3, #4
 8009326:	4619      	mov	r1, r3
 8009328:	4610      	mov	r0, r2
 800932a:	f7fd ff56 	bl	80071da <vListInsert>
 800932e:	e016      	b.n	800935e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009330:	2300      	movs	r3, #0
 8009332:	9300      	str	r3, [sp, #0]
 8009334:	2300      	movs	r3, #0
 8009336:	693a      	ldr	r2, [r7, #16]
 8009338:	2100      	movs	r1, #0
 800933a:	68f8      	ldr	r0, [r7, #12]
 800933c:	f7ff fd60 	bl	8008e00 <xTimerGenericCommand>
 8009340:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d10a      	bne.n	800935e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800934c:	f383 8811 	msr	BASEPRI, r3
 8009350:	f3bf 8f6f 	isb	sy
 8009354:	f3bf 8f4f 	dsb	sy
 8009358:	603b      	str	r3, [r7, #0]
}
 800935a:	bf00      	nop
 800935c:	e7fe      	b.n	800935c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800935e:	4b09      	ldr	r3, [pc, #36]	; (8009384 <prvSwitchTimerLists+0xc0>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d1b1      	bne.n	80092cc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009368:	4b06      	ldr	r3, [pc, #24]	; (8009384 <prvSwitchTimerLists+0xc0>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800936e:	4b06      	ldr	r3, [pc, #24]	; (8009388 <prvSwitchTimerLists+0xc4>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	4a04      	ldr	r2, [pc, #16]	; (8009384 <prvSwitchTimerLists+0xc0>)
 8009374:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009376:	4a04      	ldr	r2, [pc, #16]	; (8009388 <prvSwitchTimerLists+0xc4>)
 8009378:	697b      	ldr	r3, [r7, #20]
 800937a:	6013      	str	r3, [r2, #0]
}
 800937c:	bf00      	nop
 800937e:	3718      	adds	r7, #24
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}
 8009384:	20001124 	.word	0x20001124
 8009388:	20001128 	.word	0x20001128

0800938c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b082      	sub	sp, #8
 8009390:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009392:	f000 f967 	bl	8009664 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009396:	4b15      	ldr	r3, [pc, #84]	; (80093ec <prvCheckForValidListAndQueue+0x60>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d120      	bne.n	80093e0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800939e:	4814      	ldr	r0, [pc, #80]	; (80093f0 <prvCheckForValidListAndQueue+0x64>)
 80093a0:	f7fd feca 	bl	8007138 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80093a4:	4813      	ldr	r0, [pc, #76]	; (80093f4 <prvCheckForValidListAndQueue+0x68>)
 80093a6:	f7fd fec7 	bl	8007138 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80093aa:	4b13      	ldr	r3, [pc, #76]	; (80093f8 <prvCheckForValidListAndQueue+0x6c>)
 80093ac:	4a10      	ldr	r2, [pc, #64]	; (80093f0 <prvCheckForValidListAndQueue+0x64>)
 80093ae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80093b0:	4b12      	ldr	r3, [pc, #72]	; (80093fc <prvCheckForValidListAndQueue+0x70>)
 80093b2:	4a10      	ldr	r2, [pc, #64]	; (80093f4 <prvCheckForValidListAndQueue+0x68>)
 80093b4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80093b6:	2300      	movs	r3, #0
 80093b8:	9300      	str	r3, [sp, #0]
 80093ba:	4b11      	ldr	r3, [pc, #68]	; (8009400 <prvCheckForValidListAndQueue+0x74>)
 80093bc:	4a11      	ldr	r2, [pc, #68]	; (8009404 <prvCheckForValidListAndQueue+0x78>)
 80093be:	2110      	movs	r1, #16
 80093c0:	200a      	movs	r0, #10
 80093c2:	f7fd ffd5 	bl	8007370 <xQueueGenericCreateStatic>
 80093c6:	4603      	mov	r3, r0
 80093c8:	4a08      	ldr	r2, [pc, #32]	; (80093ec <prvCheckForValidListAndQueue+0x60>)
 80093ca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80093cc:	4b07      	ldr	r3, [pc, #28]	; (80093ec <prvCheckForValidListAndQueue+0x60>)
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d005      	beq.n	80093e0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80093d4:	4b05      	ldr	r3, [pc, #20]	; (80093ec <prvCheckForValidListAndQueue+0x60>)
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	490b      	ldr	r1, [pc, #44]	; (8009408 <prvCheckForValidListAndQueue+0x7c>)
 80093da:	4618      	mov	r0, r3
 80093dc:	f7fe fc28 	bl	8007c30 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80093e0:	f000 f970 	bl	80096c4 <vPortExitCritical>
}
 80093e4:	bf00      	nop
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}
 80093ea:	bf00      	nop
 80093ec:	2000112c 	.word	0x2000112c
 80093f0:	200010fc 	.word	0x200010fc
 80093f4:	20001110 	.word	0x20001110
 80093f8:	20001124 	.word	0x20001124
 80093fc:	20001128 	.word	0x20001128
 8009400:	200011d8 	.word	0x200011d8
 8009404:	20001138 	.word	0x20001138
 8009408:	0800d304 	.word	0x0800d304

0800940c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800940c:	b480      	push	{r7}
 800940e:	b085      	sub	sp, #20
 8009410:	af00      	add	r7, sp, #0
 8009412:	60f8      	str	r0, [r7, #12]
 8009414:	60b9      	str	r1, [r7, #8]
 8009416:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	3b04      	subs	r3, #4
 800941c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009424:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	3b04      	subs	r3, #4
 800942a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	f023 0201 	bic.w	r2, r3, #1
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	3b04      	subs	r3, #4
 800943a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800943c:	4a0c      	ldr	r2, [pc, #48]	; (8009470 <pxPortInitialiseStack+0x64>)
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	3b14      	subs	r3, #20
 8009446:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009448:	687a      	ldr	r2, [r7, #4]
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	3b04      	subs	r3, #4
 8009452:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	f06f 0202 	mvn.w	r2, #2
 800945a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	3b20      	subs	r3, #32
 8009460:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009462:	68fb      	ldr	r3, [r7, #12]
}
 8009464:	4618      	mov	r0, r3
 8009466:	3714      	adds	r7, #20
 8009468:	46bd      	mov	sp, r7
 800946a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946e:	4770      	bx	lr
 8009470:	08009475 	.word	0x08009475

08009474 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009474:	b480      	push	{r7}
 8009476:	b085      	sub	sp, #20
 8009478:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800947a:	2300      	movs	r3, #0
 800947c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800947e:	4b12      	ldr	r3, [pc, #72]	; (80094c8 <prvTaskExitError+0x54>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009486:	d00a      	beq.n	800949e <prvTaskExitError+0x2a>
	__asm volatile
 8009488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800948c:	f383 8811 	msr	BASEPRI, r3
 8009490:	f3bf 8f6f 	isb	sy
 8009494:	f3bf 8f4f 	dsb	sy
 8009498:	60fb      	str	r3, [r7, #12]
}
 800949a:	bf00      	nop
 800949c:	e7fe      	b.n	800949c <prvTaskExitError+0x28>
	__asm volatile
 800949e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094a2:	f383 8811 	msr	BASEPRI, r3
 80094a6:	f3bf 8f6f 	isb	sy
 80094aa:	f3bf 8f4f 	dsb	sy
 80094ae:	60bb      	str	r3, [r7, #8]
}
 80094b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80094b2:	bf00      	nop
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d0fc      	beq.n	80094b4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80094ba:	bf00      	nop
 80094bc:	bf00      	nop
 80094be:	3714      	adds	r7, #20
 80094c0:	46bd      	mov	sp, r7
 80094c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c6:	4770      	bx	lr
 80094c8:	2000000c 	.word	0x2000000c
 80094cc:	00000000 	.word	0x00000000

080094d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80094d0:	4b07      	ldr	r3, [pc, #28]	; (80094f0 <pxCurrentTCBConst2>)
 80094d2:	6819      	ldr	r1, [r3, #0]
 80094d4:	6808      	ldr	r0, [r1, #0]
 80094d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094da:	f380 8809 	msr	PSP, r0
 80094de:	f3bf 8f6f 	isb	sy
 80094e2:	f04f 0000 	mov.w	r0, #0
 80094e6:	f380 8811 	msr	BASEPRI, r0
 80094ea:	4770      	bx	lr
 80094ec:	f3af 8000 	nop.w

080094f0 <pxCurrentTCBConst2>:
 80094f0:	20000bfc 	.word	0x20000bfc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80094f4:	bf00      	nop
 80094f6:	bf00      	nop

080094f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80094f8:	4808      	ldr	r0, [pc, #32]	; (800951c <prvPortStartFirstTask+0x24>)
 80094fa:	6800      	ldr	r0, [r0, #0]
 80094fc:	6800      	ldr	r0, [r0, #0]
 80094fe:	f380 8808 	msr	MSP, r0
 8009502:	f04f 0000 	mov.w	r0, #0
 8009506:	f380 8814 	msr	CONTROL, r0
 800950a:	b662      	cpsie	i
 800950c:	b661      	cpsie	f
 800950e:	f3bf 8f4f 	dsb	sy
 8009512:	f3bf 8f6f 	isb	sy
 8009516:	df00      	svc	0
 8009518:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800951a:	bf00      	nop
 800951c:	e000ed08 	.word	0xe000ed08

08009520 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b086      	sub	sp, #24
 8009524:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009526:	4b46      	ldr	r3, [pc, #280]	; (8009640 <xPortStartScheduler+0x120>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	4a46      	ldr	r2, [pc, #280]	; (8009644 <xPortStartScheduler+0x124>)
 800952c:	4293      	cmp	r3, r2
 800952e:	d10a      	bne.n	8009546 <xPortStartScheduler+0x26>
	__asm volatile
 8009530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009534:	f383 8811 	msr	BASEPRI, r3
 8009538:	f3bf 8f6f 	isb	sy
 800953c:	f3bf 8f4f 	dsb	sy
 8009540:	613b      	str	r3, [r7, #16]
}
 8009542:	bf00      	nop
 8009544:	e7fe      	b.n	8009544 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009546:	4b3e      	ldr	r3, [pc, #248]	; (8009640 <xPortStartScheduler+0x120>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	4a3f      	ldr	r2, [pc, #252]	; (8009648 <xPortStartScheduler+0x128>)
 800954c:	4293      	cmp	r3, r2
 800954e:	d10a      	bne.n	8009566 <xPortStartScheduler+0x46>
	__asm volatile
 8009550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009554:	f383 8811 	msr	BASEPRI, r3
 8009558:	f3bf 8f6f 	isb	sy
 800955c:	f3bf 8f4f 	dsb	sy
 8009560:	60fb      	str	r3, [r7, #12]
}
 8009562:	bf00      	nop
 8009564:	e7fe      	b.n	8009564 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009566:	4b39      	ldr	r3, [pc, #228]	; (800964c <xPortStartScheduler+0x12c>)
 8009568:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800956a:	697b      	ldr	r3, [r7, #20]
 800956c:	781b      	ldrb	r3, [r3, #0]
 800956e:	b2db      	uxtb	r3, r3
 8009570:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009572:	697b      	ldr	r3, [r7, #20]
 8009574:	22ff      	movs	r2, #255	; 0xff
 8009576:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009578:	697b      	ldr	r3, [r7, #20]
 800957a:	781b      	ldrb	r3, [r3, #0]
 800957c:	b2db      	uxtb	r3, r3
 800957e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009580:	78fb      	ldrb	r3, [r7, #3]
 8009582:	b2db      	uxtb	r3, r3
 8009584:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009588:	b2da      	uxtb	r2, r3
 800958a:	4b31      	ldr	r3, [pc, #196]	; (8009650 <xPortStartScheduler+0x130>)
 800958c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800958e:	4b31      	ldr	r3, [pc, #196]	; (8009654 <xPortStartScheduler+0x134>)
 8009590:	2207      	movs	r2, #7
 8009592:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009594:	e009      	b.n	80095aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009596:	4b2f      	ldr	r3, [pc, #188]	; (8009654 <xPortStartScheduler+0x134>)
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	3b01      	subs	r3, #1
 800959c:	4a2d      	ldr	r2, [pc, #180]	; (8009654 <xPortStartScheduler+0x134>)
 800959e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80095a0:	78fb      	ldrb	r3, [r7, #3]
 80095a2:	b2db      	uxtb	r3, r3
 80095a4:	005b      	lsls	r3, r3, #1
 80095a6:	b2db      	uxtb	r3, r3
 80095a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80095aa:	78fb      	ldrb	r3, [r7, #3]
 80095ac:	b2db      	uxtb	r3, r3
 80095ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095b2:	2b80      	cmp	r3, #128	; 0x80
 80095b4:	d0ef      	beq.n	8009596 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80095b6:	4b27      	ldr	r3, [pc, #156]	; (8009654 <xPortStartScheduler+0x134>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f1c3 0307 	rsb	r3, r3, #7
 80095be:	2b04      	cmp	r3, #4
 80095c0:	d00a      	beq.n	80095d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80095c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095c6:	f383 8811 	msr	BASEPRI, r3
 80095ca:	f3bf 8f6f 	isb	sy
 80095ce:	f3bf 8f4f 	dsb	sy
 80095d2:	60bb      	str	r3, [r7, #8]
}
 80095d4:	bf00      	nop
 80095d6:	e7fe      	b.n	80095d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80095d8:	4b1e      	ldr	r3, [pc, #120]	; (8009654 <xPortStartScheduler+0x134>)
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	021b      	lsls	r3, r3, #8
 80095de:	4a1d      	ldr	r2, [pc, #116]	; (8009654 <xPortStartScheduler+0x134>)
 80095e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80095e2:	4b1c      	ldr	r3, [pc, #112]	; (8009654 <xPortStartScheduler+0x134>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80095ea:	4a1a      	ldr	r2, [pc, #104]	; (8009654 <xPortStartScheduler+0x134>)
 80095ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	b2da      	uxtb	r2, r3
 80095f2:	697b      	ldr	r3, [r7, #20]
 80095f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80095f6:	4b18      	ldr	r3, [pc, #96]	; (8009658 <xPortStartScheduler+0x138>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	4a17      	ldr	r2, [pc, #92]	; (8009658 <xPortStartScheduler+0x138>)
 80095fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009600:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009602:	4b15      	ldr	r3, [pc, #84]	; (8009658 <xPortStartScheduler+0x138>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	4a14      	ldr	r2, [pc, #80]	; (8009658 <xPortStartScheduler+0x138>)
 8009608:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800960c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800960e:	f000 f8dd 	bl	80097cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009612:	4b12      	ldr	r3, [pc, #72]	; (800965c <xPortStartScheduler+0x13c>)
 8009614:	2200      	movs	r2, #0
 8009616:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009618:	f000 f8fc 	bl	8009814 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800961c:	4b10      	ldr	r3, [pc, #64]	; (8009660 <xPortStartScheduler+0x140>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	4a0f      	ldr	r2, [pc, #60]	; (8009660 <xPortStartScheduler+0x140>)
 8009622:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009626:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009628:	f7ff ff66 	bl	80094f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800962c:	f7ff f84a 	bl	80086c4 <vTaskSwitchContext>
	prvTaskExitError();
 8009630:	f7ff ff20 	bl	8009474 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009634:	2300      	movs	r3, #0
}
 8009636:	4618      	mov	r0, r3
 8009638:	3718      	adds	r7, #24
 800963a:	46bd      	mov	sp, r7
 800963c:	bd80      	pop	{r7, pc}
 800963e:	bf00      	nop
 8009640:	e000ed00 	.word	0xe000ed00
 8009644:	410fc271 	.word	0x410fc271
 8009648:	410fc270 	.word	0x410fc270
 800964c:	e000e400 	.word	0xe000e400
 8009650:	20001228 	.word	0x20001228
 8009654:	2000122c 	.word	0x2000122c
 8009658:	e000ed20 	.word	0xe000ed20
 800965c:	2000000c 	.word	0x2000000c
 8009660:	e000ef34 	.word	0xe000ef34

08009664 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009664:	b480      	push	{r7}
 8009666:	b083      	sub	sp, #12
 8009668:	af00      	add	r7, sp, #0
	__asm volatile
 800966a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800966e:	f383 8811 	msr	BASEPRI, r3
 8009672:	f3bf 8f6f 	isb	sy
 8009676:	f3bf 8f4f 	dsb	sy
 800967a:	607b      	str	r3, [r7, #4]
}
 800967c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800967e:	4b0f      	ldr	r3, [pc, #60]	; (80096bc <vPortEnterCritical+0x58>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	3301      	adds	r3, #1
 8009684:	4a0d      	ldr	r2, [pc, #52]	; (80096bc <vPortEnterCritical+0x58>)
 8009686:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009688:	4b0c      	ldr	r3, [pc, #48]	; (80096bc <vPortEnterCritical+0x58>)
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	2b01      	cmp	r3, #1
 800968e:	d10f      	bne.n	80096b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009690:	4b0b      	ldr	r3, [pc, #44]	; (80096c0 <vPortEnterCritical+0x5c>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	b2db      	uxtb	r3, r3
 8009696:	2b00      	cmp	r3, #0
 8009698:	d00a      	beq.n	80096b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800969a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800969e:	f383 8811 	msr	BASEPRI, r3
 80096a2:	f3bf 8f6f 	isb	sy
 80096a6:	f3bf 8f4f 	dsb	sy
 80096aa:	603b      	str	r3, [r7, #0]
}
 80096ac:	bf00      	nop
 80096ae:	e7fe      	b.n	80096ae <vPortEnterCritical+0x4a>
	}
}
 80096b0:	bf00      	nop
 80096b2:	370c      	adds	r7, #12
 80096b4:	46bd      	mov	sp, r7
 80096b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ba:	4770      	bx	lr
 80096bc:	2000000c 	.word	0x2000000c
 80096c0:	e000ed04 	.word	0xe000ed04

080096c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80096c4:	b480      	push	{r7}
 80096c6:	b083      	sub	sp, #12
 80096c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80096ca:	4b12      	ldr	r3, [pc, #72]	; (8009714 <vPortExitCritical+0x50>)
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d10a      	bne.n	80096e8 <vPortExitCritical+0x24>
	__asm volatile
 80096d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096d6:	f383 8811 	msr	BASEPRI, r3
 80096da:	f3bf 8f6f 	isb	sy
 80096de:	f3bf 8f4f 	dsb	sy
 80096e2:	607b      	str	r3, [r7, #4]
}
 80096e4:	bf00      	nop
 80096e6:	e7fe      	b.n	80096e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80096e8:	4b0a      	ldr	r3, [pc, #40]	; (8009714 <vPortExitCritical+0x50>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	3b01      	subs	r3, #1
 80096ee:	4a09      	ldr	r2, [pc, #36]	; (8009714 <vPortExitCritical+0x50>)
 80096f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80096f2:	4b08      	ldr	r3, [pc, #32]	; (8009714 <vPortExitCritical+0x50>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d105      	bne.n	8009706 <vPortExitCritical+0x42>
 80096fa:	2300      	movs	r3, #0
 80096fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	f383 8811 	msr	BASEPRI, r3
}
 8009704:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009706:	bf00      	nop
 8009708:	370c      	adds	r7, #12
 800970a:	46bd      	mov	sp, r7
 800970c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009710:	4770      	bx	lr
 8009712:	bf00      	nop
 8009714:	2000000c 	.word	0x2000000c
	...

08009720 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009720:	f3ef 8009 	mrs	r0, PSP
 8009724:	f3bf 8f6f 	isb	sy
 8009728:	4b15      	ldr	r3, [pc, #84]	; (8009780 <pxCurrentTCBConst>)
 800972a:	681a      	ldr	r2, [r3, #0]
 800972c:	f01e 0f10 	tst.w	lr, #16
 8009730:	bf08      	it	eq
 8009732:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009736:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800973a:	6010      	str	r0, [r2, #0]
 800973c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009740:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009744:	f380 8811 	msr	BASEPRI, r0
 8009748:	f3bf 8f4f 	dsb	sy
 800974c:	f3bf 8f6f 	isb	sy
 8009750:	f7fe ffb8 	bl	80086c4 <vTaskSwitchContext>
 8009754:	f04f 0000 	mov.w	r0, #0
 8009758:	f380 8811 	msr	BASEPRI, r0
 800975c:	bc09      	pop	{r0, r3}
 800975e:	6819      	ldr	r1, [r3, #0]
 8009760:	6808      	ldr	r0, [r1, #0]
 8009762:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009766:	f01e 0f10 	tst.w	lr, #16
 800976a:	bf08      	it	eq
 800976c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009770:	f380 8809 	msr	PSP, r0
 8009774:	f3bf 8f6f 	isb	sy
 8009778:	4770      	bx	lr
 800977a:	bf00      	nop
 800977c:	f3af 8000 	nop.w

08009780 <pxCurrentTCBConst>:
 8009780:	20000bfc 	.word	0x20000bfc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009784:	bf00      	nop
 8009786:	bf00      	nop

08009788 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b082      	sub	sp, #8
 800978c:	af00      	add	r7, sp, #0
	__asm volatile
 800978e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009792:	f383 8811 	msr	BASEPRI, r3
 8009796:	f3bf 8f6f 	isb	sy
 800979a:	f3bf 8f4f 	dsb	sy
 800979e:	607b      	str	r3, [r7, #4]
}
 80097a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80097a2:	f7fe fed5 	bl	8008550 <xTaskIncrementTick>
 80097a6:	4603      	mov	r3, r0
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d003      	beq.n	80097b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80097ac:	4b06      	ldr	r3, [pc, #24]	; (80097c8 <xPortSysTickHandler+0x40>)
 80097ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097b2:	601a      	str	r2, [r3, #0]
 80097b4:	2300      	movs	r3, #0
 80097b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	f383 8811 	msr	BASEPRI, r3
}
 80097be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80097c0:	bf00      	nop
 80097c2:	3708      	adds	r7, #8
 80097c4:	46bd      	mov	sp, r7
 80097c6:	bd80      	pop	{r7, pc}
 80097c8:	e000ed04 	.word	0xe000ed04

080097cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80097cc:	b480      	push	{r7}
 80097ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80097d0:	4b0b      	ldr	r3, [pc, #44]	; (8009800 <vPortSetupTimerInterrupt+0x34>)
 80097d2:	2200      	movs	r2, #0
 80097d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80097d6:	4b0b      	ldr	r3, [pc, #44]	; (8009804 <vPortSetupTimerInterrupt+0x38>)
 80097d8:	2200      	movs	r2, #0
 80097da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80097dc:	4b0a      	ldr	r3, [pc, #40]	; (8009808 <vPortSetupTimerInterrupt+0x3c>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	4a0a      	ldr	r2, [pc, #40]	; (800980c <vPortSetupTimerInterrupt+0x40>)
 80097e2:	fba2 2303 	umull	r2, r3, r2, r3
 80097e6:	099b      	lsrs	r3, r3, #6
 80097e8:	4a09      	ldr	r2, [pc, #36]	; (8009810 <vPortSetupTimerInterrupt+0x44>)
 80097ea:	3b01      	subs	r3, #1
 80097ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80097ee:	4b04      	ldr	r3, [pc, #16]	; (8009800 <vPortSetupTimerInterrupt+0x34>)
 80097f0:	2207      	movs	r2, #7
 80097f2:	601a      	str	r2, [r3, #0]
}
 80097f4:	bf00      	nop
 80097f6:	46bd      	mov	sp, r7
 80097f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fc:	4770      	bx	lr
 80097fe:	bf00      	nop
 8009800:	e000e010 	.word	0xe000e010
 8009804:	e000e018 	.word	0xe000e018
 8009808:	20000000 	.word	0x20000000
 800980c:	10624dd3 	.word	0x10624dd3
 8009810:	e000e014 	.word	0xe000e014

08009814 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009814:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009824 <vPortEnableVFP+0x10>
 8009818:	6801      	ldr	r1, [r0, #0]
 800981a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800981e:	6001      	str	r1, [r0, #0]
 8009820:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009822:	bf00      	nop
 8009824:	e000ed88 	.word	0xe000ed88

08009828 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009828:	b480      	push	{r7}
 800982a:	b085      	sub	sp, #20
 800982c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800982e:	f3ef 8305 	mrs	r3, IPSR
 8009832:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	2b0f      	cmp	r3, #15
 8009838:	d914      	bls.n	8009864 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800983a:	4a17      	ldr	r2, [pc, #92]	; (8009898 <vPortValidateInterruptPriority+0x70>)
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	4413      	add	r3, r2
 8009840:	781b      	ldrb	r3, [r3, #0]
 8009842:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009844:	4b15      	ldr	r3, [pc, #84]	; (800989c <vPortValidateInterruptPriority+0x74>)
 8009846:	781b      	ldrb	r3, [r3, #0]
 8009848:	7afa      	ldrb	r2, [r7, #11]
 800984a:	429a      	cmp	r2, r3
 800984c:	d20a      	bcs.n	8009864 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800984e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009852:	f383 8811 	msr	BASEPRI, r3
 8009856:	f3bf 8f6f 	isb	sy
 800985a:	f3bf 8f4f 	dsb	sy
 800985e:	607b      	str	r3, [r7, #4]
}
 8009860:	bf00      	nop
 8009862:	e7fe      	b.n	8009862 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009864:	4b0e      	ldr	r3, [pc, #56]	; (80098a0 <vPortValidateInterruptPriority+0x78>)
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800986c:	4b0d      	ldr	r3, [pc, #52]	; (80098a4 <vPortValidateInterruptPriority+0x7c>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	429a      	cmp	r2, r3
 8009872:	d90a      	bls.n	800988a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009878:	f383 8811 	msr	BASEPRI, r3
 800987c:	f3bf 8f6f 	isb	sy
 8009880:	f3bf 8f4f 	dsb	sy
 8009884:	603b      	str	r3, [r7, #0]
}
 8009886:	bf00      	nop
 8009888:	e7fe      	b.n	8009888 <vPortValidateInterruptPriority+0x60>
	}
 800988a:	bf00      	nop
 800988c:	3714      	adds	r7, #20
 800988e:	46bd      	mov	sp, r7
 8009890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009894:	4770      	bx	lr
 8009896:	bf00      	nop
 8009898:	e000e3f0 	.word	0xe000e3f0
 800989c:	20001228 	.word	0x20001228
 80098a0:	e000ed0c 	.word	0xe000ed0c
 80098a4:	2000122c 	.word	0x2000122c

080098a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b08a      	sub	sp, #40	; 0x28
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80098b0:	2300      	movs	r3, #0
 80098b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80098b4:	f7fe fd90 	bl	80083d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80098b8:	4b5b      	ldr	r3, [pc, #364]	; (8009a28 <pvPortMalloc+0x180>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d101      	bne.n	80098c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80098c0:	f000 f920 	bl	8009b04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80098c4:	4b59      	ldr	r3, [pc, #356]	; (8009a2c <pvPortMalloc+0x184>)
 80098c6:	681a      	ldr	r2, [r3, #0]
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	4013      	ands	r3, r2
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	f040 8093 	bne.w	80099f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d01d      	beq.n	8009914 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80098d8:	2208      	movs	r2, #8
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	4413      	add	r3, r2
 80098de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f003 0307 	and.w	r3, r3, #7
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d014      	beq.n	8009914 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	f023 0307 	bic.w	r3, r3, #7
 80098f0:	3308      	adds	r3, #8
 80098f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f003 0307 	and.w	r3, r3, #7
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d00a      	beq.n	8009914 <pvPortMalloc+0x6c>
	__asm volatile
 80098fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009902:	f383 8811 	msr	BASEPRI, r3
 8009906:	f3bf 8f6f 	isb	sy
 800990a:	f3bf 8f4f 	dsb	sy
 800990e:	617b      	str	r3, [r7, #20]
}
 8009910:	bf00      	nop
 8009912:	e7fe      	b.n	8009912 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d06e      	beq.n	80099f8 <pvPortMalloc+0x150>
 800991a:	4b45      	ldr	r3, [pc, #276]	; (8009a30 <pvPortMalloc+0x188>)
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	687a      	ldr	r2, [r7, #4]
 8009920:	429a      	cmp	r2, r3
 8009922:	d869      	bhi.n	80099f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009924:	4b43      	ldr	r3, [pc, #268]	; (8009a34 <pvPortMalloc+0x18c>)
 8009926:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009928:	4b42      	ldr	r3, [pc, #264]	; (8009a34 <pvPortMalloc+0x18c>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800992e:	e004      	b.n	800993a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009932:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800993a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800993c:	685b      	ldr	r3, [r3, #4]
 800993e:	687a      	ldr	r2, [r7, #4]
 8009940:	429a      	cmp	r2, r3
 8009942:	d903      	bls.n	800994c <pvPortMalloc+0xa4>
 8009944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d1f1      	bne.n	8009930 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800994c:	4b36      	ldr	r3, [pc, #216]	; (8009a28 <pvPortMalloc+0x180>)
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009952:	429a      	cmp	r2, r3
 8009954:	d050      	beq.n	80099f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009956:	6a3b      	ldr	r3, [r7, #32]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	2208      	movs	r2, #8
 800995c:	4413      	add	r3, r2
 800995e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009962:	681a      	ldr	r2, [r3, #0]
 8009964:	6a3b      	ldr	r3, [r7, #32]
 8009966:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800996a:	685a      	ldr	r2, [r3, #4]
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	1ad2      	subs	r2, r2, r3
 8009970:	2308      	movs	r3, #8
 8009972:	005b      	lsls	r3, r3, #1
 8009974:	429a      	cmp	r2, r3
 8009976:	d91f      	bls.n	80099b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009978:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	4413      	add	r3, r2
 800997e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009980:	69bb      	ldr	r3, [r7, #24]
 8009982:	f003 0307 	and.w	r3, r3, #7
 8009986:	2b00      	cmp	r3, #0
 8009988:	d00a      	beq.n	80099a0 <pvPortMalloc+0xf8>
	__asm volatile
 800998a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800998e:	f383 8811 	msr	BASEPRI, r3
 8009992:	f3bf 8f6f 	isb	sy
 8009996:	f3bf 8f4f 	dsb	sy
 800999a:	613b      	str	r3, [r7, #16]
}
 800999c:	bf00      	nop
 800999e:	e7fe      	b.n	800999e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80099a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099a2:	685a      	ldr	r2, [r3, #4]
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	1ad2      	subs	r2, r2, r3
 80099a8:	69bb      	ldr	r3, [r7, #24]
 80099aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80099ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ae:	687a      	ldr	r2, [r7, #4]
 80099b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80099b2:	69b8      	ldr	r0, [r7, #24]
 80099b4:	f000 f908 	bl	8009bc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80099b8:	4b1d      	ldr	r3, [pc, #116]	; (8009a30 <pvPortMalloc+0x188>)
 80099ba:	681a      	ldr	r2, [r3, #0]
 80099bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099be:	685b      	ldr	r3, [r3, #4]
 80099c0:	1ad3      	subs	r3, r2, r3
 80099c2:	4a1b      	ldr	r2, [pc, #108]	; (8009a30 <pvPortMalloc+0x188>)
 80099c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80099c6:	4b1a      	ldr	r3, [pc, #104]	; (8009a30 <pvPortMalloc+0x188>)
 80099c8:	681a      	ldr	r2, [r3, #0]
 80099ca:	4b1b      	ldr	r3, [pc, #108]	; (8009a38 <pvPortMalloc+0x190>)
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	429a      	cmp	r2, r3
 80099d0:	d203      	bcs.n	80099da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80099d2:	4b17      	ldr	r3, [pc, #92]	; (8009a30 <pvPortMalloc+0x188>)
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	4a18      	ldr	r2, [pc, #96]	; (8009a38 <pvPortMalloc+0x190>)
 80099d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80099da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099dc:	685a      	ldr	r2, [r3, #4]
 80099de:	4b13      	ldr	r3, [pc, #76]	; (8009a2c <pvPortMalloc+0x184>)
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	431a      	orrs	r2, r3
 80099e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80099e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ea:	2200      	movs	r2, #0
 80099ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80099ee:	4b13      	ldr	r3, [pc, #76]	; (8009a3c <pvPortMalloc+0x194>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	3301      	adds	r3, #1
 80099f4:	4a11      	ldr	r2, [pc, #68]	; (8009a3c <pvPortMalloc+0x194>)
 80099f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80099f8:	f7fe fcfc 	bl	80083f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80099fc:	69fb      	ldr	r3, [r7, #28]
 80099fe:	f003 0307 	and.w	r3, r3, #7
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d00a      	beq.n	8009a1c <pvPortMalloc+0x174>
	__asm volatile
 8009a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a0a:	f383 8811 	msr	BASEPRI, r3
 8009a0e:	f3bf 8f6f 	isb	sy
 8009a12:	f3bf 8f4f 	dsb	sy
 8009a16:	60fb      	str	r3, [r7, #12]
}
 8009a18:	bf00      	nop
 8009a1a:	e7fe      	b.n	8009a1a <pvPortMalloc+0x172>
	return pvReturn;
 8009a1c:	69fb      	ldr	r3, [r7, #28]
}
 8009a1e:	4618      	mov	r0, r3
 8009a20:	3728      	adds	r7, #40	; 0x28
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bd80      	pop	{r7, pc}
 8009a26:	bf00      	nop
 8009a28:	200025c0 	.word	0x200025c0
 8009a2c:	200025d4 	.word	0x200025d4
 8009a30:	200025c4 	.word	0x200025c4
 8009a34:	200025b8 	.word	0x200025b8
 8009a38:	200025c8 	.word	0x200025c8
 8009a3c:	200025cc 	.word	0x200025cc

08009a40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b086      	sub	sp, #24
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d04d      	beq.n	8009aee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009a52:	2308      	movs	r3, #8
 8009a54:	425b      	negs	r3, r3
 8009a56:	697a      	ldr	r2, [r7, #20]
 8009a58:	4413      	add	r3, r2
 8009a5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009a5c:	697b      	ldr	r3, [r7, #20]
 8009a5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009a60:	693b      	ldr	r3, [r7, #16]
 8009a62:	685a      	ldr	r2, [r3, #4]
 8009a64:	4b24      	ldr	r3, [pc, #144]	; (8009af8 <vPortFree+0xb8>)
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	4013      	ands	r3, r2
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d10a      	bne.n	8009a84 <vPortFree+0x44>
	__asm volatile
 8009a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a72:	f383 8811 	msr	BASEPRI, r3
 8009a76:	f3bf 8f6f 	isb	sy
 8009a7a:	f3bf 8f4f 	dsb	sy
 8009a7e:	60fb      	str	r3, [r7, #12]
}
 8009a80:	bf00      	nop
 8009a82:	e7fe      	b.n	8009a82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009a84:	693b      	ldr	r3, [r7, #16]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d00a      	beq.n	8009aa2 <vPortFree+0x62>
	__asm volatile
 8009a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a90:	f383 8811 	msr	BASEPRI, r3
 8009a94:	f3bf 8f6f 	isb	sy
 8009a98:	f3bf 8f4f 	dsb	sy
 8009a9c:	60bb      	str	r3, [r7, #8]
}
 8009a9e:	bf00      	nop
 8009aa0:	e7fe      	b.n	8009aa0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009aa2:	693b      	ldr	r3, [r7, #16]
 8009aa4:	685a      	ldr	r2, [r3, #4]
 8009aa6:	4b14      	ldr	r3, [pc, #80]	; (8009af8 <vPortFree+0xb8>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	4013      	ands	r3, r2
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d01e      	beq.n	8009aee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009ab0:	693b      	ldr	r3, [r7, #16]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d11a      	bne.n	8009aee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009ab8:	693b      	ldr	r3, [r7, #16]
 8009aba:	685a      	ldr	r2, [r3, #4]
 8009abc:	4b0e      	ldr	r3, [pc, #56]	; (8009af8 <vPortFree+0xb8>)
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	43db      	mvns	r3, r3
 8009ac2:	401a      	ands	r2, r3
 8009ac4:	693b      	ldr	r3, [r7, #16]
 8009ac6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009ac8:	f7fe fc86 	bl	80083d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009acc:	693b      	ldr	r3, [r7, #16]
 8009ace:	685a      	ldr	r2, [r3, #4]
 8009ad0:	4b0a      	ldr	r3, [pc, #40]	; (8009afc <vPortFree+0xbc>)
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	4413      	add	r3, r2
 8009ad6:	4a09      	ldr	r2, [pc, #36]	; (8009afc <vPortFree+0xbc>)
 8009ad8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009ada:	6938      	ldr	r0, [r7, #16]
 8009adc:	f000 f874 	bl	8009bc8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009ae0:	4b07      	ldr	r3, [pc, #28]	; (8009b00 <vPortFree+0xc0>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	3301      	adds	r3, #1
 8009ae6:	4a06      	ldr	r2, [pc, #24]	; (8009b00 <vPortFree+0xc0>)
 8009ae8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009aea:	f7fe fc83 	bl	80083f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009aee:	bf00      	nop
 8009af0:	3718      	adds	r7, #24
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd80      	pop	{r7, pc}
 8009af6:	bf00      	nop
 8009af8:	200025d4 	.word	0x200025d4
 8009afc:	200025c4 	.word	0x200025c4
 8009b00:	200025d0 	.word	0x200025d0

08009b04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009b04:	b480      	push	{r7}
 8009b06:	b085      	sub	sp, #20
 8009b08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009b0a:	f241 3388 	movw	r3, #5000	; 0x1388
 8009b0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009b10:	4b27      	ldr	r3, [pc, #156]	; (8009bb0 <prvHeapInit+0xac>)
 8009b12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	f003 0307 	and.w	r3, r3, #7
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d00c      	beq.n	8009b38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	3307      	adds	r3, #7
 8009b22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	f023 0307 	bic.w	r3, r3, #7
 8009b2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009b2c:	68ba      	ldr	r2, [r7, #8]
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	1ad3      	subs	r3, r2, r3
 8009b32:	4a1f      	ldr	r2, [pc, #124]	; (8009bb0 <prvHeapInit+0xac>)
 8009b34:	4413      	add	r3, r2
 8009b36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009b3c:	4a1d      	ldr	r2, [pc, #116]	; (8009bb4 <prvHeapInit+0xb0>)
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009b42:	4b1c      	ldr	r3, [pc, #112]	; (8009bb4 <prvHeapInit+0xb0>)
 8009b44:	2200      	movs	r2, #0
 8009b46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	68ba      	ldr	r2, [r7, #8]
 8009b4c:	4413      	add	r3, r2
 8009b4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009b50:	2208      	movs	r2, #8
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	1a9b      	subs	r3, r3, r2
 8009b56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	f023 0307 	bic.w	r3, r3, #7
 8009b5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	4a15      	ldr	r2, [pc, #84]	; (8009bb8 <prvHeapInit+0xb4>)
 8009b64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009b66:	4b14      	ldr	r3, [pc, #80]	; (8009bb8 <prvHeapInit+0xb4>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009b6e:	4b12      	ldr	r3, [pc, #72]	; (8009bb8 <prvHeapInit+0xb4>)
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	2200      	movs	r2, #0
 8009b74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	68fa      	ldr	r2, [r7, #12]
 8009b7e:	1ad2      	subs	r2, r2, r3
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009b84:	4b0c      	ldr	r3, [pc, #48]	; (8009bb8 <prvHeapInit+0xb4>)
 8009b86:	681a      	ldr	r2, [r3, #0]
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	685b      	ldr	r3, [r3, #4]
 8009b90:	4a0a      	ldr	r2, [pc, #40]	; (8009bbc <prvHeapInit+0xb8>)
 8009b92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	685b      	ldr	r3, [r3, #4]
 8009b98:	4a09      	ldr	r2, [pc, #36]	; (8009bc0 <prvHeapInit+0xbc>)
 8009b9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009b9c:	4b09      	ldr	r3, [pc, #36]	; (8009bc4 <prvHeapInit+0xc0>)
 8009b9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009ba2:	601a      	str	r2, [r3, #0]
}
 8009ba4:	bf00      	nop
 8009ba6:	3714      	adds	r7, #20
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bae:	4770      	bx	lr
 8009bb0:	20001230 	.word	0x20001230
 8009bb4:	200025b8 	.word	0x200025b8
 8009bb8:	200025c0 	.word	0x200025c0
 8009bbc:	200025c8 	.word	0x200025c8
 8009bc0:	200025c4 	.word	0x200025c4
 8009bc4:	200025d4 	.word	0x200025d4

08009bc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009bc8:	b480      	push	{r7}
 8009bca:	b085      	sub	sp, #20
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009bd0:	4b28      	ldr	r3, [pc, #160]	; (8009c74 <prvInsertBlockIntoFreeList+0xac>)
 8009bd2:	60fb      	str	r3, [r7, #12]
 8009bd4:	e002      	b.n	8009bdc <prvInsertBlockIntoFreeList+0x14>
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	60fb      	str	r3, [r7, #12]
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	687a      	ldr	r2, [r7, #4]
 8009be2:	429a      	cmp	r2, r3
 8009be4:	d8f7      	bhi.n	8009bd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	685b      	ldr	r3, [r3, #4]
 8009bee:	68ba      	ldr	r2, [r7, #8]
 8009bf0:	4413      	add	r3, r2
 8009bf2:	687a      	ldr	r2, [r7, #4]
 8009bf4:	429a      	cmp	r2, r3
 8009bf6:	d108      	bne.n	8009c0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	685a      	ldr	r2, [r3, #4]
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	685b      	ldr	r3, [r3, #4]
 8009c00:	441a      	add	r2, r3
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	685b      	ldr	r3, [r3, #4]
 8009c12:	68ba      	ldr	r2, [r7, #8]
 8009c14:	441a      	add	r2, r3
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	429a      	cmp	r2, r3
 8009c1c:	d118      	bne.n	8009c50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	681a      	ldr	r2, [r3, #0]
 8009c22:	4b15      	ldr	r3, [pc, #84]	; (8009c78 <prvInsertBlockIntoFreeList+0xb0>)
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	429a      	cmp	r2, r3
 8009c28:	d00d      	beq.n	8009c46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	685a      	ldr	r2, [r3, #4]
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	685b      	ldr	r3, [r3, #4]
 8009c34:	441a      	add	r2, r3
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	681a      	ldr	r2, [r3, #0]
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	601a      	str	r2, [r3, #0]
 8009c44:	e008      	b.n	8009c58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009c46:	4b0c      	ldr	r3, [pc, #48]	; (8009c78 <prvInsertBlockIntoFreeList+0xb0>)
 8009c48:	681a      	ldr	r2, [r3, #0]
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	601a      	str	r2, [r3, #0]
 8009c4e:	e003      	b.n	8009c58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	681a      	ldr	r2, [r3, #0]
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009c58:	68fa      	ldr	r2, [r7, #12]
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	429a      	cmp	r2, r3
 8009c5e:	d002      	beq.n	8009c66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	687a      	ldr	r2, [r7, #4]
 8009c64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009c66:	bf00      	nop
 8009c68:	3714      	adds	r7, #20
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c70:	4770      	bx	lr
 8009c72:	bf00      	nop
 8009c74:	200025b8 	.word	0x200025b8
 8009c78:	200025c0 	.word	0x200025c0

08009c7c <__cvt>:
 8009c7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c80:	ec55 4b10 	vmov	r4, r5, d0
 8009c84:	2d00      	cmp	r5, #0
 8009c86:	460e      	mov	r6, r1
 8009c88:	4619      	mov	r1, r3
 8009c8a:	462b      	mov	r3, r5
 8009c8c:	bfbb      	ittet	lt
 8009c8e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009c92:	461d      	movlt	r5, r3
 8009c94:	2300      	movge	r3, #0
 8009c96:	232d      	movlt	r3, #45	; 0x2d
 8009c98:	700b      	strb	r3, [r1, #0]
 8009c9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c9c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009ca0:	4691      	mov	r9, r2
 8009ca2:	f023 0820 	bic.w	r8, r3, #32
 8009ca6:	bfbc      	itt	lt
 8009ca8:	4622      	movlt	r2, r4
 8009caa:	4614      	movlt	r4, r2
 8009cac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009cb0:	d005      	beq.n	8009cbe <__cvt+0x42>
 8009cb2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009cb6:	d100      	bne.n	8009cba <__cvt+0x3e>
 8009cb8:	3601      	adds	r6, #1
 8009cba:	2102      	movs	r1, #2
 8009cbc:	e000      	b.n	8009cc0 <__cvt+0x44>
 8009cbe:	2103      	movs	r1, #3
 8009cc0:	ab03      	add	r3, sp, #12
 8009cc2:	9301      	str	r3, [sp, #4]
 8009cc4:	ab02      	add	r3, sp, #8
 8009cc6:	9300      	str	r3, [sp, #0]
 8009cc8:	ec45 4b10 	vmov	d0, r4, r5
 8009ccc:	4653      	mov	r3, sl
 8009cce:	4632      	mov	r2, r6
 8009cd0:	f000 fe92 	bl	800a9f8 <_dtoa_r>
 8009cd4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009cd8:	4607      	mov	r7, r0
 8009cda:	d102      	bne.n	8009ce2 <__cvt+0x66>
 8009cdc:	f019 0f01 	tst.w	r9, #1
 8009ce0:	d022      	beq.n	8009d28 <__cvt+0xac>
 8009ce2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009ce6:	eb07 0906 	add.w	r9, r7, r6
 8009cea:	d110      	bne.n	8009d0e <__cvt+0x92>
 8009cec:	783b      	ldrb	r3, [r7, #0]
 8009cee:	2b30      	cmp	r3, #48	; 0x30
 8009cf0:	d10a      	bne.n	8009d08 <__cvt+0x8c>
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	4620      	mov	r0, r4
 8009cf8:	4629      	mov	r1, r5
 8009cfa:	f7f6 fee5 	bl	8000ac8 <__aeabi_dcmpeq>
 8009cfe:	b918      	cbnz	r0, 8009d08 <__cvt+0x8c>
 8009d00:	f1c6 0601 	rsb	r6, r6, #1
 8009d04:	f8ca 6000 	str.w	r6, [sl]
 8009d08:	f8da 3000 	ldr.w	r3, [sl]
 8009d0c:	4499      	add	r9, r3
 8009d0e:	2200      	movs	r2, #0
 8009d10:	2300      	movs	r3, #0
 8009d12:	4620      	mov	r0, r4
 8009d14:	4629      	mov	r1, r5
 8009d16:	f7f6 fed7 	bl	8000ac8 <__aeabi_dcmpeq>
 8009d1a:	b108      	cbz	r0, 8009d20 <__cvt+0xa4>
 8009d1c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009d20:	2230      	movs	r2, #48	; 0x30
 8009d22:	9b03      	ldr	r3, [sp, #12]
 8009d24:	454b      	cmp	r3, r9
 8009d26:	d307      	bcc.n	8009d38 <__cvt+0xbc>
 8009d28:	9b03      	ldr	r3, [sp, #12]
 8009d2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009d2c:	1bdb      	subs	r3, r3, r7
 8009d2e:	4638      	mov	r0, r7
 8009d30:	6013      	str	r3, [r2, #0]
 8009d32:	b004      	add	sp, #16
 8009d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d38:	1c59      	adds	r1, r3, #1
 8009d3a:	9103      	str	r1, [sp, #12]
 8009d3c:	701a      	strb	r2, [r3, #0]
 8009d3e:	e7f0      	b.n	8009d22 <__cvt+0xa6>

08009d40 <__exponent>:
 8009d40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d42:	4603      	mov	r3, r0
 8009d44:	2900      	cmp	r1, #0
 8009d46:	bfb8      	it	lt
 8009d48:	4249      	neglt	r1, r1
 8009d4a:	f803 2b02 	strb.w	r2, [r3], #2
 8009d4e:	bfb4      	ite	lt
 8009d50:	222d      	movlt	r2, #45	; 0x2d
 8009d52:	222b      	movge	r2, #43	; 0x2b
 8009d54:	2909      	cmp	r1, #9
 8009d56:	7042      	strb	r2, [r0, #1]
 8009d58:	dd2a      	ble.n	8009db0 <__exponent+0x70>
 8009d5a:	f10d 0207 	add.w	r2, sp, #7
 8009d5e:	4617      	mov	r7, r2
 8009d60:	260a      	movs	r6, #10
 8009d62:	4694      	mov	ip, r2
 8009d64:	fb91 f5f6 	sdiv	r5, r1, r6
 8009d68:	fb06 1415 	mls	r4, r6, r5, r1
 8009d6c:	3430      	adds	r4, #48	; 0x30
 8009d6e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009d72:	460c      	mov	r4, r1
 8009d74:	2c63      	cmp	r4, #99	; 0x63
 8009d76:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8009d7a:	4629      	mov	r1, r5
 8009d7c:	dcf1      	bgt.n	8009d62 <__exponent+0x22>
 8009d7e:	3130      	adds	r1, #48	; 0x30
 8009d80:	f1ac 0402 	sub.w	r4, ip, #2
 8009d84:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009d88:	1c41      	adds	r1, r0, #1
 8009d8a:	4622      	mov	r2, r4
 8009d8c:	42ba      	cmp	r2, r7
 8009d8e:	d30a      	bcc.n	8009da6 <__exponent+0x66>
 8009d90:	f10d 0209 	add.w	r2, sp, #9
 8009d94:	eba2 020c 	sub.w	r2, r2, ip
 8009d98:	42bc      	cmp	r4, r7
 8009d9a:	bf88      	it	hi
 8009d9c:	2200      	movhi	r2, #0
 8009d9e:	4413      	add	r3, r2
 8009da0:	1a18      	subs	r0, r3, r0
 8009da2:	b003      	add	sp, #12
 8009da4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009da6:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009daa:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009dae:	e7ed      	b.n	8009d8c <__exponent+0x4c>
 8009db0:	2330      	movs	r3, #48	; 0x30
 8009db2:	3130      	adds	r1, #48	; 0x30
 8009db4:	7083      	strb	r3, [r0, #2]
 8009db6:	70c1      	strb	r1, [r0, #3]
 8009db8:	1d03      	adds	r3, r0, #4
 8009dba:	e7f1      	b.n	8009da0 <__exponent+0x60>

08009dbc <_printf_float>:
 8009dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dc0:	ed2d 8b02 	vpush	{d8}
 8009dc4:	b08d      	sub	sp, #52	; 0x34
 8009dc6:	460c      	mov	r4, r1
 8009dc8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009dcc:	4616      	mov	r6, r2
 8009dce:	461f      	mov	r7, r3
 8009dd0:	4605      	mov	r5, r0
 8009dd2:	f000 fcf1 	bl	800a7b8 <_localeconv_r>
 8009dd6:	f8d0 a000 	ldr.w	sl, [r0]
 8009dda:	4650      	mov	r0, sl
 8009ddc:	f7f6 fa48 	bl	8000270 <strlen>
 8009de0:	2300      	movs	r3, #0
 8009de2:	930a      	str	r3, [sp, #40]	; 0x28
 8009de4:	6823      	ldr	r3, [r4, #0]
 8009de6:	9305      	str	r3, [sp, #20]
 8009de8:	f8d8 3000 	ldr.w	r3, [r8]
 8009dec:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009df0:	3307      	adds	r3, #7
 8009df2:	f023 0307 	bic.w	r3, r3, #7
 8009df6:	f103 0208 	add.w	r2, r3, #8
 8009dfa:	f8c8 2000 	str.w	r2, [r8]
 8009dfe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009e02:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009e06:	9307      	str	r3, [sp, #28]
 8009e08:	f8cd 8018 	str.w	r8, [sp, #24]
 8009e0c:	ee08 0a10 	vmov	s16, r0
 8009e10:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8009e14:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009e18:	4b9e      	ldr	r3, [pc, #632]	; (800a094 <_printf_float+0x2d8>)
 8009e1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009e1e:	f7f6 fe85 	bl	8000b2c <__aeabi_dcmpun>
 8009e22:	bb88      	cbnz	r0, 8009e88 <_printf_float+0xcc>
 8009e24:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009e28:	4b9a      	ldr	r3, [pc, #616]	; (800a094 <_printf_float+0x2d8>)
 8009e2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009e2e:	f7f6 fe5f 	bl	8000af0 <__aeabi_dcmple>
 8009e32:	bb48      	cbnz	r0, 8009e88 <_printf_float+0xcc>
 8009e34:	2200      	movs	r2, #0
 8009e36:	2300      	movs	r3, #0
 8009e38:	4640      	mov	r0, r8
 8009e3a:	4649      	mov	r1, r9
 8009e3c:	f7f6 fe4e 	bl	8000adc <__aeabi_dcmplt>
 8009e40:	b110      	cbz	r0, 8009e48 <_printf_float+0x8c>
 8009e42:	232d      	movs	r3, #45	; 0x2d
 8009e44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e48:	4a93      	ldr	r2, [pc, #588]	; (800a098 <_printf_float+0x2dc>)
 8009e4a:	4b94      	ldr	r3, [pc, #592]	; (800a09c <_printf_float+0x2e0>)
 8009e4c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009e50:	bf94      	ite	ls
 8009e52:	4690      	movls	r8, r2
 8009e54:	4698      	movhi	r8, r3
 8009e56:	2303      	movs	r3, #3
 8009e58:	6123      	str	r3, [r4, #16]
 8009e5a:	9b05      	ldr	r3, [sp, #20]
 8009e5c:	f023 0304 	bic.w	r3, r3, #4
 8009e60:	6023      	str	r3, [r4, #0]
 8009e62:	f04f 0900 	mov.w	r9, #0
 8009e66:	9700      	str	r7, [sp, #0]
 8009e68:	4633      	mov	r3, r6
 8009e6a:	aa0b      	add	r2, sp, #44	; 0x2c
 8009e6c:	4621      	mov	r1, r4
 8009e6e:	4628      	mov	r0, r5
 8009e70:	f000 f9da 	bl	800a228 <_printf_common>
 8009e74:	3001      	adds	r0, #1
 8009e76:	f040 8090 	bne.w	8009f9a <_printf_float+0x1de>
 8009e7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009e7e:	b00d      	add	sp, #52	; 0x34
 8009e80:	ecbd 8b02 	vpop	{d8}
 8009e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e88:	4642      	mov	r2, r8
 8009e8a:	464b      	mov	r3, r9
 8009e8c:	4640      	mov	r0, r8
 8009e8e:	4649      	mov	r1, r9
 8009e90:	f7f6 fe4c 	bl	8000b2c <__aeabi_dcmpun>
 8009e94:	b140      	cbz	r0, 8009ea8 <_printf_float+0xec>
 8009e96:	464b      	mov	r3, r9
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	bfbc      	itt	lt
 8009e9c:	232d      	movlt	r3, #45	; 0x2d
 8009e9e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009ea2:	4a7f      	ldr	r2, [pc, #508]	; (800a0a0 <_printf_float+0x2e4>)
 8009ea4:	4b7f      	ldr	r3, [pc, #508]	; (800a0a4 <_printf_float+0x2e8>)
 8009ea6:	e7d1      	b.n	8009e4c <_printf_float+0x90>
 8009ea8:	6863      	ldr	r3, [r4, #4]
 8009eaa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009eae:	9206      	str	r2, [sp, #24]
 8009eb0:	1c5a      	adds	r2, r3, #1
 8009eb2:	d13f      	bne.n	8009f34 <_printf_float+0x178>
 8009eb4:	2306      	movs	r3, #6
 8009eb6:	6063      	str	r3, [r4, #4]
 8009eb8:	9b05      	ldr	r3, [sp, #20]
 8009eba:	6861      	ldr	r1, [r4, #4]
 8009ebc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	9303      	str	r3, [sp, #12]
 8009ec4:	ab0a      	add	r3, sp, #40	; 0x28
 8009ec6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009eca:	ab09      	add	r3, sp, #36	; 0x24
 8009ecc:	ec49 8b10 	vmov	d0, r8, r9
 8009ed0:	9300      	str	r3, [sp, #0]
 8009ed2:	6022      	str	r2, [r4, #0]
 8009ed4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009ed8:	4628      	mov	r0, r5
 8009eda:	f7ff fecf 	bl	8009c7c <__cvt>
 8009ede:	9b06      	ldr	r3, [sp, #24]
 8009ee0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009ee2:	2b47      	cmp	r3, #71	; 0x47
 8009ee4:	4680      	mov	r8, r0
 8009ee6:	d108      	bne.n	8009efa <_printf_float+0x13e>
 8009ee8:	1cc8      	adds	r0, r1, #3
 8009eea:	db02      	blt.n	8009ef2 <_printf_float+0x136>
 8009eec:	6863      	ldr	r3, [r4, #4]
 8009eee:	4299      	cmp	r1, r3
 8009ef0:	dd41      	ble.n	8009f76 <_printf_float+0x1ba>
 8009ef2:	f1ab 0302 	sub.w	r3, fp, #2
 8009ef6:	fa5f fb83 	uxtb.w	fp, r3
 8009efa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009efe:	d820      	bhi.n	8009f42 <_printf_float+0x186>
 8009f00:	3901      	subs	r1, #1
 8009f02:	465a      	mov	r2, fp
 8009f04:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009f08:	9109      	str	r1, [sp, #36]	; 0x24
 8009f0a:	f7ff ff19 	bl	8009d40 <__exponent>
 8009f0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f10:	1813      	adds	r3, r2, r0
 8009f12:	2a01      	cmp	r2, #1
 8009f14:	4681      	mov	r9, r0
 8009f16:	6123      	str	r3, [r4, #16]
 8009f18:	dc02      	bgt.n	8009f20 <_printf_float+0x164>
 8009f1a:	6822      	ldr	r2, [r4, #0]
 8009f1c:	07d2      	lsls	r2, r2, #31
 8009f1e:	d501      	bpl.n	8009f24 <_printf_float+0x168>
 8009f20:	3301      	adds	r3, #1
 8009f22:	6123      	str	r3, [r4, #16]
 8009f24:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d09c      	beq.n	8009e66 <_printf_float+0xaa>
 8009f2c:	232d      	movs	r3, #45	; 0x2d
 8009f2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f32:	e798      	b.n	8009e66 <_printf_float+0xaa>
 8009f34:	9a06      	ldr	r2, [sp, #24]
 8009f36:	2a47      	cmp	r2, #71	; 0x47
 8009f38:	d1be      	bne.n	8009eb8 <_printf_float+0xfc>
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d1bc      	bne.n	8009eb8 <_printf_float+0xfc>
 8009f3e:	2301      	movs	r3, #1
 8009f40:	e7b9      	b.n	8009eb6 <_printf_float+0xfa>
 8009f42:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009f46:	d118      	bne.n	8009f7a <_printf_float+0x1be>
 8009f48:	2900      	cmp	r1, #0
 8009f4a:	6863      	ldr	r3, [r4, #4]
 8009f4c:	dd0b      	ble.n	8009f66 <_printf_float+0x1aa>
 8009f4e:	6121      	str	r1, [r4, #16]
 8009f50:	b913      	cbnz	r3, 8009f58 <_printf_float+0x19c>
 8009f52:	6822      	ldr	r2, [r4, #0]
 8009f54:	07d0      	lsls	r0, r2, #31
 8009f56:	d502      	bpl.n	8009f5e <_printf_float+0x1a2>
 8009f58:	3301      	adds	r3, #1
 8009f5a:	440b      	add	r3, r1
 8009f5c:	6123      	str	r3, [r4, #16]
 8009f5e:	65a1      	str	r1, [r4, #88]	; 0x58
 8009f60:	f04f 0900 	mov.w	r9, #0
 8009f64:	e7de      	b.n	8009f24 <_printf_float+0x168>
 8009f66:	b913      	cbnz	r3, 8009f6e <_printf_float+0x1b2>
 8009f68:	6822      	ldr	r2, [r4, #0]
 8009f6a:	07d2      	lsls	r2, r2, #31
 8009f6c:	d501      	bpl.n	8009f72 <_printf_float+0x1b6>
 8009f6e:	3302      	adds	r3, #2
 8009f70:	e7f4      	b.n	8009f5c <_printf_float+0x1a0>
 8009f72:	2301      	movs	r3, #1
 8009f74:	e7f2      	b.n	8009f5c <_printf_float+0x1a0>
 8009f76:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009f7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f7c:	4299      	cmp	r1, r3
 8009f7e:	db05      	blt.n	8009f8c <_printf_float+0x1d0>
 8009f80:	6823      	ldr	r3, [r4, #0]
 8009f82:	6121      	str	r1, [r4, #16]
 8009f84:	07d8      	lsls	r0, r3, #31
 8009f86:	d5ea      	bpl.n	8009f5e <_printf_float+0x1a2>
 8009f88:	1c4b      	adds	r3, r1, #1
 8009f8a:	e7e7      	b.n	8009f5c <_printf_float+0x1a0>
 8009f8c:	2900      	cmp	r1, #0
 8009f8e:	bfd4      	ite	le
 8009f90:	f1c1 0202 	rsble	r2, r1, #2
 8009f94:	2201      	movgt	r2, #1
 8009f96:	4413      	add	r3, r2
 8009f98:	e7e0      	b.n	8009f5c <_printf_float+0x1a0>
 8009f9a:	6823      	ldr	r3, [r4, #0]
 8009f9c:	055a      	lsls	r2, r3, #21
 8009f9e:	d407      	bmi.n	8009fb0 <_printf_float+0x1f4>
 8009fa0:	6923      	ldr	r3, [r4, #16]
 8009fa2:	4642      	mov	r2, r8
 8009fa4:	4631      	mov	r1, r6
 8009fa6:	4628      	mov	r0, r5
 8009fa8:	47b8      	blx	r7
 8009faa:	3001      	adds	r0, #1
 8009fac:	d12c      	bne.n	800a008 <_printf_float+0x24c>
 8009fae:	e764      	b.n	8009e7a <_printf_float+0xbe>
 8009fb0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009fb4:	f240 80e0 	bls.w	800a178 <_printf_float+0x3bc>
 8009fb8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	f7f6 fd82 	bl	8000ac8 <__aeabi_dcmpeq>
 8009fc4:	2800      	cmp	r0, #0
 8009fc6:	d034      	beq.n	800a032 <_printf_float+0x276>
 8009fc8:	4a37      	ldr	r2, [pc, #220]	; (800a0a8 <_printf_float+0x2ec>)
 8009fca:	2301      	movs	r3, #1
 8009fcc:	4631      	mov	r1, r6
 8009fce:	4628      	mov	r0, r5
 8009fd0:	47b8      	blx	r7
 8009fd2:	3001      	adds	r0, #1
 8009fd4:	f43f af51 	beq.w	8009e7a <_printf_float+0xbe>
 8009fd8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009fdc:	429a      	cmp	r2, r3
 8009fde:	db02      	blt.n	8009fe6 <_printf_float+0x22a>
 8009fe0:	6823      	ldr	r3, [r4, #0]
 8009fe2:	07d8      	lsls	r0, r3, #31
 8009fe4:	d510      	bpl.n	800a008 <_printf_float+0x24c>
 8009fe6:	ee18 3a10 	vmov	r3, s16
 8009fea:	4652      	mov	r2, sl
 8009fec:	4631      	mov	r1, r6
 8009fee:	4628      	mov	r0, r5
 8009ff0:	47b8      	blx	r7
 8009ff2:	3001      	adds	r0, #1
 8009ff4:	f43f af41 	beq.w	8009e7a <_printf_float+0xbe>
 8009ff8:	f04f 0800 	mov.w	r8, #0
 8009ffc:	f104 091a 	add.w	r9, r4, #26
 800a000:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a002:	3b01      	subs	r3, #1
 800a004:	4543      	cmp	r3, r8
 800a006:	dc09      	bgt.n	800a01c <_printf_float+0x260>
 800a008:	6823      	ldr	r3, [r4, #0]
 800a00a:	079b      	lsls	r3, r3, #30
 800a00c:	f100 8107 	bmi.w	800a21e <_printf_float+0x462>
 800a010:	68e0      	ldr	r0, [r4, #12]
 800a012:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a014:	4298      	cmp	r0, r3
 800a016:	bfb8      	it	lt
 800a018:	4618      	movlt	r0, r3
 800a01a:	e730      	b.n	8009e7e <_printf_float+0xc2>
 800a01c:	2301      	movs	r3, #1
 800a01e:	464a      	mov	r2, r9
 800a020:	4631      	mov	r1, r6
 800a022:	4628      	mov	r0, r5
 800a024:	47b8      	blx	r7
 800a026:	3001      	adds	r0, #1
 800a028:	f43f af27 	beq.w	8009e7a <_printf_float+0xbe>
 800a02c:	f108 0801 	add.w	r8, r8, #1
 800a030:	e7e6      	b.n	800a000 <_printf_float+0x244>
 800a032:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a034:	2b00      	cmp	r3, #0
 800a036:	dc39      	bgt.n	800a0ac <_printf_float+0x2f0>
 800a038:	4a1b      	ldr	r2, [pc, #108]	; (800a0a8 <_printf_float+0x2ec>)
 800a03a:	2301      	movs	r3, #1
 800a03c:	4631      	mov	r1, r6
 800a03e:	4628      	mov	r0, r5
 800a040:	47b8      	blx	r7
 800a042:	3001      	adds	r0, #1
 800a044:	f43f af19 	beq.w	8009e7a <_printf_float+0xbe>
 800a048:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a04c:	4313      	orrs	r3, r2
 800a04e:	d102      	bne.n	800a056 <_printf_float+0x29a>
 800a050:	6823      	ldr	r3, [r4, #0]
 800a052:	07d9      	lsls	r1, r3, #31
 800a054:	d5d8      	bpl.n	800a008 <_printf_float+0x24c>
 800a056:	ee18 3a10 	vmov	r3, s16
 800a05a:	4652      	mov	r2, sl
 800a05c:	4631      	mov	r1, r6
 800a05e:	4628      	mov	r0, r5
 800a060:	47b8      	blx	r7
 800a062:	3001      	adds	r0, #1
 800a064:	f43f af09 	beq.w	8009e7a <_printf_float+0xbe>
 800a068:	f04f 0900 	mov.w	r9, #0
 800a06c:	f104 0a1a 	add.w	sl, r4, #26
 800a070:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a072:	425b      	negs	r3, r3
 800a074:	454b      	cmp	r3, r9
 800a076:	dc01      	bgt.n	800a07c <_printf_float+0x2c0>
 800a078:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a07a:	e792      	b.n	8009fa2 <_printf_float+0x1e6>
 800a07c:	2301      	movs	r3, #1
 800a07e:	4652      	mov	r2, sl
 800a080:	4631      	mov	r1, r6
 800a082:	4628      	mov	r0, r5
 800a084:	47b8      	blx	r7
 800a086:	3001      	adds	r0, #1
 800a088:	f43f aef7 	beq.w	8009e7a <_printf_float+0xbe>
 800a08c:	f109 0901 	add.w	r9, r9, #1
 800a090:	e7ee      	b.n	800a070 <_printf_float+0x2b4>
 800a092:	bf00      	nop
 800a094:	7fefffff 	.word	0x7fefffff
 800a098:	0800d45c 	.word	0x0800d45c
 800a09c:	0800d460 	.word	0x0800d460
 800a0a0:	0800d464 	.word	0x0800d464
 800a0a4:	0800d468 	.word	0x0800d468
 800a0a8:	0800d46c 	.word	0x0800d46c
 800a0ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a0ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a0b0:	429a      	cmp	r2, r3
 800a0b2:	bfa8      	it	ge
 800a0b4:	461a      	movge	r2, r3
 800a0b6:	2a00      	cmp	r2, #0
 800a0b8:	4691      	mov	r9, r2
 800a0ba:	dc37      	bgt.n	800a12c <_printf_float+0x370>
 800a0bc:	f04f 0b00 	mov.w	fp, #0
 800a0c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a0c4:	f104 021a 	add.w	r2, r4, #26
 800a0c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a0ca:	9305      	str	r3, [sp, #20]
 800a0cc:	eba3 0309 	sub.w	r3, r3, r9
 800a0d0:	455b      	cmp	r3, fp
 800a0d2:	dc33      	bgt.n	800a13c <_printf_float+0x380>
 800a0d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a0d8:	429a      	cmp	r2, r3
 800a0da:	db3b      	blt.n	800a154 <_printf_float+0x398>
 800a0dc:	6823      	ldr	r3, [r4, #0]
 800a0de:	07da      	lsls	r2, r3, #31
 800a0e0:	d438      	bmi.n	800a154 <_printf_float+0x398>
 800a0e2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a0e6:	eba2 0903 	sub.w	r9, r2, r3
 800a0ea:	9b05      	ldr	r3, [sp, #20]
 800a0ec:	1ad2      	subs	r2, r2, r3
 800a0ee:	4591      	cmp	r9, r2
 800a0f0:	bfa8      	it	ge
 800a0f2:	4691      	movge	r9, r2
 800a0f4:	f1b9 0f00 	cmp.w	r9, #0
 800a0f8:	dc35      	bgt.n	800a166 <_printf_float+0x3aa>
 800a0fa:	f04f 0800 	mov.w	r8, #0
 800a0fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a102:	f104 0a1a 	add.w	sl, r4, #26
 800a106:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a10a:	1a9b      	subs	r3, r3, r2
 800a10c:	eba3 0309 	sub.w	r3, r3, r9
 800a110:	4543      	cmp	r3, r8
 800a112:	f77f af79 	ble.w	800a008 <_printf_float+0x24c>
 800a116:	2301      	movs	r3, #1
 800a118:	4652      	mov	r2, sl
 800a11a:	4631      	mov	r1, r6
 800a11c:	4628      	mov	r0, r5
 800a11e:	47b8      	blx	r7
 800a120:	3001      	adds	r0, #1
 800a122:	f43f aeaa 	beq.w	8009e7a <_printf_float+0xbe>
 800a126:	f108 0801 	add.w	r8, r8, #1
 800a12a:	e7ec      	b.n	800a106 <_printf_float+0x34a>
 800a12c:	4613      	mov	r3, r2
 800a12e:	4631      	mov	r1, r6
 800a130:	4642      	mov	r2, r8
 800a132:	4628      	mov	r0, r5
 800a134:	47b8      	blx	r7
 800a136:	3001      	adds	r0, #1
 800a138:	d1c0      	bne.n	800a0bc <_printf_float+0x300>
 800a13a:	e69e      	b.n	8009e7a <_printf_float+0xbe>
 800a13c:	2301      	movs	r3, #1
 800a13e:	4631      	mov	r1, r6
 800a140:	4628      	mov	r0, r5
 800a142:	9205      	str	r2, [sp, #20]
 800a144:	47b8      	blx	r7
 800a146:	3001      	adds	r0, #1
 800a148:	f43f ae97 	beq.w	8009e7a <_printf_float+0xbe>
 800a14c:	9a05      	ldr	r2, [sp, #20]
 800a14e:	f10b 0b01 	add.w	fp, fp, #1
 800a152:	e7b9      	b.n	800a0c8 <_printf_float+0x30c>
 800a154:	ee18 3a10 	vmov	r3, s16
 800a158:	4652      	mov	r2, sl
 800a15a:	4631      	mov	r1, r6
 800a15c:	4628      	mov	r0, r5
 800a15e:	47b8      	blx	r7
 800a160:	3001      	adds	r0, #1
 800a162:	d1be      	bne.n	800a0e2 <_printf_float+0x326>
 800a164:	e689      	b.n	8009e7a <_printf_float+0xbe>
 800a166:	9a05      	ldr	r2, [sp, #20]
 800a168:	464b      	mov	r3, r9
 800a16a:	4442      	add	r2, r8
 800a16c:	4631      	mov	r1, r6
 800a16e:	4628      	mov	r0, r5
 800a170:	47b8      	blx	r7
 800a172:	3001      	adds	r0, #1
 800a174:	d1c1      	bne.n	800a0fa <_printf_float+0x33e>
 800a176:	e680      	b.n	8009e7a <_printf_float+0xbe>
 800a178:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a17a:	2a01      	cmp	r2, #1
 800a17c:	dc01      	bgt.n	800a182 <_printf_float+0x3c6>
 800a17e:	07db      	lsls	r3, r3, #31
 800a180:	d53a      	bpl.n	800a1f8 <_printf_float+0x43c>
 800a182:	2301      	movs	r3, #1
 800a184:	4642      	mov	r2, r8
 800a186:	4631      	mov	r1, r6
 800a188:	4628      	mov	r0, r5
 800a18a:	47b8      	blx	r7
 800a18c:	3001      	adds	r0, #1
 800a18e:	f43f ae74 	beq.w	8009e7a <_printf_float+0xbe>
 800a192:	ee18 3a10 	vmov	r3, s16
 800a196:	4652      	mov	r2, sl
 800a198:	4631      	mov	r1, r6
 800a19a:	4628      	mov	r0, r5
 800a19c:	47b8      	blx	r7
 800a19e:	3001      	adds	r0, #1
 800a1a0:	f43f ae6b 	beq.w	8009e7a <_printf_float+0xbe>
 800a1a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800a1b0:	f7f6 fc8a 	bl	8000ac8 <__aeabi_dcmpeq>
 800a1b4:	b9d8      	cbnz	r0, 800a1ee <_printf_float+0x432>
 800a1b6:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800a1ba:	f108 0201 	add.w	r2, r8, #1
 800a1be:	4631      	mov	r1, r6
 800a1c0:	4628      	mov	r0, r5
 800a1c2:	47b8      	blx	r7
 800a1c4:	3001      	adds	r0, #1
 800a1c6:	d10e      	bne.n	800a1e6 <_printf_float+0x42a>
 800a1c8:	e657      	b.n	8009e7a <_printf_float+0xbe>
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	4652      	mov	r2, sl
 800a1ce:	4631      	mov	r1, r6
 800a1d0:	4628      	mov	r0, r5
 800a1d2:	47b8      	blx	r7
 800a1d4:	3001      	adds	r0, #1
 800a1d6:	f43f ae50 	beq.w	8009e7a <_printf_float+0xbe>
 800a1da:	f108 0801 	add.w	r8, r8, #1
 800a1de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1e0:	3b01      	subs	r3, #1
 800a1e2:	4543      	cmp	r3, r8
 800a1e4:	dcf1      	bgt.n	800a1ca <_printf_float+0x40e>
 800a1e6:	464b      	mov	r3, r9
 800a1e8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a1ec:	e6da      	b.n	8009fa4 <_printf_float+0x1e8>
 800a1ee:	f04f 0800 	mov.w	r8, #0
 800a1f2:	f104 0a1a 	add.w	sl, r4, #26
 800a1f6:	e7f2      	b.n	800a1de <_printf_float+0x422>
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	4642      	mov	r2, r8
 800a1fc:	e7df      	b.n	800a1be <_printf_float+0x402>
 800a1fe:	2301      	movs	r3, #1
 800a200:	464a      	mov	r2, r9
 800a202:	4631      	mov	r1, r6
 800a204:	4628      	mov	r0, r5
 800a206:	47b8      	blx	r7
 800a208:	3001      	adds	r0, #1
 800a20a:	f43f ae36 	beq.w	8009e7a <_printf_float+0xbe>
 800a20e:	f108 0801 	add.w	r8, r8, #1
 800a212:	68e3      	ldr	r3, [r4, #12]
 800a214:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a216:	1a5b      	subs	r3, r3, r1
 800a218:	4543      	cmp	r3, r8
 800a21a:	dcf0      	bgt.n	800a1fe <_printf_float+0x442>
 800a21c:	e6f8      	b.n	800a010 <_printf_float+0x254>
 800a21e:	f04f 0800 	mov.w	r8, #0
 800a222:	f104 0919 	add.w	r9, r4, #25
 800a226:	e7f4      	b.n	800a212 <_printf_float+0x456>

0800a228 <_printf_common>:
 800a228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a22c:	4616      	mov	r6, r2
 800a22e:	4699      	mov	r9, r3
 800a230:	688a      	ldr	r2, [r1, #8]
 800a232:	690b      	ldr	r3, [r1, #16]
 800a234:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a238:	4293      	cmp	r3, r2
 800a23a:	bfb8      	it	lt
 800a23c:	4613      	movlt	r3, r2
 800a23e:	6033      	str	r3, [r6, #0]
 800a240:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a244:	4607      	mov	r7, r0
 800a246:	460c      	mov	r4, r1
 800a248:	b10a      	cbz	r2, 800a24e <_printf_common+0x26>
 800a24a:	3301      	adds	r3, #1
 800a24c:	6033      	str	r3, [r6, #0]
 800a24e:	6823      	ldr	r3, [r4, #0]
 800a250:	0699      	lsls	r1, r3, #26
 800a252:	bf42      	ittt	mi
 800a254:	6833      	ldrmi	r3, [r6, #0]
 800a256:	3302      	addmi	r3, #2
 800a258:	6033      	strmi	r3, [r6, #0]
 800a25a:	6825      	ldr	r5, [r4, #0]
 800a25c:	f015 0506 	ands.w	r5, r5, #6
 800a260:	d106      	bne.n	800a270 <_printf_common+0x48>
 800a262:	f104 0a19 	add.w	sl, r4, #25
 800a266:	68e3      	ldr	r3, [r4, #12]
 800a268:	6832      	ldr	r2, [r6, #0]
 800a26a:	1a9b      	subs	r3, r3, r2
 800a26c:	42ab      	cmp	r3, r5
 800a26e:	dc26      	bgt.n	800a2be <_printf_common+0x96>
 800a270:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a274:	1e13      	subs	r3, r2, #0
 800a276:	6822      	ldr	r2, [r4, #0]
 800a278:	bf18      	it	ne
 800a27a:	2301      	movne	r3, #1
 800a27c:	0692      	lsls	r2, r2, #26
 800a27e:	d42b      	bmi.n	800a2d8 <_printf_common+0xb0>
 800a280:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a284:	4649      	mov	r1, r9
 800a286:	4638      	mov	r0, r7
 800a288:	47c0      	blx	r8
 800a28a:	3001      	adds	r0, #1
 800a28c:	d01e      	beq.n	800a2cc <_printf_common+0xa4>
 800a28e:	6823      	ldr	r3, [r4, #0]
 800a290:	6922      	ldr	r2, [r4, #16]
 800a292:	f003 0306 	and.w	r3, r3, #6
 800a296:	2b04      	cmp	r3, #4
 800a298:	bf02      	ittt	eq
 800a29a:	68e5      	ldreq	r5, [r4, #12]
 800a29c:	6833      	ldreq	r3, [r6, #0]
 800a29e:	1aed      	subeq	r5, r5, r3
 800a2a0:	68a3      	ldr	r3, [r4, #8]
 800a2a2:	bf0c      	ite	eq
 800a2a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a2a8:	2500      	movne	r5, #0
 800a2aa:	4293      	cmp	r3, r2
 800a2ac:	bfc4      	itt	gt
 800a2ae:	1a9b      	subgt	r3, r3, r2
 800a2b0:	18ed      	addgt	r5, r5, r3
 800a2b2:	2600      	movs	r6, #0
 800a2b4:	341a      	adds	r4, #26
 800a2b6:	42b5      	cmp	r5, r6
 800a2b8:	d11a      	bne.n	800a2f0 <_printf_common+0xc8>
 800a2ba:	2000      	movs	r0, #0
 800a2bc:	e008      	b.n	800a2d0 <_printf_common+0xa8>
 800a2be:	2301      	movs	r3, #1
 800a2c0:	4652      	mov	r2, sl
 800a2c2:	4649      	mov	r1, r9
 800a2c4:	4638      	mov	r0, r7
 800a2c6:	47c0      	blx	r8
 800a2c8:	3001      	adds	r0, #1
 800a2ca:	d103      	bne.n	800a2d4 <_printf_common+0xac>
 800a2cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a2d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2d4:	3501      	adds	r5, #1
 800a2d6:	e7c6      	b.n	800a266 <_printf_common+0x3e>
 800a2d8:	18e1      	adds	r1, r4, r3
 800a2da:	1c5a      	adds	r2, r3, #1
 800a2dc:	2030      	movs	r0, #48	; 0x30
 800a2de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a2e2:	4422      	add	r2, r4
 800a2e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a2e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a2ec:	3302      	adds	r3, #2
 800a2ee:	e7c7      	b.n	800a280 <_printf_common+0x58>
 800a2f0:	2301      	movs	r3, #1
 800a2f2:	4622      	mov	r2, r4
 800a2f4:	4649      	mov	r1, r9
 800a2f6:	4638      	mov	r0, r7
 800a2f8:	47c0      	blx	r8
 800a2fa:	3001      	adds	r0, #1
 800a2fc:	d0e6      	beq.n	800a2cc <_printf_common+0xa4>
 800a2fe:	3601      	adds	r6, #1
 800a300:	e7d9      	b.n	800a2b6 <_printf_common+0x8e>
	...

0800a304 <_printf_i>:
 800a304:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a308:	7e0f      	ldrb	r7, [r1, #24]
 800a30a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a30c:	2f78      	cmp	r7, #120	; 0x78
 800a30e:	4691      	mov	r9, r2
 800a310:	4680      	mov	r8, r0
 800a312:	460c      	mov	r4, r1
 800a314:	469a      	mov	sl, r3
 800a316:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a31a:	d807      	bhi.n	800a32c <_printf_i+0x28>
 800a31c:	2f62      	cmp	r7, #98	; 0x62
 800a31e:	d80a      	bhi.n	800a336 <_printf_i+0x32>
 800a320:	2f00      	cmp	r7, #0
 800a322:	f000 80d4 	beq.w	800a4ce <_printf_i+0x1ca>
 800a326:	2f58      	cmp	r7, #88	; 0x58
 800a328:	f000 80c0 	beq.w	800a4ac <_printf_i+0x1a8>
 800a32c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a330:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a334:	e03a      	b.n	800a3ac <_printf_i+0xa8>
 800a336:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a33a:	2b15      	cmp	r3, #21
 800a33c:	d8f6      	bhi.n	800a32c <_printf_i+0x28>
 800a33e:	a101      	add	r1, pc, #4	; (adr r1, 800a344 <_printf_i+0x40>)
 800a340:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a344:	0800a39d 	.word	0x0800a39d
 800a348:	0800a3b1 	.word	0x0800a3b1
 800a34c:	0800a32d 	.word	0x0800a32d
 800a350:	0800a32d 	.word	0x0800a32d
 800a354:	0800a32d 	.word	0x0800a32d
 800a358:	0800a32d 	.word	0x0800a32d
 800a35c:	0800a3b1 	.word	0x0800a3b1
 800a360:	0800a32d 	.word	0x0800a32d
 800a364:	0800a32d 	.word	0x0800a32d
 800a368:	0800a32d 	.word	0x0800a32d
 800a36c:	0800a32d 	.word	0x0800a32d
 800a370:	0800a4b5 	.word	0x0800a4b5
 800a374:	0800a3dd 	.word	0x0800a3dd
 800a378:	0800a46f 	.word	0x0800a46f
 800a37c:	0800a32d 	.word	0x0800a32d
 800a380:	0800a32d 	.word	0x0800a32d
 800a384:	0800a4d7 	.word	0x0800a4d7
 800a388:	0800a32d 	.word	0x0800a32d
 800a38c:	0800a3dd 	.word	0x0800a3dd
 800a390:	0800a32d 	.word	0x0800a32d
 800a394:	0800a32d 	.word	0x0800a32d
 800a398:	0800a477 	.word	0x0800a477
 800a39c:	682b      	ldr	r3, [r5, #0]
 800a39e:	1d1a      	adds	r2, r3, #4
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	602a      	str	r2, [r5, #0]
 800a3a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a3a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a3ac:	2301      	movs	r3, #1
 800a3ae:	e09f      	b.n	800a4f0 <_printf_i+0x1ec>
 800a3b0:	6820      	ldr	r0, [r4, #0]
 800a3b2:	682b      	ldr	r3, [r5, #0]
 800a3b4:	0607      	lsls	r7, r0, #24
 800a3b6:	f103 0104 	add.w	r1, r3, #4
 800a3ba:	6029      	str	r1, [r5, #0]
 800a3bc:	d501      	bpl.n	800a3c2 <_printf_i+0xbe>
 800a3be:	681e      	ldr	r6, [r3, #0]
 800a3c0:	e003      	b.n	800a3ca <_printf_i+0xc6>
 800a3c2:	0646      	lsls	r6, r0, #25
 800a3c4:	d5fb      	bpl.n	800a3be <_printf_i+0xba>
 800a3c6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a3ca:	2e00      	cmp	r6, #0
 800a3cc:	da03      	bge.n	800a3d6 <_printf_i+0xd2>
 800a3ce:	232d      	movs	r3, #45	; 0x2d
 800a3d0:	4276      	negs	r6, r6
 800a3d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3d6:	485a      	ldr	r0, [pc, #360]	; (800a540 <_printf_i+0x23c>)
 800a3d8:	230a      	movs	r3, #10
 800a3da:	e012      	b.n	800a402 <_printf_i+0xfe>
 800a3dc:	682b      	ldr	r3, [r5, #0]
 800a3de:	6820      	ldr	r0, [r4, #0]
 800a3e0:	1d19      	adds	r1, r3, #4
 800a3e2:	6029      	str	r1, [r5, #0]
 800a3e4:	0605      	lsls	r5, r0, #24
 800a3e6:	d501      	bpl.n	800a3ec <_printf_i+0xe8>
 800a3e8:	681e      	ldr	r6, [r3, #0]
 800a3ea:	e002      	b.n	800a3f2 <_printf_i+0xee>
 800a3ec:	0641      	lsls	r1, r0, #25
 800a3ee:	d5fb      	bpl.n	800a3e8 <_printf_i+0xe4>
 800a3f0:	881e      	ldrh	r6, [r3, #0]
 800a3f2:	4853      	ldr	r0, [pc, #332]	; (800a540 <_printf_i+0x23c>)
 800a3f4:	2f6f      	cmp	r7, #111	; 0x6f
 800a3f6:	bf0c      	ite	eq
 800a3f8:	2308      	moveq	r3, #8
 800a3fa:	230a      	movne	r3, #10
 800a3fc:	2100      	movs	r1, #0
 800a3fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a402:	6865      	ldr	r5, [r4, #4]
 800a404:	60a5      	str	r5, [r4, #8]
 800a406:	2d00      	cmp	r5, #0
 800a408:	bfa2      	ittt	ge
 800a40a:	6821      	ldrge	r1, [r4, #0]
 800a40c:	f021 0104 	bicge.w	r1, r1, #4
 800a410:	6021      	strge	r1, [r4, #0]
 800a412:	b90e      	cbnz	r6, 800a418 <_printf_i+0x114>
 800a414:	2d00      	cmp	r5, #0
 800a416:	d04b      	beq.n	800a4b0 <_printf_i+0x1ac>
 800a418:	4615      	mov	r5, r2
 800a41a:	fbb6 f1f3 	udiv	r1, r6, r3
 800a41e:	fb03 6711 	mls	r7, r3, r1, r6
 800a422:	5dc7      	ldrb	r7, [r0, r7]
 800a424:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a428:	4637      	mov	r7, r6
 800a42a:	42bb      	cmp	r3, r7
 800a42c:	460e      	mov	r6, r1
 800a42e:	d9f4      	bls.n	800a41a <_printf_i+0x116>
 800a430:	2b08      	cmp	r3, #8
 800a432:	d10b      	bne.n	800a44c <_printf_i+0x148>
 800a434:	6823      	ldr	r3, [r4, #0]
 800a436:	07de      	lsls	r6, r3, #31
 800a438:	d508      	bpl.n	800a44c <_printf_i+0x148>
 800a43a:	6923      	ldr	r3, [r4, #16]
 800a43c:	6861      	ldr	r1, [r4, #4]
 800a43e:	4299      	cmp	r1, r3
 800a440:	bfde      	ittt	le
 800a442:	2330      	movle	r3, #48	; 0x30
 800a444:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a448:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a44c:	1b52      	subs	r2, r2, r5
 800a44e:	6122      	str	r2, [r4, #16]
 800a450:	f8cd a000 	str.w	sl, [sp]
 800a454:	464b      	mov	r3, r9
 800a456:	aa03      	add	r2, sp, #12
 800a458:	4621      	mov	r1, r4
 800a45a:	4640      	mov	r0, r8
 800a45c:	f7ff fee4 	bl	800a228 <_printf_common>
 800a460:	3001      	adds	r0, #1
 800a462:	d14a      	bne.n	800a4fa <_printf_i+0x1f6>
 800a464:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a468:	b004      	add	sp, #16
 800a46a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a46e:	6823      	ldr	r3, [r4, #0]
 800a470:	f043 0320 	orr.w	r3, r3, #32
 800a474:	6023      	str	r3, [r4, #0]
 800a476:	4833      	ldr	r0, [pc, #204]	; (800a544 <_printf_i+0x240>)
 800a478:	2778      	movs	r7, #120	; 0x78
 800a47a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a47e:	6823      	ldr	r3, [r4, #0]
 800a480:	6829      	ldr	r1, [r5, #0]
 800a482:	061f      	lsls	r7, r3, #24
 800a484:	f851 6b04 	ldr.w	r6, [r1], #4
 800a488:	d402      	bmi.n	800a490 <_printf_i+0x18c>
 800a48a:	065f      	lsls	r7, r3, #25
 800a48c:	bf48      	it	mi
 800a48e:	b2b6      	uxthmi	r6, r6
 800a490:	07df      	lsls	r7, r3, #31
 800a492:	bf48      	it	mi
 800a494:	f043 0320 	orrmi.w	r3, r3, #32
 800a498:	6029      	str	r1, [r5, #0]
 800a49a:	bf48      	it	mi
 800a49c:	6023      	strmi	r3, [r4, #0]
 800a49e:	b91e      	cbnz	r6, 800a4a8 <_printf_i+0x1a4>
 800a4a0:	6823      	ldr	r3, [r4, #0]
 800a4a2:	f023 0320 	bic.w	r3, r3, #32
 800a4a6:	6023      	str	r3, [r4, #0]
 800a4a8:	2310      	movs	r3, #16
 800a4aa:	e7a7      	b.n	800a3fc <_printf_i+0xf8>
 800a4ac:	4824      	ldr	r0, [pc, #144]	; (800a540 <_printf_i+0x23c>)
 800a4ae:	e7e4      	b.n	800a47a <_printf_i+0x176>
 800a4b0:	4615      	mov	r5, r2
 800a4b2:	e7bd      	b.n	800a430 <_printf_i+0x12c>
 800a4b4:	682b      	ldr	r3, [r5, #0]
 800a4b6:	6826      	ldr	r6, [r4, #0]
 800a4b8:	6961      	ldr	r1, [r4, #20]
 800a4ba:	1d18      	adds	r0, r3, #4
 800a4bc:	6028      	str	r0, [r5, #0]
 800a4be:	0635      	lsls	r5, r6, #24
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	d501      	bpl.n	800a4c8 <_printf_i+0x1c4>
 800a4c4:	6019      	str	r1, [r3, #0]
 800a4c6:	e002      	b.n	800a4ce <_printf_i+0x1ca>
 800a4c8:	0670      	lsls	r0, r6, #25
 800a4ca:	d5fb      	bpl.n	800a4c4 <_printf_i+0x1c0>
 800a4cc:	8019      	strh	r1, [r3, #0]
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	6123      	str	r3, [r4, #16]
 800a4d2:	4615      	mov	r5, r2
 800a4d4:	e7bc      	b.n	800a450 <_printf_i+0x14c>
 800a4d6:	682b      	ldr	r3, [r5, #0]
 800a4d8:	1d1a      	adds	r2, r3, #4
 800a4da:	602a      	str	r2, [r5, #0]
 800a4dc:	681d      	ldr	r5, [r3, #0]
 800a4de:	6862      	ldr	r2, [r4, #4]
 800a4e0:	2100      	movs	r1, #0
 800a4e2:	4628      	mov	r0, r5
 800a4e4:	f7f5 fe74 	bl	80001d0 <memchr>
 800a4e8:	b108      	cbz	r0, 800a4ee <_printf_i+0x1ea>
 800a4ea:	1b40      	subs	r0, r0, r5
 800a4ec:	6060      	str	r0, [r4, #4]
 800a4ee:	6863      	ldr	r3, [r4, #4]
 800a4f0:	6123      	str	r3, [r4, #16]
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a4f8:	e7aa      	b.n	800a450 <_printf_i+0x14c>
 800a4fa:	6923      	ldr	r3, [r4, #16]
 800a4fc:	462a      	mov	r2, r5
 800a4fe:	4649      	mov	r1, r9
 800a500:	4640      	mov	r0, r8
 800a502:	47d0      	blx	sl
 800a504:	3001      	adds	r0, #1
 800a506:	d0ad      	beq.n	800a464 <_printf_i+0x160>
 800a508:	6823      	ldr	r3, [r4, #0]
 800a50a:	079b      	lsls	r3, r3, #30
 800a50c:	d413      	bmi.n	800a536 <_printf_i+0x232>
 800a50e:	68e0      	ldr	r0, [r4, #12]
 800a510:	9b03      	ldr	r3, [sp, #12]
 800a512:	4298      	cmp	r0, r3
 800a514:	bfb8      	it	lt
 800a516:	4618      	movlt	r0, r3
 800a518:	e7a6      	b.n	800a468 <_printf_i+0x164>
 800a51a:	2301      	movs	r3, #1
 800a51c:	4632      	mov	r2, r6
 800a51e:	4649      	mov	r1, r9
 800a520:	4640      	mov	r0, r8
 800a522:	47d0      	blx	sl
 800a524:	3001      	adds	r0, #1
 800a526:	d09d      	beq.n	800a464 <_printf_i+0x160>
 800a528:	3501      	adds	r5, #1
 800a52a:	68e3      	ldr	r3, [r4, #12]
 800a52c:	9903      	ldr	r1, [sp, #12]
 800a52e:	1a5b      	subs	r3, r3, r1
 800a530:	42ab      	cmp	r3, r5
 800a532:	dcf2      	bgt.n	800a51a <_printf_i+0x216>
 800a534:	e7eb      	b.n	800a50e <_printf_i+0x20a>
 800a536:	2500      	movs	r5, #0
 800a538:	f104 0619 	add.w	r6, r4, #25
 800a53c:	e7f5      	b.n	800a52a <_printf_i+0x226>
 800a53e:	bf00      	nop
 800a540:	0800d46e 	.word	0x0800d46e
 800a544:	0800d47f 	.word	0x0800d47f

0800a548 <std>:
 800a548:	2300      	movs	r3, #0
 800a54a:	b510      	push	{r4, lr}
 800a54c:	4604      	mov	r4, r0
 800a54e:	e9c0 3300 	strd	r3, r3, [r0]
 800a552:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a556:	6083      	str	r3, [r0, #8]
 800a558:	8181      	strh	r1, [r0, #12]
 800a55a:	6643      	str	r3, [r0, #100]	; 0x64
 800a55c:	81c2      	strh	r2, [r0, #14]
 800a55e:	6183      	str	r3, [r0, #24]
 800a560:	4619      	mov	r1, r3
 800a562:	2208      	movs	r2, #8
 800a564:	305c      	adds	r0, #92	; 0x5c
 800a566:	f000 f91f 	bl	800a7a8 <memset>
 800a56a:	4b0d      	ldr	r3, [pc, #52]	; (800a5a0 <std+0x58>)
 800a56c:	6263      	str	r3, [r4, #36]	; 0x24
 800a56e:	4b0d      	ldr	r3, [pc, #52]	; (800a5a4 <std+0x5c>)
 800a570:	62a3      	str	r3, [r4, #40]	; 0x28
 800a572:	4b0d      	ldr	r3, [pc, #52]	; (800a5a8 <std+0x60>)
 800a574:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a576:	4b0d      	ldr	r3, [pc, #52]	; (800a5ac <std+0x64>)
 800a578:	6323      	str	r3, [r4, #48]	; 0x30
 800a57a:	4b0d      	ldr	r3, [pc, #52]	; (800a5b0 <std+0x68>)
 800a57c:	6224      	str	r4, [r4, #32]
 800a57e:	429c      	cmp	r4, r3
 800a580:	d006      	beq.n	800a590 <std+0x48>
 800a582:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a586:	4294      	cmp	r4, r2
 800a588:	d002      	beq.n	800a590 <std+0x48>
 800a58a:	33d0      	adds	r3, #208	; 0xd0
 800a58c:	429c      	cmp	r4, r3
 800a58e:	d105      	bne.n	800a59c <std+0x54>
 800a590:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a594:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a598:	f000 b992 	b.w	800a8c0 <__retarget_lock_init_recursive>
 800a59c:	bd10      	pop	{r4, pc}
 800a59e:	bf00      	nop
 800a5a0:	0800c2b9 	.word	0x0800c2b9
 800a5a4:	0800c2db 	.word	0x0800c2db
 800a5a8:	0800c313 	.word	0x0800c313
 800a5ac:	0800c337 	.word	0x0800c337
 800a5b0:	200025d8 	.word	0x200025d8

0800a5b4 <stdio_exit_handler>:
 800a5b4:	4a02      	ldr	r2, [pc, #8]	; (800a5c0 <stdio_exit_handler+0xc>)
 800a5b6:	4903      	ldr	r1, [pc, #12]	; (800a5c4 <stdio_exit_handler+0x10>)
 800a5b8:	4803      	ldr	r0, [pc, #12]	; (800a5c8 <stdio_exit_handler+0x14>)
 800a5ba:	f000 b869 	b.w	800a690 <_fwalk_sglue>
 800a5be:	bf00      	nop
 800a5c0:	20000010 	.word	0x20000010
 800a5c4:	0800bb59 	.word	0x0800bb59
 800a5c8:	2000001c 	.word	0x2000001c

0800a5cc <cleanup_stdio>:
 800a5cc:	6841      	ldr	r1, [r0, #4]
 800a5ce:	4b0c      	ldr	r3, [pc, #48]	; (800a600 <cleanup_stdio+0x34>)
 800a5d0:	4299      	cmp	r1, r3
 800a5d2:	b510      	push	{r4, lr}
 800a5d4:	4604      	mov	r4, r0
 800a5d6:	d001      	beq.n	800a5dc <cleanup_stdio+0x10>
 800a5d8:	f001 fabe 	bl	800bb58 <_fflush_r>
 800a5dc:	68a1      	ldr	r1, [r4, #8]
 800a5de:	4b09      	ldr	r3, [pc, #36]	; (800a604 <cleanup_stdio+0x38>)
 800a5e0:	4299      	cmp	r1, r3
 800a5e2:	d002      	beq.n	800a5ea <cleanup_stdio+0x1e>
 800a5e4:	4620      	mov	r0, r4
 800a5e6:	f001 fab7 	bl	800bb58 <_fflush_r>
 800a5ea:	68e1      	ldr	r1, [r4, #12]
 800a5ec:	4b06      	ldr	r3, [pc, #24]	; (800a608 <cleanup_stdio+0x3c>)
 800a5ee:	4299      	cmp	r1, r3
 800a5f0:	d004      	beq.n	800a5fc <cleanup_stdio+0x30>
 800a5f2:	4620      	mov	r0, r4
 800a5f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5f8:	f001 baae 	b.w	800bb58 <_fflush_r>
 800a5fc:	bd10      	pop	{r4, pc}
 800a5fe:	bf00      	nop
 800a600:	200025d8 	.word	0x200025d8
 800a604:	20002640 	.word	0x20002640
 800a608:	200026a8 	.word	0x200026a8

0800a60c <global_stdio_init.part.0>:
 800a60c:	b510      	push	{r4, lr}
 800a60e:	4b0b      	ldr	r3, [pc, #44]	; (800a63c <global_stdio_init.part.0+0x30>)
 800a610:	4c0b      	ldr	r4, [pc, #44]	; (800a640 <global_stdio_init.part.0+0x34>)
 800a612:	4a0c      	ldr	r2, [pc, #48]	; (800a644 <global_stdio_init.part.0+0x38>)
 800a614:	601a      	str	r2, [r3, #0]
 800a616:	4620      	mov	r0, r4
 800a618:	2200      	movs	r2, #0
 800a61a:	2104      	movs	r1, #4
 800a61c:	f7ff ff94 	bl	800a548 <std>
 800a620:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a624:	2201      	movs	r2, #1
 800a626:	2109      	movs	r1, #9
 800a628:	f7ff ff8e 	bl	800a548 <std>
 800a62c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a630:	2202      	movs	r2, #2
 800a632:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a636:	2112      	movs	r1, #18
 800a638:	f7ff bf86 	b.w	800a548 <std>
 800a63c:	20002710 	.word	0x20002710
 800a640:	200025d8 	.word	0x200025d8
 800a644:	0800a5b5 	.word	0x0800a5b5

0800a648 <__sfp_lock_acquire>:
 800a648:	4801      	ldr	r0, [pc, #4]	; (800a650 <__sfp_lock_acquire+0x8>)
 800a64a:	f000 b93a 	b.w	800a8c2 <__retarget_lock_acquire_recursive>
 800a64e:	bf00      	nop
 800a650:	20002719 	.word	0x20002719

0800a654 <__sfp_lock_release>:
 800a654:	4801      	ldr	r0, [pc, #4]	; (800a65c <__sfp_lock_release+0x8>)
 800a656:	f000 b935 	b.w	800a8c4 <__retarget_lock_release_recursive>
 800a65a:	bf00      	nop
 800a65c:	20002719 	.word	0x20002719

0800a660 <__sinit>:
 800a660:	b510      	push	{r4, lr}
 800a662:	4604      	mov	r4, r0
 800a664:	f7ff fff0 	bl	800a648 <__sfp_lock_acquire>
 800a668:	6a23      	ldr	r3, [r4, #32]
 800a66a:	b11b      	cbz	r3, 800a674 <__sinit+0x14>
 800a66c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a670:	f7ff bff0 	b.w	800a654 <__sfp_lock_release>
 800a674:	4b04      	ldr	r3, [pc, #16]	; (800a688 <__sinit+0x28>)
 800a676:	6223      	str	r3, [r4, #32]
 800a678:	4b04      	ldr	r3, [pc, #16]	; (800a68c <__sinit+0x2c>)
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d1f5      	bne.n	800a66c <__sinit+0xc>
 800a680:	f7ff ffc4 	bl	800a60c <global_stdio_init.part.0>
 800a684:	e7f2      	b.n	800a66c <__sinit+0xc>
 800a686:	bf00      	nop
 800a688:	0800a5cd 	.word	0x0800a5cd
 800a68c:	20002710 	.word	0x20002710

0800a690 <_fwalk_sglue>:
 800a690:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a694:	4607      	mov	r7, r0
 800a696:	4688      	mov	r8, r1
 800a698:	4614      	mov	r4, r2
 800a69a:	2600      	movs	r6, #0
 800a69c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a6a0:	f1b9 0901 	subs.w	r9, r9, #1
 800a6a4:	d505      	bpl.n	800a6b2 <_fwalk_sglue+0x22>
 800a6a6:	6824      	ldr	r4, [r4, #0]
 800a6a8:	2c00      	cmp	r4, #0
 800a6aa:	d1f7      	bne.n	800a69c <_fwalk_sglue+0xc>
 800a6ac:	4630      	mov	r0, r6
 800a6ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6b2:	89ab      	ldrh	r3, [r5, #12]
 800a6b4:	2b01      	cmp	r3, #1
 800a6b6:	d907      	bls.n	800a6c8 <_fwalk_sglue+0x38>
 800a6b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a6bc:	3301      	adds	r3, #1
 800a6be:	d003      	beq.n	800a6c8 <_fwalk_sglue+0x38>
 800a6c0:	4629      	mov	r1, r5
 800a6c2:	4638      	mov	r0, r7
 800a6c4:	47c0      	blx	r8
 800a6c6:	4306      	orrs	r6, r0
 800a6c8:	3568      	adds	r5, #104	; 0x68
 800a6ca:	e7e9      	b.n	800a6a0 <_fwalk_sglue+0x10>

0800a6cc <iprintf>:
 800a6cc:	b40f      	push	{r0, r1, r2, r3}
 800a6ce:	b507      	push	{r0, r1, r2, lr}
 800a6d0:	4906      	ldr	r1, [pc, #24]	; (800a6ec <iprintf+0x20>)
 800a6d2:	ab04      	add	r3, sp, #16
 800a6d4:	6808      	ldr	r0, [r1, #0]
 800a6d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6da:	6881      	ldr	r1, [r0, #8]
 800a6dc:	9301      	str	r3, [sp, #4]
 800a6de:	f000 fff3 	bl	800b6c8 <_vfiprintf_r>
 800a6e2:	b003      	add	sp, #12
 800a6e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a6e8:	b004      	add	sp, #16
 800a6ea:	4770      	bx	lr
 800a6ec:	20000068 	.word	0x20000068

0800a6f0 <_puts_r>:
 800a6f0:	6a03      	ldr	r3, [r0, #32]
 800a6f2:	b570      	push	{r4, r5, r6, lr}
 800a6f4:	6884      	ldr	r4, [r0, #8]
 800a6f6:	4605      	mov	r5, r0
 800a6f8:	460e      	mov	r6, r1
 800a6fa:	b90b      	cbnz	r3, 800a700 <_puts_r+0x10>
 800a6fc:	f7ff ffb0 	bl	800a660 <__sinit>
 800a700:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a702:	07db      	lsls	r3, r3, #31
 800a704:	d405      	bmi.n	800a712 <_puts_r+0x22>
 800a706:	89a3      	ldrh	r3, [r4, #12]
 800a708:	0598      	lsls	r0, r3, #22
 800a70a:	d402      	bmi.n	800a712 <_puts_r+0x22>
 800a70c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a70e:	f000 f8d8 	bl	800a8c2 <__retarget_lock_acquire_recursive>
 800a712:	89a3      	ldrh	r3, [r4, #12]
 800a714:	0719      	lsls	r1, r3, #28
 800a716:	d513      	bpl.n	800a740 <_puts_r+0x50>
 800a718:	6923      	ldr	r3, [r4, #16]
 800a71a:	b18b      	cbz	r3, 800a740 <_puts_r+0x50>
 800a71c:	3e01      	subs	r6, #1
 800a71e:	68a3      	ldr	r3, [r4, #8]
 800a720:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a724:	3b01      	subs	r3, #1
 800a726:	60a3      	str	r3, [r4, #8]
 800a728:	b9e9      	cbnz	r1, 800a766 <_puts_r+0x76>
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	da2e      	bge.n	800a78c <_puts_r+0x9c>
 800a72e:	4622      	mov	r2, r4
 800a730:	210a      	movs	r1, #10
 800a732:	4628      	mov	r0, r5
 800a734:	f001 fe03 	bl	800c33e <__swbuf_r>
 800a738:	3001      	adds	r0, #1
 800a73a:	d007      	beq.n	800a74c <_puts_r+0x5c>
 800a73c:	250a      	movs	r5, #10
 800a73e:	e007      	b.n	800a750 <_puts_r+0x60>
 800a740:	4621      	mov	r1, r4
 800a742:	4628      	mov	r0, r5
 800a744:	f001 fe38 	bl	800c3b8 <__swsetup_r>
 800a748:	2800      	cmp	r0, #0
 800a74a:	d0e7      	beq.n	800a71c <_puts_r+0x2c>
 800a74c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800a750:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a752:	07da      	lsls	r2, r3, #31
 800a754:	d405      	bmi.n	800a762 <_puts_r+0x72>
 800a756:	89a3      	ldrh	r3, [r4, #12]
 800a758:	059b      	lsls	r3, r3, #22
 800a75a:	d402      	bmi.n	800a762 <_puts_r+0x72>
 800a75c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a75e:	f000 f8b1 	bl	800a8c4 <__retarget_lock_release_recursive>
 800a762:	4628      	mov	r0, r5
 800a764:	bd70      	pop	{r4, r5, r6, pc}
 800a766:	2b00      	cmp	r3, #0
 800a768:	da04      	bge.n	800a774 <_puts_r+0x84>
 800a76a:	69a2      	ldr	r2, [r4, #24]
 800a76c:	429a      	cmp	r2, r3
 800a76e:	dc06      	bgt.n	800a77e <_puts_r+0x8e>
 800a770:	290a      	cmp	r1, #10
 800a772:	d004      	beq.n	800a77e <_puts_r+0x8e>
 800a774:	6823      	ldr	r3, [r4, #0]
 800a776:	1c5a      	adds	r2, r3, #1
 800a778:	6022      	str	r2, [r4, #0]
 800a77a:	7019      	strb	r1, [r3, #0]
 800a77c:	e7cf      	b.n	800a71e <_puts_r+0x2e>
 800a77e:	4622      	mov	r2, r4
 800a780:	4628      	mov	r0, r5
 800a782:	f001 fddc 	bl	800c33e <__swbuf_r>
 800a786:	3001      	adds	r0, #1
 800a788:	d1c9      	bne.n	800a71e <_puts_r+0x2e>
 800a78a:	e7df      	b.n	800a74c <_puts_r+0x5c>
 800a78c:	6823      	ldr	r3, [r4, #0]
 800a78e:	250a      	movs	r5, #10
 800a790:	1c5a      	adds	r2, r3, #1
 800a792:	6022      	str	r2, [r4, #0]
 800a794:	701d      	strb	r5, [r3, #0]
 800a796:	e7db      	b.n	800a750 <_puts_r+0x60>

0800a798 <puts>:
 800a798:	4b02      	ldr	r3, [pc, #8]	; (800a7a4 <puts+0xc>)
 800a79a:	4601      	mov	r1, r0
 800a79c:	6818      	ldr	r0, [r3, #0]
 800a79e:	f7ff bfa7 	b.w	800a6f0 <_puts_r>
 800a7a2:	bf00      	nop
 800a7a4:	20000068 	.word	0x20000068

0800a7a8 <memset>:
 800a7a8:	4402      	add	r2, r0
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	4293      	cmp	r3, r2
 800a7ae:	d100      	bne.n	800a7b2 <memset+0xa>
 800a7b0:	4770      	bx	lr
 800a7b2:	f803 1b01 	strb.w	r1, [r3], #1
 800a7b6:	e7f9      	b.n	800a7ac <memset+0x4>

0800a7b8 <_localeconv_r>:
 800a7b8:	4800      	ldr	r0, [pc, #0]	; (800a7bc <_localeconv_r+0x4>)
 800a7ba:	4770      	bx	lr
 800a7bc:	2000015c 	.word	0x2000015c

0800a7c0 <_reclaim_reent>:
 800a7c0:	4b29      	ldr	r3, [pc, #164]	; (800a868 <_reclaim_reent+0xa8>)
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	4283      	cmp	r3, r0
 800a7c6:	b570      	push	{r4, r5, r6, lr}
 800a7c8:	4604      	mov	r4, r0
 800a7ca:	d04b      	beq.n	800a864 <_reclaim_reent+0xa4>
 800a7cc:	69c3      	ldr	r3, [r0, #28]
 800a7ce:	b143      	cbz	r3, 800a7e2 <_reclaim_reent+0x22>
 800a7d0:	68db      	ldr	r3, [r3, #12]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d144      	bne.n	800a860 <_reclaim_reent+0xa0>
 800a7d6:	69e3      	ldr	r3, [r4, #28]
 800a7d8:	6819      	ldr	r1, [r3, #0]
 800a7da:	b111      	cbz	r1, 800a7e2 <_reclaim_reent+0x22>
 800a7dc:	4620      	mov	r0, r4
 800a7de:	f000 fefd 	bl	800b5dc <_free_r>
 800a7e2:	6961      	ldr	r1, [r4, #20]
 800a7e4:	b111      	cbz	r1, 800a7ec <_reclaim_reent+0x2c>
 800a7e6:	4620      	mov	r0, r4
 800a7e8:	f000 fef8 	bl	800b5dc <_free_r>
 800a7ec:	69e1      	ldr	r1, [r4, #28]
 800a7ee:	b111      	cbz	r1, 800a7f6 <_reclaim_reent+0x36>
 800a7f0:	4620      	mov	r0, r4
 800a7f2:	f000 fef3 	bl	800b5dc <_free_r>
 800a7f6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a7f8:	b111      	cbz	r1, 800a800 <_reclaim_reent+0x40>
 800a7fa:	4620      	mov	r0, r4
 800a7fc:	f000 feee 	bl	800b5dc <_free_r>
 800a800:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a802:	b111      	cbz	r1, 800a80a <_reclaim_reent+0x4a>
 800a804:	4620      	mov	r0, r4
 800a806:	f000 fee9 	bl	800b5dc <_free_r>
 800a80a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a80c:	b111      	cbz	r1, 800a814 <_reclaim_reent+0x54>
 800a80e:	4620      	mov	r0, r4
 800a810:	f000 fee4 	bl	800b5dc <_free_r>
 800a814:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a816:	b111      	cbz	r1, 800a81e <_reclaim_reent+0x5e>
 800a818:	4620      	mov	r0, r4
 800a81a:	f000 fedf 	bl	800b5dc <_free_r>
 800a81e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a820:	b111      	cbz	r1, 800a828 <_reclaim_reent+0x68>
 800a822:	4620      	mov	r0, r4
 800a824:	f000 feda 	bl	800b5dc <_free_r>
 800a828:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800a82a:	b111      	cbz	r1, 800a832 <_reclaim_reent+0x72>
 800a82c:	4620      	mov	r0, r4
 800a82e:	f000 fed5 	bl	800b5dc <_free_r>
 800a832:	6a23      	ldr	r3, [r4, #32]
 800a834:	b1b3      	cbz	r3, 800a864 <_reclaim_reent+0xa4>
 800a836:	4620      	mov	r0, r4
 800a838:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a83c:	4718      	bx	r3
 800a83e:	5949      	ldr	r1, [r1, r5]
 800a840:	b941      	cbnz	r1, 800a854 <_reclaim_reent+0x94>
 800a842:	3504      	adds	r5, #4
 800a844:	69e3      	ldr	r3, [r4, #28]
 800a846:	2d80      	cmp	r5, #128	; 0x80
 800a848:	68d9      	ldr	r1, [r3, #12]
 800a84a:	d1f8      	bne.n	800a83e <_reclaim_reent+0x7e>
 800a84c:	4620      	mov	r0, r4
 800a84e:	f000 fec5 	bl	800b5dc <_free_r>
 800a852:	e7c0      	b.n	800a7d6 <_reclaim_reent+0x16>
 800a854:	680e      	ldr	r6, [r1, #0]
 800a856:	4620      	mov	r0, r4
 800a858:	f000 fec0 	bl	800b5dc <_free_r>
 800a85c:	4631      	mov	r1, r6
 800a85e:	e7ef      	b.n	800a840 <_reclaim_reent+0x80>
 800a860:	2500      	movs	r5, #0
 800a862:	e7ef      	b.n	800a844 <_reclaim_reent+0x84>
 800a864:	bd70      	pop	{r4, r5, r6, pc}
 800a866:	bf00      	nop
 800a868:	20000068 	.word	0x20000068

0800a86c <__errno>:
 800a86c:	4b01      	ldr	r3, [pc, #4]	; (800a874 <__errno+0x8>)
 800a86e:	6818      	ldr	r0, [r3, #0]
 800a870:	4770      	bx	lr
 800a872:	bf00      	nop
 800a874:	20000068 	.word	0x20000068

0800a878 <__libc_init_array>:
 800a878:	b570      	push	{r4, r5, r6, lr}
 800a87a:	4d0d      	ldr	r5, [pc, #52]	; (800a8b0 <__libc_init_array+0x38>)
 800a87c:	4c0d      	ldr	r4, [pc, #52]	; (800a8b4 <__libc_init_array+0x3c>)
 800a87e:	1b64      	subs	r4, r4, r5
 800a880:	10a4      	asrs	r4, r4, #2
 800a882:	2600      	movs	r6, #0
 800a884:	42a6      	cmp	r6, r4
 800a886:	d109      	bne.n	800a89c <__libc_init_array+0x24>
 800a888:	4d0b      	ldr	r5, [pc, #44]	; (800a8b8 <__libc_init_array+0x40>)
 800a88a:	4c0c      	ldr	r4, [pc, #48]	; (800a8bc <__libc_init_array+0x44>)
 800a88c:	f002 fc2e 	bl	800d0ec <_init>
 800a890:	1b64      	subs	r4, r4, r5
 800a892:	10a4      	asrs	r4, r4, #2
 800a894:	2600      	movs	r6, #0
 800a896:	42a6      	cmp	r6, r4
 800a898:	d105      	bne.n	800a8a6 <__libc_init_array+0x2e>
 800a89a:	bd70      	pop	{r4, r5, r6, pc}
 800a89c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8a0:	4798      	blx	r3
 800a8a2:	3601      	adds	r6, #1
 800a8a4:	e7ee      	b.n	800a884 <__libc_init_array+0xc>
 800a8a6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8aa:	4798      	blx	r3
 800a8ac:	3601      	adds	r6, #1
 800a8ae:	e7f2      	b.n	800a896 <__libc_init_array+0x1e>
 800a8b0:	0800d858 	.word	0x0800d858
 800a8b4:	0800d858 	.word	0x0800d858
 800a8b8:	0800d858 	.word	0x0800d858
 800a8bc:	0800d85c 	.word	0x0800d85c

0800a8c0 <__retarget_lock_init_recursive>:
 800a8c0:	4770      	bx	lr

0800a8c2 <__retarget_lock_acquire_recursive>:
 800a8c2:	4770      	bx	lr

0800a8c4 <__retarget_lock_release_recursive>:
 800a8c4:	4770      	bx	lr

0800a8c6 <memcpy>:
 800a8c6:	440a      	add	r2, r1
 800a8c8:	4291      	cmp	r1, r2
 800a8ca:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a8ce:	d100      	bne.n	800a8d2 <memcpy+0xc>
 800a8d0:	4770      	bx	lr
 800a8d2:	b510      	push	{r4, lr}
 800a8d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a8d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a8dc:	4291      	cmp	r1, r2
 800a8de:	d1f9      	bne.n	800a8d4 <memcpy+0xe>
 800a8e0:	bd10      	pop	{r4, pc}

0800a8e2 <quorem>:
 800a8e2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8e6:	6903      	ldr	r3, [r0, #16]
 800a8e8:	690c      	ldr	r4, [r1, #16]
 800a8ea:	42a3      	cmp	r3, r4
 800a8ec:	4607      	mov	r7, r0
 800a8ee:	db7e      	blt.n	800a9ee <quorem+0x10c>
 800a8f0:	3c01      	subs	r4, #1
 800a8f2:	f101 0814 	add.w	r8, r1, #20
 800a8f6:	f100 0514 	add.w	r5, r0, #20
 800a8fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a8fe:	9301      	str	r3, [sp, #4]
 800a900:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a904:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a908:	3301      	adds	r3, #1
 800a90a:	429a      	cmp	r2, r3
 800a90c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a910:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a914:	fbb2 f6f3 	udiv	r6, r2, r3
 800a918:	d331      	bcc.n	800a97e <quorem+0x9c>
 800a91a:	f04f 0e00 	mov.w	lr, #0
 800a91e:	4640      	mov	r0, r8
 800a920:	46ac      	mov	ip, r5
 800a922:	46f2      	mov	sl, lr
 800a924:	f850 2b04 	ldr.w	r2, [r0], #4
 800a928:	b293      	uxth	r3, r2
 800a92a:	fb06 e303 	mla	r3, r6, r3, lr
 800a92e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a932:	0c1a      	lsrs	r2, r3, #16
 800a934:	b29b      	uxth	r3, r3
 800a936:	ebaa 0303 	sub.w	r3, sl, r3
 800a93a:	f8dc a000 	ldr.w	sl, [ip]
 800a93e:	fa13 f38a 	uxtah	r3, r3, sl
 800a942:	fb06 220e 	mla	r2, r6, lr, r2
 800a946:	9300      	str	r3, [sp, #0]
 800a948:	9b00      	ldr	r3, [sp, #0]
 800a94a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a94e:	b292      	uxth	r2, r2
 800a950:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a954:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a958:	f8bd 3000 	ldrh.w	r3, [sp]
 800a95c:	4581      	cmp	r9, r0
 800a95e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a962:	f84c 3b04 	str.w	r3, [ip], #4
 800a966:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a96a:	d2db      	bcs.n	800a924 <quorem+0x42>
 800a96c:	f855 300b 	ldr.w	r3, [r5, fp]
 800a970:	b92b      	cbnz	r3, 800a97e <quorem+0x9c>
 800a972:	9b01      	ldr	r3, [sp, #4]
 800a974:	3b04      	subs	r3, #4
 800a976:	429d      	cmp	r5, r3
 800a978:	461a      	mov	r2, r3
 800a97a:	d32c      	bcc.n	800a9d6 <quorem+0xf4>
 800a97c:	613c      	str	r4, [r7, #16]
 800a97e:	4638      	mov	r0, r7
 800a980:	f001 fb9a 	bl	800c0b8 <__mcmp>
 800a984:	2800      	cmp	r0, #0
 800a986:	db22      	blt.n	800a9ce <quorem+0xec>
 800a988:	3601      	adds	r6, #1
 800a98a:	4629      	mov	r1, r5
 800a98c:	2000      	movs	r0, #0
 800a98e:	f858 2b04 	ldr.w	r2, [r8], #4
 800a992:	f8d1 c000 	ldr.w	ip, [r1]
 800a996:	b293      	uxth	r3, r2
 800a998:	1ac3      	subs	r3, r0, r3
 800a99a:	0c12      	lsrs	r2, r2, #16
 800a99c:	fa13 f38c 	uxtah	r3, r3, ip
 800a9a0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a9a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a9a8:	b29b      	uxth	r3, r3
 800a9aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a9ae:	45c1      	cmp	r9, r8
 800a9b0:	f841 3b04 	str.w	r3, [r1], #4
 800a9b4:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a9b8:	d2e9      	bcs.n	800a98e <quorem+0xac>
 800a9ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a9be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a9c2:	b922      	cbnz	r2, 800a9ce <quorem+0xec>
 800a9c4:	3b04      	subs	r3, #4
 800a9c6:	429d      	cmp	r5, r3
 800a9c8:	461a      	mov	r2, r3
 800a9ca:	d30a      	bcc.n	800a9e2 <quorem+0x100>
 800a9cc:	613c      	str	r4, [r7, #16]
 800a9ce:	4630      	mov	r0, r6
 800a9d0:	b003      	add	sp, #12
 800a9d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9d6:	6812      	ldr	r2, [r2, #0]
 800a9d8:	3b04      	subs	r3, #4
 800a9da:	2a00      	cmp	r2, #0
 800a9dc:	d1ce      	bne.n	800a97c <quorem+0x9a>
 800a9de:	3c01      	subs	r4, #1
 800a9e0:	e7c9      	b.n	800a976 <quorem+0x94>
 800a9e2:	6812      	ldr	r2, [r2, #0]
 800a9e4:	3b04      	subs	r3, #4
 800a9e6:	2a00      	cmp	r2, #0
 800a9e8:	d1f0      	bne.n	800a9cc <quorem+0xea>
 800a9ea:	3c01      	subs	r4, #1
 800a9ec:	e7eb      	b.n	800a9c6 <quorem+0xe4>
 800a9ee:	2000      	movs	r0, #0
 800a9f0:	e7ee      	b.n	800a9d0 <quorem+0xee>
 800a9f2:	0000      	movs	r0, r0
 800a9f4:	0000      	movs	r0, r0
	...

0800a9f8 <_dtoa_r>:
 800a9f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9fc:	ed2d 8b04 	vpush	{d8-d9}
 800aa00:	69c5      	ldr	r5, [r0, #28]
 800aa02:	b093      	sub	sp, #76	; 0x4c
 800aa04:	ed8d 0b02 	vstr	d0, [sp, #8]
 800aa08:	ec57 6b10 	vmov	r6, r7, d0
 800aa0c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800aa10:	9107      	str	r1, [sp, #28]
 800aa12:	4604      	mov	r4, r0
 800aa14:	920a      	str	r2, [sp, #40]	; 0x28
 800aa16:	930d      	str	r3, [sp, #52]	; 0x34
 800aa18:	b975      	cbnz	r5, 800aa38 <_dtoa_r+0x40>
 800aa1a:	2010      	movs	r0, #16
 800aa1c:	f000 ff6e 	bl	800b8fc <malloc>
 800aa20:	4602      	mov	r2, r0
 800aa22:	61e0      	str	r0, [r4, #28]
 800aa24:	b920      	cbnz	r0, 800aa30 <_dtoa_r+0x38>
 800aa26:	4bae      	ldr	r3, [pc, #696]	; (800ace0 <_dtoa_r+0x2e8>)
 800aa28:	21ef      	movs	r1, #239	; 0xef
 800aa2a:	48ae      	ldr	r0, [pc, #696]	; (800ace4 <_dtoa_r+0x2ec>)
 800aa2c:	f001 fdf6 	bl	800c61c <__assert_func>
 800aa30:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800aa34:	6005      	str	r5, [r0, #0]
 800aa36:	60c5      	str	r5, [r0, #12]
 800aa38:	69e3      	ldr	r3, [r4, #28]
 800aa3a:	6819      	ldr	r1, [r3, #0]
 800aa3c:	b151      	cbz	r1, 800aa54 <_dtoa_r+0x5c>
 800aa3e:	685a      	ldr	r2, [r3, #4]
 800aa40:	604a      	str	r2, [r1, #4]
 800aa42:	2301      	movs	r3, #1
 800aa44:	4093      	lsls	r3, r2
 800aa46:	608b      	str	r3, [r1, #8]
 800aa48:	4620      	mov	r0, r4
 800aa4a:	f001 f8f9 	bl	800bc40 <_Bfree>
 800aa4e:	69e3      	ldr	r3, [r4, #28]
 800aa50:	2200      	movs	r2, #0
 800aa52:	601a      	str	r2, [r3, #0]
 800aa54:	1e3b      	subs	r3, r7, #0
 800aa56:	bfbb      	ittet	lt
 800aa58:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800aa5c:	9303      	strlt	r3, [sp, #12]
 800aa5e:	2300      	movge	r3, #0
 800aa60:	2201      	movlt	r2, #1
 800aa62:	bfac      	ite	ge
 800aa64:	f8c8 3000 	strge.w	r3, [r8]
 800aa68:	f8c8 2000 	strlt.w	r2, [r8]
 800aa6c:	4b9e      	ldr	r3, [pc, #632]	; (800ace8 <_dtoa_r+0x2f0>)
 800aa6e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800aa72:	ea33 0308 	bics.w	r3, r3, r8
 800aa76:	d11b      	bne.n	800aab0 <_dtoa_r+0xb8>
 800aa78:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aa7a:	f242 730f 	movw	r3, #9999	; 0x270f
 800aa7e:	6013      	str	r3, [r2, #0]
 800aa80:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800aa84:	4333      	orrs	r3, r6
 800aa86:	f000 8593 	beq.w	800b5b0 <_dtoa_r+0xbb8>
 800aa8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aa8c:	b963      	cbnz	r3, 800aaa8 <_dtoa_r+0xb0>
 800aa8e:	4b97      	ldr	r3, [pc, #604]	; (800acec <_dtoa_r+0x2f4>)
 800aa90:	e027      	b.n	800aae2 <_dtoa_r+0xea>
 800aa92:	4b97      	ldr	r3, [pc, #604]	; (800acf0 <_dtoa_r+0x2f8>)
 800aa94:	9300      	str	r3, [sp, #0]
 800aa96:	3308      	adds	r3, #8
 800aa98:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800aa9a:	6013      	str	r3, [r2, #0]
 800aa9c:	9800      	ldr	r0, [sp, #0]
 800aa9e:	b013      	add	sp, #76	; 0x4c
 800aaa0:	ecbd 8b04 	vpop	{d8-d9}
 800aaa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaa8:	4b90      	ldr	r3, [pc, #576]	; (800acec <_dtoa_r+0x2f4>)
 800aaaa:	9300      	str	r3, [sp, #0]
 800aaac:	3303      	adds	r3, #3
 800aaae:	e7f3      	b.n	800aa98 <_dtoa_r+0xa0>
 800aab0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aab4:	2200      	movs	r2, #0
 800aab6:	ec51 0b17 	vmov	r0, r1, d7
 800aaba:	eeb0 8a47 	vmov.f32	s16, s14
 800aabe:	eef0 8a67 	vmov.f32	s17, s15
 800aac2:	2300      	movs	r3, #0
 800aac4:	f7f6 f800 	bl	8000ac8 <__aeabi_dcmpeq>
 800aac8:	4681      	mov	r9, r0
 800aaca:	b160      	cbz	r0, 800aae6 <_dtoa_r+0xee>
 800aacc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aace:	2301      	movs	r3, #1
 800aad0:	6013      	str	r3, [r2, #0]
 800aad2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	f000 8568 	beq.w	800b5aa <_dtoa_r+0xbb2>
 800aada:	4b86      	ldr	r3, [pc, #536]	; (800acf4 <_dtoa_r+0x2fc>)
 800aadc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800aade:	6013      	str	r3, [r2, #0]
 800aae0:	3b01      	subs	r3, #1
 800aae2:	9300      	str	r3, [sp, #0]
 800aae4:	e7da      	b.n	800aa9c <_dtoa_r+0xa4>
 800aae6:	aa10      	add	r2, sp, #64	; 0x40
 800aae8:	a911      	add	r1, sp, #68	; 0x44
 800aaea:	4620      	mov	r0, r4
 800aaec:	eeb0 0a48 	vmov.f32	s0, s16
 800aaf0:	eef0 0a68 	vmov.f32	s1, s17
 800aaf4:	f001 fb86 	bl	800c204 <__d2b>
 800aaf8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800aafc:	4682      	mov	sl, r0
 800aafe:	2d00      	cmp	r5, #0
 800ab00:	d07f      	beq.n	800ac02 <_dtoa_r+0x20a>
 800ab02:	ee18 3a90 	vmov	r3, s17
 800ab06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ab0a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800ab0e:	ec51 0b18 	vmov	r0, r1, d8
 800ab12:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ab16:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ab1a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800ab1e:	4619      	mov	r1, r3
 800ab20:	2200      	movs	r2, #0
 800ab22:	4b75      	ldr	r3, [pc, #468]	; (800acf8 <_dtoa_r+0x300>)
 800ab24:	f7f5 fbb0 	bl	8000288 <__aeabi_dsub>
 800ab28:	a367      	add	r3, pc, #412	; (adr r3, 800acc8 <_dtoa_r+0x2d0>)
 800ab2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab2e:	f7f5 fd63 	bl	80005f8 <__aeabi_dmul>
 800ab32:	a367      	add	r3, pc, #412	; (adr r3, 800acd0 <_dtoa_r+0x2d8>)
 800ab34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab38:	f7f5 fba8 	bl	800028c <__adddf3>
 800ab3c:	4606      	mov	r6, r0
 800ab3e:	4628      	mov	r0, r5
 800ab40:	460f      	mov	r7, r1
 800ab42:	f7f5 fcef 	bl	8000524 <__aeabi_i2d>
 800ab46:	a364      	add	r3, pc, #400	; (adr r3, 800acd8 <_dtoa_r+0x2e0>)
 800ab48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab4c:	f7f5 fd54 	bl	80005f8 <__aeabi_dmul>
 800ab50:	4602      	mov	r2, r0
 800ab52:	460b      	mov	r3, r1
 800ab54:	4630      	mov	r0, r6
 800ab56:	4639      	mov	r1, r7
 800ab58:	f7f5 fb98 	bl	800028c <__adddf3>
 800ab5c:	4606      	mov	r6, r0
 800ab5e:	460f      	mov	r7, r1
 800ab60:	f7f5 fffa 	bl	8000b58 <__aeabi_d2iz>
 800ab64:	2200      	movs	r2, #0
 800ab66:	4683      	mov	fp, r0
 800ab68:	2300      	movs	r3, #0
 800ab6a:	4630      	mov	r0, r6
 800ab6c:	4639      	mov	r1, r7
 800ab6e:	f7f5 ffb5 	bl	8000adc <__aeabi_dcmplt>
 800ab72:	b148      	cbz	r0, 800ab88 <_dtoa_r+0x190>
 800ab74:	4658      	mov	r0, fp
 800ab76:	f7f5 fcd5 	bl	8000524 <__aeabi_i2d>
 800ab7a:	4632      	mov	r2, r6
 800ab7c:	463b      	mov	r3, r7
 800ab7e:	f7f5 ffa3 	bl	8000ac8 <__aeabi_dcmpeq>
 800ab82:	b908      	cbnz	r0, 800ab88 <_dtoa_r+0x190>
 800ab84:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800ab88:	f1bb 0f16 	cmp.w	fp, #22
 800ab8c:	d857      	bhi.n	800ac3e <_dtoa_r+0x246>
 800ab8e:	4b5b      	ldr	r3, [pc, #364]	; (800acfc <_dtoa_r+0x304>)
 800ab90:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ab94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab98:	ec51 0b18 	vmov	r0, r1, d8
 800ab9c:	f7f5 ff9e 	bl	8000adc <__aeabi_dcmplt>
 800aba0:	2800      	cmp	r0, #0
 800aba2:	d04e      	beq.n	800ac42 <_dtoa_r+0x24a>
 800aba4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800aba8:	2300      	movs	r3, #0
 800abaa:	930c      	str	r3, [sp, #48]	; 0x30
 800abac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800abae:	1b5b      	subs	r3, r3, r5
 800abb0:	1e5a      	subs	r2, r3, #1
 800abb2:	bf45      	ittet	mi
 800abb4:	f1c3 0301 	rsbmi	r3, r3, #1
 800abb8:	9305      	strmi	r3, [sp, #20]
 800abba:	2300      	movpl	r3, #0
 800abbc:	2300      	movmi	r3, #0
 800abbe:	9206      	str	r2, [sp, #24]
 800abc0:	bf54      	ite	pl
 800abc2:	9305      	strpl	r3, [sp, #20]
 800abc4:	9306      	strmi	r3, [sp, #24]
 800abc6:	f1bb 0f00 	cmp.w	fp, #0
 800abca:	db3c      	blt.n	800ac46 <_dtoa_r+0x24e>
 800abcc:	9b06      	ldr	r3, [sp, #24]
 800abce:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800abd2:	445b      	add	r3, fp
 800abd4:	9306      	str	r3, [sp, #24]
 800abd6:	2300      	movs	r3, #0
 800abd8:	9308      	str	r3, [sp, #32]
 800abda:	9b07      	ldr	r3, [sp, #28]
 800abdc:	2b09      	cmp	r3, #9
 800abde:	d868      	bhi.n	800acb2 <_dtoa_r+0x2ba>
 800abe0:	2b05      	cmp	r3, #5
 800abe2:	bfc4      	itt	gt
 800abe4:	3b04      	subgt	r3, #4
 800abe6:	9307      	strgt	r3, [sp, #28]
 800abe8:	9b07      	ldr	r3, [sp, #28]
 800abea:	f1a3 0302 	sub.w	r3, r3, #2
 800abee:	bfcc      	ite	gt
 800abf0:	2500      	movgt	r5, #0
 800abf2:	2501      	movle	r5, #1
 800abf4:	2b03      	cmp	r3, #3
 800abf6:	f200 8085 	bhi.w	800ad04 <_dtoa_r+0x30c>
 800abfa:	e8df f003 	tbb	[pc, r3]
 800abfe:	3b2e      	.short	0x3b2e
 800ac00:	5839      	.short	0x5839
 800ac02:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ac06:	441d      	add	r5, r3
 800ac08:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ac0c:	2b20      	cmp	r3, #32
 800ac0e:	bfc1      	itttt	gt
 800ac10:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ac14:	fa08 f803 	lslgt.w	r8, r8, r3
 800ac18:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800ac1c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800ac20:	bfd6      	itet	le
 800ac22:	f1c3 0320 	rsble	r3, r3, #32
 800ac26:	ea48 0003 	orrgt.w	r0, r8, r3
 800ac2a:	fa06 f003 	lslle.w	r0, r6, r3
 800ac2e:	f7f5 fc69 	bl	8000504 <__aeabi_ui2d>
 800ac32:	2201      	movs	r2, #1
 800ac34:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800ac38:	3d01      	subs	r5, #1
 800ac3a:	920e      	str	r2, [sp, #56]	; 0x38
 800ac3c:	e76f      	b.n	800ab1e <_dtoa_r+0x126>
 800ac3e:	2301      	movs	r3, #1
 800ac40:	e7b3      	b.n	800abaa <_dtoa_r+0x1b2>
 800ac42:	900c      	str	r0, [sp, #48]	; 0x30
 800ac44:	e7b2      	b.n	800abac <_dtoa_r+0x1b4>
 800ac46:	9b05      	ldr	r3, [sp, #20]
 800ac48:	eba3 030b 	sub.w	r3, r3, fp
 800ac4c:	9305      	str	r3, [sp, #20]
 800ac4e:	f1cb 0300 	rsb	r3, fp, #0
 800ac52:	9308      	str	r3, [sp, #32]
 800ac54:	2300      	movs	r3, #0
 800ac56:	930b      	str	r3, [sp, #44]	; 0x2c
 800ac58:	e7bf      	b.n	800abda <_dtoa_r+0x1e2>
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	9309      	str	r3, [sp, #36]	; 0x24
 800ac5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	dc52      	bgt.n	800ad0a <_dtoa_r+0x312>
 800ac64:	2301      	movs	r3, #1
 800ac66:	9301      	str	r3, [sp, #4]
 800ac68:	9304      	str	r3, [sp, #16]
 800ac6a:	461a      	mov	r2, r3
 800ac6c:	920a      	str	r2, [sp, #40]	; 0x28
 800ac6e:	e00b      	b.n	800ac88 <_dtoa_r+0x290>
 800ac70:	2301      	movs	r3, #1
 800ac72:	e7f3      	b.n	800ac5c <_dtoa_r+0x264>
 800ac74:	2300      	movs	r3, #0
 800ac76:	9309      	str	r3, [sp, #36]	; 0x24
 800ac78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac7a:	445b      	add	r3, fp
 800ac7c:	9301      	str	r3, [sp, #4]
 800ac7e:	3301      	adds	r3, #1
 800ac80:	2b01      	cmp	r3, #1
 800ac82:	9304      	str	r3, [sp, #16]
 800ac84:	bfb8      	it	lt
 800ac86:	2301      	movlt	r3, #1
 800ac88:	69e0      	ldr	r0, [r4, #28]
 800ac8a:	2100      	movs	r1, #0
 800ac8c:	2204      	movs	r2, #4
 800ac8e:	f102 0614 	add.w	r6, r2, #20
 800ac92:	429e      	cmp	r6, r3
 800ac94:	d93d      	bls.n	800ad12 <_dtoa_r+0x31a>
 800ac96:	6041      	str	r1, [r0, #4]
 800ac98:	4620      	mov	r0, r4
 800ac9a:	f000 ff91 	bl	800bbc0 <_Balloc>
 800ac9e:	9000      	str	r0, [sp, #0]
 800aca0:	2800      	cmp	r0, #0
 800aca2:	d139      	bne.n	800ad18 <_dtoa_r+0x320>
 800aca4:	4b16      	ldr	r3, [pc, #88]	; (800ad00 <_dtoa_r+0x308>)
 800aca6:	4602      	mov	r2, r0
 800aca8:	f240 11af 	movw	r1, #431	; 0x1af
 800acac:	e6bd      	b.n	800aa2a <_dtoa_r+0x32>
 800acae:	2301      	movs	r3, #1
 800acb0:	e7e1      	b.n	800ac76 <_dtoa_r+0x27e>
 800acb2:	2501      	movs	r5, #1
 800acb4:	2300      	movs	r3, #0
 800acb6:	9307      	str	r3, [sp, #28]
 800acb8:	9509      	str	r5, [sp, #36]	; 0x24
 800acba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800acbe:	9301      	str	r3, [sp, #4]
 800acc0:	9304      	str	r3, [sp, #16]
 800acc2:	2200      	movs	r2, #0
 800acc4:	2312      	movs	r3, #18
 800acc6:	e7d1      	b.n	800ac6c <_dtoa_r+0x274>
 800acc8:	636f4361 	.word	0x636f4361
 800accc:	3fd287a7 	.word	0x3fd287a7
 800acd0:	8b60c8b3 	.word	0x8b60c8b3
 800acd4:	3fc68a28 	.word	0x3fc68a28
 800acd8:	509f79fb 	.word	0x509f79fb
 800acdc:	3fd34413 	.word	0x3fd34413
 800ace0:	0800d49d 	.word	0x0800d49d
 800ace4:	0800d4b4 	.word	0x0800d4b4
 800ace8:	7ff00000 	.word	0x7ff00000
 800acec:	0800d499 	.word	0x0800d499
 800acf0:	0800d490 	.word	0x0800d490
 800acf4:	0800d46d 	.word	0x0800d46d
 800acf8:	3ff80000 	.word	0x3ff80000
 800acfc:	0800d5b0 	.word	0x0800d5b0
 800ad00:	0800d50c 	.word	0x0800d50c
 800ad04:	2301      	movs	r3, #1
 800ad06:	9309      	str	r3, [sp, #36]	; 0x24
 800ad08:	e7d7      	b.n	800acba <_dtoa_r+0x2c2>
 800ad0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad0c:	9301      	str	r3, [sp, #4]
 800ad0e:	9304      	str	r3, [sp, #16]
 800ad10:	e7ba      	b.n	800ac88 <_dtoa_r+0x290>
 800ad12:	3101      	adds	r1, #1
 800ad14:	0052      	lsls	r2, r2, #1
 800ad16:	e7ba      	b.n	800ac8e <_dtoa_r+0x296>
 800ad18:	69e3      	ldr	r3, [r4, #28]
 800ad1a:	9a00      	ldr	r2, [sp, #0]
 800ad1c:	601a      	str	r2, [r3, #0]
 800ad1e:	9b04      	ldr	r3, [sp, #16]
 800ad20:	2b0e      	cmp	r3, #14
 800ad22:	f200 80a8 	bhi.w	800ae76 <_dtoa_r+0x47e>
 800ad26:	2d00      	cmp	r5, #0
 800ad28:	f000 80a5 	beq.w	800ae76 <_dtoa_r+0x47e>
 800ad2c:	f1bb 0f00 	cmp.w	fp, #0
 800ad30:	dd38      	ble.n	800ada4 <_dtoa_r+0x3ac>
 800ad32:	4bc0      	ldr	r3, [pc, #768]	; (800b034 <_dtoa_r+0x63c>)
 800ad34:	f00b 020f 	and.w	r2, fp, #15
 800ad38:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ad3c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800ad40:	e9d3 6700 	ldrd	r6, r7, [r3]
 800ad44:	ea4f 182b 	mov.w	r8, fp, asr #4
 800ad48:	d019      	beq.n	800ad7e <_dtoa_r+0x386>
 800ad4a:	4bbb      	ldr	r3, [pc, #748]	; (800b038 <_dtoa_r+0x640>)
 800ad4c:	ec51 0b18 	vmov	r0, r1, d8
 800ad50:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ad54:	f7f5 fd7a 	bl	800084c <__aeabi_ddiv>
 800ad58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad5c:	f008 080f 	and.w	r8, r8, #15
 800ad60:	2503      	movs	r5, #3
 800ad62:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800b038 <_dtoa_r+0x640>
 800ad66:	f1b8 0f00 	cmp.w	r8, #0
 800ad6a:	d10a      	bne.n	800ad82 <_dtoa_r+0x38a>
 800ad6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad70:	4632      	mov	r2, r6
 800ad72:	463b      	mov	r3, r7
 800ad74:	f7f5 fd6a 	bl	800084c <__aeabi_ddiv>
 800ad78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad7c:	e02b      	b.n	800add6 <_dtoa_r+0x3de>
 800ad7e:	2502      	movs	r5, #2
 800ad80:	e7ef      	b.n	800ad62 <_dtoa_r+0x36a>
 800ad82:	f018 0f01 	tst.w	r8, #1
 800ad86:	d008      	beq.n	800ad9a <_dtoa_r+0x3a2>
 800ad88:	4630      	mov	r0, r6
 800ad8a:	4639      	mov	r1, r7
 800ad8c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ad90:	f7f5 fc32 	bl	80005f8 <__aeabi_dmul>
 800ad94:	3501      	adds	r5, #1
 800ad96:	4606      	mov	r6, r0
 800ad98:	460f      	mov	r7, r1
 800ad9a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ad9e:	f109 0908 	add.w	r9, r9, #8
 800ada2:	e7e0      	b.n	800ad66 <_dtoa_r+0x36e>
 800ada4:	f000 809f 	beq.w	800aee6 <_dtoa_r+0x4ee>
 800ada8:	f1cb 0600 	rsb	r6, fp, #0
 800adac:	4ba1      	ldr	r3, [pc, #644]	; (800b034 <_dtoa_r+0x63c>)
 800adae:	4fa2      	ldr	r7, [pc, #648]	; (800b038 <_dtoa_r+0x640>)
 800adb0:	f006 020f 	and.w	r2, r6, #15
 800adb4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800adb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adbc:	ec51 0b18 	vmov	r0, r1, d8
 800adc0:	f7f5 fc1a 	bl	80005f8 <__aeabi_dmul>
 800adc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800adc8:	1136      	asrs	r6, r6, #4
 800adca:	2300      	movs	r3, #0
 800adcc:	2502      	movs	r5, #2
 800adce:	2e00      	cmp	r6, #0
 800add0:	d17e      	bne.n	800aed0 <_dtoa_r+0x4d8>
 800add2:	2b00      	cmp	r3, #0
 800add4:	d1d0      	bne.n	800ad78 <_dtoa_r+0x380>
 800add6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800add8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800addc:	2b00      	cmp	r3, #0
 800adde:	f000 8084 	beq.w	800aeea <_dtoa_r+0x4f2>
 800ade2:	4b96      	ldr	r3, [pc, #600]	; (800b03c <_dtoa_r+0x644>)
 800ade4:	2200      	movs	r2, #0
 800ade6:	4640      	mov	r0, r8
 800ade8:	4649      	mov	r1, r9
 800adea:	f7f5 fe77 	bl	8000adc <__aeabi_dcmplt>
 800adee:	2800      	cmp	r0, #0
 800adf0:	d07b      	beq.n	800aeea <_dtoa_r+0x4f2>
 800adf2:	9b04      	ldr	r3, [sp, #16]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d078      	beq.n	800aeea <_dtoa_r+0x4f2>
 800adf8:	9b01      	ldr	r3, [sp, #4]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	dd39      	ble.n	800ae72 <_dtoa_r+0x47a>
 800adfe:	4b90      	ldr	r3, [pc, #576]	; (800b040 <_dtoa_r+0x648>)
 800ae00:	2200      	movs	r2, #0
 800ae02:	4640      	mov	r0, r8
 800ae04:	4649      	mov	r1, r9
 800ae06:	f7f5 fbf7 	bl	80005f8 <__aeabi_dmul>
 800ae0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ae0e:	9e01      	ldr	r6, [sp, #4]
 800ae10:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800ae14:	3501      	adds	r5, #1
 800ae16:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ae1a:	4628      	mov	r0, r5
 800ae1c:	f7f5 fb82 	bl	8000524 <__aeabi_i2d>
 800ae20:	4642      	mov	r2, r8
 800ae22:	464b      	mov	r3, r9
 800ae24:	f7f5 fbe8 	bl	80005f8 <__aeabi_dmul>
 800ae28:	4b86      	ldr	r3, [pc, #536]	; (800b044 <_dtoa_r+0x64c>)
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	f7f5 fa2e 	bl	800028c <__adddf3>
 800ae30:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800ae34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ae38:	9303      	str	r3, [sp, #12]
 800ae3a:	2e00      	cmp	r6, #0
 800ae3c:	d158      	bne.n	800aef0 <_dtoa_r+0x4f8>
 800ae3e:	4b82      	ldr	r3, [pc, #520]	; (800b048 <_dtoa_r+0x650>)
 800ae40:	2200      	movs	r2, #0
 800ae42:	4640      	mov	r0, r8
 800ae44:	4649      	mov	r1, r9
 800ae46:	f7f5 fa1f 	bl	8000288 <__aeabi_dsub>
 800ae4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ae4e:	4680      	mov	r8, r0
 800ae50:	4689      	mov	r9, r1
 800ae52:	f7f5 fe61 	bl	8000b18 <__aeabi_dcmpgt>
 800ae56:	2800      	cmp	r0, #0
 800ae58:	f040 8296 	bne.w	800b388 <_dtoa_r+0x990>
 800ae5c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ae60:	4640      	mov	r0, r8
 800ae62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ae66:	4649      	mov	r1, r9
 800ae68:	f7f5 fe38 	bl	8000adc <__aeabi_dcmplt>
 800ae6c:	2800      	cmp	r0, #0
 800ae6e:	f040 8289 	bne.w	800b384 <_dtoa_r+0x98c>
 800ae72:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ae76:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	f2c0 814e 	blt.w	800b11a <_dtoa_r+0x722>
 800ae7e:	f1bb 0f0e 	cmp.w	fp, #14
 800ae82:	f300 814a 	bgt.w	800b11a <_dtoa_r+0x722>
 800ae86:	4b6b      	ldr	r3, [pc, #428]	; (800b034 <_dtoa_r+0x63c>)
 800ae88:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ae8c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ae90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	f280 80dc 	bge.w	800b050 <_dtoa_r+0x658>
 800ae98:	9b04      	ldr	r3, [sp, #16]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	f300 80d8 	bgt.w	800b050 <_dtoa_r+0x658>
 800aea0:	f040 826f 	bne.w	800b382 <_dtoa_r+0x98a>
 800aea4:	4b68      	ldr	r3, [pc, #416]	; (800b048 <_dtoa_r+0x650>)
 800aea6:	2200      	movs	r2, #0
 800aea8:	4640      	mov	r0, r8
 800aeaa:	4649      	mov	r1, r9
 800aeac:	f7f5 fba4 	bl	80005f8 <__aeabi_dmul>
 800aeb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aeb4:	f7f5 fe26 	bl	8000b04 <__aeabi_dcmpge>
 800aeb8:	9e04      	ldr	r6, [sp, #16]
 800aeba:	4637      	mov	r7, r6
 800aebc:	2800      	cmp	r0, #0
 800aebe:	f040 8245 	bne.w	800b34c <_dtoa_r+0x954>
 800aec2:	9d00      	ldr	r5, [sp, #0]
 800aec4:	2331      	movs	r3, #49	; 0x31
 800aec6:	f805 3b01 	strb.w	r3, [r5], #1
 800aeca:	f10b 0b01 	add.w	fp, fp, #1
 800aece:	e241      	b.n	800b354 <_dtoa_r+0x95c>
 800aed0:	07f2      	lsls	r2, r6, #31
 800aed2:	d505      	bpl.n	800aee0 <_dtoa_r+0x4e8>
 800aed4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aed8:	f7f5 fb8e 	bl	80005f8 <__aeabi_dmul>
 800aedc:	3501      	adds	r5, #1
 800aede:	2301      	movs	r3, #1
 800aee0:	1076      	asrs	r6, r6, #1
 800aee2:	3708      	adds	r7, #8
 800aee4:	e773      	b.n	800adce <_dtoa_r+0x3d6>
 800aee6:	2502      	movs	r5, #2
 800aee8:	e775      	b.n	800add6 <_dtoa_r+0x3de>
 800aeea:	9e04      	ldr	r6, [sp, #16]
 800aeec:	465f      	mov	r7, fp
 800aeee:	e792      	b.n	800ae16 <_dtoa_r+0x41e>
 800aef0:	9900      	ldr	r1, [sp, #0]
 800aef2:	4b50      	ldr	r3, [pc, #320]	; (800b034 <_dtoa_r+0x63c>)
 800aef4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aef8:	4431      	add	r1, r6
 800aefa:	9102      	str	r1, [sp, #8]
 800aefc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aefe:	eeb0 9a47 	vmov.f32	s18, s14
 800af02:	eef0 9a67 	vmov.f32	s19, s15
 800af06:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800af0a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800af0e:	2900      	cmp	r1, #0
 800af10:	d044      	beq.n	800af9c <_dtoa_r+0x5a4>
 800af12:	494e      	ldr	r1, [pc, #312]	; (800b04c <_dtoa_r+0x654>)
 800af14:	2000      	movs	r0, #0
 800af16:	f7f5 fc99 	bl	800084c <__aeabi_ddiv>
 800af1a:	ec53 2b19 	vmov	r2, r3, d9
 800af1e:	f7f5 f9b3 	bl	8000288 <__aeabi_dsub>
 800af22:	9d00      	ldr	r5, [sp, #0]
 800af24:	ec41 0b19 	vmov	d9, r0, r1
 800af28:	4649      	mov	r1, r9
 800af2a:	4640      	mov	r0, r8
 800af2c:	f7f5 fe14 	bl	8000b58 <__aeabi_d2iz>
 800af30:	4606      	mov	r6, r0
 800af32:	f7f5 faf7 	bl	8000524 <__aeabi_i2d>
 800af36:	4602      	mov	r2, r0
 800af38:	460b      	mov	r3, r1
 800af3a:	4640      	mov	r0, r8
 800af3c:	4649      	mov	r1, r9
 800af3e:	f7f5 f9a3 	bl	8000288 <__aeabi_dsub>
 800af42:	3630      	adds	r6, #48	; 0x30
 800af44:	f805 6b01 	strb.w	r6, [r5], #1
 800af48:	ec53 2b19 	vmov	r2, r3, d9
 800af4c:	4680      	mov	r8, r0
 800af4e:	4689      	mov	r9, r1
 800af50:	f7f5 fdc4 	bl	8000adc <__aeabi_dcmplt>
 800af54:	2800      	cmp	r0, #0
 800af56:	d164      	bne.n	800b022 <_dtoa_r+0x62a>
 800af58:	4642      	mov	r2, r8
 800af5a:	464b      	mov	r3, r9
 800af5c:	4937      	ldr	r1, [pc, #220]	; (800b03c <_dtoa_r+0x644>)
 800af5e:	2000      	movs	r0, #0
 800af60:	f7f5 f992 	bl	8000288 <__aeabi_dsub>
 800af64:	ec53 2b19 	vmov	r2, r3, d9
 800af68:	f7f5 fdb8 	bl	8000adc <__aeabi_dcmplt>
 800af6c:	2800      	cmp	r0, #0
 800af6e:	f040 80b6 	bne.w	800b0de <_dtoa_r+0x6e6>
 800af72:	9b02      	ldr	r3, [sp, #8]
 800af74:	429d      	cmp	r5, r3
 800af76:	f43f af7c 	beq.w	800ae72 <_dtoa_r+0x47a>
 800af7a:	4b31      	ldr	r3, [pc, #196]	; (800b040 <_dtoa_r+0x648>)
 800af7c:	ec51 0b19 	vmov	r0, r1, d9
 800af80:	2200      	movs	r2, #0
 800af82:	f7f5 fb39 	bl	80005f8 <__aeabi_dmul>
 800af86:	4b2e      	ldr	r3, [pc, #184]	; (800b040 <_dtoa_r+0x648>)
 800af88:	ec41 0b19 	vmov	d9, r0, r1
 800af8c:	2200      	movs	r2, #0
 800af8e:	4640      	mov	r0, r8
 800af90:	4649      	mov	r1, r9
 800af92:	f7f5 fb31 	bl	80005f8 <__aeabi_dmul>
 800af96:	4680      	mov	r8, r0
 800af98:	4689      	mov	r9, r1
 800af9a:	e7c5      	b.n	800af28 <_dtoa_r+0x530>
 800af9c:	ec51 0b17 	vmov	r0, r1, d7
 800afa0:	f7f5 fb2a 	bl	80005f8 <__aeabi_dmul>
 800afa4:	9b02      	ldr	r3, [sp, #8]
 800afa6:	9d00      	ldr	r5, [sp, #0]
 800afa8:	930f      	str	r3, [sp, #60]	; 0x3c
 800afaa:	ec41 0b19 	vmov	d9, r0, r1
 800afae:	4649      	mov	r1, r9
 800afb0:	4640      	mov	r0, r8
 800afb2:	f7f5 fdd1 	bl	8000b58 <__aeabi_d2iz>
 800afb6:	4606      	mov	r6, r0
 800afb8:	f7f5 fab4 	bl	8000524 <__aeabi_i2d>
 800afbc:	3630      	adds	r6, #48	; 0x30
 800afbe:	4602      	mov	r2, r0
 800afc0:	460b      	mov	r3, r1
 800afc2:	4640      	mov	r0, r8
 800afc4:	4649      	mov	r1, r9
 800afc6:	f7f5 f95f 	bl	8000288 <__aeabi_dsub>
 800afca:	f805 6b01 	strb.w	r6, [r5], #1
 800afce:	9b02      	ldr	r3, [sp, #8]
 800afd0:	429d      	cmp	r5, r3
 800afd2:	4680      	mov	r8, r0
 800afd4:	4689      	mov	r9, r1
 800afd6:	f04f 0200 	mov.w	r2, #0
 800afda:	d124      	bne.n	800b026 <_dtoa_r+0x62e>
 800afdc:	4b1b      	ldr	r3, [pc, #108]	; (800b04c <_dtoa_r+0x654>)
 800afde:	ec51 0b19 	vmov	r0, r1, d9
 800afe2:	f7f5 f953 	bl	800028c <__adddf3>
 800afe6:	4602      	mov	r2, r0
 800afe8:	460b      	mov	r3, r1
 800afea:	4640      	mov	r0, r8
 800afec:	4649      	mov	r1, r9
 800afee:	f7f5 fd93 	bl	8000b18 <__aeabi_dcmpgt>
 800aff2:	2800      	cmp	r0, #0
 800aff4:	d173      	bne.n	800b0de <_dtoa_r+0x6e6>
 800aff6:	ec53 2b19 	vmov	r2, r3, d9
 800affa:	4914      	ldr	r1, [pc, #80]	; (800b04c <_dtoa_r+0x654>)
 800affc:	2000      	movs	r0, #0
 800affe:	f7f5 f943 	bl	8000288 <__aeabi_dsub>
 800b002:	4602      	mov	r2, r0
 800b004:	460b      	mov	r3, r1
 800b006:	4640      	mov	r0, r8
 800b008:	4649      	mov	r1, r9
 800b00a:	f7f5 fd67 	bl	8000adc <__aeabi_dcmplt>
 800b00e:	2800      	cmp	r0, #0
 800b010:	f43f af2f 	beq.w	800ae72 <_dtoa_r+0x47a>
 800b014:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b016:	1e6b      	subs	r3, r5, #1
 800b018:	930f      	str	r3, [sp, #60]	; 0x3c
 800b01a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b01e:	2b30      	cmp	r3, #48	; 0x30
 800b020:	d0f8      	beq.n	800b014 <_dtoa_r+0x61c>
 800b022:	46bb      	mov	fp, r7
 800b024:	e04a      	b.n	800b0bc <_dtoa_r+0x6c4>
 800b026:	4b06      	ldr	r3, [pc, #24]	; (800b040 <_dtoa_r+0x648>)
 800b028:	f7f5 fae6 	bl	80005f8 <__aeabi_dmul>
 800b02c:	4680      	mov	r8, r0
 800b02e:	4689      	mov	r9, r1
 800b030:	e7bd      	b.n	800afae <_dtoa_r+0x5b6>
 800b032:	bf00      	nop
 800b034:	0800d5b0 	.word	0x0800d5b0
 800b038:	0800d588 	.word	0x0800d588
 800b03c:	3ff00000 	.word	0x3ff00000
 800b040:	40240000 	.word	0x40240000
 800b044:	401c0000 	.word	0x401c0000
 800b048:	40140000 	.word	0x40140000
 800b04c:	3fe00000 	.word	0x3fe00000
 800b050:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b054:	9d00      	ldr	r5, [sp, #0]
 800b056:	4642      	mov	r2, r8
 800b058:	464b      	mov	r3, r9
 800b05a:	4630      	mov	r0, r6
 800b05c:	4639      	mov	r1, r7
 800b05e:	f7f5 fbf5 	bl	800084c <__aeabi_ddiv>
 800b062:	f7f5 fd79 	bl	8000b58 <__aeabi_d2iz>
 800b066:	9001      	str	r0, [sp, #4]
 800b068:	f7f5 fa5c 	bl	8000524 <__aeabi_i2d>
 800b06c:	4642      	mov	r2, r8
 800b06e:	464b      	mov	r3, r9
 800b070:	f7f5 fac2 	bl	80005f8 <__aeabi_dmul>
 800b074:	4602      	mov	r2, r0
 800b076:	460b      	mov	r3, r1
 800b078:	4630      	mov	r0, r6
 800b07a:	4639      	mov	r1, r7
 800b07c:	f7f5 f904 	bl	8000288 <__aeabi_dsub>
 800b080:	9e01      	ldr	r6, [sp, #4]
 800b082:	9f04      	ldr	r7, [sp, #16]
 800b084:	3630      	adds	r6, #48	; 0x30
 800b086:	f805 6b01 	strb.w	r6, [r5], #1
 800b08a:	9e00      	ldr	r6, [sp, #0]
 800b08c:	1bae      	subs	r6, r5, r6
 800b08e:	42b7      	cmp	r7, r6
 800b090:	4602      	mov	r2, r0
 800b092:	460b      	mov	r3, r1
 800b094:	d134      	bne.n	800b100 <_dtoa_r+0x708>
 800b096:	f7f5 f8f9 	bl	800028c <__adddf3>
 800b09a:	4642      	mov	r2, r8
 800b09c:	464b      	mov	r3, r9
 800b09e:	4606      	mov	r6, r0
 800b0a0:	460f      	mov	r7, r1
 800b0a2:	f7f5 fd39 	bl	8000b18 <__aeabi_dcmpgt>
 800b0a6:	b9c8      	cbnz	r0, 800b0dc <_dtoa_r+0x6e4>
 800b0a8:	4642      	mov	r2, r8
 800b0aa:	464b      	mov	r3, r9
 800b0ac:	4630      	mov	r0, r6
 800b0ae:	4639      	mov	r1, r7
 800b0b0:	f7f5 fd0a 	bl	8000ac8 <__aeabi_dcmpeq>
 800b0b4:	b110      	cbz	r0, 800b0bc <_dtoa_r+0x6c4>
 800b0b6:	9b01      	ldr	r3, [sp, #4]
 800b0b8:	07db      	lsls	r3, r3, #31
 800b0ba:	d40f      	bmi.n	800b0dc <_dtoa_r+0x6e4>
 800b0bc:	4651      	mov	r1, sl
 800b0be:	4620      	mov	r0, r4
 800b0c0:	f000 fdbe 	bl	800bc40 <_Bfree>
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b0c8:	702b      	strb	r3, [r5, #0]
 800b0ca:	f10b 0301 	add.w	r3, fp, #1
 800b0ce:	6013      	str	r3, [r2, #0]
 800b0d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	f43f ace2 	beq.w	800aa9c <_dtoa_r+0xa4>
 800b0d8:	601d      	str	r5, [r3, #0]
 800b0da:	e4df      	b.n	800aa9c <_dtoa_r+0xa4>
 800b0dc:	465f      	mov	r7, fp
 800b0de:	462b      	mov	r3, r5
 800b0e0:	461d      	mov	r5, r3
 800b0e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b0e6:	2a39      	cmp	r2, #57	; 0x39
 800b0e8:	d106      	bne.n	800b0f8 <_dtoa_r+0x700>
 800b0ea:	9a00      	ldr	r2, [sp, #0]
 800b0ec:	429a      	cmp	r2, r3
 800b0ee:	d1f7      	bne.n	800b0e0 <_dtoa_r+0x6e8>
 800b0f0:	9900      	ldr	r1, [sp, #0]
 800b0f2:	2230      	movs	r2, #48	; 0x30
 800b0f4:	3701      	adds	r7, #1
 800b0f6:	700a      	strb	r2, [r1, #0]
 800b0f8:	781a      	ldrb	r2, [r3, #0]
 800b0fa:	3201      	adds	r2, #1
 800b0fc:	701a      	strb	r2, [r3, #0]
 800b0fe:	e790      	b.n	800b022 <_dtoa_r+0x62a>
 800b100:	4ba3      	ldr	r3, [pc, #652]	; (800b390 <_dtoa_r+0x998>)
 800b102:	2200      	movs	r2, #0
 800b104:	f7f5 fa78 	bl	80005f8 <__aeabi_dmul>
 800b108:	2200      	movs	r2, #0
 800b10a:	2300      	movs	r3, #0
 800b10c:	4606      	mov	r6, r0
 800b10e:	460f      	mov	r7, r1
 800b110:	f7f5 fcda 	bl	8000ac8 <__aeabi_dcmpeq>
 800b114:	2800      	cmp	r0, #0
 800b116:	d09e      	beq.n	800b056 <_dtoa_r+0x65e>
 800b118:	e7d0      	b.n	800b0bc <_dtoa_r+0x6c4>
 800b11a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b11c:	2a00      	cmp	r2, #0
 800b11e:	f000 80ca 	beq.w	800b2b6 <_dtoa_r+0x8be>
 800b122:	9a07      	ldr	r2, [sp, #28]
 800b124:	2a01      	cmp	r2, #1
 800b126:	f300 80ad 	bgt.w	800b284 <_dtoa_r+0x88c>
 800b12a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b12c:	2a00      	cmp	r2, #0
 800b12e:	f000 80a5 	beq.w	800b27c <_dtoa_r+0x884>
 800b132:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b136:	9e08      	ldr	r6, [sp, #32]
 800b138:	9d05      	ldr	r5, [sp, #20]
 800b13a:	9a05      	ldr	r2, [sp, #20]
 800b13c:	441a      	add	r2, r3
 800b13e:	9205      	str	r2, [sp, #20]
 800b140:	9a06      	ldr	r2, [sp, #24]
 800b142:	2101      	movs	r1, #1
 800b144:	441a      	add	r2, r3
 800b146:	4620      	mov	r0, r4
 800b148:	9206      	str	r2, [sp, #24]
 800b14a:	f000 fe2f 	bl	800bdac <__i2b>
 800b14e:	4607      	mov	r7, r0
 800b150:	b165      	cbz	r5, 800b16c <_dtoa_r+0x774>
 800b152:	9b06      	ldr	r3, [sp, #24]
 800b154:	2b00      	cmp	r3, #0
 800b156:	dd09      	ble.n	800b16c <_dtoa_r+0x774>
 800b158:	42ab      	cmp	r3, r5
 800b15a:	9a05      	ldr	r2, [sp, #20]
 800b15c:	bfa8      	it	ge
 800b15e:	462b      	movge	r3, r5
 800b160:	1ad2      	subs	r2, r2, r3
 800b162:	9205      	str	r2, [sp, #20]
 800b164:	9a06      	ldr	r2, [sp, #24]
 800b166:	1aed      	subs	r5, r5, r3
 800b168:	1ad3      	subs	r3, r2, r3
 800b16a:	9306      	str	r3, [sp, #24]
 800b16c:	9b08      	ldr	r3, [sp, #32]
 800b16e:	b1f3      	cbz	r3, 800b1ae <_dtoa_r+0x7b6>
 800b170:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b172:	2b00      	cmp	r3, #0
 800b174:	f000 80a3 	beq.w	800b2be <_dtoa_r+0x8c6>
 800b178:	2e00      	cmp	r6, #0
 800b17a:	dd10      	ble.n	800b19e <_dtoa_r+0x7a6>
 800b17c:	4639      	mov	r1, r7
 800b17e:	4632      	mov	r2, r6
 800b180:	4620      	mov	r0, r4
 800b182:	f000 fed3 	bl	800bf2c <__pow5mult>
 800b186:	4652      	mov	r2, sl
 800b188:	4601      	mov	r1, r0
 800b18a:	4607      	mov	r7, r0
 800b18c:	4620      	mov	r0, r4
 800b18e:	f000 fe23 	bl	800bdd8 <__multiply>
 800b192:	4651      	mov	r1, sl
 800b194:	4680      	mov	r8, r0
 800b196:	4620      	mov	r0, r4
 800b198:	f000 fd52 	bl	800bc40 <_Bfree>
 800b19c:	46c2      	mov	sl, r8
 800b19e:	9b08      	ldr	r3, [sp, #32]
 800b1a0:	1b9a      	subs	r2, r3, r6
 800b1a2:	d004      	beq.n	800b1ae <_dtoa_r+0x7b6>
 800b1a4:	4651      	mov	r1, sl
 800b1a6:	4620      	mov	r0, r4
 800b1a8:	f000 fec0 	bl	800bf2c <__pow5mult>
 800b1ac:	4682      	mov	sl, r0
 800b1ae:	2101      	movs	r1, #1
 800b1b0:	4620      	mov	r0, r4
 800b1b2:	f000 fdfb 	bl	800bdac <__i2b>
 800b1b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	4606      	mov	r6, r0
 800b1bc:	f340 8081 	ble.w	800b2c2 <_dtoa_r+0x8ca>
 800b1c0:	461a      	mov	r2, r3
 800b1c2:	4601      	mov	r1, r0
 800b1c4:	4620      	mov	r0, r4
 800b1c6:	f000 feb1 	bl	800bf2c <__pow5mult>
 800b1ca:	9b07      	ldr	r3, [sp, #28]
 800b1cc:	2b01      	cmp	r3, #1
 800b1ce:	4606      	mov	r6, r0
 800b1d0:	dd7a      	ble.n	800b2c8 <_dtoa_r+0x8d0>
 800b1d2:	f04f 0800 	mov.w	r8, #0
 800b1d6:	6933      	ldr	r3, [r6, #16]
 800b1d8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b1dc:	6918      	ldr	r0, [r3, #16]
 800b1de:	f000 fd97 	bl	800bd10 <__hi0bits>
 800b1e2:	f1c0 0020 	rsb	r0, r0, #32
 800b1e6:	9b06      	ldr	r3, [sp, #24]
 800b1e8:	4418      	add	r0, r3
 800b1ea:	f010 001f 	ands.w	r0, r0, #31
 800b1ee:	f000 8094 	beq.w	800b31a <_dtoa_r+0x922>
 800b1f2:	f1c0 0320 	rsb	r3, r0, #32
 800b1f6:	2b04      	cmp	r3, #4
 800b1f8:	f340 8085 	ble.w	800b306 <_dtoa_r+0x90e>
 800b1fc:	9b05      	ldr	r3, [sp, #20]
 800b1fe:	f1c0 001c 	rsb	r0, r0, #28
 800b202:	4403      	add	r3, r0
 800b204:	9305      	str	r3, [sp, #20]
 800b206:	9b06      	ldr	r3, [sp, #24]
 800b208:	4403      	add	r3, r0
 800b20a:	4405      	add	r5, r0
 800b20c:	9306      	str	r3, [sp, #24]
 800b20e:	9b05      	ldr	r3, [sp, #20]
 800b210:	2b00      	cmp	r3, #0
 800b212:	dd05      	ble.n	800b220 <_dtoa_r+0x828>
 800b214:	4651      	mov	r1, sl
 800b216:	461a      	mov	r2, r3
 800b218:	4620      	mov	r0, r4
 800b21a:	f000 fee1 	bl	800bfe0 <__lshift>
 800b21e:	4682      	mov	sl, r0
 800b220:	9b06      	ldr	r3, [sp, #24]
 800b222:	2b00      	cmp	r3, #0
 800b224:	dd05      	ble.n	800b232 <_dtoa_r+0x83a>
 800b226:	4631      	mov	r1, r6
 800b228:	461a      	mov	r2, r3
 800b22a:	4620      	mov	r0, r4
 800b22c:	f000 fed8 	bl	800bfe0 <__lshift>
 800b230:	4606      	mov	r6, r0
 800b232:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b234:	2b00      	cmp	r3, #0
 800b236:	d072      	beq.n	800b31e <_dtoa_r+0x926>
 800b238:	4631      	mov	r1, r6
 800b23a:	4650      	mov	r0, sl
 800b23c:	f000 ff3c 	bl	800c0b8 <__mcmp>
 800b240:	2800      	cmp	r0, #0
 800b242:	da6c      	bge.n	800b31e <_dtoa_r+0x926>
 800b244:	2300      	movs	r3, #0
 800b246:	4651      	mov	r1, sl
 800b248:	220a      	movs	r2, #10
 800b24a:	4620      	mov	r0, r4
 800b24c:	f000 fd1a 	bl	800bc84 <__multadd>
 800b250:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b252:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800b256:	4682      	mov	sl, r0
 800b258:	2b00      	cmp	r3, #0
 800b25a:	f000 81b0 	beq.w	800b5be <_dtoa_r+0xbc6>
 800b25e:	2300      	movs	r3, #0
 800b260:	4639      	mov	r1, r7
 800b262:	220a      	movs	r2, #10
 800b264:	4620      	mov	r0, r4
 800b266:	f000 fd0d 	bl	800bc84 <__multadd>
 800b26a:	9b01      	ldr	r3, [sp, #4]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	4607      	mov	r7, r0
 800b270:	f300 8096 	bgt.w	800b3a0 <_dtoa_r+0x9a8>
 800b274:	9b07      	ldr	r3, [sp, #28]
 800b276:	2b02      	cmp	r3, #2
 800b278:	dc59      	bgt.n	800b32e <_dtoa_r+0x936>
 800b27a:	e091      	b.n	800b3a0 <_dtoa_r+0x9a8>
 800b27c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b27e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b282:	e758      	b.n	800b136 <_dtoa_r+0x73e>
 800b284:	9b04      	ldr	r3, [sp, #16]
 800b286:	1e5e      	subs	r6, r3, #1
 800b288:	9b08      	ldr	r3, [sp, #32]
 800b28a:	42b3      	cmp	r3, r6
 800b28c:	bfbf      	itttt	lt
 800b28e:	9b08      	ldrlt	r3, [sp, #32]
 800b290:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800b292:	9608      	strlt	r6, [sp, #32]
 800b294:	1af3      	sublt	r3, r6, r3
 800b296:	bfb4      	ite	lt
 800b298:	18d2      	addlt	r2, r2, r3
 800b29a:	1b9e      	subge	r6, r3, r6
 800b29c:	9b04      	ldr	r3, [sp, #16]
 800b29e:	bfbc      	itt	lt
 800b2a0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800b2a2:	2600      	movlt	r6, #0
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	bfb7      	itett	lt
 800b2a8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800b2ac:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800b2b0:	1a9d      	sublt	r5, r3, r2
 800b2b2:	2300      	movlt	r3, #0
 800b2b4:	e741      	b.n	800b13a <_dtoa_r+0x742>
 800b2b6:	9e08      	ldr	r6, [sp, #32]
 800b2b8:	9d05      	ldr	r5, [sp, #20]
 800b2ba:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b2bc:	e748      	b.n	800b150 <_dtoa_r+0x758>
 800b2be:	9a08      	ldr	r2, [sp, #32]
 800b2c0:	e770      	b.n	800b1a4 <_dtoa_r+0x7ac>
 800b2c2:	9b07      	ldr	r3, [sp, #28]
 800b2c4:	2b01      	cmp	r3, #1
 800b2c6:	dc19      	bgt.n	800b2fc <_dtoa_r+0x904>
 800b2c8:	9b02      	ldr	r3, [sp, #8]
 800b2ca:	b9bb      	cbnz	r3, 800b2fc <_dtoa_r+0x904>
 800b2cc:	9b03      	ldr	r3, [sp, #12]
 800b2ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b2d2:	b99b      	cbnz	r3, 800b2fc <_dtoa_r+0x904>
 800b2d4:	9b03      	ldr	r3, [sp, #12]
 800b2d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b2da:	0d1b      	lsrs	r3, r3, #20
 800b2dc:	051b      	lsls	r3, r3, #20
 800b2de:	b183      	cbz	r3, 800b302 <_dtoa_r+0x90a>
 800b2e0:	9b05      	ldr	r3, [sp, #20]
 800b2e2:	3301      	adds	r3, #1
 800b2e4:	9305      	str	r3, [sp, #20]
 800b2e6:	9b06      	ldr	r3, [sp, #24]
 800b2e8:	3301      	adds	r3, #1
 800b2ea:	9306      	str	r3, [sp, #24]
 800b2ec:	f04f 0801 	mov.w	r8, #1
 800b2f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	f47f af6f 	bne.w	800b1d6 <_dtoa_r+0x7de>
 800b2f8:	2001      	movs	r0, #1
 800b2fa:	e774      	b.n	800b1e6 <_dtoa_r+0x7ee>
 800b2fc:	f04f 0800 	mov.w	r8, #0
 800b300:	e7f6      	b.n	800b2f0 <_dtoa_r+0x8f8>
 800b302:	4698      	mov	r8, r3
 800b304:	e7f4      	b.n	800b2f0 <_dtoa_r+0x8f8>
 800b306:	d082      	beq.n	800b20e <_dtoa_r+0x816>
 800b308:	9a05      	ldr	r2, [sp, #20]
 800b30a:	331c      	adds	r3, #28
 800b30c:	441a      	add	r2, r3
 800b30e:	9205      	str	r2, [sp, #20]
 800b310:	9a06      	ldr	r2, [sp, #24]
 800b312:	441a      	add	r2, r3
 800b314:	441d      	add	r5, r3
 800b316:	9206      	str	r2, [sp, #24]
 800b318:	e779      	b.n	800b20e <_dtoa_r+0x816>
 800b31a:	4603      	mov	r3, r0
 800b31c:	e7f4      	b.n	800b308 <_dtoa_r+0x910>
 800b31e:	9b04      	ldr	r3, [sp, #16]
 800b320:	2b00      	cmp	r3, #0
 800b322:	dc37      	bgt.n	800b394 <_dtoa_r+0x99c>
 800b324:	9b07      	ldr	r3, [sp, #28]
 800b326:	2b02      	cmp	r3, #2
 800b328:	dd34      	ble.n	800b394 <_dtoa_r+0x99c>
 800b32a:	9b04      	ldr	r3, [sp, #16]
 800b32c:	9301      	str	r3, [sp, #4]
 800b32e:	9b01      	ldr	r3, [sp, #4]
 800b330:	b963      	cbnz	r3, 800b34c <_dtoa_r+0x954>
 800b332:	4631      	mov	r1, r6
 800b334:	2205      	movs	r2, #5
 800b336:	4620      	mov	r0, r4
 800b338:	f000 fca4 	bl	800bc84 <__multadd>
 800b33c:	4601      	mov	r1, r0
 800b33e:	4606      	mov	r6, r0
 800b340:	4650      	mov	r0, sl
 800b342:	f000 feb9 	bl	800c0b8 <__mcmp>
 800b346:	2800      	cmp	r0, #0
 800b348:	f73f adbb 	bgt.w	800aec2 <_dtoa_r+0x4ca>
 800b34c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b34e:	9d00      	ldr	r5, [sp, #0]
 800b350:	ea6f 0b03 	mvn.w	fp, r3
 800b354:	f04f 0800 	mov.w	r8, #0
 800b358:	4631      	mov	r1, r6
 800b35a:	4620      	mov	r0, r4
 800b35c:	f000 fc70 	bl	800bc40 <_Bfree>
 800b360:	2f00      	cmp	r7, #0
 800b362:	f43f aeab 	beq.w	800b0bc <_dtoa_r+0x6c4>
 800b366:	f1b8 0f00 	cmp.w	r8, #0
 800b36a:	d005      	beq.n	800b378 <_dtoa_r+0x980>
 800b36c:	45b8      	cmp	r8, r7
 800b36e:	d003      	beq.n	800b378 <_dtoa_r+0x980>
 800b370:	4641      	mov	r1, r8
 800b372:	4620      	mov	r0, r4
 800b374:	f000 fc64 	bl	800bc40 <_Bfree>
 800b378:	4639      	mov	r1, r7
 800b37a:	4620      	mov	r0, r4
 800b37c:	f000 fc60 	bl	800bc40 <_Bfree>
 800b380:	e69c      	b.n	800b0bc <_dtoa_r+0x6c4>
 800b382:	2600      	movs	r6, #0
 800b384:	4637      	mov	r7, r6
 800b386:	e7e1      	b.n	800b34c <_dtoa_r+0x954>
 800b388:	46bb      	mov	fp, r7
 800b38a:	4637      	mov	r7, r6
 800b38c:	e599      	b.n	800aec2 <_dtoa_r+0x4ca>
 800b38e:	bf00      	nop
 800b390:	40240000 	.word	0x40240000
 800b394:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b396:	2b00      	cmp	r3, #0
 800b398:	f000 80c8 	beq.w	800b52c <_dtoa_r+0xb34>
 800b39c:	9b04      	ldr	r3, [sp, #16]
 800b39e:	9301      	str	r3, [sp, #4]
 800b3a0:	2d00      	cmp	r5, #0
 800b3a2:	dd05      	ble.n	800b3b0 <_dtoa_r+0x9b8>
 800b3a4:	4639      	mov	r1, r7
 800b3a6:	462a      	mov	r2, r5
 800b3a8:	4620      	mov	r0, r4
 800b3aa:	f000 fe19 	bl	800bfe0 <__lshift>
 800b3ae:	4607      	mov	r7, r0
 800b3b0:	f1b8 0f00 	cmp.w	r8, #0
 800b3b4:	d05b      	beq.n	800b46e <_dtoa_r+0xa76>
 800b3b6:	6879      	ldr	r1, [r7, #4]
 800b3b8:	4620      	mov	r0, r4
 800b3ba:	f000 fc01 	bl	800bbc0 <_Balloc>
 800b3be:	4605      	mov	r5, r0
 800b3c0:	b928      	cbnz	r0, 800b3ce <_dtoa_r+0x9d6>
 800b3c2:	4b83      	ldr	r3, [pc, #524]	; (800b5d0 <_dtoa_r+0xbd8>)
 800b3c4:	4602      	mov	r2, r0
 800b3c6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b3ca:	f7ff bb2e 	b.w	800aa2a <_dtoa_r+0x32>
 800b3ce:	693a      	ldr	r2, [r7, #16]
 800b3d0:	3202      	adds	r2, #2
 800b3d2:	0092      	lsls	r2, r2, #2
 800b3d4:	f107 010c 	add.w	r1, r7, #12
 800b3d8:	300c      	adds	r0, #12
 800b3da:	f7ff fa74 	bl	800a8c6 <memcpy>
 800b3de:	2201      	movs	r2, #1
 800b3e0:	4629      	mov	r1, r5
 800b3e2:	4620      	mov	r0, r4
 800b3e4:	f000 fdfc 	bl	800bfe0 <__lshift>
 800b3e8:	9b00      	ldr	r3, [sp, #0]
 800b3ea:	3301      	adds	r3, #1
 800b3ec:	9304      	str	r3, [sp, #16]
 800b3ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b3f2:	4413      	add	r3, r2
 800b3f4:	9308      	str	r3, [sp, #32]
 800b3f6:	9b02      	ldr	r3, [sp, #8]
 800b3f8:	f003 0301 	and.w	r3, r3, #1
 800b3fc:	46b8      	mov	r8, r7
 800b3fe:	9306      	str	r3, [sp, #24]
 800b400:	4607      	mov	r7, r0
 800b402:	9b04      	ldr	r3, [sp, #16]
 800b404:	4631      	mov	r1, r6
 800b406:	3b01      	subs	r3, #1
 800b408:	4650      	mov	r0, sl
 800b40a:	9301      	str	r3, [sp, #4]
 800b40c:	f7ff fa69 	bl	800a8e2 <quorem>
 800b410:	4641      	mov	r1, r8
 800b412:	9002      	str	r0, [sp, #8]
 800b414:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b418:	4650      	mov	r0, sl
 800b41a:	f000 fe4d 	bl	800c0b8 <__mcmp>
 800b41e:	463a      	mov	r2, r7
 800b420:	9005      	str	r0, [sp, #20]
 800b422:	4631      	mov	r1, r6
 800b424:	4620      	mov	r0, r4
 800b426:	f000 fe63 	bl	800c0f0 <__mdiff>
 800b42a:	68c2      	ldr	r2, [r0, #12]
 800b42c:	4605      	mov	r5, r0
 800b42e:	bb02      	cbnz	r2, 800b472 <_dtoa_r+0xa7a>
 800b430:	4601      	mov	r1, r0
 800b432:	4650      	mov	r0, sl
 800b434:	f000 fe40 	bl	800c0b8 <__mcmp>
 800b438:	4602      	mov	r2, r0
 800b43a:	4629      	mov	r1, r5
 800b43c:	4620      	mov	r0, r4
 800b43e:	9209      	str	r2, [sp, #36]	; 0x24
 800b440:	f000 fbfe 	bl	800bc40 <_Bfree>
 800b444:	9b07      	ldr	r3, [sp, #28]
 800b446:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b448:	9d04      	ldr	r5, [sp, #16]
 800b44a:	ea43 0102 	orr.w	r1, r3, r2
 800b44e:	9b06      	ldr	r3, [sp, #24]
 800b450:	4319      	orrs	r1, r3
 800b452:	d110      	bne.n	800b476 <_dtoa_r+0xa7e>
 800b454:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b458:	d029      	beq.n	800b4ae <_dtoa_r+0xab6>
 800b45a:	9b05      	ldr	r3, [sp, #20]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	dd02      	ble.n	800b466 <_dtoa_r+0xa6e>
 800b460:	9b02      	ldr	r3, [sp, #8]
 800b462:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800b466:	9b01      	ldr	r3, [sp, #4]
 800b468:	f883 9000 	strb.w	r9, [r3]
 800b46c:	e774      	b.n	800b358 <_dtoa_r+0x960>
 800b46e:	4638      	mov	r0, r7
 800b470:	e7ba      	b.n	800b3e8 <_dtoa_r+0x9f0>
 800b472:	2201      	movs	r2, #1
 800b474:	e7e1      	b.n	800b43a <_dtoa_r+0xa42>
 800b476:	9b05      	ldr	r3, [sp, #20]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	db04      	blt.n	800b486 <_dtoa_r+0xa8e>
 800b47c:	9907      	ldr	r1, [sp, #28]
 800b47e:	430b      	orrs	r3, r1
 800b480:	9906      	ldr	r1, [sp, #24]
 800b482:	430b      	orrs	r3, r1
 800b484:	d120      	bne.n	800b4c8 <_dtoa_r+0xad0>
 800b486:	2a00      	cmp	r2, #0
 800b488:	dded      	ble.n	800b466 <_dtoa_r+0xa6e>
 800b48a:	4651      	mov	r1, sl
 800b48c:	2201      	movs	r2, #1
 800b48e:	4620      	mov	r0, r4
 800b490:	f000 fda6 	bl	800bfe0 <__lshift>
 800b494:	4631      	mov	r1, r6
 800b496:	4682      	mov	sl, r0
 800b498:	f000 fe0e 	bl	800c0b8 <__mcmp>
 800b49c:	2800      	cmp	r0, #0
 800b49e:	dc03      	bgt.n	800b4a8 <_dtoa_r+0xab0>
 800b4a0:	d1e1      	bne.n	800b466 <_dtoa_r+0xa6e>
 800b4a2:	f019 0f01 	tst.w	r9, #1
 800b4a6:	d0de      	beq.n	800b466 <_dtoa_r+0xa6e>
 800b4a8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b4ac:	d1d8      	bne.n	800b460 <_dtoa_r+0xa68>
 800b4ae:	9a01      	ldr	r2, [sp, #4]
 800b4b0:	2339      	movs	r3, #57	; 0x39
 800b4b2:	7013      	strb	r3, [r2, #0]
 800b4b4:	462b      	mov	r3, r5
 800b4b6:	461d      	mov	r5, r3
 800b4b8:	3b01      	subs	r3, #1
 800b4ba:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b4be:	2a39      	cmp	r2, #57	; 0x39
 800b4c0:	d06c      	beq.n	800b59c <_dtoa_r+0xba4>
 800b4c2:	3201      	adds	r2, #1
 800b4c4:	701a      	strb	r2, [r3, #0]
 800b4c6:	e747      	b.n	800b358 <_dtoa_r+0x960>
 800b4c8:	2a00      	cmp	r2, #0
 800b4ca:	dd07      	ble.n	800b4dc <_dtoa_r+0xae4>
 800b4cc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b4d0:	d0ed      	beq.n	800b4ae <_dtoa_r+0xab6>
 800b4d2:	9a01      	ldr	r2, [sp, #4]
 800b4d4:	f109 0301 	add.w	r3, r9, #1
 800b4d8:	7013      	strb	r3, [r2, #0]
 800b4da:	e73d      	b.n	800b358 <_dtoa_r+0x960>
 800b4dc:	9b04      	ldr	r3, [sp, #16]
 800b4de:	9a08      	ldr	r2, [sp, #32]
 800b4e0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800b4e4:	4293      	cmp	r3, r2
 800b4e6:	d043      	beq.n	800b570 <_dtoa_r+0xb78>
 800b4e8:	4651      	mov	r1, sl
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	220a      	movs	r2, #10
 800b4ee:	4620      	mov	r0, r4
 800b4f0:	f000 fbc8 	bl	800bc84 <__multadd>
 800b4f4:	45b8      	cmp	r8, r7
 800b4f6:	4682      	mov	sl, r0
 800b4f8:	f04f 0300 	mov.w	r3, #0
 800b4fc:	f04f 020a 	mov.w	r2, #10
 800b500:	4641      	mov	r1, r8
 800b502:	4620      	mov	r0, r4
 800b504:	d107      	bne.n	800b516 <_dtoa_r+0xb1e>
 800b506:	f000 fbbd 	bl	800bc84 <__multadd>
 800b50a:	4680      	mov	r8, r0
 800b50c:	4607      	mov	r7, r0
 800b50e:	9b04      	ldr	r3, [sp, #16]
 800b510:	3301      	adds	r3, #1
 800b512:	9304      	str	r3, [sp, #16]
 800b514:	e775      	b.n	800b402 <_dtoa_r+0xa0a>
 800b516:	f000 fbb5 	bl	800bc84 <__multadd>
 800b51a:	4639      	mov	r1, r7
 800b51c:	4680      	mov	r8, r0
 800b51e:	2300      	movs	r3, #0
 800b520:	220a      	movs	r2, #10
 800b522:	4620      	mov	r0, r4
 800b524:	f000 fbae 	bl	800bc84 <__multadd>
 800b528:	4607      	mov	r7, r0
 800b52a:	e7f0      	b.n	800b50e <_dtoa_r+0xb16>
 800b52c:	9b04      	ldr	r3, [sp, #16]
 800b52e:	9301      	str	r3, [sp, #4]
 800b530:	9d00      	ldr	r5, [sp, #0]
 800b532:	4631      	mov	r1, r6
 800b534:	4650      	mov	r0, sl
 800b536:	f7ff f9d4 	bl	800a8e2 <quorem>
 800b53a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b53e:	9b00      	ldr	r3, [sp, #0]
 800b540:	f805 9b01 	strb.w	r9, [r5], #1
 800b544:	1aea      	subs	r2, r5, r3
 800b546:	9b01      	ldr	r3, [sp, #4]
 800b548:	4293      	cmp	r3, r2
 800b54a:	dd07      	ble.n	800b55c <_dtoa_r+0xb64>
 800b54c:	4651      	mov	r1, sl
 800b54e:	2300      	movs	r3, #0
 800b550:	220a      	movs	r2, #10
 800b552:	4620      	mov	r0, r4
 800b554:	f000 fb96 	bl	800bc84 <__multadd>
 800b558:	4682      	mov	sl, r0
 800b55a:	e7ea      	b.n	800b532 <_dtoa_r+0xb3a>
 800b55c:	9b01      	ldr	r3, [sp, #4]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	bfc8      	it	gt
 800b562:	461d      	movgt	r5, r3
 800b564:	9b00      	ldr	r3, [sp, #0]
 800b566:	bfd8      	it	le
 800b568:	2501      	movle	r5, #1
 800b56a:	441d      	add	r5, r3
 800b56c:	f04f 0800 	mov.w	r8, #0
 800b570:	4651      	mov	r1, sl
 800b572:	2201      	movs	r2, #1
 800b574:	4620      	mov	r0, r4
 800b576:	f000 fd33 	bl	800bfe0 <__lshift>
 800b57a:	4631      	mov	r1, r6
 800b57c:	4682      	mov	sl, r0
 800b57e:	f000 fd9b 	bl	800c0b8 <__mcmp>
 800b582:	2800      	cmp	r0, #0
 800b584:	dc96      	bgt.n	800b4b4 <_dtoa_r+0xabc>
 800b586:	d102      	bne.n	800b58e <_dtoa_r+0xb96>
 800b588:	f019 0f01 	tst.w	r9, #1
 800b58c:	d192      	bne.n	800b4b4 <_dtoa_r+0xabc>
 800b58e:	462b      	mov	r3, r5
 800b590:	461d      	mov	r5, r3
 800b592:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b596:	2a30      	cmp	r2, #48	; 0x30
 800b598:	d0fa      	beq.n	800b590 <_dtoa_r+0xb98>
 800b59a:	e6dd      	b.n	800b358 <_dtoa_r+0x960>
 800b59c:	9a00      	ldr	r2, [sp, #0]
 800b59e:	429a      	cmp	r2, r3
 800b5a0:	d189      	bne.n	800b4b6 <_dtoa_r+0xabe>
 800b5a2:	f10b 0b01 	add.w	fp, fp, #1
 800b5a6:	2331      	movs	r3, #49	; 0x31
 800b5a8:	e796      	b.n	800b4d8 <_dtoa_r+0xae0>
 800b5aa:	4b0a      	ldr	r3, [pc, #40]	; (800b5d4 <_dtoa_r+0xbdc>)
 800b5ac:	f7ff ba99 	b.w	800aae2 <_dtoa_r+0xea>
 800b5b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	f47f aa6d 	bne.w	800aa92 <_dtoa_r+0x9a>
 800b5b8:	4b07      	ldr	r3, [pc, #28]	; (800b5d8 <_dtoa_r+0xbe0>)
 800b5ba:	f7ff ba92 	b.w	800aae2 <_dtoa_r+0xea>
 800b5be:	9b01      	ldr	r3, [sp, #4]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	dcb5      	bgt.n	800b530 <_dtoa_r+0xb38>
 800b5c4:	9b07      	ldr	r3, [sp, #28]
 800b5c6:	2b02      	cmp	r3, #2
 800b5c8:	f73f aeb1 	bgt.w	800b32e <_dtoa_r+0x936>
 800b5cc:	e7b0      	b.n	800b530 <_dtoa_r+0xb38>
 800b5ce:	bf00      	nop
 800b5d0:	0800d50c 	.word	0x0800d50c
 800b5d4:	0800d46c 	.word	0x0800d46c
 800b5d8:	0800d490 	.word	0x0800d490

0800b5dc <_free_r>:
 800b5dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b5de:	2900      	cmp	r1, #0
 800b5e0:	d044      	beq.n	800b66c <_free_r+0x90>
 800b5e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b5e6:	9001      	str	r0, [sp, #4]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	f1a1 0404 	sub.w	r4, r1, #4
 800b5ee:	bfb8      	it	lt
 800b5f0:	18e4      	addlt	r4, r4, r3
 800b5f2:	f000 fad9 	bl	800bba8 <__malloc_lock>
 800b5f6:	4a1e      	ldr	r2, [pc, #120]	; (800b670 <_free_r+0x94>)
 800b5f8:	9801      	ldr	r0, [sp, #4]
 800b5fa:	6813      	ldr	r3, [r2, #0]
 800b5fc:	b933      	cbnz	r3, 800b60c <_free_r+0x30>
 800b5fe:	6063      	str	r3, [r4, #4]
 800b600:	6014      	str	r4, [r2, #0]
 800b602:	b003      	add	sp, #12
 800b604:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b608:	f000 bad4 	b.w	800bbb4 <__malloc_unlock>
 800b60c:	42a3      	cmp	r3, r4
 800b60e:	d908      	bls.n	800b622 <_free_r+0x46>
 800b610:	6825      	ldr	r5, [r4, #0]
 800b612:	1961      	adds	r1, r4, r5
 800b614:	428b      	cmp	r3, r1
 800b616:	bf01      	itttt	eq
 800b618:	6819      	ldreq	r1, [r3, #0]
 800b61a:	685b      	ldreq	r3, [r3, #4]
 800b61c:	1949      	addeq	r1, r1, r5
 800b61e:	6021      	streq	r1, [r4, #0]
 800b620:	e7ed      	b.n	800b5fe <_free_r+0x22>
 800b622:	461a      	mov	r2, r3
 800b624:	685b      	ldr	r3, [r3, #4]
 800b626:	b10b      	cbz	r3, 800b62c <_free_r+0x50>
 800b628:	42a3      	cmp	r3, r4
 800b62a:	d9fa      	bls.n	800b622 <_free_r+0x46>
 800b62c:	6811      	ldr	r1, [r2, #0]
 800b62e:	1855      	adds	r5, r2, r1
 800b630:	42a5      	cmp	r5, r4
 800b632:	d10b      	bne.n	800b64c <_free_r+0x70>
 800b634:	6824      	ldr	r4, [r4, #0]
 800b636:	4421      	add	r1, r4
 800b638:	1854      	adds	r4, r2, r1
 800b63a:	42a3      	cmp	r3, r4
 800b63c:	6011      	str	r1, [r2, #0]
 800b63e:	d1e0      	bne.n	800b602 <_free_r+0x26>
 800b640:	681c      	ldr	r4, [r3, #0]
 800b642:	685b      	ldr	r3, [r3, #4]
 800b644:	6053      	str	r3, [r2, #4]
 800b646:	440c      	add	r4, r1
 800b648:	6014      	str	r4, [r2, #0]
 800b64a:	e7da      	b.n	800b602 <_free_r+0x26>
 800b64c:	d902      	bls.n	800b654 <_free_r+0x78>
 800b64e:	230c      	movs	r3, #12
 800b650:	6003      	str	r3, [r0, #0]
 800b652:	e7d6      	b.n	800b602 <_free_r+0x26>
 800b654:	6825      	ldr	r5, [r4, #0]
 800b656:	1961      	adds	r1, r4, r5
 800b658:	428b      	cmp	r3, r1
 800b65a:	bf04      	itt	eq
 800b65c:	6819      	ldreq	r1, [r3, #0]
 800b65e:	685b      	ldreq	r3, [r3, #4]
 800b660:	6063      	str	r3, [r4, #4]
 800b662:	bf04      	itt	eq
 800b664:	1949      	addeq	r1, r1, r5
 800b666:	6021      	streq	r1, [r4, #0]
 800b668:	6054      	str	r4, [r2, #4]
 800b66a:	e7ca      	b.n	800b602 <_free_r+0x26>
 800b66c:	b003      	add	sp, #12
 800b66e:	bd30      	pop	{r4, r5, pc}
 800b670:	2000271c 	.word	0x2000271c

0800b674 <__sfputc_r>:
 800b674:	6893      	ldr	r3, [r2, #8]
 800b676:	3b01      	subs	r3, #1
 800b678:	2b00      	cmp	r3, #0
 800b67a:	b410      	push	{r4}
 800b67c:	6093      	str	r3, [r2, #8]
 800b67e:	da08      	bge.n	800b692 <__sfputc_r+0x1e>
 800b680:	6994      	ldr	r4, [r2, #24]
 800b682:	42a3      	cmp	r3, r4
 800b684:	db01      	blt.n	800b68a <__sfputc_r+0x16>
 800b686:	290a      	cmp	r1, #10
 800b688:	d103      	bne.n	800b692 <__sfputc_r+0x1e>
 800b68a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b68e:	f000 be56 	b.w	800c33e <__swbuf_r>
 800b692:	6813      	ldr	r3, [r2, #0]
 800b694:	1c58      	adds	r0, r3, #1
 800b696:	6010      	str	r0, [r2, #0]
 800b698:	7019      	strb	r1, [r3, #0]
 800b69a:	4608      	mov	r0, r1
 800b69c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b6a0:	4770      	bx	lr

0800b6a2 <__sfputs_r>:
 800b6a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6a4:	4606      	mov	r6, r0
 800b6a6:	460f      	mov	r7, r1
 800b6a8:	4614      	mov	r4, r2
 800b6aa:	18d5      	adds	r5, r2, r3
 800b6ac:	42ac      	cmp	r4, r5
 800b6ae:	d101      	bne.n	800b6b4 <__sfputs_r+0x12>
 800b6b0:	2000      	movs	r0, #0
 800b6b2:	e007      	b.n	800b6c4 <__sfputs_r+0x22>
 800b6b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6b8:	463a      	mov	r2, r7
 800b6ba:	4630      	mov	r0, r6
 800b6bc:	f7ff ffda 	bl	800b674 <__sfputc_r>
 800b6c0:	1c43      	adds	r3, r0, #1
 800b6c2:	d1f3      	bne.n	800b6ac <__sfputs_r+0xa>
 800b6c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b6c8 <_vfiprintf_r>:
 800b6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6cc:	460d      	mov	r5, r1
 800b6ce:	b09d      	sub	sp, #116	; 0x74
 800b6d0:	4614      	mov	r4, r2
 800b6d2:	4698      	mov	r8, r3
 800b6d4:	4606      	mov	r6, r0
 800b6d6:	b118      	cbz	r0, 800b6e0 <_vfiprintf_r+0x18>
 800b6d8:	6a03      	ldr	r3, [r0, #32]
 800b6da:	b90b      	cbnz	r3, 800b6e0 <_vfiprintf_r+0x18>
 800b6dc:	f7fe ffc0 	bl	800a660 <__sinit>
 800b6e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b6e2:	07d9      	lsls	r1, r3, #31
 800b6e4:	d405      	bmi.n	800b6f2 <_vfiprintf_r+0x2a>
 800b6e6:	89ab      	ldrh	r3, [r5, #12]
 800b6e8:	059a      	lsls	r2, r3, #22
 800b6ea:	d402      	bmi.n	800b6f2 <_vfiprintf_r+0x2a>
 800b6ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b6ee:	f7ff f8e8 	bl	800a8c2 <__retarget_lock_acquire_recursive>
 800b6f2:	89ab      	ldrh	r3, [r5, #12]
 800b6f4:	071b      	lsls	r3, r3, #28
 800b6f6:	d501      	bpl.n	800b6fc <_vfiprintf_r+0x34>
 800b6f8:	692b      	ldr	r3, [r5, #16]
 800b6fa:	b99b      	cbnz	r3, 800b724 <_vfiprintf_r+0x5c>
 800b6fc:	4629      	mov	r1, r5
 800b6fe:	4630      	mov	r0, r6
 800b700:	f000 fe5a 	bl	800c3b8 <__swsetup_r>
 800b704:	b170      	cbz	r0, 800b724 <_vfiprintf_r+0x5c>
 800b706:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b708:	07dc      	lsls	r4, r3, #31
 800b70a:	d504      	bpl.n	800b716 <_vfiprintf_r+0x4e>
 800b70c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b710:	b01d      	add	sp, #116	; 0x74
 800b712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b716:	89ab      	ldrh	r3, [r5, #12]
 800b718:	0598      	lsls	r0, r3, #22
 800b71a:	d4f7      	bmi.n	800b70c <_vfiprintf_r+0x44>
 800b71c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b71e:	f7ff f8d1 	bl	800a8c4 <__retarget_lock_release_recursive>
 800b722:	e7f3      	b.n	800b70c <_vfiprintf_r+0x44>
 800b724:	2300      	movs	r3, #0
 800b726:	9309      	str	r3, [sp, #36]	; 0x24
 800b728:	2320      	movs	r3, #32
 800b72a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b72e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b732:	2330      	movs	r3, #48	; 0x30
 800b734:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b8e8 <_vfiprintf_r+0x220>
 800b738:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b73c:	f04f 0901 	mov.w	r9, #1
 800b740:	4623      	mov	r3, r4
 800b742:	469a      	mov	sl, r3
 800b744:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b748:	b10a      	cbz	r2, 800b74e <_vfiprintf_r+0x86>
 800b74a:	2a25      	cmp	r2, #37	; 0x25
 800b74c:	d1f9      	bne.n	800b742 <_vfiprintf_r+0x7a>
 800b74e:	ebba 0b04 	subs.w	fp, sl, r4
 800b752:	d00b      	beq.n	800b76c <_vfiprintf_r+0xa4>
 800b754:	465b      	mov	r3, fp
 800b756:	4622      	mov	r2, r4
 800b758:	4629      	mov	r1, r5
 800b75a:	4630      	mov	r0, r6
 800b75c:	f7ff ffa1 	bl	800b6a2 <__sfputs_r>
 800b760:	3001      	adds	r0, #1
 800b762:	f000 80a9 	beq.w	800b8b8 <_vfiprintf_r+0x1f0>
 800b766:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b768:	445a      	add	r2, fp
 800b76a:	9209      	str	r2, [sp, #36]	; 0x24
 800b76c:	f89a 3000 	ldrb.w	r3, [sl]
 800b770:	2b00      	cmp	r3, #0
 800b772:	f000 80a1 	beq.w	800b8b8 <_vfiprintf_r+0x1f0>
 800b776:	2300      	movs	r3, #0
 800b778:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b77c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b780:	f10a 0a01 	add.w	sl, sl, #1
 800b784:	9304      	str	r3, [sp, #16]
 800b786:	9307      	str	r3, [sp, #28]
 800b788:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b78c:	931a      	str	r3, [sp, #104]	; 0x68
 800b78e:	4654      	mov	r4, sl
 800b790:	2205      	movs	r2, #5
 800b792:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b796:	4854      	ldr	r0, [pc, #336]	; (800b8e8 <_vfiprintf_r+0x220>)
 800b798:	f7f4 fd1a 	bl	80001d0 <memchr>
 800b79c:	9a04      	ldr	r2, [sp, #16]
 800b79e:	b9d8      	cbnz	r0, 800b7d8 <_vfiprintf_r+0x110>
 800b7a0:	06d1      	lsls	r1, r2, #27
 800b7a2:	bf44      	itt	mi
 800b7a4:	2320      	movmi	r3, #32
 800b7a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7aa:	0713      	lsls	r3, r2, #28
 800b7ac:	bf44      	itt	mi
 800b7ae:	232b      	movmi	r3, #43	; 0x2b
 800b7b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7b4:	f89a 3000 	ldrb.w	r3, [sl]
 800b7b8:	2b2a      	cmp	r3, #42	; 0x2a
 800b7ba:	d015      	beq.n	800b7e8 <_vfiprintf_r+0x120>
 800b7bc:	9a07      	ldr	r2, [sp, #28]
 800b7be:	4654      	mov	r4, sl
 800b7c0:	2000      	movs	r0, #0
 800b7c2:	f04f 0c0a 	mov.w	ip, #10
 800b7c6:	4621      	mov	r1, r4
 800b7c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b7cc:	3b30      	subs	r3, #48	; 0x30
 800b7ce:	2b09      	cmp	r3, #9
 800b7d0:	d94d      	bls.n	800b86e <_vfiprintf_r+0x1a6>
 800b7d2:	b1b0      	cbz	r0, 800b802 <_vfiprintf_r+0x13a>
 800b7d4:	9207      	str	r2, [sp, #28]
 800b7d6:	e014      	b.n	800b802 <_vfiprintf_r+0x13a>
 800b7d8:	eba0 0308 	sub.w	r3, r0, r8
 800b7dc:	fa09 f303 	lsl.w	r3, r9, r3
 800b7e0:	4313      	orrs	r3, r2
 800b7e2:	9304      	str	r3, [sp, #16]
 800b7e4:	46a2      	mov	sl, r4
 800b7e6:	e7d2      	b.n	800b78e <_vfiprintf_r+0xc6>
 800b7e8:	9b03      	ldr	r3, [sp, #12]
 800b7ea:	1d19      	adds	r1, r3, #4
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	9103      	str	r1, [sp, #12]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	bfbb      	ittet	lt
 800b7f4:	425b      	neglt	r3, r3
 800b7f6:	f042 0202 	orrlt.w	r2, r2, #2
 800b7fa:	9307      	strge	r3, [sp, #28]
 800b7fc:	9307      	strlt	r3, [sp, #28]
 800b7fe:	bfb8      	it	lt
 800b800:	9204      	strlt	r2, [sp, #16]
 800b802:	7823      	ldrb	r3, [r4, #0]
 800b804:	2b2e      	cmp	r3, #46	; 0x2e
 800b806:	d10c      	bne.n	800b822 <_vfiprintf_r+0x15a>
 800b808:	7863      	ldrb	r3, [r4, #1]
 800b80a:	2b2a      	cmp	r3, #42	; 0x2a
 800b80c:	d134      	bne.n	800b878 <_vfiprintf_r+0x1b0>
 800b80e:	9b03      	ldr	r3, [sp, #12]
 800b810:	1d1a      	adds	r2, r3, #4
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	9203      	str	r2, [sp, #12]
 800b816:	2b00      	cmp	r3, #0
 800b818:	bfb8      	it	lt
 800b81a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b81e:	3402      	adds	r4, #2
 800b820:	9305      	str	r3, [sp, #20]
 800b822:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b8f8 <_vfiprintf_r+0x230>
 800b826:	7821      	ldrb	r1, [r4, #0]
 800b828:	2203      	movs	r2, #3
 800b82a:	4650      	mov	r0, sl
 800b82c:	f7f4 fcd0 	bl	80001d0 <memchr>
 800b830:	b138      	cbz	r0, 800b842 <_vfiprintf_r+0x17a>
 800b832:	9b04      	ldr	r3, [sp, #16]
 800b834:	eba0 000a 	sub.w	r0, r0, sl
 800b838:	2240      	movs	r2, #64	; 0x40
 800b83a:	4082      	lsls	r2, r0
 800b83c:	4313      	orrs	r3, r2
 800b83e:	3401      	adds	r4, #1
 800b840:	9304      	str	r3, [sp, #16]
 800b842:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b846:	4829      	ldr	r0, [pc, #164]	; (800b8ec <_vfiprintf_r+0x224>)
 800b848:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b84c:	2206      	movs	r2, #6
 800b84e:	f7f4 fcbf 	bl	80001d0 <memchr>
 800b852:	2800      	cmp	r0, #0
 800b854:	d03f      	beq.n	800b8d6 <_vfiprintf_r+0x20e>
 800b856:	4b26      	ldr	r3, [pc, #152]	; (800b8f0 <_vfiprintf_r+0x228>)
 800b858:	bb1b      	cbnz	r3, 800b8a2 <_vfiprintf_r+0x1da>
 800b85a:	9b03      	ldr	r3, [sp, #12]
 800b85c:	3307      	adds	r3, #7
 800b85e:	f023 0307 	bic.w	r3, r3, #7
 800b862:	3308      	adds	r3, #8
 800b864:	9303      	str	r3, [sp, #12]
 800b866:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b868:	443b      	add	r3, r7
 800b86a:	9309      	str	r3, [sp, #36]	; 0x24
 800b86c:	e768      	b.n	800b740 <_vfiprintf_r+0x78>
 800b86e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b872:	460c      	mov	r4, r1
 800b874:	2001      	movs	r0, #1
 800b876:	e7a6      	b.n	800b7c6 <_vfiprintf_r+0xfe>
 800b878:	2300      	movs	r3, #0
 800b87a:	3401      	adds	r4, #1
 800b87c:	9305      	str	r3, [sp, #20]
 800b87e:	4619      	mov	r1, r3
 800b880:	f04f 0c0a 	mov.w	ip, #10
 800b884:	4620      	mov	r0, r4
 800b886:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b88a:	3a30      	subs	r2, #48	; 0x30
 800b88c:	2a09      	cmp	r2, #9
 800b88e:	d903      	bls.n	800b898 <_vfiprintf_r+0x1d0>
 800b890:	2b00      	cmp	r3, #0
 800b892:	d0c6      	beq.n	800b822 <_vfiprintf_r+0x15a>
 800b894:	9105      	str	r1, [sp, #20]
 800b896:	e7c4      	b.n	800b822 <_vfiprintf_r+0x15a>
 800b898:	fb0c 2101 	mla	r1, ip, r1, r2
 800b89c:	4604      	mov	r4, r0
 800b89e:	2301      	movs	r3, #1
 800b8a0:	e7f0      	b.n	800b884 <_vfiprintf_r+0x1bc>
 800b8a2:	ab03      	add	r3, sp, #12
 800b8a4:	9300      	str	r3, [sp, #0]
 800b8a6:	462a      	mov	r2, r5
 800b8a8:	4b12      	ldr	r3, [pc, #72]	; (800b8f4 <_vfiprintf_r+0x22c>)
 800b8aa:	a904      	add	r1, sp, #16
 800b8ac:	4630      	mov	r0, r6
 800b8ae:	f7fe fa85 	bl	8009dbc <_printf_float>
 800b8b2:	4607      	mov	r7, r0
 800b8b4:	1c78      	adds	r0, r7, #1
 800b8b6:	d1d6      	bne.n	800b866 <_vfiprintf_r+0x19e>
 800b8b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b8ba:	07d9      	lsls	r1, r3, #31
 800b8bc:	d405      	bmi.n	800b8ca <_vfiprintf_r+0x202>
 800b8be:	89ab      	ldrh	r3, [r5, #12]
 800b8c0:	059a      	lsls	r2, r3, #22
 800b8c2:	d402      	bmi.n	800b8ca <_vfiprintf_r+0x202>
 800b8c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b8c6:	f7fe fffd 	bl	800a8c4 <__retarget_lock_release_recursive>
 800b8ca:	89ab      	ldrh	r3, [r5, #12]
 800b8cc:	065b      	lsls	r3, r3, #25
 800b8ce:	f53f af1d 	bmi.w	800b70c <_vfiprintf_r+0x44>
 800b8d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b8d4:	e71c      	b.n	800b710 <_vfiprintf_r+0x48>
 800b8d6:	ab03      	add	r3, sp, #12
 800b8d8:	9300      	str	r3, [sp, #0]
 800b8da:	462a      	mov	r2, r5
 800b8dc:	4b05      	ldr	r3, [pc, #20]	; (800b8f4 <_vfiprintf_r+0x22c>)
 800b8de:	a904      	add	r1, sp, #16
 800b8e0:	4630      	mov	r0, r6
 800b8e2:	f7fe fd0f 	bl	800a304 <_printf_i>
 800b8e6:	e7e4      	b.n	800b8b2 <_vfiprintf_r+0x1ea>
 800b8e8:	0800d51d 	.word	0x0800d51d
 800b8ec:	0800d527 	.word	0x0800d527
 800b8f0:	08009dbd 	.word	0x08009dbd
 800b8f4:	0800b6a3 	.word	0x0800b6a3
 800b8f8:	0800d523 	.word	0x0800d523

0800b8fc <malloc>:
 800b8fc:	4b02      	ldr	r3, [pc, #8]	; (800b908 <malloc+0xc>)
 800b8fe:	4601      	mov	r1, r0
 800b900:	6818      	ldr	r0, [r3, #0]
 800b902:	f000 b823 	b.w	800b94c <_malloc_r>
 800b906:	bf00      	nop
 800b908:	20000068 	.word	0x20000068

0800b90c <sbrk_aligned>:
 800b90c:	b570      	push	{r4, r5, r6, lr}
 800b90e:	4e0e      	ldr	r6, [pc, #56]	; (800b948 <sbrk_aligned+0x3c>)
 800b910:	460c      	mov	r4, r1
 800b912:	6831      	ldr	r1, [r6, #0]
 800b914:	4605      	mov	r5, r0
 800b916:	b911      	cbnz	r1, 800b91e <sbrk_aligned+0x12>
 800b918:	f000 fe5e 	bl	800c5d8 <_sbrk_r>
 800b91c:	6030      	str	r0, [r6, #0]
 800b91e:	4621      	mov	r1, r4
 800b920:	4628      	mov	r0, r5
 800b922:	f000 fe59 	bl	800c5d8 <_sbrk_r>
 800b926:	1c43      	adds	r3, r0, #1
 800b928:	d00a      	beq.n	800b940 <sbrk_aligned+0x34>
 800b92a:	1cc4      	adds	r4, r0, #3
 800b92c:	f024 0403 	bic.w	r4, r4, #3
 800b930:	42a0      	cmp	r0, r4
 800b932:	d007      	beq.n	800b944 <sbrk_aligned+0x38>
 800b934:	1a21      	subs	r1, r4, r0
 800b936:	4628      	mov	r0, r5
 800b938:	f000 fe4e 	bl	800c5d8 <_sbrk_r>
 800b93c:	3001      	adds	r0, #1
 800b93e:	d101      	bne.n	800b944 <sbrk_aligned+0x38>
 800b940:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b944:	4620      	mov	r0, r4
 800b946:	bd70      	pop	{r4, r5, r6, pc}
 800b948:	20002720 	.word	0x20002720

0800b94c <_malloc_r>:
 800b94c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b950:	1ccd      	adds	r5, r1, #3
 800b952:	f025 0503 	bic.w	r5, r5, #3
 800b956:	3508      	adds	r5, #8
 800b958:	2d0c      	cmp	r5, #12
 800b95a:	bf38      	it	cc
 800b95c:	250c      	movcc	r5, #12
 800b95e:	2d00      	cmp	r5, #0
 800b960:	4607      	mov	r7, r0
 800b962:	db01      	blt.n	800b968 <_malloc_r+0x1c>
 800b964:	42a9      	cmp	r1, r5
 800b966:	d905      	bls.n	800b974 <_malloc_r+0x28>
 800b968:	230c      	movs	r3, #12
 800b96a:	603b      	str	r3, [r7, #0]
 800b96c:	2600      	movs	r6, #0
 800b96e:	4630      	mov	r0, r6
 800b970:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b974:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ba48 <_malloc_r+0xfc>
 800b978:	f000 f916 	bl	800bba8 <__malloc_lock>
 800b97c:	f8d8 3000 	ldr.w	r3, [r8]
 800b980:	461c      	mov	r4, r3
 800b982:	bb5c      	cbnz	r4, 800b9dc <_malloc_r+0x90>
 800b984:	4629      	mov	r1, r5
 800b986:	4638      	mov	r0, r7
 800b988:	f7ff ffc0 	bl	800b90c <sbrk_aligned>
 800b98c:	1c43      	adds	r3, r0, #1
 800b98e:	4604      	mov	r4, r0
 800b990:	d155      	bne.n	800ba3e <_malloc_r+0xf2>
 800b992:	f8d8 4000 	ldr.w	r4, [r8]
 800b996:	4626      	mov	r6, r4
 800b998:	2e00      	cmp	r6, #0
 800b99a:	d145      	bne.n	800ba28 <_malloc_r+0xdc>
 800b99c:	2c00      	cmp	r4, #0
 800b99e:	d048      	beq.n	800ba32 <_malloc_r+0xe6>
 800b9a0:	6823      	ldr	r3, [r4, #0]
 800b9a2:	4631      	mov	r1, r6
 800b9a4:	4638      	mov	r0, r7
 800b9a6:	eb04 0903 	add.w	r9, r4, r3
 800b9aa:	f000 fe15 	bl	800c5d8 <_sbrk_r>
 800b9ae:	4581      	cmp	r9, r0
 800b9b0:	d13f      	bne.n	800ba32 <_malloc_r+0xe6>
 800b9b2:	6821      	ldr	r1, [r4, #0]
 800b9b4:	1a6d      	subs	r5, r5, r1
 800b9b6:	4629      	mov	r1, r5
 800b9b8:	4638      	mov	r0, r7
 800b9ba:	f7ff ffa7 	bl	800b90c <sbrk_aligned>
 800b9be:	3001      	adds	r0, #1
 800b9c0:	d037      	beq.n	800ba32 <_malloc_r+0xe6>
 800b9c2:	6823      	ldr	r3, [r4, #0]
 800b9c4:	442b      	add	r3, r5
 800b9c6:	6023      	str	r3, [r4, #0]
 800b9c8:	f8d8 3000 	ldr.w	r3, [r8]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d038      	beq.n	800ba42 <_malloc_r+0xf6>
 800b9d0:	685a      	ldr	r2, [r3, #4]
 800b9d2:	42a2      	cmp	r2, r4
 800b9d4:	d12b      	bne.n	800ba2e <_malloc_r+0xe2>
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	605a      	str	r2, [r3, #4]
 800b9da:	e00f      	b.n	800b9fc <_malloc_r+0xb0>
 800b9dc:	6822      	ldr	r2, [r4, #0]
 800b9de:	1b52      	subs	r2, r2, r5
 800b9e0:	d41f      	bmi.n	800ba22 <_malloc_r+0xd6>
 800b9e2:	2a0b      	cmp	r2, #11
 800b9e4:	d917      	bls.n	800ba16 <_malloc_r+0xca>
 800b9e6:	1961      	adds	r1, r4, r5
 800b9e8:	42a3      	cmp	r3, r4
 800b9ea:	6025      	str	r5, [r4, #0]
 800b9ec:	bf18      	it	ne
 800b9ee:	6059      	strne	r1, [r3, #4]
 800b9f0:	6863      	ldr	r3, [r4, #4]
 800b9f2:	bf08      	it	eq
 800b9f4:	f8c8 1000 	streq.w	r1, [r8]
 800b9f8:	5162      	str	r2, [r4, r5]
 800b9fa:	604b      	str	r3, [r1, #4]
 800b9fc:	4638      	mov	r0, r7
 800b9fe:	f104 060b 	add.w	r6, r4, #11
 800ba02:	f000 f8d7 	bl	800bbb4 <__malloc_unlock>
 800ba06:	f026 0607 	bic.w	r6, r6, #7
 800ba0a:	1d23      	adds	r3, r4, #4
 800ba0c:	1af2      	subs	r2, r6, r3
 800ba0e:	d0ae      	beq.n	800b96e <_malloc_r+0x22>
 800ba10:	1b9b      	subs	r3, r3, r6
 800ba12:	50a3      	str	r3, [r4, r2]
 800ba14:	e7ab      	b.n	800b96e <_malloc_r+0x22>
 800ba16:	42a3      	cmp	r3, r4
 800ba18:	6862      	ldr	r2, [r4, #4]
 800ba1a:	d1dd      	bne.n	800b9d8 <_malloc_r+0x8c>
 800ba1c:	f8c8 2000 	str.w	r2, [r8]
 800ba20:	e7ec      	b.n	800b9fc <_malloc_r+0xb0>
 800ba22:	4623      	mov	r3, r4
 800ba24:	6864      	ldr	r4, [r4, #4]
 800ba26:	e7ac      	b.n	800b982 <_malloc_r+0x36>
 800ba28:	4634      	mov	r4, r6
 800ba2a:	6876      	ldr	r6, [r6, #4]
 800ba2c:	e7b4      	b.n	800b998 <_malloc_r+0x4c>
 800ba2e:	4613      	mov	r3, r2
 800ba30:	e7cc      	b.n	800b9cc <_malloc_r+0x80>
 800ba32:	230c      	movs	r3, #12
 800ba34:	603b      	str	r3, [r7, #0]
 800ba36:	4638      	mov	r0, r7
 800ba38:	f000 f8bc 	bl	800bbb4 <__malloc_unlock>
 800ba3c:	e797      	b.n	800b96e <_malloc_r+0x22>
 800ba3e:	6025      	str	r5, [r4, #0]
 800ba40:	e7dc      	b.n	800b9fc <_malloc_r+0xb0>
 800ba42:	605b      	str	r3, [r3, #4]
 800ba44:	deff      	udf	#255	; 0xff
 800ba46:	bf00      	nop
 800ba48:	2000271c 	.word	0x2000271c

0800ba4c <__sflush_r>:
 800ba4c:	898a      	ldrh	r2, [r1, #12]
 800ba4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba52:	4605      	mov	r5, r0
 800ba54:	0710      	lsls	r0, r2, #28
 800ba56:	460c      	mov	r4, r1
 800ba58:	d458      	bmi.n	800bb0c <__sflush_r+0xc0>
 800ba5a:	684b      	ldr	r3, [r1, #4]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	dc05      	bgt.n	800ba6c <__sflush_r+0x20>
 800ba60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	dc02      	bgt.n	800ba6c <__sflush_r+0x20>
 800ba66:	2000      	movs	r0, #0
 800ba68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ba6e:	2e00      	cmp	r6, #0
 800ba70:	d0f9      	beq.n	800ba66 <__sflush_r+0x1a>
 800ba72:	2300      	movs	r3, #0
 800ba74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ba78:	682f      	ldr	r7, [r5, #0]
 800ba7a:	6a21      	ldr	r1, [r4, #32]
 800ba7c:	602b      	str	r3, [r5, #0]
 800ba7e:	d032      	beq.n	800bae6 <__sflush_r+0x9a>
 800ba80:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ba82:	89a3      	ldrh	r3, [r4, #12]
 800ba84:	075a      	lsls	r2, r3, #29
 800ba86:	d505      	bpl.n	800ba94 <__sflush_r+0x48>
 800ba88:	6863      	ldr	r3, [r4, #4]
 800ba8a:	1ac0      	subs	r0, r0, r3
 800ba8c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ba8e:	b10b      	cbz	r3, 800ba94 <__sflush_r+0x48>
 800ba90:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ba92:	1ac0      	subs	r0, r0, r3
 800ba94:	2300      	movs	r3, #0
 800ba96:	4602      	mov	r2, r0
 800ba98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ba9a:	6a21      	ldr	r1, [r4, #32]
 800ba9c:	4628      	mov	r0, r5
 800ba9e:	47b0      	blx	r6
 800baa0:	1c43      	adds	r3, r0, #1
 800baa2:	89a3      	ldrh	r3, [r4, #12]
 800baa4:	d106      	bne.n	800bab4 <__sflush_r+0x68>
 800baa6:	6829      	ldr	r1, [r5, #0]
 800baa8:	291d      	cmp	r1, #29
 800baaa:	d82b      	bhi.n	800bb04 <__sflush_r+0xb8>
 800baac:	4a29      	ldr	r2, [pc, #164]	; (800bb54 <__sflush_r+0x108>)
 800baae:	410a      	asrs	r2, r1
 800bab0:	07d6      	lsls	r6, r2, #31
 800bab2:	d427      	bmi.n	800bb04 <__sflush_r+0xb8>
 800bab4:	2200      	movs	r2, #0
 800bab6:	6062      	str	r2, [r4, #4]
 800bab8:	04d9      	lsls	r1, r3, #19
 800baba:	6922      	ldr	r2, [r4, #16]
 800babc:	6022      	str	r2, [r4, #0]
 800babe:	d504      	bpl.n	800baca <__sflush_r+0x7e>
 800bac0:	1c42      	adds	r2, r0, #1
 800bac2:	d101      	bne.n	800bac8 <__sflush_r+0x7c>
 800bac4:	682b      	ldr	r3, [r5, #0]
 800bac6:	b903      	cbnz	r3, 800baca <__sflush_r+0x7e>
 800bac8:	6560      	str	r0, [r4, #84]	; 0x54
 800baca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bacc:	602f      	str	r7, [r5, #0]
 800bace:	2900      	cmp	r1, #0
 800bad0:	d0c9      	beq.n	800ba66 <__sflush_r+0x1a>
 800bad2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bad6:	4299      	cmp	r1, r3
 800bad8:	d002      	beq.n	800bae0 <__sflush_r+0x94>
 800bada:	4628      	mov	r0, r5
 800badc:	f7ff fd7e 	bl	800b5dc <_free_r>
 800bae0:	2000      	movs	r0, #0
 800bae2:	6360      	str	r0, [r4, #52]	; 0x34
 800bae4:	e7c0      	b.n	800ba68 <__sflush_r+0x1c>
 800bae6:	2301      	movs	r3, #1
 800bae8:	4628      	mov	r0, r5
 800baea:	47b0      	blx	r6
 800baec:	1c41      	adds	r1, r0, #1
 800baee:	d1c8      	bne.n	800ba82 <__sflush_r+0x36>
 800baf0:	682b      	ldr	r3, [r5, #0]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d0c5      	beq.n	800ba82 <__sflush_r+0x36>
 800baf6:	2b1d      	cmp	r3, #29
 800baf8:	d001      	beq.n	800bafe <__sflush_r+0xb2>
 800bafa:	2b16      	cmp	r3, #22
 800bafc:	d101      	bne.n	800bb02 <__sflush_r+0xb6>
 800bafe:	602f      	str	r7, [r5, #0]
 800bb00:	e7b1      	b.n	800ba66 <__sflush_r+0x1a>
 800bb02:	89a3      	ldrh	r3, [r4, #12]
 800bb04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb08:	81a3      	strh	r3, [r4, #12]
 800bb0a:	e7ad      	b.n	800ba68 <__sflush_r+0x1c>
 800bb0c:	690f      	ldr	r7, [r1, #16]
 800bb0e:	2f00      	cmp	r7, #0
 800bb10:	d0a9      	beq.n	800ba66 <__sflush_r+0x1a>
 800bb12:	0793      	lsls	r3, r2, #30
 800bb14:	680e      	ldr	r6, [r1, #0]
 800bb16:	bf08      	it	eq
 800bb18:	694b      	ldreq	r3, [r1, #20]
 800bb1a:	600f      	str	r7, [r1, #0]
 800bb1c:	bf18      	it	ne
 800bb1e:	2300      	movne	r3, #0
 800bb20:	eba6 0807 	sub.w	r8, r6, r7
 800bb24:	608b      	str	r3, [r1, #8]
 800bb26:	f1b8 0f00 	cmp.w	r8, #0
 800bb2a:	dd9c      	ble.n	800ba66 <__sflush_r+0x1a>
 800bb2c:	6a21      	ldr	r1, [r4, #32]
 800bb2e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bb30:	4643      	mov	r3, r8
 800bb32:	463a      	mov	r2, r7
 800bb34:	4628      	mov	r0, r5
 800bb36:	47b0      	blx	r6
 800bb38:	2800      	cmp	r0, #0
 800bb3a:	dc06      	bgt.n	800bb4a <__sflush_r+0xfe>
 800bb3c:	89a3      	ldrh	r3, [r4, #12]
 800bb3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb42:	81a3      	strh	r3, [r4, #12]
 800bb44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bb48:	e78e      	b.n	800ba68 <__sflush_r+0x1c>
 800bb4a:	4407      	add	r7, r0
 800bb4c:	eba8 0800 	sub.w	r8, r8, r0
 800bb50:	e7e9      	b.n	800bb26 <__sflush_r+0xda>
 800bb52:	bf00      	nop
 800bb54:	dfbffffe 	.word	0xdfbffffe

0800bb58 <_fflush_r>:
 800bb58:	b538      	push	{r3, r4, r5, lr}
 800bb5a:	690b      	ldr	r3, [r1, #16]
 800bb5c:	4605      	mov	r5, r0
 800bb5e:	460c      	mov	r4, r1
 800bb60:	b913      	cbnz	r3, 800bb68 <_fflush_r+0x10>
 800bb62:	2500      	movs	r5, #0
 800bb64:	4628      	mov	r0, r5
 800bb66:	bd38      	pop	{r3, r4, r5, pc}
 800bb68:	b118      	cbz	r0, 800bb72 <_fflush_r+0x1a>
 800bb6a:	6a03      	ldr	r3, [r0, #32]
 800bb6c:	b90b      	cbnz	r3, 800bb72 <_fflush_r+0x1a>
 800bb6e:	f7fe fd77 	bl	800a660 <__sinit>
 800bb72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d0f3      	beq.n	800bb62 <_fflush_r+0xa>
 800bb7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bb7c:	07d0      	lsls	r0, r2, #31
 800bb7e:	d404      	bmi.n	800bb8a <_fflush_r+0x32>
 800bb80:	0599      	lsls	r1, r3, #22
 800bb82:	d402      	bmi.n	800bb8a <_fflush_r+0x32>
 800bb84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bb86:	f7fe fe9c 	bl	800a8c2 <__retarget_lock_acquire_recursive>
 800bb8a:	4628      	mov	r0, r5
 800bb8c:	4621      	mov	r1, r4
 800bb8e:	f7ff ff5d 	bl	800ba4c <__sflush_r>
 800bb92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bb94:	07da      	lsls	r2, r3, #31
 800bb96:	4605      	mov	r5, r0
 800bb98:	d4e4      	bmi.n	800bb64 <_fflush_r+0xc>
 800bb9a:	89a3      	ldrh	r3, [r4, #12]
 800bb9c:	059b      	lsls	r3, r3, #22
 800bb9e:	d4e1      	bmi.n	800bb64 <_fflush_r+0xc>
 800bba0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bba2:	f7fe fe8f 	bl	800a8c4 <__retarget_lock_release_recursive>
 800bba6:	e7dd      	b.n	800bb64 <_fflush_r+0xc>

0800bba8 <__malloc_lock>:
 800bba8:	4801      	ldr	r0, [pc, #4]	; (800bbb0 <__malloc_lock+0x8>)
 800bbaa:	f7fe be8a 	b.w	800a8c2 <__retarget_lock_acquire_recursive>
 800bbae:	bf00      	nop
 800bbb0:	20002718 	.word	0x20002718

0800bbb4 <__malloc_unlock>:
 800bbb4:	4801      	ldr	r0, [pc, #4]	; (800bbbc <__malloc_unlock+0x8>)
 800bbb6:	f7fe be85 	b.w	800a8c4 <__retarget_lock_release_recursive>
 800bbba:	bf00      	nop
 800bbbc:	20002718 	.word	0x20002718

0800bbc0 <_Balloc>:
 800bbc0:	b570      	push	{r4, r5, r6, lr}
 800bbc2:	69c6      	ldr	r6, [r0, #28]
 800bbc4:	4604      	mov	r4, r0
 800bbc6:	460d      	mov	r5, r1
 800bbc8:	b976      	cbnz	r6, 800bbe8 <_Balloc+0x28>
 800bbca:	2010      	movs	r0, #16
 800bbcc:	f7ff fe96 	bl	800b8fc <malloc>
 800bbd0:	4602      	mov	r2, r0
 800bbd2:	61e0      	str	r0, [r4, #28]
 800bbd4:	b920      	cbnz	r0, 800bbe0 <_Balloc+0x20>
 800bbd6:	4b18      	ldr	r3, [pc, #96]	; (800bc38 <_Balloc+0x78>)
 800bbd8:	4818      	ldr	r0, [pc, #96]	; (800bc3c <_Balloc+0x7c>)
 800bbda:	216b      	movs	r1, #107	; 0x6b
 800bbdc:	f000 fd1e 	bl	800c61c <__assert_func>
 800bbe0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bbe4:	6006      	str	r6, [r0, #0]
 800bbe6:	60c6      	str	r6, [r0, #12]
 800bbe8:	69e6      	ldr	r6, [r4, #28]
 800bbea:	68f3      	ldr	r3, [r6, #12]
 800bbec:	b183      	cbz	r3, 800bc10 <_Balloc+0x50>
 800bbee:	69e3      	ldr	r3, [r4, #28]
 800bbf0:	68db      	ldr	r3, [r3, #12]
 800bbf2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bbf6:	b9b8      	cbnz	r0, 800bc28 <_Balloc+0x68>
 800bbf8:	2101      	movs	r1, #1
 800bbfa:	fa01 f605 	lsl.w	r6, r1, r5
 800bbfe:	1d72      	adds	r2, r6, #5
 800bc00:	0092      	lsls	r2, r2, #2
 800bc02:	4620      	mov	r0, r4
 800bc04:	f000 fd28 	bl	800c658 <_calloc_r>
 800bc08:	b160      	cbz	r0, 800bc24 <_Balloc+0x64>
 800bc0a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bc0e:	e00e      	b.n	800bc2e <_Balloc+0x6e>
 800bc10:	2221      	movs	r2, #33	; 0x21
 800bc12:	2104      	movs	r1, #4
 800bc14:	4620      	mov	r0, r4
 800bc16:	f000 fd1f 	bl	800c658 <_calloc_r>
 800bc1a:	69e3      	ldr	r3, [r4, #28]
 800bc1c:	60f0      	str	r0, [r6, #12]
 800bc1e:	68db      	ldr	r3, [r3, #12]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d1e4      	bne.n	800bbee <_Balloc+0x2e>
 800bc24:	2000      	movs	r0, #0
 800bc26:	bd70      	pop	{r4, r5, r6, pc}
 800bc28:	6802      	ldr	r2, [r0, #0]
 800bc2a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bc2e:	2300      	movs	r3, #0
 800bc30:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bc34:	e7f7      	b.n	800bc26 <_Balloc+0x66>
 800bc36:	bf00      	nop
 800bc38:	0800d49d 	.word	0x0800d49d
 800bc3c:	0800d52e 	.word	0x0800d52e

0800bc40 <_Bfree>:
 800bc40:	b570      	push	{r4, r5, r6, lr}
 800bc42:	69c6      	ldr	r6, [r0, #28]
 800bc44:	4605      	mov	r5, r0
 800bc46:	460c      	mov	r4, r1
 800bc48:	b976      	cbnz	r6, 800bc68 <_Bfree+0x28>
 800bc4a:	2010      	movs	r0, #16
 800bc4c:	f7ff fe56 	bl	800b8fc <malloc>
 800bc50:	4602      	mov	r2, r0
 800bc52:	61e8      	str	r0, [r5, #28]
 800bc54:	b920      	cbnz	r0, 800bc60 <_Bfree+0x20>
 800bc56:	4b09      	ldr	r3, [pc, #36]	; (800bc7c <_Bfree+0x3c>)
 800bc58:	4809      	ldr	r0, [pc, #36]	; (800bc80 <_Bfree+0x40>)
 800bc5a:	218f      	movs	r1, #143	; 0x8f
 800bc5c:	f000 fcde 	bl	800c61c <__assert_func>
 800bc60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bc64:	6006      	str	r6, [r0, #0]
 800bc66:	60c6      	str	r6, [r0, #12]
 800bc68:	b13c      	cbz	r4, 800bc7a <_Bfree+0x3a>
 800bc6a:	69eb      	ldr	r3, [r5, #28]
 800bc6c:	6862      	ldr	r2, [r4, #4]
 800bc6e:	68db      	ldr	r3, [r3, #12]
 800bc70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bc74:	6021      	str	r1, [r4, #0]
 800bc76:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bc7a:	bd70      	pop	{r4, r5, r6, pc}
 800bc7c:	0800d49d 	.word	0x0800d49d
 800bc80:	0800d52e 	.word	0x0800d52e

0800bc84 <__multadd>:
 800bc84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc88:	690d      	ldr	r5, [r1, #16]
 800bc8a:	4607      	mov	r7, r0
 800bc8c:	460c      	mov	r4, r1
 800bc8e:	461e      	mov	r6, r3
 800bc90:	f101 0c14 	add.w	ip, r1, #20
 800bc94:	2000      	movs	r0, #0
 800bc96:	f8dc 3000 	ldr.w	r3, [ip]
 800bc9a:	b299      	uxth	r1, r3
 800bc9c:	fb02 6101 	mla	r1, r2, r1, r6
 800bca0:	0c1e      	lsrs	r6, r3, #16
 800bca2:	0c0b      	lsrs	r3, r1, #16
 800bca4:	fb02 3306 	mla	r3, r2, r6, r3
 800bca8:	b289      	uxth	r1, r1
 800bcaa:	3001      	adds	r0, #1
 800bcac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bcb0:	4285      	cmp	r5, r0
 800bcb2:	f84c 1b04 	str.w	r1, [ip], #4
 800bcb6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bcba:	dcec      	bgt.n	800bc96 <__multadd+0x12>
 800bcbc:	b30e      	cbz	r6, 800bd02 <__multadd+0x7e>
 800bcbe:	68a3      	ldr	r3, [r4, #8]
 800bcc0:	42ab      	cmp	r3, r5
 800bcc2:	dc19      	bgt.n	800bcf8 <__multadd+0x74>
 800bcc4:	6861      	ldr	r1, [r4, #4]
 800bcc6:	4638      	mov	r0, r7
 800bcc8:	3101      	adds	r1, #1
 800bcca:	f7ff ff79 	bl	800bbc0 <_Balloc>
 800bcce:	4680      	mov	r8, r0
 800bcd0:	b928      	cbnz	r0, 800bcde <__multadd+0x5a>
 800bcd2:	4602      	mov	r2, r0
 800bcd4:	4b0c      	ldr	r3, [pc, #48]	; (800bd08 <__multadd+0x84>)
 800bcd6:	480d      	ldr	r0, [pc, #52]	; (800bd0c <__multadd+0x88>)
 800bcd8:	21ba      	movs	r1, #186	; 0xba
 800bcda:	f000 fc9f 	bl	800c61c <__assert_func>
 800bcde:	6922      	ldr	r2, [r4, #16]
 800bce0:	3202      	adds	r2, #2
 800bce2:	f104 010c 	add.w	r1, r4, #12
 800bce6:	0092      	lsls	r2, r2, #2
 800bce8:	300c      	adds	r0, #12
 800bcea:	f7fe fdec 	bl	800a8c6 <memcpy>
 800bcee:	4621      	mov	r1, r4
 800bcf0:	4638      	mov	r0, r7
 800bcf2:	f7ff ffa5 	bl	800bc40 <_Bfree>
 800bcf6:	4644      	mov	r4, r8
 800bcf8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bcfc:	3501      	adds	r5, #1
 800bcfe:	615e      	str	r6, [r3, #20]
 800bd00:	6125      	str	r5, [r4, #16]
 800bd02:	4620      	mov	r0, r4
 800bd04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd08:	0800d50c 	.word	0x0800d50c
 800bd0c:	0800d52e 	.word	0x0800d52e

0800bd10 <__hi0bits>:
 800bd10:	0c03      	lsrs	r3, r0, #16
 800bd12:	041b      	lsls	r3, r3, #16
 800bd14:	b9d3      	cbnz	r3, 800bd4c <__hi0bits+0x3c>
 800bd16:	0400      	lsls	r0, r0, #16
 800bd18:	2310      	movs	r3, #16
 800bd1a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bd1e:	bf04      	itt	eq
 800bd20:	0200      	lsleq	r0, r0, #8
 800bd22:	3308      	addeq	r3, #8
 800bd24:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bd28:	bf04      	itt	eq
 800bd2a:	0100      	lsleq	r0, r0, #4
 800bd2c:	3304      	addeq	r3, #4
 800bd2e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bd32:	bf04      	itt	eq
 800bd34:	0080      	lsleq	r0, r0, #2
 800bd36:	3302      	addeq	r3, #2
 800bd38:	2800      	cmp	r0, #0
 800bd3a:	db05      	blt.n	800bd48 <__hi0bits+0x38>
 800bd3c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bd40:	f103 0301 	add.w	r3, r3, #1
 800bd44:	bf08      	it	eq
 800bd46:	2320      	moveq	r3, #32
 800bd48:	4618      	mov	r0, r3
 800bd4a:	4770      	bx	lr
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	e7e4      	b.n	800bd1a <__hi0bits+0xa>

0800bd50 <__lo0bits>:
 800bd50:	6803      	ldr	r3, [r0, #0]
 800bd52:	f013 0207 	ands.w	r2, r3, #7
 800bd56:	d00c      	beq.n	800bd72 <__lo0bits+0x22>
 800bd58:	07d9      	lsls	r1, r3, #31
 800bd5a:	d422      	bmi.n	800bda2 <__lo0bits+0x52>
 800bd5c:	079a      	lsls	r2, r3, #30
 800bd5e:	bf49      	itett	mi
 800bd60:	085b      	lsrmi	r3, r3, #1
 800bd62:	089b      	lsrpl	r3, r3, #2
 800bd64:	6003      	strmi	r3, [r0, #0]
 800bd66:	2201      	movmi	r2, #1
 800bd68:	bf5c      	itt	pl
 800bd6a:	6003      	strpl	r3, [r0, #0]
 800bd6c:	2202      	movpl	r2, #2
 800bd6e:	4610      	mov	r0, r2
 800bd70:	4770      	bx	lr
 800bd72:	b299      	uxth	r1, r3
 800bd74:	b909      	cbnz	r1, 800bd7a <__lo0bits+0x2a>
 800bd76:	0c1b      	lsrs	r3, r3, #16
 800bd78:	2210      	movs	r2, #16
 800bd7a:	b2d9      	uxtb	r1, r3
 800bd7c:	b909      	cbnz	r1, 800bd82 <__lo0bits+0x32>
 800bd7e:	3208      	adds	r2, #8
 800bd80:	0a1b      	lsrs	r3, r3, #8
 800bd82:	0719      	lsls	r1, r3, #28
 800bd84:	bf04      	itt	eq
 800bd86:	091b      	lsreq	r3, r3, #4
 800bd88:	3204      	addeq	r2, #4
 800bd8a:	0799      	lsls	r1, r3, #30
 800bd8c:	bf04      	itt	eq
 800bd8e:	089b      	lsreq	r3, r3, #2
 800bd90:	3202      	addeq	r2, #2
 800bd92:	07d9      	lsls	r1, r3, #31
 800bd94:	d403      	bmi.n	800bd9e <__lo0bits+0x4e>
 800bd96:	085b      	lsrs	r3, r3, #1
 800bd98:	f102 0201 	add.w	r2, r2, #1
 800bd9c:	d003      	beq.n	800bda6 <__lo0bits+0x56>
 800bd9e:	6003      	str	r3, [r0, #0]
 800bda0:	e7e5      	b.n	800bd6e <__lo0bits+0x1e>
 800bda2:	2200      	movs	r2, #0
 800bda4:	e7e3      	b.n	800bd6e <__lo0bits+0x1e>
 800bda6:	2220      	movs	r2, #32
 800bda8:	e7e1      	b.n	800bd6e <__lo0bits+0x1e>
	...

0800bdac <__i2b>:
 800bdac:	b510      	push	{r4, lr}
 800bdae:	460c      	mov	r4, r1
 800bdb0:	2101      	movs	r1, #1
 800bdb2:	f7ff ff05 	bl	800bbc0 <_Balloc>
 800bdb6:	4602      	mov	r2, r0
 800bdb8:	b928      	cbnz	r0, 800bdc6 <__i2b+0x1a>
 800bdba:	4b05      	ldr	r3, [pc, #20]	; (800bdd0 <__i2b+0x24>)
 800bdbc:	4805      	ldr	r0, [pc, #20]	; (800bdd4 <__i2b+0x28>)
 800bdbe:	f240 1145 	movw	r1, #325	; 0x145
 800bdc2:	f000 fc2b 	bl	800c61c <__assert_func>
 800bdc6:	2301      	movs	r3, #1
 800bdc8:	6144      	str	r4, [r0, #20]
 800bdca:	6103      	str	r3, [r0, #16]
 800bdcc:	bd10      	pop	{r4, pc}
 800bdce:	bf00      	nop
 800bdd0:	0800d50c 	.word	0x0800d50c
 800bdd4:	0800d52e 	.word	0x0800d52e

0800bdd8 <__multiply>:
 800bdd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bddc:	4691      	mov	r9, r2
 800bdde:	690a      	ldr	r2, [r1, #16]
 800bde0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bde4:	429a      	cmp	r2, r3
 800bde6:	bfb8      	it	lt
 800bde8:	460b      	movlt	r3, r1
 800bdea:	460c      	mov	r4, r1
 800bdec:	bfbc      	itt	lt
 800bdee:	464c      	movlt	r4, r9
 800bdf0:	4699      	movlt	r9, r3
 800bdf2:	6927      	ldr	r7, [r4, #16]
 800bdf4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bdf8:	68a3      	ldr	r3, [r4, #8]
 800bdfa:	6861      	ldr	r1, [r4, #4]
 800bdfc:	eb07 060a 	add.w	r6, r7, sl
 800be00:	42b3      	cmp	r3, r6
 800be02:	b085      	sub	sp, #20
 800be04:	bfb8      	it	lt
 800be06:	3101      	addlt	r1, #1
 800be08:	f7ff feda 	bl	800bbc0 <_Balloc>
 800be0c:	b930      	cbnz	r0, 800be1c <__multiply+0x44>
 800be0e:	4602      	mov	r2, r0
 800be10:	4b44      	ldr	r3, [pc, #272]	; (800bf24 <__multiply+0x14c>)
 800be12:	4845      	ldr	r0, [pc, #276]	; (800bf28 <__multiply+0x150>)
 800be14:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800be18:	f000 fc00 	bl	800c61c <__assert_func>
 800be1c:	f100 0514 	add.w	r5, r0, #20
 800be20:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800be24:	462b      	mov	r3, r5
 800be26:	2200      	movs	r2, #0
 800be28:	4543      	cmp	r3, r8
 800be2a:	d321      	bcc.n	800be70 <__multiply+0x98>
 800be2c:	f104 0314 	add.w	r3, r4, #20
 800be30:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800be34:	f109 0314 	add.w	r3, r9, #20
 800be38:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800be3c:	9202      	str	r2, [sp, #8]
 800be3e:	1b3a      	subs	r2, r7, r4
 800be40:	3a15      	subs	r2, #21
 800be42:	f022 0203 	bic.w	r2, r2, #3
 800be46:	3204      	adds	r2, #4
 800be48:	f104 0115 	add.w	r1, r4, #21
 800be4c:	428f      	cmp	r7, r1
 800be4e:	bf38      	it	cc
 800be50:	2204      	movcc	r2, #4
 800be52:	9201      	str	r2, [sp, #4]
 800be54:	9a02      	ldr	r2, [sp, #8]
 800be56:	9303      	str	r3, [sp, #12]
 800be58:	429a      	cmp	r2, r3
 800be5a:	d80c      	bhi.n	800be76 <__multiply+0x9e>
 800be5c:	2e00      	cmp	r6, #0
 800be5e:	dd03      	ble.n	800be68 <__multiply+0x90>
 800be60:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800be64:	2b00      	cmp	r3, #0
 800be66:	d05b      	beq.n	800bf20 <__multiply+0x148>
 800be68:	6106      	str	r6, [r0, #16]
 800be6a:	b005      	add	sp, #20
 800be6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be70:	f843 2b04 	str.w	r2, [r3], #4
 800be74:	e7d8      	b.n	800be28 <__multiply+0x50>
 800be76:	f8b3 a000 	ldrh.w	sl, [r3]
 800be7a:	f1ba 0f00 	cmp.w	sl, #0
 800be7e:	d024      	beq.n	800beca <__multiply+0xf2>
 800be80:	f104 0e14 	add.w	lr, r4, #20
 800be84:	46a9      	mov	r9, r5
 800be86:	f04f 0c00 	mov.w	ip, #0
 800be8a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800be8e:	f8d9 1000 	ldr.w	r1, [r9]
 800be92:	fa1f fb82 	uxth.w	fp, r2
 800be96:	b289      	uxth	r1, r1
 800be98:	fb0a 110b 	mla	r1, sl, fp, r1
 800be9c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bea0:	f8d9 2000 	ldr.w	r2, [r9]
 800bea4:	4461      	add	r1, ip
 800bea6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800beaa:	fb0a c20b 	mla	r2, sl, fp, ip
 800beae:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800beb2:	b289      	uxth	r1, r1
 800beb4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800beb8:	4577      	cmp	r7, lr
 800beba:	f849 1b04 	str.w	r1, [r9], #4
 800bebe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bec2:	d8e2      	bhi.n	800be8a <__multiply+0xb2>
 800bec4:	9a01      	ldr	r2, [sp, #4]
 800bec6:	f845 c002 	str.w	ip, [r5, r2]
 800beca:	9a03      	ldr	r2, [sp, #12]
 800becc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bed0:	3304      	adds	r3, #4
 800bed2:	f1b9 0f00 	cmp.w	r9, #0
 800bed6:	d021      	beq.n	800bf1c <__multiply+0x144>
 800bed8:	6829      	ldr	r1, [r5, #0]
 800beda:	f104 0c14 	add.w	ip, r4, #20
 800bede:	46ae      	mov	lr, r5
 800bee0:	f04f 0a00 	mov.w	sl, #0
 800bee4:	f8bc b000 	ldrh.w	fp, [ip]
 800bee8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800beec:	fb09 220b 	mla	r2, r9, fp, r2
 800bef0:	4452      	add	r2, sl
 800bef2:	b289      	uxth	r1, r1
 800bef4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bef8:	f84e 1b04 	str.w	r1, [lr], #4
 800befc:	f85c 1b04 	ldr.w	r1, [ip], #4
 800bf00:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bf04:	f8be 1000 	ldrh.w	r1, [lr]
 800bf08:	fb09 110a 	mla	r1, r9, sl, r1
 800bf0c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800bf10:	4567      	cmp	r7, ip
 800bf12:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bf16:	d8e5      	bhi.n	800bee4 <__multiply+0x10c>
 800bf18:	9a01      	ldr	r2, [sp, #4]
 800bf1a:	50a9      	str	r1, [r5, r2]
 800bf1c:	3504      	adds	r5, #4
 800bf1e:	e799      	b.n	800be54 <__multiply+0x7c>
 800bf20:	3e01      	subs	r6, #1
 800bf22:	e79b      	b.n	800be5c <__multiply+0x84>
 800bf24:	0800d50c 	.word	0x0800d50c
 800bf28:	0800d52e 	.word	0x0800d52e

0800bf2c <__pow5mult>:
 800bf2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf30:	4615      	mov	r5, r2
 800bf32:	f012 0203 	ands.w	r2, r2, #3
 800bf36:	4606      	mov	r6, r0
 800bf38:	460f      	mov	r7, r1
 800bf3a:	d007      	beq.n	800bf4c <__pow5mult+0x20>
 800bf3c:	4c25      	ldr	r4, [pc, #148]	; (800bfd4 <__pow5mult+0xa8>)
 800bf3e:	3a01      	subs	r2, #1
 800bf40:	2300      	movs	r3, #0
 800bf42:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bf46:	f7ff fe9d 	bl	800bc84 <__multadd>
 800bf4a:	4607      	mov	r7, r0
 800bf4c:	10ad      	asrs	r5, r5, #2
 800bf4e:	d03d      	beq.n	800bfcc <__pow5mult+0xa0>
 800bf50:	69f4      	ldr	r4, [r6, #28]
 800bf52:	b97c      	cbnz	r4, 800bf74 <__pow5mult+0x48>
 800bf54:	2010      	movs	r0, #16
 800bf56:	f7ff fcd1 	bl	800b8fc <malloc>
 800bf5a:	4602      	mov	r2, r0
 800bf5c:	61f0      	str	r0, [r6, #28]
 800bf5e:	b928      	cbnz	r0, 800bf6c <__pow5mult+0x40>
 800bf60:	4b1d      	ldr	r3, [pc, #116]	; (800bfd8 <__pow5mult+0xac>)
 800bf62:	481e      	ldr	r0, [pc, #120]	; (800bfdc <__pow5mult+0xb0>)
 800bf64:	f240 11b3 	movw	r1, #435	; 0x1b3
 800bf68:	f000 fb58 	bl	800c61c <__assert_func>
 800bf6c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bf70:	6004      	str	r4, [r0, #0]
 800bf72:	60c4      	str	r4, [r0, #12]
 800bf74:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800bf78:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bf7c:	b94c      	cbnz	r4, 800bf92 <__pow5mult+0x66>
 800bf7e:	f240 2171 	movw	r1, #625	; 0x271
 800bf82:	4630      	mov	r0, r6
 800bf84:	f7ff ff12 	bl	800bdac <__i2b>
 800bf88:	2300      	movs	r3, #0
 800bf8a:	f8c8 0008 	str.w	r0, [r8, #8]
 800bf8e:	4604      	mov	r4, r0
 800bf90:	6003      	str	r3, [r0, #0]
 800bf92:	f04f 0900 	mov.w	r9, #0
 800bf96:	07eb      	lsls	r3, r5, #31
 800bf98:	d50a      	bpl.n	800bfb0 <__pow5mult+0x84>
 800bf9a:	4639      	mov	r1, r7
 800bf9c:	4622      	mov	r2, r4
 800bf9e:	4630      	mov	r0, r6
 800bfa0:	f7ff ff1a 	bl	800bdd8 <__multiply>
 800bfa4:	4639      	mov	r1, r7
 800bfa6:	4680      	mov	r8, r0
 800bfa8:	4630      	mov	r0, r6
 800bfaa:	f7ff fe49 	bl	800bc40 <_Bfree>
 800bfae:	4647      	mov	r7, r8
 800bfb0:	106d      	asrs	r5, r5, #1
 800bfb2:	d00b      	beq.n	800bfcc <__pow5mult+0xa0>
 800bfb4:	6820      	ldr	r0, [r4, #0]
 800bfb6:	b938      	cbnz	r0, 800bfc8 <__pow5mult+0x9c>
 800bfb8:	4622      	mov	r2, r4
 800bfba:	4621      	mov	r1, r4
 800bfbc:	4630      	mov	r0, r6
 800bfbe:	f7ff ff0b 	bl	800bdd8 <__multiply>
 800bfc2:	6020      	str	r0, [r4, #0]
 800bfc4:	f8c0 9000 	str.w	r9, [r0]
 800bfc8:	4604      	mov	r4, r0
 800bfca:	e7e4      	b.n	800bf96 <__pow5mult+0x6a>
 800bfcc:	4638      	mov	r0, r7
 800bfce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bfd2:	bf00      	nop
 800bfd4:	0800d678 	.word	0x0800d678
 800bfd8:	0800d49d 	.word	0x0800d49d
 800bfdc:	0800d52e 	.word	0x0800d52e

0800bfe0 <__lshift>:
 800bfe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bfe4:	460c      	mov	r4, r1
 800bfe6:	6849      	ldr	r1, [r1, #4]
 800bfe8:	6923      	ldr	r3, [r4, #16]
 800bfea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bfee:	68a3      	ldr	r3, [r4, #8]
 800bff0:	4607      	mov	r7, r0
 800bff2:	4691      	mov	r9, r2
 800bff4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bff8:	f108 0601 	add.w	r6, r8, #1
 800bffc:	42b3      	cmp	r3, r6
 800bffe:	db0b      	blt.n	800c018 <__lshift+0x38>
 800c000:	4638      	mov	r0, r7
 800c002:	f7ff fddd 	bl	800bbc0 <_Balloc>
 800c006:	4605      	mov	r5, r0
 800c008:	b948      	cbnz	r0, 800c01e <__lshift+0x3e>
 800c00a:	4602      	mov	r2, r0
 800c00c:	4b28      	ldr	r3, [pc, #160]	; (800c0b0 <__lshift+0xd0>)
 800c00e:	4829      	ldr	r0, [pc, #164]	; (800c0b4 <__lshift+0xd4>)
 800c010:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800c014:	f000 fb02 	bl	800c61c <__assert_func>
 800c018:	3101      	adds	r1, #1
 800c01a:	005b      	lsls	r3, r3, #1
 800c01c:	e7ee      	b.n	800bffc <__lshift+0x1c>
 800c01e:	2300      	movs	r3, #0
 800c020:	f100 0114 	add.w	r1, r0, #20
 800c024:	f100 0210 	add.w	r2, r0, #16
 800c028:	4618      	mov	r0, r3
 800c02a:	4553      	cmp	r3, sl
 800c02c:	db33      	blt.n	800c096 <__lshift+0xb6>
 800c02e:	6920      	ldr	r0, [r4, #16]
 800c030:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c034:	f104 0314 	add.w	r3, r4, #20
 800c038:	f019 091f 	ands.w	r9, r9, #31
 800c03c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c040:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c044:	d02b      	beq.n	800c09e <__lshift+0xbe>
 800c046:	f1c9 0e20 	rsb	lr, r9, #32
 800c04a:	468a      	mov	sl, r1
 800c04c:	2200      	movs	r2, #0
 800c04e:	6818      	ldr	r0, [r3, #0]
 800c050:	fa00 f009 	lsl.w	r0, r0, r9
 800c054:	4310      	orrs	r0, r2
 800c056:	f84a 0b04 	str.w	r0, [sl], #4
 800c05a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c05e:	459c      	cmp	ip, r3
 800c060:	fa22 f20e 	lsr.w	r2, r2, lr
 800c064:	d8f3      	bhi.n	800c04e <__lshift+0x6e>
 800c066:	ebac 0304 	sub.w	r3, ip, r4
 800c06a:	3b15      	subs	r3, #21
 800c06c:	f023 0303 	bic.w	r3, r3, #3
 800c070:	3304      	adds	r3, #4
 800c072:	f104 0015 	add.w	r0, r4, #21
 800c076:	4584      	cmp	ip, r0
 800c078:	bf38      	it	cc
 800c07a:	2304      	movcc	r3, #4
 800c07c:	50ca      	str	r2, [r1, r3]
 800c07e:	b10a      	cbz	r2, 800c084 <__lshift+0xa4>
 800c080:	f108 0602 	add.w	r6, r8, #2
 800c084:	3e01      	subs	r6, #1
 800c086:	4638      	mov	r0, r7
 800c088:	612e      	str	r6, [r5, #16]
 800c08a:	4621      	mov	r1, r4
 800c08c:	f7ff fdd8 	bl	800bc40 <_Bfree>
 800c090:	4628      	mov	r0, r5
 800c092:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c096:	f842 0f04 	str.w	r0, [r2, #4]!
 800c09a:	3301      	adds	r3, #1
 800c09c:	e7c5      	b.n	800c02a <__lshift+0x4a>
 800c09e:	3904      	subs	r1, #4
 800c0a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0a4:	f841 2f04 	str.w	r2, [r1, #4]!
 800c0a8:	459c      	cmp	ip, r3
 800c0aa:	d8f9      	bhi.n	800c0a0 <__lshift+0xc0>
 800c0ac:	e7ea      	b.n	800c084 <__lshift+0xa4>
 800c0ae:	bf00      	nop
 800c0b0:	0800d50c 	.word	0x0800d50c
 800c0b4:	0800d52e 	.word	0x0800d52e

0800c0b8 <__mcmp>:
 800c0b8:	b530      	push	{r4, r5, lr}
 800c0ba:	6902      	ldr	r2, [r0, #16]
 800c0bc:	690c      	ldr	r4, [r1, #16]
 800c0be:	1b12      	subs	r2, r2, r4
 800c0c0:	d10e      	bne.n	800c0e0 <__mcmp+0x28>
 800c0c2:	f100 0314 	add.w	r3, r0, #20
 800c0c6:	3114      	adds	r1, #20
 800c0c8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c0cc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c0d0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c0d4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c0d8:	42a5      	cmp	r5, r4
 800c0da:	d003      	beq.n	800c0e4 <__mcmp+0x2c>
 800c0dc:	d305      	bcc.n	800c0ea <__mcmp+0x32>
 800c0de:	2201      	movs	r2, #1
 800c0e0:	4610      	mov	r0, r2
 800c0e2:	bd30      	pop	{r4, r5, pc}
 800c0e4:	4283      	cmp	r3, r0
 800c0e6:	d3f3      	bcc.n	800c0d0 <__mcmp+0x18>
 800c0e8:	e7fa      	b.n	800c0e0 <__mcmp+0x28>
 800c0ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c0ee:	e7f7      	b.n	800c0e0 <__mcmp+0x28>

0800c0f0 <__mdiff>:
 800c0f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0f4:	460c      	mov	r4, r1
 800c0f6:	4606      	mov	r6, r0
 800c0f8:	4611      	mov	r1, r2
 800c0fa:	4620      	mov	r0, r4
 800c0fc:	4690      	mov	r8, r2
 800c0fe:	f7ff ffdb 	bl	800c0b8 <__mcmp>
 800c102:	1e05      	subs	r5, r0, #0
 800c104:	d110      	bne.n	800c128 <__mdiff+0x38>
 800c106:	4629      	mov	r1, r5
 800c108:	4630      	mov	r0, r6
 800c10a:	f7ff fd59 	bl	800bbc0 <_Balloc>
 800c10e:	b930      	cbnz	r0, 800c11e <__mdiff+0x2e>
 800c110:	4b3a      	ldr	r3, [pc, #232]	; (800c1fc <__mdiff+0x10c>)
 800c112:	4602      	mov	r2, r0
 800c114:	f240 2137 	movw	r1, #567	; 0x237
 800c118:	4839      	ldr	r0, [pc, #228]	; (800c200 <__mdiff+0x110>)
 800c11a:	f000 fa7f 	bl	800c61c <__assert_func>
 800c11e:	2301      	movs	r3, #1
 800c120:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c124:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c128:	bfa4      	itt	ge
 800c12a:	4643      	movge	r3, r8
 800c12c:	46a0      	movge	r8, r4
 800c12e:	4630      	mov	r0, r6
 800c130:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c134:	bfa6      	itte	ge
 800c136:	461c      	movge	r4, r3
 800c138:	2500      	movge	r5, #0
 800c13a:	2501      	movlt	r5, #1
 800c13c:	f7ff fd40 	bl	800bbc0 <_Balloc>
 800c140:	b920      	cbnz	r0, 800c14c <__mdiff+0x5c>
 800c142:	4b2e      	ldr	r3, [pc, #184]	; (800c1fc <__mdiff+0x10c>)
 800c144:	4602      	mov	r2, r0
 800c146:	f240 2145 	movw	r1, #581	; 0x245
 800c14a:	e7e5      	b.n	800c118 <__mdiff+0x28>
 800c14c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c150:	6926      	ldr	r6, [r4, #16]
 800c152:	60c5      	str	r5, [r0, #12]
 800c154:	f104 0914 	add.w	r9, r4, #20
 800c158:	f108 0514 	add.w	r5, r8, #20
 800c15c:	f100 0e14 	add.w	lr, r0, #20
 800c160:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c164:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c168:	f108 0210 	add.w	r2, r8, #16
 800c16c:	46f2      	mov	sl, lr
 800c16e:	2100      	movs	r1, #0
 800c170:	f859 3b04 	ldr.w	r3, [r9], #4
 800c174:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c178:	fa11 f88b 	uxtah	r8, r1, fp
 800c17c:	b299      	uxth	r1, r3
 800c17e:	0c1b      	lsrs	r3, r3, #16
 800c180:	eba8 0801 	sub.w	r8, r8, r1
 800c184:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c188:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c18c:	fa1f f888 	uxth.w	r8, r8
 800c190:	1419      	asrs	r1, r3, #16
 800c192:	454e      	cmp	r6, r9
 800c194:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c198:	f84a 3b04 	str.w	r3, [sl], #4
 800c19c:	d8e8      	bhi.n	800c170 <__mdiff+0x80>
 800c19e:	1b33      	subs	r3, r6, r4
 800c1a0:	3b15      	subs	r3, #21
 800c1a2:	f023 0303 	bic.w	r3, r3, #3
 800c1a6:	3304      	adds	r3, #4
 800c1a8:	3415      	adds	r4, #21
 800c1aa:	42a6      	cmp	r6, r4
 800c1ac:	bf38      	it	cc
 800c1ae:	2304      	movcc	r3, #4
 800c1b0:	441d      	add	r5, r3
 800c1b2:	4473      	add	r3, lr
 800c1b4:	469e      	mov	lr, r3
 800c1b6:	462e      	mov	r6, r5
 800c1b8:	4566      	cmp	r6, ip
 800c1ba:	d30e      	bcc.n	800c1da <__mdiff+0xea>
 800c1bc:	f10c 0203 	add.w	r2, ip, #3
 800c1c0:	1b52      	subs	r2, r2, r5
 800c1c2:	f022 0203 	bic.w	r2, r2, #3
 800c1c6:	3d03      	subs	r5, #3
 800c1c8:	45ac      	cmp	ip, r5
 800c1ca:	bf38      	it	cc
 800c1cc:	2200      	movcc	r2, #0
 800c1ce:	4413      	add	r3, r2
 800c1d0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c1d4:	b17a      	cbz	r2, 800c1f6 <__mdiff+0x106>
 800c1d6:	6107      	str	r7, [r0, #16]
 800c1d8:	e7a4      	b.n	800c124 <__mdiff+0x34>
 800c1da:	f856 8b04 	ldr.w	r8, [r6], #4
 800c1de:	fa11 f288 	uxtah	r2, r1, r8
 800c1e2:	1414      	asrs	r4, r2, #16
 800c1e4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c1e8:	b292      	uxth	r2, r2
 800c1ea:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c1ee:	f84e 2b04 	str.w	r2, [lr], #4
 800c1f2:	1421      	asrs	r1, r4, #16
 800c1f4:	e7e0      	b.n	800c1b8 <__mdiff+0xc8>
 800c1f6:	3f01      	subs	r7, #1
 800c1f8:	e7ea      	b.n	800c1d0 <__mdiff+0xe0>
 800c1fa:	bf00      	nop
 800c1fc:	0800d50c 	.word	0x0800d50c
 800c200:	0800d52e 	.word	0x0800d52e

0800c204 <__d2b>:
 800c204:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c208:	460f      	mov	r7, r1
 800c20a:	2101      	movs	r1, #1
 800c20c:	ec59 8b10 	vmov	r8, r9, d0
 800c210:	4616      	mov	r6, r2
 800c212:	f7ff fcd5 	bl	800bbc0 <_Balloc>
 800c216:	4604      	mov	r4, r0
 800c218:	b930      	cbnz	r0, 800c228 <__d2b+0x24>
 800c21a:	4602      	mov	r2, r0
 800c21c:	4b24      	ldr	r3, [pc, #144]	; (800c2b0 <__d2b+0xac>)
 800c21e:	4825      	ldr	r0, [pc, #148]	; (800c2b4 <__d2b+0xb0>)
 800c220:	f240 310f 	movw	r1, #783	; 0x30f
 800c224:	f000 f9fa 	bl	800c61c <__assert_func>
 800c228:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c22c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c230:	bb2d      	cbnz	r5, 800c27e <__d2b+0x7a>
 800c232:	9301      	str	r3, [sp, #4]
 800c234:	f1b8 0300 	subs.w	r3, r8, #0
 800c238:	d026      	beq.n	800c288 <__d2b+0x84>
 800c23a:	4668      	mov	r0, sp
 800c23c:	9300      	str	r3, [sp, #0]
 800c23e:	f7ff fd87 	bl	800bd50 <__lo0bits>
 800c242:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c246:	b1e8      	cbz	r0, 800c284 <__d2b+0x80>
 800c248:	f1c0 0320 	rsb	r3, r0, #32
 800c24c:	fa02 f303 	lsl.w	r3, r2, r3
 800c250:	430b      	orrs	r3, r1
 800c252:	40c2      	lsrs	r2, r0
 800c254:	6163      	str	r3, [r4, #20]
 800c256:	9201      	str	r2, [sp, #4]
 800c258:	9b01      	ldr	r3, [sp, #4]
 800c25a:	61a3      	str	r3, [r4, #24]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	bf14      	ite	ne
 800c260:	2202      	movne	r2, #2
 800c262:	2201      	moveq	r2, #1
 800c264:	6122      	str	r2, [r4, #16]
 800c266:	b1bd      	cbz	r5, 800c298 <__d2b+0x94>
 800c268:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c26c:	4405      	add	r5, r0
 800c26e:	603d      	str	r5, [r7, #0]
 800c270:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c274:	6030      	str	r0, [r6, #0]
 800c276:	4620      	mov	r0, r4
 800c278:	b003      	add	sp, #12
 800c27a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c27e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c282:	e7d6      	b.n	800c232 <__d2b+0x2e>
 800c284:	6161      	str	r1, [r4, #20]
 800c286:	e7e7      	b.n	800c258 <__d2b+0x54>
 800c288:	a801      	add	r0, sp, #4
 800c28a:	f7ff fd61 	bl	800bd50 <__lo0bits>
 800c28e:	9b01      	ldr	r3, [sp, #4]
 800c290:	6163      	str	r3, [r4, #20]
 800c292:	3020      	adds	r0, #32
 800c294:	2201      	movs	r2, #1
 800c296:	e7e5      	b.n	800c264 <__d2b+0x60>
 800c298:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c29c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c2a0:	6038      	str	r0, [r7, #0]
 800c2a2:	6918      	ldr	r0, [r3, #16]
 800c2a4:	f7ff fd34 	bl	800bd10 <__hi0bits>
 800c2a8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c2ac:	e7e2      	b.n	800c274 <__d2b+0x70>
 800c2ae:	bf00      	nop
 800c2b0:	0800d50c 	.word	0x0800d50c
 800c2b4:	0800d52e 	.word	0x0800d52e

0800c2b8 <__sread>:
 800c2b8:	b510      	push	{r4, lr}
 800c2ba:	460c      	mov	r4, r1
 800c2bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2c0:	f000 f978 	bl	800c5b4 <_read_r>
 800c2c4:	2800      	cmp	r0, #0
 800c2c6:	bfab      	itete	ge
 800c2c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c2ca:	89a3      	ldrhlt	r3, [r4, #12]
 800c2cc:	181b      	addge	r3, r3, r0
 800c2ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c2d2:	bfac      	ite	ge
 800c2d4:	6563      	strge	r3, [r4, #84]	; 0x54
 800c2d6:	81a3      	strhlt	r3, [r4, #12]
 800c2d8:	bd10      	pop	{r4, pc}

0800c2da <__swrite>:
 800c2da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2de:	461f      	mov	r7, r3
 800c2e0:	898b      	ldrh	r3, [r1, #12]
 800c2e2:	05db      	lsls	r3, r3, #23
 800c2e4:	4605      	mov	r5, r0
 800c2e6:	460c      	mov	r4, r1
 800c2e8:	4616      	mov	r6, r2
 800c2ea:	d505      	bpl.n	800c2f8 <__swrite+0x1e>
 800c2ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2f0:	2302      	movs	r3, #2
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	f000 f94c 	bl	800c590 <_lseek_r>
 800c2f8:	89a3      	ldrh	r3, [r4, #12]
 800c2fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c2fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c302:	81a3      	strh	r3, [r4, #12]
 800c304:	4632      	mov	r2, r6
 800c306:	463b      	mov	r3, r7
 800c308:	4628      	mov	r0, r5
 800c30a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c30e:	f000 b973 	b.w	800c5f8 <_write_r>

0800c312 <__sseek>:
 800c312:	b510      	push	{r4, lr}
 800c314:	460c      	mov	r4, r1
 800c316:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c31a:	f000 f939 	bl	800c590 <_lseek_r>
 800c31e:	1c43      	adds	r3, r0, #1
 800c320:	89a3      	ldrh	r3, [r4, #12]
 800c322:	bf15      	itete	ne
 800c324:	6560      	strne	r0, [r4, #84]	; 0x54
 800c326:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c32a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c32e:	81a3      	strheq	r3, [r4, #12]
 800c330:	bf18      	it	ne
 800c332:	81a3      	strhne	r3, [r4, #12]
 800c334:	bd10      	pop	{r4, pc}

0800c336 <__sclose>:
 800c336:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c33a:	f000 b8f7 	b.w	800c52c <_close_r>

0800c33e <__swbuf_r>:
 800c33e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c340:	460e      	mov	r6, r1
 800c342:	4614      	mov	r4, r2
 800c344:	4605      	mov	r5, r0
 800c346:	b118      	cbz	r0, 800c350 <__swbuf_r+0x12>
 800c348:	6a03      	ldr	r3, [r0, #32]
 800c34a:	b90b      	cbnz	r3, 800c350 <__swbuf_r+0x12>
 800c34c:	f7fe f988 	bl	800a660 <__sinit>
 800c350:	69a3      	ldr	r3, [r4, #24]
 800c352:	60a3      	str	r3, [r4, #8]
 800c354:	89a3      	ldrh	r3, [r4, #12]
 800c356:	071a      	lsls	r2, r3, #28
 800c358:	d525      	bpl.n	800c3a6 <__swbuf_r+0x68>
 800c35a:	6923      	ldr	r3, [r4, #16]
 800c35c:	b31b      	cbz	r3, 800c3a6 <__swbuf_r+0x68>
 800c35e:	6823      	ldr	r3, [r4, #0]
 800c360:	6922      	ldr	r2, [r4, #16]
 800c362:	1a98      	subs	r0, r3, r2
 800c364:	6963      	ldr	r3, [r4, #20]
 800c366:	b2f6      	uxtb	r6, r6
 800c368:	4283      	cmp	r3, r0
 800c36a:	4637      	mov	r7, r6
 800c36c:	dc04      	bgt.n	800c378 <__swbuf_r+0x3a>
 800c36e:	4621      	mov	r1, r4
 800c370:	4628      	mov	r0, r5
 800c372:	f7ff fbf1 	bl	800bb58 <_fflush_r>
 800c376:	b9e0      	cbnz	r0, 800c3b2 <__swbuf_r+0x74>
 800c378:	68a3      	ldr	r3, [r4, #8]
 800c37a:	3b01      	subs	r3, #1
 800c37c:	60a3      	str	r3, [r4, #8]
 800c37e:	6823      	ldr	r3, [r4, #0]
 800c380:	1c5a      	adds	r2, r3, #1
 800c382:	6022      	str	r2, [r4, #0]
 800c384:	701e      	strb	r6, [r3, #0]
 800c386:	6962      	ldr	r2, [r4, #20]
 800c388:	1c43      	adds	r3, r0, #1
 800c38a:	429a      	cmp	r2, r3
 800c38c:	d004      	beq.n	800c398 <__swbuf_r+0x5a>
 800c38e:	89a3      	ldrh	r3, [r4, #12]
 800c390:	07db      	lsls	r3, r3, #31
 800c392:	d506      	bpl.n	800c3a2 <__swbuf_r+0x64>
 800c394:	2e0a      	cmp	r6, #10
 800c396:	d104      	bne.n	800c3a2 <__swbuf_r+0x64>
 800c398:	4621      	mov	r1, r4
 800c39a:	4628      	mov	r0, r5
 800c39c:	f7ff fbdc 	bl	800bb58 <_fflush_r>
 800c3a0:	b938      	cbnz	r0, 800c3b2 <__swbuf_r+0x74>
 800c3a2:	4638      	mov	r0, r7
 800c3a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c3a6:	4621      	mov	r1, r4
 800c3a8:	4628      	mov	r0, r5
 800c3aa:	f000 f805 	bl	800c3b8 <__swsetup_r>
 800c3ae:	2800      	cmp	r0, #0
 800c3b0:	d0d5      	beq.n	800c35e <__swbuf_r+0x20>
 800c3b2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c3b6:	e7f4      	b.n	800c3a2 <__swbuf_r+0x64>

0800c3b8 <__swsetup_r>:
 800c3b8:	b538      	push	{r3, r4, r5, lr}
 800c3ba:	4b2a      	ldr	r3, [pc, #168]	; (800c464 <__swsetup_r+0xac>)
 800c3bc:	4605      	mov	r5, r0
 800c3be:	6818      	ldr	r0, [r3, #0]
 800c3c0:	460c      	mov	r4, r1
 800c3c2:	b118      	cbz	r0, 800c3cc <__swsetup_r+0x14>
 800c3c4:	6a03      	ldr	r3, [r0, #32]
 800c3c6:	b90b      	cbnz	r3, 800c3cc <__swsetup_r+0x14>
 800c3c8:	f7fe f94a 	bl	800a660 <__sinit>
 800c3cc:	89a3      	ldrh	r3, [r4, #12]
 800c3ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c3d2:	0718      	lsls	r0, r3, #28
 800c3d4:	d422      	bmi.n	800c41c <__swsetup_r+0x64>
 800c3d6:	06d9      	lsls	r1, r3, #27
 800c3d8:	d407      	bmi.n	800c3ea <__swsetup_r+0x32>
 800c3da:	2309      	movs	r3, #9
 800c3dc:	602b      	str	r3, [r5, #0]
 800c3de:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c3e2:	81a3      	strh	r3, [r4, #12]
 800c3e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c3e8:	e034      	b.n	800c454 <__swsetup_r+0x9c>
 800c3ea:	0758      	lsls	r0, r3, #29
 800c3ec:	d512      	bpl.n	800c414 <__swsetup_r+0x5c>
 800c3ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c3f0:	b141      	cbz	r1, 800c404 <__swsetup_r+0x4c>
 800c3f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c3f6:	4299      	cmp	r1, r3
 800c3f8:	d002      	beq.n	800c400 <__swsetup_r+0x48>
 800c3fa:	4628      	mov	r0, r5
 800c3fc:	f7ff f8ee 	bl	800b5dc <_free_r>
 800c400:	2300      	movs	r3, #0
 800c402:	6363      	str	r3, [r4, #52]	; 0x34
 800c404:	89a3      	ldrh	r3, [r4, #12]
 800c406:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c40a:	81a3      	strh	r3, [r4, #12]
 800c40c:	2300      	movs	r3, #0
 800c40e:	6063      	str	r3, [r4, #4]
 800c410:	6923      	ldr	r3, [r4, #16]
 800c412:	6023      	str	r3, [r4, #0]
 800c414:	89a3      	ldrh	r3, [r4, #12]
 800c416:	f043 0308 	orr.w	r3, r3, #8
 800c41a:	81a3      	strh	r3, [r4, #12]
 800c41c:	6923      	ldr	r3, [r4, #16]
 800c41e:	b94b      	cbnz	r3, 800c434 <__swsetup_r+0x7c>
 800c420:	89a3      	ldrh	r3, [r4, #12]
 800c422:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c426:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c42a:	d003      	beq.n	800c434 <__swsetup_r+0x7c>
 800c42c:	4621      	mov	r1, r4
 800c42e:	4628      	mov	r0, r5
 800c430:	f000 f840 	bl	800c4b4 <__smakebuf_r>
 800c434:	89a0      	ldrh	r0, [r4, #12]
 800c436:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c43a:	f010 0301 	ands.w	r3, r0, #1
 800c43e:	d00a      	beq.n	800c456 <__swsetup_r+0x9e>
 800c440:	2300      	movs	r3, #0
 800c442:	60a3      	str	r3, [r4, #8]
 800c444:	6963      	ldr	r3, [r4, #20]
 800c446:	425b      	negs	r3, r3
 800c448:	61a3      	str	r3, [r4, #24]
 800c44a:	6923      	ldr	r3, [r4, #16]
 800c44c:	b943      	cbnz	r3, 800c460 <__swsetup_r+0xa8>
 800c44e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c452:	d1c4      	bne.n	800c3de <__swsetup_r+0x26>
 800c454:	bd38      	pop	{r3, r4, r5, pc}
 800c456:	0781      	lsls	r1, r0, #30
 800c458:	bf58      	it	pl
 800c45a:	6963      	ldrpl	r3, [r4, #20]
 800c45c:	60a3      	str	r3, [r4, #8]
 800c45e:	e7f4      	b.n	800c44a <__swsetup_r+0x92>
 800c460:	2000      	movs	r0, #0
 800c462:	e7f7      	b.n	800c454 <__swsetup_r+0x9c>
 800c464:	20000068 	.word	0x20000068

0800c468 <__swhatbuf_r>:
 800c468:	b570      	push	{r4, r5, r6, lr}
 800c46a:	460c      	mov	r4, r1
 800c46c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c470:	2900      	cmp	r1, #0
 800c472:	b096      	sub	sp, #88	; 0x58
 800c474:	4615      	mov	r5, r2
 800c476:	461e      	mov	r6, r3
 800c478:	da0d      	bge.n	800c496 <__swhatbuf_r+0x2e>
 800c47a:	89a3      	ldrh	r3, [r4, #12]
 800c47c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c480:	f04f 0100 	mov.w	r1, #0
 800c484:	bf0c      	ite	eq
 800c486:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c48a:	2340      	movne	r3, #64	; 0x40
 800c48c:	2000      	movs	r0, #0
 800c48e:	6031      	str	r1, [r6, #0]
 800c490:	602b      	str	r3, [r5, #0]
 800c492:	b016      	add	sp, #88	; 0x58
 800c494:	bd70      	pop	{r4, r5, r6, pc}
 800c496:	466a      	mov	r2, sp
 800c498:	f000 f858 	bl	800c54c <_fstat_r>
 800c49c:	2800      	cmp	r0, #0
 800c49e:	dbec      	blt.n	800c47a <__swhatbuf_r+0x12>
 800c4a0:	9901      	ldr	r1, [sp, #4]
 800c4a2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c4a6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c4aa:	4259      	negs	r1, r3
 800c4ac:	4159      	adcs	r1, r3
 800c4ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c4b2:	e7eb      	b.n	800c48c <__swhatbuf_r+0x24>

0800c4b4 <__smakebuf_r>:
 800c4b4:	898b      	ldrh	r3, [r1, #12]
 800c4b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c4b8:	079d      	lsls	r5, r3, #30
 800c4ba:	4606      	mov	r6, r0
 800c4bc:	460c      	mov	r4, r1
 800c4be:	d507      	bpl.n	800c4d0 <__smakebuf_r+0x1c>
 800c4c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c4c4:	6023      	str	r3, [r4, #0]
 800c4c6:	6123      	str	r3, [r4, #16]
 800c4c8:	2301      	movs	r3, #1
 800c4ca:	6163      	str	r3, [r4, #20]
 800c4cc:	b002      	add	sp, #8
 800c4ce:	bd70      	pop	{r4, r5, r6, pc}
 800c4d0:	ab01      	add	r3, sp, #4
 800c4d2:	466a      	mov	r2, sp
 800c4d4:	f7ff ffc8 	bl	800c468 <__swhatbuf_r>
 800c4d8:	9900      	ldr	r1, [sp, #0]
 800c4da:	4605      	mov	r5, r0
 800c4dc:	4630      	mov	r0, r6
 800c4de:	f7ff fa35 	bl	800b94c <_malloc_r>
 800c4e2:	b948      	cbnz	r0, 800c4f8 <__smakebuf_r+0x44>
 800c4e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4e8:	059a      	lsls	r2, r3, #22
 800c4ea:	d4ef      	bmi.n	800c4cc <__smakebuf_r+0x18>
 800c4ec:	f023 0303 	bic.w	r3, r3, #3
 800c4f0:	f043 0302 	orr.w	r3, r3, #2
 800c4f4:	81a3      	strh	r3, [r4, #12]
 800c4f6:	e7e3      	b.n	800c4c0 <__smakebuf_r+0xc>
 800c4f8:	89a3      	ldrh	r3, [r4, #12]
 800c4fa:	6020      	str	r0, [r4, #0]
 800c4fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c500:	81a3      	strh	r3, [r4, #12]
 800c502:	9b00      	ldr	r3, [sp, #0]
 800c504:	6163      	str	r3, [r4, #20]
 800c506:	9b01      	ldr	r3, [sp, #4]
 800c508:	6120      	str	r0, [r4, #16]
 800c50a:	b15b      	cbz	r3, 800c524 <__smakebuf_r+0x70>
 800c50c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c510:	4630      	mov	r0, r6
 800c512:	f000 f82d 	bl	800c570 <_isatty_r>
 800c516:	b128      	cbz	r0, 800c524 <__smakebuf_r+0x70>
 800c518:	89a3      	ldrh	r3, [r4, #12]
 800c51a:	f023 0303 	bic.w	r3, r3, #3
 800c51e:	f043 0301 	orr.w	r3, r3, #1
 800c522:	81a3      	strh	r3, [r4, #12]
 800c524:	89a3      	ldrh	r3, [r4, #12]
 800c526:	431d      	orrs	r5, r3
 800c528:	81a5      	strh	r5, [r4, #12]
 800c52a:	e7cf      	b.n	800c4cc <__smakebuf_r+0x18>

0800c52c <_close_r>:
 800c52c:	b538      	push	{r3, r4, r5, lr}
 800c52e:	4d06      	ldr	r5, [pc, #24]	; (800c548 <_close_r+0x1c>)
 800c530:	2300      	movs	r3, #0
 800c532:	4604      	mov	r4, r0
 800c534:	4608      	mov	r0, r1
 800c536:	602b      	str	r3, [r5, #0]
 800c538:	f7f5 ff05 	bl	8002346 <_close>
 800c53c:	1c43      	adds	r3, r0, #1
 800c53e:	d102      	bne.n	800c546 <_close_r+0x1a>
 800c540:	682b      	ldr	r3, [r5, #0]
 800c542:	b103      	cbz	r3, 800c546 <_close_r+0x1a>
 800c544:	6023      	str	r3, [r4, #0]
 800c546:	bd38      	pop	{r3, r4, r5, pc}
 800c548:	20002714 	.word	0x20002714

0800c54c <_fstat_r>:
 800c54c:	b538      	push	{r3, r4, r5, lr}
 800c54e:	4d07      	ldr	r5, [pc, #28]	; (800c56c <_fstat_r+0x20>)
 800c550:	2300      	movs	r3, #0
 800c552:	4604      	mov	r4, r0
 800c554:	4608      	mov	r0, r1
 800c556:	4611      	mov	r1, r2
 800c558:	602b      	str	r3, [r5, #0]
 800c55a:	f7f5 ff00 	bl	800235e <_fstat>
 800c55e:	1c43      	adds	r3, r0, #1
 800c560:	d102      	bne.n	800c568 <_fstat_r+0x1c>
 800c562:	682b      	ldr	r3, [r5, #0]
 800c564:	b103      	cbz	r3, 800c568 <_fstat_r+0x1c>
 800c566:	6023      	str	r3, [r4, #0]
 800c568:	bd38      	pop	{r3, r4, r5, pc}
 800c56a:	bf00      	nop
 800c56c:	20002714 	.word	0x20002714

0800c570 <_isatty_r>:
 800c570:	b538      	push	{r3, r4, r5, lr}
 800c572:	4d06      	ldr	r5, [pc, #24]	; (800c58c <_isatty_r+0x1c>)
 800c574:	2300      	movs	r3, #0
 800c576:	4604      	mov	r4, r0
 800c578:	4608      	mov	r0, r1
 800c57a:	602b      	str	r3, [r5, #0]
 800c57c:	f7f5 feff 	bl	800237e <_isatty>
 800c580:	1c43      	adds	r3, r0, #1
 800c582:	d102      	bne.n	800c58a <_isatty_r+0x1a>
 800c584:	682b      	ldr	r3, [r5, #0]
 800c586:	b103      	cbz	r3, 800c58a <_isatty_r+0x1a>
 800c588:	6023      	str	r3, [r4, #0]
 800c58a:	bd38      	pop	{r3, r4, r5, pc}
 800c58c:	20002714 	.word	0x20002714

0800c590 <_lseek_r>:
 800c590:	b538      	push	{r3, r4, r5, lr}
 800c592:	4d07      	ldr	r5, [pc, #28]	; (800c5b0 <_lseek_r+0x20>)
 800c594:	4604      	mov	r4, r0
 800c596:	4608      	mov	r0, r1
 800c598:	4611      	mov	r1, r2
 800c59a:	2200      	movs	r2, #0
 800c59c:	602a      	str	r2, [r5, #0]
 800c59e:	461a      	mov	r2, r3
 800c5a0:	f7f5 fef8 	bl	8002394 <_lseek>
 800c5a4:	1c43      	adds	r3, r0, #1
 800c5a6:	d102      	bne.n	800c5ae <_lseek_r+0x1e>
 800c5a8:	682b      	ldr	r3, [r5, #0]
 800c5aa:	b103      	cbz	r3, 800c5ae <_lseek_r+0x1e>
 800c5ac:	6023      	str	r3, [r4, #0]
 800c5ae:	bd38      	pop	{r3, r4, r5, pc}
 800c5b0:	20002714 	.word	0x20002714

0800c5b4 <_read_r>:
 800c5b4:	b538      	push	{r3, r4, r5, lr}
 800c5b6:	4d07      	ldr	r5, [pc, #28]	; (800c5d4 <_read_r+0x20>)
 800c5b8:	4604      	mov	r4, r0
 800c5ba:	4608      	mov	r0, r1
 800c5bc:	4611      	mov	r1, r2
 800c5be:	2200      	movs	r2, #0
 800c5c0:	602a      	str	r2, [r5, #0]
 800c5c2:	461a      	mov	r2, r3
 800c5c4:	f7f5 fe86 	bl	80022d4 <_read>
 800c5c8:	1c43      	adds	r3, r0, #1
 800c5ca:	d102      	bne.n	800c5d2 <_read_r+0x1e>
 800c5cc:	682b      	ldr	r3, [r5, #0]
 800c5ce:	b103      	cbz	r3, 800c5d2 <_read_r+0x1e>
 800c5d0:	6023      	str	r3, [r4, #0]
 800c5d2:	bd38      	pop	{r3, r4, r5, pc}
 800c5d4:	20002714 	.word	0x20002714

0800c5d8 <_sbrk_r>:
 800c5d8:	b538      	push	{r3, r4, r5, lr}
 800c5da:	4d06      	ldr	r5, [pc, #24]	; (800c5f4 <_sbrk_r+0x1c>)
 800c5dc:	2300      	movs	r3, #0
 800c5de:	4604      	mov	r4, r0
 800c5e0:	4608      	mov	r0, r1
 800c5e2:	602b      	str	r3, [r5, #0]
 800c5e4:	f7f5 fee4 	bl	80023b0 <_sbrk>
 800c5e8:	1c43      	adds	r3, r0, #1
 800c5ea:	d102      	bne.n	800c5f2 <_sbrk_r+0x1a>
 800c5ec:	682b      	ldr	r3, [r5, #0]
 800c5ee:	b103      	cbz	r3, 800c5f2 <_sbrk_r+0x1a>
 800c5f0:	6023      	str	r3, [r4, #0]
 800c5f2:	bd38      	pop	{r3, r4, r5, pc}
 800c5f4:	20002714 	.word	0x20002714

0800c5f8 <_write_r>:
 800c5f8:	b538      	push	{r3, r4, r5, lr}
 800c5fa:	4d07      	ldr	r5, [pc, #28]	; (800c618 <_write_r+0x20>)
 800c5fc:	4604      	mov	r4, r0
 800c5fe:	4608      	mov	r0, r1
 800c600:	4611      	mov	r1, r2
 800c602:	2200      	movs	r2, #0
 800c604:	602a      	str	r2, [r5, #0]
 800c606:	461a      	mov	r2, r3
 800c608:	f7f5 fe81 	bl	800230e <_write>
 800c60c:	1c43      	adds	r3, r0, #1
 800c60e:	d102      	bne.n	800c616 <_write_r+0x1e>
 800c610:	682b      	ldr	r3, [r5, #0]
 800c612:	b103      	cbz	r3, 800c616 <_write_r+0x1e>
 800c614:	6023      	str	r3, [r4, #0]
 800c616:	bd38      	pop	{r3, r4, r5, pc}
 800c618:	20002714 	.word	0x20002714

0800c61c <__assert_func>:
 800c61c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c61e:	4614      	mov	r4, r2
 800c620:	461a      	mov	r2, r3
 800c622:	4b09      	ldr	r3, [pc, #36]	; (800c648 <__assert_func+0x2c>)
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	4605      	mov	r5, r0
 800c628:	68d8      	ldr	r0, [r3, #12]
 800c62a:	b14c      	cbz	r4, 800c640 <__assert_func+0x24>
 800c62c:	4b07      	ldr	r3, [pc, #28]	; (800c64c <__assert_func+0x30>)
 800c62e:	9100      	str	r1, [sp, #0]
 800c630:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c634:	4906      	ldr	r1, [pc, #24]	; (800c650 <__assert_func+0x34>)
 800c636:	462b      	mov	r3, r5
 800c638:	f000 f836 	bl	800c6a8 <fiprintf>
 800c63c:	f000 f853 	bl	800c6e6 <abort>
 800c640:	4b04      	ldr	r3, [pc, #16]	; (800c654 <__assert_func+0x38>)
 800c642:	461c      	mov	r4, r3
 800c644:	e7f3      	b.n	800c62e <__assert_func+0x12>
 800c646:	bf00      	nop
 800c648:	20000068 	.word	0x20000068
 800c64c:	0800d78f 	.word	0x0800d78f
 800c650:	0800d79c 	.word	0x0800d79c
 800c654:	0800d7ca 	.word	0x0800d7ca

0800c658 <_calloc_r>:
 800c658:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c65a:	fba1 2402 	umull	r2, r4, r1, r2
 800c65e:	b94c      	cbnz	r4, 800c674 <_calloc_r+0x1c>
 800c660:	4611      	mov	r1, r2
 800c662:	9201      	str	r2, [sp, #4]
 800c664:	f7ff f972 	bl	800b94c <_malloc_r>
 800c668:	9a01      	ldr	r2, [sp, #4]
 800c66a:	4605      	mov	r5, r0
 800c66c:	b930      	cbnz	r0, 800c67c <_calloc_r+0x24>
 800c66e:	4628      	mov	r0, r5
 800c670:	b003      	add	sp, #12
 800c672:	bd30      	pop	{r4, r5, pc}
 800c674:	220c      	movs	r2, #12
 800c676:	6002      	str	r2, [r0, #0]
 800c678:	2500      	movs	r5, #0
 800c67a:	e7f8      	b.n	800c66e <_calloc_r+0x16>
 800c67c:	4621      	mov	r1, r4
 800c67e:	f7fe f893 	bl	800a7a8 <memset>
 800c682:	e7f4      	b.n	800c66e <_calloc_r+0x16>

0800c684 <__ascii_mbtowc>:
 800c684:	b082      	sub	sp, #8
 800c686:	b901      	cbnz	r1, 800c68a <__ascii_mbtowc+0x6>
 800c688:	a901      	add	r1, sp, #4
 800c68a:	b142      	cbz	r2, 800c69e <__ascii_mbtowc+0x1a>
 800c68c:	b14b      	cbz	r3, 800c6a2 <__ascii_mbtowc+0x1e>
 800c68e:	7813      	ldrb	r3, [r2, #0]
 800c690:	600b      	str	r3, [r1, #0]
 800c692:	7812      	ldrb	r2, [r2, #0]
 800c694:	1e10      	subs	r0, r2, #0
 800c696:	bf18      	it	ne
 800c698:	2001      	movne	r0, #1
 800c69a:	b002      	add	sp, #8
 800c69c:	4770      	bx	lr
 800c69e:	4610      	mov	r0, r2
 800c6a0:	e7fb      	b.n	800c69a <__ascii_mbtowc+0x16>
 800c6a2:	f06f 0001 	mvn.w	r0, #1
 800c6a6:	e7f8      	b.n	800c69a <__ascii_mbtowc+0x16>

0800c6a8 <fiprintf>:
 800c6a8:	b40e      	push	{r1, r2, r3}
 800c6aa:	b503      	push	{r0, r1, lr}
 800c6ac:	4601      	mov	r1, r0
 800c6ae:	ab03      	add	r3, sp, #12
 800c6b0:	4805      	ldr	r0, [pc, #20]	; (800c6c8 <fiprintf+0x20>)
 800c6b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c6b6:	6800      	ldr	r0, [r0, #0]
 800c6b8:	9301      	str	r3, [sp, #4]
 800c6ba:	f7ff f805 	bl	800b6c8 <_vfiprintf_r>
 800c6be:	b002      	add	sp, #8
 800c6c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c6c4:	b003      	add	sp, #12
 800c6c6:	4770      	bx	lr
 800c6c8:	20000068 	.word	0x20000068

0800c6cc <__ascii_wctomb>:
 800c6cc:	b149      	cbz	r1, 800c6e2 <__ascii_wctomb+0x16>
 800c6ce:	2aff      	cmp	r2, #255	; 0xff
 800c6d0:	bf85      	ittet	hi
 800c6d2:	238a      	movhi	r3, #138	; 0x8a
 800c6d4:	6003      	strhi	r3, [r0, #0]
 800c6d6:	700a      	strbls	r2, [r1, #0]
 800c6d8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800c6dc:	bf98      	it	ls
 800c6de:	2001      	movls	r0, #1
 800c6e0:	4770      	bx	lr
 800c6e2:	4608      	mov	r0, r1
 800c6e4:	4770      	bx	lr

0800c6e6 <abort>:
 800c6e6:	b508      	push	{r3, lr}
 800c6e8:	2006      	movs	r0, #6
 800c6ea:	f000 f82b 	bl	800c744 <raise>
 800c6ee:	2001      	movs	r0, #1
 800c6f0:	f7f5 fde6 	bl	80022c0 <_exit>

0800c6f4 <_raise_r>:
 800c6f4:	291f      	cmp	r1, #31
 800c6f6:	b538      	push	{r3, r4, r5, lr}
 800c6f8:	4604      	mov	r4, r0
 800c6fa:	460d      	mov	r5, r1
 800c6fc:	d904      	bls.n	800c708 <_raise_r+0x14>
 800c6fe:	2316      	movs	r3, #22
 800c700:	6003      	str	r3, [r0, #0]
 800c702:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c706:	bd38      	pop	{r3, r4, r5, pc}
 800c708:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c70a:	b112      	cbz	r2, 800c712 <_raise_r+0x1e>
 800c70c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c710:	b94b      	cbnz	r3, 800c726 <_raise_r+0x32>
 800c712:	4620      	mov	r0, r4
 800c714:	f000 f830 	bl	800c778 <_getpid_r>
 800c718:	462a      	mov	r2, r5
 800c71a:	4601      	mov	r1, r0
 800c71c:	4620      	mov	r0, r4
 800c71e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c722:	f000 b817 	b.w	800c754 <_kill_r>
 800c726:	2b01      	cmp	r3, #1
 800c728:	d00a      	beq.n	800c740 <_raise_r+0x4c>
 800c72a:	1c59      	adds	r1, r3, #1
 800c72c:	d103      	bne.n	800c736 <_raise_r+0x42>
 800c72e:	2316      	movs	r3, #22
 800c730:	6003      	str	r3, [r0, #0]
 800c732:	2001      	movs	r0, #1
 800c734:	e7e7      	b.n	800c706 <_raise_r+0x12>
 800c736:	2400      	movs	r4, #0
 800c738:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c73c:	4628      	mov	r0, r5
 800c73e:	4798      	blx	r3
 800c740:	2000      	movs	r0, #0
 800c742:	e7e0      	b.n	800c706 <_raise_r+0x12>

0800c744 <raise>:
 800c744:	4b02      	ldr	r3, [pc, #8]	; (800c750 <raise+0xc>)
 800c746:	4601      	mov	r1, r0
 800c748:	6818      	ldr	r0, [r3, #0]
 800c74a:	f7ff bfd3 	b.w	800c6f4 <_raise_r>
 800c74e:	bf00      	nop
 800c750:	20000068 	.word	0x20000068

0800c754 <_kill_r>:
 800c754:	b538      	push	{r3, r4, r5, lr}
 800c756:	4d07      	ldr	r5, [pc, #28]	; (800c774 <_kill_r+0x20>)
 800c758:	2300      	movs	r3, #0
 800c75a:	4604      	mov	r4, r0
 800c75c:	4608      	mov	r0, r1
 800c75e:	4611      	mov	r1, r2
 800c760:	602b      	str	r3, [r5, #0]
 800c762:	f7f5 fd9d 	bl	80022a0 <_kill>
 800c766:	1c43      	adds	r3, r0, #1
 800c768:	d102      	bne.n	800c770 <_kill_r+0x1c>
 800c76a:	682b      	ldr	r3, [r5, #0]
 800c76c:	b103      	cbz	r3, 800c770 <_kill_r+0x1c>
 800c76e:	6023      	str	r3, [r4, #0]
 800c770:	bd38      	pop	{r3, r4, r5, pc}
 800c772:	bf00      	nop
 800c774:	20002714 	.word	0x20002714

0800c778 <_getpid_r>:
 800c778:	f7f5 bd8a 	b.w	8002290 <_getpid>

0800c77c <atan2>:
 800c77c:	f000 b830 	b.w	800c7e0 <__ieee754_atan2>

0800c780 <fmod>:
 800c780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c782:	ed2d 8b02 	vpush	{d8}
 800c786:	ec57 6b10 	vmov	r6, r7, d0
 800c78a:	ec55 4b11 	vmov	r4, r5, d1
 800c78e:	f000 fb9f 	bl	800ced0 <__ieee754_fmod>
 800c792:	4622      	mov	r2, r4
 800c794:	462b      	mov	r3, r5
 800c796:	4630      	mov	r0, r6
 800c798:	4639      	mov	r1, r7
 800c79a:	eeb0 8a40 	vmov.f32	s16, s0
 800c79e:	eef0 8a60 	vmov.f32	s17, s1
 800c7a2:	f7f4 f9c3 	bl	8000b2c <__aeabi_dcmpun>
 800c7a6:	b990      	cbnz	r0, 800c7ce <fmod+0x4e>
 800c7a8:	2200      	movs	r2, #0
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	4620      	mov	r0, r4
 800c7ae:	4629      	mov	r1, r5
 800c7b0:	f7f4 f98a 	bl	8000ac8 <__aeabi_dcmpeq>
 800c7b4:	b158      	cbz	r0, 800c7ce <fmod+0x4e>
 800c7b6:	f7fe f859 	bl	800a86c <__errno>
 800c7ba:	2321      	movs	r3, #33	; 0x21
 800c7bc:	6003      	str	r3, [r0, #0]
 800c7be:	2200      	movs	r2, #0
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	4610      	mov	r0, r2
 800c7c4:	4619      	mov	r1, r3
 800c7c6:	f7f4 f841 	bl	800084c <__aeabi_ddiv>
 800c7ca:	ec41 0b18 	vmov	d8, r0, r1
 800c7ce:	eeb0 0a48 	vmov.f32	s0, s16
 800c7d2:	eef0 0a68 	vmov.f32	s1, s17
 800c7d6:	ecbd 8b02 	vpop	{d8}
 800c7da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c7dc:	0000      	movs	r0, r0
	...

0800c7e0 <__ieee754_atan2>:
 800c7e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c7e4:	ec57 6b11 	vmov	r6, r7, d1
 800c7e8:	4273      	negs	r3, r6
 800c7ea:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800c968 <__ieee754_atan2+0x188>
 800c7ee:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800c7f2:	4333      	orrs	r3, r6
 800c7f4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800c7f8:	4543      	cmp	r3, r8
 800c7fa:	ec51 0b10 	vmov	r0, r1, d0
 800c7fe:	ee11 5a10 	vmov	r5, s2
 800c802:	d80a      	bhi.n	800c81a <__ieee754_atan2+0x3a>
 800c804:	4244      	negs	r4, r0
 800c806:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c80a:	4304      	orrs	r4, r0
 800c80c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800c810:	4544      	cmp	r4, r8
 800c812:	ee10 9a10 	vmov	r9, s0
 800c816:	468e      	mov	lr, r1
 800c818:	d907      	bls.n	800c82a <__ieee754_atan2+0x4a>
 800c81a:	4632      	mov	r2, r6
 800c81c:	463b      	mov	r3, r7
 800c81e:	f7f3 fd35 	bl	800028c <__adddf3>
 800c822:	ec41 0b10 	vmov	d0, r0, r1
 800c826:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c82a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800c82e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c832:	4334      	orrs	r4, r6
 800c834:	d103      	bne.n	800c83e <__ieee754_atan2+0x5e>
 800c836:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c83a:	f000 b8c5 	b.w	800c9c8 <atan>
 800c83e:	17bc      	asrs	r4, r7, #30
 800c840:	f004 0402 	and.w	r4, r4, #2
 800c844:	ea53 0909 	orrs.w	r9, r3, r9
 800c848:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800c84c:	d107      	bne.n	800c85e <__ieee754_atan2+0x7e>
 800c84e:	2c02      	cmp	r4, #2
 800c850:	d05f      	beq.n	800c912 <__ieee754_atan2+0x132>
 800c852:	2c03      	cmp	r4, #3
 800c854:	d1e5      	bne.n	800c822 <__ieee754_atan2+0x42>
 800c856:	a140      	add	r1, pc, #256	; (adr r1, 800c958 <__ieee754_atan2+0x178>)
 800c858:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c85c:	e7e1      	b.n	800c822 <__ieee754_atan2+0x42>
 800c85e:	4315      	orrs	r5, r2
 800c860:	d106      	bne.n	800c870 <__ieee754_atan2+0x90>
 800c862:	f1be 0f00 	cmp.w	lr, #0
 800c866:	da5f      	bge.n	800c928 <__ieee754_atan2+0x148>
 800c868:	a13d      	add	r1, pc, #244	; (adr r1, 800c960 <__ieee754_atan2+0x180>)
 800c86a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c86e:	e7d8      	b.n	800c822 <__ieee754_atan2+0x42>
 800c870:	4542      	cmp	r2, r8
 800c872:	d10f      	bne.n	800c894 <__ieee754_atan2+0xb4>
 800c874:	4293      	cmp	r3, r2
 800c876:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800c87a:	d107      	bne.n	800c88c <__ieee754_atan2+0xac>
 800c87c:	2c02      	cmp	r4, #2
 800c87e:	d84c      	bhi.n	800c91a <__ieee754_atan2+0x13a>
 800c880:	4b33      	ldr	r3, [pc, #204]	; (800c950 <__ieee754_atan2+0x170>)
 800c882:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c886:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c88a:	e7ca      	b.n	800c822 <__ieee754_atan2+0x42>
 800c88c:	2c02      	cmp	r4, #2
 800c88e:	d848      	bhi.n	800c922 <__ieee754_atan2+0x142>
 800c890:	4b30      	ldr	r3, [pc, #192]	; (800c954 <__ieee754_atan2+0x174>)
 800c892:	e7f6      	b.n	800c882 <__ieee754_atan2+0xa2>
 800c894:	4543      	cmp	r3, r8
 800c896:	d0e4      	beq.n	800c862 <__ieee754_atan2+0x82>
 800c898:	1a9b      	subs	r3, r3, r2
 800c89a:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800c89e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c8a2:	da1e      	bge.n	800c8e2 <__ieee754_atan2+0x102>
 800c8a4:	2f00      	cmp	r7, #0
 800c8a6:	da01      	bge.n	800c8ac <__ieee754_atan2+0xcc>
 800c8a8:	323c      	adds	r2, #60	; 0x3c
 800c8aa:	db1e      	blt.n	800c8ea <__ieee754_atan2+0x10a>
 800c8ac:	4632      	mov	r2, r6
 800c8ae:	463b      	mov	r3, r7
 800c8b0:	f7f3 ffcc 	bl	800084c <__aeabi_ddiv>
 800c8b4:	ec41 0b10 	vmov	d0, r0, r1
 800c8b8:	f000 fa26 	bl	800cd08 <fabs>
 800c8bc:	f000 f884 	bl	800c9c8 <atan>
 800c8c0:	ec51 0b10 	vmov	r0, r1, d0
 800c8c4:	2c01      	cmp	r4, #1
 800c8c6:	d013      	beq.n	800c8f0 <__ieee754_atan2+0x110>
 800c8c8:	2c02      	cmp	r4, #2
 800c8ca:	d015      	beq.n	800c8f8 <__ieee754_atan2+0x118>
 800c8cc:	2c00      	cmp	r4, #0
 800c8ce:	d0a8      	beq.n	800c822 <__ieee754_atan2+0x42>
 800c8d0:	a317      	add	r3, pc, #92	; (adr r3, 800c930 <__ieee754_atan2+0x150>)
 800c8d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8d6:	f7f3 fcd7 	bl	8000288 <__aeabi_dsub>
 800c8da:	a317      	add	r3, pc, #92	; (adr r3, 800c938 <__ieee754_atan2+0x158>)
 800c8dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8e0:	e014      	b.n	800c90c <__ieee754_atan2+0x12c>
 800c8e2:	a117      	add	r1, pc, #92	; (adr r1, 800c940 <__ieee754_atan2+0x160>)
 800c8e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c8e8:	e7ec      	b.n	800c8c4 <__ieee754_atan2+0xe4>
 800c8ea:	2000      	movs	r0, #0
 800c8ec:	2100      	movs	r1, #0
 800c8ee:	e7e9      	b.n	800c8c4 <__ieee754_atan2+0xe4>
 800c8f0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c8f4:	4619      	mov	r1, r3
 800c8f6:	e794      	b.n	800c822 <__ieee754_atan2+0x42>
 800c8f8:	a30d      	add	r3, pc, #52	; (adr r3, 800c930 <__ieee754_atan2+0x150>)
 800c8fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8fe:	f7f3 fcc3 	bl	8000288 <__aeabi_dsub>
 800c902:	4602      	mov	r2, r0
 800c904:	460b      	mov	r3, r1
 800c906:	a10c      	add	r1, pc, #48	; (adr r1, 800c938 <__ieee754_atan2+0x158>)
 800c908:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c90c:	f7f3 fcbc 	bl	8000288 <__aeabi_dsub>
 800c910:	e787      	b.n	800c822 <__ieee754_atan2+0x42>
 800c912:	a109      	add	r1, pc, #36	; (adr r1, 800c938 <__ieee754_atan2+0x158>)
 800c914:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c918:	e783      	b.n	800c822 <__ieee754_atan2+0x42>
 800c91a:	a10b      	add	r1, pc, #44	; (adr r1, 800c948 <__ieee754_atan2+0x168>)
 800c91c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c920:	e77f      	b.n	800c822 <__ieee754_atan2+0x42>
 800c922:	2000      	movs	r0, #0
 800c924:	2100      	movs	r1, #0
 800c926:	e77c      	b.n	800c822 <__ieee754_atan2+0x42>
 800c928:	a105      	add	r1, pc, #20	; (adr r1, 800c940 <__ieee754_atan2+0x160>)
 800c92a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c92e:	e778      	b.n	800c822 <__ieee754_atan2+0x42>
 800c930:	33145c07 	.word	0x33145c07
 800c934:	3ca1a626 	.word	0x3ca1a626
 800c938:	54442d18 	.word	0x54442d18
 800c93c:	400921fb 	.word	0x400921fb
 800c940:	54442d18 	.word	0x54442d18
 800c944:	3ff921fb 	.word	0x3ff921fb
 800c948:	54442d18 	.word	0x54442d18
 800c94c:	3fe921fb 	.word	0x3fe921fb
 800c950:	0800d7d0 	.word	0x0800d7d0
 800c954:	0800d7e8 	.word	0x0800d7e8
 800c958:	54442d18 	.word	0x54442d18
 800c95c:	c00921fb 	.word	0xc00921fb
 800c960:	54442d18 	.word	0x54442d18
 800c964:	bff921fb 	.word	0xbff921fb
 800c968:	7ff00000 	.word	0x7ff00000

0800c96c <sqrt>:
 800c96c:	b538      	push	{r3, r4, r5, lr}
 800c96e:	ed2d 8b02 	vpush	{d8}
 800c972:	ec55 4b10 	vmov	r4, r5, d0
 800c976:	f000 f9d1 	bl	800cd1c <__ieee754_sqrt>
 800c97a:	4622      	mov	r2, r4
 800c97c:	462b      	mov	r3, r5
 800c97e:	4620      	mov	r0, r4
 800c980:	4629      	mov	r1, r5
 800c982:	eeb0 8a40 	vmov.f32	s16, s0
 800c986:	eef0 8a60 	vmov.f32	s17, s1
 800c98a:	f7f4 f8cf 	bl	8000b2c <__aeabi_dcmpun>
 800c98e:	b990      	cbnz	r0, 800c9b6 <sqrt+0x4a>
 800c990:	2200      	movs	r2, #0
 800c992:	2300      	movs	r3, #0
 800c994:	4620      	mov	r0, r4
 800c996:	4629      	mov	r1, r5
 800c998:	f7f4 f8a0 	bl	8000adc <__aeabi_dcmplt>
 800c99c:	b158      	cbz	r0, 800c9b6 <sqrt+0x4a>
 800c99e:	f7fd ff65 	bl	800a86c <__errno>
 800c9a2:	2321      	movs	r3, #33	; 0x21
 800c9a4:	6003      	str	r3, [r0, #0]
 800c9a6:	2200      	movs	r2, #0
 800c9a8:	2300      	movs	r3, #0
 800c9aa:	4610      	mov	r0, r2
 800c9ac:	4619      	mov	r1, r3
 800c9ae:	f7f3 ff4d 	bl	800084c <__aeabi_ddiv>
 800c9b2:	ec41 0b18 	vmov	d8, r0, r1
 800c9b6:	eeb0 0a48 	vmov.f32	s0, s16
 800c9ba:	eef0 0a68 	vmov.f32	s1, s17
 800c9be:	ecbd 8b02 	vpop	{d8}
 800c9c2:	bd38      	pop	{r3, r4, r5, pc}
 800c9c4:	0000      	movs	r0, r0
	...

0800c9c8 <atan>:
 800c9c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9cc:	ec55 4b10 	vmov	r4, r5, d0
 800c9d0:	4bc3      	ldr	r3, [pc, #780]	; (800cce0 <atan+0x318>)
 800c9d2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c9d6:	429e      	cmp	r6, r3
 800c9d8:	46ab      	mov	fp, r5
 800c9da:	dd18      	ble.n	800ca0e <atan+0x46>
 800c9dc:	4bc1      	ldr	r3, [pc, #772]	; (800cce4 <atan+0x31c>)
 800c9de:	429e      	cmp	r6, r3
 800c9e0:	dc01      	bgt.n	800c9e6 <atan+0x1e>
 800c9e2:	d109      	bne.n	800c9f8 <atan+0x30>
 800c9e4:	b144      	cbz	r4, 800c9f8 <atan+0x30>
 800c9e6:	4622      	mov	r2, r4
 800c9e8:	462b      	mov	r3, r5
 800c9ea:	4620      	mov	r0, r4
 800c9ec:	4629      	mov	r1, r5
 800c9ee:	f7f3 fc4d 	bl	800028c <__adddf3>
 800c9f2:	4604      	mov	r4, r0
 800c9f4:	460d      	mov	r5, r1
 800c9f6:	e006      	b.n	800ca06 <atan+0x3e>
 800c9f8:	f1bb 0f00 	cmp.w	fp, #0
 800c9fc:	f300 8131 	bgt.w	800cc62 <atan+0x29a>
 800ca00:	a59b      	add	r5, pc, #620	; (adr r5, 800cc70 <atan+0x2a8>)
 800ca02:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ca06:	ec45 4b10 	vmov	d0, r4, r5
 800ca0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca0e:	4bb6      	ldr	r3, [pc, #728]	; (800cce8 <atan+0x320>)
 800ca10:	429e      	cmp	r6, r3
 800ca12:	dc14      	bgt.n	800ca3e <atan+0x76>
 800ca14:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800ca18:	429e      	cmp	r6, r3
 800ca1a:	dc0d      	bgt.n	800ca38 <atan+0x70>
 800ca1c:	a396      	add	r3, pc, #600	; (adr r3, 800cc78 <atan+0x2b0>)
 800ca1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca22:	ee10 0a10 	vmov	r0, s0
 800ca26:	4629      	mov	r1, r5
 800ca28:	f7f3 fc30 	bl	800028c <__adddf3>
 800ca2c:	4baf      	ldr	r3, [pc, #700]	; (800ccec <atan+0x324>)
 800ca2e:	2200      	movs	r2, #0
 800ca30:	f7f4 f872 	bl	8000b18 <__aeabi_dcmpgt>
 800ca34:	2800      	cmp	r0, #0
 800ca36:	d1e6      	bne.n	800ca06 <atan+0x3e>
 800ca38:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800ca3c:	e02b      	b.n	800ca96 <atan+0xce>
 800ca3e:	f000 f963 	bl	800cd08 <fabs>
 800ca42:	4bab      	ldr	r3, [pc, #684]	; (800ccf0 <atan+0x328>)
 800ca44:	429e      	cmp	r6, r3
 800ca46:	ec55 4b10 	vmov	r4, r5, d0
 800ca4a:	f300 80bf 	bgt.w	800cbcc <atan+0x204>
 800ca4e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800ca52:	429e      	cmp	r6, r3
 800ca54:	f300 80a0 	bgt.w	800cb98 <atan+0x1d0>
 800ca58:	ee10 2a10 	vmov	r2, s0
 800ca5c:	ee10 0a10 	vmov	r0, s0
 800ca60:	462b      	mov	r3, r5
 800ca62:	4629      	mov	r1, r5
 800ca64:	f7f3 fc12 	bl	800028c <__adddf3>
 800ca68:	4ba0      	ldr	r3, [pc, #640]	; (800ccec <atan+0x324>)
 800ca6a:	2200      	movs	r2, #0
 800ca6c:	f7f3 fc0c 	bl	8000288 <__aeabi_dsub>
 800ca70:	2200      	movs	r2, #0
 800ca72:	4606      	mov	r6, r0
 800ca74:	460f      	mov	r7, r1
 800ca76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ca7a:	4620      	mov	r0, r4
 800ca7c:	4629      	mov	r1, r5
 800ca7e:	f7f3 fc05 	bl	800028c <__adddf3>
 800ca82:	4602      	mov	r2, r0
 800ca84:	460b      	mov	r3, r1
 800ca86:	4630      	mov	r0, r6
 800ca88:	4639      	mov	r1, r7
 800ca8a:	f7f3 fedf 	bl	800084c <__aeabi_ddiv>
 800ca8e:	f04f 0a00 	mov.w	sl, #0
 800ca92:	4604      	mov	r4, r0
 800ca94:	460d      	mov	r5, r1
 800ca96:	4622      	mov	r2, r4
 800ca98:	462b      	mov	r3, r5
 800ca9a:	4620      	mov	r0, r4
 800ca9c:	4629      	mov	r1, r5
 800ca9e:	f7f3 fdab 	bl	80005f8 <__aeabi_dmul>
 800caa2:	4602      	mov	r2, r0
 800caa4:	460b      	mov	r3, r1
 800caa6:	4680      	mov	r8, r0
 800caa8:	4689      	mov	r9, r1
 800caaa:	f7f3 fda5 	bl	80005f8 <__aeabi_dmul>
 800caae:	a374      	add	r3, pc, #464	; (adr r3, 800cc80 <atan+0x2b8>)
 800cab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cab4:	4606      	mov	r6, r0
 800cab6:	460f      	mov	r7, r1
 800cab8:	f7f3 fd9e 	bl	80005f8 <__aeabi_dmul>
 800cabc:	a372      	add	r3, pc, #456	; (adr r3, 800cc88 <atan+0x2c0>)
 800cabe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cac2:	f7f3 fbe3 	bl	800028c <__adddf3>
 800cac6:	4632      	mov	r2, r6
 800cac8:	463b      	mov	r3, r7
 800caca:	f7f3 fd95 	bl	80005f8 <__aeabi_dmul>
 800cace:	a370      	add	r3, pc, #448	; (adr r3, 800cc90 <atan+0x2c8>)
 800cad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cad4:	f7f3 fbda 	bl	800028c <__adddf3>
 800cad8:	4632      	mov	r2, r6
 800cada:	463b      	mov	r3, r7
 800cadc:	f7f3 fd8c 	bl	80005f8 <__aeabi_dmul>
 800cae0:	a36d      	add	r3, pc, #436	; (adr r3, 800cc98 <atan+0x2d0>)
 800cae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cae6:	f7f3 fbd1 	bl	800028c <__adddf3>
 800caea:	4632      	mov	r2, r6
 800caec:	463b      	mov	r3, r7
 800caee:	f7f3 fd83 	bl	80005f8 <__aeabi_dmul>
 800caf2:	a36b      	add	r3, pc, #428	; (adr r3, 800cca0 <atan+0x2d8>)
 800caf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caf8:	f7f3 fbc8 	bl	800028c <__adddf3>
 800cafc:	4632      	mov	r2, r6
 800cafe:	463b      	mov	r3, r7
 800cb00:	f7f3 fd7a 	bl	80005f8 <__aeabi_dmul>
 800cb04:	a368      	add	r3, pc, #416	; (adr r3, 800cca8 <atan+0x2e0>)
 800cb06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb0a:	f7f3 fbbf 	bl	800028c <__adddf3>
 800cb0e:	4642      	mov	r2, r8
 800cb10:	464b      	mov	r3, r9
 800cb12:	f7f3 fd71 	bl	80005f8 <__aeabi_dmul>
 800cb16:	a366      	add	r3, pc, #408	; (adr r3, 800ccb0 <atan+0x2e8>)
 800cb18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb1c:	4680      	mov	r8, r0
 800cb1e:	4689      	mov	r9, r1
 800cb20:	4630      	mov	r0, r6
 800cb22:	4639      	mov	r1, r7
 800cb24:	f7f3 fd68 	bl	80005f8 <__aeabi_dmul>
 800cb28:	a363      	add	r3, pc, #396	; (adr r3, 800ccb8 <atan+0x2f0>)
 800cb2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb2e:	f7f3 fbab 	bl	8000288 <__aeabi_dsub>
 800cb32:	4632      	mov	r2, r6
 800cb34:	463b      	mov	r3, r7
 800cb36:	f7f3 fd5f 	bl	80005f8 <__aeabi_dmul>
 800cb3a:	a361      	add	r3, pc, #388	; (adr r3, 800ccc0 <atan+0x2f8>)
 800cb3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb40:	f7f3 fba2 	bl	8000288 <__aeabi_dsub>
 800cb44:	4632      	mov	r2, r6
 800cb46:	463b      	mov	r3, r7
 800cb48:	f7f3 fd56 	bl	80005f8 <__aeabi_dmul>
 800cb4c:	a35e      	add	r3, pc, #376	; (adr r3, 800ccc8 <atan+0x300>)
 800cb4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb52:	f7f3 fb99 	bl	8000288 <__aeabi_dsub>
 800cb56:	4632      	mov	r2, r6
 800cb58:	463b      	mov	r3, r7
 800cb5a:	f7f3 fd4d 	bl	80005f8 <__aeabi_dmul>
 800cb5e:	a35c      	add	r3, pc, #368	; (adr r3, 800ccd0 <atan+0x308>)
 800cb60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb64:	f7f3 fb90 	bl	8000288 <__aeabi_dsub>
 800cb68:	4632      	mov	r2, r6
 800cb6a:	463b      	mov	r3, r7
 800cb6c:	f7f3 fd44 	bl	80005f8 <__aeabi_dmul>
 800cb70:	4602      	mov	r2, r0
 800cb72:	460b      	mov	r3, r1
 800cb74:	4640      	mov	r0, r8
 800cb76:	4649      	mov	r1, r9
 800cb78:	f7f3 fb88 	bl	800028c <__adddf3>
 800cb7c:	4622      	mov	r2, r4
 800cb7e:	462b      	mov	r3, r5
 800cb80:	f7f3 fd3a 	bl	80005f8 <__aeabi_dmul>
 800cb84:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800cb88:	4602      	mov	r2, r0
 800cb8a:	460b      	mov	r3, r1
 800cb8c:	d14b      	bne.n	800cc26 <atan+0x25e>
 800cb8e:	4620      	mov	r0, r4
 800cb90:	4629      	mov	r1, r5
 800cb92:	f7f3 fb79 	bl	8000288 <__aeabi_dsub>
 800cb96:	e72c      	b.n	800c9f2 <atan+0x2a>
 800cb98:	ee10 0a10 	vmov	r0, s0
 800cb9c:	4b53      	ldr	r3, [pc, #332]	; (800ccec <atan+0x324>)
 800cb9e:	2200      	movs	r2, #0
 800cba0:	4629      	mov	r1, r5
 800cba2:	f7f3 fb71 	bl	8000288 <__aeabi_dsub>
 800cba6:	4b51      	ldr	r3, [pc, #324]	; (800ccec <atan+0x324>)
 800cba8:	4606      	mov	r6, r0
 800cbaa:	460f      	mov	r7, r1
 800cbac:	2200      	movs	r2, #0
 800cbae:	4620      	mov	r0, r4
 800cbb0:	4629      	mov	r1, r5
 800cbb2:	f7f3 fb6b 	bl	800028c <__adddf3>
 800cbb6:	4602      	mov	r2, r0
 800cbb8:	460b      	mov	r3, r1
 800cbba:	4630      	mov	r0, r6
 800cbbc:	4639      	mov	r1, r7
 800cbbe:	f7f3 fe45 	bl	800084c <__aeabi_ddiv>
 800cbc2:	f04f 0a01 	mov.w	sl, #1
 800cbc6:	4604      	mov	r4, r0
 800cbc8:	460d      	mov	r5, r1
 800cbca:	e764      	b.n	800ca96 <atan+0xce>
 800cbcc:	4b49      	ldr	r3, [pc, #292]	; (800ccf4 <atan+0x32c>)
 800cbce:	429e      	cmp	r6, r3
 800cbd0:	da1d      	bge.n	800cc0e <atan+0x246>
 800cbd2:	ee10 0a10 	vmov	r0, s0
 800cbd6:	4b48      	ldr	r3, [pc, #288]	; (800ccf8 <atan+0x330>)
 800cbd8:	2200      	movs	r2, #0
 800cbda:	4629      	mov	r1, r5
 800cbdc:	f7f3 fb54 	bl	8000288 <__aeabi_dsub>
 800cbe0:	4b45      	ldr	r3, [pc, #276]	; (800ccf8 <atan+0x330>)
 800cbe2:	4606      	mov	r6, r0
 800cbe4:	460f      	mov	r7, r1
 800cbe6:	2200      	movs	r2, #0
 800cbe8:	4620      	mov	r0, r4
 800cbea:	4629      	mov	r1, r5
 800cbec:	f7f3 fd04 	bl	80005f8 <__aeabi_dmul>
 800cbf0:	4b3e      	ldr	r3, [pc, #248]	; (800ccec <atan+0x324>)
 800cbf2:	2200      	movs	r2, #0
 800cbf4:	f7f3 fb4a 	bl	800028c <__adddf3>
 800cbf8:	4602      	mov	r2, r0
 800cbfa:	460b      	mov	r3, r1
 800cbfc:	4630      	mov	r0, r6
 800cbfe:	4639      	mov	r1, r7
 800cc00:	f7f3 fe24 	bl	800084c <__aeabi_ddiv>
 800cc04:	f04f 0a02 	mov.w	sl, #2
 800cc08:	4604      	mov	r4, r0
 800cc0a:	460d      	mov	r5, r1
 800cc0c:	e743      	b.n	800ca96 <atan+0xce>
 800cc0e:	462b      	mov	r3, r5
 800cc10:	ee10 2a10 	vmov	r2, s0
 800cc14:	4939      	ldr	r1, [pc, #228]	; (800ccfc <atan+0x334>)
 800cc16:	2000      	movs	r0, #0
 800cc18:	f7f3 fe18 	bl	800084c <__aeabi_ddiv>
 800cc1c:	f04f 0a03 	mov.w	sl, #3
 800cc20:	4604      	mov	r4, r0
 800cc22:	460d      	mov	r5, r1
 800cc24:	e737      	b.n	800ca96 <atan+0xce>
 800cc26:	4b36      	ldr	r3, [pc, #216]	; (800cd00 <atan+0x338>)
 800cc28:	4e36      	ldr	r6, [pc, #216]	; (800cd04 <atan+0x33c>)
 800cc2a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800cc2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc32:	f7f3 fb29 	bl	8000288 <__aeabi_dsub>
 800cc36:	4622      	mov	r2, r4
 800cc38:	462b      	mov	r3, r5
 800cc3a:	f7f3 fb25 	bl	8000288 <__aeabi_dsub>
 800cc3e:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800cc42:	4602      	mov	r2, r0
 800cc44:	460b      	mov	r3, r1
 800cc46:	e9d6 0100 	ldrd	r0, r1, [r6]
 800cc4a:	f7f3 fb1d 	bl	8000288 <__aeabi_dsub>
 800cc4e:	f1bb 0f00 	cmp.w	fp, #0
 800cc52:	4604      	mov	r4, r0
 800cc54:	460d      	mov	r5, r1
 800cc56:	f6bf aed6 	bge.w	800ca06 <atan+0x3e>
 800cc5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cc5e:	461d      	mov	r5, r3
 800cc60:	e6d1      	b.n	800ca06 <atan+0x3e>
 800cc62:	a51d      	add	r5, pc, #116	; (adr r5, 800ccd8 <atan+0x310>)
 800cc64:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cc68:	e6cd      	b.n	800ca06 <atan+0x3e>
 800cc6a:	bf00      	nop
 800cc6c:	f3af 8000 	nop.w
 800cc70:	54442d18 	.word	0x54442d18
 800cc74:	bff921fb 	.word	0xbff921fb
 800cc78:	8800759c 	.word	0x8800759c
 800cc7c:	7e37e43c 	.word	0x7e37e43c
 800cc80:	e322da11 	.word	0xe322da11
 800cc84:	3f90ad3a 	.word	0x3f90ad3a
 800cc88:	24760deb 	.word	0x24760deb
 800cc8c:	3fa97b4b 	.word	0x3fa97b4b
 800cc90:	a0d03d51 	.word	0xa0d03d51
 800cc94:	3fb10d66 	.word	0x3fb10d66
 800cc98:	c54c206e 	.word	0xc54c206e
 800cc9c:	3fb745cd 	.word	0x3fb745cd
 800cca0:	920083ff 	.word	0x920083ff
 800cca4:	3fc24924 	.word	0x3fc24924
 800cca8:	5555550d 	.word	0x5555550d
 800ccac:	3fd55555 	.word	0x3fd55555
 800ccb0:	2c6a6c2f 	.word	0x2c6a6c2f
 800ccb4:	bfa2b444 	.word	0xbfa2b444
 800ccb8:	52defd9a 	.word	0x52defd9a
 800ccbc:	3fadde2d 	.word	0x3fadde2d
 800ccc0:	af749a6d 	.word	0xaf749a6d
 800ccc4:	3fb3b0f2 	.word	0x3fb3b0f2
 800ccc8:	fe231671 	.word	0xfe231671
 800cccc:	3fbc71c6 	.word	0x3fbc71c6
 800ccd0:	9998ebc4 	.word	0x9998ebc4
 800ccd4:	3fc99999 	.word	0x3fc99999
 800ccd8:	54442d18 	.word	0x54442d18
 800ccdc:	3ff921fb 	.word	0x3ff921fb
 800cce0:	440fffff 	.word	0x440fffff
 800cce4:	7ff00000 	.word	0x7ff00000
 800cce8:	3fdbffff 	.word	0x3fdbffff
 800ccec:	3ff00000 	.word	0x3ff00000
 800ccf0:	3ff2ffff 	.word	0x3ff2ffff
 800ccf4:	40038000 	.word	0x40038000
 800ccf8:	3ff80000 	.word	0x3ff80000
 800ccfc:	bff00000 	.word	0xbff00000
 800cd00:	0800d820 	.word	0x0800d820
 800cd04:	0800d800 	.word	0x0800d800

0800cd08 <fabs>:
 800cd08:	ec51 0b10 	vmov	r0, r1, d0
 800cd0c:	ee10 2a10 	vmov	r2, s0
 800cd10:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cd14:	ec43 2b10 	vmov	d0, r2, r3
 800cd18:	4770      	bx	lr
	...

0800cd1c <__ieee754_sqrt>:
 800cd1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd20:	ec55 4b10 	vmov	r4, r5, d0
 800cd24:	4e67      	ldr	r6, [pc, #412]	; (800cec4 <__ieee754_sqrt+0x1a8>)
 800cd26:	43ae      	bics	r6, r5
 800cd28:	ee10 0a10 	vmov	r0, s0
 800cd2c:	ee10 2a10 	vmov	r2, s0
 800cd30:	4629      	mov	r1, r5
 800cd32:	462b      	mov	r3, r5
 800cd34:	d10d      	bne.n	800cd52 <__ieee754_sqrt+0x36>
 800cd36:	f7f3 fc5f 	bl	80005f8 <__aeabi_dmul>
 800cd3a:	4602      	mov	r2, r0
 800cd3c:	460b      	mov	r3, r1
 800cd3e:	4620      	mov	r0, r4
 800cd40:	4629      	mov	r1, r5
 800cd42:	f7f3 faa3 	bl	800028c <__adddf3>
 800cd46:	4604      	mov	r4, r0
 800cd48:	460d      	mov	r5, r1
 800cd4a:	ec45 4b10 	vmov	d0, r4, r5
 800cd4e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd52:	2d00      	cmp	r5, #0
 800cd54:	dc0b      	bgt.n	800cd6e <__ieee754_sqrt+0x52>
 800cd56:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800cd5a:	4326      	orrs	r6, r4
 800cd5c:	d0f5      	beq.n	800cd4a <__ieee754_sqrt+0x2e>
 800cd5e:	b135      	cbz	r5, 800cd6e <__ieee754_sqrt+0x52>
 800cd60:	f7f3 fa92 	bl	8000288 <__aeabi_dsub>
 800cd64:	4602      	mov	r2, r0
 800cd66:	460b      	mov	r3, r1
 800cd68:	f7f3 fd70 	bl	800084c <__aeabi_ddiv>
 800cd6c:	e7eb      	b.n	800cd46 <__ieee754_sqrt+0x2a>
 800cd6e:	1509      	asrs	r1, r1, #20
 800cd70:	f000 808d 	beq.w	800ce8e <__ieee754_sqrt+0x172>
 800cd74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cd78:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800cd7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cd80:	07c9      	lsls	r1, r1, #31
 800cd82:	bf5c      	itt	pl
 800cd84:	005b      	lslpl	r3, r3, #1
 800cd86:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800cd8a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cd8e:	bf58      	it	pl
 800cd90:	0052      	lslpl	r2, r2, #1
 800cd92:	2500      	movs	r5, #0
 800cd94:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800cd98:	1076      	asrs	r6, r6, #1
 800cd9a:	0052      	lsls	r2, r2, #1
 800cd9c:	f04f 0e16 	mov.w	lr, #22
 800cda0:	46ac      	mov	ip, r5
 800cda2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cda6:	eb0c 0001 	add.w	r0, ip, r1
 800cdaa:	4298      	cmp	r0, r3
 800cdac:	bfde      	ittt	le
 800cdae:	1a1b      	suble	r3, r3, r0
 800cdb0:	eb00 0c01 	addle.w	ip, r0, r1
 800cdb4:	186d      	addle	r5, r5, r1
 800cdb6:	005b      	lsls	r3, r3, #1
 800cdb8:	f1be 0e01 	subs.w	lr, lr, #1
 800cdbc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800cdc0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800cdc4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800cdc8:	d1ed      	bne.n	800cda6 <__ieee754_sqrt+0x8a>
 800cdca:	4674      	mov	r4, lr
 800cdcc:	2720      	movs	r7, #32
 800cdce:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800cdd2:	4563      	cmp	r3, ip
 800cdd4:	eb01 000e 	add.w	r0, r1, lr
 800cdd8:	dc02      	bgt.n	800cde0 <__ieee754_sqrt+0xc4>
 800cdda:	d113      	bne.n	800ce04 <__ieee754_sqrt+0xe8>
 800cddc:	4290      	cmp	r0, r2
 800cdde:	d811      	bhi.n	800ce04 <__ieee754_sqrt+0xe8>
 800cde0:	2800      	cmp	r0, #0
 800cde2:	eb00 0e01 	add.w	lr, r0, r1
 800cde6:	da57      	bge.n	800ce98 <__ieee754_sqrt+0x17c>
 800cde8:	f1be 0f00 	cmp.w	lr, #0
 800cdec:	db54      	blt.n	800ce98 <__ieee754_sqrt+0x17c>
 800cdee:	f10c 0801 	add.w	r8, ip, #1
 800cdf2:	eba3 030c 	sub.w	r3, r3, ip
 800cdf6:	4290      	cmp	r0, r2
 800cdf8:	bf88      	it	hi
 800cdfa:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 800cdfe:	1a12      	subs	r2, r2, r0
 800ce00:	440c      	add	r4, r1
 800ce02:	46c4      	mov	ip, r8
 800ce04:	005b      	lsls	r3, r3, #1
 800ce06:	3f01      	subs	r7, #1
 800ce08:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800ce0c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800ce10:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800ce14:	d1dd      	bne.n	800cdd2 <__ieee754_sqrt+0xb6>
 800ce16:	4313      	orrs	r3, r2
 800ce18:	d01b      	beq.n	800ce52 <__ieee754_sqrt+0x136>
 800ce1a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800cec8 <__ieee754_sqrt+0x1ac>
 800ce1e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800cecc <__ieee754_sqrt+0x1b0>
 800ce22:	e9da 0100 	ldrd	r0, r1, [sl]
 800ce26:	e9db 2300 	ldrd	r2, r3, [fp]
 800ce2a:	f7f3 fa2d 	bl	8000288 <__aeabi_dsub>
 800ce2e:	e9da 8900 	ldrd	r8, r9, [sl]
 800ce32:	4602      	mov	r2, r0
 800ce34:	460b      	mov	r3, r1
 800ce36:	4640      	mov	r0, r8
 800ce38:	4649      	mov	r1, r9
 800ce3a:	f7f3 fe59 	bl	8000af0 <__aeabi_dcmple>
 800ce3e:	b140      	cbz	r0, 800ce52 <__ieee754_sqrt+0x136>
 800ce40:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800ce44:	e9da 0100 	ldrd	r0, r1, [sl]
 800ce48:	e9db 2300 	ldrd	r2, r3, [fp]
 800ce4c:	d126      	bne.n	800ce9c <__ieee754_sqrt+0x180>
 800ce4e:	3501      	adds	r5, #1
 800ce50:	463c      	mov	r4, r7
 800ce52:	106a      	asrs	r2, r5, #1
 800ce54:	0863      	lsrs	r3, r4, #1
 800ce56:	07e9      	lsls	r1, r5, #31
 800ce58:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800ce5c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800ce60:	bf48      	it	mi
 800ce62:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800ce66:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800ce6a:	461c      	mov	r4, r3
 800ce6c:	e76d      	b.n	800cd4a <__ieee754_sqrt+0x2e>
 800ce6e:	0ad3      	lsrs	r3, r2, #11
 800ce70:	3815      	subs	r0, #21
 800ce72:	0552      	lsls	r2, r2, #21
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d0fa      	beq.n	800ce6e <__ieee754_sqrt+0x152>
 800ce78:	02dc      	lsls	r4, r3, #11
 800ce7a:	d50a      	bpl.n	800ce92 <__ieee754_sqrt+0x176>
 800ce7c:	f1c1 0420 	rsb	r4, r1, #32
 800ce80:	fa22 f404 	lsr.w	r4, r2, r4
 800ce84:	1e4d      	subs	r5, r1, #1
 800ce86:	408a      	lsls	r2, r1
 800ce88:	4323      	orrs	r3, r4
 800ce8a:	1b41      	subs	r1, r0, r5
 800ce8c:	e772      	b.n	800cd74 <__ieee754_sqrt+0x58>
 800ce8e:	4608      	mov	r0, r1
 800ce90:	e7f0      	b.n	800ce74 <__ieee754_sqrt+0x158>
 800ce92:	005b      	lsls	r3, r3, #1
 800ce94:	3101      	adds	r1, #1
 800ce96:	e7ef      	b.n	800ce78 <__ieee754_sqrt+0x15c>
 800ce98:	46e0      	mov	r8, ip
 800ce9a:	e7aa      	b.n	800cdf2 <__ieee754_sqrt+0xd6>
 800ce9c:	f7f3 f9f6 	bl	800028c <__adddf3>
 800cea0:	e9da 8900 	ldrd	r8, r9, [sl]
 800cea4:	4602      	mov	r2, r0
 800cea6:	460b      	mov	r3, r1
 800cea8:	4640      	mov	r0, r8
 800ceaa:	4649      	mov	r1, r9
 800ceac:	f7f3 fe16 	bl	8000adc <__aeabi_dcmplt>
 800ceb0:	b120      	cbz	r0, 800cebc <__ieee754_sqrt+0x1a0>
 800ceb2:	1ca0      	adds	r0, r4, #2
 800ceb4:	bf08      	it	eq
 800ceb6:	3501      	addeq	r5, #1
 800ceb8:	3402      	adds	r4, #2
 800ceba:	e7ca      	b.n	800ce52 <__ieee754_sqrt+0x136>
 800cebc:	3401      	adds	r4, #1
 800cebe:	f024 0401 	bic.w	r4, r4, #1
 800cec2:	e7c6      	b.n	800ce52 <__ieee754_sqrt+0x136>
 800cec4:	7ff00000 	.word	0x7ff00000
 800cec8:	200001d8 	.word	0x200001d8
 800cecc:	200001e0 	.word	0x200001e0

0800ced0 <__ieee754_fmod>:
 800ced0:	ec53 2b11 	vmov	r2, r3, d1
 800ced4:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 800ced8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cedc:	ea5c 0402 	orrs.w	r4, ip, r2
 800cee0:	ec51 0b10 	vmov	r0, r1, d0
 800cee4:	ee11 7a10 	vmov	r7, s2
 800cee8:	ee11 ea10 	vmov	lr, s2
 800ceec:	461e      	mov	r6, r3
 800ceee:	d00c      	beq.n	800cf0a <__ieee754_fmod+0x3a>
 800cef0:	4c78      	ldr	r4, [pc, #480]	; (800d0d4 <__ieee754_fmod+0x204>)
 800cef2:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 800cef6:	45a0      	cmp	r8, r4
 800cef8:	4689      	mov	r9, r1
 800cefa:	dc06      	bgt.n	800cf0a <__ieee754_fmod+0x3a>
 800cefc:	4254      	negs	r4, r2
 800cefe:	4d76      	ldr	r5, [pc, #472]	; (800d0d8 <__ieee754_fmod+0x208>)
 800cf00:	4314      	orrs	r4, r2
 800cf02:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 800cf06:	42ac      	cmp	r4, r5
 800cf08:	d909      	bls.n	800cf1e <__ieee754_fmod+0x4e>
 800cf0a:	f7f3 fb75 	bl	80005f8 <__aeabi_dmul>
 800cf0e:	4602      	mov	r2, r0
 800cf10:	460b      	mov	r3, r1
 800cf12:	f7f3 fc9b 	bl	800084c <__aeabi_ddiv>
 800cf16:	ec41 0b10 	vmov	d0, r0, r1
 800cf1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf1e:	45e0      	cmp	r8, ip
 800cf20:	ee10 aa10 	vmov	sl, s0
 800cf24:	ee10 4a10 	vmov	r4, s0
 800cf28:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800cf2c:	dc09      	bgt.n	800cf42 <__ieee754_fmod+0x72>
 800cf2e:	dbf2      	blt.n	800cf16 <__ieee754_fmod+0x46>
 800cf30:	4290      	cmp	r0, r2
 800cf32:	d3f0      	bcc.n	800cf16 <__ieee754_fmod+0x46>
 800cf34:	d105      	bne.n	800cf42 <__ieee754_fmod+0x72>
 800cf36:	4b69      	ldr	r3, [pc, #420]	; (800d0dc <__ieee754_fmod+0x20c>)
 800cf38:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 800cf3c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cf40:	e7e9      	b.n	800cf16 <__ieee754_fmod+0x46>
 800cf42:	4a65      	ldr	r2, [pc, #404]	; (800d0d8 <__ieee754_fmod+0x208>)
 800cf44:	ea19 0f02 	tst.w	r9, r2
 800cf48:	d148      	bne.n	800cfdc <__ieee754_fmod+0x10c>
 800cf4a:	f1b8 0f00 	cmp.w	r8, #0
 800cf4e:	d13d      	bne.n	800cfcc <__ieee754_fmod+0xfc>
 800cf50:	4963      	ldr	r1, [pc, #396]	; (800d0e0 <__ieee754_fmod+0x210>)
 800cf52:	4653      	mov	r3, sl
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	dc36      	bgt.n	800cfc6 <__ieee754_fmod+0xf6>
 800cf58:	4216      	tst	r6, r2
 800cf5a:	d14f      	bne.n	800cffc <__ieee754_fmod+0x12c>
 800cf5c:	f1bc 0f00 	cmp.w	ip, #0
 800cf60:	d144      	bne.n	800cfec <__ieee754_fmod+0x11c>
 800cf62:	4a5f      	ldr	r2, [pc, #380]	; (800d0e0 <__ieee754_fmod+0x210>)
 800cf64:	463b      	mov	r3, r7
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	dc3d      	bgt.n	800cfe6 <__ieee754_fmod+0x116>
 800cf6a:	485e      	ldr	r0, [pc, #376]	; (800d0e4 <__ieee754_fmod+0x214>)
 800cf6c:	4281      	cmp	r1, r0
 800cf6e:	db4a      	blt.n	800d006 <__ieee754_fmod+0x136>
 800cf70:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cf74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cf78:	485a      	ldr	r0, [pc, #360]	; (800d0e4 <__ieee754_fmod+0x214>)
 800cf7a:	4282      	cmp	r2, r0
 800cf7c:	db57      	blt.n	800d02e <__ieee754_fmod+0x15e>
 800cf7e:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800cf82:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 800cf86:	1a89      	subs	r1, r1, r2
 800cf88:	1b98      	subs	r0, r3, r6
 800cf8a:	eba4 070e 	sub.w	r7, r4, lr
 800cf8e:	2900      	cmp	r1, #0
 800cf90:	d162      	bne.n	800d058 <__ieee754_fmod+0x188>
 800cf92:	4574      	cmp	r4, lr
 800cf94:	bf38      	it	cc
 800cf96:	f100 30ff 	addcc.w	r0, r0, #4294967295	; 0xffffffff
 800cf9a:	2800      	cmp	r0, #0
 800cf9c:	bfa4      	itt	ge
 800cf9e:	463c      	movge	r4, r7
 800cfa0:	4603      	movge	r3, r0
 800cfa2:	ea53 0104 	orrs.w	r1, r3, r4
 800cfa6:	d0c6      	beq.n	800cf36 <__ieee754_fmod+0x66>
 800cfa8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cfac:	db69      	blt.n	800d082 <__ieee754_fmod+0x1b2>
 800cfae:	494d      	ldr	r1, [pc, #308]	; (800d0e4 <__ieee754_fmod+0x214>)
 800cfb0:	428a      	cmp	r2, r1
 800cfb2:	db6c      	blt.n	800d08e <__ieee754_fmod+0x1be>
 800cfb4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800cfb8:	432b      	orrs	r3, r5
 800cfba:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 800cfbe:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800cfc2:	4620      	mov	r0, r4
 800cfc4:	e7a7      	b.n	800cf16 <__ieee754_fmod+0x46>
 800cfc6:	3901      	subs	r1, #1
 800cfc8:	005b      	lsls	r3, r3, #1
 800cfca:	e7c3      	b.n	800cf54 <__ieee754_fmod+0x84>
 800cfcc:	4945      	ldr	r1, [pc, #276]	; (800d0e4 <__ieee754_fmod+0x214>)
 800cfce:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	ddc0      	ble.n	800cf58 <__ieee754_fmod+0x88>
 800cfd6:	3901      	subs	r1, #1
 800cfd8:	005b      	lsls	r3, r3, #1
 800cfda:	e7fa      	b.n	800cfd2 <__ieee754_fmod+0x102>
 800cfdc:	ea4f 5128 	mov.w	r1, r8, asr #20
 800cfe0:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800cfe4:	e7b8      	b.n	800cf58 <__ieee754_fmod+0x88>
 800cfe6:	3a01      	subs	r2, #1
 800cfe8:	005b      	lsls	r3, r3, #1
 800cfea:	e7bc      	b.n	800cf66 <__ieee754_fmod+0x96>
 800cfec:	4a3d      	ldr	r2, [pc, #244]	; (800d0e4 <__ieee754_fmod+0x214>)
 800cfee:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	ddb9      	ble.n	800cf6a <__ieee754_fmod+0x9a>
 800cff6:	3a01      	subs	r2, #1
 800cff8:	005b      	lsls	r3, r3, #1
 800cffa:	e7fa      	b.n	800cff2 <__ieee754_fmod+0x122>
 800cffc:	ea4f 522c 	mov.w	r2, ip, asr #20
 800d000:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800d004:	e7b1      	b.n	800cf6a <__ieee754_fmod+0x9a>
 800d006:	1a40      	subs	r0, r0, r1
 800d008:	281f      	cmp	r0, #31
 800d00a:	dc0a      	bgt.n	800d022 <__ieee754_fmod+0x152>
 800d00c:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 800d010:	fa08 f800 	lsl.w	r8, r8, r0
 800d014:	fa2a f303 	lsr.w	r3, sl, r3
 800d018:	ea43 0308 	orr.w	r3, r3, r8
 800d01c:	fa0a f400 	lsl.w	r4, sl, r0
 800d020:	e7aa      	b.n	800cf78 <__ieee754_fmod+0xa8>
 800d022:	4b31      	ldr	r3, [pc, #196]	; (800d0e8 <__ieee754_fmod+0x218>)
 800d024:	1a5b      	subs	r3, r3, r1
 800d026:	fa0a f303 	lsl.w	r3, sl, r3
 800d02a:	2400      	movs	r4, #0
 800d02c:	e7a4      	b.n	800cf78 <__ieee754_fmod+0xa8>
 800d02e:	1a80      	subs	r0, r0, r2
 800d030:	281f      	cmp	r0, #31
 800d032:	dc0a      	bgt.n	800d04a <__ieee754_fmod+0x17a>
 800d034:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 800d038:	fa0c fc00 	lsl.w	ip, ip, r0
 800d03c:	fa27 f606 	lsr.w	r6, r7, r6
 800d040:	ea46 060c 	orr.w	r6, r6, ip
 800d044:	fa07 fe00 	lsl.w	lr, r7, r0
 800d048:	e79d      	b.n	800cf86 <__ieee754_fmod+0xb6>
 800d04a:	4e27      	ldr	r6, [pc, #156]	; (800d0e8 <__ieee754_fmod+0x218>)
 800d04c:	1ab6      	subs	r6, r6, r2
 800d04e:	fa07 f606 	lsl.w	r6, r7, r6
 800d052:	f04f 0e00 	mov.w	lr, #0
 800d056:	e796      	b.n	800cf86 <__ieee754_fmod+0xb6>
 800d058:	4574      	cmp	r4, lr
 800d05a:	bf38      	it	cc
 800d05c:	f100 30ff 	addcc.w	r0, r0, #4294967295	; 0xffffffff
 800d060:	2800      	cmp	r0, #0
 800d062:	da05      	bge.n	800d070 <__ieee754_fmod+0x1a0>
 800d064:	0fe0      	lsrs	r0, r4, #31
 800d066:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800d06a:	0064      	lsls	r4, r4, #1
 800d06c:	3901      	subs	r1, #1
 800d06e:	e78b      	b.n	800cf88 <__ieee754_fmod+0xb8>
 800d070:	ea50 0307 	orrs.w	r3, r0, r7
 800d074:	f43f af5f 	beq.w	800cf36 <__ieee754_fmod+0x66>
 800d078:	0ffb      	lsrs	r3, r7, #31
 800d07a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800d07e:	007c      	lsls	r4, r7, #1
 800d080:	e7f4      	b.n	800d06c <__ieee754_fmod+0x19c>
 800d082:	0fe1      	lsrs	r1, r4, #31
 800d084:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800d088:	0064      	lsls	r4, r4, #1
 800d08a:	3a01      	subs	r2, #1
 800d08c:	e78c      	b.n	800cfa8 <__ieee754_fmod+0xd8>
 800d08e:	1a89      	subs	r1, r1, r2
 800d090:	2914      	cmp	r1, #20
 800d092:	dc0a      	bgt.n	800d0aa <__ieee754_fmod+0x1da>
 800d094:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800d098:	fa03 f202 	lsl.w	r2, r3, r2
 800d09c:	40cc      	lsrs	r4, r1
 800d09e:	4322      	orrs	r2, r4
 800d0a0:	410b      	asrs	r3, r1
 800d0a2:	ea43 0105 	orr.w	r1, r3, r5
 800d0a6:	4610      	mov	r0, r2
 800d0a8:	e735      	b.n	800cf16 <__ieee754_fmod+0x46>
 800d0aa:	291f      	cmp	r1, #31
 800d0ac:	dc07      	bgt.n	800d0be <__ieee754_fmod+0x1ee>
 800d0ae:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800d0b2:	40cc      	lsrs	r4, r1
 800d0b4:	fa03 f202 	lsl.w	r2, r3, r2
 800d0b8:	4322      	orrs	r2, r4
 800d0ba:	462b      	mov	r3, r5
 800d0bc:	e7f1      	b.n	800d0a2 <__ieee754_fmod+0x1d2>
 800d0be:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 800d0c2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d0c6:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 800d0ca:	32e2      	adds	r2, #226	; 0xe2
 800d0cc:	fa43 f202 	asr.w	r2, r3, r2
 800d0d0:	e7f3      	b.n	800d0ba <__ieee754_fmod+0x1ea>
 800d0d2:	bf00      	nop
 800d0d4:	7fefffff 	.word	0x7fefffff
 800d0d8:	7ff00000 	.word	0x7ff00000
 800d0dc:	0800d840 	.word	0x0800d840
 800d0e0:	fffffbed 	.word	0xfffffbed
 800d0e4:	fffffc02 	.word	0xfffffc02
 800d0e8:	fffffbe2 	.word	0xfffffbe2

0800d0ec <_init>:
 800d0ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0ee:	bf00      	nop
 800d0f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0f2:	bc08      	pop	{r3}
 800d0f4:	469e      	mov	lr, r3
 800d0f6:	4770      	bx	lr

0800d0f8 <_fini>:
 800d0f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0fa:	bf00      	nop
 800d0fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0fe:	bc08      	pop	{r3}
 800d100:	469e      	mov	lr, r3
 800d102:	4770      	bx	lr
