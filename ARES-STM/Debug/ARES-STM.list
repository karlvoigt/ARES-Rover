
ARES-STM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c10  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e0  08008da0  08008da0  00018da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f80  08008f80  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08008f80  08008f80  00018f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f88  08008f88  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f88  08008f88  00018f88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008f8c  08008f8c  00018f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08008f90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000025b8  2000006c  08008ffc  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002624  08008ffc  00022624  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020976  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000044d6  00000000  00000000  00040a55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001bd8  00000000  00000000  00044f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000015a6  00000000  00000000  00046b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d787  00000000  00000000  000480ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000204c6  00000000  00000000  00065835  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b8d02  00000000  00000000  00085cfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007cfc  00000000  00000000  0013ea00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  001466fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008d88 	.word	0x08008d88

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08008d88 	.word	0x08008d88

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <LTR329_Init>:
#include "stm32l4xx_hal.h"
#include <stdint.h>

extern I2C_HandleTypeDef hi2c1;  // Assuming you are using hi2c1

void LTR329_Init() {
 800056c:	b580      	push	{r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af04      	add	r7, sp, #16
    uint8_t data;

    // Activate the sensor
    data = LTR329_ACTIVE_MODE;
 8000572:	2301      	movs	r3, #1
 8000574:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, LTR329_I2C_ADDRESS, LTR329_ALS_CONTR, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 8000576:	2364      	movs	r3, #100	; 0x64
 8000578:	9302      	str	r3, [sp, #8]
 800057a:	2301      	movs	r3, #1
 800057c:	9301      	str	r3, [sp, #4]
 800057e:	1dfb      	adds	r3, r7, #7
 8000580:	9300      	str	r3, [sp, #0]
 8000582:	2301      	movs	r3, #1
 8000584:	2280      	movs	r2, #128	; 0x80
 8000586:	2152      	movs	r1, #82	; 0x52
 8000588:	480a      	ldr	r0, [pc, #40]	; (80005b4 <LTR329_Init+0x48>)
 800058a:	f001 f991 	bl	80018b0 <HAL_I2C_Mem_Write>

    // Set measurement rate
    data = LTR329_MEAS_RATE;
 800058e:	2303      	movs	r3, #3
 8000590:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, LTR329_I2C_ADDRESS, LTR329_ALS_MEAS_RATE, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 8000592:	2364      	movs	r3, #100	; 0x64
 8000594:	9302      	str	r3, [sp, #8]
 8000596:	2301      	movs	r3, #1
 8000598:	9301      	str	r3, [sp, #4]
 800059a:	1dfb      	adds	r3, r7, #7
 800059c:	9300      	str	r3, [sp, #0]
 800059e:	2301      	movs	r3, #1
 80005a0:	2285      	movs	r2, #133	; 0x85
 80005a2:	2152      	movs	r1, #82	; 0x52
 80005a4:	4803      	ldr	r0, [pc, #12]	; (80005b4 <LTR329_Init+0x48>)
 80005a6:	f001 f983 	bl	80018b0 <HAL_I2C_Mem_Write>
}
 80005aa:	bf00      	nop
 80005ac:	3708      	adds	r7, #8
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	20000088 	.word	0x20000088

080005b8 <LTR329_Read_Light>:

void LTR329_Read_Light(uint16_t *ch0, uint16_t *ch1) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b088      	sub	sp, #32
 80005bc:	af04      	add	r7, sp, #16
 80005be:	6078      	str	r0, [r7, #4]
 80005c0:	6039      	str	r1, [r7, #0]
    uint8_t data[4];

    // Read 4 bytes of data starting from LTR329_ALS_DATA_CH1_0
    HAL_I2C_Mem_Read(&hi2c1, LTR329_I2C_ADDRESS, LTR329_ALS_DATA_CH1_0, I2C_MEMADD_SIZE_8BIT, data, 4, 100);
 80005c2:	2364      	movs	r3, #100	; 0x64
 80005c4:	9302      	str	r3, [sp, #8]
 80005c6:	2304      	movs	r3, #4
 80005c8:	9301      	str	r3, [sp, #4]
 80005ca:	f107 030c 	add.w	r3, r7, #12
 80005ce:	9300      	str	r3, [sp, #0]
 80005d0:	2301      	movs	r3, #1
 80005d2:	2288      	movs	r2, #136	; 0x88
 80005d4:	2152      	movs	r1, #82	; 0x52
 80005d6:	480d      	ldr	r0, [pc, #52]	; (800060c <LTR329_Read_Light+0x54>)
 80005d8:	f001 fa7e 	bl	8001ad8 <HAL_I2C_Mem_Read>

    // Combine bytes to get the light data for each channel
    *ch1 = (uint16_t)(data[1] << 8) | data[0];
 80005dc:	7b7b      	ldrb	r3, [r7, #13]
 80005de:	b29b      	uxth	r3, r3
 80005e0:	021b      	lsls	r3, r3, #8
 80005e2:	b29a      	uxth	r2, r3
 80005e4:	7b3b      	ldrb	r3, [r7, #12]
 80005e6:	b29b      	uxth	r3, r3
 80005e8:	4313      	orrs	r3, r2
 80005ea:	b29a      	uxth	r2, r3
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	801a      	strh	r2, [r3, #0]
    *ch0 = (uint16_t)(data[3] << 8) | data[2];
 80005f0:	7bfb      	ldrb	r3, [r7, #15]
 80005f2:	b29b      	uxth	r3, r3
 80005f4:	021b      	lsls	r3, r3, #8
 80005f6:	b29a      	uxth	r2, r3
 80005f8:	7bbb      	ldrb	r3, [r7, #14]
 80005fa:	b29b      	uxth	r3, r3
 80005fc:	4313      	orrs	r3, r2
 80005fe:	b29a      	uxth	r2, r3
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	801a      	strh	r2, [r3, #0]
}
 8000604:	bf00      	nop
 8000606:	3710      	adds	r7, #16
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	20000088 	.word	0x20000088

08000610 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE {
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 8000618:	1d39      	adds	r1, r7, #4
 800061a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800061e:	2201      	movs	r2, #1
 8000620:	4803      	ldr	r0, [pc, #12]	; (8000630 <__io_putchar+0x20>)
 8000622:	f003 fa35 	bl	8003a90 <HAL_UART_Transmit>
	return ch;
 8000626:	687b      	ldr	r3, [r7, #4]
}
 8000628:	4618      	mov	r0, r3
 800062a:	3708      	adds	r7, #8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	20000164 	.word	0x20000164

08000634 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000638:	f000 fd79 	bl	800112e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800063c:	f000 f874 	bl	8000728 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000640:	f000 f968 	bl	8000914 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000644:	f000 f936 	bl	80008b4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000648:	f000 f8c4 	bl	80007d4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800064c:	f000 f902 	bl	8000854 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, uart2_buffer, 1);
 8000650:	2201      	movs	r2, #1
 8000652:	4920      	ldr	r1, [pc, #128]	; (80006d4 <main+0xa0>)
 8000654:	4820      	ldr	r0, [pc, #128]	; (80006d8 <main+0xa4>)
 8000656:	f003 faa5 	bl	8003ba4 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart1, uart1_buffer, 1);
 800065a:	2201      	movs	r2, #1
 800065c:	491f      	ldr	r1, [pc, #124]	; (80006dc <main+0xa8>)
 800065e:	4820      	ldr	r0, [pc, #128]	; (80006e0 <main+0xac>)
 8000660:	f003 faa0 	bl	8003ba4 <HAL_UART_Receive_IT>
  printf("Setup complete\n");
 8000664:	481f      	ldr	r0, [pc, #124]	; (80006e4 <main+0xb0>)
 8000666:	f007 fcc1 	bl	8007fec <puts>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800066a:	f004 fd71 	bl	8005150 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of uart1Queue */
  uart1QueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &uart1Queue_attributes);
 800066e:	4a1e      	ldr	r2, [pc, #120]	; (80006e8 <main+0xb4>)
 8000670:	2102      	movs	r1, #2
 8000672:	2010      	movs	r0, #16
 8000674:	f004 fe63 	bl	800533e <osMessageQueueNew>
 8000678:	4603      	mov	r3, r0
 800067a:	4a1c      	ldr	r2, [pc, #112]	; (80006ec <main+0xb8>)
 800067c:	6013      	str	r3, [r2, #0]

  /* creation of uart2Queue */
  uart2QueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &uart2Queue_attributes);
 800067e:	4a1c      	ldr	r2, [pc, #112]	; (80006f0 <main+0xbc>)
 8000680:	2102      	movs	r1, #2
 8000682:	2010      	movs	r0, #16
 8000684:	f004 fe5b 	bl	800533e <osMessageQueueNew>
 8000688:	4603      	mov	r3, r0
 800068a:	4a1a      	ldr	r2, [pc, #104]	; (80006f4 <main+0xc0>)
 800068c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800068e:	4a1a      	ldr	r2, [pc, #104]	; (80006f8 <main+0xc4>)
 8000690:	2100      	movs	r1, #0
 8000692:	481a      	ldr	r0, [pc, #104]	; (80006fc <main+0xc8>)
 8000694:	f004 fda6 	bl	80051e4 <osThreadNew>
 8000698:	4603      	mov	r3, r0
 800069a:	4a19      	ldr	r2, [pc, #100]	; (8000700 <main+0xcc>)
 800069c:	6013      	str	r3, [r2, #0]

  /* creation of UART2Task */
  UART2TaskHandle = osThreadNew(UART2_Task, NULL, &UART2Task_attributes);
 800069e:	4a19      	ldr	r2, [pc, #100]	; (8000704 <main+0xd0>)
 80006a0:	2100      	movs	r1, #0
 80006a2:	4819      	ldr	r0, [pc, #100]	; (8000708 <main+0xd4>)
 80006a4:	f004 fd9e 	bl	80051e4 <osThreadNew>
 80006a8:	4603      	mov	r3, r0
 80006aa:	4a18      	ldr	r2, [pc, #96]	; (800070c <main+0xd8>)
 80006ac:	6013      	str	r3, [r2, #0]

  /* creation of UART1Task */
  UART1TaskHandle = osThreadNew(UART1_Task, NULL, &UART1Task_attributes);
 80006ae:	4a18      	ldr	r2, [pc, #96]	; (8000710 <main+0xdc>)
 80006b0:	2100      	movs	r1, #0
 80006b2:	4818      	ldr	r0, [pc, #96]	; (8000714 <main+0xe0>)
 80006b4:	f004 fd96 	bl	80051e4 <osThreadNew>
 80006b8:	4603      	mov	r3, r0
 80006ba:	4a17      	ldr	r2, [pc, #92]	; (8000718 <main+0xe4>)
 80006bc:	6013      	str	r3, [r2, #0]

  /* creation of LightSensor_Tas */
  LightSensor_TasHandle = osThreadNew(LightSensorTask, NULL, &LightSensor_Tas_attributes);
 80006be:	4a17      	ldr	r2, [pc, #92]	; (800071c <main+0xe8>)
 80006c0:	2100      	movs	r1, #0
 80006c2:	4817      	ldr	r0, [pc, #92]	; (8000720 <main+0xec>)
 80006c4:	f004 fd8e 	bl	80051e4 <osThreadNew>
 80006c8:	4603      	mov	r3, r0
 80006ca:	4a16      	ldr	r2, [pc, #88]	; (8000724 <main+0xf0>)
 80006cc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006ce:	f004 fd63 	bl	8005198 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006d2:	e7fe      	b.n	80006d2 <main+0x9e>
 80006d4:	20000208 	.word	0x20000208
 80006d8:	20000164 	.word	0x20000164
 80006dc:	20000204 	.word	0x20000204
 80006e0:	200000dc 	.word	0x200000dc
 80006e4:	08008dec 	.word	0x08008dec
 80006e8:	08008ed4 	.word	0x08008ed4
 80006ec:	200001fc 	.word	0x200001fc
 80006f0:	08008eec 	.word	0x08008eec
 80006f4:	20000200 	.word	0x20000200
 80006f8:	08008e44 	.word	0x08008e44
 80006fc:	08000a21 	.word	0x08000a21
 8000700:	200001ec 	.word	0x200001ec
 8000704:	08008e68 	.word	0x08008e68
 8000708:	08000a31 	.word	0x08000a31
 800070c:	200001f0 	.word	0x200001f0
 8000710:	08008e8c 	.word	0x08008e8c
 8000714:	08000ab5 	.word	0x08000ab5
 8000718:	200001f4 	.word	0x200001f4
 800071c:	08008eb0 	.word	0x08008eb0
 8000720:	08000b2d 	.word	0x08000b2d
 8000724:	200001f8 	.word	0x200001f8

08000728 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b096      	sub	sp, #88	; 0x58
 800072c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072e:	f107 0314 	add.w	r3, r7, #20
 8000732:	2244      	movs	r2, #68	; 0x44
 8000734:	2100      	movs	r1, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f007 fc60 	bl	8007ffc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800073c:	463b      	mov	r3, r7
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]
 8000744:	609a      	str	r2, [r3, #8]
 8000746:	60da      	str	r2, [r3, #12]
 8000748:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800074a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800074e:	f001 fe4b 	bl	80023e8 <HAL_PWREx_ControlVoltageScaling>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000758:	f000 fa1c 	bl	8000b94 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800075c:	f001 fe26 	bl	80023ac <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000760:	4b1b      	ldr	r3, [pc, #108]	; (80007d0 <SystemClock_Config+0xa8>)
 8000762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000766:	4a1a      	ldr	r2, [pc, #104]	; (80007d0 <SystemClock_Config+0xa8>)
 8000768:	f023 0318 	bic.w	r3, r3, #24
 800076c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000770:	2314      	movs	r3, #20
 8000772:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000774:	2301      	movs	r3, #1
 8000776:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000778:	2301      	movs	r3, #1
 800077a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800077c:	2300      	movs	r3, #0
 800077e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8000780:	23a0      	movs	r3, #160	; 0xa0
 8000782:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000784:	2300      	movs	r3, #0
 8000786:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000788:	f107 0314 	add.w	r3, r7, #20
 800078c:	4618      	mov	r0, r3
 800078e:	f001 fe81 	bl	8002494 <HAL_RCC_OscConfig>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000798:	f000 f9fc 	bl	8000b94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079c:	230f      	movs	r3, #15
 800079e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80007a0:	2300      	movs	r3, #0
 80007a2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a4:	2300      	movs	r3, #0
 80007a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007a8:	2300      	movs	r3, #0
 80007aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ac:	2300      	movs	r3, #0
 80007ae:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007b0:	463b      	mov	r3, r7
 80007b2:	2101      	movs	r1, #1
 80007b4:	4618      	mov	r0, r3
 80007b6:	f002 facf 	bl	8002d58 <HAL_RCC_ClockConfig>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80007c0:	f000 f9e8 	bl	8000b94 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80007c4:	f002 fea4 	bl	8003510 <HAL_RCCEx_EnableMSIPLLMode>
}
 80007c8:	bf00      	nop
 80007ca:	3758      	adds	r7, #88	; 0x58
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	40021000 	.word	0x40021000

080007d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007d8:	4b1b      	ldr	r3, [pc, #108]	; (8000848 <MX_I2C1_Init+0x74>)
 80007da:	4a1c      	ldr	r2, [pc, #112]	; (800084c <MX_I2C1_Init+0x78>)
 80007dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80007de:	4b1a      	ldr	r3, [pc, #104]	; (8000848 <MX_I2C1_Init+0x74>)
 80007e0:	4a1b      	ldr	r2, [pc, #108]	; (8000850 <MX_I2C1_Init+0x7c>)
 80007e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007e4:	4b18      	ldr	r3, [pc, #96]	; (8000848 <MX_I2C1_Init+0x74>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007ea:	4b17      	ldr	r3, [pc, #92]	; (8000848 <MX_I2C1_Init+0x74>)
 80007ec:	2201      	movs	r2, #1
 80007ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007f0:	4b15      	ldr	r3, [pc, #84]	; (8000848 <MX_I2C1_Init+0x74>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007f6:	4b14      	ldr	r3, [pc, #80]	; (8000848 <MX_I2C1_Init+0x74>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007fc:	4b12      	ldr	r3, [pc, #72]	; (8000848 <MX_I2C1_Init+0x74>)
 80007fe:	2200      	movs	r2, #0
 8000800:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000802:	4b11      	ldr	r3, [pc, #68]	; (8000848 <MX_I2C1_Init+0x74>)
 8000804:	2200      	movs	r2, #0
 8000806:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000808:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <MX_I2C1_Init+0x74>)
 800080a:	2200      	movs	r2, #0
 800080c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800080e:	480e      	ldr	r0, [pc, #56]	; (8000848 <MX_I2C1_Init+0x74>)
 8000810:	f000 ffb2 	bl	8001778 <HAL_I2C_Init>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800081a:	f000 f9bb 	bl	8000b94 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800081e:	2100      	movs	r1, #0
 8000820:	4809      	ldr	r0, [pc, #36]	; (8000848 <MX_I2C1_Init+0x74>)
 8000822:	f001 fd2b 	bl	800227c <HAL_I2CEx_ConfigAnalogFilter>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800082c:	f000 f9b2 	bl	8000b94 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000830:	2100      	movs	r1, #0
 8000832:	4805      	ldr	r0, [pc, #20]	; (8000848 <MX_I2C1_Init+0x74>)
 8000834:	f001 fd6d 	bl	8002312 <HAL_I2CEx_ConfigDigitalFilter>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800083e:	f000 f9a9 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20000088 	.word	0x20000088
 800084c:	40005400 	.word	0x40005400
 8000850:	00707cbb 	.word	0x00707cbb

08000854 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000858:	4b14      	ldr	r3, [pc, #80]	; (80008ac <MX_USART1_UART_Init+0x58>)
 800085a:	4a15      	ldr	r2, [pc, #84]	; (80008b0 <MX_USART1_UART_Init+0x5c>)
 800085c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 800085e:	4b13      	ldr	r3, [pc, #76]	; (80008ac <MX_USART1_UART_Init+0x58>)
 8000860:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8000864:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000866:	4b11      	ldr	r3, [pc, #68]	; (80008ac <MX_USART1_UART_Init+0x58>)
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800086c:	4b0f      	ldr	r3, [pc, #60]	; (80008ac <MX_USART1_UART_Init+0x58>)
 800086e:	2200      	movs	r2, #0
 8000870:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000872:	4b0e      	ldr	r3, [pc, #56]	; (80008ac <MX_USART1_UART_Init+0x58>)
 8000874:	2200      	movs	r2, #0
 8000876:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000878:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <MX_USART1_UART_Init+0x58>)
 800087a:	220c      	movs	r2, #12
 800087c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800087e:	4b0b      	ldr	r3, [pc, #44]	; (80008ac <MX_USART1_UART_Init+0x58>)
 8000880:	2200      	movs	r2, #0
 8000882:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000884:	4b09      	ldr	r3, [pc, #36]	; (80008ac <MX_USART1_UART_Init+0x58>)
 8000886:	2200      	movs	r2, #0
 8000888:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800088a:	4b08      	ldr	r3, [pc, #32]	; (80008ac <MX_USART1_UART_Init+0x58>)
 800088c:	2200      	movs	r2, #0
 800088e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000890:	4b06      	ldr	r3, [pc, #24]	; (80008ac <MX_USART1_UART_Init+0x58>)
 8000892:	2200      	movs	r2, #0
 8000894:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000896:	4805      	ldr	r0, [pc, #20]	; (80008ac <MX_USART1_UART_Init+0x58>)
 8000898:	f003 f8ac 	bl	80039f4 <HAL_UART_Init>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80008a2:	f000 f977 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	200000dc 	.word	0x200000dc
 80008b0:	40013800 	.word	0x40013800

080008b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008b8:	4b14      	ldr	r3, [pc, #80]	; (800090c <MX_USART2_UART_Init+0x58>)
 80008ba:	4a15      	ldr	r2, [pc, #84]	; (8000910 <MX_USART2_UART_Init+0x5c>)
 80008bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008be:	4b13      	ldr	r3, [pc, #76]	; (800090c <MX_USART2_UART_Init+0x58>)
 80008c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008c6:	4b11      	ldr	r3, [pc, #68]	; (800090c <MX_USART2_UART_Init+0x58>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008cc:	4b0f      	ldr	r3, [pc, #60]	; (800090c <MX_USART2_UART_Init+0x58>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008d2:	4b0e      	ldr	r3, [pc, #56]	; (800090c <MX_USART2_UART_Init+0x58>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008d8:	4b0c      	ldr	r3, [pc, #48]	; (800090c <MX_USART2_UART_Init+0x58>)
 80008da:	220c      	movs	r2, #12
 80008dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008de:	4b0b      	ldr	r3, [pc, #44]	; (800090c <MX_USART2_UART_Init+0x58>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e4:	4b09      	ldr	r3, [pc, #36]	; (800090c <MX_USART2_UART_Init+0x58>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ea:	4b08      	ldr	r3, [pc, #32]	; (800090c <MX_USART2_UART_Init+0x58>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008f0:	4b06      	ldr	r3, [pc, #24]	; (800090c <MX_USART2_UART_Init+0x58>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008f6:	4805      	ldr	r0, [pc, #20]	; (800090c <MX_USART2_UART_Init+0x58>)
 80008f8:	f003 f87c 	bl	80039f4 <HAL_UART_Init>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000902:	f000 f947 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	20000164 	.word	0x20000164
 8000910:	40004400 	.word	0x40004400

08000914 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b088      	sub	sp, #32
 8000918:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091a:	f107 030c 	add.w	r3, r7, #12
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]
 8000924:	609a      	str	r2, [r3, #8]
 8000926:	60da      	str	r2, [r3, #12]
 8000928:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800092a:	4b1d      	ldr	r3, [pc, #116]	; (80009a0 <MX_GPIO_Init+0x8c>)
 800092c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092e:	4a1c      	ldr	r2, [pc, #112]	; (80009a0 <MX_GPIO_Init+0x8c>)
 8000930:	f043 0304 	orr.w	r3, r3, #4
 8000934:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000936:	4b1a      	ldr	r3, [pc, #104]	; (80009a0 <MX_GPIO_Init+0x8c>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093a:	f003 0304 	and.w	r3, r3, #4
 800093e:	60bb      	str	r3, [r7, #8]
 8000940:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000942:	4b17      	ldr	r3, [pc, #92]	; (80009a0 <MX_GPIO_Init+0x8c>)
 8000944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000946:	4a16      	ldr	r2, [pc, #88]	; (80009a0 <MX_GPIO_Init+0x8c>)
 8000948:	f043 0301 	orr.w	r3, r3, #1
 800094c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800094e:	4b14      	ldr	r3, [pc, #80]	; (80009a0 <MX_GPIO_Init+0x8c>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000952:	f003 0301 	and.w	r3, r3, #1
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800095a:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <MX_GPIO_Init+0x8c>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095e:	4a10      	ldr	r2, [pc, #64]	; (80009a0 <MX_GPIO_Init+0x8c>)
 8000960:	f043 0302 	orr.w	r3, r3, #2
 8000964:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000966:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <MX_GPIO_Init+0x8c>)
 8000968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096a:	f003 0302 	and.w	r3, r3, #2
 800096e:	603b      	str	r3, [r7, #0]
 8000970:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000972:	2200      	movs	r2, #0
 8000974:	2108      	movs	r1, #8
 8000976:	480b      	ldr	r0, [pc, #44]	; (80009a4 <MX_GPIO_Init+0x90>)
 8000978:	f000 fee6 	bl	8001748 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800097c:	2308      	movs	r3, #8
 800097e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000980:	2301      	movs	r3, #1
 8000982:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000988:	2300      	movs	r3, #0
 800098a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800098c:	f107 030c 	add.w	r3, r7, #12
 8000990:	4619      	mov	r1, r3
 8000992:	4804      	ldr	r0, [pc, #16]	; (80009a4 <MX_GPIO_Init+0x90>)
 8000994:	f000 fd66 	bl	8001464 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000998:	bf00      	nop
 800099a:	3720      	adds	r7, #32
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	40021000 	.word	0x40021000
 80009a4:	48000400 	.word	0x48000400

080009a8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]

	if (huart->Instance == USART1)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a12      	ldr	r2, [pc, #72]	; (8000a00 <HAL_UART_RxCpltCallback+0x58>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d10c      	bne.n	80009d4 <HAL_UART_RxCpltCallback+0x2c>
	{
		xQueueSendFromISR(uart1QueueHandle, uart1_buffer, NULL);
 80009ba:	4b12      	ldr	r3, [pc, #72]	; (8000a04 <HAL_UART_RxCpltCallback+0x5c>)
 80009bc:	6818      	ldr	r0, [r3, #0]
 80009be:	2300      	movs	r3, #0
 80009c0:	2200      	movs	r2, #0
 80009c2:	4911      	ldr	r1, [pc, #68]	; (8000a08 <HAL_UART_RxCpltCallback+0x60>)
 80009c4:	f005 f852 	bl	8005a6c <xQueueGenericSendFromISR>
		HAL_UART_Receive_IT(&huart1, uart1_buffer, 1);
 80009c8:	2201      	movs	r2, #1
 80009ca:	490f      	ldr	r1, [pc, #60]	; (8000a08 <HAL_UART_RxCpltCallback+0x60>)
 80009cc:	480f      	ldr	r0, [pc, #60]	; (8000a0c <HAL_UART_RxCpltCallback+0x64>)
 80009ce:	f003 f8e9 	bl	8003ba4 <HAL_UART_Receive_IT>

		// Prepare to receive the next character
		HAL_UART_Receive_IT(&huart2, uart2_buffer, 1);

	}
}
 80009d2:	e010      	b.n	80009f6 <HAL_UART_RxCpltCallback+0x4e>
	else if (huart->Instance == USART2)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a0d      	ldr	r2, [pc, #52]	; (8000a10 <HAL_UART_RxCpltCallback+0x68>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d10b      	bne.n	80009f6 <HAL_UART_RxCpltCallback+0x4e>
		xQueueSendFromISR(uart2QueueHandle, uart2_buffer, NULL);
 80009de:	4b0d      	ldr	r3, [pc, #52]	; (8000a14 <HAL_UART_RxCpltCallback+0x6c>)
 80009e0:	6818      	ldr	r0, [r3, #0]
 80009e2:	2300      	movs	r3, #0
 80009e4:	2200      	movs	r2, #0
 80009e6:	490c      	ldr	r1, [pc, #48]	; (8000a18 <HAL_UART_RxCpltCallback+0x70>)
 80009e8:	f005 f840 	bl	8005a6c <xQueueGenericSendFromISR>
		HAL_UART_Receive_IT(&huart2, uart2_buffer, 1);
 80009ec:	2201      	movs	r2, #1
 80009ee:	490a      	ldr	r1, [pc, #40]	; (8000a18 <HAL_UART_RxCpltCallback+0x70>)
 80009f0:	480a      	ldr	r0, [pc, #40]	; (8000a1c <HAL_UART_RxCpltCallback+0x74>)
 80009f2:	f003 f8d7 	bl	8003ba4 <HAL_UART_Receive_IT>
}
 80009f6:	bf00      	nop
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40013800 	.word	0x40013800
 8000a04:	200001fc 	.word	0x200001fc
 8000a08:	20000204 	.word	0x20000204
 8000a0c:	200000dc 	.word	0x200000dc
 8000a10:	40004400 	.word	0x40004400
 8000a14:	20000200 	.word	0x20000200
 8000a18:	20000208 	.word	0x20000208
 8000a1c:	20000164 	.word	0x20000164

08000a20 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a28:	2001      	movs	r0, #1
 8000a2a:	f004 fc6d 	bl	8005308 <osDelay>
 8000a2e:	e7fb      	b.n	8000a28 <StartDefaultTask+0x8>

08000a30 <UART2_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UART2_Task */
void UART2_Task(void *argument)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART2_Task */
	char receivedChar;
	  /* Infinite loop */
	  for(;;)
	  {
	    if (xQueueReceive(uart2QueueHandle, &receivedChar, portMAX_DELAY) == pdPASS)
 8000a38:	4b1a      	ldr	r3, [pc, #104]	; (8000aa4 <UART2_Task+0x74>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f107 010f 	add.w	r1, r7, #15
 8000a40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a44:	4618      	mov	r0, r3
 8000a46:	f005 f8ad 	bl	8005ba4 <xQueueReceive>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b01      	cmp	r3, #1
 8000a4e:	d1f3      	bne.n	8000a38 <UART2_Task+0x8>
	    {

	      // Check if the end of transmission is reached
	      if (receivedChar == '\n' || receivedChar == '\r')
 8000a50:	7bfb      	ldrb	r3, [r7, #15]
 8000a52:	2b0a      	cmp	r3, #10
 8000a54:	d002      	beq.n	8000a5c <UART2_Task+0x2c>
 8000a56:	7bfb      	ldrb	r3, [r7, #15]
 8000a58:	2b0d      	cmp	r3, #13
 8000a5a:	d110      	bne.n	8000a7e <UART2_Task+0x4e>
	      {
	        // Null-terminate the string
	        uart2_accumulate_buffer[uart2_accumulate_pos] = '\0';
 8000a5c:	4b12      	ldr	r3, [pc, #72]	; (8000aa8 <UART2_Task+0x78>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	461a      	mov	r2, r3
 8000a62:	4b12      	ldr	r3, [pc, #72]	; (8000aac <UART2_Task+0x7c>)
 8000a64:	2100      	movs	r1, #0
 8000a66:	5499      	strb	r1, [r3, r2]

	        // Process the complete message here
//	        printf("%s\n", uart2_accumulate_buffer);
	        HAL_UART_Transmit(&huart1, uart2_accumulate_buffer,UART_BUFFER_SIZE , HAL_MAX_DELAY);
 8000a68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a6c:	2280      	movs	r2, #128	; 0x80
 8000a6e:	490f      	ldr	r1, [pc, #60]	; (8000aac <UART2_Task+0x7c>)
 8000a70:	480f      	ldr	r0, [pc, #60]	; (8000ab0 <UART2_Task+0x80>)
 8000a72:	f003 f80d 	bl	8003a90 <HAL_UART_Transmit>

	        // Reset the accumulate buffer position
	        uart2_accumulate_pos = 0;
 8000a76:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <UART2_Task+0x78>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	701a      	strb	r2, [r3, #0]
 8000a7c:	e009      	b.n	8000a92 <UART2_Task+0x62>
	      } else {
		      // Accumulate the received characters
		      uart2_accumulate_buffer[uart2_accumulate_pos++] = receivedChar;
 8000a7e:	4b0a      	ldr	r3, [pc, #40]	; (8000aa8 <UART2_Task+0x78>)
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	1c5a      	adds	r2, r3, #1
 8000a84:	b2d1      	uxtb	r1, r2
 8000a86:	4a08      	ldr	r2, [pc, #32]	; (8000aa8 <UART2_Task+0x78>)
 8000a88:	7011      	strb	r1, [r2, #0]
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	7bf9      	ldrb	r1, [r7, #15]
 8000a8e:	4b07      	ldr	r3, [pc, #28]	; (8000aac <UART2_Task+0x7c>)
 8000a90:	5499      	strb	r1, [r3, r2]
	      }

	      // Make sure we don't overflow the buffer
	      if (uart2_accumulate_pos >= UART_BUFFER_SIZE)
 8000a92:	4b05      	ldr	r3, [pc, #20]	; (8000aa8 <UART2_Task+0x78>)
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	b25b      	sxtb	r3, r3
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	dacd      	bge.n	8000a38 <UART2_Task+0x8>
	      {
	        uart2_accumulate_pos = 0;
 8000a9c:	4b02      	ldr	r3, [pc, #8]	; (8000aa8 <UART2_Task+0x78>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	701a      	strb	r2, [r3, #0]
	    if (xQueueReceive(uart2QueueHandle, &receivedChar, portMAX_DELAY) == pdPASS)
 8000aa2:	e7c9      	b.n	8000a38 <UART2_Task+0x8>
 8000aa4:	20000200 	.word	0x20000200
 8000aa8:	2000030d 	.word	0x2000030d
 8000aac:	2000028c 	.word	0x2000028c
 8000ab0:	200000dc 	.word	0x200000dc

08000ab4 <UART1_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UART1_Task */
void UART1_Task(void *argument)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART1_Task */
	char receivedChar;
	/* Infinite loop */
	for(;;)
	{
		if (xQueueReceive(uart1QueueHandle, &receivedChar, portMAX_DELAY) == pdPASS)
 8000abc:	4b17      	ldr	r3, [pc, #92]	; (8000b1c <UART1_Task+0x68>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f107 010f 	add.w	r1, r7, #15
 8000ac4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f005 f86b 	bl	8005ba4 <xQueueReceive>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	d1f3      	bne.n	8000abc <UART1_Task+0x8>
		{

		  // Check if the end of transmission is reached
		  if ( receivedChar == '\r')
 8000ad4:	7bfb      	ldrb	r3, [r7, #15]
 8000ad6:	2b0d      	cmp	r3, #13
 8000ad8:	d10d      	bne.n	8000af6 <UART1_Task+0x42>
		  {
			// Null-terminate the string
			uart1_accumulate_buffer[uart1_accumulate_pos] = '\0';
 8000ada:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <UART1_Task+0x6c>)
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	461a      	mov	r2, r3
 8000ae0:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <UART1_Task+0x70>)
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	5499      	strb	r1, [r3, r2]

			// Process the complete message here
			printf("%s\r", uart1_accumulate_buffer);
 8000ae6:	490f      	ldr	r1, [pc, #60]	; (8000b24 <UART1_Task+0x70>)
 8000ae8:	480f      	ldr	r0, [pc, #60]	; (8000b28 <UART1_Task+0x74>)
 8000aea:	f007 fa19 	bl	8007f20 <iprintf>

			// Reset the accumulate buffer position
			uart1_accumulate_pos = 0;
 8000aee:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <UART1_Task+0x6c>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	701a      	strb	r2, [r3, #0]
 8000af4:	e009      	b.n	8000b0a <UART1_Task+0x56>
		  } else {
			  // Accumulate the received characters
			  uart1_accumulate_buffer[uart1_accumulate_pos++] = receivedChar;
 8000af6:	4b0a      	ldr	r3, [pc, #40]	; (8000b20 <UART1_Task+0x6c>)
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	1c5a      	adds	r2, r3, #1
 8000afc:	b2d1      	uxtb	r1, r2
 8000afe:	4a08      	ldr	r2, [pc, #32]	; (8000b20 <UART1_Task+0x6c>)
 8000b00:	7011      	strb	r1, [r2, #0]
 8000b02:	461a      	mov	r2, r3
 8000b04:	7bf9      	ldrb	r1, [r7, #15]
 8000b06:	4b07      	ldr	r3, [pc, #28]	; (8000b24 <UART1_Task+0x70>)
 8000b08:	5499      	strb	r1, [r3, r2]
		  }

		  // Make sure we don't overflow the buffer
		  if (uart1_accumulate_pos >= UART_BUFFER_SIZE)
 8000b0a:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <UART1_Task+0x6c>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	b25b      	sxtb	r3, r3
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	dad3      	bge.n	8000abc <UART1_Task+0x8>
		  {
			uart1_accumulate_pos = 0;
 8000b14:	4b02      	ldr	r3, [pc, #8]	; (8000b20 <UART1_Task+0x6c>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	701a      	strb	r2, [r3, #0]
		if (xQueueReceive(uart1QueueHandle, &receivedChar, portMAX_DELAY) == pdPASS)
 8000b1a:	e7cf      	b.n	8000abc <UART1_Task+0x8>
 8000b1c:	200001fc 	.word	0x200001fc
 8000b20:	2000030c 	.word	0x2000030c
 8000b24:	2000020c 	.word	0x2000020c
 8000b28:	08008dfc 	.word	0x08008dfc

08000b2c <LightSensorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LightSensorTask */
void LightSensorTask(void *argument)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LightSensorTask */
	LTR329_Init();
 8000b34:	f7ff fd1a 	bl	800056c <LTR329_Init>
	/* Infinite loop */
	  for(;;)
	  {
		// Read light data
		LTR329_Read_Light(&light_ch0, &light_ch1);
 8000b38:	490a      	ldr	r1, [pc, #40]	; (8000b64 <LightSensorTask+0x38>)
 8000b3a:	480b      	ldr	r0, [pc, #44]	; (8000b68 <LightSensorTask+0x3c>)
 8000b3c:	f7ff fd3c 	bl	80005b8 <LTR329_Read_Light>
		if (verbose) printf("Light Ch0: %d \n Light Ch1: %d\n________\n\n",light_ch0,light_ch1);
 8000b40:	2300      	movs	r3, #0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d008      	beq.n	8000b58 <LightSensorTask+0x2c>
 8000b46:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <LightSensorTask+0x3c>)
 8000b48:	881b      	ldrh	r3, [r3, #0]
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4b05      	ldr	r3, [pc, #20]	; (8000b64 <LightSensorTask+0x38>)
 8000b4e:	881b      	ldrh	r3, [r3, #0]
 8000b50:	461a      	mov	r2, r3
 8000b52:	4806      	ldr	r0, [pc, #24]	; (8000b6c <LightSensorTask+0x40>)
 8000b54:	f007 f9e4 	bl	8007f20 <iprintf>
		osDelay(1000);
 8000b58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b5c:	f004 fbd4 	bl	8005308 <osDelay>
		LTR329_Read_Light(&light_ch0, &light_ch1);
 8000b60:	e7ea      	b.n	8000b38 <LightSensorTask+0xc>
 8000b62:	bf00      	nop
 8000b64:	20000310 	.word	0x20000310
 8000b68:	2000030e 	.word	0x2000030e
 8000b6c:	08008e00 	.word	0x08008e00

08000b70 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a04      	ldr	r2, [pc, #16]	; (8000b90 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d101      	bne.n	8000b86 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b82:	f000 faed 	bl	8001160 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40001000 	.word	0x40001000

08000b94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b98:	b672      	cpsid	i
}
 8000b9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b9c:	e7fe      	b.n	8000b9c <Error_Handler+0x8>
	...

08000ba0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba6:	4b11      	ldr	r3, [pc, #68]	; (8000bec <HAL_MspInit+0x4c>)
 8000ba8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000baa:	4a10      	ldr	r2, [pc, #64]	; (8000bec <HAL_MspInit+0x4c>)
 8000bac:	f043 0301 	orr.w	r3, r3, #1
 8000bb0:	6613      	str	r3, [r2, #96]	; 0x60
 8000bb2:	4b0e      	ldr	r3, [pc, #56]	; (8000bec <HAL_MspInit+0x4c>)
 8000bb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bb6:	f003 0301 	and.w	r3, r3, #1
 8000bba:	607b      	str	r3, [r7, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bbe:	4b0b      	ldr	r3, [pc, #44]	; (8000bec <HAL_MspInit+0x4c>)
 8000bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bc2:	4a0a      	ldr	r2, [pc, #40]	; (8000bec <HAL_MspInit+0x4c>)
 8000bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bc8:	6593      	str	r3, [r2, #88]	; 0x58
 8000bca:	4b08      	ldr	r3, [pc, #32]	; (8000bec <HAL_MspInit+0x4c>)
 8000bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bd2:	603b      	str	r3, [r7, #0]
 8000bd4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	210f      	movs	r1, #15
 8000bda:	f06f 0001 	mvn.w	r0, #1
 8000bde:	f000 fb97 	bl	8001310 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40021000 	.word	0x40021000

08000bf0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b096      	sub	sp, #88	; 0x58
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c08:	f107 0310 	add.w	r3, r7, #16
 8000c0c:	2234      	movs	r2, #52	; 0x34
 8000c0e:	2100      	movs	r1, #0
 8000c10:	4618      	mov	r0, r3
 8000c12:	f007 f9f3 	bl	8007ffc <memset>
  if(hi2c->Instance==I2C1)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a1f      	ldr	r2, [pc, #124]	; (8000c98 <HAL_I2C_MspInit+0xa8>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d137      	bne.n	8000c90 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000c20:	2340      	movs	r3, #64	; 0x40
 8000c22:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000c24:	2300      	movs	r3, #0
 8000c26:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c28:	f107 0310 	add.w	r3, r7, #16
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f002 fae9 	bl	8003204 <HAL_RCCEx_PeriphCLKConfig>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000c38:	f7ff ffac 	bl	8000b94 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3c:	4b17      	ldr	r3, [pc, #92]	; (8000c9c <HAL_I2C_MspInit+0xac>)
 8000c3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c40:	4a16      	ldr	r2, [pc, #88]	; (8000c9c <HAL_I2C_MspInit+0xac>)
 8000c42:	f043 0301 	orr.w	r3, r3, #1
 8000c46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c48:	4b14      	ldr	r3, [pc, #80]	; (8000c9c <HAL_I2C_MspInit+0xac>)
 8000c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c4c:	f003 0301 	and.w	r3, r3, #1
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c54:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c58:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c5a:	2312      	movs	r3, #18
 8000c5c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c62:	2303      	movs	r3, #3
 8000c64:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c66:	2304      	movs	r3, #4
 8000c68:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000c6e:	4619      	mov	r1, r3
 8000c70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c74:	f000 fbf6 	bl	8001464 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c78:	4b08      	ldr	r3, [pc, #32]	; (8000c9c <HAL_I2C_MspInit+0xac>)
 8000c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c7c:	4a07      	ldr	r2, [pc, #28]	; (8000c9c <HAL_I2C_MspInit+0xac>)
 8000c7e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c82:	6593      	str	r3, [r2, #88]	; 0x58
 8000c84:	4b05      	ldr	r3, [pc, #20]	; (8000c9c <HAL_I2C_MspInit+0xac>)
 8000c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c8c:	60bb      	str	r3, [r7, #8]
 8000c8e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c90:	bf00      	nop
 8000c92:	3758      	adds	r7, #88	; 0x58
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	40005400 	.word	0x40005400
 8000c9c:	40021000 	.word	0x40021000

08000ca0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b098      	sub	sp, #96	; 0x60
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	60da      	str	r2, [r3, #12]
 8000cb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cb8:	f107 0318 	add.w	r3, r7, #24
 8000cbc:	2234      	movs	r2, #52	; 0x34
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f007 f99b 	bl	8007ffc <memset>
  if(huart->Instance==USART1)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4a4e      	ldr	r2, [pc, #312]	; (8000e04 <HAL_UART_MspInit+0x164>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d13e      	bne.n	8000d4e <HAL_UART_MspInit+0xae>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cd8:	f107 0318 	add.w	r3, r7, #24
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f002 fa91 	bl	8003204 <HAL_RCCEx_PeriphCLKConfig>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ce8:	f7ff ff54 	bl	8000b94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cec:	4b46      	ldr	r3, [pc, #280]	; (8000e08 <HAL_UART_MspInit+0x168>)
 8000cee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cf0:	4a45      	ldr	r2, [pc, #276]	; (8000e08 <HAL_UART_MspInit+0x168>)
 8000cf2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cf6:	6613      	str	r3, [r2, #96]	; 0x60
 8000cf8:	4b43      	ldr	r3, [pc, #268]	; (8000e08 <HAL_UART_MspInit+0x168>)
 8000cfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d00:	617b      	str	r3, [r7, #20]
 8000d02:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d04:	4b40      	ldr	r3, [pc, #256]	; (8000e08 <HAL_UART_MspInit+0x168>)
 8000d06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d08:	4a3f      	ldr	r2, [pc, #252]	; (8000e08 <HAL_UART_MspInit+0x168>)
 8000d0a:	f043 0302 	orr.w	r3, r3, #2
 8000d0e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d10:	4b3d      	ldr	r3, [pc, #244]	; (8000e08 <HAL_UART_MspInit+0x168>)
 8000d12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d14:	f003 0302 	and.w	r3, r3, #2
 8000d18:	613b      	str	r3, [r7, #16]
 8000d1a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d1c:	23c0      	movs	r3, #192	; 0xc0
 8000d1e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d20:	2302      	movs	r3, #2
 8000d22:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d28:	2303      	movs	r3, #3
 8000d2a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d2c:	2307      	movs	r3, #7
 8000d2e:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d30:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000d34:	4619      	mov	r1, r3
 8000d36:	4835      	ldr	r0, [pc, #212]	; (8000e0c <HAL_UART_MspInit+0x16c>)
 8000d38:	f000 fb94 	bl	8001464 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2105      	movs	r1, #5
 8000d40:	2025      	movs	r0, #37	; 0x25
 8000d42:	f000 fae5 	bl	8001310 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d46:	2025      	movs	r0, #37	; 0x25
 8000d48:	f000 fafe 	bl	8001348 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d4c:	e055      	b.n	8000dfa <HAL_UART_MspInit+0x15a>
  else if(huart->Instance==USART2)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a2f      	ldr	r2, [pc, #188]	; (8000e10 <HAL_UART_MspInit+0x170>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d150      	bne.n	8000dfa <HAL_UART_MspInit+0x15a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d60:	f107 0318 	add.w	r3, r7, #24
 8000d64:	4618      	mov	r0, r3
 8000d66:	f002 fa4d 	bl	8003204 <HAL_RCCEx_PeriphCLKConfig>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8000d70:	f7ff ff10 	bl	8000b94 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d74:	4b24      	ldr	r3, [pc, #144]	; (8000e08 <HAL_UART_MspInit+0x168>)
 8000d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d78:	4a23      	ldr	r2, [pc, #140]	; (8000e08 <HAL_UART_MspInit+0x168>)
 8000d7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d7e:	6593      	str	r3, [r2, #88]	; 0x58
 8000d80:	4b21      	ldr	r3, [pc, #132]	; (8000e08 <HAL_UART_MspInit+0x168>)
 8000d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d88:	60fb      	str	r3, [r7, #12]
 8000d8a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8c:	4b1e      	ldr	r3, [pc, #120]	; (8000e08 <HAL_UART_MspInit+0x168>)
 8000d8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d90:	4a1d      	ldr	r2, [pc, #116]	; (8000e08 <HAL_UART_MspInit+0x168>)
 8000d92:	f043 0301 	orr.w	r3, r3, #1
 8000d96:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d98:	4b1b      	ldr	r3, [pc, #108]	; (8000e08 <HAL_UART_MspInit+0x168>)
 8000d9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9c:	f003 0301 	and.w	r3, r3, #1
 8000da0:	60bb      	str	r3, [r7, #8]
 8000da2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000da4:	2304      	movs	r3, #4
 8000da6:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da8:	2302      	movs	r3, #2
 8000daa:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db0:	2303      	movs	r3, #3
 8000db2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000db4:	2307      	movs	r3, #7
 8000db6:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000db8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dc2:	f000 fb4f 	bl	8001464 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000dc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000dca:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd4:	2303      	movs	r3, #3
 8000dd6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000dd8:	2303      	movs	r3, #3
 8000dda:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000ddc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000de0:	4619      	mov	r1, r3
 8000de2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000de6:	f000 fb3d 	bl	8001464 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000dea:	2200      	movs	r2, #0
 8000dec:	2105      	movs	r1, #5
 8000dee:	2026      	movs	r0, #38	; 0x26
 8000df0:	f000 fa8e 	bl	8001310 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000df4:	2026      	movs	r0, #38	; 0x26
 8000df6:	f000 faa7 	bl	8001348 <HAL_NVIC_EnableIRQ>
}
 8000dfa:	bf00      	nop
 8000dfc:	3760      	adds	r7, #96	; 0x60
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40013800 	.word	0x40013800
 8000e08:	40021000 	.word	0x40021000
 8000e0c:	48000400 	.word	0x48000400
 8000e10:	40004400 	.word	0x40004400

08000e14 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b08e      	sub	sp, #56	; 0x38
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e22:	4b34      	ldr	r3, [pc, #208]	; (8000ef4 <HAL_InitTick+0xe0>)
 8000e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e26:	4a33      	ldr	r2, [pc, #204]	; (8000ef4 <HAL_InitTick+0xe0>)
 8000e28:	f043 0310 	orr.w	r3, r3, #16
 8000e2c:	6593      	str	r3, [r2, #88]	; 0x58
 8000e2e:	4b31      	ldr	r3, [pc, #196]	; (8000ef4 <HAL_InitTick+0xe0>)
 8000e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e32:	f003 0310 	and.w	r3, r3, #16
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e3a:	f107 0210 	add.w	r2, r7, #16
 8000e3e:	f107 0314 	add.w	r3, r7, #20
 8000e42:	4611      	mov	r1, r2
 8000e44:	4618      	mov	r0, r3
 8000e46:	f002 f94b 	bl	80030e0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e4a:	6a3b      	ldr	r3, [r7, #32]
 8000e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d103      	bne.n	8000e5c <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e54:	f002 f918 	bl	8003088 <HAL_RCC_GetPCLK1Freq>
 8000e58:	6378      	str	r0, [r7, #52]	; 0x34
 8000e5a:	e004      	b.n	8000e66 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e5c:	f002 f914 	bl	8003088 <HAL_RCC_GetPCLK1Freq>
 8000e60:	4603      	mov	r3, r0
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e68:	4a23      	ldr	r2, [pc, #140]	; (8000ef8 <HAL_InitTick+0xe4>)
 8000e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e6e:	0c9b      	lsrs	r3, r3, #18
 8000e70:	3b01      	subs	r3, #1
 8000e72:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e74:	4b21      	ldr	r3, [pc, #132]	; (8000efc <HAL_InitTick+0xe8>)
 8000e76:	4a22      	ldr	r2, [pc, #136]	; (8000f00 <HAL_InitTick+0xec>)
 8000e78:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e7a:	4b20      	ldr	r3, [pc, #128]	; (8000efc <HAL_InitTick+0xe8>)
 8000e7c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e80:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e82:	4a1e      	ldr	r2, [pc, #120]	; (8000efc <HAL_InitTick+0xe8>)
 8000e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e86:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e88:	4b1c      	ldr	r3, [pc, #112]	; (8000efc <HAL_InitTick+0xe8>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e8e:	4b1b      	ldr	r3, [pc, #108]	; (8000efc <HAL_InitTick+0xe8>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e94:	4b19      	ldr	r3, [pc, #100]	; (8000efc <HAL_InitTick+0xe8>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000e9a:	4818      	ldr	r0, [pc, #96]	; (8000efc <HAL_InitTick+0xe8>)
 8000e9c:	f002 fb48 	bl	8003530 <HAL_TIM_Base_Init>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000ea6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d11b      	bne.n	8000ee6 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000eae:	4813      	ldr	r0, [pc, #76]	; (8000efc <HAL_InitTick+0xe8>)
 8000eb0:	f002 fba0 	bl	80035f4 <HAL_TIM_Base_Start_IT>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000eba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d111      	bne.n	8000ee6 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000ec2:	2036      	movs	r0, #54	; 0x36
 8000ec4:	f000 fa40 	bl	8001348 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2b0f      	cmp	r3, #15
 8000ecc:	d808      	bhi.n	8000ee0 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	6879      	ldr	r1, [r7, #4]
 8000ed2:	2036      	movs	r0, #54	; 0x36
 8000ed4:	f000 fa1c 	bl	8001310 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ed8:	4a0a      	ldr	r2, [pc, #40]	; (8000f04 <HAL_InitTick+0xf0>)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6013      	str	r3, [r2, #0]
 8000ede:	e002      	b.n	8000ee6 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000ee6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3738      	adds	r7, #56	; 0x38
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40021000 	.word	0x40021000
 8000ef8:	431bde83 	.word	0x431bde83
 8000efc:	20000314 	.word	0x20000314
 8000f00:	40001000 	.word	0x40001000
 8000f04:	20000004 	.word	0x20000004

08000f08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f0c:	e7fe      	b.n	8000f0c <NMI_Handler+0x4>

08000f0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f12:	e7fe      	b.n	8000f12 <HardFault_Handler+0x4>

08000f14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f18:	e7fe      	b.n	8000f18 <MemManage_Handler+0x4>

08000f1a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f1e:	e7fe      	b.n	8000f1e <BusFault_Handler+0x4>

08000f20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f24:	e7fe      	b.n	8000f24 <UsageFault_Handler+0x4>

08000f26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f26:	b480      	push	{r7}
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr

08000f34 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f38:	4802      	ldr	r0, [pc, #8]	; (8000f44 <USART1_IRQHandler+0x10>)
 8000f3a:	f002 fe7f 	bl	8003c3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	200000dc 	.word	0x200000dc

08000f48 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f4c:	4802      	ldr	r0, [pc, #8]	; (8000f58 <USART2_IRQHandler+0x10>)
 8000f4e:	f002 fe75 	bl	8003c3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	20000164 	.word	0x20000164

08000f5c <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f60:	4802      	ldr	r0, [pc, #8]	; (8000f6c <TIM6_IRQHandler+0x10>)
 8000f62:	f002 fb9b 	bl	800369c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000314 	.word	0x20000314

08000f70 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	60f8      	str	r0, [r7, #12]
 8000f78:	60b9      	str	r1, [r7, #8]
 8000f7a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	617b      	str	r3, [r7, #20]
 8000f80:	e00a      	b.n	8000f98 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f82:	f3af 8000 	nop.w
 8000f86:	4601      	mov	r1, r0
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	1c5a      	adds	r2, r3, #1
 8000f8c:	60ba      	str	r2, [r7, #8]
 8000f8e:	b2ca      	uxtb	r2, r1
 8000f90:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	3301      	adds	r3, #1
 8000f96:	617b      	str	r3, [r7, #20]
 8000f98:	697a      	ldr	r2, [r7, #20]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	dbf0      	blt.n	8000f82 <_read+0x12>
  }

  return len;
 8000fa0:	687b      	ldr	r3, [r7, #4]
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3718      	adds	r7, #24
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b086      	sub	sp, #24
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	60f8      	str	r0, [r7, #12]
 8000fb2:	60b9      	str	r1, [r7, #8]
 8000fb4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	617b      	str	r3, [r7, #20]
 8000fba:	e009      	b.n	8000fd0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	1c5a      	adds	r2, r3, #1
 8000fc0:	60ba      	str	r2, [r7, #8]
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff fb23 	bl	8000610 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	617b      	str	r3, [r7, #20]
 8000fd0:	697a      	ldr	r2, [r7, #20]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	dbf1      	blt.n	8000fbc <_write+0x12>
  }
  return len;
 8000fd8:	687b      	ldr	r3, [r7, #4]
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3718      	adds	r7, #24
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <_close>:

int _close(int file)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	b083      	sub	sp, #12
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	b083      	sub	sp, #12
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
 8001002:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800100a:	605a      	str	r2, [r3, #4]
  return 0;
 800100c:	2300      	movs	r3, #0
}
 800100e:	4618      	mov	r0, r3
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr

0800101a <_isatty>:

int _isatty(int file)
{
 800101a:	b480      	push	{r7}
 800101c:	b083      	sub	sp, #12
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001022:	2301      	movs	r3, #1
}
 8001024:	4618      	mov	r0, r3
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001030:	b480      	push	{r7}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800103c:	2300      	movs	r3, #0
}
 800103e:	4618      	mov	r0, r3
 8001040:	3714      	adds	r7, #20
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
	...

0800104c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b086      	sub	sp, #24
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001054:	4a14      	ldr	r2, [pc, #80]	; (80010a8 <_sbrk+0x5c>)
 8001056:	4b15      	ldr	r3, [pc, #84]	; (80010ac <_sbrk+0x60>)
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001060:	4b13      	ldr	r3, [pc, #76]	; (80010b0 <_sbrk+0x64>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d102      	bne.n	800106e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001068:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <_sbrk+0x64>)
 800106a:	4a12      	ldr	r2, [pc, #72]	; (80010b4 <_sbrk+0x68>)
 800106c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800106e:	4b10      	ldr	r3, [pc, #64]	; (80010b0 <_sbrk+0x64>)
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4413      	add	r3, r2
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	429a      	cmp	r2, r3
 800107a:	d207      	bcs.n	800108c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800107c:	f007 f81c 	bl	80080b8 <__errno>
 8001080:	4603      	mov	r3, r0
 8001082:	220c      	movs	r2, #12
 8001084:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001086:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800108a:	e009      	b.n	80010a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800108c:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <_sbrk+0x64>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001092:	4b07      	ldr	r3, [pc, #28]	; (80010b0 <_sbrk+0x64>)
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4413      	add	r3, r2
 800109a:	4a05      	ldr	r2, [pc, #20]	; (80010b0 <_sbrk+0x64>)
 800109c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800109e:	68fb      	ldr	r3, [r7, #12]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3718      	adds	r7, #24
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	2000a000 	.word	0x2000a000
 80010ac:	00000400 	.word	0x00000400
 80010b0:	20000360 	.word	0x20000360
 80010b4:	20002628 	.word	0x20002628

080010b8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80010bc:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <SystemInit+0x20>)
 80010be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010c2:	4a05      	ldr	r2, [pc, #20]	; (80010d8 <SystemInit+0x20>)
 80010c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80010cc:	bf00      	nop
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80010dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001114 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010e0:	f7ff ffea 	bl	80010b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010e4:	480c      	ldr	r0, [pc, #48]	; (8001118 <LoopForever+0x6>)
  ldr r1, =_edata
 80010e6:	490d      	ldr	r1, [pc, #52]	; (800111c <LoopForever+0xa>)
  ldr r2, =_sidata
 80010e8:	4a0d      	ldr	r2, [pc, #52]	; (8001120 <LoopForever+0xe>)
  movs r3, #0
 80010ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010ec:	e002      	b.n	80010f4 <LoopCopyDataInit>

080010ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010f2:	3304      	adds	r3, #4

080010f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010f8:	d3f9      	bcc.n	80010ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010fa:	4a0a      	ldr	r2, [pc, #40]	; (8001124 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010fc:	4c0a      	ldr	r4, [pc, #40]	; (8001128 <LoopForever+0x16>)
  movs r3, #0
 80010fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001100:	e001      	b.n	8001106 <LoopFillZerobss>

08001102 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001102:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001104:	3204      	adds	r2, #4

08001106 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001106:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001108:	d3fb      	bcc.n	8001102 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800110a:	f006 ffdb 	bl	80080c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800110e:	f7ff fa91 	bl	8000634 <main>

08001112 <LoopForever>:

LoopForever:
    b LoopForever
 8001112:	e7fe      	b.n	8001112 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001114:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001118:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800111c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001120:	08008f90 	.word	0x08008f90
  ldr r2, =_sbss
 8001124:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001128:	20002624 	.word	0x20002624

0800112c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800112c:	e7fe      	b.n	800112c <ADC1_2_IRQHandler>

0800112e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b082      	sub	sp, #8
 8001132:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001134:	2300      	movs	r3, #0
 8001136:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001138:	2003      	movs	r0, #3
 800113a:	f000 f8de 	bl	80012fa <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800113e:	200f      	movs	r0, #15
 8001140:	f7ff fe68 	bl	8000e14 <HAL_InitTick>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d002      	beq.n	8001150 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	71fb      	strb	r3, [r7, #7]
 800114e:	e001      	b.n	8001154 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001150:	f7ff fd26 	bl	8000ba0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001154:	79fb      	ldrb	r3, [r7, #7]
}
 8001156:	4618      	mov	r0, r3
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
	...

08001160 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001164:	4b06      	ldr	r3, [pc, #24]	; (8001180 <HAL_IncTick+0x20>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	461a      	mov	r2, r3
 800116a:	4b06      	ldr	r3, [pc, #24]	; (8001184 <HAL_IncTick+0x24>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4413      	add	r3, r2
 8001170:	4a04      	ldr	r2, [pc, #16]	; (8001184 <HAL_IncTick+0x24>)
 8001172:	6013      	str	r3, [r2, #0]
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	20000008 	.word	0x20000008
 8001184:	20000364 	.word	0x20000364

08001188 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  return uwTick;
 800118c:	4b03      	ldr	r3, [pc, #12]	; (800119c <HAL_GetTick+0x14>)
 800118e:	681b      	ldr	r3, [r3, #0]
}
 8001190:	4618      	mov	r0, r3
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	20000364 	.word	0x20000364

080011a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f003 0307 	and.w	r3, r3, #7
 80011ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011b0:	4b0c      	ldr	r3, [pc, #48]	; (80011e4 <__NVIC_SetPriorityGrouping+0x44>)
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011b6:	68ba      	ldr	r2, [r7, #8]
 80011b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011bc:	4013      	ands	r3, r2
 80011be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011d2:	4a04      	ldr	r2, [pc, #16]	; (80011e4 <__NVIC_SetPriorityGrouping+0x44>)
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	60d3      	str	r3, [r2, #12]
}
 80011d8:	bf00      	nop
 80011da:	3714      	adds	r7, #20
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011ec:	4b04      	ldr	r3, [pc, #16]	; (8001200 <__NVIC_GetPriorityGrouping+0x18>)
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	0a1b      	lsrs	r3, r3, #8
 80011f2:	f003 0307 	and.w	r3, r3, #7
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	e000ed00 	.word	0xe000ed00

08001204 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800120e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001212:	2b00      	cmp	r3, #0
 8001214:	db0b      	blt.n	800122e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	f003 021f 	and.w	r2, r3, #31
 800121c:	4907      	ldr	r1, [pc, #28]	; (800123c <__NVIC_EnableIRQ+0x38>)
 800121e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001222:	095b      	lsrs	r3, r3, #5
 8001224:	2001      	movs	r0, #1
 8001226:	fa00 f202 	lsl.w	r2, r0, r2
 800122a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800122e:	bf00      	nop
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	e000e100 	.word	0xe000e100

08001240 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	6039      	str	r1, [r7, #0]
 800124a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800124c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001250:	2b00      	cmp	r3, #0
 8001252:	db0a      	blt.n	800126a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	b2da      	uxtb	r2, r3
 8001258:	490c      	ldr	r1, [pc, #48]	; (800128c <__NVIC_SetPriority+0x4c>)
 800125a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125e:	0112      	lsls	r2, r2, #4
 8001260:	b2d2      	uxtb	r2, r2
 8001262:	440b      	add	r3, r1
 8001264:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001268:	e00a      	b.n	8001280 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	b2da      	uxtb	r2, r3
 800126e:	4908      	ldr	r1, [pc, #32]	; (8001290 <__NVIC_SetPriority+0x50>)
 8001270:	79fb      	ldrb	r3, [r7, #7]
 8001272:	f003 030f 	and.w	r3, r3, #15
 8001276:	3b04      	subs	r3, #4
 8001278:	0112      	lsls	r2, r2, #4
 800127a:	b2d2      	uxtb	r2, r2
 800127c:	440b      	add	r3, r1
 800127e:	761a      	strb	r2, [r3, #24]
}
 8001280:	bf00      	nop
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr
 800128c:	e000e100 	.word	0xe000e100
 8001290:	e000ed00 	.word	0xe000ed00

08001294 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001294:	b480      	push	{r7}
 8001296:	b089      	sub	sp, #36	; 0x24
 8001298:	af00      	add	r7, sp, #0
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	60b9      	str	r1, [r7, #8]
 800129e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	f003 0307 	and.w	r3, r3, #7
 80012a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	f1c3 0307 	rsb	r3, r3, #7
 80012ae:	2b04      	cmp	r3, #4
 80012b0:	bf28      	it	cs
 80012b2:	2304      	movcs	r3, #4
 80012b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	3304      	adds	r3, #4
 80012ba:	2b06      	cmp	r3, #6
 80012bc:	d902      	bls.n	80012c4 <NVIC_EncodePriority+0x30>
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	3b03      	subs	r3, #3
 80012c2:	e000      	b.n	80012c6 <NVIC_EncodePriority+0x32>
 80012c4:	2300      	movs	r3, #0
 80012c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	43da      	mvns	r2, r3
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	401a      	ands	r2, r3
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	fa01 f303 	lsl.w	r3, r1, r3
 80012e6:	43d9      	mvns	r1, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ec:	4313      	orrs	r3, r2
         );
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3724      	adds	r7, #36	; 0x24
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr

080012fa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b082      	sub	sp, #8
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f7ff ff4c 	bl	80011a0 <__NVIC_SetPriorityGrouping>
}
 8001308:	bf00      	nop
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	607a      	str	r2, [r7, #4]
 800131c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800131e:	2300      	movs	r3, #0
 8001320:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001322:	f7ff ff61 	bl	80011e8 <__NVIC_GetPriorityGrouping>
 8001326:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001328:	687a      	ldr	r2, [r7, #4]
 800132a:	68b9      	ldr	r1, [r7, #8]
 800132c:	6978      	ldr	r0, [r7, #20]
 800132e:	f7ff ffb1 	bl	8001294 <NVIC_EncodePriority>
 8001332:	4602      	mov	r2, r0
 8001334:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001338:	4611      	mov	r1, r2
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff ff80 	bl	8001240 <__NVIC_SetPriority>
}
 8001340:	bf00      	nop
 8001342:	3718      	adds	r7, #24
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}

08001348 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff ff54 	bl	8001204 <__NVIC_EnableIRQ>
}
 800135c:	bf00      	nop
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}

08001364 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001364:	b480      	push	{r7}
 8001366:	b085      	sub	sp, #20
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800136c:	2300      	movs	r3, #0
 800136e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001376:	b2db      	uxtb	r3, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d008      	beq.n	800138e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2204      	movs	r2, #4
 8001380:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2200      	movs	r2, #0
 8001386:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e022      	b.n	80013d4 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f022 020e 	bic.w	r2, r2, #14
 800139c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f022 0201 	bic.w	r2, r2, #1
 80013ac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b2:	f003 021c 	and.w	r2, r3, #28
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ba:	2101      	movs	r1, #1
 80013bc:	fa01 f202 	lsl.w	r2, r1, r2
 80013c0:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2201      	movs	r2, #1
 80013c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2200      	movs	r2, #0
 80013ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80013d2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3714      	adds	r7, #20
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013e8:	2300      	movs	r3, #0
 80013ea:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d005      	beq.n	8001404 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2204      	movs	r2, #4
 80013fc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	73fb      	strb	r3, [r7, #15]
 8001402:	e029      	b.n	8001458 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f022 020e 	bic.w	r2, r2, #14
 8001412:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f022 0201 	bic.w	r2, r2, #1
 8001422:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001428:	f003 021c 	and.w	r2, r3, #28
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001430:	2101      	movs	r1, #1
 8001432:	fa01 f202 	lsl.w	r2, r1, r2
 8001436:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2201      	movs	r2, #1
 800143c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2200      	movs	r2, #0
 8001444:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800144c:	2b00      	cmp	r3, #0
 800144e:	d003      	beq.n	8001458 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	4798      	blx	r3
    }
  }
  return status;
 8001458:	7bfb      	ldrb	r3, [r7, #15]
}
 800145a:	4618      	mov	r0, r3
 800145c:	3710      	adds	r7, #16
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
	...

08001464 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001464:	b480      	push	{r7}
 8001466:	b087      	sub	sp, #28
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800146e:	2300      	movs	r3, #0
 8001470:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001472:	e14e      	b.n	8001712 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	2101      	movs	r1, #1
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	fa01 f303 	lsl.w	r3, r1, r3
 8001480:	4013      	ands	r3, r2
 8001482:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	2b00      	cmp	r3, #0
 8001488:	f000 8140 	beq.w	800170c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f003 0303 	and.w	r3, r3, #3
 8001494:	2b01      	cmp	r3, #1
 8001496:	d005      	beq.n	80014a4 <HAL_GPIO_Init+0x40>
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f003 0303 	and.w	r3, r3, #3
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d130      	bne.n	8001506 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	2203      	movs	r2, #3
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	43db      	mvns	r3, r3
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	4013      	ands	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	68da      	ldr	r2, [r3, #12]
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	693a      	ldr	r2, [r7, #16]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	693a      	ldr	r2, [r7, #16]
 80014d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014da:	2201      	movs	r2, #1
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	43db      	mvns	r3, r3
 80014e4:	693a      	ldr	r2, [r7, #16]
 80014e6:	4013      	ands	r3, r2
 80014e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	091b      	lsrs	r3, r3, #4
 80014f0:	f003 0201 	and.w	r2, r3, #1
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f003 0303 	and.w	r3, r3, #3
 800150e:	2b03      	cmp	r3, #3
 8001510:	d017      	beq.n	8001542 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	68db      	ldr	r3, [r3, #12]
 8001516:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	2203      	movs	r2, #3
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	43db      	mvns	r3, r3
 8001524:	693a      	ldr	r2, [r7, #16]
 8001526:	4013      	ands	r3, r2
 8001528:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	689a      	ldr	r2, [r3, #8]
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	4313      	orrs	r3, r2
 800153a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f003 0303 	and.w	r3, r3, #3
 800154a:	2b02      	cmp	r3, #2
 800154c:	d123      	bne.n	8001596 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	08da      	lsrs	r2, r3, #3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	3208      	adds	r2, #8
 8001556:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800155a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	f003 0307 	and.w	r3, r3, #7
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	220f      	movs	r2, #15
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	43db      	mvns	r3, r3
 800156c:	693a      	ldr	r2, [r7, #16]
 800156e:	4013      	ands	r3, r2
 8001570:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	691a      	ldr	r2, [r3, #16]
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	f003 0307 	and.w	r3, r3, #7
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	fa02 f303 	lsl.w	r3, r2, r3
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	4313      	orrs	r3, r2
 8001586:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	08da      	lsrs	r2, r3, #3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	3208      	adds	r2, #8
 8001590:	6939      	ldr	r1, [r7, #16]
 8001592:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	2203      	movs	r2, #3
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	43db      	mvns	r3, r3
 80015a8:	693a      	ldr	r2, [r7, #16]
 80015aa:	4013      	ands	r3, r2
 80015ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f003 0203 	and.w	r2, r3, #3
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	fa02 f303 	lsl.w	r3, r2, r3
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	f000 809a 	beq.w	800170c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015d8:	4b55      	ldr	r3, [pc, #340]	; (8001730 <HAL_GPIO_Init+0x2cc>)
 80015da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015dc:	4a54      	ldr	r2, [pc, #336]	; (8001730 <HAL_GPIO_Init+0x2cc>)
 80015de:	f043 0301 	orr.w	r3, r3, #1
 80015e2:	6613      	str	r3, [r2, #96]	; 0x60
 80015e4:	4b52      	ldr	r3, [pc, #328]	; (8001730 <HAL_GPIO_Init+0x2cc>)
 80015e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015e8:	f003 0301 	and.w	r3, r3, #1
 80015ec:	60bb      	str	r3, [r7, #8]
 80015ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015f0:	4a50      	ldr	r2, [pc, #320]	; (8001734 <HAL_GPIO_Init+0x2d0>)
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	089b      	lsrs	r3, r3, #2
 80015f6:	3302      	adds	r3, #2
 80015f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	f003 0303 	and.w	r3, r3, #3
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	220f      	movs	r2, #15
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	43db      	mvns	r3, r3
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	4013      	ands	r3, r2
 8001612:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800161a:	d013      	beq.n	8001644 <HAL_GPIO_Init+0x1e0>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	4a46      	ldr	r2, [pc, #280]	; (8001738 <HAL_GPIO_Init+0x2d4>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d00d      	beq.n	8001640 <HAL_GPIO_Init+0x1dc>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	4a45      	ldr	r2, [pc, #276]	; (800173c <HAL_GPIO_Init+0x2d8>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d007      	beq.n	800163c <HAL_GPIO_Init+0x1d8>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	4a44      	ldr	r2, [pc, #272]	; (8001740 <HAL_GPIO_Init+0x2dc>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d101      	bne.n	8001638 <HAL_GPIO_Init+0x1d4>
 8001634:	2303      	movs	r3, #3
 8001636:	e006      	b.n	8001646 <HAL_GPIO_Init+0x1e2>
 8001638:	2307      	movs	r3, #7
 800163a:	e004      	b.n	8001646 <HAL_GPIO_Init+0x1e2>
 800163c:	2302      	movs	r3, #2
 800163e:	e002      	b.n	8001646 <HAL_GPIO_Init+0x1e2>
 8001640:	2301      	movs	r3, #1
 8001642:	e000      	b.n	8001646 <HAL_GPIO_Init+0x1e2>
 8001644:	2300      	movs	r3, #0
 8001646:	697a      	ldr	r2, [r7, #20]
 8001648:	f002 0203 	and.w	r2, r2, #3
 800164c:	0092      	lsls	r2, r2, #2
 800164e:	4093      	lsls	r3, r2
 8001650:	693a      	ldr	r2, [r7, #16]
 8001652:	4313      	orrs	r3, r2
 8001654:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001656:	4937      	ldr	r1, [pc, #220]	; (8001734 <HAL_GPIO_Init+0x2d0>)
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	089b      	lsrs	r3, r3, #2
 800165c:	3302      	adds	r3, #2
 800165e:	693a      	ldr	r2, [r7, #16]
 8001660:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001664:	4b37      	ldr	r3, [pc, #220]	; (8001744 <HAL_GPIO_Init+0x2e0>)
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	43db      	mvns	r3, r3
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	4013      	ands	r3, r2
 8001672:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d003      	beq.n	8001688 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	4313      	orrs	r3, r2
 8001686:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001688:	4a2e      	ldr	r2, [pc, #184]	; (8001744 <HAL_GPIO_Init+0x2e0>)
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800168e:	4b2d      	ldr	r3, [pc, #180]	; (8001744 <HAL_GPIO_Init+0x2e0>)
 8001690:	68db      	ldr	r3, [r3, #12]
 8001692:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	43db      	mvns	r3, r3
 8001698:	693a      	ldr	r2, [r7, #16]
 800169a:	4013      	ands	r3, r2
 800169c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d003      	beq.n	80016b2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016b2:	4a24      	ldr	r2, [pc, #144]	; (8001744 <HAL_GPIO_Init+0x2e0>)
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80016b8:	4b22      	ldr	r3, [pc, #136]	; (8001744 <HAL_GPIO_Init+0x2e0>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	43db      	mvns	r3, r3
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	4013      	ands	r3, r2
 80016c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d003      	beq.n	80016dc <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80016d4:	693a      	ldr	r2, [r7, #16]
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	4313      	orrs	r3, r2
 80016da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016dc:	4a19      	ldr	r2, [pc, #100]	; (8001744 <HAL_GPIO_Init+0x2e0>)
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80016e2:	4b18      	ldr	r3, [pc, #96]	; (8001744 <HAL_GPIO_Init+0x2e0>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	43db      	mvns	r3, r3
 80016ec:	693a      	ldr	r2, [r7, #16]
 80016ee:	4013      	ands	r3, r2
 80016f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d003      	beq.n	8001706 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	4313      	orrs	r3, r2
 8001704:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001706:	4a0f      	ldr	r2, [pc, #60]	; (8001744 <HAL_GPIO_Init+0x2e0>)
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	3301      	adds	r3, #1
 8001710:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	fa22 f303 	lsr.w	r3, r2, r3
 800171c:	2b00      	cmp	r3, #0
 800171e:	f47f aea9 	bne.w	8001474 <HAL_GPIO_Init+0x10>
  }
}
 8001722:	bf00      	nop
 8001724:	bf00      	nop
 8001726:	371c      	adds	r7, #28
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	40021000 	.word	0x40021000
 8001734:	40010000 	.word	0x40010000
 8001738:	48000400 	.word	0x48000400
 800173c:	48000800 	.word	0x48000800
 8001740:	48000c00 	.word	0x48000c00
 8001744:	40010400 	.word	0x40010400

08001748 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	460b      	mov	r3, r1
 8001752:	807b      	strh	r3, [r7, #2]
 8001754:	4613      	mov	r3, r2
 8001756:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001758:	787b      	ldrb	r3, [r7, #1]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d003      	beq.n	8001766 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800175e:	887a      	ldrh	r2, [r7, #2]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001764:	e002      	b.n	800176c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001766:	887a      	ldrh	r2, [r7, #2]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800176c:	bf00      	nop
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d101      	bne.n	800178a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e08d      	b.n	80018a6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001790:	b2db      	uxtb	r3, r3
 8001792:	2b00      	cmp	r3, #0
 8001794:	d106      	bne.n	80017a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2200      	movs	r2, #0
 800179a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f7ff fa26 	bl	8000bf0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2224      	movs	r2, #36	; 0x24
 80017a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f022 0201 	bic.w	r2, r2, #1
 80017ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	685a      	ldr	r2, [r3, #4]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017c8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	689a      	ldr	r2, [r3, #8]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80017d8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	68db      	ldr	r3, [r3, #12]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d107      	bne.n	80017f2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	689a      	ldr	r2, [r3, #8]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80017ee:	609a      	str	r2, [r3, #8]
 80017f0:	e006      	b.n	8001800 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	689a      	ldr	r2, [r3, #8]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80017fe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	2b02      	cmp	r3, #2
 8001806:	d108      	bne.n	800181a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	685a      	ldr	r2, [r3, #4]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001816:	605a      	str	r2, [r3, #4]
 8001818:	e007      	b.n	800182a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	685a      	ldr	r2, [r3, #4]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001828:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	6812      	ldr	r2, [r2, #0]
 8001834:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001838:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800183c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	68da      	ldr	r2, [r3, #12]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800184c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	691a      	ldr	r2, [r3, #16]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	699b      	ldr	r3, [r3, #24]
 800185e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	430a      	orrs	r2, r1
 8001866:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	69d9      	ldr	r1, [r3, #28]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6a1a      	ldr	r2, [r3, #32]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	430a      	orrs	r2, r1
 8001876:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f042 0201 	orr.w	r2, r2, #1
 8001886:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2200      	movs	r2, #0
 800188c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2220      	movs	r2, #32
 8001892:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2200      	movs	r2, #0
 800189a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2200      	movs	r2, #0
 80018a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
	...

080018b0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b088      	sub	sp, #32
 80018b4:	af02      	add	r7, sp, #8
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	4608      	mov	r0, r1
 80018ba:	4611      	mov	r1, r2
 80018bc:	461a      	mov	r2, r3
 80018be:	4603      	mov	r3, r0
 80018c0:	817b      	strh	r3, [r7, #10]
 80018c2:	460b      	mov	r3, r1
 80018c4:	813b      	strh	r3, [r7, #8]
 80018c6:	4613      	mov	r3, r2
 80018c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	2b20      	cmp	r3, #32
 80018d4:	f040 80f9 	bne.w	8001aca <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80018d8:	6a3b      	ldr	r3, [r7, #32]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d002      	beq.n	80018e4 <HAL_I2C_Mem_Write+0x34>
 80018de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d105      	bne.n	80018f0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018ea:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e0ed      	b.n	8001acc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d101      	bne.n	80018fe <HAL_I2C_Mem_Write+0x4e>
 80018fa:	2302      	movs	r3, #2
 80018fc:	e0e6      	b.n	8001acc <HAL_I2C_Mem_Write+0x21c>
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2201      	movs	r2, #1
 8001902:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001906:	f7ff fc3f 	bl	8001188 <HAL_GetTick>
 800190a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	9300      	str	r3, [sp, #0]
 8001910:	2319      	movs	r3, #25
 8001912:	2201      	movs	r2, #1
 8001914:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001918:	68f8      	ldr	r0, [r7, #12]
 800191a:	f000 fac3 	bl	8001ea4 <I2C_WaitOnFlagUntilTimeout>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e0d1      	b.n	8001acc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	2221      	movs	r2, #33	; 0x21
 800192c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2240      	movs	r2, #64	; 0x40
 8001934:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2200      	movs	r2, #0
 800193c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	6a3a      	ldr	r2, [r7, #32]
 8001942:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001948:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	2200      	movs	r2, #0
 800194e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001950:	88f8      	ldrh	r0, [r7, #6]
 8001952:	893a      	ldrh	r2, [r7, #8]
 8001954:	8979      	ldrh	r1, [r7, #10]
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	9301      	str	r3, [sp, #4]
 800195a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800195c:	9300      	str	r3, [sp, #0]
 800195e:	4603      	mov	r3, r0
 8001960:	68f8      	ldr	r0, [r7, #12]
 8001962:	f000 f9d3 	bl	8001d0c <I2C_RequestMemoryWrite>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d005      	beq.n	8001978 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	2200      	movs	r2, #0
 8001970:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e0a9      	b.n	8001acc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800197c:	b29b      	uxth	r3, r3
 800197e:	2bff      	cmp	r3, #255	; 0xff
 8001980:	d90e      	bls.n	80019a0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	22ff      	movs	r2, #255	; 0xff
 8001986:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800198c:	b2da      	uxtb	r2, r3
 800198e:	8979      	ldrh	r1, [r7, #10]
 8001990:	2300      	movs	r3, #0
 8001992:	9300      	str	r3, [sp, #0]
 8001994:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001998:	68f8      	ldr	r0, [r7, #12]
 800199a:	f000 fc3d 	bl	8002218 <I2C_TransferConfig>
 800199e:	e00f      	b.n	80019c0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019a4:	b29a      	uxth	r2, r3
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019ae:	b2da      	uxtb	r2, r3
 80019b0:	8979      	ldrh	r1, [r7, #10]
 80019b2:	2300      	movs	r3, #0
 80019b4:	9300      	str	r3, [sp, #0]
 80019b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019ba:	68f8      	ldr	r0, [r7, #12]
 80019bc:	f000 fc2c 	bl	8002218 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019c0:	697a      	ldr	r2, [r7, #20]
 80019c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80019c4:	68f8      	ldr	r0, [r7, #12]
 80019c6:	f000 fabc 	bl	8001f42 <I2C_WaitOnTXISFlagUntilTimeout>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e07b      	b.n	8001acc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d8:	781a      	ldrb	r2, [r3, #0]
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e4:	1c5a      	adds	r2, r3, #1
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	3b01      	subs	r3, #1
 80019f2:	b29a      	uxth	r2, r3
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019fc:	3b01      	subs	r3, #1
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d034      	beq.n	8001a78 <HAL_I2C_Mem_Write+0x1c8>
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d130      	bne.n	8001a78 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	9300      	str	r3, [sp, #0]
 8001a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	2180      	movs	r1, #128	; 0x80
 8001a20:	68f8      	ldr	r0, [r7, #12]
 8001a22:	f000 fa3f 	bl	8001ea4 <I2C_WaitOnFlagUntilTimeout>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e04d      	b.n	8001acc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	2bff      	cmp	r3, #255	; 0xff
 8001a38:	d90e      	bls.n	8001a58 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	22ff      	movs	r2, #255	; 0xff
 8001a3e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a44:	b2da      	uxtb	r2, r3
 8001a46:	8979      	ldrh	r1, [r7, #10]
 8001a48:	2300      	movs	r3, #0
 8001a4a:	9300      	str	r3, [sp, #0]
 8001a4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a50:	68f8      	ldr	r0, [r7, #12]
 8001a52:	f000 fbe1 	bl	8002218 <I2C_TransferConfig>
 8001a56:	e00f      	b.n	8001a78 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a5c:	b29a      	uxth	r2, r3
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a66:	b2da      	uxtb	r2, r3
 8001a68:	8979      	ldrh	r1, [r7, #10]
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	9300      	str	r3, [sp, #0]
 8001a6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a72:	68f8      	ldr	r0, [r7, #12]
 8001a74:	f000 fbd0 	bl	8002218 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d19e      	bne.n	80019c0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a82:	697a      	ldr	r2, [r7, #20]
 8001a84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a86:	68f8      	ldr	r0, [r7, #12]
 8001a88:	f000 faa2 	bl	8001fd0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e01a      	b.n	8001acc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	2220      	movs	r2, #32
 8001a9c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	6859      	ldr	r1, [r3, #4]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	4b0a      	ldr	r3, [pc, #40]	; (8001ad4 <HAL_I2C_Mem_Write+0x224>)
 8001aaa:	400b      	ands	r3, r1
 8001aac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2220      	movs	r2, #32
 8001ab2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	e000      	b.n	8001acc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001aca:	2302      	movs	r3, #2
  }
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3718      	adds	r7, #24
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	fe00e800 	.word	0xfe00e800

08001ad8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b088      	sub	sp, #32
 8001adc:	af02      	add	r7, sp, #8
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	4608      	mov	r0, r1
 8001ae2:	4611      	mov	r1, r2
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	817b      	strh	r3, [r7, #10]
 8001aea:	460b      	mov	r3, r1
 8001aec:	813b      	strh	r3, [r7, #8]
 8001aee:	4613      	mov	r3, r2
 8001af0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	2b20      	cmp	r3, #32
 8001afc:	f040 80fd 	bne.w	8001cfa <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b00:	6a3b      	ldr	r3, [r7, #32]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d002      	beq.n	8001b0c <HAL_I2C_Mem_Read+0x34>
 8001b06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d105      	bne.n	8001b18 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b12:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e0f1      	b.n	8001cfc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d101      	bne.n	8001b26 <HAL_I2C_Mem_Read+0x4e>
 8001b22:	2302      	movs	r3, #2
 8001b24:	e0ea      	b.n	8001cfc <HAL_I2C_Mem_Read+0x224>
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001b2e:	f7ff fb2b 	bl	8001188 <HAL_GetTick>
 8001b32:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	9300      	str	r3, [sp, #0]
 8001b38:	2319      	movs	r3, #25
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b40:	68f8      	ldr	r0, [r7, #12]
 8001b42:	f000 f9af 	bl	8001ea4 <I2C_WaitOnFlagUntilTimeout>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e0d5      	b.n	8001cfc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2222      	movs	r2, #34	; 0x22
 8001b54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2240      	movs	r2, #64	; 0x40
 8001b5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2200      	movs	r2, #0
 8001b64:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	6a3a      	ldr	r2, [r7, #32]
 8001b6a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001b70:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2200      	movs	r2, #0
 8001b76:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b78:	88f8      	ldrh	r0, [r7, #6]
 8001b7a:	893a      	ldrh	r2, [r7, #8]
 8001b7c:	8979      	ldrh	r1, [r7, #10]
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	9301      	str	r3, [sp, #4]
 8001b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b84:	9300      	str	r3, [sp, #0]
 8001b86:	4603      	mov	r3, r0
 8001b88:	68f8      	ldr	r0, [r7, #12]
 8001b8a:	f000 f913 	bl	8001db4 <I2C_RequestMemoryRead>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d005      	beq.n	8001ba0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2200      	movs	r2, #0
 8001b98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e0ad      	b.n	8001cfc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	2bff      	cmp	r3, #255	; 0xff
 8001ba8:	d90e      	bls.n	8001bc8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	22ff      	movs	r2, #255	; 0xff
 8001bae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bb4:	b2da      	uxtb	r2, r3
 8001bb6:	8979      	ldrh	r1, [r7, #10]
 8001bb8:	4b52      	ldr	r3, [pc, #328]	; (8001d04 <HAL_I2C_Mem_Read+0x22c>)
 8001bba:	9300      	str	r3, [sp, #0]
 8001bbc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001bc0:	68f8      	ldr	r0, [r7, #12]
 8001bc2:	f000 fb29 	bl	8002218 <I2C_TransferConfig>
 8001bc6:	e00f      	b.n	8001be8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bcc:	b29a      	uxth	r2, r3
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bd6:	b2da      	uxtb	r2, r3
 8001bd8:	8979      	ldrh	r1, [r7, #10]
 8001bda:	4b4a      	ldr	r3, [pc, #296]	; (8001d04 <HAL_I2C_Mem_Read+0x22c>)
 8001bdc:	9300      	str	r3, [sp, #0]
 8001bde:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001be2:	68f8      	ldr	r0, [r7, #12]
 8001be4:	f000 fb18 	bl	8002218 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	9300      	str	r3, [sp, #0]
 8001bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bee:	2200      	movs	r2, #0
 8001bf0:	2104      	movs	r1, #4
 8001bf2:	68f8      	ldr	r0, [r7, #12]
 8001bf4:	f000 f956 	bl	8001ea4 <I2C_WaitOnFlagUntilTimeout>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e07c      	b.n	8001cfc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0c:	b2d2      	uxtb	r2, r2
 8001c0e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c14:	1c5a      	adds	r2, r3, #1
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	b29a      	uxth	r2, r3
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	3b01      	subs	r3, #1
 8001c2e:	b29a      	uxth	r2, r3
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c38:	b29b      	uxth	r3, r3
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d034      	beq.n	8001ca8 <HAL_I2C_Mem_Read+0x1d0>
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d130      	bne.n	8001ca8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	9300      	str	r3, [sp, #0]
 8001c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	2180      	movs	r1, #128	; 0x80
 8001c50:	68f8      	ldr	r0, [r7, #12]
 8001c52:	f000 f927 	bl	8001ea4 <I2C_WaitOnFlagUntilTimeout>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e04d      	b.n	8001cfc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	2bff      	cmp	r3, #255	; 0xff
 8001c68:	d90e      	bls.n	8001c88 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	22ff      	movs	r2, #255	; 0xff
 8001c6e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c74:	b2da      	uxtb	r2, r3
 8001c76:	8979      	ldrh	r1, [r7, #10]
 8001c78:	2300      	movs	r3, #0
 8001c7a:	9300      	str	r3, [sp, #0]
 8001c7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c80:	68f8      	ldr	r0, [r7, #12]
 8001c82:	f000 fac9 	bl	8002218 <I2C_TransferConfig>
 8001c86:	e00f      	b.n	8001ca8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c8c:	b29a      	uxth	r2, r3
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c96:	b2da      	uxtb	r2, r3
 8001c98:	8979      	ldrh	r1, [r7, #10]
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	9300      	str	r3, [sp, #0]
 8001c9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ca2:	68f8      	ldr	r0, [r7, #12]
 8001ca4:	f000 fab8 	bl	8002218 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d19a      	bne.n	8001be8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cb2:	697a      	ldr	r2, [r7, #20]
 8001cb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001cb6:	68f8      	ldr	r0, [r7, #12]
 8001cb8:	f000 f98a 	bl	8001fd0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e01a      	b.n	8001cfc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2220      	movs	r2, #32
 8001ccc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	6859      	ldr	r1, [r3, #4]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	4b0b      	ldr	r3, [pc, #44]	; (8001d08 <HAL_I2C_Mem_Read+0x230>)
 8001cda:	400b      	ands	r3, r1
 8001cdc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2220      	movs	r2, #32
 8001ce2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	e000      	b.n	8001cfc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001cfa:	2302      	movs	r3, #2
  }
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3718      	adds	r7, #24
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	80002400 	.word	0x80002400
 8001d08:	fe00e800 	.word	0xfe00e800

08001d0c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af02      	add	r7, sp, #8
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	4608      	mov	r0, r1
 8001d16:	4611      	mov	r1, r2
 8001d18:	461a      	mov	r2, r3
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	817b      	strh	r3, [r7, #10]
 8001d1e:	460b      	mov	r3, r1
 8001d20:	813b      	strh	r3, [r7, #8]
 8001d22:	4613      	mov	r3, r2
 8001d24:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001d26:	88fb      	ldrh	r3, [r7, #6]
 8001d28:	b2da      	uxtb	r2, r3
 8001d2a:	8979      	ldrh	r1, [r7, #10]
 8001d2c:	4b20      	ldr	r3, [pc, #128]	; (8001db0 <I2C_RequestMemoryWrite+0xa4>)
 8001d2e:	9300      	str	r3, [sp, #0]
 8001d30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d34:	68f8      	ldr	r0, [r7, #12]
 8001d36:	f000 fa6f 	bl	8002218 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d3a:	69fa      	ldr	r2, [r7, #28]
 8001d3c:	69b9      	ldr	r1, [r7, #24]
 8001d3e:	68f8      	ldr	r0, [r7, #12]
 8001d40:	f000 f8ff 	bl	8001f42 <I2C_WaitOnTXISFlagUntilTimeout>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e02c      	b.n	8001da8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001d4e:	88fb      	ldrh	r3, [r7, #6]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d105      	bne.n	8001d60 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001d54:	893b      	ldrh	r3, [r7, #8]
 8001d56:	b2da      	uxtb	r2, r3
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	629a      	str	r2, [r3, #40]	; 0x28
 8001d5e:	e015      	b.n	8001d8c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001d60:	893b      	ldrh	r3, [r7, #8]
 8001d62:	0a1b      	lsrs	r3, r3, #8
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	b2da      	uxtb	r2, r3
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d6e:	69fa      	ldr	r2, [r7, #28]
 8001d70:	69b9      	ldr	r1, [r7, #24]
 8001d72:	68f8      	ldr	r0, [r7, #12]
 8001d74:	f000 f8e5 	bl	8001f42 <I2C_WaitOnTXISFlagUntilTimeout>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e012      	b.n	8001da8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001d82:	893b      	ldrh	r3, [r7, #8]
 8001d84:	b2da      	uxtb	r2, r3
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	9300      	str	r3, [sp, #0]
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	2200      	movs	r2, #0
 8001d94:	2180      	movs	r1, #128	; 0x80
 8001d96:	68f8      	ldr	r0, [r7, #12]
 8001d98:	f000 f884 	bl	8001ea4 <I2C_WaitOnFlagUntilTimeout>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e000      	b.n	8001da8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001da6:	2300      	movs	r3, #0
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3710      	adds	r7, #16
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	80002000 	.word	0x80002000

08001db4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b086      	sub	sp, #24
 8001db8:	af02      	add	r7, sp, #8
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	4608      	mov	r0, r1
 8001dbe:	4611      	mov	r1, r2
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	817b      	strh	r3, [r7, #10]
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	813b      	strh	r3, [r7, #8]
 8001dca:	4613      	mov	r3, r2
 8001dcc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001dce:	88fb      	ldrh	r3, [r7, #6]
 8001dd0:	b2da      	uxtb	r2, r3
 8001dd2:	8979      	ldrh	r1, [r7, #10]
 8001dd4:	4b20      	ldr	r3, [pc, #128]	; (8001e58 <I2C_RequestMemoryRead+0xa4>)
 8001dd6:	9300      	str	r3, [sp, #0]
 8001dd8:	2300      	movs	r3, #0
 8001dda:	68f8      	ldr	r0, [r7, #12]
 8001ddc:	f000 fa1c 	bl	8002218 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001de0:	69fa      	ldr	r2, [r7, #28]
 8001de2:	69b9      	ldr	r1, [r7, #24]
 8001de4:	68f8      	ldr	r0, [r7, #12]
 8001de6:	f000 f8ac 	bl	8001f42 <I2C_WaitOnTXISFlagUntilTimeout>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e02c      	b.n	8001e4e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001df4:	88fb      	ldrh	r3, [r7, #6]
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d105      	bne.n	8001e06 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001dfa:	893b      	ldrh	r3, [r7, #8]
 8001dfc:	b2da      	uxtb	r2, r3
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	629a      	str	r2, [r3, #40]	; 0x28
 8001e04:	e015      	b.n	8001e32 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001e06:	893b      	ldrh	r3, [r7, #8]
 8001e08:	0a1b      	lsrs	r3, r3, #8
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	b2da      	uxtb	r2, r3
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e14:	69fa      	ldr	r2, [r7, #28]
 8001e16:	69b9      	ldr	r1, [r7, #24]
 8001e18:	68f8      	ldr	r0, [r7, #12]
 8001e1a:	f000 f892 	bl	8001f42 <I2C_WaitOnTXISFlagUntilTimeout>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e012      	b.n	8001e4e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001e28:	893b      	ldrh	r3, [r7, #8]
 8001e2a:	b2da      	uxtb	r2, r3
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	9300      	str	r3, [sp, #0]
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	2140      	movs	r1, #64	; 0x40
 8001e3c:	68f8      	ldr	r0, [r7, #12]
 8001e3e:	f000 f831 	bl	8001ea4 <I2C_WaitOnFlagUntilTimeout>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e000      	b.n	8001e4e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3710      	adds	r7, #16
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	80002000 	.word	0x80002000

08001e5c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	699b      	ldr	r3, [r3, #24]
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d103      	bne.n	8001e7a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	2200      	movs	r2, #0
 8001e78:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	f003 0301 	and.w	r3, r3, #1
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d007      	beq.n	8001e98 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	699a      	ldr	r2, [r3, #24]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f042 0201 	orr.w	r2, r2, #1
 8001e96:	619a      	str	r2, [r3, #24]
  }
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	603b      	str	r3, [r7, #0]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001eb4:	e031      	b.n	8001f1a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ebc:	d02d      	beq.n	8001f1a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ebe:	f7ff f963 	bl	8001188 <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	683a      	ldr	r2, [r7, #0]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d302      	bcc.n	8001ed4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d122      	bne.n	8001f1a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	699a      	ldr	r2, [r3, #24]
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	4013      	ands	r3, r2
 8001ede:	68ba      	ldr	r2, [r7, #8]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	bf0c      	ite	eq
 8001ee4:	2301      	moveq	r3, #1
 8001ee6:	2300      	movne	r3, #0
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	461a      	mov	r2, r3
 8001eec:	79fb      	ldrb	r3, [r7, #7]
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d113      	bne.n	8001f1a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef6:	f043 0220 	orr.w	r2, r3, #32
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2220      	movs	r2, #32
 8001f02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2200      	movs	r2, #0
 8001f12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e00f      	b.n	8001f3a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	699a      	ldr	r2, [r3, #24]
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	4013      	ands	r3, r2
 8001f24:	68ba      	ldr	r2, [r7, #8]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	bf0c      	ite	eq
 8001f2a:	2301      	moveq	r3, #1
 8001f2c:	2300      	movne	r3, #0
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	461a      	mov	r2, r3
 8001f32:	79fb      	ldrb	r3, [r7, #7]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d0be      	beq.n	8001eb6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3710      	adds	r7, #16
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b084      	sub	sp, #16
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	60f8      	str	r0, [r7, #12]
 8001f4a:	60b9      	str	r1, [r7, #8]
 8001f4c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f4e:	e033      	b.n	8001fb8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	68b9      	ldr	r1, [r7, #8]
 8001f54:	68f8      	ldr	r0, [r7, #12]
 8001f56:	f000 f87f 	bl	8002058 <I2C_IsErrorOccurred>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e031      	b.n	8001fc8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f6a:	d025      	beq.n	8001fb8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f6c:	f7ff f90c 	bl	8001188 <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	68ba      	ldr	r2, [r7, #8]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d302      	bcc.n	8001f82 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d11a      	bne.n	8001fb8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	f003 0302 	and.w	r3, r3, #2
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d013      	beq.n	8001fb8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f94:	f043 0220 	orr.w	r2, r3, #32
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2220      	movs	r2, #32
 8001fa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e007      	b.n	8001fc8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	699b      	ldr	r3, [r3, #24]
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d1c4      	bne.n	8001f50 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001fc6:	2300      	movs	r3, #0
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3710      	adds	r7, #16
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fdc:	e02f      	b.n	800203e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	68b9      	ldr	r1, [r7, #8]
 8001fe2:	68f8      	ldr	r0, [r7, #12]
 8001fe4:	f000 f838 	bl	8002058 <I2C_IsErrorOccurred>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e02d      	b.n	800204e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ff2:	f7ff f8c9 	bl	8001188 <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	68ba      	ldr	r2, [r7, #8]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d302      	bcc.n	8002008 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d11a      	bne.n	800203e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	699b      	ldr	r3, [r3, #24]
 800200e:	f003 0320 	and.w	r3, r3, #32
 8002012:	2b20      	cmp	r3, #32
 8002014:	d013      	beq.n	800203e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201a:	f043 0220 	orr.w	r2, r3, #32
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2220      	movs	r2, #32
 8002026:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2200      	movs	r2, #0
 800202e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2200      	movs	r2, #0
 8002036:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e007      	b.n	800204e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	f003 0320 	and.w	r3, r3, #32
 8002048:	2b20      	cmp	r3, #32
 800204a:	d1c8      	bne.n	8001fde <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3710      	adds	r7, #16
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
	...

08002058 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b08a      	sub	sp, #40	; 0x28
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002064:	2300      	movs	r3, #0
 8002066:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002072:	2300      	movs	r3, #0
 8002074:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	f003 0310 	and.w	r3, r3, #16
 8002080:	2b00      	cmp	r3, #0
 8002082:	d068      	beq.n	8002156 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2210      	movs	r2, #16
 800208a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800208c:	e049      	b.n	8002122 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002094:	d045      	beq.n	8002122 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002096:	f7ff f877 	bl	8001188 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	68ba      	ldr	r2, [r7, #8]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d302      	bcc.n	80020ac <I2C_IsErrorOccurred+0x54>
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d13a      	bne.n	8002122 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020b6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80020be:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	699b      	ldr	r3, [r3, #24]
 80020c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020ce:	d121      	bne.n	8002114 <I2C_IsErrorOccurred+0xbc>
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80020d6:	d01d      	beq.n	8002114 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80020d8:	7cfb      	ldrb	r3, [r7, #19]
 80020da:	2b20      	cmp	r3, #32
 80020dc:	d01a      	beq.n	8002114 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	685a      	ldr	r2, [r3, #4]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80020ec:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80020ee:	f7ff f84b 	bl	8001188 <HAL_GetTick>
 80020f2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020f4:	e00e      	b.n	8002114 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80020f6:	f7ff f847 	bl	8001188 <HAL_GetTick>
 80020fa:	4602      	mov	r2, r0
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	2b19      	cmp	r3, #25
 8002102:	d907      	bls.n	8002114 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002104:	6a3b      	ldr	r3, [r7, #32]
 8002106:	f043 0320 	orr.w	r3, r3, #32
 800210a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002112:	e006      	b.n	8002122 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	699b      	ldr	r3, [r3, #24]
 800211a:	f003 0320 	and.w	r3, r3, #32
 800211e:	2b20      	cmp	r3, #32
 8002120:	d1e9      	bne.n	80020f6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	f003 0320 	and.w	r3, r3, #32
 800212c:	2b20      	cmp	r3, #32
 800212e:	d003      	beq.n	8002138 <I2C_IsErrorOccurred+0xe0>
 8002130:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002134:	2b00      	cmp	r3, #0
 8002136:	d0aa      	beq.n	800208e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002138:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800213c:	2b00      	cmp	r3, #0
 800213e:	d103      	bne.n	8002148 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2220      	movs	r2, #32
 8002146:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002148:	6a3b      	ldr	r3, [r7, #32]
 800214a:	f043 0304 	orr.w	r3, r3, #4
 800214e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	699b      	ldr	r3, [r3, #24]
 800215c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002164:	2b00      	cmp	r3, #0
 8002166:	d00b      	beq.n	8002180 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002168:	6a3b      	ldr	r3, [r7, #32]
 800216a:	f043 0301 	orr.w	r3, r3, #1
 800216e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002178:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002186:	2b00      	cmp	r3, #0
 8002188:	d00b      	beq.n	80021a2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800218a:	6a3b      	ldr	r3, [r7, #32]
 800218c:	f043 0308 	orr.w	r3, r3, #8
 8002190:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800219a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d00b      	beq.n	80021c4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80021ac:	6a3b      	ldr	r3, [r7, #32]
 80021ae:	f043 0302 	orr.w	r3, r3, #2
 80021b2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021bc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80021c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d01c      	beq.n	8002206 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80021cc:	68f8      	ldr	r0, [r7, #12]
 80021ce:	f7ff fe45 	bl	8001e5c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	6859      	ldr	r1, [r3, #4]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	4b0d      	ldr	r3, [pc, #52]	; (8002214 <I2C_IsErrorOccurred+0x1bc>)
 80021de:	400b      	ands	r3, r1
 80021e0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80021e6:	6a3b      	ldr	r3, [r7, #32]
 80021e8:	431a      	orrs	r2, r3
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2220      	movs	r2, #32
 80021f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002206:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800220a:	4618      	mov	r0, r3
 800220c:	3728      	adds	r7, #40	; 0x28
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	fe00e800 	.word	0xfe00e800

08002218 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002218:	b480      	push	{r7}
 800221a:	b087      	sub	sp, #28
 800221c:	af00      	add	r7, sp, #0
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	607b      	str	r3, [r7, #4]
 8002222:	460b      	mov	r3, r1
 8002224:	817b      	strh	r3, [r7, #10]
 8002226:	4613      	mov	r3, r2
 8002228:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800222a:	897b      	ldrh	r3, [r7, #10]
 800222c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002230:	7a7b      	ldrb	r3, [r7, #9]
 8002232:	041b      	lsls	r3, r3, #16
 8002234:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002238:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800223e:	6a3b      	ldr	r3, [r7, #32]
 8002240:	4313      	orrs	r3, r2
 8002242:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002246:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	685a      	ldr	r2, [r3, #4]
 800224e:	6a3b      	ldr	r3, [r7, #32]
 8002250:	0d5b      	lsrs	r3, r3, #21
 8002252:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002256:	4b08      	ldr	r3, [pc, #32]	; (8002278 <I2C_TransferConfig+0x60>)
 8002258:	430b      	orrs	r3, r1
 800225a:	43db      	mvns	r3, r3
 800225c:	ea02 0103 	and.w	r1, r2, r3
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	697a      	ldr	r2, [r7, #20]
 8002266:	430a      	orrs	r2, r1
 8002268:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800226a:	bf00      	nop
 800226c:	371c      	adds	r7, #28
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	03ff63ff 	.word	0x03ff63ff

0800227c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800228c:	b2db      	uxtb	r3, r3
 800228e:	2b20      	cmp	r3, #32
 8002290:	d138      	bne.n	8002304 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002298:	2b01      	cmp	r3, #1
 800229a:	d101      	bne.n	80022a0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800229c:	2302      	movs	r3, #2
 800229e:	e032      	b.n	8002306 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2224      	movs	r2, #36	; 0x24
 80022ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f022 0201 	bic.w	r2, r2, #1
 80022be:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80022ce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	6819      	ldr	r1, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	683a      	ldr	r2, [r7, #0]
 80022dc:	430a      	orrs	r2, r1
 80022de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f042 0201 	orr.w	r2, r2, #1
 80022ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2220      	movs	r2, #32
 80022f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002300:	2300      	movs	r3, #0
 8002302:	e000      	b.n	8002306 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002304:	2302      	movs	r3, #2
  }
}
 8002306:	4618      	mov	r0, r3
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr

08002312 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002312:	b480      	push	{r7}
 8002314:	b085      	sub	sp, #20
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
 800231a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002322:	b2db      	uxtb	r3, r3
 8002324:	2b20      	cmp	r3, #32
 8002326:	d139      	bne.n	800239c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800232e:	2b01      	cmp	r3, #1
 8002330:	d101      	bne.n	8002336 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002332:	2302      	movs	r3, #2
 8002334:	e033      	b.n	800239e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2201      	movs	r2, #1
 800233a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2224      	movs	r2, #36	; 0x24
 8002342:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f022 0201 	bic.w	r2, r2, #1
 8002354:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002364:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	021b      	lsls	r3, r3, #8
 800236a:	68fa      	ldr	r2, [r7, #12]
 800236c:	4313      	orrs	r3, r2
 800236e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	68fa      	ldr	r2, [r7, #12]
 8002376:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f042 0201 	orr.w	r2, r2, #1
 8002386:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2220      	movs	r2, #32
 800238c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002398:	2300      	movs	r3, #0
 800239a:	e000      	b.n	800239e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800239c:	2302      	movs	r3, #2
  }
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3714      	adds	r7, #20
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
	...

080023ac <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023b0:	4b05      	ldr	r3, [pc, #20]	; (80023c8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a04      	ldr	r2, [pc, #16]	; (80023c8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80023b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ba:	6013      	str	r3, [r2, #0]
}
 80023bc:	bf00      	nop
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	40007000 	.word	0x40007000

080023cc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80023d0:	4b04      	ldr	r3, [pc, #16]	; (80023e4 <HAL_PWREx_GetVoltageRange+0x18>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80023d8:	4618      	mov	r0, r3
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	40007000 	.word	0x40007000

080023e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b085      	sub	sp, #20
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023f6:	d130      	bne.n	800245a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80023f8:	4b23      	ldr	r3, [pc, #140]	; (8002488 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002400:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002404:	d038      	beq.n	8002478 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002406:	4b20      	ldr	r3, [pc, #128]	; (8002488 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800240e:	4a1e      	ldr	r2, [pc, #120]	; (8002488 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002410:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002414:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002416:	4b1d      	ldr	r3, [pc, #116]	; (800248c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2232      	movs	r2, #50	; 0x32
 800241c:	fb02 f303 	mul.w	r3, r2, r3
 8002420:	4a1b      	ldr	r2, [pc, #108]	; (8002490 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002422:	fba2 2303 	umull	r2, r3, r2, r3
 8002426:	0c9b      	lsrs	r3, r3, #18
 8002428:	3301      	adds	r3, #1
 800242a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800242c:	e002      	b.n	8002434 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	3b01      	subs	r3, #1
 8002432:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002434:	4b14      	ldr	r3, [pc, #80]	; (8002488 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002436:	695b      	ldr	r3, [r3, #20]
 8002438:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800243c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002440:	d102      	bne.n	8002448 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d1f2      	bne.n	800242e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002448:	4b0f      	ldr	r3, [pc, #60]	; (8002488 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800244a:	695b      	ldr	r3, [r3, #20]
 800244c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002450:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002454:	d110      	bne.n	8002478 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e00f      	b.n	800247a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800245a:	4b0b      	ldr	r3, [pc, #44]	; (8002488 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002462:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002466:	d007      	beq.n	8002478 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002468:	4b07      	ldr	r3, [pc, #28]	; (8002488 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002470:	4a05      	ldr	r2, [pc, #20]	; (8002488 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002472:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002476:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	3714      	adds	r7, #20
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	40007000 	.word	0x40007000
 800248c:	20000000 	.word	0x20000000
 8002490:	431bde83 	.word	0x431bde83

08002494 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b08a      	sub	sp, #40	; 0x28
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d102      	bne.n	80024a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	f000 bc4f 	b.w	8002d46 <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024a8:	4b97      	ldr	r3, [pc, #604]	; (8002708 <HAL_RCC_OscConfig+0x274>)
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f003 030c 	and.w	r3, r3, #12
 80024b0:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024b2:	4b95      	ldr	r3, [pc, #596]	; (8002708 <HAL_RCC_OscConfig+0x274>)
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	f003 0303 	and.w	r3, r3, #3
 80024ba:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0310 	and.w	r3, r3, #16
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	f000 80e6 	beq.w	8002696 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80024ca:	6a3b      	ldr	r3, [r7, #32]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d007      	beq.n	80024e0 <HAL_RCC_OscConfig+0x4c>
 80024d0:	6a3b      	ldr	r3, [r7, #32]
 80024d2:	2b0c      	cmp	r3, #12
 80024d4:	f040 808d 	bne.w	80025f2 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	f040 8089 	bne.w	80025f2 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80024e0:	4b89      	ldr	r3, [pc, #548]	; (8002708 <HAL_RCC_OscConfig+0x274>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0302 	and.w	r3, r3, #2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d006      	beq.n	80024fa <HAL_RCC_OscConfig+0x66>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	69db      	ldr	r3, [r3, #28]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d102      	bne.n	80024fa <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	f000 bc26 	b.w	8002d46 <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024fe:	4b82      	ldr	r3, [pc, #520]	; (8002708 <HAL_RCC_OscConfig+0x274>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0308 	and.w	r3, r3, #8
 8002506:	2b00      	cmp	r3, #0
 8002508:	d004      	beq.n	8002514 <HAL_RCC_OscConfig+0x80>
 800250a:	4b7f      	ldr	r3, [pc, #508]	; (8002708 <HAL_RCC_OscConfig+0x274>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002512:	e005      	b.n	8002520 <HAL_RCC_OscConfig+0x8c>
 8002514:	4b7c      	ldr	r3, [pc, #496]	; (8002708 <HAL_RCC_OscConfig+0x274>)
 8002516:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800251a:	091b      	lsrs	r3, r3, #4
 800251c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002520:	4293      	cmp	r3, r2
 8002522:	d224      	bcs.n	800256e <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002528:	4618      	mov	r0, r3
 800252a:	f000 fe0b 	bl	8003144 <RCC_SetFlashLatencyFromMSIRange>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d002      	beq.n	800253a <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	f000 bc06 	b.w	8002d46 <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800253a:	4b73      	ldr	r3, [pc, #460]	; (8002708 <HAL_RCC_OscConfig+0x274>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a72      	ldr	r2, [pc, #456]	; (8002708 <HAL_RCC_OscConfig+0x274>)
 8002540:	f043 0308 	orr.w	r3, r3, #8
 8002544:	6013      	str	r3, [r2, #0]
 8002546:	4b70      	ldr	r3, [pc, #448]	; (8002708 <HAL_RCC_OscConfig+0x274>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002552:	496d      	ldr	r1, [pc, #436]	; (8002708 <HAL_RCC_OscConfig+0x274>)
 8002554:	4313      	orrs	r3, r2
 8002556:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002558:	4b6b      	ldr	r3, [pc, #428]	; (8002708 <HAL_RCC_OscConfig+0x274>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a1b      	ldr	r3, [r3, #32]
 8002564:	021b      	lsls	r3, r3, #8
 8002566:	4968      	ldr	r1, [pc, #416]	; (8002708 <HAL_RCC_OscConfig+0x274>)
 8002568:	4313      	orrs	r3, r2
 800256a:	604b      	str	r3, [r1, #4]
 800256c:	e025      	b.n	80025ba <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800256e:	4b66      	ldr	r3, [pc, #408]	; (8002708 <HAL_RCC_OscConfig+0x274>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a65      	ldr	r2, [pc, #404]	; (8002708 <HAL_RCC_OscConfig+0x274>)
 8002574:	f043 0308 	orr.w	r3, r3, #8
 8002578:	6013      	str	r3, [r2, #0]
 800257a:	4b63      	ldr	r3, [pc, #396]	; (8002708 <HAL_RCC_OscConfig+0x274>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002586:	4960      	ldr	r1, [pc, #384]	; (8002708 <HAL_RCC_OscConfig+0x274>)
 8002588:	4313      	orrs	r3, r2
 800258a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800258c:	4b5e      	ldr	r3, [pc, #376]	; (8002708 <HAL_RCC_OscConfig+0x274>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6a1b      	ldr	r3, [r3, #32]
 8002598:	021b      	lsls	r3, r3, #8
 800259a:	495b      	ldr	r1, [pc, #364]	; (8002708 <HAL_RCC_OscConfig+0x274>)
 800259c:	4313      	orrs	r3, r2
 800259e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025a0:	6a3b      	ldr	r3, [r7, #32]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d109      	bne.n	80025ba <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025aa:	4618      	mov	r0, r3
 80025ac:	f000 fdca 	bl	8003144 <RCC_SetFlashLatencyFromMSIRange>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e3c5      	b.n	8002d46 <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025ba:	f000 fccd 	bl	8002f58 <HAL_RCC_GetSysClockFreq>
 80025be:	4602      	mov	r2, r0
 80025c0:	4b51      	ldr	r3, [pc, #324]	; (8002708 <HAL_RCC_OscConfig+0x274>)
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	091b      	lsrs	r3, r3, #4
 80025c6:	f003 030f 	and.w	r3, r3, #15
 80025ca:	4950      	ldr	r1, [pc, #320]	; (800270c <HAL_RCC_OscConfig+0x278>)
 80025cc:	5ccb      	ldrb	r3, [r1, r3]
 80025ce:	f003 031f 	and.w	r3, r3, #31
 80025d2:	fa22 f303 	lsr.w	r3, r2, r3
 80025d6:	4a4e      	ldr	r2, [pc, #312]	; (8002710 <HAL_RCC_OscConfig+0x27c>)
 80025d8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80025da:	4b4e      	ldr	r3, [pc, #312]	; (8002714 <HAL_RCC_OscConfig+0x280>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4618      	mov	r0, r3
 80025e0:	f7fe fc18 	bl	8000e14 <HAL_InitTick>
 80025e4:	4603      	mov	r3, r0
 80025e6:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 80025e8:	7dfb      	ldrb	r3, [r7, #23]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d052      	beq.n	8002694 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 80025ee:	7dfb      	ldrb	r3, [r7, #23]
 80025f0:	e3a9      	b.n	8002d46 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	69db      	ldr	r3, [r3, #28]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d032      	beq.n	8002660 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80025fa:	4b43      	ldr	r3, [pc, #268]	; (8002708 <HAL_RCC_OscConfig+0x274>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a42      	ldr	r2, [pc, #264]	; (8002708 <HAL_RCC_OscConfig+0x274>)
 8002600:	f043 0301 	orr.w	r3, r3, #1
 8002604:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002606:	f7fe fdbf 	bl	8001188 <HAL_GetTick>
 800260a:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800260c:	e008      	b.n	8002620 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800260e:	f7fe fdbb 	bl	8001188 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d901      	bls.n	8002620 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e392      	b.n	8002d46 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002620:	4b39      	ldr	r3, [pc, #228]	; (8002708 <HAL_RCC_OscConfig+0x274>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0302 	and.w	r3, r3, #2
 8002628:	2b00      	cmp	r3, #0
 800262a:	d0f0      	beq.n	800260e <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800262c:	4b36      	ldr	r3, [pc, #216]	; (8002708 <HAL_RCC_OscConfig+0x274>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a35      	ldr	r2, [pc, #212]	; (8002708 <HAL_RCC_OscConfig+0x274>)
 8002632:	f043 0308 	orr.w	r3, r3, #8
 8002636:	6013      	str	r3, [r2, #0]
 8002638:	4b33      	ldr	r3, [pc, #204]	; (8002708 <HAL_RCC_OscConfig+0x274>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002644:	4930      	ldr	r1, [pc, #192]	; (8002708 <HAL_RCC_OscConfig+0x274>)
 8002646:	4313      	orrs	r3, r2
 8002648:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800264a:	4b2f      	ldr	r3, [pc, #188]	; (8002708 <HAL_RCC_OscConfig+0x274>)
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a1b      	ldr	r3, [r3, #32]
 8002656:	021b      	lsls	r3, r3, #8
 8002658:	492b      	ldr	r1, [pc, #172]	; (8002708 <HAL_RCC_OscConfig+0x274>)
 800265a:	4313      	orrs	r3, r2
 800265c:	604b      	str	r3, [r1, #4]
 800265e:	e01a      	b.n	8002696 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002660:	4b29      	ldr	r3, [pc, #164]	; (8002708 <HAL_RCC_OscConfig+0x274>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a28      	ldr	r2, [pc, #160]	; (8002708 <HAL_RCC_OscConfig+0x274>)
 8002666:	f023 0301 	bic.w	r3, r3, #1
 800266a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800266c:	f7fe fd8c 	bl	8001188 <HAL_GetTick>
 8002670:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002672:	e008      	b.n	8002686 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002674:	f7fe fd88 	bl	8001188 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b02      	cmp	r3, #2
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e35f      	b.n	8002d46 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002686:	4b20      	ldr	r3, [pc, #128]	; (8002708 <HAL_RCC_OscConfig+0x274>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d1f0      	bne.n	8002674 <HAL_RCC_OscConfig+0x1e0>
 8002692:	e000      	b.n	8002696 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002694:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d073      	beq.n	800278a <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80026a2:	6a3b      	ldr	r3, [r7, #32]
 80026a4:	2b08      	cmp	r3, #8
 80026a6:	d005      	beq.n	80026b4 <HAL_RCC_OscConfig+0x220>
 80026a8:	6a3b      	ldr	r3, [r7, #32]
 80026aa:	2b0c      	cmp	r3, #12
 80026ac:	d10e      	bne.n	80026cc <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	2b03      	cmp	r3, #3
 80026b2:	d10b      	bne.n	80026cc <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026b4:	4b14      	ldr	r3, [pc, #80]	; (8002708 <HAL_RCC_OscConfig+0x274>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d063      	beq.n	8002788 <HAL_RCC_OscConfig+0x2f4>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d15f      	bne.n	8002788 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e33c      	b.n	8002d46 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026d4:	d106      	bne.n	80026e4 <HAL_RCC_OscConfig+0x250>
 80026d6:	4b0c      	ldr	r3, [pc, #48]	; (8002708 <HAL_RCC_OscConfig+0x274>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a0b      	ldr	r2, [pc, #44]	; (8002708 <HAL_RCC_OscConfig+0x274>)
 80026dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026e0:	6013      	str	r3, [r2, #0]
 80026e2:	e025      	b.n	8002730 <HAL_RCC_OscConfig+0x29c>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026ec:	d114      	bne.n	8002718 <HAL_RCC_OscConfig+0x284>
 80026ee:	4b06      	ldr	r3, [pc, #24]	; (8002708 <HAL_RCC_OscConfig+0x274>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a05      	ldr	r2, [pc, #20]	; (8002708 <HAL_RCC_OscConfig+0x274>)
 80026f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026f8:	6013      	str	r3, [r2, #0]
 80026fa:	4b03      	ldr	r3, [pc, #12]	; (8002708 <HAL_RCC_OscConfig+0x274>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a02      	ldr	r2, [pc, #8]	; (8002708 <HAL_RCC_OscConfig+0x274>)
 8002700:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002704:	6013      	str	r3, [r2, #0]
 8002706:	e013      	b.n	8002730 <HAL_RCC_OscConfig+0x29c>
 8002708:	40021000 	.word	0x40021000
 800270c:	08008f04 	.word	0x08008f04
 8002710:	20000000 	.word	0x20000000
 8002714:	20000004 	.word	0x20000004
 8002718:	4b8f      	ldr	r3, [pc, #572]	; (8002958 <HAL_RCC_OscConfig+0x4c4>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a8e      	ldr	r2, [pc, #568]	; (8002958 <HAL_RCC_OscConfig+0x4c4>)
 800271e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002722:	6013      	str	r3, [r2, #0]
 8002724:	4b8c      	ldr	r3, [pc, #560]	; (8002958 <HAL_RCC_OscConfig+0x4c4>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a8b      	ldr	r2, [pc, #556]	; (8002958 <HAL_RCC_OscConfig+0x4c4>)
 800272a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800272e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d013      	beq.n	8002760 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002738:	f7fe fd26 	bl	8001188 <HAL_GetTick>
 800273c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800273e:	e008      	b.n	8002752 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002740:	f7fe fd22 	bl	8001188 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b64      	cmp	r3, #100	; 0x64
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e2f9      	b.n	8002d46 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002752:	4b81      	ldr	r3, [pc, #516]	; (8002958 <HAL_RCC_OscConfig+0x4c4>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d0f0      	beq.n	8002740 <HAL_RCC_OscConfig+0x2ac>
 800275e:	e014      	b.n	800278a <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002760:	f7fe fd12 	bl	8001188 <HAL_GetTick>
 8002764:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002766:	e008      	b.n	800277a <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002768:	f7fe fd0e 	bl	8001188 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b64      	cmp	r3, #100	; 0x64
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e2e5      	b.n	8002d46 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800277a:	4b77      	ldr	r3, [pc, #476]	; (8002958 <HAL_RCC_OscConfig+0x4c4>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d1f0      	bne.n	8002768 <HAL_RCC_OscConfig+0x2d4>
 8002786:	e000      	b.n	800278a <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002788:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d060      	beq.n	8002858 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002796:	6a3b      	ldr	r3, [r7, #32]
 8002798:	2b04      	cmp	r3, #4
 800279a:	d005      	beq.n	80027a8 <HAL_RCC_OscConfig+0x314>
 800279c:	6a3b      	ldr	r3, [r7, #32]
 800279e:	2b0c      	cmp	r3, #12
 80027a0:	d119      	bne.n	80027d6 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d116      	bne.n	80027d6 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027a8:	4b6b      	ldr	r3, [pc, #428]	; (8002958 <HAL_RCC_OscConfig+0x4c4>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d005      	beq.n	80027c0 <HAL_RCC_OscConfig+0x32c>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d101      	bne.n	80027c0 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e2c2      	b.n	8002d46 <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027c0:	4b65      	ldr	r3, [pc, #404]	; (8002958 <HAL_RCC_OscConfig+0x4c4>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	691b      	ldr	r3, [r3, #16]
 80027cc:	061b      	lsls	r3, r3, #24
 80027ce:	4962      	ldr	r1, [pc, #392]	; (8002958 <HAL_RCC_OscConfig+0x4c4>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027d4:	e040      	b.n	8002858 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d023      	beq.n	8002826 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027de:	4b5e      	ldr	r3, [pc, #376]	; (8002958 <HAL_RCC_OscConfig+0x4c4>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a5d      	ldr	r2, [pc, #372]	; (8002958 <HAL_RCC_OscConfig+0x4c4>)
 80027e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ea:	f7fe fccd 	bl	8001188 <HAL_GetTick>
 80027ee:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027f0:	e008      	b.n	8002804 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027f2:	f7fe fcc9 	bl	8001188 <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d901      	bls.n	8002804 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e2a0      	b.n	8002d46 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002804:	4b54      	ldr	r3, [pc, #336]	; (8002958 <HAL_RCC_OscConfig+0x4c4>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800280c:	2b00      	cmp	r3, #0
 800280e:	d0f0      	beq.n	80027f2 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002810:	4b51      	ldr	r3, [pc, #324]	; (8002958 <HAL_RCC_OscConfig+0x4c4>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	691b      	ldr	r3, [r3, #16]
 800281c:	061b      	lsls	r3, r3, #24
 800281e:	494e      	ldr	r1, [pc, #312]	; (8002958 <HAL_RCC_OscConfig+0x4c4>)
 8002820:	4313      	orrs	r3, r2
 8002822:	604b      	str	r3, [r1, #4]
 8002824:	e018      	b.n	8002858 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002826:	4b4c      	ldr	r3, [pc, #304]	; (8002958 <HAL_RCC_OscConfig+0x4c4>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a4b      	ldr	r2, [pc, #300]	; (8002958 <HAL_RCC_OscConfig+0x4c4>)
 800282c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002830:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002832:	f7fe fca9 	bl	8001188 <HAL_GetTick>
 8002836:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002838:	e008      	b.n	800284c <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800283a:	f7fe fca5 	bl	8001188 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d901      	bls.n	800284c <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e27c      	b.n	8002d46 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800284c:	4b42      	ldr	r3, [pc, #264]	; (8002958 <HAL_RCC_OscConfig+0x4c4>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002854:	2b00      	cmp	r3, #0
 8002856:	d1f0      	bne.n	800283a <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0308 	and.w	r3, r3, #8
 8002860:	2b00      	cmp	r3, #0
 8002862:	f000 8082 	beq.w	800296a <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	695b      	ldr	r3, [r3, #20]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d05f      	beq.n	800292e <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 800286e:	4b3a      	ldr	r3, [pc, #232]	; (8002958 <HAL_RCC_OscConfig+0x4c4>)
 8002870:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002874:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	699a      	ldr	r2, [r3, #24]
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	f003 0310 	and.w	r3, r3, #16
 8002880:	429a      	cmp	r2, r3
 8002882:	d037      	beq.n	80028f4 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	2b00      	cmp	r3, #0
 800288c:	d006      	beq.n	800289c <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002894:	2b00      	cmp	r3, #0
 8002896:	d101      	bne.n	800289c <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e254      	b.n	8002d46 <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	f003 0301 	and.w	r3, r3, #1
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d01b      	beq.n	80028de <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 80028a6:	4b2c      	ldr	r3, [pc, #176]	; (8002958 <HAL_RCC_OscConfig+0x4c4>)
 80028a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028ac:	4a2a      	ldr	r2, [pc, #168]	; (8002958 <HAL_RCC_OscConfig+0x4c4>)
 80028ae:	f023 0301 	bic.w	r3, r3, #1
 80028b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80028b6:	f7fe fc67 	bl	8001188 <HAL_GetTick>
 80028ba:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028bc:	e008      	b.n	80028d0 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028be:	f7fe fc63 	bl	8001188 <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	2b11      	cmp	r3, #17
 80028ca:	d901      	bls.n	80028d0 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e23a      	b.n	8002d46 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028d0:	4b21      	ldr	r3, [pc, #132]	; (8002958 <HAL_RCC_OscConfig+0x4c4>)
 80028d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1ef      	bne.n	80028be <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 80028de:	4b1e      	ldr	r3, [pc, #120]	; (8002958 <HAL_RCC_OscConfig+0x4c4>)
 80028e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028e4:	f023 0210 	bic.w	r2, r3, #16
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	491a      	ldr	r1, [pc, #104]	; (8002958 <HAL_RCC_OscConfig+0x4c4>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028f4:	4b18      	ldr	r3, [pc, #96]	; (8002958 <HAL_RCC_OscConfig+0x4c4>)
 80028f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028fa:	4a17      	ldr	r2, [pc, #92]	; (8002958 <HAL_RCC_OscConfig+0x4c4>)
 80028fc:	f043 0301 	orr.w	r3, r3, #1
 8002900:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002904:	f7fe fc40 	bl	8001188 <HAL_GetTick>
 8002908:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800290a:	e008      	b.n	800291e <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800290c:	f7fe fc3c 	bl	8001188 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b11      	cmp	r3, #17
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e213      	b.n	8002d46 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800291e:	4b0e      	ldr	r3, [pc, #56]	; (8002958 <HAL_RCC_OscConfig+0x4c4>)
 8002920:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002924:	f003 0302 	and.w	r3, r3, #2
 8002928:	2b00      	cmp	r3, #0
 800292a:	d0ef      	beq.n	800290c <HAL_RCC_OscConfig+0x478>
 800292c:	e01d      	b.n	800296a <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800292e:	4b0a      	ldr	r3, [pc, #40]	; (8002958 <HAL_RCC_OscConfig+0x4c4>)
 8002930:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002934:	4a08      	ldr	r2, [pc, #32]	; (8002958 <HAL_RCC_OscConfig+0x4c4>)
 8002936:	f023 0301 	bic.w	r3, r3, #1
 800293a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800293e:	f7fe fc23 	bl	8001188 <HAL_GetTick>
 8002942:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002944:	e00a      	b.n	800295c <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002946:	f7fe fc1f 	bl	8001188 <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	2b11      	cmp	r3, #17
 8002952:	d903      	bls.n	800295c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e1f6      	b.n	8002d46 <HAL_RCC_OscConfig+0x8b2>
 8002958:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800295c:	4ba9      	ldr	r3, [pc, #676]	; (8002c04 <HAL_RCC_OscConfig+0x770>)
 800295e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d1ed      	bne.n	8002946 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0304 	and.w	r3, r3, #4
 8002972:	2b00      	cmp	r3, #0
 8002974:	f000 80bd 	beq.w	8002af2 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002978:	2300      	movs	r3, #0
 800297a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800297e:	4ba1      	ldr	r3, [pc, #644]	; (8002c04 <HAL_RCC_OscConfig+0x770>)
 8002980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d10e      	bne.n	80029a8 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800298a:	4b9e      	ldr	r3, [pc, #632]	; (8002c04 <HAL_RCC_OscConfig+0x770>)
 800298c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800298e:	4a9d      	ldr	r2, [pc, #628]	; (8002c04 <HAL_RCC_OscConfig+0x770>)
 8002990:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002994:	6593      	str	r3, [r2, #88]	; 0x58
 8002996:	4b9b      	ldr	r3, [pc, #620]	; (8002c04 <HAL_RCC_OscConfig+0x770>)
 8002998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800299a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800299e:	60fb      	str	r3, [r7, #12]
 80029a0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80029a2:	2301      	movs	r3, #1
 80029a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029a8:	4b97      	ldr	r3, [pc, #604]	; (8002c08 <HAL_RCC_OscConfig+0x774>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d118      	bne.n	80029e6 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029b4:	4b94      	ldr	r3, [pc, #592]	; (8002c08 <HAL_RCC_OscConfig+0x774>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a93      	ldr	r2, [pc, #588]	; (8002c08 <HAL_RCC_OscConfig+0x774>)
 80029ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029c0:	f7fe fbe2 	bl	8001188 <HAL_GetTick>
 80029c4:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029c6:	e008      	b.n	80029da <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029c8:	f7fe fbde 	bl	8001188 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e1b5      	b.n	8002d46 <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029da:	4b8b      	ldr	r3, [pc, #556]	; (8002c08 <HAL_RCC_OscConfig+0x774>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d0f0      	beq.n	80029c8 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d02c      	beq.n	8002a4c <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 80029f2:	4b84      	ldr	r3, [pc, #528]	; (8002c04 <HAL_RCC_OscConfig+0x770>)
 80029f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029f8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a04:	497f      	ldr	r1, [pc, #508]	; (8002c04 <HAL_RCC_OscConfig+0x770>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f003 0304 	and.w	r3, r3, #4
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d010      	beq.n	8002a3a <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002a18:	4b7a      	ldr	r3, [pc, #488]	; (8002c04 <HAL_RCC_OscConfig+0x770>)
 8002a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a1e:	4a79      	ldr	r2, [pc, #484]	; (8002c04 <HAL_RCC_OscConfig+0x770>)
 8002a20:	f043 0304 	orr.w	r3, r3, #4
 8002a24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002a28:	4b76      	ldr	r3, [pc, #472]	; (8002c04 <HAL_RCC_OscConfig+0x770>)
 8002a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a2e:	4a75      	ldr	r2, [pc, #468]	; (8002c04 <HAL_RCC_OscConfig+0x770>)
 8002a30:	f043 0301 	orr.w	r3, r3, #1
 8002a34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a38:	e018      	b.n	8002a6c <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002a3a:	4b72      	ldr	r3, [pc, #456]	; (8002c04 <HAL_RCC_OscConfig+0x770>)
 8002a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a40:	4a70      	ldr	r2, [pc, #448]	; (8002c04 <HAL_RCC_OscConfig+0x770>)
 8002a42:	f043 0301 	orr.w	r3, r3, #1
 8002a46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a4a:	e00f      	b.n	8002a6c <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002a4c:	4b6d      	ldr	r3, [pc, #436]	; (8002c04 <HAL_RCC_OscConfig+0x770>)
 8002a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a52:	4a6c      	ldr	r2, [pc, #432]	; (8002c04 <HAL_RCC_OscConfig+0x770>)
 8002a54:	f023 0301 	bic.w	r3, r3, #1
 8002a58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002a5c:	4b69      	ldr	r3, [pc, #420]	; (8002c04 <HAL_RCC_OscConfig+0x770>)
 8002a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a62:	4a68      	ldr	r2, [pc, #416]	; (8002c04 <HAL_RCC_OscConfig+0x770>)
 8002a64:	f023 0304 	bic.w	r3, r3, #4
 8002a68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d016      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a74:	f7fe fb88 	bl	8001188 <HAL_GetTick>
 8002a78:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a7a:	e00a      	b.n	8002a92 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a7c:	f7fe fb84 	bl	8001188 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e159      	b.n	8002d46 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a92:	4b5c      	ldr	r3, [pc, #368]	; (8002c04 <HAL_RCC_OscConfig+0x770>)
 8002a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a98:	f003 0302 	and.w	r3, r3, #2
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d0ed      	beq.n	8002a7c <HAL_RCC_OscConfig+0x5e8>
 8002aa0:	e01d      	b.n	8002ade <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aa2:	f7fe fb71 	bl	8001188 <HAL_GetTick>
 8002aa6:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002aa8:	e00a      	b.n	8002ac0 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aaa:	f7fe fb6d 	bl	8001188 <HAL_GetTick>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d901      	bls.n	8002ac0 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e142      	b.n	8002d46 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ac0:	4b50      	ldr	r3, [pc, #320]	; (8002c04 <HAL_RCC_OscConfig+0x770>)
 8002ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1ed      	bne.n	8002aaa <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8002ace:	4b4d      	ldr	r3, [pc, #308]	; (8002c04 <HAL_RCC_OscConfig+0x770>)
 8002ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad4:	4a4b      	ldr	r2, [pc, #300]	; (8002c04 <HAL_RCC_OscConfig+0x770>)
 8002ad6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ada:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ade:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d105      	bne.n	8002af2 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ae6:	4b47      	ldr	r3, [pc, #284]	; (8002c04 <HAL_RCC_OscConfig+0x770>)
 8002ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aea:	4a46      	ldr	r2, [pc, #280]	; (8002c04 <HAL_RCC_OscConfig+0x770>)
 8002aec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002af0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0320 	and.w	r3, r3, #32
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d03c      	beq.n	8002b78 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d01c      	beq.n	8002b40 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002b06:	4b3f      	ldr	r3, [pc, #252]	; (8002c04 <HAL_RCC_OscConfig+0x770>)
 8002b08:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b0c:	4a3d      	ldr	r2, [pc, #244]	; (8002c04 <HAL_RCC_OscConfig+0x770>)
 8002b0e:	f043 0301 	orr.w	r3, r3, #1
 8002b12:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b16:	f7fe fb37 	bl	8001188 <HAL_GetTick>
 8002b1a:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002b1c:	e008      	b.n	8002b30 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b1e:	f7fe fb33 	bl	8001188 <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d901      	bls.n	8002b30 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e10a      	b.n	8002d46 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002b30:	4b34      	ldr	r3, [pc, #208]	; (8002c04 <HAL_RCC_OscConfig+0x770>)
 8002b32:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d0ef      	beq.n	8002b1e <HAL_RCC_OscConfig+0x68a>
 8002b3e:	e01b      	b.n	8002b78 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b40:	4b30      	ldr	r3, [pc, #192]	; (8002c04 <HAL_RCC_OscConfig+0x770>)
 8002b42:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b46:	4a2f      	ldr	r2, [pc, #188]	; (8002c04 <HAL_RCC_OscConfig+0x770>)
 8002b48:	f023 0301 	bic.w	r3, r3, #1
 8002b4c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b50:	f7fe fb1a 	bl	8001188 <HAL_GetTick>
 8002b54:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002b56:	e008      	b.n	8002b6a <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b58:	f7fe fb16 	bl	8001188 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e0ed      	b.n	8002d46 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002b6a:	4b26      	ldr	r3, [pc, #152]	; (8002c04 <HAL_RCC_OscConfig+0x770>)
 8002b6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b70:	f003 0302 	and.w	r3, r3, #2
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d1ef      	bne.n	8002b58 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	f000 80e1 	beq.w	8002d44 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	f040 80b5 	bne.w	8002cf6 <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002b8c:	4b1d      	ldr	r3, [pc, #116]	; (8002c04 <HAL_RCC_OscConfig+0x770>)
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	f003 0203 	and.w	r2, r3, #3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d124      	bne.n	8002bea <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002baa:	3b01      	subs	r3, #1
 8002bac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d11b      	bne.n	8002bea <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bbc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d113      	bne.n	8002bea <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bcc:	085b      	lsrs	r3, r3, #1
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d109      	bne.n	8002bea <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be0:	085b      	lsrs	r3, r3, #1
 8002be2:	3b01      	subs	r3, #1
 8002be4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d05f      	beq.n	8002caa <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bea:	6a3b      	ldr	r3, [r7, #32]
 8002bec:	2b0c      	cmp	r3, #12
 8002bee:	d05a      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002bf0:	4b04      	ldr	r3, [pc, #16]	; (8002c04 <HAL_RCC_OscConfig+0x770>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a03      	ldr	r2, [pc, #12]	; (8002c04 <HAL_RCC_OscConfig+0x770>)
 8002bf6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bfa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002bfc:	f7fe fac4 	bl	8001188 <HAL_GetTick>
 8002c00:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c02:	e00c      	b.n	8002c1e <HAL_RCC_OscConfig+0x78a>
 8002c04:	40021000 	.word	0x40021000
 8002c08:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c0c:	f7fe fabc 	bl	8001188 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e093      	b.n	8002d46 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c1e:	4b4c      	ldr	r3, [pc, #304]	; (8002d50 <HAL_RCC_OscConfig+0x8bc>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d1f0      	bne.n	8002c0c <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c2a:	4b49      	ldr	r3, [pc, #292]	; (8002d50 <HAL_RCC_OscConfig+0x8bc>)
 8002c2c:	68da      	ldr	r2, [r3, #12]
 8002c2e:	4b49      	ldr	r3, [pc, #292]	; (8002d54 <HAL_RCC_OscConfig+0x8c0>)
 8002c30:	4013      	ands	r3, r2
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c3a:	3a01      	subs	r2, #1
 8002c3c:	0112      	lsls	r2, r2, #4
 8002c3e:	4311      	orrs	r1, r2
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c44:	0212      	lsls	r2, r2, #8
 8002c46:	4311      	orrs	r1, r2
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002c4c:	0852      	lsrs	r2, r2, #1
 8002c4e:	3a01      	subs	r2, #1
 8002c50:	0552      	lsls	r2, r2, #21
 8002c52:	4311      	orrs	r1, r2
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002c58:	0852      	lsrs	r2, r2, #1
 8002c5a:	3a01      	subs	r2, #1
 8002c5c:	0652      	lsls	r2, r2, #25
 8002c5e:	430a      	orrs	r2, r1
 8002c60:	493b      	ldr	r1, [pc, #236]	; (8002d50 <HAL_RCC_OscConfig+0x8bc>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002c66:	4b3a      	ldr	r3, [pc, #232]	; (8002d50 <HAL_RCC_OscConfig+0x8bc>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a39      	ldr	r2, [pc, #228]	; (8002d50 <HAL_RCC_OscConfig+0x8bc>)
 8002c6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c70:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c72:	4b37      	ldr	r3, [pc, #220]	; (8002d50 <HAL_RCC_OscConfig+0x8bc>)
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	4a36      	ldr	r2, [pc, #216]	; (8002d50 <HAL_RCC_OscConfig+0x8bc>)
 8002c78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c7c:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c7e:	f7fe fa83 	bl	8001188 <HAL_GetTick>
 8002c82:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c84:	e008      	b.n	8002c98 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c86:	f7fe fa7f 	bl	8001188 <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d901      	bls.n	8002c98 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	e056      	b.n	8002d46 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c98:	4b2d      	ldr	r3, [pc, #180]	; (8002d50 <HAL_RCC_OscConfig+0x8bc>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d0f0      	beq.n	8002c86 <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ca4:	e04e      	b.n	8002d44 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e04d      	b.n	8002d46 <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002caa:	4b29      	ldr	r3, [pc, #164]	; (8002d50 <HAL_RCC_OscConfig+0x8bc>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d146      	bne.n	8002d44 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002cb6:	4b26      	ldr	r3, [pc, #152]	; (8002d50 <HAL_RCC_OscConfig+0x8bc>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a25      	ldr	r2, [pc, #148]	; (8002d50 <HAL_RCC_OscConfig+0x8bc>)
 8002cbc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cc0:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002cc2:	4b23      	ldr	r3, [pc, #140]	; (8002d50 <HAL_RCC_OscConfig+0x8bc>)
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	4a22      	ldr	r2, [pc, #136]	; (8002d50 <HAL_RCC_OscConfig+0x8bc>)
 8002cc8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ccc:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002cce:	f7fe fa5b 	bl	8001188 <HAL_GetTick>
 8002cd2:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cd4:	e008      	b.n	8002ce8 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cd6:	f7fe fa57 	bl	8001188 <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d901      	bls.n	8002ce8 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e02e      	b.n	8002d46 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ce8:	4b19      	ldr	r3, [pc, #100]	; (8002d50 <HAL_RCC_OscConfig+0x8bc>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d0f0      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x842>
 8002cf4:	e026      	b.n	8002d44 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cf6:	6a3b      	ldr	r3, [r7, #32]
 8002cf8:	2b0c      	cmp	r3, #12
 8002cfa:	d021      	beq.n	8002d40 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cfc:	4b14      	ldr	r3, [pc, #80]	; (8002d50 <HAL_RCC_OscConfig+0x8bc>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a13      	ldr	r2, [pc, #76]	; (8002d50 <HAL_RCC_OscConfig+0x8bc>)
 8002d02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d08:	f7fe fa3e 	bl	8001188 <HAL_GetTick>
 8002d0c:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d0e:	e008      	b.n	8002d22 <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d10:	f7fe fa3a 	bl	8001188 <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e011      	b.n	8002d46 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d22:	4b0b      	ldr	r3, [pc, #44]	; (8002d50 <HAL_RCC_OscConfig+0x8bc>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d1f0      	bne.n	8002d10 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8002d2e:	4b08      	ldr	r3, [pc, #32]	; (8002d50 <HAL_RCC_OscConfig+0x8bc>)
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	4a07      	ldr	r2, [pc, #28]	; (8002d50 <HAL_RCC_OscConfig+0x8bc>)
 8002d34:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002d38:	f023 0303 	bic.w	r3, r3, #3
 8002d3c:	60d3      	str	r3, [r2, #12]
 8002d3e:	e001      	b.n	8002d44 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e000      	b.n	8002d46 <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3728      	adds	r7, #40	; 0x28
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	40021000 	.word	0x40021000
 8002d54:	f99f808c 	.word	0xf99f808c

08002d58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d101      	bne.n	8002d6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e0e7      	b.n	8002f3c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d6c:	4b75      	ldr	r3, [pc, #468]	; (8002f44 <HAL_RCC_ClockConfig+0x1ec>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0307 	and.w	r3, r3, #7
 8002d74:	683a      	ldr	r2, [r7, #0]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d910      	bls.n	8002d9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d7a:	4b72      	ldr	r3, [pc, #456]	; (8002f44 <HAL_RCC_ClockConfig+0x1ec>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f023 0207 	bic.w	r2, r3, #7
 8002d82:	4970      	ldr	r1, [pc, #448]	; (8002f44 <HAL_RCC_ClockConfig+0x1ec>)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d8a:	4b6e      	ldr	r3, [pc, #440]	; (8002f44 <HAL_RCC_ClockConfig+0x1ec>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0307 	and.w	r3, r3, #7
 8002d92:	683a      	ldr	r2, [r7, #0]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d001      	beq.n	8002d9c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e0cf      	b.n	8002f3c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0302 	and.w	r3, r3, #2
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d010      	beq.n	8002dca <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689a      	ldr	r2, [r3, #8]
 8002dac:	4b66      	ldr	r3, [pc, #408]	; (8002f48 <HAL_RCC_ClockConfig+0x1f0>)
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d908      	bls.n	8002dca <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002db8:	4b63      	ldr	r3, [pc, #396]	; (8002f48 <HAL_RCC_ClockConfig+0x1f0>)
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	4960      	ldr	r1, [pc, #384]	; (8002f48 <HAL_RCC_ClockConfig+0x1f0>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d04c      	beq.n	8002e70 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	2b03      	cmp	r3, #3
 8002ddc:	d107      	bne.n	8002dee <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dde:	4b5a      	ldr	r3, [pc, #360]	; (8002f48 <HAL_RCC_ClockConfig+0x1f0>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d121      	bne.n	8002e2e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e0a6      	b.n	8002f3c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d107      	bne.n	8002e06 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002df6:	4b54      	ldr	r3, [pc, #336]	; (8002f48 <HAL_RCC_ClockConfig+0x1f0>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d115      	bne.n	8002e2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e09a      	b.n	8002f3c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d107      	bne.n	8002e1e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e0e:	4b4e      	ldr	r3, [pc, #312]	; (8002f48 <HAL_RCC_ClockConfig+0x1f0>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d109      	bne.n	8002e2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e08e      	b.n	8002f3c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e1e:	4b4a      	ldr	r3, [pc, #296]	; (8002f48 <HAL_RCC_ClockConfig+0x1f0>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d101      	bne.n	8002e2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e086      	b.n	8002f3c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e2e:	4b46      	ldr	r3, [pc, #280]	; (8002f48 <HAL_RCC_ClockConfig+0x1f0>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f023 0203 	bic.w	r2, r3, #3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	4943      	ldr	r1, [pc, #268]	; (8002f48 <HAL_RCC_ClockConfig+0x1f0>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e40:	f7fe f9a2 	bl	8001188 <HAL_GetTick>
 8002e44:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e46:	e00a      	b.n	8002e5e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e48:	f7fe f99e 	bl	8001188 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e06e      	b.n	8002f3c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e5e:	4b3a      	ldr	r3, [pc, #232]	; (8002f48 <HAL_RCC_ClockConfig+0x1f0>)
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f003 020c 	and.w	r2, r3, #12
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d1eb      	bne.n	8002e48 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0302 	and.w	r3, r3, #2
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d010      	beq.n	8002e9e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	689a      	ldr	r2, [r3, #8]
 8002e80:	4b31      	ldr	r3, [pc, #196]	; (8002f48 <HAL_RCC_ClockConfig+0x1f0>)
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d208      	bcs.n	8002e9e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e8c:	4b2e      	ldr	r3, [pc, #184]	; (8002f48 <HAL_RCC_ClockConfig+0x1f0>)
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	492b      	ldr	r1, [pc, #172]	; (8002f48 <HAL_RCC_ClockConfig+0x1f0>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e9e:	4b29      	ldr	r3, [pc, #164]	; (8002f44 <HAL_RCC_ClockConfig+0x1ec>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0307 	and.w	r3, r3, #7
 8002ea6:	683a      	ldr	r2, [r7, #0]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d210      	bcs.n	8002ece <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eac:	4b25      	ldr	r3, [pc, #148]	; (8002f44 <HAL_RCC_ClockConfig+0x1ec>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f023 0207 	bic.w	r2, r3, #7
 8002eb4:	4923      	ldr	r1, [pc, #140]	; (8002f44 <HAL_RCC_ClockConfig+0x1ec>)
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ebc:	4b21      	ldr	r3, [pc, #132]	; (8002f44 <HAL_RCC_ClockConfig+0x1ec>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0307 	and.w	r3, r3, #7
 8002ec4:	683a      	ldr	r2, [r7, #0]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d001      	beq.n	8002ece <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e036      	b.n	8002f3c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0304 	and.w	r3, r3, #4
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d008      	beq.n	8002eec <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002eda:	4b1b      	ldr	r3, [pc, #108]	; (8002f48 <HAL_RCC_ClockConfig+0x1f0>)
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	4918      	ldr	r1, [pc, #96]	; (8002f48 <HAL_RCC_ClockConfig+0x1f0>)
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0308 	and.w	r3, r3, #8
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d009      	beq.n	8002f0c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ef8:	4b13      	ldr	r3, [pc, #76]	; (8002f48 <HAL_RCC_ClockConfig+0x1f0>)
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	691b      	ldr	r3, [r3, #16]
 8002f04:	00db      	lsls	r3, r3, #3
 8002f06:	4910      	ldr	r1, [pc, #64]	; (8002f48 <HAL_RCC_ClockConfig+0x1f0>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f0c:	f000 f824 	bl	8002f58 <HAL_RCC_GetSysClockFreq>
 8002f10:	4602      	mov	r2, r0
 8002f12:	4b0d      	ldr	r3, [pc, #52]	; (8002f48 <HAL_RCC_ClockConfig+0x1f0>)
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	091b      	lsrs	r3, r3, #4
 8002f18:	f003 030f 	and.w	r3, r3, #15
 8002f1c:	490b      	ldr	r1, [pc, #44]	; (8002f4c <HAL_RCC_ClockConfig+0x1f4>)
 8002f1e:	5ccb      	ldrb	r3, [r1, r3]
 8002f20:	f003 031f 	and.w	r3, r3, #31
 8002f24:	fa22 f303 	lsr.w	r3, r2, r3
 8002f28:	4a09      	ldr	r2, [pc, #36]	; (8002f50 <HAL_RCC_ClockConfig+0x1f8>)
 8002f2a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002f2c:	4b09      	ldr	r3, [pc, #36]	; (8002f54 <HAL_RCC_ClockConfig+0x1fc>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7fd ff6f 	bl	8000e14 <HAL_InitTick>
 8002f36:	4603      	mov	r3, r0
 8002f38:	72fb      	strb	r3, [r7, #11]

  return status;
 8002f3a:	7afb      	ldrb	r3, [r7, #11]
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3710      	adds	r7, #16
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	40022000 	.word	0x40022000
 8002f48:	40021000 	.word	0x40021000
 8002f4c:	08008f04 	.word	0x08008f04
 8002f50:	20000000 	.word	0x20000000
 8002f54:	20000004 	.word	0x20000004

08002f58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b089      	sub	sp, #36	; 0x24
 8002f5c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	61fb      	str	r3, [r7, #28]
 8002f62:	2300      	movs	r3, #0
 8002f64:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f66:	4b3e      	ldr	r3, [pc, #248]	; (8003060 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f003 030c 	and.w	r3, r3, #12
 8002f6e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f70:	4b3b      	ldr	r3, [pc, #236]	; (8003060 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	f003 0303 	and.w	r3, r3, #3
 8002f78:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d005      	beq.n	8002f8c <HAL_RCC_GetSysClockFreq+0x34>
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	2b0c      	cmp	r3, #12
 8002f84:	d121      	bne.n	8002fca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d11e      	bne.n	8002fca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002f8c:	4b34      	ldr	r3, [pc, #208]	; (8003060 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0308 	and.w	r3, r3, #8
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d107      	bne.n	8002fa8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002f98:	4b31      	ldr	r3, [pc, #196]	; (8003060 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f9e:	0a1b      	lsrs	r3, r3, #8
 8002fa0:	f003 030f 	and.w	r3, r3, #15
 8002fa4:	61fb      	str	r3, [r7, #28]
 8002fa6:	e005      	b.n	8002fb4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002fa8:	4b2d      	ldr	r3, [pc, #180]	; (8003060 <HAL_RCC_GetSysClockFreq+0x108>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	091b      	lsrs	r3, r3, #4
 8002fae:	f003 030f 	and.w	r3, r3, #15
 8002fb2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002fb4:	4a2b      	ldr	r2, [pc, #172]	; (8003064 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fbc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d10d      	bne.n	8002fe0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fc8:	e00a      	b.n	8002fe0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	2b04      	cmp	r3, #4
 8002fce:	d102      	bne.n	8002fd6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002fd0:	4b25      	ldr	r3, [pc, #148]	; (8003068 <HAL_RCC_GetSysClockFreq+0x110>)
 8002fd2:	61bb      	str	r3, [r7, #24]
 8002fd4:	e004      	b.n	8002fe0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	2b08      	cmp	r3, #8
 8002fda:	d101      	bne.n	8002fe0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002fdc:	4b23      	ldr	r3, [pc, #140]	; (800306c <HAL_RCC_GetSysClockFreq+0x114>)
 8002fde:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	2b0c      	cmp	r3, #12
 8002fe4:	d134      	bne.n	8003050 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002fe6:	4b1e      	ldr	r3, [pc, #120]	; (8003060 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	f003 0303 	and.w	r3, r3, #3
 8002fee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d003      	beq.n	8002ffe <HAL_RCC_GetSysClockFreq+0xa6>
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	2b03      	cmp	r3, #3
 8002ffa:	d003      	beq.n	8003004 <HAL_RCC_GetSysClockFreq+0xac>
 8002ffc:	e005      	b.n	800300a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002ffe:	4b1a      	ldr	r3, [pc, #104]	; (8003068 <HAL_RCC_GetSysClockFreq+0x110>)
 8003000:	617b      	str	r3, [r7, #20]
      break;
 8003002:	e005      	b.n	8003010 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003004:	4b19      	ldr	r3, [pc, #100]	; (800306c <HAL_RCC_GetSysClockFreq+0x114>)
 8003006:	617b      	str	r3, [r7, #20]
      break;
 8003008:	e002      	b.n	8003010 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	617b      	str	r3, [r7, #20]
      break;
 800300e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003010:	4b13      	ldr	r3, [pc, #76]	; (8003060 <HAL_RCC_GetSysClockFreq+0x108>)
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	091b      	lsrs	r3, r3, #4
 8003016:	f003 0307 	and.w	r3, r3, #7
 800301a:	3301      	adds	r3, #1
 800301c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800301e:	4b10      	ldr	r3, [pc, #64]	; (8003060 <HAL_RCC_GetSysClockFreq+0x108>)
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	0a1b      	lsrs	r3, r3, #8
 8003024:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003028:	697a      	ldr	r2, [r7, #20]
 800302a:	fb03 f202 	mul.w	r2, r3, r2
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	fbb2 f3f3 	udiv	r3, r2, r3
 8003034:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003036:	4b0a      	ldr	r3, [pc, #40]	; (8003060 <HAL_RCC_GetSysClockFreq+0x108>)
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	0e5b      	lsrs	r3, r3, #25
 800303c:	f003 0303 	and.w	r3, r3, #3
 8003040:	3301      	adds	r3, #1
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003046:	697a      	ldr	r2, [r7, #20]
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	fbb2 f3f3 	udiv	r3, r2, r3
 800304e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003050:	69bb      	ldr	r3, [r7, #24]
}
 8003052:	4618      	mov	r0, r3
 8003054:	3724      	adds	r7, #36	; 0x24
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	40021000 	.word	0x40021000
 8003064:	08008f1c 	.word	0x08008f1c
 8003068:	00f42400 	.word	0x00f42400
 800306c:	007a1200 	.word	0x007a1200

08003070 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003070:	b480      	push	{r7}
 8003072:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003074:	4b03      	ldr	r3, [pc, #12]	; (8003084 <HAL_RCC_GetHCLKFreq+0x14>)
 8003076:	681b      	ldr	r3, [r3, #0]
}
 8003078:	4618      	mov	r0, r3
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	20000000 	.word	0x20000000

08003088 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800308c:	f7ff fff0 	bl	8003070 <HAL_RCC_GetHCLKFreq>
 8003090:	4602      	mov	r2, r0
 8003092:	4b06      	ldr	r3, [pc, #24]	; (80030ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	0a1b      	lsrs	r3, r3, #8
 8003098:	f003 0307 	and.w	r3, r3, #7
 800309c:	4904      	ldr	r1, [pc, #16]	; (80030b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800309e:	5ccb      	ldrb	r3, [r1, r3]
 80030a0:	f003 031f 	and.w	r3, r3, #31
 80030a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	40021000 	.word	0x40021000
 80030b0:	08008f14 	.word	0x08008f14

080030b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80030b8:	f7ff ffda 	bl	8003070 <HAL_RCC_GetHCLKFreq>
 80030bc:	4602      	mov	r2, r0
 80030be:	4b06      	ldr	r3, [pc, #24]	; (80030d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	0adb      	lsrs	r3, r3, #11
 80030c4:	f003 0307 	and.w	r3, r3, #7
 80030c8:	4904      	ldr	r1, [pc, #16]	; (80030dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80030ca:	5ccb      	ldrb	r3, [r1, r3]
 80030cc:	f003 031f 	and.w	r3, r3, #31
 80030d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	40021000 	.word	0x40021000
 80030dc:	08008f14 	.word	0x08008f14

080030e0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	220f      	movs	r2, #15
 80030ee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80030f0:	4b12      	ldr	r3, [pc, #72]	; (800313c <HAL_RCC_GetClockConfig+0x5c>)
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f003 0203 	and.w	r2, r3, #3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80030fc:	4b0f      	ldr	r3, [pc, #60]	; (800313c <HAL_RCC_GetClockConfig+0x5c>)
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003108:	4b0c      	ldr	r3, [pc, #48]	; (800313c <HAL_RCC_GetClockConfig+0x5c>)
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003114:	4b09      	ldr	r3, [pc, #36]	; (800313c <HAL_RCC_GetClockConfig+0x5c>)
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	08db      	lsrs	r3, r3, #3
 800311a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003122:	4b07      	ldr	r3, [pc, #28]	; (8003140 <HAL_RCC_GetClockConfig+0x60>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0207 	and.w	r2, r3, #7
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	601a      	str	r2, [r3, #0]
}
 800312e:	bf00      	nop
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	40021000 	.word	0x40021000
 8003140:	40022000 	.word	0x40022000

08003144 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b086      	sub	sp, #24
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800314c:	2300      	movs	r3, #0
 800314e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003150:	4b2a      	ldr	r3, [pc, #168]	; (80031fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003154:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d003      	beq.n	8003164 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800315c:	f7ff f936 	bl	80023cc <HAL_PWREx_GetVoltageRange>
 8003160:	6178      	str	r0, [r7, #20]
 8003162:	e014      	b.n	800318e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003164:	4b25      	ldr	r3, [pc, #148]	; (80031fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003168:	4a24      	ldr	r2, [pc, #144]	; (80031fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800316a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800316e:	6593      	str	r3, [r2, #88]	; 0x58
 8003170:	4b22      	ldr	r3, [pc, #136]	; (80031fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003174:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003178:	60fb      	str	r3, [r7, #12]
 800317a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800317c:	f7ff f926 	bl	80023cc <HAL_PWREx_GetVoltageRange>
 8003180:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003182:	4b1e      	ldr	r3, [pc, #120]	; (80031fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003186:	4a1d      	ldr	r2, [pc, #116]	; (80031fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003188:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800318c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003194:	d10b      	bne.n	80031ae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2b80      	cmp	r3, #128	; 0x80
 800319a:	d919      	bls.n	80031d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2ba0      	cmp	r3, #160	; 0xa0
 80031a0:	d902      	bls.n	80031a8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80031a2:	2302      	movs	r3, #2
 80031a4:	613b      	str	r3, [r7, #16]
 80031a6:	e013      	b.n	80031d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031a8:	2301      	movs	r3, #1
 80031aa:	613b      	str	r3, [r7, #16]
 80031ac:	e010      	b.n	80031d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2b80      	cmp	r3, #128	; 0x80
 80031b2:	d902      	bls.n	80031ba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80031b4:	2303      	movs	r3, #3
 80031b6:	613b      	str	r3, [r7, #16]
 80031b8:	e00a      	b.n	80031d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2b80      	cmp	r3, #128	; 0x80
 80031be:	d102      	bne.n	80031c6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80031c0:	2302      	movs	r3, #2
 80031c2:	613b      	str	r3, [r7, #16]
 80031c4:	e004      	b.n	80031d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2b70      	cmp	r3, #112	; 0x70
 80031ca:	d101      	bne.n	80031d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031cc:	2301      	movs	r3, #1
 80031ce:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80031d0:	4b0b      	ldr	r3, [pc, #44]	; (8003200 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f023 0207 	bic.w	r2, r3, #7
 80031d8:	4909      	ldr	r1, [pc, #36]	; (8003200 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	4313      	orrs	r3, r2
 80031de:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80031e0:	4b07      	ldr	r3, [pc, #28]	; (8003200 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0307 	and.w	r3, r3, #7
 80031e8:	693a      	ldr	r2, [r7, #16]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d001      	beq.n	80031f2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e000      	b.n	80031f4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80031f2:	2300      	movs	r3, #0
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3718      	adds	r7, #24
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	40021000 	.word	0x40021000
 8003200:	40022000 	.word	0x40022000

08003204 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b086      	sub	sp, #24
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800320c:	2300      	movs	r3, #0
 800320e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003210:	2300      	movs	r3, #0
 8003212:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800321c:	2b00      	cmp	r3, #0
 800321e:	f000 809e 	beq.w	800335e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003222:	2300      	movs	r3, #0
 8003224:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003226:	4b46      	ldr	r3, [pc, #280]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800322a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d101      	bne.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003232:	2301      	movs	r3, #1
 8003234:	e000      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8003236:	2300      	movs	r3, #0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d00d      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800323c:	4b40      	ldr	r3, [pc, #256]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800323e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003240:	4a3f      	ldr	r2, [pc, #252]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003242:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003246:	6593      	str	r3, [r2, #88]	; 0x58
 8003248:	4b3d      	ldr	r3, [pc, #244]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800324a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800324c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003250:	60bb      	str	r3, [r7, #8]
 8003252:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003254:	2301      	movs	r3, #1
 8003256:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003258:	4b3a      	ldr	r3, [pc, #232]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a39      	ldr	r2, [pc, #228]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800325e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003262:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003264:	f7fd ff90 	bl	8001188 <HAL_GetTick>
 8003268:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800326a:	e009      	b.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800326c:	f7fd ff8c 	bl	8001188 <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	2b02      	cmp	r3, #2
 8003278:	d902      	bls.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	74fb      	strb	r3, [r7, #19]
        break;
 800327e:	e005      	b.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003280:	4b30      	ldr	r3, [pc, #192]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003288:	2b00      	cmp	r3, #0
 800328a:	d0ef      	beq.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 800328c:	7cfb      	ldrb	r3, [r7, #19]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d15a      	bne.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003292:	4b2b      	ldr	r3, [pc, #172]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003298:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800329c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d01e      	beq.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a8:	697a      	ldr	r2, [r7, #20]
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d019      	beq.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80032ae:	4b24      	ldr	r3, [pc, #144]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80032b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032b8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80032ba:	4b21      	ldr	r3, [pc, #132]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80032bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032c0:	4a1f      	ldr	r2, [pc, #124]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80032c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80032ca:	4b1d      	ldr	r3, [pc, #116]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80032cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032d0:	4a1b      	ldr	r2, [pc, #108]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80032d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80032da:	4a19      	ldr	r2, [pc, #100]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	f003 0301 	and.w	r3, r3, #1
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d016      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ec:	f7fd ff4c 	bl	8001188 <HAL_GetTick>
 80032f0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032f2:	e00b      	b.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032f4:	f7fd ff48 	bl	8001188 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003302:	4293      	cmp	r3, r2
 8003304:	d902      	bls.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	74fb      	strb	r3, [r7, #19]
            break;
 800330a:	e006      	b.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800330c:	4b0c      	ldr	r3, [pc, #48]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800330e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b00      	cmp	r3, #0
 8003318:	d0ec      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 800331a:	7cfb      	ldrb	r3, [r7, #19]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d10b      	bne.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003320:	4b07      	ldr	r3, [pc, #28]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003326:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332e:	4904      	ldr	r1, [pc, #16]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003330:	4313      	orrs	r3, r2
 8003332:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003336:	e009      	b.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003338:	7cfb      	ldrb	r3, [r7, #19]
 800333a:	74bb      	strb	r3, [r7, #18]
 800333c:	e006      	b.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x148>
 800333e:	bf00      	nop
 8003340:	40021000 	.word	0x40021000
 8003344:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003348:	7cfb      	ldrb	r3, [r7, #19]
 800334a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800334c:	7c7b      	ldrb	r3, [r7, #17]
 800334e:	2b01      	cmp	r3, #1
 8003350:	d105      	bne.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003352:	4b6e      	ldr	r3, [pc, #440]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003356:	4a6d      	ldr	r2, [pc, #436]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003358:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800335c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0301 	and.w	r3, r3, #1
 8003366:	2b00      	cmp	r3, #0
 8003368:	d00a      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800336a:	4b68      	ldr	r3, [pc, #416]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800336c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003370:	f023 0203 	bic.w	r2, r3, #3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	4964      	ldr	r1, [pc, #400]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800337a:	4313      	orrs	r3, r2
 800337c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0302 	and.w	r3, r3, #2
 8003388:	2b00      	cmp	r3, #0
 800338a:	d00a      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800338c:	4b5f      	ldr	r3, [pc, #380]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800338e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003392:	f023 020c 	bic.w	r2, r3, #12
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	495c      	ldr	r1, [pc, #368]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800339c:	4313      	orrs	r3, r2
 800339e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0304 	and.w	r3, r3, #4
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d00a      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80033ae:	4b57      	ldr	r3, [pc, #348]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80033b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033b4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	4953      	ldr	r1, [pc, #332]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0320 	and.w	r3, r3, #32
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d00a      	beq.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80033d0:	4b4e      	ldr	r3, [pc, #312]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80033d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	494b      	ldr	r1, [pc, #300]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d00a      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80033f2:	4b46      	ldr	r3, [pc, #280]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80033f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033f8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a1b      	ldr	r3, [r3, #32]
 8003400:	4942      	ldr	r1, [pc, #264]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003402:	4313      	orrs	r3, r2
 8003404:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003410:	2b00      	cmp	r3, #0
 8003412:	d00a      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003414:	4b3d      	ldr	r3, [pc, #244]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800341a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003422:	493a      	ldr	r1, [pc, #232]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003424:	4313      	orrs	r3, r2
 8003426:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00a      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003436:	4b35      	ldr	r3, [pc, #212]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800343c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	695b      	ldr	r3, [r3, #20]
 8003444:	4931      	ldr	r1, [pc, #196]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003446:	4313      	orrs	r3, r2
 8003448:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003454:	2b00      	cmp	r3, #0
 8003456:	d00a      	beq.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003458:	4b2c      	ldr	r3, [pc, #176]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800345a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800345e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	699b      	ldr	r3, [r3, #24]
 8003466:	4929      	ldr	r1, [pc, #164]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003468:	4313      	orrs	r3, r2
 800346a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00a      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800347a:	4b24      	ldr	r3, [pc, #144]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800347c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003480:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	69db      	ldr	r3, [r3, #28]
 8003488:	4920      	ldr	r1, [pc, #128]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800348a:	4313      	orrs	r3, r2
 800348c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d015      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800349c:	4b1b      	ldr	r3, [pc, #108]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800349e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034a2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034aa:	4918      	ldr	r1, [pc, #96]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034ba:	d105      	bne.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034bc:	4b13      	ldr	r3, [pc, #76]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	4a12      	ldr	r2, [pc, #72]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80034c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034c6:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d015      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80034d4:	4b0d      	ldr	r3, [pc, #52]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80034d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e2:	490a      	ldr	r1, [pc, #40]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034f2:	d105      	bne.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034f4:	4b05      	ldr	r3, [pc, #20]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	4a04      	ldr	r2, [pc, #16]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80034fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034fe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003500:	7cbb      	ldrb	r3, [r7, #18]
}
 8003502:	4618      	mov	r0, r3
 8003504:	3718      	adds	r7, #24
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	40021000 	.word	0x40021000

08003510 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003510:	b480      	push	{r7}
 8003512:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003514:	4b05      	ldr	r3, [pc, #20]	; (800352c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a04      	ldr	r2, [pc, #16]	; (800352c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800351a:	f043 0304 	orr.w	r3, r3, #4
 800351e:	6013      	str	r3, [r2, #0]
}
 8003520:	bf00      	nop
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	40021000 	.word	0x40021000

08003530 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d101      	bne.n	8003542 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e049      	b.n	80035d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2b00      	cmp	r3, #0
 800354c:	d106      	bne.n	800355c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 f841 	bl	80035de <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2202      	movs	r2, #2
 8003560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	3304      	adds	r3, #4
 800356c:	4619      	mov	r1, r3
 800356e:	4610      	mov	r0, r2
 8003570:	f000 f9be 	bl	80038f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3708      	adds	r7, #8
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}

080035de <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80035de:	b480      	push	{r7}
 80035e0:	b083      	sub	sp, #12
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80035e6:	bf00      	nop
 80035e8:	370c      	adds	r7, #12
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
	...

080035f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b085      	sub	sp, #20
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003602:	b2db      	uxtb	r3, r3
 8003604:	2b01      	cmp	r3, #1
 8003606:	d001      	beq.n	800360c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e03b      	b.n	8003684 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2202      	movs	r2, #2
 8003610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68da      	ldr	r2, [r3, #12]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f042 0201 	orr.w	r2, r2, #1
 8003622:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a19      	ldr	r2, [pc, #100]	; (8003690 <HAL_TIM_Base_Start_IT+0x9c>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d009      	beq.n	8003642 <HAL_TIM_Base_Start_IT+0x4e>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003636:	d004      	beq.n	8003642 <HAL_TIM_Base_Start_IT+0x4e>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a15      	ldr	r2, [pc, #84]	; (8003694 <HAL_TIM_Base_Start_IT+0xa0>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d115      	bne.n	800366e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	689a      	ldr	r2, [r3, #8]
 8003648:	4b13      	ldr	r3, [pc, #76]	; (8003698 <HAL_TIM_Base_Start_IT+0xa4>)
 800364a:	4013      	ands	r3, r2
 800364c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2b06      	cmp	r3, #6
 8003652:	d015      	beq.n	8003680 <HAL_TIM_Base_Start_IT+0x8c>
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800365a:	d011      	beq.n	8003680 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f042 0201 	orr.w	r2, r2, #1
 800366a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800366c:	e008      	b.n	8003680 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f042 0201 	orr.w	r2, r2, #1
 800367c:	601a      	str	r2, [r3, #0]
 800367e:	e000      	b.n	8003682 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003680:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	4618      	mov	r0, r3
 8003686:	3714      	adds	r7, #20
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr
 8003690:	40012c00 	.word	0x40012c00
 8003694:	40014000 	.word	0x40014000
 8003698:	00010007 	.word	0x00010007

0800369c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	691b      	ldr	r3, [r3, #16]
 80036b2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	f003 0302 	and.w	r3, r3, #2
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d020      	beq.n	8003700 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f003 0302 	and.w	r3, r3, #2
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d01b      	beq.n	8003700 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f06f 0202 	mvn.w	r2, #2
 80036d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2201      	movs	r2, #1
 80036d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	699b      	ldr	r3, [r3, #24]
 80036de:	f003 0303 	and.w	r3, r3, #3
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d003      	beq.n	80036ee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 f8e4 	bl	80038b4 <HAL_TIM_IC_CaptureCallback>
 80036ec:	e005      	b.n	80036fa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 f8d6 	bl	80038a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f000 f8e7 	bl	80038c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	f003 0304 	and.w	r3, r3, #4
 8003706:	2b00      	cmp	r3, #0
 8003708:	d020      	beq.n	800374c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f003 0304 	and.w	r3, r3, #4
 8003710:	2b00      	cmp	r3, #0
 8003712:	d01b      	beq.n	800374c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f06f 0204 	mvn.w	r2, #4
 800371c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2202      	movs	r2, #2
 8003722:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800372e:	2b00      	cmp	r3, #0
 8003730:	d003      	beq.n	800373a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 f8be 	bl	80038b4 <HAL_TIM_IC_CaptureCallback>
 8003738:	e005      	b.n	8003746 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 f8b0 	bl	80038a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f000 f8c1 	bl	80038c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	f003 0308 	and.w	r3, r3, #8
 8003752:	2b00      	cmp	r3, #0
 8003754:	d020      	beq.n	8003798 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f003 0308 	and.w	r3, r3, #8
 800375c:	2b00      	cmp	r3, #0
 800375e:	d01b      	beq.n	8003798 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f06f 0208 	mvn.w	r2, #8
 8003768:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2204      	movs	r2, #4
 800376e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	69db      	ldr	r3, [r3, #28]
 8003776:	f003 0303 	and.w	r3, r3, #3
 800377a:	2b00      	cmp	r3, #0
 800377c:	d003      	beq.n	8003786 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 f898 	bl	80038b4 <HAL_TIM_IC_CaptureCallback>
 8003784:	e005      	b.n	8003792 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 f88a 	bl	80038a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f000 f89b 	bl	80038c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	f003 0310 	and.w	r3, r3, #16
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d020      	beq.n	80037e4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f003 0310 	and.w	r3, r3, #16
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d01b      	beq.n	80037e4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f06f 0210 	mvn.w	r2, #16
 80037b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2208      	movs	r2, #8
 80037ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	69db      	ldr	r3, [r3, #28]
 80037c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d003      	beq.n	80037d2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 f872 	bl	80038b4 <HAL_TIM_IC_CaptureCallback>
 80037d0:	e005      	b.n	80037de <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 f864 	bl	80038a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f000 f875 	bl	80038c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	f003 0301 	and.w	r3, r3, #1
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00c      	beq.n	8003808 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f003 0301 	and.w	r3, r3, #1
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d007      	beq.n	8003808 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f06f 0201 	mvn.w	r2, #1
 8003800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f7fd f9b4 	bl	8000b70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00c      	beq.n	800382c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003818:	2b00      	cmp	r3, #0
 800381a:	d007      	beq.n	800382c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003824:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 f8d0 	bl	80039cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003832:	2b00      	cmp	r3, #0
 8003834:	d00c      	beq.n	8003850 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800383c:	2b00      	cmp	r3, #0
 800383e:	d007      	beq.n	8003850 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003848:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 f8c8 	bl	80039e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003856:	2b00      	cmp	r3, #0
 8003858:	d00c      	beq.n	8003874 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003860:	2b00      	cmp	r3, #0
 8003862:	d007      	beq.n	8003874 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800386c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 f834 	bl	80038dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	f003 0320 	and.w	r3, r3, #32
 800387a:	2b00      	cmp	r3, #0
 800387c:	d00c      	beq.n	8003898 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f003 0320 	and.w	r3, r3, #32
 8003884:	2b00      	cmp	r3, #0
 8003886:	d007      	beq.n	8003898 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f06f 0220 	mvn.w	r2, #32
 8003890:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 f890 	bl	80039b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003898:	bf00      	nop
 800389a:	3710      	adds	r7, #16
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038a8:	bf00      	nop
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038bc:	bf00      	nop
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038d0:	bf00      	nop
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038e4:	bf00      	nop
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b085      	sub	sp, #20
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4a2a      	ldr	r2, [pc, #168]	; (80039ac <TIM_Base_SetConfig+0xbc>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d003      	beq.n	8003910 <TIM_Base_SetConfig+0x20>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800390e:	d108      	bne.n	8003922 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003916:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	4313      	orrs	r3, r2
 8003920:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a21      	ldr	r2, [pc, #132]	; (80039ac <TIM_Base_SetConfig+0xbc>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d00b      	beq.n	8003942 <TIM_Base_SetConfig+0x52>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003930:	d007      	beq.n	8003942 <TIM_Base_SetConfig+0x52>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a1e      	ldr	r2, [pc, #120]	; (80039b0 <TIM_Base_SetConfig+0xc0>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d003      	beq.n	8003942 <TIM_Base_SetConfig+0x52>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a1d      	ldr	r2, [pc, #116]	; (80039b4 <TIM_Base_SetConfig+0xc4>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d108      	bne.n	8003954 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003948:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	68fa      	ldr	r2, [r7, #12]
 8003950:	4313      	orrs	r3, r2
 8003952:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	695b      	ldr	r3, [r3, #20]
 800395e:	4313      	orrs	r3, r2
 8003960:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	68fa      	ldr	r2, [r7, #12]
 8003966:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	689a      	ldr	r2, [r3, #8]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a0c      	ldr	r2, [pc, #48]	; (80039ac <TIM_Base_SetConfig+0xbc>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d007      	beq.n	8003990 <TIM_Base_SetConfig+0xa0>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4a0b      	ldr	r2, [pc, #44]	; (80039b0 <TIM_Base_SetConfig+0xc0>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d003      	beq.n	8003990 <TIM_Base_SetConfig+0xa0>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a0a      	ldr	r2, [pc, #40]	; (80039b4 <TIM_Base_SetConfig+0xc4>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d103      	bne.n	8003998 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	691a      	ldr	r2, [r3, #16]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	615a      	str	r2, [r3, #20]
}
 800399e:	bf00      	nop
 80039a0:	3714      	adds	r7, #20
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	40012c00 	.word	0x40012c00
 80039b0:	40014000 	.word	0x40014000
 80039b4:	40014400 	.word	0x40014400

080039b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039c0:	bf00      	nop
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039d4:	bf00      	nop
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80039e8:	bf00      	nop
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d101      	bne.n	8003a06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e040      	b.n	8003a88 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d106      	bne.n	8003a1c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f7fd f942 	bl	8000ca0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2224      	movs	r2, #36	; 0x24
 8003a20:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f022 0201 	bic.w	r2, r2, #1
 8003a30:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d002      	beq.n	8003a40 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f000 fe62 	bl	8004704 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f000 fc05 	bl	8004250 <UART_SetConfig>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d101      	bne.n	8003a50 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e01b      	b.n	8003a88 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	685a      	ldr	r2, [r3, #4]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	689a      	ldr	r2, [r3, #8]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f042 0201 	orr.w	r2, r2, #1
 8003a7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f000 fee1 	bl	8004848 <UART_CheckIdleState>
 8003a86:	4603      	mov	r3, r0
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3708      	adds	r7, #8
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b08a      	sub	sp, #40	; 0x28
 8003a94:	af02      	add	r7, sp, #8
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	603b      	str	r3, [r7, #0]
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003aa4:	2b20      	cmp	r3, #32
 8003aa6:	d178      	bne.n	8003b9a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d002      	beq.n	8003ab4 <HAL_UART_Transmit+0x24>
 8003aae:	88fb      	ldrh	r3, [r7, #6]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d101      	bne.n	8003ab8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e071      	b.n	8003b9c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2200      	movs	r2, #0
 8003abc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2221      	movs	r2, #33	; 0x21
 8003ac4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ac6:	f7fd fb5f 	bl	8001188 <HAL_GetTick>
 8003aca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	88fa      	ldrh	r2, [r7, #6]
 8003ad0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	88fa      	ldrh	r2, [r7, #6]
 8003ad8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ae4:	d108      	bne.n	8003af8 <HAL_UART_Transmit+0x68>
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d104      	bne.n	8003af8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003aee:	2300      	movs	r3, #0
 8003af0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	61bb      	str	r3, [r7, #24]
 8003af6:	e003      	b.n	8003b00 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003afc:	2300      	movs	r3, #0
 8003afe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b00:	e030      	b.n	8003b64 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	9300      	str	r3, [sp, #0]
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	2180      	movs	r1, #128	; 0x80
 8003b0c:	68f8      	ldr	r0, [r7, #12]
 8003b0e:	f000 ff43 	bl	8004998 <UART_WaitOnFlagUntilTimeout>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d004      	beq.n	8003b22 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2220      	movs	r2, #32
 8003b1c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e03c      	b.n	8003b9c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d10b      	bne.n	8003b40 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	881a      	ldrh	r2, [r3, #0]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b34:	b292      	uxth	r2, r2
 8003b36:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	3302      	adds	r3, #2
 8003b3c:	61bb      	str	r3, [r7, #24]
 8003b3e:	e008      	b.n	8003b52 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	781a      	ldrb	r2, [r3, #0]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	b292      	uxth	r2, r2
 8003b4a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	3301      	adds	r3, #1
 8003b50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	b29a      	uxth	r2, r3
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d1c8      	bne.n	8003b02 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	9300      	str	r3, [sp, #0]
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	2200      	movs	r2, #0
 8003b78:	2140      	movs	r1, #64	; 0x40
 8003b7a:	68f8      	ldr	r0, [r7, #12]
 8003b7c:	f000 ff0c 	bl	8004998 <UART_WaitOnFlagUntilTimeout>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d004      	beq.n	8003b90 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2220      	movs	r2, #32
 8003b8a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e005      	b.n	8003b9c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2220      	movs	r2, #32
 8003b94:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003b96:	2300      	movs	r3, #0
 8003b98:	e000      	b.n	8003b9c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003b9a:	2302      	movs	r3, #2
  }
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3720      	adds	r7, #32
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b08a      	sub	sp, #40	; 0x28
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	4613      	mov	r3, r2
 8003bb0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bb8:	2b20      	cmp	r3, #32
 8003bba:	d137      	bne.n	8003c2c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d002      	beq.n	8003bc8 <HAL_UART_Receive_IT+0x24>
 8003bc2:	88fb      	ldrh	r3, [r7, #6]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d101      	bne.n	8003bcc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e030      	b.n	8003c2e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a18      	ldr	r2, [pc, #96]	; (8003c38 <HAL_UART_Receive_IT+0x94>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d01f      	beq.n	8003c1c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d018      	beq.n	8003c1c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	e853 3f00 	ldrex	r3, [r3]
 8003bf6:	613b      	str	r3, [r7, #16]
   return(result);
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003bfe:	627b      	str	r3, [r7, #36]	; 0x24
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	461a      	mov	r2, r3
 8003c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c08:	623b      	str	r3, [r7, #32]
 8003c0a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c0c:	69f9      	ldr	r1, [r7, #28]
 8003c0e:	6a3a      	ldr	r2, [r7, #32]
 8003c10:	e841 2300 	strex	r3, r2, [r1]
 8003c14:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c16:	69bb      	ldr	r3, [r7, #24]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d1e6      	bne.n	8003bea <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003c1c:	88fb      	ldrh	r3, [r7, #6]
 8003c1e:	461a      	mov	r2, r3
 8003c20:	68b9      	ldr	r1, [r7, #8]
 8003c22:	68f8      	ldr	r0, [r7, #12]
 8003c24:	f000 ff20 	bl	8004a68 <UART_Start_Receive_IT>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	e000      	b.n	8003c2e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c2c:	2302      	movs	r3, #2
  }
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3728      	adds	r7, #40	; 0x28
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	40008000 	.word	0x40008000

08003c3c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b0ba      	sub	sp, #232	; 0xe8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	69db      	ldr	r3, [r3, #28]
 8003c4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003c62:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003c66:	f640 030f 	movw	r3, #2063	; 0x80f
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003c70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d115      	bne.n	8003ca4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003c78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c7c:	f003 0320 	and.w	r3, r3, #32
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d00f      	beq.n	8003ca4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003c84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c88:	f003 0320 	and.w	r3, r3, #32
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d009      	beq.n	8003ca4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	f000 82ae 	beq.w	80041f6 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	4798      	blx	r3
      }
      return;
 8003ca2:	e2a8      	b.n	80041f6 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003ca4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	f000 8117 	beq.w	8003edc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003cae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cb2:	f003 0301 	and.w	r3, r3, #1
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d106      	bne.n	8003cc8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003cba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003cbe:	4b85      	ldr	r3, [pc, #532]	; (8003ed4 <HAL_UART_IRQHandler+0x298>)
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	f000 810a 	beq.w	8003edc <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003cc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ccc:	f003 0301 	and.w	r3, r3, #1
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d011      	beq.n	8003cf8 <HAL_UART_IRQHandler+0xbc>
 8003cd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d00b      	beq.n	8003cf8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cee:	f043 0201 	orr.w	r2, r3, #1
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003cf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cfc:	f003 0302 	and.w	r3, r3, #2
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d011      	beq.n	8003d28 <HAL_UART_IRQHandler+0xec>
 8003d04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d08:	f003 0301 	and.w	r3, r3, #1
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d00b      	beq.n	8003d28 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2202      	movs	r2, #2
 8003d16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d1e:	f043 0204 	orr.w	r2, r3, #4
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d2c:	f003 0304 	and.w	r3, r3, #4
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d011      	beq.n	8003d58 <HAL_UART_IRQHandler+0x11c>
 8003d34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d38:	f003 0301 	and.w	r3, r3, #1
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d00b      	beq.n	8003d58 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2204      	movs	r2, #4
 8003d46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d4e:	f043 0202 	orr.w	r2, r3, #2
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003d58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d5c:	f003 0308 	and.w	r3, r3, #8
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d017      	beq.n	8003d94 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003d64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d68:	f003 0320 	and.w	r3, r3, #32
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d105      	bne.n	8003d7c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003d70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d74:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d00b      	beq.n	8003d94 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2208      	movs	r2, #8
 8003d82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d8a:	f043 0208 	orr.w	r2, r3, #8
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003d94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d012      	beq.n	8003dc6 <HAL_UART_IRQHandler+0x18a>
 8003da0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003da4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d00c      	beq.n	8003dc6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003db4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dbc:	f043 0220 	orr.w	r2, r3, #32
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	f000 8214 	beq.w	80041fa <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003dd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dd6:	f003 0320 	and.w	r3, r3, #32
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00d      	beq.n	8003dfa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003dde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003de2:	f003 0320 	and.w	r3, r3, #32
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d007      	beq.n	8003dfa <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d003      	beq.n	8003dfa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e00:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e0e:	2b40      	cmp	r3, #64	; 0x40
 8003e10:	d005      	beq.n	8003e1e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003e12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003e16:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d04f      	beq.n	8003ebe <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f000 fee8 	bl	8004bf4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e2e:	2b40      	cmp	r3, #64	; 0x40
 8003e30:	d141      	bne.n	8003eb6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	3308      	adds	r3, #8
 8003e38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003e40:	e853 3f00 	ldrex	r3, [r3]
 8003e44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003e48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	3308      	adds	r3, #8
 8003e5a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003e5e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003e62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e66:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003e6a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003e6e:	e841 2300 	strex	r3, r2, [r1]
 8003e72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003e76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d1d9      	bne.n	8003e32 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d013      	beq.n	8003eae <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e8a:	4a13      	ldr	r2, [pc, #76]	; (8003ed8 <HAL_UART_IRQHandler+0x29c>)
 8003e8c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e92:	4618      	mov	r0, r3
 8003e94:	f7fd faa4 	bl	80013e0 <HAL_DMA_Abort_IT>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d017      	beq.n	8003ece <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003ea8:	4610      	mov	r0, r2
 8003eaa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003eac:	e00f      	b.n	8003ece <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 f9b8 	bl	8004224 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003eb4:	e00b      	b.n	8003ece <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 f9b4 	bl	8004224 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ebc:	e007      	b.n	8003ece <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 f9b0 	bl	8004224 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003ecc:	e195      	b.n	80041fa <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ece:	bf00      	nop
    return;
 8003ed0:	e193      	b.n	80041fa <HAL_UART_IRQHandler+0x5be>
 8003ed2:	bf00      	nop
 8003ed4:	04000120 	.word	0x04000120
 8003ed8:	08004cbd 	.word	0x08004cbd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	f040 814e 	bne.w	8004182 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003ee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003eea:	f003 0310 	and.w	r3, r3, #16
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	f000 8147 	beq.w	8004182 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003ef4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ef8:	f003 0310 	and.w	r3, r3, #16
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	f000 8140 	beq.w	8004182 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2210      	movs	r2, #16
 8003f08:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f14:	2b40      	cmp	r3, #64	; 0x40
 8003f16:	f040 80b8 	bne.w	800408a <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003f26:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	f000 8167 	beq.w	80041fe <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003f36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	f080 815f 	bcs.w	80041fe <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f46:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0320 	and.w	r3, r3, #32
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	f040 8086 	bne.w	8004068 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f64:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003f68:	e853 3f00 	ldrex	r3, [r3]
 8003f6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003f70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	461a      	mov	r2, r3
 8003f82:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003f86:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003f8a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f8e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003f92:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003f96:	e841 2300 	strex	r3, r2, [r1]
 8003f9a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003f9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1da      	bne.n	8003f5c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	3308      	adds	r3, #8
 8003fac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fb0:	e853 3f00 	ldrex	r3, [r3]
 8003fb4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003fb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003fb8:	f023 0301 	bic.w	r3, r3, #1
 8003fbc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	3308      	adds	r3, #8
 8003fc6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003fca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003fce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003fd2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003fd6:	e841 2300 	strex	r3, r2, [r1]
 8003fda:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003fdc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d1e1      	bne.n	8003fa6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	3308      	adds	r3, #8
 8003fe8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fec:	e853 3f00 	ldrex	r3, [r3]
 8003ff0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003ff2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ff4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ff8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	3308      	adds	r3, #8
 8004002:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004006:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004008:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800400a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800400c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800400e:	e841 2300 	strex	r3, r2, [r1]
 8004012:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004014:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004016:	2b00      	cmp	r3, #0
 8004018:	d1e3      	bne.n	8003fe2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2220      	movs	r2, #32
 800401e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800402e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004030:	e853 3f00 	ldrex	r3, [r3]
 8004034:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004036:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004038:	f023 0310 	bic.w	r3, r3, #16
 800403c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	461a      	mov	r2, r3
 8004046:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800404a:	65bb      	str	r3, [r7, #88]	; 0x58
 800404c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800404e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004050:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004052:	e841 2300 	strex	r3, r2, [r1]
 8004056:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004058:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800405a:	2b00      	cmp	r3, #0
 800405c:	d1e4      	bne.n	8004028 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004062:	4618      	mov	r0, r3
 8004064:	f7fd f97e 	bl	8001364 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2202      	movs	r2, #2
 800406c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800407a:	b29b      	uxth	r3, r3
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	b29b      	uxth	r3, r3
 8004080:	4619      	mov	r1, r3
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 f8d8 	bl	8004238 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004088:	e0b9      	b.n	80041fe <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004096:	b29b      	uxth	r3, r3
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	f000 80ab 	beq.w	8004202 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 80040ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	f000 80a6 	beq.w	8004202 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040be:	e853 3f00 	ldrex	r3, [r3]
 80040c2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80040c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	461a      	mov	r2, r3
 80040d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80040d8:	647b      	str	r3, [r7, #68]	; 0x44
 80040da:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040dc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80040de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040e0:	e841 2300 	strex	r3, r2, [r1]
 80040e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80040e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d1e4      	bne.n	80040b6 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	3308      	adds	r3, #8
 80040f2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f6:	e853 3f00 	ldrex	r3, [r3]
 80040fa:	623b      	str	r3, [r7, #32]
   return(result);
 80040fc:	6a3b      	ldr	r3, [r7, #32]
 80040fe:	f023 0301 	bic.w	r3, r3, #1
 8004102:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	3308      	adds	r3, #8
 800410c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004110:	633a      	str	r2, [r7, #48]	; 0x30
 8004112:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004114:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004116:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004118:	e841 2300 	strex	r3, r2, [r1]
 800411c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800411e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004120:	2b00      	cmp	r3, #0
 8004122:	d1e3      	bne.n	80040ec <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2220      	movs	r2, #32
 8004128:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	e853 3f00 	ldrex	r3, [r3]
 8004144:	60fb      	str	r3, [r7, #12]
   return(result);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f023 0310 	bic.w	r3, r3, #16
 800414c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	461a      	mov	r2, r3
 8004156:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800415a:	61fb      	str	r3, [r7, #28]
 800415c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800415e:	69b9      	ldr	r1, [r7, #24]
 8004160:	69fa      	ldr	r2, [r7, #28]
 8004162:	e841 2300 	strex	r3, r2, [r1]
 8004166:	617b      	str	r3, [r7, #20]
   return(result);
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d1e4      	bne.n	8004138 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2202      	movs	r2, #2
 8004172:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004174:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004178:	4619      	mov	r1, r3
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f000 f85c 	bl	8004238 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004180:	e03f      	b.n	8004202 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004186:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00e      	beq.n	80041ac <HAL_UART_IRQHandler+0x570>
 800418e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004192:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d008      	beq.n	80041ac <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80041a2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f000 ff85 	bl	80050b4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80041aa:	e02d      	b.n	8004208 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80041ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d00e      	beq.n	80041d6 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80041b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d008      	beq.n	80041d6 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d01c      	beq.n	8004206 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	4798      	blx	r3
    }
    return;
 80041d4:	e017      	b.n	8004206 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80041d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d012      	beq.n	8004208 <HAL_UART_IRQHandler+0x5cc>
 80041e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d00c      	beq.n	8004208 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 fd7a 	bl	8004ce8 <UART_EndTransmit_IT>
    return;
 80041f4:	e008      	b.n	8004208 <HAL_UART_IRQHandler+0x5cc>
      return;
 80041f6:	bf00      	nop
 80041f8:	e006      	b.n	8004208 <HAL_UART_IRQHandler+0x5cc>
    return;
 80041fa:	bf00      	nop
 80041fc:	e004      	b.n	8004208 <HAL_UART_IRQHandler+0x5cc>
      return;
 80041fe:	bf00      	nop
 8004200:	e002      	b.n	8004208 <HAL_UART_IRQHandler+0x5cc>
      return;
 8004202:	bf00      	nop
 8004204:	e000      	b.n	8004208 <HAL_UART_IRQHandler+0x5cc>
    return;
 8004206:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004208:	37e8      	adds	r7, #232	; 0xe8
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop

08004210 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004218:	bf00      	nop
 800421a:	370c      	adds	r7, #12
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800422c:	bf00      	nop
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	460b      	mov	r3, r1
 8004242:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004244:	bf00      	nop
 8004246:	370c      	adds	r7, #12
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr

08004250 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004250:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004254:	b08a      	sub	sp, #40	; 0x28
 8004256:	af00      	add	r7, sp, #0
 8004258:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800425a:	2300      	movs	r3, #0
 800425c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	689a      	ldr	r2, [r3, #8]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	691b      	ldr	r3, [r3, #16]
 8004268:	431a      	orrs	r2, r3
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	695b      	ldr	r3, [r3, #20]
 800426e:	431a      	orrs	r2, r3
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	69db      	ldr	r3, [r3, #28]
 8004274:	4313      	orrs	r3, r2
 8004276:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	4b9e      	ldr	r3, [pc, #632]	; (80044f8 <UART_SetConfig+0x2a8>)
 8004280:	4013      	ands	r3, r2
 8004282:	68fa      	ldr	r2, [r7, #12]
 8004284:	6812      	ldr	r2, [r2, #0]
 8004286:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004288:	430b      	orrs	r3, r1
 800428a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	68da      	ldr	r2, [r3, #12]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	430a      	orrs	r2, r1
 80042a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	699b      	ldr	r3, [r3, #24]
 80042a6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a93      	ldr	r2, [pc, #588]	; (80044fc <UART_SetConfig+0x2ac>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d004      	beq.n	80042bc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6a1b      	ldr	r3, [r3, #32]
 80042b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042b8:	4313      	orrs	r3, r2
 80042ba:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042cc:	430a      	orrs	r2, r1
 80042ce:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a8a      	ldr	r2, [pc, #552]	; (8004500 <UART_SetConfig+0x2b0>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d126      	bne.n	8004328 <UART_SetConfig+0xd8>
 80042da:	4b8a      	ldr	r3, [pc, #552]	; (8004504 <UART_SetConfig+0x2b4>)
 80042dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e0:	f003 0303 	and.w	r3, r3, #3
 80042e4:	2b03      	cmp	r3, #3
 80042e6:	d81b      	bhi.n	8004320 <UART_SetConfig+0xd0>
 80042e8:	a201      	add	r2, pc, #4	; (adr r2, 80042f0 <UART_SetConfig+0xa0>)
 80042ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ee:	bf00      	nop
 80042f0:	08004301 	.word	0x08004301
 80042f4:	08004311 	.word	0x08004311
 80042f8:	08004309 	.word	0x08004309
 80042fc:	08004319 	.word	0x08004319
 8004300:	2301      	movs	r3, #1
 8004302:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004306:	e0ab      	b.n	8004460 <UART_SetConfig+0x210>
 8004308:	2302      	movs	r3, #2
 800430a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800430e:	e0a7      	b.n	8004460 <UART_SetConfig+0x210>
 8004310:	2304      	movs	r3, #4
 8004312:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004316:	e0a3      	b.n	8004460 <UART_SetConfig+0x210>
 8004318:	2308      	movs	r3, #8
 800431a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800431e:	e09f      	b.n	8004460 <UART_SetConfig+0x210>
 8004320:	2310      	movs	r3, #16
 8004322:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004326:	e09b      	b.n	8004460 <UART_SetConfig+0x210>
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a76      	ldr	r2, [pc, #472]	; (8004508 <UART_SetConfig+0x2b8>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d138      	bne.n	80043a4 <UART_SetConfig+0x154>
 8004332:	4b74      	ldr	r3, [pc, #464]	; (8004504 <UART_SetConfig+0x2b4>)
 8004334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004338:	f003 030c 	and.w	r3, r3, #12
 800433c:	2b0c      	cmp	r3, #12
 800433e:	d82d      	bhi.n	800439c <UART_SetConfig+0x14c>
 8004340:	a201      	add	r2, pc, #4	; (adr r2, 8004348 <UART_SetConfig+0xf8>)
 8004342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004346:	bf00      	nop
 8004348:	0800437d 	.word	0x0800437d
 800434c:	0800439d 	.word	0x0800439d
 8004350:	0800439d 	.word	0x0800439d
 8004354:	0800439d 	.word	0x0800439d
 8004358:	0800438d 	.word	0x0800438d
 800435c:	0800439d 	.word	0x0800439d
 8004360:	0800439d 	.word	0x0800439d
 8004364:	0800439d 	.word	0x0800439d
 8004368:	08004385 	.word	0x08004385
 800436c:	0800439d 	.word	0x0800439d
 8004370:	0800439d 	.word	0x0800439d
 8004374:	0800439d 	.word	0x0800439d
 8004378:	08004395 	.word	0x08004395
 800437c:	2300      	movs	r3, #0
 800437e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004382:	e06d      	b.n	8004460 <UART_SetConfig+0x210>
 8004384:	2302      	movs	r3, #2
 8004386:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800438a:	e069      	b.n	8004460 <UART_SetConfig+0x210>
 800438c:	2304      	movs	r3, #4
 800438e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004392:	e065      	b.n	8004460 <UART_SetConfig+0x210>
 8004394:	2308      	movs	r3, #8
 8004396:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800439a:	e061      	b.n	8004460 <UART_SetConfig+0x210>
 800439c:	2310      	movs	r3, #16
 800439e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043a2:	e05d      	b.n	8004460 <UART_SetConfig+0x210>
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a58      	ldr	r2, [pc, #352]	; (800450c <UART_SetConfig+0x2bc>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d125      	bne.n	80043fa <UART_SetConfig+0x1aa>
 80043ae:	4b55      	ldr	r3, [pc, #340]	; (8004504 <UART_SetConfig+0x2b4>)
 80043b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80043b8:	2b30      	cmp	r3, #48	; 0x30
 80043ba:	d016      	beq.n	80043ea <UART_SetConfig+0x19a>
 80043bc:	2b30      	cmp	r3, #48	; 0x30
 80043be:	d818      	bhi.n	80043f2 <UART_SetConfig+0x1a2>
 80043c0:	2b20      	cmp	r3, #32
 80043c2:	d00a      	beq.n	80043da <UART_SetConfig+0x18a>
 80043c4:	2b20      	cmp	r3, #32
 80043c6:	d814      	bhi.n	80043f2 <UART_SetConfig+0x1a2>
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d002      	beq.n	80043d2 <UART_SetConfig+0x182>
 80043cc:	2b10      	cmp	r3, #16
 80043ce:	d008      	beq.n	80043e2 <UART_SetConfig+0x192>
 80043d0:	e00f      	b.n	80043f2 <UART_SetConfig+0x1a2>
 80043d2:	2300      	movs	r3, #0
 80043d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043d8:	e042      	b.n	8004460 <UART_SetConfig+0x210>
 80043da:	2302      	movs	r3, #2
 80043dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043e0:	e03e      	b.n	8004460 <UART_SetConfig+0x210>
 80043e2:	2304      	movs	r3, #4
 80043e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043e8:	e03a      	b.n	8004460 <UART_SetConfig+0x210>
 80043ea:	2308      	movs	r3, #8
 80043ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043f0:	e036      	b.n	8004460 <UART_SetConfig+0x210>
 80043f2:	2310      	movs	r3, #16
 80043f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043f8:	e032      	b.n	8004460 <UART_SetConfig+0x210>
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a3f      	ldr	r2, [pc, #252]	; (80044fc <UART_SetConfig+0x2ac>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d12a      	bne.n	800445a <UART_SetConfig+0x20a>
 8004404:	4b3f      	ldr	r3, [pc, #252]	; (8004504 <UART_SetConfig+0x2b4>)
 8004406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800440a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800440e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004412:	d01a      	beq.n	800444a <UART_SetConfig+0x1fa>
 8004414:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004418:	d81b      	bhi.n	8004452 <UART_SetConfig+0x202>
 800441a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800441e:	d00c      	beq.n	800443a <UART_SetConfig+0x1ea>
 8004420:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004424:	d815      	bhi.n	8004452 <UART_SetConfig+0x202>
 8004426:	2b00      	cmp	r3, #0
 8004428:	d003      	beq.n	8004432 <UART_SetConfig+0x1e2>
 800442a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800442e:	d008      	beq.n	8004442 <UART_SetConfig+0x1f2>
 8004430:	e00f      	b.n	8004452 <UART_SetConfig+0x202>
 8004432:	2300      	movs	r3, #0
 8004434:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004438:	e012      	b.n	8004460 <UART_SetConfig+0x210>
 800443a:	2302      	movs	r3, #2
 800443c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004440:	e00e      	b.n	8004460 <UART_SetConfig+0x210>
 8004442:	2304      	movs	r3, #4
 8004444:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004448:	e00a      	b.n	8004460 <UART_SetConfig+0x210>
 800444a:	2308      	movs	r3, #8
 800444c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004450:	e006      	b.n	8004460 <UART_SetConfig+0x210>
 8004452:	2310      	movs	r3, #16
 8004454:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004458:	e002      	b.n	8004460 <UART_SetConfig+0x210>
 800445a:	2310      	movs	r3, #16
 800445c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a25      	ldr	r2, [pc, #148]	; (80044fc <UART_SetConfig+0x2ac>)
 8004466:	4293      	cmp	r3, r2
 8004468:	f040 808a 	bne.w	8004580 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800446c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004470:	2b08      	cmp	r3, #8
 8004472:	d824      	bhi.n	80044be <UART_SetConfig+0x26e>
 8004474:	a201      	add	r2, pc, #4	; (adr r2, 800447c <UART_SetConfig+0x22c>)
 8004476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800447a:	bf00      	nop
 800447c:	080044a1 	.word	0x080044a1
 8004480:	080044bf 	.word	0x080044bf
 8004484:	080044a9 	.word	0x080044a9
 8004488:	080044bf 	.word	0x080044bf
 800448c:	080044af 	.word	0x080044af
 8004490:	080044bf 	.word	0x080044bf
 8004494:	080044bf 	.word	0x080044bf
 8004498:	080044bf 	.word	0x080044bf
 800449c:	080044b7 	.word	0x080044b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044a0:	f7fe fdf2 	bl	8003088 <HAL_RCC_GetPCLK1Freq>
 80044a4:	61f8      	str	r0, [r7, #28]
        break;
 80044a6:	e010      	b.n	80044ca <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044a8:	4b19      	ldr	r3, [pc, #100]	; (8004510 <UART_SetConfig+0x2c0>)
 80044aa:	61fb      	str	r3, [r7, #28]
        break;
 80044ac:	e00d      	b.n	80044ca <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044ae:	f7fe fd53 	bl	8002f58 <HAL_RCC_GetSysClockFreq>
 80044b2:	61f8      	str	r0, [r7, #28]
        break;
 80044b4:	e009      	b.n	80044ca <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044ba:	61fb      	str	r3, [r7, #28]
        break;
 80044bc:	e005      	b.n	80044ca <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 80044be:	2300      	movs	r3, #0
 80044c0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80044c8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	f000 8109 	beq.w	80046e4 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	685a      	ldr	r2, [r3, #4]
 80044d6:	4613      	mov	r3, r2
 80044d8:	005b      	lsls	r3, r3, #1
 80044da:	4413      	add	r3, r2
 80044dc:	69fa      	ldr	r2, [r7, #28]
 80044de:	429a      	cmp	r2, r3
 80044e0:	d305      	bcc.n	80044ee <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80044e8:	69fa      	ldr	r2, [r7, #28]
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d912      	bls.n	8004514 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80044f4:	e0f6      	b.n	80046e4 <UART_SetConfig+0x494>
 80044f6:	bf00      	nop
 80044f8:	efff69f3 	.word	0xefff69f3
 80044fc:	40008000 	.word	0x40008000
 8004500:	40013800 	.word	0x40013800
 8004504:	40021000 	.word	0x40021000
 8004508:	40004400 	.word	0x40004400
 800450c:	40004800 	.word	0x40004800
 8004510:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	2200      	movs	r2, #0
 8004518:	461c      	mov	r4, r3
 800451a:	4615      	mov	r5, r2
 800451c:	f04f 0200 	mov.w	r2, #0
 8004520:	f04f 0300 	mov.w	r3, #0
 8004524:	022b      	lsls	r3, r5, #8
 8004526:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800452a:	0222      	lsls	r2, r4, #8
 800452c:	68f9      	ldr	r1, [r7, #12]
 800452e:	6849      	ldr	r1, [r1, #4]
 8004530:	0849      	lsrs	r1, r1, #1
 8004532:	2000      	movs	r0, #0
 8004534:	4688      	mov	r8, r1
 8004536:	4681      	mov	r9, r0
 8004538:	eb12 0a08 	adds.w	sl, r2, r8
 800453c:	eb43 0b09 	adc.w	fp, r3, r9
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	603b      	str	r3, [r7, #0]
 8004548:	607a      	str	r2, [r7, #4]
 800454a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800454e:	4650      	mov	r0, sl
 8004550:	4659      	mov	r1, fp
 8004552:	f7fb fe8d 	bl	8000270 <__aeabi_uldivmod>
 8004556:	4602      	mov	r2, r0
 8004558:	460b      	mov	r3, r1
 800455a:	4613      	mov	r3, r2
 800455c:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800455e:	69bb      	ldr	r3, [r7, #24]
 8004560:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004564:	d308      	bcc.n	8004578 <UART_SetConfig+0x328>
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800456c:	d204      	bcs.n	8004578 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	69ba      	ldr	r2, [r7, #24]
 8004574:	60da      	str	r2, [r3, #12]
 8004576:	e0b5      	b.n	80046e4 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800457e:	e0b1      	b.n	80046e4 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	69db      	ldr	r3, [r3, #28]
 8004584:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004588:	d15d      	bne.n	8004646 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 800458a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800458e:	2b08      	cmp	r3, #8
 8004590:	d827      	bhi.n	80045e2 <UART_SetConfig+0x392>
 8004592:	a201      	add	r2, pc, #4	; (adr r2, 8004598 <UART_SetConfig+0x348>)
 8004594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004598:	080045bd 	.word	0x080045bd
 800459c:	080045c5 	.word	0x080045c5
 80045a0:	080045cd 	.word	0x080045cd
 80045a4:	080045e3 	.word	0x080045e3
 80045a8:	080045d3 	.word	0x080045d3
 80045ac:	080045e3 	.word	0x080045e3
 80045b0:	080045e3 	.word	0x080045e3
 80045b4:	080045e3 	.word	0x080045e3
 80045b8:	080045db 	.word	0x080045db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045bc:	f7fe fd64 	bl	8003088 <HAL_RCC_GetPCLK1Freq>
 80045c0:	61f8      	str	r0, [r7, #28]
        break;
 80045c2:	e014      	b.n	80045ee <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045c4:	f7fe fd76 	bl	80030b4 <HAL_RCC_GetPCLK2Freq>
 80045c8:	61f8      	str	r0, [r7, #28]
        break;
 80045ca:	e010      	b.n	80045ee <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045cc:	4b4c      	ldr	r3, [pc, #304]	; (8004700 <UART_SetConfig+0x4b0>)
 80045ce:	61fb      	str	r3, [r7, #28]
        break;
 80045d0:	e00d      	b.n	80045ee <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045d2:	f7fe fcc1 	bl	8002f58 <HAL_RCC_GetSysClockFreq>
 80045d6:	61f8      	str	r0, [r7, #28]
        break;
 80045d8:	e009      	b.n	80045ee <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045de:	61fb      	str	r3, [r7, #28]
        break;
 80045e0:	e005      	b.n	80045ee <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 80045e2:	2300      	movs	r3, #0
 80045e4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80045ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d077      	beq.n	80046e4 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	005a      	lsls	r2, r3, #1
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	085b      	lsrs	r3, r3, #1
 80045fe:	441a      	add	r2, r3
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	fbb2 f3f3 	udiv	r3, r2, r3
 8004608:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	2b0f      	cmp	r3, #15
 800460e:	d916      	bls.n	800463e <UART_SetConfig+0x3ee>
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004616:	d212      	bcs.n	800463e <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004618:	69bb      	ldr	r3, [r7, #24]
 800461a:	b29b      	uxth	r3, r3
 800461c:	f023 030f 	bic.w	r3, r3, #15
 8004620:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004622:	69bb      	ldr	r3, [r7, #24]
 8004624:	085b      	lsrs	r3, r3, #1
 8004626:	b29b      	uxth	r3, r3
 8004628:	f003 0307 	and.w	r3, r3, #7
 800462c:	b29a      	uxth	r2, r3
 800462e:	8afb      	ldrh	r3, [r7, #22]
 8004630:	4313      	orrs	r3, r2
 8004632:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	8afa      	ldrh	r2, [r7, #22]
 800463a:	60da      	str	r2, [r3, #12]
 800463c:	e052      	b.n	80046e4 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004644:	e04e      	b.n	80046e4 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004646:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800464a:	2b08      	cmp	r3, #8
 800464c:	d827      	bhi.n	800469e <UART_SetConfig+0x44e>
 800464e:	a201      	add	r2, pc, #4	; (adr r2, 8004654 <UART_SetConfig+0x404>)
 8004650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004654:	08004679 	.word	0x08004679
 8004658:	08004681 	.word	0x08004681
 800465c:	08004689 	.word	0x08004689
 8004660:	0800469f 	.word	0x0800469f
 8004664:	0800468f 	.word	0x0800468f
 8004668:	0800469f 	.word	0x0800469f
 800466c:	0800469f 	.word	0x0800469f
 8004670:	0800469f 	.word	0x0800469f
 8004674:	08004697 	.word	0x08004697
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004678:	f7fe fd06 	bl	8003088 <HAL_RCC_GetPCLK1Freq>
 800467c:	61f8      	str	r0, [r7, #28]
        break;
 800467e:	e014      	b.n	80046aa <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004680:	f7fe fd18 	bl	80030b4 <HAL_RCC_GetPCLK2Freq>
 8004684:	61f8      	str	r0, [r7, #28]
        break;
 8004686:	e010      	b.n	80046aa <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004688:	4b1d      	ldr	r3, [pc, #116]	; (8004700 <UART_SetConfig+0x4b0>)
 800468a:	61fb      	str	r3, [r7, #28]
        break;
 800468c:	e00d      	b.n	80046aa <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800468e:	f7fe fc63 	bl	8002f58 <HAL_RCC_GetSysClockFreq>
 8004692:	61f8      	str	r0, [r7, #28]
        break;
 8004694:	e009      	b.n	80046aa <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004696:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800469a:	61fb      	str	r3, [r7, #28]
        break;
 800469c:	e005      	b.n	80046aa <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 800469e:	2300      	movs	r3, #0
 80046a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80046a8:	bf00      	nop
    }

    if (pclk != 0U)
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d019      	beq.n	80046e4 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	085a      	lsrs	r2, r3, #1
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	441a      	add	r2, r3
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	fbb2 f3f3 	udiv	r3, r2, r3
 80046c2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046c4:	69bb      	ldr	r3, [r7, #24]
 80046c6:	2b0f      	cmp	r3, #15
 80046c8:	d909      	bls.n	80046de <UART_SetConfig+0x48e>
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046d0:	d205      	bcs.n	80046de <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80046d2:	69bb      	ldr	r3, [r7, #24]
 80046d4:	b29a      	uxth	r2, r3
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	60da      	str	r2, [r3, #12]
 80046dc:	e002      	b.n	80046e4 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2200      	movs	r2, #0
 80046e8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2200      	movs	r2, #0
 80046ee:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80046f0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3728      	adds	r7, #40	; 0x28
 80046f8:	46bd      	mov	sp, r7
 80046fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046fe:	bf00      	nop
 8004700:	00f42400 	.word	0x00f42400

08004704 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004710:	f003 0308 	and.w	r3, r3, #8
 8004714:	2b00      	cmp	r3, #0
 8004716:	d00a      	beq.n	800472e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	430a      	orrs	r2, r1
 800472c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004732:	f003 0301 	and.w	r3, r3, #1
 8004736:	2b00      	cmp	r3, #0
 8004738:	d00a      	beq.n	8004750 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	430a      	orrs	r2, r1
 800474e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004754:	f003 0302 	and.w	r3, r3, #2
 8004758:	2b00      	cmp	r3, #0
 800475a:	d00a      	beq.n	8004772 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	430a      	orrs	r2, r1
 8004770:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004776:	f003 0304 	and.w	r3, r3, #4
 800477a:	2b00      	cmp	r3, #0
 800477c:	d00a      	beq.n	8004794 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	430a      	orrs	r2, r1
 8004792:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004798:	f003 0310 	and.w	r3, r3, #16
 800479c:	2b00      	cmp	r3, #0
 800479e:	d00a      	beq.n	80047b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	430a      	orrs	r2, r1
 80047b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ba:	f003 0320 	and.w	r3, r3, #32
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00a      	beq.n	80047d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	430a      	orrs	r2, r1
 80047d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d01a      	beq.n	800481a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	430a      	orrs	r2, r1
 80047f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004802:	d10a      	bne.n	800481a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	430a      	orrs	r2, r1
 8004818:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004822:	2b00      	cmp	r3, #0
 8004824:	d00a      	beq.n	800483c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	430a      	orrs	r2, r1
 800483a:	605a      	str	r2, [r3, #4]
  }
}
 800483c:	bf00      	nop
 800483e:	370c      	adds	r7, #12
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr

08004848 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b098      	sub	sp, #96	; 0x60
 800484c:	af02      	add	r7, sp, #8
 800484e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004858:	f7fc fc96 	bl	8001188 <HAL_GetTick>
 800485c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 0308 	and.w	r3, r3, #8
 8004868:	2b08      	cmp	r3, #8
 800486a:	d12e      	bne.n	80048ca <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800486c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004870:	9300      	str	r3, [sp, #0]
 8004872:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004874:	2200      	movs	r2, #0
 8004876:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 f88c 	bl	8004998 <UART_WaitOnFlagUntilTimeout>
 8004880:	4603      	mov	r3, r0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d021      	beq.n	80048ca <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800488c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800488e:	e853 3f00 	ldrex	r3, [r3]
 8004892:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004896:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800489a:	653b      	str	r3, [r7, #80]	; 0x50
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	461a      	mov	r2, r3
 80048a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048a4:	647b      	str	r3, [r7, #68]	; 0x44
 80048a6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80048aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048ac:	e841 2300 	strex	r3, r2, [r1]
 80048b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80048b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d1e6      	bne.n	8004886 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2220      	movs	r2, #32
 80048bc:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e062      	b.n	8004990 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0304 	and.w	r3, r3, #4
 80048d4:	2b04      	cmp	r3, #4
 80048d6:	d149      	bne.n	800496c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80048dc:	9300      	str	r3, [sp, #0]
 80048de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048e0:	2200      	movs	r2, #0
 80048e2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 f856 	bl	8004998 <UART_WaitOnFlagUntilTimeout>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d03c      	beq.n	800496c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fa:	e853 3f00 	ldrex	r3, [r3]
 80048fe:	623b      	str	r3, [r7, #32]
   return(result);
 8004900:	6a3b      	ldr	r3, [r7, #32]
 8004902:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004906:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	461a      	mov	r2, r3
 800490e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004910:	633b      	str	r3, [r7, #48]	; 0x30
 8004912:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004914:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004916:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004918:	e841 2300 	strex	r3, r2, [r1]
 800491c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800491e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004920:	2b00      	cmp	r3, #0
 8004922:	d1e6      	bne.n	80048f2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	3308      	adds	r3, #8
 800492a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	e853 3f00 	ldrex	r3, [r3]
 8004932:	60fb      	str	r3, [r7, #12]
   return(result);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f023 0301 	bic.w	r3, r3, #1
 800493a:	64bb      	str	r3, [r7, #72]	; 0x48
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	3308      	adds	r3, #8
 8004942:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004944:	61fa      	str	r2, [r7, #28]
 8004946:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004948:	69b9      	ldr	r1, [r7, #24]
 800494a:	69fa      	ldr	r2, [r7, #28]
 800494c:	e841 2300 	strex	r3, r2, [r1]
 8004950:	617b      	str	r3, [r7, #20]
   return(result);
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d1e5      	bne.n	8004924 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2220      	movs	r2, #32
 800495c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	e011      	b.n	8004990 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2220      	movs	r2, #32
 8004970:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2220      	movs	r2, #32
 8004976:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800498e:	2300      	movs	r3, #0
}
 8004990:	4618      	mov	r0, r3
 8004992:	3758      	adds	r7, #88	; 0x58
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}

08004998 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	603b      	str	r3, [r7, #0]
 80049a4:	4613      	mov	r3, r2
 80049a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049a8:	e049      	b.n	8004a3e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049b0:	d045      	beq.n	8004a3e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049b2:	f7fc fbe9 	bl	8001188 <HAL_GetTick>
 80049b6:	4602      	mov	r2, r0
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	69ba      	ldr	r2, [r7, #24]
 80049be:	429a      	cmp	r2, r3
 80049c0:	d302      	bcc.n	80049c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80049c2:	69bb      	ldr	r3, [r7, #24]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d101      	bne.n	80049cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80049c8:	2303      	movs	r3, #3
 80049ca:	e048      	b.n	8004a5e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0304 	and.w	r3, r3, #4
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d031      	beq.n	8004a3e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	69db      	ldr	r3, [r3, #28]
 80049e0:	f003 0308 	and.w	r3, r3, #8
 80049e4:	2b08      	cmp	r3, #8
 80049e6:	d110      	bne.n	8004a0a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2208      	movs	r2, #8
 80049ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80049f0:	68f8      	ldr	r0, [r7, #12]
 80049f2:	f000 f8ff 	bl	8004bf4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2208      	movs	r2, #8
 80049fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e029      	b.n	8004a5e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	69db      	ldr	r3, [r3, #28]
 8004a10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a18:	d111      	bne.n	8004a3e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a22:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a24:	68f8      	ldr	r0, [r7, #12]
 8004a26:	f000 f8e5 	bl	8004bf4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2220      	movs	r2, #32
 8004a2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e00f      	b.n	8004a5e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	69da      	ldr	r2, [r3, #28]
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	4013      	ands	r3, r2
 8004a48:	68ba      	ldr	r2, [r7, #8]
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	bf0c      	ite	eq
 8004a4e:	2301      	moveq	r3, #1
 8004a50:	2300      	movne	r3, #0
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	461a      	mov	r2, r3
 8004a56:	79fb      	ldrb	r3, [r7, #7]
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d0a6      	beq.n	80049aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a5c:	2300      	movs	r3, #0
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3710      	adds	r7, #16
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
	...

08004a68 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b097      	sub	sp, #92	; 0x5c
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	60b9      	str	r1, [r7, #8]
 8004a72:	4613      	mov	r3, r2
 8004a74:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	68ba      	ldr	r2, [r7, #8]
 8004a7a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	88fa      	ldrh	r2, [r7, #6]
 8004a80:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	88fa      	ldrh	r2, [r7, #6]
 8004a88:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a9a:	d10e      	bne.n	8004aba <UART_Start_Receive_IT+0x52>
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	691b      	ldr	r3, [r3, #16]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d105      	bne.n	8004ab0 <UART_Start_Receive_IT+0x48>
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004aaa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004aae:	e02d      	b.n	8004b0c <UART_Start_Receive_IT+0xa4>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	22ff      	movs	r2, #255	; 0xff
 8004ab4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004ab8:	e028      	b.n	8004b0c <UART_Start_Receive_IT+0xa4>
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d10d      	bne.n	8004ade <UART_Start_Receive_IT+0x76>
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	691b      	ldr	r3, [r3, #16]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d104      	bne.n	8004ad4 <UART_Start_Receive_IT+0x6c>
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	22ff      	movs	r2, #255	; 0xff
 8004ace:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004ad2:	e01b      	b.n	8004b0c <UART_Start_Receive_IT+0xa4>
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	227f      	movs	r2, #127	; 0x7f
 8004ad8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004adc:	e016      	b.n	8004b0c <UART_Start_Receive_IT+0xa4>
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ae6:	d10d      	bne.n	8004b04 <UART_Start_Receive_IT+0x9c>
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	691b      	ldr	r3, [r3, #16]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d104      	bne.n	8004afa <UART_Start_Receive_IT+0x92>
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	227f      	movs	r2, #127	; 0x7f
 8004af4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004af8:	e008      	b.n	8004b0c <UART_Start_Receive_IT+0xa4>
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	223f      	movs	r2, #63	; 0x3f
 8004afe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b02:	e003      	b.n	8004b0c <UART_Start_Receive_IT+0xa4>
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2222      	movs	r2, #34	; 0x22
 8004b18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	3308      	adds	r3, #8
 8004b22:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b26:	e853 3f00 	ldrex	r3, [r3]
 8004b2a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b2e:	f043 0301 	orr.w	r3, r3, #1
 8004b32:	657b      	str	r3, [r7, #84]	; 0x54
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	3308      	adds	r3, #8
 8004b3a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004b3c:	64ba      	str	r2, [r7, #72]	; 0x48
 8004b3e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b40:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004b42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b44:	e841 2300 	strex	r3, r2, [r1]
 8004b48:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004b4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d1e5      	bne.n	8004b1c <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b58:	d107      	bne.n	8004b6a <UART_Start_Receive_IT+0x102>
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d103      	bne.n	8004b6a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	4a21      	ldr	r2, [pc, #132]	; (8004bec <UART_Start_Receive_IT+0x184>)
 8004b66:	669a      	str	r2, [r3, #104]	; 0x68
 8004b68:	e002      	b.n	8004b70 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	4a20      	ldr	r2, [pc, #128]	; (8004bf0 <UART_Start_Receive_IT+0x188>)
 8004b6e:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	691b      	ldr	r3, [r3, #16]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d019      	beq.n	8004bac <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b80:	e853 3f00 	ldrex	r3, [r3]
 8004b84:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b88:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004b8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	461a      	mov	r2, r3
 8004b94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b96:	637b      	str	r3, [r7, #52]	; 0x34
 8004b98:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b9a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b9e:	e841 2300 	strex	r3, r2, [r1]
 8004ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d1e6      	bne.n	8004b78 <UART_Start_Receive_IT+0x110>
 8004baa:	e018      	b.n	8004bde <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	e853 3f00 	ldrex	r3, [r3]
 8004bb8:	613b      	str	r3, [r7, #16]
   return(result);
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	f043 0320 	orr.w	r3, r3, #32
 8004bc0:	653b      	str	r3, [r7, #80]	; 0x50
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bca:	623b      	str	r3, [r7, #32]
 8004bcc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bce:	69f9      	ldr	r1, [r7, #28]
 8004bd0:	6a3a      	ldr	r2, [r7, #32]
 8004bd2:	e841 2300 	strex	r3, r2, [r1]
 8004bd6:	61bb      	str	r3, [r7, #24]
   return(result);
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d1e6      	bne.n	8004bac <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004bde:	2300      	movs	r3, #0
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	375c      	adds	r7, #92	; 0x5c
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr
 8004bec:	08004ef9 	.word	0x08004ef9
 8004bf0:	08004d3d 	.word	0x08004d3d

08004bf4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b095      	sub	sp, #84	; 0x54
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c04:	e853 3f00 	ldrex	r3, [r3]
 8004c08:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c10:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	461a      	mov	r2, r3
 8004c18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c1a:	643b      	str	r3, [r7, #64]	; 0x40
 8004c1c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c1e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004c20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c22:	e841 2300 	strex	r3, r2, [r1]
 8004c26:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d1e6      	bne.n	8004bfc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	3308      	adds	r3, #8
 8004c34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c36:	6a3b      	ldr	r3, [r7, #32]
 8004c38:	e853 3f00 	ldrex	r3, [r3]
 8004c3c:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	f023 0301 	bic.w	r3, r3, #1
 8004c44:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	3308      	adds	r3, #8
 8004c4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c50:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c56:	e841 2300 	strex	r3, r2, [r1]
 8004c5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d1e5      	bne.n	8004c2e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d118      	bne.n	8004c9c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	e853 3f00 	ldrex	r3, [r3]
 8004c76:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	f023 0310 	bic.w	r3, r3, #16
 8004c7e:	647b      	str	r3, [r7, #68]	; 0x44
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	461a      	mov	r2, r3
 8004c86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c88:	61bb      	str	r3, [r7, #24]
 8004c8a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c8c:	6979      	ldr	r1, [r7, #20]
 8004c8e:	69ba      	ldr	r2, [r7, #24]
 8004c90:	e841 2300 	strex	r3, r2, [r1]
 8004c94:	613b      	str	r3, [r7, #16]
   return(result);
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d1e6      	bne.n	8004c6a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2220      	movs	r2, #32
 8004ca0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004cb0:	bf00      	nop
 8004cb2:	3754      	adds	r7, #84	; 0x54
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004cda:	68f8      	ldr	r0, [r7, #12]
 8004cdc:	f7ff faa2 	bl	8004224 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ce0:	bf00      	nop
 8004ce2:	3710      	adds	r7, #16
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b088      	sub	sp, #32
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	e853 3f00 	ldrex	r3, [r3]
 8004cfc:	60bb      	str	r3, [r7, #8]
   return(result);
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d04:	61fb      	str	r3, [r7, #28]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	69fb      	ldr	r3, [r7, #28]
 8004d0e:	61bb      	str	r3, [r7, #24]
 8004d10:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d12:	6979      	ldr	r1, [r7, #20]
 8004d14:	69ba      	ldr	r2, [r7, #24]
 8004d16:	e841 2300 	strex	r3, r2, [r1]
 8004d1a:	613b      	str	r3, [r7, #16]
   return(result);
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d1e6      	bne.n	8004cf0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2220      	movs	r2, #32
 8004d26:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f7ff fa6e 	bl	8004210 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d34:	bf00      	nop
 8004d36:	3720      	adds	r7, #32
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b09c      	sub	sp, #112	; 0x70
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004d4a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d54:	2b22      	cmp	r3, #34	; 0x22
 8004d56:	f040 80be 	bne.w	8004ed6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004d60:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004d64:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004d68:	b2d9      	uxtb	r1, r3
 8004d6a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004d6e:	b2da      	uxtb	r2, r3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d74:	400a      	ands	r2, r1
 8004d76:	b2d2      	uxtb	r2, r2
 8004d78:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d7e:	1c5a      	adds	r2, r3, #1
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	3b01      	subs	r3, #1
 8004d8e:	b29a      	uxth	r2, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	f040 80a3 	bne.w	8004eea <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004daa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dac:	e853 3f00 	ldrex	r3, [r3]
 8004db0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004db2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004db4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004db8:	66bb      	str	r3, [r7, #104]	; 0x68
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004dc2:	65bb      	str	r3, [r7, #88]	; 0x58
 8004dc4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004dc8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004dca:	e841 2300 	strex	r3, r2, [r1]
 8004dce:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004dd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d1e6      	bne.n	8004da4 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	3308      	adds	r3, #8
 8004ddc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004de0:	e853 3f00 	ldrex	r3, [r3]
 8004de4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004de8:	f023 0301 	bic.w	r3, r3, #1
 8004dec:	667b      	str	r3, [r7, #100]	; 0x64
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	3308      	adds	r3, #8
 8004df4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004df6:	647a      	str	r2, [r7, #68]	; 0x44
 8004df8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dfa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004dfc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004dfe:	e841 2300 	strex	r3, r2, [r1]
 8004e02:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d1e5      	bne.n	8004dd6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2220      	movs	r2, #32
 8004e0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a34      	ldr	r2, [pc, #208]	; (8004ef4 <UART_RxISR_8BIT+0x1b8>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d01f      	beq.n	8004e68 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d018      	beq.n	8004e68 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3e:	e853 3f00 	ldrex	r3, [r3]
 8004e42:	623b      	str	r3, [r7, #32]
   return(result);
 8004e44:	6a3b      	ldr	r3, [r7, #32]
 8004e46:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004e4a:	663b      	str	r3, [r7, #96]	; 0x60
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	461a      	mov	r2, r3
 8004e52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e54:	633b      	str	r3, [r7, #48]	; 0x30
 8004e56:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e58:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e5c:	e841 2300 	strex	r3, r2, [r1]
 8004e60:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d1e6      	bne.n	8004e36 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d12e      	bne.n	8004ece <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	e853 3f00 	ldrex	r3, [r3]
 8004e82:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f023 0310 	bic.w	r3, r3, #16
 8004e8a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	461a      	mov	r2, r3
 8004e92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e94:	61fb      	str	r3, [r7, #28]
 8004e96:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e98:	69b9      	ldr	r1, [r7, #24]
 8004e9a:	69fa      	ldr	r2, [r7, #28]
 8004e9c:	e841 2300 	strex	r3, r2, [r1]
 8004ea0:	617b      	str	r3, [r7, #20]
   return(result);
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d1e6      	bne.n	8004e76 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	69db      	ldr	r3, [r3, #28]
 8004eae:	f003 0310 	and.w	r3, r3, #16
 8004eb2:	2b10      	cmp	r3, #16
 8004eb4:	d103      	bne.n	8004ebe <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	2210      	movs	r2, #16
 8004ebc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004ec4:	4619      	mov	r1, r3
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f7ff f9b6 	bl	8004238 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004ecc:	e00d      	b.n	8004eea <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f7fb fd6a 	bl	80009a8 <HAL_UART_RxCpltCallback>
}
 8004ed4:	e009      	b.n	8004eea <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	8b1b      	ldrh	r3, [r3, #24]
 8004edc:	b29a      	uxth	r2, r3
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f042 0208 	orr.w	r2, r2, #8
 8004ee6:	b292      	uxth	r2, r2
 8004ee8:	831a      	strh	r2, [r3, #24]
}
 8004eea:	bf00      	nop
 8004eec:	3770      	adds	r7, #112	; 0x70
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	40008000 	.word	0x40008000

08004ef8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b09c      	sub	sp, #112	; 0x70
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004f06:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f10:	2b22      	cmp	r3, #34	; 0x22
 8004f12:	f040 80be 	bne.w	8005092 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004f1c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f24:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004f26:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8004f2a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004f2e:	4013      	ands	r3, r2
 8004f30:	b29a      	uxth	r2, r3
 8004f32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f34:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f3a:	1c9a      	adds	r2, r3, #2
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	3b01      	subs	r3, #1
 8004f4a:	b29a      	uxth	r2, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	f040 80a3 	bne.w	80050a6 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f68:	e853 3f00 	ldrex	r3, [r3]
 8004f6c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004f6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f70:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f74:	667b      	str	r3, [r7, #100]	; 0x64
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f7e:	657b      	str	r3, [r7, #84]	; 0x54
 8004f80:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f82:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004f84:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004f86:	e841 2300 	strex	r3, r2, [r1]
 8004f8a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004f8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d1e6      	bne.n	8004f60 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	3308      	adds	r3, #8
 8004f98:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f9c:	e853 3f00 	ldrex	r3, [r3]
 8004fa0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa4:	f023 0301 	bic.w	r3, r3, #1
 8004fa8:	663b      	str	r3, [r7, #96]	; 0x60
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	3308      	adds	r3, #8
 8004fb0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004fb2:	643a      	str	r2, [r7, #64]	; 0x40
 8004fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004fb8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004fba:	e841 2300 	strex	r3, r2, [r1]
 8004fbe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d1e5      	bne.n	8004f92 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2220      	movs	r2, #32
 8004fca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a34      	ldr	r2, [pc, #208]	; (80050b0 <UART_RxISR_16BIT+0x1b8>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d01f      	beq.n	8005024 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d018      	beq.n	8005024 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff8:	6a3b      	ldr	r3, [r7, #32]
 8004ffa:	e853 3f00 	ldrex	r3, [r3]
 8004ffe:	61fb      	str	r3, [r7, #28]
   return(result);
 8005000:	69fb      	ldr	r3, [r7, #28]
 8005002:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005006:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	461a      	mov	r2, r3
 800500e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005010:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005012:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005014:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005016:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005018:	e841 2300 	strex	r3, r2, [r1]
 800501c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800501e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005020:	2b00      	cmp	r3, #0
 8005022:	d1e6      	bne.n	8004ff2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005028:	2b01      	cmp	r3, #1
 800502a:	d12e      	bne.n	800508a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	e853 3f00 	ldrex	r3, [r3]
 800503e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	f023 0310 	bic.w	r3, r3, #16
 8005046:	65bb      	str	r3, [r7, #88]	; 0x58
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	461a      	mov	r2, r3
 800504e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005050:	61bb      	str	r3, [r7, #24]
 8005052:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005054:	6979      	ldr	r1, [r7, #20]
 8005056:	69ba      	ldr	r2, [r7, #24]
 8005058:	e841 2300 	strex	r3, r2, [r1]
 800505c:	613b      	str	r3, [r7, #16]
   return(result);
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d1e6      	bne.n	8005032 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	69db      	ldr	r3, [r3, #28]
 800506a:	f003 0310 	and.w	r3, r3, #16
 800506e:	2b10      	cmp	r3, #16
 8005070:	d103      	bne.n	800507a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	2210      	movs	r2, #16
 8005078:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005080:	4619      	mov	r1, r3
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f7ff f8d8 	bl	8004238 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005088:	e00d      	b.n	80050a6 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f7fb fc8c 	bl	80009a8 <HAL_UART_RxCpltCallback>
}
 8005090:	e009      	b.n	80050a6 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	8b1b      	ldrh	r3, [r3, #24]
 8005098:	b29a      	uxth	r2, r3
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f042 0208 	orr.w	r2, r2, #8
 80050a2:	b292      	uxth	r2, r2
 80050a4:	831a      	strh	r2, [r3, #24]
}
 80050a6:	bf00      	nop
 80050a8:	3770      	adds	r7, #112	; 0x70
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
 80050ae:	bf00      	nop
 80050b0:	40008000 	.word	0x40008000

080050b4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80050bc:	bf00      	nop
 80050be:	370c      	adds	r7, #12
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr

080050c8 <__NVIC_SetPriority>:
{
 80050c8:	b480      	push	{r7}
 80050ca:	b083      	sub	sp, #12
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	4603      	mov	r3, r0
 80050d0:	6039      	str	r1, [r7, #0]
 80050d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	db0a      	blt.n	80050f2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	b2da      	uxtb	r2, r3
 80050e0:	490c      	ldr	r1, [pc, #48]	; (8005114 <__NVIC_SetPriority+0x4c>)
 80050e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050e6:	0112      	lsls	r2, r2, #4
 80050e8:	b2d2      	uxtb	r2, r2
 80050ea:	440b      	add	r3, r1
 80050ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80050f0:	e00a      	b.n	8005108 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	b2da      	uxtb	r2, r3
 80050f6:	4908      	ldr	r1, [pc, #32]	; (8005118 <__NVIC_SetPriority+0x50>)
 80050f8:	79fb      	ldrb	r3, [r7, #7]
 80050fa:	f003 030f 	and.w	r3, r3, #15
 80050fe:	3b04      	subs	r3, #4
 8005100:	0112      	lsls	r2, r2, #4
 8005102:	b2d2      	uxtb	r2, r2
 8005104:	440b      	add	r3, r1
 8005106:	761a      	strb	r2, [r3, #24]
}
 8005108:	bf00      	nop
 800510a:	370c      	adds	r7, #12
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr
 8005114:	e000e100 	.word	0xe000e100
 8005118:	e000ed00 	.word	0xe000ed00

0800511c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800511c:	b580      	push	{r7, lr}
 800511e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005120:	4b05      	ldr	r3, [pc, #20]	; (8005138 <SysTick_Handler+0x1c>)
 8005122:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005124:	f001 fdd4 	bl	8006cd0 <xTaskGetSchedulerState>
 8005128:	4603      	mov	r3, r0
 800512a:	2b01      	cmp	r3, #1
 800512c:	d001      	beq.n	8005132 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800512e:	f002 fbbb 	bl	80078a8 <xPortSysTickHandler>
  }
}
 8005132:	bf00      	nop
 8005134:	bd80      	pop	{r7, pc}
 8005136:	bf00      	nop
 8005138:	e000e010 	.word	0xe000e010

0800513c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800513c:	b580      	push	{r7, lr}
 800513e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005140:	2100      	movs	r1, #0
 8005142:	f06f 0004 	mvn.w	r0, #4
 8005146:	f7ff ffbf 	bl	80050c8 <__NVIC_SetPriority>
#endif
}
 800514a:	bf00      	nop
 800514c:	bd80      	pop	{r7, pc}
	...

08005150 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005150:	b480      	push	{r7}
 8005152:	b083      	sub	sp, #12
 8005154:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005156:	f3ef 8305 	mrs	r3, IPSR
 800515a:	603b      	str	r3, [r7, #0]
  return(result);
 800515c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800515e:	2b00      	cmp	r3, #0
 8005160:	d003      	beq.n	800516a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005162:	f06f 0305 	mvn.w	r3, #5
 8005166:	607b      	str	r3, [r7, #4]
 8005168:	e00c      	b.n	8005184 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800516a:	4b0a      	ldr	r3, [pc, #40]	; (8005194 <osKernelInitialize+0x44>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d105      	bne.n	800517e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005172:	4b08      	ldr	r3, [pc, #32]	; (8005194 <osKernelInitialize+0x44>)
 8005174:	2201      	movs	r2, #1
 8005176:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005178:	2300      	movs	r3, #0
 800517a:	607b      	str	r3, [r7, #4]
 800517c:	e002      	b.n	8005184 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800517e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005182:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005184:	687b      	ldr	r3, [r7, #4]
}
 8005186:	4618      	mov	r0, r3
 8005188:	370c      	adds	r7, #12
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr
 8005192:	bf00      	nop
 8005194:	20000368 	.word	0x20000368

08005198 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800519e:	f3ef 8305 	mrs	r3, IPSR
 80051a2:	603b      	str	r3, [r7, #0]
  return(result);
 80051a4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d003      	beq.n	80051b2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80051aa:	f06f 0305 	mvn.w	r3, #5
 80051ae:	607b      	str	r3, [r7, #4]
 80051b0:	e010      	b.n	80051d4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80051b2:	4b0b      	ldr	r3, [pc, #44]	; (80051e0 <osKernelStart+0x48>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d109      	bne.n	80051ce <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80051ba:	f7ff ffbf 	bl	800513c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80051be:	4b08      	ldr	r3, [pc, #32]	; (80051e0 <osKernelStart+0x48>)
 80051c0:	2202      	movs	r2, #2
 80051c2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80051c4:	f001 f928 	bl	8006418 <vTaskStartScheduler>
      stat = osOK;
 80051c8:	2300      	movs	r3, #0
 80051ca:	607b      	str	r3, [r7, #4]
 80051cc:	e002      	b.n	80051d4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80051ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80051d2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80051d4:	687b      	ldr	r3, [r7, #4]
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3708      	adds	r7, #8
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	bf00      	nop
 80051e0:	20000368 	.word	0x20000368

080051e4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b08e      	sub	sp, #56	; 0x38
 80051e8:	af04      	add	r7, sp, #16
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	60b9      	str	r1, [r7, #8]
 80051ee:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80051f0:	2300      	movs	r3, #0
 80051f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051f4:	f3ef 8305 	mrs	r3, IPSR
 80051f8:	617b      	str	r3, [r7, #20]
  return(result);
 80051fa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d17e      	bne.n	80052fe <osThreadNew+0x11a>
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d07b      	beq.n	80052fe <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005206:	2380      	movs	r3, #128	; 0x80
 8005208:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800520a:	2318      	movs	r3, #24
 800520c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800520e:	2300      	movs	r3, #0
 8005210:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005212:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005216:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d045      	beq.n	80052aa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d002      	beq.n	800522c <osThreadNew+0x48>
        name = attr->name;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	699b      	ldr	r3, [r3, #24]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d002      	beq.n	800523a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	699b      	ldr	r3, [r3, #24]
 8005238:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800523a:	69fb      	ldr	r3, [r7, #28]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d008      	beq.n	8005252 <osThreadNew+0x6e>
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	2b38      	cmp	r3, #56	; 0x38
 8005244:	d805      	bhi.n	8005252 <osThreadNew+0x6e>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	f003 0301 	and.w	r3, r3, #1
 800524e:	2b00      	cmp	r3, #0
 8005250:	d001      	beq.n	8005256 <osThreadNew+0x72>
        return (NULL);
 8005252:	2300      	movs	r3, #0
 8005254:	e054      	b.n	8005300 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	695b      	ldr	r3, [r3, #20]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d003      	beq.n	8005266 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	695b      	ldr	r3, [r3, #20]
 8005262:	089b      	lsrs	r3, r3, #2
 8005264:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d00e      	beq.n	800528c <osThreadNew+0xa8>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	2ba7      	cmp	r3, #167	; 0xa7
 8005274:	d90a      	bls.n	800528c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800527a:	2b00      	cmp	r3, #0
 800527c:	d006      	beq.n	800528c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	695b      	ldr	r3, [r3, #20]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d002      	beq.n	800528c <osThreadNew+0xa8>
        mem = 1;
 8005286:	2301      	movs	r3, #1
 8005288:	61bb      	str	r3, [r7, #24]
 800528a:	e010      	b.n	80052ae <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d10c      	bne.n	80052ae <osThreadNew+0xca>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d108      	bne.n	80052ae <osThreadNew+0xca>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	691b      	ldr	r3, [r3, #16]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d104      	bne.n	80052ae <osThreadNew+0xca>
          mem = 0;
 80052a4:	2300      	movs	r3, #0
 80052a6:	61bb      	str	r3, [r7, #24]
 80052a8:	e001      	b.n	80052ae <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80052aa:	2300      	movs	r3, #0
 80052ac:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80052ae:	69bb      	ldr	r3, [r7, #24]
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d110      	bne.n	80052d6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80052bc:	9202      	str	r2, [sp, #8]
 80052be:	9301      	str	r3, [sp, #4]
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	9300      	str	r3, [sp, #0]
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	6a3a      	ldr	r2, [r7, #32]
 80052c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80052ca:	68f8      	ldr	r0, [r7, #12]
 80052cc:	f000 feb8 	bl	8006040 <xTaskCreateStatic>
 80052d0:	4603      	mov	r3, r0
 80052d2:	613b      	str	r3, [r7, #16]
 80052d4:	e013      	b.n	80052fe <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80052d6:	69bb      	ldr	r3, [r7, #24]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d110      	bne.n	80052fe <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80052dc:	6a3b      	ldr	r3, [r7, #32]
 80052de:	b29a      	uxth	r2, r3
 80052e0:	f107 0310 	add.w	r3, r7, #16
 80052e4:	9301      	str	r3, [sp, #4]
 80052e6:	69fb      	ldr	r3, [r7, #28]
 80052e8:	9300      	str	r3, [sp, #0]
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80052ee:	68f8      	ldr	r0, [r7, #12]
 80052f0:	f000 ff03 	bl	80060fa <xTaskCreate>
 80052f4:	4603      	mov	r3, r0
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d001      	beq.n	80052fe <osThreadNew+0x11a>
            hTask = NULL;
 80052fa:	2300      	movs	r3, #0
 80052fc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80052fe:	693b      	ldr	r3, [r7, #16]
}
 8005300:	4618      	mov	r0, r3
 8005302:	3728      	adds	r7, #40	; 0x28
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}

08005308 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005308:	b580      	push	{r7, lr}
 800530a:	b084      	sub	sp, #16
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005310:	f3ef 8305 	mrs	r3, IPSR
 8005314:	60bb      	str	r3, [r7, #8]
  return(result);
 8005316:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005318:	2b00      	cmp	r3, #0
 800531a:	d003      	beq.n	8005324 <osDelay+0x1c>
    stat = osErrorISR;
 800531c:	f06f 0305 	mvn.w	r3, #5
 8005320:	60fb      	str	r3, [r7, #12]
 8005322:	e007      	b.n	8005334 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005324:	2300      	movs	r3, #0
 8005326:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d002      	beq.n	8005334 <osDelay+0x2c>
      vTaskDelay(ticks);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f001 f83e 	bl	80063b0 <vTaskDelay>
    }
  }

  return (stat);
 8005334:	68fb      	ldr	r3, [r7, #12]
}
 8005336:	4618      	mov	r0, r3
 8005338:	3710      	adds	r7, #16
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}

0800533e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800533e:	b580      	push	{r7, lr}
 8005340:	b08a      	sub	sp, #40	; 0x28
 8005342:	af02      	add	r7, sp, #8
 8005344:	60f8      	str	r0, [r7, #12]
 8005346:	60b9      	str	r1, [r7, #8]
 8005348:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800534a:	2300      	movs	r3, #0
 800534c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800534e:	f3ef 8305 	mrs	r3, IPSR
 8005352:	613b      	str	r3, [r7, #16]
  return(result);
 8005354:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005356:	2b00      	cmp	r3, #0
 8005358:	d15f      	bne.n	800541a <osMessageQueueNew+0xdc>
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d05c      	beq.n	800541a <osMessageQueueNew+0xdc>
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d059      	beq.n	800541a <osMessageQueueNew+0xdc>
    mem = -1;
 8005366:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800536a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d029      	beq.n	80053c6 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d012      	beq.n	80053a0 <osMessageQueueNew+0x62>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	2b4f      	cmp	r3, #79	; 0x4f
 8005380:	d90e      	bls.n	80053a0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005386:	2b00      	cmp	r3, #0
 8005388:	d00a      	beq.n	80053a0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	695a      	ldr	r2, [r3, #20]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	68b9      	ldr	r1, [r7, #8]
 8005392:	fb01 f303 	mul.w	r3, r1, r3
 8005396:	429a      	cmp	r2, r3
 8005398:	d302      	bcc.n	80053a0 <osMessageQueueNew+0x62>
        mem = 1;
 800539a:	2301      	movs	r3, #1
 800539c:	61bb      	str	r3, [r7, #24]
 800539e:	e014      	b.n	80053ca <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d110      	bne.n	80053ca <osMessageQueueNew+0x8c>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d10c      	bne.n	80053ca <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d108      	bne.n	80053ca <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	695b      	ldr	r3, [r3, #20]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d104      	bne.n	80053ca <osMessageQueueNew+0x8c>
          mem = 0;
 80053c0:	2300      	movs	r3, #0
 80053c2:	61bb      	str	r3, [r7, #24]
 80053c4:	e001      	b.n	80053ca <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80053c6:	2300      	movs	r3, #0
 80053c8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d10b      	bne.n	80053e8 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	691a      	ldr	r2, [r3, #16]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	2100      	movs	r1, #0
 80053da:	9100      	str	r1, [sp, #0]
 80053dc:	68b9      	ldr	r1, [r7, #8]
 80053de:	68f8      	ldr	r0, [r7, #12]
 80053e0:	f000 f970 	bl	80056c4 <xQueueGenericCreateStatic>
 80053e4:	61f8      	str	r0, [r7, #28]
 80053e6:	e008      	b.n	80053fa <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80053e8:	69bb      	ldr	r3, [r7, #24]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d105      	bne.n	80053fa <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80053ee:	2200      	movs	r2, #0
 80053f0:	68b9      	ldr	r1, [r7, #8]
 80053f2:	68f8      	ldr	r0, [r7, #12]
 80053f4:	f000 f9de 	bl	80057b4 <xQueueGenericCreate>
 80053f8:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80053fa:	69fb      	ldr	r3, [r7, #28]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d00c      	beq.n	800541a <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d003      	beq.n	800540e <osMessageQueueNew+0xd0>
        name = attr->name;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	617b      	str	r3, [r7, #20]
 800540c:	e001      	b.n	8005412 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800540e:	2300      	movs	r3, #0
 8005410:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8005412:	6979      	ldr	r1, [r7, #20]
 8005414:	69f8      	ldr	r0, [r7, #28]
 8005416:	f000 fdb5 	bl	8005f84 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800541a:	69fb      	ldr	r3, [r7, #28]
}
 800541c:	4618      	mov	r0, r3
 800541e:	3720      	adds	r7, #32
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}

08005424 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005424:	b480      	push	{r7}
 8005426:	b085      	sub	sp, #20
 8005428:	af00      	add	r7, sp, #0
 800542a:	60f8      	str	r0, [r7, #12]
 800542c:	60b9      	str	r1, [r7, #8]
 800542e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	4a07      	ldr	r2, [pc, #28]	; (8005450 <vApplicationGetIdleTaskMemory+0x2c>)
 8005434:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	4a06      	ldr	r2, [pc, #24]	; (8005454 <vApplicationGetIdleTaskMemory+0x30>)
 800543a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2280      	movs	r2, #128	; 0x80
 8005440:	601a      	str	r2, [r3, #0]
}
 8005442:	bf00      	nop
 8005444:	3714      	adds	r7, #20
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr
 800544e:	bf00      	nop
 8005450:	2000036c 	.word	0x2000036c
 8005454:	20000414 	.word	0x20000414

08005458 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005458:	b480      	push	{r7}
 800545a:	b085      	sub	sp, #20
 800545c:	af00      	add	r7, sp, #0
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	4a07      	ldr	r2, [pc, #28]	; (8005484 <vApplicationGetTimerTaskMemory+0x2c>)
 8005468:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	4a06      	ldr	r2, [pc, #24]	; (8005488 <vApplicationGetTimerTaskMemory+0x30>)
 800546e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005476:	601a      	str	r2, [r3, #0]
}
 8005478:	bf00      	nop
 800547a:	3714      	adds	r7, #20
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr
 8005484:	20000614 	.word	0x20000614
 8005488:	200006bc 	.word	0x200006bc

0800548c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800548c:	b480      	push	{r7}
 800548e:	b083      	sub	sp, #12
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f103 0208 	add.w	r2, r3, #8
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80054a4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f103 0208 	add.w	r2, r3, #8
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f103 0208 	add.w	r2, r3, #8
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80054c0:	bf00      	nop
 80054c2:	370c      	adds	r7, #12
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr

080054cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80054cc:	b480      	push	{r7}
 80054ce:	b083      	sub	sp, #12
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80054da:	bf00      	nop
 80054dc:	370c      	adds	r7, #12
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr

080054e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80054e6:	b480      	push	{r7}
 80054e8:	b085      	sub	sp, #20
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
 80054ee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	68fa      	ldr	r2, [r7, #12]
 80054fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	689a      	ldr	r2, [r3, #8]
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	683a      	ldr	r2, [r7, #0]
 800550a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	683a      	ldr	r2, [r7, #0]
 8005510:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	1c5a      	adds	r2, r3, #1
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	601a      	str	r2, [r3, #0]
}
 8005522:	bf00      	nop
 8005524:	3714      	adds	r7, #20
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr

0800552e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800552e:	b480      	push	{r7}
 8005530:	b085      	sub	sp, #20
 8005532:	af00      	add	r7, sp, #0
 8005534:	6078      	str	r0, [r7, #4]
 8005536:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005544:	d103      	bne.n	800554e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	60fb      	str	r3, [r7, #12]
 800554c:	e00c      	b.n	8005568 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	3308      	adds	r3, #8
 8005552:	60fb      	str	r3, [r7, #12]
 8005554:	e002      	b.n	800555c <vListInsert+0x2e>
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	60fb      	str	r3, [r7, #12]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68ba      	ldr	r2, [r7, #8]
 8005564:	429a      	cmp	r2, r3
 8005566:	d2f6      	bcs.n	8005556 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	685a      	ldr	r2, [r3, #4]
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	683a      	ldr	r2, [r7, #0]
 8005576:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	68fa      	ldr	r2, [r7, #12]
 800557c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	683a      	ldr	r2, [r7, #0]
 8005582:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	1c5a      	adds	r2, r3, #1
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	601a      	str	r2, [r3, #0]
}
 8005594:	bf00      	nop
 8005596:	3714      	adds	r7, #20
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80055a0:	b480      	push	{r7}
 80055a2:	b085      	sub	sp, #20
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	691b      	ldr	r3, [r3, #16]
 80055ac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	6892      	ldr	r2, [r2, #8]
 80055b6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	6852      	ldr	r2, [r2, #4]
 80055c0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d103      	bne.n	80055d4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	689a      	ldr	r2, [r3, #8]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	1e5a      	subs	r2, r3, #1
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3714      	adds	r7, #20
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr

080055f4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b084      	sub	sp, #16
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d10a      	bne.n	800561e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800560c:	f383 8811 	msr	BASEPRI, r3
 8005610:	f3bf 8f6f 	isb	sy
 8005614:	f3bf 8f4f 	dsb	sy
 8005618:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800561a:	bf00      	nop
 800561c:	e7fe      	b.n	800561c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800561e:	f002 f8b1 	bl	8007784 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800562a:	68f9      	ldr	r1, [r7, #12]
 800562c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800562e:	fb01 f303 	mul.w	r3, r1, r3
 8005632:	441a      	add	r2, r3
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2200      	movs	r2, #0
 800563c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800564e:	3b01      	subs	r3, #1
 8005650:	68f9      	ldr	r1, [r7, #12]
 8005652:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005654:	fb01 f303 	mul.w	r3, r1, r3
 8005658:	441a      	add	r2, r3
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	22ff      	movs	r2, #255	; 0xff
 8005662:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	22ff      	movs	r2, #255	; 0xff
 800566a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d114      	bne.n	800569e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	691b      	ldr	r3, [r3, #16]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d01a      	beq.n	80056b2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	3310      	adds	r3, #16
 8005680:	4618      	mov	r0, r3
 8005682:	f001 f963 	bl	800694c <xTaskRemoveFromEventList>
 8005686:	4603      	mov	r3, r0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d012      	beq.n	80056b2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800568c:	4b0c      	ldr	r3, [pc, #48]	; (80056c0 <xQueueGenericReset+0xcc>)
 800568e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005692:	601a      	str	r2, [r3, #0]
 8005694:	f3bf 8f4f 	dsb	sy
 8005698:	f3bf 8f6f 	isb	sy
 800569c:	e009      	b.n	80056b2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	3310      	adds	r3, #16
 80056a2:	4618      	mov	r0, r3
 80056a4:	f7ff fef2 	bl	800548c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	3324      	adds	r3, #36	; 0x24
 80056ac:	4618      	mov	r0, r3
 80056ae:	f7ff feed 	bl	800548c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80056b2:	f002 f897 	bl	80077e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80056b6:	2301      	movs	r3, #1
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3710      	adds	r7, #16
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}
 80056c0:	e000ed04 	.word	0xe000ed04

080056c4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b08e      	sub	sp, #56	; 0x38
 80056c8:	af02      	add	r7, sp, #8
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	60b9      	str	r1, [r7, #8]
 80056ce:	607a      	str	r2, [r7, #4]
 80056d0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d10a      	bne.n	80056ee <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80056d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056dc:	f383 8811 	msr	BASEPRI, r3
 80056e0:	f3bf 8f6f 	isb	sy
 80056e4:	f3bf 8f4f 	dsb	sy
 80056e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80056ea:	bf00      	nop
 80056ec:	e7fe      	b.n	80056ec <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d10a      	bne.n	800570a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80056f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f8:	f383 8811 	msr	BASEPRI, r3
 80056fc:	f3bf 8f6f 	isb	sy
 8005700:	f3bf 8f4f 	dsb	sy
 8005704:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005706:	bf00      	nop
 8005708:	e7fe      	b.n	8005708 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d002      	beq.n	8005716 <xQueueGenericCreateStatic+0x52>
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d001      	beq.n	800571a <xQueueGenericCreateStatic+0x56>
 8005716:	2301      	movs	r3, #1
 8005718:	e000      	b.n	800571c <xQueueGenericCreateStatic+0x58>
 800571a:	2300      	movs	r3, #0
 800571c:	2b00      	cmp	r3, #0
 800571e:	d10a      	bne.n	8005736 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005724:	f383 8811 	msr	BASEPRI, r3
 8005728:	f3bf 8f6f 	isb	sy
 800572c:	f3bf 8f4f 	dsb	sy
 8005730:	623b      	str	r3, [r7, #32]
}
 8005732:	bf00      	nop
 8005734:	e7fe      	b.n	8005734 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d102      	bne.n	8005742 <xQueueGenericCreateStatic+0x7e>
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d101      	bne.n	8005746 <xQueueGenericCreateStatic+0x82>
 8005742:	2301      	movs	r3, #1
 8005744:	e000      	b.n	8005748 <xQueueGenericCreateStatic+0x84>
 8005746:	2300      	movs	r3, #0
 8005748:	2b00      	cmp	r3, #0
 800574a:	d10a      	bne.n	8005762 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800574c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005750:	f383 8811 	msr	BASEPRI, r3
 8005754:	f3bf 8f6f 	isb	sy
 8005758:	f3bf 8f4f 	dsb	sy
 800575c:	61fb      	str	r3, [r7, #28]
}
 800575e:	bf00      	nop
 8005760:	e7fe      	b.n	8005760 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005762:	2350      	movs	r3, #80	; 0x50
 8005764:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	2b50      	cmp	r3, #80	; 0x50
 800576a:	d00a      	beq.n	8005782 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800576c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005770:	f383 8811 	msr	BASEPRI, r3
 8005774:	f3bf 8f6f 	isb	sy
 8005778:	f3bf 8f4f 	dsb	sy
 800577c:	61bb      	str	r3, [r7, #24]
}
 800577e:	bf00      	nop
 8005780:	e7fe      	b.n	8005780 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005782:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800578a:	2b00      	cmp	r3, #0
 800578c:	d00d      	beq.n	80057aa <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800578e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005790:	2201      	movs	r2, #1
 8005792:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005796:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800579a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800579c:	9300      	str	r3, [sp, #0]
 800579e:	4613      	mov	r3, r2
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	68b9      	ldr	r1, [r7, #8]
 80057a4:	68f8      	ldr	r0, [r7, #12]
 80057a6:	f000 f83f 	bl	8005828 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80057aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3730      	adds	r7, #48	; 0x30
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}

080057b4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b08a      	sub	sp, #40	; 0x28
 80057b8:	af02      	add	r7, sp, #8
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	60b9      	str	r1, [r7, #8]
 80057be:	4613      	mov	r3, r2
 80057c0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d10a      	bne.n	80057de <xQueueGenericCreate+0x2a>
	__asm volatile
 80057c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057cc:	f383 8811 	msr	BASEPRI, r3
 80057d0:	f3bf 8f6f 	isb	sy
 80057d4:	f3bf 8f4f 	dsb	sy
 80057d8:	613b      	str	r3, [r7, #16]
}
 80057da:	bf00      	nop
 80057dc:	e7fe      	b.n	80057dc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	68ba      	ldr	r2, [r7, #8]
 80057e2:	fb02 f303 	mul.w	r3, r2, r3
 80057e6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	3350      	adds	r3, #80	; 0x50
 80057ec:	4618      	mov	r0, r3
 80057ee:	f002 f8eb 	bl	80079c8 <pvPortMalloc>
 80057f2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80057f4:	69bb      	ldr	r3, [r7, #24]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d011      	beq.n	800581e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80057fa:	69bb      	ldr	r3, [r7, #24]
 80057fc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	3350      	adds	r3, #80	; 0x50
 8005802:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005804:	69bb      	ldr	r3, [r7, #24]
 8005806:	2200      	movs	r2, #0
 8005808:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800580c:	79fa      	ldrb	r2, [r7, #7]
 800580e:	69bb      	ldr	r3, [r7, #24]
 8005810:	9300      	str	r3, [sp, #0]
 8005812:	4613      	mov	r3, r2
 8005814:	697a      	ldr	r2, [r7, #20]
 8005816:	68b9      	ldr	r1, [r7, #8]
 8005818:	68f8      	ldr	r0, [r7, #12]
 800581a:	f000 f805 	bl	8005828 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800581e:	69bb      	ldr	r3, [r7, #24]
	}
 8005820:	4618      	mov	r0, r3
 8005822:	3720      	adds	r7, #32
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}

08005828 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b084      	sub	sp, #16
 800582c:	af00      	add	r7, sp, #0
 800582e:	60f8      	str	r0, [r7, #12]
 8005830:	60b9      	str	r1, [r7, #8]
 8005832:	607a      	str	r2, [r7, #4]
 8005834:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d103      	bne.n	8005844 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800583c:	69bb      	ldr	r3, [r7, #24]
 800583e:	69ba      	ldr	r2, [r7, #24]
 8005840:	601a      	str	r2, [r3, #0]
 8005842:	e002      	b.n	800584a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005844:	69bb      	ldr	r3, [r7, #24]
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800584a:	69bb      	ldr	r3, [r7, #24]
 800584c:	68fa      	ldr	r2, [r7, #12]
 800584e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005850:	69bb      	ldr	r3, [r7, #24]
 8005852:	68ba      	ldr	r2, [r7, #8]
 8005854:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005856:	2101      	movs	r1, #1
 8005858:	69b8      	ldr	r0, [r7, #24]
 800585a:	f7ff fecb 	bl	80055f4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800585e:	69bb      	ldr	r3, [r7, #24]
 8005860:	78fa      	ldrb	r2, [r7, #3]
 8005862:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005866:	bf00      	nop
 8005868:	3710      	adds	r7, #16
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
	...

08005870 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b08e      	sub	sp, #56	; 0x38
 8005874:	af00      	add	r7, sp, #0
 8005876:	60f8      	str	r0, [r7, #12]
 8005878:	60b9      	str	r1, [r7, #8]
 800587a:	607a      	str	r2, [r7, #4]
 800587c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800587e:	2300      	movs	r3, #0
 8005880:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005888:	2b00      	cmp	r3, #0
 800588a:	d10a      	bne.n	80058a2 <xQueueGenericSend+0x32>
	__asm volatile
 800588c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005890:	f383 8811 	msr	BASEPRI, r3
 8005894:	f3bf 8f6f 	isb	sy
 8005898:	f3bf 8f4f 	dsb	sy
 800589c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800589e:	bf00      	nop
 80058a0:	e7fe      	b.n	80058a0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d103      	bne.n	80058b0 <xQueueGenericSend+0x40>
 80058a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d101      	bne.n	80058b4 <xQueueGenericSend+0x44>
 80058b0:	2301      	movs	r3, #1
 80058b2:	e000      	b.n	80058b6 <xQueueGenericSend+0x46>
 80058b4:	2300      	movs	r3, #0
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d10a      	bne.n	80058d0 <xQueueGenericSend+0x60>
	__asm volatile
 80058ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058be:	f383 8811 	msr	BASEPRI, r3
 80058c2:	f3bf 8f6f 	isb	sy
 80058c6:	f3bf 8f4f 	dsb	sy
 80058ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 80058cc:	bf00      	nop
 80058ce:	e7fe      	b.n	80058ce <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	2b02      	cmp	r3, #2
 80058d4:	d103      	bne.n	80058de <xQueueGenericSend+0x6e>
 80058d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d101      	bne.n	80058e2 <xQueueGenericSend+0x72>
 80058de:	2301      	movs	r3, #1
 80058e0:	e000      	b.n	80058e4 <xQueueGenericSend+0x74>
 80058e2:	2300      	movs	r3, #0
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d10a      	bne.n	80058fe <xQueueGenericSend+0x8e>
	__asm volatile
 80058e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ec:	f383 8811 	msr	BASEPRI, r3
 80058f0:	f3bf 8f6f 	isb	sy
 80058f4:	f3bf 8f4f 	dsb	sy
 80058f8:	623b      	str	r3, [r7, #32]
}
 80058fa:	bf00      	nop
 80058fc:	e7fe      	b.n	80058fc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80058fe:	f001 f9e7 	bl	8006cd0 <xTaskGetSchedulerState>
 8005902:	4603      	mov	r3, r0
 8005904:	2b00      	cmp	r3, #0
 8005906:	d102      	bne.n	800590e <xQueueGenericSend+0x9e>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d101      	bne.n	8005912 <xQueueGenericSend+0xa2>
 800590e:	2301      	movs	r3, #1
 8005910:	e000      	b.n	8005914 <xQueueGenericSend+0xa4>
 8005912:	2300      	movs	r3, #0
 8005914:	2b00      	cmp	r3, #0
 8005916:	d10a      	bne.n	800592e <xQueueGenericSend+0xbe>
	__asm volatile
 8005918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800591c:	f383 8811 	msr	BASEPRI, r3
 8005920:	f3bf 8f6f 	isb	sy
 8005924:	f3bf 8f4f 	dsb	sy
 8005928:	61fb      	str	r3, [r7, #28]
}
 800592a:	bf00      	nop
 800592c:	e7fe      	b.n	800592c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800592e:	f001 ff29 	bl	8007784 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005934:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800593a:	429a      	cmp	r2, r3
 800593c:	d302      	bcc.n	8005944 <xQueueGenericSend+0xd4>
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	2b02      	cmp	r3, #2
 8005942:	d129      	bne.n	8005998 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005944:	683a      	ldr	r2, [r7, #0]
 8005946:	68b9      	ldr	r1, [r7, #8]
 8005948:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800594a:	f000 fa0b 	bl	8005d64 <prvCopyDataToQueue>
 800594e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005954:	2b00      	cmp	r3, #0
 8005956:	d010      	beq.n	800597a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800595a:	3324      	adds	r3, #36	; 0x24
 800595c:	4618      	mov	r0, r3
 800595e:	f000 fff5 	bl	800694c <xTaskRemoveFromEventList>
 8005962:	4603      	mov	r3, r0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d013      	beq.n	8005990 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005968:	4b3f      	ldr	r3, [pc, #252]	; (8005a68 <xQueueGenericSend+0x1f8>)
 800596a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800596e:	601a      	str	r2, [r3, #0]
 8005970:	f3bf 8f4f 	dsb	sy
 8005974:	f3bf 8f6f 	isb	sy
 8005978:	e00a      	b.n	8005990 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800597a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800597c:	2b00      	cmp	r3, #0
 800597e:	d007      	beq.n	8005990 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005980:	4b39      	ldr	r3, [pc, #228]	; (8005a68 <xQueueGenericSend+0x1f8>)
 8005982:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005986:	601a      	str	r2, [r3, #0]
 8005988:	f3bf 8f4f 	dsb	sy
 800598c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005990:	f001 ff28 	bl	80077e4 <vPortExitCritical>
				return pdPASS;
 8005994:	2301      	movs	r3, #1
 8005996:	e063      	b.n	8005a60 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d103      	bne.n	80059a6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800599e:	f001 ff21 	bl	80077e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80059a2:	2300      	movs	r3, #0
 80059a4:	e05c      	b.n	8005a60 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80059a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d106      	bne.n	80059ba <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80059ac:	f107 0314 	add.w	r3, r7, #20
 80059b0:	4618      	mov	r0, r3
 80059b2:	f001 f82f 	bl	8006a14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80059b6:	2301      	movs	r3, #1
 80059b8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80059ba:	f001 ff13 	bl	80077e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80059be:	f000 fd9b 	bl	80064f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80059c2:	f001 fedf 	bl	8007784 <vPortEnterCritical>
 80059c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80059cc:	b25b      	sxtb	r3, r3
 80059ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059d2:	d103      	bne.n	80059dc <xQueueGenericSend+0x16c>
 80059d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d6:	2200      	movs	r2, #0
 80059d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80059e2:	b25b      	sxtb	r3, r3
 80059e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059e8:	d103      	bne.n	80059f2 <xQueueGenericSend+0x182>
 80059ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ec:	2200      	movs	r2, #0
 80059ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80059f2:	f001 fef7 	bl	80077e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80059f6:	1d3a      	adds	r2, r7, #4
 80059f8:	f107 0314 	add.w	r3, r7, #20
 80059fc:	4611      	mov	r1, r2
 80059fe:	4618      	mov	r0, r3
 8005a00:	f001 f81e 	bl	8006a40 <xTaskCheckForTimeOut>
 8005a04:	4603      	mov	r3, r0
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d124      	bne.n	8005a54 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005a0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a0c:	f000 faa2 	bl	8005f54 <prvIsQueueFull>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d018      	beq.n	8005a48 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a18:	3310      	adds	r3, #16
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	4611      	mov	r1, r2
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f000 ff44 	bl	80068ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005a24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a26:	f000 fa2d 	bl	8005e84 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005a2a:	f000 fd73 	bl	8006514 <xTaskResumeAll>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	f47f af7c 	bne.w	800592e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005a36:	4b0c      	ldr	r3, [pc, #48]	; (8005a68 <xQueueGenericSend+0x1f8>)
 8005a38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a3c:	601a      	str	r2, [r3, #0]
 8005a3e:	f3bf 8f4f 	dsb	sy
 8005a42:	f3bf 8f6f 	isb	sy
 8005a46:	e772      	b.n	800592e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005a48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a4a:	f000 fa1b 	bl	8005e84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005a4e:	f000 fd61 	bl	8006514 <xTaskResumeAll>
 8005a52:	e76c      	b.n	800592e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005a54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a56:	f000 fa15 	bl	8005e84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005a5a:	f000 fd5b 	bl	8006514 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005a5e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3738      	adds	r7, #56	; 0x38
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}
 8005a68:	e000ed04 	.word	0xe000ed04

08005a6c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b090      	sub	sp, #64	; 0x40
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	60b9      	str	r1, [r7, #8]
 8005a76:	607a      	str	r2, [r7, #4]
 8005a78:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d10a      	bne.n	8005a9a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a88:	f383 8811 	msr	BASEPRI, r3
 8005a8c:	f3bf 8f6f 	isb	sy
 8005a90:	f3bf 8f4f 	dsb	sy
 8005a94:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005a96:	bf00      	nop
 8005a98:	e7fe      	b.n	8005a98 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d103      	bne.n	8005aa8 <xQueueGenericSendFromISR+0x3c>
 8005aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d101      	bne.n	8005aac <xQueueGenericSendFromISR+0x40>
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e000      	b.n	8005aae <xQueueGenericSendFromISR+0x42>
 8005aac:	2300      	movs	r3, #0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d10a      	bne.n	8005ac8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab6:	f383 8811 	msr	BASEPRI, r3
 8005aba:	f3bf 8f6f 	isb	sy
 8005abe:	f3bf 8f4f 	dsb	sy
 8005ac2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005ac4:	bf00      	nop
 8005ac6:	e7fe      	b.n	8005ac6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	2b02      	cmp	r3, #2
 8005acc:	d103      	bne.n	8005ad6 <xQueueGenericSendFromISR+0x6a>
 8005ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d101      	bne.n	8005ada <xQueueGenericSendFromISR+0x6e>
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e000      	b.n	8005adc <xQueueGenericSendFromISR+0x70>
 8005ada:	2300      	movs	r3, #0
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d10a      	bne.n	8005af6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae4:	f383 8811 	msr	BASEPRI, r3
 8005ae8:	f3bf 8f6f 	isb	sy
 8005aec:	f3bf 8f4f 	dsb	sy
 8005af0:	623b      	str	r3, [r7, #32]
}
 8005af2:	bf00      	nop
 8005af4:	e7fe      	b.n	8005af4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005af6:	f001 ff27 	bl	8007948 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005afa:	f3ef 8211 	mrs	r2, BASEPRI
 8005afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b02:	f383 8811 	msr	BASEPRI, r3
 8005b06:	f3bf 8f6f 	isb	sy
 8005b0a:	f3bf 8f4f 	dsb	sy
 8005b0e:	61fa      	str	r2, [r7, #28]
 8005b10:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005b12:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005b14:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d302      	bcc.n	8005b28 <xQueueGenericSendFromISR+0xbc>
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	2b02      	cmp	r3, #2
 8005b26:	d12f      	bne.n	8005b88 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b36:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005b38:	683a      	ldr	r2, [r7, #0]
 8005b3a:	68b9      	ldr	r1, [r7, #8]
 8005b3c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005b3e:	f000 f911 	bl	8005d64 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005b42:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005b46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b4a:	d112      	bne.n	8005b72 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d016      	beq.n	8005b82 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b56:	3324      	adds	r3, #36	; 0x24
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f000 fef7 	bl	800694c <xTaskRemoveFromEventList>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d00e      	beq.n	8005b82 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d00b      	beq.n	8005b82 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	601a      	str	r2, [r3, #0]
 8005b70:	e007      	b.n	8005b82 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005b72:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005b76:	3301      	adds	r3, #1
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	b25a      	sxtb	r2, r3
 8005b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005b82:	2301      	movs	r3, #1
 8005b84:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005b86:	e001      	b.n	8005b8c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b8e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005b96:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005b98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3740      	adds	r7, #64	; 0x40
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
	...

08005ba4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b08c      	sub	sp, #48	; 0x30
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	60b9      	str	r1, [r7, #8]
 8005bae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d10a      	bne.n	8005bd4 <xQueueReceive+0x30>
	__asm volatile
 8005bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc2:	f383 8811 	msr	BASEPRI, r3
 8005bc6:	f3bf 8f6f 	isb	sy
 8005bca:	f3bf 8f4f 	dsb	sy
 8005bce:	623b      	str	r3, [r7, #32]
}
 8005bd0:	bf00      	nop
 8005bd2:	e7fe      	b.n	8005bd2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d103      	bne.n	8005be2 <xQueueReceive+0x3e>
 8005bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d101      	bne.n	8005be6 <xQueueReceive+0x42>
 8005be2:	2301      	movs	r3, #1
 8005be4:	e000      	b.n	8005be8 <xQueueReceive+0x44>
 8005be6:	2300      	movs	r3, #0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d10a      	bne.n	8005c02 <xQueueReceive+0x5e>
	__asm volatile
 8005bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf0:	f383 8811 	msr	BASEPRI, r3
 8005bf4:	f3bf 8f6f 	isb	sy
 8005bf8:	f3bf 8f4f 	dsb	sy
 8005bfc:	61fb      	str	r3, [r7, #28]
}
 8005bfe:	bf00      	nop
 8005c00:	e7fe      	b.n	8005c00 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005c02:	f001 f865 	bl	8006cd0 <xTaskGetSchedulerState>
 8005c06:	4603      	mov	r3, r0
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d102      	bne.n	8005c12 <xQueueReceive+0x6e>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d101      	bne.n	8005c16 <xQueueReceive+0x72>
 8005c12:	2301      	movs	r3, #1
 8005c14:	e000      	b.n	8005c18 <xQueueReceive+0x74>
 8005c16:	2300      	movs	r3, #0
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d10a      	bne.n	8005c32 <xQueueReceive+0x8e>
	__asm volatile
 8005c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c20:	f383 8811 	msr	BASEPRI, r3
 8005c24:	f3bf 8f6f 	isb	sy
 8005c28:	f3bf 8f4f 	dsb	sy
 8005c2c:	61bb      	str	r3, [r7, #24]
}
 8005c2e:	bf00      	nop
 8005c30:	e7fe      	b.n	8005c30 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005c32:	f001 fda7 	bl	8007784 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c3a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d01f      	beq.n	8005c82 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005c42:	68b9      	ldr	r1, [r7, #8]
 8005c44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c46:	f000 f8f7 	bl	8005e38 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4c:	1e5a      	subs	r2, r3, #1
 8005c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c50:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c54:	691b      	ldr	r3, [r3, #16]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d00f      	beq.n	8005c7a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c5c:	3310      	adds	r3, #16
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f000 fe74 	bl	800694c <xTaskRemoveFromEventList>
 8005c64:	4603      	mov	r3, r0
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d007      	beq.n	8005c7a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005c6a:	4b3d      	ldr	r3, [pc, #244]	; (8005d60 <xQueueReceive+0x1bc>)
 8005c6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c70:	601a      	str	r2, [r3, #0]
 8005c72:	f3bf 8f4f 	dsb	sy
 8005c76:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005c7a:	f001 fdb3 	bl	80077e4 <vPortExitCritical>
				return pdPASS;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e069      	b.n	8005d56 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d103      	bne.n	8005c90 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005c88:	f001 fdac 	bl	80077e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	e062      	b.n	8005d56 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d106      	bne.n	8005ca4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005c96:	f107 0310 	add.w	r3, r7, #16
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f000 feba 	bl	8006a14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005ca4:	f001 fd9e 	bl	80077e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005ca8:	f000 fc26 	bl	80064f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005cac:	f001 fd6a 	bl	8007784 <vPortEnterCritical>
 8005cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005cb6:	b25b      	sxtb	r3, r3
 8005cb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005cbc:	d103      	bne.n	8005cc6 <xQueueReceive+0x122>
 8005cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ccc:	b25b      	sxtb	r3, r3
 8005cce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005cd2:	d103      	bne.n	8005cdc <xQueueReceive+0x138>
 8005cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005cdc:	f001 fd82 	bl	80077e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ce0:	1d3a      	adds	r2, r7, #4
 8005ce2:	f107 0310 	add.w	r3, r7, #16
 8005ce6:	4611      	mov	r1, r2
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f000 fea9 	bl	8006a40 <xTaskCheckForTimeOut>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d123      	bne.n	8005d3c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005cf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cf6:	f000 f917 	bl	8005f28 <prvIsQueueEmpty>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d017      	beq.n	8005d30 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d02:	3324      	adds	r3, #36	; 0x24
 8005d04:	687a      	ldr	r2, [r7, #4]
 8005d06:	4611      	mov	r1, r2
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f000 fdcf 	bl	80068ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005d0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d10:	f000 f8b8 	bl	8005e84 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005d14:	f000 fbfe 	bl	8006514 <xTaskResumeAll>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d189      	bne.n	8005c32 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005d1e:	4b10      	ldr	r3, [pc, #64]	; (8005d60 <xQueueReceive+0x1bc>)
 8005d20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d24:	601a      	str	r2, [r3, #0]
 8005d26:	f3bf 8f4f 	dsb	sy
 8005d2a:	f3bf 8f6f 	isb	sy
 8005d2e:	e780      	b.n	8005c32 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005d30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d32:	f000 f8a7 	bl	8005e84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005d36:	f000 fbed 	bl	8006514 <xTaskResumeAll>
 8005d3a:	e77a      	b.n	8005c32 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005d3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d3e:	f000 f8a1 	bl	8005e84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005d42:	f000 fbe7 	bl	8006514 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d48:	f000 f8ee 	bl	8005f28 <prvIsQueueEmpty>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	f43f af6f 	beq.w	8005c32 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005d54:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3730      	adds	r7, #48	; 0x30
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
 8005d5e:	bf00      	nop
 8005d60:	e000ed04 	.word	0xe000ed04

08005d64 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b086      	sub	sp, #24
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	60f8      	str	r0, [r7, #12]
 8005d6c:	60b9      	str	r1, [r7, #8]
 8005d6e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005d70:	2300      	movs	r3, #0
 8005d72:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d78:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d10d      	bne.n	8005d9e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d14d      	bne.n	8005e26 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f000 ffbc 	bl	8006d0c <xTaskPriorityDisinherit>
 8005d94:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	609a      	str	r2, [r3, #8]
 8005d9c:	e043      	b.n	8005e26 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d119      	bne.n	8005dd8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6858      	ldr	r0, [r3, #4]
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dac:	461a      	mov	r2, r3
 8005dae:	68b9      	ldr	r1, [r7, #8]
 8005db0:	f002 f9af 	bl	8008112 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	685a      	ldr	r2, [r3, #4]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dbc:	441a      	add	r2, r3
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	685a      	ldr	r2, [r3, #4]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d32b      	bcc.n	8005e26 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	605a      	str	r2, [r3, #4]
 8005dd6:	e026      	b.n	8005e26 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	68d8      	ldr	r0, [r3, #12]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de0:	461a      	mov	r2, r3
 8005de2:	68b9      	ldr	r1, [r7, #8]
 8005de4:	f002 f995 	bl	8008112 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	68da      	ldr	r2, [r3, #12]
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df0:	425b      	negs	r3, r3
 8005df2:	441a      	add	r2, r3
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	68da      	ldr	r2, [r3, #12]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d207      	bcs.n	8005e14 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	689a      	ldr	r2, [r3, #8]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0c:	425b      	negs	r3, r3
 8005e0e:	441a      	add	r2, r3
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2b02      	cmp	r3, #2
 8005e18:	d105      	bne.n	8005e26 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d002      	beq.n	8005e26 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	3b01      	subs	r3, #1
 8005e24:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	1c5a      	adds	r2, r3, #1
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005e2e:	697b      	ldr	r3, [r7, #20]
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3718      	adds	r7, #24
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}

08005e38 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b082      	sub	sp, #8
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d018      	beq.n	8005e7c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	68da      	ldr	r2, [r3, #12]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e52:	441a      	add	r2, r3
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	68da      	ldr	r2, [r3, #12]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d303      	bcc.n	8005e6c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	68d9      	ldr	r1, [r3, #12]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e74:	461a      	mov	r2, r3
 8005e76:	6838      	ldr	r0, [r7, #0]
 8005e78:	f002 f94b 	bl	8008112 <memcpy>
	}
}
 8005e7c:	bf00      	nop
 8005e7e:	3708      	adds	r7, #8
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}

08005e84 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b084      	sub	sp, #16
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005e8c:	f001 fc7a 	bl	8007784 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e96:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005e98:	e011      	b.n	8005ebe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d012      	beq.n	8005ec8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	3324      	adds	r3, #36	; 0x24
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f000 fd50 	bl	800694c <xTaskRemoveFromEventList>
 8005eac:	4603      	mov	r3, r0
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d001      	beq.n	8005eb6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005eb2:	f000 fe27 	bl	8006b04 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005eb6:	7bfb      	ldrb	r3, [r7, #15]
 8005eb8:	3b01      	subs	r3, #1
 8005eba:	b2db      	uxtb	r3, r3
 8005ebc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ebe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	dce9      	bgt.n	8005e9a <prvUnlockQueue+0x16>
 8005ec6:	e000      	b.n	8005eca <prvUnlockQueue+0x46>
					break;
 8005ec8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	22ff      	movs	r2, #255	; 0xff
 8005ece:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005ed2:	f001 fc87 	bl	80077e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005ed6:	f001 fc55 	bl	8007784 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ee0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005ee2:	e011      	b.n	8005f08 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	691b      	ldr	r3, [r3, #16]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d012      	beq.n	8005f12 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	3310      	adds	r3, #16
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f000 fd2b 	bl	800694c <xTaskRemoveFromEventList>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d001      	beq.n	8005f00 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005efc:	f000 fe02 	bl	8006b04 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005f00:	7bbb      	ldrb	r3, [r7, #14]
 8005f02:	3b01      	subs	r3, #1
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	dce9      	bgt.n	8005ee4 <prvUnlockQueue+0x60>
 8005f10:	e000      	b.n	8005f14 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005f12:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	22ff      	movs	r2, #255	; 0xff
 8005f18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005f1c:	f001 fc62 	bl	80077e4 <vPortExitCritical>
}
 8005f20:	bf00      	nop
 8005f22:	3710      	adds	r7, #16
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}

08005f28 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b084      	sub	sp, #16
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005f30:	f001 fc28 	bl	8007784 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d102      	bne.n	8005f42 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	60fb      	str	r3, [r7, #12]
 8005f40:	e001      	b.n	8005f46 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005f42:	2300      	movs	r3, #0
 8005f44:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005f46:	f001 fc4d 	bl	80077e4 <vPortExitCritical>

	return xReturn;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3710      	adds	r7, #16
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}

08005f54 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b084      	sub	sp, #16
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005f5c:	f001 fc12 	bl	8007784 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d102      	bne.n	8005f72 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	60fb      	str	r3, [r7, #12]
 8005f70:	e001      	b.n	8005f76 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005f72:	2300      	movs	r3, #0
 8005f74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005f76:	f001 fc35 	bl	80077e4 <vPortExitCritical>

	return xReturn;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3710      	adds	r7, #16
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}

08005f84 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005f84:	b480      	push	{r7}
 8005f86:	b085      	sub	sp, #20
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005f8e:	2300      	movs	r3, #0
 8005f90:	60fb      	str	r3, [r7, #12]
 8005f92:	e014      	b.n	8005fbe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005f94:	4a0f      	ldr	r2, [pc, #60]	; (8005fd4 <vQueueAddToRegistry+0x50>)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d10b      	bne.n	8005fb8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005fa0:	490c      	ldr	r1, [pc, #48]	; (8005fd4 <vQueueAddToRegistry+0x50>)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	683a      	ldr	r2, [r7, #0]
 8005fa6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005faa:	4a0a      	ldr	r2, [pc, #40]	; (8005fd4 <vQueueAddToRegistry+0x50>)
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	00db      	lsls	r3, r3, #3
 8005fb0:	4413      	add	r3, r2
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005fb6:	e006      	b.n	8005fc6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	3301      	adds	r3, #1
 8005fbc:	60fb      	str	r3, [r7, #12]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2b07      	cmp	r3, #7
 8005fc2:	d9e7      	bls.n	8005f94 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005fc4:	bf00      	nop
 8005fc6:	bf00      	nop
 8005fc8:	3714      	adds	r7, #20
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr
 8005fd2:	bf00      	nop
 8005fd4:	20000abc 	.word	0x20000abc

08005fd8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b086      	sub	sp, #24
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	60f8      	str	r0, [r7, #12]
 8005fe0:	60b9      	str	r1, [r7, #8]
 8005fe2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005fe8:	f001 fbcc 	bl	8007784 <vPortEnterCritical>
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ff2:	b25b      	sxtb	r3, r3
 8005ff4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ff8:	d103      	bne.n	8006002 <vQueueWaitForMessageRestricted+0x2a>
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006008:	b25b      	sxtb	r3, r3
 800600a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800600e:	d103      	bne.n	8006018 <vQueueWaitForMessageRestricted+0x40>
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	2200      	movs	r2, #0
 8006014:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006018:	f001 fbe4 	bl	80077e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006020:	2b00      	cmp	r3, #0
 8006022:	d106      	bne.n	8006032 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	3324      	adds	r3, #36	; 0x24
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	68b9      	ldr	r1, [r7, #8]
 800602c:	4618      	mov	r0, r3
 800602e:	f000 fc61 	bl	80068f4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006032:	6978      	ldr	r0, [r7, #20]
 8006034:	f7ff ff26 	bl	8005e84 <prvUnlockQueue>
	}
 8006038:	bf00      	nop
 800603a:	3718      	adds	r7, #24
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}

08006040 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006040:	b580      	push	{r7, lr}
 8006042:	b08e      	sub	sp, #56	; 0x38
 8006044:	af04      	add	r7, sp, #16
 8006046:	60f8      	str	r0, [r7, #12]
 8006048:	60b9      	str	r1, [r7, #8]
 800604a:	607a      	str	r2, [r7, #4]
 800604c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800604e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006050:	2b00      	cmp	r3, #0
 8006052:	d10a      	bne.n	800606a <xTaskCreateStatic+0x2a>
	__asm volatile
 8006054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006058:	f383 8811 	msr	BASEPRI, r3
 800605c:	f3bf 8f6f 	isb	sy
 8006060:	f3bf 8f4f 	dsb	sy
 8006064:	623b      	str	r3, [r7, #32]
}
 8006066:	bf00      	nop
 8006068:	e7fe      	b.n	8006068 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800606a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800606c:	2b00      	cmp	r3, #0
 800606e:	d10a      	bne.n	8006086 <xTaskCreateStatic+0x46>
	__asm volatile
 8006070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006074:	f383 8811 	msr	BASEPRI, r3
 8006078:	f3bf 8f6f 	isb	sy
 800607c:	f3bf 8f4f 	dsb	sy
 8006080:	61fb      	str	r3, [r7, #28]
}
 8006082:	bf00      	nop
 8006084:	e7fe      	b.n	8006084 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006086:	23a8      	movs	r3, #168	; 0xa8
 8006088:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	2ba8      	cmp	r3, #168	; 0xa8
 800608e:	d00a      	beq.n	80060a6 <xTaskCreateStatic+0x66>
	__asm volatile
 8006090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006094:	f383 8811 	msr	BASEPRI, r3
 8006098:	f3bf 8f6f 	isb	sy
 800609c:	f3bf 8f4f 	dsb	sy
 80060a0:	61bb      	str	r3, [r7, #24]
}
 80060a2:	bf00      	nop
 80060a4:	e7fe      	b.n	80060a4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80060a6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80060a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d01e      	beq.n	80060ec <xTaskCreateStatic+0xac>
 80060ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d01b      	beq.n	80060ec <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80060b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060b6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80060b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060bc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80060be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c0:	2202      	movs	r2, #2
 80060c2:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80060c6:	2300      	movs	r3, #0
 80060c8:	9303      	str	r3, [sp, #12]
 80060ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060cc:	9302      	str	r3, [sp, #8]
 80060ce:	f107 0314 	add.w	r3, r7, #20
 80060d2:	9301      	str	r3, [sp, #4]
 80060d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d6:	9300      	str	r3, [sp, #0]
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	68b9      	ldr	r1, [r7, #8]
 80060de:	68f8      	ldr	r0, [r7, #12]
 80060e0:	f000 f850 	bl	8006184 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80060e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80060e6:	f000 f8f3 	bl	80062d0 <prvAddNewTaskToReadyList>
 80060ea:	e001      	b.n	80060f0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80060ec:	2300      	movs	r3, #0
 80060ee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80060f0:	697b      	ldr	r3, [r7, #20]
	}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3728      	adds	r7, #40	; 0x28
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}

080060fa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80060fa:	b580      	push	{r7, lr}
 80060fc:	b08c      	sub	sp, #48	; 0x30
 80060fe:	af04      	add	r7, sp, #16
 8006100:	60f8      	str	r0, [r7, #12]
 8006102:	60b9      	str	r1, [r7, #8]
 8006104:	603b      	str	r3, [r7, #0]
 8006106:	4613      	mov	r3, r2
 8006108:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800610a:	88fb      	ldrh	r3, [r7, #6]
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	4618      	mov	r0, r3
 8006110:	f001 fc5a 	bl	80079c8 <pvPortMalloc>
 8006114:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d00e      	beq.n	800613a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800611c:	20a8      	movs	r0, #168	; 0xa8
 800611e:	f001 fc53 	bl	80079c8 <pvPortMalloc>
 8006122:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006124:	69fb      	ldr	r3, [r7, #28]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d003      	beq.n	8006132 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800612a:	69fb      	ldr	r3, [r7, #28]
 800612c:	697a      	ldr	r2, [r7, #20]
 800612e:	631a      	str	r2, [r3, #48]	; 0x30
 8006130:	e005      	b.n	800613e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006132:	6978      	ldr	r0, [r7, #20]
 8006134:	f001 fd14 	bl	8007b60 <vPortFree>
 8006138:	e001      	b.n	800613e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800613a:	2300      	movs	r3, #0
 800613c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800613e:	69fb      	ldr	r3, [r7, #28]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d017      	beq.n	8006174 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006144:	69fb      	ldr	r3, [r7, #28]
 8006146:	2200      	movs	r2, #0
 8006148:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800614c:	88fa      	ldrh	r2, [r7, #6]
 800614e:	2300      	movs	r3, #0
 8006150:	9303      	str	r3, [sp, #12]
 8006152:	69fb      	ldr	r3, [r7, #28]
 8006154:	9302      	str	r3, [sp, #8]
 8006156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006158:	9301      	str	r3, [sp, #4]
 800615a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800615c:	9300      	str	r3, [sp, #0]
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	68b9      	ldr	r1, [r7, #8]
 8006162:	68f8      	ldr	r0, [r7, #12]
 8006164:	f000 f80e 	bl	8006184 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006168:	69f8      	ldr	r0, [r7, #28]
 800616a:	f000 f8b1 	bl	80062d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800616e:	2301      	movs	r3, #1
 8006170:	61bb      	str	r3, [r7, #24]
 8006172:	e002      	b.n	800617a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006174:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006178:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800617a:	69bb      	ldr	r3, [r7, #24]
	}
 800617c:	4618      	mov	r0, r3
 800617e:	3720      	adds	r7, #32
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}

08006184 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b088      	sub	sp, #32
 8006188:	af00      	add	r7, sp, #0
 800618a:	60f8      	str	r0, [r7, #12]
 800618c:	60b9      	str	r1, [r7, #8]
 800618e:	607a      	str	r2, [r7, #4]
 8006190:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006194:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	009b      	lsls	r3, r3, #2
 800619a:	461a      	mov	r2, r3
 800619c:	21a5      	movs	r1, #165	; 0xa5
 800619e:	f001 ff2d 	bl	8007ffc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80061a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80061ac:	3b01      	subs	r3, #1
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	4413      	add	r3, r2
 80061b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80061b4:	69bb      	ldr	r3, [r7, #24]
 80061b6:	f023 0307 	bic.w	r3, r3, #7
 80061ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80061bc:	69bb      	ldr	r3, [r7, #24]
 80061be:	f003 0307 	and.w	r3, r3, #7
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d00a      	beq.n	80061dc <prvInitialiseNewTask+0x58>
	__asm volatile
 80061c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ca:	f383 8811 	msr	BASEPRI, r3
 80061ce:	f3bf 8f6f 	isb	sy
 80061d2:	f3bf 8f4f 	dsb	sy
 80061d6:	617b      	str	r3, [r7, #20]
}
 80061d8:	bf00      	nop
 80061da:	e7fe      	b.n	80061da <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d01f      	beq.n	8006222 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80061e2:	2300      	movs	r3, #0
 80061e4:	61fb      	str	r3, [r7, #28]
 80061e6:	e012      	b.n	800620e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80061e8:	68ba      	ldr	r2, [r7, #8]
 80061ea:	69fb      	ldr	r3, [r7, #28]
 80061ec:	4413      	add	r3, r2
 80061ee:	7819      	ldrb	r1, [r3, #0]
 80061f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061f2:	69fb      	ldr	r3, [r7, #28]
 80061f4:	4413      	add	r3, r2
 80061f6:	3334      	adds	r3, #52	; 0x34
 80061f8:	460a      	mov	r2, r1
 80061fa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80061fc:	68ba      	ldr	r2, [r7, #8]
 80061fe:	69fb      	ldr	r3, [r7, #28]
 8006200:	4413      	add	r3, r2
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d006      	beq.n	8006216 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006208:	69fb      	ldr	r3, [r7, #28]
 800620a:	3301      	adds	r3, #1
 800620c:	61fb      	str	r3, [r7, #28]
 800620e:	69fb      	ldr	r3, [r7, #28]
 8006210:	2b0f      	cmp	r3, #15
 8006212:	d9e9      	bls.n	80061e8 <prvInitialiseNewTask+0x64>
 8006214:	e000      	b.n	8006218 <prvInitialiseNewTask+0x94>
			{
				break;
 8006216:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800621a:	2200      	movs	r2, #0
 800621c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006220:	e003      	b.n	800622a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006224:	2200      	movs	r2, #0
 8006226:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800622a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800622c:	2b37      	cmp	r3, #55	; 0x37
 800622e:	d901      	bls.n	8006234 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006230:	2337      	movs	r3, #55	; 0x37
 8006232:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006236:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006238:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800623a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800623c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800623e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006242:	2200      	movs	r2, #0
 8006244:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006248:	3304      	adds	r3, #4
 800624a:	4618      	mov	r0, r3
 800624c:	f7ff f93e 	bl	80054cc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006252:	3318      	adds	r3, #24
 8006254:	4618      	mov	r0, r3
 8006256:	f7ff f939 	bl	80054cc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800625a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800625c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800625e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006262:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006268:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800626a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800626c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800626e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006272:	2200      	movs	r2, #0
 8006274:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800627a:	2200      	movs	r2, #0
 800627c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006282:	3354      	adds	r3, #84	; 0x54
 8006284:	224c      	movs	r2, #76	; 0x4c
 8006286:	2100      	movs	r1, #0
 8006288:	4618      	mov	r0, r3
 800628a:	f001 feb7 	bl	8007ffc <memset>
 800628e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006290:	4a0c      	ldr	r2, [pc, #48]	; (80062c4 <prvInitialiseNewTask+0x140>)
 8006292:	659a      	str	r2, [r3, #88]	; 0x58
 8006294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006296:	4a0c      	ldr	r2, [pc, #48]	; (80062c8 <prvInitialiseNewTask+0x144>)
 8006298:	65da      	str	r2, [r3, #92]	; 0x5c
 800629a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800629c:	4a0b      	ldr	r2, [pc, #44]	; (80062cc <prvInitialiseNewTask+0x148>)
 800629e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80062a0:	683a      	ldr	r2, [r7, #0]
 80062a2:	68f9      	ldr	r1, [r7, #12]
 80062a4:	69b8      	ldr	r0, [r7, #24]
 80062a6:	f001 f941 	bl	800752c <pxPortInitialiseStack>
 80062aa:	4602      	mov	r2, r0
 80062ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ae:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80062b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d002      	beq.n	80062bc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80062b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062ba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80062bc:	bf00      	nop
 80062be:	3720      	adds	r7, #32
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}
 80062c4:	200024d8 	.word	0x200024d8
 80062c8:	20002540 	.word	0x20002540
 80062cc:	200025a8 	.word	0x200025a8

080062d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b082      	sub	sp, #8
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80062d8:	f001 fa54 	bl	8007784 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80062dc:	4b2d      	ldr	r3, [pc, #180]	; (8006394 <prvAddNewTaskToReadyList+0xc4>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	3301      	adds	r3, #1
 80062e2:	4a2c      	ldr	r2, [pc, #176]	; (8006394 <prvAddNewTaskToReadyList+0xc4>)
 80062e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80062e6:	4b2c      	ldr	r3, [pc, #176]	; (8006398 <prvAddNewTaskToReadyList+0xc8>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d109      	bne.n	8006302 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80062ee:	4a2a      	ldr	r2, [pc, #168]	; (8006398 <prvAddNewTaskToReadyList+0xc8>)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80062f4:	4b27      	ldr	r3, [pc, #156]	; (8006394 <prvAddNewTaskToReadyList+0xc4>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d110      	bne.n	800631e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80062fc:	f000 fc26 	bl	8006b4c <prvInitialiseTaskLists>
 8006300:	e00d      	b.n	800631e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006302:	4b26      	ldr	r3, [pc, #152]	; (800639c <prvAddNewTaskToReadyList+0xcc>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d109      	bne.n	800631e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800630a:	4b23      	ldr	r3, [pc, #140]	; (8006398 <prvAddNewTaskToReadyList+0xc8>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006314:	429a      	cmp	r2, r3
 8006316:	d802      	bhi.n	800631e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006318:	4a1f      	ldr	r2, [pc, #124]	; (8006398 <prvAddNewTaskToReadyList+0xc8>)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800631e:	4b20      	ldr	r3, [pc, #128]	; (80063a0 <prvAddNewTaskToReadyList+0xd0>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	3301      	adds	r3, #1
 8006324:	4a1e      	ldr	r2, [pc, #120]	; (80063a0 <prvAddNewTaskToReadyList+0xd0>)
 8006326:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006328:	4b1d      	ldr	r3, [pc, #116]	; (80063a0 <prvAddNewTaskToReadyList+0xd0>)
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006334:	4b1b      	ldr	r3, [pc, #108]	; (80063a4 <prvAddNewTaskToReadyList+0xd4>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	429a      	cmp	r2, r3
 800633a:	d903      	bls.n	8006344 <prvAddNewTaskToReadyList+0x74>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006340:	4a18      	ldr	r2, [pc, #96]	; (80063a4 <prvAddNewTaskToReadyList+0xd4>)
 8006342:	6013      	str	r3, [r2, #0]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006348:	4613      	mov	r3, r2
 800634a:	009b      	lsls	r3, r3, #2
 800634c:	4413      	add	r3, r2
 800634e:	009b      	lsls	r3, r3, #2
 8006350:	4a15      	ldr	r2, [pc, #84]	; (80063a8 <prvAddNewTaskToReadyList+0xd8>)
 8006352:	441a      	add	r2, r3
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	3304      	adds	r3, #4
 8006358:	4619      	mov	r1, r3
 800635a:	4610      	mov	r0, r2
 800635c:	f7ff f8c3 	bl	80054e6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006360:	f001 fa40 	bl	80077e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006364:	4b0d      	ldr	r3, [pc, #52]	; (800639c <prvAddNewTaskToReadyList+0xcc>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d00e      	beq.n	800638a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800636c:	4b0a      	ldr	r3, [pc, #40]	; (8006398 <prvAddNewTaskToReadyList+0xc8>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006376:	429a      	cmp	r2, r3
 8006378:	d207      	bcs.n	800638a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800637a:	4b0c      	ldr	r3, [pc, #48]	; (80063ac <prvAddNewTaskToReadyList+0xdc>)
 800637c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006380:	601a      	str	r2, [r3, #0]
 8006382:	f3bf 8f4f 	dsb	sy
 8006386:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800638a:	bf00      	nop
 800638c:	3708      	adds	r7, #8
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}
 8006392:	bf00      	nop
 8006394:	20000fd0 	.word	0x20000fd0
 8006398:	20000afc 	.word	0x20000afc
 800639c:	20000fdc 	.word	0x20000fdc
 80063a0:	20000fec 	.word	0x20000fec
 80063a4:	20000fd8 	.word	0x20000fd8
 80063a8:	20000b00 	.word	0x20000b00
 80063ac:	e000ed04 	.word	0xe000ed04

080063b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b084      	sub	sp, #16
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80063b8:	2300      	movs	r3, #0
 80063ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d017      	beq.n	80063f2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80063c2:	4b13      	ldr	r3, [pc, #76]	; (8006410 <vTaskDelay+0x60>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d00a      	beq.n	80063e0 <vTaskDelay+0x30>
	__asm volatile
 80063ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ce:	f383 8811 	msr	BASEPRI, r3
 80063d2:	f3bf 8f6f 	isb	sy
 80063d6:	f3bf 8f4f 	dsb	sy
 80063da:	60bb      	str	r3, [r7, #8]
}
 80063dc:	bf00      	nop
 80063de:	e7fe      	b.n	80063de <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80063e0:	f000 f88a 	bl	80064f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80063e4:	2100      	movs	r1, #0
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f000 fcfe 	bl	8006de8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80063ec:	f000 f892 	bl	8006514 <xTaskResumeAll>
 80063f0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d107      	bne.n	8006408 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80063f8:	4b06      	ldr	r3, [pc, #24]	; (8006414 <vTaskDelay+0x64>)
 80063fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063fe:	601a      	str	r2, [r3, #0]
 8006400:	f3bf 8f4f 	dsb	sy
 8006404:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006408:	bf00      	nop
 800640a:	3710      	adds	r7, #16
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}
 8006410:	20000ff8 	.word	0x20000ff8
 8006414:	e000ed04 	.word	0xe000ed04

08006418 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b08a      	sub	sp, #40	; 0x28
 800641c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800641e:	2300      	movs	r3, #0
 8006420:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006422:	2300      	movs	r3, #0
 8006424:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006426:	463a      	mov	r2, r7
 8006428:	1d39      	adds	r1, r7, #4
 800642a:	f107 0308 	add.w	r3, r7, #8
 800642e:	4618      	mov	r0, r3
 8006430:	f7fe fff8 	bl	8005424 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006434:	6839      	ldr	r1, [r7, #0]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	68ba      	ldr	r2, [r7, #8]
 800643a:	9202      	str	r2, [sp, #8]
 800643c:	9301      	str	r3, [sp, #4]
 800643e:	2300      	movs	r3, #0
 8006440:	9300      	str	r3, [sp, #0]
 8006442:	2300      	movs	r3, #0
 8006444:	460a      	mov	r2, r1
 8006446:	4924      	ldr	r1, [pc, #144]	; (80064d8 <vTaskStartScheduler+0xc0>)
 8006448:	4824      	ldr	r0, [pc, #144]	; (80064dc <vTaskStartScheduler+0xc4>)
 800644a:	f7ff fdf9 	bl	8006040 <xTaskCreateStatic>
 800644e:	4603      	mov	r3, r0
 8006450:	4a23      	ldr	r2, [pc, #140]	; (80064e0 <vTaskStartScheduler+0xc8>)
 8006452:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006454:	4b22      	ldr	r3, [pc, #136]	; (80064e0 <vTaskStartScheduler+0xc8>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d002      	beq.n	8006462 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800645c:	2301      	movs	r3, #1
 800645e:	617b      	str	r3, [r7, #20]
 8006460:	e001      	b.n	8006466 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006462:	2300      	movs	r3, #0
 8006464:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	2b01      	cmp	r3, #1
 800646a:	d102      	bne.n	8006472 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800646c:	f000 fd10 	bl	8006e90 <xTimerCreateTimerTask>
 8006470:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	2b01      	cmp	r3, #1
 8006476:	d11b      	bne.n	80064b0 <vTaskStartScheduler+0x98>
	__asm volatile
 8006478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800647c:	f383 8811 	msr	BASEPRI, r3
 8006480:	f3bf 8f6f 	isb	sy
 8006484:	f3bf 8f4f 	dsb	sy
 8006488:	613b      	str	r3, [r7, #16]
}
 800648a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800648c:	4b15      	ldr	r3, [pc, #84]	; (80064e4 <vTaskStartScheduler+0xcc>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	3354      	adds	r3, #84	; 0x54
 8006492:	4a15      	ldr	r2, [pc, #84]	; (80064e8 <vTaskStartScheduler+0xd0>)
 8006494:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006496:	4b15      	ldr	r3, [pc, #84]	; (80064ec <vTaskStartScheduler+0xd4>)
 8006498:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800649c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800649e:	4b14      	ldr	r3, [pc, #80]	; (80064f0 <vTaskStartScheduler+0xd8>)
 80064a0:	2201      	movs	r2, #1
 80064a2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80064a4:	4b13      	ldr	r3, [pc, #76]	; (80064f4 <vTaskStartScheduler+0xdc>)
 80064a6:	2200      	movs	r2, #0
 80064a8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80064aa:	f001 f8c9 	bl	8007640 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80064ae:	e00e      	b.n	80064ce <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064b6:	d10a      	bne.n	80064ce <vTaskStartScheduler+0xb6>
	__asm volatile
 80064b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064bc:	f383 8811 	msr	BASEPRI, r3
 80064c0:	f3bf 8f6f 	isb	sy
 80064c4:	f3bf 8f4f 	dsb	sy
 80064c8:	60fb      	str	r3, [r7, #12]
}
 80064ca:	bf00      	nop
 80064cc:	e7fe      	b.n	80064cc <vTaskStartScheduler+0xb4>
}
 80064ce:	bf00      	nop
 80064d0:	3718      	adds	r7, #24
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}
 80064d6:	bf00      	nop
 80064d8:	08008e2c 	.word	0x08008e2c
 80064dc:	08006b1d 	.word	0x08006b1d
 80064e0:	20000ff4 	.word	0x20000ff4
 80064e4:	20000afc 	.word	0x20000afc
 80064e8:	20000068 	.word	0x20000068
 80064ec:	20000ff0 	.word	0x20000ff0
 80064f0:	20000fdc 	.word	0x20000fdc
 80064f4:	20000fd4 	.word	0x20000fd4

080064f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80064f8:	b480      	push	{r7}
 80064fa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80064fc:	4b04      	ldr	r3, [pc, #16]	; (8006510 <vTaskSuspendAll+0x18>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	3301      	adds	r3, #1
 8006502:	4a03      	ldr	r2, [pc, #12]	; (8006510 <vTaskSuspendAll+0x18>)
 8006504:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006506:	bf00      	nop
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr
 8006510:	20000ff8 	.word	0x20000ff8

08006514 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b084      	sub	sp, #16
 8006518:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800651a:	2300      	movs	r3, #0
 800651c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800651e:	2300      	movs	r3, #0
 8006520:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006522:	4b42      	ldr	r3, [pc, #264]	; (800662c <xTaskResumeAll+0x118>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d10a      	bne.n	8006540 <xTaskResumeAll+0x2c>
	__asm volatile
 800652a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800652e:	f383 8811 	msr	BASEPRI, r3
 8006532:	f3bf 8f6f 	isb	sy
 8006536:	f3bf 8f4f 	dsb	sy
 800653a:	603b      	str	r3, [r7, #0]
}
 800653c:	bf00      	nop
 800653e:	e7fe      	b.n	800653e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006540:	f001 f920 	bl	8007784 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006544:	4b39      	ldr	r3, [pc, #228]	; (800662c <xTaskResumeAll+0x118>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	3b01      	subs	r3, #1
 800654a:	4a38      	ldr	r2, [pc, #224]	; (800662c <xTaskResumeAll+0x118>)
 800654c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800654e:	4b37      	ldr	r3, [pc, #220]	; (800662c <xTaskResumeAll+0x118>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d162      	bne.n	800661c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006556:	4b36      	ldr	r3, [pc, #216]	; (8006630 <xTaskResumeAll+0x11c>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d05e      	beq.n	800661c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800655e:	e02f      	b.n	80065c0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006560:	4b34      	ldr	r3, [pc, #208]	; (8006634 <xTaskResumeAll+0x120>)
 8006562:	68db      	ldr	r3, [r3, #12]
 8006564:	68db      	ldr	r3, [r3, #12]
 8006566:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	3318      	adds	r3, #24
 800656c:	4618      	mov	r0, r3
 800656e:	f7ff f817 	bl	80055a0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	3304      	adds	r3, #4
 8006576:	4618      	mov	r0, r3
 8006578:	f7ff f812 	bl	80055a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006580:	4b2d      	ldr	r3, [pc, #180]	; (8006638 <xTaskResumeAll+0x124>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	429a      	cmp	r2, r3
 8006586:	d903      	bls.n	8006590 <xTaskResumeAll+0x7c>
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800658c:	4a2a      	ldr	r2, [pc, #168]	; (8006638 <xTaskResumeAll+0x124>)
 800658e:	6013      	str	r3, [r2, #0]
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006594:	4613      	mov	r3, r2
 8006596:	009b      	lsls	r3, r3, #2
 8006598:	4413      	add	r3, r2
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	4a27      	ldr	r2, [pc, #156]	; (800663c <xTaskResumeAll+0x128>)
 800659e:	441a      	add	r2, r3
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	3304      	adds	r3, #4
 80065a4:	4619      	mov	r1, r3
 80065a6:	4610      	mov	r0, r2
 80065a8:	f7fe ff9d 	bl	80054e6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065b0:	4b23      	ldr	r3, [pc, #140]	; (8006640 <xTaskResumeAll+0x12c>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d302      	bcc.n	80065c0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80065ba:	4b22      	ldr	r3, [pc, #136]	; (8006644 <xTaskResumeAll+0x130>)
 80065bc:	2201      	movs	r2, #1
 80065be:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80065c0:	4b1c      	ldr	r3, [pc, #112]	; (8006634 <xTaskResumeAll+0x120>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d1cb      	bne.n	8006560 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d001      	beq.n	80065d2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80065ce:	f000 fb5f 	bl	8006c90 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80065d2:	4b1d      	ldr	r3, [pc, #116]	; (8006648 <xTaskResumeAll+0x134>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d010      	beq.n	8006600 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80065de:	f000 f847 	bl	8006670 <xTaskIncrementTick>
 80065e2:	4603      	mov	r3, r0
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d002      	beq.n	80065ee <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80065e8:	4b16      	ldr	r3, [pc, #88]	; (8006644 <xTaskResumeAll+0x130>)
 80065ea:	2201      	movs	r2, #1
 80065ec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	3b01      	subs	r3, #1
 80065f2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d1f1      	bne.n	80065de <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80065fa:	4b13      	ldr	r3, [pc, #76]	; (8006648 <xTaskResumeAll+0x134>)
 80065fc:	2200      	movs	r2, #0
 80065fe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006600:	4b10      	ldr	r3, [pc, #64]	; (8006644 <xTaskResumeAll+0x130>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d009      	beq.n	800661c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006608:	2301      	movs	r3, #1
 800660a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800660c:	4b0f      	ldr	r3, [pc, #60]	; (800664c <xTaskResumeAll+0x138>)
 800660e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006612:	601a      	str	r2, [r3, #0]
 8006614:	f3bf 8f4f 	dsb	sy
 8006618:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800661c:	f001 f8e2 	bl	80077e4 <vPortExitCritical>

	return xAlreadyYielded;
 8006620:	68bb      	ldr	r3, [r7, #8]
}
 8006622:	4618      	mov	r0, r3
 8006624:	3710      	adds	r7, #16
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}
 800662a:	bf00      	nop
 800662c:	20000ff8 	.word	0x20000ff8
 8006630:	20000fd0 	.word	0x20000fd0
 8006634:	20000f90 	.word	0x20000f90
 8006638:	20000fd8 	.word	0x20000fd8
 800663c:	20000b00 	.word	0x20000b00
 8006640:	20000afc 	.word	0x20000afc
 8006644:	20000fe4 	.word	0x20000fe4
 8006648:	20000fe0 	.word	0x20000fe0
 800664c:	e000ed04 	.word	0xe000ed04

08006650 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006650:	b480      	push	{r7}
 8006652:	b083      	sub	sp, #12
 8006654:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006656:	4b05      	ldr	r3, [pc, #20]	; (800666c <xTaskGetTickCount+0x1c>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800665c:	687b      	ldr	r3, [r7, #4]
}
 800665e:	4618      	mov	r0, r3
 8006660:	370c      	adds	r7, #12
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr
 800666a:	bf00      	nop
 800666c:	20000fd4 	.word	0x20000fd4

08006670 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b086      	sub	sp, #24
 8006674:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006676:	2300      	movs	r3, #0
 8006678:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800667a:	4b4f      	ldr	r3, [pc, #316]	; (80067b8 <xTaskIncrementTick+0x148>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	2b00      	cmp	r3, #0
 8006680:	f040 808f 	bne.w	80067a2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006684:	4b4d      	ldr	r3, [pc, #308]	; (80067bc <xTaskIncrementTick+0x14c>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	3301      	adds	r3, #1
 800668a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800668c:	4a4b      	ldr	r2, [pc, #300]	; (80067bc <xTaskIncrementTick+0x14c>)
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d120      	bne.n	80066da <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006698:	4b49      	ldr	r3, [pc, #292]	; (80067c0 <xTaskIncrementTick+0x150>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d00a      	beq.n	80066b8 <xTaskIncrementTick+0x48>
	__asm volatile
 80066a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a6:	f383 8811 	msr	BASEPRI, r3
 80066aa:	f3bf 8f6f 	isb	sy
 80066ae:	f3bf 8f4f 	dsb	sy
 80066b2:	603b      	str	r3, [r7, #0]
}
 80066b4:	bf00      	nop
 80066b6:	e7fe      	b.n	80066b6 <xTaskIncrementTick+0x46>
 80066b8:	4b41      	ldr	r3, [pc, #260]	; (80067c0 <xTaskIncrementTick+0x150>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	60fb      	str	r3, [r7, #12]
 80066be:	4b41      	ldr	r3, [pc, #260]	; (80067c4 <xTaskIncrementTick+0x154>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a3f      	ldr	r2, [pc, #252]	; (80067c0 <xTaskIncrementTick+0x150>)
 80066c4:	6013      	str	r3, [r2, #0]
 80066c6:	4a3f      	ldr	r2, [pc, #252]	; (80067c4 <xTaskIncrementTick+0x154>)
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	6013      	str	r3, [r2, #0]
 80066cc:	4b3e      	ldr	r3, [pc, #248]	; (80067c8 <xTaskIncrementTick+0x158>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	3301      	adds	r3, #1
 80066d2:	4a3d      	ldr	r2, [pc, #244]	; (80067c8 <xTaskIncrementTick+0x158>)
 80066d4:	6013      	str	r3, [r2, #0]
 80066d6:	f000 fadb 	bl	8006c90 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80066da:	4b3c      	ldr	r3, [pc, #240]	; (80067cc <xTaskIncrementTick+0x15c>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	693a      	ldr	r2, [r7, #16]
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d349      	bcc.n	8006778 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066e4:	4b36      	ldr	r3, [pc, #216]	; (80067c0 <xTaskIncrementTick+0x150>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d104      	bne.n	80066f8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066ee:	4b37      	ldr	r3, [pc, #220]	; (80067cc <xTaskIncrementTick+0x15c>)
 80066f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80066f4:	601a      	str	r2, [r3, #0]
					break;
 80066f6:	e03f      	b.n	8006778 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066f8:	4b31      	ldr	r3, [pc, #196]	; (80067c0 <xTaskIncrementTick+0x150>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	68db      	ldr	r3, [r3, #12]
 80066fe:	68db      	ldr	r3, [r3, #12]
 8006700:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006708:	693a      	ldr	r2, [r7, #16]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	429a      	cmp	r2, r3
 800670e:	d203      	bcs.n	8006718 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006710:	4a2e      	ldr	r2, [pc, #184]	; (80067cc <xTaskIncrementTick+0x15c>)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006716:	e02f      	b.n	8006778 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	3304      	adds	r3, #4
 800671c:	4618      	mov	r0, r3
 800671e:	f7fe ff3f 	bl	80055a0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006726:	2b00      	cmp	r3, #0
 8006728:	d004      	beq.n	8006734 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	3318      	adds	r3, #24
 800672e:	4618      	mov	r0, r3
 8006730:	f7fe ff36 	bl	80055a0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006738:	4b25      	ldr	r3, [pc, #148]	; (80067d0 <xTaskIncrementTick+0x160>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	429a      	cmp	r2, r3
 800673e:	d903      	bls.n	8006748 <xTaskIncrementTick+0xd8>
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006744:	4a22      	ldr	r2, [pc, #136]	; (80067d0 <xTaskIncrementTick+0x160>)
 8006746:	6013      	str	r3, [r2, #0]
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800674c:	4613      	mov	r3, r2
 800674e:	009b      	lsls	r3, r3, #2
 8006750:	4413      	add	r3, r2
 8006752:	009b      	lsls	r3, r3, #2
 8006754:	4a1f      	ldr	r2, [pc, #124]	; (80067d4 <xTaskIncrementTick+0x164>)
 8006756:	441a      	add	r2, r3
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	3304      	adds	r3, #4
 800675c:	4619      	mov	r1, r3
 800675e:	4610      	mov	r0, r2
 8006760:	f7fe fec1 	bl	80054e6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006768:	4b1b      	ldr	r3, [pc, #108]	; (80067d8 <xTaskIncrementTick+0x168>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800676e:	429a      	cmp	r2, r3
 8006770:	d3b8      	bcc.n	80066e4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006772:	2301      	movs	r3, #1
 8006774:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006776:	e7b5      	b.n	80066e4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006778:	4b17      	ldr	r3, [pc, #92]	; (80067d8 <xTaskIncrementTick+0x168>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800677e:	4915      	ldr	r1, [pc, #84]	; (80067d4 <xTaskIncrementTick+0x164>)
 8006780:	4613      	mov	r3, r2
 8006782:	009b      	lsls	r3, r3, #2
 8006784:	4413      	add	r3, r2
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	440b      	add	r3, r1
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	2b01      	cmp	r3, #1
 800678e:	d901      	bls.n	8006794 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006790:	2301      	movs	r3, #1
 8006792:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006794:	4b11      	ldr	r3, [pc, #68]	; (80067dc <xTaskIncrementTick+0x16c>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d007      	beq.n	80067ac <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800679c:	2301      	movs	r3, #1
 800679e:	617b      	str	r3, [r7, #20]
 80067a0:	e004      	b.n	80067ac <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80067a2:	4b0f      	ldr	r3, [pc, #60]	; (80067e0 <xTaskIncrementTick+0x170>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	3301      	adds	r3, #1
 80067a8:	4a0d      	ldr	r2, [pc, #52]	; (80067e0 <xTaskIncrementTick+0x170>)
 80067aa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80067ac:	697b      	ldr	r3, [r7, #20]
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3718      	adds	r7, #24
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}
 80067b6:	bf00      	nop
 80067b8:	20000ff8 	.word	0x20000ff8
 80067bc:	20000fd4 	.word	0x20000fd4
 80067c0:	20000f88 	.word	0x20000f88
 80067c4:	20000f8c 	.word	0x20000f8c
 80067c8:	20000fe8 	.word	0x20000fe8
 80067cc:	20000ff0 	.word	0x20000ff0
 80067d0:	20000fd8 	.word	0x20000fd8
 80067d4:	20000b00 	.word	0x20000b00
 80067d8:	20000afc 	.word	0x20000afc
 80067dc:	20000fe4 	.word	0x20000fe4
 80067e0:	20000fe0 	.word	0x20000fe0

080067e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80067e4:	b480      	push	{r7}
 80067e6:	b085      	sub	sp, #20
 80067e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80067ea:	4b2a      	ldr	r3, [pc, #168]	; (8006894 <vTaskSwitchContext+0xb0>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d003      	beq.n	80067fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80067f2:	4b29      	ldr	r3, [pc, #164]	; (8006898 <vTaskSwitchContext+0xb4>)
 80067f4:	2201      	movs	r2, #1
 80067f6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80067f8:	e046      	b.n	8006888 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80067fa:	4b27      	ldr	r3, [pc, #156]	; (8006898 <vTaskSwitchContext+0xb4>)
 80067fc:	2200      	movs	r2, #0
 80067fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006800:	4b26      	ldr	r3, [pc, #152]	; (800689c <vTaskSwitchContext+0xb8>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	60fb      	str	r3, [r7, #12]
 8006806:	e010      	b.n	800682a <vTaskSwitchContext+0x46>
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d10a      	bne.n	8006824 <vTaskSwitchContext+0x40>
	__asm volatile
 800680e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006812:	f383 8811 	msr	BASEPRI, r3
 8006816:	f3bf 8f6f 	isb	sy
 800681a:	f3bf 8f4f 	dsb	sy
 800681e:	607b      	str	r3, [r7, #4]
}
 8006820:	bf00      	nop
 8006822:	e7fe      	b.n	8006822 <vTaskSwitchContext+0x3e>
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	3b01      	subs	r3, #1
 8006828:	60fb      	str	r3, [r7, #12]
 800682a:	491d      	ldr	r1, [pc, #116]	; (80068a0 <vTaskSwitchContext+0xbc>)
 800682c:	68fa      	ldr	r2, [r7, #12]
 800682e:	4613      	mov	r3, r2
 8006830:	009b      	lsls	r3, r3, #2
 8006832:	4413      	add	r3, r2
 8006834:	009b      	lsls	r3, r3, #2
 8006836:	440b      	add	r3, r1
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d0e4      	beq.n	8006808 <vTaskSwitchContext+0x24>
 800683e:	68fa      	ldr	r2, [r7, #12]
 8006840:	4613      	mov	r3, r2
 8006842:	009b      	lsls	r3, r3, #2
 8006844:	4413      	add	r3, r2
 8006846:	009b      	lsls	r3, r3, #2
 8006848:	4a15      	ldr	r2, [pc, #84]	; (80068a0 <vTaskSwitchContext+0xbc>)
 800684a:	4413      	add	r3, r2
 800684c:	60bb      	str	r3, [r7, #8]
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	685a      	ldr	r2, [r3, #4]
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	605a      	str	r2, [r3, #4]
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	685a      	ldr	r2, [r3, #4]
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	3308      	adds	r3, #8
 8006860:	429a      	cmp	r2, r3
 8006862:	d104      	bne.n	800686e <vTaskSwitchContext+0x8a>
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	685a      	ldr	r2, [r3, #4]
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	605a      	str	r2, [r3, #4]
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	68db      	ldr	r3, [r3, #12]
 8006874:	4a0b      	ldr	r2, [pc, #44]	; (80068a4 <vTaskSwitchContext+0xc0>)
 8006876:	6013      	str	r3, [r2, #0]
 8006878:	4a08      	ldr	r2, [pc, #32]	; (800689c <vTaskSwitchContext+0xb8>)
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800687e:	4b09      	ldr	r3, [pc, #36]	; (80068a4 <vTaskSwitchContext+0xc0>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	3354      	adds	r3, #84	; 0x54
 8006884:	4a08      	ldr	r2, [pc, #32]	; (80068a8 <vTaskSwitchContext+0xc4>)
 8006886:	6013      	str	r3, [r2, #0]
}
 8006888:	bf00      	nop
 800688a:	3714      	adds	r7, #20
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr
 8006894:	20000ff8 	.word	0x20000ff8
 8006898:	20000fe4 	.word	0x20000fe4
 800689c:	20000fd8 	.word	0x20000fd8
 80068a0:	20000b00 	.word	0x20000b00
 80068a4:	20000afc 	.word	0x20000afc
 80068a8:	20000068 	.word	0x20000068

080068ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b084      	sub	sp, #16
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d10a      	bne.n	80068d2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80068bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c0:	f383 8811 	msr	BASEPRI, r3
 80068c4:	f3bf 8f6f 	isb	sy
 80068c8:	f3bf 8f4f 	dsb	sy
 80068cc:	60fb      	str	r3, [r7, #12]
}
 80068ce:	bf00      	nop
 80068d0:	e7fe      	b.n	80068d0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80068d2:	4b07      	ldr	r3, [pc, #28]	; (80068f0 <vTaskPlaceOnEventList+0x44>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	3318      	adds	r3, #24
 80068d8:	4619      	mov	r1, r3
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f7fe fe27 	bl	800552e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80068e0:	2101      	movs	r1, #1
 80068e2:	6838      	ldr	r0, [r7, #0]
 80068e4:	f000 fa80 	bl	8006de8 <prvAddCurrentTaskToDelayedList>
}
 80068e8:	bf00      	nop
 80068ea:	3710      	adds	r7, #16
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}
 80068f0:	20000afc 	.word	0x20000afc

080068f4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b086      	sub	sp, #24
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	60f8      	str	r0, [r7, #12]
 80068fc:	60b9      	str	r1, [r7, #8]
 80068fe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d10a      	bne.n	800691c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800690a:	f383 8811 	msr	BASEPRI, r3
 800690e:	f3bf 8f6f 	isb	sy
 8006912:	f3bf 8f4f 	dsb	sy
 8006916:	617b      	str	r3, [r7, #20]
}
 8006918:	bf00      	nop
 800691a:	e7fe      	b.n	800691a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800691c:	4b0a      	ldr	r3, [pc, #40]	; (8006948 <vTaskPlaceOnEventListRestricted+0x54>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	3318      	adds	r3, #24
 8006922:	4619      	mov	r1, r3
 8006924:	68f8      	ldr	r0, [r7, #12]
 8006926:	f7fe fdde 	bl	80054e6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d002      	beq.n	8006936 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006930:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006934:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006936:	6879      	ldr	r1, [r7, #4]
 8006938:	68b8      	ldr	r0, [r7, #8]
 800693a:	f000 fa55 	bl	8006de8 <prvAddCurrentTaskToDelayedList>
	}
 800693e:	bf00      	nop
 8006940:	3718      	adds	r7, #24
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}
 8006946:	bf00      	nop
 8006948:	20000afc 	.word	0x20000afc

0800694c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b086      	sub	sp, #24
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	68db      	ldr	r3, [r3, #12]
 8006958:	68db      	ldr	r3, [r3, #12]
 800695a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d10a      	bne.n	8006978 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006966:	f383 8811 	msr	BASEPRI, r3
 800696a:	f3bf 8f6f 	isb	sy
 800696e:	f3bf 8f4f 	dsb	sy
 8006972:	60fb      	str	r3, [r7, #12]
}
 8006974:	bf00      	nop
 8006976:	e7fe      	b.n	8006976 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	3318      	adds	r3, #24
 800697c:	4618      	mov	r0, r3
 800697e:	f7fe fe0f 	bl	80055a0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006982:	4b1e      	ldr	r3, [pc, #120]	; (80069fc <xTaskRemoveFromEventList+0xb0>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d11d      	bne.n	80069c6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	3304      	adds	r3, #4
 800698e:	4618      	mov	r0, r3
 8006990:	f7fe fe06 	bl	80055a0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006998:	4b19      	ldr	r3, [pc, #100]	; (8006a00 <xTaskRemoveFromEventList+0xb4>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	429a      	cmp	r2, r3
 800699e:	d903      	bls.n	80069a8 <xTaskRemoveFromEventList+0x5c>
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069a4:	4a16      	ldr	r2, [pc, #88]	; (8006a00 <xTaskRemoveFromEventList+0xb4>)
 80069a6:	6013      	str	r3, [r2, #0]
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069ac:	4613      	mov	r3, r2
 80069ae:	009b      	lsls	r3, r3, #2
 80069b0:	4413      	add	r3, r2
 80069b2:	009b      	lsls	r3, r3, #2
 80069b4:	4a13      	ldr	r2, [pc, #76]	; (8006a04 <xTaskRemoveFromEventList+0xb8>)
 80069b6:	441a      	add	r2, r3
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	3304      	adds	r3, #4
 80069bc:	4619      	mov	r1, r3
 80069be:	4610      	mov	r0, r2
 80069c0:	f7fe fd91 	bl	80054e6 <vListInsertEnd>
 80069c4:	e005      	b.n	80069d2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	3318      	adds	r3, #24
 80069ca:	4619      	mov	r1, r3
 80069cc:	480e      	ldr	r0, [pc, #56]	; (8006a08 <xTaskRemoveFromEventList+0xbc>)
 80069ce:	f7fe fd8a 	bl	80054e6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069d6:	4b0d      	ldr	r3, [pc, #52]	; (8006a0c <xTaskRemoveFromEventList+0xc0>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069dc:	429a      	cmp	r2, r3
 80069de:	d905      	bls.n	80069ec <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80069e0:	2301      	movs	r3, #1
 80069e2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80069e4:	4b0a      	ldr	r3, [pc, #40]	; (8006a10 <xTaskRemoveFromEventList+0xc4>)
 80069e6:	2201      	movs	r2, #1
 80069e8:	601a      	str	r2, [r3, #0]
 80069ea:	e001      	b.n	80069f0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80069ec:	2300      	movs	r3, #0
 80069ee:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80069f0:	697b      	ldr	r3, [r7, #20]
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3718      	adds	r7, #24
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}
 80069fa:	bf00      	nop
 80069fc:	20000ff8 	.word	0x20000ff8
 8006a00:	20000fd8 	.word	0x20000fd8
 8006a04:	20000b00 	.word	0x20000b00
 8006a08:	20000f90 	.word	0x20000f90
 8006a0c:	20000afc 	.word	0x20000afc
 8006a10:	20000fe4 	.word	0x20000fe4

08006a14 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006a14:	b480      	push	{r7}
 8006a16:	b083      	sub	sp, #12
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006a1c:	4b06      	ldr	r3, [pc, #24]	; (8006a38 <vTaskInternalSetTimeOutState+0x24>)
 8006a1e:	681a      	ldr	r2, [r3, #0]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006a24:	4b05      	ldr	r3, [pc, #20]	; (8006a3c <vTaskInternalSetTimeOutState+0x28>)
 8006a26:	681a      	ldr	r2, [r3, #0]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	605a      	str	r2, [r3, #4]
}
 8006a2c:	bf00      	nop
 8006a2e:	370c      	adds	r7, #12
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr
 8006a38:	20000fe8 	.word	0x20000fe8
 8006a3c:	20000fd4 	.word	0x20000fd4

08006a40 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b088      	sub	sp, #32
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
 8006a48:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d10a      	bne.n	8006a66 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a54:	f383 8811 	msr	BASEPRI, r3
 8006a58:	f3bf 8f6f 	isb	sy
 8006a5c:	f3bf 8f4f 	dsb	sy
 8006a60:	613b      	str	r3, [r7, #16]
}
 8006a62:	bf00      	nop
 8006a64:	e7fe      	b.n	8006a64 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d10a      	bne.n	8006a82 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a70:	f383 8811 	msr	BASEPRI, r3
 8006a74:	f3bf 8f6f 	isb	sy
 8006a78:	f3bf 8f4f 	dsb	sy
 8006a7c:	60fb      	str	r3, [r7, #12]
}
 8006a7e:	bf00      	nop
 8006a80:	e7fe      	b.n	8006a80 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006a82:	f000 fe7f 	bl	8007784 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006a86:	4b1d      	ldr	r3, [pc, #116]	; (8006afc <xTaskCheckForTimeOut+0xbc>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	69ba      	ldr	r2, [r7, #24]
 8006a92:	1ad3      	subs	r3, r2, r3
 8006a94:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a9e:	d102      	bne.n	8006aa6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	61fb      	str	r3, [r7, #28]
 8006aa4:	e023      	b.n	8006aee <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681a      	ldr	r2, [r3, #0]
 8006aaa:	4b15      	ldr	r3, [pc, #84]	; (8006b00 <xTaskCheckForTimeOut+0xc0>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	d007      	beq.n	8006ac2 <xTaskCheckForTimeOut+0x82>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	69ba      	ldr	r2, [r7, #24]
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	d302      	bcc.n	8006ac2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006abc:	2301      	movs	r3, #1
 8006abe:	61fb      	str	r3, [r7, #28]
 8006ac0:	e015      	b.n	8006aee <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	697a      	ldr	r2, [r7, #20]
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d20b      	bcs.n	8006ae4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	1ad2      	subs	r2, r2, r3
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f7ff ff9b 	bl	8006a14 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	61fb      	str	r3, [r7, #28]
 8006ae2:	e004      	b.n	8006aee <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006aea:	2301      	movs	r3, #1
 8006aec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006aee:	f000 fe79 	bl	80077e4 <vPortExitCritical>

	return xReturn;
 8006af2:	69fb      	ldr	r3, [r7, #28]
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3720      	adds	r7, #32
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}
 8006afc:	20000fd4 	.word	0x20000fd4
 8006b00:	20000fe8 	.word	0x20000fe8

08006b04 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006b04:	b480      	push	{r7}
 8006b06:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006b08:	4b03      	ldr	r3, [pc, #12]	; (8006b18 <vTaskMissedYield+0x14>)
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	601a      	str	r2, [r3, #0]
}
 8006b0e:	bf00      	nop
 8006b10:	46bd      	mov	sp, r7
 8006b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b16:	4770      	bx	lr
 8006b18:	20000fe4 	.word	0x20000fe4

08006b1c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b082      	sub	sp, #8
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006b24:	f000 f852 	bl	8006bcc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006b28:	4b06      	ldr	r3, [pc, #24]	; (8006b44 <prvIdleTask+0x28>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d9f9      	bls.n	8006b24 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006b30:	4b05      	ldr	r3, [pc, #20]	; (8006b48 <prvIdleTask+0x2c>)
 8006b32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b36:	601a      	str	r2, [r3, #0]
 8006b38:	f3bf 8f4f 	dsb	sy
 8006b3c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006b40:	e7f0      	b.n	8006b24 <prvIdleTask+0x8>
 8006b42:	bf00      	nop
 8006b44:	20000b00 	.word	0x20000b00
 8006b48:	e000ed04 	.word	0xe000ed04

08006b4c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b082      	sub	sp, #8
 8006b50:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006b52:	2300      	movs	r3, #0
 8006b54:	607b      	str	r3, [r7, #4]
 8006b56:	e00c      	b.n	8006b72 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006b58:	687a      	ldr	r2, [r7, #4]
 8006b5a:	4613      	mov	r3, r2
 8006b5c:	009b      	lsls	r3, r3, #2
 8006b5e:	4413      	add	r3, r2
 8006b60:	009b      	lsls	r3, r3, #2
 8006b62:	4a12      	ldr	r2, [pc, #72]	; (8006bac <prvInitialiseTaskLists+0x60>)
 8006b64:	4413      	add	r3, r2
 8006b66:	4618      	mov	r0, r3
 8006b68:	f7fe fc90 	bl	800548c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	3301      	adds	r3, #1
 8006b70:	607b      	str	r3, [r7, #4]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2b37      	cmp	r3, #55	; 0x37
 8006b76:	d9ef      	bls.n	8006b58 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006b78:	480d      	ldr	r0, [pc, #52]	; (8006bb0 <prvInitialiseTaskLists+0x64>)
 8006b7a:	f7fe fc87 	bl	800548c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006b7e:	480d      	ldr	r0, [pc, #52]	; (8006bb4 <prvInitialiseTaskLists+0x68>)
 8006b80:	f7fe fc84 	bl	800548c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006b84:	480c      	ldr	r0, [pc, #48]	; (8006bb8 <prvInitialiseTaskLists+0x6c>)
 8006b86:	f7fe fc81 	bl	800548c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006b8a:	480c      	ldr	r0, [pc, #48]	; (8006bbc <prvInitialiseTaskLists+0x70>)
 8006b8c:	f7fe fc7e 	bl	800548c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006b90:	480b      	ldr	r0, [pc, #44]	; (8006bc0 <prvInitialiseTaskLists+0x74>)
 8006b92:	f7fe fc7b 	bl	800548c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006b96:	4b0b      	ldr	r3, [pc, #44]	; (8006bc4 <prvInitialiseTaskLists+0x78>)
 8006b98:	4a05      	ldr	r2, [pc, #20]	; (8006bb0 <prvInitialiseTaskLists+0x64>)
 8006b9a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006b9c:	4b0a      	ldr	r3, [pc, #40]	; (8006bc8 <prvInitialiseTaskLists+0x7c>)
 8006b9e:	4a05      	ldr	r2, [pc, #20]	; (8006bb4 <prvInitialiseTaskLists+0x68>)
 8006ba0:	601a      	str	r2, [r3, #0]
}
 8006ba2:	bf00      	nop
 8006ba4:	3708      	adds	r7, #8
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}
 8006baa:	bf00      	nop
 8006bac:	20000b00 	.word	0x20000b00
 8006bb0:	20000f60 	.word	0x20000f60
 8006bb4:	20000f74 	.word	0x20000f74
 8006bb8:	20000f90 	.word	0x20000f90
 8006bbc:	20000fa4 	.word	0x20000fa4
 8006bc0:	20000fbc 	.word	0x20000fbc
 8006bc4:	20000f88 	.word	0x20000f88
 8006bc8:	20000f8c 	.word	0x20000f8c

08006bcc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b082      	sub	sp, #8
 8006bd0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006bd2:	e019      	b.n	8006c08 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006bd4:	f000 fdd6 	bl	8007784 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bd8:	4b10      	ldr	r3, [pc, #64]	; (8006c1c <prvCheckTasksWaitingTermination+0x50>)
 8006bda:	68db      	ldr	r3, [r3, #12]
 8006bdc:	68db      	ldr	r3, [r3, #12]
 8006bde:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	3304      	adds	r3, #4
 8006be4:	4618      	mov	r0, r3
 8006be6:	f7fe fcdb 	bl	80055a0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006bea:	4b0d      	ldr	r3, [pc, #52]	; (8006c20 <prvCheckTasksWaitingTermination+0x54>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	3b01      	subs	r3, #1
 8006bf0:	4a0b      	ldr	r2, [pc, #44]	; (8006c20 <prvCheckTasksWaitingTermination+0x54>)
 8006bf2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006bf4:	4b0b      	ldr	r3, [pc, #44]	; (8006c24 <prvCheckTasksWaitingTermination+0x58>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	3b01      	subs	r3, #1
 8006bfa:	4a0a      	ldr	r2, [pc, #40]	; (8006c24 <prvCheckTasksWaitingTermination+0x58>)
 8006bfc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006bfe:	f000 fdf1 	bl	80077e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f000 f810 	bl	8006c28 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006c08:	4b06      	ldr	r3, [pc, #24]	; (8006c24 <prvCheckTasksWaitingTermination+0x58>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d1e1      	bne.n	8006bd4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006c10:	bf00      	nop
 8006c12:	bf00      	nop
 8006c14:	3708      	adds	r7, #8
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}
 8006c1a:	bf00      	nop
 8006c1c:	20000fa4 	.word	0x20000fa4
 8006c20:	20000fd0 	.word	0x20000fd0
 8006c24:	20000fb8 	.word	0x20000fb8

08006c28 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b084      	sub	sp, #16
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	3354      	adds	r3, #84	; 0x54
 8006c34:	4618      	mov	r0, r3
 8006c36:	f001 f9e9 	bl	800800c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d108      	bne.n	8006c56 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f000 ff89 	bl	8007b60 <vPortFree>
				vPortFree( pxTCB );
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f000 ff86 	bl	8007b60 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006c54:	e018      	b.n	8006c88 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	d103      	bne.n	8006c68 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f000 ff7d 	bl	8007b60 <vPortFree>
	}
 8006c66:	e00f      	b.n	8006c88 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006c6e:	2b02      	cmp	r3, #2
 8006c70:	d00a      	beq.n	8006c88 <prvDeleteTCB+0x60>
	__asm volatile
 8006c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c76:	f383 8811 	msr	BASEPRI, r3
 8006c7a:	f3bf 8f6f 	isb	sy
 8006c7e:	f3bf 8f4f 	dsb	sy
 8006c82:	60fb      	str	r3, [r7, #12]
}
 8006c84:	bf00      	nop
 8006c86:	e7fe      	b.n	8006c86 <prvDeleteTCB+0x5e>
	}
 8006c88:	bf00      	nop
 8006c8a:	3710      	adds	r7, #16
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}

08006c90 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006c90:	b480      	push	{r7}
 8006c92:	b083      	sub	sp, #12
 8006c94:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c96:	4b0c      	ldr	r3, [pc, #48]	; (8006cc8 <prvResetNextTaskUnblockTime+0x38>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d104      	bne.n	8006caa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006ca0:	4b0a      	ldr	r3, [pc, #40]	; (8006ccc <prvResetNextTaskUnblockTime+0x3c>)
 8006ca2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ca6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006ca8:	e008      	b.n	8006cbc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006caa:	4b07      	ldr	r3, [pc, #28]	; (8006cc8 <prvResetNextTaskUnblockTime+0x38>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	68db      	ldr	r3, [r3, #12]
 8006cb0:	68db      	ldr	r3, [r3, #12]
 8006cb2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	4a04      	ldr	r2, [pc, #16]	; (8006ccc <prvResetNextTaskUnblockTime+0x3c>)
 8006cba:	6013      	str	r3, [r2, #0]
}
 8006cbc:	bf00      	nop
 8006cbe:	370c      	adds	r7, #12
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr
 8006cc8:	20000f88 	.word	0x20000f88
 8006ccc:	20000ff0 	.word	0x20000ff0

08006cd0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b083      	sub	sp, #12
 8006cd4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006cd6:	4b0b      	ldr	r3, [pc, #44]	; (8006d04 <xTaskGetSchedulerState+0x34>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d102      	bne.n	8006ce4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	607b      	str	r3, [r7, #4]
 8006ce2:	e008      	b.n	8006cf6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ce4:	4b08      	ldr	r3, [pc, #32]	; (8006d08 <xTaskGetSchedulerState+0x38>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d102      	bne.n	8006cf2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006cec:	2302      	movs	r3, #2
 8006cee:	607b      	str	r3, [r7, #4]
 8006cf0:	e001      	b.n	8006cf6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006cf6:	687b      	ldr	r3, [r7, #4]
	}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	370c      	adds	r7, #12
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr
 8006d04:	20000fdc 	.word	0x20000fdc
 8006d08:	20000ff8 	.word	0x20000ff8

08006d0c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b086      	sub	sp, #24
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d056      	beq.n	8006dd0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006d22:	4b2e      	ldr	r3, [pc, #184]	; (8006ddc <xTaskPriorityDisinherit+0xd0>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	693a      	ldr	r2, [r7, #16]
 8006d28:	429a      	cmp	r2, r3
 8006d2a:	d00a      	beq.n	8006d42 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d30:	f383 8811 	msr	BASEPRI, r3
 8006d34:	f3bf 8f6f 	isb	sy
 8006d38:	f3bf 8f4f 	dsb	sy
 8006d3c:	60fb      	str	r3, [r7, #12]
}
 8006d3e:	bf00      	nop
 8006d40:	e7fe      	b.n	8006d40 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d10a      	bne.n	8006d60 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d4e:	f383 8811 	msr	BASEPRI, r3
 8006d52:	f3bf 8f6f 	isb	sy
 8006d56:	f3bf 8f4f 	dsb	sy
 8006d5a:	60bb      	str	r3, [r7, #8]
}
 8006d5c:	bf00      	nop
 8006d5e:	e7fe      	b.n	8006d5e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d64:	1e5a      	subs	r2, r3, #1
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d02c      	beq.n	8006dd0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d128      	bne.n	8006dd0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	3304      	adds	r3, #4
 8006d82:	4618      	mov	r0, r3
 8006d84:	f7fe fc0c 	bl	80055a0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d94:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006da0:	4b0f      	ldr	r3, [pc, #60]	; (8006de0 <xTaskPriorityDisinherit+0xd4>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d903      	bls.n	8006db0 <xTaskPriorityDisinherit+0xa4>
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dac:	4a0c      	ldr	r2, [pc, #48]	; (8006de0 <xTaskPriorityDisinherit+0xd4>)
 8006dae:	6013      	str	r3, [r2, #0]
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006db4:	4613      	mov	r3, r2
 8006db6:	009b      	lsls	r3, r3, #2
 8006db8:	4413      	add	r3, r2
 8006dba:	009b      	lsls	r3, r3, #2
 8006dbc:	4a09      	ldr	r2, [pc, #36]	; (8006de4 <xTaskPriorityDisinherit+0xd8>)
 8006dbe:	441a      	add	r2, r3
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	3304      	adds	r3, #4
 8006dc4:	4619      	mov	r1, r3
 8006dc6:	4610      	mov	r0, r2
 8006dc8:	f7fe fb8d 	bl	80054e6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006dd0:	697b      	ldr	r3, [r7, #20]
	}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3718      	adds	r7, #24
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}
 8006dda:	bf00      	nop
 8006ddc:	20000afc 	.word	0x20000afc
 8006de0:	20000fd8 	.word	0x20000fd8
 8006de4:	20000b00 	.word	0x20000b00

08006de8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b084      	sub	sp, #16
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006df2:	4b21      	ldr	r3, [pc, #132]	; (8006e78 <prvAddCurrentTaskToDelayedList+0x90>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006df8:	4b20      	ldr	r3, [pc, #128]	; (8006e7c <prvAddCurrentTaskToDelayedList+0x94>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	3304      	adds	r3, #4
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f7fe fbce 	bl	80055a0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e0a:	d10a      	bne.n	8006e22 <prvAddCurrentTaskToDelayedList+0x3a>
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d007      	beq.n	8006e22 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e12:	4b1a      	ldr	r3, [pc, #104]	; (8006e7c <prvAddCurrentTaskToDelayedList+0x94>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	3304      	adds	r3, #4
 8006e18:	4619      	mov	r1, r3
 8006e1a:	4819      	ldr	r0, [pc, #100]	; (8006e80 <prvAddCurrentTaskToDelayedList+0x98>)
 8006e1c:	f7fe fb63 	bl	80054e6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006e20:	e026      	b.n	8006e70 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006e22:	68fa      	ldr	r2, [r7, #12]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	4413      	add	r3, r2
 8006e28:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006e2a:	4b14      	ldr	r3, [pc, #80]	; (8006e7c <prvAddCurrentTaskToDelayedList+0x94>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	68ba      	ldr	r2, [r7, #8]
 8006e30:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006e32:	68ba      	ldr	r2, [r7, #8]
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d209      	bcs.n	8006e4e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e3a:	4b12      	ldr	r3, [pc, #72]	; (8006e84 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006e3c:	681a      	ldr	r2, [r3, #0]
 8006e3e:	4b0f      	ldr	r3, [pc, #60]	; (8006e7c <prvAddCurrentTaskToDelayedList+0x94>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	3304      	adds	r3, #4
 8006e44:	4619      	mov	r1, r3
 8006e46:	4610      	mov	r0, r2
 8006e48:	f7fe fb71 	bl	800552e <vListInsert>
}
 8006e4c:	e010      	b.n	8006e70 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e4e:	4b0e      	ldr	r3, [pc, #56]	; (8006e88 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006e50:	681a      	ldr	r2, [r3, #0]
 8006e52:	4b0a      	ldr	r3, [pc, #40]	; (8006e7c <prvAddCurrentTaskToDelayedList+0x94>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	3304      	adds	r3, #4
 8006e58:	4619      	mov	r1, r3
 8006e5a:	4610      	mov	r0, r2
 8006e5c:	f7fe fb67 	bl	800552e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006e60:	4b0a      	ldr	r3, [pc, #40]	; (8006e8c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	68ba      	ldr	r2, [r7, #8]
 8006e66:	429a      	cmp	r2, r3
 8006e68:	d202      	bcs.n	8006e70 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006e6a:	4a08      	ldr	r2, [pc, #32]	; (8006e8c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	6013      	str	r3, [r2, #0]
}
 8006e70:	bf00      	nop
 8006e72:	3710      	adds	r7, #16
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}
 8006e78:	20000fd4 	.word	0x20000fd4
 8006e7c:	20000afc 	.word	0x20000afc
 8006e80:	20000fbc 	.word	0x20000fbc
 8006e84:	20000f8c 	.word	0x20000f8c
 8006e88:	20000f88 	.word	0x20000f88
 8006e8c:	20000ff0 	.word	0x20000ff0

08006e90 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b08a      	sub	sp, #40	; 0x28
 8006e94:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006e96:	2300      	movs	r3, #0
 8006e98:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006e9a:	f000 fb07 	bl	80074ac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006e9e:	4b1c      	ldr	r3, [pc, #112]	; (8006f10 <xTimerCreateTimerTask+0x80>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d021      	beq.n	8006eea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006eae:	1d3a      	adds	r2, r7, #4
 8006eb0:	f107 0108 	add.w	r1, r7, #8
 8006eb4:	f107 030c 	add.w	r3, r7, #12
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f7fe facd 	bl	8005458 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006ebe:	6879      	ldr	r1, [r7, #4]
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	68fa      	ldr	r2, [r7, #12]
 8006ec4:	9202      	str	r2, [sp, #8]
 8006ec6:	9301      	str	r3, [sp, #4]
 8006ec8:	2302      	movs	r3, #2
 8006eca:	9300      	str	r3, [sp, #0]
 8006ecc:	2300      	movs	r3, #0
 8006ece:	460a      	mov	r2, r1
 8006ed0:	4910      	ldr	r1, [pc, #64]	; (8006f14 <xTimerCreateTimerTask+0x84>)
 8006ed2:	4811      	ldr	r0, [pc, #68]	; (8006f18 <xTimerCreateTimerTask+0x88>)
 8006ed4:	f7ff f8b4 	bl	8006040 <xTaskCreateStatic>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	4a10      	ldr	r2, [pc, #64]	; (8006f1c <xTimerCreateTimerTask+0x8c>)
 8006edc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006ede:	4b0f      	ldr	r3, [pc, #60]	; (8006f1c <xTimerCreateTimerTask+0x8c>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d001      	beq.n	8006eea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d10a      	bne.n	8006f06 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef4:	f383 8811 	msr	BASEPRI, r3
 8006ef8:	f3bf 8f6f 	isb	sy
 8006efc:	f3bf 8f4f 	dsb	sy
 8006f00:	613b      	str	r3, [r7, #16]
}
 8006f02:	bf00      	nop
 8006f04:	e7fe      	b.n	8006f04 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006f06:	697b      	ldr	r3, [r7, #20]
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3718      	adds	r7, #24
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}
 8006f10:	2000102c 	.word	0x2000102c
 8006f14:	08008e34 	.word	0x08008e34
 8006f18:	08007055 	.word	0x08007055
 8006f1c:	20001030 	.word	0x20001030

08006f20 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b08a      	sub	sp, #40	; 0x28
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	60f8      	str	r0, [r7, #12]
 8006f28:	60b9      	str	r1, [r7, #8]
 8006f2a:	607a      	str	r2, [r7, #4]
 8006f2c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d10a      	bne.n	8006f4e <xTimerGenericCommand+0x2e>
	__asm volatile
 8006f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f3c:	f383 8811 	msr	BASEPRI, r3
 8006f40:	f3bf 8f6f 	isb	sy
 8006f44:	f3bf 8f4f 	dsb	sy
 8006f48:	623b      	str	r3, [r7, #32]
}
 8006f4a:	bf00      	nop
 8006f4c:	e7fe      	b.n	8006f4c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006f4e:	4b1a      	ldr	r3, [pc, #104]	; (8006fb8 <xTimerGenericCommand+0x98>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d02a      	beq.n	8006fac <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	2b05      	cmp	r3, #5
 8006f66:	dc18      	bgt.n	8006f9a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006f68:	f7ff feb2 	bl	8006cd0 <xTaskGetSchedulerState>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	2b02      	cmp	r3, #2
 8006f70:	d109      	bne.n	8006f86 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006f72:	4b11      	ldr	r3, [pc, #68]	; (8006fb8 <xTimerGenericCommand+0x98>)
 8006f74:	6818      	ldr	r0, [r3, #0]
 8006f76:	f107 0110 	add.w	r1, r7, #16
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f7e:	f7fe fc77 	bl	8005870 <xQueueGenericSend>
 8006f82:	6278      	str	r0, [r7, #36]	; 0x24
 8006f84:	e012      	b.n	8006fac <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006f86:	4b0c      	ldr	r3, [pc, #48]	; (8006fb8 <xTimerGenericCommand+0x98>)
 8006f88:	6818      	ldr	r0, [r3, #0]
 8006f8a:	f107 0110 	add.w	r1, r7, #16
 8006f8e:	2300      	movs	r3, #0
 8006f90:	2200      	movs	r2, #0
 8006f92:	f7fe fc6d 	bl	8005870 <xQueueGenericSend>
 8006f96:	6278      	str	r0, [r7, #36]	; 0x24
 8006f98:	e008      	b.n	8006fac <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006f9a:	4b07      	ldr	r3, [pc, #28]	; (8006fb8 <xTimerGenericCommand+0x98>)
 8006f9c:	6818      	ldr	r0, [r3, #0]
 8006f9e:	f107 0110 	add.w	r1, r7, #16
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	683a      	ldr	r2, [r7, #0]
 8006fa6:	f7fe fd61 	bl	8005a6c <xQueueGenericSendFromISR>
 8006faa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3728      	adds	r7, #40	; 0x28
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
 8006fb6:	bf00      	nop
 8006fb8:	2000102c 	.word	0x2000102c

08006fbc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b088      	sub	sp, #32
 8006fc0:	af02      	add	r7, sp, #8
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fc6:	4b22      	ldr	r3, [pc, #136]	; (8007050 <prvProcessExpiredTimer+0x94>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	68db      	ldr	r3, [r3, #12]
 8006fcc:	68db      	ldr	r3, [r3, #12]
 8006fce:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	3304      	adds	r3, #4
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f7fe fae3 	bl	80055a0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006fe0:	f003 0304 	and.w	r3, r3, #4
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d022      	beq.n	800702e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	699a      	ldr	r2, [r3, #24]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	18d1      	adds	r1, r2, r3
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	683a      	ldr	r2, [r7, #0]
 8006ff4:	6978      	ldr	r0, [r7, #20]
 8006ff6:	f000 f8d1 	bl	800719c <prvInsertTimerInActiveList>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d01f      	beq.n	8007040 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007000:	2300      	movs	r3, #0
 8007002:	9300      	str	r3, [sp, #0]
 8007004:	2300      	movs	r3, #0
 8007006:	687a      	ldr	r2, [r7, #4]
 8007008:	2100      	movs	r1, #0
 800700a:	6978      	ldr	r0, [r7, #20]
 800700c:	f7ff ff88 	bl	8006f20 <xTimerGenericCommand>
 8007010:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d113      	bne.n	8007040 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800701c:	f383 8811 	msr	BASEPRI, r3
 8007020:	f3bf 8f6f 	isb	sy
 8007024:	f3bf 8f4f 	dsb	sy
 8007028:	60fb      	str	r3, [r7, #12]
}
 800702a:	bf00      	nop
 800702c:	e7fe      	b.n	800702c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007034:	f023 0301 	bic.w	r3, r3, #1
 8007038:	b2da      	uxtb	r2, r3
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	6a1b      	ldr	r3, [r3, #32]
 8007044:	6978      	ldr	r0, [r7, #20]
 8007046:	4798      	blx	r3
}
 8007048:	bf00      	nop
 800704a:	3718      	adds	r7, #24
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}
 8007050:	20001024 	.word	0x20001024

08007054 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b084      	sub	sp, #16
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800705c:	f107 0308 	add.w	r3, r7, #8
 8007060:	4618      	mov	r0, r3
 8007062:	f000 f857 	bl	8007114 <prvGetNextExpireTime>
 8007066:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	4619      	mov	r1, r3
 800706c:	68f8      	ldr	r0, [r7, #12]
 800706e:	f000 f803 	bl	8007078 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007072:	f000 f8d5 	bl	8007220 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007076:	e7f1      	b.n	800705c <prvTimerTask+0x8>

08007078 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b084      	sub	sp, #16
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
 8007080:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007082:	f7ff fa39 	bl	80064f8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007086:	f107 0308 	add.w	r3, r7, #8
 800708a:	4618      	mov	r0, r3
 800708c:	f000 f866 	bl	800715c <prvSampleTimeNow>
 8007090:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d130      	bne.n	80070fa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d10a      	bne.n	80070b4 <prvProcessTimerOrBlockTask+0x3c>
 800709e:	687a      	ldr	r2, [r7, #4]
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	429a      	cmp	r2, r3
 80070a4:	d806      	bhi.n	80070b4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80070a6:	f7ff fa35 	bl	8006514 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80070aa:	68f9      	ldr	r1, [r7, #12]
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f7ff ff85 	bl	8006fbc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80070b2:	e024      	b.n	80070fe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d008      	beq.n	80070cc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80070ba:	4b13      	ldr	r3, [pc, #76]	; (8007108 <prvProcessTimerOrBlockTask+0x90>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d101      	bne.n	80070c8 <prvProcessTimerOrBlockTask+0x50>
 80070c4:	2301      	movs	r3, #1
 80070c6:	e000      	b.n	80070ca <prvProcessTimerOrBlockTask+0x52>
 80070c8:	2300      	movs	r3, #0
 80070ca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80070cc:	4b0f      	ldr	r3, [pc, #60]	; (800710c <prvProcessTimerOrBlockTask+0x94>)
 80070ce:	6818      	ldr	r0, [r3, #0]
 80070d0:	687a      	ldr	r2, [r7, #4]
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	1ad3      	subs	r3, r2, r3
 80070d6:	683a      	ldr	r2, [r7, #0]
 80070d8:	4619      	mov	r1, r3
 80070da:	f7fe ff7d 	bl	8005fd8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80070de:	f7ff fa19 	bl	8006514 <xTaskResumeAll>
 80070e2:	4603      	mov	r3, r0
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d10a      	bne.n	80070fe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80070e8:	4b09      	ldr	r3, [pc, #36]	; (8007110 <prvProcessTimerOrBlockTask+0x98>)
 80070ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070ee:	601a      	str	r2, [r3, #0]
 80070f0:	f3bf 8f4f 	dsb	sy
 80070f4:	f3bf 8f6f 	isb	sy
}
 80070f8:	e001      	b.n	80070fe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80070fa:	f7ff fa0b 	bl	8006514 <xTaskResumeAll>
}
 80070fe:	bf00      	nop
 8007100:	3710      	adds	r7, #16
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}
 8007106:	bf00      	nop
 8007108:	20001028 	.word	0x20001028
 800710c:	2000102c 	.word	0x2000102c
 8007110:	e000ed04 	.word	0xe000ed04

08007114 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007114:	b480      	push	{r7}
 8007116:	b085      	sub	sp, #20
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800711c:	4b0e      	ldr	r3, [pc, #56]	; (8007158 <prvGetNextExpireTime+0x44>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d101      	bne.n	800712a <prvGetNextExpireTime+0x16>
 8007126:	2201      	movs	r2, #1
 8007128:	e000      	b.n	800712c <prvGetNextExpireTime+0x18>
 800712a:	2200      	movs	r2, #0
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d105      	bne.n	8007144 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007138:	4b07      	ldr	r3, [pc, #28]	; (8007158 <prvGetNextExpireTime+0x44>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	68db      	ldr	r3, [r3, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	60fb      	str	r3, [r7, #12]
 8007142:	e001      	b.n	8007148 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007144:	2300      	movs	r3, #0
 8007146:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007148:	68fb      	ldr	r3, [r7, #12]
}
 800714a:	4618      	mov	r0, r3
 800714c:	3714      	adds	r7, #20
 800714e:	46bd      	mov	sp, r7
 8007150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007154:	4770      	bx	lr
 8007156:	bf00      	nop
 8007158:	20001024 	.word	0x20001024

0800715c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b084      	sub	sp, #16
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007164:	f7ff fa74 	bl	8006650 <xTaskGetTickCount>
 8007168:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800716a:	4b0b      	ldr	r3, [pc, #44]	; (8007198 <prvSampleTimeNow+0x3c>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	68fa      	ldr	r2, [r7, #12]
 8007170:	429a      	cmp	r2, r3
 8007172:	d205      	bcs.n	8007180 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007174:	f000 f936 	bl	80073e4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2201      	movs	r2, #1
 800717c:	601a      	str	r2, [r3, #0]
 800717e:	e002      	b.n	8007186 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2200      	movs	r2, #0
 8007184:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007186:	4a04      	ldr	r2, [pc, #16]	; (8007198 <prvSampleTimeNow+0x3c>)
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800718c:	68fb      	ldr	r3, [r7, #12]
}
 800718e:	4618      	mov	r0, r3
 8007190:	3710      	adds	r7, #16
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
 8007196:	bf00      	nop
 8007198:	20001034 	.word	0x20001034

0800719c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b086      	sub	sp, #24
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	60f8      	str	r0, [r7, #12]
 80071a4:	60b9      	str	r1, [r7, #8]
 80071a6:	607a      	str	r2, [r7, #4]
 80071a8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80071aa:	2300      	movs	r3, #0
 80071ac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	68ba      	ldr	r2, [r7, #8]
 80071b2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	68fa      	ldr	r2, [r7, #12]
 80071b8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80071ba:	68ba      	ldr	r2, [r7, #8]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	429a      	cmp	r2, r3
 80071c0:	d812      	bhi.n	80071e8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071c2:	687a      	ldr	r2, [r7, #4]
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	1ad2      	subs	r2, r2, r3
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	699b      	ldr	r3, [r3, #24]
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d302      	bcc.n	80071d6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80071d0:	2301      	movs	r3, #1
 80071d2:	617b      	str	r3, [r7, #20]
 80071d4:	e01b      	b.n	800720e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80071d6:	4b10      	ldr	r3, [pc, #64]	; (8007218 <prvInsertTimerInActiveList+0x7c>)
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	3304      	adds	r3, #4
 80071de:	4619      	mov	r1, r3
 80071e0:	4610      	mov	r0, r2
 80071e2:	f7fe f9a4 	bl	800552e <vListInsert>
 80071e6:	e012      	b.n	800720e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80071e8:	687a      	ldr	r2, [r7, #4]
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	429a      	cmp	r2, r3
 80071ee:	d206      	bcs.n	80071fe <prvInsertTimerInActiveList+0x62>
 80071f0:	68ba      	ldr	r2, [r7, #8]
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	429a      	cmp	r2, r3
 80071f6:	d302      	bcc.n	80071fe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80071f8:	2301      	movs	r3, #1
 80071fa:	617b      	str	r3, [r7, #20]
 80071fc:	e007      	b.n	800720e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80071fe:	4b07      	ldr	r3, [pc, #28]	; (800721c <prvInsertTimerInActiveList+0x80>)
 8007200:	681a      	ldr	r2, [r3, #0]
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	3304      	adds	r3, #4
 8007206:	4619      	mov	r1, r3
 8007208:	4610      	mov	r0, r2
 800720a:	f7fe f990 	bl	800552e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800720e:	697b      	ldr	r3, [r7, #20]
}
 8007210:	4618      	mov	r0, r3
 8007212:	3718      	adds	r7, #24
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}
 8007218:	20001028 	.word	0x20001028
 800721c:	20001024 	.word	0x20001024

08007220 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b08e      	sub	sp, #56	; 0x38
 8007224:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007226:	e0ca      	b.n	80073be <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2b00      	cmp	r3, #0
 800722c:	da18      	bge.n	8007260 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800722e:	1d3b      	adds	r3, r7, #4
 8007230:	3304      	adds	r3, #4
 8007232:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007236:	2b00      	cmp	r3, #0
 8007238:	d10a      	bne.n	8007250 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800723a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800723e:	f383 8811 	msr	BASEPRI, r3
 8007242:	f3bf 8f6f 	isb	sy
 8007246:	f3bf 8f4f 	dsb	sy
 800724a:	61fb      	str	r3, [r7, #28]
}
 800724c:	bf00      	nop
 800724e:	e7fe      	b.n	800724e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007256:	6850      	ldr	r0, [r2, #4]
 8007258:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800725a:	6892      	ldr	r2, [r2, #8]
 800725c:	4611      	mov	r1, r2
 800725e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2b00      	cmp	r3, #0
 8007264:	f2c0 80ab 	blt.w	80073be <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800726c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800726e:	695b      	ldr	r3, [r3, #20]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d004      	beq.n	800727e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007276:	3304      	adds	r3, #4
 8007278:	4618      	mov	r0, r3
 800727a:	f7fe f991 	bl	80055a0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800727e:	463b      	mov	r3, r7
 8007280:	4618      	mov	r0, r3
 8007282:	f7ff ff6b 	bl	800715c <prvSampleTimeNow>
 8007286:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2b09      	cmp	r3, #9
 800728c:	f200 8096 	bhi.w	80073bc <prvProcessReceivedCommands+0x19c>
 8007290:	a201      	add	r2, pc, #4	; (adr r2, 8007298 <prvProcessReceivedCommands+0x78>)
 8007292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007296:	bf00      	nop
 8007298:	080072c1 	.word	0x080072c1
 800729c:	080072c1 	.word	0x080072c1
 80072a0:	080072c1 	.word	0x080072c1
 80072a4:	08007335 	.word	0x08007335
 80072a8:	08007349 	.word	0x08007349
 80072ac:	08007393 	.word	0x08007393
 80072b0:	080072c1 	.word	0x080072c1
 80072b4:	080072c1 	.word	0x080072c1
 80072b8:	08007335 	.word	0x08007335
 80072bc:	08007349 	.word	0x08007349
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80072c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80072c6:	f043 0301 	orr.w	r3, r3, #1
 80072ca:	b2da      	uxtb	r2, r3
 80072cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80072d2:	68ba      	ldr	r2, [r7, #8]
 80072d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d6:	699b      	ldr	r3, [r3, #24]
 80072d8:	18d1      	adds	r1, r2, r3
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80072e0:	f7ff ff5c 	bl	800719c <prvInsertTimerInActiveList>
 80072e4:	4603      	mov	r3, r0
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d069      	beq.n	80073be <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80072ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ec:	6a1b      	ldr	r3, [r3, #32]
 80072ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80072f0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80072f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80072f8:	f003 0304 	and.w	r3, r3, #4
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d05e      	beq.n	80073be <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007300:	68ba      	ldr	r2, [r7, #8]
 8007302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007304:	699b      	ldr	r3, [r3, #24]
 8007306:	441a      	add	r2, r3
 8007308:	2300      	movs	r3, #0
 800730a:	9300      	str	r3, [sp, #0]
 800730c:	2300      	movs	r3, #0
 800730e:	2100      	movs	r1, #0
 8007310:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007312:	f7ff fe05 	bl	8006f20 <xTimerGenericCommand>
 8007316:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007318:	6a3b      	ldr	r3, [r7, #32]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d14f      	bne.n	80073be <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800731e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007322:	f383 8811 	msr	BASEPRI, r3
 8007326:	f3bf 8f6f 	isb	sy
 800732a:	f3bf 8f4f 	dsb	sy
 800732e:	61bb      	str	r3, [r7, #24]
}
 8007330:	bf00      	nop
 8007332:	e7fe      	b.n	8007332 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007336:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800733a:	f023 0301 	bic.w	r3, r3, #1
 800733e:	b2da      	uxtb	r2, r3
 8007340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007342:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007346:	e03a      	b.n	80073be <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800734a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800734e:	f043 0301 	orr.w	r3, r3, #1
 8007352:	b2da      	uxtb	r2, r3
 8007354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007356:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800735a:	68ba      	ldr	r2, [r7, #8]
 800735c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800735e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007362:	699b      	ldr	r3, [r3, #24]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d10a      	bne.n	800737e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800736c:	f383 8811 	msr	BASEPRI, r3
 8007370:	f3bf 8f6f 	isb	sy
 8007374:	f3bf 8f4f 	dsb	sy
 8007378:	617b      	str	r3, [r7, #20]
}
 800737a:	bf00      	nop
 800737c:	e7fe      	b.n	800737c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800737e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007380:	699a      	ldr	r2, [r3, #24]
 8007382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007384:	18d1      	adds	r1, r2, r3
 8007386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007388:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800738a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800738c:	f7ff ff06 	bl	800719c <prvInsertTimerInActiveList>
					break;
 8007390:	e015      	b.n	80073be <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007394:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007398:	f003 0302 	and.w	r3, r3, #2
 800739c:	2b00      	cmp	r3, #0
 800739e:	d103      	bne.n	80073a8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80073a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073a2:	f000 fbdd 	bl	8007b60 <vPortFree>
 80073a6:	e00a      	b.n	80073be <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80073a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80073ae:	f023 0301 	bic.w	r3, r3, #1
 80073b2:	b2da      	uxtb	r2, r3
 80073b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80073ba:	e000      	b.n	80073be <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80073bc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80073be:	4b08      	ldr	r3, [pc, #32]	; (80073e0 <prvProcessReceivedCommands+0x1c0>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	1d39      	adds	r1, r7, #4
 80073c4:	2200      	movs	r2, #0
 80073c6:	4618      	mov	r0, r3
 80073c8:	f7fe fbec 	bl	8005ba4 <xQueueReceive>
 80073cc:	4603      	mov	r3, r0
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	f47f af2a 	bne.w	8007228 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80073d4:	bf00      	nop
 80073d6:	bf00      	nop
 80073d8:	3730      	adds	r7, #48	; 0x30
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}
 80073de:	bf00      	nop
 80073e0:	2000102c 	.word	0x2000102c

080073e4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b088      	sub	sp, #32
 80073e8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80073ea:	e048      	b.n	800747e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80073ec:	4b2d      	ldr	r3, [pc, #180]	; (80074a4 <prvSwitchTimerLists+0xc0>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	68db      	ldr	r3, [r3, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073f6:	4b2b      	ldr	r3, [pc, #172]	; (80074a4 <prvSwitchTimerLists+0xc0>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	68db      	ldr	r3, [r3, #12]
 80073fc:	68db      	ldr	r3, [r3, #12]
 80073fe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	3304      	adds	r3, #4
 8007404:	4618      	mov	r0, r3
 8007406:	f7fe f8cb 	bl	80055a0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	6a1b      	ldr	r3, [r3, #32]
 800740e:	68f8      	ldr	r0, [r7, #12]
 8007410:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007418:	f003 0304 	and.w	r3, r3, #4
 800741c:	2b00      	cmp	r3, #0
 800741e:	d02e      	beq.n	800747e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	699b      	ldr	r3, [r3, #24]
 8007424:	693a      	ldr	r2, [r7, #16]
 8007426:	4413      	add	r3, r2
 8007428:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800742a:	68ba      	ldr	r2, [r7, #8]
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	429a      	cmp	r2, r3
 8007430:	d90e      	bls.n	8007450 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	68ba      	ldr	r2, [r7, #8]
 8007436:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	68fa      	ldr	r2, [r7, #12]
 800743c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800743e:	4b19      	ldr	r3, [pc, #100]	; (80074a4 <prvSwitchTimerLists+0xc0>)
 8007440:	681a      	ldr	r2, [r3, #0]
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	3304      	adds	r3, #4
 8007446:	4619      	mov	r1, r3
 8007448:	4610      	mov	r0, r2
 800744a:	f7fe f870 	bl	800552e <vListInsert>
 800744e:	e016      	b.n	800747e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007450:	2300      	movs	r3, #0
 8007452:	9300      	str	r3, [sp, #0]
 8007454:	2300      	movs	r3, #0
 8007456:	693a      	ldr	r2, [r7, #16]
 8007458:	2100      	movs	r1, #0
 800745a:	68f8      	ldr	r0, [r7, #12]
 800745c:	f7ff fd60 	bl	8006f20 <xTimerGenericCommand>
 8007460:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d10a      	bne.n	800747e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800746c:	f383 8811 	msr	BASEPRI, r3
 8007470:	f3bf 8f6f 	isb	sy
 8007474:	f3bf 8f4f 	dsb	sy
 8007478:	603b      	str	r3, [r7, #0]
}
 800747a:	bf00      	nop
 800747c:	e7fe      	b.n	800747c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800747e:	4b09      	ldr	r3, [pc, #36]	; (80074a4 <prvSwitchTimerLists+0xc0>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d1b1      	bne.n	80073ec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007488:	4b06      	ldr	r3, [pc, #24]	; (80074a4 <prvSwitchTimerLists+0xc0>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800748e:	4b06      	ldr	r3, [pc, #24]	; (80074a8 <prvSwitchTimerLists+0xc4>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a04      	ldr	r2, [pc, #16]	; (80074a4 <prvSwitchTimerLists+0xc0>)
 8007494:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007496:	4a04      	ldr	r2, [pc, #16]	; (80074a8 <prvSwitchTimerLists+0xc4>)
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	6013      	str	r3, [r2, #0]
}
 800749c:	bf00      	nop
 800749e:	3718      	adds	r7, #24
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}
 80074a4:	20001024 	.word	0x20001024
 80074a8:	20001028 	.word	0x20001028

080074ac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b082      	sub	sp, #8
 80074b0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80074b2:	f000 f967 	bl	8007784 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80074b6:	4b15      	ldr	r3, [pc, #84]	; (800750c <prvCheckForValidListAndQueue+0x60>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d120      	bne.n	8007500 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80074be:	4814      	ldr	r0, [pc, #80]	; (8007510 <prvCheckForValidListAndQueue+0x64>)
 80074c0:	f7fd ffe4 	bl	800548c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80074c4:	4813      	ldr	r0, [pc, #76]	; (8007514 <prvCheckForValidListAndQueue+0x68>)
 80074c6:	f7fd ffe1 	bl	800548c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80074ca:	4b13      	ldr	r3, [pc, #76]	; (8007518 <prvCheckForValidListAndQueue+0x6c>)
 80074cc:	4a10      	ldr	r2, [pc, #64]	; (8007510 <prvCheckForValidListAndQueue+0x64>)
 80074ce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80074d0:	4b12      	ldr	r3, [pc, #72]	; (800751c <prvCheckForValidListAndQueue+0x70>)
 80074d2:	4a10      	ldr	r2, [pc, #64]	; (8007514 <prvCheckForValidListAndQueue+0x68>)
 80074d4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80074d6:	2300      	movs	r3, #0
 80074d8:	9300      	str	r3, [sp, #0]
 80074da:	4b11      	ldr	r3, [pc, #68]	; (8007520 <prvCheckForValidListAndQueue+0x74>)
 80074dc:	4a11      	ldr	r2, [pc, #68]	; (8007524 <prvCheckForValidListAndQueue+0x78>)
 80074de:	2110      	movs	r1, #16
 80074e0:	200a      	movs	r0, #10
 80074e2:	f7fe f8ef 	bl	80056c4 <xQueueGenericCreateStatic>
 80074e6:	4603      	mov	r3, r0
 80074e8:	4a08      	ldr	r2, [pc, #32]	; (800750c <prvCheckForValidListAndQueue+0x60>)
 80074ea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80074ec:	4b07      	ldr	r3, [pc, #28]	; (800750c <prvCheckForValidListAndQueue+0x60>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d005      	beq.n	8007500 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80074f4:	4b05      	ldr	r3, [pc, #20]	; (800750c <prvCheckForValidListAndQueue+0x60>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	490b      	ldr	r1, [pc, #44]	; (8007528 <prvCheckForValidListAndQueue+0x7c>)
 80074fa:	4618      	mov	r0, r3
 80074fc:	f7fe fd42 	bl	8005f84 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007500:	f000 f970 	bl	80077e4 <vPortExitCritical>
}
 8007504:	bf00      	nop
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}
 800750a:	bf00      	nop
 800750c:	2000102c 	.word	0x2000102c
 8007510:	20000ffc 	.word	0x20000ffc
 8007514:	20001010 	.word	0x20001010
 8007518:	20001024 	.word	0x20001024
 800751c:	20001028 	.word	0x20001028
 8007520:	200010d8 	.word	0x200010d8
 8007524:	20001038 	.word	0x20001038
 8007528:	08008e3c 	.word	0x08008e3c

0800752c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800752c:	b480      	push	{r7}
 800752e:	b085      	sub	sp, #20
 8007530:	af00      	add	r7, sp, #0
 8007532:	60f8      	str	r0, [r7, #12]
 8007534:	60b9      	str	r1, [r7, #8]
 8007536:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	3b04      	subs	r3, #4
 800753c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007544:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	3b04      	subs	r3, #4
 800754a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	f023 0201 	bic.w	r2, r3, #1
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	3b04      	subs	r3, #4
 800755a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800755c:	4a0c      	ldr	r2, [pc, #48]	; (8007590 <pxPortInitialiseStack+0x64>)
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	3b14      	subs	r3, #20
 8007566:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007568:	687a      	ldr	r2, [r7, #4]
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	3b04      	subs	r3, #4
 8007572:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f06f 0202 	mvn.w	r2, #2
 800757a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	3b20      	subs	r3, #32
 8007580:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007582:	68fb      	ldr	r3, [r7, #12]
}
 8007584:	4618      	mov	r0, r3
 8007586:	3714      	adds	r7, #20
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr
 8007590:	08007595 	.word	0x08007595

08007594 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007594:	b480      	push	{r7}
 8007596:	b085      	sub	sp, #20
 8007598:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800759a:	2300      	movs	r3, #0
 800759c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800759e:	4b12      	ldr	r3, [pc, #72]	; (80075e8 <prvTaskExitError+0x54>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075a6:	d00a      	beq.n	80075be <prvTaskExitError+0x2a>
	__asm volatile
 80075a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ac:	f383 8811 	msr	BASEPRI, r3
 80075b0:	f3bf 8f6f 	isb	sy
 80075b4:	f3bf 8f4f 	dsb	sy
 80075b8:	60fb      	str	r3, [r7, #12]
}
 80075ba:	bf00      	nop
 80075bc:	e7fe      	b.n	80075bc <prvTaskExitError+0x28>
	__asm volatile
 80075be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c2:	f383 8811 	msr	BASEPRI, r3
 80075c6:	f3bf 8f6f 	isb	sy
 80075ca:	f3bf 8f4f 	dsb	sy
 80075ce:	60bb      	str	r3, [r7, #8]
}
 80075d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80075d2:	bf00      	nop
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d0fc      	beq.n	80075d4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80075da:	bf00      	nop
 80075dc:	bf00      	nop
 80075de:	3714      	adds	r7, #20
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr
 80075e8:	2000000c 	.word	0x2000000c
 80075ec:	00000000 	.word	0x00000000

080075f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80075f0:	4b07      	ldr	r3, [pc, #28]	; (8007610 <pxCurrentTCBConst2>)
 80075f2:	6819      	ldr	r1, [r3, #0]
 80075f4:	6808      	ldr	r0, [r1, #0]
 80075f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075fa:	f380 8809 	msr	PSP, r0
 80075fe:	f3bf 8f6f 	isb	sy
 8007602:	f04f 0000 	mov.w	r0, #0
 8007606:	f380 8811 	msr	BASEPRI, r0
 800760a:	4770      	bx	lr
 800760c:	f3af 8000 	nop.w

08007610 <pxCurrentTCBConst2>:
 8007610:	20000afc 	.word	0x20000afc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007614:	bf00      	nop
 8007616:	bf00      	nop

08007618 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007618:	4808      	ldr	r0, [pc, #32]	; (800763c <prvPortStartFirstTask+0x24>)
 800761a:	6800      	ldr	r0, [r0, #0]
 800761c:	6800      	ldr	r0, [r0, #0]
 800761e:	f380 8808 	msr	MSP, r0
 8007622:	f04f 0000 	mov.w	r0, #0
 8007626:	f380 8814 	msr	CONTROL, r0
 800762a:	b662      	cpsie	i
 800762c:	b661      	cpsie	f
 800762e:	f3bf 8f4f 	dsb	sy
 8007632:	f3bf 8f6f 	isb	sy
 8007636:	df00      	svc	0
 8007638:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800763a:	bf00      	nop
 800763c:	e000ed08 	.word	0xe000ed08

08007640 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b086      	sub	sp, #24
 8007644:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007646:	4b46      	ldr	r3, [pc, #280]	; (8007760 <xPortStartScheduler+0x120>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a46      	ldr	r2, [pc, #280]	; (8007764 <xPortStartScheduler+0x124>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d10a      	bne.n	8007666 <xPortStartScheduler+0x26>
	__asm volatile
 8007650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007654:	f383 8811 	msr	BASEPRI, r3
 8007658:	f3bf 8f6f 	isb	sy
 800765c:	f3bf 8f4f 	dsb	sy
 8007660:	613b      	str	r3, [r7, #16]
}
 8007662:	bf00      	nop
 8007664:	e7fe      	b.n	8007664 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007666:	4b3e      	ldr	r3, [pc, #248]	; (8007760 <xPortStartScheduler+0x120>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a3f      	ldr	r2, [pc, #252]	; (8007768 <xPortStartScheduler+0x128>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d10a      	bne.n	8007686 <xPortStartScheduler+0x46>
	__asm volatile
 8007670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007674:	f383 8811 	msr	BASEPRI, r3
 8007678:	f3bf 8f6f 	isb	sy
 800767c:	f3bf 8f4f 	dsb	sy
 8007680:	60fb      	str	r3, [r7, #12]
}
 8007682:	bf00      	nop
 8007684:	e7fe      	b.n	8007684 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007686:	4b39      	ldr	r3, [pc, #228]	; (800776c <xPortStartScheduler+0x12c>)
 8007688:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	781b      	ldrb	r3, [r3, #0]
 800768e:	b2db      	uxtb	r3, r3
 8007690:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	22ff      	movs	r2, #255	; 0xff
 8007696:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	b2db      	uxtb	r3, r3
 800769e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80076a0:	78fb      	ldrb	r3, [r7, #3]
 80076a2:	b2db      	uxtb	r3, r3
 80076a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80076a8:	b2da      	uxtb	r2, r3
 80076aa:	4b31      	ldr	r3, [pc, #196]	; (8007770 <xPortStartScheduler+0x130>)
 80076ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80076ae:	4b31      	ldr	r3, [pc, #196]	; (8007774 <xPortStartScheduler+0x134>)
 80076b0:	2207      	movs	r2, #7
 80076b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80076b4:	e009      	b.n	80076ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80076b6:	4b2f      	ldr	r3, [pc, #188]	; (8007774 <xPortStartScheduler+0x134>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	3b01      	subs	r3, #1
 80076bc:	4a2d      	ldr	r2, [pc, #180]	; (8007774 <xPortStartScheduler+0x134>)
 80076be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80076c0:	78fb      	ldrb	r3, [r7, #3]
 80076c2:	b2db      	uxtb	r3, r3
 80076c4:	005b      	lsls	r3, r3, #1
 80076c6:	b2db      	uxtb	r3, r3
 80076c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80076ca:	78fb      	ldrb	r3, [r7, #3]
 80076cc:	b2db      	uxtb	r3, r3
 80076ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076d2:	2b80      	cmp	r3, #128	; 0x80
 80076d4:	d0ef      	beq.n	80076b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80076d6:	4b27      	ldr	r3, [pc, #156]	; (8007774 <xPortStartScheduler+0x134>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f1c3 0307 	rsb	r3, r3, #7
 80076de:	2b04      	cmp	r3, #4
 80076e0:	d00a      	beq.n	80076f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80076e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e6:	f383 8811 	msr	BASEPRI, r3
 80076ea:	f3bf 8f6f 	isb	sy
 80076ee:	f3bf 8f4f 	dsb	sy
 80076f2:	60bb      	str	r3, [r7, #8]
}
 80076f4:	bf00      	nop
 80076f6:	e7fe      	b.n	80076f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80076f8:	4b1e      	ldr	r3, [pc, #120]	; (8007774 <xPortStartScheduler+0x134>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	021b      	lsls	r3, r3, #8
 80076fe:	4a1d      	ldr	r2, [pc, #116]	; (8007774 <xPortStartScheduler+0x134>)
 8007700:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007702:	4b1c      	ldr	r3, [pc, #112]	; (8007774 <xPortStartScheduler+0x134>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800770a:	4a1a      	ldr	r2, [pc, #104]	; (8007774 <xPortStartScheduler+0x134>)
 800770c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	b2da      	uxtb	r2, r3
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007716:	4b18      	ldr	r3, [pc, #96]	; (8007778 <xPortStartScheduler+0x138>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a17      	ldr	r2, [pc, #92]	; (8007778 <xPortStartScheduler+0x138>)
 800771c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007720:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007722:	4b15      	ldr	r3, [pc, #84]	; (8007778 <xPortStartScheduler+0x138>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a14      	ldr	r2, [pc, #80]	; (8007778 <xPortStartScheduler+0x138>)
 8007728:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800772c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800772e:	f000 f8dd 	bl	80078ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007732:	4b12      	ldr	r3, [pc, #72]	; (800777c <xPortStartScheduler+0x13c>)
 8007734:	2200      	movs	r2, #0
 8007736:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007738:	f000 f8fc 	bl	8007934 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800773c:	4b10      	ldr	r3, [pc, #64]	; (8007780 <xPortStartScheduler+0x140>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a0f      	ldr	r2, [pc, #60]	; (8007780 <xPortStartScheduler+0x140>)
 8007742:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007746:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007748:	f7ff ff66 	bl	8007618 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800774c:	f7ff f84a 	bl	80067e4 <vTaskSwitchContext>
	prvTaskExitError();
 8007750:	f7ff ff20 	bl	8007594 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007754:	2300      	movs	r3, #0
}
 8007756:	4618      	mov	r0, r3
 8007758:	3718      	adds	r7, #24
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}
 800775e:	bf00      	nop
 8007760:	e000ed00 	.word	0xe000ed00
 8007764:	410fc271 	.word	0x410fc271
 8007768:	410fc270 	.word	0x410fc270
 800776c:	e000e400 	.word	0xe000e400
 8007770:	20001128 	.word	0x20001128
 8007774:	2000112c 	.word	0x2000112c
 8007778:	e000ed20 	.word	0xe000ed20
 800777c:	2000000c 	.word	0x2000000c
 8007780:	e000ef34 	.word	0xe000ef34

08007784 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007784:	b480      	push	{r7}
 8007786:	b083      	sub	sp, #12
 8007788:	af00      	add	r7, sp, #0
	__asm volatile
 800778a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800778e:	f383 8811 	msr	BASEPRI, r3
 8007792:	f3bf 8f6f 	isb	sy
 8007796:	f3bf 8f4f 	dsb	sy
 800779a:	607b      	str	r3, [r7, #4]
}
 800779c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800779e:	4b0f      	ldr	r3, [pc, #60]	; (80077dc <vPortEnterCritical+0x58>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	3301      	adds	r3, #1
 80077a4:	4a0d      	ldr	r2, [pc, #52]	; (80077dc <vPortEnterCritical+0x58>)
 80077a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80077a8:	4b0c      	ldr	r3, [pc, #48]	; (80077dc <vPortEnterCritical+0x58>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	d10f      	bne.n	80077d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80077b0:	4b0b      	ldr	r3, [pc, #44]	; (80077e0 <vPortEnterCritical+0x5c>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	b2db      	uxtb	r3, r3
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d00a      	beq.n	80077d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80077ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077be:	f383 8811 	msr	BASEPRI, r3
 80077c2:	f3bf 8f6f 	isb	sy
 80077c6:	f3bf 8f4f 	dsb	sy
 80077ca:	603b      	str	r3, [r7, #0]
}
 80077cc:	bf00      	nop
 80077ce:	e7fe      	b.n	80077ce <vPortEnterCritical+0x4a>
	}
}
 80077d0:	bf00      	nop
 80077d2:	370c      	adds	r7, #12
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr
 80077dc:	2000000c 	.word	0x2000000c
 80077e0:	e000ed04 	.word	0xe000ed04

080077e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80077e4:	b480      	push	{r7}
 80077e6:	b083      	sub	sp, #12
 80077e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80077ea:	4b12      	ldr	r3, [pc, #72]	; (8007834 <vPortExitCritical+0x50>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d10a      	bne.n	8007808 <vPortExitCritical+0x24>
	__asm volatile
 80077f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f6:	f383 8811 	msr	BASEPRI, r3
 80077fa:	f3bf 8f6f 	isb	sy
 80077fe:	f3bf 8f4f 	dsb	sy
 8007802:	607b      	str	r3, [r7, #4]
}
 8007804:	bf00      	nop
 8007806:	e7fe      	b.n	8007806 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007808:	4b0a      	ldr	r3, [pc, #40]	; (8007834 <vPortExitCritical+0x50>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	3b01      	subs	r3, #1
 800780e:	4a09      	ldr	r2, [pc, #36]	; (8007834 <vPortExitCritical+0x50>)
 8007810:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007812:	4b08      	ldr	r3, [pc, #32]	; (8007834 <vPortExitCritical+0x50>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d105      	bne.n	8007826 <vPortExitCritical+0x42>
 800781a:	2300      	movs	r3, #0
 800781c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	f383 8811 	msr	BASEPRI, r3
}
 8007824:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007826:	bf00      	nop
 8007828:	370c      	adds	r7, #12
 800782a:	46bd      	mov	sp, r7
 800782c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007830:	4770      	bx	lr
 8007832:	bf00      	nop
 8007834:	2000000c 	.word	0x2000000c
	...

08007840 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007840:	f3ef 8009 	mrs	r0, PSP
 8007844:	f3bf 8f6f 	isb	sy
 8007848:	4b15      	ldr	r3, [pc, #84]	; (80078a0 <pxCurrentTCBConst>)
 800784a:	681a      	ldr	r2, [r3, #0]
 800784c:	f01e 0f10 	tst.w	lr, #16
 8007850:	bf08      	it	eq
 8007852:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007856:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800785a:	6010      	str	r0, [r2, #0]
 800785c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007860:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007864:	f380 8811 	msr	BASEPRI, r0
 8007868:	f3bf 8f4f 	dsb	sy
 800786c:	f3bf 8f6f 	isb	sy
 8007870:	f7fe ffb8 	bl	80067e4 <vTaskSwitchContext>
 8007874:	f04f 0000 	mov.w	r0, #0
 8007878:	f380 8811 	msr	BASEPRI, r0
 800787c:	bc09      	pop	{r0, r3}
 800787e:	6819      	ldr	r1, [r3, #0]
 8007880:	6808      	ldr	r0, [r1, #0]
 8007882:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007886:	f01e 0f10 	tst.w	lr, #16
 800788a:	bf08      	it	eq
 800788c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007890:	f380 8809 	msr	PSP, r0
 8007894:	f3bf 8f6f 	isb	sy
 8007898:	4770      	bx	lr
 800789a:	bf00      	nop
 800789c:	f3af 8000 	nop.w

080078a0 <pxCurrentTCBConst>:
 80078a0:	20000afc 	.word	0x20000afc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80078a4:	bf00      	nop
 80078a6:	bf00      	nop

080078a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b082      	sub	sp, #8
 80078ac:	af00      	add	r7, sp, #0
	__asm volatile
 80078ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b2:	f383 8811 	msr	BASEPRI, r3
 80078b6:	f3bf 8f6f 	isb	sy
 80078ba:	f3bf 8f4f 	dsb	sy
 80078be:	607b      	str	r3, [r7, #4]
}
 80078c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80078c2:	f7fe fed5 	bl	8006670 <xTaskIncrementTick>
 80078c6:	4603      	mov	r3, r0
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d003      	beq.n	80078d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80078cc:	4b06      	ldr	r3, [pc, #24]	; (80078e8 <xPortSysTickHandler+0x40>)
 80078ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078d2:	601a      	str	r2, [r3, #0]
 80078d4:	2300      	movs	r3, #0
 80078d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	f383 8811 	msr	BASEPRI, r3
}
 80078de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80078e0:	bf00      	nop
 80078e2:	3708      	adds	r7, #8
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}
 80078e8:	e000ed04 	.word	0xe000ed04

080078ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80078ec:	b480      	push	{r7}
 80078ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80078f0:	4b0b      	ldr	r3, [pc, #44]	; (8007920 <vPortSetupTimerInterrupt+0x34>)
 80078f2:	2200      	movs	r2, #0
 80078f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80078f6:	4b0b      	ldr	r3, [pc, #44]	; (8007924 <vPortSetupTimerInterrupt+0x38>)
 80078f8:	2200      	movs	r2, #0
 80078fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80078fc:	4b0a      	ldr	r3, [pc, #40]	; (8007928 <vPortSetupTimerInterrupt+0x3c>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a0a      	ldr	r2, [pc, #40]	; (800792c <vPortSetupTimerInterrupt+0x40>)
 8007902:	fba2 2303 	umull	r2, r3, r2, r3
 8007906:	099b      	lsrs	r3, r3, #6
 8007908:	4a09      	ldr	r2, [pc, #36]	; (8007930 <vPortSetupTimerInterrupt+0x44>)
 800790a:	3b01      	subs	r3, #1
 800790c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800790e:	4b04      	ldr	r3, [pc, #16]	; (8007920 <vPortSetupTimerInterrupt+0x34>)
 8007910:	2207      	movs	r2, #7
 8007912:	601a      	str	r2, [r3, #0]
}
 8007914:	bf00      	nop
 8007916:	46bd      	mov	sp, r7
 8007918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791c:	4770      	bx	lr
 800791e:	bf00      	nop
 8007920:	e000e010 	.word	0xe000e010
 8007924:	e000e018 	.word	0xe000e018
 8007928:	20000000 	.word	0x20000000
 800792c:	10624dd3 	.word	0x10624dd3
 8007930:	e000e014 	.word	0xe000e014

08007934 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007934:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007944 <vPortEnableVFP+0x10>
 8007938:	6801      	ldr	r1, [r0, #0]
 800793a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800793e:	6001      	str	r1, [r0, #0]
 8007940:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007942:	bf00      	nop
 8007944:	e000ed88 	.word	0xe000ed88

08007948 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007948:	b480      	push	{r7}
 800794a:	b085      	sub	sp, #20
 800794c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800794e:	f3ef 8305 	mrs	r3, IPSR
 8007952:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	2b0f      	cmp	r3, #15
 8007958:	d914      	bls.n	8007984 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800795a:	4a17      	ldr	r2, [pc, #92]	; (80079b8 <vPortValidateInterruptPriority+0x70>)
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	4413      	add	r3, r2
 8007960:	781b      	ldrb	r3, [r3, #0]
 8007962:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007964:	4b15      	ldr	r3, [pc, #84]	; (80079bc <vPortValidateInterruptPriority+0x74>)
 8007966:	781b      	ldrb	r3, [r3, #0]
 8007968:	7afa      	ldrb	r2, [r7, #11]
 800796a:	429a      	cmp	r2, r3
 800796c:	d20a      	bcs.n	8007984 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800796e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007972:	f383 8811 	msr	BASEPRI, r3
 8007976:	f3bf 8f6f 	isb	sy
 800797a:	f3bf 8f4f 	dsb	sy
 800797e:	607b      	str	r3, [r7, #4]
}
 8007980:	bf00      	nop
 8007982:	e7fe      	b.n	8007982 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007984:	4b0e      	ldr	r3, [pc, #56]	; (80079c0 <vPortValidateInterruptPriority+0x78>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800798c:	4b0d      	ldr	r3, [pc, #52]	; (80079c4 <vPortValidateInterruptPriority+0x7c>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	429a      	cmp	r2, r3
 8007992:	d90a      	bls.n	80079aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007998:	f383 8811 	msr	BASEPRI, r3
 800799c:	f3bf 8f6f 	isb	sy
 80079a0:	f3bf 8f4f 	dsb	sy
 80079a4:	603b      	str	r3, [r7, #0]
}
 80079a6:	bf00      	nop
 80079a8:	e7fe      	b.n	80079a8 <vPortValidateInterruptPriority+0x60>
	}
 80079aa:	bf00      	nop
 80079ac:	3714      	adds	r7, #20
 80079ae:	46bd      	mov	sp, r7
 80079b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b4:	4770      	bx	lr
 80079b6:	bf00      	nop
 80079b8:	e000e3f0 	.word	0xe000e3f0
 80079bc:	20001128 	.word	0x20001128
 80079c0:	e000ed0c 	.word	0xe000ed0c
 80079c4:	2000112c 	.word	0x2000112c

080079c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b08a      	sub	sp, #40	; 0x28
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80079d0:	2300      	movs	r3, #0
 80079d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80079d4:	f7fe fd90 	bl	80064f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80079d8:	4b5b      	ldr	r3, [pc, #364]	; (8007b48 <pvPortMalloc+0x180>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d101      	bne.n	80079e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80079e0:	f000 f920 	bl	8007c24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80079e4:	4b59      	ldr	r3, [pc, #356]	; (8007b4c <pvPortMalloc+0x184>)
 80079e6:	681a      	ldr	r2, [r3, #0]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	4013      	ands	r3, r2
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	f040 8093 	bne.w	8007b18 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d01d      	beq.n	8007a34 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80079f8:	2208      	movs	r2, #8
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	4413      	add	r3, r2
 80079fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f003 0307 	and.w	r3, r3, #7
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d014      	beq.n	8007a34 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f023 0307 	bic.w	r3, r3, #7
 8007a10:	3308      	adds	r3, #8
 8007a12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f003 0307 	and.w	r3, r3, #7
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d00a      	beq.n	8007a34 <pvPortMalloc+0x6c>
	__asm volatile
 8007a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a22:	f383 8811 	msr	BASEPRI, r3
 8007a26:	f3bf 8f6f 	isb	sy
 8007a2a:	f3bf 8f4f 	dsb	sy
 8007a2e:	617b      	str	r3, [r7, #20]
}
 8007a30:	bf00      	nop
 8007a32:	e7fe      	b.n	8007a32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d06e      	beq.n	8007b18 <pvPortMalloc+0x150>
 8007a3a:	4b45      	ldr	r3, [pc, #276]	; (8007b50 <pvPortMalloc+0x188>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	687a      	ldr	r2, [r7, #4]
 8007a40:	429a      	cmp	r2, r3
 8007a42:	d869      	bhi.n	8007b18 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007a44:	4b43      	ldr	r3, [pc, #268]	; (8007b54 <pvPortMalloc+0x18c>)
 8007a46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007a48:	4b42      	ldr	r3, [pc, #264]	; (8007b54 <pvPortMalloc+0x18c>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007a4e:	e004      	b.n	8007a5a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a5c:	685b      	ldr	r3, [r3, #4]
 8007a5e:	687a      	ldr	r2, [r7, #4]
 8007a60:	429a      	cmp	r2, r3
 8007a62:	d903      	bls.n	8007a6c <pvPortMalloc+0xa4>
 8007a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d1f1      	bne.n	8007a50 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007a6c:	4b36      	ldr	r3, [pc, #216]	; (8007b48 <pvPortMalloc+0x180>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a72:	429a      	cmp	r2, r3
 8007a74:	d050      	beq.n	8007b18 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007a76:	6a3b      	ldr	r3, [r7, #32]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	2208      	movs	r2, #8
 8007a7c:	4413      	add	r3, r2
 8007a7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a82:	681a      	ldr	r2, [r3, #0]
 8007a84:	6a3b      	ldr	r3, [r7, #32]
 8007a86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a8a:	685a      	ldr	r2, [r3, #4]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	1ad2      	subs	r2, r2, r3
 8007a90:	2308      	movs	r3, #8
 8007a92:	005b      	lsls	r3, r3, #1
 8007a94:	429a      	cmp	r2, r3
 8007a96:	d91f      	bls.n	8007ad8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007a98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	4413      	add	r3, r2
 8007a9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007aa0:	69bb      	ldr	r3, [r7, #24]
 8007aa2:	f003 0307 	and.w	r3, r3, #7
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d00a      	beq.n	8007ac0 <pvPortMalloc+0xf8>
	__asm volatile
 8007aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aae:	f383 8811 	msr	BASEPRI, r3
 8007ab2:	f3bf 8f6f 	isb	sy
 8007ab6:	f3bf 8f4f 	dsb	sy
 8007aba:	613b      	str	r3, [r7, #16]
}
 8007abc:	bf00      	nop
 8007abe:	e7fe      	b.n	8007abe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac2:	685a      	ldr	r2, [r3, #4]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	1ad2      	subs	r2, r2, r3
 8007ac8:	69bb      	ldr	r3, [r7, #24]
 8007aca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007ad2:	69b8      	ldr	r0, [r7, #24]
 8007ad4:	f000 f908 	bl	8007ce8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007ad8:	4b1d      	ldr	r3, [pc, #116]	; (8007b50 <pvPortMalloc+0x188>)
 8007ada:	681a      	ldr	r2, [r3, #0]
 8007adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	1ad3      	subs	r3, r2, r3
 8007ae2:	4a1b      	ldr	r2, [pc, #108]	; (8007b50 <pvPortMalloc+0x188>)
 8007ae4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007ae6:	4b1a      	ldr	r3, [pc, #104]	; (8007b50 <pvPortMalloc+0x188>)
 8007ae8:	681a      	ldr	r2, [r3, #0]
 8007aea:	4b1b      	ldr	r3, [pc, #108]	; (8007b58 <pvPortMalloc+0x190>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	429a      	cmp	r2, r3
 8007af0:	d203      	bcs.n	8007afa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007af2:	4b17      	ldr	r3, [pc, #92]	; (8007b50 <pvPortMalloc+0x188>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4a18      	ldr	r2, [pc, #96]	; (8007b58 <pvPortMalloc+0x190>)
 8007af8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007afc:	685a      	ldr	r2, [r3, #4]
 8007afe:	4b13      	ldr	r3, [pc, #76]	; (8007b4c <pvPortMalloc+0x184>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	431a      	orrs	r2, r3
 8007b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b06:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007b0e:	4b13      	ldr	r3, [pc, #76]	; (8007b5c <pvPortMalloc+0x194>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	3301      	adds	r3, #1
 8007b14:	4a11      	ldr	r2, [pc, #68]	; (8007b5c <pvPortMalloc+0x194>)
 8007b16:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007b18:	f7fe fcfc 	bl	8006514 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b1c:	69fb      	ldr	r3, [r7, #28]
 8007b1e:	f003 0307 	and.w	r3, r3, #7
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d00a      	beq.n	8007b3c <pvPortMalloc+0x174>
	__asm volatile
 8007b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b2a:	f383 8811 	msr	BASEPRI, r3
 8007b2e:	f3bf 8f6f 	isb	sy
 8007b32:	f3bf 8f4f 	dsb	sy
 8007b36:	60fb      	str	r3, [r7, #12]
}
 8007b38:	bf00      	nop
 8007b3a:	e7fe      	b.n	8007b3a <pvPortMalloc+0x172>
	return pvReturn;
 8007b3c:	69fb      	ldr	r3, [r7, #28]
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3728      	adds	r7, #40	; 0x28
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}
 8007b46:	bf00      	nop
 8007b48:	200024c0 	.word	0x200024c0
 8007b4c:	200024d4 	.word	0x200024d4
 8007b50:	200024c4 	.word	0x200024c4
 8007b54:	200024b8 	.word	0x200024b8
 8007b58:	200024c8 	.word	0x200024c8
 8007b5c:	200024cc 	.word	0x200024cc

08007b60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b086      	sub	sp, #24
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d04d      	beq.n	8007c0e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007b72:	2308      	movs	r3, #8
 8007b74:	425b      	negs	r3, r3
 8007b76:	697a      	ldr	r2, [r7, #20]
 8007b78:	4413      	add	r3, r2
 8007b7a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	685a      	ldr	r2, [r3, #4]
 8007b84:	4b24      	ldr	r3, [pc, #144]	; (8007c18 <vPortFree+0xb8>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4013      	ands	r3, r2
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d10a      	bne.n	8007ba4 <vPortFree+0x44>
	__asm volatile
 8007b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b92:	f383 8811 	msr	BASEPRI, r3
 8007b96:	f3bf 8f6f 	isb	sy
 8007b9a:	f3bf 8f4f 	dsb	sy
 8007b9e:	60fb      	str	r3, [r7, #12]
}
 8007ba0:	bf00      	nop
 8007ba2:	e7fe      	b.n	8007ba2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d00a      	beq.n	8007bc2 <vPortFree+0x62>
	__asm volatile
 8007bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb0:	f383 8811 	msr	BASEPRI, r3
 8007bb4:	f3bf 8f6f 	isb	sy
 8007bb8:	f3bf 8f4f 	dsb	sy
 8007bbc:	60bb      	str	r3, [r7, #8]
}
 8007bbe:	bf00      	nop
 8007bc0:	e7fe      	b.n	8007bc0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	685a      	ldr	r2, [r3, #4]
 8007bc6:	4b14      	ldr	r3, [pc, #80]	; (8007c18 <vPortFree+0xb8>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4013      	ands	r3, r2
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d01e      	beq.n	8007c0e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d11a      	bne.n	8007c0e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	685a      	ldr	r2, [r3, #4]
 8007bdc:	4b0e      	ldr	r3, [pc, #56]	; (8007c18 <vPortFree+0xb8>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	43db      	mvns	r3, r3
 8007be2:	401a      	ands	r2, r3
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007be8:	f7fe fc86 	bl	80064f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007bec:	693b      	ldr	r3, [r7, #16]
 8007bee:	685a      	ldr	r2, [r3, #4]
 8007bf0:	4b0a      	ldr	r3, [pc, #40]	; (8007c1c <vPortFree+0xbc>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4413      	add	r3, r2
 8007bf6:	4a09      	ldr	r2, [pc, #36]	; (8007c1c <vPortFree+0xbc>)
 8007bf8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007bfa:	6938      	ldr	r0, [r7, #16]
 8007bfc:	f000 f874 	bl	8007ce8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007c00:	4b07      	ldr	r3, [pc, #28]	; (8007c20 <vPortFree+0xc0>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	3301      	adds	r3, #1
 8007c06:	4a06      	ldr	r2, [pc, #24]	; (8007c20 <vPortFree+0xc0>)
 8007c08:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007c0a:	f7fe fc83 	bl	8006514 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007c0e:	bf00      	nop
 8007c10:	3718      	adds	r7, #24
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}
 8007c16:	bf00      	nop
 8007c18:	200024d4 	.word	0x200024d4
 8007c1c:	200024c4 	.word	0x200024c4
 8007c20:	200024d0 	.word	0x200024d0

08007c24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007c24:	b480      	push	{r7}
 8007c26:	b085      	sub	sp, #20
 8007c28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007c2a:	f241 3388 	movw	r3, #5000	; 0x1388
 8007c2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007c30:	4b27      	ldr	r3, [pc, #156]	; (8007cd0 <prvHeapInit+0xac>)
 8007c32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f003 0307 	and.w	r3, r3, #7
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d00c      	beq.n	8007c58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	3307      	adds	r3, #7
 8007c42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f023 0307 	bic.w	r3, r3, #7
 8007c4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007c4c:	68ba      	ldr	r2, [r7, #8]
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	1ad3      	subs	r3, r2, r3
 8007c52:	4a1f      	ldr	r2, [pc, #124]	; (8007cd0 <prvHeapInit+0xac>)
 8007c54:	4413      	add	r3, r2
 8007c56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007c5c:	4a1d      	ldr	r2, [pc, #116]	; (8007cd4 <prvHeapInit+0xb0>)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007c62:	4b1c      	ldr	r3, [pc, #112]	; (8007cd4 <prvHeapInit+0xb0>)
 8007c64:	2200      	movs	r2, #0
 8007c66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	68ba      	ldr	r2, [r7, #8]
 8007c6c:	4413      	add	r3, r2
 8007c6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007c70:	2208      	movs	r2, #8
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	1a9b      	subs	r3, r3, r2
 8007c76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f023 0307 	bic.w	r3, r3, #7
 8007c7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	4a15      	ldr	r2, [pc, #84]	; (8007cd8 <prvHeapInit+0xb4>)
 8007c84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007c86:	4b14      	ldr	r3, [pc, #80]	; (8007cd8 <prvHeapInit+0xb4>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007c8e:	4b12      	ldr	r3, [pc, #72]	; (8007cd8 <prvHeapInit+0xb4>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	2200      	movs	r2, #0
 8007c94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	68fa      	ldr	r2, [r7, #12]
 8007c9e:	1ad2      	subs	r2, r2, r3
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007ca4:	4b0c      	ldr	r3, [pc, #48]	; (8007cd8 <prvHeapInit+0xb4>)
 8007ca6:	681a      	ldr	r2, [r3, #0]
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	4a0a      	ldr	r2, [pc, #40]	; (8007cdc <prvHeapInit+0xb8>)
 8007cb2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	4a09      	ldr	r2, [pc, #36]	; (8007ce0 <prvHeapInit+0xbc>)
 8007cba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007cbc:	4b09      	ldr	r3, [pc, #36]	; (8007ce4 <prvHeapInit+0xc0>)
 8007cbe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007cc2:	601a      	str	r2, [r3, #0]
}
 8007cc4:	bf00      	nop
 8007cc6:	3714      	adds	r7, #20
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr
 8007cd0:	20001130 	.word	0x20001130
 8007cd4:	200024b8 	.word	0x200024b8
 8007cd8:	200024c0 	.word	0x200024c0
 8007cdc:	200024c8 	.word	0x200024c8
 8007ce0:	200024c4 	.word	0x200024c4
 8007ce4:	200024d4 	.word	0x200024d4

08007ce8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b085      	sub	sp, #20
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007cf0:	4b28      	ldr	r3, [pc, #160]	; (8007d94 <prvInsertBlockIntoFreeList+0xac>)
 8007cf2:	60fb      	str	r3, [r7, #12]
 8007cf4:	e002      	b.n	8007cfc <prvInsertBlockIntoFreeList+0x14>
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	60fb      	str	r3, [r7, #12]
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	687a      	ldr	r2, [r7, #4]
 8007d02:	429a      	cmp	r2, r3
 8007d04:	d8f7      	bhi.n	8007cf6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	68ba      	ldr	r2, [r7, #8]
 8007d10:	4413      	add	r3, r2
 8007d12:	687a      	ldr	r2, [r7, #4]
 8007d14:	429a      	cmp	r2, r3
 8007d16:	d108      	bne.n	8007d2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	685a      	ldr	r2, [r3, #4]
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	685b      	ldr	r3, [r3, #4]
 8007d20:	441a      	add	r2, r3
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	68ba      	ldr	r2, [r7, #8]
 8007d34:	441a      	add	r2, r3
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	d118      	bne.n	8007d70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681a      	ldr	r2, [r3, #0]
 8007d42:	4b15      	ldr	r3, [pc, #84]	; (8007d98 <prvInsertBlockIntoFreeList+0xb0>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	429a      	cmp	r2, r3
 8007d48:	d00d      	beq.n	8007d66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	685a      	ldr	r2, [r3, #4]
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	441a      	add	r2, r3
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	681a      	ldr	r2, [r3, #0]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	601a      	str	r2, [r3, #0]
 8007d64:	e008      	b.n	8007d78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007d66:	4b0c      	ldr	r3, [pc, #48]	; (8007d98 <prvInsertBlockIntoFreeList+0xb0>)
 8007d68:	681a      	ldr	r2, [r3, #0]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	601a      	str	r2, [r3, #0]
 8007d6e:	e003      	b.n	8007d78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681a      	ldr	r2, [r3, #0]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007d78:	68fa      	ldr	r2, [r7, #12]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	429a      	cmp	r2, r3
 8007d7e:	d002      	beq.n	8007d86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	687a      	ldr	r2, [r7, #4]
 8007d84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007d86:	bf00      	nop
 8007d88:	3714      	adds	r7, #20
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d90:	4770      	bx	lr
 8007d92:	bf00      	nop
 8007d94:	200024b8 	.word	0x200024b8
 8007d98:	200024c0 	.word	0x200024c0

08007d9c <std>:
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	b510      	push	{r4, lr}
 8007da0:	4604      	mov	r4, r0
 8007da2:	e9c0 3300 	strd	r3, r3, [r0]
 8007da6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007daa:	6083      	str	r3, [r0, #8]
 8007dac:	8181      	strh	r1, [r0, #12]
 8007dae:	6643      	str	r3, [r0, #100]	; 0x64
 8007db0:	81c2      	strh	r2, [r0, #14]
 8007db2:	6183      	str	r3, [r0, #24]
 8007db4:	4619      	mov	r1, r3
 8007db6:	2208      	movs	r2, #8
 8007db8:	305c      	adds	r0, #92	; 0x5c
 8007dba:	f000 f91f 	bl	8007ffc <memset>
 8007dbe:	4b0d      	ldr	r3, [pc, #52]	; (8007df4 <std+0x58>)
 8007dc0:	6263      	str	r3, [r4, #36]	; 0x24
 8007dc2:	4b0d      	ldr	r3, [pc, #52]	; (8007df8 <std+0x5c>)
 8007dc4:	62a3      	str	r3, [r4, #40]	; 0x28
 8007dc6:	4b0d      	ldr	r3, [pc, #52]	; (8007dfc <std+0x60>)
 8007dc8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007dca:	4b0d      	ldr	r3, [pc, #52]	; (8007e00 <std+0x64>)
 8007dcc:	6323      	str	r3, [r4, #48]	; 0x30
 8007dce:	4b0d      	ldr	r3, [pc, #52]	; (8007e04 <std+0x68>)
 8007dd0:	6224      	str	r4, [r4, #32]
 8007dd2:	429c      	cmp	r4, r3
 8007dd4:	d006      	beq.n	8007de4 <std+0x48>
 8007dd6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007dda:	4294      	cmp	r4, r2
 8007ddc:	d002      	beq.n	8007de4 <std+0x48>
 8007dde:	33d0      	adds	r3, #208	; 0xd0
 8007de0:	429c      	cmp	r4, r3
 8007de2:	d105      	bne.n	8007df0 <std+0x54>
 8007de4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007de8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007dec:	f000 b98e 	b.w	800810c <__retarget_lock_init_recursive>
 8007df0:	bd10      	pop	{r4, pc}
 8007df2:	bf00      	nop
 8007df4:	08008a25 	.word	0x08008a25
 8007df8:	08008a47 	.word	0x08008a47
 8007dfc:	08008a7f 	.word	0x08008a7f
 8007e00:	08008aa3 	.word	0x08008aa3
 8007e04:	200024d8 	.word	0x200024d8

08007e08 <stdio_exit_handler>:
 8007e08:	4a02      	ldr	r2, [pc, #8]	; (8007e14 <stdio_exit_handler+0xc>)
 8007e0a:	4903      	ldr	r1, [pc, #12]	; (8007e18 <stdio_exit_handler+0x10>)
 8007e0c:	4803      	ldr	r0, [pc, #12]	; (8007e1c <stdio_exit_handler+0x14>)
 8007e0e:	f000 b869 	b.w	8007ee4 <_fwalk_sglue>
 8007e12:	bf00      	nop
 8007e14:	20000010 	.word	0x20000010
 8007e18:	080089bd 	.word	0x080089bd
 8007e1c:	2000001c 	.word	0x2000001c

08007e20 <cleanup_stdio>:
 8007e20:	6841      	ldr	r1, [r0, #4]
 8007e22:	4b0c      	ldr	r3, [pc, #48]	; (8007e54 <cleanup_stdio+0x34>)
 8007e24:	4299      	cmp	r1, r3
 8007e26:	b510      	push	{r4, lr}
 8007e28:	4604      	mov	r4, r0
 8007e2a:	d001      	beq.n	8007e30 <cleanup_stdio+0x10>
 8007e2c:	f000 fdc6 	bl	80089bc <_fflush_r>
 8007e30:	68a1      	ldr	r1, [r4, #8]
 8007e32:	4b09      	ldr	r3, [pc, #36]	; (8007e58 <cleanup_stdio+0x38>)
 8007e34:	4299      	cmp	r1, r3
 8007e36:	d002      	beq.n	8007e3e <cleanup_stdio+0x1e>
 8007e38:	4620      	mov	r0, r4
 8007e3a:	f000 fdbf 	bl	80089bc <_fflush_r>
 8007e3e:	68e1      	ldr	r1, [r4, #12]
 8007e40:	4b06      	ldr	r3, [pc, #24]	; (8007e5c <cleanup_stdio+0x3c>)
 8007e42:	4299      	cmp	r1, r3
 8007e44:	d004      	beq.n	8007e50 <cleanup_stdio+0x30>
 8007e46:	4620      	mov	r0, r4
 8007e48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e4c:	f000 bdb6 	b.w	80089bc <_fflush_r>
 8007e50:	bd10      	pop	{r4, pc}
 8007e52:	bf00      	nop
 8007e54:	200024d8 	.word	0x200024d8
 8007e58:	20002540 	.word	0x20002540
 8007e5c:	200025a8 	.word	0x200025a8

08007e60 <global_stdio_init.part.0>:
 8007e60:	b510      	push	{r4, lr}
 8007e62:	4b0b      	ldr	r3, [pc, #44]	; (8007e90 <global_stdio_init.part.0+0x30>)
 8007e64:	4c0b      	ldr	r4, [pc, #44]	; (8007e94 <global_stdio_init.part.0+0x34>)
 8007e66:	4a0c      	ldr	r2, [pc, #48]	; (8007e98 <global_stdio_init.part.0+0x38>)
 8007e68:	601a      	str	r2, [r3, #0]
 8007e6a:	4620      	mov	r0, r4
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	2104      	movs	r1, #4
 8007e70:	f7ff ff94 	bl	8007d9c <std>
 8007e74:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007e78:	2201      	movs	r2, #1
 8007e7a:	2109      	movs	r1, #9
 8007e7c:	f7ff ff8e 	bl	8007d9c <std>
 8007e80:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007e84:	2202      	movs	r2, #2
 8007e86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e8a:	2112      	movs	r1, #18
 8007e8c:	f7ff bf86 	b.w	8007d9c <std>
 8007e90:	20002610 	.word	0x20002610
 8007e94:	200024d8 	.word	0x200024d8
 8007e98:	08007e09 	.word	0x08007e09

08007e9c <__sfp_lock_acquire>:
 8007e9c:	4801      	ldr	r0, [pc, #4]	; (8007ea4 <__sfp_lock_acquire+0x8>)
 8007e9e:	f000 b936 	b.w	800810e <__retarget_lock_acquire_recursive>
 8007ea2:	bf00      	nop
 8007ea4:	20002619 	.word	0x20002619

08007ea8 <__sfp_lock_release>:
 8007ea8:	4801      	ldr	r0, [pc, #4]	; (8007eb0 <__sfp_lock_release+0x8>)
 8007eaa:	f000 b931 	b.w	8008110 <__retarget_lock_release_recursive>
 8007eae:	bf00      	nop
 8007eb0:	20002619 	.word	0x20002619

08007eb4 <__sinit>:
 8007eb4:	b510      	push	{r4, lr}
 8007eb6:	4604      	mov	r4, r0
 8007eb8:	f7ff fff0 	bl	8007e9c <__sfp_lock_acquire>
 8007ebc:	6a23      	ldr	r3, [r4, #32]
 8007ebe:	b11b      	cbz	r3, 8007ec8 <__sinit+0x14>
 8007ec0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ec4:	f7ff bff0 	b.w	8007ea8 <__sfp_lock_release>
 8007ec8:	4b04      	ldr	r3, [pc, #16]	; (8007edc <__sinit+0x28>)
 8007eca:	6223      	str	r3, [r4, #32]
 8007ecc:	4b04      	ldr	r3, [pc, #16]	; (8007ee0 <__sinit+0x2c>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d1f5      	bne.n	8007ec0 <__sinit+0xc>
 8007ed4:	f7ff ffc4 	bl	8007e60 <global_stdio_init.part.0>
 8007ed8:	e7f2      	b.n	8007ec0 <__sinit+0xc>
 8007eda:	bf00      	nop
 8007edc:	08007e21 	.word	0x08007e21
 8007ee0:	20002610 	.word	0x20002610

08007ee4 <_fwalk_sglue>:
 8007ee4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ee8:	4607      	mov	r7, r0
 8007eea:	4688      	mov	r8, r1
 8007eec:	4614      	mov	r4, r2
 8007eee:	2600      	movs	r6, #0
 8007ef0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007ef4:	f1b9 0901 	subs.w	r9, r9, #1
 8007ef8:	d505      	bpl.n	8007f06 <_fwalk_sglue+0x22>
 8007efa:	6824      	ldr	r4, [r4, #0]
 8007efc:	2c00      	cmp	r4, #0
 8007efe:	d1f7      	bne.n	8007ef0 <_fwalk_sglue+0xc>
 8007f00:	4630      	mov	r0, r6
 8007f02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f06:	89ab      	ldrh	r3, [r5, #12]
 8007f08:	2b01      	cmp	r3, #1
 8007f0a:	d907      	bls.n	8007f1c <_fwalk_sglue+0x38>
 8007f0c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f10:	3301      	adds	r3, #1
 8007f12:	d003      	beq.n	8007f1c <_fwalk_sglue+0x38>
 8007f14:	4629      	mov	r1, r5
 8007f16:	4638      	mov	r0, r7
 8007f18:	47c0      	blx	r8
 8007f1a:	4306      	orrs	r6, r0
 8007f1c:	3568      	adds	r5, #104	; 0x68
 8007f1e:	e7e9      	b.n	8007ef4 <_fwalk_sglue+0x10>

08007f20 <iprintf>:
 8007f20:	b40f      	push	{r0, r1, r2, r3}
 8007f22:	b507      	push	{r0, r1, r2, lr}
 8007f24:	4906      	ldr	r1, [pc, #24]	; (8007f40 <iprintf+0x20>)
 8007f26:	ab04      	add	r3, sp, #16
 8007f28:	6808      	ldr	r0, [r1, #0]
 8007f2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f2e:	6881      	ldr	r1, [r0, #8]
 8007f30:	9301      	str	r3, [sp, #4]
 8007f32:	f000 f973 	bl	800821c <_vfiprintf_r>
 8007f36:	b003      	add	sp, #12
 8007f38:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f3c:	b004      	add	sp, #16
 8007f3e:	4770      	bx	lr
 8007f40:	20000068 	.word	0x20000068

08007f44 <_puts_r>:
 8007f44:	6a03      	ldr	r3, [r0, #32]
 8007f46:	b570      	push	{r4, r5, r6, lr}
 8007f48:	6884      	ldr	r4, [r0, #8]
 8007f4a:	4605      	mov	r5, r0
 8007f4c:	460e      	mov	r6, r1
 8007f4e:	b90b      	cbnz	r3, 8007f54 <_puts_r+0x10>
 8007f50:	f7ff ffb0 	bl	8007eb4 <__sinit>
 8007f54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f56:	07db      	lsls	r3, r3, #31
 8007f58:	d405      	bmi.n	8007f66 <_puts_r+0x22>
 8007f5a:	89a3      	ldrh	r3, [r4, #12]
 8007f5c:	0598      	lsls	r0, r3, #22
 8007f5e:	d402      	bmi.n	8007f66 <_puts_r+0x22>
 8007f60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f62:	f000 f8d4 	bl	800810e <__retarget_lock_acquire_recursive>
 8007f66:	89a3      	ldrh	r3, [r4, #12]
 8007f68:	0719      	lsls	r1, r3, #28
 8007f6a:	d513      	bpl.n	8007f94 <_puts_r+0x50>
 8007f6c:	6923      	ldr	r3, [r4, #16]
 8007f6e:	b18b      	cbz	r3, 8007f94 <_puts_r+0x50>
 8007f70:	3e01      	subs	r6, #1
 8007f72:	68a3      	ldr	r3, [r4, #8]
 8007f74:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007f78:	3b01      	subs	r3, #1
 8007f7a:	60a3      	str	r3, [r4, #8]
 8007f7c:	b9e9      	cbnz	r1, 8007fba <_puts_r+0x76>
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	da2e      	bge.n	8007fe0 <_puts_r+0x9c>
 8007f82:	4622      	mov	r2, r4
 8007f84:	210a      	movs	r1, #10
 8007f86:	4628      	mov	r0, r5
 8007f88:	f000 fd8f 	bl	8008aaa <__swbuf_r>
 8007f8c:	3001      	adds	r0, #1
 8007f8e:	d007      	beq.n	8007fa0 <_puts_r+0x5c>
 8007f90:	250a      	movs	r5, #10
 8007f92:	e007      	b.n	8007fa4 <_puts_r+0x60>
 8007f94:	4621      	mov	r1, r4
 8007f96:	4628      	mov	r0, r5
 8007f98:	f000 fdc4 	bl	8008b24 <__swsetup_r>
 8007f9c:	2800      	cmp	r0, #0
 8007f9e:	d0e7      	beq.n	8007f70 <_puts_r+0x2c>
 8007fa0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007fa4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007fa6:	07da      	lsls	r2, r3, #31
 8007fa8:	d405      	bmi.n	8007fb6 <_puts_r+0x72>
 8007faa:	89a3      	ldrh	r3, [r4, #12]
 8007fac:	059b      	lsls	r3, r3, #22
 8007fae:	d402      	bmi.n	8007fb6 <_puts_r+0x72>
 8007fb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007fb2:	f000 f8ad 	bl	8008110 <__retarget_lock_release_recursive>
 8007fb6:	4628      	mov	r0, r5
 8007fb8:	bd70      	pop	{r4, r5, r6, pc}
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	da04      	bge.n	8007fc8 <_puts_r+0x84>
 8007fbe:	69a2      	ldr	r2, [r4, #24]
 8007fc0:	429a      	cmp	r2, r3
 8007fc2:	dc06      	bgt.n	8007fd2 <_puts_r+0x8e>
 8007fc4:	290a      	cmp	r1, #10
 8007fc6:	d004      	beq.n	8007fd2 <_puts_r+0x8e>
 8007fc8:	6823      	ldr	r3, [r4, #0]
 8007fca:	1c5a      	adds	r2, r3, #1
 8007fcc:	6022      	str	r2, [r4, #0]
 8007fce:	7019      	strb	r1, [r3, #0]
 8007fd0:	e7cf      	b.n	8007f72 <_puts_r+0x2e>
 8007fd2:	4622      	mov	r2, r4
 8007fd4:	4628      	mov	r0, r5
 8007fd6:	f000 fd68 	bl	8008aaa <__swbuf_r>
 8007fda:	3001      	adds	r0, #1
 8007fdc:	d1c9      	bne.n	8007f72 <_puts_r+0x2e>
 8007fde:	e7df      	b.n	8007fa0 <_puts_r+0x5c>
 8007fe0:	6823      	ldr	r3, [r4, #0]
 8007fe2:	250a      	movs	r5, #10
 8007fe4:	1c5a      	adds	r2, r3, #1
 8007fe6:	6022      	str	r2, [r4, #0]
 8007fe8:	701d      	strb	r5, [r3, #0]
 8007fea:	e7db      	b.n	8007fa4 <_puts_r+0x60>

08007fec <puts>:
 8007fec:	4b02      	ldr	r3, [pc, #8]	; (8007ff8 <puts+0xc>)
 8007fee:	4601      	mov	r1, r0
 8007ff0:	6818      	ldr	r0, [r3, #0]
 8007ff2:	f7ff bfa7 	b.w	8007f44 <_puts_r>
 8007ff6:	bf00      	nop
 8007ff8:	20000068 	.word	0x20000068

08007ffc <memset>:
 8007ffc:	4402      	add	r2, r0
 8007ffe:	4603      	mov	r3, r0
 8008000:	4293      	cmp	r3, r2
 8008002:	d100      	bne.n	8008006 <memset+0xa>
 8008004:	4770      	bx	lr
 8008006:	f803 1b01 	strb.w	r1, [r3], #1
 800800a:	e7f9      	b.n	8008000 <memset+0x4>

0800800c <_reclaim_reent>:
 800800c:	4b29      	ldr	r3, [pc, #164]	; (80080b4 <_reclaim_reent+0xa8>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4283      	cmp	r3, r0
 8008012:	b570      	push	{r4, r5, r6, lr}
 8008014:	4604      	mov	r4, r0
 8008016:	d04b      	beq.n	80080b0 <_reclaim_reent+0xa4>
 8008018:	69c3      	ldr	r3, [r0, #28]
 800801a:	b143      	cbz	r3, 800802e <_reclaim_reent+0x22>
 800801c:	68db      	ldr	r3, [r3, #12]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d144      	bne.n	80080ac <_reclaim_reent+0xa0>
 8008022:	69e3      	ldr	r3, [r4, #28]
 8008024:	6819      	ldr	r1, [r3, #0]
 8008026:	b111      	cbz	r1, 800802e <_reclaim_reent+0x22>
 8008028:	4620      	mov	r0, r4
 800802a:	f000 f881 	bl	8008130 <_free_r>
 800802e:	6961      	ldr	r1, [r4, #20]
 8008030:	b111      	cbz	r1, 8008038 <_reclaim_reent+0x2c>
 8008032:	4620      	mov	r0, r4
 8008034:	f000 f87c 	bl	8008130 <_free_r>
 8008038:	69e1      	ldr	r1, [r4, #28]
 800803a:	b111      	cbz	r1, 8008042 <_reclaim_reent+0x36>
 800803c:	4620      	mov	r0, r4
 800803e:	f000 f877 	bl	8008130 <_free_r>
 8008042:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008044:	b111      	cbz	r1, 800804c <_reclaim_reent+0x40>
 8008046:	4620      	mov	r0, r4
 8008048:	f000 f872 	bl	8008130 <_free_r>
 800804c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800804e:	b111      	cbz	r1, 8008056 <_reclaim_reent+0x4a>
 8008050:	4620      	mov	r0, r4
 8008052:	f000 f86d 	bl	8008130 <_free_r>
 8008056:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008058:	b111      	cbz	r1, 8008060 <_reclaim_reent+0x54>
 800805a:	4620      	mov	r0, r4
 800805c:	f000 f868 	bl	8008130 <_free_r>
 8008060:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008062:	b111      	cbz	r1, 800806a <_reclaim_reent+0x5e>
 8008064:	4620      	mov	r0, r4
 8008066:	f000 f863 	bl	8008130 <_free_r>
 800806a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800806c:	b111      	cbz	r1, 8008074 <_reclaim_reent+0x68>
 800806e:	4620      	mov	r0, r4
 8008070:	f000 f85e 	bl	8008130 <_free_r>
 8008074:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8008076:	b111      	cbz	r1, 800807e <_reclaim_reent+0x72>
 8008078:	4620      	mov	r0, r4
 800807a:	f000 f859 	bl	8008130 <_free_r>
 800807e:	6a23      	ldr	r3, [r4, #32]
 8008080:	b1b3      	cbz	r3, 80080b0 <_reclaim_reent+0xa4>
 8008082:	4620      	mov	r0, r4
 8008084:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008088:	4718      	bx	r3
 800808a:	5949      	ldr	r1, [r1, r5]
 800808c:	b941      	cbnz	r1, 80080a0 <_reclaim_reent+0x94>
 800808e:	3504      	adds	r5, #4
 8008090:	69e3      	ldr	r3, [r4, #28]
 8008092:	2d80      	cmp	r5, #128	; 0x80
 8008094:	68d9      	ldr	r1, [r3, #12]
 8008096:	d1f8      	bne.n	800808a <_reclaim_reent+0x7e>
 8008098:	4620      	mov	r0, r4
 800809a:	f000 f849 	bl	8008130 <_free_r>
 800809e:	e7c0      	b.n	8008022 <_reclaim_reent+0x16>
 80080a0:	680e      	ldr	r6, [r1, #0]
 80080a2:	4620      	mov	r0, r4
 80080a4:	f000 f844 	bl	8008130 <_free_r>
 80080a8:	4631      	mov	r1, r6
 80080aa:	e7ef      	b.n	800808c <_reclaim_reent+0x80>
 80080ac:	2500      	movs	r5, #0
 80080ae:	e7ef      	b.n	8008090 <_reclaim_reent+0x84>
 80080b0:	bd70      	pop	{r4, r5, r6, pc}
 80080b2:	bf00      	nop
 80080b4:	20000068 	.word	0x20000068

080080b8 <__errno>:
 80080b8:	4b01      	ldr	r3, [pc, #4]	; (80080c0 <__errno+0x8>)
 80080ba:	6818      	ldr	r0, [r3, #0]
 80080bc:	4770      	bx	lr
 80080be:	bf00      	nop
 80080c0:	20000068 	.word	0x20000068

080080c4 <__libc_init_array>:
 80080c4:	b570      	push	{r4, r5, r6, lr}
 80080c6:	4d0d      	ldr	r5, [pc, #52]	; (80080fc <__libc_init_array+0x38>)
 80080c8:	4c0d      	ldr	r4, [pc, #52]	; (8008100 <__libc_init_array+0x3c>)
 80080ca:	1b64      	subs	r4, r4, r5
 80080cc:	10a4      	asrs	r4, r4, #2
 80080ce:	2600      	movs	r6, #0
 80080d0:	42a6      	cmp	r6, r4
 80080d2:	d109      	bne.n	80080e8 <__libc_init_array+0x24>
 80080d4:	4d0b      	ldr	r5, [pc, #44]	; (8008104 <__libc_init_array+0x40>)
 80080d6:	4c0c      	ldr	r4, [pc, #48]	; (8008108 <__libc_init_array+0x44>)
 80080d8:	f000 fe56 	bl	8008d88 <_init>
 80080dc:	1b64      	subs	r4, r4, r5
 80080de:	10a4      	asrs	r4, r4, #2
 80080e0:	2600      	movs	r6, #0
 80080e2:	42a6      	cmp	r6, r4
 80080e4:	d105      	bne.n	80080f2 <__libc_init_array+0x2e>
 80080e6:	bd70      	pop	{r4, r5, r6, pc}
 80080e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80080ec:	4798      	blx	r3
 80080ee:	3601      	adds	r6, #1
 80080f0:	e7ee      	b.n	80080d0 <__libc_init_array+0xc>
 80080f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80080f6:	4798      	blx	r3
 80080f8:	3601      	adds	r6, #1
 80080fa:	e7f2      	b.n	80080e2 <__libc_init_array+0x1e>
 80080fc:	08008f88 	.word	0x08008f88
 8008100:	08008f88 	.word	0x08008f88
 8008104:	08008f88 	.word	0x08008f88
 8008108:	08008f8c 	.word	0x08008f8c

0800810c <__retarget_lock_init_recursive>:
 800810c:	4770      	bx	lr

0800810e <__retarget_lock_acquire_recursive>:
 800810e:	4770      	bx	lr

08008110 <__retarget_lock_release_recursive>:
 8008110:	4770      	bx	lr

08008112 <memcpy>:
 8008112:	440a      	add	r2, r1
 8008114:	4291      	cmp	r1, r2
 8008116:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800811a:	d100      	bne.n	800811e <memcpy+0xc>
 800811c:	4770      	bx	lr
 800811e:	b510      	push	{r4, lr}
 8008120:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008124:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008128:	4291      	cmp	r1, r2
 800812a:	d1f9      	bne.n	8008120 <memcpy+0xe>
 800812c:	bd10      	pop	{r4, pc}
	...

08008130 <_free_r>:
 8008130:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008132:	2900      	cmp	r1, #0
 8008134:	d044      	beq.n	80081c0 <_free_r+0x90>
 8008136:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800813a:	9001      	str	r0, [sp, #4]
 800813c:	2b00      	cmp	r3, #0
 800813e:	f1a1 0404 	sub.w	r4, r1, #4
 8008142:	bfb8      	it	lt
 8008144:	18e4      	addlt	r4, r4, r3
 8008146:	f000 fc61 	bl	8008a0c <__malloc_lock>
 800814a:	4a1e      	ldr	r2, [pc, #120]	; (80081c4 <_free_r+0x94>)
 800814c:	9801      	ldr	r0, [sp, #4]
 800814e:	6813      	ldr	r3, [r2, #0]
 8008150:	b933      	cbnz	r3, 8008160 <_free_r+0x30>
 8008152:	6063      	str	r3, [r4, #4]
 8008154:	6014      	str	r4, [r2, #0]
 8008156:	b003      	add	sp, #12
 8008158:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800815c:	f000 bc5c 	b.w	8008a18 <__malloc_unlock>
 8008160:	42a3      	cmp	r3, r4
 8008162:	d908      	bls.n	8008176 <_free_r+0x46>
 8008164:	6825      	ldr	r5, [r4, #0]
 8008166:	1961      	adds	r1, r4, r5
 8008168:	428b      	cmp	r3, r1
 800816a:	bf01      	itttt	eq
 800816c:	6819      	ldreq	r1, [r3, #0]
 800816e:	685b      	ldreq	r3, [r3, #4]
 8008170:	1949      	addeq	r1, r1, r5
 8008172:	6021      	streq	r1, [r4, #0]
 8008174:	e7ed      	b.n	8008152 <_free_r+0x22>
 8008176:	461a      	mov	r2, r3
 8008178:	685b      	ldr	r3, [r3, #4]
 800817a:	b10b      	cbz	r3, 8008180 <_free_r+0x50>
 800817c:	42a3      	cmp	r3, r4
 800817e:	d9fa      	bls.n	8008176 <_free_r+0x46>
 8008180:	6811      	ldr	r1, [r2, #0]
 8008182:	1855      	adds	r5, r2, r1
 8008184:	42a5      	cmp	r5, r4
 8008186:	d10b      	bne.n	80081a0 <_free_r+0x70>
 8008188:	6824      	ldr	r4, [r4, #0]
 800818a:	4421      	add	r1, r4
 800818c:	1854      	adds	r4, r2, r1
 800818e:	42a3      	cmp	r3, r4
 8008190:	6011      	str	r1, [r2, #0]
 8008192:	d1e0      	bne.n	8008156 <_free_r+0x26>
 8008194:	681c      	ldr	r4, [r3, #0]
 8008196:	685b      	ldr	r3, [r3, #4]
 8008198:	6053      	str	r3, [r2, #4]
 800819a:	440c      	add	r4, r1
 800819c:	6014      	str	r4, [r2, #0]
 800819e:	e7da      	b.n	8008156 <_free_r+0x26>
 80081a0:	d902      	bls.n	80081a8 <_free_r+0x78>
 80081a2:	230c      	movs	r3, #12
 80081a4:	6003      	str	r3, [r0, #0]
 80081a6:	e7d6      	b.n	8008156 <_free_r+0x26>
 80081a8:	6825      	ldr	r5, [r4, #0]
 80081aa:	1961      	adds	r1, r4, r5
 80081ac:	428b      	cmp	r3, r1
 80081ae:	bf04      	itt	eq
 80081b0:	6819      	ldreq	r1, [r3, #0]
 80081b2:	685b      	ldreq	r3, [r3, #4]
 80081b4:	6063      	str	r3, [r4, #4]
 80081b6:	bf04      	itt	eq
 80081b8:	1949      	addeq	r1, r1, r5
 80081ba:	6021      	streq	r1, [r4, #0]
 80081bc:	6054      	str	r4, [r2, #4]
 80081be:	e7ca      	b.n	8008156 <_free_r+0x26>
 80081c0:	b003      	add	sp, #12
 80081c2:	bd30      	pop	{r4, r5, pc}
 80081c4:	2000261c 	.word	0x2000261c

080081c8 <__sfputc_r>:
 80081c8:	6893      	ldr	r3, [r2, #8]
 80081ca:	3b01      	subs	r3, #1
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	b410      	push	{r4}
 80081d0:	6093      	str	r3, [r2, #8]
 80081d2:	da08      	bge.n	80081e6 <__sfputc_r+0x1e>
 80081d4:	6994      	ldr	r4, [r2, #24]
 80081d6:	42a3      	cmp	r3, r4
 80081d8:	db01      	blt.n	80081de <__sfputc_r+0x16>
 80081da:	290a      	cmp	r1, #10
 80081dc:	d103      	bne.n	80081e6 <__sfputc_r+0x1e>
 80081de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80081e2:	f000 bc62 	b.w	8008aaa <__swbuf_r>
 80081e6:	6813      	ldr	r3, [r2, #0]
 80081e8:	1c58      	adds	r0, r3, #1
 80081ea:	6010      	str	r0, [r2, #0]
 80081ec:	7019      	strb	r1, [r3, #0]
 80081ee:	4608      	mov	r0, r1
 80081f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80081f4:	4770      	bx	lr

080081f6 <__sfputs_r>:
 80081f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081f8:	4606      	mov	r6, r0
 80081fa:	460f      	mov	r7, r1
 80081fc:	4614      	mov	r4, r2
 80081fe:	18d5      	adds	r5, r2, r3
 8008200:	42ac      	cmp	r4, r5
 8008202:	d101      	bne.n	8008208 <__sfputs_r+0x12>
 8008204:	2000      	movs	r0, #0
 8008206:	e007      	b.n	8008218 <__sfputs_r+0x22>
 8008208:	f814 1b01 	ldrb.w	r1, [r4], #1
 800820c:	463a      	mov	r2, r7
 800820e:	4630      	mov	r0, r6
 8008210:	f7ff ffda 	bl	80081c8 <__sfputc_r>
 8008214:	1c43      	adds	r3, r0, #1
 8008216:	d1f3      	bne.n	8008200 <__sfputs_r+0xa>
 8008218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800821c <_vfiprintf_r>:
 800821c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008220:	460d      	mov	r5, r1
 8008222:	b09d      	sub	sp, #116	; 0x74
 8008224:	4614      	mov	r4, r2
 8008226:	4698      	mov	r8, r3
 8008228:	4606      	mov	r6, r0
 800822a:	b118      	cbz	r0, 8008234 <_vfiprintf_r+0x18>
 800822c:	6a03      	ldr	r3, [r0, #32]
 800822e:	b90b      	cbnz	r3, 8008234 <_vfiprintf_r+0x18>
 8008230:	f7ff fe40 	bl	8007eb4 <__sinit>
 8008234:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008236:	07d9      	lsls	r1, r3, #31
 8008238:	d405      	bmi.n	8008246 <_vfiprintf_r+0x2a>
 800823a:	89ab      	ldrh	r3, [r5, #12]
 800823c:	059a      	lsls	r2, r3, #22
 800823e:	d402      	bmi.n	8008246 <_vfiprintf_r+0x2a>
 8008240:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008242:	f7ff ff64 	bl	800810e <__retarget_lock_acquire_recursive>
 8008246:	89ab      	ldrh	r3, [r5, #12]
 8008248:	071b      	lsls	r3, r3, #28
 800824a:	d501      	bpl.n	8008250 <_vfiprintf_r+0x34>
 800824c:	692b      	ldr	r3, [r5, #16]
 800824e:	b99b      	cbnz	r3, 8008278 <_vfiprintf_r+0x5c>
 8008250:	4629      	mov	r1, r5
 8008252:	4630      	mov	r0, r6
 8008254:	f000 fc66 	bl	8008b24 <__swsetup_r>
 8008258:	b170      	cbz	r0, 8008278 <_vfiprintf_r+0x5c>
 800825a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800825c:	07dc      	lsls	r4, r3, #31
 800825e:	d504      	bpl.n	800826a <_vfiprintf_r+0x4e>
 8008260:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008264:	b01d      	add	sp, #116	; 0x74
 8008266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800826a:	89ab      	ldrh	r3, [r5, #12]
 800826c:	0598      	lsls	r0, r3, #22
 800826e:	d4f7      	bmi.n	8008260 <_vfiprintf_r+0x44>
 8008270:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008272:	f7ff ff4d 	bl	8008110 <__retarget_lock_release_recursive>
 8008276:	e7f3      	b.n	8008260 <_vfiprintf_r+0x44>
 8008278:	2300      	movs	r3, #0
 800827a:	9309      	str	r3, [sp, #36]	; 0x24
 800827c:	2320      	movs	r3, #32
 800827e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008282:	f8cd 800c 	str.w	r8, [sp, #12]
 8008286:	2330      	movs	r3, #48	; 0x30
 8008288:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800843c <_vfiprintf_r+0x220>
 800828c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008290:	f04f 0901 	mov.w	r9, #1
 8008294:	4623      	mov	r3, r4
 8008296:	469a      	mov	sl, r3
 8008298:	f813 2b01 	ldrb.w	r2, [r3], #1
 800829c:	b10a      	cbz	r2, 80082a2 <_vfiprintf_r+0x86>
 800829e:	2a25      	cmp	r2, #37	; 0x25
 80082a0:	d1f9      	bne.n	8008296 <_vfiprintf_r+0x7a>
 80082a2:	ebba 0b04 	subs.w	fp, sl, r4
 80082a6:	d00b      	beq.n	80082c0 <_vfiprintf_r+0xa4>
 80082a8:	465b      	mov	r3, fp
 80082aa:	4622      	mov	r2, r4
 80082ac:	4629      	mov	r1, r5
 80082ae:	4630      	mov	r0, r6
 80082b0:	f7ff ffa1 	bl	80081f6 <__sfputs_r>
 80082b4:	3001      	adds	r0, #1
 80082b6:	f000 80a9 	beq.w	800840c <_vfiprintf_r+0x1f0>
 80082ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80082bc:	445a      	add	r2, fp
 80082be:	9209      	str	r2, [sp, #36]	; 0x24
 80082c0:	f89a 3000 	ldrb.w	r3, [sl]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	f000 80a1 	beq.w	800840c <_vfiprintf_r+0x1f0>
 80082ca:	2300      	movs	r3, #0
 80082cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80082d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80082d4:	f10a 0a01 	add.w	sl, sl, #1
 80082d8:	9304      	str	r3, [sp, #16]
 80082da:	9307      	str	r3, [sp, #28]
 80082dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80082e0:	931a      	str	r3, [sp, #104]	; 0x68
 80082e2:	4654      	mov	r4, sl
 80082e4:	2205      	movs	r2, #5
 80082e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082ea:	4854      	ldr	r0, [pc, #336]	; (800843c <_vfiprintf_r+0x220>)
 80082ec:	f7f7 ff70 	bl	80001d0 <memchr>
 80082f0:	9a04      	ldr	r2, [sp, #16]
 80082f2:	b9d8      	cbnz	r0, 800832c <_vfiprintf_r+0x110>
 80082f4:	06d1      	lsls	r1, r2, #27
 80082f6:	bf44      	itt	mi
 80082f8:	2320      	movmi	r3, #32
 80082fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082fe:	0713      	lsls	r3, r2, #28
 8008300:	bf44      	itt	mi
 8008302:	232b      	movmi	r3, #43	; 0x2b
 8008304:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008308:	f89a 3000 	ldrb.w	r3, [sl]
 800830c:	2b2a      	cmp	r3, #42	; 0x2a
 800830e:	d015      	beq.n	800833c <_vfiprintf_r+0x120>
 8008310:	9a07      	ldr	r2, [sp, #28]
 8008312:	4654      	mov	r4, sl
 8008314:	2000      	movs	r0, #0
 8008316:	f04f 0c0a 	mov.w	ip, #10
 800831a:	4621      	mov	r1, r4
 800831c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008320:	3b30      	subs	r3, #48	; 0x30
 8008322:	2b09      	cmp	r3, #9
 8008324:	d94d      	bls.n	80083c2 <_vfiprintf_r+0x1a6>
 8008326:	b1b0      	cbz	r0, 8008356 <_vfiprintf_r+0x13a>
 8008328:	9207      	str	r2, [sp, #28]
 800832a:	e014      	b.n	8008356 <_vfiprintf_r+0x13a>
 800832c:	eba0 0308 	sub.w	r3, r0, r8
 8008330:	fa09 f303 	lsl.w	r3, r9, r3
 8008334:	4313      	orrs	r3, r2
 8008336:	9304      	str	r3, [sp, #16]
 8008338:	46a2      	mov	sl, r4
 800833a:	e7d2      	b.n	80082e2 <_vfiprintf_r+0xc6>
 800833c:	9b03      	ldr	r3, [sp, #12]
 800833e:	1d19      	adds	r1, r3, #4
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	9103      	str	r1, [sp, #12]
 8008344:	2b00      	cmp	r3, #0
 8008346:	bfbb      	ittet	lt
 8008348:	425b      	neglt	r3, r3
 800834a:	f042 0202 	orrlt.w	r2, r2, #2
 800834e:	9307      	strge	r3, [sp, #28]
 8008350:	9307      	strlt	r3, [sp, #28]
 8008352:	bfb8      	it	lt
 8008354:	9204      	strlt	r2, [sp, #16]
 8008356:	7823      	ldrb	r3, [r4, #0]
 8008358:	2b2e      	cmp	r3, #46	; 0x2e
 800835a:	d10c      	bne.n	8008376 <_vfiprintf_r+0x15a>
 800835c:	7863      	ldrb	r3, [r4, #1]
 800835e:	2b2a      	cmp	r3, #42	; 0x2a
 8008360:	d134      	bne.n	80083cc <_vfiprintf_r+0x1b0>
 8008362:	9b03      	ldr	r3, [sp, #12]
 8008364:	1d1a      	adds	r2, r3, #4
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	9203      	str	r2, [sp, #12]
 800836a:	2b00      	cmp	r3, #0
 800836c:	bfb8      	it	lt
 800836e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008372:	3402      	adds	r4, #2
 8008374:	9305      	str	r3, [sp, #20]
 8008376:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800844c <_vfiprintf_r+0x230>
 800837a:	7821      	ldrb	r1, [r4, #0]
 800837c:	2203      	movs	r2, #3
 800837e:	4650      	mov	r0, sl
 8008380:	f7f7 ff26 	bl	80001d0 <memchr>
 8008384:	b138      	cbz	r0, 8008396 <_vfiprintf_r+0x17a>
 8008386:	9b04      	ldr	r3, [sp, #16]
 8008388:	eba0 000a 	sub.w	r0, r0, sl
 800838c:	2240      	movs	r2, #64	; 0x40
 800838e:	4082      	lsls	r2, r0
 8008390:	4313      	orrs	r3, r2
 8008392:	3401      	adds	r4, #1
 8008394:	9304      	str	r3, [sp, #16]
 8008396:	f814 1b01 	ldrb.w	r1, [r4], #1
 800839a:	4829      	ldr	r0, [pc, #164]	; (8008440 <_vfiprintf_r+0x224>)
 800839c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80083a0:	2206      	movs	r2, #6
 80083a2:	f7f7 ff15 	bl	80001d0 <memchr>
 80083a6:	2800      	cmp	r0, #0
 80083a8:	d03f      	beq.n	800842a <_vfiprintf_r+0x20e>
 80083aa:	4b26      	ldr	r3, [pc, #152]	; (8008444 <_vfiprintf_r+0x228>)
 80083ac:	bb1b      	cbnz	r3, 80083f6 <_vfiprintf_r+0x1da>
 80083ae:	9b03      	ldr	r3, [sp, #12]
 80083b0:	3307      	adds	r3, #7
 80083b2:	f023 0307 	bic.w	r3, r3, #7
 80083b6:	3308      	adds	r3, #8
 80083b8:	9303      	str	r3, [sp, #12]
 80083ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083bc:	443b      	add	r3, r7
 80083be:	9309      	str	r3, [sp, #36]	; 0x24
 80083c0:	e768      	b.n	8008294 <_vfiprintf_r+0x78>
 80083c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80083c6:	460c      	mov	r4, r1
 80083c8:	2001      	movs	r0, #1
 80083ca:	e7a6      	b.n	800831a <_vfiprintf_r+0xfe>
 80083cc:	2300      	movs	r3, #0
 80083ce:	3401      	adds	r4, #1
 80083d0:	9305      	str	r3, [sp, #20]
 80083d2:	4619      	mov	r1, r3
 80083d4:	f04f 0c0a 	mov.w	ip, #10
 80083d8:	4620      	mov	r0, r4
 80083da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083de:	3a30      	subs	r2, #48	; 0x30
 80083e0:	2a09      	cmp	r2, #9
 80083e2:	d903      	bls.n	80083ec <_vfiprintf_r+0x1d0>
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d0c6      	beq.n	8008376 <_vfiprintf_r+0x15a>
 80083e8:	9105      	str	r1, [sp, #20]
 80083ea:	e7c4      	b.n	8008376 <_vfiprintf_r+0x15a>
 80083ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80083f0:	4604      	mov	r4, r0
 80083f2:	2301      	movs	r3, #1
 80083f4:	e7f0      	b.n	80083d8 <_vfiprintf_r+0x1bc>
 80083f6:	ab03      	add	r3, sp, #12
 80083f8:	9300      	str	r3, [sp, #0]
 80083fa:	462a      	mov	r2, r5
 80083fc:	4b12      	ldr	r3, [pc, #72]	; (8008448 <_vfiprintf_r+0x22c>)
 80083fe:	a904      	add	r1, sp, #16
 8008400:	4630      	mov	r0, r6
 8008402:	f3af 8000 	nop.w
 8008406:	4607      	mov	r7, r0
 8008408:	1c78      	adds	r0, r7, #1
 800840a:	d1d6      	bne.n	80083ba <_vfiprintf_r+0x19e>
 800840c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800840e:	07d9      	lsls	r1, r3, #31
 8008410:	d405      	bmi.n	800841e <_vfiprintf_r+0x202>
 8008412:	89ab      	ldrh	r3, [r5, #12]
 8008414:	059a      	lsls	r2, r3, #22
 8008416:	d402      	bmi.n	800841e <_vfiprintf_r+0x202>
 8008418:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800841a:	f7ff fe79 	bl	8008110 <__retarget_lock_release_recursive>
 800841e:	89ab      	ldrh	r3, [r5, #12]
 8008420:	065b      	lsls	r3, r3, #25
 8008422:	f53f af1d 	bmi.w	8008260 <_vfiprintf_r+0x44>
 8008426:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008428:	e71c      	b.n	8008264 <_vfiprintf_r+0x48>
 800842a:	ab03      	add	r3, sp, #12
 800842c:	9300      	str	r3, [sp, #0]
 800842e:	462a      	mov	r2, r5
 8008430:	4b05      	ldr	r3, [pc, #20]	; (8008448 <_vfiprintf_r+0x22c>)
 8008432:	a904      	add	r1, sp, #16
 8008434:	4630      	mov	r0, r6
 8008436:	f000 f919 	bl	800866c <_printf_i>
 800843a:	e7e4      	b.n	8008406 <_vfiprintf_r+0x1ea>
 800843c:	08008f4c 	.word	0x08008f4c
 8008440:	08008f56 	.word	0x08008f56
 8008444:	00000000 	.word	0x00000000
 8008448:	080081f7 	.word	0x080081f7
 800844c:	08008f52 	.word	0x08008f52

08008450 <sbrk_aligned>:
 8008450:	b570      	push	{r4, r5, r6, lr}
 8008452:	4e0e      	ldr	r6, [pc, #56]	; (800848c <sbrk_aligned+0x3c>)
 8008454:	460c      	mov	r4, r1
 8008456:	6831      	ldr	r1, [r6, #0]
 8008458:	4605      	mov	r5, r0
 800845a:	b911      	cbnz	r1, 8008462 <sbrk_aligned+0x12>
 800845c:	f000 fc72 	bl	8008d44 <_sbrk_r>
 8008460:	6030      	str	r0, [r6, #0]
 8008462:	4621      	mov	r1, r4
 8008464:	4628      	mov	r0, r5
 8008466:	f000 fc6d 	bl	8008d44 <_sbrk_r>
 800846a:	1c43      	adds	r3, r0, #1
 800846c:	d00a      	beq.n	8008484 <sbrk_aligned+0x34>
 800846e:	1cc4      	adds	r4, r0, #3
 8008470:	f024 0403 	bic.w	r4, r4, #3
 8008474:	42a0      	cmp	r0, r4
 8008476:	d007      	beq.n	8008488 <sbrk_aligned+0x38>
 8008478:	1a21      	subs	r1, r4, r0
 800847a:	4628      	mov	r0, r5
 800847c:	f000 fc62 	bl	8008d44 <_sbrk_r>
 8008480:	3001      	adds	r0, #1
 8008482:	d101      	bne.n	8008488 <sbrk_aligned+0x38>
 8008484:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008488:	4620      	mov	r0, r4
 800848a:	bd70      	pop	{r4, r5, r6, pc}
 800848c:	20002620 	.word	0x20002620

08008490 <_malloc_r>:
 8008490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008494:	1ccd      	adds	r5, r1, #3
 8008496:	f025 0503 	bic.w	r5, r5, #3
 800849a:	3508      	adds	r5, #8
 800849c:	2d0c      	cmp	r5, #12
 800849e:	bf38      	it	cc
 80084a0:	250c      	movcc	r5, #12
 80084a2:	2d00      	cmp	r5, #0
 80084a4:	4607      	mov	r7, r0
 80084a6:	db01      	blt.n	80084ac <_malloc_r+0x1c>
 80084a8:	42a9      	cmp	r1, r5
 80084aa:	d905      	bls.n	80084b8 <_malloc_r+0x28>
 80084ac:	230c      	movs	r3, #12
 80084ae:	603b      	str	r3, [r7, #0]
 80084b0:	2600      	movs	r6, #0
 80084b2:	4630      	mov	r0, r6
 80084b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084b8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800858c <_malloc_r+0xfc>
 80084bc:	f000 faa6 	bl	8008a0c <__malloc_lock>
 80084c0:	f8d8 3000 	ldr.w	r3, [r8]
 80084c4:	461c      	mov	r4, r3
 80084c6:	bb5c      	cbnz	r4, 8008520 <_malloc_r+0x90>
 80084c8:	4629      	mov	r1, r5
 80084ca:	4638      	mov	r0, r7
 80084cc:	f7ff ffc0 	bl	8008450 <sbrk_aligned>
 80084d0:	1c43      	adds	r3, r0, #1
 80084d2:	4604      	mov	r4, r0
 80084d4:	d155      	bne.n	8008582 <_malloc_r+0xf2>
 80084d6:	f8d8 4000 	ldr.w	r4, [r8]
 80084da:	4626      	mov	r6, r4
 80084dc:	2e00      	cmp	r6, #0
 80084de:	d145      	bne.n	800856c <_malloc_r+0xdc>
 80084e0:	2c00      	cmp	r4, #0
 80084e2:	d048      	beq.n	8008576 <_malloc_r+0xe6>
 80084e4:	6823      	ldr	r3, [r4, #0]
 80084e6:	4631      	mov	r1, r6
 80084e8:	4638      	mov	r0, r7
 80084ea:	eb04 0903 	add.w	r9, r4, r3
 80084ee:	f000 fc29 	bl	8008d44 <_sbrk_r>
 80084f2:	4581      	cmp	r9, r0
 80084f4:	d13f      	bne.n	8008576 <_malloc_r+0xe6>
 80084f6:	6821      	ldr	r1, [r4, #0]
 80084f8:	1a6d      	subs	r5, r5, r1
 80084fa:	4629      	mov	r1, r5
 80084fc:	4638      	mov	r0, r7
 80084fe:	f7ff ffa7 	bl	8008450 <sbrk_aligned>
 8008502:	3001      	adds	r0, #1
 8008504:	d037      	beq.n	8008576 <_malloc_r+0xe6>
 8008506:	6823      	ldr	r3, [r4, #0]
 8008508:	442b      	add	r3, r5
 800850a:	6023      	str	r3, [r4, #0]
 800850c:	f8d8 3000 	ldr.w	r3, [r8]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d038      	beq.n	8008586 <_malloc_r+0xf6>
 8008514:	685a      	ldr	r2, [r3, #4]
 8008516:	42a2      	cmp	r2, r4
 8008518:	d12b      	bne.n	8008572 <_malloc_r+0xe2>
 800851a:	2200      	movs	r2, #0
 800851c:	605a      	str	r2, [r3, #4]
 800851e:	e00f      	b.n	8008540 <_malloc_r+0xb0>
 8008520:	6822      	ldr	r2, [r4, #0]
 8008522:	1b52      	subs	r2, r2, r5
 8008524:	d41f      	bmi.n	8008566 <_malloc_r+0xd6>
 8008526:	2a0b      	cmp	r2, #11
 8008528:	d917      	bls.n	800855a <_malloc_r+0xca>
 800852a:	1961      	adds	r1, r4, r5
 800852c:	42a3      	cmp	r3, r4
 800852e:	6025      	str	r5, [r4, #0]
 8008530:	bf18      	it	ne
 8008532:	6059      	strne	r1, [r3, #4]
 8008534:	6863      	ldr	r3, [r4, #4]
 8008536:	bf08      	it	eq
 8008538:	f8c8 1000 	streq.w	r1, [r8]
 800853c:	5162      	str	r2, [r4, r5]
 800853e:	604b      	str	r3, [r1, #4]
 8008540:	4638      	mov	r0, r7
 8008542:	f104 060b 	add.w	r6, r4, #11
 8008546:	f000 fa67 	bl	8008a18 <__malloc_unlock>
 800854a:	f026 0607 	bic.w	r6, r6, #7
 800854e:	1d23      	adds	r3, r4, #4
 8008550:	1af2      	subs	r2, r6, r3
 8008552:	d0ae      	beq.n	80084b2 <_malloc_r+0x22>
 8008554:	1b9b      	subs	r3, r3, r6
 8008556:	50a3      	str	r3, [r4, r2]
 8008558:	e7ab      	b.n	80084b2 <_malloc_r+0x22>
 800855a:	42a3      	cmp	r3, r4
 800855c:	6862      	ldr	r2, [r4, #4]
 800855e:	d1dd      	bne.n	800851c <_malloc_r+0x8c>
 8008560:	f8c8 2000 	str.w	r2, [r8]
 8008564:	e7ec      	b.n	8008540 <_malloc_r+0xb0>
 8008566:	4623      	mov	r3, r4
 8008568:	6864      	ldr	r4, [r4, #4]
 800856a:	e7ac      	b.n	80084c6 <_malloc_r+0x36>
 800856c:	4634      	mov	r4, r6
 800856e:	6876      	ldr	r6, [r6, #4]
 8008570:	e7b4      	b.n	80084dc <_malloc_r+0x4c>
 8008572:	4613      	mov	r3, r2
 8008574:	e7cc      	b.n	8008510 <_malloc_r+0x80>
 8008576:	230c      	movs	r3, #12
 8008578:	603b      	str	r3, [r7, #0]
 800857a:	4638      	mov	r0, r7
 800857c:	f000 fa4c 	bl	8008a18 <__malloc_unlock>
 8008580:	e797      	b.n	80084b2 <_malloc_r+0x22>
 8008582:	6025      	str	r5, [r4, #0]
 8008584:	e7dc      	b.n	8008540 <_malloc_r+0xb0>
 8008586:	605b      	str	r3, [r3, #4]
 8008588:	deff      	udf	#255	; 0xff
 800858a:	bf00      	nop
 800858c:	2000261c 	.word	0x2000261c

08008590 <_printf_common>:
 8008590:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008594:	4616      	mov	r6, r2
 8008596:	4699      	mov	r9, r3
 8008598:	688a      	ldr	r2, [r1, #8]
 800859a:	690b      	ldr	r3, [r1, #16]
 800859c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80085a0:	4293      	cmp	r3, r2
 80085a2:	bfb8      	it	lt
 80085a4:	4613      	movlt	r3, r2
 80085a6:	6033      	str	r3, [r6, #0]
 80085a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80085ac:	4607      	mov	r7, r0
 80085ae:	460c      	mov	r4, r1
 80085b0:	b10a      	cbz	r2, 80085b6 <_printf_common+0x26>
 80085b2:	3301      	adds	r3, #1
 80085b4:	6033      	str	r3, [r6, #0]
 80085b6:	6823      	ldr	r3, [r4, #0]
 80085b8:	0699      	lsls	r1, r3, #26
 80085ba:	bf42      	ittt	mi
 80085bc:	6833      	ldrmi	r3, [r6, #0]
 80085be:	3302      	addmi	r3, #2
 80085c0:	6033      	strmi	r3, [r6, #0]
 80085c2:	6825      	ldr	r5, [r4, #0]
 80085c4:	f015 0506 	ands.w	r5, r5, #6
 80085c8:	d106      	bne.n	80085d8 <_printf_common+0x48>
 80085ca:	f104 0a19 	add.w	sl, r4, #25
 80085ce:	68e3      	ldr	r3, [r4, #12]
 80085d0:	6832      	ldr	r2, [r6, #0]
 80085d2:	1a9b      	subs	r3, r3, r2
 80085d4:	42ab      	cmp	r3, r5
 80085d6:	dc26      	bgt.n	8008626 <_printf_common+0x96>
 80085d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80085dc:	1e13      	subs	r3, r2, #0
 80085de:	6822      	ldr	r2, [r4, #0]
 80085e0:	bf18      	it	ne
 80085e2:	2301      	movne	r3, #1
 80085e4:	0692      	lsls	r2, r2, #26
 80085e6:	d42b      	bmi.n	8008640 <_printf_common+0xb0>
 80085e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80085ec:	4649      	mov	r1, r9
 80085ee:	4638      	mov	r0, r7
 80085f0:	47c0      	blx	r8
 80085f2:	3001      	adds	r0, #1
 80085f4:	d01e      	beq.n	8008634 <_printf_common+0xa4>
 80085f6:	6823      	ldr	r3, [r4, #0]
 80085f8:	6922      	ldr	r2, [r4, #16]
 80085fa:	f003 0306 	and.w	r3, r3, #6
 80085fe:	2b04      	cmp	r3, #4
 8008600:	bf02      	ittt	eq
 8008602:	68e5      	ldreq	r5, [r4, #12]
 8008604:	6833      	ldreq	r3, [r6, #0]
 8008606:	1aed      	subeq	r5, r5, r3
 8008608:	68a3      	ldr	r3, [r4, #8]
 800860a:	bf0c      	ite	eq
 800860c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008610:	2500      	movne	r5, #0
 8008612:	4293      	cmp	r3, r2
 8008614:	bfc4      	itt	gt
 8008616:	1a9b      	subgt	r3, r3, r2
 8008618:	18ed      	addgt	r5, r5, r3
 800861a:	2600      	movs	r6, #0
 800861c:	341a      	adds	r4, #26
 800861e:	42b5      	cmp	r5, r6
 8008620:	d11a      	bne.n	8008658 <_printf_common+0xc8>
 8008622:	2000      	movs	r0, #0
 8008624:	e008      	b.n	8008638 <_printf_common+0xa8>
 8008626:	2301      	movs	r3, #1
 8008628:	4652      	mov	r2, sl
 800862a:	4649      	mov	r1, r9
 800862c:	4638      	mov	r0, r7
 800862e:	47c0      	blx	r8
 8008630:	3001      	adds	r0, #1
 8008632:	d103      	bne.n	800863c <_printf_common+0xac>
 8008634:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800863c:	3501      	adds	r5, #1
 800863e:	e7c6      	b.n	80085ce <_printf_common+0x3e>
 8008640:	18e1      	adds	r1, r4, r3
 8008642:	1c5a      	adds	r2, r3, #1
 8008644:	2030      	movs	r0, #48	; 0x30
 8008646:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800864a:	4422      	add	r2, r4
 800864c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008650:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008654:	3302      	adds	r3, #2
 8008656:	e7c7      	b.n	80085e8 <_printf_common+0x58>
 8008658:	2301      	movs	r3, #1
 800865a:	4622      	mov	r2, r4
 800865c:	4649      	mov	r1, r9
 800865e:	4638      	mov	r0, r7
 8008660:	47c0      	blx	r8
 8008662:	3001      	adds	r0, #1
 8008664:	d0e6      	beq.n	8008634 <_printf_common+0xa4>
 8008666:	3601      	adds	r6, #1
 8008668:	e7d9      	b.n	800861e <_printf_common+0x8e>
	...

0800866c <_printf_i>:
 800866c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008670:	7e0f      	ldrb	r7, [r1, #24]
 8008672:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008674:	2f78      	cmp	r7, #120	; 0x78
 8008676:	4691      	mov	r9, r2
 8008678:	4680      	mov	r8, r0
 800867a:	460c      	mov	r4, r1
 800867c:	469a      	mov	sl, r3
 800867e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008682:	d807      	bhi.n	8008694 <_printf_i+0x28>
 8008684:	2f62      	cmp	r7, #98	; 0x62
 8008686:	d80a      	bhi.n	800869e <_printf_i+0x32>
 8008688:	2f00      	cmp	r7, #0
 800868a:	f000 80d4 	beq.w	8008836 <_printf_i+0x1ca>
 800868e:	2f58      	cmp	r7, #88	; 0x58
 8008690:	f000 80c0 	beq.w	8008814 <_printf_i+0x1a8>
 8008694:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008698:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800869c:	e03a      	b.n	8008714 <_printf_i+0xa8>
 800869e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80086a2:	2b15      	cmp	r3, #21
 80086a4:	d8f6      	bhi.n	8008694 <_printf_i+0x28>
 80086a6:	a101      	add	r1, pc, #4	; (adr r1, 80086ac <_printf_i+0x40>)
 80086a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80086ac:	08008705 	.word	0x08008705
 80086b0:	08008719 	.word	0x08008719
 80086b4:	08008695 	.word	0x08008695
 80086b8:	08008695 	.word	0x08008695
 80086bc:	08008695 	.word	0x08008695
 80086c0:	08008695 	.word	0x08008695
 80086c4:	08008719 	.word	0x08008719
 80086c8:	08008695 	.word	0x08008695
 80086cc:	08008695 	.word	0x08008695
 80086d0:	08008695 	.word	0x08008695
 80086d4:	08008695 	.word	0x08008695
 80086d8:	0800881d 	.word	0x0800881d
 80086dc:	08008745 	.word	0x08008745
 80086e0:	080087d7 	.word	0x080087d7
 80086e4:	08008695 	.word	0x08008695
 80086e8:	08008695 	.word	0x08008695
 80086ec:	0800883f 	.word	0x0800883f
 80086f0:	08008695 	.word	0x08008695
 80086f4:	08008745 	.word	0x08008745
 80086f8:	08008695 	.word	0x08008695
 80086fc:	08008695 	.word	0x08008695
 8008700:	080087df 	.word	0x080087df
 8008704:	682b      	ldr	r3, [r5, #0]
 8008706:	1d1a      	adds	r2, r3, #4
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	602a      	str	r2, [r5, #0]
 800870c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008710:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008714:	2301      	movs	r3, #1
 8008716:	e09f      	b.n	8008858 <_printf_i+0x1ec>
 8008718:	6820      	ldr	r0, [r4, #0]
 800871a:	682b      	ldr	r3, [r5, #0]
 800871c:	0607      	lsls	r7, r0, #24
 800871e:	f103 0104 	add.w	r1, r3, #4
 8008722:	6029      	str	r1, [r5, #0]
 8008724:	d501      	bpl.n	800872a <_printf_i+0xbe>
 8008726:	681e      	ldr	r6, [r3, #0]
 8008728:	e003      	b.n	8008732 <_printf_i+0xc6>
 800872a:	0646      	lsls	r6, r0, #25
 800872c:	d5fb      	bpl.n	8008726 <_printf_i+0xba>
 800872e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008732:	2e00      	cmp	r6, #0
 8008734:	da03      	bge.n	800873e <_printf_i+0xd2>
 8008736:	232d      	movs	r3, #45	; 0x2d
 8008738:	4276      	negs	r6, r6
 800873a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800873e:	485a      	ldr	r0, [pc, #360]	; (80088a8 <_printf_i+0x23c>)
 8008740:	230a      	movs	r3, #10
 8008742:	e012      	b.n	800876a <_printf_i+0xfe>
 8008744:	682b      	ldr	r3, [r5, #0]
 8008746:	6820      	ldr	r0, [r4, #0]
 8008748:	1d19      	adds	r1, r3, #4
 800874a:	6029      	str	r1, [r5, #0]
 800874c:	0605      	lsls	r5, r0, #24
 800874e:	d501      	bpl.n	8008754 <_printf_i+0xe8>
 8008750:	681e      	ldr	r6, [r3, #0]
 8008752:	e002      	b.n	800875a <_printf_i+0xee>
 8008754:	0641      	lsls	r1, r0, #25
 8008756:	d5fb      	bpl.n	8008750 <_printf_i+0xe4>
 8008758:	881e      	ldrh	r6, [r3, #0]
 800875a:	4853      	ldr	r0, [pc, #332]	; (80088a8 <_printf_i+0x23c>)
 800875c:	2f6f      	cmp	r7, #111	; 0x6f
 800875e:	bf0c      	ite	eq
 8008760:	2308      	moveq	r3, #8
 8008762:	230a      	movne	r3, #10
 8008764:	2100      	movs	r1, #0
 8008766:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800876a:	6865      	ldr	r5, [r4, #4]
 800876c:	60a5      	str	r5, [r4, #8]
 800876e:	2d00      	cmp	r5, #0
 8008770:	bfa2      	ittt	ge
 8008772:	6821      	ldrge	r1, [r4, #0]
 8008774:	f021 0104 	bicge.w	r1, r1, #4
 8008778:	6021      	strge	r1, [r4, #0]
 800877a:	b90e      	cbnz	r6, 8008780 <_printf_i+0x114>
 800877c:	2d00      	cmp	r5, #0
 800877e:	d04b      	beq.n	8008818 <_printf_i+0x1ac>
 8008780:	4615      	mov	r5, r2
 8008782:	fbb6 f1f3 	udiv	r1, r6, r3
 8008786:	fb03 6711 	mls	r7, r3, r1, r6
 800878a:	5dc7      	ldrb	r7, [r0, r7]
 800878c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008790:	4637      	mov	r7, r6
 8008792:	42bb      	cmp	r3, r7
 8008794:	460e      	mov	r6, r1
 8008796:	d9f4      	bls.n	8008782 <_printf_i+0x116>
 8008798:	2b08      	cmp	r3, #8
 800879a:	d10b      	bne.n	80087b4 <_printf_i+0x148>
 800879c:	6823      	ldr	r3, [r4, #0]
 800879e:	07de      	lsls	r6, r3, #31
 80087a0:	d508      	bpl.n	80087b4 <_printf_i+0x148>
 80087a2:	6923      	ldr	r3, [r4, #16]
 80087a4:	6861      	ldr	r1, [r4, #4]
 80087a6:	4299      	cmp	r1, r3
 80087a8:	bfde      	ittt	le
 80087aa:	2330      	movle	r3, #48	; 0x30
 80087ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 80087b0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80087b4:	1b52      	subs	r2, r2, r5
 80087b6:	6122      	str	r2, [r4, #16]
 80087b8:	f8cd a000 	str.w	sl, [sp]
 80087bc:	464b      	mov	r3, r9
 80087be:	aa03      	add	r2, sp, #12
 80087c0:	4621      	mov	r1, r4
 80087c2:	4640      	mov	r0, r8
 80087c4:	f7ff fee4 	bl	8008590 <_printf_common>
 80087c8:	3001      	adds	r0, #1
 80087ca:	d14a      	bne.n	8008862 <_printf_i+0x1f6>
 80087cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80087d0:	b004      	add	sp, #16
 80087d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087d6:	6823      	ldr	r3, [r4, #0]
 80087d8:	f043 0320 	orr.w	r3, r3, #32
 80087dc:	6023      	str	r3, [r4, #0]
 80087de:	4833      	ldr	r0, [pc, #204]	; (80088ac <_printf_i+0x240>)
 80087e0:	2778      	movs	r7, #120	; 0x78
 80087e2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80087e6:	6823      	ldr	r3, [r4, #0]
 80087e8:	6829      	ldr	r1, [r5, #0]
 80087ea:	061f      	lsls	r7, r3, #24
 80087ec:	f851 6b04 	ldr.w	r6, [r1], #4
 80087f0:	d402      	bmi.n	80087f8 <_printf_i+0x18c>
 80087f2:	065f      	lsls	r7, r3, #25
 80087f4:	bf48      	it	mi
 80087f6:	b2b6      	uxthmi	r6, r6
 80087f8:	07df      	lsls	r7, r3, #31
 80087fa:	bf48      	it	mi
 80087fc:	f043 0320 	orrmi.w	r3, r3, #32
 8008800:	6029      	str	r1, [r5, #0]
 8008802:	bf48      	it	mi
 8008804:	6023      	strmi	r3, [r4, #0]
 8008806:	b91e      	cbnz	r6, 8008810 <_printf_i+0x1a4>
 8008808:	6823      	ldr	r3, [r4, #0]
 800880a:	f023 0320 	bic.w	r3, r3, #32
 800880e:	6023      	str	r3, [r4, #0]
 8008810:	2310      	movs	r3, #16
 8008812:	e7a7      	b.n	8008764 <_printf_i+0xf8>
 8008814:	4824      	ldr	r0, [pc, #144]	; (80088a8 <_printf_i+0x23c>)
 8008816:	e7e4      	b.n	80087e2 <_printf_i+0x176>
 8008818:	4615      	mov	r5, r2
 800881a:	e7bd      	b.n	8008798 <_printf_i+0x12c>
 800881c:	682b      	ldr	r3, [r5, #0]
 800881e:	6826      	ldr	r6, [r4, #0]
 8008820:	6961      	ldr	r1, [r4, #20]
 8008822:	1d18      	adds	r0, r3, #4
 8008824:	6028      	str	r0, [r5, #0]
 8008826:	0635      	lsls	r5, r6, #24
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	d501      	bpl.n	8008830 <_printf_i+0x1c4>
 800882c:	6019      	str	r1, [r3, #0]
 800882e:	e002      	b.n	8008836 <_printf_i+0x1ca>
 8008830:	0670      	lsls	r0, r6, #25
 8008832:	d5fb      	bpl.n	800882c <_printf_i+0x1c0>
 8008834:	8019      	strh	r1, [r3, #0]
 8008836:	2300      	movs	r3, #0
 8008838:	6123      	str	r3, [r4, #16]
 800883a:	4615      	mov	r5, r2
 800883c:	e7bc      	b.n	80087b8 <_printf_i+0x14c>
 800883e:	682b      	ldr	r3, [r5, #0]
 8008840:	1d1a      	adds	r2, r3, #4
 8008842:	602a      	str	r2, [r5, #0]
 8008844:	681d      	ldr	r5, [r3, #0]
 8008846:	6862      	ldr	r2, [r4, #4]
 8008848:	2100      	movs	r1, #0
 800884a:	4628      	mov	r0, r5
 800884c:	f7f7 fcc0 	bl	80001d0 <memchr>
 8008850:	b108      	cbz	r0, 8008856 <_printf_i+0x1ea>
 8008852:	1b40      	subs	r0, r0, r5
 8008854:	6060      	str	r0, [r4, #4]
 8008856:	6863      	ldr	r3, [r4, #4]
 8008858:	6123      	str	r3, [r4, #16]
 800885a:	2300      	movs	r3, #0
 800885c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008860:	e7aa      	b.n	80087b8 <_printf_i+0x14c>
 8008862:	6923      	ldr	r3, [r4, #16]
 8008864:	462a      	mov	r2, r5
 8008866:	4649      	mov	r1, r9
 8008868:	4640      	mov	r0, r8
 800886a:	47d0      	blx	sl
 800886c:	3001      	adds	r0, #1
 800886e:	d0ad      	beq.n	80087cc <_printf_i+0x160>
 8008870:	6823      	ldr	r3, [r4, #0]
 8008872:	079b      	lsls	r3, r3, #30
 8008874:	d413      	bmi.n	800889e <_printf_i+0x232>
 8008876:	68e0      	ldr	r0, [r4, #12]
 8008878:	9b03      	ldr	r3, [sp, #12]
 800887a:	4298      	cmp	r0, r3
 800887c:	bfb8      	it	lt
 800887e:	4618      	movlt	r0, r3
 8008880:	e7a6      	b.n	80087d0 <_printf_i+0x164>
 8008882:	2301      	movs	r3, #1
 8008884:	4632      	mov	r2, r6
 8008886:	4649      	mov	r1, r9
 8008888:	4640      	mov	r0, r8
 800888a:	47d0      	blx	sl
 800888c:	3001      	adds	r0, #1
 800888e:	d09d      	beq.n	80087cc <_printf_i+0x160>
 8008890:	3501      	adds	r5, #1
 8008892:	68e3      	ldr	r3, [r4, #12]
 8008894:	9903      	ldr	r1, [sp, #12]
 8008896:	1a5b      	subs	r3, r3, r1
 8008898:	42ab      	cmp	r3, r5
 800889a:	dcf2      	bgt.n	8008882 <_printf_i+0x216>
 800889c:	e7eb      	b.n	8008876 <_printf_i+0x20a>
 800889e:	2500      	movs	r5, #0
 80088a0:	f104 0619 	add.w	r6, r4, #25
 80088a4:	e7f5      	b.n	8008892 <_printf_i+0x226>
 80088a6:	bf00      	nop
 80088a8:	08008f5d 	.word	0x08008f5d
 80088ac:	08008f6e 	.word	0x08008f6e

080088b0 <__sflush_r>:
 80088b0:	898a      	ldrh	r2, [r1, #12]
 80088b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088b6:	4605      	mov	r5, r0
 80088b8:	0710      	lsls	r0, r2, #28
 80088ba:	460c      	mov	r4, r1
 80088bc:	d458      	bmi.n	8008970 <__sflush_r+0xc0>
 80088be:	684b      	ldr	r3, [r1, #4]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	dc05      	bgt.n	80088d0 <__sflush_r+0x20>
 80088c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	dc02      	bgt.n	80088d0 <__sflush_r+0x20>
 80088ca:	2000      	movs	r0, #0
 80088cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80088d2:	2e00      	cmp	r6, #0
 80088d4:	d0f9      	beq.n	80088ca <__sflush_r+0x1a>
 80088d6:	2300      	movs	r3, #0
 80088d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80088dc:	682f      	ldr	r7, [r5, #0]
 80088de:	6a21      	ldr	r1, [r4, #32]
 80088e0:	602b      	str	r3, [r5, #0]
 80088e2:	d032      	beq.n	800894a <__sflush_r+0x9a>
 80088e4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80088e6:	89a3      	ldrh	r3, [r4, #12]
 80088e8:	075a      	lsls	r2, r3, #29
 80088ea:	d505      	bpl.n	80088f8 <__sflush_r+0x48>
 80088ec:	6863      	ldr	r3, [r4, #4]
 80088ee:	1ac0      	subs	r0, r0, r3
 80088f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80088f2:	b10b      	cbz	r3, 80088f8 <__sflush_r+0x48>
 80088f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80088f6:	1ac0      	subs	r0, r0, r3
 80088f8:	2300      	movs	r3, #0
 80088fa:	4602      	mov	r2, r0
 80088fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80088fe:	6a21      	ldr	r1, [r4, #32]
 8008900:	4628      	mov	r0, r5
 8008902:	47b0      	blx	r6
 8008904:	1c43      	adds	r3, r0, #1
 8008906:	89a3      	ldrh	r3, [r4, #12]
 8008908:	d106      	bne.n	8008918 <__sflush_r+0x68>
 800890a:	6829      	ldr	r1, [r5, #0]
 800890c:	291d      	cmp	r1, #29
 800890e:	d82b      	bhi.n	8008968 <__sflush_r+0xb8>
 8008910:	4a29      	ldr	r2, [pc, #164]	; (80089b8 <__sflush_r+0x108>)
 8008912:	410a      	asrs	r2, r1
 8008914:	07d6      	lsls	r6, r2, #31
 8008916:	d427      	bmi.n	8008968 <__sflush_r+0xb8>
 8008918:	2200      	movs	r2, #0
 800891a:	6062      	str	r2, [r4, #4]
 800891c:	04d9      	lsls	r1, r3, #19
 800891e:	6922      	ldr	r2, [r4, #16]
 8008920:	6022      	str	r2, [r4, #0]
 8008922:	d504      	bpl.n	800892e <__sflush_r+0x7e>
 8008924:	1c42      	adds	r2, r0, #1
 8008926:	d101      	bne.n	800892c <__sflush_r+0x7c>
 8008928:	682b      	ldr	r3, [r5, #0]
 800892a:	b903      	cbnz	r3, 800892e <__sflush_r+0x7e>
 800892c:	6560      	str	r0, [r4, #84]	; 0x54
 800892e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008930:	602f      	str	r7, [r5, #0]
 8008932:	2900      	cmp	r1, #0
 8008934:	d0c9      	beq.n	80088ca <__sflush_r+0x1a>
 8008936:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800893a:	4299      	cmp	r1, r3
 800893c:	d002      	beq.n	8008944 <__sflush_r+0x94>
 800893e:	4628      	mov	r0, r5
 8008940:	f7ff fbf6 	bl	8008130 <_free_r>
 8008944:	2000      	movs	r0, #0
 8008946:	6360      	str	r0, [r4, #52]	; 0x34
 8008948:	e7c0      	b.n	80088cc <__sflush_r+0x1c>
 800894a:	2301      	movs	r3, #1
 800894c:	4628      	mov	r0, r5
 800894e:	47b0      	blx	r6
 8008950:	1c41      	adds	r1, r0, #1
 8008952:	d1c8      	bne.n	80088e6 <__sflush_r+0x36>
 8008954:	682b      	ldr	r3, [r5, #0]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d0c5      	beq.n	80088e6 <__sflush_r+0x36>
 800895a:	2b1d      	cmp	r3, #29
 800895c:	d001      	beq.n	8008962 <__sflush_r+0xb2>
 800895e:	2b16      	cmp	r3, #22
 8008960:	d101      	bne.n	8008966 <__sflush_r+0xb6>
 8008962:	602f      	str	r7, [r5, #0]
 8008964:	e7b1      	b.n	80088ca <__sflush_r+0x1a>
 8008966:	89a3      	ldrh	r3, [r4, #12]
 8008968:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800896c:	81a3      	strh	r3, [r4, #12]
 800896e:	e7ad      	b.n	80088cc <__sflush_r+0x1c>
 8008970:	690f      	ldr	r7, [r1, #16]
 8008972:	2f00      	cmp	r7, #0
 8008974:	d0a9      	beq.n	80088ca <__sflush_r+0x1a>
 8008976:	0793      	lsls	r3, r2, #30
 8008978:	680e      	ldr	r6, [r1, #0]
 800897a:	bf08      	it	eq
 800897c:	694b      	ldreq	r3, [r1, #20]
 800897e:	600f      	str	r7, [r1, #0]
 8008980:	bf18      	it	ne
 8008982:	2300      	movne	r3, #0
 8008984:	eba6 0807 	sub.w	r8, r6, r7
 8008988:	608b      	str	r3, [r1, #8]
 800898a:	f1b8 0f00 	cmp.w	r8, #0
 800898e:	dd9c      	ble.n	80088ca <__sflush_r+0x1a>
 8008990:	6a21      	ldr	r1, [r4, #32]
 8008992:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008994:	4643      	mov	r3, r8
 8008996:	463a      	mov	r2, r7
 8008998:	4628      	mov	r0, r5
 800899a:	47b0      	blx	r6
 800899c:	2800      	cmp	r0, #0
 800899e:	dc06      	bgt.n	80089ae <__sflush_r+0xfe>
 80089a0:	89a3      	ldrh	r3, [r4, #12]
 80089a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089a6:	81a3      	strh	r3, [r4, #12]
 80089a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80089ac:	e78e      	b.n	80088cc <__sflush_r+0x1c>
 80089ae:	4407      	add	r7, r0
 80089b0:	eba8 0800 	sub.w	r8, r8, r0
 80089b4:	e7e9      	b.n	800898a <__sflush_r+0xda>
 80089b6:	bf00      	nop
 80089b8:	dfbffffe 	.word	0xdfbffffe

080089bc <_fflush_r>:
 80089bc:	b538      	push	{r3, r4, r5, lr}
 80089be:	690b      	ldr	r3, [r1, #16]
 80089c0:	4605      	mov	r5, r0
 80089c2:	460c      	mov	r4, r1
 80089c4:	b913      	cbnz	r3, 80089cc <_fflush_r+0x10>
 80089c6:	2500      	movs	r5, #0
 80089c8:	4628      	mov	r0, r5
 80089ca:	bd38      	pop	{r3, r4, r5, pc}
 80089cc:	b118      	cbz	r0, 80089d6 <_fflush_r+0x1a>
 80089ce:	6a03      	ldr	r3, [r0, #32]
 80089d0:	b90b      	cbnz	r3, 80089d6 <_fflush_r+0x1a>
 80089d2:	f7ff fa6f 	bl	8007eb4 <__sinit>
 80089d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d0f3      	beq.n	80089c6 <_fflush_r+0xa>
 80089de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80089e0:	07d0      	lsls	r0, r2, #31
 80089e2:	d404      	bmi.n	80089ee <_fflush_r+0x32>
 80089e4:	0599      	lsls	r1, r3, #22
 80089e6:	d402      	bmi.n	80089ee <_fflush_r+0x32>
 80089e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089ea:	f7ff fb90 	bl	800810e <__retarget_lock_acquire_recursive>
 80089ee:	4628      	mov	r0, r5
 80089f0:	4621      	mov	r1, r4
 80089f2:	f7ff ff5d 	bl	80088b0 <__sflush_r>
 80089f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80089f8:	07da      	lsls	r2, r3, #31
 80089fa:	4605      	mov	r5, r0
 80089fc:	d4e4      	bmi.n	80089c8 <_fflush_r+0xc>
 80089fe:	89a3      	ldrh	r3, [r4, #12]
 8008a00:	059b      	lsls	r3, r3, #22
 8008a02:	d4e1      	bmi.n	80089c8 <_fflush_r+0xc>
 8008a04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a06:	f7ff fb83 	bl	8008110 <__retarget_lock_release_recursive>
 8008a0a:	e7dd      	b.n	80089c8 <_fflush_r+0xc>

08008a0c <__malloc_lock>:
 8008a0c:	4801      	ldr	r0, [pc, #4]	; (8008a14 <__malloc_lock+0x8>)
 8008a0e:	f7ff bb7e 	b.w	800810e <__retarget_lock_acquire_recursive>
 8008a12:	bf00      	nop
 8008a14:	20002618 	.word	0x20002618

08008a18 <__malloc_unlock>:
 8008a18:	4801      	ldr	r0, [pc, #4]	; (8008a20 <__malloc_unlock+0x8>)
 8008a1a:	f7ff bb79 	b.w	8008110 <__retarget_lock_release_recursive>
 8008a1e:	bf00      	nop
 8008a20:	20002618 	.word	0x20002618

08008a24 <__sread>:
 8008a24:	b510      	push	{r4, lr}
 8008a26:	460c      	mov	r4, r1
 8008a28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a2c:	f000 f978 	bl	8008d20 <_read_r>
 8008a30:	2800      	cmp	r0, #0
 8008a32:	bfab      	itete	ge
 8008a34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008a36:	89a3      	ldrhlt	r3, [r4, #12]
 8008a38:	181b      	addge	r3, r3, r0
 8008a3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008a3e:	bfac      	ite	ge
 8008a40:	6563      	strge	r3, [r4, #84]	; 0x54
 8008a42:	81a3      	strhlt	r3, [r4, #12]
 8008a44:	bd10      	pop	{r4, pc}

08008a46 <__swrite>:
 8008a46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a4a:	461f      	mov	r7, r3
 8008a4c:	898b      	ldrh	r3, [r1, #12]
 8008a4e:	05db      	lsls	r3, r3, #23
 8008a50:	4605      	mov	r5, r0
 8008a52:	460c      	mov	r4, r1
 8008a54:	4616      	mov	r6, r2
 8008a56:	d505      	bpl.n	8008a64 <__swrite+0x1e>
 8008a58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a5c:	2302      	movs	r3, #2
 8008a5e:	2200      	movs	r2, #0
 8008a60:	f000 f94c 	bl	8008cfc <_lseek_r>
 8008a64:	89a3      	ldrh	r3, [r4, #12]
 8008a66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a6e:	81a3      	strh	r3, [r4, #12]
 8008a70:	4632      	mov	r2, r6
 8008a72:	463b      	mov	r3, r7
 8008a74:	4628      	mov	r0, r5
 8008a76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a7a:	f000 b973 	b.w	8008d64 <_write_r>

08008a7e <__sseek>:
 8008a7e:	b510      	push	{r4, lr}
 8008a80:	460c      	mov	r4, r1
 8008a82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a86:	f000 f939 	bl	8008cfc <_lseek_r>
 8008a8a:	1c43      	adds	r3, r0, #1
 8008a8c:	89a3      	ldrh	r3, [r4, #12]
 8008a8e:	bf15      	itete	ne
 8008a90:	6560      	strne	r0, [r4, #84]	; 0x54
 8008a92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008a96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008a9a:	81a3      	strheq	r3, [r4, #12]
 8008a9c:	bf18      	it	ne
 8008a9e:	81a3      	strhne	r3, [r4, #12]
 8008aa0:	bd10      	pop	{r4, pc}

08008aa2 <__sclose>:
 8008aa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008aa6:	f000 b8f7 	b.w	8008c98 <_close_r>

08008aaa <__swbuf_r>:
 8008aaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aac:	460e      	mov	r6, r1
 8008aae:	4614      	mov	r4, r2
 8008ab0:	4605      	mov	r5, r0
 8008ab2:	b118      	cbz	r0, 8008abc <__swbuf_r+0x12>
 8008ab4:	6a03      	ldr	r3, [r0, #32]
 8008ab6:	b90b      	cbnz	r3, 8008abc <__swbuf_r+0x12>
 8008ab8:	f7ff f9fc 	bl	8007eb4 <__sinit>
 8008abc:	69a3      	ldr	r3, [r4, #24]
 8008abe:	60a3      	str	r3, [r4, #8]
 8008ac0:	89a3      	ldrh	r3, [r4, #12]
 8008ac2:	071a      	lsls	r2, r3, #28
 8008ac4:	d525      	bpl.n	8008b12 <__swbuf_r+0x68>
 8008ac6:	6923      	ldr	r3, [r4, #16]
 8008ac8:	b31b      	cbz	r3, 8008b12 <__swbuf_r+0x68>
 8008aca:	6823      	ldr	r3, [r4, #0]
 8008acc:	6922      	ldr	r2, [r4, #16]
 8008ace:	1a98      	subs	r0, r3, r2
 8008ad0:	6963      	ldr	r3, [r4, #20]
 8008ad2:	b2f6      	uxtb	r6, r6
 8008ad4:	4283      	cmp	r3, r0
 8008ad6:	4637      	mov	r7, r6
 8008ad8:	dc04      	bgt.n	8008ae4 <__swbuf_r+0x3a>
 8008ada:	4621      	mov	r1, r4
 8008adc:	4628      	mov	r0, r5
 8008ade:	f7ff ff6d 	bl	80089bc <_fflush_r>
 8008ae2:	b9e0      	cbnz	r0, 8008b1e <__swbuf_r+0x74>
 8008ae4:	68a3      	ldr	r3, [r4, #8]
 8008ae6:	3b01      	subs	r3, #1
 8008ae8:	60a3      	str	r3, [r4, #8]
 8008aea:	6823      	ldr	r3, [r4, #0]
 8008aec:	1c5a      	adds	r2, r3, #1
 8008aee:	6022      	str	r2, [r4, #0]
 8008af0:	701e      	strb	r6, [r3, #0]
 8008af2:	6962      	ldr	r2, [r4, #20]
 8008af4:	1c43      	adds	r3, r0, #1
 8008af6:	429a      	cmp	r2, r3
 8008af8:	d004      	beq.n	8008b04 <__swbuf_r+0x5a>
 8008afa:	89a3      	ldrh	r3, [r4, #12]
 8008afc:	07db      	lsls	r3, r3, #31
 8008afe:	d506      	bpl.n	8008b0e <__swbuf_r+0x64>
 8008b00:	2e0a      	cmp	r6, #10
 8008b02:	d104      	bne.n	8008b0e <__swbuf_r+0x64>
 8008b04:	4621      	mov	r1, r4
 8008b06:	4628      	mov	r0, r5
 8008b08:	f7ff ff58 	bl	80089bc <_fflush_r>
 8008b0c:	b938      	cbnz	r0, 8008b1e <__swbuf_r+0x74>
 8008b0e:	4638      	mov	r0, r7
 8008b10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b12:	4621      	mov	r1, r4
 8008b14:	4628      	mov	r0, r5
 8008b16:	f000 f805 	bl	8008b24 <__swsetup_r>
 8008b1a:	2800      	cmp	r0, #0
 8008b1c:	d0d5      	beq.n	8008aca <__swbuf_r+0x20>
 8008b1e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008b22:	e7f4      	b.n	8008b0e <__swbuf_r+0x64>

08008b24 <__swsetup_r>:
 8008b24:	b538      	push	{r3, r4, r5, lr}
 8008b26:	4b2a      	ldr	r3, [pc, #168]	; (8008bd0 <__swsetup_r+0xac>)
 8008b28:	4605      	mov	r5, r0
 8008b2a:	6818      	ldr	r0, [r3, #0]
 8008b2c:	460c      	mov	r4, r1
 8008b2e:	b118      	cbz	r0, 8008b38 <__swsetup_r+0x14>
 8008b30:	6a03      	ldr	r3, [r0, #32]
 8008b32:	b90b      	cbnz	r3, 8008b38 <__swsetup_r+0x14>
 8008b34:	f7ff f9be 	bl	8007eb4 <__sinit>
 8008b38:	89a3      	ldrh	r3, [r4, #12]
 8008b3a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b3e:	0718      	lsls	r0, r3, #28
 8008b40:	d422      	bmi.n	8008b88 <__swsetup_r+0x64>
 8008b42:	06d9      	lsls	r1, r3, #27
 8008b44:	d407      	bmi.n	8008b56 <__swsetup_r+0x32>
 8008b46:	2309      	movs	r3, #9
 8008b48:	602b      	str	r3, [r5, #0]
 8008b4a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008b4e:	81a3      	strh	r3, [r4, #12]
 8008b50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b54:	e034      	b.n	8008bc0 <__swsetup_r+0x9c>
 8008b56:	0758      	lsls	r0, r3, #29
 8008b58:	d512      	bpl.n	8008b80 <__swsetup_r+0x5c>
 8008b5a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b5c:	b141      	cbz	r1, 8008b70 <__swsetup_r+0x4c>
 8008b5e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b62:	4299      	cmp	r1, r3
 8008b64:	d002      	beq.n	8008b6c <__swsetup_r+0x48>
 8008b66:	4628      	mov	r0, r5
 8008b68:	f7ff fae2 	bl	8008130 <_free_r>
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	6363      	str	r3, [r4, #52]	; 0x34
 8008b70:	89a3      	ldrh	r3, [r4, #12]
 8008b72:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008b76:	81a3      	strh	r3, [r4, #12]
 8008b78:	2300      	movs	r3, #0
 8008b7a:	6063      	str	r3, [r4, #4]
 8008b7c:	6923      	ldr	r3, [r4, #16]
 8008b7e:	6023      	str	r3, [r4, #0]
 8008b80:	89a3      	ldrh	r3, [r4, #12]
 8008b82:	f043 0308 	orr.w	r3, r3, #8
 8008b86:	81a3      	strh	r3, [r4, #12]
 8008b88:	6923      	ldr	r3, [r4, #16]
 8008b8a:	b94b      	cbnz	r3, 8008ba0 <__swsetup_r+0x7c>
 8008b8c:	89a3      	ldrh	r3, [r4, #12]
 8008b8e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008b92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b96:	d003      	beq.n	8008ba0 <__swsetup_r+0x7c>
 8008b98:	4621      	mov	r1, r4
 8008b9a:	4628      	mov	r0, r5
 8008b9c:	f000 f840 	bl	8008c20 <__smakebuf_r>
 8008ba0:	89a0      	ldrh	r0, [r4, #12]
 8008ba2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ba6:	f010 0301 	ands.w	r3, r0, #1
 8008baa:	d00a      	beq.n	8008bc2 <__swsetup_r+0x9e>
 8008bac:	2300      	movs	r3, #0
 8008bae:	60a3      	str	r3, [r4, #8]
 8008bb0:	6963      	ldr	r3, [r4, #20]
 8008bb2:	425b      	negs	r3, r3
 8008bb4:	61a3      	str	r3, [r4, #24]
 8008bb6:	6923      	ldr	r3, [r4, #16]
 8008bb8:	b943      	cbnz	r3, 8008bcc <__swsetup_r+0xa8>
 8008bba:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008bbe:	d1c4      	bne.n	8008b4a <__swsetup_r+0x26>
 8008bc0:	bd38      	pop	{r3, r4, r5, pc}
 8008bc2:	0781      	lsls	r1, r0, #30
 8008bc4:	bf58      	it	pl
 8008bc6:	6963      	ldrpl	r3, [r4, #20]
 8008bc8:	60a3      	str	r3, [r4, #8]
 8008bca:	e7f4      	b.n	8008bb6 <__swsetup_r+0x92>
 8008bcc:	2000      	movs	r0, #0
 8008bce:	e7f7      	b.n	8008bc0 <__swsetup_r+0x9c>
 8008bd0:	20000068 	.word	0x20000068

08008bd4 <__swhatbuf_r>:
 8008bd4:	b570      	push	{r4, r5, r6, lr}
 8008bd6:	460c      	mov	r4, r1
 8008bd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bdc:	2900      	cmp	r1, #0
 8008bde:	b096      	sub	sp, #88	; 0x58
 8008be0:	4615      	mov	r5, r2
 8008be2:	461e      	mov	r6, r3
 8008be4:	da0d      	bge.n	8008c02 <__swhatbuf_r+0x2e>
 8008be6:	89a3      	ldrh	r3, [r4, #12]
 8008be8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008bec:	f04f 0100 	mov.w	r1, #0
 8008bf0:	bf0c      	ite	eq
 8008bf2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008bf6:	2340      	movne	r3, #64	; 0x40
 8008bf8:	2000      	movs	r0, #0
 8008bfa:	6031      	str	r1, [r6, #0]
 8008bfc:	602b      	str	r3, [r5, #0]
 8008bfe:	b016      	add	sp, #88	; 0x58
 8008c00:	bd70      	pop	{r4, r5, r6, pc}
 8008c02:	466a      	mov	r2, sp
 8008c04:	f000 f858 	bl	8008cb8 <_fstat_r>
 8008c08:	2800      	cmp	r0, #0
 8008c0a:	dbec      	blt.n	8008be6 <__swhatbuf_r+0x12>
 8008c0c:	9901      	ldr	r1, [sp, #4]
 8008c0e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008c12:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008c16:	4259      	negs	r1, r3
 8008c18:	4159      	adcs	r1, r3
 8008c1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c1e:	e7eb      	b.n	8008bf8 <__swhatbuf_r+0x24>

08008c20 <__smakebuf_r>:
 8008c20:	898b      	ldrh	r3, [r1, #12]
 8008c22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008c24:	079d      	lsls	r5, r3, #30
 8008c26:	4606      	mov	r6, r0
 8008c28:	460c      	mov	r4, r1
 8008c2a:	d507      	bpl.n	8008c3c <__smakebuf_r+0x1c>
 8008c2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008c30:	6023      	str	r3, [r4, #0]
 8008c32:	6123      	str	r3, [r4, #16]
 8008c34:	2301      	movs	r3, #1
 8008c36:	6163      	str	r3, [r4, #20]
 8008c38:	b002      	add	sp, #8
 8008c3a:	bd70      	pop	{r4, r5, r6, pc}
 8008c3c:	ab01      	add	r3, sp, #4
 8008c3e:	466a      	mov	r2, sp
 8008c40:	f7ff ffc8 	bl	8008bd4 <__swhatbuf_r>
 8008c44:	9900      	ldr	r1, [sp, #0]
 8008c46:	4605      	mov	r5, r0
 8008c48:	4630      	mov	r0, r6
 8008c4a:	f7ff fc21 	bl	8008490 <_malloc_r>
 8008c4e:	b948      	cbnz	r0, 8008c64 <__smakebuf_r+0x44>
 8008c50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c54:	059a      	lsls	r2, r3, #22
 8008c56:	d4ef      	bmi.n	8008c38 <__smakebuf_r+0x18>
 8008c58:	f023 0303 	bic.w	r3, r3, #3
 8008c5c:	f043 0302 	orr.w	r3, r3, #2
 8008c60:	81a3      	strh	r3, [r4, #12]
 8008c62:	e7e3      	b.n	8008c2c <__smakebuf_r+0xc>
 8008c64:	89a3      	ldrh	r3, [r4, #12]
 8008c66:	6020      	str	r0, [r4, #0]
 8008c68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c6c:	81a3      	strh	r3, [r4, #12]
 8008c6e:	9b00      	ldr	r3, [sp, #0]
 8008c70:	6163      	str	r3, [r4, #20]
 8008c72:	9b01      	ldr	r3, [sp, #4]
 8008c74:	6120      	str	r0, [r4, #16]
 8008c76:	b15b      	cbz	r3, 8008c90 <__smakebuf_r+0x70>
 8008c78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c7c:	4630      	mov	r0, r6
 8008c7e:	f000 f82d 	bl	8008cdc <_isatty_r>
 8008c82:	b128      	cbz	r0, 8008c90 <__smakebuf_r+0x70>
 8008c84:	89a3      	ldrh	r3, [r4, #12]
 8008c86:	f023 0303 	bic.w	r3, r3, #3
 8008c8a:	f043 0301 	orr.w	r3, r3, #1
 8008c8e:	81a3      	strh	r3, [r4, #12]
 8008c90:	89a3      	ldrh	r3, [r4, #12]
 8008c92:	431d      	orrs	r5, r3
 8008c94:	81a5      	strh	r5, [r4, #12]
 8008c96:	e7cf      	b.n	8008c38 <__smakebuf_r+0x18>

08008c98 <_close_r>:
 8008c98:	b538      	push	{r3, r4, r5, lr}
 8008c9a:	4d06      	ldr	r5, [pc, #24]	; (8008cb4 <_close_r+0x1c>)
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	4604      	mov	r4, r0
 8008ca0:	4608      	mov	r0, r1
 8008ca2:	602b      	str	r3, [r5, #0]
 8008ca4:	f7f8 f99d 	bl	8000fe2 <_close>
 8008ca8:	1c43      	adds	r3, r0, #1
 8008caa:	d102      	bne.n	8008cb2 <_close_r+0x1a>
 8008cac:	682b      	ldr	r3, [r5, #0]
 8008cae:	b103      	cbz	r3, 8008cb2 <_close_r+0x1a>
 8008cb0:	6023      	str	r3, [r4, #0]
 8008cb2:	bd38      	pop	{r3, r4, r5, pc}
 8008cb4:	20002614 	.word	0x20002614

08008cb8 <_fstat_r>:
 8008cb8:	b538      	push	{r3, r4, r5, lr}
 8008cba:	4d07      	ldr	r5, [pc, #28]	; (8008cd8 <_fstat_r+0x20>)
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	4604      	mov	r4, r0
 8008cc0:	4608      	mov	r0, r1
 8008cc2:	4611      	mov	r1, r2
 8008cc4:	602b      	str	r3, [r5, #0]
 8008cc6:	f7f8 f998 	bl	8000ffa <_fstat>
 8008cca:	1c43      	adds	r3, r0, #1
 8008ccc:	d102      	bne.n	8008cd4 <_fstat_r+0x1c>
 8008cce:	682b      	ldr	r3, [r5, #0]
 8008cd0:	b103      	cbz	r3, 8008cd4 <_fstat_r+0x1c>
 8008cd2:	6023      	str	r3, [r4, #0]
 8008cd4:	bd38      	pop	{r3, r4, r5, pc}
 8008cd6:	bf00      	nop
 8008cd8:	20002614 	.word	0x20002614

08008cdc <_isatty_r>:
 8008cdc:	b538      	push	{r3, r4, r5, lr}
 8008cde:	4d06      	ldr	r5, [pc, #24]	; (8008cf8 <_isatty_r+0x1c>)
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	4604      	mov	r4, r0
 8008ce4:	4608      	mov	r0, r1
 8008ce6:	602b      	str	r3, [r5, #0]
 8008ce8:	f7f8 f997 	bl	800101a <_isatty>
 8008cec:	1c43      	adds	r3, r0, #1
 8008cee:	d102      	bne.n	8008cf6 <_isatty_r+0x1a>
 8008cf0:	682b      	ldr	r3, [r5, #0]
 8008cf2:	b103      	cbz	r3, 8008cf6 <_isatty_r+0x1a>
 8008cf4:	6023      	str	r3, [r4, #0]
 8008cf6:	bd38      	pop	{r3, r4, r5, pc}
 8008cf8:	20002614 	.word	0x20002614

08008cfc <_lseek_r>:
 8008cfc:	b538      	push	{r3, r4, r5, lr}
 8008cfe:	4d07      	ldr	r5, [pc, #28]	; (8008d1c <_lseek_r+0x20>)
 8008d00:	4604      	mov	r4, r0
 8008d02:	4608      	mov	r0, r1
 8008d04:	4611      	mov	r1, r2
 8008d06:	2200      	movs	r2, #0
 8008d08:	602a      	str	r2, [r5, #0]
 8008d0a:	461a      	mov	r2, r3
 8008d0c:	f7f8 f990 	bl	8001030 <_lseek>
 8008d10:	1c43      	adds	r3, r0, #1
 8008d12:	d102      	bne.n	8008d1a <_lseek_r+0x1e>
 8008d14:	682b      	ldr	r3, [r5, #0]
 8008d16:	b103      	cbz	r3, 8008d1a <_lseek_r+0x1e>
 8008d18:	6023      	str	r3, [r4, #0]
 8008d1a:	bd38      	pop	{r3, r4, r5, pc}
 8008d1c:	20002614 	.word	0x20002614

08008d20 <_read_r>:
 8008d20:	b538      	push	{r3, r4, r5, lr}
 8008d22:	4d07      	ldr	r5, [pc, #28]	; (8008d40 <_read_r+0x20>)
 8008d24:	4604      	mov	r4, r0
 8008d26:	4608      	mov	r0, r1
 8008d28:	4611      	mov	r1, r2
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	602a      	str	r2, [r5, #0]
 8008d2e:	461a      	mov	r2, r3
 8008d30:	f7f8 f91e 	bl	8000f70 <_read>
 8008d34:	1c43      	adds	r3, r0, #1
 8008d36:	d102      	bne.n	8008d3e <_read_r+0x1e>
 8008d38:	682b      	ldr	r3, [r5, #0]
 8008d3a:	b103      	cbz	r3, 8008d3e <_read_r+0x1e>
 8008d3c:	6023      	str	r3, [r4, #0]
 8008d3e:	bd38      	pop	{r3, r4, r5, pc}
 8008d40:	20002614 	.word	0x20002614

08008d44 <_sbrk_r>:
 8008d44:	b538      	push	{r3, r4, r5, lr}
 8008d46:	4d06      	ldr	r5, [pc, #24]	; (8008d60 <_sbrk_r+0x1c>)
 8008d48:	2300      	movs	r3, #0
 8008d4a:	4604      	mov	r4, r0
 8008d4c:	4608      	mov	r0, r1
 8008d4e:	602b      	str	r3, [r5, #0]
 8008d50:	f7f8 f97c 	bl	800104c <_sbrk>
 8008d54:	1c43      	adds	r3, r0, #1
 8008d56:	d102      	bne.n	8008d5e <_sbrk_r+0x1a>
 8008d58:	682b      	ldr	r3, [r5, #0]
 8008d5a:	b103      	cbz	r3, 8008d5e <_sbrk_r+0x1a>
 8008d5c:	6023      	str	r3, [r4, #0]
 8008d5e:	bd38      	pop	{r3, r4, r5, pc}
 8008d60:	20002614 	.word	0x20002614

08008d64 <_write_r>:
 8008d64:	b538      	push	{r3, r4, r5, lr}
 8008d66:	4d07      	ldr	r5, [pc, #28]	; (8008d84 <_write_r+0x20>)
 8008d68:	4604      	mov	r4, r0
 8008d6a:	4608      	mov	r0, r1
 8008d6c:	4611      	mov	r1, r2
 8008d6e:	2200      	movs	r2, #0
 8008d70:	602a      	str	r2, [r5, #0]
 8008d72:	461a      	mov	r2, r3
 8008d74:	f7f8 f919 	bl	8000faa <_write>
 8008d78:	1c43      	adds	r3, r0, #1
 8008d7a:	d102      	bne.n	8008d82 <_write_r+0x1e>
 8008d7c:	682b      	ldr	r3, [r5, #0]
 8008d7e:	b103      	cbz	r3, 8008d82 <_write_r+0x1e>
 8008d80:	6023      	str	r3, [r4, #0]
 8008d82:	bd38      	pop	{r3, r4, r5, pc}
 8008d84:	20002614 	.word	0x20002614

08008d88 <_init>:
 8008d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d8a:	bf00      	nop
 8008d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d8e:	bc08      	pop	{r3}
 8008d90:	469e      	mov	lr, r3
 8008d92:	4770      	bx	lr

08008d94 <_fini>:
 8008d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d96:	bf00      	nop
 8008d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d9a:	bc08      	pop	{r3}
 8008d9c:	469e      	mov	lr, r3
 8008d9e:	4770      	bx	lr
